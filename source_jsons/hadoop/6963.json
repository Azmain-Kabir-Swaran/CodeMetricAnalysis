{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirectory.java",
  "functionName": "verifyQuota",
  "functionId": "verifyQuota___iip-INodesInPath__pos-int__deltas-QuotaCounts__commonAncestor-INode",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
  "functionStartLine": 1183,
  "functionEndLine": 1208,
  "numCommitsSeen": 777,
  "timeTaken": 13013,
  "changeHistory": [
    "22ef5286bc8511ddee9594b7cecc598bf41a850b",
    "f2231cebcddc80f0b753c4a7cb45ee4040846951",
    "5dae97a584d30cef3e34141edfaca49c4ec57913",
    "5776a41da08af653206bb94d7c76c9c4dcce059a",
    "26d8dec756da1d9bd3df3b41a4dd5d8ff03bc5b2",
    "82ff2d3f2e569879500d851f4d67dfa2d02b5c9b",
    "d46e1608626c64400d2b6c7693a4c035783c55b4",
    "fac3883188d9c4f1fe188d98f88cb3c83b243bbd",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "22ef5286bc8511ddee9594b7cecc598bf41a850b": "Ybodychange",
    "f2231cebcddc80f0b753c4a7cb45ee4040846951": "Ybodychange",
    "5dae97a584d30cef3e34141edfaca49c4ec57913": "Ymultichange(Yparameterchange,Ybodychange)",
    "5776a41da08af653206bb94d7c76c9c4dcce059a": "Ymultichange(Yparameterchange,Ybodychange)",
    "26d8dec756da1d9bd3df3b41a4dd5d8ff03bc5b2": "Ymodifierchange",
    "82ff2d3f2e569879500d851f4d67dfa2d02b5c9b": "Ybodychange",
    "d46e1608626c64400d2b6c7693a4c035783c55b4": "Ybodychange",
    "fac3883188d9c4f1fe188d98f88cb3c83b243bbd": "Ymultichange(Ymodifierchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "22ef5286bc8511ddee9594b7cecc598bf41a850b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10674. Optimize creating a full path from an inode. Contributed by Daryn Sharp.\n",
      "commitDate": "03/08/16 11:12 AM",
      "commitName": "22ef5286bc8511ddee9594b7cecc598bf41a850b",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "29/03/16 1:55 PM",
      "commitNameOld": "ddfe6774c21c8ccf5582a05bb0b58e961bbec309",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 126.89,
      "commitsBetweenForRepo": 956,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,26 @@\n   static void verifyQuota(INodesInPath iip, int pos, QuotaCounts deltas,\n                           INode commonAncestor) throws QuotaExceededException {\n     if (deltas.getNameSpace() \u003c\u003d 0 \u0026\u0026 deltas.getStorageSpace() \u003c\u003d 0\n         \u0026\u0026 deltas.getTypeSpaces().allLessOrEqual(0L)) {\n       // if quota is being freed or not being consumed\n       return;\n     }\n \n     // check existing components in the path\n     for(int i \u003d (pos \u003e iip.length() ? iip.length(): pos) - 1; i \u003e\u003d 0; i--) {\n       if (commonAncestor \u003d\u003d iip.getINode(i)) {\n         // Stop checking for quota when common ancestor is reached\n         return;\n       }\n       final DirectoryWithQuotaFeature q\n           \u003d iip.getINode(i).asDirectory().getDirectoryWithQuotaFeature();\n       if (q !\u003d null) { // a directory with quota\n         try {\n           q.verifyQuota(deltas);\n         } catch (QuotaExceededException e) {\n-          List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n-          final String path \u003d getFullPathName(inodes.toArray(new INode[inodes.size()]), i);\n-          e.setPathName(path);\n+          e.setPathName(iip.getPath(i));\n           throw e;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void verifyQuota(INodesInPath iip, int pos, QuotaCounts deltas,\n                          INode commonAncestor) throws QuotaExceededException {\n    if (deltas.getNameSpace() \u003c\u003d 0 \u0026\u0026 deltas.getStorageSpace() \u003c\u003d 0\n        \u0026\u0026 deltas.getTypeSpaces().allLessOrEqual(0L)) {\n      // if quota is being freed or not being consumed\n      return;\n    }\n\n    // check existing components in the path\n    for(int i \u003d (pos \u003e iip.length() ? iip.length(): pos) - 1; i \u003e\u003d 0; i--) {\n      if (commonAncestor \u003d\u003d iip.getINode(i)) {\n        // Stop checking for quota when common ancestor is reached\n        return;\n      }\n      final DirectoryWithQuotaFeature q\n          \u003d iip.getINode(i).asDirectory().getDirectoryWithQuotaFeature();\n      if (q !\u003d null) { // a directory with quota\n        try {\n          q.verifyQuota(deltas);\n        } catch (QuotaExceededException e) {\n          e.setPathName(iip.getPath(i));\n          throw e;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "f2231cebcddc80f0b753c4a7cb45ee4040846951": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7775. Use consistent naming for NN-internal quota related types and functions. (Contributed bu Xiaoyu Yao)\n",
      "commitDate": "13/02/15 9:01 PM",
      "commitName": "f2231cebcddc80f0b753c4a7cb45ee4040846951",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "11/02/15 10:41 AM",
      "commitNameOld": "5dae97a584d30cef3e34141edfaca49c4ec57913",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 2.43,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   static void verifyQuota(INodesInPath iip, int pos, QuotaCounts deltas,\n                           INode commonAncestor) throws QuotaExceededException {\n-    if (deltas.getNameSpace() \u003c\u003d 0 \u0026\u0026 deltas.getDiskSpace() \u003c\u003d 0\n+    if (deltas.getNameSpace() \u003c\u003d 0 \u0026\u0026 deltas.getStorageSpace() \u003c\u003d 0\n         \u0026\u0026 deltas.getTypeSpaces().allLessOrEqual(0L)) {\n       // if quota is being freed or not being consumed\n       return;\n     }\n \n     // check existing components in the path\n     for(int i \u003d (pos \u003e iip.length() ? iip.length(): pos) - 1; i \u003e\u003d 0; i--) {\n       if (commonAncestor \u003d\u003d iip.getINode(i)) {\n         // Stop checking for quota when common ancestor is reached\n         return;\n       }\n       final DirectoryWithQuotaFeature q\n           \u003d iip.getINode(i).asDirectory().getDirectoryWithQuotaFeature();\n       if (q !\u003d null) { // a directory with quota\n         try {\n           q.verifyQuota(deltas);\n         } catch (QuotaExceededException e) {\n           List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n           final String path \u003d getFullPathName(inodes.toArray(new INode[inodes.size()]), i);\n           e.setPathName(path);\n           throw e;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void verifyQuota(INodesInPath iip, int pos, QuotaCounts deltas,\n                          INode commonAncestor) throws QuotaExceededException {\n    if (deltas.getNameSpace() \u003c\u003d 0 \u0026\u0026 deltas.getStorageSpace() \u003c\u003d 0\n        \u0026\u0026 deltas.getTypeSpaces().allLessOrEqual(0L)) {\n      // if quota is being freed or not being consumed\n      return;\n    }\n\n    // check existing components in the path\n    for(int i \u003d (pos \u003e iip.length() ? iip.length(): pos) - 1; i \u003e\u003d 0; i--) {\n      if (commonAncestor \u003d\u003d iip.getINode(i)) {\n        // Stop checking for quota when common ancestor is reached\n        return;\n      }\n      final DirectoryWithQuotaFeature q\n          \u003d iip.getINode(i).asDirectory().getDirectoryWithQuotaFeature();\n      if (q !\u003d null) { // a directory with quota\n        try {\n          q.verifyQuota(deltas);\n        } catch (QuotaExceededException e) {\n          List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n          final String path \u003d getFullPathName(inodes.toArray(new INode[inodes.size()]), i);\n          e.setPathName(path);\n          throw e;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "5dae97a584d30cef3e34141edfaca49c4ec57913": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "11/02/15 10:41 AM",
      "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/02/15 11:51 AM",
          "commitNameOld": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 2.95,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n-  static void verifyQuota(INodesInPath iip, int pos, long nsDelta,\n-      long dsDelta, INode commonAncestor) throws QuotaExceededException {\n-    if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n+  static void verifyQuota(INodesInPath iip, int pos, QuotaCounts deltas,\n+                          INode commonAncestor) throws QuotaExceededException {\n+    if (deltas.getNameSpace() \u003c\u003d 0 \u0026\u0026 deltas.getDiskSpace() \u003c\u003d 0\n+        \u0026\u0026 deltas.getTypeSpaces().allLessOrEqual(0L)) {\n       // if quota is being freed or not being consumed\n       return;\n     }\n \n     // check existing components in the path\n     for(int i \u003d (pos \u003e iip.length() ? iip.length(): pos) - 1; i \u003e\u003d 0; i--) {\n       if (commonAncestor \u003d\u003d iip.getINode(i)) {\n         // Stop checking for quota when common ancestor is reached\n         return;\n       }\n       final DirectoryWithQuotaFeature q\n           \u003d iip.getINode(i).asDirectory().getDirectoryWithQuotaFeature();\n       if (q !\u003d null) { // a directory with quota\n         try {\n-          q.verifyQuota(nsDelta, dsDelta);\n+          q.verifyQuota(deltas);\n         } catch (QuotaExceededException e) {\n           List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n           final String path \u003d getFullPathName(inodes.toArray(new INode[inodes.size()]), i);\n           e.setPathName(path);\n           throw e;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void verifyQuota(INodesInPath iip, int pos, QuotaCounts deltas,\n                          INode commonAncestor) throws QuotaExceededException {\n    if (deltas.getNameSpace() \u003c\u003d 0 \u0026\u0026 deltas.getDiskSpace() \u003c\u003d 0\n        \u0026\u0026 deltas.getTypeSpaces().allLessOrEqual(0L)) {\n      // if quota is being freed or not being consumed\n      return;\n    }\n\n    // check existing components in the path\n    for(int i \u003d (pos \u003e iip.length() ? iip.length(): pos) - 1; i \u003e\u003d 0; i--) {\n      if (commonAncestor \u003d\u003d iip.getINode(i)) {\n        // Stop checking for quota when common ancestor is reached\n        return;\n      }\n      final DirectoryWithQuotaFeature q\n          \u003d iip.getINode(i).asDirectory().getDirectoryWithQuotaFeature();\n      if (q !\u003d null) { // a directory with quota\n        try {\n          q.verifyQuota(deltas);\n        } catch (QuotaExceededException e) {\n          List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n          final String path \u003d getFullPathName(inodes.toArray(new INode[inodes.size()]), i);\n          e.setPathName(path);\n          throw e;\n        }\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[iip-INodesInPath, pos-int, nsDelta-long, dsDelta-long, commonAncestor-INode]",
            "newValue": "[iip-INodesInPath, pos-int, deltas-QuotaCounts, commonAncestor-INode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/02/15 11:51 AM",
          "commitNameOld": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 2.95,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n-  static void verifyQuota(INodesInPath iip, int pos, long nsDelta,\n-      long dsDelta, INode commonAncestor) throws QuotaExceededException {\n-    if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n+  static void verifyQuota(INodesInPath iip, int pos, QuotaCounts deltas,\n+                          INode commonAncestor) throws QuotaExceededException {\n+    if (deltas.getNameSpace() \u003c\u003d 0 \u0026\u0026 deltas.getDiskSpace() \u003c\u003d 0\n+        \u0026\u0026 deltas.getTypeSpaces().allLessOrEqual(0L)) {\n       // if quota is being freed or not being consumed\n       return;\n     }\n \n     // check existing components in the path\n     for(int i \u003d (pos \u003e iip.length() ? iip.length(): pos) - 1; i \u003e\u003d 0; i--) {\n       if (commonAncestor \u003d\u003d iip.getINode(i)) {\n         // Stop checking for quota when common ancestor is reached\n         return;\n       }\n       final DirectoryWithQuotaFeature q\n           \u003d iip.getINode(i).asDirectory().getDirectoryWithQuotaFeature();\n       if (q !\u003d null) { // a directory with quota\n         try {\n-          q.verifyQuota(nsDelta, dsDelta);\n+          q.verifyQuota(deltas);\n         } catch (QuotaExceededException e) {\n           List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n           final String path \u003d getFullPathName(inodes.toArray(new INode[inodes.size()]), i);\n           e.setPathName(path);\n           throw e;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void verifyQuota(INodesInPath iip, int pos, QuotaCounts deltas,\n                          INode commonAncestor) throws QuotaExceededException {\n    if (deltas.getNameSpace() \u003c\u003d 0 \u0026\u0026 deltas.getDiskSpace() \u003c\u003d 0\n        \u0026\u0026 deltas.getTypeSpaces().allLessOrEqual(0L)) {\n      // if quota is being freed or not being consumed\n      return;\n    }\n\n    // check existing components in the path\n    for(int i \u003d (pos \u003e iip.length() ? iip.length(): pos) - 1; i \u003e\u003d 0; i--) {\n      if (commonAncestor \u003d\u003d iip.getINode(i)) {\n        // Stop checking for quota when common ancestor is reached\n        return;\n      }\n      final DirectoryWithQuotaFeature q\n          \u003d iip.getINode(i).asDirectory().getDirectoryWithQuotaFeature();\n      if (q !\u003d null) { // a directory with quota\n        try {\n          q.verifyQuota(deltas);\n        } catch (QuotaExceededException e) {\n          List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n          final String path \u003d getFullPathName(inodes.toArray(new INode[inodes.size()]), i);\n          e.setPathName(path);\n          throw e;\n        }\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "5776a41da08af653206bb94d7c76c9c4dcce059a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7498. Simplify the logic in INodesInPath. Contributed by Jing Zhao.\n",
      "commitDate": "09/12/14 11:37 AM",
      "commitName": "5776a41da08af653206bb94d7c76c9c4dcce059a",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7498. Simplify the logic in INodesInPath. Contributed by Jing Zhao.\n",
          "commitDate": "09/12/14 11:37 AM",
          "commitName": "5776a41da08af653206bb94d7c76c9c4dcce059a",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "08/12/14 11:52 AM",
          "commitNameOld": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,27 @@\n-  static void verifyQuota(INode[] inodes, int pos, long nsDelta,\n+  static void verifyQuota(INodesInPath iip, int pos, long nsDelta,\n       long dsDelta, INode commonAncestor) throws QuotaExceededException {\n     if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n       // if quota is being freed or not being consumed\n       return;\n     }\n \n     // check existing components in the path\n-    for(int i \u003d (pos \u003e inodes.length? inodes.length: pos) - 1; i \u003e\u003d 0; i--) {\n-      if (commonAncestor \u003d\u003d inodes[i]) {\n+    for(int i \u003d (pos \u003e iip.length() ? iip.length(): pos) - 1; i \u003e\u003d 0; i--) {\n+      if (commonAncestor \u003d\u003d iip.getINode(i)) {\n         // Stop checking for quota when common ancestor is reached\n         return;\n       }\n       final DirectoryWithQuotaFeature q\n-          \u003d inodes[i].asDirectory().getDirectoryWithQuotaFeature();\n+          \u003d iip.getINode(i).asDirectory().getDirectoryWithQuotaFeature();\n       if (q !\u003d null) { // a directory with quota\n         try {\n           q.verifyQuota(nsDelta, dsDelta);\n         } catch (QuotaExceededException e) {\n-          e.setPathName(getFullPathName(inodes, i));\n+          List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n+          final String path \u003d getFullPathName(inodes.toArray(new INode[inodes.size()]), i);\n+          e.setPathName(path);\n           throw e;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void verifyQuota(INodesInPath iip, int pos, long nsDelta,\n      long dsDelta, INode commonAncestor) throws QuotaExceededException {\n    if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n      // if quota is being freed or not being consumed\n      return;\n    }\n\n    // check existing components in the path\n    for(int i \u003d (pos \u003e iip.length() ? iip.length(): pos) - 1; i \u003e\u003d 0; i--) {\n      if (commonAncestor \u003d\u003d iip.getINode(i)) {\n        // Stop checking for quota when common ancestor is reached\n        return;\n      }\n      final DirectoryWithQuotaFeature q\n          \u003d iip.getINode(i).asDirectory().getDirectoryWithQuotaFeature();\n      if (q !\u003d null) { // a directory with quota\n        try {\n          q.verifyQuota(nsDelta, dsDelta);\n        } catch (QuotaExceededException e) {\n          List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n          final String path \u003d getFullPathName(inodes.toArray(new INode[inodes.size()]), i);\n          e.setPathName(path);\n          throw e;\n        }\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[inodes-INode[], pos-int, nsDelta-long, dsDelta-long, commonAncestor-INode]",
            "newValue": "[iip-INodesInPath, pos-int, nsDelta-long, dsDelta-long, commonAncestor-INode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7498. Simplify the logic in INodesInPath. Contributed by Jing Zhao.\n",
          "commitDate": "09/12/14 11:37 AM",
          "commitName": "5776a41da08af653206bb94d7c76c9c4dcce059a",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "08/12/14 11:52 AM",
          "commitNameOld": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,27 @@\n-  static void verifyQuota(INode[] inodes, int pos, long nsDelta,\n+  static void verifyQuota(INodesInPath iip, int pos, long nsDelta,\n       long dsDelta, INode commonAncestor) throws QuotaExceededException {\n     if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n       // if quota is being freed or not being consumed\n       return;\n     }\n \n     // check existing components in the path\n-    for(int i \u003d (pos \u003e inodes.length? inodes.length: pos) - 1; i \u003e\u003d 0; i--) {\n-      if (commonAncestor \u003d\u003d inodes[i]) {\n+    for(int i \u003d (pos \u003e iip.length() ? iip.length(): pos) - 1; i \u003e\u003d 0; i--) {\n+      if (commonAncestor \u003d\u003d iip.getINode(i)) {\n         // Stop checking for quota when common ancestor is reached\n         return;\n       }\n       final DirectoryWithQuotaFeature q\n-          \u003d inodes[i].asDirectory().getDirectoryWithQuotaFeature();\n+          \u003d iip.getINode(i).asDirectory().getDirectoryWithQuotaFeature();\n       if (q !\u003d null) { // a directory with quota\n         try {\n           q.verifyQuota(nsDelta, dsDelta);\n         } catch (QuotaExceededException e) {\n-          e.setPathName(getFullPathName(inodes, i));\n+          List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n+          final String path \u003d getFullPathName(inodes.toArray(new INode[inodes.size()]), i);\n+          e.setPathName(path);\n           throw e;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void verifyQuota(INodesInPath iip, int pos, long nsDelta,\n      long dsDelta, INode commonAncestor) throws QuotaExceededException {\n    if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n      // if quota is being freed or not being consumed\n      return;\n    }\n\n    // check existing components in the path\n    for(int i \u003d (pos \u003e iip.length() ? iip.length(): pos) - 1; i \u003e\u003d 0; i--) {\n      if (commonAncestor \u003d\u003d iip.getINode(i)) {\n        // Stop checking for quota when common ancestor is reached\n        return;\n      }\n      final DirectoryWithQuotaFeature q\n          \u003d iip.getINode(i).asDirectory().getDirectoryWithQuotaFeature();\n      if (q !\u003d null) { // a directory with quota\n        try {\n          q.verifyQuota(nsDelta, dsDelta);\n        } catch (QuotaExceededException e) {\n          List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n          final String path \u003d getFullPathName(inodes.toArray(new INode[inodes.size()]), i);\n          e.setPathName(path);\n          throw e;\n        }\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "26d8dec756da1d9bd3df3b41a4dd5d8ff03bc5b2": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-7468. Moving verify* functions to corresponding classes. Contributed by Li Lu.\n",
      "commitDate": "04/12/14 2:09 PM",
      "commitName": "26d8dec756da1d9bd3df3b41a4dd5d8ff03bc5b2",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "02/12/14 2:53 PM",
      "commitNameOld": "185e0c7b4c056b88f606362c71e4a22aae7076e0",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.97,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n-  private static void verifyQuota(INode[] inodes, int pos, long nsDelta,\n+  static void verifyQuota(INode[] inodes, int pos, long nsDelta,\n       long dsDelta, INode commonAncestor) throws QuotaExceededException {\n     if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n       // if quota is being freed or not being consumed\n       return;\n     }\n \n     // check existing components in the path\n     for(int i \u003d (pos \u003e inodes.length? inodes.length: pos) - 1; i \u003e\u003d 0; i--) {\n       if (commonAncestor \u003d\u003d inodes[i]) {\n         // Stop checking for quota when common ancestor is reached\n         return;\n       }\n       final DirectoryWithQuotaFeature q\n           \u003d inodes[i].asDirectory().getDirectoryWithQuotaFeature();\n       if (q !\u003d null) { // a directory with quota\n         try {\n           q.verifyQuota(nsDelta, dsDelta);\n         } catch (QuotaExceededException e) {\n           e.setPathName(getFullPathName(inodes, i));\n           throw e;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void verifyQuota(INode[] inodes, int pos, long nsDelta,\n      long dsDelta, INode commonAncestor) throws QuotaExceededException {\n    if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n      // if quota is being freed or not being consumed\n      return;\n    }\n\n    // check existing components in the path\n    for(int i \u003d (pos \u003e inodes.length? inodes.length: pos) - 1; i \u003e\u003d 0; i--) {\n      if (commonAncestor \u003d\u003d inodes[i]) {\n        // Stop checking for quota when common ancestor is reached\n        return;\n      }\n      final DirectoryWithQuotaFeature q\n          \u003d inodes[i].asDirectory().getDirectoryWithQuotaFeature();\n      if (q !\u003d null) { // a directory with quota\n        try {\n          q.verifyQuota(nsDelta, dsDelta);\n        } catch (QuotaExceededException e) {\n          e.setPathName(getFullPathName(inodes, i));\n          throw e;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {
        "oldValue": "[private, static]",
        "newValue": "[static]"
      }
    },
    "82ff2d3f2e569879500d851f4d67dfa2d02b5c9b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5286. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithQuota with DirectoryWithQuotaFeature.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1545768 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/11/13 10:33 AM",
      "commitName": "82ff2d3f2e569879500d851f4d67dfa2d02b5c9b",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "21/11/13 5:39 PM",
      "commitNameOld": "ce68f410b05a58ad05965f32ad7f5b246b363a75",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 4.7,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   private static void verifyQuota(INode[] inodes, int pos, long nsDelta,\n       long dsDelta, INode commonAncestor) throws QuotaExceededException {\n     if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n       // if quota is being freed or not being consumed\n       return;\n     }\n \n     // check existing components in the path\n     for(int i \u003d (pos \u003e inodes.length? inodes.length: pos) - 1; i \u003e\u003d 0; i--) {\n       if (commonAncestor \u003d\u003d inodes[i]) {\n         // Stop checking for quota when common ancestor is reached\n         return;\n       }\n-      if (inodes[i].isQuotaSet()) { // a directory with quota\n+      final DirectoryWithQuotaFeature q\n+          \u003d inodes[i].asDirectory().getDirectoryWithQuotaFeature();\n+      if (q !\u003d null) { // a directory with quota\n         try {\n-          ((INodeDirectoryWithQuota) inodes[i].asDirectory()).verifyQuota(\n-              nsDelta, dsDelta);\n+          q.verifyQuota(nsDelta, dsDelta);\n         } catch (QuotaExceededException e) {\n           e.setPathName(getFullPathName(inodes, i));\n           throw e;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void verifyQuota(INode[] inodes, int pos, long nsDelta,\n      long dsDelta, INode commonAncestor) throws QuotaExceededException {\n    if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n      // if quota is being freed or not being consumed\n      return;\n    }\n\n    // check existing components in the path\n    for(int i \u003d (pos \u003e inodes.length? inodes.length: pos) - 1; i \u003e\u003d 0; i--) {\n      if (commonAncestor \u003d\u003d inodes[i]) {\n        // Stop checking for quota when common ancestor is reached\n        return;\n      }\n      final DirectoryWithQuotaFeature q\n          \u003d inodes[i].asDirectory().getDirectoryWithQuotaFeature();\n      if (q !\u003d null) { // a directory with quota\n        try {\n          q.verifyQuota(nsDelta, dsDelta);\n        } catch (QuotaExceededException e) {\n          e.setPathName(getFullPathName(inodes, i));\n          throw e;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "d46e1608626c64400d2b6c7693a4c035783c55b4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4877. Snapshot: fix the scenario where a directory is renamed under its prior descendant. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490421 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/13 1:15 PM",
      "commitName": "d46e1608626c64400d2b6c7693a4c035783c55b4",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "30/05/13 10:26 AM",
      "commitNameOld": "bf99961d67bf59dad6a861655407f9e0a5f21aa5",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 7.12,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   private static void verifyQuota(INode[] inodes, int pos, long nsDelta,\n       long dsDelta, INode commonAncestor) throws QuotaExceededException {\n     if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n       // if quota is being freed or not being consumed\n       return;\n     }\n \n     // check existing components in the path\n     for(int i \u003d (pos \u003e inodes.length? inodes.length: pos) - 1; i \u003e\u003d 0; i--) {\n       if (commonAncestor \u003d\u003d inodes[i]) {\n         // Stop checking for quota when common ancestor is reached\n         return;\n       }\n       if (inodes[i].isQuotaSet()) { // a directory with quota\n         try {\n-          ((INodeDirectoryWithQuota)inodes[i]).verifyQuota(nsDelta, dsDelta);\n+          ((INodeDirectoryWithQuota) inodes[i].asDirectory()).verifyQuota(\n+              nsDelta, dsDelta);\n         } catch (QuotaExceededException e) {\n           e.setPathName(getFullPathName(inodes, i));\n           throw e;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void verifyQuota(INode[] inodes, int pos, long nsDelta,\n      long dsDelta, INode commonAncestor) throws QuotaExceededException {\n    if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n      // if quota is being freed or not being consumed\n      return;\n    }\n\n    // check existing components in the path\n    for(int i \u003d (pos \u003e inodes.length? inodes.length: pos) - 1; i \u003e\u003d 0; i--) {\n      if (commonAncestor \u003d\u003d inodes[i]) {\n        // Stop checking for quota when common ancestor is reached\n        return;\n      }\n      if (inodes[i].isQuotaSet()) { // a directory with quota\n        try {\n          ((INodeDirectoryWithQuota) inodes[i].asDirectory()).verifyQuota(\n              nsDelta, dsDelta);\n        } catch (QuotaExceededException e) {\n          e.setPathName(getFullPathName(inodes, i));\n          throw e;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "fac3883188d9c4f1fe188d98f88cb3c83b243bbd": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-4503. Update computeContentSummary(..), spaceConsumedInTree(..) and diskspaceConsumed(..) in INode for snapshot.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1448373 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/02/13 12:02 PM",
      "commitName": "fac3883188d9c4f1fe188d98f88cb3c83b243bbd",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-4503. Update computeContentSummary(..), spaceConsumedInTree(..) and diskspaceConsumed(..) in INode for snapshot.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1448373 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/02/13 12:02 PM",
          "commitName": "fac3883188d9c4f1fe188d98f88cb3c83b243bbd",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "14/02/13 3:07 PM",
          "commitNameOld": "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 5.87,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,23 @@\n-  private void verifyQuota(INode[] inodes, int pos, long nsDelta, long dsDelta,\n-      INode commonAncestor) throws QuotaExceededException {\n-    if (!ready) {\n-      // Do not check quota if edits log is still being processed\n-      return;\n-    }\n+  private static void verifyQuota(INode[] inodes, int pos, long nsDelta,\n+      long dsDelta, INode commonAncestor) throws QuotaExceededException {\n     if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n       // if quota is being freed or not being consumed\n       return;\n     }\n-    if (pos\u003einodes.length) {\n-      pos \u003d inodes.length;\n-    }\n-    int i \u003d pos - 1;\n-    try {\n-      // check existing components in the path  \n-      for(; i \u003e\u003d 0; i--) {\n-        if (commonAncestor \u003d\u003d inodes[i]) {\n-          // Moving an existing node. Stop checking for quota when common\n-          // ancestor is reached\n-          return;\n-        }\n-        if (inodes[i].isQuotaSet()) { // a directory with quota\n-          INodeDirectoryWithQuota node \u003d(INodeDirectoryWithQuota)inodes[i]; \n-          node.verifyQuota(nsDelta, dsDelta);\n+\n+    // check existing components in the path\n+    for(int i \u003d (pos \u003e inodes.length? inodes.length: pos) - 1; i \u003e\u003d 0; i--) {\n+      if (commonAncestor \u003d\u003d inodes[i]) {\n+        // Stop checking for quota when common ancestor is reached\n+        return;\n+      }\n+      if (inodes[i].isQuotaSet()) { // a directory with quota\n+        try {\n+          ((INodeDirectoryWithQuota)inodes[i]).verifyQuota(nsDelta, dsDelta);\n+        } catch (QuotaExceededException e) {\n+          e.setPathName(getFullPathName(inodes, i));\n+          throw e;\n         }\n       }\n-    } catch (QuotaExceededException e) {\n-      e.setPathName(getFullPathName(inodes, i));\n-      throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void verifyQuota(INode[] inodes, int pos, long nsDelta,\n      long dsDelta, INode commonAncestor) throws QuotaExceededException {\n    if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n      // if quota is being freed or not being consumed\n      return;\n    }\n\n    // check existing components in the path\n    for(int i \u003d (pos \u003e inodes.length? inodes.length: pos) - 1; i \u003e\u003d 0; i--) {\n      if (commonAncestor \u003d\u003d inodes[i]) {\n        // Stop checking for quota when common ancestor is reached\n        return;\n      }\n      if (inodes[i].isQuotaSet()) { // a directory with quota\n        try {\n          ((INodeDirectoryWithQuota)inodes[i]).verifyQuota(nsDelta, dsDelta);\n        } catch (QuotaExceededException e) {\n          e.setPathName(getFullPathName(inodes, i));\n          throw e;\n        }\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4503. Update computeContentSummary(..), spaceConsumedInTree(..) and diskspaceConsumed(..) in INode for snapshot.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1448373 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/02/13 12:02 PM",
          "commitName": "fac3883188d9c4f1fe188d98f88cb3c83b243bbd",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "14/02/13 3:07 PM",
          "commitNameOld": "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 5.87,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,23 @@\n-  private void verifyQuota(INode[] inodes, int pos, long nsDelta, long dsDelta,\n-      INode commonAncestor) throws QuotaExceededException {\n-    if (!ready) {\n-      // Do not check quota if edits log is still being processed\n-      return;\n-    }\n+  private static void verifyQuota(INode[] inodes, int pos, long nsDelta,\n+      long dsDelta, INode commonAncestor) throws QuotaExceededException {\n     if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n       // if quota is being freed or not being consumed\n       return;\n     }\n-    if (pos\u003einodes.length) {\n-      pos \u003d inodes.length;\n-    }\n-    int i \u003d pos - 1;\n-    try {\n-      // check existing components in the path  \n-      for(; i \u003e\u003d 0; i--) {\n-        if (commonAncestor \u003d\u003d inodes[i]) {\n-          // Moving an existing node. Stop checking for quota when common\n-          // ancestor is reached\n-          return;\n-        }\n-        if (inodes[i].isQuotaSet()) { // a directory with quota\n-          INodeDirectoryWithQuota node \u003d(INodeDirectoryWithQuota)inodes[i]; \n-          node.verifyQuota(nsDelta, dsDelta);\n+\n+    // check existing components in the path\n+    for(int i \u003d (pos \u003e inodes.length? inodes.length: pos) - 1; i \u003e\u003d 0; i--) {\n+      if (commonAncestor \u003d\u003d inodes[i]) {\n+        // Stop checking for quota when common ancestor is reached\n+        return;\n+      }\n+      if (inodes[i].isQuotaSet()) { // a directory with quota\n+        try {\n+          ((INodeDirectoryWithQuota)inodes[i]).verifyQuota(nsDelta, dsDelta);\n+        } catch (QuotaExceededException e) {\n+          e.setPathName(getFullPathName(inodes, i));\n+          throw e;\n         }\n       }\n-    } catch (QuotaExceededException e) {\n-      e.setPathName(getFullPathName(inodes, i));\n-      throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void verifyQuota(INode[] inodes, int pos, long nsDelta,\n      long dsDelta, INode commonAncestor) throws QuotaExceededException {\n    if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n      // if quota is being freed or not being consumed\n      return;\n    }\n\n    // check existing components in the path\n    for(int i \u003d (pos \u003e inodes.length? inodes.length: pos) - 1; i \u003e\u003d 0; i--) {\n      if (commonAncestor \u003d\u003d inodes[i]) {\n        // Stop checking for quota when common ancestor is reached\n        return;\n      }\n      if (inodes[i].isQuotaSet()) { // a directory with quota\n        try {\n          ((INodeDirectoryWithQuota)inodes[i]).verifyQuota(nsDelta, dsDelta);\n        } catch (QuotaExceededException e) {\n          e.setPathName(getFullPathName(inodes, i));\n          throw e;\n        }\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void verifyQuota(INode[] inodes, int pos, long nsDelta, long dsDelta,\n      INode commonAncestor) throws QuotaExceededException {\n    if (!ready) {\n      // Do not check quota if edits log is still being processed\n      return;\n    }\n    if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n      // if quota is being freed or not being consumed\n      return;\n    }\n    if (pos\u003einodes.length) {\n      pos \u003d inodes.length;\n    }\n    int i \u003d pos - 1;\n    try {\n      // check existing components in the path  \n      for(; i \u003e\u003d 0; i--) {\n        if (commonAncestor \u003d\u003d inodes[i]) {\n          // Moving an existing node. Stop checking for quota when common\n          // ancestor is reached\n          return;\n        }\n        if (inodes[i].isQuotaSet()) { // a directory with quota\n          INodeDirectoryWithQuota node \u003d(INodeDirectoryWithQuota)inodes[i]; \n          node.verifyQuota(nsDelta, dsDelta);\n        }\n      }\n    } catch (QuotaExceededException e) {\n      e.setPathName(getFullPathName(inodes, i));\n      throw e;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void verifyQuota(INode[] inodes, int pos, long nsDelta, long dsDelta,\n      INode commonAncestor) throws QuotaExceededException {\n    if (!ready) {\n      // Do not check quota if edits log is still being processed\n      return;\n    }\n    if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n      // if quota is being freed or not being consumed\n      return;\n    }\n    if (pos\u003einodes.length) {\n      pos \u003d inodes.length;\n    }\n    int i \u003d pos - 1;\n    try {\n      // check existing components in the path  \n      for(; i \u003e\u003d 0; i--) {\n        if (commonAncestor \u003d\u003d inodes[i]) {\n          // Moving an existing node. Stop checking for quota when common\n          // ancestor is reached\n          return;\n        }\n        if (inodes[i].isQuotaSet()) { // a directory with quota\n          INodeDirectoryWithQuota node \u003d(INodeDirectoryWithQuota)inodes[i]; \n          node.verifyQuota(nsDelta, dsDelta);\n        }\n      }\n    } catch (QuotaExceededException e) {\n      e.setPathName(getFullPathName(inodes, i));\n      throw e;\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,32 @@\n+  private void verifyQuota(INode[] inodes, int pos, long nsDelta, long dsDelta,\n+      INode commonAncestor) throws QuotaExceededException {\n+    if (!ready) {\n+      // Do not check quota if edits log is still being processed\n+      return;\n+    }\n+    if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n+      // if quota is being freed or not being consumed\n+      return;\n+    }\n+    if (pos\u003einodes.length) {\n+      pos \u003d inodes.length;\n+    }\n+    int i \u003d pos - 1;\n+    try {\n+      // check existing components in the path  \n+      for(; i \u003e\u003d 0; i--) {\n+        if (commonAncestor \u003d\u003d inodes[i]) {\n+          // Moving an existing node. Stop checking for quota when common\n+          // ancestor is reached\n+          return;\n+        }\n+        if (inodes[i].isQuotaSet()) { // a directory with quota\n+          INodeDirectoryWithQuota node \u003d(INodeDirectoryWithQuota)inodes[i]; \n+          node.verifyQuota(nsDelta, dsDelta);\n+        }\n+      }\n+    } catch (QuotaExceededException e) {\n+      e.setPathName(getFullPathName(inodes, i));\n+      throw e;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void verifyQuota(INode[] inodes, int pos, long nsDelta, long dsDelta,\n      INode commonAncestor) throws QuotaExceededException {\n    if (!ready) {\n      // Do not check quota if edits log is still being processed\n      return;\n    }\n    if (nsDelta \u003c\u003d 0 \u0026\u0026 dsDelta \u003c\u003d 0) {\n      // if quota is being freed or not being consumed\n      return;\n    }\n    if (pos\u003einodes.length) {\n      pos \u003d inodes.length;\n    }\n    int i \u003d pos - 1;\n    try {\n      // check existing components in the path  \n      for(; i \u003e\u003d 0; i--) {\n        if (commonAncestor \u003d\u003d inodes[i]) {\n          // Moving an existing node. Stop checking for quota when common\n          // ancestor is reached\n          return;\n        }\n        if (inodes[i].isQuotaSet()) { // a directory with quota\n          INodeDirectoryWithQuota node \u003d(INodeDirectoryWithQuota)inodes[i]; \n          node.verifyQuota(nsDelta, dsDelta);\n        }\n      }\n    } catch (QuotaExceededException e) {\n      e.setPathName(getFullPathName(inodes, i));\n      throw e;\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java"
    }
  }
}