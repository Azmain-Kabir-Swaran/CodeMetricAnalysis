{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebHdfsFileSystem.java",
  "functionName": "getDelegationToken",
  "functionId": "getDelegationToken",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
  "functionStartLine": 360,
  "functionEndLine": 384,
  "numCommitsSeen": 179,
  "timeTaken": 5922,
  "changeHistory": [
    "d78854b928bb877f26b11b5b212a100a79941f35",
    "d22c4239a40a1c7ed49c06038138f0e3f387b4a0",
    "576b569b6c97bd5f57e52efdabdf8c2fa996a524",
    "832b3cbde1c2f77b04c93188e3a94420974090cf",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "122cad6aec5839d8d515c5008425ecb34f2fa56b",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
    "ed72daa5df97669906234e8ac9a406d78136b206",
    "0c5128969522cf754010c32cdcbfcfa5ebe5b3b0",
    "620890fcc0fb8680a3ad282b0b7b969277deb766",
    "d027b947d62b0193a1c579d8f92047b669f6192b",
    "94a22114b9f5ebc59dd83e4d164472bb710fee53"
  ],
  "changeHistoryShort": {
    "d78854b928bb877f26b11b5b212a100a79941f35": "Ybodychange",
    "d22c4239a40a1c7ed49c06038138f0e3f387b4a0": "Ybodychange",
    "576b569b6c97bd5f57e52efdabdf8c2fa996a524": "Ybodychange",
    "832b3cbde1c2f77b04c93188e3a94420974090cf": "Ybodychange",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "122cad6aec5839d8d515c5008425ecb34f2fa56b": "Ybodychange",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": "Yfilerename",
    "ed72daa5df97669906234e8ac9a406d78136b206": "Ybodychange",
    "0c5128969522cf754010c32cdcbfcfa5ebe5b3b0": "Ybodychange",
    "620890fcc0fb8680a3ad282b0b7b969277deb766": "Ybodychange",
    "d027b947d62b0193a1c579d8f92047b669f6192b": "Ybodychange",
    "94a22114b9f5ebc59dd83e4d164472bb710fee53": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d78854b928bb877f26b11b5b212a100a79941f35": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14434.  Ignore user.name query parameter in secure WebHDFS.\n             Contributed by KWON BYUNGCHANG\n",
      "commitDate": "28/05/19 2:31 PM",
      "commitName": "d78854b928bb877f26b11b5b212a100a79941f35",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "17/05/19 10:20 AM",
      "commitNameOld": "3e5e5b028ad7e199d08e524fe7cddeee5db51a6d",
      "commitAuthorOld": "Srinivasu Majeti",
      "daysBetweenCommits": 11.17,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n     if (delegationToken \u003d\u003d null) {\n       Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n           new Text(getCanonicalServiceName()), ugi.getTokens());\n       // ugi tokens are usually indicative of a task which can\u0027t\n       // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n       // to get another token to match hdfs/rpc behavior\n       if (token !\u003d null) {\n         LOG.debug(\"Using UGI token: {}\", token);\n         canRefreshDelegationToken \u003d false;\n       } else {\n         if (canRefreshDelegationToken) {\n           token \u003d getDelegationToken(null);\n           if (token !\u003d null) {\n             LOG.debug(\"Fetched new token: {}\", token);\n           } else { // security is disabled\n             canRefreshDelegationToken \u003d false;\n+            isInsecureCluster \u003d true;\n           }\n         }\n       }\n       setDelegationToken(token);\n     }\n     return delegationToken;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n    if (delegationToken \u003d\u003d null) {\n      Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n          new Text(getCanonicalServiceName()), ugi.getTokens());\n      // ugi tokens are usually indicative of a task which can\u0027t\n      // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n      // to get another token to match hdfs/rpc behavior\n      if (token !\u003d null) {\n        LOG.debug(\"Using UGI token: {}\", token);\n        canRefreshDelegationToken \u003d false;\n      } else {\n        if (canRefreshDelegationToken) {\n          token \u003d getDelegationToken(null);\n          if (token !\u003d null) {\n            LOG.debug(\"Fetched new token: {}\", token);\n          } else { // security is disabled\n            canRefreshDelegationToken \u003d false;\n            isInsecureCluster \u003d true;\n          }\n        }\n      }\n      setDelegationToken(token);\n    }\n    return delegationToken;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "d22c4239a40a1c7ed49c06038138f0e3f387b4a0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9525. hadoop utilities need to support provided delegation tokens (HeeSoo Kim via aw)\n",
      "commitDate": "22/01/16 12:15 PM",
      "commitName": "d22c4239a40a1c7ed49c06038138f0e3f387b4a0",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "21/01/16 7:32 AM",
      "commitNameOld": "3616c7b855962014750a3259a64c6e2a147da884",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.2,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,24 @@\n   protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n-    if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n+    if (delegationToken \u003d\u003d null) {\n       Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n           new Text(getCanonicalServiceName()), ugi.getTokens());\n       // ugi tokens are usually indicative of a task which can\u0027t\n       // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n       // to get another token to match hdfs/rpc behavior\n       if (token !\u003d null) {\n         LOG.debug(\"Using UGI token: {}\", token);\n         canRefreshDelegationToken \u003d false;\n       } else {\n-        token \u003d getDelegationToken(null);\n-        if (token !\u003d null) {\n-          LOG.debug(\"Fetched new token: {}\", token);\n-        } else { // security is disabled\n-          canRefreshDelegationToken \u003d false;\n+        if (canRefreshDelegationToken) {\n+          token \u003d getDelegationToken(null);\n+          if (token !\u003d null) {\n+            LOG.debug(\"Fetched new token: {}\", token);\n+          } else { // security is disabled\n+            canRefreshDelegationToken \u003d false;\n+          }\n         }\n       }\n       setDelegationToken(token);\n     }\n     return delegationToken;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n    if (delegationToken \u003d\u003d null) {\n      Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n          new Text(getCanonicalServiceName()), ugi.getTokens());\n      // ugi tokens are usually indicative of a task which can\u0027t\n      // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n      // to get another token to match hdfs/rpc behavior\n      if (token !\u003d null) {\n        LOG.debug(\"Using UGI token: {}\", token);\n        canRefreshDelegationToken \u003d false;\n      } else {\n        if (canRefreshDelegationToken) {\n          token \u003d getDelegationToken(null);\n          if (token !\u003d null) {\n            LOG.debug(\"Fetched new token: {}\", token);\n          } else { // security is disabled\n            canRefreshDelegationToken \u003d false;\n          }\n        }\n      }\n      setDelegationToken(token);\n    }\n    return delegationToken;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "576b569b6c97bd5f57e52efdabdf8c2fa996a524": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9525. hadoop utilities need to support provided delegation tokens (HeeSoo Kim via aw)\"\n\nThis reverts commit 832b3cbde1c2f77b04c93188e3a94420974090cf.\n",
      "commitDate": "11/12/15 10:59 AM",
      "commitName": "576b569b6c97bd5f57e52efdabdf8c2fa996a524",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "08/12/15 12:56 PM",
      "commitNameOld": "832b3cbde1c2f77b04c93188e3a94420974090cf",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 2.92,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,22 @@\n   protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n-    if (delegationToken \u003d\u003d null) {\n+    if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n       Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n           new Text(getCanonicalServiceName()), ugi.getTokens());\n       // ugi tokens are usually indicative of a task which can\u0027t\n       // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n       // to get another token to match hdfs/rpc behavior\n       if (token !\u003d null) {\n         LOG.debug(\"Using UGI token: {}\", token);\n         canRefreshDelegationToken \u003d false;\n       } else {\n-        if (canRefreshDelegationToken) {\n-          token \u003d getDelegationToken(null);\n-          if (token !\u003d null) {\n-            LOG.debug(\"Fetched new token: {}\", token);\n-          } else { // security is disabled\n-            canRefreshDelegationToken \u003d false;\n-          }\n+        token \u003d getDelegationToken(null);\n+        if (token !\u003d null) {\n+          LOG.debug(\"Fetched new token: {}\", token);\n+        } else { // security is disabled\n+          canRefreshDelegationToken \u003d false;\n         }\n       }\n       setDelegationToken(token);\n     }\n     return delegationToken;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n    if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n      Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n          new Text(getCanonicalServiceName()), ugi.getTokens());\n      // ugi tokens are usually indicative of a task which can\u0027t\n      // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n      // to get another token to match hdfs/rpc behavior\n      if (token !\u003d null) {\n        LOG.debug(\"Using UGI token: {}\", token);\n        canRefreshDelegationToken \u003d false;\n      } else {\n        token \u003d getDelegationToken(null);\n        if (token !\u003d null) {\n          LOG.debug(\"Fetched new token: {}\", token);\n        } else { // security is disabled\n          canRefreshDelegationToken \u003d false;\n        }\n      }\n      setDelegationToken(token);\n    }\n    return delegationToken;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "832b3cbde1c2f77b04c93188e3a94420974090cf": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9525. hadoop utilities need to support provided delegation tokens (HeeSoo Kim via aw)\n",
      "commitDate": "08/12/15 12:56 PM",
      "commitName": "832b3cbde1c2f77b04c93188e3a94420974090cf",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "08/11/15 2:54 AM",
      "commitNameOld": "6d2332ae375e26d024358c6e75fdb3c68a781a66",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 30.42,
      "commitsBetweenForRepo": 188,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,24 @@\n   protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n-    if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n+    if (delegationToken \u003d\u003d null) {\n       Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n           new Text(getCanonicalServiceName()), ugi.getTokens());\n       // ugi tokens are usually indicative of a task which can\u0027t\n       // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n       // to get another token to match hdfs/rpc behavior\n       if (token !\u003d null) {\n         LOG.debug(\"Using UGI token: {}\", token);\n         canRefreshDelegationToken \u003d false;\n       } else {\n-        token \u003d getDelegationToken(null);\n-        if (token !\u003d null) {\n-          LOG.debug(\"Fetched new token: {}\", token);\n-        } else { // security is disabled\n-          canRefreshDelegationToken \u003d false;\n+        if (canRefreshDelegationToken) {\n+          token \u003d getDelegationToken(null);\n+          if (token !\u003d null) {\n+            LOG.debug(\"Fetched new token: {}\", token);\n+          } else { // security is disabled\n+            canRefreshDelegationToken \u003d false;\n+          }\n         }\n       }\n       setDelegationToken(token);\n     }\n     return delegationToken;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n    if (delegationToken \u003d\u003d null) {\n      Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n          new Text(getCanonicalServiceName()), ugi.getTokens());\n      // ugi tokens are usually indicative of a task which can\u0027t\n      // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n      // to get another token to match hdfs/rpc behavior\n      if (token !\u003d null) {\n        LOG.debug(\"Using UGI token: {}\", token);\n        canRefreshDelegationToken \u003d false;\n      } else {\n        if (canRefreshDelegationToken) {\n          token \u003d getDelegationToken(null);\n          if (token !\u003d null) {\n            LOG.debug(\"Fetched new token: {}\", token);\n          } else { // security is disabled\n            canRefreshDelegationToken \u003d false;\n          }\n        }\n      }\n      setDelegationToken(token);\n    }\n    return delegationToken;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,22 @@\n   protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n     if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n       Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n           new Text(getCanonicalServiceName()), ugi.getTokens());\n       // ugi tokens are usually indicative of a task which can\u0027t\n       // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n       // to get another token to match hdfs/rpc behavior\n       if (token !\u003d null) {\n-        if(LOG.isDebugEnabled()) {\n-          LOG.debug(\"Using UGI token: {}\", token);\n-        }\n+        LOG.debug(\"Using UGI token: {}\", token);\n         canRefreshDelegationToken \u003d false;\n       } else {\n         token \u003d getDelegationToken(null);\n         if (token !\u003d null) {\n-          if(LOG.isDebugEnabled()) {\n-            LOG.debug(\"Fetched new token: {}\", token);\n-          }\n+          LOG.debug(\"Fetched new token: {}\", token);\n         } else { // security is disabled\n           canRefreshDelegationToken \u003d false;\n         }\n       }\n       setDelegationToken(token);\n     }\n     return delegationToken;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n    if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n      Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n          new Text(getCanonicalServiceName()), ugi.getTokens());\n      // ugi tokens are usually indicative of a task which can\u0027t\n      // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n      // to get another token to match hdfs/rpc behavior\n      if (token !\u003d null) {\n        LOG.debug(\"Using UGI token: {}\", token);\n        canRefreshDelegationToken \u003d false;\n      } else {\n        token \u003d getDelegationToken(null);\n        if (token !\u003d null) {\n          LOG.debug(\"Fetched new token: {}\", token);\n        } else { // security is disabled\n          canRefreshDelegationToken \u003d false;\n        }\n      }\n      setDelegationToken(token);\n    }\n    return delegationToken;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,26 @@\n   protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n     if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n       Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n           new Text(getCanonicalServiceName()), ugi.getTokens());\n       // ugi tokens are usually indicative of a task which can\u0027t\n       // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n       // to get another token to match hdfs/rpc behavior\n       if (token !\u003d null) {\n-        LOG.debug(\"Using UGI token: {}\", token);\n+        if(LOG.isDebugEnabled()) {\n+          LOG.debug(\"Using UGI token: {}\", token);\n+        }\n         canRefreshDelegationToken \u003d false;\n       } else {\n         token \u003d getDelegationToken(null);\n         if (token !\u003d null) {\n-          LOG.debug(\"Fetched new token: {}\", token);\n+          if(LOG.isDebugEnabled()) {\n+            LOG.debug(\"Fetched new token: {}\", token);\n+          }\n         } else { // security is disabled\n           canRefreshDelegationToken \u003d false;\n         }\n       }\n       setDelegationToken(token);\n     }\n     return delegationToken;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n    if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n      Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n          new Text(getCanonicalServiceName()), ugi.getTokens());\n      // ugi tokens are usually indicative of a task which can\u0027t\n      // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n      // to get another token to match hdfs/rpc behavior\n      if (token !\u003d null) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"Using UGI token: {}\", token);\n        }\n        canRefreshDelegationToken \u003d false;\n      } else {\n        token \u003d getDelegationToken(null);\n        if (token !\u003d null) {\n          if(LOG.isDebugEnabled()) {\n            LOG.debug(\"Fetched new token: {}\", token);\n          }\n        } else { // security is disabled\n          canRefreshDelegationToken \u003d false;\n        }\n      }\n      setDelegationToken(token);\n    }\n    return delegationToken;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/09/15 3:31 PM",
      "commitNameOld": "3abbdc929bde05f8819f5410cef1eaeb8940203f",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,22 @@\n   protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n     if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n       Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n           new Text(getCanonicalServiceName()), ugi.getTokens());\n       // ugi tokens are usually indicative of a task which can\u0027t\n       // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n       // to get another token to match hdfs/rpc behavior\n       if (token !\u003d null) {\n-        if(LOG.isDebugEnabled()) {\n-          LOG.debug(\"Using UGI token: {}\", token);\n-        }\n+        LOG.debug(\"Using UGI token: {}\", token);\n         canRefreshDelegationToken \u003d false;\n       } else {\n         token \u003d getDelegationToken(null);\n         if (token !\u003d null) {\n-          if(LOG.isDebugEnabled()) {\n-            LOG.debug(\"Fetched new token: {}\", token);\n-          }\n+          LOG.debug(\"Fetched new token: {}\", token);\n         } else { // security is disabled\n           canRefreshDelegationToken \u003d false;\n         }\n       }\n       setDelegationToken(token);\n     }\n     return delegationToken;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n    if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n      Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n          new Text(getCanonicalServiceName()), ugi.getTokens());\n      // ugi tokens are usually indicative of a task which can\u0027t\n      // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n      // to get another token to match hdfs/rpc behavior\n      if (token !\u003d null) {\n        LOG.debug(\"Using UGI token: {}\", token);\n        canRefreshDelegationToken \u003d false;\n      } else {\n        token \u003d getDelegationToken(null);\n        if (token !\u003d null) {\n          LOG.debug(\"Fetched new token: {}\", token);\n        } else { // security is disabled\n          canRefreshDelegationToken \u003d false;\n        }\n      }\n      setDelegationToken(token);\n    }\n    return delegationToken;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "122cad6aec5839d8d515c5008425ecb34f2fa56b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6564. Use slf4j instead of common-logging in hdfs-client. Contributed by Rakesh R.\n",
      "commitDate": "23/06/15 11:41 AM",
      "commitName": "122cad6aec5839d8d515c5008425ecb34f2fa56b",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "22/06/15 4:30 PM",
      "commitNameOld": "fac4e04dd359a7ff31f286d664fb06f019ec0b58",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n     if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n       Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n           new Text(getCanonicalServiceName()), ugi.getTokens());\n       // ugi tokens are usually indicative of a task which can\u0027t\n       // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n       // to get another token to match hdfs/rpc behavior\n       if (token !\u003d null) {\n         if(LOG.isDebugEnabled()) {\n-          LOG.debug(\"Using UGI token: \" + token);\n+          LOG.debug(\"Using UGI token: {}\", token);\n         }\n         canRefreshDelegationToken \u003d false;\n       } else {\n         token \u003d getDelegationToken(null);\n         if (token !\u003d null) {\n           if(LOG.isDebugEnabled()) {\n-            LOG.debug(\"Fetched new token: \" + token);\n+            LOG.debug(\"Fetched new token: {}\", token);\n           }\n         } else { // security is disabled\n           canRefreshDelegationToken \u003d false;\n         }\n       }\n       setDelegationToken(token);\n     }\n     return delegationToken;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n    if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n      Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n          new Text(getCanonicalServiceName()), ugi.getTokens());\n      // ugi tokens are usually indicative of a task which can\u0027t\n      // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n      // to get another token to match hdfs/rpc behavior\n      if (token !\u003d null) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"Using UGI token: {}\", token);\n        }\n        canRefreshDelegationToken \u003d false;\n      } else {\n        token \u003d getDelegationToken(null);\n        if (token !\u003d null) {\n          if(LOG.isDebugEnabled()) {\n            LOG.debug(\"Fetched new token: {}\", token);\n          }\n        } else { // security is disabled\n          canRefreshDelegationToken \u003d false;\n        }\n      }\n      setDelegationToken(token);\n    }\n    return delegationToken;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8052. Move WebHdfsFileSystem into hadoop-hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "23/04/15 5:33 PM",
      "commitName": "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "23/04/15 4:40 PM",
      "commitNameOld": "0b3f8957a87ada1a275c9904b211fdbdcefafb02",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n     if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n       Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n           new Text(getCanonicalServiceName()), ugi.getTokens());\n       // ugi tokens are usually indicative of a task which can\u0027t\n       // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n       // to get another token to match hdfs/rpc behavior\n       if (token !\u003d null) {\n         if(LOG.isDebugEnabled()) {\n           LOG.debug(\"Using UGI token: \" + token);\n         }\n-        canRefreshDelegationToken \u003d false; \n+        canRefreshDelegationToken \u003d false;\n       } else {\n         token \u003d getDelegationToken(null);\n         if (token !\u003d null) {\n           if(LOG.isDebugEnabled()) {\n             LOG.debug(\"Fetched new token: \" + token);\n           }\n         } else { // security is disabled\n           canRefreshDelegationToken \u003d false;\n         }\n       }\n       setDelegationToken(token);\n     }\n     return delegationToken;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n    if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n      Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n          new Text(getCanonicalServiceName()), ugi.getTokens());\n      // ugi tokens are usually indicative of a task which can\u0027t\n      // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n      // to get another token to match hdfs/rpc behavior\n      if (token !\u003d null) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"Using UGI token: \" + token);\n        }\n        canRefreshDelegationToken \u003d false;\n      } else {\n        token \u003d getDelegationToken(null);\n        if (token !\u003d null) {\n          if(LOG.isDebugEnabled()) {\n            LOG.debug(\"Fetched new token: \" + token);\n          }\n        } else { // security is disabled\n          canRefreshDelegationToken \u003d false;\n        }\n      }\n      setDelegationToken(token);\n    }\n    return delegationToken;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java"
      }
    },
    "ed72daa5df97669906234e8ac9a406d78136b206": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7978. Add LOG.isDebugEnabled() guard for some LOG.debug(..). Contributed by Walter Su.\n",
      "commitDate": "01/04/15 12:54 PM",
      "commitName": "ed72daa5df97669906234e8ac9a406d78136b206",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "24/03/15 9:55 PM",
      "commitNameOld": "80278a5f85a91b3e02e700e0b3c0a433c15e0565",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 7.62,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,26 @@\n   protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n     if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n       Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n           new Text(getCanonicalServiceName()), ugi.getTokens());\n       // ugi tokens are usually indicative of a task which can\u0027t\n       // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n       // to get another token to match hdfs/rpc behavior\n       if (token !\u003d null) {\n-        LOG.debug(\"Using UGI token: \" + token);\n+        if(LOG.isDebugEnabled()) {\n+          LOG.debug(\"Using UGI token: \" + token);\n+        }\n         canRefreshDelegationToken \u003d false; \n       } else {\n         token \u003d getDelegationToken(null);\n         if (token !\u003d null) {\n-          LOG.debug(\"Fetched new token: \" + token);\n+          if(LOG.isDebugEnabled()) {\n+            LOG.debug(\"Fetched new token: \" + token);\n+          }\n         } else { // security is disabled\n           canRefreshDelegationToken \u003d false;\n         }\n       }\n       setDelegationToken(token);\n     }\n     return delegationToken;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n    if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n      Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n          new Text(getCanonicalServiceName()), ugi.getTokens());\n      // ugi tokens are usually indicative of a task which can\u0027t\n      // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n      // to get another token to match hdfs/rpc behavior\n      if (token !\u003d null) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"Using UGI token: \" + token);\n        }\n        canRefreshDelegationToken \u003d false; \n      } else {\n        token \u003d getDelegationToken(null);\n        if (token !\u003d null) {\n          if(LOG.isDebugEnabled()) {\n            LOG.debug(\"Fetched new token: \" + token);\n          }\n        } else { // security is disabled\n          canRefreshDelegationToken \u003d false;\n        }\n      }\n      setDelegationToken(token);\n    }\n    return delegationToken;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "0c5128969522cf754010c32cdcbfcfa5ebe5b3b0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6222. Remove background token renewer from webhdfs. Contributed by Rushabh Shah and Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604300 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/06/14 4:58 PM",
      "commitName": "0c5128969522cf754010c32cdcbfcfa5ebe5b3b0",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "19/06/14 4:06 PM",
      "commitNameOld": "46dc32e12568c5e254a3a2f2664095dc9de8bd55",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,22 @@\n   protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n-    tokenAspect.ensureTokenInitialized();\n+    if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n+      Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n+          new Text(getCanonicalServiceName()), ugi.getTokens());\n+      // ugi tokens are usually indicative of a task which can\u0027t\n+      // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n+      // to get another token to match hdfs/rpc behavior\n+      if (token !\u003d null) {\n+        LOG.debug(\"Using UGI token: \" + token);\n+        canRefreshDelegationToken \u003d false; \n+      } else {\n+        token \u003d getDelegationToken(null);\n+        if (token !\u003d null) {\n+          LOG.debug(\"Fetched new token: \" + token);\n+        } else { // security is disabled\n+          canRefreshDelegationToken \u003d false;\n+        }\n+      }\n+      setDelegationToken(token);\n+    }\n     return delegationToken;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n    if (canRefreshDelegationToken \u0026\u0026 delegationToken \u003d\u003d null) {\n      Token\u003c?\u003e token \u003d tokenSelector.selectToken(\n          new Text(getCanonicalServiceName()), ugi.getTokens());\n      // ugi tokens are usually indicative of a task which can\u0027t\n      // refetch tokens.  even if ugi has credentials, don\u0027t attempt\n      // to get another token to match hdfs/rpc behavior\n      if (token !\u003d null) {\n        LOG.debug(\"Using UGI token: \" + token);\n        canRefreshDelegationToken \u003d false; \n      } else {\n        token \u003d getDelegationToken(null);\n        if (token !\u003d null) {\n          LOG.debug(\"Fetched new token: \" + token);\n        } else { // security is disabled\n          canRefreshDelegationToken \u003d false;\n        }\n      }\n      setDelegationToken(token);\n    }\n    return delegationToken;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "620890fcc0fb8680a3ad282b0b7b969277deb766": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5489. Use TokenAspect in WebHDFSFileSystem. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1542158 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/13 6:11 PM",
      "commitName": "620890fcc0fb8680a3ad282b0b7b969277deb766",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "14/11/13 10:40 AM",
      "commitNameOld": "43fa41fdeee53471e9aa34c89f58e53e8aa164e5",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.31,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,4 @@\n   protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n-    // we haven\u0027t inited yet, or we used to have a token but it expired\n-    if (!hasInitedToken || (action !\u003d null \u0026\u0026 !action.isValid())) {\n-      //since we don\u0027t already have a token, go get one\n-      Token\u003c?\u003e token \u003d getDelegationToken(null);\n-      // security might be disabled\n-      if (token !\u003d null) {\n-        setDelegationToken(token);\n-        addRenewAction(this);\n-        LOG.debug(\"Created new DT for \" + token.getService());\n-      }\n-      hasInitedToken \u003d true;\n-    }\n+    tokenAspect.ensureTokenInitialized();\n     return delegationToken;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n    tokenAspect.ensureTokenInitialized();\n    return delegationToken;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "d027b947d62b0193a1c579d8f92047b669f6192b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4805. Webhdfs client is fragile to token renewal errors. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1482121 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/13 3:03 PM",
      "commitName": "d027b947d62b0193a1c579d8f92047b669f6192b",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "30/04/13 3:55 PM",
      "commitNameOld": "98c0421fbfb8dcb123aad2a9077d1f0e5390b5ce",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 12.96,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,15 @@\n   protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n-    if (!hasInitedToken) {\n+    // we haven\u0027t inited yet, or we used to have a token but it expired\n+    if (!hasInitedToken || (action !\u003d null \u0026\u0026 !action.isValid())) {\n       //since we don\u0027t already have a token, go get one\n       Token\u003c?\u003e token \u003d getDelegationToken(null);\n       // security might be disabled\n       if (token !\u003d null) {\n         setDelegationToken(token);\n         addRenewAction(this);\n         LOG.debug(\"Created new DT for \" + token.getService());\n       }\n       hasInitedToken \u003d true;\n     }\n     return delegationToken;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n    // we haven\u0027t inited yet, or we used to have a token but it expired\n    if (!hasInitedToken || (action !\u003d null \u0026\u0026 !action.isValid())) {\n      //since we don\u0027t already have a token, go get one\n      Token\u003c?\u003e token \u003d getDelegationToken(null);\n      // security might be disabled\n      if (token !\u003d null) {\n        setDelegationToken(token);\n        addRenewAction(this);\n        LOG.debug(\"Created new DT for \" + token.getService());\n      }\n      hasInitedToken \u003d true;\n    }\n    return delegationToken;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "94a22114b9f5ebc59dd83e4d164472bb710fee53": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4567. Webhdfs does not need a token for token operations. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1454460 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/03/13 8:56 AM",
      "commitName": "94a22114b9f5ebc59dd83e4d164472bb710fee53",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,14 @@\n+  protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n+    if (!hasInitedToken) {\n+      //since we don\u0027t already have a token, go get one\n+      Token\u003c?\u003e token \u003d getDelegationToken(null);\n+      // security might be disabled\n+      if (token !\u003d null) {\n+        setDelegationToken(token);\n+        addRenewAction(this);\n+        LOG.debug(\"Created new DT for \" + token.getService());\n+      }\n+      hasInitedToken \u003d true;\n+    }\n+    return delegationToken;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized Token\u003c?\u003e getDelegationToken() throws IOException {\n    if (!hasInitedToken) {\n      //since we don\u0027t already have a token, go get one\n      Token\u003c?\u003e token \u003d getDelegationToken(null);\n      // security might be disabled\n      if (token !\u003d null) {\n        setDelegationToken(token);\n        addRenewAction(this);\n        LOG.debug(\"Created new DT for \" + token.getService());\n      }\n      hasInitedToken \u003d true;\n    }\n    return delegationToken;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java"
    }
  }
}