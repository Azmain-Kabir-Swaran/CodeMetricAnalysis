{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ValueHistogram.java",
  "functionName": "getReport",
  "functionId": "getReport",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueHistogram.java",
  "functionStartLine": 83,
  "functionEndLine": 128,
  "numCommitsSeen": 3,
  "timeTaken": 4278,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String getReport() {\n    long[] counts \u003d new long[items.size()];\n\n    StringBuffer sb \u003d new StringBuffer();\n    Iterator\u003cObject\u003e iter \u003d items.values().iterator();\n    int i \u003d 0;\n    while (iter.hasNext()) {\n      Long count \u003d (Long) iter.next();\n      counts[i] \u003d count.longValue();\n      i +\u003d 1;\n    }\n    Arrays.sort(counts);\n    sb.append(counts.length);\n    i \u003d 0;\n    long acc \u003d 0;\n    while (i \u003c counts.length) {\n      long nextVal \u003d counts[i];\n      int j \u003d i + 1;\n      while (j \u003c counts.length \u0026\u0026 counts[j] \u003d\u003d nextVal) {\n        j++;\n      }\n      acc +\u003d nextVal * (j - i);\n      i \u003d j;\n    }\n    double average \u003d 0.0;\n    double sd \u003d 0.0;\n    if (counts.length \u003e 0) {\n      sb.append(\"\\t\").append(counts[0]);\n      sb.append(\"\\t\").append(counts[counts.length / 2]);\n      sb.append(\"\\t\").append(counts[counts.length - 1]);\n\n      average \u003d acc * 1.0 / counts.length;\n      sb.append(\"\\t\").append(average);\n\n      i \u003d 0;\n      while (i \u003c counts.length) {\n        double nextDiff \u003d counts[i] - average;\n        sd +\u003d nextDiff * nextDiff;\n        i +\u003d 1;\n      }\n      sd \u003d Math.sqrt(sd / counts.length);\n      sb.append(\"\\t\").append(sd);\n\n    }\n    return sb.toString();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueHistogram.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueHistogram.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueHistogram.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String getReport() {\n    long[] counts \u003d new long[items.size()];\n\n    StringBuffer sb \u003d new StringBuffer();\n    Iterator\u003cObject\u003e iter \u003d items.values().iterator();\n    int i \u003d 0;\n    while (iter.hasNext()) {\n      Long count \u003d (Long) iter.next();\n      counts[i] \u003d count.longValue();\n      i +\u003d 1;\n    }\n    Arrays.sort(counts);\n    sb.append(counts.length);\n    i \u003d 0;\n    long acc \u003d 0;\n    while (i \u003c counts.length) {\n      long nextVal \u003d counts[i];\n      int j \u003d i + 1;\n      while (j \u003c counts.length \u0026\u0026 counts[j] \u003d\u003d nextVal) {\n        j++;\n      }\n      acc +\u003d nextVal * (j - i);\n      i \u003d j;\n    }\n    double average \u003d 0.0;\n    double sd \u003d 0.0;\n    if (counts.length \u003e 0) {\n      sb.append(\"\\t\").append(counts[0]);\n      sb.append(\"\\t\").append(counts[counts.length / 2]);\n      sb.append(\"\\t\").append(counts[counts.length - 1]);\n\n      average \u003d acc * 1.0 / counts.length;\n      sb.append(\"\\t\").append(average);\n\n      i \u003d 0;\n      while (i \u003c counts.length) {\n        double nextDiff \u003d counts[i] - average;\n        sd +\u003d nextDiff * nextDiff;\n        i +\u003d 1;\n      }\n      sd \u003d Math.sqrt(sd / counts.length);\n      sb.append(\"\\t\").append(sd);\n\n    }\n    return sb.toString();\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueHistogram.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueHistogram.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueHistogram.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,46 @@\n+  public String getReport() {\n+    long[] counts \u003d new long[items.size()];\n+\n+    StringBuffer sb \u003d new StringBuffer();\n+    Iterator\u003cObject\u003e iter \u003d items.values().iterator();\n+    int i \u003d 0;\n+    while (iter.hasNext()) {\n+      Long count \u003d (Long) iter.next();\n+      counts[i] \u003d count.longValue();\n+      i +\u003d 1;\n+    }\n+    Arrays.sort(counts);\n+    sb.append(counts.length);\n+    i \u003d 0;\n+    long acc \u003d 0;\n+    while (i \u003c counts.length) {\n+      long nextVal \u003d counts[i];\n+      int j \u003d i + 1;\n+      while (j \u003c counts.length \u0026\u0026 counts[j] \u003d\u003d nextVal) {\n+        j++;\n+      }\n+      acc +\u003d nextVal * (j - i);\n+      i \u003d j;\n+    }\n+    double average \u003d 0.0;\n+    double sd \u003d 0.0;\n+    if (counts.length \u003e 0) {\n+      sb.append(\"\\t\").append(counts[0]);\n+      sb.append(\"\\t\").append(counts[counts.length / 2]);\n+      sb.append(\"\\t\").append(counts[counts.length - 1]);\n+\n+      average \u003d acc * 1.0 / counts.length;\n+      sb.append(\"\\t\").append(average);\n+\n+      i \u003d 0;\n+      while (i \u003c counts.length) {\n+        double nextDiff \u003d counts[i] - average;\n+        sd +\u003d nextDiff * nextDiff;\n+        i +\u003d 1;\n+      }\n+      sd \u003d Math.sqrt(sd / counts.length);\n+      sb.append(\"\\t\").append(sd);\n+\n+    }\n+    return sb.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String getReport() {\n    long[] counts \u003d new long[items.size()];\n\n    StringBuffer sb \u003d new StringBuffer();\n    Iterator\u003cObject\u003e iter \u003d items.values().iterator();\n    int i \u003d 0;\n    while (iter.hasNext()) {\n      Long count \u003d (Long) iter.next();\n      counts[i] \u003d count.longValue();\n      i +\u003d 1;\n    }\n    Arrays.sort(counts);\n    sb.append(counts.length);\n    i \u003d 0;\n    long acc \u003d 0;\n    while (i \u003c counts.length) {\n      long nextVal \u003d counts[i];\n      int j \u003d i + 1;\n      while (j \u003c counts.length \u0026\u0026 counts[j] \u003d\u003d nextVal) {\n        j++;\n      }\n      acc +\u003d nextVal * (j - i);\n      i \u003d j;\n    }\n    double average \u003d 0.0;\n    double sd \u003d 0.0;\n    if (counts.length \u003e 0) {\n      sb.append(\"\\t\").append(counts[0]);\n      sb.append(\"\\t\").append(counts[counts.length / 2]);\n      sb.append(\"\\t\").append(counts[counts.length - 1]);\n\n      average \u003d acc * 1.0 / counts.length;\n      sb.append(\"\\t\").append(average);\n\n      i \u003d 0;\n      while (i \u003c counts.length) {\n        double nextDiff \u003d counts[i] - average;\n        sd +\u003d nextDiff * nextDiff;\n        i +\u003d 1;\n      }\n      sd \u003d Math.sqrt(sd / counts.length);\n      sb.append(\"\\t\").append(sd);\n\n    }\n    return sb.toString();\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueHistogram.java"
    }
  }
}