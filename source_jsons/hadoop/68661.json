{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PipeReducer.java",
  "functionName": "reduce",
  "functionId": "reduce___key-Object__values-Iterator__output-OutputCollector__reporter-Reporter",
  "sourceFilePath": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/PipeReducer.java",
  "functionStartLine": 83,
  "functionEndLine": 131,
  "numCommitsSeen": 4,
  "timeTaken": 4328,
  "changeHistory": [
    "26447229ba2c3d43db978c1b3ce95613669182ee",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "26447229ba2c3d43db978c1b3ce95613669182ee": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "26447229ba2c3d43db978c1b3ce95613669182ee": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7590. Mavenize streaming and MR examples. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1203941 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/11 5:24 PM",
      "commitName": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/11/11 1:04 AM",
      "commitNameOld": "905a127850d5e0cba85c2e075f989fa0f5cf129a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void reduce(Object key, Iterator values, OutputCollector output,\n                     Reporter reporter) throws IOException {\n\n    // init\n    if (doPipe_ \u0026\u0026 outThread_ \u003d\u003d null) {\n      startOutputThreads(output, reporter);\n    }\n    try {\n      while (values.hasNext()) {\n        Writable val \u003d (Writable) values.next();\n        numRecRead_++;\n        maybeLogRecord();\n        if (doPipe_) {\n          if (outerrThreadsThrowable !\u003d null) {\n            mapRedFinished();\n            throw new IOException(\"MROutput/MRErrThread failed:\",\n                outerrThreadsThrowable);\n          }\n          inWriter_.writeKey(key);\n          inWriter_.writeValue(val);\n        } else {\n          // \"identity reduce\"\n          output.collect(key, val);\n        }\n      }\n      if(doPipe_ \u0026\u0026 skipping) {\n        //flush the streams on every record input if running in skip mode\n        //so that we don\u0027t buffer other records surrounding a bad record. \n        clientOut_.flush();\n      }\n    } catch (IOException io) {\n      // a common reason to get here is failure of the subprocess.\n      // Document that fact, if possible.\n      String extraInfo \u003d \"\";\n      try {\n        int exitVal \u003d sim.exitValue();\n\tif (exitVal \u003d\u003d 0) {\n\t  extraInfo \u003d \"subprocess exited successfully\\n\";\n\t} else {\n\t  extraInfo \u003d \"subprocess exited with error code \" + exitVal + \"\\n\";\n\t};\n      } catch (IllegalThreadStateException e) {\n        // hmm, but child is still running.  go figure.\n\textraInfo \u003d \"subprocess still running\\n\";\n      };\n      mapRedFinished();\n      throw new IOException(extraInfo + getContext() + io.getMessage());\n    }\n  }",
      "path": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/PipeReducer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PipeReducer.java",
        "newPath": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/PipeReducer.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void reduce(Object key, Iterator values, OutputCollector output,\n                     Reporter reporter) throws IOException {\n\n    // init\n    if (doPipe_ \u0026\u0026 outThread_ \u003d\u003d null) {\n      startOutputThreads(output, reporter);\n    }\n    try {\n      while (values.hasNext()) {\n        Writable val \u003d (Writable) values.next();\n        numRecRead_++;\n        maybeLogRecord();\n        if (doPipe_) {\n          if (outerrThreadsThrowable !\u003d null) {\n            mapRedFinished();\n            throw new IOException(\"MROutput/MRErrThread failed:\",\n                outerrThreadsThrowable);\n          }\n          inWriter_.writeKey(key);\n          inWriter_.writeValue(val);\n        } else {\n          // \"identity reduce\"\n          output.collect(key, val);\n        }\n      }\n      if(doPipe_ \u0026\u0026 skipping) {\n        //flush the streams on every record input if running in skip mode\n        //so that we don\u0027t buffer other records surrounding a bad record. \n        clientOut_.flush();\n      }\n    } catch (IOException io) {\n      // a common reason to get here is failure of the subprocess.\n      // Document that fact, if possible.\n      String extraInfo \u003d \"\";\n      try {\n        int exitVal \u003d sim.exitValue();\n\tif (exitVal \u003d\u003d 0) {\n\t  extraInfo \u003d \"subprocess exited successfully\\n\";\n\t} else {\n\t  extraInfo \u003d \"subprocess exited with error code \" + exitVal + \"\\n\";\n\t};\n      } catch (IllegalThreadStateException e) {\n        // hmm, but child is still running.  go figure.\n\textraInfo \u003d \"subprocess still running\\n\";\n      };\n      mapRedFinished();\n      throw new IOException(extraInfo + getContext() + io.getMessage());\n    }\n  }",
      "path": "hadoop-mapreduce-project/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PipeReducer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PipeReducer.java",
        "newPath": "hadoop-mapreduce-project/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PipeReducer.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void reduce(Object key, Iterator values, OutputCollector output,\n                     Reporter reporter) throws IOException {\n\n    // init\n    if (doPipe_ \u0026\u0026 outThread_ \u003d\u003d null) {\n      startOutputThreads(output, reporter);\n    }\n    try {\n      while (values.hasNext()) {\n        Writable val \u003d (Writable) values.next();\n        numRecRead_++;\n        maybeLogRecord();\n        if (doPipe_) {\n          if (outerrThreadsThrowable !\u003d null) {\n            mapRedFinished();\n            throw new IOException(\"MROutput/MRErrThread failed:\",\n                outerrThreadsThrowable);\n          }\n          inWriter_.writeKey(key);\n          inWriter_.writeValue(val);\n        } else {\n          // \"identity reduce\"\n          output.collect(key, val);\n        }\n      }\n      if(doPipe_ \u0026\u0026 skipping) {\n        //flush the streams on every record input if running in skip mode\n        //so that we don\u0027t buffer other records surrounding a bad record. \n        clientOut_.flush();\n      }\n    } catch (IOException io) {\n      // a common reason to get here is failure of the subprocess.\n      // Document that fact, if possible.\n      String extraInfo \u003d \"\";\n      try {\n        int exitVal \u003d sim.exitValue();\n\tif (exitVal \u003d\u003d 0) {\n\t  extraInfo \u003d \"subprocess exited successfully\\n\";\n\t} else {\n\t  extraInfo \u003d \"subprocess exited with error code \" + exitVal + \"\\n\";\n\t};\n      } catch (IllegalThreadStateException e) {\n        // hmm, but child is still running.  go figure.\n\textraInfo \u003d \"subprocess still running\\n\";\n      };\n      mapRedFinished();\n      throw new IOException(extraInfo + getContext() + io.getMessage());\n    }\n  }",
      "path": "hadoop-mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PipeReducer.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PipeReducer.java",
        "newPath": "hadoop-mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PipeReducer.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,49 @@\n+  public void reduce(Object key, Iterator values, OutputCollector output,\n+                     Reporter reporter) throws IOException {\n+\n+    // init\n+    if (doPipe_ \u0026\u0026 outThread_ \u003d\u003d null) {\n+      startOutputThreads(output, reporter);\n+    }\n+    try {\n+      while (values.hasNext()) {\n+        Writable val \u003d (Writable) values.next();\n+        numRecRead_++;\n+        maybeLogRecord();\n+        if (doPipe_) {\n+          if (outerrThreadsThrowable !\u003d null) {\n+            mapRedFinished();\n+            throw new IOException(\"MROutput/MRErrThread failed:\",\n+                outerrThreadsThrowable);\n+          }\n+          inWriter_.writeKey(key);\n+          inWriter_.writeValue(val);\n+        } else {\n+          // \"identity reduce\"\n+          output.collect(key, val);\n+        }\n+      }\n+      if(doPipe_ \u0026\u0026 skipping) {\n+        //flush the streams on every record input if running in skip mode\n+        //so that we don\u0027t buffer other records surrounding a bad record. \n+        clientOut_.flush();\n+      }\n+    } catch (IOException io) {\n+      // a common reason to get here is failure of the subprocess.\n+      // Document that fact, if possible.\n+      String extraInfo \u003d \"\";\n+      try {\n+        int exitVal \u003d sim.exitValue();\n+\tif (exitVal \u003d\u003d 0) {\n+\t  extraInfo \u003d \"subprocess exited successfully\\n\";\n+\t} else {\n+\t  extraInfo \u003d \"subprocess exited with error code \" + exitVal + \"\\n\";\n+\t};\n+      } catch (IllegalThreadStateException e) {\n+        // hmm, but child is still running.  go figure.\n+\textraInfo \u003d \"subprocess still running\\n\";\n+      };\n+      mapRedFinished();\n+      throw new IOException(extraInfo + getContext() + io.getMessage());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void reduce(Object key, Iterator values, OutputCollector output,\n                     Reporter reporter) throws IOException {\n\n    // init\n    if (doPipe_ \u0026\u0026 outThread_ \u003d\u003d null) {\n      startOutputThreads(output, reporter);\n    }\n    try {\n      while (values.hasNext()) {\n        Writable val \u003d (Writable) values.next();\n        numRecRead_++;\n        maybeLogRecord();\n        if (doPipe_) {\n          if (outerrThreadsThrowable !\u003d null) {\n            mapRedFinished();\n            throw new IOException(\"MROutput/MRErrThread failed:\",\n                outerrThreadsThrowable);\n          }\n          inWriter_.writeKey(key);\n          inWriter_.writeValue(val);\n        } else {\n          // \"identity reduce\"\n          output.collect(key, val);\n        }\n      }\n      if(doPipe_ \u0026\u0026 skipping) {\n        //flush the streams on every record input if running in skip mode\n        //so that we don\u0027t buffer other records surrounding a bad record. \n        clientOut_.flush();\n      }\n    } catch (IOException io) {\n      // a common reason to get here is failure of the subprocess.\n      // Document that fact, if possible.\n      String extraInfo \u003d \"\";\n      try {\n        int exitVal \u003d sim.exitValue();\n\tif (exitVal \u003d\u003d 0) {\n\t  extraInfo \u003d \"subprocess exited successfully\\n\";\n\t} else {\n\t  extraInfo \u003d \"subprocess exited with error code \" + exitVal + \"\\n\";\n\t};\n      } catch (IllegalThreadStateException e) {\n        // hmm, but child is still running.  go figure.\n\textraInfo \u003d \"subprocess still running\\n\";\n      };\n      mapRedFinished();\n      throw new IOException(extraInfo + getContext() + io.getMessage());\n    }\n  }",
      "path": "mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PipeReducer.java"
    }
  }
}