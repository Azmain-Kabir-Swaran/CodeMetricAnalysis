{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IdentityTransformer.java",
  "functionName": "transformIdentityForGetRequest",
  "functionId": "transformIdentityForGetRequest___originalIdentity-String__isUserName-boolean__localIdentity-String",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/IdentityTransformer.java",
  "functionStartLine": 103,
  "functionEndLine": 132,
  "numCommitsSeen": 8,
  "timeTaken": 2014,
  "changeHistory": [
    "3988e75ca385aec31ca1fc49d6cffce1ea935825",
    "1f1655028eede24197705a594b6ef19e6737db35"
  ],
  "changeHistoryShort": {
    "3988e75ca385aec31ca1fc49d6cffce1ea935825": "Ymultichange(Yparameterchange,Ybodychange)",
    "1f1655028eede24197705a594b6ef19e6737db35": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3988e75ca385aec31ca1fc49d6cffce1ea935825": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16136. ABFS: Should only transform username to short name\n\nContributed by Da Zhou.\n",
      "commitDate": "26/02/19 7:37 AM",
      "commitName": "3988e75ca385aec31ca1fc49d6cffce1ea935825",
      "commitAuthor": "Da Zhou",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16136. ABFS: Should only transform username to short name\n\nContributed by Da Zhou.\n",
          "commitDate": "26/02/19 7:37 AM",
          "commitName": "3988e75ca385aec31ca1fc49d6cffce1ea935825",
          "commitAuthor": "Da Zhou",
          "commitDateOld": "07/02/19 1:58 PM",
          "commitNameOld": "1f1655028eede24197705a594b6ef19e6737db35",
          "commitAuthorOld": "Da Zhou",
          "daysBetweenCommits": 18.74,
          "commitsBetweenForRepo": 159,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  public String transformIdentityForGetRequest(String originalUserOrGroup, String localUserOrGroup) {\n-    if (originalUserOrGroup \u003d\u003d null) {\n-      originalUserOrGroup \u003d localUserOrGroup;\n-      // localUserOrGroup might be a full name, so continue the transformation.\n+  public String transformIdentityForGetRequest(String originalIdentity, boolean isUserName, String localIdentity) {\n+    if (originalIdentity \u003d\u003d null) {\n+      originalIdentity \u003d localIdentity;\n+      // localIdentity might be a full name, so continue the transformation.\n     }\n     // case 1: it is $superuser and replace $superuser config is enabled\n-    if (!skipSuperUserReplacement \u0026\u0026 SUPER_USER.equals(originalUserOrGroup)) {\n-      return localUserOrGroup;\n+    if (!skipSuperUserReplacement \u0026\u0026 SUPER_USER.equals(originalIdentity)) {\n+      return localIdentity;\n     }\n \n     if (skipUserIdentityReplacement) {\n-      return originalUserOrGroup;\n+      return originalIdentity;\n     }\n \n     // case 2: original owner is principalId set in config, and localUser\n     //         is a daemon service specified in substitution list,\n     //         To avoid ownership check failure in job task, replace it\n     //         to local daemon user/group\n-    if (originalUserOrGroup.equals(servicePrincipalId) \u0026\u0026 isInSubstitutionList(localUserOrGroup)) {\n-      return localUserOrGroup;\n+    if (originalIdentity.equals(servicePrincipalId) \u0026\u0026 isInSubstitutionList(localIdentity)) {\n+      return localIdentity;\n     }\n \n     // case 3: If original owner is a fully qualified name, and\n     //         short name is enabled, replace with shortName.\n-    if (shouldUseShortUserName(originalUserOrGroup)) {\n-      return getShortName(originalUserOrGroup);\n+    if (isUserName \u0026\u0026 shouldUseShortUserName(originalIdentity)) {\n+      return getShortName(originalIdentity);\n     }\n \n-    return originalUserOrGroup;\n+    return originalIdentity;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String transformIdentityForGetRequest(String originalIdentity, boolean isUserName, String localIdentity) {\n    if (originalIdentity \u003d\u003d null) {\n      originalIdentity \u003d localIdentity;\n      // localIdentity might be a full name, so continue the transformation.\n    }\n    // case 1: it is $superuser and replace $superuser config is enabled\n    if (!skipSuperUserReplacement \u0026\u0026 SUPER_USER.equals(originalIdentity)) {\n      return localIdentity;\n    }\n\n    if (skipUserIdentityReplacement) {\n      return originalIdentity;\n    }\n\n    // case 2: original owner is principalId set in config, and localUser\n    //         is a daemon service specified in substitution list,\n    //         To avoid ownership check failure in job task, replace it\n    //         to local daemon user/group\n    if (originalIdentity.equals(servicePrincipalId) \u0026\u0026 isInSubstitutionList(localIdentity)) {\n      return localIdentity;\n    }\n\n    // case 3: If original owner is a fully qualified name, and\n    //         short name is enabled, replace with shortName.\n    if (isUserName \u0026\u0026 shouldUseShortUserName(originalIdentity)) {\n      return getShortName(originalIdentity);\n    }\n\n    return originalIdentity;\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/IdentityTransformer.java",
          "extendedDetails": {
            "oldValue": "[originalUserOrGroup-String, localUserOrGroup-String]",
            "newValue": "[originalIdentity-String, isUserName-boolean, localIdentity-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16136. ABFS: Should only transform username to short name\n\nContributed by Da Zhou.\n",
          "commitDate": "26/02/19 7:37 AM",
          "commitName": "3988e75ca385aec31ca1fc49d6cffce1ea935825",
          "commitAuthor": "Da Zhou",
          "commitDateOld": "07/02/19 1:58 PM",
          "commitNameOld": "1f1655028eede24197705a594b6ef19e6737db35",
          "commitAuthorOld": "Da Zhou",
          "daysBetweenCommits": 18.74,
          "commitsBetweenForRepo": 159,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  public String transformIdentityForGetRequest(String originalUserOrGroup, String localUserOrGroup) {\n-    if (originalUserOrGroup \u003d\u003d null) {\n-      originalUserOrGroup \u003d localUserOrGroup;\n-      // localUserOrGroup might be a full name, so continue the transformation.\n+  public String transformIdentityForGetRequest(String originalIdentity, boolean isUserName, String localIdentity) {\n+    if (originalIdentity \u003d\u003d null) {\n+      originalIdentity \u003d localIdentity;\n+      // localIdentity might be a full name, so continue the transformation.\n     }\n     // case 1: it is $superuser and replace $superuser config is enabled\n-    if (!skipSuperUserReplacement \u0026\u0026 SUPER_USER.equals(originalUserOrGroup)) {\n-      return localUserOrGroup;\n+    if (!skipSuperUserReplacement \u0026\u0026 SUPER_USER.equals(originalIdentity)) {\n+      return localIdentity;\n     }\n \n     if (skipUserIdentityReplacement) {\n-      return originalUserOrGroup;\n+      return originalIdentity;\n     }\n \n     // case 2: original owner is principalId set in config, and localUser\n     //         is a daemon service specified in substitution list,\n     //         To avoid ownership check failure in job task, replace it\n     //         to local daemon user/group\n-    if (originalUserOrGroup.equals(servicePrincipalId) \u0026\u0026 isInSubstitutionList(localUserOrGroup)) {\n-      return localUserOrGroup;\n+    if (originalIdentity.equals(servicePrincipalId) \u0026\u0026 isInSubstitutionList(localIdentity)) {\n+      return localIdentity;\n     }\n \n     // case 3: If original owner is a fully qualified name, and\n     //         short name is enabled, replace with shortName.\n-    if (shouldUseShortUserName(originalUserOrGroup)) {\n-      return getShortName(originalUserOrGroup);\n+    if (isUserName \u0026\u0026 shouldUseShortUserName(originalIdentity)) {\n+      return getShortName(originalIdentity);\n     }\n \n-    return originalUserOrGroup;\n+    return originalIdentity;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String transformIdentityForGetRequest(String originalIdentity, boolean isUserName, String localIdentity) {\n    if (originalIdentity \u003d\u003d null) {\n      originalIdentity \u003d localIdentity;\n      // localIdentity might be a full name, so continue the transformation.\n    }\n    // case 1: it is $superuser and replace $superuser config is enabled\n    if (!skipSuperUserReplacement \u0026\u0026 SUPER_USER.equals(originalIdentity)) {\n      return localIdentity;\n    }\n\n    if (skipUserIdentityReplacement) {\n      return originalIdentity;\n    }\n\n    // case 2: original owner is principalId set in config, and localUser\n    //         is a daemon service specified in substitution list,\n    //         To avoid ownership check failure in job task, replace it\n    //         to local daemon user/group\n    if (originalIdentity.equals(servicePrincipalId) \u0026\u0026 isInSubstitutionList(localIdentity)) {\n      return localIdentity;\n    }\n\n    // case 3: If original owner is a fully qualified name, and\n    //         short name is enabled, replace with shortName.\n    if (isUserName \u0026\u0026 shouldUseShortUserName(originalIdentity)) {\n      return getShortName(originalIdentity);\n    }\n\n    return originalIdentity;\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/IdentityTransformer.java",
          "extendedDetails": {}
        }
      ]
    },
    "1f1655028eede24197705a594b6ef19e6737db35": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15954. ABFS: Enable owner and group conversion for MSI and login user using OAuth.\n\nContributed by Da Zhou and Junhua Gu.\n",
      "commitDate": "07/02/19 1:58 PM",
      "commitName": "1f1655028eede24197705a594b6ef19e6737db35",
      "commitAuthor": "Da Zhou",
      "diff": "@@ -0,0 +1,30 @@\n+  public String transformIdentityForGetRequest(String originalUserOrGroup, String localUserOrGroup) {\n+    if (originalUserOrGroup \u003d\u003d null) {\n+      originalUserOrGroup \u003d localUserOrGroup;\n+      // localUserOrGroup might be a full name, so continue the transformation.\n+    }\n+    // case 1: it is $superuser and replace $superuser config is enabled\n+    if (!skipSuperUserReplacement \u0026\u0026 SUPER_USER.equals(originalUserOrGroup)) {\n+      return localUserOrGroup;\n+    }\n+\n+    if (skipUserIdentityReplacement) {\n+      return originalUserOrGroup;\n+    }\n+\n+    // case 2: original owner is principalId set in config, and localUser\n+    //         is a daemon service specified in substitution list,\n+    //         To avoid ownership check failure in job task, replace it\n+    //         to local daemon user/group\n+    if (originalUserOrGroup.equals(servicePrincipalId) \u0026\u0026 isInSubstitutionList(localUserOrGroup)) {\n+      return localUserOrGroup;\n+    }\n+\n+    // case 3: If original owner is a fully qualified name, and\n+    //         short name is enabled, replace with shortName.\n+    if (shouldUseShortUserName(originalUserOrGroup)) {\n+      return getShortName(originalUserOrGroup);\n+    }\n+\n+    return originalUserOrGroup;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String transformIdentityForGetRequest(String originalUserOrGroup, String localUserOrGroup) {\n    if (originalUserOrGroup \u003d\u003d null) {\n      originalUserOrGroup \u003d localUserOrGroup;\n      // localUserOrGroup might be a full name, so continue the transformation.\n    }\n    // case 1: it is $superuser and replace $superuser config is enabled\n    if (!skipSuperUserReplacement \u0026\u0026 SUPER_USER.equals(originalUserOrGroup)) {\n      return localUserOrGroup;\n    }\n\n    if (skipUserIdentityReplacement) {\n      return originalUserOrGroup;\n    }\n\n    // case 2: original owner is principalId set in config, and localUser\n    //         is a daemon service specified in substitution list,\n    //         To avoid ownership check failure in job task, replace it\n    //         to local daemon user/group\n    if (originalUserOrGroup.equals(servicePrincipalId) \u0026\u0026 isInSubstitutionList(localUserOrGroup)) {\n      return localUserOrGroup;\n    }\n\n    // case 3: If original owner is a fully qualified name, and\n    //         short name is enabled, replace with shortName.\n    if (shouldUseShortUserName(originalUserOrGroup)) {\n      return getShortName(originalUserOrGroup);\n    }\n\n    return originalUserOrGroup;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/IdentityTransformer.java"
    }
  }
}