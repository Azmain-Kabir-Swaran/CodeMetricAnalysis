{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMS.java",
  "functionName": "generateEncryptedKeys",
  "functionId": "generateEncryptedKeys___name-String(annotations-@PathParam(\"name\")__modifiers-final)__edekOp-String(annotations-@QueryParam(KMSRESTConstants.EEK_OP))__numKeys-int(annotations-@DefaultValue(\"1\")-@QueryParam(KMSRESTConstants.EEK_NUM_KEYS)__modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
  "functionStartLine": 479,
  "functionEndLine": 544,
  "numCommitsSeen": 24,
  "timeTaken": 3035,
  "changeHistory": [
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99",
    "65912e4027548868ebefd8ee36eb00fa889704a7",
    "89bd6d29a62afd7ed8ff87bcc29d17b1cb53dcb6",
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
    "021ae471153ce2566924b0f6d29809669074c06d",
    "bda9c584c828fdd18e9c066747d58dbf751a585d",
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64"
  ],
  "changeHistoryShort": {
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99": "Ybodychange",
    "65912e4027548868ebefd8ee36eb00fa889704a7": "Ybodychange",
    "89bd6d29a62afd7ed8ff87bcc29d17b1cb53dcb6": "Ybodychange",
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "021ae471153ce2566924b0f6d29809669074c06d": "Ybodychange",
    "bda9c584c828fdd18e9c066747d58dbf751a585d": "Ybodychange",
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14705. Add batched interface reencryptEncryptedKeys to KMS.\n",
      "commitDate": "22/08/17 7:47 AM",
      "commitName": "4ec5acc70418a3f2327cf83ecae1789a057fdd99",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "08/06/17 10:35 PM",
      "commitNameOld": "c4b5c32669423b9a792f33f9f8333d95528f2515",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 74.38,
      "commitsBetweenForRepo": 438,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,66 @@\n   public Response generateEncryptedKeys(\n           @PathParam(\"name\") final String name,\n           @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n           @DefaultValue(\"1\")\n           @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) final int numKeys)\n           throws Exception {\n     try {\n       LOG.trace(\"Entering generateEncryptedKeys method.\");\n       UserGroupInformation user \u003d HttpUserGroupInformation.get();\n-      KMSClientProvider.checkNotEmpty(name, \"name\");\n-      KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n+      checkNotEmpty(name, \"name\");\n+      checkNotNull(edekOp, \"eekOp\");\n       LOG.debug(\"Generating encrypted key with name {},\" +\n               \" the edek Operation is {}.\", name, edekOp);\n \n       Object retJSON;\n       if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n         LOG.debug(\"edek Operation is Generate.\");\n         assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.GENERATE_EEK, name);\n \n         final List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n                 new LinkedList\u003cEncryptedKeyVersion\u003e();\n         try {\n \n           user.doAs(\n                   new PrivilegedExceptionAction\u003cVoid\u003e() {\n                   @Override\n                     public Void run() throws Exception {\n                     LOG.debug(\"Generated Encrypted key for {} number of \" +\n                               \"keys.\", numKeys);\n                     for (int i \u003d 0; i \u003c numKeys; i++) {\n                       retEdeks.add(provider.generateEncryptedKey(name));\n                     }\n                     return null;\n                   }\n                 }\n           );\n \n         } catch (Exception e) {\n           LOG.error(\"Exception in generateEncryptedKeys:\", e);\n           throw new IOException(e);\n         }\n         kmsAudit.ok(user, KMSOp.GENERATE_EEK, name, \"\");\n         retJSON \u003d new ArrayList();\n         for (EncryptedKeyVersion edek : retEdeks) {\n-          ((ArrayList) retJSON).add(KMSServerJSONUtils.toJSON(edek));\n+          ((ArrayList) retJSON).add(KMSUtil.toJSON(edek));\n         }\n       } else {\n         StringBuilder error;\n         error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n         error.append(KMSRESTConstants.EEK_OP);\n         error.append(\" value, it must be \");\n         error.append(KMSRESTConstants.EEK_GENERATE);\n         error.append(\" or \");\n         error.append(KMSRESTConstants.EEK_DECRYPT);\n         LOG.error(error.toString());\n         throw new IllegalArgumentException(error.toString());\n       }\n       KMSWebApp.getGenerateEEKCallsMeter().mark();\n       LOG.trace(\"Exiting generateEncryptedKeys method.\");\n       return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n               .build();\n     } catch (Exception e) {\n       LOG.debug(\"Exception in generateEncryptedKeys.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response generateEncryptedKeys(\n          @PathParam(\"name\") final String name,\n          @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n          @DefaultValue(\"1\")\n          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) final int numKeys)\n          throws Exception {\n    try {\n      LOG.trace(\"Entering generateEncryptedKeys method.\");\n      UserGroupInformation user \u003d HttpUserGroupInformation.get();\n      checkNotEmpty(name, \"name\");\n      checkNotNull(edekOp, \"eekOp\");\n      LOG.debug(\"Generating encrypted key with name {},\" +\n              \" the edek Operation is {}.\", name, edekOp);\n\n      Object retJSON;\n      if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n        LOG.debug(\"edek Operation is Generate.\");\n        assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.GENERATE_EEK, name);\n\n        final List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n                new LinkedList\u003cEncryptedKeyVersion\u003e();\n        try {\n\n          user.doAs(\n                  new PrivilegedExceptionAction\u003cVoid\u003e() {\n                  @Override\n                    public Void run() throws Exception {\n                    LOG.debug(\"Generated Encrypted key for {} number of \" +\n                              \"keys.\", numKeys);\n                    for (int i \u003d 0; i \u003c numKeys; i++) {\n                      retEdeks.add(provider.generateEncryptedKey(name));\n                    }\n                    return null;\n                  }\n                }\n          );\n\n        } catch (Exception e) {\n          LOG.error(\"Exception in generateEncryptedKeys:\", e);\n          throw new IOException(e);\n        }\n        kmsAudit.ok(user, KMSOp.GENERATE_EEK, name, \"\");\n        retJSON \u003d new ArrayList();\n        for (EncryptedKeyVersion edek : retEdeks) {\n          ((ArrayList) retJSON).add(KMSUtil.toJSON(edek));\n        }\n      } else {\n        StringBuilder error;\n        error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n        error.append(KMSRESTConstants.EEK_OP);\n        error.append(\" value, it must be \");\n        error.append(KMSRESTConstants.EEK_GENERATE);\n        error.append(\" or \");\n        error.append(KMSRESTConstants.EEK_DECRYPT);\n        LOG.error(error.toString());\n        throw new IllegalArgumentException(error.toString());\n      }\n      KMSWebApp.getGenerateEEKCallsMeter().mark();\n      LOG.trace(\"Exiting generateEncryptedKeys method.\");\n      return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n              .build();\n    } catch (Exception e) {\n      LOG.debug(\"Exception in generateEncryptedKeys.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "65912e4027548868ebefd8ee36eb00fa889704a7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13669. KMS Server should log exceptions before throwing. Contributed by Suraj Acharya.\n",
      "commitDate": "10/10/16 12:51 PM",
      "commitName": "65912e4027548868ebefd8ee36eb00fa889704a7",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "30/09/16 5:51 PM",
      "commitNameOld": "89bd6d29a62afd7ed8ff87bcc29d17b1cb53dcb6",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 9.79,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,66 @@\n   public Response generateEncryptedKeys(\n           @PathParam(\"name\") final String name,\n           @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n           @DefaultValue(\"1\")\n           @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) final int numKeys)\n           throws Exception {\n-    LOG.trace(\"Entering generateEncryptedKeys method.\");\n-    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n-    KMSClientProvider.checkNotEmpty(name, \"name\");\n-    KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n-    LOG.debug(\"Generating encrypted key with name {},\" +\n-            \" the edek Operation is {}.\", name, edekOp);\n+    try {\n+      LOG.trace(\"Entering generateEncryptedKeys method.\");\n+      UserGroupInformation user \u003d HttpUserGroupInformation.get();\n+      KMSClientProvider.checkNotEmpty(name, \"name\");\n+      KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n+      LOG.debug(\"Generating encrypted key with name {},\" +\n+              \" the edek Operation is {}.\", name, edekOp);\n \n-    Object retJSON;\n-    if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n-      LOG.debug(\"edek Operation is Generate.\");\n-      assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.GENERATE_EEK, name);\n+      Object retJSON;\n+      if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n+        LOG.debug(\"edek Operation is Generate.\");\n+        assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.GENERATE_EEK, name);\n \n-      final List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n-          new LinkedList\u003cEncryptedKeyVersion\u003e();\n-      try {\n+        final List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n+                new LinkedList\u003cEncryptedKeyVersion\u003e();\n+        try {\n \n-        user.doAs(\n-            new PrivilegedExceptionAction\u003cVoid\u003e() {\n-              @Override\n-              public Void run() throws Exception {\n-                  LOG.debug(\"Generated Encrypted key for {} number of keys.\",\n-                          numKeys);\n-                for (int i \u003d 0; i \u003c numKeys; i++) {\n-                  retEdeks.add(provider.generateEncryptedKey(name));\n+          user.doAs(\n+                  new PrivilegedExceptionAction\u003cVoid\u003e() {\n+                  @Override\n+                    public Void run() throws Exception {\n+                    LOG.debug(\"Generated Encrypted key for {} number of \" +\n+                              \"keys.\", numKeys);\n+                    for (int i \u003d 0; i \u003c numKeys; i++) {\n+                      retEdeks.add(provider.generateEncryptedKey(name));\n+                    }\n+                    return null;\n+                  }\n                 }\n-                return null;\n-              }\n-            }\n-        );\n+          );\n \n-      } catch (Exception e) {\n-        LOG.error(\"Exception in generateEncryptedKeys:\", e);\n-        throw new IOException(e);\n+        } catch (Exception e) {\n+          LOG.error(\"Exception in generateEncryptedKeys:\", e);\n+          throw new IOException(e);\n+        }\n+        kmsAudit.ok(user, KMSOp.GENERATE_EEK, name, \"\");\n+        retJSON \u003d new ArrayList();\n+        for (EncryptedKeyVersion edek : retEdeks) {\n+          ((ArrayList) retJSON).add(KMSServerJSONUtils.toJSON(edek));\n+        }\n+      } else {\n+        StringBuilder error;\n+        error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n+        error.append(KMSRESTConstants.EEK_OP);\n+        error.append(\" value, it must be \");\n+        error.append(KMSRESTConstants.EEK_GENERATE);\n+        error.append(\" or \");\n+        error.append(KMSRESTConstants.EEK_DECRYPT);\n+        LOG.error(error.toString());\n+        throw new IllegalArgumentException(error.toString());\n       }\n-      kmsAudit.ok(user, KMSOp.GENERATE_EEK, name, \"\");\n-      retJSON \u003d new ArrayList();\n-      for (EncryptedKeyVersion edek : retEdeks) {\n-        ((ArrayList)retJSON).add(KMSServerJSONUtils.toJSON(edek));\n-      }\n-    } else {\n-      StringBuilder error;\n-      error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n-      error.append(KMSRESTConstants.EEK_OP);\n-      error.append(\" value, it must be \");\n-      error.append(KMSRESTConstants.EEK_GENERATE);\n-      error.append(\" or \");\n-      error.append(KMSRESTConstants.EEK_DECRYPT);\n-      LOG.error(error.toString());\n-      throw new IllegalArgumentException(error.toString());\n+      KMSWebApp.getGenerateEEKCallsMeter().mark();\n+      LOG.trace(\"Exiting generateEncryptedKeys method.\");\n+      return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n+              .build();\n+    } catch (Exception e) {\n+      LOG.debug(\"Exception in generateEncryptedKeys.\", e);\n+      throw e;\n     }\n-    KMSWebApp.getGenerateEEKCallsMeter().mark();\n-    LOG.trace(\"Exiting generateEncryptedKeys method.\");\n-    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n-        .build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response generateEncryptedKeys(\n          @PathParam(\"name\") final String name,\n          @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n          @DefaultValue(\"1\")\n          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) final int numKeys)\n          throws Exception {\n    try {\n      LOG.trace(\"Entering generateEncryptedKeys method.\");\n      UserGroupInformation user \u003d HttpUserGroupInformation.get();\n      KMSClientProvider.checkNotEmpty(name, \"name\");\n      KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n      LOG.debug(\"Generating encrypted key with name {},\" +\n              \" the edek Operation is {}.\", name, edekOp);\n\n      Object retJSON;\n      if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n        LOG.debug(\"edek Operation is Generate.\");\n        assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.GENERATE_EEK, name);\n\n        final List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n                new LinkedList\u003cEncryptedKeyVersion\u003e();\n        try {\n\n          user.doAs(\n                  new PrivilegedExceptionAction\u003cVoid\u003e() {\n                  @Override\n                    public Void run() throws Exception {\n                    LOG.debug(\"Generated Encrypted key for {} number of \" +\n                              \"keys.\", numKeys);\n                    for (int i \u003d 0; i \u003c numKeys; i++) {\n                      retEdeks.add(provider.generateEncryptedKey(name));\n                    }\n                    return null;\n                  }\n                }\n          );\n\n        } catch (Exception e) {\n          LOG.error(\"Exception in generateEncryptedKeys:\", e);\n          throw new IOException(e);\n        }\n        kmsAudit.ok(user, KMSOp.GENERATE_EEK, name, \"\");\n        retJSON \u003d new ArrayList();\n        for (EncryptedKeyVersion edek : retEdeks) {\n          ((ArrayList) retJSON).add(KMSServerJSONUtils.toJSON(edek));\n        }\n      } else {\n        StringBuilder error;\n        error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n        error.append(KMSRESTConstants.EEK_OP);\n        error.append(\" value, it must be \");\n        error.append(KMSRESTConstants.EEK_GENERATE);\n        error.append(\" or \");\n        error.append(KMSRESTConstants.EEK_DECRYPT);\n        LOG.error(error.toString());\n        throw new IllegalArgumentException(error.toString());\n      }\n      KMSWebApp.getGenerateEEKCallsMeter().mark();\n      LOG.trace(\"Exiting generateEncryptedKeys method.\");\n      return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n              .build();\n    } catch (Exception e) {\n      LOG.debug(\"Exception in generateEncryptedKeys.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "89bd6d29a62afd7ed8ff87bcc29d17b1cb53dcb6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13317. Add logs to KMS server-side to improve supportability. Contributed by Suraj Acharya.\n",
      "commitDate": "30/09/16 5:51 PM",
      "commitName": "89bd6d29a62afd7ed8ff87bcc29d17b1cb53dcb6",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "25/03/16 3:28 PM",
      "commitNameOld": "d4df7849a5caf749403bd89d29652f69c9c3f5a8",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 189.1,
      "commitsBetweenForRepo": 1358,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,61 @@\n   public Response generateEncryptedKeys(\n           @PathParam(\"name\") final String name,\n           @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n           @DefaultValue(\"1\")\n           @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) final int numKeys)\n           throws Exception {\n+    LOG.trace(\"Entering generateEncryptedKeys method.\");\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     KMSClientProvider.checkNotEmpty(name, \"name\");\n     KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n+    LOG.debug(\"Generating encrypted key with name {},\" +\n+            \" the edek Operation is {}.\", name, edekOp);\n \n     Object retJSON;\n     if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n+      LOG.debug(\"edek Operation is Generate.\");\n       assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.GENERATE_EEK, name);\n \n       final List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n           new LinkedList\u003cEncryptedKeyVersion\u003e();\n       try {\n \n         user.doAs(\n             new PrivilegedExceptionAction\u003cVoid\u003e() {\n               @Override\n               public Void run() throws Exception {\n+                  LOG.debug(\"Generated Encrypted key for {} number of keys.\",\n+                          numKeys);\n                 for (int i \u003d 0; i \u003c numKeys; i++) {\n                   retEdeks.add(provider.generateEncryptedKey(name));\n                 }\n                 return null;\n               }\n             }\n         );\n \n       } catch (Exception e) {\n+        LOG.error(\"Exception in generateEncryptedKeys:\", e);\n         throw new IOException(e);\n       }\n       kmsAudit.ok(user, KMSOp.GENERATE_EEK, name, \"\");\n       retJSON \u003d new ArrayList();\n       for (EncryptedKeyVersion edek : retEdeks) {\n         ((ArrayList)retJSON).add(KMSServerJSONUtils.toJSON(edek));\n       }\n     } else {\n-      throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n-          \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n-          KMSRESTConstants.EEK_DECRYPT);\n+      StringBuilder error;\n+      error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n+      error.append(KMSRESTConstants.EEK_OP);\n+      error.append(\" value, it must be \");\n+      error.append(KMSRESTConstants.EEK_GENERATE);\n+      error.append(\" or \");\n+      error.append(KMSRESTConstants.EEK_DECRYPT);\n+      LOG.error(error.toString());\n+      throw new IllegalArgumentException(error.toString());\n     }\n     KMSWebApp.getGenerateEEKCallsMeter().mark();\n+    LOG.trace(\"Exiting generateEncryptedKeys method.\");\n     return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n         .build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response generateEncryptedKeys(\n          @PathParam(\"name\") final String name,\n          @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n          @DefaultValue(\"1\")\n          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) final int numKeys)\n          throws Exception {\n    LOG.trace(\"Entering generateEncryptedKeys method.\");\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    KMSClientProvider.checkNotEmpty(name, \"name\");\n    KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n    LOG.debug(\"Generating encrypted key with name {},\" +\n            \" the edek Operation is {}.\", name, edekOp);\n\n    Object retJSON;\n    if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n      LOG.debug(\"edek Operation is Generate.\");\n      assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.GENERATE_EEK, name);\n\n      final List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n          new LinkedList\u003cEncryptedKeyVersion\u003e();\n      try {\n\n        user.doAs(\n            new PrivilegedExceptionAction\u003cVoid\u003e() {\n              @Override\n              public Void run() throws Exception {\n                  LOG.debug(\"Generated Encrypted key for {} number of keys.\",\n                          numKeys);\n                for (int i \u003d 0; i \u003c numKeys; i++) {\n                  retEdeks.add(provider.generateEncryptedKey(name));\n                }\n                return null;\n              }\n            }\n        );\n\n      } catch (Exception e) {\n        LOG.error(\"Exception in generateEncryptedKeys:\", e);\n        throw new IOException(e);\n      }\n      kmsAudit.ok(user, KMSOp.GENERATE_EEK, name, \"\");\n      retJSON \u003d new ArrayList();\n      for (EncryptedKeyVersion edek : retEdeks) {\n        ((ArrayList)retJSON).add(KMSServerJSONUtils.toJSON(edek));\n      }\n    } else {\n      StringBuilder error;\n      error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n      error.append(KMSRESTConstants.EEK_OP);\n      error.append(\" value, it must be \");\n      error.append(KMSRESTConstants.EEK_GENERATE);\n      error.append(\" or \");\n      error.append(KMSRESTConstants.EEK_DECRYPT);\n      LOG.error(error.toString());\n      throw new IllegalArgumentException(error.toString());\n    }\n    KMSWebApp.getGenerateEEKCallsMeter().mark();\n    LOG.trace(\"Exiting generateEncryptedKeys method.\");\n    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n        .build();\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-10770. KMS add delegation token support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/14 10:03 PM",
      "commitName": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10770. KMS add delegation token support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618096 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/08/14 10:03 PM",
          "commitName": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "08/08/14 4:10 PM",
          "commitNameOld": "021ae471153ce2566924b0f6d29809669074c06d",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 6.25,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,47 @@\n   public Response generateEncryptedKeys(\n-          @Context SecurityContext securityContext,\n-          @PathParam(\"name\") String name,\n+          @PathParam(\"name\") final String name,\n           @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n           @DefaultValue(\"1\")\n-          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) int numKeys)\n+          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) final int numKeys)\n           throws Exception {\n-    Principal user \u003d getPrincipal(securityContext);\n+    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     KMSClientProvider.checkNotEmpty(name, \"name\");\n     KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n \n     Object retJSON;\n     if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n       assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.GENERATE_EEK, name);\n \n-      List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n+      final List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n           new LinkedList\u003cEncryptedKeyVersion\u003e();\n       try {\n-        for (int i \u003d 0; i \u003c numKeys; i ++) {\n-          retEdeks.add(provider.generateEncryptedKey(name));\n-        }\n+\n+        user.doAs(\n+            new PrivilegedExceptionAction\u003cVoid\u003e() {\n+              @Override\n+              public Void run() throws Exception {\n+                for (int i \u003d 0; i \u003c numKeys; i++) {\n+                  retEdeks.add(provider.generateEncryptedKey(name));\n+                }\n+                return null;\n+              }\n+            }\n+        );\n+\n       } catch (Exception e) {\n         throw new IOException(e);\n       }\n       kmsAudit.ok(user, KMSOp.GENERATE_EEK, name, \"\");\n       retJSON \u003d new ArrayList();\n       for (EncryptedKeyVersion edek : retEdeks) {\n         ((ArrayList)retJSON).add(KMSServerJSONUtils.toJSON(edek));\n       }\n     } else {\n       throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n           \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n           KMSRESTConstants.EEK_DECRYPT);\n     }\n     KMSWebApp.getGenerateEEKCallsMeter().mark();\n     return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n         .build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response generateEncryptedKeys(\n          @PathParam(\"name\") final String name,\n          @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n          @DefaultValue(\"1\")\n          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) final int numKeys)\n          throws Exception {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    KMSClientProvider.checkNotEmpty(name, \"name\");\n    KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n\n    Object retJSON;\n    if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n      assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.GENERATE_EEK, name);\n\n      final List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n          new LinkedList\u003cEncryptedKeyVersion\u003e();\n      try {\n\n        user.doAs(\n            new PrivilegedExceptionAction\u003cVoid\u003e() {\n              @Override\n              public Void run() throws Exception {\n                for (int i \u003d 0; i \u003c numKeys; i++) {\n                  retEdeks.add(provider.generateEncryptedKey(name));\n                }\n                return null;\n              }\n            }\n        );\n\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n      kmsAudit.ok(user, KMSOp.GENERATE_EEK, name, \"\");\n      retJSON \u003d new ArrayList();\n      for (EncryptedKeyVersion edek : retEdeks) {\n        ((ArrayList)retJSON).add(KMSServerJSONUtils.toJSON(edek));\n      }\n    } else {\n      throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n          \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n          KMSRESTConstants.EEK_DECRYPT);\n    }\n    KMSWebApp.getGenerateEEKCallsMeter().mark();\n    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n        .build();\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
          "extendedDetails": {
            "oldValue": "[securityContext-SecurityContext(annotations-@Context), name-String(annotations-@PathParam(\"name\")), edekOp-String(annotations-@QueryParam(KMSRESTConstants.EEK_OP)), numKeys-int(annotations-@DefaultValue(\"1\")-@QueryParam(KMSRESTConstants.EEK_NUM_KEYS))]",
            "newValue": "[name-String(annotations-@PathParam(\"name\")__modifiers-final), edekOp-String(annotations-@QueryParam(KMSRESTConstants.EEK_OP)), numKeys-int(annotations-@DefaultValue(\"1\")-@QueryParam(KMSRESTConstants.EEK_NUM_KEYS)__modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10770. KMS add delegation token support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618096 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/08/14 10:03 PM",
          "commitName": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "08/08/14 4:10 PM",
          "commitNameOld": "021ae471153ce2566924b0f6d29809669074c06d",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 6.25,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,47 @@\n   public Response generateEncryptedKeys(\n-          @Context SecurityContext securityContext,\n-          @PathParam(\"name\") String name,\n+          @PathParam(\"name\") final String name,\n           @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n           @DefaultValue(\"1\")\n-          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) int numKeys)\n+          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) final int numKeys)\n           throws Exception {\n-    Principal user \u003d getPrincipal(securityContext);\n+    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     KMSClientProvider.checkNotEmpty(name, \"name\");\n     KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n \n     Object retJSON;\n     if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n       assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.GENERATE_EEK, name);\n \n-      List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n+      final List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n           new LinkedList\u003cEncryptedKeyVersion\u003e();\n       try {\n-        for (int i \u003d 0; i \u003c numKeys; i ++) {\n-          retEdeks.add(provider.generateEncryptedKey(name));\n-        }\n+\n+        user.doAs(\n+            new PrivilegedExceptionAction\u003cVoid\u003e() {\n+              @Override\n+              public Void run() throws Exception {\n+                for (int i \u003d 0; i \u003c numKeys; i++) {\n+                  retEdeks.add(provider.generateEncryptedKey(name));\n+                }\n+                return null;\n+              }\n+            }\n+        );\n+\n       } catch (Exception e) {\n         throw new IOException(e);\n       }\n       kmsAudit.ok(user, KMSOp.GENERATE_EEK, name, \"\");\n       retJSON \u003d new ArrayList();\n       for (EncryptedKeyVersion edek : retEdeks) {\n         ((ArrayList)retJSON).add(KMSServerJSONUtils.toJSON(edek));\n       }\n     } else {\n       throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n           \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n           KMSRESTConstants.EEK_DECRYPT);\n     }\n     KMSWebApp.getGenerateEEKCallsMeter().mark();\n     return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n         .build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response generateEncryptedKeys(\n          @PathParam(\"name\") final String name,\n          @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n          @DefaultValue(\"1\")\n          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) final int numKeys)\n          throws Exception {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    KMSClientProvider.checkNotEmpty(name, \"name\");\n    KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n\n    Object retJSON;\n    if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n      assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.GENERATE_EEK, name);\n\n      final List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n          new LinkedList\u003cEncryptedKeyVersion\u003e();\n      try {\n\n        user.doAs(\n            new PrivilegedExceptionAction\u003cVoid\u003e() {\n              @Override\n              public Void run() throws Exception {\n                for (int i \u003d 0; i \u003c numKeys; i++) {\n                  retEdeks.add(provider.generateEncryptedKey(name));\n                }\n                return null;\n              }\n            }\n        );\n\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n      kmsAudit.ok(user, KMSOp.GENERATE_EEK, name, \"\");\n      retJSON \u003d new ArrayList();\n      for (EncryptedKeyVersion edek : retEdeks) {\n        ((ArrayList)retJSON).add(KMSServerJSONUtils.toJSON(edek));\n      }\n    } else {\n      throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n          \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n          KMSRESTConstants.EEK_DECRYPT);\n    }\n    KMSWebApp.getGenerateEEKCallsMeter().mark();\n    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n        .build();\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-10770. KMS add delegation token support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618096 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/08/14 10:03 PM",
          "commitName": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "08/08/14 4:10 PM",
          "commitNameOld": "021ae471153ce2566924b0f6d29809669074c06d",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 6.25,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,47 @@\n   public Response generateEncryptedKeys(\n-          @Context SecurityContext securityContext,\n-          @PathParam(\"name\") String name,\n+          @PathParam(\"name\") final String name,\n           @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n           @DefaultValue(\"1\")\n-          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) int numKeys)\n+          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) final int numKeys)\n           throws Exception {\n-    Principal user \u003d getPrincipal(securityContext);\n+    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     KMSClientProvider.checkNotEmpty(name, \"name\");\n     KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n \n     Object retJSON;\n     if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n       assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.GENERATE_EEK, name);\n \n-      List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n+      final List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n           new LinkedList\u003cEncryptedKeyVersion\u003e();\n       try {\n-        for (int i \u003d 0; i \u003c numKeys; i ++) {\n-          retEdeks.add(provider.generateEncryptedKey(name));\n-        }\n+\n+        user.doAs(\n+            new PrivilegedExceptionAction\u003cVoid\u003e() {\n+              @Override\n+              public Void run() throws Exception {\n+                for (int i \u003d 0; i \u003c numKeys; i++) {\n+                  retEdeks.add(provider.generateEncryptedKey(name));\n+                }\n+                return null;\n+              }\n+            }\n+        );\n+\n       } catch (Exception e) {\n         throw new IOException(e);\n       }\n       kmsAudit.ok(user, KMSOp.GENERATE_EEK, name, \"\");\n       retJSON \u003d new ArrayList();\n       for (EncryptedKeyVersion edek : retEdeks) {\n         ((ArrayList)retJSON).add(KMSServerJSONUtils.toJSON(edek));\n       }\n     } else {\n       throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n           \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n           KMSRESTConstants.EEK_DECRYPT);\n     }\n     KMSWebApp.getGenerateEEKCallsMeter().mark();\n     return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n         .build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response generateEncryptedKeys(\n          @PathParam(\"name\") final String name,\n          @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n          @DefaultValue(\"1\")\n          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) final int numKeys)\n          throws Exception {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    KMSClientProvider.checkNotEmpty(name, \"name\");\n    KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n\n    Object retJSON;\n    if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n      assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.GENERATE_EEK, name);\n\n      final List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n          new LinkedList\u003cEncryptedKeyVersion\u003e();\n      try {\n\n        user.doAs(\n            new PrivilegedExceptionAction\u003cVoid\u003e() {\n              @Override\n              public Void run() throws Exception {\n                for (int i \u003d 0; i \u003c numKeys; i++) {\n                  retEdeks.add(provider.generateEncryptedKey(name));\n                }\n                return null;\n              }\n            }\n        );\n\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n      kmsAudit.ok(user, KMSOp.GENERATE_EEK, name, \"\");\n      retJSON \u003d new ArrayList();\n      for (EncryptedKeyVersion edek : retEdeks) {\n        ((ArrayList)retJSON).add(KMSServerJSONUtils.toJSON(edek));\n      }\n    } else {\n      throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n          \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n          KMSRESTConstants.EEK_DECRYPT);\n    }\n    KMSWebApp.getGenerateEEKCallsMeter().mark();\n    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n        .build();\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
          "extendedDetails": {
            "oldValue": "[securityContext-SecurityContext(annotations-@Context), name-String(annotations-@PathParam(\"name\")), edekOp-String(annotations-@QueryParam(KMSRESTConstants.EEK_OP)), numKeys-int(annotations-@DefaultValue(\"1\")-@QueryParam(KMSRESTConstants.EEK_NUM_KEYS))]",
            "newValue": "[name-String(annotations-@PathParam(\"name\")__modifiers-final), edekOp-String(annotations-@QueryParam(KMSRESTConstants.EEK_OP)), numKeys-int(annotations-@DefaultValue(\"1\")-@QueryParam(KMSRESTConstants.EEK_NUM_KEYS)__modifiers-final)]"
          }
        }
      ]
    },
    "021ae471153ce2566924b0f6d29809669074c06d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10862. Miscellaneous trivial corrections to KMS classes. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616903 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/14 4:10 PM",
      "commitName": "021ae471153ce2566924b0f6d29809669074c06d",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "30/07/14 10:54 AM",
      "commitNameOld": "bda9c584c828fdd18e9c066747d58dbf751a585d",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 9.22,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public Response generateEncryptedKeys(\n           @Context SecurityContext securityContext,\n           @PathParam(\"name\") String name,\n           @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n           @DefaultValue(\"1\")\n           @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) int numKeys)\n           throws Exception {\n     Principal user \u003d getPrincipal(securityContext);\n     KMSClientProvider.checkNotEmpty(name, \"name\");\n     KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n \n     Object retJSON;\n     if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n-      assertAccess(KMSACLs.Type.GENERATE_EEK, user, GENERATE_EEK, name);\n+      assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.GENERATE_EEK, name);\n \n       List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n           new LinkedList\u003cEncryptedKeyVersion\u003e();\n       try {\n         for (int i \u003d 0; i \u003c numKeys; i ++) {\n           retEdeks.add(provider.generateEncryptedKey(name));\n         }\n       } catch (Exception e) {\n         throw new IOException(e);\n       }\n-      kmsAudit.ok(user, GENERATE_EEK, name, \"\");\n+      kmsAudit.ok(user, KMSOp.GENERATE_EEK, name, \"\");\n       retJSON \u003d new ArrayList();\n       for (EncryptedKeyVersion edek : retEdeks) {\n         ((ArrayList)retJSON).add(KMSServerJSONUtils.toJSON(edek));\n       }\n     } else {\n       throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n           \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n           KMSRESTConstants.EEK_DECRYPT);\n     }\n     KMSWebApp.getGenerateEEKCallsMeter().mark();\n     return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n         .build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response generateEncryptedKeys(\n          @Context SecurityContext securityContext,\n          @PathParam(\"name\") String name,\n          @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n          @DefaultValue(\"1\")\n          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) int numKeys)\n          throws Exception {\n    Principal user \u003d getPrincipal(securityContext);\n    KMSClientProvider.checkNotEmpty(name, \"name\");\n    KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n\n    Object retJSON;\n    if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n      assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.GENERATE_EEK, name);\n\n      List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n          new LinkedList\u003cEncryptedKeyVersion\u003e();\n      try {\n        for (int i \u003d 0; i \u003c numKeys; i ++) {\n          retEdeks.add(provider.generateEncryptedKey(name));\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n      kmsAudit.ok(user, KMSOp.GENERATE_EEK, name, \"\");\n      retJSON \u003d new ArrayList();\n      for (EncryptedKeyVersion edek : retEdeks) {\n        ((ArrayList)retJSON).add(KMSServerJSONUtils.toJSON(edek));\n      }\n    } else {\n      throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n          \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n          KMSRESTConstants.EEK_DECRYPT);\n    }\n    KMSWebApp.getGenerateEEKCallsMeter().mark();\n    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n        .build();\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "bda9c584c828fdd18e9c066747d58dbf751a585d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10756. KMS audit log should consolidate successful similar requests. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614725 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/07/14 10:54 AM",
      "commitName": "bda9c584c828fdd18e9c066747d58dbf751a585d",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "21/07/14 1:55 PM",
      "commitNameOld": "0c1469ece38556cf02a0c7bd23761d6bf79d9a64",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 8.87,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public Response generateEncryptedKeys(\n           @Context SecurityContext securityContext,\n           @PathParam(\"name\") String name,\n           @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n           @DefaultValue(\"1\")\n           @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) int numKeys)\n           throws Exception {\n     Principal user \u003d getPrincipal(securityContext);\n     KMSClientProvider.checkNotEmpty(name, \"name\");\n     KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n \n     Object retJSON;\n     if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n       assertAccess(KMSACLs.Type.GENERATE_EEK, user, GENERATE_EEK, name);\n \n       List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n           new LinkedList\u003cEncryptedKeyVersion\u003e();\n       try {\n         for (int i \u003d 0; i \u003c numKeys; i ++) {\n           retEdeks.add(provider.generateEncryptedKey(name));\n         }\n       } catch (Exception e) {\n         throw new IOException(e);\n       }\n-      KMSAudit.ok(user, GENERATE_EEK, name, \"\");\n+      kmsAudit.ok(user, GENERATE_EEK, name, \"\");\n       retJSON \u003d new ArrayList();\n       for (EncryptedKeyVersion edek : retEdeks) {\n         ((ArrayList)retJSON).add(KMSServerJSONUtils.toJSON(edek));\n       }\n     } else {\n       throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n           \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n           KMSRESTConstants.EEK_DECRYPT);\n     }\n     KMSWebApp.getGenerateEEKCallsMeter().mark();\n     return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n         .build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response generateEncryptedKeys(\n          @Context SecurityContext securityContext,\n          @PathParam(\"name\") String name,\n          @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n          @DefaultValue(\"1\")\n          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) int numKeys)\n          throws Exception {\n    Principal user \u003d getPrincipal(securityContext);\n    KMSClientProvider.checkNotEmpty(name, \"name\");\n    KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n\n    Object retJSON;\n    if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n      assertAccess(KMSACLs.Type.GENERATE_EEK, user, GENERATE_EEK, name);\n\n      List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n          new LinkedList\u003cEncryptedKeyVersion\u003e();\n      try {\n        for (int i \u003d 0; i \u003c numKeys; i ++) {\n          retEdeks.add(provider.generateEncryptedKey(name));\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n      kmsAudit.ok(user, GENERATE_EEK, name, \"\");\n      retJSON \u003d new ArrayList();\n      for (EncryptedKeyVersion edek : retEdeks) {\n        ((ArrayList)retJSON).add(KMSServerJSONUtils.toJSON(edek));\n      }\n    } else {\n      throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n          \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n          KMSRESTConstants.EEK_DECRYPT);\n    }\n    KMSWebApp.getGenerateEEKCallsMeter().mark();\n    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n        .build();\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10720. KMS: Implement generateEncryptedKey and decryptEncryptedKey in the REST API. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612399 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/14 1:55 PM",
      "commitName": "0c1469ece38556cf02a0c7bd23761d6bf79d9a64",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,38 @@\n+  public Response generateEncryptedKeys(\n+          @Context SecurityContext securityContext,\n+          @PathParam(\"name\") String name,\n+          @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n+          @DefaultValue(\"1\")\n+          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) int numKeys)\n+          throws Exception {\n+    Principal user \u003d getPrincipal(securityContext);\n+    KMSClientProvider.checkNotEmpty(name, \"name\");\n+    KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n+\n+    Object retJSON;\n+    if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n+      assertAccess(KMSACLs.Type.GENERATE_EEK, user, GENERATE_EEK, name);\n+\n+      List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n+          new LinkedList\u003cEncryptedKeyVersion\u003e();\n+      try {\n+        for (int i \u003d 0; i \u003c numKeys; i ++) {\n+          retEdeks.add(provider.generateEncryptedKey(name));\n+        }\n+      } catch (Exception e) {\n+        throw new IOException(e);\n+      }\n+      KMSAudit.ok(user, GENERATE_EEK, name, \"\");\n+      retJSON \u003d new ArrayList();\n+      for (EncryptedKeyVersion edek : retEdeks) {\n+        ((ArrayList)retJSON).add(KMSServerJSONUtils.toJSON(edek));\n+      }\n+    } else {\n+      throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n+          \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n+          KMSRESTConstants.EEK_DECRYPT);\n+    }\n+    KMSWebApp.getGenerateEEKCallsMeter().mark();\n+    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n+        .build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response generateEncryptedKeys(\n          @Context SecurityContext securityContext,\n          @PathParam(\"name\") String name,\n          @QueryParam(KMSRESTConstants.EEK_OP) String edekOp,\n          @DefaultValue(\"1\")\n          @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) int numKeys)\n          throws Exception {\n    Principal user \u003d getPrincipal(securityContext);\n    KMSClientProvider.checkNotEmpty(name, \"name\");\n    KMSClientProvider.checkNotNull(edekOp, \"eekOp\");\n\n    Object retJSON;\n    if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\n      assertAccess(KMSACLs.Type.GENERATE_EEK, user, GENERATE_EEK, name);\n\n      List\u003cEncryptedKeyVersion\u003e retEdeks \u003d\n          new LinkedList\u003cEncryptedKeyVersion\u003e();\n      try {\n        for (int i \u003d 0; i \u003c numKeys; i ++) {\n          retEdeks.add(provider.generateEncryptedKey(name));\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n      KMSAudit.ok(user, GENERATE_EEK, name, \"\");\n      retJSON \u003d new ArrayList();\n      for (EncryptedKeyVersion edek : retEdeks) {\n        ((ArrayList)retJSON).add(KMSServerJSONUtils.toJSON(edek));\n      }\n    } else {\n      throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n          \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n          KMSRESTConstants.EEK_DECRYPT);\n    }\n    KMSWebApp.getGenerateEEKCallsMeter().mark();\n    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n        .build();\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java"
    }
  }
}