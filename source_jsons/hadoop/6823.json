{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImageSerialization.java",
  "functionName": "writeCacheDirectiveInfo",
  "functionId": "writeCacheDirectiveInfo___out-DataOutputStream__directive-CacheDirectiveInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageSerialization.java",
  "functionStartLine": 522,
  "functionEndLine": 543,
  "numCommitsSeen": 62,
  "timeTaken": 2822,
  "changeHistory": [
    "ec851e4db24fad68c1d70a981b4253c0207abc45",
    "991c453ca3ac141a3f286f74af8401f83c38b230"
  ],
  "changeHistoryShort": {
    "ec851e4db24fad68c1d70a981b4253c0207abc45": "Ybodychange",
    "991c453ca3ac141a3f286f74af8401f83c38b230": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ec851e4db24fad68c1d70a981b4253c0207abc45": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12862. CacheDirective becomes invalid when NN restart or failover. Contributed by Wang XL.\n",
      "commitDate": "08/07/19 12:23 AM",
      "commitName": "ec851e4db24fad68c1d70a981b4253c0207abc45",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "14/09/17 6:43 PM",
      "commitNameOld": "08d996d3e9265efad737efad50cbc5b10a0202f8",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 661.24,
      "commitsBetweenForRepo": 5460,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public static void writeCacheDirectiveInfo(DataOutputStream out,\n       CacheDirectiveInfo directive) throws IOException {\n     writeLong(directive.getId(), out);\n     int flags \u003d\n         ((directive.getPath() !\u003d null) ? 0x1 : 0) |\n         ((directive.getReplication() !\u003d null) ? 0x2 : 0) |\n         ((directive.getPool() !\u003d null) ? 0x4 : 0) |\n         ((directive.getExpiration() !\u003d null) ? 0x8 : 0);\n     out.writeInt(flags);\n     if (directive.getPath() !\u003d null) {\n       writeString(directive.getPath().toUri().getPath(), out);\n     }\n     if (directive.getReplication() !\u003d null) {\n       writeShort(directive.getReplication(), out);\n     }\n     if (directive.getPool() !\u003d null) {\n       writeString(directive.getPool(), out);\n     }\n     if (directive.getExpiration() !\u003d null) {\n-      writeLong(directive.getExpiration().getMillis(), out);\n+      writeLong(directive.getExpiration().getAbsoluteMillis(), out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void writeCacheDirectiveInfo(DataOutputStream out,\n      CacheDirectiveInfo directive) throws IOException {\n    writeLong(directive.getId(), out);\n    int flags \u003d\n        ((directive.getPath() !\u003d null) ? 0x1 : 0) |\n        ((directive.getReplication() !\u003d null) ? 0x2 : 0) |\n        ((directive.getPool() !\u003d null) ? 0x4 : 0) |\n        ((directive.getExpiration() !\u003d null) ? 0x8 : 0);\n    out.writeInt(flags);\n    if (directive.getPath() !\u003d null) {\n      writeString(directive.getPath().toUri().getPath(), out);\n    }\n    if (directive.getReplication() !\u003d null) {\n      writeShort(directive.getReplication(), out);\n    }\n    if (directive.getPool() !\u003d null) {\n      writeString(directive.getPool(), out);\n    }\n    if (directive.getExpiration() !\u003d null) {\n      writeLong(directive.getExpiration().getAbsoluteMillis(), out);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageSerialization.java",
      "extendedDetails": {}
    },
    "991c453ca3ac141a3f286f74af8401f83c38b230": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5431. Support cachepool-based limit management in path-based caching. (awang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551651 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/13 10:47 AM",
      "commitName": "991c453ca3ac141a3f286f74af8401f83c38b230",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,22 @@\n+  public static void writeCacheDirectiveInfo(DataOutputStream out,\n+      CacheDirectiveInfo directive) throws IOException {\n+    writeLong(directive.getId(), out);\n+    int flags \u003d\n+        ((directive.getPath() !\u003d null) ? 0x1 : 0) |\n+        ((directive.getReplication() !\u003d null) ? 0x2 : 0) |\n+        ((directive.getPool() !\u003d null) ? 0x4 : 0) |\n+        ((directive.getExpiration() !\u003d null) ? 0x8 : 0);\n+    out.writeInt(flags);\n+    if (directive.getPath() !\u003d null) {\n+      writeString(directive.getPath().toUri().getPath(), out);\n+    }\n+    if (directive.getReplication() !\u003d null) {\n+      writeShort(directive.getReplication(), out);\n+    }\n+    if (directive.getPool() !\u003d null) {\n+      writeString(directive.getPool(), out);\n+    }\n+    if (directive.getExpiration() !\u003d null) {\n+      writeLong(directive.getExpiration().getMillis(), out);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void writeCacheDirectiveInfo(DataOutputStream out,\n      CacheDirectiveInfo directive) throws IOException {\n    writeLong(directive.getId(), out);\n    int flags \u003d\n        ((directive.getPath() !\u003d null) ? 0x1 : 0) |\n        ((directive.getReplication() !\u003d null) ? 0x2 : 0) |\n        ((directive.getPool() !\u003d null) ? 0x4 : 0) |\n        ((directive.getExpiration() !\u003d null) ? 0x8 : 0);\n    out.writeInt(flags);\n    if (directive.getPath() !\u003d null) {\n      writeString(directive.getPath().toUri().getPath(), out);\n    }\n    if (directive.getReplication() !\u003d null) {\n      writeShort(directive.getReplication(), out);\n    }\n    if (directive.getPool() !\u003d null) {\n      writeString(directive.getPool(), out);\n    }\n    if (directive.getExpiration() !\u003d null) {\n      writeLong(directive.getExpiration().getMillis(), out);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageSerialization.java"
    }
  }
}