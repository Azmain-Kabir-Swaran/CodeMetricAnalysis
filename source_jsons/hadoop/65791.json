{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DynamoDBMetadataStore.java",
  "functionName": "createDynamoDB",
  "functionId": "createDynamoDB___conf-Configuration(modifiers-final)__s3Region-String(modifiers-final)__bucket-String(modifiers-final)__credentials-AWSCredentialsProvider(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
  "functionStartLine": 369,
  "functionEndLine": 385,
  "numCommitsSeen": 52,
  "timeTaken": 4125,
  "changeHistory": [
    "d32a8d5d582725eb724b78f27310ad1efd33ed2a",
    "da9a39eed138210de29b59b90c449b28da1c04f9",
    "621b43e254afaff708cd6fc4698b29628f6abc33"
  ],
  "changeHistoryShort": {
    "d32a8d5d582725eb724b78f27310ad1efd33ed2a": "Ymultichange(Ymodifierchange,Ybodychange)",
    "da9a39eed138210de29b59b90c449b28da1c04f9": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d32a8d5d582725eb724b78f27310ad1efd33ed2a": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-14734 add option to tag DDB table(s) created. (Contributed by Gabor Bota and Abe Fine)\n",
      "commitDate": "12/09/18 4:36 PM",
      "commitName": "d32a8d5d582725eb724b78f27310ad1efd33ed2a",
      "commitAuthor": "Aaron Fabbri",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-14734 add option to tag DDB table(s) created. (Contributed by Gabor Bota and Abe Fine)\n",
          "commitDate": "12/09/18 4:36 PM",
          "commitName": "d32a8d5d582725eb724b78f27310ad1efd33ed2a",
          "commitAuthor": "Aaron Fabbri",
          "commitDateOld": "17/08/18 10:15 AM",
          "commitNameOld": "d7232857d8d1e10cdac171acdc931187e45fd6be",
          "commitAuthorOld": "Aaron Fabbri",
          "daysBetweenCommits": 26.26,
          "commitsBetweenForRepo": 188,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-  private static DynamoDB createDynamoDB(\n+  private DynamoDB createDynamoDB(\n       final Configuration conf,\n       final String s3Region,\n       final String bucket,\n       final AWSCredentialsProvider credentials)\n       throws IOException {\n-    Preconditions.checkNotNull(conf);\n-    final Class\u003c? extends DynamoDBClientFactory\u003e cls \u003d conf.getClass(\n-        S3GUARD_DDB_CLIENT_FACTORY_IMPL,\n-        S3GUARD_DDB_CLIENT_FACTORY_IMPL_DEFAULT,\n-        DynamoDBClientFactory.class);\n-    LOG.debug(\"Creating DynamoDB client {} with S3 region {}\", cls, s3Region);\n-    final AmazonDynamoDB dynamoDBClient \u003d ReflectionUtils.newInstance(cls, conf)\n-        .createDynamoDBClient(s3Region, bucket, credentials);\n-    return new DynamoDB(dynamoDBClient);\n+    if (amazonDynamoDB \u003d\u003d null) {\n+      Preconditions.checkNotNull(conf);\n+      final Class\u003c? extends DynamoDBClientFactory\u003e cls \u003d\n+          conf.getClass(S3GUARD_DDB_CLIENT_FACTORY_IMPL,\n+          S3GUARD_DDB_CLIENT_FACTORY_IMPL_DEFAULT, DynamoDBClientFactory.class);\n+      LOG.debug(\"Creating DynamoDB client {} with S3 region {}\", cls, s3Region);\n+      amazonDynamoDB \u003d ReflectionUtils.newInstance(cls, conf)\n+          .createDynamoDBClient(s3Region, bucket, credentials);\n+    }\n+    return new DynamoDB(amazonDynamoDB);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private DynamoDB createDynamoDB(\n      final Configuration conf,\n      final String s3Region,\n      final String bucket,\n      final AWSCredentialsProvider credentials)\n      throws IOException {\n    if (amazonDynamoDB \u003d\u003d null) {\n      Preconditions.checkNotNull(conf);\n      final Class\u003c? extends DynamoDBClientFactory\u003e cls \u003d\n          conf.getClass(S3GUARD_DDB_CLIENT_FACTORY_IMPL,\n          S3GUARD_DDB_CLIENT_FACTORY_IMPL_DEFAULT, DynamoDBClientFactory.class);\n      LOG.debug(\"Creating DynamoDB client {} with S3 region {}\", cls, s3Region);\n      amazonDynamoDB \u003d ReflectionUtils.newInstance(cls, conf)\n          .createDynamoDBClient(s3Region, bucket, credentials);\n    }\n    return new DynamoDB(amazonDynamoDB);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14734 add option to tag DDB table(s) created. (Contributed by Gabor Bota and Abe Fine)\n",
          "commitDate": "12/09/18 4:36 PM",
          "commitName": "d32a8d5d582725eb724b78f27310ad1efd33ed2a",
          "commitAuthor": "Aaron Fabbri",
          "commitDateOld": "17/08/18 10:15 AM",
          "commitNameOld": "d7232857d8d1e10cdac171acdc931187e45fd6be",
          "commitAuthorOld": "Aaron Fabbri",
          "daysBetweenCommits": 26.26,
          "commitsBetweenForRepo": 188,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-  private static DynamoDB createDynamoDB(\n+  private DynamoDB createDynamoDB(\n       final Configuration conf,\n       final String s3Region,\n       final String bucket,\n       final AWSCredentialsProvider credentials)\n       throws IOException {\n-    Preconditions.checkNotNull(conf);\n-    final Class\u003c? extends DynamoDBClientFactory\u003e cls \u003d conf.getClass(\n-        S3GUARD_DDB_CLIENT_FACTORY_IMPL,\n-        S3GUARD_DDB_CLIENT_FACTORY_IMPL_DEFAULT,\n-        DynamoDBClientFactory.class);\n-    LOG.debug(\"Creating DynamoDB client {} with S3 region {}\", cls, s3Region);\n-    final AmazonDynamoDB dynamoDBClient \u003d ReflectionUtils.newInstance(cls, conf)\n-        .createDynamoDBClient(s3Region, bucket, credentials);\n-    return new DynamoDB(dynamoDBClient);\n+    if (amazonDynamoDB \u003d\u003d null) {\n+      Preconditions.checkNotNull(conf);\n+      final Class\u003c? extends DynamoDBClientFactory\u003e cls \u003d\n+          conf.getClass(S3GUARD_DDB_CLIENT_FACTORY_IMPL,\n+          S3GUARD_DDB_CLIENT_FACTORY_IMPL_DEFAULT, DynamoDBClientFactory.class);\n+      LOG.debug(\"Creating DynamoDB client {} with S3 region {}\", cls, s3Region);\n+      amazonDynamoDB \u003d ReflectionUtils.newInstance(cls, conf)\n+          .createDynamoDBClient(s3Region, bucket, credentials);\n+    }\n+    return new DynamoDB(amazonDynamoDB);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private DynamoDB createDynamoDB(\n      final Configuration conf,\n      final String s3Region,\n      final String bucket,\n      final AWSCredentialsProvider credentials)\n      throws IOException {\n    if (amazonDynamoDB \u003d\u003d null) {\n      Preconditions.checkNotNull(conf);\n      final Class\u003c? extends DynamoDBClientFactory\u003e cls \u003d\n          conf.getClass(S3GUARD_DDB_CLIENT_FACTORY_IMPL,\n          S3GUARD_DDB_CLIENT_FACTORY_IMPL_DEFAULT, DynamoDBClientFactory.class);\n      LOG.debug(\"Creating DynamoDB client {} with S3 region {}\", cls, s3Region);\n      amazonDynamoDB \u003d ReflectionUtils.newInstance(cls, conf)\n          .createDynamoDBClient(s3Region, bucket, credentials);\n    }\n    return new DynamoDB(amazonDynamoDB);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "da9a39eed138210de29b59b90c449b28da1c04f9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-15583. Stabilize S3A Assumed Role support.\nContributed by Steve Loughran.\n",
      "commitDate": "08/08/18 10:57 PM",
      "commitName": "da9a39eed138210de29b59b90c449b28da1c04f9",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-15583. Stabilize S3A Assumed Role support.\nContributed by Steve Loughran.\n",
          "commitDate": "08/08/18 10:57 PM",
          "commitName": "da9a39eed138210de29b59b90c449b28da1c04f9",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "12/07/18 8:24 AM",
          "commitNameOld": "a08812a1b10df059b26f6a216e6339490298ba28",
          "commitAuthorOld": "Sean Mackrory",
          "daysBetweenCommits": 27.61,
          "commitsBetweenForRepo": 177,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,16 @@\n-  private static DynamoDB createDynamoDB(Configuration conf, String s3Region)\n+  private static DynamoDB createDynamoDB(\n+      final Configuration conf,\n+      final String s3Region,\n+      final String bucket,\n+      final AWSCredentialsProvider credentials)\n       throws IOException {\n     Preconditions.checkNotNull(conf);\n     final Class\u003c? extends DynamoDBClientFactory\u003e cls \u003d conf.getClass(\n         S3GUARD_DDB_CLIENT_FACTORY_IMPL,\n         S3GUARD_DDB_CLIENT_FACTORY_IMPL_DEFAULT,\n         DynamoDBClientFactory.class);\n     LOG.debug(\"Creating DynamoDB client {} with S3 region {}\", cls, s3Region);\n     final AmazonDynamoDB dynamoDBClient \u003d ReflectionUtils.newInstance(cls, conf)\n-        .createDynamoDBClient(s3Region);\n+        .createDynamoDBClient(s3Region, bucket, credentials);\n     return new DynamoDB(dynamoDBClient);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static DynamoDB createDynamoDB(\n      final Configuration conf,\n      final String s3Region,\n      final String bucket,\n      final AWSCredentialsProvider credentials)\n      throws IOException {\n    Preconditions.checkNotNull(conf);\n    final Class\u003c? extends DynamoDBClientFactory\u003e cls \u003d conf.getClass(\n        S3GUARD_DDB_CLIENT_FACTORY_IMPL,\n        S3GUARD_DDB_CLIENT_FACTORY_IMPL_DEFAULT,\n        DynamoDBClientFactory.class);\n    LOG.debug(\"Creating DynamoDB client {} with S3 region {}\", cls, s3Region);\n    final AmazonDynamoDB dynamoDBClient \u003d ReflectionUtils.newInstance(cls, conf)\n        .createDynamoDBClient(s3Region, bucket, credentials);\n    return new DynamoDB(dynamoDBClient);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, s3Region-String]",
            "newValue": "[conf-Configuration(modifiers-final), s3Region-String(modifiers-final), bucket-String(modifiers-final), credentials-AWSCredentialsProvider(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15583. Stabilize S3A Assumed Role support.\nContributed by Steve Loughran.\n",
          "commitDate": "08/08/18 10:57 PM",
          "commitName": "da9a39eed138210de29b59b90c449b28da1c04f9",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "12/07/18 8:24 AM",
          "commitNameOld": "a08812a1b10df059b26f6a216e6339490298ba28",
          "commitAuthorOld": "Sean Mackrory",
          "daysBetweenCommits": 27.61,
          "commitsBetweenForRepo": 177,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,16 @@\n-  private static DynamoDB createDynamoDB(Configuration conf, String s3Region)\n+  private static DynamoDB createDynamoDB(\n+      final Configuration conf,\n+      final String s3Region,\n+      final String bucket,\n+      final AWSCredentialsProvider credentials)\n       throws IOException {\n     Preconditions.checkNotNull(conf);\n     final Class\u003c? extends DynamoDBClientFactory\u003e cls \u003d conf.getClass(\n         S3GUARD_DDB_CLIENT_FACTORY_IMPL,\n         S3GUARD_DDB_CLIENT_FACTORY_IMPL_DEFAULT,\n         DynamoDBClientFactory.class);\n     LOG.debug(\"Creating DynamoDB client {} with S3 region {}\", cls, s3Region);\n     final AmazonDynamoDB dynamoDBClient \u003d ReflectionUtils.newInstance(cls, conf)\n-        .createDynamoDBClient(s3Region);\n+        .createDynamoDBClient(s3Region, bucket, credentials);\n     return new DynamoDB(dynamoDBClient);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static DynamoDB createDynamoDB(\n      final Configuration conf,\n      final String s3Region,\n      final String bucket,\n      final AWSCredentialsProvider credentials)\n      throws IOException {\n    Preconditions.checkNotNull(conf);\n    final Class\u003c? extends DynamoDBClientFactory\u003e cls \u003d conf.getClass(\n        S3GUARD_DDB_CLIENT_FACTORY_IMPL,\n        S3GUARD_DDB_CLIENT_FACTORY_IMPL_DEFAULT,\n        DynamoDBClientFactory.class);\n    LOG.debug(\"Creating DynamoDB client {} with S3 region {}\", cls, s3Region);\n    final AmazonDynamoDB dynamoDBClient \u003d ReflectionUtils.newInstance(cls, conf)\n        .createDynamoDBClient(s3Region, bucket, credentials);\n    return new DynamoDB(dynamoDBClient);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-15583. Stabilize S3A Assumed Role support.\nContributed by Steve Loughran.\n",
          "commitDate": "08/08/18 10:57 PM",
          "commitName": "da9a39eed138210de29b59b90c449b28da1c04f9",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "12/07/18 8:24 AM",
          "commitNameOld": "a08812a1b10df059b26f6a216e6339490298ba28",
          "commitAuthorOld": "Sean Mackrory",
          "daysBetweenCommits": 27.61,
          "commitsBetweenForRepo": 177,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,16 @@\n-  private static DynamoDB createDynamoDB(Configuration conf, String s3Region)\n+  private static DynamoDB createDynamoDB(\n+      final Configuration conf,\n+      final String s3Region,\n+      final String bucket,\n+      final AWSCredentialsProvider credentials)\n       throws IOException {\n     Preconditions.checkNotNull(conf);\n     final Class\u003c? extends DynamoDBClientFactory\u003e cls \u003d conf.getClass(\n         S3GUARD_DDB_CLIENT_FACTORY_IMPL,\n         S3GUARD_DDB_CLIENT_FACTORY_IMPL_DEFAULT,\n         DynamoDBClientFactory.class);\n     LOG.debug(\"Creating DynamoDB client {} with S3 region {}\", cls, s3Region);\n     final AmazonDynamoDB dynamoDBClient \u003d ReflectionUtils.newInstance(cls, conf)\n-        .createDynamoDBClient(s3Region);\n+        .createDynamoDBClient(s3Region, bucket, credentials);\n     return new DynamoDB(dynamoDBClient);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static DynamoDB createDynamoDB(\n      final Configuration conf,\n      final String s3Region,\n      final String bucket,\n      final AWSCredentialsProvider credentials)\n      throws IOException {\n    Preconditions.checkNotNull(conf);\n    final Class\u003c? extends DynamoDBClientFactory\u003e cls \u003d conf.getClass(\n        S3GUARD_DDB_CLIENT_FACTORY_IMPL,\n        S3GUARD_DDB_CLIENT_FACTORY_IMPL_DEFAULT,\n        DynamoDBClientFactory.class);\n    LOG.debug(\"Creating DynamoDB client {} with S3 region {}\", cls, s3Region);\n    final AmazonDynamoDB dynamoDBClient \u003d ReflectionUtils.newInstance(cls, conf)\n        .createDynamoDBClient(s3Region, bucket, credentials);\n    return new DynamoDB(dynamoDBClient);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, s3Region-String]",
            "newValue": "[conf-Configuration(modifiers-final), s3Region-String(modifiers-final), bucket-String(modifiers-final), credentials-AWSCredentialsProvider(modifiers-final)]"
          }
        }
      ]
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,12 @@\n+  private static DynamoDB createDynamoDB(Configuration conf, String s3Region)\n+      throws IOException {\n+    Preconditions.checkNotNull(conf);\n+    final Class\u003c? extends DynamoDBClientFactory\u003e cls \u003d conf.getClass(\n+        S3GUARD_DDB_CLIENT_FACTORY_IMPL,\n+        S3GUARD_DDB_CLIENT_FACTORY_IMPL_DEFAULT,\n+        DynamoDBClientFactory.class);\n+    LOG.debug(\"Creating DynamoDB client {} with S3 region {}\", cls, s3Region);\n+    final AmazonDynamoDB dynamoDBClient \u003d ReflectionUtils.newInstance(cls, conf)\n+        .createDynamoDBClient(s3Region);\n+    return new DynamoDB(dynamoDBClient);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static DynamoDB createDynamoDB(Configuration conf, String s3Region)\n      throws IOException {\n    Preconditions.checkNotNull(conf);\n    final Class\u003c? extends DynamoDBClientFactory\u003e cls \u003d conf.getClass(\n        S3GUARD_DDB_CLIENT_FACTORY_IMPL,\n        S3GUARD_DDB_CLIENT_FACTORY_IMPL_DEFAULT,\n        DynamoDBClientFactory.class);\n    LOG.debug(\"Creating DynamoDB client {} with S3 region {}\", cls, s3Region);\n    final AmazonDynamoDB dynamoDBClient \u003d ReflectionUtils.newInstance(cls, conf)\n        .createDynamoDBClient(s3Region);\n    return new DynamoDB(dynamoDBClient);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java"
    }
  }
}