{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientRMService.java",
  "functionName": "getDelegationToken",
  "functionId": "getDelegationToken___request-GetDelegationTokenRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
  "functionStartLine": 1114,
  "functionEndLine": 1149,
  "numCommitsSeen": 154,
  "timeTaken": 3909,
  "changeHistory": [
    "cffea251be4b73ca16e5e11f0be2d22651330f73",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "dd8fc7e499200476f44a3d1d38127f5c47c9eefb",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "aa60da6c2ec049cc70897afee6c368cb70493773",
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e"
  ],
  "changeHistoryShort": {
    "cffea251be4b73ca16e5e11f0be2d22651330f73": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Yexceptionschange",
    "dd8fc7e499200476f44a3d1d38127f5c47c9eefb": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "aa60da6c2ec049cc70897afee6c368cb70493773": "Ybodychange",
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cffea251be4b73ca16e5e11f0be2d22651330f73": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5956. Refactor ClientRMService for unify error handling across apis. Contributed by Kai Sasaki.\n",
      "commitDate": "25/03/17 9:56 AM",
      "commitName": "cffea251be4b73ca16e5e11f0be2d22651330f73",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/02/17 11:04 AM",
      "commitNameOld": "e0bb867c3fa638c9f689ee0b044b400481cf02b5",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 24.91,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public GetDelegationTokenResponse getDelegationToken(\n       GetDelegationTokenRequest request) throws YarnException {\n     try {\n \n       // Verify that the connection is kerberos authenticated\n       if (!isAllowedDelegationTokenOp()) {\n         throw new IOException(\n           \"Delegation Token can be issued only with kerberos authentication\");\n       }\n \n       GetDelegationTokenResponse response \u003d\n           recordFactory.newRecordInstance(GetDelegationTokenResponse.class);\n       UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n       Text owner \u003d new Text(ugi.getUserName());\n       Text realUser \u003d null;\n       if (ugi.getRealUser() !\u003d null) {\n         realUser \u003d new Text(ugi.getRealUser().getUserName());\n       }\n       RMDelegationTokenIdentifier tokenIdentifier \u003d\n           new RMDelegationTokenIdentifier(owner, new Text(request.getRenewer()), \n               realUser);\n-      Token\u003cRMDelegationTokenIdentifier\u003e realRMDTtoken \u003d\n+      Token\u003cRMDelegationTokenIdentifier\u003e realRMDToken \u003d\n           new Token\u003cRMDelegationTokenIdentifier\u003e(tokenIdentifier,\n               this.rmDTSecretManager);\n       response.setRMDelegationToken(\n           BuilderUtils.newDelegationToken(\n-              realRMDTtoken.getIdentifier(),\n-              realRMDTtoken.getKind().toString(),\n-              realRMDTtoken.getPassword(),\n-              realRMDTtoken.getService().toString()\n+              realRMDToken.getIdentifier(),\n+              realRMDToken.getKind().toString(),\n+              realRMDToken.getPassword(),\n+              realRMDToken.getService().toString()\n               ));\n       return response;\n     } catch(IOException io) {\n       throw RPCUtil.getRemoteException(io);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetDelegationTokenResponse getDelegationToken(\n      GetDelegationTokenRequest request) throws YarnException {\n    try {\n\n      // Verify that the connection is kerberos authenticated\n      if (!isAllowedDelegationTokenOp()) {\n        throw new IOException(\n          \"Delegation Token can be issued only with kerberos authentication\");\n      }\n\n      GetDelegationTokenResponse response \u003d\n          recordFactory.newRecordInstance(GetDelegationTokenResponse.class);\n      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n      Text owner \u003d new Text(ugi.getUserName());\n      Text realUser \u003d null;\n      if (ugi.getRealUser() !\u003d null) {\n        realUser \u003d new Text(ugi.getRealUser().getUserName());\n      }\n      RMDelegationTokenIdentifier tokenIdentifier \u003d\n          new RMDelegationTokenIdentifier(owner, new Text(request.getRenewer()), \n              realUser);\n      Token\u003cRMDelegationTokenIdentifier\u003e realRMDToken \u003d\n          new Token\u003cRMDelegationTokenIdentifier\u003e(tokenIdentifier,\n              this.rmDTSecretManager);\n      response.setRMDelegationToken(\n          BuilderUtils.newDelegationToken(\n              realRMDToken.getIdentifier(),\n              realRMDToken.getKind().toString(),\n              realRMDToken.getPassword(),\n              realRMDToken.getService().toString()\n              ));\n      return response;\n    } catch(IOException io) {\n      throw RPCUtil.getRemoteException(io);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 5:34 PM",
      "commitNameOld": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public GetDelegationTokenResponse getDelegationToken(\n-      GetDelegationTokenRequest request) throws YarnRemoteException {\n+      GetDelegationTokenRequest request) throws YarnException {\n     try {\n \n       // Verify that the connection is kerberos authenticated\n       if (!isAllowedDelegationTokenOp()) {\n         throw new IOException(\n           \"Delegation Token can be issued only with kerberos authentication\");\n       }\n \n       GetDelegationTokenResponse response \u003d\n           recordFactory.newRecordInstance(GetDelegationTokenResponse.class);\n       UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n       Text owner \u003d new Text(ugi.getUserName());\n       Text realUser \u003d null;\n       if (ugi.getRealUser() !\u003d null) {\n         realUser \u003d new Text(ugi.getRealUser().getUserName());\n       }\n       RMDelegationTokenIdentifier tokenIdentifier \u003d\n           new RMDelegationTokenIdentifier(owner, new Text(request.getRenewer()), \n               realUser);\n       Token\u003cRMDelegationTokenIdentifier\u003e realRMDTtoken \u003d\n           new Token\u003cRMDelegationTokenIdentifier\u003e(tokenIdentifier,\n               this.rmDTSecretManager);\n       response.setRMDelegationToken(\n           BuilderUtils.newDelegationToken(\n               realRMDTtoken.getIdentifier(),\n               realRMDTtoken.getKind().toString(),\n               realRMDTtoken.getPassword(),\n               realRMDTtoken.getService().toString()\n               ));\n       return response;\n     } catch(IOException io) {\n       throw RPCUtil.getRemoteException(io);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetDelegationTokenResponse getDelegationToken(\n      GetDelegationTokenRequest request) throws YarnException {\n    try {\n\n      // Verify that the connection is kerberos authenticated\n      if (!isAllowedDelegationTokenOp()) {\n        throw new IOException(\n          \"Delegation Token can be issued only with kerberos authentication\");\n      }\n\n      GetDelegationTokenResponse response \u003d\n          recordFactory.newRecordInstance(GetDelegationTokenResponse.class);\n      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n      Text owner \u003d new Text(ugi.getUserName());\n      Text realUser \u003d null;\n      if (ugi.getRealUser() !\u003d null) {\n        realUser \u003d new Text(ugi.getRealUser().getUserName());\n      }\n      RMDelegationTokenIdentifier tokenIdentifier \u003d\n          new RMDelegationTokenIdentifier(owner, new Text(request.getRenewer()), \n              realUser);\n      Token\u003cRMDelegationTokenIdentifier\u003e realRMDTtoken \u003d\n          new Token\u003cRMDelegationTokenIdentifier\u003e(tokenIdentifier,\n              this.rmDTSecretManager);\n      response.setRMDelegationToken(\n          BuilderUtils.newDelegationToken(\n              realRMDTtoken.getIdentifier(),\n              realRMDTtoken.getKind().toString(),\n              realRMDTtoken.getPassword(),\n              realRMDTtoken.getService().toString()\n              ));\n      return response;\n    } catch(IOException io) {\n      throw RPCUtil.getRemoteException(io);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException]",
        "newValue": "[YarnException]"
      }
    },
    "dd8fc7e499200476f44a3d1d38127f5c47c9eefb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-50. Implement renewal / cancellation of Delegation Tokens(Siddharth Seth via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1429085 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/01/13 12:15 PM",
      "commitName": "dd8fc7e499200476f44a3d1d38127f5c47c9eefb",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "18/12/12 8:21 PM",
      "commitNameOld": "6cd0736cc57849e4f7c5d38a3986432a9717fe39",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 16.66,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,36 @@\n   public GetDelegationTokenResponse getDelegationToken(\n       GetDelegationTokenRequest request) throws YarnRemoteException {\n     try {\n \n       // Verify that the connection is kerberos authenticated\n-      AuthenticationMethod authMethod \u003d UserGroupInformation\n-        .getRealAuthenticationMethod(UserGroupInformation.getCurrentUser());\n-      if (UserGroupInformation.isSecurityEnabled()\n-          \u0026\u0026 (authMethod !\u003d AuthenticationMethod.KERBEROS)) {\n+      if (!isAllowedDelegationTokenOp()) {\n         throw new IOException(\n           \"Delegation Token can be issued only with kerberos authentication\");\n       }\n \n       GetDelegationTokenResponse response \u003d\n           recordFactory.newRecordInstance(GetDelegationTokenResponse.class);\n       UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n       Text owner \u003d new Text(ugi.getUserName());\n       Text realUser \u003d null;\n       if (ugi.getRealUser() !\u003d null) {\n         realUser \u003d new Text(ugi.getRealUser().getUserName());\n       }\n       RMDelegationTokenIdentifier tokenIdentifier \u003d\n           new RMDelegationTokenIdentifier(owner, new Text(request.getRenewer()), \n               realUser);\n       Token\u003cRMDelegationTokenIdentifier\u003e realRMDTtoken \u003d\n           new Token\u003cRMDelegationTokenIdentifier\u003e(tokenIdentifier,\n               this.rmDTSecretManager);\n       response.setRMDelegationToken(\n           BuilderUtils.newDelegationToken(\n               realRMDTtoken.getIdentifier(),\n               realRMDTtoken.getKind().toString(),\n               realRMDTtoken.getPassword(),\n               realRMDTtoken.getService().toString()\n               ));\n       return response;\n     } catch(IOException io) {\n       throw RPCUtil.getRemoteException(io);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetDelegationTokenResponse getDelegationToken(\n      GetDelegationTokenRequest request) throws YarnRemoteException {\n    try {\n\n      // Verify that the connection is kerberos authenticated\n      if (!isAllowedDelegationTokenOp()) {\n        throw new IOException(\n          \"Delegation Token can be issued only with kerberos authentication\");\n      }\n\n      GetDelegationTokenResponse response \u003d\n          recordFactory.newRecordInstance(GetDelegationTokenResponse.class);\n      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n      Text owner \u003d new Text(ugi.getUserName());\n      Text realUser \u003d null;\n      if (ugi.getRealUser() !\u003d null) {\n        realUser \u003d new Text(ugi.getRealUser().getUserName());\n      }\n      RMDelegationTokenIdentifier tokenIdentifier \u003d\n          new RMDelegationTokenIdentifier(owner, new Text(request.getRenewer()), \n              realUser);\n      Token\u003cRMDelegationTokenIdentifier\u003e realRMDTtoken \u003d\n          new Token\u003cRMDelegationTokenIdentifier\u003e(tokenIdentifier,\n              this.rmDTSecretManager);\n      response.setRMDelegationToken(\n          BuilderUtils.newDelegationToken(\n              realRMDTtoken.getIdentifier(),\n              realRMDTtoken.getKind().toString(),\n              realRMDTtoken.getPassword(),\n              realRMDTtoken.getService().toString()\n              ));\n      return response;\n    } catch(IOException io) {\n      throw RPCUtil.getRemoteException(io);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public GetDelegationTokenResponse getDelegationToken(\n      GetDelegationTokenRequest request) throws YarnRemoteException {\n    try {\n\n      // Verify that the connection is kerberos authenticated\n      AuthenticationMethod authMethod \u003d UserGroupInformation\n        .getRealAuthenticationMethod(UserGroupInformation.getCurrentUser());\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 (authMethod !\u003d AuthenticationMethod.KERBEROS)) {\n        throw new IOException(\n          \"Delegation Token can be issued only with kerberos authentication\");\n      }\n\n      GetDelegationTokenResponse response \u003d\n          recordFactory.newRecordInstance(GetDelegationTokenResponse.class);\n      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n      Text owner \u003d new Text(ugi.getUserName());\n      Text realUser \u003d null;\n      if (ugi.getRealUser() !\u003d null) {\n        realUser \u003d new Text(ugi.getRealUser().getUserName());\n      }\n      RMDelegationTokenIdentifier tokenIdentifier \u003d\n          new RMDelegationTokenIdentifier(owner, new Text(request.getRenewer()), \n              realUser);\n      Token\u003cRMDelegationTokenIdentifier\u003e realRMDTtoken \u003d\n          new Token\u003cRMDelegationTokenIdentifier\u003e(tokenIdentifier,\n              this.rmDTSecretManager);\n      response.setRMDelegationToken(\n          BuilderUtils.newDelegationToken(\n              realRMDTtoken.getIdentifier(),\n              realRMDTtoken.getKind().toString(),\n              realRMDTtoken.getPassword(),\n              realRMDTtoken.getService().toString()\n              ));\n      return response;\n    } catch(IOException io) {\n      throw RPCUtil.getRemoteException(io);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
      }
    },
    "aa60da6c2ec049cc70897afee6c368cb70493773": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4162. Correctly set token service (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1335567 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/12 8:07 AM",
      "commitName": "aa60da6c2ec049cc70897afee6c368cb70493773",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "04/05/12 8:47 AM",
      "commitNameOld": "407cfa3b56a0645d64d2d9af305f6ef24307e775",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 3.97,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,39 @@\n   public GetDelegationTokenResponse getDelegationToken(\n       GetDelegationTokenRequest request) throws YarnRemoteException {\n     try {\n \n       // Verify that the connection is kerberos authenticated\n       AuthenticationMethod authMethod \u003d UserGroupInformation\n         .getRealAuthenticationMethod(UserGroupInformation.getCurrentUser());\n       if (UserGroupInformation.isSecurityEnabled()\n           \u0026\u0026 (authMethod !\u003d AuthenticationMethod.KERBEROS)) {\n         throw new IOException(\n           \"Delegation Token can be issued only with kerberos authentication\");\n       }\n \n       GetDelegationTokenResponse response \u003d\n           recordFactory.newRecordInstance(GetDelegationTokenResponse.class);\n       UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n       Text owner \u003d new Text(ugi.getUserName());\n       Text realUser \u003d null;\n       if (ugi.getRealUser() !\u003d null) {\n         realUser \u003d new Text(ugi.getRealUser().getUserName());\n       }\n       RMDelegationTokenIdentifier tokenIdentifier \u003d\n           new RMDelegationTokenIdentifier(owner, new Text(request.getRenewer()), \n               realUser);\n       Token\u003cRMDelegationTokenIdentifier\u003e realRMDTtoken \u003d\n           new Token\u003cRMDelegationTokenIdentifier\u003e(tokenIdentifier,\n               this.rmDTSecretManager);\n       response.setRMDelegationToken(\n           BuilderUtils.newDelegationToken(\n               realRMDTtoken.getIdentifier(),\n               realRMDTtoken.getKind().toString(),\n               realRMDTtoken.getPassword(),\n-              clientBindAddress.getAddress().getHostAddress() + \":\"\n-              + clientBindAddress.getPort()\n+              realRMDTtoken.getService().toString()\n               ));\n       return response;\n     } catch(IOException io) {\n       throw RPCUtil.getRemoteException(io);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetDelegationTokenResponse getDelegationToken(\n      GetDelegationTokenRequest request) throws YarnRemoteException {\n    try {\n\n      // Verify that the connection is kerberos authenticated\n      AuthenticationMethod authMethod \u003d UserGroupInformation\n        .getRealAuthenticationMethod(UserGroupInformation.getCurrentUser());\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 (authMethod !\u003d AuthenticationMethod.KERBEROS)) {\n        throw new IOException(\n          \"Delegation Token can be issued only with kerberos authentication\");\n      }\n\n      GetDelegationTokenResponse response \u003d\n          recordFactory.newRecordInstance(GetDelegationTokenResponse.class);\n      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n      Text owner \u003d new Text(ugi.getUserName());\n      Text realUser \u003d null;\n      if (ugi.getRealUser() !\u003d null) {\n        realUser \u003d new Text(ugi.getRealUser().getUserName());\n      }\n      RMDelegationTokenIdentifier tokenIdentifier \u003d\n          new RMDelegationTokenIdentifier(owner, new Text(request.getRenewer()), \n              realUser);\n      Token\u003cRMDelegationTokenIdentifier\u003e realRMDTtoken \u003d\n          new Token\u003cRMDelegationTokenIdentifier\u003e(tokenIdentifier,\n              this.rmDTSecretManager);\n      response.setRMDelegationToken(\n          BuilderUtils.newDelegationToken(\n              realRMDTtoken.getIdentifier(),\n              realRMDTtoken.getKind().toString(),\n              realRMDTtoken.getPassword(),\n              realRMDTtoken.getService().toString()\n              ));\n      return response;\n    } catch(IOException io) {\n      throw RPCUtil.getRemoteException(io);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3380. Token infrastructure for running clients which are not kerberos authenticated. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1229855 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/12 5:50 PM",
      "commitName": "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e",
      "commitAuthor": "Mahadev Konar",
      "diff": "@@ -0,0 +1,40 @@\n+  public GetDelegationTokenResponse getDelegationToken(\n+      GetDelegationTokenRequest request) throws YarnRemoteException {\n+    try {\n+\n+      // Verify that the connection is kerberos authenticated\n+      AuthenticationMethod authMethod \u003d UserGroupInformation\n+        .getRealAuthenticationMethod(UserGroupInformation.getCurrentUser());\n+      if (UserGroupInformation.isSecurityEnabled()\n+          \u0026\u0026 (authMethod !\u003d AuthenticationMethod.KERBEROS)) {\n+        throw new IOException(\n+          \"Delegation Token can be issued only with kerberos authentication\");\n+      }\n+\n+      GetDelegationTokenResponse response \u003d\n+          recordFactory.newRecordInstance(GetDelegationTokenResponse.class);\n+      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n+      Text owner \u003d new Text(ugi.getUserName());\n+      Text realUser \u003d null;\n+      if (ugi.getRealUser() !\u003d null) {\n+        realUser \u003d new Text(ugi.getRealUser().getUserName());\n+      }\n+      RMDelegationTokenIdentifier tokenIdentifier \u003d\n+          new RMDelegationTokenIdentifier(owner, new Text(request.getRenewer()), \n+              realUser);\n+      Token\u003cRMDelegationTokenIdentifier\u003e realRMDTtoken \u003d\n+          new Token\u003cRMDelegationTokenIdentifier\u003e(tokenIdentifier,\n+              this.rmDTSecretManager);\n+      response.setRMDelegationToken(\n+          BuilderUtils.newDelegationToken(\n+              realRMDTtoken.getIdentifier(),\n+              realRMDTtoken.getKind().toString(),\n+              realRMDTtoken.getPassword(),\n+              clientBindAddress.getAddress().getHostAddress() + \":\"\n+              + clientBindAddress.getPort()\n+              ));\n+      return response;\n+    } catch(IOException io) {\n+      throw RPCUtil.getRemoteException(io);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public GetDelegationTokenResponse getDelegationToken(\n      GetDelegationTokenRequest request) throws YarnRemoteException {\n    try {\n\n      // Verify that the connection is kerberos authenticated\n      AuthenticationMethod authMethod \u003d UserGroupInformation\n        .getRealAuthenticationMethod(UserGroupInformation.getCurrentUser());\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 (authMethod !\u003d AuthenticationMethod.KERBEROS)) {\n        throw new IOException(\n          \"Delegation Token can be issued only with kerberos authentication\");\n      }\n\n      GetDelegationTokenResponse response \u003d\n          recordFactory.newRecordInstance(GetDelegationTokenResponse.class);\n      UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n      Text owner \u003d new Text(ugi.getUserName());\n      Text realUser \u003d null;\n      if (ugi.getRealUser() !\u003d null) {\n        realUser \u003d new Text(ugi.getRealUser().getUserName());\n      }\n      RMDelegationTokenIdentifier tokenIdentifier \u003d\n          new RMDelegationTokenIdentifier(owner, new Text(request.getRenewer()), \n              realUser);\n      Token\u003cRMDelegationTokenIdentifier\u003e realRMDTtoken \u003d\n          new Token\u003cRMDelegationTokenIdentifier\u003e(tokenIdentifier,\n              this.rmDTSecretManager);\n      response.setRMDelegationToken(\n          BuilderUtils.newDelegationToken(\n              realRMDTtoken.getIdentifier(),\n              realRMDTtoken.getKind().toString(),\n              realRMDTtoken.getPassword(),\n              clientBindAddress.getAddress().getHostAddress() + \":\"\n              + clientBindAddress.getPort()\n              ));\n      return response;\n    } catch(IOException io) {\n      throw RPCUtil.getRemoteException(io);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
    }
  }
}