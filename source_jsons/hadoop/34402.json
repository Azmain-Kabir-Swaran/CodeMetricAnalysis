{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceLocalizationService.java",
  "functionName": "handle",
  "functionId": "handle___event-LocalizationEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
  "functionStartLine": 435,
  "functionEndLine": 461,
  "numCommitsSeen": 107,
  "timeTaken": 9362,
  "changeHistory": [
    "1b79c417dca17bcd2e031864bc6ca07254c61b47",
    "e6fcfe28e304062c7d09231db757acb2953703ce",
    "47279c3228185548ed09c36579b420225e4894f5",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "11b9dd4e844c762f8c53e5fafa25f29eece1bc87",
    "02a81203bd0ff6116e3c68d376b3af3838231986",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
    "c8383a5f4919aabc6ff42f6a2ce807149c4d65ef",
    "8fb67650b146573c20ae010e28b1eca6e16433b3",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "1b79c417dca17bcd2e031864bc6ca07254c61b47": "Ybodychange",
    "e6fcfe28e304062c7d09231db757acb2953703ce": "Ybodychange",
    "47279c3228185548ed09c36579b420225e4894f5": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "11b9dd4e844c762f8c53e5fafa25f29eece1bc87": "Ybodychange",
    "02a81203bd0ff6116e3c68d376b3af3838231986": "Ybodychange",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": "Ybodychange",
    "c8383a5f4919aabc6ff42f6a2ce807149c4d65ef": "Ybodychange",
    "8fb67650b146573c20ae010e28b1eca6e16433b3": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1b79c417dca17bcd2e031864bc6ca07254c61b47": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5767. Fix the order that resources are cleaned up from the local Public/Private caches. Contributed by Chris Trezzo\n",
      "commitDate": "28/10/16 8:58 AM",
      "commitName": "1b79c417dca17bcd2e031864bc6ca07254c61b47",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "28/10/16 8:48 AM",
      "commitNameOld": "7146359bfd436a76585fb1f3ea93716795308cec",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public void handle(LocalizationEvent event) {\n     // TODO: create log dir as $logdir/$user/$appId\n     switch (event.getType()) {\n     case INIT_APPLICATION_RESOURCES:\n       handleInitApplicationResources(\n           ((ApplicationLocalizationEvent)event).getApplication());\n       break;\n     case LOCALIZE_CONTAINER_RESOURCES:\n       handleInitContainerResources((ContainerLocalizationRequestEvent) event);\n       break;\n     case CONTAINER_RESOURCES_LOCALIZED:\n       handleContainerResourcesLocalized((ContainerLocalizationEvent) event);\n       break;\n     case CACHE_CLEANUP:\n-      handleCacheCleanup(event);\n+      handleCacheCleanup();\n       break;\n     case CLEANUP_CONTAINER_RESOURCES:\n       handleCleanupContainerResources((ContainerLocalizationCleanupEvent)event);\n       break;\n     case DESTROY_APPLICATION_RESOURCES:\n       handleDestroyApplicationResources(\n           ((ApplicationLocalizationEvent)event).getApplication());\n       break;\n     default:\n       throw new YarnRuntimeException(\"Unknown localization event: \" + event);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(LocalizationEvent event) {\n    // TODO: create log dir as $logdir/$user/$appId\n    switch (event.getType()) {\n    case INIT_APPLICATION_RESOURCES:\n      handleInitApplicationResources(\n          ((ApplicationLocalizationEvent)event).getApplication());\n      break;\n    case LOCALIZE_CONTAINER_RESOURCES:\n      handleInitContainerResources((ContainerLocalizationRequestEvent) event);\n      break;\n    case CONTAINER_RESOURCES_LOCALIZED:\n      handleContainerResourcesLocalized((ContainerLocalizationEvent) event);\n      break;\n    case CACHE_CLEANUP:\n      handleCacheCleanup();\n      break;\n    case CLEANUP_CONTAINER_RESOURCES:\n      handleCleanupContainerResources((ContainerLocalizationCleanupEvent)event);\n      break;\n    case DESTROY_APPLICATION_RESOURCES:\n      handleDestroyApplicationResources(\n          ((ApplicationLocalizationEvent)event).getApplication());\n      break;\n    default:\n      throw new YarnRuntimeException(\"Unknown localization event: \" + event);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "e6fcfe28e304062c7d09231db757acb2953703ce": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5576. Allow resource localization while container is running. Contributed by Jian He.\n",
      "commitDate": "06/09/16 7:31 AM",
      "commitName": "e6fcfe28e304062c7d09231db757acb2953703ce",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "10/08/16 7:23 PM",
      "commitNameOld": "aea3e65749333b97d8c45280077f03d4ebddb5a8",
      "commitAuthorOld": "Ray Chiang",
      "daysBetweenCommits": 26.51,
      "commitsBetweenForRepo": 154,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public void handle(LocalizationEvent event) {\n     // TODO: create log dir as $logdir/$user/$appId\n     switch (event.getType()) {\n     case INIT_APPLICATION_RESOURCES:\n       handleInitApplicationResources(\n           ((ApplicationLocalizationEvent)event).getApplication());\n       break;\n-    case INIT_CONTAINER_RESOURCES:\n+    case LOCALIZE_CONTAINER_RESOURCES:\n       handleInitContainerResources((ContainerLocalizationRequestEvent) event);\n       break;\n     case CONTAINER_RESOURCES_LOCALIZED:\n       handleContainerResourcesLocalized((ContainerLocalizationEvent) event);\n       break;\n     case CACHE_CLEANUP:\n       handleCacheCleanup(event);\n       break;\n     case CLEANUP_CONTAINER_RESOURCES:\n       handleCleanupContainerResources((ContainerLocalizationCleanupEvent)event);\n       break;\n     case DESTROY_APPLICATION_RESOURCES:\n       handleDestroyApplicationResources(\n           ((ApplicationLocalizationEvent)event).getApplication());\n       break;\n     default:\n       throw new YarnRuntimeException(\"Unknown localization event: \" + event);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(LocalizationEvent event) {\n    // TODO: create log dir as $logdir/$user/$appId\n    switch (event.getType()) {\n    case INIT_APPLICATION_RESOURCES:\n      handleInitApplicationResources(\n          ((ApplicationLocalizationEvent)event).getApplication());\n      break;\n    case LOCALIZE_CONTAINER_RESOURCES:\n      handleInitContainerResources((ContainerLocalizationRequestEvent) event);\n      break;\n    case CONTAINER_RESOURCES_LOCALIZED:\n      handleContainerResourcesLocalized((ContainerLocalizationEvent) event);\n      break;\n    case CACHE_CLEANUP:\n      handleCacheCleanup(event);\n      break;\n    case CLEANUP_CONTAINER_RESOURCES:\n      handleCleanupContainerResources((ContainerLocalizationCleanupEvent)event);\n      break;\n    case DESTROY_APPLICATION_RESOURCES:\n      handleDestroyApplicationResources(\n          ((ApplicationLocalizationEvent)event).getApplication());\n      break;\n    default:\n      throw new YarnRuntimeException(\"Unknown localization event: \" + event);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "47279c3228185548ed09c36579b420225e4894f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3464. Race condition in LocalizerRunner kills localizer before localizing all resources. (Zhihai Xu via kasha)\n",
      "commitDate": "26/04/15 9:13 AM",
      "commitName": "47279c3228185548ed09c36579b420225e4894f5",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "23/04/15 4:40 PM",
      "commitNameOld": "0b3f8957a87ada1a275c9904b211fdbdcefafb02",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,27 @@\n   public void handle(LocalizationEvent event) {\n     // TODO: create log dir as $logdir/$user/$appId\n     switch (event.getType()) {\n     case INIT_APPLICATION_RESOURCES:\n       handleInitApplicationResources(\n           ((ApplicationLocalizationEvent)event).getApplication());\n       break;\n     case INIT_CONTAINER_RESOURCES:\n       handleInitContainerResources((ContainerLocalizationRequestEvent) event);\n       break;\n+    case CONTAINER_RESOURCES_LOCALIZED:\n+      handleContainerResourcesLocalized((ContainerLocalizationEvent) event);\n+      break;\n     case CACHE_CLEANUP:\n       handleCacheCleanup(event);\n       break;\n     case CLEANUP_CONTAINER_RESOURCES:\n       handleCleanupContainerResources((ContainerLocalizationCleanupEvent)event);\n       break;\n     case DESTROY_APPLICATION_RESOURCES:\n       handleDestroyApplicationResources(\n           ((ApplicationLocalizationEvent)event).getApplication());\n       break;\n     default:\n       throw new YarnRuntimeException(\"Unknown localization event: \" + event);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(LocalizationEvent event) {\n    // TODO: create log dir as $logdir/$user/$appId\n    switch (event.getType()) {\n    case INIT_APPLICATION_RESOURCES:\n      handleInitApplicationResources(\n          ((ApplicationLocalizationEvent)event).getApplication());\n      break;\n    case INIT_CONTAINER_RESOURCES:\n      handleInitContainerResources((ContainerLocalizationRequestEvent) event);\n      break;\n    case CONTAINER_RESOURCES_LOCALIZED:\n      handleContainerResourcesLocalized((ContainerLocalizationEvent) event);\n      break;\n    case CACHE_CLEANUP:\n      handleCacheCleanup(event);\n      break;\n    case CLEANUP_CONTAINER_RESOURCES:\n      handleCleanupContainerResources((ContainerLocalizationCleanupEvent)event);\n      break;\n    case DESTROY_APPLICATION_RESOURCES:\n      handleDestroyApplicationResources(\n          ((ApplicationLocalizationEvent)event).getApplication());\n      break;\n    default:\n      throw new YarnRuntimeException(\"Unknown localization event: \" + event);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/05/13 9:13 PM",
      "commitNameOld": "2692675fc3b5046d2ec88542c30203c87e135b70",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 3.99,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public void handle(LocalizationEvent event) {\n     // TODO: create log dir as $logdir/$user/$appId\n     switch (event.getType()) {\n     case INIT_APPLICATION_RESOURCES:\n       handleInitApplicationResources(\n           ((ApplicationLocalizationEvent)event).getApplication());\n       break;\n     case INIT_CONTAINER_RESOURCES:\n       handleInitContainerResources((ContainerLocalizationRequestEvent) event);\n       break;\n     case CACHE_CLEANUP:\n       handleCacheCleanup(event);\n       break;\n     case CLEANUP_CONTAINER_RESOURCES:\n       handleCleanupContainerResources((ContainerLocalizationCleanupEvent)event);\n       break;\n     case DESTROY_APPLICATION_RESOURCES:\n       handleDestroyApplicationResources(\n           ((ApplicationLocalizationEvent)event).getApplication());\n       break;\n     default:\n-      throw new YarnException(\"Unknown localization event: \" + event);\n+      throw new YarnRuntimeException(\"Unknown localization event: \" + event);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(LocalizationEvent event) {\n    // TODO: create log dir as $logdir/$user/$appId\n    switch (event.getType()) {\n    case INIT_APPLICATION_RESOURCES:\n      handleInitApplicationResources(\n          ((ApplicationLocalizationEvent)event).getApplication());\n      break;\n    case INIT_CONTAINER_RESOURCES:\n      handleInitContainerResources((ContainerLocalizationRequestEvent) event);\n      break;\n    case CACHE_CLEANUP:\n      handleCacheCleanup(event);\n      break;\n    case CLEANUP_CONTAINER_RESOURCES:\n      handleCleanupContainerResources((ContainerLocalizationCleanupEvent)event);\n      break;\n    case DESTROY_APPLICATION_RESOURCES:\n      handleDestroyApplicationResources(\n          ((ApplicationLocalizationEvent)event).getApplication());\n      break;\n    default:\n      throw new YarnRuntimeException(\"Unknown localization event: \" + event);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void handle(LocalizationEvent event) {\n    // TODO: create log dir as $logdir/$user/$appId\n    switch (event.getType()) {\n    case INIT_APPLICATION_RESOURCES:\n      handleInitApplicationResources(\n          ((ApplicationLocalizationEvent)event).getApplication());\n      break;\n    case INIT_CONTAINER_RESOURCES:\n      handleInitContainerResources((ContainerLocalizationRequestEvent) event);\n      break;\n    case CACHE_CLEANUP:\n      handleCacheCleanup(event);\n      break;\n    case CLEANUP_CONTAINER_RESOURCES:\n      handleCleanupContainerResources((ContainerLocalizationCleanupEvent)event);\n      break;\n    case DESTROY_APPLICATION_RESOURCES:\n      handleDestroyApplicationResources(\n          ((ApplicationLocalizationEvent)event).getApplication());\n      break;\n    default:\n      throw new YarnException(\"Unknown localization event: \" + event);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java"
      }
    },
    "11b9dd4e844c762f8c53e5fafa25f29eece1bc87": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3161. Improved some javadocs and fixed some typos in YARN. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1181622 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/10/11 9:45 PM",
      "commitName": "11b9dd4e844c762f8c53e5fafa25f29eece1bc87",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/10/11 8:23 AM",
      "commitNameOld": "02a81203bd0ff6116e3c68d376b3af3838231986",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.56,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,133 +1,24 @@\n   public void handle(LocalizationEvent event) {\n-    String userName;\n-    String appIDStr;\n-    Container c;\n-    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs;\n-    LocalResourcesTracker tracker;\n     // TODO: create log dir as $logdir/$user/$appId\n     switch (event.getType()) {\n     case INIT_APPLICATION_RESOURCES:\n-      Application app \u003d\n-        ((ApplicationLocalizationEvent)event).getApplication();\n-      // 0) Create application tracking structs\n-      userName \u003d app.getUser();\n-      privateRsrc.putIfAbsent(userName,\n-          new LocalResourcesTrackerImpl(userName, dispatcher));\n-      if (null !\u003d appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),\n-          new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {\n-        LOG.warn(\"Initializing application \" + app + \" already present\");\n-        assert false; // TODO: FIXME assert doesn\u0027t help\n-                      // ^ The condition is benign. Tests should fail and it\n-                      //   should appear in logs, but it\u0027s an internal error\n-                      //   that should have no effect on applications\n-      }\n-      // 1) Signal container init\n-      dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n-            app.getAppId()));\n+      handleInitApplicationResources(\n+          ((ApplicationLocalizationEvent)event).getApplication());\n       break;\n     case INIT_CONTAINER_RESOURCES:\n-      ContainerLocalizationRequestEvent rsrcReqs \u003d\n-        (ContainerLocalizationRequestEvent) event;\n-      c \u003d rsrcReqs.getContainer();\n-      LocalizerContext ctxt \u003d new LocalizerContext(\n-          c.getUser(), c.getContainerID(), c.getCredentials());\n-      rsrcs \u003d rsrcReqs.getRequestedResources();\n-      for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n-           rsrcs.entrySet()) {\n-        tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n-            c.getContainerID().getApplicationAttemptId().getApplicationId());\n-        for (LocalResourceRequest req : e.getValue()) {\n-          tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n-        }\n-      }\n+      handleInitContainerResources((ContainerLocalizationRequestEvent) event);\n       break;\n     case CACHE_CLEANUP:\n-      ResourceRetentionSet retain \u003d\n-        new ResourceRetentionSet(delService, cacheTargetSize);\n-      retain.addResources(publicRsrc);\n-      LOG.debug(\"Resource cleanup (public) \" + retain);\n-      for (LocalResourcesTracker t : privateRsrc.values()) {\n-        retain.addResources(t);\n-        LOG.debug(\"Resource cleanup \" + t.getUser() + \":\" + retain);\n-      }\n-      //TODO Check if appRsrcs should also be added to the retention set.\n+      handleCacheCleanup(event);\n       break;\n     case CLEANUP_CONTAINER_RESOURCES:\n-      ContainerLocalizationCleanupEvent rsrcCleanup \u003d\n-        (ContainerLocalizationCleanupEvent) event;\n-      c \u003d rsrcCleanup.getContainer();\n-      rsrcs \u003d rsrcCleanup.getResources();\n-      for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n-           rsrcs.entrySet()) {\n-        tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n-            c.getContainerID().getApplicationAttemptId().getApplicationId());\n-        for (LocalResourceRequest req : e.getValue()) {\n-          tracker.handle(new ResourceReleaseEvent(req, c.getContainerID()));\n-        }\n-      }\n-\n-      // Delete the container directories\n-      userName \u003d c.getUser();\n-      String containerIDStr \u003d c.toString();\n-      appIDStr \u003d\n-        ConverterUtils.toString(\n-            c.getContainerID().getApplicationAttemptId().getApplicationId());\n-      for (Path localDir : localDirs) {\n-\n-        // Delete the user-owned container-dir\n-        Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n-        Path userdir \u003d new Path(usersdir, userName);\n-        Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n-        Path appDir \u003d new Path(allAppsdir, appIDStr);\n-        Path containerDir \u003d new Path(appDir, containerIDStr);\n-        delService.delete(userName, containerDir, new Path[] {});\n-\n-        // Delete the nmPrivate container-dir\n-        \n-        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n-        Path appSysDir \u003d new Path(sysDir, appIDStr);\n-        Path containerSysDir \u003d new Path(appSysDir, containerIDStr);\n-        delService.delete(null, containerSysDir,  new Path[] {});\n-      }\n-\n-      dispatcher.getEventHandler().handle(new ContainerEvent(c.getContainerID(),\n-            ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\n+      handleCleanupContainerResources((ContainerLocalizationCleanupEvent)event);\n       break;\n     case DESTROY_APPLICATION_RESOURCES:\n-\n-      Application application \u003d\n-          ((ApplicationLocalizationEvent) event).getApplication();\n-      LocalResourcesTracker appLocalRsrcsTracker \u003d\n-        appRsrc.remove(ConverterUtils.toString(application.getAppId()));\n-      if (null \u003d\u003d appLocalRsrcsTracker) {\n-        LOG.warn(\"Removing uninitialized application \" + application);\n-      }\n-      // TODO: What to do with appLocalRsrcsTracker?\n-\n-      // Delete the application directories\n-      userName \u003d application.getUser();\n-      appIDStr \u003d application.toString();\n-      for (Path localDir : localDirs) {\n-\n-        // Delete the user-owned app-dir\n-        Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n-        Path userdir \u003d new Path(usersdir, userName);\n-        Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n-        Path appDir \u003d new Path(allAppsdir, appIDStr);\n-        delService.delete(userName, appDir, new Path[] {});\n-\n-        // Delete the nmPrivate app-dir\n-        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n-        Path appSysDir \u003d new Path(sysDir, appIDStr);\n-        delService.delete(null, appSysDir, new Path[] {});\n-      }\n-\n-      // TODO: decrement reference counts of all resources associated with this\n-      // app\n-\n-      dispatcher.getEventHandler().handle(new ApplicationEvent(\n-            application.getAppId(),\n-            ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\n+      handleDestroyApplicationResources(\n+          ((ApplicationLocalizationEvent)event).getApplication());\n       break;\n+    default:\n+      throw new YarnException(\"Unknown localization event: \" + event);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(LocalizationEvent event) {\n    // TODO: create log dir as $logdir/$user/$appId\n    switch (event.getType()) {\n    case INIT_APPLICATION_RESOURCES:\n      handleInitApplicationResources(\n          ((ApplicationLocalizationEvent)event).getApplication());\n      break;\n    case INIT_CONTAINER_RESOURCES:\n      handleInitContainerResources((ContainerLocalizationRequestEvent) event);\n      break;\n    case CACHE_CLEANUP:\n      handleCacheCleanup(event);\n      break;\n    case CLEANUP_CONTAINER_RESOURCES:\n      handleCleanupContainerResources((ContainerLocalizationCleanupEvent)event);\n      break;\n    case DESTROY_APPLICATION_RESOURCES:\n      handleDestroyApplicationResources(\n          ((ApplicationLocalizationEvent)event).getApplication());\n      break;\n    default:\n      throw new YarnException(\"Unknown localization event: \" + event);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "02a81203bd0ff6116e3c68d376b3af3838231986": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2751. Modified NodeManager to stop leaving around local files after application finishes. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1180071 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/10/11 8:23 AM",
      "commitName": "02a81203bd0ff6116e3c68d376b3af3838231986",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "05/10/11 4:43 AM",
      "commitNameOld": "66137cf17cb4abccd6065819d97edc63c6510477",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.15,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,131 +1,133 @@\n   public void handle(LocalizationEvent event) {\n     String userName;\n     String appIDStr;\n     Container c;\n     Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs;\n     LocalResourcesTracker tracker;\n     // TODO: create log dir as $logdir/$user/$appId\n     switch (event.getType()) {\n     case INIT_APPLICATION_RESOURCES:\n       Application app \u003d\n         ((ApplicationLocalizationEvent)event).getApplication();\n       // 0) Create application tracking structs\n       userName \u003d app.getUser();\n       privateRsrc.putIfAbsent(userName,\n           new LocalResourcesTrackerImpl(userName, dispatcher));\n       if (null !\u003d appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),\n           new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {\n         LOG.warn(\"Initializing application \" + app + \" already present\");\n         assert false; // TODO: FIXME assert doesn\u0027t help\n                       // ^ The condition is benign. Tests should fail and it\n                       //   should appear in logs, but it\u0027s an internal error\n                       //   that should have no effect on applications\n       }\n       // 1) Signal container init\n       dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n             app.getAppId()));\n       break;\n     case INIT_CONTAINER_RESOURCES:\n       ContainerLocalizationRequestEvent rsrcReqs \u003d\n         (ContainerLocalizationRequestEvent) event;\n       c \u003d rsrcReqs.getContainer();\n       LocalizerContext ctxt \u003d new LocalizerContext(\n           c.getUser(), c.getContainerID(), c.getCredentials());\n       rsrcs \u003d rsrcReqs.getRequestedResources();\n       for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n            rsrcs.entrySet()) {\n         tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n             c.getContainerID().getApplicationAttemptId().getApplicationId());\n         for (LocalResourceRequest req : e.getValue()) {\n           tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n         }\n       }\n       break;\n     case CACHE_CLEANUP:\n       ResourceRetentionSet retain \u003d\n         new ResourceRetentionSet(delService, cacheTargetSize);\n       retain.addResources(publicRsrc);\n       LOG.debug(\"Resource cleanup (public) \" + retain);\n       for (LocalResourcesTracker t : privateRsrc.values()) {\n         retain.addResources(t);\n         LOG.debug(\"Resource cleanup \" + t.getUser() + \":\" + retain);\n       }\n+      //TODO Check if appRsrcs should also be added to the retention set.\n       break;\n     case CLEANUP_CONTAINER_RESOURCES:\n       ContainerLocalizationCleanupEvent rsrcCleanup \u003d\n         (ContainerLocalizationCleanupEvent) event;\n       c \u003d rsrcCleanup.getContainer();\n       rsrcs \u003d rsrcCleanup.getResources();\n       for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n            rsrcs.entrySet()) {\n         tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n             c.getContainerID().getApplicationAttemptId().getApplicationId());\n         for (LocalResourceRequest req : e.getValue()) {\n           tracker.handle(new ResourceReleaseEvent(req, c.getContainerID()));\n         }\n       }\n \n       // Delete the container directories\n       userName \u003d c.getUser();\n       String containerIDStr \u003d c.toString();\n       appIDStr \u003d\n         ConverterUtils.toString(\n             c.getContainerID().getApplicationAttemptId().getApplicationId());\n       for (Path localDir : localDirs) {\n \n         // Delete the user-owned container-dir\n         Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         Path userdir \u003d new Path(usersdir, userName);\n         Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n         Path appDir \u003d new Path(allAppsdir, appIDStr);\n         Path containerDir \u003d new Path(appDir, containerIDStr);\n         delService.delete(userName, containerDir, new Path[] {});\n \n         // Delete the nmPrivate container-dir\n+        \n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         Path appSysDir \u003d new Path(sysDir, appIDStr);\n         Path containerSysDir \u003d new Path(appSysDir, containerIDStr);\n         delService.delete(null, containerSysDir,  new Path[] {});\n       }\n \n       dispatcher.getEventHandler().handle(new ContainerEvent(c.getContainerID(),\n             ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\n       break;\n     case DESTROY_APPLICATION_RESOURCES:\n \n       Application application \u003d\n           ((ApplicationLocalizationEvent) event).getApplication();\n       LocalResourcesTracker appLocalRsrcsTracker \u003d\n         appRsrc.remove(ConverterUtils.toString(application.getAppId()));\n       if (null \u003d\u003d appLocalRsrcsTracker) {\n         LOG.warn(\"Removing uninitialized application \" + application);\n       }\n       // TODO: What to do with appLocalRsrcsTracker?\n \n       // Delete the application directories\n       userName \u003d application.getUser();\n       appIDStr \u003d application.toString();\n       for (Path localDir : localDirs) {\n \n         // Delete the user-owned app-dir\n         Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         Path userdir \u003d new Path(usersdir, userName);\n         Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n         Path appDir \u003d new Path(allAppsdir, appIDStr);\n         delService.delete(userName, appDir, new Path[] {});\n \n         // Delete the nmPrivate app-dir\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         Path appSysDir \u003d new Path(sysDir, appIDStr);\n         delService.delete(null, appSysDir, new Path[] {});\n       }\n \n       // TODO: decrement reference counts of all resources associated with this\n       // app\n \n       dispatcher.getEventHandler().handle(new ApplicationEvent(\n             application.getAppId(),\n             ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\n       break;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(LocalizationEvent event) {\n    String userName;\n    String appIDStr;\n    Container c;\n    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs;\n    LocalResourcesTracker tracker;\n    // TODO: create log dir as $logdir/$user/$appId\n    switch (event.getType()) {\n    case INIT_APPLICATION_RESOURCES:\n      Application app \u003d\n        ((ApplicationLocalizationEvent)event).getApplication();\n      // 0) Create application tracking structs\n      userName \u003d app.getUser();\n      privateRsrc.putIfAbsent(userName,\n          new LocalResourcesTrackerImpl(userName, dispatcher));\n      if (null !\u003d appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),\n          new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {\n        LOG.warn(\"Initializing application \" + app + \" already present\");\n        assert false; // TODO: FIXME assert doesn\u0027t help\n                      // ^ The condition is benign. Tests should fail and it\n                      //   should appear in logs, but it\u0027s an internal error\n                      //   that should have no effect on applications\n      }\n      // 1) Signal container init\n      dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n            app.getAppId()));\n      break;\n    case INIT_CONTAINER_RESOURCES:\n      ContainerLocalizationRequestEvent rsrcReqs \u003d\n        (ContainerLocalizationRequestEvent) event;\n      c \u003d rsrcReqs.getContainer();\n      LocalizerContext ctxt \u003d new LocalizerContext(\n          c.getUser(), c.getContainerID(), c.getCredentials());\n      rsrcs \u003d rsrcReqs.getRequestedResources();\n      for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n           rsrcs.entrySet()) {\n        tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n            c.getContainerID().getApplicationAttemptId().getApplicationId());\n        for (LocalResourceRequest req : e.getValue()) {\n          tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n        }\n      }\n      break;\n    case CACHE_CLEANUP:\n      ResourceRetentionSet retain \u003d\n        new ResourceRetentionSet(delService, cacheTargetSize);\n      retain.addResources(publicRsrc);\n      LOG.debug(\"Resource cleanup (public) \" + retain);\n      for (LocalResourcesTracker t : privateRsrc.values()) {\n        retain.addResources(t);\n        LOG.debug(\"Resource cleanup \" + t.getUser() + \":\" + retain);\n      }\n      //TODO Check if appRsrcs should also be added to the retention set.\n      break;\n    case CLEANUP_CONTAINER_RESOURCES:\n      ContainerLocalizationCleanupEvent rsrcCleanup \u003d\n        (ContainerLocalizationCleanupEvent) event;\n      c \u003d rsrcCleanup.getContainer();\n      rsrcs \u003d rsrcCleanup.getResources();\n      for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n           rsrcs.entrySet()) {\n        tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n            c.getContainerID().getApplicationAttemptId().getApplicationId());\n        for (LocalResourceRequest req : e.getValue()) {\n          tracker.handle(new ResourceReleaseEvent(req, c.getContainerID()));\n        }\n      }\n\n      // Delete the container directories\n      userName \u003d c.getUser();\n      String containerIDStr \u003d c.toString();\n      appIDStr \u003d\n        ConverterUtils.toString(\n            c.getContainerID().getApplicationAttemptId().getApplicationId());\n      for (Path localDir : localDirs) {\n\n        // Delete the user-owned container-dir\n        Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        Path userdir \u003d new Path(usersdir, userName);\n        Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n        Path appDir \u003d new Path(allAppsdir, appIDStr);\n        Path containerDir \u003d new Path(appDir, containerIDStr);\n        delService.delete(userName, containerDir, new Path[] {});\n\n        // Delete the nmPrivate container-dir\n        \n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        Path appSysDir \u003d new Path(sysDir, appIDStr);\n        Path containerSysDir \u003d new Path(appSysDir, containerIDStr);\n        delService.delete(null, containerSysDir,  new Path[] {});\n      }\n\n      dispatcher.getEventHandler().handle(new ContainerEvent(c.getContainerID(),\n            ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\n      break;\n    case DESTROY_APPLICATION_RESOURCES:\n\n      Application application \u003d\n          ((ApplicationLocalizationEvent) event).getApplication();\n      LocalResourcesTracker appLocalRsrcsTracker \u003d\n        appRsrc.remove(ConverterUtils.toString(application.getAppId()));\n      if (null \u003d\u003d appLocalRsrcsTracker) {\n        LOG.warn(\"Removing uninitialized application \" + application);\n      }\n      // TODO: What to do with appLocalRsrcsTracker?\n\n      // Delete the application directories\n      userName \u003d application.getUser();\n      appIDStr \u003d application.toString();\n      for (Path localDir : localDirs) {\n\n        // Delete the user-owned app-dir\n        Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        Path userdir \u003d new Path(usersdir, userName);\n        Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n        Path appDir \u003d new Path(allAppsdir, appIDStr);\n        delService.delete(userName, appDir, new Path[] {});\n\n        // Delete the nmPrivate app-dir\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        Path appSysDir \u003d new Path(sysDir, appIDStr);\n        delService.delete(null, appSysDir, new Path[] {});\n      }\n\n      // TODO: decrement reference counts of all resources associated with this\n      // app\n\n      dispatcher.getEventHandler().handle(new ApplicationEvent(\n            application.getAppId(),\n            ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\n      break;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2896. Simplify all apis to in org.apache.hadoop.yarn.api.records.* to be get/set only. Added javadocs to all public records.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169980 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/09/11 5:05 PM",
      "commitName": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "12/09/11 2:53 PM",
      "commitNameOld": "c8383a5f4919aabc6ff42f6a2ce807149c4d65ef",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,130 +1,131 @@\n   public void handle(LocalizationEvent event) {\n     String userName;\n     String appIDStr;\n     Container c;\n     Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs;\n     LocalResourcesTracker tracker;\n     // TODO: create log dir as $logdir/$user/$appId\n     switch (event.getType()) {\n     case INIT_APPLICATION_RESOURCES:\n       Application app \u003d\n         ((ApplicationLocalizationEvent)event).getApplication();\n       // 0) Create application tracking structs\n       userName \u003d app.getUser();\n       privateRsrc.putIfAbsent(userName,\n           new LocalResourcesTrackerImpl(userName, dispatcher));\n       if (null !\u003d appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),\n           new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {\n         LOG.warn(\"Initializing application \" + app + \" already present\");\n         assert false; // TODO: FIXME assert doesn\u0027t help\n                       // ^ The condition is benign. Tests should fail and it\n                       //   should appear in logs, but it\u0027s an internal error\n                       //   that should have no effect on applications\n       }\n       // 1) Signal container init\n       dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n             app.getAppId()));\n       break;\n     case INIT_CONTAINER_RESOURCES:\n       ContainerLocalizationRequestEvent rsrcReqs \u003d\n         (ContainerLocalizationRequestEvent) event;\n       c \u003d rsrcReqs.getContainer();\n       LocalizerContext ctxt \u003d new LocalizerContext(\n           c.getUser(), c.getContainerID(), c.getCredentials());\n       rsrcs \u003d rsrcReqs.getRequestedResources();\n       for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n            rsrcs.entrySet()) {\n         tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n-            c.getContainerID().getAppId());\n+            c.getContainerID().getApplicationAttemptId().getApplicationId());\n         for (LocalResourceRequest req : e.getValue()) {\n           tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n         }\n       }\n       break;\n     case CACHE_CLEANUP:\n       ResourceRetentionSet retain \u003d\n         new ResourceRetentionSet(delService, cacheTargetSize);\n       retain.addResources(publicRsrc);\n       LOG.debug(\"Resource cleanup (public) \" + retain);\n       for (LocalResourcesTracker t : privateRsrc.values()) {\n         retain.addResources(t);\n         LOG.debug(\"Resource cleanup \" + t.getUser() + \":\" + retain);\n       }\n       break;\n     case CLEANUP_CONTAINER_RESOURCES:\n       ContainerLocalizationCleanupEvent rsrcCleanup \u003d\n         (ContainerLocalizationCleanupEvent) event;\n       c \u003d rsrcCleanup.getContainer();\n       rsrcs \u003d rsrcCleanup.getResources();\n       for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n            rsrcs.entrySet()) {\n         tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n-            c.getContainerID().getAppId());\n+            c.getContainerID().getApplicationAttemptId().getApplicationId());\n         for (LocalResourceRequest req : e.getValue()) {\n           tracker.handle(new ResourceReleaseEvent(req, c.getContainerID()));\n         }\n       }\n \n       // Delete the container directories\n       userName \u003d c.getUser();\n       String containerIDStr \u003d c.toString();\n       appIDStr \u003d\n-        ConverterUtils.toString(c.getContainerID().getAppId());\n+        ConverterUtils.toString(\n+            c.getContainerID().getApplicationAttemptId().getApplicationId());\n       for (Path localDir : localDirs) {\n \n         // Delete the user-owned container-dir\n         Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         Path userdir \u003d new Path(usersdir, userName);\n         Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n         Path appDir \u003d new Path(allAppsdir, appIDStr);\n         Path containerDir \u003d new Path(appDir, containerIDStr);\n         delService.delete(userName, containerDir, new Path[] {});\n \n         // Delete the nmPrivate container-dir\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         Path appSysDir \u003d new Path(sysDir, appIDStr);\n         Path containerSysDir \u003d new Path(appSysDir, containerIDStr);\n         delService.delete(null, containerSysDir,  new Path[] {});\n       }\n \n       dispatcher.getEventHandler().handle(new ContainerEvent(c.getContainerID(),\n             ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\n       break;\n     case DESTROY_APPLICATION_RESOURCES:\n \n       Application application \u003d\n           ((ApplicationLocalizationEvent) event).getApplication();\n       LocalResourcesTracker appLocalRsrcsTracker \u003d\n         appRsrc.remove(ConverterUtils.toString(application.getAppId()));\n       if (null \u003d\u003d appLocalRsrcsTracker) {\n         LOG.warn(\"Removing uninitialized application \" + application);\n       }\n       // TODO: What to do with appLocalRsrcsTracker?\n \n       // Delete the application directories\n       userName \u003d application.getUser();\n       appIDStr \u003d application.toString();\n       for (Path localDir : localDirs) {\n \n         // Delete the user-owned app-dir\n         Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         Path userdir \u003d new Path(usersdir, userName);\n         Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n         Path appDir \u003d new Path(allAppsdir, appIDStr);\n         delService.delete(userName, appDir, new Path[] {});\n \n         // Delete the nmPrivate app-dir\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         Path appSysDir \u003d new Path(sysDir, appIDStr);\n         delService.delete(null, appSysDir, new Path[] {});\n       }\n \n       // TODO: decrement reference counts of all resources associated with this\n       // app\n \n       dispatcher.getEventHandler().handle(new ApplicationEvent(\n             application.getAppId(),\n             ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\n       break;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(LocalizationEvent event) {\n    String userName;\n    String appIDStr;\n    Container c;\n    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs;\n    LocalResourcesTracker tracker;\n    // TODO: create log dir as $logdir/$user/$appId\n    switch (event.getType()) {\n    case INIT_APPLICATION_RESOURCES:\n      Application app \u003d\n        ((ApplicationLocalizationEvent)event).getApplication();\n      // 0) Create application tracking structs\n      userName \u003d app.getUser();\n      privateRsrc.putIfAbsent(userName,\n          new LocalResourcesTrackerImpl(userName, dispatcher));\n      if (null !\u003d appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),\n          new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {\n        LOG.warn(\"Initializing application \" + app + \" already present\");\n        assert false; // TODO: FIXME assert doesn\u0027t help\n                      // ^ The condition is benign. Tests should fail and it\n                      //   should appear in logs, but it\u0027s an internal error\n                      //   that should have no effect on applications\n      }\n      // 1) Signal container init\n      dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n            app.getAppId()));\n      break;\n    case INIT_CONTAINER_RESOURCES:\n      ContainerLocalizationRequestEvent rsrcReqs \u003d\n        (ContainerLocalizationRequestEvent) event;\n      c \u003d rsrcReqs.getContainer();\n      LocalizerContext ctxt \u003d new LocalizerContext(\n          c.getUser(), c.getContainerID(), c.getCredentials());\n      rsrcs \u003d rsrcReqs.getRequestedResources();\n      for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n           rsrcs.entrySet()) {\n        tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n            c.getContainerID().getApplicationAttemptId().getApplicationId());\n        for (LocalResourceRequest req : e.getValue()) {\n          tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n        }\n      }\n      break;\n    case CACHE_CLEANUP:\n      ResourceRetentionSet retain \u003d\n        new ResourceRetentionSet(delService, cacheTargetSize);\n      retain.addResources(publicRsrc);\n      LOG.debug(\"Resource cleanup (public) \" + retain);\n      for (LocalResourcesTracker t : privateRsrc.values()) {\n        retain.addResources(t);\n        LOG.debug(\"Resource cleanup \" + t.getUser() + \":\" + retain);\n      }\n      break;\n    case CLEANUP_CONTAINER_RESOURCES:\n      ContainerLocalizationCleanupEvent rsrcCleanup \u003d\n        (ContainerLocalizationCleanupEvent) event;\n      c \u003d rsrcCleanup.getContainer();\n      rsrcs \u003d rsrcCleanup.getResources();\n      for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n           rsrcs.entrySet()) {\n        tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n            c.getContainerID().getApplicationAttemptId().getApplicationId());\n        for (LocalResourceRequest req : e.getValue()) {\n          tracker.handle(new ResourceReleaseEvent(req, c.getContainerID()));\n        }\n      }\n\n      // Delete the container directories\n      userName \u003d c.getUser();\n      String containerIDStr \u003d c.toString();\n      appIDStr \u003d\n        ConverterUtils.toString(\n            c.getContainerID().getApplicationAttemptId().getApplicationId());\n      for (Path localDir : localDirs) {\n\n        // Delete the user-owned container-dir\n        Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        Path userdir \u003d new Path(usersdir, userName);\n        Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n        Path appDir \u003d new Path(allAppsdir, appIDStr);\n        Path containerDir \u003d new Path(appDir, containerIDStr);\n        delService.delete(userName, containerDir, new Path[] {});\n\n        // Delete the nmPrivate container-dir\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        Path appSysDir \u003d new Path(sysDir, appIDStr);\n        Path containerSysDir \u003d new Path(appSysDir, containerIDStr);\n        delService.delete(null, containerSysDir,  new Path[] {});\n      }\n\n      dispatcher.getEventHandler().handle(new ContainerEvent(c.getContainerID(),\n            ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\n      break;\n    case DESTROY_APPLICATION_RESOURCES:\n\n      Application application \u003d\n          ((ApplicationLocalizationEvent) event).getApplication();\n      LocalResourcesTracker appLocalRsrcsTracker \u003d\n        appRsrc.remove(ConverterUtils.toString(application.getAppId()));\n      if (null \u003d\u003d appLocalRsrcsTracker) {\n        LOG.warn(\"Removing uninitialized application \" + application);\n      }\n      // TODO: What to do with appLocalRsrcsTracker?\n\n      // Delete the application directories\n      userName \u003d application.getUser();\n      appIDStr \u003d application.toString();\n      for (Path localDir : localDirs) {\n\n        // Delete the user-owned app-dir\n        Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        Path userdir \u003d new Path(usersdir, userName);\n        Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n        Path appDir \u003d new Path(allAppsdir, appIDStr);\n        delService.delete(userName, appDir, new Path[] {});\n\n        // Delete the nmPrivate app-dir\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        Path appSysDir \u003d new Path(sysDir, appIDStr);\n        delService.delete(null, appSysDir, new Path[] {});\n      }\n\n      // TODO: decrement reference counts of all resources associated with this\n      // app\n\n      dispatcher.getEventHandler().handle(new ApplicationEvent(\n            application.getAppId(),\n            ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\n      break;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "c8383a5f4919aabc6ff42f6a2ce807149c4d65ef": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2985. Fixed findbugs warnings in ResourceLocalizationService. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/09/11 2:53 PM",
      "commitName": "c8383a5f4919aabc6ff42f6a2ce807149c4d65ef",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "10/09/11 11:21 PM",
      "commitNameOld": "8fb67650b146573c20ae010e28b1eca6e16433b3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.65,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,128 +1,130 @@\n   public void handle(LocalizationEvent event) {\n     String userName;\n     String appIDStr;\n     Container c;\n     Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs;\n     LocalResourcesTracker tracker;\n     // TODO: create log dir as $logdir/$user/$appId\n     switch (event.getType()) {\n     case INIT_APPLICATION_RESOURCES:\n       Application app \u003d\n         ((ApplicationLocalizationEvent)event).getApplication();\n       // 0) Create application tracking structs\n       userName \u003d app.getUser();\n       privateRsrc.putIfAbsent(userName,\n           new LocalResourcesTrackerImpl(userName, dispatcher));\n       if (null !\u003d appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),\n           new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {\n         LOG.warn(\"Initializing application \" + app + \" already present\");\n         assert false; // TODO: FIXME assert doesn\u0027t help\n                       // ^ The condition is benign. Tests should fail and it\n                       //   should appear in logs, but it\u0027s an internal error\n                       //   that should have no effect on applications\n       }\n       // 1) Signal container init\n       dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n             app.getAppId()));\n       break;\n     case INIT_CONTAINER_RESOURCES:\n       ContainerLocalizationRequestEvent rsrcReqs \u003d\n         (ContainerLocalizationRequestEvent) event;\n       c \u003d rsrcReqs.getContainer();\n       LocalizerContext ctxt \u003d new LocalizerContext(\n           c.getUser(), c.getContainerID(), c.getCredentials());\n       rsrcs \u003d rsrcReqs.getRequestedResources();\n-      for (LocalResourceVisibility vis : rsrcs.keySet()) {\n-        tracker \u003d getLocalResourcesTracker(vis, c.getUser(), \n+      for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n+           rsrcs.entrySet()) {\n+        tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n             c.getContainerID().getAppId());\n-        for (LocalResourceRequest req : rsrcs.get(vis)) {\n-          tracker.handle(new ResourceRequestEvent(req, vis, ctxt));\n+        for (LocalResourceRequest req : e.getValue()) {\n+          tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n         }\n       }\n       break;\n     case CACHE_CLEANUP:\n       ResourceRetentionSet retain \u003d\n         new ResourceRetentionSet(delService, cacheTargetSize);\n       retain.addResources(publicRsrc);\n       LOG.debug(\"Resource cleanup (public) \" + retain);\n       for (LocalResourcesTracker t : privateRsrc.values()) {\n         retain.addResources(t);\n         LOG.debug(\"Resource cleanup \" + t.getUser() + \":\" + retain);\n       }\n       break;\n     case CLEANUP_CONTAINER_RESOURCES:\n       ContainerLocalizationCleanupEvent rsrcCleanup \u003d\n         (ContainerLocalizationCleanupEvent) event;\n       c \u003d rsrcCleanup.getContainer();\n       rsrcs \u003d rsrcCleanup.getResources();\n-      for (LocalResourceVisibility vis : rsrcs.keySet()) {\n-        tracker \u003d getLocalResourcesTracker(vis, c.getUser(), \n+      for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n+           rsrcs.entrySet()) {\n+        tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n             c.getContainerID().getAppId());\n-        for (LocalResourceRequest req : rsrcs.get(vis)) {\n+        for (LocalResourceRequest req : e.getValue()) {\n           tracker.handle(new ResourceReleaseEvent(req, c.getContainerID()));\n         }\n       }\n \n       // Delete the container directories\n       userName \u003d c.getUser();\n       String containerIDStr \u003d c.toString();\n       appIDStr \u003d\n         ConverterUtils.toString(c.getContainerID().getAppId());\n       for (Path localDir : localDirs) {\n \n         // Delete the user-owned container-dir\n         Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         Path userdir \u003d new Path(usersdir, userName);\n         Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n         Path appDir \u003d new Path(allAppsdir, appIDStr);\n         Path containerDir \u003d new Path(appDir, containerIDStr);\n         delService.delete(userName, containerDir, new Path[] {});\n \n         // Delete the nmPrivate container-dir\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         Path appSysDir \u003d new Path(sysDir, appIDStr);\n         Path containerSysDir \u003d new Path(appSysDir, containerIDStr);\n         delService.delete(null, containerSysDir,  new Path[] {});\n       }\n \n       dispatcher.getEventHandler().handle(new ContainerEvent(c.getContainerID(),\n             ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\n       break;\n     case DESTROY_APPLICATION_RESOURCES:\n \n       Application application \u003d\n           ((ApplicationLocalizationEvent) event).getApplication();\n       LocalResourcesTracker appLocalRsrcsTracker \u003d\n         appRsrc.remove(ConverterUtils.toString(application.getAppId()));\n       if (null \u003d\u003d appLocalRsrcsTracker) {\n         LOG.warn(\"Removing uninitialized application \" + application);\n       }\n       // TODO: What to do with appLocalRsrcsTracker?\n \n       // Delete the application directories\n       userName \u003d application.getUser();\n       appIDStr \u003d application.toString();\n       for (Path localDir : localDirs) {\n \n         // Delete the user-owned app-dir\n         Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         Path userdir \u003d new Path(usersdir, userName);\n         Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n         Path appDir \u003d new Path(allAppsdir, appIDStr);\n         delService.delete(userName, appDir, new Path[] {});\n \n         // Delete the nmPrivate app-dir\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         Path appSysDir \u003d new Path(sysDir, appIDStr);\n         delService.delete(null, appSysDir, new Path[] {});\n       }\n \n       // TODO: decrement reference counts of all resources associated with this\n       // app\n \n       dispatcher.getEventHandler().handle(new ApplicationEvent(\n             application.getAppId(),\n             ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\n       break;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(LocalizationEvent event) {\n    String userName;\n    String appIDStr;\n    Container c;\n    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs;\n    LocalResourcesTracker tracker;\n    // TODO: create log dir as $logdir/$user/$appId\n    switch (event.getType()) {\n    case INIT_APPLICATION_RESOURCES:\n      Application app \u003d\n        ((ApplicationLocalizationEvent)event).getApplication();\n      // 0) Create application tracking structs\n      userName \u003d app.getUser();\n      privateRsrc.putIfAbsent(userName,\n          new LocalResourcesTrackerImpl(userName, dispatcher));\n      if (null !\u003d appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),\n          new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {\n        LOG.warn(\"Initializing application \" + app + \" already present\");\n        assert false; // TODO: FIXME assert doesn\u0027t help\n                      // ^ The condition is benign. Tests should fail and it\n                      //   should appear in logs, but it\u0027s an internal error\n                      //   that should have no effect on applications\n      }\n      // 1) Signal container init\n      dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n            app.getAppId()));\n      break;\n    case INIT_CONTAINER_RESOURCES:\n      ContainerLocalizationRequestEvent rsrcReqs \u003d\n        (ContainerLocalizationRequestEvent) event;\n      c \u003d rsrcReqs.getContainer();\n      LocalizerContext ctxt \u003d new LocalizerContext(\n          c.getUser(), c.getContainerID(), c.getCredentials());\n      rsrcs \u003d rsrcReqs.getRequestedResources();\n      for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n           rsrcs.entrySet()) {\n        tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n            c.getContainerID().getAppId());\n        for (LocalResourceRequest req : e.getValue()) {\n          tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n        }\n      }\n      break;\n    case CACHE_CLEANUP:\n      ResourceRetentionSet retain \u003d\n        new ResourceRetentionSet(delService, cacheTargetSize);\n      retain.addResources(publicRsrc);\n      LOG.debug(\"Resource cleanup (public) \" + retain);\n      for (LocalResourcesTracker t : privateRsrc.values()) {\n        retain.addResources(t);\n        LOG.debug(\"Resource cleanup \" + t.getUser() + \":\" + retain);\n      }\n      break;\n    case CLEANUP_CONTAINER_RESOURCES:\n      ContainerLocalizationCleanupEvent rsrcCleanup \u003d\n        (ContainerLocalizationCleanupEvent) event;\n      c \u003d rsrcCleanup.getContainer();\n      rsrcs \u003d rsrcCleanup.getResources();\n      for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n           rsrcs.entrySet()) {\n        tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n            c.getContainerID().getAppId());\n        for (LocalResourceRequest req : e.getValue()) {\n          tracker.handle(new ResourceReleaseEvent(req, c.getContainerID()));\n        }\n      }\n\n      // Delete the container directories\n      userName \u003d c.getUser();\n      String containerIDStr \u003d c.toString();\n      appIDStr \u003d\n        ConverterUtils.toString(c.getContainerID().getAppId());\n      for (Path localDir : localDirs) {\n\n        // Delete the user-owned container-dir\n        Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        Path userdir \u003d new Path(usersdir, userName);\n        Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n        Path appDir \u003d new Path(allAppsdir, appIDStr);\n        Path containerDir \u003d new Path(appDir, containerIDStr);\n        delService.delete(userName, containerDir, new Path[] {});\n\n        // Delete the nmPrivate container-dir\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        Path appSysDir \u003d new Path(sysDir, appIDStr);\n        Path containerSysDir \u003d new Path(appSysDir, containerIDStr);\n        delService.delete(null, containerSysDir,  new Path[] {});\n      }\n\n      dispatcher.getEventHandler().handle(new ContainerEvent(c.getContainerID(),\n            ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\n      break;\n    case DESTROY_APPLICATION_RESOURCES:\n\n      Application application \u003d\n          ((ApplicationLocalizationEvent) event).getApplication();\n      LocalResourcesTracker appLocalRsrcsTracker \u003d\n        appRsrc.remove(ConverterUtils.toString(application.getAppId()));\n      if (null \u003d\u003d appLocalRsrcsTracker) {\n        LOG.warn(\"Removing uninitialized application \" + application);\n      }\n      // TODO: What to do with appLocalRsrcsTracker?\n\n      // Delete the application directories\n      userName \u003d application.getUser();\n      appIDStr \u003d application.toString();\n      for (Path localDir : localDirs) {\n\n        // Delete the user-owned app-dir\n        Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        Path userdir \u003d new Path(usersdir, userName);\n        Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n        Path appDir \u003d new Path(allAppsdir, appIDStr);\n        delService.delete(userName, appDir, new Path[] {});\n\n        // Delete the nmPrivate app-dir\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        Path appSysDir \u003d new Path(sysDir, appIDStr);\n        delService.delete(null, appSysDir, new Path[] {});\n      }\n\n      // TODO: decrement reference counts of all resources associated with this\n      // app\n\n      dispatcher.getEventHandler().handle(new ApplicationEvent(\n            application.getAppId(),\n            ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\n      break;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "8fb67650b146573c20ae010e28b1eca6e16433b3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2691. Finish up the cleanup of distributed cache file resources and related tests. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1167676 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/11 11:21 PM",
      "commitName": "8fb67650b146573c20ae010e28b1eca6e16433b3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "08/09/11 6:44 PM",
      "commitNameOld": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 2.19,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,129 +1,128 @@\n   public void handle(LocalizationEvent event) {\n     String userName;\n     String appIDStr;\n+    Container c;\n+    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs;\n+    LocalResourcesTracker tracker;\n     // TODO: create log dir as $logdir/$user/$appId\n     switch (event.getType()) {\n     case INIT_APPLICATION_RESOURCES:\n       Application app \u003d\n         ((ApplicationLocalizationEvent)event).getApplication();\n       // 0) Create application tracking structs\n       userName \u003d app.getUser();\n       privateRsrc.putIfAbsent(userName,\n           new LocalResourcesTrackerImpl(userName, dispatcher));\n       if (null !\u003d appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),\n           new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {\n         LOG.warn(\"Initializing application \" + app + \" already present\");\n         assert false; // TODO: FIXME assert doesn\u0027t help\n                       // ^ The condition is benign. Tests should fail and it\n                       //   should appear in logs, but it\u0027s an internal error\n                       //   that should have no effect on applications\n       }\n       // 1) Signal container init\n       dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n             app.getAppId()));\n       break;\n     case INIT_CONTAINER_RESOURCES:\n       ContainerLocalizationRequestEvent rsrcReqs \u003d\n         (ContainerLocalizationRequestEvent) event;\n-      Container c \u003d rsrcReqs.getContainer();\n+      c \u003d rsrcReqs.getContainer();\n       LocalizerContext ctxt \u003d new LocalizerContext(\n           c.getUser(), c.getContainerID(), c.getCredentials());\n-      final LocalResourcesTracker tracker;\n-      LocalResourceVisibility vis \u003d rsrcReqs.getVisibility();\n-      switch (vis) {\n-      default:\n-      case PUBLIC:\n-        tracker \u003d publicRsrc;\n-        break;\n-      case PRIVATE:\n-        tracker \u003d privateRsrc.get(c.getUser());\n-        break;\n-      case APPLICATION:\n-        tracker \u003d\n-          appRsrc.get(ConverterUtils.toString(c.getContainerID().getAppId()));\n-        break;\n-      }\n-      // We get separate events one each for all resources of one visibility. So\n-      // all the resources in this event are of the same visibility.\n-      for (LocalResourceRequest req : rsrcReqs.getRequestedResources()) {\n-        tracker.handle(new ResourceRequestEvent(req, vis, ctxt));\n+      rsrcs \u003d rsrcReqs.getRequestedResources();\n+      for (LocalResourceVisibility vis : rsrcs.keySet()) {\n+        tracker \u003d getLocalResourcesTracker(vis, c.getUser(), \n+            c.getContainerID().getAppId());\n+        for (LocalResourceRequest req : rsrcs.get(vis)) {\n+          tracker.handle(new ResourceRequestEvent(req, vis, ctxt));\n+        }\n       }\n       break;\n     case CACHE_CLEANUP:\n       ResourceRetentionSet retain \u003d\n         new ResourceRetentionSet(delService, cacheTargetSize);\n       retain.addResources(publicRsrc);\n       LOG.debug(\"Resource cleanup (public) \" + retain);\n       for (LocalResourcesTracker t : privateRsrc.values()) {\n         retain.addResources(t);\n         LOG.debug(\"Resource cleanup \" + t.getUser() + \":\" + retain);\n       }\n       break;\n     case CLEANUP_CONTAINER_RESOURCES:\n-      Container container \u003d\n-        ((ContainerLocalizationEvent)event).getContainer();\n+      ContainerLocalizationCleanupEvent rsrcCleanup \u003d\n+        (ContainerLocalizationCleanupEvent) event;\n+      c \u003d rsrcCleanup.getContainer();\n+      rsrcs \u003d rsrcCleanup.getResources();\n+      for (LocalResourceVisibility vis : rsrcs.keySet()) {\n+        tracker \u003d getLocalResourcesTracker(vis, c.getUser(), \n+            c.getContainerID().getAppId());\n+        for (LocalResourceRequest req : rsrcs.get(vis)) {\n+          tracker.handle(new ResourceReleaseEvent(req, c.getContainerID()));\n+        }\n+      }\n \n       // Delete the container directories\n-      userName \u003d container.getUser();\n-      String containerIDStr \u003d container.toString();\n+      userName \u003d c.getUser();\n+      String containerIDStr \u003d c.toString();\n       appIDStr \u003d\n-        ConverterUtils.toString(container.getContainerID().getAppId());\n+        ConverterUtils.toString(c.getContainerID().getAppId());\n       for (Path localDir : localDirs) {\n \n         // Delete the user-owned container-dir\n         Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         Path userdir \u003d new Path(usersdir, userName);\n         Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n         Path appDir \u003d new Path(allAppsdir, appIDStr);\n         Path containerDir \u003d new Path(appDir, containerIDStr);\n         delService.delete(userName, containerDir, new Path[] {});\n \n         // Delete the nmPrivate container-dir\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         Path appSysDir \u003d new Path(sysDir, appIDStr);\n         Path containerSysDir \u003d new Path(appSysDir, containerIDStr);\n         delService.delete(null, containerSysDir,  new Path[] {});\n       }\n \n-      dispatcher.getEventHandler().handle(new ContainerEvent(\n-            container.getContainerID(),\n+      dispatcher.getEventHandler().handle(new ContainerEvent(c.getContainerID(),\n             ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\n       break;\n     case DESTROY_APPLICATION_RESOURCES:\n \n       Application application \u003d\n           ((ApplicationLocalizationEvent) event).getApplication();\n       LocalResourcesTracker appLocalRsrcsTracker \u003d\n         appRsrc.remove(ConverterUtils.toString(application.getAppId()));\n       if (null \u003d\u003d appLocalRsrcsTracker) {\n         LOG.warn(\"Removing uninitialized application \" + application);\n       }\n       // TODO: What to do with appLocalRsrcsTracker?\n \n       // Delete the application directories\n       userName \u003d application.getUser();\n       appIDStr \u003d application.toString();\n       for (Path localDir : localDirs) {\n \n         // Delete the user-owned app-dir\n         Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         Path userdir \u003d new Path(usersdir, userName);\n         Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n         Path appDir \u003d new Path(allAppsdir, appIDStr);\n         delService.delete(userName, appDir, new Path[] {});\n \n         // Delete the nmPrivate app-dir\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         Path appSysDir \u003d new Path(sysDir, appIDStr);\n         delService.delete(null, appSysDir, new Path[] {});\n       }\n \n       // TODO: decrement reference counts of all resources associated with this\n       // app\n \n       dispatcher.getEventHandler().handle(new ApplicationEvent(\n             application.getAppId(),\n             ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\n       break;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(LocalizationEvent event) {\n    String userName;\n    String appIDStr;\n    Container c;\n    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs;\n    LocalResourcesTracker tracker;\n    // TODO: create log dir as $logdir/$user/$appId\n    switch (event.getType()) {\n    case INIT_APPLICATION_RESOURCES:\n      Application app \u003d\n        ((ApplicationLocalizationEvent)event).getApplication();\n      // 0) Create application tracking structs\n      userName \u003d app.getUser();\n      privateRsrc.putIfAbsent(userName,\n          new LocalResourcesTrackerImpl(userName, dispatcher));\n      if (null !\u003d appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),\n          new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {\n        LOG.warn(\"Initializing application \" + app + \" already present\");\n        assert false; // TODO: FIXME assert doesn\u0027t help\n                      // ^ The condition is benign. Tests should fail and it\n                      //   should appear in logs, but it\u0027s an internal error\n                      //   that should have no effect on applications\n      }\n      // 1) Signal container init\n      dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n            app.getAppId()));\n      break;\n    case INIT_CONTAINER_RESOURCES:\n      ContainerLocalizationRequestEvent rsrcReqs \u003d\n        (ContainerLocalizationRequestEvent) event;\n      c \u003d rsrcReqs.getContainer();\n      LocalizerContext ctxt \u003d new LocalizerContext(\n          c.getUser(), c.getContainerID(), c.getCredentials());\n      rsrcs \u003d rsrcReqs.getRequestedResources();\n      for (LocalResourceVisibility vis : rsrcs.keySet()) {\n        tracker \u003d getLocalResourcesTracker(vis, c.getUser(), \n            c.getContainerID().getAppId());\n        for (LocalResourceRequest req : rsrcs.get(vis)) {\n          tracker.handle(new ResourceRequestEvent(req, vis, ctxt));\n        }\n      }\n      break;\n    case CACHE_CLEANUP:\n      ResourceRetentionSet retain \u003d\n        new ResourceRetentionSet(delService, cacheTargetSize);\n      retain.addResources(publicRsrc);\n      LOG.debug(\"Resource cleanup (public) \" + retain);\n      for (LocalResourcesTracker t : privateRsrc.values()) {\n        retain.addResources(t);\n        LOG.debug(\"Resource cleanup \" + t.getUser() + \":\" + retain);\n      }\n      break;\n    case CLEANUP_CONTAINER_RESOURCES:\n      ContainerLocalizationCleanupEvent rsrcCleanup \u003d\n        (ContainerLocalizationCleanupEvent) event;\n      c \u003d rsrcCleanup.getContainer();\n      rsrcs \u003d rsrcCleanup.getResources();\n      for (LocalResourceVisibility vis : rsrcs.keySet()) {\n        tracker \u003d getLocalResourcesTracker(vis, c.getUser(), \n            c.getContainerID().getAppId());\n        for (LocalResourceRequest req : rsrcs.get(vis)) {\n          tracker.handle(new ResourceReleaseEvent(req, c.getContainerID()));\n        }\n      }\n\n      // Delete the container directories\n      userName \u003d c.getUser();\n      String containerIDStr \u003d c.toString();\n      appIDStr \u003d\n        ConverterUtils.toString(c.getContainerID().getAppId());\n      for (Path localDir : localDirs) {\n\n        // Delete the user-owned container-dir\n        Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        Path userdir \u003d new Path(usersdir, userName);\n        Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n        Path appDir \u003d new Path(allAppsdir, appIDStr);\n        Path containerDir \u003d new Path(appDir, containerIDStr);\n        delService.delete(userName, containerDir, new Path[] {});\n\n        // Delete the nmPrivate container-dir\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        Path appSysDir \u003d new Path(sysDir, appIDStr);\n        Path containerSysDir \u003d new Path(appSysDir, containerIDStr);\n        delService.delete(null, containerSysDir,  new Path[] {});\n      }\n\n      dispatcher.getEventHandler().handle(new ContainerEvent(c.getContainerID(),\n            ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\n      break;\n    case DESTROY_APPLICATION_RESOURCES:\n\n      Application application \u003d\n          ((ApplicationLocalizationEvent) event).getApplication();\n      LocalResourcesTracker appLocalRsrcsTracker \u003d\n        appRsrc.remove(ConverterUtils.toString(application.getAppId()));\n      if (null \u003d\u003d appLocalRsrcsTracker) {\n        LOG.warn(\"Removing uninitialized application \" + application);\n      }\n      // TODO: What to do with appLocalRsrcsTracker?\n\n      // Delete the application directories\n      userName \u003d application.getUser();\n      appIDStr \u003d application.toString();\n      for (Path localDir : localDirs) {\n\n        // Delete the user-owned app-dir\n        Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        Path userdir \u003d new Path(usersdir, userName);\n        Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n        Path appDir \u003d new Path(allAppsdir, appIDStr);\n        delService.delete(userName, appDir, new Path[] {});\n\n        // Delete the nmPrivate app-dir\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        Path appSysDir \u003d new Path(sysDir, appIDStr);\n        delService.delete(null, appSysDir, new Path[] {});\n      }\n\n      // TODO: decrement reference counts of all resources associated with this\n      // app\n\n      dispatcher.getEventHandler().handle(new ApplicationEvent(\n            application.getAppId(),\n            ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\n      break;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void handle(LocalizationEvent event) {\n    String userName;\n    String appIDStr;\n    // TODO: create log dir as $logdir/$user/$appId\n    switch (event.getType()) {\n    case INIT_APPLICATION_RESOURCES:\n      Application app \u003d\n        ((ApplicationLocalizationEvent)event).getApplication();\n      // 0) Create application tracking structs\n      userName \u003d app.getUser();\n      privateRsrc.putIfAbsent(userName,\n          new LocalResourcesTrackerImpl(userName, dispatcher));\n      if (null !\u003d appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),\n          new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {\n        LOG.warn(\"Initializing application \" + app + \" already present\");\n        assert false; // TODO: FIXME assert doesn\u0027t help\n                      // ^ The condition is benign. Tests should fail and it\n                      //   should appear in logs, but it\u0027s an internal error\n                      //   that should have no effect on applications\n      }\n      // 1) Signal container init\n      dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n            app.getAppId()));\n      break;\n    case INIT_CONTAINER_RESOURCES:\n      ContainerLocalizationRequestEvent rsrcReqs \u003d\n        (ContainerLocalizationRequestEvent) event;\n      Container c \u003d rsrcReqs.getContainer();\n      LocalizerContext ctxt \u003d new LocalizerContext(\n          c.getUser(), c.getContainerID(), c.getCredentials());\n      final LocalResourcesTracker tracker;\n      LocalResourceVisibility vis \u003d rsrcReqs.getVisibility();\n      switch (vis) {\n      default:\n      case PUBLIC:\n        tracker \u003d publicRsrc;\n        break;\n      case PRIVATE:\n        tracker \u003d privateRsrc.get(c.getUser());\n        break;\n      case APPLICATION:\n        tracker \u003d\n          appRsrc.get(ConverterUtils.toString(c.getContainerID().getAppId()));\n        break;\n      }\n      // We get separate events one each for all resources of one visibility. So\n      // all the resources in this event are of the same visibility.\n      for (LocalResourceRequest req : rsrcReqs.getRequestedResources()) {\n        tracker.handle(new ResourceRequestEvent(req, vis, ctxt));\n      }\n      break;\n    case CACHE_CLEANUP:\n      ResourceRetentionSet retain \u003d\n        new ResourceRetentionSet(delService, cacheTargetSize);\n      retain.addResources(publicRsrc);\n      LOG.debug(\"Resource cleanup (public) \" + retain);\n      for (LocalResourcesTracker t : privateRsrc.values()) {\n        retain.addResources(t);\n        LOG.debug(\"Resource cleanup \" + t.getUser() + \":\" + retain);\n      }\n      break;\n    case CLEANUP_CONTAINER_RESOURCES:\n      Container container \u003d\n        ((ContainerLocalizationEvent)event).getContainer();\n\n      // Delete the container directories\n      userName \u003d container.getUser();\n      String containerIDStr \u003d container.toString();\n      appIDStr \u003d\n        ConverterUtils.toString(container.getContainerID().getAppId());\n      for (Path localDir : localDirs) {\n\n        // Delete the user-owned container-dir\n        Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        Path userdir \u003d new Path(usersdir, userName);\n        Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n        Path appDir \u003d new Path(allAppsdir, appIDStr);\n        Path containerDir \u003d new Path(appDir, containerIDStr);\n        delService.delete(userName, containerDir, new Path[] {});\n\n        // Delete the nmPrivate container-dir\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        Path appSysDir \u003d new Path(sysDir, appIDStr);\n        Path containerSysDir \u003d new Path(appSysDir, containerIDStr);\n        delService.delete(null, containerSysDir,  new Path[] {});\n      }\n\n      dispatcher.getEventHandler().handle(new ContainerEvent(\n            container.getContainerID(),\n            ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\n      break;\n    case DESTROY_APPLICATION_RESOURCES:\n\n      Application application \u003d\n          ((ApplicationLocalizationEvent) event).getApplication();\n      LocalResourcesTracker appLocalRsrcsTracker \u003d\n        appRsrc.remove(ConverterUtils.toString(application.getAppId()));\n      if (null \u003d\u003d appLocalRsrcsTracker) {\n        LOG.warn(\"Removing uninitialized application \" + application);\n      }\n      // TODO: What to do with appLocalRsrcsTracker?\n\n      // Delete the application directories\n      userName \u003d application.getUser();\n      appIDStr \u003d application.toString();\n      for (Path localDir : localDirs) {\n\n        // Delete the user-owned app-dir\n        Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        Path userdir \u003d new Path(usersdir, userName);\n        Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n        Path appDir \u003d new Path(allAppsdir, appIDStr);\n        delService.delete(userName, appDir, new Path[] {});\n\n        // Delete the nmPrivate app-dir\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        Path appSysDir \u003d new Path(sysDir, appIDStr);\n        delService.delete(null, appSysDir, new Path[] {});\n      }\n\n      // TODO: decrement reference counts of all resources associated with this\n      // app\n\n      dispatcher.getEventHandler().handle(new ApplicationEvent(\n            application.getAppId(),\n            ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\n      break;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,129 @@\n+  public void handle(LocalizationEvent event) {\n+    String userName;\n+    String appIDStr;\n+    // TODO: create log dir as $logdir/$user/$appId\n+    switch (event.getType()) {\n+    case INIT_APPLICATION_RESOURCES:\n+      Application app \u003d\n+        ((ApplicationLocalizationEvent)event).getApplication();\n+      // 0) Create application tracking structs\n+      userName \u003d app.getUser();\n+      privateRsrc.putIfAbsent(userName,\n+          new LocalResourcesTrackerImpl(userName, dispatcher));\n+      if (null !\u003d appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),\n+          new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {\n+        LOG.warn(\"Initializing application \" + app + \" already present\");\n+        assert false; // TODO: FIXME assert doesn\u0027t help\n+                      // ^ The condition is benign. Tests should fail and it\n+                      //   should appear in logs, but it\u0027s an internal error\n+                      //   that should have no effect on applications\n+      }\n+      // 1) Signal container init\n+      dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n+            app.getAppId()));\n+      break;\n+    case INIT_CONTAINER_RESOURCES:\n+      ContainerLocalizationRequestEvent rsrcReqs \u003d\n+        (ContainerLocalizationRequestEvent) event;\n+      Container c \u003d rsrcReqs.getContainer();\n+      LocalizerContext ctxt \u003d new LocalizerContext(\n+          c.getUser(), c.getContainerID(), c.getCredentials());\n+      final LocalResourcesTracker tracker;\n+      LocalResourceVisibility vis \u003d rsrcReqs.getVisibility();\n+      switch (vis) {\n+      default:\n+      case PUBLIC:\n+        tracker \u003d publicRsrc;\n+        break;\n+      case PRIVATE:\n+        tracker \u003d privateRsrc.get(c.getUser());\n+        break;\n+      case APPLICATION:\n+        tracker \u003d\n+          appRsrc.get(ConverterUtils.toString(c.getContainerID().getAppId()));\n+        break;\n+      }\n+      // We get separate events one each for all resources of one visibility. So\n+      // all the resources in this event are of the same visibility.\n+      for (LocalResourceRequest req : rsrcReqs.getRequestedResources()) {\n+        tracker.handle(new ResourceRequestEvent(req, vis, ctxt));\n+      }\n+      break;\n+    case CACHE_CLEANUP:\n+      ResourceRetentionSet retain \u003d\n+        new ResourceRetentionSet(delService, cacheTargetSize);\n+      retain.addResources(publicRsrc);\n+      LOG.debug(\"Resource cleanup (public) \" + retain);\n+      for (LocalResourcesTracker t : privateRsrc.values()) {\n+        retain.addResources(t);\n+        LOG.debug(\"Resource cleanup \" + t.getUser() + \":\" + retain);\n+      }\n+      break;\n+    case CLEANUP_CONTAINER_RESOURCES:\n+      Container container \u003d\n+        ((ContainerLocalizationEvent)event).getContainer();\n+\n+      // Delete the container directories\n+      userName \u003d container.getUser();\n+      String containerIDStr \u003d container.toString();\n+      appIDStr \u003d\n+        ConverterUtils.toString(container.getContainerID().getAppId());\n+      for (Path localDir : localDirs) {\n+\n+        // Delete the user-owned container-dir\n+        Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n+        Path userdir \u003d new Path(usersdir, userName);\n+        Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n+        Path appDir \u003d new Path(allAppsdir, appIDStr);\n+        Path containerDir \u003d new Path(appDir, containerIDStr);\n+        delService.delete(userName, containerDir, new Path[] {});\n+\n+        // Delete the nmPrivate container-dir\n+        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n+        Path appSysDir \u003d new Path(sysDir, appIDStr);\n+        Path containerSysDir \u003d new Path(appSysDir, containerIDStr);\n+        delService.delete(null, containerSysDir,  new Path[] {});\n+      }\n+\n+      dispatcher.getEventHandler().handle(new ContainerEvent(\n+            container.getContainerID(),\n+            ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\n+      break;\n+    case DESTROY_APPLICATION_RESOURCES:\n+\n+      Application application \u003d\n+          ((ApplicationLocalizationEvent) event).getApplication();\n+      LocalResourcesTracker appLocalRsrcsTracker \u003d\n+        appRsrc.remove(ConverterUtils.toString(application.getAppId()));\n+      if (null \u003d\u003d appLocalRsrcsTracker) {\n+        LOG.warn(\"Removing uninitialized application \" + application);\n+      }\n+      // TODO: What to do with appLocalRsrcsTracker?\n+\n+      // Delete the application directories\n+      userName \u003d application.getUser();\n+      appIDStr \u003d application.toString();\n+      for (Path localDir : localDirs) {\n+\n+        // Delete the user-owned app-dir\n+        Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n+        Path userdir \u003d new Path(usersdir, userName);\n+        Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n+        Path appDir \u003d new Path(allAppsdir, appIDStr);\n+        delService.delete(userName, appDir, new Path[] {});\n+\n+        // Delete the nmPrivate app-dir\n+        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n+        Path appSysDir \u003d new Path(sysDir, appIDStr);\n+        delService.delete(null, appSysDir, new Path[] {});\n+      }\n+\n+      // TODO: decrement reference counts of all resources associated with this\n+      // app\n+\n+      dispatcher.getEventHandler().handle(new ApplicationEvent(\n+            application.getAppId(),\n+            ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\n+      break;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(LocalizationEvent event) {\n    String userName;\n    String appIDStr;\n    // TODO: create log dir as $logdir/$user/$appId\n    switch (event.getType()) {\n    case INIT_APPLICATION_RESOURCES:\n      Application app \u003d\n        ((ApplicationLocalizationEvent)event).getApplication();\n      // 0) Create application tracking structs\n      userName \u003d app.getUser();\n      privateRsrc.putIfAbsent(userName,\n          new LocalResourcesTrackerImpl(userName, dispatcher));\n      if (null !\u003d appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),\n          new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {\n        LOG.warn(\"Initializing application \" + app + \" already present\");\n        assert false; // TODO: FIXME assert doesn\u0027t help\n                      // ^ The condition is benign. Tests should fail and it\n                      //   should appear in logs, but it\u0027s an internal error\n                      //   that should have no effect on applications\n      }\n      // 1) Signal container init\n      dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n            app.getAppId()));\n      break;\n    case INIT_CONTAINER_RESOURCES:\n      ContainerLocalizationRequestEvent rsrcReqs \u003d\n        (ContainerLocalizationRequestEvent) event;\n      Container c \u003d rsrcReqs.getContainer();\n      LocalizerContext ctxt \u003d new LocalizerContext(\n          c.getUser(), c.getContainerID(), c.getCredentials());\n      final LocalResourcesTracker tracker;\n      LocalResourceVisibility vis \u003d rsrcReqs.getVisibility();\n      switch (vis) {\n      default:\n      case PUBLIC:\n        tracker \u003d publicRsrc;\n        break;\n      case PRIVATE:\n        tracker \u003d privateRsrc.get(c.getUser());\n        break;\n      case APPLICATION:\n        tracker \u003d\n          appRsrc.get(ConverterUtils.toString(c.getContainerID().getAppId()));\n        break;\n      }\n      // We get separate events one each for all resources of one visibility. So\n      // all the resources in this event are of the same visibility.\n      for (LocalResourceRequest req : rsrcReqs.getRequestedResources()) {\n        tracker.handle(new ResourceRequestEvent(req, vis, ctxt));\n      }\n      break;\n    case CACHE_CLEANUP:\n      ResourceRetentionSet retain \u003d\n        new ResourceRetentionSet(delService, cacheTargetSize);\n      retain.addResources(publicRsrc);\n      LOG.debug(\"Resource cleanup (public) \" + retain);\n      for (LocalResourcesTracker t : privateRsrc.values()) {\n        retain.addResources(t);\n        LOG.debug(\"Resource cleanup \" + t.getUser() + \":\" + retain);\n      }\n      break;\n    case CLEANUP_CONTAINER_RESOURCES:\n      Container container \u003d\n        ((ContainerLocalizationEvent)event).getContainer();\n\n      // Delete the container directories\n      userName \u003d container.getUser();\n      String containerIDStr \u003d container.toString();\n      appIDStr \u003d\n        ConverterUtils.toString(container.getContainerID().getAppId());\n      for (Path localDir : localDirs) {\n\n        // Delete the user-owned container-dir\n        Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        Path userdir \u003d new Path(usersdir, userName);\n        Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n        Path appDir \u003d new Path(allAppsdir, appIDStr);\n        Path containerDir \u003d new Path(appDir, containerIDStr);\n        delService.delete(userName, containerDir, new Path[] {});\n\n        // Delete the nmPrivate container-dir\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        Path appSysDir \u003d new Path(sysDir, appIDStr);\n        Path containerSysDir \u003d new Path(appSysDir, containerIDStr);\n        delService.delete(null, containerSysDir,  new Path[] {});\n      }\n\n      dispatcher.getEventHandler().handle(new ContainerEvent(\n            container.getContainerID(),\n            ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP));\n      break;\n    case DESTROY_APPLICATION_RESOURCES:\n\n      Application application \u003d\n          ((ApplicationLocalizationEvent) event).getApplication();\n      LocalResourcesTracker appLocalRsrcsTracker \u003d\n        appRsrc.remove(ConverterUtils.toString(application.getAppId()));\n      if (null \u003d\u003d appLocalRsrcsTracker) {\n        LOG.warn(\"Removing uninitialized application \" + application);\n      }\n      // TODO: What to do with appLocalRsrcsTracker?\n\n      // Delete the application directories\n      userName \u003d application.getUser();\n      appIDStr \u003d application.toString();\n      for (Path localDir : localDirs) {\n\n        // Delete the user-owned app-dir\n        Path usersdir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        Path userdir \u003d new Path(usersdir, userName);\n        Path allAppsdir \u003d new Path(userdir, ContainerLocalizer.APPCACHE);\n        Path appDir \u003d new Path(allAppsdir, appIDStr);\n        delService.delete(userName, appDir, new Path[] {});\n\n        // Delete the nmPrivate app-dir\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        Path appSysDir \u003d new Path(sysDir, appIDStr);\n        delService.delete(null, appSysDir, new Path[] {});\n      }\n\n      // TODO: decrement reference counts of all resources associated with this\n      // app\n\n      dispatcher.getEventHandler().handle(new ApplicationEvent(\n            application.getAppId(),\n            ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));\n      break;\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java"
    }
  }
}