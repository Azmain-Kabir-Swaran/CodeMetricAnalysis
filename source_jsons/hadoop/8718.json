{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NNStorage.java",
  "functionName": "setStorageDirectories",
  "functionId": "setStorageDirectories___fsNameDirs-Collection__URI____fsEditsDirs-Collection__URI____sharedEditsDirs-Collection__URI__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
  "functionStartLine": 295,
  "functionEndLine": 344,
  "numCommitsSeen": 61,
  "timeTaken": 3266,
  "changeHistory": [
    "07e3cf952eac9e47e7bd5e195b0f9fc28c468313",
    "a4f66655ec22ca8c960f971f2b0cdafbd3430ad7",
    "38128baff40ee137376968f025e75827a4227ee7",
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
    "706394d03992b394e9f907aff2155df493e4ea4e"
  ],
  "changeHistoryShort": {
    "07e3cf952eac9e47e7bd5e195b0f9fc28c468313": "Ybodychange",
    "a4f66655ec22ca8c960f971f2b0cdafbd3430ad7": "Ybodychange",
    "38128baff40ee137376968f025e75827a4227ee7": "Ybodychange",
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de": "Ybodychange",
    "706394d03992b394e9f907aff2155df493e4ea4e": "Ybodychange"
  },
  "changeHistoryDetails": {
    "07e3cf952eac9e47e7bd5e195b0f9fc28c468313": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2470. NN should automatically set permissions on dfs.namenode.*.dir. Contributed by Siddharth Wagle.\n",
      "commitDate": "26/08/19 3:57 PM",
      "commitName": "07e3cf952eac9e47e7bd5e195b0f9fc28c468313",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "01/02/18 10:45 AM",
      "commitNameOld": "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 571.18,
      "commitsBetweenForRepo": 4926,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,50 @@\n   synchronized void setStorageDirectories(Collection\u003cURI\u003e fsNameDirs,\n                                           Collection\u003cURI\u003e fsEditsDirs,\n                                           Collection\u003cURI\u003e sharedEditsDirs)\n       throws IOException {\n     getStorageDirs().clear();\n     this.removedStorageDirs.clear();\n \n    // Add all name dirs with appropriate NameNodeDirType\n     for (URI dirName : fsNameDirs) {\n       checkSchemeConsistency(dirName);\n       boolean isAlsoEdits \u003d false;\n       for (URI editsDirName : fsEditsDirs) {\n         if (editsDirName.compareTo(dirName) \u003d\u003d 0) {\n           isAlsoEdits \u003d true;\n           fsEditsDirs.remove(editsDirName);\n           break;\n         }\n       }\n       NameNodeDirType dirType \u003d (isAlsoEdits) ?\n                           NameNodeDirType.IMAGE_AND_EDITS :\n                           NameNodeDirType.IMAGE;\n       // Add to the list of storage directories, only if the\n       // URI is of type file://\n-      if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n-        this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n+      if (dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n+        // Don\u0027t lock the dir if it\u0027s shared.\n+        StorageDirectory sd \u003d new StorageDirectory(new File(dirName.getPath()),\n             dirType,\n-            sharedEditsDirs.contains(dirName))); // Don\u0027t lock the dir if it\u0027s shared.\n+            sharedEditsDirs.contains(dirName),\n+            new FsPermission(conf.get(\n+                DFSConfigKeys.DFS_NAMENODE_NAME_DIR_PERMISSION_KEY,\n+                DFSConfigKeys.DFS_NAMENODE_NAME_DIR_PERMISSION_DEFAULT)));\n+\n+        this.addStorageDir(sd);\n       }\n     }\n \n     // Add edits dirs if they are different from name dirs\n     for (URI dirName : fsEditsDirs) {\n       checkSchemeConsistency(dirName);\n       // Add to the list of storage directories, only if the\n       // URI is of type file://\n-      if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n+      if (dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n         this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n-            NameNodeDirType.EDITS, sharedEditsDirs.contains(dirName)));\n+            NameNodeDirType.EDITS, sharedEditsDirs.contains(dirName),\n+            new FsPermission(conf.get(\n+                DFSConfigKeys.DFS_NAMENODE_NAME_DIR_PERMISSION_KEY,\n+                DFSConfigKeys.DFS_NAMENODE_NAME_DIR_PERMISSION_DEFAULT))));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void setStorageDirectories(Collection\u003cURI\u003e fsNameDirs,\n                                          Collection\u003cURI\u003e fsEditsDirs,\n                                          Collection\u003cURI\u003e sharedEditsDirs)\n      throws IOException {\n    getStorageDirs().clear();\n    this.removedStorageDirs.clear();\n\n   // Add all name dirs with appropriate NameNodeDirType\n    for (URI dirName : fsNameDirs) {\n      checkSchemeConsistency(dirName);\n      boolean isAlsoEdits \u003d false;\n      for (URI editsDirName : fsEditsDirs) {\n        if (editsDirName.compareTo(dirName) \u003d\u003d 0) {\n          isAlsoEdits \u003d true;\n          fsEditsDirs.remove(editsDirName);\n          break;\n        }\n      }\n      NameNodeDirType dirType \u003d (isAlsoEdits) ?\n                          NameNodeDirType.IMAGE_AND_EDITS :\n                          NameNodeDirType.IMAGE;\n      // Add to the list of storage directories, only if the\n      // URI is of type file://\n      if (dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n        // Don\u0027t lock the dir if it\u0027s shared.\n        StorageDirectory sd \u003d new StorageDirectory(new File(dirName.getPath()),\n            dirType,\n            sharedEditsDirs.contains(dirName),\n            new FsPermission(conf.get(\n                DFSConfigKeys.DFS_NAMENODE_NAME_DIR_PERMISSION_KEY,\n                DFSConfigKeys.DFS_NAMENODE_NAME_DIR_PERMISSION_DEFAULT)));\n\n        this.addStorageDir(sd);\n      }\n    }\n\n    // Add edits dirs if they are different from name dirs\n    for (URI dirName : fsEditsDirs) {\n      checkSchemeConsistency(dirName);\n      // Add to the list of storage directories, only if the\n      // URI is of type file://\n      if (dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n        this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n            NameNodeDirType.EDITS, sharedEditsDirs.contains(dirName),\n            new FsPermission(conf.get(\n                DFSConfigKeys.DFS_NAMENODE_NAME_DIR_PERMISSION_KEY,\n                DFSConfigKeys.DFS_NAMENODE_NAME_DIR_PERMISSION_DEFAULT))));\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {}
    },
    "a4f66655ec22ca8c960f971f2b0cdafbd3430ad7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11267. Avoid redefinition of storageDirs in NNStorage and cleanup its accessors in Storage. (Manoj Govindassamy via lei)\n",
      "commitDate": "29/12/16 12:57 AM",
      "commitName": "a4f66655ec22ca8c960f971f2b0cdafbd3430ad7",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "05/12/16 10:54 AM",
      "commitNameOld": "1b5cceaffbdde50a87ede81552dc380832db8e79",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 23.59,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   synchronized void setStorageDirectories(Collection\u003cURI\u003e fsNameDirs,\n                                           Collection\u003cURI\u003e fsEditsDirs,\n                                           Collection\u003cURI\u003e sharedEditsDirs)\n       throws IOException {\n-    this.storageDirs.clear();\n+    getStorageDirs().clear();\n     this.removedStorageDirs.clear();\n \n    // Add all name dirs with appropriate NameNodeDirType\n     for (URI dirName : fsNameDirs) {\n       checkSchemeConsistency(dirName);\n       boolean isAlsoEdits \u003d false;\n       for (URI editsDirName : fsEditsDirs) {\n         if (editsDirName.compareTo(dirName) \u003d\u003d 0) {\n           isAlsoEdits \u003d true;\n           fsEditsDirs.remove(editsDirName);\n           break;\n         }\n       }\n       NameNodeDirType dirType \u003d (isAlsoEdits) ?\n                           NameNodeDirType.IMAGE_AND_EDITS :\n                           NameNodeDirType.IMAGE;\n       // Add to the list of storage directories, only if the\n       // URI is of type file://\n       if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n         this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n             dirType,\n             sharedEditsDirs.contains(dirName))); // Don\u0027t lock the dir if it\u0027s shared.\n       }\n     }\n \n     // Add edits dirs if they are different from name dirs\n     for (URI dirName : fsEditsDirs) {\n       checkSchemeConsistency(dirName);\n       // Add to the list of storage directories, only if the\n       // URI is of type file://\n       if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n         this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n             NameNodeDirType.EDITS, sharedEditsDirs.contains(dirName)));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void setStorageDirectories(Collection\u003cURI\u003e fsNameDirs,\n                                          Collection\u003cURI\u003e fsEditsDirs,\n                                          Collection\u003cURI\u003e sharedEditsDirs)\n      throws IOException {\n    getStorageDirs().clear();\n    this.removedStorageDirs.clear();\n\n   // Add all name dirs with appropriate NameNodeDirType\n    for (URI dirName : fsNameDirs) {\n      checkSchemeConsistency(dirName);\n      boolean isAlsoEdits \u003d false;\n      for (URI editsDirName : fsEditsDirs) {\n        if (editsDirName.compareTo(dirName) \u003d\u003d 0) {\n          isAlsoEdits \u003d true;\n          fsEditsDirs.remove(editsDirName);\n          break;\n        }\n      }\n      NameNodeDirType dirType \u003d (isAlsoEdits) ?\n                          NameNodeDirType.IMAGE_AND_EDITS :\n                          NameNodeDirType.IMAGE;\n      // Add to the list of storage directories, only if the\n      // URI is of type file://\n      if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n        this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n            dirType,\n            sharedEditsDirs.contains(dirName))); // Don\u0027t lock the dir if it\u0027s shared.\n      }\n    }\n\n    // Add edits dirs if they are different from name dirs\n    for (URI dirName : fsEditsDirs) {\n      checkSchemeConsistency(dirName);\n      // Add to the list of storage directories, only if the\n      // URI is of type file://\n      if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n        this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n            NameNodeDirType.EDITS, sharedEditsDirs.contains(dirName)));\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {}
    },
    "38128baff40ee137376968f025e75827a4227ee7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10425. Clean up NNStorage and TestSaveNamespace. Contributed by Andras Bokor.\n",
      "commitDate": "20/07/16 10:44 AM",
      "commitName": "38128baff40ee137376968f025e75827a4227ee7",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "18/05/16 2:13 PM",
      "commitNameOld": "010e6ac328855bad59f138b6aeaec535272f448c",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 62.85,
      "commitsBetweenForRepo": 537,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   synchronized void setStorageDirectories(Collection\u003cURI\u003e fsNameDirs,\n                                           Collection\u003cURI\u003e fsEditsDirs,\n                                           Collection\u003cURI\u003e sharedEditsDirs)\n       throws IOException {\n     this.storageDirs.clear();\n     this.removedStorageDirs.clear();\n \n    // Add all name dirs with appropriate NameNodeDirType\n     for (URI dirName : fsNameDirs) {\n       checkSchemeConsistency(dirName);\n       boolean isAlsoEdits \u003d false;\n       for (URI editsDirName : fsEditsDirs) {\n         if (editsDirName.compareTo(dirName) \u003d\u003d 0) {\n           isAlsoEdits \u003d true;\n           fsEditsDirs.remove(editsDirName);\n           break;\n         }\n       }\n       NameNodeDirType dirType \u003d (isAlsoEdits) ?\n                           NameNodeDirType.IMAGE_AND_EDITS :\n                           NameNodeDirType.IMAGE;\n       // Add to the list of storage directories, only if the\n       // URI is of type file://\n       if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n         this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n             dirType,\n             sharedEditsDirs.contains(dirName))); // Don\u0027t lock the dir if it\u0027s shared.\n       }\n     }\n \n     // Add edits dirs if they are different from name dirs\n     for (URI dirName : fsEditsDirs) {\n       checkSchemeConsistency(dirName);\n       // Add to the list of storage directories, only if the\n       // URI is of type file://\n-      if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0)\n+      if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n         this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n-                    NameNodeDirType.EDITS, sharedEditsDirs.contains(dirName)));\n+            NameNodeDirType.EDITS, sharedEditsDirs.contains(dirName)));\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void setStorageDirectories(Collection\u003cURI\u003e fsNameDirs,\n                                          Collection\u003cURI\u003e fsEditsDirs,\n                                          Collection\u003cURI\u003e sharedEditsDirs)\n      throws IOException {\n    this.storageDirs.clear();\n    this.removedStorageDirs.clear();\n\n   // Add all name dirs with appropriate NameNodeDirType\n    for (URI dirName : fsNameDirs) {\n      checkSchemeConsistency(dirName);\n      boolean isAlsoEdits \u003d false;\n      for (URI editsDirName : fsEditsDirs) {\n        if (editsDirName.compareTo(dirName) \u003d\u003d 0) {\n          isAlsoEdits \u003d true;\n          fsEditsDirs.remove(editsDirName);\n          break;\n        }\n      }\n      NameNodeDirType dirType \u003d (isAlsoEdits) ?\n                          NameNodeDirType.IMAGE_AND_EDITS :\n                          NameNodeDirType.IMAGE;\n      // Add to the list of storage directories, only if the\n      // URI is of type file://\n      if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n        this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n            dirType,\n            sharedEditsDirs.contains(dirName))); // Don\u0027t lock the dir if it\u0027s shared.\n      }\n    }\n\n    // Add edits dirs if they are different from name dirs\n    for (URI dirName : fsEditsDirs) {\n      checkSchemeConsistency(dirName);\n      // Add to the list of storage directories, only if the\n      // URI is of type file://\n      if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n        this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n            NameNodeDirType.EDITS, sharedEditsDirs.contains(dirName)));\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {}
    },
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5138. Support HDFS upgrade in HA. Contributed by Aaron T. Myers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561381 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 12:01 PM",
      "commitName": "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "17/06/13 9:47 PM",
      "commitNameOld": "364b379cb84ab053d5704e2f761ebec27fd54cc4",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 221.63,
      "commitsBetweenForRepo": 1317,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   synchronized void setStorageDirectories(Collection\u003cURI\u003e fsNameDirs,\n                                           Collection\u003cURI\u003e fsEditsDirs,\n                                           Collection\u003cURI\u003e sharedEditsDirs)\n       throws IOException {\n     this.storageDirs.clear();\n     this.removedStorageDirs.clear();\n \n    // Add all name dirs with appropriate NameNodeDirType\n     for (URI dirName : fsNameDirs) {\n       checkSchemeConsistency(dirName);\n       boolean isAlsoEdits \u003d false;\n       for (URI editsDirName : fsEditsDirs) {\n         if (editsDirName.compareTo(dirName) \u003d\u003d 0) {\n           isAlsoEdits \u003d true;\n           fsEditsDirs.remove(editsDirName);\n           break;\n         }\n       }\n       NameNodeDirType dirType \u003d (isAlsoEdits) ?\n                           NameNodeDirType.IMAGE_AND_EDITS :\n                           NameNodeDirType.IMAGE;\n       // Add to the list of storage directories, only if the\n       // URI is of type file://\n       if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n         this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n             dirType,\n-            !sharedEditsDirs.contains(dirName))); // Don\u0027t lock the dir if it\u0027s shared.\n+            sharedEditsDirs.contains(dirName))); // Don\u0027t lock the dir if it\u0027s shared.\n       }\n     }\n \n     // Add edits dirs if they are different from name dirs\n     for (URI dirName : fsEditsDirs) {\n       checkSchemeConsistency(dirName);\n       // Add to the list of storage directories, only if the\n       // URI is of type file://\n       if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0)\n         this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n-                    NameNodeDirType.EDITS, !sharedEditsDirs.contains(dirName)));\n+                    NameNodeDirType.EDITS, sharedEditsDirs.contains(dirName)));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void setStorageDirectories(Collection\u003cURI\u003e fsNameDirs,\n                                          Collection\u003cURI\u003e fsEditsDirs,\n                                          Collection\u003cURI\u003e sharedEditsDirs)\n      throws IOException {\n    this.storageDirs.clear();\n    this.removedStorageDirs.clear();\n\n   // Add all name dirs with appropriate NameNodeDirType\n    for (URI dirName : fsNameDirs) {\n      checkSchemeConsistency(dirName);\n      boolean isAlsoEdits \u003d false;\n      for (URI editsDirName : fsEditsDirs) {\n        if (editsDirName.compareTo(dirName) \u003d\u003d 0) {\n          isAlsoEdits \u003d true;\n          fsEditsDirs.remove(editsDirName);\n          break;\n        }\n      }\n      NameNodeDirType dirType \u003d (isAlsoEdits) ?\n                          NameNodeDirType.IMAGE_AND_EDITS :\n                          NameNodeDirType.IMAGE;\n      // Add to the list of storage directories, only if the\n      // URI is of type file://\n      if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n        this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n            dirType,\n            sharedEditsDirs.contains(dirName))); // Don\u0027t lock the dir if it\u0027s shared.\n      }\n    }\n\n    // Add edits dirs if they are different from name dirs\n    for (URI dirName : fsEditsDirs) {\n      checkSchemeConsistency(dirName);\n      // Add to the list of storage directories, only if the\n      // URI is of type file://\n      if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0)\n        this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n                    NameNodeDirType.EDITS, sharedEditsDirs.contains(dirName)));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {}
    },
    "706394d03992b394e9f907aff2155df493e4ea4e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3004. Implement Recovery Mode. Contributed by Colin Patrick McCabe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1311394 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/04/12 12:39 PM",
      "commitName": "706394d03992b394e9f907aff2155df493e4ea4e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "26/03/12 10:02 AM",
      "commitNameOld": "ce1a7ec9755f17527c29b0db713d7e01750e10c9",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 14.11,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,40 @@\n   synchronized void setStorageDirectories(Collection\u003cURI\u003e fsNameDirs,\n                                           Collection\u003cURI\u003e fsEditsDirs,\n                                           Collection\u003cURI\u003e sharedEditsDirs)\n       throws IOException {\n     this.storageDirs.clear();\n     this.removedStorageDirs.clear();\n \n    // Add all name dirs with appropriate NameNodeDirType\n     for (URI dirName : fsNameDirs) {\n       checkSchemeConsistency(dirName);\n       boolean isAlsoEdits \u003d false;\n       for (URI editsDirName : fsEditsDirs) {\n         if (editsDirName.compareTo(dirName) \u003d\u003d 0) {\n           isAlsoEdits \u003d true;\n           fsEditsDirs.remove(editsDirName);\n           break;\n         }\n       }\n       NameNodeDirType dirType \u003d (isAlsoEdits) ?\n                           NameNodeDirType.IMAGE_AND_EDITS :\n                           NameNodeDirType.IMAGE;\n       // Add to the list of storage directories, only if the\n       // URI is of type file://\n-      if(dirName.getScheme().compareTo(JournalType.FILE.name().toLowerCase())\n-          \u003d\u003d 0){\n+      if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n         this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n             dirType,\n             !sharedEditsDirs.contains(dirName))); // Don\u0027t lock the dir if it\u0027s shared.\n       }\n     }\n \n     // Add edits dirs if they are different from name dirs\n     for (URI dirName : fsEditsDirs) {\n       checkSchemeConsistency(dirName);\n       // Add to the list of storage directories, only if the\n       // URI is of type file://\n-      if(dirName.getScheme().compareTo(JournalType.FILE.name().toLowerCase())\n-          \u003d\u003d 0)\n+      if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0)\n         this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n                     NameNodeDirType.EDITS, !sharedEditsDirs.contains(dirName)));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void setStorageDirectories(Collection\u003cURI\u003e fsNameDirs,\n                                          Collection\u003cURI\u003e fsEditsDirs,\n                                          Collection\u003cURI\u003e sharedEditsDirs)\n      throws IOException {\n    this.storageDirs.clear();\n    this.removedStorageDirs.clear();\n\n   // Add all name dirs with appropriate NameNodeDirType\n    for (URI dirName : fsNameDirs) {\n      checkSchemeConsistency(dirName);\n      boolean isAlsoEdits \u003d false;\n      for (URI editsDirName : fsEditsDirs) {\n        if (editsDirName.compareTo(dirName) \u003d\u003d 0) {\n          isAlsoEdits \u003d true;\n          fsEditsDirs.remove(editsDirName);\n          break;\n        }\n      }\n      NameNodeDirType dirType \u003d (isAlsoEdits) ?\n                          NameNodeDirType.IMAGE_AND_EDITS :\n                          NameNodeDirType.IMAGE;\n      // Add to the list of storage directories, only if the\n      // URI is of type file://\n      if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0) {\n        this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n            dirType,\n            !sharedEditsDirs.contains(dirName))); // Don\u0027t lock the dir if it\u0027s shared.\n      }\n    }\n\n    // Add edits dirs if they are different from name dirs\n    for (URI dirName : fsEditsDirs) {\n      checkSchemeConsistency(dirName);\n      // Add to the list of storage directories, only if the\n      // URI is of type file://\n      if(dirName.getScheme().compareTo(\"file\") \u003d\u003d 0)\n        this.addStorageDir(new StorageDirectory(new File(dirName.getPath()),\n                    NameNodeDirType.EDITS, !sharedEditsDirs.contains(dirName)));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {}
    }
  }
}