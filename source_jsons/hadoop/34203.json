{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AuxServices.java",
  "functionName": "loadManifest",
  "functionId": "loadManifest___conf-Configuration__startServices-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java",
  "functionStartLine": 595,
  "functionEndLine": 618,
  "numCommitsSeen": 28,
  "timeTaken": 3929,
  "changeHistory": [
    "1ab69a9543df555b878951e66e3da13485e7f6d5",
    "2fa9389c2e1ca4853a61533686941c685c889dbe",
    "dfceffa70d54f5aa9cb2fe200653e83227c44f62",
    "c7a5a4435ec3098c2765e8ef53b7771e0532ff61"
  ],
  "changeHistoryShort": {
    "1ab69a9543df555b878951e66e3da13485e7f6d5": "Ybodychange",
    "2fa9389c2e1ca4853a61533686941c685c889dbe": "Ybodychange",
    "dfceffa70d54f5aa9cb2fe200653e83227c44f62": "Ymultichange(Ymodifierchange,Ybodychange)",
    "c7a5a4435ec3098c2765e8ef53b7771e0532ff61": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1ab69a9543df555b878951e66e3da13485e7f6d5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9221.  Added flag to disable dynamic auxiliary service feature.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "25/01/19 4:05 PM",
      "commitName": "1ab69a9543df555b878951e66e3da13485e7f6d5",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "22/01/19 3:24 PM",
      "commitNameOld": "2fa9389c2e1ca4853a61533686941c685c889dbe",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 3.03,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,24 @@\n   protected synchronized void loadManifest(Configuration conf, boolean\n       startServices) throws IOException {\n+    if (!manifestEnabled) {\n+      throw new IOException(\"Dynamic reloading is not enabled via \" +\n+          YarnConfiguration.NM_AUX_SERVICES_MANIFEST_ENABLED);\n+    }\n     if (manifest \u003d\u003d null) {\n       return;\n     }\n     if (!manifestFS.exists(manifest)) {\n       if (serviceMap.isEmpty()) {\n         return;\n       }\n       LOG.info(\"Manifest file \" + manifest + \" doesn\u0027t exist, stopping \" +\n           \"auxiliary services\");\n       Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n       for (String sName : servicesToRemove) {\n         maybeRemoveAuxService(sName);\n       }\n       return;\n     }\n     AuxServiceRecords services \u003d maybeReadManifestFile();\n     loadServices(services, conf, startServices);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void loadManifest(Configuration conf, boolean\n      startServices) throws IOException {\n    if (!manifestEnabled) {\n      throw new IOException(\"Dynamic reloading is not enabled via \" +\n          YarnConfiguration.NM_AUX_SERVICES_MANIFEST_ENABLED);\n    }\n    if (manifest \u003d\u003d null) {\n      return;\n    }\n    if (!manifestFS.exists(manifest)) {\n      if (serviceMap.isEmpty()) {\n        return;\n      }\n      LOG.info(\"Manifest file \" + manifest + \" doesn\u0027t exist, stopping \" +\n          \"auxiliary services\");\n      Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n      for (String sName : servicesToRemove) {\n        maybeRemoveAuxService(sName);\n      }\n      return;\n    }\n    AuxServiceRecords services \u003d maybeReadManifestFile();\n    loadServices(services, conf, startServices);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java",
      "extendedDetails": {}
    },
    "2fa9389c2e1ca4853a61533686941c685c889dbe": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9146.  Added REST API to configure auxiliary service.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "22/01/19 3:24 PM",
      "commitName": "2fa9389c2e1ca4853a61533686941c685c889dbe",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "03/01/19 9:57 AM",
      "commitNameOld": "dfceffa70d54f5aa9cb2fe200653e83227c44f62",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 19.23,
      "commitsBetweenForRepo": 140,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,20 @@\n   protected synchronized void loadManifest(Configuration conf, boolean\n       startServices) throws IOException {\n     if (manifest \u003d\u003d null) {\n       return;\n     }\n     if (!manifestFS.exists(manifest)) {\n       if (serviceMap.isEmpty()) {\n         return;\n       }\n       LOG.info(\"Manifest file \" + manifest + \" doesn\u0027t exist, stopping \" +\n           \"auxiliary services\");\n       Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n       for (String sName : servicesToRemove) {\n         maybeRemoveAuxService(sName);\n       }\n       return;\n     }\n     AuxServiceRecords services \u003d maybeReadManifestFile();\n-    if (services \u003d\u003d null) {\n-      // read did not occur or no changes detected\n-      return;\n-    }\n-    Set\u003cString\u003e loadedAuxServices \u003d new HashSet\u003c\u003e();\n-    boolean foundChanges \u003d false;\n-    if (services.getServices() !\u003d null) {\n-      for (AuxServiceRecord service : services.getServices()) {\n-        AuxServiceRecord existingService \u003d serviceRecordMap.get(service\n-            .getName());\n-        loadedAuxServices.add(service.getName());\n-        if (existingService !\u003d null \u0026\u0026 existingService.equals(service)) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Auxiliary service already loaded: \" + service.getName());\n-          }\n-          continue;\n-        }\n-        foundChanges \u003d true;\n-        try {\n-          // stop aux service\n-          maybeRemoveAuxService(service.getName());\n-          // init aux service\n-          AuxiliaryService s \u003d initAuxService(service, conf, false);\n-          if (startServices) {\n-            // start aux service\n-            startAuxService(service.getName(), s, service);\n-          }\n-          // add aux service to serviceMap\n-          addService(service.getName(), s, service);\n-        } catch (IOException e) {\n-          LOG.error(\"Failed to load auxiliary service \" + service.getName());\n-        }\n-      }\n-    }\n-\n-    // remove aux services that do not appear in the manifest\n-    Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n-    servicesToRemove.removeAll(loadedAuxServices);\n-    for (String sName : servicesToRemove) {\n-      foundChanges \u003d true;\n-      maybeRemoveAuxService(sName);\n-    }\n-\n-    if (!foundChanges) {\n-      LOG.info(\"No auxiliary services changes detected in manifest\");\n-    }\n+    loadServices(services, conf, startServices);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void loadManifest(Configuration conf, boolean\n      startServices) throws IOException {\n    if (manifest \u003d\u003d null) {\n      return;\n    }\n    if (!manifestFS.exists(manifest)) {\n      if (serviceMap.isEmpty()) {\n        return;\n      }\n      LOG.info(\"Manifest file \" + manifest + \" doesn\u0027t exist, stopping \" +\n          \"auxiliary services\");\n      Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n      for (String sName : servicesToRemove) {\n        maybeRemoveAuxService(sName);\n      }\n      return;\n    }\n    AuxServiceRecords services \u003d maybeReadManifestFile();\n    loadServices(services, conf, startServices);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java",
      "extendedDetails": {}
    },
    "dfceffa70d54f5aa9cb2fe200653e83227c44f62": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-9147. Rmove auxiliary services when manifest file is removed.\n           Contributed by Billie Rinaldi\n",
      "commitDate": "03/01/19 9:57 AM",
      "commitName": "dfceffa70d54f5aa9cb2fe200653e83227c44f62",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-9147. Rmove auxiliary services when manifest file is removed.\n           Contributed by Billie Rinaldi\n",
          "commitDate": "03/01/19 9:57 AM",
          "commitName": "dfceffa70d54f5aa9cb2fe200653e83227c44f62",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "21/12/18 11:56 AM",
          "commitNameOld": "ea724181d66ebe3c2cc7ed071948e9bc463bf223",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 12.92,
          "commitsBetweenForRepo": 75,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,65 @@\n-  private synchronized void loadManifest(Configuration conf, boolean\n+  protected synchronized void loadManifest(Configuration conf, boolean\n       startServices) throws IOException {\n+    if (manifest \u003d\u003d null) {\n+      return;\n+    }\n+    if (!manifestFS.exists(manifest)) {\n+      if (serviceMap.isEmpty()) {\n+        return;\n+      }\n+      LOG.info(\"Manifest file \" + manifest + \" doesn\u0027t exist, stopping \" +\n+          \"auxiliary services\");\n+      Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n+      for (String sName : servicesToRemove) {\n+        maybeRemoveAuxService(sName);\n+      }\n+      return;\n+    }\n     AuxServiceRecords services \u003d maybeReadManifestFile();\n     if (services \u003d\u003d null) {\n       // read did not occur or no changes detected\n       return;\n     }\n     Set\u003cString\u003e loadedAuxServices \u003d new HashSet\u003c\u003e();\n     boolean foundChanges \u003d false;\n     if (services.getServices() !\u003d null) {\n       for (AuxServiceRecord service : services.getServices()) {\n         AuxServiceRecord existingService \u003d serviceRecordMap.get(service\n             .getName());\n         loadedAuxServices.add(service.getName());\n         if (existingService !\u003d null \u0026\u0026 existingService.equals(service)) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Auxiliary service already loaded: \" + service.getName());\n           }\n           continue;\n         }\n         foundChanges \u003d true;\n         try {\n           // stop aux service\n           maybeRemoveAuxService(service.getName());\n           // init aux service\n           AuxiliaryService s \u003d initAuxService(service, conf, false);\n           if (startServices) {\n             // start aux service\n             startAuxService(service.getName(), s, service);\n           }\n           // add aux service to serviceMap\n           addService(service.getName(), s, service);\n         } catch (IOException e) {\n           LOG.error(\"Failed to load auxiliary service \" + service.getName());\n         }\n       }\n     }\n \n     // remove aux services that do not appear in the manifest\n-    List\u003cString\u003e servicesToRemove \u003d new ArrayList\u003c\u003e();\n-    for (String sName : serviceMap.keySet()) {\n-      if (!loadedAuxServices.contains(sName)) {\n-        foundChanges \u003d true;\n-        servicesToRemove.add(sName);\n-      }\n-    }\n+    Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n+    servicesToRemove.removeAll(loadedAuxServices);\n     for (String sName : servicesToRemove) {\n-      LOG.info(\"Removing aux service \" + sName);\n+      foundChanges \u003d true;\n       maybeRemoveAuxService(sName);\n     }\n \n     if (!foundChanges) {\n       LOG.info(\"No auxiliary services changes detected in manifest\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void loadManifest(Configuration conf, boolean\n      startServices) throws IOException {\n    if (manifest \u003d\u003d null) {\n      return;\n    }\n    if (!manifestFS.exists(manifest)) {\n      if (serviceMap.isEmpty()) {\n        return;\n      }\n      LOG.info(\"Manifest file \" + manifest + \" doesn\u0027t exist, stopping \" +\n          \"auxiliary services\");\n      Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n      for (String sName : servicesToRemove) {\n        maybeRemoveAuxService(sName);\n      }\n      return;\n    }\n    AuxServiceRecords services \u003d maybeReadManifestFile();\n    if (services \u003d\u003d null) {\n      // read did not occur or no changes detected\n      return;\n    }\n    Set\u003cString\u003e loadedAuxServices \u003d new HashSet\u003c\u003e();\n    boolean foundChanges \u003d false;\n    if (services.getServices() !\u003d null) {\n      for (AuxServiceRecord service : services.getServices()) {\n        AuxServiceRecord existingService \u003d serviceRecordMap.get(service\n            .getName());\n        loadedAuxServices.add(service.getName());\n        if (existingService !\u003d null \u0026\u0026 existingService.equals(service)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auxiliary service already loaded: \" + service.getName());\n          }\n          continue;\n        }\n        foundChanges \u003d true;\n        try {\n          // stop aux service\n          maybeRemoveAuxService(service.getName());\n          // init aux service\n          AuxiliaryService s \u003d initAuxService(service, conf, false);\n          if (startServices) {\n            // start aux service\n            startAuxService(service.getName(), s, service);\n          }\n          // add aux service to serviceMap\n          addService(service.getName(), s, service);\n        } catch (IOException e) {\n          LOG.error(\"Failed to load auxiliary service \" + service.getName());\n        }\n      }\n    }\n\n    // remove aux services that do not appear in the manifest\n    Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n    servicesToRemove.removeAll(loadedAuxServices);\n    for (String sName : servicesToRemove) {\n      foundChanges \u003d true;\n      maybeRemoveAuxService(sName);\n    }\n\n    if (!foundChanges) {\n      LOG.info(\"No auxiliary services changes detected in manifest\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[protected, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9147. Rmove auxiliary services when manifest file is removed.\n           Contributed by Billie Rinaldi\n",
          "commitDate": "03/01/19 9:57 AM",
          "commitName": "dfceffa70d54f5aa9cb2fe200653e83227c44f62",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "21/12/18 11:56 AM",
          "commitNameOld": "ea724181d66ebe3c2cc7ed071948e9bc463bf223",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 12.92,
          "commitsBetweenForRepo": 75,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,65 @@\n-  private synchronized void loadManifest(Configuration conf, boolean\n+  protected synchronized void loadManifest(Configuration conf, boolean\n       startServices) throws IOException {\n+    if (manifest \u003d\u003d null) {\n+      return;\n+    }\n+    if (!manifestFS.exists(manifest)) {\n+      if (serviceMap.isEmpty()) {\n+        return;\n+      }\n+      LOG.info(\"Manifest file \" + manifest + \" doesn\u0027t exist, stopping \" +\n+          \"auxiliary services\");\n+      Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n+      for (String sName : servicesToRemove) {\n+        maybeRemoveAuxService(sName);\n+      }\n+      return;\n+    }\n     AuxServiceRecords services \u003d maybeReadManifestFile();\n     if (services \u003d\u003d null) {\n       // read did not occur or no changes detected\n       return;\n     }\n     Set\u003cString\u003e loadedAuxServices \u003d new HashSet\u003c\u003e();\n     boolean foundChanges \u003d false;\n     if (services.getServices() !\u003d null) {\n       for (AuxServiceRecord service : services.getServices()) {\n         AuxServiceRecord existingService \u003d serviceRecordMap.get(service\n             .getName());\n         loadedAuxServices.add(service.getName());\n         if (existingService !\u003d null \u0026\u0026 existingService.equals(service)) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Auxiliary service already loaded: \" + service.getName());\n           }\n           continue;\n         }\n         foundChanges \u003d true;\n         try {\n           // stop aux service\n           maybeRemoveAuxService(service.getName());\n           // init aux service\n           AuxiliaryService s \u003d initAuxService(service, conf, false);\n           if (startServices) {\n             // start aux service\n             startAuxService(service.getName(), s, service);\n           }\n           // add aux service to serviceMap\n           addService(service.getName(), s, service);\n         } catch (IOException e) {\n           LOG.error(\"Failed to load auxiliary service \" + service.getName());\n         }\n       }\n     }\n \n     // remove aux services that do not appear in the manifest\n-    List\u003cString\u003e servicesToRemove \u003d new ArrayList\u003c\u003e();\n-    for (String sName : serviceMap.keySet()) {\n-      if (!loadedAuxServices.contains(sName)) {\n-        foundChanges \u003d true;\n-        servicesToRemove.add(sName);\n-      }\n-    }\n+    Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n+    servicesToRemove.removeAll(loadedAuxServices);\n     for (String sName : servicesToRemove) {\n-      LOG.info(\"Removing aux service \" + sName);\n+      foundChanges \u003d true;\n       maybeRemoveAuxService(sName);\n     }\n \n     if (!foundChanges) {\n       LOG.info(\"No auxiliary services changes detected in manifest\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void loadManifest(Configuration conf, boolean\n      startServices) throws IOException {\n    if (manifest \u003d\u003d null) {\n      return;\n    }\n    if (!manifestFS.exists(manifest)) {\n      if (serviceMap.isEmpty()) {\n        return;\n      }\n      LOG.info(\"Manifest file \" + manifest + \" doesn\u0027t exist, stopping \" +\n          \"auxiliary services\");\n      Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n      for (String sName : servicesToRemove) {\n        maybeRemoveAuxService(sName);\n      }\n      return;\n    }\n    AuxServiceRecords services \u003d maybeReadManifestFile();\n    if (services \u003d\u003d null) {\n      // read did not occur or no changes detected\n      return;\n    }\n    Set\u003cString\u003e loadedAuxServices \u003d new HashSet\u003c\u003e();\n    boolean foundChanges \u003d false;\n    if (services.getServices() !\u003d null) {\n      for (AuxServiceRecord service : services.getServices()) {\n        AuxServiceRecord existingService \u003d serviceRecordMap.get(service\n            .getName());\n        loadedAuxServices.add(service.getName());\n        if (existingService !\u003d null \u0026\u0026 existingService.equals(service)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auxiliary service already loaded: \" + service.getName());\n          }\n          continue;\n        }\n        foundChanges \u003d true;\n        try {\n          // stop aux service\n          maybeRemoveAuxService(service.getName());\n          // init aux service\n          AuxiliaryService s \u003d initAuxService(service, conf, false);\n          if (startServices) {\n            // start aux service\n            startAuxService(service.getName(), s, service);\n          }\n          // add aux service to serviceMap\n          addService(service.getName(), s, service);\n        } catch (IOException e) {\n          LOG.error(\"Failed to load auxiliary service \" + service.getName());\n        }\n      }\n    }\n\n    // remove aux services that do not appear in the manifest\n    Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n    servicesToRemove.removeAll(loadedAuxServices);\n    for (String sName : servicesToRemove) {\n      foundChanges \u003d true;\n      maybeRemoveAuxService(sName);\n    }\n\n    if (!foundChanges) {\n      LOG.info(\"No auxiliary services changes detected in manifest\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "c7a5a4435ec3098c2765e8ef53b7771e0532ff61": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9075.  Add ability to register/remove auxiliary service without restart node manager.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "18/12/18 2:05 PM",
      "commitName": "c7a5a4435ec3098c2765e8ef53b7771e0532ff61",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,55 @@\n+  private synchronized void loadManifest(Configuration conf, boolean\n+      startServices) throws IOException {\n+    AuxServiceRecords services \u003d maybeReadManifestFile();\n+    if (services \u003d\u003d null) {\n+      // read did not occur or no changes detected\n+      return;\n+    }\n+    Set\u003cString\u003e loadedAuxServices \u003d new HashSet\u003c\u003e();\n+    boolean foundChanges \u003d false;\n+    if (services.getServices() !\u003d null) {\n+      for (AuxServiceRecord service : services.getServices()) {\n+        AuxServiceRecord existingService \u003d serviceRecordMap.get(service\n+            .getName());\n+        loadedAuxServices.add(service.getName());\n+        if (existingService !\u003d null \u0026\u0026 existingService.equals(service)) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Auxiliary service already loaded: \" + service.getName());\n+          }\n+          continue;\n+        }\n+        foundChanges \u003d true;\n+        try {\n+          // stop aux service\n+          maybeRemoveAuxService(service.getName());\n+          // init aux service\n+          AuxiliaryService s \u003d initAuxService(service, conf, false);\n+          if (startServices) {\n+            // start aux service\n+            startAuxService(service.getName(), s, service);\n+          }\n+          // add aux service to serviceMap\n+          addService(service.getName(), s, service);\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to load auxiliary service \" + service.getName());\n+        }\n+      }\n+    }\n+\n+    // remove aux services that do not appear in the manifest\n+    List\u003cString\u003e servicesToRemove \u003d new ArrayList\u003c\u003e();\n+    for (String sName : serviceMap.keySet()) {\n+      if (!loadedAuxServices.contains(sName)) {\n+        foundChanges \u003d true;\n+        servicesToRemove.add(sName);\n+      }\n+    }\n+    for (String sName : servicesToRemove) {\n+      LOG.info(\"Removing aux service \" + sName);\n+      maybeRemoveAuxService(sName);\n+    }\n+\n+    if (!foundChanges) {\n+      LOG.info(\"No auxiliary services changes detected in manifest\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void loadManifest(Configuration conf, boolean\n      startServices) throws IOException {\n    AuxServiceRecords services \u003d maybeReadManifestFile();\n    if (services \u003d\u003d null) {\n      // read did not occur or no changes detected\n      return;\n    }\n    Set\u003cString\u003e loadedAuxServices \u003d new HashSet\u003c\u003e();\n    boolean foundChanges \u003d false;\n    if (services.getServices() !\u003d null) {\n      for (AuxServiceRecord service : services.getServices()) {\n        AuxServiceRecord existingService \u003d serviceRecordMap.get(service\n            .getName());\n        loadedAuxServices.add(service.getName());\n        if (existingService !\u003d null \u0026\u0026 existingService.equals(service)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auxiliary service already loaded: \" + service.getName());\n          }\n          continue;\n        }\n        foundChanges \u003d true;\n        try {\n          // stop aux service\n          maybeRemoveAuxService(service.getName());\n          // init aux service\n          AuxiliaryService s \u003d initAuxService(service, conf, false);\n          if (startServices) {\n            // start aux service\n            startAuxService(service.getName(), s, service);\n          }\n          // add aux service to serviceMap\n          addService(service.getName(), s, service);\n        } catch (IOException e) {\n          LOG.error(\"Failed to load auxiliary service \" + service.getName());\n        }\n      }\n    }\n\n    // remove aux services that do not appear in the manifest\n    List\u003cString\u003e servicesToRemove \u003d new ArrayList\u003c\u003e();\n    for (String sName : serviceMap.keySet()) {\n      if (!loadedAuxServices.contains(sName)) {\n        foundChanges \u003d true;\n        servicesToRemove.add(sName);\n      }\n    }\n    for (String sName : servicesToRemove) {\n      LOG.info(\"Removing aux service \" + sName);\n      maybeRemoveAuxService(sName);\n    }\n\n    if (!foundChanges) {\n      LOG.info(\"No auxiliary services changes detected in manifest\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java"
    }
  }
}