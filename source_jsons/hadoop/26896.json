{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CosNFileSystem.java",
  "functionName": "initialize",
  "functionId": "initialize___name-URI__conf-Configuration",
  "sourceFilePath": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNFileSystem.java",
  "functionStartLine": 95,
  "functionEndLine": 140,
  "numCommitsSeen": 1,
  "timeTaken": 358,
  "changeHistory": [
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2"
  ],
  "changeHistoryShort": {
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15616. Incorporate Tencent Cloud COS File System Implementation. Contributed by Yang Yu.\n",
      "commitDate": "27/09/19 1:53 AM",
      "commitName": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
      "commitAuthor": "Sammi Chen",
      "diff": "@@ -0,0 +1,46 @@\n+  public void initialize(URI name, Configuration conf) throws IOException {\n+    super.initialize(name, conf);\n+    this.bucket \u003d name.getHost();\n+    if (this.store \u003d\u003d null) {\n+      this.store \u003d createDefaultStore(conf);\n+    }\n+    this.store.initialize(name, conf);\n+    setConf(conf);\n+    this.uri \u003d URI.create(name.getScheme() + \"://\" + name.getAuthority());\n+    this.workingDir \u003d new Path(\"/user\",\n+        System.getProperty(\"user.name\")).makeQualified(\n+        this.uri,\n+        this.getWorkingDirectory());\n+    this.owner \u003d getOwnerId();\n+    this.group \u003d getGroupId();\n+    LOG.debug(\"owner:\" + owner + \", group:\" + group);\n+\n+    BufferPool.getInstance().initialize(this.getConf());\n+\n+    // initialize the thread pool\n+    int uploadThreadPoolSize \u003d this.getConf().getInt(\n+        CosNConfigKeys.UPLOAD_THREAD_POOL_SIZE_KEY,\n+        CosNConfigKeys.DEFAULT_UPLOAD_THREAD_POOL_SIZE\n+    );\n+    int readAheadPoolSize \u003d this.getConf().getInt(\n+        CosNConfigKeys.READ_AHEAD_QUEUE_SIZE,\n+        CosNConfigKeys.DEFAULT_READ_AHEAD_QUEUE_SIZE\n+    );\n+    int ioThreadPoolSize \u003d uploadThreadPoolSize + readAheadPoolSize / 3;\n+    long threadKeepAlive \u003d this.getConf().getLong(\n+        CosNConfigKeys.THREAD_KEEP_ALIVE_TIME_KEY,\n+        CosNConfigKeys.DEFAULT_THREAD_KEEP_ALIVE_TIME\n+    );\n+    this.boundedIOThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n+        ioThreadPoolSize / 2, ioThreadPoolSize,\n+        threadKeepAlive, TimeUnit.SECONDS,\n+        \"cos-transfer-thread-pool\");\n+    int copyThreadPoolSize \u003d this.getConf().getInt(\n+        CosNConfigKeys.COPY_THREAD_POOL_SIZE_KEY,\n+        CosNConfigKeys.DEFAULT_COPY_THREAD_POOL_SIZE\n+    );\n+    this.boundedCopyThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n+        CosNConfigKeys.DEFAULT_COPY_THREAD_POOL_SIZE, copyThreadPoolSize,\n+        60L, TimeUnit.SECONDS,\n+        \"cos-copy-thread-pool\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI name, Configuration conf) throws IOException {\n    super.initialize(name, conf);\n    this.bucket \u003d name.getHost();\n    if (this.store \u003d\u003d null) {\n      this.store \u003d createDefaultStore(conf);\n    }\n    this.store.initialize(name, conf);\n    setConf(conf);\n    this.uri \u003d URI.create(name.getScheme() + \"://\" + name.getAuthority());\n    this.workingDir \u003d new Path(\"/user\",\n        System.getProperty(\"user.name\")).makeQualified(\n        this.uri,\n        this.getWorkingDirectory());\n    this.owner \u003d getOwnerId();\n    this.group \u003d getGroupId();\n    LOG.debug(\"owner:\" + owner + \", group:\" + group);\n\n    BufferPool.getInstance().initialize(this.getConf());\n\n    // initialize the thread pool\n    int uploadThreadPoolSize \u003d this.getConf().getInt(\n        CosNConfigKeys.UPLOAD_THREAD_POOL_SIZE_KEY,\n        CosNConfigKeys.DEFAULT_UPLOAD_THREAD_POOL_SIZE\n    );\n    int readAheadPoolSize \u003d this.getConf().getInt(\n        CosNConfigKeys.READ_AHEAD_QUEUE_SIZE,\n        CosNConfigKeys.DEFAULT_READ_AHEAD_QUEUE_SIZE\n    );\n    int ioThreadPoolSize \u003d uploadThreadPoolSize + readAheadPoolSize / 3;\n    long threadKeepAlive \u003d this.getConf().getLong(\n        CosNConfigKeys.THREAD_KEEP_ALIVE_TIME_KEY,\n        CosNConfigKeys.DEFAULT_THREAD_KEEP_ALIVE_TIME\n    );\n    this.boundedIOThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n        ioThreadPoolSize / 2, ioThreadPoolSize,\n        threadKeepAlive, TimeUnit.SECONDS,\n        \"cos-transfer-thread-pool\");\n    int copyThreadPoolSize \u003d this.getConf().getInt(\n        CosNConfigKeys.COPY_THREAD_POOL_SIZE_KEY,\n        CosNConfigKeys.DEFAULT_COPY_THREAD_POOL_SIZE\n    );\n    this.boundedCopyThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n        CosNConfigKeys.DEFAULT_COPY_THREAD_POOL_SIZE, copyThreadPoolSize,\n        60L, TimeUnit.SECONDS,\n        \"cos-copy-thread-pool\");\n  }",
      "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNFileSystem.java"
    }
  }
}