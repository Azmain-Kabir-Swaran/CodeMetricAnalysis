{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RetryInvocationHandler.java",
  "functionName": "newRetryInfo",
  "functionId": "newRetryInfo___policy-RetryPolicy__e-Exception__counters-Counters__idempotentOrAtMostOnce-boolean__expectedFailoverCount-long",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
  "functionStartLine": 268,
  "functionEndLine": 297,
  "numCommitsSeen": 72,
  "timeTaken": 1950,
  "changeHistory": [
    "55796a0946f80a35055701a34379e374399009c5",
    "d328e667067743f723e332d92154da8e84e65742",
    "a9a8297cad4122961b34265c0a31d87134a4a028"
  ],
  "changeHistoryShort": {
    "55796a0946f80a35055701a34379e374399009c5": "Ybodychange",
    "d328e667067743f723e332d92154da8e84e65742": "Ymultichange(Yparameterchange,Ybodychange)",
    "a9a8297cad4122961b34265c0a31d87134a4a028": "Yintroduced"
  },
  "changeHistoryDetails": {
    "55796a0946f80a35055701a34379e374399009c5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11395. RequestHedgingProxyProvider#RequestHedgingInvocationHandler hides the Exception thrown from NameNode. Contributed by Nandakumar.\n",
      "commitDate": "13/03/17 2:24 PM",
      "commitName": "55796a0946f80a35055701a34379e374399009c5",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "08/02/17 2:11 AM",
      "commitNameOld": "eec52e158b7bc14b2d3d53512323ba05e15e09e3",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 33.47,
      "commitsBetweenForRepo": 200,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,30 @@\n     static RetryInfo newRetryInfo(RetryPolicy policy, Exception e,\n         Counters counters, boolean idempotentOrAtMostOnce,\n         long expectedFailoverCount) throws Exception {\n       RetryAction max \u003d null;\n       long maxRetryDelay \u003d 0;\n+      Exception ex \u003d null;\n \n       final Iterable\u003cException\u003e exceptions \u003d e instanceof MultiException ?\n           ((MultiException) e).getExceptions().values()\n           : Collections.singletonList(e);\n       for (Exception exception : exceptions) {\n         final RetryAction a \u003d policy.shouldRetry(exception,\n             counters.retries, counters.failovers, idempotentOrAtMostOnce);\n         if (a.action !\u003d RetryAction.RetryDecision.FAIL) {\n           // must be a retry or failover\n           if (a.delayMillis \u003e maxRetryDelay) {\n             maxRetryDelay \u003d a.delayMillis;\n           }\n         }\n \n         if (max \u003d\u003d null || max.action.compareTo(a.action) \u003c 0) {\n           max \u003d a;\n+          if (a.action \u003d\u003d RetryAction.RetryDecision.FAIL) {\n+            ex \u003d exception;\n+          }\n         }\n       }\n \n-      return new RetryInfo(maxRetryDelay, max, expectedFailoverCount);\n+      return new RetryInfo(maxRetryDelay, max, expectedFailoverCount, ex);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static RetryInfo newRetryInfo(RetryPolicy policy, Exception e,\n        Counters counters, boolean idempotentOrAtMostOnce,\n        long expectedFailoverCount) throws Exception {\n      RetryAction max \u003d null;\n      long maxRetryDelay \u003d 0;\n      Exception ex \u003d null;\n\n      final Iterable\u003cException\u003e exceptions \u003d e instanceof MultiException ?\n          ((MultiException) e).getExceptions().values()\n          : Collections.singletonList(e);\n      for (Exception exception : exceptions) {\n        final RetryAction a \u003d policy.shouldRetry(exception,\n            counters.retries, counters.failovers, idempotentOrAtMostOnce);\n        if (a.action !\u003d RetryAction.RetryDecision.FAIL) {\n          // must be a retry or failover\n          if (a.delayMillis \u003e maxRetryDelay) {\n            maxRetryDelay \u003d a.delayMillis;\n          }\n        }\n\n        if (max \u003d\u003d null || max.action.compareTo(a.action) \u003c 0) {\n          max \u003d a;\n          if (a.action \u003d\u003d RetryAction.RetryDecision.FAIL) {\n            ex \u003d exception;\n          }\n        }\n      }\n\n      return new RetryInfo(maxRetryDelay, max, expectedFailoverCount, ex);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
      "extendedDetails": {}
    },
    "d328e667067743f723e332d92154da8e84e65742": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-13227. AsyncCallHandler should use an event driven architecture to handle async calls.\n",
      "commitDate": "25/06/16 12:45 AM",
      "commitName": "d328e667067743f723e332d92154da8e84e65742",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13227. AsyncCallHandler should use an event driven architecture to handle async calls.\n",
          "commitDate": "25/06/16 12:45 AM",
          "commitName": "d328e667067743f723e332d92154da8e84e65742",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "10/06/16 10:38 AM",
          "commitNameOld": "0bbb4ddd793063c87927035969884a34f60f2076",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 14.59,
          "commitsBetweenForRepo": 130,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,26 @@\n     static RetryInfo newRetryInfo(RetryPolicy policy, Exception e,\n-        Counters counters, boolean idempotentOrAtMostOnce) throws Exception {\n+        Counters counters, boolean idempotentOrAtMostOnce,\n+        long expectedFailoverCount) throws Exception {\n+      RetryAction max \u003d null;\n       long maxRetryDelay \u003d 0;\n-      RetryAction failover \u003d null;\n-      RetryAction retry \u003d null;\n-      RetryAction fail \u003d null;\n \n       final Iterable\u003cException\u003e exceptions \u003d e instanceof MultiException ?\n           ((MultiException) e).getExceptions().values()\n           : Collections.singletonList(e);\n       for (Exception exception : exceptions) {\n         final RetryAction a \u003d policy.shouldRetry(exception,\n             counters.retries, counters.failovers, idempotentOrAtMostOnce);\n-        if (a.action \u003d\u003d RetryAction.RetryDecision.FAIL) {\n-          fail \u003d a;\n-        } else {\n+        if (a.action !\u003d RetryAction.RetryDecision.FAIL) {\n           // must be a retry or failover\n-          if (a.action \u003d\u003d RetryAction.RetryDecision.FAILOVER_AND_RETRY) {\n-            failover \u003d a;\n-          } else {\n-            retry \u003d a;\n-          }\n           if (a.delayMillis \u003e maxRetryDelay) {\n             maxRetryDelay \u003d a.delayMillis;\n           }\n         }\n+\n+        if (max \u003d\u003d null || max.action.compareTo(a.action) \u003c 0) {\n+          max \u003d a;\n+        }\n       }\n \n-      return new RetryInfo(maxRetryDelay, failover,\n-          failover \u003d\u003d null \u0026\u0026 retry \u003d\u003d null? fail: null);\n+      return new RetryInfo(maxRetryDelay, max, expectedFailoverCount);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    static RetryInfo newRetryInfo(RetryPolicy policy, Exception e,\n        Counters counters, boolean idempotentOrAtMostOnce,\n        long expectedFailoverCount) throws Exception {\n      RetryAction max \u003d null;\n      long maxRetryDelay \u003d 0;\n\n      final Iterable\u003cException\u003e exceptions \u003d e instanceof MultiException ?\n          ((MultiException) e).getExceptions().values()\n          : Collections.singletonList(e);\n      for (Exception exception : exceptions) {\n        final RetryAction a \u003d policy.shouldRetry(exception,\n            counters.retries, counters.failovers, idempotentOrAtMostOnce);\n        if (a.action !\u003d RetryAction.RetryDecision.FAIL) {\n          // must be a retry or failover\n          if (a.delayMillis \u003e maxRetryDelay) {\n            maxRetryDelay \u003d a.delayMillis;\n          }\n        }\n\n        if (max \u003d\u003d null || max.action.compareTo(a.action) \u003c 0) {\n          max \u003d a;\n        }\n      }\n\n      return new RetryInfo(maxRetryDelay, max, expectedFailoverCount);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
          "extendedDetails": {
            "oldValue": "[policy-RetryPolicy, e-Exception, counters-Counters, idempotentOrAtMostOnce-boolean]",
            "newValue": "[policy-RetryPolicy, e-Exception, counters-Counters, idempotentOrAtMostOnce-boolean, expectedFailoverCount-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13227. AsyncCallHandler should use an event driven architecture to handle async calls.\n",
          "commitDate": "25/06/16 12:45 AM",
          "commitName": "d328e667067743f723e332d92154da8e84e65742",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "10/06/16 10:38 AM",
          "commitNameOld": "0bbb4ddd793063c87927035969884a34f60f2076",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 14.59,
          "commitsBetweenForRepo": 130,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,26 @@\n     static RetryInfo newRetryInfo(RetryPolicy policy, Exception e,\n-        Counters counters, boolean idempotentOrAtMostOnce) throws Exception {\n+        Counters counters, boolean idempotentOrAtMostOnce,\n+        long expectedFailoverCount) throws Exception {\n+      RetryAction max \u003d null;\n       long maxRetryDelay \u003d 0;\n-      RetryAction failover \u003d null;\n-      RetryAction retry \u003d null;\n-      RetryAction fail \u003d null;\n \n       final Iterable\u003cException\u003e exceptions \u003d e instanceof MultiException ?\n           ((MultiException) e).getExceptions().values()\n           : Collections.singletonList(e);\n       for (Exception exception : exceptions) {\n         final RetryAction a \u003d policy.shouldRetry(exception,\n             counters.retries, counters.failovers, idempotentOrAtMostOnce);\n-        if (a.action \u003d\u003d RetryAction.RetryDecision.FAIL) {\n-          fail \u003d a;\n-        } else {\n+        if (a.action !\u003d RetryAction.RetryDecision.FAIL) {\n           // must be a retry or failover\n-          if (a.action \u003d\u003d RetryAction.RetryDecision.FAILOVER_AND_RETRY) {\n-            failover \u003d a;\n-          } else {\n-            retry \u003d a;\n-          }\n           if (a.delayMillis \u003e maxRetryDelay) {\n             maxRetryDelay \u003d a.delayMillis;\n           }\n         }\n+\n+        if (max \u003d\u003d null || max.action.compareTo(a.action) \u003c 0) {\n+          max \u003d a;\n+        }\n       }\n \n-      return new RetryInfo(maxRetryDelay, failover,\n-          failover \u003d\u003d null \u0026\u0026 retry \u003d\u003d null? fail: null);\n+      return new RetryInfo(maxRetryDelay, max, expectedFailoverCount);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    static RetryInfo newRetryInfo(RetryPolicy policy, Exception e,\n        Counters counters, boolean idempotentOrAtMostOnce,\n        long expectedFailoverCount) throws Exception {\n      RetryAction max \u003d null;\n      long maxRetryDelay \u003d 0;\n\n      final Iterable\u003cException\u003e exceptions \u003d e instanceof MultiException ?\n          ((MultiException) e).getExceptions().values()\n          : Collections.singletonList(e);\n      for (Exception exception : exceptions) {\n        final RetryAction a \u003d policy.shouldRetry(exception,\n            counters.retries, counters.failovers, idempotentOrAtMostOnce);\n        if (a.action !\u003d RetryAction.RetryDecision.FAIL) {\n          // must be a retry or failover\n          if (a.delayMillis \u003e maxRetryDelay) {\n            maxRetryDelay \u003d a.delayMillis;\n          }\n        }\n\n        if (max \u003d\u003d null || max.action.compareTo(a.action) \u003c 0) {\n          max \u003d a;\n        }\n      }\n\n      return new RetryInfo(maxRetryDelay, max, expectedFailoverCount);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "a9a8297cad4122961b34265c0a31d87134a4a028": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13146. Refactor RetryInvocationHandler. Contributed by Tsz Wo Nicholas Sze.\n",
      "commitDate": "16/05/16 3:23 PM",
      "commitName": "a9a8297cad4122961b34265c0a31d87134a4a028",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,31 @@\n+    static RetryInfo newRetryInfo(RetryPolicy policy, Exception e,\n+        Counters counters, boolean idempotentOrAtMostOnce) throws Exception {\n+      long maxRetryDelay \u003d 0;\n+      RetryAction failover \u003d null;\n+      RetryAction retry \u003d null;\n+      RetryAction fail \u003d null;\n+\n+      final Iterable\u003cException\u003e exceptions \u003d e instanceof MultiException ?\n+          ((MultiException) e).getExceptions().values()\n+          : Collections.singletonList(e);\n+      for (Exception exception : exceptions) {\n+        final RetryAction a \u003d policy.shouldRetry(exception,\n+            counters.retries, counters.failovers, idempotentOrAtMostOnce);\n+        if (a.action \u003d\u003d RetryAction.RetryDecision.FAIL) {\n+          fail \u003d a;\n+        } else {\n+          // must be a retry or failover\n+          if (a.action \u003d\u003d RetryAction.RetryDecision.FAILOVER_AND_RETRY) {\n+            failover \u003d a;\n+          } else {\n+            retry \u003d a;\n+          }\n+          if (a.delayMillis \u003e maxRetryDelay) {\n+            maxRetryDelay \u003d a.delayMillis;\n+          }\n+        }\n+      }\n+\n+      return new RetryInfo(maxRetryDelay, failover,\n+          failover \u003d\u003d null \u0026\u0026 retry \u003d\u003d null? fail: null);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    static RetryInfo newRetryInfo(RetryPolicy policy, Exception e,\n        Counters counters, boolean idempotentOrAtMostOnce) throws Exception {\n      long maxRetryDelay \u003d 0;\n      RetryAction failover \u003d null;\n      RetryAction retry \u003d null;\n      RetryAction fail \u003d null;\n\n      final Iterable\u003cException\u003e exceptions \u003d e instanceof MultiException ?\n          ((MultiException) e).getExceptions().values()\n          : Collections.singletonList(e);\n      for (Exception exception : exceptions) {\n        final RetryAction a \u003d policy.shouldRetry(exception,\n            counters.retries, counters.failovers, idempotentOrAtMostOnce);\n        if (a.action \u003d\u003d RetryAction.RetryDecision.FAIL) {\n          fail \u003d a;\n        } else {\n          // must be a retry or failover\n          if (a.action \u003d\u003d RetryAction.RetryDecision.FAILOVER_AND_RETRY) {\n            failover \u003d a;\n          } else {\n            retry \u003d a;\n          }\n          if (a.delayMillis \u003e maxRetryDelay) {\n            maxRetryDelay \u003d a.delayMillis;\n          }\n        }\n      }\n\n      return new RetryInfo(maxRetryDelay, failover,\n          failover \u003d\u003d null \u0026\u0026 retry \u003d\u003d null? fail: null);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java"
    }
  }
}