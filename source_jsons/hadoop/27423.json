{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineReaderServer.java",
  "functionName": "startTimelineReaderWebApp",
  "functionId": "startTimelineReaderWebApp",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderServer.java",
  "functionStartLine": 181,
  "functionEndLine": 223,
  "numCommitsSeen": 20,
  "timeTaken": 1777,
  "changeHistory": [
    "8d1981806feb8278966c02a9eff42d72541bb35e",
    "7450583721757b8af2945ebd9be1a9efed11444c",
    "c0aeb666a4d43aac196569d9ec6768d62139d2b9",
    "d3f11e3f13ed5efc7f0b7f19567d142e554c35ed",
    "229c7c9f8922f2b1bfd04b09b834e00d359046ff",
    "5877f20f9c3f6f0afa505715e9a2ee312475af17",
    "e27642abf4deb12c6e8c47ffc891b41300494307"
  ],
  "changeHistoryShort": {
    "8d1981806feb8278966c02a9eff42d72541bb35e": "Ybodychange",
    "7450583721757b8af2945ebd9be1a9efed11444c": "Ybodychange",
    "c0aeb666a4d43aac196569d9ec6768d62139d2b9": "Ybodychange",
    "d3f11e3f13ed5efc7f0b7f19567d142e554c35ed": "Ybodychange",
    "229c7c9f8922f2b1bfd04b09b834e00d359046ff": "Ybodychange",
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": "Ybodychange",
    "e27642abf4deb12c6e8c47ffc891b41300494307": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8d1981806feb8278966c02a9eff42d72541bb35e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5742 Serve aggregated logs of historical apps from timeline service. Contributed by Rohith Sharma KS\n",
      "commitDate": "11/10/18 4:26 PM",
      "commitName": "8d1981806feb8278966c02a9eff42d72541bb35e",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "07/05/18 11:58 PM",
      "commitNameOld": "7450583721757b8af2945ebd9be1a9efed11444c",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 156.69,
      "commitsBetweenForRepo": 1276,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   private void startTimelineReaderWebApp() {\n     Configuration conf \u003d getConfig();\n     addFilters(conf);\n \n     String hostProperty \u003d YarnConfiguration.TIMELINE_SERVICE_READER_BIND_HOST;\n     String host \u003d conf.getTrimmed(hostProperty);\n     if (host \u003d\u003d null || host.isEmpty()) {\n       // if reader bind-host is not set, fall back to timeline-service.bind-host\n       // to maintain compatibility\n       hostProperty \u003d YarnConfiguration.TIMELINE_SERVICE_BIND_HOST;\n     }\n     String bindAddress \u003d WebAppUtils\n         .getWebAppBindURL(conf, hostProperty, webAppURLWithoutScheme);\n \n     LOG.info(\"Instantiating TimelineReaderWebApp at \" + bindAddress);\n     try {\n \n       String httpScheme \u003d WebAppUtils.getHttpSchemePrefix(conf);\n \n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n             .setName(\"timeline\")\n             .setConf(conf)\n             .addEndpoint(URI.create(httpScheme + bindAddress));\n \n       if (httpScheme.equals(WebAppUtils.HTTPS_PREFIX)) {\n         WebAppUtils.loadSslConfiguration(builder, conf);\n       }\n       readerWebServer \u003d builder.build();\n       readerWebServer.addJerseyResourcePackage(\n           TimelineReaderWebServices.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n-              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n+              + YarnJacksonJaxbJsonProvider.class.getPackage().getName()+ \";\"\n+              + LogWebService.class.getPackage().getName(),\n           \"/*\");\n       readerWebServer.setAttribute(TIMELINE_READER_MANAGER_ATTR,\n           timelineReaderManager);\n       readerWebServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"TimelineReaderWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startTimelineReaderWebApp() {\n    Configuration conf \u003d getConfig();\n    addFilters(conf);\n\n    String hostProperty \u003d YarnConfiguration.TIMELINE_SERVICE_READER_BIND_HOST;\n    String host \u003d conf.getTrimmed(hostProperty);\n    if (host \u003d\u003d null || host.isEmpty()) {\n      // if reader bind-host is not set, fall back to timeline-service.bind-host\n      // to maintain compatibility\n      hostProperty \u003d YarnConfiguration.TIMELINE_SERVICE_BIND_HOST;\n    }\n    String bindAddress \u003d WebAppUtils\n        .getWebAppBindURL(conf, hostProperty, webAppURLWithoutScheme);\n\n    LOG.info(\"Instantiating TimelineReaderWebApp at \" + bindAddress);\n    try {\n\n      String httpScheme \u003d WebAppUtils.getHttpSchemePrefix(conf);\n\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n            .setName(\"timeline\")\n            .setConf(conf)\n            .addEndpoint(URI.create(httpScheme + bindAddress));\n\n      if (httpScheme.equals(WebAppUtils.HTTPS_PREFIX)) {\n        WebAppUtils.loadSslConfiguration(builder, conf);\n      }\n      readerWebServer \u003d builder.build();\n      readerWebServer.addJerseyResourcePackage(\n          TimelineReaderWebServices.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName()+ \";\"\n              + LogWebService.class.getPackage().getName(),\n          \"/*\");\n      readerWebServer.setAttribute(TIMELINE_READER_MANAGER_ATTR,\n          timelineReaderManager);\n      readerWebServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"TimelineReaderWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderServer.java",
      "extendedDetails": {}
    },
    "7450583721757b8af2945ebd9be1a9efed11444c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8253. HTTPS Ats v2 api call fails with \u0027bad HTTP parsed\u0027. Contributed by Charan Hebri.\n",
      "commitDate": "07/05/18 11:58 PM",
      "commitName": "7450583721757b8af2945ebd9be1a9efed11444c",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "04/04/18 3:08 PM",
      "commitNameOld": "345e7624d58a058a1bad666bd1e5ce4b346a9056",
      "commitAuthorOld": "Vrushali C",
      "daysBetweenCommits": 33.37,
      "commitsBetweenForRepo": 726,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,42 @@\n   private void startTimelineReaderWebApp() {\n     Configuration conf \u003d getConfig();\n     addFilters(conf);\n \n     String hostProperty \u003d YarnConfiguration.TIMELINE_SERVICE_READER_BIND_HOST;\n     String host \u003d conf.getTrimmed(hostProperty);\n     if (host \u003d\u003d null || host.isEmpty()) {\n       // if reader bind-host is not set, fall back to timeline-service.bind-host\n       // to maintain compatibility\n       hostProperty \u003d YarnConfiguration.TIMELINE_SERVICE_BIND_HOST;\n     }\n     String bindAddress \u003d WebAppUtils\n         .getWebAppBindURL(conf, hostProperty, webAppURLWithoutScheme);\n \n     LOG.info(\"Instantiating TimelineReaderWebApp at \" + bindAddress);\n     try {\n+\n+      String httpScheme \u003d WebAppUtils.getHttpSchemePrefix(conf);\n+\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n             .setName(\"timeline\")\n             .setConf(conf)\n-            .addEndpoint(URI.create(\"http://\" + bindAddress));\n+            .addEndpoint(URI.create(httpScheme + bindAddress));\n+\n+      if (httpScheme.equals(WebAppUtils.HTTPS_PREFIX)) {\n+        WebAppUtils.loadSslConfiguration(builder, conf);\n+      }\n       readerWebServer \u003d builder.build();\n       readerWebServer.addJerseyResourcePackage(\n           TimelineReaderWebServices.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n       readerWebServer.setAttribute(TIMELINE_READER_MANAGER_ATTR,\n           timelineReaderManager);\n       readerWebServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"TimelineReaderWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startTimelineReaderWebApp() {\n    Configuration conf \u003d getConfig();\n    addFilters(conf);\n\n    String hostProperty \u003d YarnConfiguration.TIMELINE_SERVICE_READER_BIND_HOST;\n    String host \u003d conf.getTrimmed(hostProperty);\n    if (host \u003d\u003d null || host.isEmpty()) {\n      // if reader bind-host is not set, fall back to timeline-service.bind-host\n      // to maintain compatibility\n      hostProperty \u003d YarnConfiguration.TIMELINE_SERVICE_BIND_HOST;\n    }\n    String bindAddress \u003d WebAppUtils\n        .getWebAppBindURL(conf, hostProperty, webAppURLWithoutScheme);\n\n    LOG.info(\"Instantiating TimelineReaderWebApp at \" + bindAddress);\n    try {\n\n      String httpScheme \u003d WebAppUtils.getHttpSchemePrefix(conf);\n\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n            .setName(\"timeline\")\n            .setConf(conf)\n            .addEndpoint(URI.create(httpScheme + bindAddress));\n\n      if (httpScheme.equals(WebAppUtils.HTTPS_PREFIX)) {\n        WebAppUtils.loadSslConfiguration(builder, conf);\n      }\n      readerWebServer \u003d builder.build();\n      readerWebServer.addJerseyResourcePackage(\n          TimelineReaderWebServices.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      readerWebServer.setAttribute(TIMELINE_READER_MANAGER_ATTR,\n          timelineReaderManager);\n      readerWebServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"TimelineReaderWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderServer.java",
      "extendedDetails": {}
    },
    "c0aeb666a4d43aac196569d9ec6768d62139d2b9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7662. [ATSv2] Define new set of configurations for reader and collectors to bind (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "19/12/17 8:59 AM",
      "commitName": "c0aeb666a4d43aac196569d9ec6768d62139d2b9",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "d5ff965fee41fed28d3b94e11e546c1eb4c78a35",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 111.46,
      "commitsBetweenForRepo": 937,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,35 @@\n   private void startTimelineReaderWebApp() {\n     Configuration conf \u003d getConfig();\n     addFilters(conf);\n-    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n-        YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n-        WebAppUtils.getTimelineReaderWebAppURL(conf));\n+\n+    String hostProperty \u003d YarnConfiguration.TIMELINE_SERVICE_READER_BIND_HOST;\n+    String host \u003d conf.getTrimmed(hostProperty);\n+    if (host \u003d\u003d null || host.isEmpty()) {\n+      // if reader bind-host is not set, fall back to timeline-service.bind-host\n+      // to maintain compatibility\n+      hostProperty \u003d YarnConfiguration.TIMELINE_SERVICE_BIND_HOST;\n+    }\n+    String bindAddress \u003d WebAppUtils\n+        .getWebAppBindURL(conf, hostProperty, webAppURLWithoutScheme);\n+\n     LOG.info(\"Instantiating TimelineReaderWebApp at \" + bindAddress);\n     try {\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n             .setName(\"timeline\")\n             .setConf(conf)\n             .addEndpoint(URI.create(\"http://\" + bindAddress));\n       readerWebServer \u003d builder.build();\n       readerWebServer.addJerseyResourcePackage(\n           TimelineReaderWebServices.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n       readerWebServer.setAttribute(TIMELINE_READER_MANAGER_ATTR,\n           timelineReaderManager);\n       readerWebServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"TimelineReaderWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startTimelineReaderWebApp() {\n    Configuration conf \u003d getConfig();\n    addFilters(conf);\n\n    String hostProperty \u003d YarnConfiguration.TIMELINE_SERVICE_READER_BIND_HOST;\n    String host \u003d conf.getTrimmed(hostProperty);\n    if (host \u003d\u003d null || host.isEmpty()) {\n      // if reader bind-host is not set, fall back to timeline-service.bind-host\n      // to maintain compatibility\n      hostProperty \u003d YarnConfiguration.TIMELINE_SERVICE_BIND_HOST;\n    }\n    String bindAddress \u003d WebAppUtils\n        .getWebAppBindURL(conf, hostProperty, webAppURLWithoutScheme);\n\n    LOG.info(\"Instantiating TimelineReaderWebApp at \" + bindAddress);\n    try {\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n            .setName(\"timeline\")\n            .setConf(conf)\n            .addEndpoint(URI.create(\"http://\" + bindAddress));\n      readerWebServer \u003d builder.build();\n      readerWebServer.addJerseyResourcePackage(\n          TimelineReaderWebServices.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      readerWebServer.setAttribute(TIMELINE_READER_MANAGER_ATTR,\n          timelineReaderManager);\n      readerWebServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"TimelineReaderWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderServer.java",
      "extendedDetails": {}
    },
    "d3f11e3f13ed5efc7f0b7f19567d142e554c35ed": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6638. [ATSv2 Security] Timeline reader side changes for loading auth filters and principals. Contributed by Varun Saxena\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "d3f11e3f13ed5efc7f0b7f19567d142e554c35ed",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "8bb26465956a37d7398818bc0919772e12953725",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,27 @@\n   private void startTimelineReaderWebApp() {\n     Configuration conf \u003d getConfig();\n+    addFilters(conf);\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n         YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n         WebAppUtils.getTimelineReaderWebAppURL(conf));\n     LOG.info(\"Instantiating TimelineReaderWebApp at \" + bindAddress);\n-    boolean enableCorsFilter \u003d conf.getBoolean(\n-        YarnConfiguration.TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED,\n-        YarnConfiguration.TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT);\n-    // setup CORS\n-    if (enableCorsFilter) {\n-      conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n-          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n-    }\n     try {\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n             .setName(\"timeline\")\n             .setConf(conf)\n             .addEndpoint(URI.create(\"http://\" + bindAddress));\n       readerWebServer \u003d builder.build();\n-\n-      setupOptions(conf);\n-\n       readerWebServer.addJerseyResourcePackage(\n           TimelineReaderWebServices.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n       readerWebServer.setAttribute(TIMELINE_READER_MANAGER_ATTR,\n           timelineReaderManager);\n       readerWebServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"TimelineReaderWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startTimelineReaderWebApp() {\n    Configuration conf \u003d getConfig();\n    addFilters(conf);\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n        YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        WebAppUtils.getTimelineReaderWebAppURL(conf));\n    LOG.info(\"Instantiating TimelineReaderWebApp at \" + bindAddress);\n    try {\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n            .setName(\"timeline\")\n            .setConf(conf)\n            .addEndpoint(URI.create(\"http://\" + bindAddress));\n      readerWebServer \u003d builder.build();\n      readerWebServer.addJerseyResourcePackage(\n          TimelineReaderWebServices.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      readerWebServer.setAttribute(TIMELINE_READER_MANAGER_ATTR,\n          timelineReaderManager);\n      readerWebServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"TimelineReaderWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderServer.java",
      "extendedDetails": {}
    },
    "229c7c9f8922f2b1bfd04b09b834e00d359046ff": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6069. CORS support in timeline v2 (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "10/03/17 2:39 PM",
      "commitName": "229c7c9f8922f2b1bfd04b09b834e00d359046ff",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "11/02/17 5:51 AM",
      "commitNameOld": "649deb72fbb62568b4ea0d67444df6faaaed169d",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 27.37,
      "commitsBetweenForRepo": 179,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,37 @@\n   private void startTimelineReaderWebApp() {\n     Configuration conf \u003d getConfig();\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n         YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n         WebAppUtils.getTimelineReaderWebAppURL(conf));\n     LOG.info(\"Instantiating TimelineReaderWebApp at \" + bindAddress);\n+    boolean enableCorsFilter \u003d conf.getBoolean(\n+        YarnConfiguration.TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED,\n+        YarnConfiguration.TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT);\n+    // setup CORS\n+    if (enableCorsFilter) {\n+      conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n+          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n+    }\n     try {\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n             .setName(\"timeline\")\n             .setConf(conf)\n             .addEndpoint(URI.create(\"http://\" + bindAddress));\n       readerWebServer \u003d builder.build();\n \n       setupOptions(conf);\n \n       readerWebServer.addJerseyResourcePackage(\n           TimelineReaderWebServices.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n       readerWebServer.setAttribute(TIMELINE_READER_MANAGER_ATTR,\n           timelineReaderManager);\n       readerWebServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"TimelineReaderWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startTimelineReaderWebApp() {\n    Configuration conf \u003d getConfig();\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n        YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        WebAppUtils.getTimelineReaderWebAppURL(conf));\n    LOG.info(\"Instantiating TimelineReaderWebApp at \" + bindAddress);\n    boolean enableCorsFilter \u003d conf.getBoolean(\n        YarnConfiguration.TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED,\n        YarnConfiguration.TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT);\n    // setup CORS\n    if (enableCorsFilter) {\n      conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n    }\n    try {\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n            .setName(\"timeline\")\n            .setConf(conf)\n            .addEndpoint(URI.create(\"http://\" + bindAddress));\n      readerWebServer \u003d builder.build();\n\n      setupOptions(conf);\n\n      readerWebServer.addJerseyResourcePackage(\n          TimelineReaderWebServices.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      readerWebServer.setAttribute(TIMELINE_READER_MANAGER_ATTR,\n          timelineReaderManager);\n      readerWebServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"TimelineReaderWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderServer.java",
      "extendedDetails": {}
    },
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10075. Update jetty dependency to version 9 (rkanter)\n",
      "commitDate": "27/10/16 4:09 PM",
      "commitName": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "0a9b085f052b5ebaf319bec7609c77d7f1684a4a",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 109.31,
      "commitsBetweenForRepo": 787,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,29 @@\n   private void startTimelineReaderWebApp() {\n     Configuration conf \u003d getConfig();\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n         YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n         WebAppUtils.getTimelineReaderWebAppURL(conf));\n     LOG.info(\"Instantiating TimelineReaderWebApp at \" + bindAddress);\n     try {\n       HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n             .setName(\"timeline\")\n             .setConf(conf)\n             .addEndpoint(URI.create(\"http://\" + bindAddress));\n       readerWebServer \u003d builder.build();\n \n-      Map\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n-      String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n-          DEFAULT_HADOOP_HTTP_STATIC_USER);\n-      options.put(HADOOP_HTTP_STATIC_USER, username);\n-      HttpServer2.defineFilter(readerWebServer.getWebAppContext(),\n-          \"static_user_filter_timeline\",\n-          StaticUserWebFilter.StaticUserFilter.class.getName(),\n-          options, new String[] {\"/*\"});\n+      setupOptions(conf);\n \n       readerWebServer.addJerseyResourcePackage(\n           TimelineReaderWebServices.class.getPackage().getName() + \";\"\n               + GenericExceptionHandler.class.getPackage().getName() + \";\"\n               + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n           \"/*\");\n       readerWebServer.setAttribute(TIMELINE_READER_MANAGER_ATTR,\n           timelineReaderManager);\n       readerWebServer.start();\n     } catch (Exception e) {\n       String msg \u003d \"TimelineReaderWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startTimelineReaderWebApp() {\n    Configuration conf \u003d getConfig();\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n        YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        WebAppUtils.getTimelineReaderWebAppURL(conf));\n    LOG.info(\"Instantiating TimelineReaderWebApp at \" + bindAddress);\n    try {\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n            .setName(\"timeline\")\n            .setConf(conf)\n            .addEndpoint(URI.create(\"http://\" + bindAddress));\n      readerWebServer \u003d builder.build();\n\n      setupOptions(conf);\n\n      readerWebServer.addJerseyResourcePackage(\n          TimelineReaderWebServices.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      readerWebServer.setAttribute(TIMELINE_READER_MANAGER_ATTR,\n          timelineReaderManager);\n      readerWebServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"TimelineReaderWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderServer.java",
      "extendedDetails": {}
    },
    "e27642abf4deb12c6e8c47ffc891b41300494307": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3047. [Data Serving] Set up ATS reader with basic request serving structure and lifecycle (Varun Saxena via sjlee)\n\n(cherry picked from commit 4c5f88fb0f04b7919738d07598b0f006a9ff91f2)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "e27642abf4deb12c6e8c47ffc891b41300494307",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,36 @@\n+  private void startTimelineReaderWebApp() {\n+    Configuration conf \u003d getConfig();\n+    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n+        YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n+        WebAppUtils.getTimelineReaderWebAppURL(conf));\n+    LOG.info(\"Instantiating TimelineReaderWebApp at \" + bindAddress);\n+    try {\n+      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n+            .setName(\"timeline\")\n+            .setConf(conf)\n+            .addEndpoint(URI.create(\"http://\" + bindAddress));\n+      readerWebServer \u003d builder.build();\n+\n+      Map\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n+      String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n+          DEFAULT_HADOOP_HTTP_STATIC_USER);\n+      options.put(HADOOP_HTTP_STATIC_USER, username);\n+      HttpServer2.defineFilter(readerWebServer.getWebAppContext(),\n+          \"static_user_filter_timeline\",\n+          StaticUserWebFilter.StaticUserFilter.class.getName(),\n+          options, new String[] {\"/*\"});\n+\n+      readerWebServer.addJerseyResourcePackage(\n+          TimelineReaderWebServices.class.getPackage().getName() + \";\"\n+              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n+              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n+          \"/*\");\n+      readerWebServer.setAttribute(TIMELINE_READER_MANAGER_ATTR,\n+          timelineReaderManager);\n+      readerWebServer.start();\n+    } catch (Exception e) {\n+      String msg \u003d \"TimelineReaderWebApp failed to start.\";\n+      LOG.error(msg, e);\n+      throw new YarnRuntimeException(msg, e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void startTimelineReaderWebApp() {\n    Configuration conf \u003d getConfig();\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n        YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        WebAppUtils.getTimelineReaderWebAppURL(conf));\n    LOG.info(\"Instantiating TimelineReaderWebApp at \" + bindAddress);\n    try {\n      HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n            .setName(\"timeline\")\n            .setConf(conf)\n            .addEndpoint(URI.create(\"http://\" + bindAddress));\n      readerWebServer \u003d builder.build();\n\n      Map\u003cString, String\u003e options \u003d new HashMap\u003c\u003e();\n      String username \u003d conf.get(HADOOP_HTTP_STATIC_USER,\n          DEFAULT_HADOOP_HTTP_STATIC_USER);\n      options.put(HADOOP_HTTP_STATIC_USER, username);\n      HttpServer2.defineFilter(readerWebServer.getWebAppContext(),\n          \"static_user_filter_timeline\",\n          StaticUserWebFilter.StaticUserFilter.class.getName(),\n          options, new String[] {\"/*\"});\n\n      readerWebServer.addJerseyResourcePackage(\n          TimelineReaderWebServices.class.getPackage().getName() + \";\"\n              + GenericExceptionHandler.class.getPackage().getName() + \";\"\n              + YarnJacksonJaxbJsonProvider.class.getPackage().getName(),\n          \"/*\");\n      readerWebServer.setAttribute(TIMELINE_READER_MANAGER_ATTR,\n          timelineReaderManager);\n      readerWebServer.start();\n    } catch (Exception e) {\n      String msg \u003d \"TimelineReaderWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderServer.java"
    }
  }
}