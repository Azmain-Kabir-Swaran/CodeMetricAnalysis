{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ActiveStandbyElectorBasedElectorService.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ActiveStandbyElectorBasedElectorService.java",
  "functionStartLine": 76,
  "functionEndLine": 118,
  "numCommitsSeen": 18,
  "timeTaken": 3439,
  "changeHistory": [
    "bbbf0e2a4136b30cad9dfd36ef138650a1adea60",
    "166be0ee95d5ef976f074342656b289b41a11ccd",
    "a6410a542e59acd9827457df4a257a843f785c29",
    "6476934ae5de1be7988ab198b673d82fe0f006e3",
    "0fce5f9a496925f0d53ea6c14318c9b513de9882",
    "7a241aee90f042672fc30ba402ed9dff912bc535",
    "6d4c7df43401b87781e81c57405434ba9b9efd6f",
    "88245b6a41171f939b22186c533ea2bc7994f9b3",
    "1ba26e3e68bd3bc8d55c18553777c5ba7b97aa4b",
    "c3cc855d27470edca7ca0bdc0aa8907b544b636e"
  ],
  "changeHistoryShort": {
    "bbbf0e2a4136b30cad9dfd36ef138650a1adea60": "Ybodychange",
    "166be0ee95d5ef976f074342656b289b41a11ccd": "Ybodychange",
    "a6410a542e59acd9827457df4a257a843f785c29": "Yfilerename",
    "6476934ae5de1be7988ab198b673d82fe0f006e3": "Ybodychange",
    "0fce5f9a496925f0d53ea6c14318c9b513de9882": "Ybodychange",
    "7a241aee90f042672fc30ba402ed9dff912bc535": "Ymodifierchange",
    "6d4c7df43401b87781e81c57405434ba9b9efd6f": "Ybodychange",
    "88245b6a41171f939b22186c533ea2bc7994f9b3": "Ybodychange",
    "1ba26e3e68bd3bc8d55c18553777c5ba7b97aa4b": "Ybodychange",
    "c3cc855d27470edca7ca0bdc0aa8907b544b636e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bbbf0e2a4136b30cad9dfd36ef138650a1adea60": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14741. Refactor curator based ZooKeeper communication into common library. (Íñigo Goiri via Subru).\n",
      "commitDate": "11/08/17 1:58 PM",
      "commitName": "bbbf0e2a4136b30cad9dfd36ef138650a1adea60",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "23/07/17 11:09 PM",
      "commitNameOld": "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 18.62,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   protected void serviceInit(Configuration conf)\n       throws Exception {\n     conf \u003d conf instanceof YarnConfiguration\n         ? conf\n         : new YarnConfiguration(conf);\n \n     String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n     if (zkQuorum \u003d\u003d null) {\n       throw new YarnRuntimeException(\"Embedded automatic failover \" +\n           \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n           \" is not set\");\n     }\n \n     String rmId \u003d HAUtil.getRMHAId(conf);\n     String clusterId \u003d YarnConfiguration.getClusterId(conf);\n     localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n \n     String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n         YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n     String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n \n     zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n         YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n \n-    List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n-    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n+    List\u003cACL\u003e zkAcls \u003d ZKCuratorManager.getZKAcls(conf);\n+    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d ZKCuratorManager.getZKAuths(conf);\n \n     int maxRetryNum \u003d\n         conf.getInt(YarnConfiguration.RM_HA_FC_ELECTOR_ZK_RETRIES_KEY, conf\n           .getInt(CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n             CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT));\n     elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n         electionZNode, zkAcls, zkAuths, this, maxRetryNum, false);\n \n     elector.ensureParentZNode();\n     if (!isParentZnodeSafe(clusterId)) {\n       notifyFatalError(String.format(\"invalid data in znode, %s, \" +\n           \"which may require the state store to be reformatted\",\n           electionZNode));\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf)\n      throws Exception {\n    conf \u003d conf instanceof YarnConfiguration\n        ? conf\n        : new YarnConfiguration(conf);\n\n    String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n    if (zkQuorum \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Embedded automatic failover \" +\n          \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n          \" is not set\");\n    }\n\n    String rmId \u003d HAUtil.getRMHAId(conf);\n    String clusterId \u003d YarnConfiguration.getClusterId(conf);\n    localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n\n    String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n        YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n    String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n\n    zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n\n    List\u003cACL\u003e zkAcls \u003d ZKCuratorManager.getZKAcls(conf);\n    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d ZKCuratorManager.getZKAuths(conf);\n\n    int maxRetryNum \u003d\n        conf.getInt(YarnConfiguration.RM_HA_FC_ELECTOR_ZK_RETRIES_KEY, conf\n          .getInt(CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n            CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT));\n    elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n        electionZNode, zkAcls, zkAuths, this, maxRetryNum, false);\n\n    elector.ensureParentZNode();\n    if (!isParentZnodeSafe(clusterId)) {\n      notifyFatalError(String.format(\"invalid data in znode, %s, \" +\n          \"which may require the state store to be reformatted\",\n          electionZNode));\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ActiveStandbyElectorBasedElectorService.java",
      "extendedDetails": {}
    },
    "166be0ee95d5ef976f074342656b289b41a11ccd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3742. YARN RM will shut down if ZKClient creation times out. (Daniel Templeton via kasha)\n",
      "commitDate": "09/05/17 2:44 PM",
      "commitName": "166be0ee95d5ef976f074342656b289b41a11ccd",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "09/12/16 5:00 PM",
      "commitNameOld": "a6410a542e59acd9827457df4a257a843f785c29",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 150.86,
      "commitsBetweenForRepo": 788,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   protected void serviceInit(Configuration conf)\n       throws Exception {\n     conf \u003d conf instanceof YarnConfiguration\n         ? conf\n         : new YarnConfiguration(conf);\n \n     String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n     if (zkQuorum \u003d\u003d null) {\n       throw new YarnRuntimeException(\"Embedded automatic failover \" +\n           \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n           \" is not set\");\n     }\n \n     String rmId \u003d HAUtil.getRMHAId(conf);\n     String clusterId \u003d YarnConfiguration.getClusterId(conf);\n     localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n \n     String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n         YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n     String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n \n     zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n         YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n \n     List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n     List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n \n     int maxRetryNum \u003d\n         conf.getInt(YarnConfiguration.RM_HA_FC_ELECTOR_ZK_RETRIES_KEY, conf\n           .getInt(CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n             CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT));\n     elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n         electionZNode, zkAcls, zkAuths, this, maxRetryNum, false);\n \n     elector.ensureParentZNode();\n     if (!isParentZnodeSafe(clusterId)) {\n-      notifyFatalError(electionZNode + \" znode has invalid data! \"+\n-          \"Might need formatting!\");\n+      notifyFatalError(String.format(\"invalid data in znode, %s, \" +\n+          \"which may require the state store to be reformatted\",\n+          electionZNode));\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf)\n      throws Exception {\n    conf \u003d conf instanceof YarnConfiguration\n        ? conf\n        : new YarnConfiguration(conf);\n\n    String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n    if (zkQuorum \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Embedded automatic failover \" +\n          \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n          \" is not set\");\n    }\n\n    String rmId \u003d HAUtil.getRMHAId(conf);\n    String clusterId \u003d YarnConfiguration.getClusterId(conf);\n    localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n\n    String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n        YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n    String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n\n    zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n\n    List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n\n    int maxRetryNum \u003d\n        conf.getInt(YarnConfiguration.RM_HA_FC_ELECTOR_ZK_RETRIES_KEY, conf\n          .getInt(CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n            CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT));\n    elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n        electionZNode, zkAcls, zkAuths, this, maxRetryNum, false);\n\n    elector.ensureParentZNode();\n    if (!isParentZnodeSafe(clusterId)) {\n      notifyFatalError(String.format(\"invalid data in znode, %s, \" +\n          \"which may require the state store to be reformatted\",\n          electionZNode));\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ActiveStandbyElectorBasedElectorService.java",
      "extendedDetails": {}
    },
    "a6410a542e59acd9827457df4a257a843f785c29": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5709. Cleanup leader election configs and pluggability. Contribtued by Karthik Kambatla\n",
      "commitDate": "09/12/16 5:00 PM",
      "commitName": "a6410a542e59acd9827457df4a257a843f785c29",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/12/16 4:41 PM",
      "commitNameOld": "b0aace21b1ef3436ba9d516186208fee9a9ceef2",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,42 @@\n   protected void serviceInit(Configuration conf)\n       throws Exception {\n-    conf \u003d conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf);\n+    conf \u003d conf instanceof YarnConfiguration\n+        ? conf\n+        : new YarnConfiguration(conf);\n \n     String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n     if (zkQuorum \u003d\u003d null) {\n-     throw new YarnRuntimeException(\"Embedded automatic failover \" +\n+      throw new YarnRuntimeException(\"Embedded automatic failover \" +\n           \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n           \" is not set\");\n     }\n \n     String rmId \u003d HAUtil.getRMHAId(conf);\n     String clusterId \u003d YarnConfiguration.getClusterId(conf);\n     localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n \n     String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n         YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n     String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n \n     zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n         YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n \n     List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n     List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n \n     int maxRetryNum \u003d\n         conf.getInt(YarnConfiguration.RM_HA_FC_ELECTOR_ZK_RETRIES_KEY, conf\n           .getInt(CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n             CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT));\n     elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n         electionZNode, zkAcls, zkAuths, this, maxRetryNum, false);\n \n     elector.ensureParentZNode();\n     if (!isParentZnodeSafe(clusterId)) {\n       notifyFatalError(electionZNode + \" znode has invalid data! \"+\n           \"Might need formatting!\");\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf)\n      throws Exception {\n    conf \u003d conf instanceof YarnConfiguration\n        ? conf\n        : new YarnConfiguration(conf);\n\n    String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n    if (zkQuorum \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Embedded automatic failover \" +\n          \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n          \" is not set\");\n    }\n\n    String rmId \u003d HAUtil.getRMHAId(conf);\n    String clusterId \u003d YarnConfiguration.getClusterId(conf);\n    localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n\n    String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n        YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n    String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n\n    zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n\n    List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n\n    int maxRetryNum \u003d\n        conf.getInt(YarnConfiguration.RM_HA_FC_ELECTOR_ZK_RETRIES_KEY, conf\n          .getInt(CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n            CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT));\n    elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n        electionZNode, zkAcls, zkAuths, this, maxRetryNum, false);\n\n    elector.ensureParentZNode();\n    if (!isParentZnodeSafe(clusterId)) {\n      notifyFatalError(electionZNode + \" znode has invalid data! \"+\n          \"Might need formatting!\");\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ActiveStandbyElectorBasedElectorService.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/EmbeddedElectorService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ActiveStandbyElectorBasedElectorService.java"
      }
    },
    "6476934ae5de1be7988ab198b673d82fe0f006e3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5677. RM should transition to standby when connection is lost for an extended period. (Daniel Templeton via kasha)\n",
      "commitDate": "11/10/16 10:07 PM",
      "commitName": "6476934ae5de1be7988ab198b673d82fe0f006e3",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "22/10/15 1:41 PM",
      "commitNameOld": "0fce5f9a496925f0d53ea6c14318c9b513de9882",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 355.35,
      "commitsBetweenForRepo": 2457,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   protected void serviceInit(Configuration conf)\n       throws Exception {\n     conf \u003d conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf);\n \n     String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n     if (zkQuorum \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Embedded automatic failover \" +\n           \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n           \" is not set\");\n     }\n \n     String rmId \u003d HAUtil.getRMHAId(conf);\n     String clusterId \u003d YarnConfiguration.getClusterId(conf);\n     localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n \n     String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n         YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n     String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n \n-    long zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n+    zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n         YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n \n     List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n     List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n \n     int maxRetryNum \u003d\n         conf.getInt(YarnConfiguration.RM_HA_FC_ELECTOR_ZK_RETRIES_KEY, conf\n           .getInt(CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n             CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT));\n     elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n         electionZNode, zkAcls, zkAuths, this, maxRetryNum, false);\n \n     elector.ensureParentZNode();\n     if (!isParentZnodeSafe(clusterId)) {\n       notifyFatalError(electionZNode + \" znode has invalid data! \"+\n           \"Might need formatting!\");\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf)\n      throws Exception {\n    conf \u003d conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf);\n\n    String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n    if (zkQuorum \u003d\u003d null) {\n     throw new YarnRuntimeException(\"Embedded automatic failover \" +\n          \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n          \" is not set\");\n    }\n\n    String rmId \u003d HAUtil.getRMHAId(conf);\n    String clusterId \u003d YarnConfiguration.getClusterId(conf);\n    localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n\n    String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n        YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n    String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n\n    zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n\n    List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n\n    int maxRetryNum \u003d\n        conf.getInt(YarnConfiguration.RM_HA_FC_ELECTOR_ZK_RETRIES_KEY, conf\n          .getInt(CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n            CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT));\n    elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n        electionZNode, zkAcls, zkAuths, this, maxRetryNum, false);\n\n    elector.ensureParentZNode();\n    if (!isParentZnodeSafe(clusterId)) {\n      notifyFatalError(electionZNode + \" znode has invalid data! \"+\n          \"Might need formatting!\");\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/EmbeddedElectorService.java",
      "extendedDetails": {}
    },
    "0fce5f9a496925f0d53ea6c14318c9b513de9882": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4243. Add retry on establishing Zookeeper conenction in EmbeddedElectorService#serviceInit. Contributed by Xuan Gong.\n",
      "commitDate": "22/10/15 1:41 PM",
      "commitName": "0fce5f9a496925f0d53ea6c14318c9b513de9882",
      "commitAuthor": "Junping Du",
      "commitDateOld": "02/09/15 5:45 PM",
      "commitNameOld": "09c64ba1ba8be7a2ac31f4e42efb8c99b682399f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 49.83,
      "commitsBetweenForRepo": 371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   protected void serviceInit(Configuration conf)\n       throws Exception {\n     conf \u003d conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf);\n \n     String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n     if (zkQuorum \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Embedded automatic failover \" +\n           \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n           \" is not set\");\n     }\n \n     String rmId \u003d HAUtil.getRMHAId(conf);\n     String clusterId \u003d YarnConfiguration.getClusterId(conf);\n     localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n \n     String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n         YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n     String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n \n     long zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n         YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n \n     List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n     List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n \n-    int maxRetryNum \u003d conf.getInt(\n-        CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n-        CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT);\n+    int maxRetryNum \u003d\n+        conf.getInt(YarnConfiguration.RM_HA_FC_ELECTOR_ZK_RETRIES_KEY, conf\n+          .getInt(CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n+            CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT));\n     elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n-        electionZNode, zkAcls, zkAuths, this, maxRetryNum);\n+        electionZNode, zkAcls, zkAuths, this, maxRetryNum, false);\n \n     elector.ensureParentZNode();\n     if (!isParentZnodeSafe(clusterId)) {\n       notifyFatalError(electionZNode + \" znode has invalid data! \"+\n           \"Might need formatting!\");\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf)\n      throws Exception {\n    conf \u003d conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf);\n\n    String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n    if (zkQuorum \u003d\u003d null) {\n     throw new YarnRuntimeException(\"Embedded automatic failover \" +\n          \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n          \" is not set\");\n    }\n\n    String rmId \u003d HAUtil.getRMHAId(conf);\n    String clusterId \u003d YarnConfiguration.getClusterId(conf);\n    localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n\n    String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n        YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n    String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n\n    long zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n\n    List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n\n    int maxRetryNum \u003d\n        conf.getInt(YarnConfiguration.RM_HA_FC_ELECTOR_ZK_RETRIES_KEY, conf\n          .getInt(CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n            CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT));\n    elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n        electionZNode, zkAcls, zkAuths, this, maxRetryNum, false);\n\n    elector.ensureParentZNode();\n    if (!isParentZnodeSafe(clusterId)) {\n      notifyFatalError(electionZNode + \" znode has invalid data! \"+\n          \"Might need formatting!\");\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/EmbeddedElectorService.java",
      "extendedDetails": {}
    },
    "7a241aee90f042672fc30ba402ed9dff912bc535": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-1929. Fixed a deadlock in ResourceManager that occurs when failover happens right at the time of shutdown. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1591071 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/04/14 12:49 PM",
      "commitName": "7a241aee90f042672fc30ba402ed9dff912bc535",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/04/14 4:03 PM",
      "commitNameOld": "6d4c7df43401b87781e81c57405434ba9b9efd6f",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n-  protected synchronized void serviceInit(Configuration conf)\n+  protected void serviceInit(Configuration conf)\n       throws Exception {\n     conf \u003d conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf);\n \n     String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n     if (zkQuorum \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Embedded automatic failover \" +\n           \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n           \" is not set\");\n     }\n \n     String rmId \u003d HAUtil.getRMHAId(conf);\n     String clusterId \u003d YarnConfiguration.getClusterId(conf);\n     localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n \n     String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n         YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n     String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n \n     long zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n         YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n \n     List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n     List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n \n     int maxRetryNum \u003d conf.getInt(\n         CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n         CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT);\n     elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n         electionZNode, zkAcls, zkAuths, this, maxRetryNum);\n \n     elector.ensureParentZNode();\n     if (!isParentZnodeSafe(clusterId)) {\n       notifyFatalError(electionZNode + \" znode has invalid data! \"+\n           \"Might need formatting!\");\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf)\n      throws Exception {\n    conf \u003d conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf);\n\n    String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n    if (zkQuorum \u003d\u003d null) {\n     throw new YarnRuntimeException(\"Embedded automatic failover \" +\n          \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n          \" is not set\");\n    }\n\n    String rmId \u003d HAUtil.getRMHAId(conf);\n    String clusterId \u003d YarnConfiguration.getClusterId(conf);\n    localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n\n    String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n        YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n    String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n\n    long zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n\n    List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n\n    int maxRetryNum \u003d conf.getInt(\n        CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n        CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT);\n    elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n        electionZNode, zkAcls, zkAuths, this, maxRetryNum);\n\n    elector.ensureParentZNode();\n    if (!isParentZnodeSafe(clusterId)) {\n      notifyFatalError(electionZNode + \" znode has invalid data! \"+\n          \"Might need formatting!\");\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/EmbeddedElectorService.java",
      "extendedDetails": {
        "oldValue": "[protected, synchronized]",
        "newValue": "[protected]"
      }
    },
    "6d4c7df43401b87781e81c57405434ba9b9efd6f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10535. Make the retry numbers in ActiveStandbyElector configurable. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1589905 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/14 4:03 PM",
      "commitName": "6d4c7df43401b87781e81c57405434ba9b9efd6f",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "04/03/14 12:39 PM",
      "commitNameOld": "88245b6a41171f939b22186c533ea2bc7994f9b3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 51.1,
      "commitsBetweenForRepo": 377,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,39 @@\n   protected synchronized void serviceInit(Configuration conf)\n       throws Exception {\n     conf \u003d conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf);\n \n     String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n     if (zkQuorum \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Embedded automatic failover \" +\n           \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n           \" is not set\");\n     }\n \n     String rmId \u003d HAUtil.getRMHAId(conf);\n     String clusterId \u003d YarnConfiguration.getClusterId(conf);\n     localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n \n     String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n         YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n     String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n \n     long zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n         YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n \n     List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n     List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n \n+    int maxRetryNum \u003d conf.getInt(\n+        CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n+        CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT);\n     elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n-        electionZNode, zkAcls, zkAuths, this);\n+        electionZNode, zkAcls, zkAuths, this, maxRetryNum);\n \n     elector.ensureParentZNode();\n     if (!isParentZnodeSafe(clusterId)) {\n       notifyFatalError(electionZNode + \" znode has invalid data! \"+\n           \"Might need formatting!\");\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void serviceInit(Configuration conf)\n      throws Exception {\n    conf \u003d conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf);\n\n    String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n    if (zkQuorum \u003d\u003d null) {\n     throw new YarnRuntimeException(\"Embedded automatic failover \" +\n          \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n          \" is not set\");\n    }\n\n    String rmId \u003d HAUtil.getRMHAId(conf);\n    String clusterId \u003d YarnConfiguration.getClusterId(conf);\n    localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n\n    String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n        YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n    String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n\n    long zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n\n    List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n\n    int maxRetryNum \u003d conf.getInt(\n        CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n        CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT);\n    elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n        electionZNode, zkAcls, zkAuths, this, maxRetryNum);\n\n    elector.ensureParentZNode();\n    if (!isParentZnodeSafe(clusterId)) {\n      notifyFatalError(electionZNode + \" znode has invalid data! \"+\n          \"Might need formatting!\");\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/EmbeddedElectorService.java",
      "extendedDetails": {}
    },
    "88245b6a41171f939b22186c533ea2bc7994f9b3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-986. Changed client side to be able to figure out the right RM Delegation token for the right ResourceManager when HA is enabled. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574190 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/03/14 12:39 PM",
      "commitName": "88245b6a41171f939b22186c533ea2bc7994f9b3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "28/02/14 9:34 AM",
      "commitNameOld": "1ba26e3e68bd3bc8d55c18553777c5ba7b97aa4b",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 4.13,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,36 @@\n   protected synchronized void serviceInit(Configuration conf)\n       throws Exception {\n     conf \u003d conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf);\n \n     String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n     if (zkQuorum \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Embedded automatic failover \" +\n           \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n           \" is not set\");\n     }\n \n     String rmId \u003d HAUtil.getRMHAId(conf);\n-    String clusterId \u003d conf.get(YarnConfiguration.RM_CLUSTER_ID);\n-    if (clusterId \u003d\u003d null) {\n-      throw new YarnRuntimeException(YarnConfiguration.RM_CLUSTER_ID +\n-          \" is not specified!\");\n-    }\n+    String clusterId \u003d YarnConfiguration.getClusterId(conf);\n     localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n \n     String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n         YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n     String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n \n     long zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n         YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n \n     List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n     List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n \n     elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n         electionZNode, zkAcls, zkAuths, this);\n \n     elector.ensureParentZNode();\n     if (!isParentZnodeSafe(clusterId)) {\n       notifyFatalError(electionZNode + \" znode has invalid data! \"+\n           \"Might need formatting!\");\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void serviceInit(Configuration conf)\n      throws Exception {\n    conf \u003d conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf);\n\n    String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n    if (zkQuorum \u003d\u003d null) {\n     throw new YarnRuntimeException(\"Embedded automatic failover \" +\n          \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n          \" is not set\");\n    }\n\n    String rmId \u003d HAUtil.getRMHAId(conf);\n    String clusterId \u003d YarnConfiguration.getClusterId(conf);\n    localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n\n    String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n        YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n    String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n\n    long zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n\n    List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n\n    elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n        electionZNode, zkAcls, zkAuths, this);\n\n    elector.ensureParentZNode();\n    if (!isParentZnodeSafe(clusterId)) {\n      notifyFatalError(electionZNode + \" znode has invalid data! \"+\n          \"Might need formatting!\");\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/EmbeddedElectorService.java",
      "extendedDetails": {}
    },
    "1ba26e3e68bd3bc8d55c18553777c5ba7b97aa4b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1528. Allow setting auth for ZK connections. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573014 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/02/14 9:34 AM",
      "commitName": "1ba26e3e68bd3bc8d55c18553777c5ba7b97aa4b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "07/01/14 7:30 PM",
      "commitNameOld": "49ec397340aacbbf594ee80cb3a8979ea6d80aa3",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 51.59,
      "commitsBetweenForRepo": 379,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,40 @@\n   protected synchronized void serviceInit(Configuration conf)\n       throws Exception {\n     conf \u003d conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf);\n \n     String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n     if (zkQuorum \u003d\u003d null) {\n      throw new YarnRuntimeException(\"Embedded automatic failover \" +\n           \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n           \" is not set\");\n     }\n \n     String rmId \u003d HAUtil.getRMHAId(conf);\n     String clusterId \u003d conf.get(YarnConfiguration.RM_CLUSTER_ID);\n     if (clusterId \u003d\u003d null) {\n       throw new YarnRuntimeException(YarnConfiguration.RM_CLUSTER_ID +\n           \" is not specified!\");\n     }\n     localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n \n     String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n         YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n     String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n \n     long zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n         YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n \n-    String zkAclConf \u003d conf.get(YarnConfiguration.RM_ZK_ACL,\n-        YarnConfiguration.DEFAULT_RM_ZK_ACL);\n-    List\u003cACL\u003e zkAcls;\n-    try {\n-      zkAcls \u003d ZKUtil.parseACLs(ZKUtil.resolveConfIndirection(zkAclConf));\n-    } catch (ZKUtil.BadAclFormatException bafe) {\n-      throw new YarnRuntimeException(\n-          YarnConfiguration.RM_ZK_ACL + \"has ill-formatted ACLs\");\n-    }\n-\n-    // TODO (YARN-1528): ZKAuthInfo to be set for rm-store and elector\n-    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d Collections.emptyList();\n+    List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n+    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n \n     elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n         electionZNode, zkAcls, zkAuths, this);\n \n     elector.ensureParentZNode();\n     if (!isParentZnodeSafe(clusterId)) {\n       notifyFatalError(electionZNode + \" znode has invalid data! \"+\n           \"Might need formatting!\");\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void serviceInit(Configuration conf)\n      throws Exception {\n    conf \u003d conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf);\n\n    String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n    if (zkQuorum \u003d\u003d null) {\n     throw new YarnRuntimeException(\"Embedded automatic failover \" +\n          \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n          \" is not set\");\n    }\n\n    String rmId \u003d HAUtil.getRMHAId(conf);\n    String clusterId \u003d conf.get(YarnConfiguration.RM_CLUSTER_ID);\n    if (clusterId \u003d\u003d null) {\n      throw new YarnRuntimeException(YarnConfiguration.RM_CLUSTER_ID +\n          \" is not specified!\");\n    }\n    localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n\n    String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n        YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n    String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n\n    long zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n\n    List\u003cACL\u003e zkAcls \u003d RMZKUtils.getZKAcls(conf);\n    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d RMZKUtils.getZKAuths(conf);\n\n    elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n        electionZNode, zkAcls, zkAuths, this);\n\n    elector.ensureParentZNode();\n    if (!isParentZnodeSafe(clusterId)) {\n      notifyFatalError(electionZNode + \" znode has invalid data! \"+\n          \"Might need formatting!\");\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/EmbeddedElectorService.java",
      "extendedDetails": {}
    },
    "c3cc855d27470edca7ca0bdc0aa8907b544b636e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1029. Added embedded leader election in the ResourceManager. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556103 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/01/14 5:56 PM",
      "commitName": "c3cc855d27470edca7ca0bdc0aa8907b544b636e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,50 @@\n+  protected synchronized void serviceInit(Configuration conf)\n+      throws Exception {\n+    conf \u003d conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf);\n+\n+    String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n+    if (zkQuorum \u003d\u003d null) {\n+     throw new YarnRuntimeException(\"Embedded automatic failover \" +\n+          \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n+          \" is not set\");\n+    }\n+\n+    String rmId \u003d HAUtil.getRMHAId(conf);\n+    String clusterId \u003d conf.get(YarnConfiguration.RM_CLUSTER_ID);\n+    if (clusterId \u003d\u003d null) {\n+      throw new YarnRuntimeException(YarnConfiguration.RM_CLUSTER_ID +\n+          \" is not specified!\");\n+    }\n+    localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n+\n+    String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n+        YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n+    String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n+\n+    long zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n+        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n+\n+    String zkAclConf \u003d conf.get(YarnConfiguration.RM_ZK_ACL,\n+        YarnConfiguration.DEFAULT_RM_ZK_ACL);\n+    List\u003cACL\u003e zkAcls;\n+    try {\n+      zkAcls \u003d ZKUtil.parseACLs(ZKUtil.resolveConfIndirection(zkAclConf));\n+    } catch (ZKUtil.BadAclFormatException bafe) {\n+      throw new YarnRuntimeException(\n+          YarnConfiguration.RM_ZK_ACL + \"has ill-formatted ACLs\");\n+    }\n+\n+    // TODO (YARN-1528): ZKAuthInfo to be set for rm-store and elector\n+    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d Collections.emptyList();\n+\n+    elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n+        electionZNode, zkAcls, zkAuths, this);\n+\n+    elector.ensureParentZNode();\n+    if (!isParentZnodeSafe(clusterId)) {\n+      notifyFatalError(electionZNode + \" znode has invalid data! \"+\n+          \"Might need formatting!\");\n+    }\n+\n+    super.serviceInit(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void serviceInit(Configuration conf)\n      throws Exception {\n    conf \u003d conf instanceof YarnConfiguration ? conf : new YarnConfiguration(conf);\n\n    String zkQuorum \u003d conf.get(YarnConfiguration.RM_ZK_ADDRESS);\n    if (zkQuorum \u003d\u003d null) {\n     throw new YarnRuntimeException(\"Embedded automatic failover \" +\n          \"is enabled, but \" + YarnConfiguration.RM_ZK_ADDRESS +\n          \" is not set\");\n    }\n\n    String rmId \u003d HAUtil.getRMHAId(conf);\n    String clusterId \u003d conf.get(YarnConfiguration.RM_CLUSTER_ID);\n    if (clusterId \u003d\u003d null) {\n      throw new YarnRuntimeException(YarnConfiguration.RM_CLUSTER_ID +\n          \" is not specified!\");\n    }\n    localActiveNodeInfo \u003d createActiveNodeInfo(clusterId, rmId);\n\n    String zkBasePath \u003d conf.get(YarnConfiguration.AUTO_FAILOVER_ZK_BASE_PATH,\n        YarnConfiguration.DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH);\n    String electionZNode \u003d zkBasePath + \"/\" + clusterId;\n\n    long zkSessionTimeout \u003d conf.getLong(YarnConfiguration.RM_ZK_TIMEOUT_MS,\n        YarnConfiguration.DEFAULT_RM_ZK_TIMEOUT_MS);\n\n    String zkAclConf \u003d conf.get(YarnConfiguration.RM_ZK_ACL,\n        YarnConfiguration.DEFAULT_RM_ZK_ACL);\n    List\u003cACL\u003e zkAcls;\n    try {\n      zkAcls \u003d ZKUtil.parseACLs(ZKUtil.resolveConfIndirection(zkAclConf));\n    } catch (ZKUtil.BadAclFormatException bafe) {\n      throw new YarnRuntimeException(\n          YarnConfiguration.RM_ZK_ACL + \"has ill-formatted ACLs\");\n    }\n\n    // TODO (YARN-1528): ZKAuthInfo to be set for rm-store and elector\n    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d Collections.emptyList();\n\n    elector \u003d new ActiveStandbyElector(zkQuorum, (int) zkSessionTimeout,\n        electionZNode, zkAcls, zkAuths, this);\n\n    elector.ensureParentZNode();\n    if (!isParentZnodeSafe(clusterId)) {\n      notifyFatalError(electionZNode + \" znode has invalid data! \"+\n          \"Might need formatting!\");\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/EmbeddedElectorService.java"
    }
  }
}