{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractFuture.java",
  "functionName": "get",
  "functionId": "get",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/AbstractFuture.java",
  "functionStartLine": 88,
  "functionEndLine": 90,
  "numCommitsSeen": 4,
  "timeTaken": 741,
  "changeHistory": [
    "d69a82c89c1e857a2a86ff614ae11fb5df993614"
  ],
  "changeHistoryShort": {
    "d69a82c89c1e857a2a86ff614ae11fb5df993614": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d69a82c89c1e857a2a86ff614ae11fb5df993614": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11511. Support Timeout when checking single disk. Contributed by Hanisha Koneru.\n",
      "commitDate": "15/03/17 6:01 PM",
      "commitName": "d69a82c89c1e857a2a86ff614ae11fb5df993614",
      "commitAuthor": "Hanisha Koneru",
      "diff": "@@ -0,0 +1,38 @@\n+  public V get() throws InterruptedException, ExecutionException {\n+    if (Thread.interrupted()) {\n+      throw new InterruptedException();\n+    }\n+    Object localValue \u003d value;\n+    if (localValue !\u003d null \u0026 !(localValue instanceof SetFuture)) {\n+      return getDoneValue(localValue);\n+    }\n+    Waiter oldHead \u003d waiters;\n+    if (oldHead !\u003d Waiter.TOMBSTONE) {\n+      Waiter node \u003d new Waiter();\n+      do {\n+        node.setNext(oldHead);\n+        if (ATOMIC_HELPER.casWaiters(this, oldHead, node)) {\n+          // we are on the stack, now wait for completion.\n+          while (true) {\n+            LockSupport.park(this);\n+            // Check interruption first, if we woke up due to interruption we\n+            // need to honor that.\n+            if (Thread.interrupted()) {\n+              removeWaiter(node);\n+              throw new InterruptedException();\n+            }\n+            // Otherwise re-read and check doneness. If we loop then it must\n+            // have been a spurious wakeup\n+            localValue \u003d value;\n+            if (localValue !\u003d null \u0026 !(localValue instanceof SetFuture)) {\n+              return getDoneValue(localValue);\n+            }\n+          }\n+        }\n+        oldHead \u003d waiters; // re-read and loop.\n+      } while (oldHead !\u003d Waiter.TOMBSTONE);\n+    }\n+    // re-read value, if we get here then we must have observed a TOMBSTONE\n+    // while trying to add a waiter.\n+    return getDoneValue(value);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public V get() throws InterruptedException, ExecutionException {\n    if (Thread.interrupted()) {\n      throw new InterruptedException();\n    }\n    Object localValue \u003d value;\n    if (localValue !\u003d null \u0026 !(localValue instanceof SetFuture)) {\n      return getDoneValue(localValue);\n    }\n    Waiter oldHead \u003d waiters;\n    if (oldHead !\u003d Waiter.TOMBSTONE) {\n      Waiter node \u003d new Waiter();\n      do {\n        node.setNext(oldHead);\n        if (ATOMIC_HELPER.casWaiters(this, oldHead, node)) {\n          // we are on the stack, now wait for completion.\n          while (true) {\n            LockSupport.park(this);\n            // Check interruption first, if we woke up due to interruption we\n            // need to honor that.\n            if (Thread.interrupted()) {\n              removeWaiter(node);\n              throw new InterruptedException();\n            }\n            // Otherwise re-read and check doneness. If we loop then it must\n            // have been a spurious wakeup\n            localValue \u003d value;\n            if (localValue !\u003d null \u0026 !(localValue instanceof SetFuture)) {\n              return getDoneValue(localValue);\n            }\n          }\n        }\n        oldHead \u003d waiters; // re-read and loop.\n      } while (oldHead !\u003d Waiter.TOMBSTONE);\n    }\n    // re-read value, if we get here then we must have observed a TOMBSTONE\n    // while trying to add a waiter.\n    return getDoneValue(value);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/AbstractFuture.java"
    }
  }
}