{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OpportunisticContainerAllocatorAMService.java",
  "functionName": "handle",
  "functionId": "handle___event-SchedulerEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
  "functionStartLine": 383,
  "functionEndLine": 452,
  "numCommitsSeen": 32,
  "timeTaken": 4988,
  "changeHistory": [
    "61a8436004294db0224dd20aa3997fa2e3136114",
    "5d8bd0e5cbf1142dbdf6a5f8cf1a448da88b9e9a",
    "f49843a9888ad8fe5c1bb4c16bfb5217d693009d",
    "10be45986cdf86a89055065b752959bd6369d54f",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
    "f0ac18d001d97914a9ee810b1fab56c5cebff830",
    "341888a0aa23f24458b4e6e34868794b9735c06a"
  ],
  "changeHistoryShort": {
    "61a8436004294db0224dd20aa3997fa2e3136114": "Ybodychange",
    "5d8bd0e5cbf1142dbdf6a5f8cf1a448da88b9e9a": "Ybodychange",
    "f49843a9888ad8fe5c1bb4c16bfb5217d693009d": "Ybodychange",
    "10be45986cdf86a89055065b752959bd6369d54f": "Ybodychange",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": "Ymultichange(Yfilerename,Ybodychange)",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": "Ymultichange(Yfilerename,Ybodychange)",
    "f0ac18d001d97914a9ee810b1fab56c5cebff830": "Ybodychange",
    "341888a0aa23f24458b4e6e34868794b9735c06a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "61a8436004294db0224dd20aa3997fa2e3136114": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9870. Remove unused function from OpportunisticContainerAllocatorAMService. Contributed by Abhishek Modi.\n",
      "commitDate": "02/10/19 5:25 AM",
      "commitName": "61a8436004294db0224dd20aa3997fa2e3136114",
      "commitAuthor": "Abhishek Modi",
      "commitDateOld": "30/09/19 11:10 AM",
      "commitNameOld": "4d3c580b03475a6ec9323d11e6875c542f8e3f6d",
      "commitAuthorOld": "Abhishek Modi",
      "daysBetweenCommits": 1.76,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,70 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n       nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n           (NodeRemovedSchedulerEvent) event;\n       nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n           event;\n       nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n           (NodeResourceUpdateSchedulerEvent) event;\n       nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n           nodeResourceUpdatedEvent.getResourceOption());\n       break;\n \n     // \u003c-- IGNORED EVENTS : START --\u003e\n     case APP_ADDED:\n       break;\n     case APP_REMOVED:\n       break;\n     case APP_ATTEMPT_ADDED:\n       break;\n     case APP_ATTEMPT_REMOVED:\n       break;\n     case CONTAINER_EXPIRED:\n       break;\n     case NODE_LABELS_UPDATE:\n       break;\n     case RELEASE_CONTAINER:\n       break;\n     case NODE_ATTRIBUTES_UPDATE:\n       break;\n     case KILL_RESERVED_CONTAINER:\n       break;\n     case MARK_CONTAINER_FOR_PREEMPTION:\n       break;\n     case MARK_CONTAINER_FOR_KILLABLE:\n       break;\n     case MARK_CONTAINER_FOR_NONKILLABLE:\n       break;\n     case MANAGE_QUEUE:\n       break;\n     // \u003c-- IGNORED EVENTS : END --\u003e\n     default:\n       LOG.error(\"Unknown event arrived at\" +\n-          \"OpportunisticContainerAllocatorAMService: \" + event.toString());\n+          \"OpportunisticContainerAllocatorAMService: {}\", event);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n      nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n          (NodeRemovedSchedulerEvent) event;\n      nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n          event;\n      nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n          (NodeResourceUpdateSchedulerEvent) event;\n      nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n          nodeResourceUpdatedEvent.getResourceOption());\n      break;\n\n    // \u003c-- IGNORED EVENTS : START --\u003e\n    case APP_ADDED:\n      break;\n    case APP_REMOVED:\n      break;\n    case APP_ATTEMPT_ADDED:\n      break;\n    case APP_ATTEMPT_REMOVED:\n      break;\n    case CONTAINER_EXPIRED:\n      break;\n    case NODE_LABELS_UPDATE:\n      break;\n    case RELEASE_CONTAINER:\n      break;\n    case NODE_ATTRIBUTES_UPDATE:\n      break;\n    case KILL_RESERVED_CONTAINER:\n      break;\n    case MARK_CONTAINER_FOR_PREEMPTION:\n      break;\n    case MARK_CONTAINER_FOR_KILLABLE:\n      break;\n    case MARK_CONTAINER_FOR_NONKILLABLE:\n      break;\n    case MANAGE_QUEUE:\n      break;\n    // \u003c-- IGNORED EVENTS : END --\u003e\n    default:\n      LOG.error(\"Unknown event arrived at\" +\n          \"OpportunisticContainerAllocatorAMService: {}\", event);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "5d8bd0e5cbf1142dbdf6a5f8cf1a448da88b9e9a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9392. Handle missing scheduler events in Opportunistic Scheduler. Contributed by Abhishek Modi.\n",
      "commitDate": "19/03/19 11:00 AM",
      "commitName": "5d8bd0e5cbf1142dbdf6a5f8cf1a448da88b9e9a",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 14.53,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,70 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n       nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n           (NodeRemovedSchedulerEvent) event;\n       nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n           event;\n       nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n           (NodeResourceUpdateSchedulerEvent) event;\n       nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n           nodeResourceUpdatedEvent.getResourceOption());\n       break;\n \n     // \u003c-- IGNORED EVENTS : START --\u003e\n     case APP_ADDED:\n       break;\n     case APP_REMOVED:\n       break;\n     case APP_ATTEMPT_ADDED:\n       break;\n     case APP_ATTEMPT_REMOVED:\n       break;\n     case CONTAINER_EXPIRED:\n       break;\n     case NODE_LABELS_UPDATE:\n       break;\n     case RELEASE_CONTAINER:\n       break;\n+    case NODE_ATTRIBUTES_UPDATE:\n+      break;\n+    case KILL_RESERVED_CONTAINER:\n+      break;\n+    case MARK_CONTAINER_FOR_PREEMPTION:\n+      break;\n+    case MARK_CONTAINER_FOR_KILLABLE:\n+      break;\n+    case MARK_CONTAINER_FOR_NONKILLABLE:\n+      break;\n+    case MANAGE_QUEUE:\n+      break;\n     // \u003c-- IGNORED EVENTS : END --\u003e\n     default:\n       LOG.error(\"Unknown event arrived at\" +\n           \"OpportunisticContainerAllocatorAMService: \" + event.toString());\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n      nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n          (NodeRemovedSchedulerEvent) event;\n      nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n          event;\n      nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n          (NodeResourceUpdateSchedulerEvent) event;\n      nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n          nodeResourceUpdatedEvent.getResourceOption());\n      break;\n\n    // \u003c-- IGNORED EVENTS : START --\u003e\n    case APP_ADDED:\n      break;\n    case APP_REMOVED:\n      break;\n    case APP_ATTEMPT_ADDED:\n      break;\n    case APP_ATTEMPT_REMOVED:\n      break;\n    case CONTAINER_EXPIRED:\n      break;\n    case NODE_LABELS_UPDATE:\n      break;\n    case RELEASE_CONTAINER:\n      break;\n    case NODE_ATTRIBUTES_UPDATE:\n      break;\n    case KILL_RESERVED_CONTAINER:\n      break;\n    case MARK_CONTAINER_FOR_PREEMPTION:\n      break;\n    case MARK_CONTAINER_FOR_KILLABLE:\n      break;\n    case MARK_CONTAINER_FOR_NONKILLABLE:\n      break;\n    case MANAGE_QUEUE:\n      break;\n    // \u003c-- IGNORED EVENTS : END --\u003e\n    default:\n      LOG.error(\"Unknown event arrived at\" +\n          \"OpportunisticContainerAllocatorAMService: \" + event.toString());\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "f49843a9888ad8fe5c1bb4c16bfb5217d693009d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6251. Do async container release to prevent deadlock during container updates. (Arun Suresh via wangda)\n\nChange-Id: I6c67d20c5dd4d22752830ebf0ed2340824976ecb\n",
      "commitDate": "23/08/17 9:56 AM",
      "commitName": "f49843a9888ad8fe5c1bb4c16bfb5217d693009d",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "19/07/17 12:26 PM",
      "commitNameOld": "077fcf6a96e420e7f36350931722b8603d010cf1",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 34.9,
      "commitsBetweenForRepo": 255,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,58 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n       nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n           (NodeRemovedSchedulerEvent) event;\n       nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n           event;\n       nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n           (NodeResourceUpdateSchedulerEvent) event;\n       nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n           nodeResourceUpdatedEvent.getResourceOption());\n       break;\n \n     // \u003c-- IGNORED EVENTS : START --\u003e\n     case APP_ADDED:\n       break;\n     case APP_REMOVED:\n       break;\n     case APP_ATTEMPT_ADDED:\n       break;\n     case APP_ATTEMPT_REMOVED:\n       break;\n     case CONTAINER_EXPIRED:\n       break;\n     case NODE_LABELS_UPDATE:\n       break;\n+    case RELEASE_CONTAINER:\n+      break;\n     // \u003c-- IGNORED EVENTS : END --\u003e\n     default:\n       LOG.error(\"Unknown event arrived at\" +\n           \"OpportunisticContainerAllocatorAMService: \" + event.toString());\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n      nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n          (NodeRemovedSchedulerEvent) event;\n      nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n          event;\n      nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n          (NodeResourceUpdateSchedulerEvent) event;\n      nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n          nodeResourceUpdatedEvent.getResourceOption());\n      break;\n\n    // \u003c-- IGNORED EVENTS : START --\u003e\n    case APP_ADDED:\n      break;\n    case APP_REMOVED:\n      break;\n    case APP_ATTEMPT_ADDED:\n      break;\n    case APP_ATTEMPT_REMOVED:\n      break;\n    case CONTAINER_EXPIRED:\n      break;\n    case NODE_LABELS_UPDATE:\n      break;\n    case RELEASE_CONTAINER:\n      break;\n    // \u003c-- IGNORED EVENTS : END --\u003e\n    default:\n      LOG.error(\"Unknown event arrived at\" +\n          \"OpportunisticContainerAllocatorAMService: \" + event.toString());\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "10be45986cdf86a89055065b752959bd6369d54f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5486. Update OpportunisticContainerAllocatorAMService::allocate method to handle OPPORTUNISTIC container requests. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "29/09/16 3:11 PM",
      "commitName": "10be45986cdf86a89055065b752959bd6369d54f",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "09/08/16 12:42 AM",
      "commitNameOld": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 51.6,
      "commitsBetweenForRepo": 319,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,56 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n       nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n-      addToMapping(rackToNode, nodeAddedEvent.getAddedRMNode().getRackName(),\n-          nodeAddedEvent.getAddedRMNode().getNodeID());\n-      addToMapping(hostToNode, nodeAddedEvent.getAddedRMNode().getHostName(),\n-          nodeAddedEvent.getAddedRMNode().getNodeID());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n           (NodeRemovedSchedulerEvent) event;\n       nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n-      removeFromMapping(rackToNode,\n-          nodeRemovedEvent.getRemovedRMNode().getRackName(),\n-          nodeRemovedEvent.getRemovedRMNode().getNodeID());\n-      removeFromMapping(hostToNode,\n-          nodeRemovedEvent.getRemovedRMNode().getHostName(),\n-          nodeRemovedEvent.getRemovedRMNode().getNodeID());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n           event;\n       nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n           (NodeResourceUpdateSchedulerEvent) event;\n       nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n           nodeResourceUpdatedEvent.getResourceOption());\n       break;\n \n     // \u003c-- IGNORED EVENTS : START --\u003e\n     case APP_ADDED:\n       break;\n     case APP_REMOVED:\n       break;\n     case APP_ATTEMPT_ADDED:\n       break;\n     case APP_ATTEMPT_REMOVED:\n       break;\n     case CONTAINER_EXPIRED:\n       break;\n     case NODE_LABELS_UPDATE:\n       break;\n     // \u003c-- IGNORED EVENTS : END --\u003e\n     default:\n       LOG.error(\"Unknown event arrived at\" +\n           \"OpportunisticContainerAllocatorAMService: \" + event.toString());\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n      nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n          (NodeRemovedSchedulerEvent) event;\n      nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n          event;\n      nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n          (NodeResourceUpdateSchedulerEvent) event;\n      nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n          nodeResourceUpdatedEvent.getResourceOption());\n      break;\n\n    // \u003c-- IGNORED EVENTS : START --\u003e\n    case APP_ADDED:\n      break;\n    case APP_REMOVED:\n      break;\n    case APP_ATTEMPT_ADDED:\n      break;\n    case APP_ATTEMPT_REMOVED:\n      break;\n    case CONTAINER_EXPIRED:\n      break;\n    case NODE_LABELS_UPDATE:\n      break;\n    // \u003c-- IGNORED EVENTS : END --\u003e\n    default:\n      LOG.error(\"Unknown event arrived at\" +\n          \"OpportunisticContainerAllocatorAMService: \" + event.toString());\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
      "commitDate": "09/08/16 12:42 AM",
      "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
          "commitDate": "09/08/16 12:42 AM",
          "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "08/08/16 5:54 PM",
          "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,66 +1,66 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n       nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       addToMapping(rackToNode, nodeAddedEvent.getAddedRMNode().getRackName(),\n           nodeAddedEvent.getAddedRMNode().getNodeID());\n       addToMapping(hostToNode, nodeAddedEvent.getAddedRMNode().getHostName(),\n           nodeAddedEvent.getAddedRMNode().getNodeID());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n           (NodeRemovedSchedulerEvent) event;\n       nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n       removeFromMapping(rackToNode,\n           nodeRemovedEvent.getRemovedRMNode().getRackName(),\n           nodeRemovedEvent.getRemovedRMNode().getNodeID());\n       removeFromMapping(hostToNode,\n           nodeRemovedEvent.getRemovedRMNode().getHostName(),\n           nodeRemovedEvent.getRemovedRMNode().getNodeID());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n           event;\n       nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n           (NodeResourceUpdateSchedulerEvent) event;\n       nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n           nodeResourceUpdatedEvent.getResourceOption());\n       break;\n \n     // \u003c-- IGNORED EVENTS : START --\u003e\n     case APP_ADDED:\n       break;\n     case APP_REMOVED:\n       break;\n     case APP_ATTEMPT_ADDED:\n       break;\n     case APP_ATTEMPT_REMOVED:\n       break;\n     case CONTAINER_EXPIRED:\n       break;\n     case NODE_LABELS_UPDATE:\n       break;\n     // \u003c-- IGNORED EVENTS : END --\u003e\n     default:\n-      LOG.error(\"Unknown event arrived at DistributedSchedulingAMService: \"\n-          + event.toString());\n+      LOG.error(\"Unknown event arrived at\" +\n+          \"OpportunisticContainerAllocatorAMService: \" + event.toString());\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n      nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      addToMapping(rackToNode, nodeAddedEvent.getAddedRMNode().getRackName(),\n          nodeAddedEvent.getAddedRMNode().getNodeID());\n      addToMapping(hostToNode, nodeAddedEvent.getAddedRMNode().getHostName(),\n          nodeAddedEvent.getAddedRMNode().getNodeID());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n          (NodeRemovedSchedulerEvent) event;\n      nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n      removeFromMapping(rackToNode,\n          nodeRemovedEvent.getRemovedRMNode().getRackName(),\n          nodeRemovedEvent.getRemovedRMNode().getNodeID());\n      removeFromMapping(hostToNode,\n          nodeRemovedEvent.getRemovedRMNode().getHostName(),\n          nodeRemovedEvent.getRemovedRMNode().getNodeID());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n          event;\n      nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n          (NodeResourceUpdateSchedulerEvent) event;\n      nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n          nodeResourceUpdatedEvent.getResourceOption());\n      break;\n\n    // \u003c-- IGNORED EVENTS : START --\u003e\n    case APP_ADDED:\n      break;\n    case APP_REMOVED:\n      break;\n    case APP_ATTEMPT_ADDED:\n      break;\n    case APP_ATTEMPT_REMOVED:\n      break;\n    case CONTAINER_EXPIRED:\n      break;\n    case NODE_LABELS_UPDATE:\n      break;\n    // \u003c-- IGNORED EVENTS : END --\u003e\n    default:\n      LOG.error(\"Unknown event arrived at\" +\n          \"OpportunisticContainerAllocatorAMService: \" + event.toString());\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
          "commitDate": "09/08/16 12:42 AM",
          "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "08/08/16 5:54 PM",
          "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,66 +1,66 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n       nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       addToMapping(rackToNode, nodeAddedEvent.getAddedRMNode().getRackName(),\n           nodeAddedEvent.getAddedRMNode().getNodeID());\n       addToMapping(hostToNode, nodeAddedEvent.getAddedRMNode().getHostName(),\n           nodeAddedEvent.getAddedRMNode().getNodeID());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n           (NodeRemovedSchedulerEvent) event;\n       nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n       removeFromMapping(rackToNode,\n           nodeRemovedEvent.getRemovedRMNode().getRackName(),\n           nodeRemovedEvent.getRemovedRMNode().getNodeID());\n       removeFromMapping(hostToNode,\n           nodeRemovedEvent.getRemovedRMNode().getHostName(),\n           nodeRemovedEvent.getRemovedRMNode().getNodeID());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n           event;\n       nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n           (NodeResourceUpdateSchedulerEvent) event;\n       nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n           nodeResourceUpdatedEvent.getResourceOption());\n       break;\n \n     // \u003c-- IGNORED EVENTS : START --\u003e\n     case APP_ADDED:\n       break;\n     case APP_REMOVED:\n       break;\n     case APP_ATTEMPT_ADDED:\n       break;\n     case APP_ATTEMPT_REMOVED:\n       break;\n     case CONTAINER_EXPIRED:\n       break;\n     case NODE_LABELS_UPDATE:\n       break;\n     // \u003c-- IGNORED EVENTS : END --\u003e\n     default:\n-      LOG.error(\"Unknown event arrived at DistributedSchedulingAMService: \"\n-          + event.toString());\n+      LOG.error(\"Unknown event arrived at\" +\n+          \"OpportunisticContainerAllocatorAMService: \" + event.toString());\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n      nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      addToMapping(rackToNode, nodeAddedEvent.getAddedRMNode().getRackName(),\n          nodeAddedEvent.getAddedRMNode().getNodeID());\n      addToMapping(hostToNode, nodeAddedEvent.getAddedRMNode().getHostName(),\n          nodeAddedEvent.getAddedRMNode().getNodeID());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n          (NodeRemovedSchedulerEvent) event;\n      nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n      removeFromMapping(rackToNode,\n          nodeRemovedEvent.getRemovedRMNode().getRackName(),\n          nodeRemovedEvent.getRemovedRMNode().getNodeID());\n      removeFromMapping(hostToNode,\n          nodeRemovedEvent.getRemovedRMNode().getHostName(),\n          nodeRemovedEvent.getRemovedRMNode().getNodeID());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n          event;\n      nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n          (NodeResourceUpdateSchedulerEvent) event;\n      nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n          nodeResourceUpdatedEvent.getResourceOption());\n      break;\n\n    // \u003c-- IGNORED EVENTS : START --\u003e\n    case APP_ADDED:\n      break;\n    case APP_REMOVED:\n      break;\n    case APP_ATTEMPT_ADDED:\n      break;\n    case APP_ATTEMPT_REMOVED:\n      break;\n    case CONTAINER_EXPIRED:\n      break;\n    case NODE_LABELS_UPDATE:\n      break;\n    // \u003c-- IGNORED EVENTS : END --\u003e\n    default:\n      LOG.error(\"Unknown event arrived at\" +\n          \"OpportunisticContainerAllocatorAMService: \" + event.toString());\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {}
        }
      ]
    },
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "31/07/16 11:48 AM",
      "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
          "commitDate": "31/07/16 11:48 AM",
          "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "30/07/16 7:29 PM",
          "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,66 +1,66 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n       nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       addToMapping(rackToNode, nodeAddedEvent.getAddedRMNode().getRackName(),\n           nodeAddedEvent.getAddedRMNode().getNodeID());\n       addToMapping(hostToNode, nodeAddedEvent.getAddedRMNode().getHostName(),\n           nodeAddedEvent.getAddedRMNode().getNodeID());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n           (NodeRemovedSchedulerEvent) event;\n       nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n       removeFromMapping(rackToNode,\n           nodeRemovedEvent.getRemovedRMNode().getRackName(),\n           nodeRemovedEvent.getRemovedRMNode().getNodeID());\n       removeFromMapping(hostToNode,\n           nodeRemovedEvent.getRemovedRMNode().getHostName(),\n           nodeRemovedEvent.getRemovedRMNode().getNodeID());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n           event;\n       nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n           (NodeResourceUpdateSchedulerEvent) event;\n       nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n           nodeResourceUpdatedEvent.getResourceOption());\n       break;\n \n     // \u003c-- IGNORED EVENTS : START --\u003e\n     case APP_ADDED:\n       break;\n     case APP_REMOVED:\n       break;\n     case APP_ATTEMPT_ADDED:\n       break;\n     case APP_ATTEMPT_REMOVED:\n       break;\n     case CONTAINER_EXPIRED:\n       break;\n     case NODE_LABELS_UPDATE:\n       break;\n     // \u003c-- IGNORED EVENTS : END --\u003e\n     default:\n-      LOG.error(\"Unknown event arrived at DistributedSchedulingService: \"\n+      LOG.error(\"Unknown event arrived at DistributedSchedulingAMService: \"\n           + event.toString());\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n      nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      addToMapping(rackToNode, nodeAddedEvent.getAddedRMNode().getRackName(),\n          nodeAddedEvent.getAddedRMNode().getNodeID());\n      addToMapping(hostToNode, nodeAddedEvent.getAddedRMNode().getHostName(),\n          nodeAddedEvent.getAddedRMNode().getNodeID());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n          (NodeRemovedSchedulerEvent) event;\n      nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n      removeFromMapping(rackToNode,\n          nodeRemovedEvent.getRemovedRMNode().getRackName(),\n          nodeRemovedEvent.getRemovedRMNode().getNodeID());\n      removeFromMapping(hostToNode,\n          nodeRemovedEvent.getRemovedRMNode().getHostName(),\n          nodeRemovedEvent.getRemovedRMNode().getNodeID());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n          event;\n      nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n          (NodeResourceUpdateSchedulerEvent) event;\n      nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n          nodeResourceUpdatedEvent.getResourceOption());\n      break;\n\n    // \u003c-- IGNORED EVENTS : START --\u003e\n    case APP_ADDED:\n      break;\n    case APP_REMOVED:\n      break;\n    case APP_ATTEMPT_ADDED:\n      break;\n    case APP_ATTEMPT_REMOVED:\n      break;\n    case CONTAINER_EXPIRED:\n      break;\n    case NODE_LABELS_UPDATE:\n      break;\n    // \u003c-- IGNORED EVENTS : END --\u003e\n    default:\n      LOG.error(\"Unknown event arrived at DistributedSchedulingAMService: \"\n          + event.toString());\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
          "commitDate": "31/07/16 11:48 AM",
          "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "30/07/16 7:29 PM",
          "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,66 +1,66 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n       nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       addToMapping(rackToNode, nodeAddedEvent.getAddedRMNode().getRackName(),\n           nodeAddedEvent.getAddedRMNode().getNodeID());\n       addToMapping(hostToNode, nodeAddedEvent.getAddedRMNode().getHostName(),\n           nodeAddedEvent.getAddedRMNode().getNodeID());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n           (NodeRemovedSchedulerEvent) event;\n       nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n       removeFromMapping(rackToNode,\n           nodeRemovedEvent.getRemovedRMNode().getRackName(),\n           nodeRemovedEvent.getRemovedRMNode().getNodeID());\n       removeFromMapping(hostToNode,\n           nodeRemovedEvent.getRemovedRMNode().getHostName(),\n           nodeRemovedEvent.getRemovedRMNode().getNodeID());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n           event;\n       nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n           (NodeResourceUpdateSchedulerEvent) event;\n       nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n           nodeResourceUpdatedEvent.getResourceOption());\n       break;\n \n     // \u003c-- IGNORED EVENTS : START --\u003e\n     case APP_ADDED:\n       break;\n     case APP_REMOVED:\n       break;\n     case APP_ATTEMPT_ADDED:\n       break;\n     case APP_ATTEMPT_REMOVED:\n       break;\n     case CONTAINER_EXPIRED:\n       break;\n     case NODE_LABELS_UPDATE:\n       break;\n     // \u003c-- IGNORED EVENTS : END --\u003e\n     default:\n-      LOG.error(\"Unknown event arrived at DistributedSchedulingService: \"\n+      LOG.error(\"Unknown event arrived at DistributedSchedulingAMService: \"\n           + event.toString());\n     }\n \n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n      nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      addToMapping(rackToNode, nodeAddedEvent.getAddedRMNode().getRackName(),\n          nodeAddedEvent.getAddedRMNode().getNodeID());\n      addToMapping(hostToNode, nodeAddedEvent.getAddedRMNode().getHostName(),\n          nodeAddedEvent.getAddedRMNode().getNodeID());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n          (NodeRemovedSchedulerEvent) event;\n      nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n      removeFromMapping(rackToNode,\n          nodeRemovedEvent.getRemovedRMNode().getRackName(),\n          nodeRemovedEvent.getRemovedRMNode().getNodeID());\n      removeFromMapping(hostToNode,\n          nodeRemovedEvent.getRemovedRMNode().getHostName(),\n          nodeRemovedEvent.getRemovedRMNode().getNodeID());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n          event;\n      nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n          (NodeResourceUpdateSchedulerEvent) event;\n      nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n          nodeResourceUpdatedEvent.getResourceOption());\n      break;\n\n    // \u003c-- IGNORED EVENTS : START --\u003e\n    case APP_ADDED:\n      break;\n    case APP_REMOVED:\n      break;\n    case APP_ATTEMPT_ADDED:\n      break;\n    case APP_ATTEMPT_REMOVED:\n      break;\n    case CONTAINER_EXPIRED:\n      break;\n    case NODE_LABELS_UPDATE:\n      break;\n    // \u003c-- IGNORED EVENTS : END --\u003e\n    default:\n      LOG.error(\"Unknown event arrived at DistributedSchedulingAMService: \"\n          + event.toString());\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java",
          "extendedDetails": {}
        }
      ]
    },
    "f0ac18d001d97914a9ee810b1fab56c5cebff830": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2888. Corrective mechanisms for rebalancing NM container queues. (asuresh)\n",
      "commitDate": "13/05/16 1:38 PM",
      "commitName": "f0ac18d001d97914a9ee810b1fab56c5cebff830",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "26/04/16 8:12 PM",
      "commitNameOld": "341888a0aa23f24458b4e6e34868794b9735c06a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 16.73,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,66 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n-      case NODE_ADDED:\n-        if (!(event instanceof NodeAddedSchedulerEvent)) {\n-          throw new RuntimeException(\"Unexpected event type: \" + event);\n-        }\n-        NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n-        clusterMonitor.addNode(nodeAddedEvent.getContainerReports(),\n-            nodeAddedEvent.getAddedRMNode());\n-        addToMapping(rackToNode, nodeAddedEvent.getAddedRMNode().getRackName(),\n-            nodeAddedEvent.getAddedRMNode().getNodeID());\n-        addToMapping(hostToNode, nodeAddedEvent.getAddedRMNode().getHostName(),\n-            nodeAddedEvent.getAddedRMNode().getNodeID());\n-        break;\n-      case NODE_REMOVED:\n-        if (!(event instanceof NodeRemovedSchedulerEvent)) {\n-          throw new RuntimeException(\"Unexpected event type: \" + event);\n-        }\n-        NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n-            (NodeRemovedSchedulerEvent)event;\n-        clusterMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n-        removeFromMapping(rackToNode,\n-            nodeRemovedEvent.getRemovedRMNode().getRackName(),\n-            nodeRemovedEvent.getRemovedRMNode().getNodeID());\n-        removeFromMapping(hostToNode,\n-            nodeRemovedEvent.getRemovedRMNode().getHostName(),\n-            nodeRemovedEvent.getRemovedRMNode().getNodeID());\n-        break;\n-      case NODE_UPDATE:\n-        if (!(event instanceof NodeUpdateSchedulerEvent)) {\n-          throw new RuntimeException(\"Unexpected event type: \" + event);\n-        }\n-        NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n-        clusterMonitor.nodeUpdate(nodeUpdatedEvent.getRMNode());\n-        break;\n-      case NODE_RESOURCE_UPDATE:\n-        if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n-          throw new RuntimeException(\"Unexpected event type: \" + event);\n-        }\n-        NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n-            (NodeResourceUpdateSchedulerEvent)event;\n-        clusterMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n-            nodeResourceUpdatedEvent.getResourceOption());\n-        break;\n+    case NODE_ADDED:\n+      if (!(event instanceof NodeAddedSchedulerEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n+      nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n+          nodeAddedEvent.getAddedRMNode());\n+      addToMapping(rackToNode, nodeAddedEvent.getAddedRMNode().getRackName(),\n+          nodeAddedEvent.getAddedRMNode().getNodeID());\n+      addToMapping(hostToNode, nodeAddedEvent.getAddedRMNode().getHostName(),\n+          nodeAddedEvent.getAddedRMNode().getNodeID());\n+      break;\n+    case NODE_REMOVED:\n+      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n+          (NodeRemovedSchedulerEvent) event;\n+      nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n+      removeFromMapping(rackToNode,\n+          nodeRemovedEvent.getRemovedRMNode().getRackName(),\n+          nodeRemovedEvent.getRemovedRMNode().getNodeID());\n+      removeFromMapping(hostToNode,\n+          nodeRemovedEvent.getRemovedRMNode().getHostName(),\n+          nodeRemovedEvent.getRemovedRMNode().getNodeID());\n+      break;\n+    case NODE_UPDATE:\n+      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n+          event;\n+      nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n+      break;\n+    case NODE_RESOURCE_UPDATE:\n+      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n+          (NodeResourceUpdateSchedulerEvent) event;\n+      nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n+          nodeResourceUpdatedEvent.getResourceOption());\n+      break;\n \n-      // \u003c-- IGNORED EVENTS : START --\u003e\n-      case APP_ADDED:\n-        break;\n-      case APP_REMOVED:\n-        break;\n-      case APP_ATTEMPT_ADDED:\n-        break;\n-      case APP_ATTEMPT_REMOVED:\n-        break;\n-      case CONTAINER_EXPIRED:\n-        break;\n-      case NODE_LABELS_UPDATE:\n-        break;\n-      // \u003c-- IGNORED EVENTS : END --\u003e\n-      default:\n-        LOG.error(\"Unknown event arrived at DistributedSchedulingService: \"\n-            + event.toString());\n+    // \u003c-- IGNORED EVENTS : START --\u003e\n+    case APP_ADDED:\n+      break;\n+    case APP_REMOVED:\n+      break;\n+    case APP_ATTEMPT_ADDED:\n+      break;\n+    case APP_ATTEMPT_REMOVED:\n+      break;\n+    case CONTAINER_EXPIRED:\n+      break;\n+    case NODE_LABELS_UPDATE:\n+      break;\n+    // \u003c-- IGNORED EVENTS : END --\u003e\n+    default:\n+      LOG.error(\"Unknown event arrived at DistributedSchedulingService: \"\n+          + event.toString());\n     }\n+\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent) event;\n      nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      addToMapping(rackToNode, nodeAddedEvent.getAddedRMNode().getRackName(),\n          nodeAddedEvent.getAddedRMNode().getNodeID());\n      addToMapping(hostToNode, nodeAddedEvent.getAddedRMNode().getHostName(),\n          nodeAddedEvent.getAddedRMNode().getNodeID());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n          (NodeRemovedSchedulerEvent) event;\n      nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n      removeFromMapping(rackToNode,\n          nodeRemovedEvent.getRemovedRMNode().getRackName(),\n          nodeRemovedEvent.getRemovedRMNode().getNodeID());\n      removeFromMapping(hostToNode,\n          nodeRemovedEvent.getRemovedRMNode().getHostName(),\n          nodeRemovedEvent.getRemovedRMNode().getNodeID());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)\n          event;\n      nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n          (NodeResourceUpdateSchedulerEvent) event;\n      nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n          nodeResourceUpdatedEvent.getResourceOption());\n      break;\n\n    // \u003c-- IGNORED EVENTS : START --\u003e\n    case APP_ADDED:\n      break;\n    case APP_REMOVED:\n      break;\n    case APP_ATTEMPT_ADDED:\n      break;\n    case APP_ATTEMPT_REMOVED:\n      break;\n    case CONTAINER_EXPIRED:\n      break;\n    case NODE_LABELS_UPDATE:\n      break;\n    // \u003c-- IGNORED EVENTS : END --\u003e\n    default:\n      LOG.error(\"Unknown event arrived at DistributedSchedulingService: \"\n          + event.toString());\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java",
      "extendedDetails": {}
    },
    "341888a0aa23f24458b4e6e34868794b9735c06a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4412. Create ClusterMonitor to compute ordered list of preferred NMs for OPPORTUNITIC containers. (asuresh)\n",
      "commitDate": "26/04/16 8:12 PM",
      "commitName": "341888a0aa23f24458b4e6e34868794b9735c06a",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,64 @@\n+  public void handle(SchedulerEvent event) {\n+    switch (event.getType()) {\n+      case NODE_ADDED:\n+        if (!(event instanceof NodeAddedSchedulerEvent)) {\n+          throw new RuntimeException(\"Unexpected event type: \" + event);\n+        }\n+        NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n+        clusterMonitor.addNode(nodeAddedEvent.getContainerReports(),\n+            nodeAddedEvent.getAddedRMNode());\n+        addToMapping(rackToNode, nodeAddedEvent.getAddedRMNode().getRackName(),\n+            nodeAddedEvent.getAddedRMNode().getNodeID());\n+        addToMapping(hostToNode, nodeAddedEvent.getAddedRMNode().getHostName(),\n+            nodeAddedEvent.getAddedRMNode().getNodeID());\n+        break;\n+      case NODE_REMOVED:\n+        if (!(event instanceof NodeRemovedSchedulerEvent)) {\n+          throw new RuntimeException(\"Unexpected event type: \" + event);\n+        }\n+        NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n+            (NodeRemovedSchedulerEvent)event;\n+        clusterMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n+        removeFromMapping(rackToNode,\n+            nodeRemovedEvent.getRemovedRMNode().getRackName(),\n+            nodeRemovedEvent.getRemovedRMNode().getNodeID());\n+        removeFromMapping(hostToNode,\n+            nodeRemovedEvent.getRemovedRMNode().getHostName(),\n+            nodeRemovedEvent.getRemovedRMNode().getNodeID());\n+        break;\n+      case NODE_UPDATE:\n+        if (!(event instanceof NodeUpdateSchedulerEvent)) {\n+          throw new RuntimeException(\"Unexpected event type: \" + event);\n+        }\n+        NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n+        clusterMonitor.nodeUpdate(nodeUpdatedEvent.getRMNode());\n+        break;\n+      case NODE_RESOURCE_UPDATE:\n+        if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n+          throw new RuntimeException(\"Unexpected event type: \" + event);\n+        }\n+        NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n+            (NodeResourceUpdateSchedulerEvent)event;\n+        clusterMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n+            nodeResourceUpdatedEvent.getResourceOption());\n+        break;\n+\n+      // \u003c-- IGNORED EVENTS : START --\u003e\n+      case APP_ADDED:\n+        break;\n+      case APP_REMOVED:\n+        break;\n+      case APP_ATTEMPT_ADDED:\n+        break;\n+      case APP_ATTEMPT_REMOVED:\n+        break;\n+      case CONTAINER_EXPIRED:\n+        break;\n+      case NODE_LABELS_UPDATE:\n+        break;\n+      // \u003c-- IGNORED EVENTS : END --\u003e\n+      default:\n+        LOG.error(\"Unknown event arrived at DistributedSchedulingService: \"\n+            + event.toString());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n      case NODE_ADDED:\n        if (!(event instanceof NodeAddedSchedulerEvent)) {\n          throw new RuntimeException(\"Unexpected event type: \" + event);\n        }\n        NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n        clusterMonitor.addNode(nodeAddedEvent.getContainerReports(),\n            nodeAddedEvent.getAddedRMNode());\n        addToMapping(rackToNode, nodeAddedEvent.getAddedRMNode().getRackName(),\n            nodeAddedEvent.getAddedRMNode().getNodeID());\n        addToMapping(hostToNode, nodeAddedEvent.getAddedRMNode().getHostName(),\n            nodeAddedEvent.getAddedRMNode().getNodeID());\n        break;\n      case NODE_REMOVED:\n        if (!(event instanceof NodeRemovedSchedulerEvent)) {\n          throw new RuntimeException(\"Unexpected event type: \" + event);\n        }\n        NodeRemovedSchedulerEvent nodeRemovedEvent \u003d\n            (NodeRemovedSchedulerEvent)event;\n        clusterMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());\n        removeFromMapping(rackToNode,\n            nodeRemovedEvent.getRemovedRMNode().getRackName(),\n            nodeRemovedEvent.getRemovedRMNode().getNodeID());\n        removeFromMapping(hostToNode,\n            nodeRemovedEvent.getRemovedRMNode().getHostName(),\n            nodeRemovedEvent.getRemovedRMNode().getNodeID());\n        break;\n      case NODE_UPDATE:\n        if (!(event instanceof NodeUpdateSchedulerEvent)) {\n          throw new RuntimeException(\"Unexpected event type: \" + event);\n        }\n        NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n        clusterMonitor.nodeUpdate(nodeUpdatedEvent.getRMNode());\n        break;\n      case NODE_RESOURCE_UPDATE:\n        if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n          throw new RuntimeException(\"Unexpected event type: \" + event);\n        }\n        NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d\n            (NodeResourceUpdateSchedulerEvent)event;\n        clusterMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n            nodeResourceUpdatedEvent.getResourceOption());\n        break;\n\n      // \u003c-- IGNORED EVENTS : START --\u003e\n      case APP_ADDED:\n        break;\n      case APP_REMOVED:\n        break;\n      case APP_ATTEMPT_ADDED:\n        break;\n      case APP_ATTEMPT_REMOVED:\n        break;\n      case CONTAINER_EXPIRED:\n        break;\n      case NODE_LABELS_UPDATE:\n        break;\n      // \u003c-- IGNORED EVENTS : END --\u003e\n      default:\n        LOG.error(\"Unknown event arrived at DistributedSchedulingService: \"\n            + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java"
    }
  }
}