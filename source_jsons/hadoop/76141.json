{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CBZip2OutputStream.java",
  "functionName": "generateMTFValues",
  "functionId": "generateMTFValues",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
  "functionStartLine": 1929,
  "functionEndLine": 2030,
  "numCommitsSeen": 7,
  "timeTaken": 1038,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void generateMTFValues() {\n    final int lastShadow \u003d this.last;\n    final Data dataShadow \u003d this.data;\n    final boolean[] inUse \u003d dataShadow.inUse;\n    final byte[] block \u003d dataShadow.block;\n    final int[] fmap \u003d dataShadow.fmap;\n    final char[] sfmap \u003d dataShadow.sfmap;\n    final int[] mtfFreq \u003d dataShadow.mtfFreq;\n    final byte[] unseqToSeq \u003d dataShadow.unseqToSeq;\n    final byte[] yy \u003d dataShadow.generateMTFValues_yy;\n\n    // make maps\n    int nInUseShadow \u003d 0;\n    for (int i \u003d 0; i \u003c 256; i++) {\n      if (inUse[i]) {\n        unseqToSeq[i] \u003d (byte) nInUseShadow;\n        nInUseShadow++;\n      }\n    }\n    this.nInUse \u003d nInUseShadow;\n\n    final int eob \u003d nInUseShadow + 1;\n\n    for (int i \u003d eob; i \u003e\u003d 0; i--) {\n      mtfFreq[i] \u003d 0;\n    }\n\n    for (int i \u003d nInUseShadow; --i \u003e\u003d 0;) {\n      yy[i] \u003d (byte) i;\n    }\n\n    int wr \u003d 0;\n    int zPend \u003d 0;\n\n    for (int i \u003d 0; i \u003c\u003d lastShadow; i++) {\n      final byte ll_i \u003d unseqToSeq[block[fmap[i]] \u0026 0xff];\n      byte tmp \u003d yy[0];\n      int j \u003d 0;\n\n      while (ll_i !\u003d tmp) {\n        j++;\n        byte tmp2 \u003d tmp;\n        tmp \u003d yy[j];\n        yy[j] \u003d tmp2;\n      }\n      yy[0] \u003d tmp;\n\n      if (j \u003d\u003d 0) {\n        zPend++;\n      } else {\n        if (zPend \u003e 0) {\n          zPend--;\n          while (true) {\n            if ((zPend \u0026 1) \u003d\u003d 0) {\n              sfmap[wr] \u003d RUNA;\n              wr++;\n              mtfFreq[RUNA]++;\n            } else {\n              sfmap[wr] \u003d RUNB;\n              wr++;\n              mtfFreq[RUNB]++;\n            }\n\n            if (zPend \u003e\u003d 2) {\n              zPend \u003d (zPend - 2) \u003e\u003e 1;\n            } else {\n              break;\n            }\n          }\n          zPend \u003d 0;\n        }\n        sfmap[wr] \u003d (char) (j + 1);\n        wr++;\n        mtfFreq[j + 1]++;\n      }\n    }\n\n    if (zPend \u003e 0) {\n      zPend--;\n      while (true) {\n        if ((zPend \u0026 1) \u003d\u003d 0) {\n          sfmap[wr] \u003d RUNA;\n          wr++;\n          mtfFreq[RUNA]++;\n        } else {\n          sfmap[wr] \u003d RUNB;\n          wr++;\n          mtfFreq[RUNB]++;\n        }\n\n        if (zPend \u003e\u003d 2) {\n          zPend \u003d (zPend - 2) \u003e\u003e 1;\n        } else {\n          break;\n        }\n      }\n    }\n\n    sfmap[wr] \u003d (char) eob;\n    mtfFreq[eob]++;\n    this.nMTF \u003d wr + 1;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void generateMTFValues() {\n    final int lastShadow \u003d this.last;\n    final Data dataShadow \u003d this.data;\n    final boolean[] inUse \u003d dataShadow.inUse;\n    final byte[] block \u003d dataShadow.block;\n    final int[] fmap \u003d dataShadow.fmap;\n    final char[] sfmap \u003d dataShadow.sfmap;\n    final int[] mtfFreq \u003d dataShadow.mtfFreq;\n    final byte[] unseqToSeq \u003d dataShadow.unseqToSeq;\n    final byte[] yy \u003d dataShadow.generateMTFValues_yy;\n\n    // make maps\n    int nInUseShadow \u003d 0;\n    for (int i \u003d 0; i \u003c 256; i++) {\n      if (inUse[i]) {\n        unseqToSeq[i] \u003d (byte) nInUseShadow;\n        nInUseShadow++;\n      }\n    }\n    this.nInUse \u003d nInUseShadow;\n\n    final int eob \u003d nInUseShadow + 1;\n\n    for (int i \u003d eob; i \u003e\u003d 0; i--) {\n      mtfFreq[i] \u003d 0;\n    }\n\n    for (int i \u003d nInUseShadow; --i \u003e\u003d 0;) {\n      yy[i] \u003d (byte) i;\n    }\n\n    int wr \u003d 0;\n    int zPend \u003d 0;\n\n    for (int i \u003d 0; i \u003c\u003d lastShadow; i++) {\n      final byte ll_i \u003d unseqToSeq[block[fmap[i]] \u0026 0xff];\n      byte tmp \u003d yy[0];\n      int j \u003d 0;\n\n      while (ll_i !\u003d tmp) {\n        j++;\n        byte tmp2 \u003d tmp;\n        tmp \u003d yy[j];\n        yy[j] \u003d tmp2;\n      }\n      yy[0] \u003d tmp;\n\n      if (j \u003d\u003d 0) {\n        zPend++;\n      } else {\n        if (zPend \u003e 0) {\n          zPend--;\n          while (true) {\n            if ((zPend \u0026 1) \u003d\u003d 0) {\n              sfmap[wr] \u003d RUNA;\n              wr++;\n              mtfFreq[RUNA]++;\n            } else {\n              sfmap[wr] \u003d RUNB;\n              wr++;\n              mtfFreq[RUNB]++;\n            }\n\n            if (zPend \u003e\u003d 2) {\n              zPend \u003d (zPend - 2) \u003e\u003e 1;\n            } else {\n              break;\n            }\n          }\n          zPend \u003d 0;\n        }\n        sfmap[wr] \u003d (char) (j + 1);\n        wr++;\n        mtfFreq[j + 1]++;\n      }\n    }\n\n    if (zPend \u003e 0) {\n      zPend--;\n      while (true) {\n        if ((zPend \u0026 1) \u003d\u003d 0) {\n          sfmap[wr] \u003d RUNA;\n          wr++;\n          mtfFreq[RUNA]++;\n        } else {\n          sfmap[wr] \u003d RUNB;\n          wr++;\n          mtfFreq[RUNB]++;\n        }\n\n        if (zPend \u003e\u003d 2) {\n          zPend \u003d (zPend - 2) \u003e\u003e 1;\n        } else {\n          break;\n        }\n      }\n    }\n\n    sfmap[wr] \u003d (char) eob;\n    mtfFreq[eob]++;\n    this.nMTF \u003d wr + 1;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void generateMTFValues() {\n    final int lastShadow \u003d this.last;\n    final Data dataShadow \u003d this.data;\n    final boolean[] inUse \u003d dataShadow.inUse;\n    final byte[] block \u003d dataShadow.block;\n    final int[] fmap \u003d dataShadow.fmap;\n    final char[] sfmap \u003d dataShadow.sfmap;\n    final int[] mtfFreq \u003d dataShadow.mtfFreq;\n    final byte[] unseqToSeq \u003d dataShadow.unseqToSeq;\n    final byte[] yy \u003d dataShadow.generateMTFValues_yy;\n\n    // make maps\n    int nInUseShadow \u003d 0;\n    for (int i \u003d 0; i \u003c 256; i++) {\n      if (inUse[i]) {\n        unseqToSeq[i] \u003d (byte) nInUseShadow;\n        nInUseShadow++;\n      }\n    }\n    this.nInUse \u003d nInUseShadow;\n\n    final int eob \u003d nInUseShadow + 1;\n\n    for (int i \u003d eob; i \u003e\u003d 0; i--) {\n      mtfFreq[i] \u003d 0;\n    }\n\n    for (int i \u003d nInUseShadow; --i \u003e\u003d 0;) {\n      yy[i] \u003d (byte) i;\n    }\n\n    int wr \u003d 0;\n    int zPend \u003d 0;\n\n    for (int i \u003d 0; i \u003c\u003d lastShadow; i++) {\n      final byte ll_i \u003d unseqToSeq[block[fmap[i]] \u0026 0xff];\n      byte tmp \u003d yy[0];\n      int j \u003d 0;\n\n      while (ll_i !\u003d tmp) {\n        j++;\n        byte tmp2 \u003d tmp;\n        tmp \u003d yy[j];\n        yy[j] \u003d tmp2;\n      }\n      yy[0] \u003d tmp;\n\n      if (j \u003d\u003d 0) {\n        zPend++;\n      } else {\n        if (zPend \u003e 0) {\n          zPend--;\n          while (true) {\n            if ((zPend \u0026 1) \u003d\u003d 0) {\n              sfmap[wr] \u003d RUNA;\n              wr++;\n              mtfFreq[RUNA]++;\n            } else {\n              sfmap[wr] \u003d RUNB;\n              wr++;\n              mtfFreq[RUNB]++;\n            }\n\n            if (zPend \u003e\u003d 2) {\n              zPend \u003d (zPend - 2) \u003e\u003e 1;\n            } else {\n              break;\n            }\n          }\n          zPend \u003d 0;\n        }\n        sfmap[wr] \u003d (char) (j + 1);\n        wr++;\n        mtfFreq[j + 1]++;\n      }\n    }\n\n    if (zPend \u003e 0) {\n      zPend--;\n      while (true) {\n        if ((zPend \u0026 1) \u003d\u003d 0) {\n          sfmap[wr] \u003d RUNA;\n          wr++;\n          mtfFreq[RUNA]++;\n        } else {\n          sfmap[wr] \u003d RUNB;\n          wr++;\n          mtfFreq[RUNB]++;\n        }\n\n        if (zPend \u003e\u003d 2) {\n          zPend \u003d (zPend - 2) \u003e\u003e 1;\n        } else {\n          break;\n        }\n      }\n    }\n\n    sfmap[wr] \u003d (char) eob;\n    mtfFreq[eob]++;\n    this.nMTF \u003d wr + 1;\n  }",
      "path": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
        "newPath": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,102 @@\n+  private void generateMTFValues() {\n+    final int lastShadow \u003d this.last;\n+    final Data dataShadow \u003d this.data;\n+    final boolean[] inUse \u003d dataShadow.inUse;\n+    final byte[] block \u003d dataShadow.block;\n+    final int[] fmap \u003d dataShadow.fmap;\n+    final char[] sfmap \u003d dataShadow.sfmap;\n+    final int[] mtfFreq \u003d dataShadow.mtfFreq;\n+    final byte[] unseqToSeq \u003d dataShadow.unseqToSeq;\n+    final byte[] yy \u003d dataShadow.generateMTFValues_yy;\n+\n+    // make maps\n+    int nInUseShadow \u003d 0;\n+    for (int i \u003d 0; i \u003c 256; i++) {\n+      if (inUse[i]) {\n+        unseqToSeq[i] \u003d (byte) nInUseShadow;\n+        nInUseShadow++;\n+      }\n+    }\n+    this.nInUse \u003d nInUseShadow;\n+\n+    final int eob \u003d nInUseShadow + 1;\n+\n+    for (int i \u003d eob; i \u003e\u003d 0; i--) {\n+      mtfFreq[i] \u003d 0;\n+    }\n+\n+    for (int i \u003d nInUseShadow; --i \u003e\u003d 0;) {\n+      yy[i] \u003d (byte) i;\n+    }\n+\n+    int wr \u003d 0;\n+    int zPend \u003d 0;\n+\n+    for (int i \u003d 0; i \u003c\u003d lastShadow; i++) {\n+      final byte ll_i \u003d unseqToSeq[block[fmap[i]] \u0026 0xff];\n+      byte tmp \u003d yy[0];\n+      int j \u003d 0;\n+\n+      while (ll_i !\u003d tmp) {\n+        j++;\n+        byte tmp2 \u003d tmp;\n+        tmp \u003d yy[j];\n+        yy[j] \u003d tmp2;\n+      }\n+      yy[0] \u003d tmp;\n+\n+      if (j \u003d\u003d 0) {\n+        zPend++;\n+      } else {\n+        if (zPend \u003e 0) {\n+          zPend--;\n+          while (true) {\n+            if ((zPend \u0026 1) \u003d\u003d 0) {\n+              sfmap[wr] \u003d RUNA;\n+              wr++;\n+              mtfFreq[RUNA]++;\n+            } else {\n+              sfmap[wr] \u003d RUNB;\n+              wr++;\n+              mtfFreq[RUNB]++;\n+            }\n+\n+            if (zPend \u003e\u003d 2) {\n+              zPend \u003d (zPend - 2) \u003e\u003e 1;\n+            } else {\n+              break;\n+            }\n+          }\n+          zPend \u003d 0;\n+        }\n+        sfmap[wr] \u003d (char) (j + 1);\n+        wr++;\n+        mtfFreq[j + 1]++;\n+      }\n+    }\n+\n+    if (zPend \u003e 0) {\n+      zPend--;\n+      while (true) {\n+        if ((zPend \u0026 1) \u003d\u003d 0) {\n+          sfmap[wr] \u003d RUNA;\n+          wr++;\n+          mtfFreq[RUNA]++;\n+        } else {\n+          sfmap[wr] \u003d RUNB;\n+          wr++;\n+          mtfFreq[RUNB]++;\n+        }\n+\n+        if (zPend \u003e\u003d 2) {\n+          zPend \u003d (zPend - 2) \u003e\u003e 1;\n+        } else {\n+          break;\n+        }\n+      }\n+    }\n+\n+    sfmap[wr] \u003d (char) eob;\n+    mtfFreq[eob]++;\n+    this.nMTF \u003d wr + 1;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void generateMTFValues() {\n    final int lastShadow \u003d this.last;\n    final Data dataShadow \u003d this.data;\n    final boolean[] inUse \u003d dataShadow.inUse;\n    final byte[] block \u003d dataShadow.block;\n    final int[] fmap \u003d dataShadow.fmap;\n    final char[] sfmap \u003d dataShadow.sfmap;\n    final int[] mtfFreq \u003d dataShadow.mtfFreq;\n    final byte[] unseqToSeq \u003d dataShadow.unseqToSeq;\n    final byte[] yy \u003d dataShadow.generateMTFValues_yy;\n\n    // make maps\n    int nInUseShadow \u003d 0;\n    for (int i \u003d 0; i \u003c 256; i++) {\n      if (inUse[i]) {\n        unseqToSeq[i] \u003d (byte) nInUseShadow;\n        nInUseShadow++;\n      }\n    }\n    this.nInUse \u003d nInUseShadow;\n\n    final int eob \u003d nInUseShadow + 1;\n\n    for (int i \u003d eob; i \u003e\u003d 0; i--) {\n      mtfFreq[i] \u003d 0;\n    }\n\n    for (int i \u003d nInUseShadow; --i \u003e\u003d 0;) {\n      yy[i] \u003d (byte) i;\n    }\n\n    int wr \u003d 0;\n    int zPend \u003d 0;\n\n    for (int i \u003d 0; i \u003c\u003d lastShadow; i++) {\n      final byte ll_i \u003d unseqToSeq[block[fmap[i]] \u0026 0xff];\n      byte tmp \u003d yy[0];\n      int j \u003d 0;\n\n      while (ll_i !\u003d tmp) {\n        j++;\n        byte tmp2 \u003d tmp;\n        tmp \u003d yy[j];\n        yy[j] \u003d tmp2;\n      }\n      yy[0] \u003d tmp;\n\n      if (j \u003d\u003d 0) {\n        zPend++;\n      } else {\n        if (zPend \u003e 0) {\n          zPend--;\n          while (true) {\n            if ((zPend \u0026 1) \u003d\u003d 0) {\n              sfmap[wr] \u003d RUNA;\n              wr++;\n              mtfFreq[RUNA]++;\n            } else {\n              sfmap[wr] \u003d RUNB;\n              wr++;\n              mtfFreq[RUNB]++;\n            }\n\n            if (zPend \u003e\u003d 2) {\n              zPend \u003d (zPend - 2) \u003e\u003e 1;\n            } else {\n              break;\n            }\n          }\n          zPend \u003d 0;\n        }\n        sfmap[wr] \u003d (char) (j + 1);\n        wr++;\n        mtfFreq[j + 1]++;\n      }\n    }\n\n    if (zPend \u003e 0) {\n      zPend--;\n      while (true) {\n        if ((zPend \u0026 1) \u003d\u003d 0) {\n          sfmap[wr] \u003d RUNA;\n          wr++;\n          mtfFreq[RUNA]++;\n        } else {\n          sfmap[wr] \u003d RUNB;\n          wr++;\n          mtfFreq[RUNB]++;\n        }\n\n        if (zPend \u003e\u003d 2) {\n          zPend \u003d (zPend - 2) \u003e\u003e 1;\n        } else {\n          break;\n        }\n      }\n    }\n\n    sfmap[wr] \u003d (char) eob;\n    mtfFreq[eob]++;\n    this.nMTF \u003d wr + 1;\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java"
    }
  }
}