{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileDeletionTask.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/deletion/task/FileDeletionTask.java",
  "functionStartLine": 97,
  "functionEndLine": 147,
  "numCommitsSeen": 20,
  "timeTaken": 10981,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "547f18cb96aeda55cc19b38be2be4d631b3a5f4f",
    "310aa4686eb697f0700a71d33106514c404dab1b",
    "53fafcf061616516c24e2e2007a66a93d23d3e25",
    "af0d2fc3e343e5db82c2398d31de85c47b239e35",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "02a81203bd0ff6116e3c68d376b3af3838231986",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "547f18cb96aeda55cc19b38be2be4d631b3a5f4f": "Ymultichange(Ymovefromfile,Ybodychange)",
    "310aa4686eb697f0700a71d33106514c404dab1b": "Ybodychange",
    "53fafcf061616516c24e2e2007a66a93d23d3e25": "Ybodychange",
    "af0d2fc3e343e5db82c2398d31de85c47b239e35": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "02a81203bd0ff6116e3c68d376b3af3838231986": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymultichange(Ymovefromfile,Ybodychange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "31/05/17 3:45 AM",
      "commitNameOld": "547f18cb96aeda55cc19b38be2be4d631b3a5f4f",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 653.52,
      "commitsBetweenForRepo": 5445,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,51 @@\n   public void run() {\n-    if (LOG.isDebugEnabled()) {\n-      String msg \u003d String.format(\"Running DeletionTask : %s\", toString());\n-      LOG.debug(msg);\n-    }\n+    LOG.debug(\"Running DeletionTask : {}\", this);\n     boolean error \u003d false;\n     if (null \u003d\u003d getUser()) {\n       if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"NM deleting absolute path : \" + subDir);\n-        }\n+        LOG.debug(\"NM deleting absolute path : {}\", subDir);\n         try {\n           lfs.delete(subDir, true);\n         } catch (IOException e) {\n           error \u003d true;\n           LOG.warn(\"Failed to delete \" + subDir);\n         }\n       } else {\n         for (Path baseDir : baseDirs) {\n           Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"NM deleting path : \" + del);\n-          }\n+          LOG.debug(\"NM deleting path : {}\", del);\n           try {\n             lfs.delete(del, true);\n           } catch (IOException e) {\n             error \u003d true;\n             LOG.warn(\"Failed to delete \" + subDir);\n           }\n         }\n       }\n     } else {\n       try {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\n-              \"Deleting path: [\" + subDir + \"] as user: [\" + getUser() + \"]\");\n-        }\n+        LOG.debug(\"Deleting path: [{}] as user [{}]\", subDir, getUser());\n         if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n           getDeletionService().getContainerExecutor().deleteAsUser(\n               new DeletionAsUserContext.Builder()\n               .setUser(getUser())\n               .setSubDir(subDir)\n               .build());\n         } else {\n           getDeletionService().getContainerExecutor().deleteAsUser(\n               new DeletionAsUserContext.Builder()\n               .setUser(getUser())\n               .setSubDir(subDir)\n               .setBasedirs(baseDirs.toArray(new Path[0]))\n               .build());\n         }\n       } catch (IOException|InterruptedException e) {\n         error \u003d true;\n         LOG.warn(\"Failed to delete as user \" + getUser(), e);\n       }\n     }\n     if (error) {\n       setSuccess(!error);\n     }\n     deletionTaskFinished();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    LOG.debug(\"Running DeletionTask : {}\", this);\n    boolean error \u003d false;\n    if (null \u003d\u003d getUser()) {\n      if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n        LOG.debug(\"NM deleting absolute path : {}\", subDir);\n        try {\n          lfs.delete(subDir, true);\n        } catch (IOException e) {\n          error \u003d true;\n          LOG.warn(\"Failed to delete \" + subDir);\n        }\n      } else {\n        for (Path baseDir : baseDirs) {\n          Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n          LOG.debug(\"NM deleting path : {}\", del);\n          try {\n            lfs.delete(del, true);\n          } catch (IOException e) {\n            error \u003d true;\n            LOG.warn(\"Failed to delete \" + subDir);\n          }\n        }\n      }\n    } else {\n      try {\n        LOG.debug(\"Deleting path: [{}] as user [{}]\", subDir, getUser());\n        if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n          getDeletionService().getContainerExecutor().deleteAsUser(\n              new DeletionAsUserContext.Builder()\n              .setUser(getUser())\n              .setSubDir(subDir)\n              .build());\n        } else {\n          getDeletionService().getContainerExecutor().deleteAsUser(\n              new DeletionAsUserContext.Builder()\n              .setUser(getUser())\n              .setSubDir(subDir)\n              .setBasedirs(baseDirs.toArray(new Path[0]))\n              .build());\n        }\n      } catch (IOException|InterruptedException e) {\n        error \u003d true;\n        LOG.warn(\"Failed to delete as user \" + getUser(), e);\n      }\n    }\n    if (error) {\n      setSuccess(!error);\n    }\n    deletionTaskFinished();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/deletion/task/FileDeletionTask.java",
      "extendedDetails": {}
    },
    "547f18cb96aeda55cc19b38be2be4d631b3a5f4f": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-6366. Refactor the NodeManager DeletionService to support additional DeletionTask types. Contributed by Shane Kumpf.\n",
      "commitDate": "31/05/17 3:45 AM",
      "commitName": "547f18cb96aeda55cc19b38be2be4d631b3a5f4f",
      "commitAuthor": "Varun Vasudev",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-6366. Refactor the NodeManager DeletionService to support additional DeletionTask types. Contributed by Shane Kumpf.\n",
          "commitDate": "31/05/17 3:45 AM",
          "commitName": "547f18cb96aeda55cc19b38be2be4d631b3a5f4f",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "30/05/17 4:58 PM",
          "commitNameOld": "4b4a6524f2df3a891e9d5486ec39f7987766d84f",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,61 @@\n-    public void run() {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(this);\n-      }\n-      boolean error \u003d false;\n-      if (null \u003d\u003d user) {\n-        if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n+  public void run() {\n+    if (LOG.isDebugEnabled()) {\n+      String msg \u003d String.format(\"Running DeletionTask : %s\", toString());\n+      LOG.debug(msg);\n+    }\n+    boolean error \u003d false;\n+    if (null \u003d\u003d getUser()) {\n+      if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"NM deleting absolute path : \" + subDir);\n+        }\n+        try {\n+          lfs.delete(subDir, true);\n+        } catch (IOException e) {\n+          error \u003d true;\n+          LOG.warn(\"Failed to delete \" + subDir);\n+        }\n+      } else {\n+        for (Path baseDir : baseDirs) {\n+          Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n           if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"NM deleting absolute path : \" + subDir);\n+            LOG.debug(\"NM deleting path : \" + del);\n           }\n           try {\n-            lfs.delete(subDir, true);\n+            lfs.delete(del, true);\n           } catch (IOException e) {\n             error \u003d true;\n             LOG.warn(\"Failed to delete \" + subDir);\n           }\n+        }\n+      }\n+    } else {\n+      try {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\n+              \"Deleting path: [\" + subDir + \"] as user: [\" + getUser() + \"]\");\n+        }\n+        if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n+          getDeletionService().getContainerExecutor().deleteAsUser(\n+              new DeletionAsUserContext.Builder()\n+              .setUser(getUser())\n+              .setSubDir(subDir)\n+              .build());\n         } else {\n-          for (Path baseDir : baseDirs) {\n-            Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"NM deleting path : \" + del);\n-            }\n-            try {\n-              lfs.delete(del, true);\n-            } catch (IOException e) {\n-              error \u003d true;\n-              LOG.warn(\"Failed to delete \" + subDir);\n-            }\n-          }\n+          getDeletionService().getContainerExecutor().deleteAsUser(\n+              new DeletionAsUserContext.Builder()\n+              .setUser(getUser())\n+              .setSubDir(subDir)\n+              .setBasedirs(baseDirs.toArray(new Path[0]))\n+              .build());\n         }\n-      } else {\n-        try {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\n-                \"Deleting path: [\" + subDir + \"] as user: [\" + user + \"]\");\n-          }\n-          if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n-            delService.exec.deleteAsUser(new DeletionAsUserContext.Builder()\n-                .setUser(user)\n-                .setSubDir(subDir)\n-                .build());\n-          } else {\n-            delService.exec.deleteAsUser(new DeletionAsUserContext.Builder()\n-                .setUser(user)\n-                .setSubDir(subDir)\n-                .setBasedirs(baseDirs.toArray(new Path[0]))\n-                .build());\n-          }\n-        } catch (IOException e) {\n-          error \u003d true;\n-          LOG.warn(\"Failed to delete as user \" + user, e);\n-        } catch (InterruptedException e) {\n-          error \u003d true;\n-          LOG.warn(\"Failed to delete as user \" + user, e);\n-        }\n+      } catch (IOException|InterruptedException e) {\n+        error \u003d true;\n+        LOG.warn(\"Failed to delete as user \" + getUser(), e);\n       }\n-      if (error) {\n-        setSuccess(!error);        \n-      }\n-      fileDeletionTaskFinished();\n-    }\n\\ No newline at end of file\n+    }\n+    if (error) {\n+      setSuccess(!error);\n+    }\n+    deletionTaskFinished();\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public void run() {\n    if (LOG.isDebugEnabled()) {\n      String msg \u003d String.format(\"Running DeletionTask : %s\", toString());\n      LOG.debug(msg);\n    }\n    boolean error \u003d false;\n    if (null \u003d\u003d getUser()) {\n      if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"NM deleting absolute path : \" + subDir);\n        }\n        try {\n          lfs.delete(subDir, true);\n        } catch (IOException e) {\n          error \u003d true;\n          LOG.warn(\"Failed to delete \" + subDir);\n        }\n      } else {\n        for (Path baseDir : baseDirs) {\n          Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"NM deleting path : \" + del);\n          }\n          try {\n            lfs.delete(del, true);\n          } catch (IOException e) {\n            error \u003d true;\n            LOG.warn(\"Failed to delete \" + subDir);\n          }\n        }\n      }\n    } else {\n      try {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"Deleting path: [\" + subDir + \"] as user: [\" + getUser() + \"]\");\n        }\n        if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n          getDeletionService().getContainerExecutor().deleteAsUser(\n              new DeletionAsUserContext.Builder()\n              .setUser(getUser())\n              .setSubDir(subDir)\n              .build());\n        } else {\n          getDeletionService().getContainerExecutor().deleteAsUser(\n              new DeletionAsUserContext.Builder()\n              .setUser(getUser())\n              .setSubDir(subDir)\n              .setBasedirs(baseDirs.toArray(new Path[0]))\n              .build());\n        }\n      } catch (IOException|InterruptedException e) {\n        error \u003d true;\n        LOG.warn(\"Failed to delete as user \" + getUser(), e);\n      }\n    }\n    if (error) {\n      setSuccess(!error);\n    }\n    deletionTaskFinished();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/deletion/task/FileDeletionTask.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/deletion/task/FileDeletionTask.java",
            "oldMethodName": "run",
            "newMethodName": "run"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6366. Refactor the NodeManager DeletionService to support additional DeletionTask types. Contributed by Shane Kumpf.\n",
          "commitDate": "31/05/17 3:45 AM",
          "commitName": "547f18cb96aeda55cc19b38be2be4d631b3a5f4f",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "30/05/17 4:58 PM",
          "commitNameOld": "4b4a6524f2df3a891e9d5486ec39f7987766d84f",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,61 @@\n-    public void run() {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(this);\n-      }\n-      boolean error \u003d false;\n-      if (null \u003d\u003d user) {\n-        if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n+  public void run() {\n+    if (LOG.isDebugEnabled()) {\n+      String msg \u003d String.format(\"Running DeletionTask : %s\", toString());\n+      LOG.debug(msg);\n+    }\n+    boolean error \u003d false;\n+    if (null \u003d\u003d getUser()) {\n+      if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"NM deleting absolute path : \" + subDir);\n+        }\n+        try {\n+          lfs.delete(subDir, true);\n+        } catch (IOException e) {\n+          error \u003d true;\n+          LOG.warn(\"Failed to delete \" + subDir);\n+        }\n+      } else {\n+        for (Path baseDir : baseDirs) {\n+          Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n           if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"NM deleting absolute path : \" + subDir);\n+            LOG.debug(\"NM deleting path : \" + del);\n           }\n           try {\n-            lfs.delete(subDir, true);\n+            lfs.delete(del, true);\n           } catch (IOException e) {\n             error \u003d true;\n             LOG.warn(\"Failed to delete \" + subDir);\n           }\n+        }\n+      }\n+    } else {\n+      try {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\n+              \"Deleting path: [\" + subDir + \"] as user: [\" + getUser() + \"]\");\n+        }\n+        if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n+          getDeletionService().getContainerExecutor().deleteAsUser(\n+              new DeletionAsUserContext.Builder()\n+              .setUser(getUser())\n+              .setSubDir(subDir)\n+              .build());\n         } else {\n-          for (Path baseDir : baseDirs) {\n-            Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"NM deleting path : \" + del);\n-            }\n-            try {\n-              lfs.delete(del, true);\n-            } catch (IOException e) {\n-              error \u003d true;\n-              LOG.warn(\"Failed to delete \" + subDir);\n-            }\n-          }\n+          getDeletionService().getContainerExecutor().deleteAsUser(\n+              new DeletionAsUserContext.Builder()\n+              .setUser(getUser())\n+              .setSubDir(subDir)\n+              .setBasedirs(baseDirs.toArray(new Path[0]))\n+              .build());\n         }\n-      } else {\n-        try {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\n-                \"Deleting path: [\" + subDir + \"] as user: [\" + user + \"]\");\n-          }\n-          if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n-            delService.exec.deleteAsUser(new DeletionAsUserContext.Builder()\n-                .setUser(user)\n-                .setSubDir(subDir)\n-                .build());\n-          } else {\n-            delService.exec.deleteAsUser(new DeletionAsUserContext.Builder()\n-                .setUser(user)\n-                .setSubDir(subDir)\n-                .setBasedirs(baseDirs.toArray(new Path[0]))\n-                .build());\n-          }\n-        } catch (IOException e) {\n-          error \u003d true;\n-          LOG.warn(\"Failed to delete as user \" + user, e);\n-        } catch (InterruptedException e) {\n-          error \u003d true;\n-          LOG.warn(\"Failed to delete as user \" + user, e);\n-        }\n+      } catch (IOException|InterruptedException e) {\n+        error \u003d true;\n+        LOG.warn(\"Failed to delete as user \" + getUser(), e);\n       }\n-      if (error) {\n-        setSuccess(!error);        \n-      }\n-      fileDeletionTaskFinished();\n-    }\n\\ No newline at end of file\n+    }\n+    if (error) {\n+      setSuccess(!error);\n+    }\n+    deletionTaskFinished();\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public void run() {\n    if (LOG.isDebugEnabled()) {\n      String msg \u003d String.format(\"Running DeletionTask : %s\", toString());\n      LOG.debug(msg);\n    }\n    boolean error \u003d false;\n    if (null \u003d\u003d getUser()) {\n      if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"NM deleting absolute path : \" + subDir);\n        }\n        try {\n          lfs.delete(subDir, true);\n        } catch (IOException e) {\n          error \u003d true;\n          LOG.warn(\"Failed to delete \" + subDir);\n        }\n      } else {\n        for (Path baseDir : baseDirs) {\n          Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"NM deleting path : \" + del);\n          }\n          try {\n            lfs.delete(del, true);\n          } catch (IOException e) {\n            error \u003d true;\n            LOG.warn(\"Failed to delete \" + subDir);\n          }\n        }\n      }\n    } else {\n      try {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"Deleting path: [\" + subDir + \"] as user: [\" + getUser() + \"]\");\n        }\n        if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n          getDeletionService().getContainerExecutor().deleteAsUser(\n              new DeletionAsUserContext.Builder()\n              .setUser(getUser())\n              .setSubDir(subDir)\n              .build());\n        } else {\n          getDeletionService().getContainerExecutor().deleteAsUser(\n              new DeletionAsUserContext.Builder()\n              .setUser(getUser())\n              .setSubDir(subDir)\n              .setBasedirs(baseDirs.toArray(new Path[0]))\n              .build());\n        }\n      } catch (IOException|InterruptedException e) {\n        error \u003d true;\n        LOG.warn(\"Failed to delete as user \" + getUser(), e);\n      }\n    }\n    if (error) {\n      setSuccess(!error);\n    }\n    deletionTaskFinished();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/deletion/task/FileDeletionTask.java",
          "extendedDetails": {}
        }
      ]
    },
    "310aa4686eb697f0700a71d33106514c404dab1b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5805. Add isDebugEnabled check for debug logs in nodemanager (Bibin A Chundatt via Varun Saxena)\n",
      "commitDate": "01/11/16 2:21 AM",
      "commitName": "310aa4686eb697f0700a71d33106514c404dab1b",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/02/16 10:36 PM",
      "commitNameOld": "fa00d3e20560bee412b49e5792595749a247a8ab",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 264.11,
      "commitsBetweenForRepo": 1889,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,61 @@\n     public void run() {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(this);\n       }\n       boolean error \u003d false;\n       if (null \u003d\u003d user) {\n         if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n-          LOG.debug(\"NM deleting absolute path : \" + subDir);\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"NM deleting absolute path : \" + subDir);\n+          }\n           try {\n             lfs.delete(subDir, true);\n           } catch (IOException e) {\n             error \u003d true;\n             LOG.warn(\"Failed to delete \" + subDir);\n           }\n         } else {\n           for (Path baseDir : baseDirs) {\n             Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n-            LOG.debug(\"NM deleting path : \" + del);\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"NM deleting path : \" + del);\n+            }\n             try {\n               lfs.delete(del, true);\n             } catch (IOException e) {\n               error \u003d true;\n               LOG.warn(\"Failed to delete \" + subDir);\n             }\n           }\n         }\n       } else {\n         try {\n-          LOG.debug(\"Deleting path: [\" + subDir + \"] as user: [\" + user + \"]\");\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\n+                \"Deleting path: [\" + subDir + \"] as user: [\" + user + \"]\");\n+          }\n           if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n             delService.exec.deleteAsUser(new DeletionAsUserContext.Builder()\n                 .setUser(user)\n                 .setSubDir(subDir)\n                 .build());\n           } else {\n             delService.exec.deleteAsUser(new DeletionAsUserContext.Builder()\n                 .setUser(user)\n                 .setSubDir(subDir)\n                 .setBasedirs(baseDirs.toArray(new Path[0]))\n                 .build());\n           }\n         } catch (IOException e) {\n           error \u003d true;\n           LOG.warn(\"Failed to delete as user \" + user, e);\n         } catch (InterruptedException e) {\n           error \u003d true;\n           LOG.warn(\"Failed to delete as user \" + user, e);\n         }\n       }\n       if (error) {\n         setSuccess(!error);        \n       }\n       fileDeletionTaskFinished();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(this);\n      }\n      boolean error \u003d false;\n      if (null \u003d\u003d user) {\n        if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"NM deleting absolute path : \" + subDir);\n          }\n          try {\n            lfs.delete(subDir, true);\n          } catch (IOException e) {\n            error \u003d true;\n            LOG.warn(\"Failed to delete \" + subDir);\n          }\n        } else {\n          for (Path baseDir : baseDirs) {\n            Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"NM deleting path : \" + del);\n            }\n            try {\n              lfs.delete(del, true);\n            } catch (IOException e) {\n              error \u003d true;\n              LOG.warn(\"Failed to delete \" + subDir);\n            }\n          }\n        }\n      } else {\n        try {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\n                \"Deleting path: [\" + subDir + \"] as user: [\" + user + \"]\");\n          }\n          if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n            delService.exec.deleteAsUser(new DeletionAsUserContext.Builder()\n                .setUser(user)\n                .setSubDir(subDir)\n                .build());\n          } else {\n            delService.exec.deleteAsUser(new DeletionAsUserContext.Builder()\n                .setUser(user)\n                .setSubDir(subDir)\n                .setBasedirs(baseDirs.toArray(new Path[0]))\n                .build());\n          }\n        } catch (IOException e) {\n          error \u003d true;\n          LOG.warn(\"Failed to delete as user \" + user, e);\n        } catch (InterruptedException e) {\n          error \u003d true;\n          LOG.warn(\"Failed to delete as user \" + user, e);\n        }\n      }\n      if (error) {\n        setSuccess(!error);        \n      }\n      fileDeletionTaskFinished();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java",
      "extendedDetails": {}
    },
    "53fafcf061616516c24e2e2007a66a93d23d3e25": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3684. Changed ContainerExecutor\u0027s primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.\n",
      "commitDate": "21/05/15 3:50 PM",
      "commitName": "53fafcf061616516c24e2e2007a66a93d23d3e25",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/02/15 8:54 AM",
      "commitNameOld": "4eb5f7fa32bab1b9ce3fb58eca51e2cd2e194cd5",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 100.25,
      "commitsBetweenForRepo": 990,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,54 @@\n     public void run() {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(this);\n       }\n       boolean error \u003d false;\n       if (null \u003d\u003d user) {\n         if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n           LOG.debug(\"NM deleting absolute path : \" + subDir);\n           try {\n             lfs.delete(subDir, true);\n           } catch (IOException e) {\n             error \u003d true;\n             LOG.warn(\"Failed to delete \" + subDir);\n           }\n         } else {\n           for (Path baseDir : baseDirs) {\n             Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n             LOG.debug(\"NM deleting path : \" + del);\n             try {\n               lfs.delete(del, true);\n             } catch (IOException e) {\n               error \u003d true;\n               LOG.warn(\"Failed to delete \" + subDir);\n             }\n           }\n         }\n       } else {\n         try {\n           LOG.debug(\"Deleting path: [\" + subDir + \"] as user: [\" + user + \"]\");\n           if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n-            delService.exec.deleteAsUser(user, subDir, (Path[])null);\n+            delService.exec.deleteAsUser(new DeletionAsUserContext.Builder()\n+                .setUser(user)\n+                .setSubDir(subDir)\n+                .build());\n           } else {\n-            delService.exec.deleteAsUser(user, subDir,\n-              baseDirs.toArray(new Path[0]));\n+            delService.exec.deleteAsUser(new DeletionAsUserContext.Builder()\n+                .setUser(user)\n+                .setSubDir(subDir)\n+                .setBasedirs(baseDirs.toArray(new Path[0]))\n+                .build());\n           }\n         } catch (IOException e) {\n           error \u003d true;\n           LOG.warn(\"Failed to delete as user \" + user, e);\n         } catch (InterruptedException e) {\n           error \u003d true;\n           LOG.warn(\"Failed to delete as user \" + user, e);\n         }\n       }\n       if (error) {\n         setSuccess(!error);        \n       }\n       fileDeletionTaskFinished();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(this);\n      }\n      boolean error \u003d false;\n      if (null \u003d\u003d user) {\n        if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n          LOG.debug(\"NM deleting absolute path : \" + subDir);\n          try {\n            lfs.delete(subDir, true);\n          } catch (IOException e) {\n            error \u003d true;\n            LOG.warn(\"Failed to delete \" + subDir);\n          }\n        } else {\n          for (Path baseDir : baseDirs) {\n            Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n            LOG.debug(\"NM deleting path : \" + del);\n            try {\n              lfs.delete(del, true);\n            } catch (IOException e) {\n              error \u003d true;\n              LOG.warn(\"Failed to delete \" + subDir);\n            }\n          }\n        }\n      } else {\n        try {\n          LOG.debug(\"Deleting path: [\" + subDir + \"] as user: [\" + user + \"]\");\n          if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n            delService.exec.deleteAsUser(new DeletionAsUserContext.Builder()\n                .setUser(user)\n                .setSubDir(subDir)\n                .build());\n          } else {\n            delService.exec.deleteAsUser(new DeletionAsUserContext.Builder()\n                .setUser(user)\n                .setSubDir(subDir)\n                .setBasedirs(baseDirs.toArray(new Path[0]))\n                .build());\n          }\n        } catch (IOException e) {\n          error \u003d true;\n          LOG.warn(\"Failed to delete as user \" + user, e);\n        } catch (InterruptedException e) {\n          error \u003d true;\n          LOG.warn(\"Failed to delete as user \" + user, e);\n        }\n      }\n      if (error) {\n        setSuccess(!error);        \n      }\n      fileDeletionTaskFinished();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java",
      "extendedDetails": {}
    },
    "af0d2fc3e343e5db82c2398d31de85c47b239e35": {
      "type": "Ybodychange",
      "commitMessage": "YARN-661. Fixed NM to cleanup users\u0027 local directories correctly when starting up. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503942 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 4:31 PM",
      "commitName": "af0d2fc3e343e5db82c2398d31de85c47b239e35",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/06/13 11:39 PM",
      "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 29.7,
      "commitsBetweenForRepo": 158,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,48 @@\n     public void run() {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(this);\n+      }\n+      boolean error \u003d false;\n       if (null \u003d\u003d user) {\n-        if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n+        if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n           LOG.debug(\"NM deleting absolute path : \" + subDir);\n           try {\n             lfs.delete(subDir, true);\n           } catch (IOException e) {\n+            error \u003d true;\n             LOG.warn(\"Failed to delete \" + subDir);\n           }\n-          return;\n-        }\n-        for (Path baseDir : baseDirs) {\n-          Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n-          LOG.debug(\"NM deleting path : \" + del);\n-          try {\n-            lfs.delete(del, true);\n-          } catch (IOException e) {\n-            LOG.warn(\"Failed to delete \" + subDir);\n+        } else {\n+          for (Path baseDir : baseDirs) {\n+            Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n+            LOG.debug(\"NM deleting path : \" + del);\n+            try {\n+              lfs.delete(del, true);\n+            } catch (IOException e) {\n+              error \u003d true;\n+              LOG.warn(\"Failed to delete \" + subDir);\n+            }\n           }\n         }\n       } else {\n         try {\n           LOG.debug(\"Deleting path: [\" + subDir + \"] as user: [\" + user + \"]\");\n-          exec.deleteAsUser(user, subDir, baseDirs);\n+          if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n+            delService.exec.deleteAsUser(user, subDir, (Path[])null);\n+          } else {\n+            delService.exec.deleteAsUser(user, subDir,\n+              baseDirs.toArray(new Path[0]));\n+          }\n         } catch (IOException e) {\n+          error \u003d true;\n           LOG.warn(\"Failed to delete as user \" + user, e);\n         } catch (InterruptedException e) {\n+          error \u003d true;\n           LOG.warn(\"Failed to delete as user \" + user, e);\n         }\n       }\n+      if (error) {\n+        setSuccess(!error);        \n+      }\n+      fileDeletionTaskFinished();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(this);\n      }\n      boolean error \u003d false;\n      if (null \u003d\u003d user) {\n        if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n          LOG.debug(\"NM deleting absolute path : \" + subDir);\n          try {\n            lfs.delete(subDir, true);\n          } catch (IOException e) {\n            error \u003d true;\n            LOG.warn(\"Failed to delete \" + subDir);\n          }\n        } else {\n          for (Path baseDir : baseDirs) {\n            Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n            LOG.debug(\"NM deleting path : \" + del);\n            try {\n              lfs.delete(del, true);\n            } catch (IOException e) {\n              error \u003d true;\n              LOG.warn(\"Failed to delete \" + subDir);\n            }\n          }\n        }\n      } else {\n        try {\n          LOG.debug(\"Deleting path: [\" + subDir + \"] as user: [\" + user + \"]\");\n          if (baseDirs \u003d\u003d null || baseDirs.size() \u003d\u003d 0) {\n            delService.exec.deleteAsUser(user, subDir, (Path[])null);\n          } else {\n            delService.exec.deleteAsUser(user, subDir,\n              baseDirs.toArray(new Path[0]));\n          }\n        } catch (IOException e) {\n          error \u003d true;\n          LOG.warn(\"Failed to delete as user \" + user, e);\n        } catch (InterruptedException e) {\n          error \u003d true;\n          LOG.warn(\"Failed to delete as user \" + user, e);\n        }\n      }\n      if (error) {\n        setSuccess(!error);        \n      }\n      fileDeletionTaskFinished();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      if (null \u003d\u003d user) {\n        if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n          LOG.debug(\"NM deleting absolute path : \" + subDir);\n          try {\n            lfs.delete(subDir, true);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to delete \" + subDir);\n          }\n          return;\n        }\n        for (Path baseDir : baseDirs) {\n          Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n          LOG.debug(\"NM deleting path : \" + del);\n          try {\n            lfs.delete(del, true);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to delete \" + subDir);\n          }\n        }\n      } else {\n        try {\n          LOG.debug(\"Deleting path: [\" + subDir + \"] as user: [\" + user + \"]\");\n          exec.deleteAsUser(user, subDir, baseDirs);\n        } catch (IOException e) {\n          LOG.warn(\"Failed to delete as user \" + user, e);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Failed to delete as user \" + user, e);\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java"
      }
    },
    "02a81203bd0ff6116e3c68d376b3af3838231986": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2751. Modified NodeManager to stop leaving around local files after application finishes. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1180071 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/10/11 8:23 AM",
      "commitName": "02a81203bd0ff6116e3c68d376b3af3838231986",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "08/09/11 6:44 PM",
      "commitNameOld": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 28.57,
      "commitsBetweenForRepo": 203,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n     public void run() {\n       if (null \u003d\u003d user) {\n         if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n           LOG.debug(\"NM deleting absolute path : \" + subDir);\n           try {\n             lfs.delete(subDir, true);\n           } catch (IOException e) {\n             LOG.warn(\"Failed to delete \" + subDir);\n           }\n           return;\n         }\n         for (Path baseDir : baseDirs) {\n           Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n           LOG.debug(\"NM deleting path : \" + del);\n           try {\n             lfs.delete(del, true);\n           } catch (IOException e) {\n             LOG.warn(\"Failed to delete \" + subDir);\n           }\n         }\n       } else {\n         try {\n+          LOG.debug(\"Deleting path: [\" + subDir + \"] as user: [\" + user + \"]\");\n           exec.deleteAsUser(user, subDir, baseDirs);\n         } catch (IOException e) {\n           LOG.warn(\"Failed to delete as user \" + user, e);\n         } catch (InterruptedException e) {\n           LOG.warn(\"Failed to delete as user \" + user, e);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (null \u003d\u003d user) {\n        if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n          LOG.debug(\"NM deleting absolute path : \" + subDir);\n          try {\n            lfs.delete(subDir, true);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to delete \" + subDir);\n          }\n          return;\n        }\n        for (Path baseDir : baseDirs) {\n          Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n          LOG.debug(\"NM deleting path : \" + del);\n          try {\n            lfs.delete(del, true);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to delete \" + subDir);\n          }\n        }\n      } else {\n        try {\n          LOG.debug(\"Deleting path: [\" + subDir + \"] as user: [\" + user + \"]\");\n          exec.deleteAsUser(user, subDir, baseDirs);\n        } catch (IOException e) {\n          LOG.warn(\"Failed to delete as user \" + user, e);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Failed to delete as user \" + user, e);\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      if (null \u003d\u003d user) {\n        if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n          LOG.debug(\"NM deleting absolute path : \" + subDir);\n          try {\n            lfs.delete(subDir, true);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to delete \" + subDir);\n          }\n          return;\n        }\n        for (Path baseDir : baseDirs) {\n          Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n          LOG.debug(\"NM deleting path : \" + del);\n          try {\n            lfs.delete(del, true);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to delete \" + subDir);\n          }\n        }\n      } else {\n        try {\n          exec.deleteAsUser(user, subDir, baseDirs);\n        } catch (IOException e) {\n          LOG.warn(\"Failed to delete as user \" + user, e);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Failed to delete as user \" + user, e);\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,30 @@\n-  public void run() {\n-    int failures \u003d 0;\n-    LOG.info(reduce + \" Thread started: \" + getName());\n-    \n-    try {\n-      while (true) {\n+    public void run() {\n+      if (null \u003d\u003d user) {\n+        if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n+          LOG.debug(\"NM deleting absolute path : \" + subDir);\n+          try {\n+            lfs.delete(subDir, true);\n+          } catch (IOException e) {\n+            LOG.warn(\"Failed to delete \" + subDir);\n+          }\n+          return;\n+        }\n+        for (Path baseDir : baseDirs) {\n+          Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n+          LOG.debug(\"NM deleting path : \" + del);\n+          try {\n+            lfs.delete(del, true);\n+          } catch (IOException e) {\n+            LOG.warn(\"Failed to delete \" + subDir);\n+          }\n+        }\n+      } else {\n         try {\n-          int numNewMaps \u003d getMapCompletionEvents();\n-          failures \u003d 0;\n-          if (numNewMaps \u003e 0) {\n-            LOG.info(reduce + \": \" + \"Got \" + numNewMaps + \" new map-outputs\");\n-          }\n-          LOG.debug(\"GetMapEventsThread about to sleep for \" + SLEEP_TIME);\n-          Thread.sleep(SLEEP_TIME);\n-        } catch (IOException ie) {\n-          LOG.info(\"Exception in getting events\", ie);\n-          // check to see whether to abort\n-          if (++failures \u003e\u003d MAX_RETRIES) {\n-            throw new IOException(\"too many failures downloading events\", ie);\n-          }\n-          // sleep for a bit\n-          Thread.sleep(RETRY_PERIOD);\n+          exec.deleteAsUser(user, subDir, baseDirs);\n+        } catch (IOException e) {\n+          LOG.warn(\"Failed to delete as user \" + user, e);\n+        } catch (InterruptedException e) {\n+          LOG.warn(\"Failed to delete as user \" + user, e);\n         }\n       }\n-    } catch (InterruptedException e) {\n-      return;\n-    } catch (Throwable t) {\n-      exceptionReporter.reportException(t);\n-      return;\n-    }\n-  }\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void run() {\n      if (null \u003d\u003d user) {\n        if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n          LOG.debug(\"NM deleting absolute path : \" + subDir);\n          try {\n            lfs.delete(subDir, true);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to delete \" + subDir);\n          }\n          return;\n        }\n        for (Path baseDir : baseDirs) {\n          Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n          LOG.debug(\"NM deleting path : \" + del);\n          try {\n            lfs.delete(del, true);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to delete \" + subDir);\n          }\n        }\n      } else {\n        try {\n          exec.deleteAsUser(user, subDir, baseDirs);\n        } catch (IOException e) {\n          LOG.warn(\"Failed to delete as user \" + user, e);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Failed to delete as user \" + user, e);\n        }\n      }\n    }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java",
          "extendedDetails": {
            "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/EventFetcher.java",
            "newPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java",
            "oldMethodName": "run",
            "newMethodName": "run"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,30 @@\n-  public void run() {\n-    int failures \u003d 0;\n-    LOG.info(reduce + \" Thread started: \" + getName());\n-    \n-    try {\n-      while (true) {\n+    public void run() {\n+      if (null \u003d\u003d user) {\n+        if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n+          LOG.debug(\"NM deleting absolute path : \" + subDir);\n+          try {\n+            lfs.delete(subDir, true);\n+          } catch (IOException e) {\n+            LOG.warn(\"Failed to delete \" + subDir);\n+          }\n+          return;\n+        }\n+        for (Path baseDir : baseDirs) {\n+          Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n+          LOG.debug(\"NM deleting path : \" + del);\n+          try {\n+            lfs.delete(del, true);\n+          } catch (IOException e) {\n+            LOG.warn(\"Failed to delete \" + subDir);\n+          }\n+        }\n+      } else {\n         try {\n-          int numNewMaps \u003d getMapCompletionEvents();\n-          failures \u003d 0;\n-          if (numNewMaps \u003e 0) {\n-            LOG.info(reduce + \": \" + \"Got \" + numNewMaps + \" new map-outputs\");\n-          }\n-          LOG.debug(\"GetMapEventsThread about to sleep for \" + SLEEP_TIME);\n-          Thread.sleep(SLEEP_TIME);\n-        } catch (IOException ie) {\n-          LOG.info(\"Exception in getting events\", ie);\n-          // check to see whether to abort\n-          if (++failures \u003e\u003d MAX_RETRIES) {\n-            throw new IOException(\"too many failures downloading events\", ie);\n-          }\n-          // sleep for a bit\n-          Thread.sleep(RETRY_PERIOD);\n+          exec.deleteAsUser(user, subDir, baseDirs);\n+        } catch (IOException e) {\n+          LOG.warn(\"Failed to delete as user \" + user, e);\n+        } catch (InterruptedException e) {\n+          LOG.warn(\"Failed to delete as user \" + user, e);\n         }\n       }\n-    } catch (InterruptedException e) {\n-      return;\n-    } catch (Throwable t) {\n-      exceptionReporter.reportException(t);\n-      return;\n-    }\n-  }\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void run() {\n      if (null \u003d\u003d user) {\n        if (baseDirs \u003d\u003d null || baseDirs.length \u003d\u003d 0) {\n          LOG.debug(\"NM deleting absolute path : \" + subDir);\n          try {\n            lfs.delete(subDir, true);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to delete \" + subDir);\n          }\n          return;\n        }\n        for (Path baseDir : baseDirs) {\n          Path del \u003d subDir \u003d\u003d null? baseDir : new Path(baseDir, subDir);\n          LOG.debug(\"NM deleting path : \" + del);\n          try {\n            lfs.delete(del, true);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to delete \" + subDir);\n          }\n        }\n      } else {\n        try {\n          exec.deleteAsUser(user, subDir, baseDirs);\n        } catch (IOException e) {\n          LOG.warn(\"Failed to delete as user \" + user, e);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Failed to delete as user \" + user, e);\n        }\n      }\n    }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DeletionService.java",
          "extendedDetails": {}
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,31 @@\n+  public void run() {\n+    int failures \u003d 0;\n+    LOG.info(reduce + \" Thread started: \" + getName());\n+    \n+    try {\n+      while (true) {\n+        try {\n+          int numNewMaps \u003d getMapCompletionEvents();\n+          failures \u003d 0;\n+          if (numNewMaps \u003e 0) {\n+            LOG.info(reduce + \": \" + \"Got \" + numNewMaps + \" new map-outputs\");\n+          }\n+          LOG.debug(\"GetMapEventsThread about to sleep for \" + SLEEP_TIME);\n+          Thread.sleep(SLEEP_TIME);\n+        } catch (IOException ie) {\n+          LOG.info(\"Exception in getting events\", ie);\n+          // check to see whether to abort\n+          if (++failures \u003e\u003d MAX_RETRIES) {\n+            throw new IOException(\"too many failures downloading events\", ie);\n+          }\n+          // sleep for a bit\n+          Thread.sleep(RETRY_PERIOD);\n+        }\n+      }\n+    } catch (InterruptedException e) {\n+      return;\n+    } catch (Throwable t) {\n+      exceptionReporter.reportException(t);\n+      return;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    int failures \u003d 0;\n    LOG.info(reduce + \" Thread started: \" + getName());\n    \n    try {\n      while (true) {\n        try {\n          int numNewMaps \u003d getMapCompletionEvents();\n          failures \u003d 0;\n          if (numNewMaps \u003e 0) {\n            LOG.info(reduce + \": \" + \"Got \" + numNewMaps + \" new map-outputs\");\n          }\n          LOG.debug(\"GetMapEventsThread about to sleep for \" + SLEEP_TIME);\n          Thread.sleep(SLEEP_TIME);\n        } catch (IOException ie) {\n          LOG.info(\"Exception in getting events\", ie);\n          // check to see whether to abort\n          if (++failures \u003e\u003d MAX_RETRIES) {\n            throw new IOException(\"too many failures downloading events\", ie);\n          }\n          // sleep for a bit\n          Thread.sleep(RETRY_PERIOD);\n        }\n      }\n    } catch (InterruptedException e) {\n      return;\n    } catch (Throwable t) {\n      exceptionReporter.reportException(t);\n      return;\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/EventFetcher.java"
    }
  }
}