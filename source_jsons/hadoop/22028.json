{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OnDiskMapOutput.java",
  "functionName": "doShuffle",
  "functionId": "doShuffle___host-MapHost__input-IFileInputStream__compressedLength-long__decompressedLength-long__metrics-ShuffleClientMetrics__reporter-Reporter",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/OnDiskMapOutput.java",
  "functionStartLine": 96,
  "functionEndLine": 139,
  "numCommitsSeen": 31,
  "timeTaken": 7252,
  "changeHistory": [
    "178751ed8c9d47038acf8616c226f1f52e884feb",
    "d90c13e2da8867661bf19a802add70145ab9a462",
    "af006937e8ba82f98f468dc7375fe89c2e0a7912",
    "df68c56267ca7dfbfee4b241bc84325d1760d12d",
    "73fd247c7649919350ecfd16806af57ffe554649",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "178751ed8c9d47038acf8616c226f1f52e884feb": "Ybodychange",
    "d90c13e2da8867661bf19a802add70145ab9a462": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "af006937e8ba82f98f468dc7375fe89c2e0a7912": "Ybodychange",
    "df68c56267ca7dfbfee4b241bc84325d1760d12d": "Ybodychange",
    "73fd247c7649919350ecfd16806af57ffe554649": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "178751ed8c9d47038acf8616c226f1f52e884feb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6983. Moving logging APIs over to slf4j in hadoop-mapreduce-client-core. Contributed by Jinjiang Ling.\n",
      "commitDate": "02/11/17 1:43 AM",
      "commitName": "178751ed8c9d47038acf8616c226f1f52e884feb",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "03/06/15 4:50 PM",
      "commitNameOld": "d90c13e2da8867661bf19a802add70145ab9a462",
      "commitAuthorOld": "Gera Shegalov",
      "daysBetweenCommits": 882.37,
      "commitsBetweenForRepo": 5914,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   protected void doShuffle(MapHost host, IFileInputStream input,\n                       long compressedLength, long decompressedLength,\n                       ShuffleClientMetrics metrics,\n                       Reporter reporter) throws IOException {\n     // Copy data to local-disk\n     long bytesLeft \u003d compressedLength;\n     try {\n       final int BYTES_TO_READ \u003d 64 * 1024;\n       byte[] buf \u003d new byte[BYTES_TO_READ];\n       while (bytesLeft \u003e 0) {\n         int n \u003d input.readWithChecksum(buf, 0,\n                                       (int) Math.min(bytesLeft, BYTES_TO_READ));\n         if (n \u003c 0) {\n           throw new IOException(\"read past end of stream reading \" + \n                                 getMapId());\n         }\n         disk.write(buf, 0, n);\n         bytesLeft -\u003d n;\n         metrics.inputBytes(n);\n         reporter.progress();\n       }\n \n       LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n                \" bytes from map-output for \" + getMapId());\n \n       disk.close();\n     } catch (IOException ioe) {\n       // Close the streams\n-      IOUtils.cleanup(LOG, disk);\n+      IOUtils.cleanupWithLogger(LOG, disk);\n \n       // Re-throw\n       throw ioe;\n     }\n \n     // Sanity check\n     if (bytesLeft !\u003d 0) {\n       throw new IOException(\"Incomplete map output received for \" +\n                             getMapId() + \" from \" +\n                             host.getHostName() + \" (\" + \n                             bytesLeft + \" bytes missing of \" + \n                             compressedLength + \")\");\n     }\n     this.compressedSize \u003d compressedLength;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doShuffle(MapHost host, IFileInputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    // Copy data to local-disk\n    long bytesLeft \u003d compressedLength;\n    try {\n      final int BYTES_TO_READ \u003d 64 * 1024;\n      byte[] buf \u003d new byte[BYTES_TO_READ];\n      while (bytesLeft \u003e 0) {\n        int n \u003d input.readWithChecksum(buf, 0,\n                                      (int) Math.min(bytesLeft, BYTES_TO_READ));\n        if (n \u003c 0) {\n          throw new IOException(\"read past end of stream reading \" + \n                                getMapId());\n        }\n        disk.write(buf, 0, n);\n        bytesLeft -\u003d n;\n        metrics.inputBytes(n);\n        reporter.progress();\n      }\n\n      LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n               \" bytes from map-output for \" + getMapId());\n\n      disk.close();\n    } catch (IOException ioe) {\n      // Close the streams\n      IOUtils.cleanupWithLogger(LOG, disk);\n\n      // Re-throw\n      throw ioe;\n    }\n\n    // Sanity check\n    if (bytesLeft !\u003d 0) {\n      throw new IOException(\"Incomplete map output received for \" +\n                            getMapId() + \" from \" +\n                            host.getHostName() + \" (\" + \n                            bytesLeft + \" bytes missing of \" + \n                            compressedLength + \")\");\n    }\n    this.compressedSize \u003d compressedLength;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/OnDiskMapOutput.java",
      "extendedDetails": {}
    },
    "d90c13e2da8867661bf19a802add70145ab9a462": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-6174. Combine common stream code into parent class for InMemoryMapOutput and OnDiskMapOutput. (Eric Payne via gera)\n",
      "commitDate": "03/06/15 4:50 PM",
      "commitName": "d90c13e2da8867661bf19a802add70145ab9a462",
      "commitAuthor": "Gera Shegalov",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "MAPREDUCE-6174. Combine common stream code into parent class for InMemoryMapOutput and OnDiskMapOutput. (Eric Payne via gera)\n",
          "commitDate": "03/06/15 4:50 PM",
          "commitName": "d90c13e2da8867661bf19a802add70145ab9a462",
          "commitAuthor": "Gera Shegalov",
          "commitDateOld": "15/12/14 7:08 PM",
          "commitNameOld": "af006937e8ba82f98f468dc7375fe89c2e0a7912",
          "commitAuthorOld": "Gera Shegalov",
          "daysBetweenCommits": 169.86,
          "commitsBetweenForRepo": 1454,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,44 @@\n-  public void shuffle(MapHost host, InputStream input,\n+  protected void doShuffle(MapHost host, IFileInputStream input,\n                       long compressedLength, long decompressedLength,\n                       ShuffleClientMetrics metrics,\n                       Reporter reporter) throws IOException {\n-    input \u003d new IFileInputStream(input, compressedLength, conf);\n     // Copy data to local-disk\n     long bytesLeft \u003d compressedLength;\n     try {\n       final int BYTES_TO_READ \u003d 64 * 1024;\n       byte[] buf \u003d new byte[BYTES_TO_READ];\n       while (bytesLeft \u003e 0) {\n-        int n \u003d ((IFileInputStream)input).readWithChecksum(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n+        int n \u003d input.readWithChecksum(buf, 0,\n+                                      (int) Math.min(bytesLeft, BYTES_TO_READ));\n         if (n \u003c 0) {\n           throw new IOException(\"read past end of stream reading \" + \n                                 getMapId());\n         }\n         disk.write(buf, 0, n);\n         bytesLeft -\u003d n;\n         metrics.inputBytes(n);\n         reporter.progress();\n       }\n \n       LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n                \" bytes from map-output for \" + getMapId());\n \n       disk.close();\n     } catch (IOException ioe) {\n       // Close the streams\n-      IOUtils.cleanup(LOG, input, disk);\n+      IOUtils.cleanup(LOG, disk);\n \n       // Re-throw\n       throw ioe;\n     }\n \n     // Sanity check\n     if (bytesLeft !\u003d 0) {\n       throw new IOException(\"Incomplete map output received for \" +\n                             getMapId() + \" from \" +\n                             host.getHostName() + \" (\" + \n                             bytesLeft + \" bytes missing of \" + \n                             compressedLength + \")\");\n     }\n     this.compressedSize \u003d compressedLength;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void doShuffle(MapHost host, IFileInputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    // Copy data to local-disk\n    long bytesLeft \u003d compressedLength;\n    try {\n      final int BYTES_TO_READ \u003d 64 * 1024;\n      byte[] buf \u003d new byte[BYTES_TO_READ];\n      while (bytesLeft \u003e 0) {\n        int n \u003d input.readWithChecksum(buf, 0,\n                                      (int) Math.min(bytesLeft, BYTES_TO_READ));\n        if (n \u003c 0) {\n          throw new IOException(\"read past end of stream reading \" + \n                                getMapId());\n        }\n        disk.write(buf, 0, n);\n        bytesLeft -\u003d n;\n        metrics.inputBytes(n);\n        reporter.progress();\n      }\n\n      LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n               \" bytes from map-output for \" + getMapId());\n\n      disk.close();\n    } catch (IOException ioe) {\n      // Close the streams\n      IOUtils.cleanup(LOG, disk);\n\n      // Re-throw\n      throw ioe;\n    }\n\n    // Sanity check\n    if (bytesLeft !\u003d 0) {\n      throw new IOException(\"Incomplete map output received for \" +\n                            getMapId() + \" from \" +\n                            host.getHostName() + \" (\" + \n                            bytesLeft + \" bytes missing of \" + \n                            compressedLength + \")\");\n    }\n    this.compressedSize \u003d compressedLength;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/OnDiskMapOutput.java",
          "extendedDetails": {
            "oldValue": "shuffle",
            "newValue": "doShuffle"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-6174. Combine common stream code into parent class for InMemoryMapOutput and OnDiskMapOutput. (Eric Payne via gera)\n",
          "commitDate": "03/06/15 4:50 PM",
          "commitName": "d90c13e2da8867661bf19a802add70145ab9a462",
          "commitAuthor": "Gera Shegalov",
          "commitDateOld": "15/12/14 7:08 PM",
          "commitNameOld": "af006937e8ba82f98f468dc7375fe89c2e0a7912",
          "commitAuthorOld": "Gera Shegalov",
          "daysBetweenCommits": 169.86,
          "commitsBetweenForRepo": 1454,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,44 @@\n-  public void shuffle(MapHost host, InputStream input,\n+  protected void doShuffle(MapHost host, IFileInputStream input,\n                       long compressedLength, long decompressedLength,\n                       ShuffleClientMetrics metrics,\n                       Reporter reporter) throws IOException {\n-    input \u003d new IFileInputStream(input, compressedLength, conf);\n     // Copy data to local-disk\n     long bytesLeft \u003d compressedLength;\n     try {\n       final int BYTES_TO_READ \u003d 64 * 1024;\n       byte[] buf \u003d new byte[BYTES_TO_READ];\n       while (bytesLeft \u003e 0) {\n-        int n \u003d ((IFileInputStream)input).readWithChecksum(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n+        int n \u003d input.readWithChecksum(buf, 0,\n+                                      (int) Math.min(bytesLeft, BYTES_TO_READ));\n         if (n \u003c 0) {\n           throw new IOException(\"read past end of stream reading \" + \n                                 getMapId());\n         }\n         disk.write(buf, 0, n);\n         bytesLeft -\u003d n;\n         metrics.inputBytes(n);\n         reporter.progress();\n       }\n \n       LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n                \" bytes from map-output for \" + getMapId());\n \n       disk.close();\n     } catch (IOException ioe) {\n       // Close the streams\n-      IOUtils.cleanup(LOG, input, disk);\n+      IOUtils.cleanup(LOG, disk);\n \n       // Re-throw\n       throw ioe;\n     }\n \n     // Sanity check\n     if (bytesLeft !\u003d 0) {\n       throw new IOException(\"Incomplete map output received for \" +\n                             getMapId() + \" from \" +\n                             host.getHostName() + \" (\" + \n                             bytesLeft + \" bytes missing of \" + \n                             compressedLength + \")\");\n     }\n     this.compressedSize \u003d compressedLength;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void doShuffle(MapHost host, IFileInputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    // Copy data to local-disk\n    long bytesLeft \u003d compressedLength;\n    try {\n      final int BYTES_TO_READ \u003d 64 * 1024;\n      byte[] buf \u003d new byte[BYTES_TO_READ];\n      while (bytesLeft \u003e 0) {\n        int n \u003d input.readWithChecksum(buf, 0,\n                                      (int) Math.min(bytesLeft, BYTES_TO_READ));\n        if (n \u003c 0) {\n          throw new IOException(\"read past end of stream reading \" + \n                                getMapId());\n        }\n        disk.write(buf, 0, n);\n        bytesLeft -\u003d n;\n        metrics.inputBytes(n);\n        reporter.progress();\n      }\n\n      LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n               \" bytes from map-output for \" + getMapId());\n\n      disk.close();\n    } catch (IOException ioe) {\n      // Close the streams\n      IOUtils.cleanup(LOG, disk);\n\n      // Re-throw\n      throw ioe;\n    }\n\n    // Sanity check\n    if (bytesLeft !\u003d 0) {\n      throw new IOException(\"Incomplete map output received for \" +\n                            getMapId() + \" from \" +\n                            host.getHostName() + \" (\" + \n                            bytesLeft + \" bytes missing of \" + \n                            compressedLength + \")\");\n    }\n    this.compressedSize \u003d compressedLength;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/OnDiskMapOutput.java",
          "extendedDetails": {
            "oldValue": "[host-MapHost, input-InputStream, compressedLength-long, decompressedLength-long, metrics-ShuffleClientMetrics, reporter-Reporter]",
            "newValue": "[host-MapHost, input-IFileInputStream, compressedLength-long, decompressedLength-long, metrics-ShuffleClientMetrics, reporter-Reporter]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-6174. Combine common stream code into parent class for InMemoryMapOutput and OnDiskMapOutput. (Eric Payne via gera)\n",
          "commitDate": "03/06/15 4:50 PM",
          "commitName": "d90c13e2da8867661bf19a802add70145ab9a462",
          "commitAuthor": "Gera Shegalov",
          "commitDateOld": "15/12/14 7:08 PM",
          "commitNameOld": "af006937e8ba82f98f468dc7375fe89c2e0a7912",
          "commitAuthorOld": "Gera Shegalov",
          "daysBetweenCommits": 169.86,
          "commitsBetweenForRepo": 1454,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,44 @@\n-  public void shuffle(MapHost host, InputStream input,\n+  protected void doShuffle(MapHost host, IFileInputStream input,\n                       long compressedLength, long decompressedLength,\n                       ShuffleClientMetrics metrics,\n                       Reporter reporter) throws IOException {\n-    input \u003d new IFileInputStream(input, compressedLength, conf);\n     // Copy data to local-disk\n     long bytesLeft \u003d compressedLength;\n     try {\n       final int BYTES_TO_READ \u003d 64 * 1024;\n       byte[] buf \u003d new byte[BYTES_TO_READ];\n       while (bytesLeft \u003e 0) {\n-        int n \u003d ((IFileInputStream)input).readWithChecksum(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n+        int n \u003d input.readWithChecksum(buf, 0,\n+                                      (int) Math.min(bytesLeft, BYTES_TO_READ));\n         if (n \u003c 0) {\n           throw new IOException(\"read past end of stream reading \" + \n                                 getMapId());\n         }\n         disk.write(buf, 0, n);\n         bytesLeft -\u003d n;\n         metrics.inputBytes(n);\n         reporter.progress();\n       }\n \n       LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n                \" bytes from map-output for \" + getMapId());\n \n       disk.close();\n     } catch (IOException ioe) {\n       // Close the streams\n-      IOUtils.cleanup(LOG, input, disk);\n+      IOUtils.cleanup(LOG, disk);\n \n       // Re-throw\n       throw ioe;\n     }\n \n     // Sanity check\n     if (bytesLeft !\u003d 0) {\n       throw new IOException(\"Incomplete map output received for \" +\n                             getMapId() + \" from \" +\n                             host.getHostName() + \" (\" + \n                             bytesLeft + \" bytes missing of \" + \n                             compressedLength + \")\");\n     }\n     this.compressedSize \u003d compressedLength;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void doShuffle(MapHost host, IFileInputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    // Copy data to local-disk\n    long bytesLeft \u003d compressedLength;\n    try {\n      final int BYTES_TO_READ \u003d 64 * 1024;\n      byte[] buf \u003d new byte[BYTES_TO_READ];\n      while (bytesLeft \u003e 0) {\n        int n \u003d input.readWithChecksum(buf, 0,\n                                      (int) Math.min(bytesLeft, BYTES_TO_READ));\n        if (n \u003c 0) {\n          throw new IOException(\"read past end of stream reading \" + \n                                getMapId());\n        }\n        disk.write(buf, 0, n);\n        bytesLeft -\u003d n;\n        metrics.inputBytes(n);\n        reporter.progress();\n      }\n\n      LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n               \" bytes from map-output for \" + getMapId());\n\n      disk.close();\n    } catch (IOException ioe) {\n      // Close the streams\n      IOUtils.cleanup(LOG, disk);\n\n      // Re-throw\n      throw ioe;\n    }\n\n    // Sanity check\n    if (bytesLeft !\u003d 0) {\n      throw new IOException(\"Incomplete map output received for \" +\n                            getMapId() + \" from \" +\n                            host.getHostName() + \" (\" + \n                            bytesLeft + \" bytes missing of \" + \n                            compressedLength + \")\");\n    }\n    this.compressedSize \u003d compressedLength;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/OnDiskMapOutput.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-6174. Combine common stream code into parent class for InMemoryMapOutput and OnDiskMapOutput. (Eric Payne via gera)\n",
          "commitDate": "03/06/15 4:50 PM",
          "commitName": "d90c13e2da8867661bf19a802add70145ab9a462",
          "commitAuthor": "Gera Shegalov",
          "commitDateOld": "15/12/14 7:08 PM",
          "commitNameOld": "af006937e8ba82f98f468dc7375fe89c2e0a7912",
          "commitAuthorOld": "Gera Shegalov",
          "daysBetweenCommits": 169.86,
          "commitsBetweenForRepo": 1454,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,44 @@\n-  public void shuffle(MapHost host, InputStream input,\n+  protected void doShuffle(MapHost host, IFileInputStream input,\n                       long compressedLength, long decompressedLength,\n                       ShuffleClientMetrics metrics,\n                       Reporter reporter) throws IOException {\n-    input \u003d new IFileInputStream(input, compressedLength, conf);\n     // Copy data to local-disk\n     long bytesLeft \u003d compressedLength;\n     try {\n       final int BYTES_TO_READ \u003d 64 * 1024;\n       byte[] buf \u003d new byte[BYTES_TO_READ];\n       while (bytesLeft \u003e 0) {\n-        int n \u003d ((IFileInputStream)input).readWithChecksum(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n+        int n \u003d input.readWithChecksum(buf, 0,\n+                                      (int) Math.min(bytesLeft, BYTES_TO_READ));\n         if (n \u003c 0) {\n           throw new IOException(\"read past end of stream reading \" + \n                                 getMapId());\n         }\n         disk.write(buf, 0, n);\n         bytesLeft -\u003d n;\n         metrics.inputBytes(n);\n         reporter.progress();\n       }\n \n       LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n                \" bytes from map-output for \" + getMapId());\n \n       disk.close();\n     } catch (IOException ioe) {\n       // Close the streams\n-      IOUtils.cleanup(LOG, input, disk);\n+      IOUtils.cleanup(LOG, disk);\n \n       // Re-throw\n       throw ioe;\n     }\n \n     // Sanity check\n     if (bytesLeft !\u003d 0) {\n       throw new IOException(\"Incomplete map output received for \" +\n                             getMapId() + \" from \" +\n                             host.getHostName() + \" (\" + \n                             bytesLeft + \" bytes missing of \" + \n                             compressedLength + \")\");\n     }\n     this.compressedSize \u003d compressedLength;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void doShuffle(MapHost host, IFileInputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    // Copy data to local-disk\n    long bytesLeft \u003d compressedLength;\n    try {\n      final int BYTES_TO_READ \u003d 64 * 1024;\n      byte[] buf \u003d new byte[BYTES_TO_READ];\n      while (bytesLeft \u003e 0) {\n        int n \u003d input.readWithChecksum(buf, 0,\n                                      (int) Math.min(bytesLeft, BYTES_TO_READ));\n        if (n \u003c 0) {\n          throw new IOException(\"read past end of stream reading \" + \n                                getMapId());\n        }\n        disk.write(buf, 0, n);\n        bytesLeft -\u003d n;\n        metrics.inputBytes(n);\n        reporter.progress();\n      }\n\n      LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n               \" bytes from map-output for \" + getMapId());\n\n      disk.close();\n    } catch (IOException ioe) {\n      // Close the streams\n      IOUtils.cleanup(LOG, disk);\n\n      // Re-throw\n      throw ioe;\n    }\n\n    // Sanity check\n    if (bytesLeft !\u003d 0) {\n      throw new IOException(\"Incomplete map output received for \" +\n                            getMapId() + \" from \" +\n                            host.getHostName() + \" (\" + \n                            bytesLeft + \" bytes missing of \" + \n                            compressedLength + \")\");\n    }\n    this.compressedSize \u003d compressedLength;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/OnDiskMapOutput.java",
          "extendedDetails": {}
        }
      ]
    },
    "af006937e8ba82f98f468dc7375fe89c2e0a7912": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6166. Reducers do not validate checksum of map outputs when fetching directly to disk. (Eric Payne via gera)\n",
      "commitDate": "15/12/14 7:08 PM",
      "commitName": "af006937e8ba82f98f468dc7375fe89c2e0a7912",
      "commitAuthor": "Gera Shegalov",
      "commitDateOld": "10/07/14 5:43 PM",
      "commitNameOld": "95986dd2fb4527c43fa4c088c61fb7b4bd794d23",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 158.1,
      "commitsBetweenForRepo": 1452,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,44 @@\n   public void shuffle(MapHost host, InputStream input,\n                       long compressedLength, long decompressedLength,\n                       ShuffleClientMetrics metrics,\n                       Reporter reporter) throws IOException {\n+    input \u003d new IFileInputStream(input, compressedLength, conf);\n     // Copy data to local-disk\n     long bytesLeft \u003d compressedLength;\n     try {\n       final int BYTES_TO_READ \u003d 64 * 1024;\n       byte[] buf \u003d new byte[BYTES_TO_READ];\n       while (bytesLeft \u003e 0) {\n-        int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n+        int n \u003d ((IFileInputStream)input).readWithChecksum(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n         if (n \u003c 0) {\n           throw new IOException(\"read past end of stream reading \" + \n                                 getMapId());\n         }\n         disk.write(buf, 0, n);\n         bytesLeft -\u003d n;\n         metrics.inputBytes(n);\n         reporter.progress();\n       }\n \n       LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n                \" bytes from map-output for \" + getMapId());\n \n       disk.close();\n     } catch (IOException ioe) {\n       // Close the streams\n       IOUtils.cleanup(LOG, input, disk);\n \n       // Re-throw\n       throw ioe;\n     }\n \n     // Sanity check\n     if (bytesLeft !\u003d 0) {\n       throw new IOException(\"Incomplete map output received for \" +\n                             getMapId() + \" from \" +\n                             host.getHostName() + \" (\" + \n                             bytesLeft + \" bytes missing of \" + \n                             compressedLength + \")\");\n     }\n     this.compressedSize \u003d compressedLength;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shuffle(MapHost host, InputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    input \u003d new IFileInputStream(input, compressedLength, conf);\n    // Copy data to local-disk\n    long bytesLeft \u003d compressedLength;\n    try {\n      final int BYTES_TO_READ \u003d 64 * 1024;\n      byte[] buf \u003d new byte[BYTES_TO_READ];\n      while (bytesLeft \u003e 0) {\n        int n \u003d ((IFileInputStream)input).readWithChecksum(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n        if (n \u003c 0) {\n          throw new IOException(\"read past end of stream reading \" + \n                                getMapId());\n        }\n        disk.write(buf, 0, n);\n        bytesLeft -\u003d n;\n        metrics.inputBytes(n);\n        reporter.progress();\n      }\n\n      LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n               \" bytes from map-output for \" + getMapId());\n\n      disk.close();\n    } catch (IOException ioe) {\n      // Close the streams\n      IOUtils.cleanup(LOG, input, disk);\n\n      // Re-throw\n      throw ioe;\n    }\n\n    // Sanity check\n    if (bytesLeft !\u003d 0) {\n      throw new IOException(\"Incomplete map output received for \" +\n                            getMapId() + \" from \" +\n                            host.getHostName() + \" (\" + \n                            bytesLeft + \" bytes missing of \" + \n                            compressedLength + \")\");\n    }\n    this.compressedSize \u003d compressedLength;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/OnDiskMapOutput.java",
      "extendedDetails": {}
    },
    "df68c56267ca7dfbfee4b241bc84325d1760d12d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3685. Fix bugs in MergeManager to ensure compression codec is appropriately used and that on-disk segments are correctly sorted on file-size. Contributed by Anty Rao and Ravi Prakash.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453365 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/13 7:02 AM",
      "commitName": "df68c56267ca7dfbfee4b241bc84325d1760d12d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "29/01/13 11:38 AM",
      "commitNameOld": "0f430e53fde884f24b473043f0a7e2bffa98ebd3",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 35.81,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   public void shuffle(MapHost host, InputStream input,\n                       long compressedLength, long decompressedLength,\n                       ShuffleClientMetrics metrics,\n                       Reporter reporter) throws IOException {\n     // Copy data to local-disk\n     long bytesLeft \u003d compressedLength;\n     try {\n       final int BYTES_TO_READ \u003d 64 * 1024;\n       byte[] buf \u003d new byte[BYTES_TO_READ];\n       while (bytesLeft \u003e 0) {\n         int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n         if (n \u003c 0) {\n           throw new IOException(\"read past end of stream reading \" + \n                                 getMapId());\n         }\n         disk.write(buf, 0, n);\n         bytesLeft -\u003d n;\n         metrics.inputBytes(n);\n         reporter.progress();\n       }\n \n       LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n                \" bytes from map-output for \" + getMapId());\n \n       disk.close();\n     } catch (IOException ioe) {\n       // Close the streams\n       IOUtils.cleanup(LOG, input, disk);\n \n       // Re-throw\n       throw ioe;\n     }\n \n     // Sanity check\n     if (bytesLeft !\u003d 0) {\n       throw new IOException(\"Incomplete map output received for \" +\n                             getMapId() + \" from \" +\n                             host.getHostName() + \" (\" + \n                             bytesLeft + \" bytes missing of \" + \n                             compressedLength + \")\");\n     }\n+    this.compressedSize \u003d compressedLength;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shuffle(MapHost host, InputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    // Copy data to local-disk\n    long bytesLeft \u003d compressedLength;\n    try {\n      final int BYTES_TO_READ \u003d 64 * 1024;\n      byte[] buf \u003d new byte[BYTES_TO_READ];\n      while (bytesLeft \u003e 0) {\n        int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n        if (n \u003c 0) {\n          throw new IOException(\"read past end of stream reading \" + \n                                getMapId());\n        }\n        disk.write(buf, 0, n);\n        bytesLeft -\u003d n;\n        metrics.inputBytes(n);\n        reporter.progress();\n      }\n\n      LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n               \" bytes from map-output for \" + getMapId());\n\n      disk.close();\n    } catch (IOException ioe) {\n      // Close the streams\n      IOUtils.cleanup(LOG, input, disk);\n\n      // Re-throw\n      throw ioe;\n    }\n\n    // Sanity check\n    if (bytesLeft !\u003d 0) {\n      throw new IOException(\"Incomplete map output received for \" +\n                            getMapId() + \" from \" +\n                            host.getHostName() + \" (\" + \n                            bytesLeft + \" bytes missing of \" + \n                            compressedLength + \")\");\n    }\n    this.compressedSize \u003d compressedLength;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/OnDiskMapOutput.java",
      "extendedDetails": {}
    },
    "73fd247c7649919350ecfd16806af57ffe554649": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/01/13 6:10 AM",
      "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,42 @@\n-  private void shuffleToDisk(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n-                             InputStream input, \n-                             long compressedLength) \n-  throws IOException {\n+  public void shuffle(MapHost host, InputStream input,\n+                      long compressedLength, long decompressedLength,\n+                      ShuffleClientMetrics metrics,\n+                      Reporter reporter) throws IOException {\n     // Copy data to local-disk\n-    OutputStream output \u003d mapOutput.getDisk();\n     long bytesLeft \u003d compressedLength;\n     try {\n       final int BYTES_TO_READ \u003d 64 * 1024;\n       byte[] buf \u003d new byte[BYTES_TO_READ];\n       while (bytesLeft \u003e 0) {\n         int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n         if (n \u003c 0) {\n           throw new IOException(\"read past end of stream reading \" + \n-                                mapOutput.getMapId());\n+                                getMapId());\n         }\n-        output.write(buf, 0, n);\n+        disk.write(buf, 0, n);\n         bytesLeft -\u003d n;\n         metrics.inputBytes(n);\n         reporter.progress();\n       }\n \n       LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n-               \" bytes from map-output for \" +\n-               mapOutput.getMapId());\n+               \" bytes from map-output for \" + getMapId());\n \n-      output.close();\n+      disk.close();\n     } catch (IOException ioe) {\n       // Close the streams\n-      IOUtils.cleanup(LOG, input, output);\n+      IOUtils.cleanup(LOG, input, disk);\n \n       // Re-throw\n       throw ioe;\n     }\n \n     // Sanity check\n     if (bytesLeft !\u003d 0) {\n       throw new IOException(\"Incomplete map output received for \" +\n-                            mapOutput.getMapId() + \" from \" +\n+                            getMapId() + \" from \" +\n                             host.getHostName() + \" (\" + \n                             bytesLeft + \" bytes missing of \" + \n-                            compressedLength + \")\"\n-      );\n+                            compressedLength + \")\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void shuffle(MapHost host, InputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    // Copy data to local-disk\n    long bytesLeft \u003d compressedLength;\n    try {\n      final int BYTES_TO_READ \u003d 64 * 1024;\n      byte[] buf \u003d new byte[BYTES_TO_READ];\n      while (bytesLeft \u003e 0) {\n        int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n        if (n \u003c 0) {\n          throw new IOException(\"read past end of stream reading \" + \n                                getMapId());\n        }\n        disk.write(buf, 0, n);\n        bytesLeft -\u003d n;\n        metrics.inputBytes(n);\n        reporter.progress();\n      }\n\n      LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n               \" bytes from map-output for \" + getMapId());\n\n      disk.close();\n    } catch (IOException ioe) {\n      // Close the streams\n      IOUtils.cleanup(LOG, input, disk);\n\n      // Re-throw\n      throw ioe;\n    }\n\n    // Sanity check\n    if (bytesLeft !\u003d 0) {\n      throw new IOException(\"Incomplete map output received for \" +\n                            getMapId() + \" from \" +\n                            host.getHostName() + \" (\" + \n                            bytesLeft + \" bytes missing of \" + \n                            compressedLength + \")\");\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/OnDiskMapOutput.java",
          "extendedDetails": {
            "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java",
            "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/OnDiskMapOutput.java",
            "oldMethodName": "shuffleToDisk",
            "newMethodName": "shuffle"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,42 @@\n-  private void shuffleToDisk(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n-                             InputStream input, \n-                             long compressedLength) \n-  throws IOException {\n+  public void shuffle(MapHost host, InputStream input,\n+                      long compressedLength, long decompressedLength,\n+                      ShuffleClientMetrics metrics,\n+                      Reporter reporter) throws IOException {\n     // Copy data to local-disk\n-    OutputStream output \u003d mapOutput.getDisk();\n     long bytesLeft \u003d compressedLength;\n     try {\n       final int BYTES_TO_READ \u003d 64 * 1024;\n       byte[] buf \u003d new byte[BYTES_TO_READ];\n       while (bytesLeft \u003e 0) {\n         int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n         if (n \u003c 0) {\n           throw new IOException(\"read past end of stream reading \" + \n-                                mapOutput.getMapId());\n+                                getMapId());\n         }\n-        output.write(buf, 0, n);\n+        disk.write(buf, 0, n);\n         bytesLeft -\u003d n;\n         metrics.inputBytes(n);\n         reporter.progress();\n       }\n \n       LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n-               \" bytes from map-output for \" +\n-               mapOutput.getMapId());\n+               \" bytes from map-output for \" + getMapId());\n \n-      output.close();\n+      disk.close();\n     } catch (IOException ioe) {\n       // Close the streams\n-      IOUtils.cleanup(LOG, input, output);\n+      IOUtils.cleanup(LOG, input, disk);\n \n       // Re-throw\n       throw ioe;\n     }\n \n     // Sanity check\n     if (bytesLeft !\u003d 0) {\n       throw new IOException(\"Incomplete map output received for \" +\n-                            mapOutput.getMapId() + \" from \" +\n+                            getMapId() + \" from \" +\n                             host.getHostName() + \" (\" + \n                             bytesLeft + \" bytes missing of \" + \n-                            compressedLength + \")\"\n-      );\n+                            compressedLength + \")\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void shuffle(MapHost host, InputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    // Copy data to local-disk\n    long bytesLeft \u003d compressedLength;\n    try {\n      final int BYTES_TO_READ \u003d 64 * 1024;\n      byte[] buf \u003d new byte[BYTES_TO_READ];\n      while (bytesLeft \u003e 0) {\n        int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n        if (n \u003c 0) {\n          throw new IOException(\"read past end of stream reading \" + \n                                getMapId());\n        }\n        disk.write(buf, 0, n);\n        bytesLeft -\u003d n;\n        metrics.inputBytes(n);\n        reporter.progress();\n      }\n\n      LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n               \" bytes from map-output for \" + getMapId());\n\n      disk.close();\n    } catch (IOException ioe) {\n      // Close the streams\n      IOUtils.cleanup(LOG, input, disk);\n\n      // Re-throw\n      throw ioe;\n    }\n\n    // Sanity check\n    if (bytesLeft !\u003d 0) {\n      throw new IOException(\"Incomplete map output received for \" +\n                            getMapId() + \" from \" +\n                            host.getHostName() + \" (\" + \n                            bytesLeft + \" bytes missing of \" + \n                            compressedLength + \")\");\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/OnDiskMapOutput.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,42 @@\n-  private void shuffleToDisk(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n-                             InputStream input, \n-                             long compressedLength) \n-  throws IOException {\n+  public void shuffle(MapHost host, InputStream input,\n+                      long compressedLength, long decompressedLength,\n+                      ShuffleClientMetrics metrics,\n+                      Reporter reporter) throws IOException {\n     // Copy data to local-disk\n-    OutputStream output \u003d mapOutput.getDisk();\n     long bytesLeft \u003d compressedLength;\n     try {\n       final int BYTES_TO_READ \u003d 64 * 1024;\n       byte[] buf \u003d new byte[BYTES_TO_READ];\n       while (bytesLeft \u003e 0) {\n         int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n         if (n \u003c 0) {\n           throw new IOException(\"read past end of stream reading \" + \n-                                mapOutput.getMapId());\n+                                getMapId());\n         }\n-        output.write(buf, 0, n);\n+        disk.write(buf, 0, n);\n         bytesLeft -\u003d n;\n         metrics.inputBytes(n);\n         reporter.progress();\n       }\n \n       LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n-               \" bytes from map-output for \" +\n-               mapOutput.getMapId());\n+               \" bytes from map-output for \" + getMapId());\n \n-      output.close();\n+      disk.close();\n     } catch (IOException ioe) {\n       // Close the streams\n-      IOUtils.cleanup(LOG, input, output);\n+      IOUtils.cleanup(LOG, input, disk);\n \n       // Re-throw\n       throw ioe;\n     }\n \n     // Sanity check\n     if (bytesLeft !\u003d 0) {\n       throw new IOException(\"Incomplete map output received for \" +\n-                            mapOutput.getMapId() + \" from \" +\n+                            getMapId() + \" from \" +\n                             host.getHostName() + \" (\" + \n                             bytesLeft + \" bytes missing of \" + \n-                            compressedLength + \")\"\n-      );\n+                            compressedLength + \")\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void shuffle(MapHost host, InputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    // Copy data to local-disk\n    long bytesLeft \u003d compressedLength;\n    try {\n      final int BYTES_TO_READ \u003d 64 * 1024;\n      byte[] buf \u003d new byte[BYTES_TO_READ];\n      while (bytesLeft \u003e 0) {\n        int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n        if (n \u003c 0) {\n          throw new IOException(\"read past end of stream reading \" + \n                                getMapId());\n        }\n        disk.write(buf, 0, n);\n        bytesLeft -\u003d n;\n        metrics.inputBytes(n);\n        reporter.progress();\n      }\n\n      LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n               \" bytes from map-output for \" + getMapId());\n\n      disk.close();\n    } catch (IOException ioe) {\n      // Close the streams\n      IOUtils.cleanup(LOG, input, disk);\n\n      // Re-throw\n      throw ioe;\n    }\n\n    // Sanity check\n    if (bytesLeft !\u003d 0) {\n      throw new IOException(\"Incomplete map output received for \" +\n                            getMapId() + \" from \" +\n                            host.getHostName() + \" (\" + \n                            bytesLeft + \" bytes missing of \" + \n                            compressedLength + \")\");\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/OnDiskMapOutput.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,42 @@\n-  private void shuffleToDisk(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n-                             InputStream input, \n-                             long compressedLength) \n-  throws IOException {\n+  public void shuffle(MapHost host, InputStream input,\n+                      long compressedLength, long decompressedLength,\n+                      ShuffleClientMetrics metrics,\n+                      Reporter reporter) throws IOException {\n     // Copy data to local-disk\n-    OutputStream output \u003d mapOutput.getDisk();\n     long bytesLeft \u003d compressedLength;\n     try {\n       final int BYTES_TO_READ \u003d 64 * 1024;\n       byte[] buf \u003d new byte[BYTES_TO_READ];\n       while (bytesLeft \u003e 0) {\n         int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n         if (n \u003c 0) {\n           throw new IOException(\"read past end of stream reading \" + \n-                                mapOutput.getMapId());\n+                                getMapId());\n         }\n-        output.write(buf, 0, n);\n+        disk.write(buf, 0, n);\n         bytesLeft -\u003d n;\n         metrics.inputBytes(n);\n         reporter.progress();\n       }\n \n       LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n-               \" bytes from map-output for \" +\n-               mapOutput.getMapId());\n+               \" bytes from map-output for \" + getMapId());\n \n-      output.close();\n+      disk.close();\n     } catch (IOException ioe) {\n       // Close the streams\n-      IOUtils.cleanup(LOG, input, output);\n+      IOUtils.cleanup(LOG, input, disk);\n \n       // Re-throw\n       throw ioe;\n     }\n \n     // Sanity check\n     if (bytesLeft !\u003d 0) {\n       throw new IOException(\"Incomplete map output received for \" +\n-                            mapOutput.getMapId() + \" from \" +\n+                            getMapId() + \" from \" +\n                             host.getHostName() + \" (\" + \n                             bytesLeft + \" bytes missing of \" + \n-                            compressedLength + \")\"\n-      );\n+                            compressedLength + \")\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void shuffle(MapHost host, InputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    // Copy data to local-disk\n    long bytesLeft \u003d compressedLength;\n    try {\n      final int BYTES_TO_READ \u003d 64 * 1024;\n      byte[] buf \u003d new byte[BYTES_TO_READ];\n      while (bytesLeft \u003e 0) {\n        int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n        if (n \u003c 0) {\n          throw new IOException(\"read past end of stream reading \" + \n                                getMapId());\n        }\n        disk.write(buf, 0, n);\n        bytesLeft -\u003d n;\n        metrics.inputBytes(n);\n        reporter.progress();\n      }\n\n      LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n               \" bytes from map-output for \" + getMapId());\n\n      disk.close();\n    } catch (IOException ioe) {\n      // Close the streams\n      IOUtils.cleanup(LOG, input, disk);\n\n      // Re-throw\n      throw ioe;\n    }\n\n    // Sanity check\n    if (bytesLeft !\u003d 0) {\n      throw new IOException(\"Incomplete map output received for \" +\n                            getMapId() + \" from \" +\n                            host.getHostName() + \" (\" + \n                            bytesLeft + \" bytes missing of \" + \n                            compressedLength + \")\");\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/OnDiskMapOutput.java",
          "extendedDetails": {
            "oldValue": "shuffleToDisk",
            "newValue": "shuffle"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,42 @@\n-  private void shuffleToDisk(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n-                             InputStream input, \n-                             long compressedLength) \n-  throws IOException {\n+  public void shuffle(MapHost host, InputStream input,\n+                      long compressedLength, long decompressedLength,\n+                      ShuffleClientMetrics metrics,\n+                      Reporter reporter) throws IOException {\n     // Copy data to local-disk\n-    OutputStream output \u003d mapOutput.getDisk();\n     long bytesLeft \u003d compressedLength;\n     try {\n       final int BYTES_TO_READ \u003d 64 * 1024;\n       byte[] buf \u003d new byte[BYTES_TO_READ];\n       while (bytesLeft \u003e 0) {\n         int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n         if (n \u003c 0) {\n           throw new IOException(\"read past end of stream reading \" + \n-                                mapOutput.getMapId());\n+                                getMapId());\n         }\n-        output.write(buf, 0, n);\n+        disk.write(buf, 0, n);\n         bytesLeft -\u003d n;\n         metrics.inputBytes(n);\n         reporter.progress();\n       }\n \n       LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n-               \" bytes from map-output for \" +\n-               mapOutput.getMapId());\n+               \" bytes from map-output for \" + getMapId());\n \n-      output.close();\n+      disk.close();\n     } catch (IOException ioe) {\n       // Close the streams\n-      IOUtils.cleanup(LOG, input, output);\n+      IOUtils.cleanup(LOG, input, disk);\n \n       // Re-throw\n       throw ioe;\n     }\n \n     // Sanity check\n     if (bytesLeft !\u003d 0) {\n       throw new IOException(\"Incomplete map output received for \" +\n-                            mapOutput.getMapId() + \" from \" +\n+                            getMapId() + \" from \" +\n                             host.getHostName() + \" (\" + \n                             bytesLeft + \" bytes missing of \" + \n-                            compressedLength + \")\"\n-      );\n+                            compressedLength + \")\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void shuffle(MapHost host, InputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    // Copy data to local-disk\n    long bytesLeft \u003d compressedLength;\n    try {\n      final int BYTES_TO_READ \u003d 64 * 1024;\n      byte[] buf \u003d new byte[BYTES_TO_READ];\n      while (bytesLeft \u003e 0) {\n        int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n        if (n \u003c 0) {\n          throw new IOException(\"read past end of stream reading \" + \n                                getMapId());\n        }\n        disk.write(buf, 0, n);\n        bytesLeft -\u003d n;\n        metrics.inputBytes(n);\n        reporter.progress();\n      }\n\n      LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n               \" bytes from map-output for \" + getMapId());\n\n      disk.close();\n    } catch (IOException ioe) {\n      // Close the streams\n      IOUtils.cleanup(LOG, input, disk);\n\n      // Re-throw\n      throw ioe;\n    }\n\n    // Sanity check\n    if (bytesLeft !\u003d 0) {\n      throw new IOException(\"Incomplete map output received for \" +\n                            getMapId() + \" from \" +\n                            host.getHostName() + \" (\" + \n                            bytesLeft + \" bytes missing of \" + \n                            compressedLength + \")\");\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/OnDiskMapOutput.java",
          "extendedDetails": {
            "oldValue": "[host-MapHost, mapOutput-MapOutput\u003cK,V\u003e, input-InputStream, compressedLength-long]",
            "newValue": "[host-MapHost, input-InputStream, compressedLength-long, decompressedLength-long, metrics-ShuffleClientMetrics, reporter-Reporter]"
          }
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void shuffleToDisk(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n                             InputStream input, \n                             long compressedLength) \n  throws IOException {\n    // Copy data to local-disk\n    OutputStream output \u003d mapOutput.getDisk();\n    long bytesLeft \u003d compressedLength;\n    try {\n      final int BYTES_TO_READ \u003d 64 * 1024;\n      byte[] buf \u003d new byte[BYTES_TO_READ];\n      while (bytesLeft \u003e 0) {\n        int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n        if (n \u003c 0) {\n          throw new IOException(\"read past end of stream reading \" + \n                                mapOutput.getMapId());\n        }\n        output.write(buf, 0, n);\n        bytesLeft -\u003d n;\n        metrics.inputBytes(n);\n        reporter.progress();\n      }\n\n      LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n               \" bytes from map-output for \" +\n               mapOutput.getMapId());\n\n      output.close();\n    } catch (IOException ioe) {\n      // Close the streams\n      IOUtils.cleanup(LOG, input, output);\n\n      // Re-throw\n      throw ioe;\n    }\n\n    // Sanity check\n    if (bytesLeft !\u003d 0) {\n      throw new IOException(\"Incomplete map output received for \" +\n                            mapOutput.getMapId() + \" from \" +\n                            host.getHostName() + \" (\" + \n                            bytesLeft + \" bytes missing of \" + \n                            compressedLength + \")\"\n      );\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void shuffleToDisk(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n                             InputStream input, \n                             long compressedLength) \n  throws IOException {\n    // Copy data to local-disk\n    OutputStream output \u003d mapOutput.getDisk();\n    long bytesLeft \u003d compressedLength;\n    try {\n      final int BYTES_TO_READ \u003d 64 * 1024;\n      byte[] buf \u003d new byte[BYTES_TO_READ];\n      while (bytesLeft \u003e 0) {\n        int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n        if (n \u003c 0) {\n          throw new IOException(\"read past end of stream reading \" + \n                                mapOutput.getMapId());\n        }\n        output.write(buf, 0, n);\n        bytesLeft -\u003d n;\n        metrics.inputBytes(n);\n        reporter.progress();\n      }\n\n      LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n               \" bytes from map-output for \" +\n               mapOutput.getMapId());\n\n      output.close();\n    } catch (IOException ioe) {\n      // Close the streams\n      IOUtils.cleanup(LOG, input, output);\n\n      // Re-throw\n      throw ioe;\n    }\n\n    // Sanity check\n    if (bytesLeft !\u003d 0) {\n      throw new IOException(\"Incomplete map output received for \" +\n                            mapOutput.getMapId() + \" from \" +\n                            host.getHostName() + \" (\" + \n                            bytesLeft + \" bytes missing of \" + \n                            compressedLength + \")\"\n      );\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,45 @@\n+  private void shuffleToDisk(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n+                             InputStream input, \n+                             long compressedLength) \n+  throws IOException {\n+    // Copy data to local-disk\n+    OutputStream output \u003d mapOutput.getDisk();\n+    long bytesLeft \u003d compressedLength;\n+    try {\n+      final int BYTES_TO_READ \u003d 64 * 1024;\n+      byte[] buf \u003d new byte[BYTES_TO_READ];\n+      while (bytesLeft \u003e 0) {\n+        int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n+        if (n \u003c 0) {\n+          throw new IOException(\"read past end of stream reading \" + \n+                                mapOutput.getMapId());\n+        }\n+        output.write(buf, 0, n);\n+        bytesLeft -\u003d n;\n+        metrics.inputBytes(n);\n+        reporter.progress();\n+      }\n+\n+      LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n+               \" bytes from map-output for \" +\n+               mapOutput.getMapId());\n+\n+      output.close();\n+    } catch (IOException ioe) {\n+      // Close the streams\n+      IOUtils.cleanup(LOG, input, output);\n+\n+      // Re-throw\n+      throw ioe;\n+    }\n+\n+    // Sanity check\n+    if (bytesLeft !\u003d 0) {\n+      throw new IOException(\"Incomplete map output received for \" +\n+                            mapOutput.getMapId() + \" from \" +\n+                            host.getHostName() + \" (\" + \n+                            bytesLeft + \" bytes missing of \" + \n+                            compressedLength + \")\"\n+      );\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void shuffleToDisk(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n                             InputStream input, \n                             long compressedLength) \n  throws IOException {\n    // Copy data to local-disk\n    OutputStream output \u003d mapOutput.getDisk();\n    long bytesLeft \u003d compressedLength;\n    try {\n      final int BYTES_TO_READ \u003d 64 * 1024;\n      byte[] buf \u003d new byte[BYTES_TO_READ];\n      while (bytesLeft \u003e 0) {\n        int n \u003d input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ));\n        if (n \u003c 0) {\n          throw new IOException(\"read past end of stream reading \" + \n                                mapOutput.getMapId());\n        }\n        output.write(buf, 0, n);\n        bytesLeft -\u003d n;\n        metrics.inputBytes(n);\n        reporter.progress();\n      }\n\n      LOG.info(\"Read \" + (compressedLength - bytesLeft) + \n               \" bytes from map-output for \" +\n               mapOutput.getMapId());\n\n      output.close();\n    } catch (IOException ioe) {\n      // Close the streams\n      IOUtils.cleanup(LOG, input, output);\n\n      // Re-throw\n      throw ioe;\n    }\n\n    // Sanity check\n    if (bytesLeft !\u003d 0) {\n      throw new IOException(\"Incomplete map output received for \" +\n                            mapOutput.getMapId() + \" from \" +\n                            host.getHostName() + \" (\" + \n                            bytesLeft + \" bytes missing of \" + \n                            compressedLength + \")\"\n      );\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java"
    }
  }
}