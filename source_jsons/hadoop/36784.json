{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebServices.java",
  "functionName": "getNode",
  "functionId": "getNode___nodeId-String(annotations-@PathParam(RMWSConsts.NODEID))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
  "functionStartLine": 481,
  "functionEndLine": 506,
  "numCommitsSeen": 113,
  "timeTaken": 5300,
  "changeHistory": [
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
    "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "b46ee1e7a31007985b88072d9af3d97c33a261a7",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "e7583d816a69677bbaa4280deb58ea73dbc42cef",
    "3cdc100369ce920701fdddae12d7f7247332b3f3",
    "0ea8570be578be60e2f32849900a1c50506d78d3"
  ],
  "changeHistoryShort": {
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": "Ybodychange",
    "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd": "Ymultichange(Ybodychange,Yparametermetachange)",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "b46ee1e7a31007985b88072d9af3d97c33a261a7": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "e7583d816a69677bbaa4280deb58ea73dbc42cef": "Ybodychange",
    "3cdc100369ce920701fdddae12d7f7247332b3f3": "Ybodychange",
    "0ea8570be578be60e2f32849900a1c50506d78d3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8249. Fixed few REST APIs in RMWebServices to have static-user check. Contributed by Sunil Govindan.\n",
      "commitDate": "10/05/18 7:05 PM",
      "commitName": "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "commitDateOld": "27/04/18 10:28 AM",
      "commitNameOld": "ef3ecc308dbea41c6a88bd4d16739c7bbc10cdda",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 13.36,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   public NodeInfo getNode(@PathParam(RMWSConsts.NODEID) String nodeId) {\n-    init();\n+    initForReadableEndpoints();\n+\n     if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n       throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n     }\n     ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n     if (sched \u003d\u003d null) {\n       throw new NotFoundException(\"Null ResourceScheduler instance\");\n     }\n     NodeId nid \u003d NodeId.fromString(nodeId);\n     RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n     boolean isInactive \u003d false;\n     if (ni \u003d\u003d null) {\n       ni \u003d this.rm.getRMContext().getInactiveRMNodes().get(nid);\n       if (ni \u003d\u003d null) {\n         throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n       }\n       isInactive \u003d true;\n     }\n     NodeInfo nodeInfo \u003d new NodeInfo(ni, sched);\n     if (isInactive) {\n       nodeInfo.setNodeHTTPAddress(RMWSConsts.EMPTY);\n     }\n     return nodeInfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public NodeInfo getNode(@PathParam(RMWSConsts.NODEID) String nodeId) {\n    initForReadableEndpoints();\n\n    if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n      throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n    }\n    ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n    if (sched \u003d\u003d null) {\n      throw new NotFoundException(\"Null ResourceScheduler instance\");\n    }\n    NodeId nid \u003d NodeId.fromString(nodeId);\n    RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n    boolean isInactive \u003d false;\n    if (ni \u003d\u003d null) {\n      ni \u003d this.rm.getRMContext().getInactiveRMNodes().get(nid);\n      if (ni \u003d\u003d null) {\n        throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n      }\n      isInactive \u003d true;\n    }\n    NodeInfo nodeInfo \u003d new NodeInfo(ni, sched);\n    if (isInactive) {\n      nodeInfo.setNodeHTTPAddress(RMWSConsts.EMPTY);\n    }\n    return nodeInfo;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "YARN-6634. [API] Refactor ResourceManager WebServices to make API explicit. (Giovanni Matteo Fumarola via curino)\n",
      "commitDate": "07/06/17 1:41 PM",
      "commitName": "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd",
      "commitAuthor": "Carlo Curino",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6634. [API] Refactor ResourceManager WebServices to make API explicit. (Giovanni Matteo Fumarola via curino)\n",
          "commitDate": "07/06/17 1:41 PM",
          "commitName": "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd",
          "commitAuthor": "Carlo Curino",
          "commitDateOld": "08/12/16 2:23 AM",
          "commitNameOld": "74d0066d3392169bec872f438a0818e2f5323010",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 181.43,
          "commitsBetweenForRepo": 954,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public NodeInfo getNode(@PathParam(\"nodeId\") String nodeId) {\n+  public NodeInfo getNode(@PathParam(RMWSConsts.NODEID) String nodeId) {\n     init();\n     if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n       throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n     }\n     ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n     if (sched \u003d\u003d null) {\n       throw new NotFoundException(\"Null ResourceScheduler instance\");\n     }\n     NodeId nid \u003d NodeId.fromString(nodeId);\n     RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n     boolean isInactive \u003d false;\n     if (ni \u003d\u003d null) {\n       ni \u003d this.rm.getRMContext().getInactiveRMNodes().get(nid);\n       if (ni \u003d\u003d null) {\n         throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n       }\n       isInactive \u003d true;\n     }\n     NodeInfo nodeInfo \u003d new NodeInfo(ni, sched);\n     if (isInactive) {\n-      nodeInfo.setNodeHTTPAddress(EMPTY);\n+      nodeInfo.setNodeHTTPAddress(RMWSConsts.EMPTY);\n     }\n     return nodeInfo;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public NodeInfo getNode(@PathParam(RMWSConsts.NODEID) String nodeId) {\n    init();\n    if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n      throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n    }\n    ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n    if (sched \u003d\u003d null) {\n      throw new NotFoundException(\"Null ResourceScheduler instance\");\n    }\n    NodeId nid \u003d NodeId.fromString(nodeId);\n    RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n    boolean isInactive \u003d false;\n    if (ni \u003d\u003d null) {\n      ni \u003d this.rm.getRMContext().getInactiveRMNodes().get(nid);\n      if (ni \u003d\u003d null) {\n        throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n      }\n      isInactive \u003d true;\n    }\n    NodeInfo nodeInfo \u003d new NodeInfo(ni, sched);\n    if (isInactive) {\n      nodeInfo.setNodeHTTPAddress(RMWSConsts.EMPTY);\n    }\n    return nodeInfo;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-6634. [API] Refactor ResourceManager WebServices to make API explicit. (Giovanni Matteo Fumarola via curino)\n",
          "commitDate": "07/06/17 1:41 PM",
          "commitName": "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd",
          "commitAuthor": "Carlo Curino",
          "commitDateOld": "08/12/16 2:23 AM",
          "commitNameOld": "74d0066d3392169bec872f438a0818e2f5323010",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 181.43,
          "commitsBetweenForRepo": 954,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public NodeInfo getNode(@PathParam(\"nodeId\") String nodeId) {\n+  public NodeInfo getNode(@PathParam(RMWSConsts.NODEID) String nodeId) {\n     init();\n     if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n       throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n     }\n     ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n     if (sched \u003d\u003d null) {\n       throw new NotFoundException(\"Null ResourceScheduler instance\");\n     }\n     NodeId nid \u003d NodeId.fromString(nodeId);\n     RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n     boolean isInactive \u003d false;\n     if (ni \u003d\u003d null) {\n       ni \u003d this.rm.getRMContext().getInactiveRMNodes().get(nid);\n       if (ni \u003d\u003d null) {\n         throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n       }\n       isInactive \u003d true;\n     }\n     NodeInfo nodeInfo \u003d new NodeInfo(ni, sched);\n     if (isInactive) {\n-      nodeInfo.setNodeHTTPAddress(EMPTY);\n+      nodeInfo.setNodeHTTPAddress(RMWSConsts.EMPTY);\n     }\n     return nodeInfo;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public NodeInfo getNode(@PathParam(RMWSConsts.NODEID) String nodeId) {\n    init();\n    if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n      throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n    }\n    ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n    if (sched \u003d\u003d null) {\n      throw new NotFoundException(\"Null ResourceScheduler instance\");\n    }\n    NodeId nid \u003d NodeId.fromString(nodeId);\n    RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n    boolean isInactive \u003d false;\n    if (ni \u003d\u003d null) {\n      ni \u003d this.rm.getRMContext().getInactiveRMNodes().get(nid);\n      if (ni \u003d\u003d null) {\n        throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n      }\n      isInactive \u003d true;\n    }\n    NodeInfo nodeInfo \u003d new NodeInfo(ni, sched);\n    if (isInactive) {\n      nodeInfo.setNodeHTTPAddress(RMWSConsts.EMPTY);\n    }\n    return nodeInfo;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {
            "oldValue": "[nodeId-String(annotations-@PathParam(\"nodeId\"))]",
            "newValue": "[nodeId-String(annotations-@PathParam(RMWSConsts.NODEID))]"
          }
        }
      ]
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/06/16 3:06 PM",
      "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 7.0,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public NodeInfo getNode(@PathParam(\"nodeId\") String nodeId) {\n     init();\n     if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n       throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n     }\n     ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n     if (sched \u003d\u003d null) {\n       throw new NotFoundException(\"Null ResourceScheduler instance\");\n     }\n-    NodeId nid \u003d ConverterUtils.toNodeId(nodeId);\n+    NodeId nid \u003d NodeId.fromString(nodeId);\n     RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n     boolean isInactive \u003d false;\n     if (ni \u003d\u003d null) {\n       ni \u003d this.rm.getRMContext().getInactiveRMNodes().get(nid);\n       if (ni \u003d\u003d null) {\n         throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n       }\n       isInactive \u003d true;\n     }\n     NodeInfo nodeInfo \u003d new NodeInfo(ni, sched);\n     if (isInactive) {\n       nodeInfo.setNodeHTTPAddress(EMPTY);\n     }\n     return nodeInfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public NodeInfo getNode(@PathParam(\"nodeId\") String nodeId) {\n    init();\n    if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n      throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n    }\n    ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n    if (sched \u003d\u003d null) {\n      throw new NotFoundException(\"Null ResourceScheduler instance\");\n    }\n    NodeId nid \u003d NodeId.fromString(nodeId);\n    RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n    boolean isInactive \u003d false;\n    if (ni \u003d\u003d null) {\n      ni \u003d this.rm.getRMContext().getInactiveRMNodes().get(nid);\n      if (ni \u003d\u003d null) {\n        throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n      }\n      isInactive \u003d true;\n    }\n    NodeInfo nodeInfo \u003d new NodeInfo(ni, sched);\n    if (isInactive) {\n      nodeInfo.setNodeHTTPAddress(EMPTY);\n    }\n    return nodeInfo;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "b46ee1e7a31007985b88072d9af3d97c33a261a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3266. RMContext#inactiveNodes should have NodeId as map key. Contributed by Chengbing Liu\n",
      "commitDate": "14/04/15 10:54 AM",
      "commitName": "b46ee1e7a31007985b88072d9af3d97c33a261a7",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/04/15 11:38 PM",
      "commitNameOld": "afa5d4715a3aea2a6e93380b014c7bb8f0880383",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 4.47,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public NodeInfo getNode(@PathParam(\"nodeId\") String nodeId) {\n     init();\n     if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n       throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n     }\n     ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n     if (sched \u003d\u003d null) {\n       throw new NotFoundException(\"Null ResourceScheduler instance\");\n     }\n     NodeId nid \u003d ConverterUtils.toNodeId(nodeId);\n     RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n     boolean isInactive \u003d false;\n     if (ni \u003d\u003d null) {\n-      ni \u003d this.rm.getRMContext().getInactiveRMNodes().get(nid.getHost());\n+      ni \u003d this.rm.getRMContext().getInactiveRMNodes().get(nid);\n       if (ni \u003d\u003d null) {\n         throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n       }\n       isInactive \u003d true;\n     }\n     NodeInfo nodeInfo \u003d new NodeInfo(ni, sched);\n     if (isInactive) {\n       nodeInfo.setNodeHTTPAddress(EMPTY);\n     }\n     return nodeInfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public NodeInfo getNode(@PathParam(\"nodeId\") String nodeId) {\n    init();\n    if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n      throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n    }\n    ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n    if (sched \u003d\u003d null) {\n      throw new NotFoundException(\"Null ResourceScheduler instance\");\n    }\n    NodeId nid \u003d ConverterUtils.toNodeId(nodeId);\n    RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n    boolean isInactive \u003d false;\n    if (ni \u003d\u003d null) {\n      ni \u003d this.rm.getRMContext().getInactiveRMNodes().get(nid);\n      if (ni \u003d\u003d null) {\n        throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n      }\n      isInactive \u003d true;\n    }\n    NodeInfo nodeInfo \u003d new NodeInfo(ni, sched);\n    if (isInactive) {\n      nodeInfo.setNodeHTTPAddress(EMPTY);\n    }\n    return nodeInfo;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public NodeInfo getNode(@PathParam(\"nodeId\") String nodeId) {\n    init();\n    if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n      throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n    }\n    ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n    if (sched \u003d\u003d null) {\n      throw new NotFoundException(\"Null ResourceScheduler instance\");\n    }\n    NodeId nid \u003d ConverterUtils.toNodeId(nodeId);\n    RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n    boolean isInactive \u003d false;\n    if (ni \u003d\u003d null) {\n      ni \u003d this.rm.getRMContext().getInactiveRMNodes().get(nid.getHost());\n      if (ni \u003d\u003d null) {\n        throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n      }\n      isInactive \u003d true;\n    }\n    NodeInfo nodeInfo \u003d new NodeInfo(ni, sched);\n    if (isInactive) {\n      nodeInfo.setNodeHTTPAddress(EMPTY);\n    }\n    return nodeInfo;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
      }
    },
    "e7583d816a69677bbaa4280deb58ea73dbc42cef": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3613. web service calls header contains 2 content types (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1330560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/12 2:13 PM",
      "commitName": "e7583d816a69677bbaa4280deb58ea73dbc42cef",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "02/04/12 2:06 PM",
      "commitNameOld": "01ce7ba3a4af867763e437ce46a4f5e1d6e5a6bf",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 23.0,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   public NodeInfo getNode(@PathParam(\"nodeId\") String nodeId) {\n+    init();\n     if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n       throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n     }\n     ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n     if (sched \u003d\u003d null) {\n       throw new NotFoundException(\"Null ResourceScheduler instance\");\n     }\n     NodeId nid \u003d ConverterUtils.toNodeId(nodeId);\n     RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n     boolean isInactive \u003d false;\n     if (ni \u003d\u003d null) {\n       ni \u003d this.rm.getRMContext().getInactiveRMNodes().get(nid.getHost());\n       if (ni \u003d\u003d null) {\n         throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n       }\n       isInactive \u003d true;\n     }\n     NodeInfo nodeInfo \u003d new NodeInfo(ni, sched);\n     if (isInactive) {\n       nodeInfo.setNodeHTTPAddress(EMPTY);\n     }\n     return nodeInfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public NodeInfo getNode(@PathParam(\"nodeId\") String nodeId) {\n    init();\n    if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n      throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n    }\n    ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n    if (sched \u003d\u003d null) {\n      throw new NotFoundException(\"Null ResourceScheduler instance\");\n    }\n    NodeId nid \u003d ConverterUtils.toNodeId(nodeId);\n    RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n    boolean isInactive \u003d false;\n    if (ni \u003d\u003d null) {\n      ni \u003d this.rm.getRMContext().getInactiveRMNodes().get(nid.getHost());\n      if (ni \u003d\u003d null) {\n        throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n      }\n      isInactive \u003d true;\n    }\n    NodeInfo nodeInfo \u003d new NodeInfo(ni, sched);\n    if (isInactive) {\n      nodeInfo.setNodeHTTPAddress(EMPTY);\n    }\n    return nodeInfo;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "3cdc100369ce920701fdddae12d7f7247332b3f3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3360. Added information about lost/rebooted/decommissioned nodes on the webapps. Contributed by Bhallamudi Venkata Siva Kamesh and Jason Lowe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/01/12 2:56 PM",
      "commitName": "3cdc100369ce920701fdddae12d7f7247332b3f3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/12/11 3:05 PM",
      "commitNameOld": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 43.99,
      "commitsBetweenForRepo": 201,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,24 @@\n   public NodeInfo getNode(@PathParam(\"nodeId\") String nodeId) {\n     if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n       throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n     }\n     ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n     if (sched \u003d\u003d null) {\n       throw new NotFoundException(\"Null ResourceScheduler instance\");\n     }\n     NodeId nid \u003d ConverterUtils.toNodeId(nodeId);\n     RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n+    boolean isInactive \u003d false;\n     if (ni \u003d\u003d null) {\n-      throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n+      ni \u003d this.rm.getRMContext().getInactiveRMNodes().get(nid.getHost());\n+      if (ni \u003d\u003d null) {\n+        throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n+      }\n+      isInactive \u003d true;\n     }\n-    return new NodeInfo(ni, sched);\n+    NodeInfo nodeInfo \u003d new NodeInfo(ni, sched);\n+    if (isInactive) {\n+      nodeInfo.setNodeHTTPAddress(EMPTY);\n+    }\n+    return nodeInfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public NodeInfo getNode(@PathParam(\"nodeId\") String nodeId) {\n    if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n      throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n    }\n    ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n    if (sched \u003d\u003d null) {\n      throw new NotFoundException(\"Null ResourceScheduler instance\");\n    }\n    NodeId nid \u003d ConverterUtils.toNodeId(nodeId);\n    RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n    boolean isInactive \u003d false;\n    if (ni \u003d\u003d null) {\n      ni \u003d this.rm.getRMContext().getInactiveRMNodes().get(nid.getHost());\n      if (ni \u003d\u003d null) {\n        throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n      }\n      isInactive \u003d true;\n    }\n    NodeInfo nodeInfo \u003d new NodeInfo(ni, sched);\n    if (isInactive) {\n      nodeInfo.setNodeHTTPAddress(EMPTY);\n    }\n    return nodeInfo;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "0ea8570be578be60e2f32849900a1c50506d78d3": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2863. Support web services for YARN and MR components. (Thomas Graves via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213975 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 3:05 PM",
      "commitName": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,15 @@\n+  public NodeInfo getNode(@PathParam(\"nodeId\") String nodeId) {\n+    if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n+      throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n+    }\n+    ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n+    if (sched \u003d\u003d null) {\n+      throw new NotFoundException(\"Null ResourceScheduler instance\");\n+    }\n+    NodeId nid \u003d ConverterUtils.toNodeId(nodeId);\n+    RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n+    if (ni \u003d\u003d null) {\n+      throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n+    }\n+    return new NodeInfo(ni, sched);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public NodeInfo getNode(@PathParam(\"nodeId\") String nodeId) {\n    if (nodeId \u003d\u003d null || nodeId.isEmpty()) {\n      throw new NotFoundException(\"nodeId, \" + nodeId + \", is empty or null\");\n    }\n    ResourceScheduler sched \u003d this.rm.getResourceScheduler();\n    if (sched \u003d\u003d null) {\n      throw new NotFoundException(\"Null ResourceScheduler instance\");\n    }\n    NodeId nid \u003d ConverterUtils.toNodeId(nodeId);\n    RMNode ni \u003d this.rm.getRMContext().getRMNodes().get(nid);\n    if (ni \u003d\u003d null) {\n      throw new NotFoundException(\"nodeId, \" + nodeId + \", is not found\");\n    }\n    return new NodeInfo(ni, sched);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}