{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HttpFSFileSystem.java",
  "functionName": "getConnection",
  "functionId": "getConnection___method-String(modifiers-final)__params-Map__String,String____path-Path__makeQualified-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java",
  "functionStartLine": 307,
  "functionEndLine": 311,
  "numCommitsSeen": 56,
  "timeTaken": 1861,
  "changeHistory": [
    "46162a213f60f915df76c60b0412f45a021e1e7e",
    "5e09ae1633fb7fcf293ea10e663064e566c70909",
    "4d4560189adccb941a3dc5eee7add134adbf6519",
    "3334306512b5dc932814fded31a89ba1ee97cd9f"
  ],
  "changeHistoryShort": {
    "46162a213f60f915df76c60b0412f45a021e1e7e": "Ybodychange",
    "5e09ae1633fb7fcf293ea10e663064e566c70909": "Ybodychange",
    "4d4560189adccb941a3dc5eee7add134adbf6519": "Ymultichange(Ybodychange,Yparametermetachange)",
    "3334306512b5dc932814fded31a89ba1ee97cd9f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "46162a213f60f915df76c60b0412f45a021e1e7e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6430. HTTPFS - Implement XAttr support. (Yi Liu via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605118 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 8:59 AM",
      "commitName": "46162a213f60f915df76c60b0412f45a021e1e7e",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "11/06/14 3:35 PM",
      "commitNameOld": "8bfbec8cfb7fe7c7affef98b17c1a07b81fe27f0",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 12.73,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,5 @@\n   private HttpURLConnection getConnection(final String method,\n       Map\u003cString, String\u003e params, Path path, boolean makeQualified)\n       throws IOException {\n-    if (!realUser.getShortUserName().equals(doAs)) {\n-      params.put(DO_AS_PARAM, doAs);\n-    }\n-    HttpFSKerberosAuthenticator.injectDelegationToken(params, delegationToken);\n-    if (makeQualified) {\n-      path \u003d makeQualified(path);\n-    }\n-    final URL url \u003d HttpFSUtils.createURL(path, params);\n-    return doAsRealUserIfNecessary(new Callable\u003cHttpURLConnection\u003e() {\n-      @Override\n-      public HttpURLConnection call() throws Exception {\n-        return getConnection(url, method);\n-      }\n-    });\n+    return getConnection(method, params, null, path, makeQualified);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection getConnection(final String method,\n      Map\u003cString, String\u003e params, Path path, boolean makeQualified)\n      throws IOException {\n    return getConnection(method, params, null, path, makeQualified);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java",
      "extendedDetails": {}
    },
    "5e09ae1633fb7fcf293ea10e663064e566c70909": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5703. Add support for HTTPS and swebhdfs to HttpFS. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1560504 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/01/14 12:38 PM",
      "commitName": "5e09ae1633fb7fcf293ea10e663064e566c70909",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "01/02/13 11:42 AM",
      "commitNameOld": "bbdae834d2ec26b329b48b4c9343ebb182a63242",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 355.04,
      "commitsBetweenForRepo": 2119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private HttpURLConnection getConnection(final String method,\n       Map\u003cString, String\u003e params, Path path, boolean makeQualified)\n       throws IOException {\n     if (!realUser.getShortUserName().equals(doAs)) {\n       params.put(DO_AS_PARAM, doAs);\n     }\n     HttpFSKerberosAuthenticator.injectDelegationToken(params, delegationToken);\n     if (makeQualified) {\n       path \u003d makeQualified(path);\n     }\n-    final URL url \u003d HttpFSUtils.createHttpURL(path, params);\n+    final URL url \u003d HttpFSUtils.createURL(path, params);\n     return doAsRealUserIfNecessary(new Callable\u003cHttpURLConnection\u003e() {\n       @Override\n       public HttpURLConnection call() throws Exception {\n         return getConnection(url, method);\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection getConnection(final String method,\n      Map\u003cString, String\u003e params, Path path, boolean makeQualified)\n      throws IOException {\n    if (!realUser.getShortUserName().equals(doAs)) {\n      params.put(DO_AS_PARAM, doAs);\n    }\n    HttpFSKerberosAuthenticator.injectDelegationToken(params, delegationToken);\n    if (makeQualified) {\n      path \u003d makeQualified(path);\n    }\n    final URL url \u003d HttpFSUtils.createURL(path, params);\n    return doAsRealUserIfNecessary(new Callable\u003cHttpURLConnection\u003e() {\n      @Override\n      public HttpURLConnection call() throws Exception {\n        return getConnection(url, method);\n      }\n    });\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java",
      "extendedDetails": {}
    },
    "4d4560189adccb941a3dc5eee7add134adbf6519": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HDFS-3113. httpfs does not support delegation tokens. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1365988 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/07/12 6:39 AM",
      "commitName": "4d4560189adccb941a3dc5eee7add134adbf6519",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3113. httpfs does not support delegation tokens. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1365988 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/07/12 6:39 AM",
          "commitName": "4d4560189adccb941a3dc5eee7add134adbf6519",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "29/06/12 1:59 PM",
          "commitNameOld": "34605c9594770b204b28a809d8dbc0dae11ff0d1",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 26.69,
          "commitsBetweenForRepo": 161,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,18 @@\n-  private HttpURLConnection getConnection(String method, Map\u003cString, String\u003e params,\n-                                          Path path, boolean makeQualified) throws IOException {\n-    params.put(DO_AS_PARAM, doAs);\n+  private HttpURLConnection getConnection(final String method,\n+      Map\u003cString, String\u003e params, Path path, boolean makeQualified)\n+      throws IOException {\n+    if (!realUser.getShortUserName().equals(doAs)) {\n+      params.put(DO_AS_PARAM, doAs);\n+    }\n+    HttpFSKerberosAuthenticator.injectDelegationToken(params, delegationToken);\n     if (makeQualified) {\n       path \u003d makeQualified(path);\n     }\n-    URI uri \u003d path.toUri();\n-    StringBuilder sb \u003d new StringBuilder();\n-    sb.append(uri.getScheme()).append(\"://\").append(uri.getAuthority()).\n-      append(SERVICE_PREFIX).append(uri.getPath());\n-\n-    String separator \u003d \"?\";\n-    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n-      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n-        append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n-      separator \u003d \"\u0026\";\n-    }\n-    URL url \u003d new URL(sb.toString());\n-    return getConnection(url, method);\n+    final URL url \u003d HttpFSUtils.createHttpURL(path, params);\n+    return doAsRealUserIfNecessary(new Callable\u003cHttpURLConnection\u003e() {\n+      @Override\n+      public HttpURLConnection call() throws Exception {\n+        return getConnection(url, method);\n+      }\n+    });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private HttpURLConnection getConnection(final String method,\n      Map\u003cString, String\u003e params, Path path, boolean makeQualified)\n      throws IOException {\n    if (!realUser.getShortUserName().equals(doAs)) {\n      params.put(DO_AS_PARAM, doAs);\n    }\n    HttpFSKerberosAuthenticator.injectDelegationToken(params, delegationToken);\n    if (makeQualified) {\n      path \u003d makeQualified(path);\n    }\n    final URL url \u003d HttpFSUtils.createHttpURL(path, params);\n    return doAsRealUserIfNecessary(new Callable\u003cHttpURLConnection\u003e() {\n      @Override\n      public HttpURLConnection call() throws Exception {\n        return getConnection(url, method);\n      }\n    });\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-3113. httpfs does not support delegation tokens. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1365988 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/07/12 6:39 AM",
          "commitName": "4d4560189adccb941a3dc5eee7add134adbf6519",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "29/06/12 1:59 PM",
          "commitNameOld": "34605c9594770b204b28a809d8dbc0dae11ff0d1",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 26.69,
          "commitsBetweenForRepo": 161,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,18 @@\n-  private HttpURLConnection getConnection(String method, Map\u003cString, String\u003e params,\n-                                          Path path, boolean makeQualified) throws IOException {\n-    params.put(DO_AS_PARAM, doAs);\n+  private HttpURLConnection getConnection(final String method,\n+      Map\u003cString, String\u003e params, Path path, boolean makeQualified)\n+      throws IOException {\n+    if (!realUser.getShortUserName().equals(doAs)) {\n+      params.put(DO_AS_PARAM, doAs);\n+    }\n+    HttpFSKerberosAuthenticator.injectDelegationToken(params, delegationToken);\n     if (makeQualified) {\n       path \u003d makeQualified(path);\n     }\n-    URI uri \u003d path.toUri();\n-    StringBuilder sb \u003d new StringBuilder();\n-    sb.append(uri.getScheme()).append(\"://\").append(uri.getAuthority()).\n-      append(SERVICE_PREFIX).append(uri.getPath());\n-\n-    String separator \u003d \"?\";\n-    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n-      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n-        append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n-      separator \u003d \"\u0026\";\n-    }\n-    URL url \u003d new URL(sb.toString());\n-    return getConnection(url, method);\n+    final URL url \u003d HttpFSUtils.createHttpURL(path, params);\n+    return doAsRealUserIfNecessary(new Callable\u003cHttpURLConnection\u003e() {\n+      @Override\n+      public HttpURLConnection call() throws Exception {\n+        return getConnection(url, method);\n+      }\n+    });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private HttpURLConnection getConnection(final String method,\n      Map\u003cString, String\u003e params, Path path, boolean makeQualified)\n      throws IOException {\n    if (!realUser.getShortUserName().equals(doAs)) {\n      params.put(DO_AS_PARAM, doAs);\n    }\n    HttpFSKerberosAuthenticator.injectDelegationToken(params, delegationToken);\n    if (makeQualified) {\n      path \u003d makeQualified(path);\n    }\n    final URL url \u003d HttpFSUtils.createHttpURL(path, params);\n    return doAsRealUserIfNecessary(new Callable\u003cHttpURLConnection\u003e() {\n      @Override\n      public HttpURLConnection call() throws Exception {\n        return getConnection(url, method);\n      }\n    });\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java",
          "extendedDetails": {
            "oldValue": "[method-String, params-Map\u003cString,String\u003e, path-Path, makeQualified-boolean]",
            "newValue": "[method-String(modifiers-final), params-Map\u003cString,String\u003e, path-Path, makeQualified-boolean]"
          }
        }
      ]
    },
    "3334306512b5dc932814fded31a89ba1ee97cd9f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2178. Contributing Hoop to HDFS, replacement for HDFS proxy with read/write capabilities. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212060 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/12/11 11:25 AM",
      "commitName": "3334306512b5dc932814fded31a89ba1ee97cd9f",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,20 @@\n+  private HttpURLConnection getConnection(String method, Map\u003cString, String\u003e params,\n+                                          Path path, boolean makeQualified) throws IOException {\n+    params.put(DO_AS_PARAM, doAs);\n+    if (makeQualified) {\n+      path \u003d makeQualified(path);\n+    }\n+    URI uri \u003d path.toUri();\n+    StringBuilder sb \u003d new StringBuilder();\n+    sb.append(uri.getScheme()).append(\"://\").append(uri.getAuthority()).\n+      append(SERVICE_PREFIX).append(uri.getPath());\n+\n+    String separator \u003d \"?\";\n+    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n+      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n+        append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n+      separator \u003d \"\u0026\";\n+    }\n+    URL url \u003d new URL(sb.toString());\n+    return getConnection(url, method);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private HttpURLConnection getConnection(String method, Map\u003cString, String\u003e params,\n                                          Path path, boolean makeQualified) throws IOException {\n    params.put(DO_AS_PARAM, doAs);\n    if (makeQualified) {\n      path \u003d makeQualified(path);\n    }\n    URI uri \u003d path.toUri();\n    StringBuilder sb \u003d new StringBuilder();\n    sb.append(uri.getScheme()).append(\"://\").append(uri.getAuthority()).\n      append(SERVICE_PREFIX).append(uri.getPath());\n\n    String separator \u003d \"?\";\n    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n        append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n      separator \u003d \"\u0026\";\n    }\n    URL url \u003d new URL(sb.toString());\n    return getConnection(url, method);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java"
    }
  }
}