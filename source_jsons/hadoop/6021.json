{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSEditLog.java",
  "functionName": "openForWrite",
  "functionId": "openForWrite___layoutVersion-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
  "functionStartLine": 319,
  "functionEndLine": 339,
  "numCommitsSeen": 251,
  "timeTaken": 4722,
  "changeHistory": [
    "60fc2a138827c2c29fa7e9d6844e3b8d43809726",
    "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5",
    "512a18a8d92305a34f3037064ceabdc5aff1f8bf",
    "8c62c46046656c01b327c378e89d57b4bf37e16e",
    "74dfa8f1f22d58df64a78c660af111e17ab7053e",
    "841fdc5628fbba341efe0bfc6763fe12e7fca7f4"
  ],
  "changeHistoryShort": {
    "60fc2a138827c2c29fa7e9d6844e3b8d43809726": "Ybodychange",
    "098ec2b11ff3f677eb823f75b147a1ac8dbf959e": "Ybodychange",
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5": "Ymultichange(Yparameterchange,Ybodychange)",
    "512a18a8d92305a34f3037064ceabdc5aff1f8bf": "Ybodychange",
    "8c62c46046656c01b327c378e89d57b4bf37e16e": "Ybodychange",
    "74dfa8f1f22d58df64a78c660af111e17ab7053e": "Ybodychange",
    "841fdc5628fbba341efe0bfc6763fe12e7fca7f4": "Ybodychange"
  },
  "changeHistoryDetails": {
    "60fc2a138827c2c29fa7e9d6844e3b8d43809726": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12804. Use slf4j instead of log4j in FSEditLog. Contributed by Mukul Kumar Singh.\n",
      "commitDate": "20/11/17 12:49 PM",
      "commitName": "60fc2a138827c2c29fa7e9d6844e3b8d43809726",
      "commitAuthor": "Chen Liang",
      "commitDateOld": "16/10/17 9:51 AM",
      "commitNameOld": "035c6ee587e444550af6420676e4cee049e09869",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 35.17,
      "commitsBetweenForRepo": 318,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n   synchronized void openForWrite(int layoutVersion) throws IOException {\n     Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n         \"Bad state: %s\", state);\n \n     long segmentTxId \u003d getLastWrittenTxId() + 1;\n     // Safety check: we should never start a segment if there are\n     // newer txids readable.\n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n     journalSet.selectInputStreams(streams, segmentTxId, true, false);\n     if (!streams.isEmpty()) {\n       String error \u003d String.format(\"Cannot start writing at txid %s \" +\n         \"when there is a stream available for read: %s\",\n         segmentTxId, streams.get(0));\n-      IOUtils.cleanup(LOG, streams.toArray(new EditLogInputStream[0]));\n+      IOUtils.cleanupWithLogger(LOG,\n+          streams.toArray(new EditLogInputStream[0]));\n       throw new IllegalStateException(error);\n     }\n     \n     startLogSegmentAndWriteHeaderTxn(segmentTxId, layoutVersion);\n     assert state \u003d\u003d State.IN_SEGMENT : \"Bad state: \" + state;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void openForWrite(int layoutVersion) throws IOException {\n    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n        \"Bad state: %s\", state);\n\n    long segmentTxId \u003d getLastWrittenTxId() + 1;\n    // Safety check: we should never start a segment if there are\n    // newer txids readable.\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    journalSet.selectInputStreams(streams, segmentTxId, true, false);\n    if (!streams.isEmpty()) {\n      String error \u003d String.format(\"Cannot start writing at txid %s \" +\n        \"when there is a stream available for read: %s\",\n        segmentTxId, streams.get(0));\n      IOUtils.cleanupWithLogger(LOG,\n          streams.toArray(new EditLogInputStream[0]));\n      throw new IllegalStateException(error);\n    }\n    \n    startLogSegmentAndWriteHeaderTxn(segmentTxId, layoutVersion);\n    assert state \u003d\u003d State.IN_SEGMENT : \"Bad state: \" + state;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "098ec2b11ff3f677eb823f75b147a1ac8dbf959e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10519. Add a configuration option to enable in-progress edit log tailing. Contributed by Jiayi Zhou.\n",
      "commitDate": "27/07/16 5:55 PM",
      "commitName": "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "07/06/16 1:52 AM",
      "commitNameOld": "e620530301fd3e62537d4b7bc3d8ed296bda1ffc",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 50.67,
      "commitsBetweenForRepo": 454,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   synchronized void openForWrite(int layoutVersion) throws IOException {\n     Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n         \"Bad state: %s\", state);\n \n     long segmentTxId \u003d getLastWrittenTxId() + 1;\n     // Safety check: we should never start a segment if there are\n     // newer txids readable.\n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n-    journalSet.selectInputStreams(streams, segmentTxId, true);\n+    journalSet.selectInputStreams(streams, segmentTxId, true, false);\n     if (!streams.isEmpty()) {\n       String error \u003d String.format(\"Cannot start writing at txid %s \" +\n         \"when there is a stream available for read: %s\",\n         segmentTxId, streams.get(0));\n       IOUtils.cleanup(LOG, streams.toArray(new EditLogInputStream[0]));\n       throw new IllegalStateException(error);\n     }\n     \n     startLogSegmentAndWriteHeaderTxn(segmentTxId, layoutVersion);\n     assert state \u003d\u003d State.IN_SEGMENT : \"Bad state: \" + state;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void openForWrite(int layoutVersion) throws IOException {\n    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n        \"Bad state: %s\", state);\n\n    long segmentTxId \u003d getLastWrittenTxId() + 1;\n    // Safety check: we should never start a segment if there are\n    // newer txids readable.\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    journalSet.selectInputStreams(streams, segmentTxId, true, false);\n    if (!streams.isEmpty()) {\n      String error \u003d String.format(\"Cannot start writing at txid %s \" +\n        \"when there is a stream available for read: %s\",\n        segmentTxId, streams.get(0));\n      IOUtils.cleanup(LOG, streams.toArray(new EditLogInputStream[0]));\n      throw new IllegalStateException(error);\n    }\n    \n    startLogSegmentAndWriteHeaderTxn(segmentTxId, layoutVersion);\n    assert state \u003d\u003d State.IN_SEGMENT : \"Bad state: \" + state;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8432. Introduce a minimum compatible layout version to allow downgrade in more rolling upgrade use cases. Contributed by Chris Nauroth.\n",
      "commitDate": "06/06/15 9:43 AM",
      "commitName": "71de367c5e80ea76d1e8d21f0216cd6b879dcee5",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8432. Introduce a minimum compatible layout version to allow downgrade in more rolling upgrade use cases. Contributed by Chris Nauroth.\n",
          "commitDate": "06/06/15 9:43 AM",
          "commitName": "71de367c5e80ea76d1e8d21f0216cd6b879dcee5",
          "commitAuthor": "cnauroth",
          "commitDateOld": "27/05/15 3:42 PM",
          "commitNameOld": "4928f5473394981829e5ffd4b16ea0801baf5c45",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 9.75,
          "commitsBetweenForRepo": 88,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-  synchronized void openForWrite() throws IOException {\n+  synchronized void openForWrite(int layoutVersion) throws IOException {\n     Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n         \"Bad state: %s\", state);\n \n     long segmentTxId \u003d getLastWrittenTxId() + 1;\n     // Safety check: we should never start a segment if there are\n     // newer txids readable.\n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n     journalSet.selectInputStreams(streams, segmentTxId, true);\n     if (!streams.isEmpty()) {\n       String error \u003d String.format(\"Cannot start writing at txid %s \" +\n         \"when there is a stream available for read: %s\",\n         segmentTxId, streams.get(0));\n       IOUtils.cleanup(LOG, streams.toArray(new EditLogInputStream[0]));\n       throw new IllegalStateException(error);\n     }\n     \n-    startLogSegmentAndWriteHeaderTxn(segmentTxId);\n+    startLogSegmentAndWriteHeaderTxn(segmentTxId, layoutVersion);\n     assert state \u003d\u003d State.IN_SEGMENT : \"Bad state: \" + state;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void openForWrite(int layoutVersion) throws IOException {\n    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n        \"Bad state: %s\", state);\n\n    long segmentTxId \u003d getLastWrittenTxId() + 1;\n    // Safety check: we should never start a segment if there are\n    // newer txids readable.\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    journalSet.selectInputStreams(streams, segmentTxId, true);\n    if (!streams.isEmpty()) {\n      String error \u003d String.format(\"Cannot start writing at txid %s \" +\n        \"when there is a stream available for read: %s\",\n        segmentTxId, streams.get(0));\n      IOUtils.cleanup(LOG, streams.toArray(new EditLogInputStream[0]));\n      throw new IllegalStateException(error);\n    }\n    \n    startLogSegmentAndWriteHeaderTxn(segmentTxId, layoutVersion);\n    assert state \u003d\u003d State.IN_SEGMENT : \"Bad state: \" + state;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[layoutVersion-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8432. Introduce a minimum compatible layout version to allow downgrade in more rolling upgrade use cases. Contributed by Chris Nauroth.\n",
          "commitDate": "06/06/15 9:43 AM",
          "commitName": "71de367c5e80ea76d1e8d21f0216cd6b879dcee5",
          "commitAuthor": "cnauroth",
          "commitDateOld": "27/05/15 3:42 PM",
          "commitNameOld": "4928f5473394981829e5ffd4b16ea0801baf5c45",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 9.75,
          "commitsBetweenForRepo": 88,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-  synchronized void openForWrite() throws IOException {\n+  synchronized void openForWrite(int layoutVersion) throws IOException {\n     Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n         \"Bad state: %s\", state);\n \n     long segmentTxId \u003d getLastWrittenTxId() + 1;\n     // Safety check: we should never start a segment if there are\n     // newer txids readable.\n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n     journalSet.selectInputStreams(streams, segmentTxId, true);\n     if (!streams.isEmpty()) {\n       String error \u003d String.format(\"Cannot start writing at txid %s \" +\n         \"when there is a stream available for read: %s\",\n         segmentTxId, streams.get(0));\n       IOUtils.cleanup(LOG, streams.toArray(new EditLogInputStream[0]));\n       throw new IllegalStateException(error);\n     }\n     \n-    startLogSegmentAndWriteHeaderTxn(segmentTxId);\n+    startLogSegmentAndWriteHeaderTxn(segmentTxId, layoutVersion);\n     assert state \u003d\u003d State.IN_SEGMENT : \"Bad state: \" + state;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void openForWrite(int layoutVersion) throws IOException {\n    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n        \"Bad state: %s\", state);\n\n    long segmentTxId \u003d getLastWrittenTxId() + 1;\n    // Safety check: we should never start a segment if there are\n    // newer txids readable.\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    journalSet.selectInputStreams(streams, segmentTxId, true);\n    if (!streams.isEmpty()) {\n      String error \u003d String.format(\"Cannot start writing at txid %s \" +\n        \"when there is a stream available for read: %s\",\n        segmentTxId, streams.get(0));\n      IOUtils.cleanup(LOG, streams.toArray(new EditLogInputStream[0]));\n      throw new IllegalStateException(error);\n    }\n    \n    startLogSegmentAndWriteHeaderTxn(segmentTxId, layoutVersion);\n    assert state \u003d\u003d State.IN_SEGMENT : \"Bad state: \" + state;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {}
        }
      ]
    },
    "512a18a8d92305a34f3037064ceabdc5aff1f8bf": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5074. Allow starting up from an fsimage checkpoint in the middle of a segment. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550016 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/13 5:32 PM",
      "commitName": "512a18a8d92305a34f3037064ceabdc5aff1f8bf",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "27/11/13 11:20 PM",
      "commitNameOld": "9da451cac57f3cd64c2c047675e5b60ca88ecf83",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 12.76,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   synchronized void openForWrite() throws IOException {\n     Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n         \"Bad state: %s\", state);\n \n     long segmentTxId \u003d getLastWrittenTxId() + 1;\n     // Safety check: we should never start a segment if there are\n     // newer txids readable.\n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n-    journalSet.selectInputStreams(streams, segmentTxId, true, true);\n+    journalSet.selectInputStreams(streams, segmentTxId, true);\n     if (!streams.isEmpty()) {\n       String error \u003d String.format(\"Cannot start writing at txid %s \" +\n         \"when there is a stream available for read: %s\",\n         segmentTxId, streams.get(0));\n       IOUtils.cleanup(LOG, streams.toArray(new EditLogInputStream[0]));\n       throw new IllegalStateException(error);\n     }\n     \n     startLogSegmentAndWriteHeaderTxn(segmentTxId);\n     assert state \u003d\u003d State.IN_SEGMENT : \"Bad state: \" + state;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void openForWrite() throws IOException {\n    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n        \"Bad state: %s\", state);\n\n    long segmentTxId \u003d getLastWrittenTxId() + 1;\n    // Safety check: we should never start a segment if there are\n    // newer txids readable.\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    journalSet.selectInputStreams(streams, segmentTxId, true);\n    if (!streams.isEmpty()) {\n      String error \u003d String.format(\"Cannot start writing at txid %s \" +\n        \"when there is a stream available for read: %s\",\n        segmentTxId, streams.get(0));\n      IOUtils.cleanup(LOG, streams.toArray(new EditLogInputStream[0]));\n      throw new IllegalStateException(error);\n    }\n    \n    startLogSegmentAndWriteHeaderTxn(segmentTxId);\n    assert state \u003d\u003d State.IN_SEGMENT : \"Bad state: \" + state;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "8c62c46046656c01b327c378e89d57b4bf37e16e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4298. StorageRetentionManager spews warnings when used with QJM. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485371 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/05/13 12:37 PM",
      "commitName": "8c62c46046656c01b327c378e89d57b4bf37e16e",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "23/04/13 7:21 PM",
      "commitNameOld": "5f1e3b561a24c05537561a058a44eaa2d3408d67",
      "commitAuthorOld": "",
      "daysBetweenCommits": 28.72,
      "commitsBetweenForRepo": 174,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   synchronized void openForWrite() throws IOException {\n     Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n         \"Bad state: %s\", state);\n \n     long segmentTxId \u003d getLastWrittenTxId() + 1;\n     // Safety check: we should never start a segment if there are\n     // newer txids readable.\n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n-    journalSet.selectInputStreams(streams, segmentTxId, true);\n+    journalSet.selectInputStreams(streams, segmentTxId, true, true);\n     if (!streams.isEmpty()) {\n       String error \u003d String.format(\"Cannot start writing at txid %s \" +\n         \"when there is a stream available for read: %s\",\n         segmentTxId, streams.get(0));\n       IOUtils.cleanup(LOG, streams.toArray(new EditLogInputStream[0]));\n       throw new IllegalStateException(error);\n     }\n     \n     startLogSegmentAndWriteHeaderTxn(segmentTxId);\n     assert state \u003d\u003d State.IN_SEGMENT : \"Bad state: \" + state;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void openForWrite() throws IOException {\n    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n        \"Bad state: %s\", state);\n\n    long segmentTxId \u003d getLastWrittenTxId() + 1;\n    // Safety check: we should never start a segment if there are\n    // newer txids readable.\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    journalSet.selectInputStreams(streams, segmentTxId, true, true);\n    if (!streams.isEmpty()) {\n      String error \u003d String.format(\"Cannot start writing at txid %s \" +\n        \"when there is a stream available for read: %s\",\n        segmentTxId, streams.get(0));\n      IOUtils.cleanup(LOG, streams.toArray(new EditLogInputStream[0]));\n      throw new IllegalStateException(error);\n    }\n    \n    startLogSegmentAndWriteHeaderTxn(segmentTxId);\n    assert state \u003d\u003d State.IN_SEGMENT : \"Bad state: \" + state;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "74dfa8f1f22d58df64a78c660af111e17ab7053e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342042 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/12 1:42 PM",
      "commitName": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "16/04/12 12:31 PM",
      "commitNameOld": "f1667dee146fe5e3edbb50e409ae96fa0777473a",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 37.05,
      "commitsBetweenForRepo": 235,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n   synchronized void openForWrite() throws IOException {\n     Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n         \"Bad state: %s\", state);\n \n     long segmentTxId \u003d getLastWrittenTxId() + 1;\n     // Safety check: we should never start a segment if there are\n     // newer txids readable.\n-    EditLogInputStream s \u003d journalSet.getInputStream(segmentTxId, true);\n-    try {\n-      Preconditions.checkState(s \u003d\u003d null,\n-          \"Cannot start writing at txid %s when there is a stream \" +\n-          \"available for read: %s\", segmentTxId, s);\n-    } finally {\n-      IOUtils.closeStream(s);\n+    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n+    journalSet.selectInputStreams(streams, segmentTxId, true);\n+    if (!streams.isEmpty()) {\n+      String error \u003d String.format(\"Cannot start writing at txid %s \" +\n+        \"when there is a stream available for read: %s\",\n+        segmentTxId, streams.get(0));\n+      IOUtils.cleanup(LOG, streams.toArray(new EditLogInputStream[0]));\n+      throw new IllegalStateException(error);\n     }\n     \n     startLogSegmentAndWriteHeaderTxn(segmentTxId);\n     assert state \u003d\u003d State.IN_SEGMENT : \"Bad state: \" + state;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void openForWrite() throws IOException {\n    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n        \"Bad state: %s\", state);\n\n    long segmentTxId \u003d getLastWrittenTxId() + 1;\n    // Safety check: we should never start a segment if there are\n    // newer txids readable.\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    journalSet.selectInputStreams(streams, segmentTxId, true);\n    if (!streams.isEmpty()) {\n      String error \u003d String.format(\"Cannot start writing at txid %s \" +\n        \"when there is a stream available for read: %s\",\n        segmentTxId, streams.get(0));\n      IOUtils.cleanup(LOG, streams.toArray(new EditLogInputStream[0]));\n      throw new IllegalStateException(error);\n    }\n    \n    startLogSegmentAndWriteHeaderTxn(segmentTxId);\n    assert state \u003d\u003d State.IN_SEGMENT : \"Bad state: \" + state;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "841fdc5628fbba341efe0bfc6763fe12e7fca7f4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3273. Refactor BackupImage and FSEditLog, and rename JournalListener.rollLogs(..) to startLogSegment(..). \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1326016 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/04/12 4:41 PM",
      "commitName": "841fdc5628fbba341efe0bfc6763fe12e7fca7f4",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "12/04/12 2:11 PM",
      "commitNameOld": "07a436744588d131d8ef31abab3093aa59b4d531",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 1.1,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   synchronized void openForWrite() throws IOException {\n     Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n         \"Bad state: %s\", state);\n \n     long segmentTxId \u003d getLastWrittenTxId() + 1;\n     // Safety check: we should never start a segment if there are\n     // newer txids readable.\n     EditLogInputStream s \u003d journalSet.getInputStream(segmentTxId, true);\n     try {\n       Preconditions.checkState(s \u003d\u003d null,\n           \"Cannot start writing at txid %s when there is a stream \" +\n           \"available for read: %s\", segmentTxId, s);\n     } finally {\n       IOUtils.closeStream(s);\n     }\n     \n-    startLogSegment(segmentTxId, true);\n+    startLogSegmentAndWriteHeaderTxn(segmentTxId);\n     assert state \u003d\u003d State.IN_SEGMENT : \"Bad state: \" + state;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void openForWrite() throws IOException {\n    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n        \"Bad state: %s\", state);\n\n    long segmentTxId \u003d getLastWrittenTxId() + 1;\n    // Safety check: we should never start a segment if there are\n    // newer txids readable.\n    EditLogInputStream s \u003d journalSet.getInputStream(segmentTxId, true);\n    try {\n      Preconditions.checkState(s \u003d\u003d null,\n          \"Cannot start writing at txid %s when there is a stream \" +\n          \"available for read: %s\", segmentTxId, s);\n    } finally {\n      IOUtils.closeStream(s);\n    }\n    \n    startLogSegmentAndWriteHeaderTxn(segmentTxId);\n    assert state \u003d\u003d State.IN_SEGMENT : \"Bad state: \" + state;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    }
  }
}