{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OpportunisticContainerAllocatorAMService.java",
  "functionName": "registerApplicationMasterForDistributedScheduling",
  "functionId": "registerApplicationMasterForDistributedScheduling___request-RegisterApplicationMasterRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
  "functionStartLine": 321,
  "functionEndLine": 343,
  "numCommitsSeen": 32,
  "timeTaken": 4590,
  "changeHistory": [
    "b0aace21b1ef3436ba9d516186208fee9a9ceef2",
    "10be45986cdf86a89055065b752959bd6369d54f",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
    "f0ac18d001d97914a9ee810b1fab56c5cebff830",
    "341888a0aa23f24458b4e6e34868794b9735c06a",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b"
  ],
  "changeHistoryShort": {
    "b0aace21b1ef3436ba9d516186208fee9a9ceef2": "Ybodychange",
    "10be45986cdf86a89055065b752959bd6369d54f": "Ybodychange",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": "Ymultichange(Yfilerename,Ybodychange)",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
    "f0ac18d001d97914a9ee810b1fab56c5cebff830": "Ybodychange",
    "341888a0aa23f24458b4e6e34868794b9735c06a": "Ybodychange",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b0aace21b1ef3436ba9d516186208fee9a9ceef2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5982. Simplify opportunistic container parameters and metrics. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "09/12/16 4:41 PM",
      "commitName": "b0aace21b1ef3436ba9d516186208fee9a9ceef2",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "23/11/16 9:53 AM",
      "commitNameOld": "005850b28feb2f7bb8c2844d11e3f9d21b45d754",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 16.28,
      "commitsBetweenForRepo": 116,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n       registerApplicationMasterForDistributedScheduling(\n       RegisterApplicationMasterRequest request) throws YarnException,\n       IOException {\n     RegisterApplicationMasterResponse response \u003d\n         registerApplicationMaster(request);\n     RegisterDistributedSchedulingAMResponse dsResp \u003d recordFactory\n         .newRecordInstance(RegisterDistributedSchedulingAMResponse.class);\n     dsResp.setRegisterResponse(response);\n-    dsResp.setMinContainerResource(createMinContainerResource());\n-    dsResp.setMaxContainerResource(createMaxContainerResource());\n-    dsResp.setIncrContainerResource(createIncrContainerResource());\n+    dsResp.setMinContainerResource(\n+        rmContext.getScheduler().getMinimumResourceCapability());\n+    dsResp.setMaxContainerResource(\n+        rmContext.getScheduler().getMaximumResourceCapability());\n     dsResp.setContainerTokenExpiryInterval(\n         getConfig().getInt(\n-            YarnConfiguration.OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS,\n-            YarnConfiguration.\n-                OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS_DEFAULT));\n+            YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n+            YarnConfiguration.DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS));\n     dsResp.setContainerIdStart(\n         this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n \n     // Set nodes to be used for scheduling\n     dsResp.setNodesForScheduling(getLeastLoadedNodes());\n     return dsResp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      registerApplicationMasterForDistributedScheduling(\n      RegisterApplicationMasterRequest request) throws YarnException,\n      IOException {\n    RegisterApplicationMasterResponse response \u003d\n        registerApplicationMaster(request);\n    RegisterDistributedSchedulingAMResponse dsResp \u003d recordFactory\n        .newRecordInstance(RegisterDistributedSchedulingAMResponse.class);\n    dsResp.setRegisterResponse(response);\n    dsResp.setMinContainerResource(\n        rmContext.getScheduler().getMinimumResourceCapability());\n    dsResp.setMaxContainerResource(\n        rmContext.getScheduler().getMaximumResourceCapability());\n    dsResp.setContainerTokenExpiryInterval(\n        getConfig().getInt(\n            YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS));\n    dsResp.setContainerIdStart(\n        this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n\n    // Set nodes to be used for scheduling\n    dsResp.setNodesForScheduling(getLeastLoadedNodes());\n    return dsResp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "10be45986cdf86a89055065b752959bd6369d54f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5486. Update OpportunisticContainerAllocatorAMService::allocate method to handle OPPORTUNISTIC container requests. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "29/09/16 3:11 PM",
      "commitName": "10be45986cdf86a89055065b752959bd6369d54f",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "09/08/16 12:42 AM",
      "commitNameOld": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 51.6,
      "commitsBetweenForRepo": 319,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,23 @@\n   registerApplicationMasterForDistributedScheduling(\n       RegisterApplicationMasterRequest request) throws YarnException,\n       IOException {\n     RegisterApplicationMasterResponse response \u003d\n         registerApplicationMaster(request);\n     RegisterDistributedSchedulingAMResponse dsResp \u003d recordFactory\n         .newRecordInstance(RegisterDistributedSchedulingAMResponse.class);\n     dsResp.setRegisterResponse(response);\n-    dsResp.setMinContainerResource(\n-        Resource.newInstance(\n-            getConfig().getInt(\n-                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MIN_MEMORY_MB,\n-                YarnConfiguration.\n-                    OPPORTUNISTIC_CONTAINERS_MIN_MEMORY_MB_DEFAULT),\n-            getConfig().getInt(\n-                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MIN_VCORES,\n-                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MIN_VCORES_DEFAULT)\n-        )\n-    );\n-    dsResp.setMaxContainerResource(\n-        Resource.newInstance(\n-            getConfig().getInt(\n-                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MAX_MEMORY_MB,\n-                YarnConfiguration\n-                    .OPPORTUNISTIC_CONTAINERS_MAX_MEMORY_MB_DEFAULT),\n-            getConfig().getInt(\n-                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MAX_VCORES,\n-                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MAX_VCORES_DEFAULT)\n-        )\n-    );\n-    dsResp.setIncrContainerResource(\n-        Resource.newInstance(\n-            getConfig().getInt(\n-                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_INCR_MEMORY_MB,\n-                YarnConfiguration.\n-                    OPPORTUNISTIC_CONTAINERS_INCR_MEMORY_MB_DEFAULT),\n-            getConfig().getInt(\n-                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_INCR_VCORES,\n-                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_INCR_VCORES_DEFAULT)\n-        )\n-    );\n+    dsResp.setMinContainerResource(createMinContainerResource());\n+    dsResp.setMaxContainerResource(createMaxContainerResource());\n+    dsResp.setIncrContainerResource(createIncrContainerResource());\n     dsResp.setContainerTokenExpiryInterval(\n         getConfig().getInt(\n             YarnConfiguration.OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS,\n             YarnConfiguration.\n                 OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS_DEFAULT));\n     dsResp.setContainerIdStart(\n         this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n \n     // Set nodes to be used for scheduling\n-    dsResp.setNodesForScheduling(\n-        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n+    dsResp.setNodesForScheduling(getLeastLoadedNodes());\n     return dsResp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  registerApplicationMasterForDistributedScheduling(\n      RegisterApplicationMasterRequest request) throws YarnException,\n      IOException {\n    RegisterApplicationMasterResponse response \u003d\n        registerApplicationMaster(request);\n    RegisterDistributedSchedulingAMResponse dsResp \u003d recordFactory\n        .newRecordInstance(RegisterDistributedSchedulingAMResponse.class);\n    dsResp.setRegisterResponse(response);\n    dsResp.setMinContainerResource(createMinContainerResource());\n    dsResp.setMaxContainerResource(createMaxContainerResource());\n    dsResp.setIncrContainerResource(createIncrContainerResource());\n    dsResp.setContainerTokenExpiryInterval(\n        getConfig().getInt(\n            YarnConfiguration.OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS,\n            YarnConfiguration.\n                OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS_DEFAULT));\n    dsResp.setContainerIdStart(\n        this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n\n    // Set nodes to be used for scheduling\n    dsResp.setNodesForScheduling(getLeastLoadedNodes());\n    return dsResp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
      "commitDate": "09/08/16 12:42 AM",
      "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
          "commitDate": "09/08/16 12:42 AM",
          "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "08/08/16 5:54 PM",
          "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,54 @@\n   registerApplicationMasterForDistributedScheduling(\n       RegisterApplicationMasterRequest request) throws YarnException,\n       IOException {\n     RegisterApplicationMasterResponse response \u003d\n         registerApplicationMaster(request);\n     RegisterDistributedSchedulingAMResponse dsResp \u003d recordFactory\n         .newRecordInstance(RegisterDistributedSchedulingAMResponse.class);\n     dsResp.setRegisterResponse(response);\n     dsResp.setMinContainerResource(\n         Resource.newInstance(\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_MEMORY_MB,\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MIN_MEMORY_MB,\n                 YarnConfiguration.\n-                    DIST_SCHEDULING_MIN_CONTAINER_MEMORY_MB_DEFAULT),\n+                    OPPORTUNISTIC_CONTAINERS_MIN_MEMORY_MB_DEFAULT),\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_VCORES,\n-                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_VCORES_DEFAULT)\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MIN_VCORES,\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MIN_VCORES_DEFAULT)\n         )\n     );\n     dsResp.setMaxContainerResource(\n         Resource.newInstance(\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_MB,\n-                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_MB_DEFAULT),\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MAX_MEMORY_MB,\n+                YarnConfiguration\n+                    .OPPORTUNISTIC_CONTAINERS_MAX_MEMORY_MB_DEFAULT),\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MAX_CONTAINER_VCORES,\n-                YarnConfiguration.DIST_SCHEDULING_MAX_CONTAINER_VCORES_DEFAULT)\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MAX_VCORES,\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MAX_VCORES_DEFAULT)\n         )\n     );\n     dsResp.setIncrContainerResource(\n         Resource.newInstance(\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_MEMORY_MB,\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_INCR_MEMORY_MB,\n                 YarnConfiguration.\n-                    DIST_SCHEDULING_INCR_CONTAINER_MEMORY_MB_DEFAULT),\n+                    OPPORTUNISTIC_CONTAINERS_INCR_MEMORY_MB_DEFAULT),\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_VCORES,\n-                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_VCORES_DEFAULT)\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_INCR_VCORES,\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_INCR_VCORES_DEFAULT)\n         )\n     );\n     dsResp.setContainerTokenExpiryInterval(\n         getConfig().getInt(\n-            YarnConfiguration.DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS,\n+            YarnConfiguration.OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS,\n             YarnConfiguration.\n-                DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS_DEFAULT));\n+                OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS_DEFAULT));\n     dsResp.setContainerIdStart(\n         this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n \n     // Set nodes to be used for scheduling\n     dsResp.setNodesForScheduling(\n         this.nodeMonitor.selectLeastLoadedNodes(this.k));\n     return dsResp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  registerApplicationMasterForDistributedScheduling(\n      RegisterApplicationMasterRequest request) throws YarnException,\n      IOException {\n    RegisterApplicationMasterResponse response \u003d\n        registerApplicationMaster(request);\n    RegisterDistributedSchedulingAMResponse dsResp \u003d recordFactory\n        .newRecordInstance(RegisterDistributedSchedulingAMResponse.class);\n    dsResp.setRegisterResponse(response);\n    dsResp.setMinContainerResource(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MIN_MEMORY_MB,\n                YarnConfiguration.\n                    OPPORTUNISTIC_CONTAINERS_MIN_MEMORY_MB_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MIN_VCORES,\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MIN_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setMaxContainerResource(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MAX_MEMORY_MB,\n                YarnConfiguration\n                    .OPPORTUNISTIC_CONTAINERS_MAX_MEMORY_MB_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MAX_VCORES,\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MAX_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setIncrContainerResource(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_INCR_MEMORY_MB,\n                YarnConfiguration.\n                    OPPORTUNISTIC_CONTAINERS_INCR_MEMORY_MB_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_INCR_VCORES,\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_INCR_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setContainerTokenExpiryInterval(\n        getConfig().getInt(\n            YarnConfiguration.OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS,\n            YarnConfiguration.\n                OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS_DEFAULT));\n    dsResp.setContainerIdStart(\n        this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n\n    // Set nodes to be used for scheduling\n    dsResp.setNodesForScheduling(\n        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n    return dsResp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
          "commitDate": "09/08/16 12:42 AM",
          "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "08/08/16 5:54 PM",
          "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,54 @@\n   registerApplicationMasterForDistributedScheduling(\n       RegisterApplicationMasterRequest request) throws YarnException,\n       IOException {\n     RegisterApplicationMasterResponse response \u003d\n         registerApplicationMaster(request);\n     RegisterDistributedSchedulingAMResponse dsResp \u003d recordFactory\n         .newRecordInstance(RegisterDistributedSchedulingAMResponse.class);\n     dsResp.setRegisterResponse(response);\n     dsResp.setMinContainerResource(\n         Resource.newInstance(\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_MEMORY_MB,\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MIN_MEMORY_MB,\n                 YarnConfiguration.\n-                    DIST_SCHEDULING_MIN_CONTAINER_MEMORY_MB_DEFAULT),\n+                    OPPORTUNISTIC_CONTAINERS_MIN_MEMORY_MB_DEFAULT),\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_VCORES,\n-                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_VCORES_DEFAULT)\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MIN_VCORES,\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MIN_VCORES_DEFAULT)\n         )\n     );\n     dsResp.setMaxContainerResource(\n         Resource.newInstance(\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_MB,\n-                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_MB_DEFAULT),\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MAX_MEMORY_MB,\n+                YarnConfiguration\n+                    .OPPORTUNISTIC_CONTAINERS_MAX_MEMORY_MB_DEFAULT),\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MAX_CONTAINER_VCORES,\n-                YarnConfiguration.DIST_SCHEDULING_MAX_CONTAINER_VCORES_DEFAULT)\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MAX_VCORES,\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MAX_VCORES_DEFAULT)\n         )\n     );\n     dsResp.setIncrContainerResource(\n         Resource.newInstance(\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_MEMORY_MB,\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_INCR_MEMORY_MB,\n                 YarnConfiguration.\n-                    DIST_SCHEDULING_INCR_CONTAINER_MEMORY_MB_DEFAULT),\n+                    OPPORTUNISTIC_CONTAINERS_INCR_MEMORY_MB_DEFAULT),\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_VCORES,\n-                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_VCORES_DEFAULT)\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_INCR_VCORES,\n+                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_INCR_VCORES_DEFAULT)\n         )\n     );\n     dsResp.setContainerTokenExpiryInterval(\n         getConfig().getInt(\n-            YarnConfiguration.DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS,\n+            YarnConfiguration.OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS,\n             YarnConfiguration.\n-                DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS_DEFAULT));\n+                OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS_DEFAULT));\n     dsResp.setContainerIdStart(\n         this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n \n     // Set nodes to be used for scheduling\n     dsResp.setNodesForScheduling(\n         this.nodeMonitor.selectLeastLoadedNodes(this.k));\n     return dsResp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  registerApplicationMasterForDistributedScheduling(\n      RegisterApplicationMasterRequest request) throws YarnException,\n      IOException {\n    RegisterApplicationMasterResponse response \u003d\n        registerApplicationMaster(request);\n    RegisterDistributedSchedulingAMResponse dsResp \u003d recordFactory\n        .newRecordInstance(RegisterDistributedSchedulingAMResponse.class);\n    dsResp.setRegisterResponse(response);\n    dsResp.setMinContainerResource(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MIN_MEMORY_MB,\n                YarnConfiguration.\n                    OPPORTUNISTIC_CONTAINERS_MIN_MEMORY_MB_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MIN_VCORES,\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MIN_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setMaxContainerResource(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MAX_MEMORY_MB,\n                YarnConfiguration\n                    .OPPORTUNISTIC_CONTAINERS_MAX_MEMORY_MB_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MAX_VCORES,\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_MAX_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setIncrContainerResource(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_INCR_MEMORY_MB,\n                YarnConfiguration.\n                    OPPORTUNISTIC_CONTAINERS_INCR_MEMORY_MB_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_INCR_VCORES,\n                YarnConfiguration.OPPORTUNISTIC_CONTAINERS_INCR_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setContainerTokenExpiryInterval(\n        getConfig().getInt(\n            YarnConfiguration.OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS,\n            YarnConfiguration.\n                OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS_DEFAULT));\n    dsResp.setContainerIdStart(\n        this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n\n    // Set nodes to be used for scheduling\n    dsResp.setNodesForScheduling(\n        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n    return dsResp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {}
        }
      ]
    },
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "31/07/16 11:48 AM",
      "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
          "commitDate": "31/07/16 11:48 AM",
          "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "30/07/16 7:29 PM",
          "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,53 @@\n   registerApplicationMasterForDistributedScheduling(\n       RegisterApplicationMasterRequest request) throws YarnException,\n       IOException {\n     RegisterApplicationMasterResponse response \u003d\n         registerApplicationMaster(request);\n-    DistSchedRegisterResponse dsResp \u003d recordFactory\n-        .newRecordInstance(DistSchedRegisterResponse.class);\n+    RegisterDistributedSchedulingAMResponse dsResp \u003d recordFactory\n+        .newRecordInstance(RegisterDistributedSchedulingAMResponse.class);\n     dsResp.setRegisterResponse(response);\n-    dsResp.setMinAllocatableCapabilty(\n+    dsResp.setMinContainerResource(\n         Resource.newInstance(\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY,\n-                YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY_DEFAULT),\n+                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_MEMORY_MB,\n+                YarnConfiguration.\n+                    DIST_SCHEDULING_MIN_CONTAINER_MEMORY_MB_DEFAULT),\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MIN_VCORES,\n-                YarnConfiguration.DIST_SCHEDULING_MIN_VCORES_DEFAULT)\n+                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_VCORES,\n+                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_VCORES_DEFAULT)\n         )\n     );\n-    dsResp.setMaxAllocatableCapabilty(\n+    dsResp.setMaxContainerResource(\n         Resource.newInstance(\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY,\n-                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_DEFAULT),\n+                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_MB,\n+                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_MB_DEFAULT),\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MAX_VCORES,\n-                YarnConfiguration.DIST_SCHEDULING_MAX_VCORES_DEFAULT)\n+                YarnConfiguration.DIST_SCHEDULING_MAX_CONTAINER_VCORES,\n+                YarnConfiguration.DIST_SCHEDULING_MAX_CONTAINER_VCORES_DEFAULT)\n         )\n     );\n-    dsResp.setIncrAllocatableCapabilty(\n+    dsResp.setIncrContainerResource(\n         Resource.newInstance(\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY,\n-                YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY_DEFAULT),\n+                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_MEMORY_MB,\n+                YarnConfiguration.\n+                    DIST_SCHEDULING_INCR_CONTAINER_MEMORY_MB_DEFAULT),\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_INCR_VCORES,\n-                YarnConfiguration.DIST_SCHEDULING_INCR_VCORES_DEFAULT)\n+                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_VCORES,\n+                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_VCORES_DEFAULT)\n         )\n     );\n     dsResp.setContainerTokenExpiryInterval(\n         getConfig().getInt(\n             YarnConfiguration.DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS,\n             YarnConfiguration.\n                 DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS_DEFAULT));\n     dsResp.setContainerIdStart(\n         this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n \n     // Set nodes to be used for scheduling\n     dsResp.setNodesForScheduling(\n         this.nodeMonitor.selectLeastLoadedNodes(this.k));\n     return dsResp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  registerApplicationMasterForDistributedScheduling(\n      RegisterApplicationMasterRequest request) throws YarnException,\n      IOException {\n    RegisterApplicationMasterResponse response \u003d\n        registerApplicationMaster(request);\n    RegisterDistributedSchedulingAMResponse dsResp \u003d recordFactory\n        .newRecordInstance(RegisterDistributedSchedulingAMResponse.class);\n    dsResp.setRegisterResponse(response);\n    dsResp.setMinContainerResource(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_MEMORY_MB,\n                YarnConfiguration.\n                    DIST_SCHEDULING_MIN_CONTAINER_MEMORY_MB_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setMaxContainerResource(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_MB,\n                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_MB_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MAX_CONTAINER_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_MAX_CONTAINER_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setIncrContainerResource(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_MEMORY_MB,\n                YarnConfiguration.\n                    DIST_SCHEDULING_INCR_CONTAINER_MEMORY_MB_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setContainerTokenExpiryInterval(\n        getConfig().getInt(\n            YarnConfiguration.DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS,\n            YarnConfiguration.\n                DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS_DEFAULT));\n    dsResp.setContainerIdStart(\n        this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n\n    // Set nodes to be used for scheduling\n    dsResp.setNodesForScheduling(\n        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n    return dsResp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
          "commitDate": "31/07/16 11:48 AM",
          "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "30/07/16 7:29 PM",
          "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,53 @@\n   registerApplicationMasterForDistributedScheduling(\n       RegisterApplicationMasterRequest request) throws YarnException,\n       IOException {\n     RegisterApplicationMasterResponse response \u003d\n         registerApplicationMaster(request);\n-    DistSchedRegisterResponse dsResp \u003d recordFactory\n-        .newRecordInstance(DistSchedRegisterResponse.class);\n+    RegisterDistributedSchedulingAMResponse dsResp \u003d recordFactory\n+        .newRecordInstance(RegisterDistributedSchedulingAMResponse.class);\n     dsResp.setRegisterResponse(response);\n-    dsResp.setMinAllocatableCapabilty(\n+    dsResp.setMinContainerResource(\n         Resource.newInstance(\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY,\n-                YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY_DEFAULT),\n+                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_MEMORY_MB,\n+                YarnConfiguration.\n+                    DIST_SCHEDULING_MIN_CONTAINER_MEMORY_MB_DEFAULT),\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MIN_VCORES,\n-                YarnConfiguration.DIST_SCHEDULING_MIN_VCORES_DEFAULT)\n+                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_VCORES,\n+                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_VCORES_DEFAULT)\n         )\n     );\n-    dsResp.setMaxAllocatableCapabilty(\n+    dsResp.setMaxContainerResource(\n         Resource.newInstance(\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY,\n-                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_DEFAULT),\n+                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_MB,\n+                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_MB_DEFAULT),\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MAX_VCORES,\n-                YarnConfiguration.DIST_SCHEDULING_MAX_VCORES_DEFAULT)\n+                YarnConfiguration.DIST_SCHEDULING_MAX_CONTAINER_VCORES,\n+                YarnConfiguration.DIST_SCHEDULING_MAX_CONTAINER_VCORES_DEFAULT)\n         )\n     );\n-    dsResp.setIncrAllocatableCapabilty(\n+    dsResp.setIncrContainerResource(\n         Resource.newInstance(\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY,\n-                YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY_DEFAULT),\n+                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_MEMORY_MB,\n+                YarnConfiguration.\n+                    DIST_SCHEDULING_INCR_CONTAINER_MEMORY_MB_DEFAULT),\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_INCR_VCORES,\n-                YarnConfiguration.DIST_SCHEDULING_INCR_VCORES_DEFAULT)\n+                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_VCORES,\n+                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_VCORES_DEFAULT)\n         )\n     );\n     dsResp.setContainerTokenExpiryInterval(\n         getConfig().getInt(\n             YarnConfiguration.DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS,\n             YarnConfiguration.\n                 DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS_DEFAULT));\n     dsResp.setContainerIdStart(\n         this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n \n     // Set nodes to be used for scheduling\n     dsResp.setNodesForScheduling(\n         this.nodeMonitor.selectLeastLoadedNodes(this.k));\n     return dsResp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  registerApplicationMasterForDistributedScheduling(\n      RegisterApplicationMasterRequest request) throws YarnException,\n      IOException {\n    RegisterApplicationMasterResponse response \u003d\n        registerApplicationMaster(request);\n    RegisterDistributedSchedulingAMResponse dsResp \u003d recordFactory\n        .newRecordInstance(RegisterDistributedSchedulingAMResponse.class);\n    dsResp.setRegisterResponse(response);\n    dsResp.setMinContainerResource(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_MEMORY_MB,\n                YarnConfiguration.\n                    DIST_SCHEDULING_MIN_CONTAINER_MEMORY_MB_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setMaxContainerResource(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_MB,\n                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_MB_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MAX_CONTAINER_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_MAX_CONTAINER_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setIncrContainerResource(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_MEMORY_MB,\n                YarnConfiguration.\n                    DIST_SCHEDULING_INCR_CONTAINER_MEMORY_MB_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setContainerTokenExpiryInterval(\n        getConfig().getInt(\n            YarnConfiguration.DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS,\n            YarnConfiguration.\n                DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS_DEFAULT));\n    dsResp.setContainerIdStart(\n        this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n\n    // Set nodes to be used for scheduling\n    dsResp.setNodesForScheduling(\n        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n    return dsResp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java",
          "extendedDetails": {
            "oldValue": "DistSchedRegisterResponse",
            "newValue": "RegisterDistributedSchedulingAMResponse"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
          "commitDate": "31/07/16 11:48 AM",
          "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "30/07/16 7:29 PM",
          "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,53 @@\n   registerApplicationMasterForDistributedScheduling(\n       RegisterApplicationMasterRequest request) throws YarnException,\n       IOException {\n     RegisterApplicationMasterResponse response \u003d\n         registerApplicationMaster(request);\n-    DistSchedRegisterResponse dsResp \u003d recordFactory\n-        .newRecordInstance(DistSchedRegisterResponse.class);\n+    RegisterDistributedSchedulingAMResponse dsResp \u003d recordFactory\n+        .newRecordInstance(RegisterDistributedSchedulingAMResponse.class);\n     dsResp.setRegisterResponse(response);\n-    dsResp.setMinAllocatableCapabilty(\n+    dsResp.setMinContainerResource(\n         Resource.newInstance(\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY,\n-                YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY_DEFAULT),\n+                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_MEMORY_MB,\n+                YarnConfiguration.\n+                    DIST_SCHEDULING_MIN_CONTAINER_MEMORY_MB_DEFAULT),\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MIN_VCORES,\n-                YarnConfiguration.DIST_SCHEDULING_MIN_VCORES_DEFAULT)\n+                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_VCORES,\n+                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_VCORES_DEFAULT)\n         )\n     );\n-    dsResp.setMaxAllocatableCapabilty(\n+    dsResp.setMaxContainerResource(\n         Resource.newInstance(\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY,\n-                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_DEFAULT),\n+                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_MB,\n+                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_MB_DEFAULT),\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_MAX_VCORES,\n-                YarnConfiguration.DIST_SCHEDULING_MAX_VCORES_DEFAULT)\n+                YarnConfiguration.DIST_SCHEDULING_MAX_CONTAINER_VCORES,\n+                YarnConfiguration.DIST_SCHEDULING_MAX_CONTAINER_VCORES_DEFAULT)\n         )\n     );\n-    dsResp.setIncrAllocatableCapabilty(\n+    dsResp.setIncrContainerResource(\n         Resource.newInstance(\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY,\n-                YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY_DEFAULT),\n+                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_MEMORY_MB,\n+                YarnConfiguration.\n+                    DIST_SCHEDULING_INCR_CONTAINER_MEMORY_MB_DEFAULT),\n             getConfig().getInt(\n-                YarnConfiguration.DIST_SCHEDULING_INCR_VCORES,\n-                YarnConfiguration.DIST_SCHEDULING_INCR_VCORES_DEFAULT)\n+                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_VCORES,\n+                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_VCORES_DEFAULT)\n         )\n     );\n     dsResp.setContainerTokenExpiryInterval(\n         getConfig().getInt(\n             YarnConfiguration.DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS,\n             YarnConfiguration.\n                 DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS_DEFAULT));\n     dsResp.setContainerIdStart(\n         this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n \n     // Set nodes to be used for scheduling\n     dsResp.setNodesForScheduling(\n         this.nodeMonitor.selectLeastLoadedNodes(this.k));\n     return dsResp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  registerApplicationMasterForDistributedScheduling(\n      RegisterApplicationMasterRequest request) throws YarnException,\n      IOException {\n    RegisterApplicationMasterResponse response \u003d\n        registerApplicationMaster(request);\n    RegisterDistributedSchedulingAMResponse dsResp \u003d recordFactory\n        .newRecordInstance(RegisterDistributedSchedulingAMResponse.class);\n    dsResp.setRegisterResponse(response);\n    dsResp.setMinContainerResource(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_MEMORY_MB,\n                YarnConfiguration.\n                    DIST_SCHEDULING_MIN_CONTAINER_MEMORY_MB_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_MIN_CONTAINER_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setMaxContainerResource(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_MB,\n                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_MB_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MAX_CONTAINER_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_MAX_CONTAINER_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setIncrContainerResource(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_MEMORY_MB,\n                YarnConfiguration.\n                    DIST_SCHEDULING_INCR_CONTAINER_MEMORY_MB_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_INCR_CONTAINER_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setContainerTokenExpiryInterval(\n        getConfig().getInt(\n            YarnConfiguration.DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS,\n            YarnConfiguration.\n                DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS_DEFAULT));\n    dsResp.setContainerIdStart(\n        this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n\n    // Set nodes to be used for scheduling\n    dsResp.setNodesForScheduling(\n        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n    return dsResp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java",
          "extendedDetails": {}
        }
      ]
    },
    "f0ac18d001d97914a9ee810b1fab56c5cebff830": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2888. Corrective mechanisms for rebalancing NM container queues. (asuresh)\n",
      "commitDate": "13/05/16 1:38 PM",
      "commitName": "f0ac18d001d97914a9ee810b1fab56c5cebff830",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "26/04/16 8:12 PM",
      "commitNameOld": "341888a0aa23f24458b4e6e34868794b9735c06a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 16.73,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   registerApplicationMasterForDistributedScheduling(\n       RegisterApplicationMasterRequest request) throws YarnException,\n       IOException {\n     RegisterApplicationMasterResponse response \u003d\n         registerApplicationMaster(request);\n     DistSchedRegisterResponse dsResp \u003d recordFactory\n         .newRecordInstance(DistSchedRegisterResponse.class);\n     dsResp.setRegisterResponse(response);\n     dsResp.setMinAllocatableCapabilty(\n         Resource.newInstance(\n             getConfig().getInt(\n                 YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY,\n                 YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY_DEFAULT),\n             getConfig().getInt(\n                 YarnConfiguration.DIST_SCHEDULING_MIN_VCORES,\n                 YarnConfiguration.DIST_SCHEDULING_MIN_VCORES_DEFAULT)\n         )\n     );\n     dsResp.setMaxAllocatableCapabilty(\n         Resource.newInstance(\n             getConfig().getInt(\n                 YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY,\n                 YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_DEFAULT),\n             getConfig().getInt(\n                 YarnConfiguration.DIST_SCHEDULING_MAX_VCORES,\n                 YarnConfiguration.DIST_SCHEDULING_MAX_VCORES_DEFAULT)\n         )\n     );\n     dsResp.setIncrAllocatableCapabilty(\n         Resource.newInstance(\n             getConfig().getInt(\n                 YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY,\n                 YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY_DEFAULT),\n             getConfig().getInt(\n                 YarnConfiguration.DIST_SCHEDULING_INCR_VCORES,\n                 YarnConfiguration.DIST_SCHEDULING_INCR_VCORES_DEFAULT)\n         )\n     );\n     dsResp.setContainerTokenExpiryInterval(\n         getConfig().getInt(\n             YarnConfiguration.DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS,\n             YarnConfiguration.\n                 DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS_DEFAULT));\n     dsResp.setContainerIdStart(\n         this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n \n     // Set nodes to be used for scheduling\n     dsResp.setNodesForScheduling(\n-        new ArrayList\u003c\u003e(this.clusterMonitor.selectNodes()));\n+        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n     return dsResp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  registerApplicationMasterForDistributedScheduling(\n      RegisterApplicationMasterRequest request) throws YarnException,\n      IOException {\n    RegisterApplicationMasterResponse response \u003d\n        registerApplicationMaster(request);\n    DistSchedRegisterResponse dsResp \u003d recordFactory\n        .newRecordInstance(DistSchedRegisterResponse.class);\n    dsResp.setRegisterResponse(response);\n    dsResp.setMinAllocatableCapabilty(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY,\n                YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MIN_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_MIN_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setMaxAllocatableCapabilty(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY,\n                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MAX_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_MAX_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setIncrAllocatableCapabilty(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY,\n                YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_INCR_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_INCR_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setContainerTokenExpiryInterval(\n        getConfig().getInt(\n            YarnConfiguration.DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS,\n            YarnConfiguration.\n                DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS_DEFAULT));\n    dsResp.setContainerIdStart(\n        this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n\n    // Set nodes to be used for scheduling\n    dsResp.setNodesForScheduling(\n        this.nodeMonitor.selectLeastLoadedNodes(this.k));\n    return dsResp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java",
      "extendedDetails": {}
    },
    "341888a0aa23f24458b4e6e34868794b9735c06a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4412. Create ClusterMonitor to compute ordered list of preferred NMs for OPPORTUNITIC containers. (asuresh)\n",
      "commitDate": "26/04/16 8:12 PM",
      "commitName": "341888a0aa23f24458b4e6e34868794b9735c06a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "24/04/16 10:38 PM",
      "commitNameOld": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 1.9,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,51 @@\n   registerApplicationMasterForDistributedScheduling(\n       RegisterApplicationMasterRequest request) throws YarnException,\n       IOException {\n     RegisterApplicationMasterResponse response \u003d\n         registerApplicationMaster(request);\n     DistSchedRegisterResponse dsResp \u003d recordFactory\n         .newRecordInstance(DistSchedRegisterResponse.class);\n     dsResp.setRegisterResponse(response);\n     dsResp.setMinAllocatableCapabilty(\n         Resource.newInstance(\n             getConfig().getInt(\n                 YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY,\n                 YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY_DEFAULT),\n             getConfig().getInt(\n                 YarnConfiguration.DIST_SCHEDULING_MIN_VCORES,\n                 YarnConfiguration.DIST_SCHEDULING_MIN_VCORES_DEFAULT)\n         )\n     );\n     dsResp.setMaxAllocatableCapabilty(\n         Resource.newInstance(\n             getConfig().getInt(\n                 YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY,\n                 YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_DEFAULT),\n             getConfig().getInt(\n                 YarnConfiguration.DIST_SCHEDULING_MAX_VCORES,\n                 YarnConfiguration.DIST_SCHEDULING_MAX_VCORES_DEFAULT)\n         )\n     );\n     dsResp.setIncrAllocatableCapabilty(\n         Resource.newInstance(\n             getConfig().getInt(\n                 YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY,\n                 YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY_DEFAULT),\n             getConfig().getInt(\n                 YarnConfiguration.DIST_SCHEDULING_INCR_VCORES,\n                 YarnConfiguration.DIST_SCHEDULING_INCR_VCORES_DEFAULT)\n         )\n     );\n     dsResp.setContainerTokenExpiryInterval(\n         getConfig().getInt(\n             YarnConfiguration.DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS,\n             YarnConfiguration.\n                 DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS_DEFAULT));\n     dsResp.setContainerIdStart(\n         this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n \n     // Set nodes to be used for scheduling\n-    // TODO: The actual computation of the list will happen in YARN-4412\n-    // TODO: Till then, send the complete list\n     dsResp.setNodesForScheduling(\n-        new ArrayList\u003c\u003e(this.rmContext.getRMNodes().keySet()));\n+        new ArrayList\u003c\u003e(this.clusterMonitor.selectNodes()));\n     return dsResp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  registerApplicationMasterForDistributedScheduling(\n      RegisterApplicationMasterRequest request) throws YarnException,\n      IOException {\n    RegisterApplicationMasterResponse response \u003d\n        registerApplicationMaster(request);\n    DistSchedRegisterResponse dsResp \u003d recordFactory\n        .newRecordInstance(DistSchedRegisterResponse.class);\n    dsResp.setRegisterResponse(response);\n    dsResp.setMinAllocatableCapabilty(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY,\n                YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MIN_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_MIN_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setMaxAllocatableCapabilty(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY,\n                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MAX_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_MAX_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setIncrAllocatableCapabilty(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY,\n                YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_INCR_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_INCR_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setContainerTokenExpiryInterval(\n        getConfig().getInt(\n            YarnConfiguration.DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS,\n            YarnConfiguration.\n                DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS_DEFAULT));\n    dsResp.setContainerIdStart(\n        this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n\n    // Set nodes to be used for scheduling\n    dsResp.setNodesForScheduling(\n        new ArrayList\u003c\u003e(this.clusterMonitor.selectNodes()));\n    return dsResp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java",
      "extendedDetails": {}
    },
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,53 @@\n+  registerApplicationMasterForDistributedScheduling(\n+      RegisterApplicationMasterRequest request) throws YarnException,\n+      IOException {\n+    RegisterApplicationMasterResponse response \u003d\n+        registerApplicationMaster(request);\n+    DistSchedRegisterResponse dsResp \u003d recordFactory\n+        .newRecordInstance(DistSchedRegisterResponse.class);\n+    dsResp.setRegisterResponse(response);\n+    dsResp.setMinAllocatableCapabilty(\n+        Resource.newInstance(\n+            getConfig().getInt(\n+                YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY,\n+                YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY_DEFAULT),\n+            getConfig().getInt(\n+                YarnConfiguration.DIST_SCHEDULING_MIN_VCORES,\n+                YarnConfiguration.DIST_SCHEDULING_MIN_VCORES_DEFAULT)\n+        )\n+    );\n+    dsResp.setMaxAllocatableCapabilty(\n+        Resource.newInstance(\n+            getConfig().getInt(\n+                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY,\n+                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_DEFAULT),\n+            getConfig().getInt(\n+                YarnConfiguration.DIST_SCHEDULING_MAX_VCORES,\n+                YarnConfiguration.DIST_SCHEDULING_MAX_VCORES_DEFAULT)\n+        )\n+    );\n+    dsResp.setIncrAllocatableCapabilty(\n+        Resource.newInstance(\n+            getConfig().getInt(\n+                YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY,\n+                YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY_DEFAULT),\n+            getConfig().getInt(\n+                YarnConfiguration.DIST_SCHEDULING_INCR_VCORES,\n+                YarnConfiguration.DIST_SCHEDULING_INCR_VCORES_DEFAULT)\n+        )\n+    );\n+    dsResp.setContainerTokenExpiryInterval(\n+        getConfig().getInt(\n+            YarnConfiguration.DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS,\n+            YarnConfiguration.\n+                DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS_DEFAULT));\n+    dsResp.setContainerIdStart(\n+        this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n+\n+    // Set nodes to be used for scheduling\n+    // TODO: The actual computation of the list will happen in YARN-4412\n+    // TODO: Till then, send the complete list\n+    dsResp.setNodesForScheduling(\n+        new ArrayList\u003c\u003e(this.rmContext.getRMNodes().keySet()));\n+    return dsResp;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  registerApplicationMasterForDistributedScheduling(\n      RegisterApplicationMasterRequest request) throws YarnException,\n      IOException {\n    RegisterApplicationMasterResponse response \u003d\n        registerApplicationMaster(request);\n    DistSchedRegisterResponse dsResp \u003d recordFactory\n        .newRecordInstance(DistSchedRegisterResponse.class);\n    dsResp.setRegisterResponse(response);\n    dsResp.setMinAllocatableCapabilty(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY,\n                YarnConfiguration.DIST_SCHEDULING_MIN_MEMORY_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MIN_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_MIN_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setMaxAllocatableCapabilty(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY,\n                YarnConfiguration.DIST_SCHEDULING_MAX_MEMORY_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_MAX_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_MAX_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setIncrAllocatableCapabilty(\n        Resource.newInstance(\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY,\n                YarnConfiguration.DIST_SCHEDULING_INCR_MEMORY_DEFAULT),\n            getConfig().getInt(\n                YarnConfiguration.DIST_SCHEDULING_INCR_VCORES,\n                YarnConfiguration.DIST_SCHEDULING_INCR_VCORES_DEFAULT)\n        )\n    );\n    dsResp.setContainerTokenExpiryInterval(\n        getConfig().getInt(\n            YarnConfiguration.DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS,\n            YarnConfiguration.\n                DIST_SCHEDULING_CONTAINER_TOKEN_EXPIRY_MS_DEFAULT));\n    dsResp.setContainerIdStart(\n        this.rmContext.getEpoch() \u003c\u003c ResourceManager.EPOCH_BIT_SHIFT);\n\n    // Set nodes to be used for scheduling\n    // TODO: The actual computation of the list will happen in YARN-4412\n    // TODO: Till then, send the complete list\n    dsResp.setNodesForScheduling(\n        new ArrayList\u003c\u003e(this.rmContext.getRMNodes().keySet()));\n    return dsResp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java"
    }
  }
}