{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PartialFileOutputCommitter.java",
  "functionName": "cleanUpPartialOutputForTask",
  "functionId": "cleanUpPartialOutputForTask___context-TaskAttemptContext",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/PartialFileOutputCommitter.java",
  "functionStartLine": 74,
  "functionEndLine": 104,
  "numCommitsSeen": 3,
  "timeTaken": 854,
  "changeHistory": [
    "5af572b6443715b7a741296c1bd520a1840f9a7c",
    "0a452a30abe8edb2dfde89f05ea5cacf13b871e6"
  ],
  "changeHistoryShort": {
    "5af572b6443715b7a741296c1bd520a1840f9a7c": "Ybodychange",
    "0a452a30abe8edb2dfde89f05ea5cacf13b871e6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5af572b6443715b7a741296c1bd520a1840f9a7c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13427. Eliminate needless uses of FileSystem#{exists(), isFile(), isDirectory()}. Contributed by Steve Loughran and Mingliang Liu\n",
      "commitDate": "15/11/16 10:57 AM",
      "commitName": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "30/05/13 11:07 PM",
      "commitNameOld": "0a452a30abe8edb2dfde89f05ea5cacf13b871e6",
      "commitAuthorOld": "Christopher Douglas",
      "daysBetweenCommits": 1264.53,
      "commitsBetweenForRepo": 9517,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public void cleanUpPartialOutputForTask(TaskAttemptContext context)\n       throws IOException {\n \n     // we double check this is never invoked from a non-preemptable subclass.\n     // This should never happen, since the invoking codes is checking it too,\n     // but it is safer to double check. Errors handling this would produce\n     // inconsistent output.\n \n     if (!this.getClass().isAnnotationPresent(Checkpointable.class)) {\n       throw new IllegalStateException(\"Invoking cleanUpPartialOutputForTask() \" +\n           \"from non @Preemptable class\");\n     }\n     FileSystem fs \u003d\n       fsFor(getTaskAttemptPath(context), context.getConfiguration());\n \n     LOG.info(\"cleanUpPartialOutputForTask: removing everything belonging to \" +\n         context.getTaskAttemptID().getTaskID() + \" in: \" +\n         getCommittedTaskPath(context).getParent());\n \n     final TaskAttemptID taid \u003d context.getTaskAttemptID();\n     final TaskID tid \u003d taid.getTaskID();\n     Path pCommit \u003d getCommittedTaskPath(context).getParent();\n     // remove any committed output\n     for (int i \u003d 0; i \u003c taid.getId(); ++i) {\n       TaskAttemptID oldId \u003d new TaskAttemptID(tid, i);\n       Path pTask \u003d new Path(pCommit, oldId.toString());\n-      if (fs.exists(pTask) \u0026\u0026 !fs.delete(pTask, true)) {\n+      if (!fs.delete(pTask, true) \u0026\u0026 fs.exists(pTask)) {\n         throw new IOException(\"Failed to delete \" + pTask);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void cleanUpPartialOutputForTask(TaskAttemptContext context)\n      throws IOException {\n\n    // we double check this is never invoked from a non-preemptable subclass.\n    // This should never happen, since the invoking codes is checking it too,\n    // but it is safer to double check. Errors handling this would produce\n    // inconsistent output.\n\n    if (!this.getClass().isAnnotationPresent(Checkpointable.class)) {\n      throw new IllegalStateException(\"Invoking cleanUpPartialOutputForTask() \" +\n          \"from non @Preemptable class\");\n    }\n    FileSystem fs \u003d\n      fsFor(getTaskAttemptPath(context), context.getConfiguration());\n\n    LOG.info(\"cleanUpPartialOutputForTask: removing everything belonging to \" +\n        context.getTaskAttemptID().getTaskID() + \" in: \" +\n        getCommittedTaskPath(context).getParent());\n\n    final TaskAttemptID taid \u003d context.getTaskAttemptID();\n    final TaskID tid \u003d taid.getTaskID();\n    Path pCommit \u003d getCommittedTaskPath(context).getParent();\n    // remove any committed output\n    for (int i \u003d 0; i \u003c taid.getId(); ++i) {\n      TaskAttemptID oldId \u003d new TaskAttemptID(tid, i);\n      Path pTask \u003d new Path(pCommit, oldId.toString());\n      if (!fs.delete(pTask, true) \u0026\u0026 fs.exists(pTask)) {\n        throw new IOException(\"Failed to delete \" + pTask);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/PartialFileOutputCommitter.java",
      "extendedDetails": {}
    },
    "0a452a30abe8edb2dfde89f05ea5cacf13b871e6": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5176. Add annotation for tagging tasks as responsive to\npreemption. Contributed by Carlo Curino, cdouglas\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488103 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/13 11:07 PM",
      "commitName": "0a452a30abe8edb2dfde89f05ea5cacf13b871e6",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,31 @@\n+  public void cleanUpPartialOutputForTask(TaskAttemptContext context)\n+      throws IOException {\n+\n+    // we double check this is never invoked from a non-preemptable subclass.\n+    // This should never happen, since the invoking codes is checking it too,\n+    // but it is safer to double check. Errors handling this would produce\n+    // inconsistent output.\n+\n+    if (!this.getClass().isAnnotationPresent(Checkpointable.class)) {\n+      throw new IllegalStateException(\"Invoking cleanUpPartialOutputForTask() \" +\n+          \"from non @Preemptable class\");\n+    }\n+    FileSystem fs \u003d\n+      fsFor(getTaskAttemptPath(context), context.getConfiguration());\n+\n+    LOG.info(\"cleanUpPartialOutputForTask: removing everything belonging to \" +\n+        context.getTaskAttemptID().getTaskID() + \" in: \" +\n+        getCommittedTaskPath(context).getParent());\n+\n+    final TaskAttemptID taid \u003d context.getTaskAttemptID();\n+    final TaskID tid \u003d taid.getTaskID();\n+    Path pCommit \u003d getCommittedTaskPath(context).getParent();\n+    // remove any committed output\n+    for (int i \u003d 0; i \u003c taid.getId(); ++i) {\n+      TaskAttemptID oldId \u003d new TaskAttemptID(tid, i);\n+      Path pTask \u003d new Path(pCommit, oldId.toString());\n+      if (fs.exists(pTask) \u0026\u0026 !fs.delete(pTask, true)) {\n+        throw new IOException(\"Failed to delete \" + pTask);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void cleanUpPartialOutputForTask(TaskAttemptContext context)\n      throws IOException {\n\n    // we double check this is never invoked from a non-preemptable subclass.\n    // This should never happen, since the invoking codes is checking it too,\n    // but it is safer to double check. Errors handling this would produce\n    // inconsistent output.\n\n    if (!this.getClass().isAnnotationPresent(Checkpointable.class)) {\n      throw new IllegalStateException(\"Invoking cleanUpPartialOutputForTask() \" +\n          \"from non @Preemptable class\");\n    }\n    FileSystem fs \u003d\n      fsFor(getTaskAttemptPath(context), context.getConfiguration());\n\n    LOG.info(\"cleanUpPartialOutputForTask: removing everything belonging to \" +\n        context.getTaskAttemptID().getTaskID() + \" in: \" +\n        getCommittedTaskPath(context).getParent());\n\n    final TaskAttemptID taid \u003d context.getTaskAttemptID();\n    final TaskID tid \u003d taid.getTaskID();\n    Path pCommit \u003d getCommittedTaskPath(context).getParent();\n    // remove any committed output\n    for (int i \u003d 0; i \u003c taid.getId(); ++i) {\n      TaskAttemptID oldId \u003d new TaskAttemptID(tid, i);\n      Path pTask \u003d new Path(pCommit, oldId.toString());\n      if (fs.exists(pTask) \u0026\u0026 !fs.delete(pTask, true)) {\n        throw new IOException(\"Failed to delete \" + pTask);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/PartialFileOutputCommitter.java"
    }
  }
}