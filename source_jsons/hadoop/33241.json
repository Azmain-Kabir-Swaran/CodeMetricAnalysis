{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NvidiaGPUPluginForRuntimeV2.java",
  "functionName": "getDevices",
  "functionId": "getDevices",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/com/nvidia/NvidiaGPUPluginForRuntimeV2.java",
  "functionStartLine": 128,
  "functionEndLine": 165,
  "numCommitsSeen": 3,
  "timeTaken": 1675,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "dddcfa4d9f07aa96692a12afd3003ae89ac40b17",
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "dddcfa4d9f07aa96692a12afd3003ae89ac40b17": "Ybodychange",
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "24/02/19 1:07 AM",
      "commitNameOld": "dddcfa4d9f07aa96692a12afd3003ae89ac40b17",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 19.59,
      "commitsBetweenForRepo": 191,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,38 @@\n   public Set\u003cDevice\u003e getDevices() throws Exception {\n     shellExecutor.searchBinary();\n     TreeSet\u003cDevice\u003e r \u003d new TreeSet\u003c\u003e();\n     String output;\n     try {\n       output \u003d shellExecutor.getDeviceInfo();\n       String[] lines \u003d output.trim().split(\"\\n\");\n       int id \u003d 0;\n       for (String oneLine : lines) {\n         String[] tokensEachLine \u003d oneLine.split(\",\");\n         if (tokensEachLine.length !\u003d 2) {\n           throw new Exception(\"Cannot parse the output to get device info. \"\n               + \"Unexpected format in it:\" + oneLine);\n         }\n         String minorNumber \u003d tokensEachLine[0].trim();\n         String busId \u003d tokensEachLine[1].trim();\n         String majorNumber \u003d getMajorNumber(DEV_NAME_PREFIX\n             + minorNumber);\n         if (majorNumber !\u003d null) {\n           r.add(Device.Builder.newInstance()\n               .setId(id)\n               .setMajorNumber(Integer.parseInt(majorNumber))\n               .setMinorNumber(Integer.parseInt(minorNumber))\n               .setBusID(busId)\n               .setDevPath(\"/dev/\" + DEV_NAME_PREFIX + minorNumber)\n               .setHealthy(true)\n               .build());\n           id++;\n         }\n       }\n       // cache it which help to topology scheduling\n       lastTimeFoundDevices \u003d r;\n       return r;\n     } catch (IOException e) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Failed to get output from \" + pathOfGpuBinary);\n-      }\n+      LOG.debug(\"Failed to get output from {}\", pathOfGpuBinary);\n       throw new YarnException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cDevice\u003e getDevices() throws Exception {\n    shellExecutor.searchBinary();\n    TreeSet\u003cDevice\u003e r \u003d new TreeSet\u003c\u003e();\n    String output;\n    try {\n      output \u003d shellExecutor.getDeviceInfo();\n      String[] lines \u003d output.trim().split(\"\\n\");\n      int id \u003d 0;\n      for (String oneLine : lines) {\n        String[] tokensEachLine \u003d oneLine.split(\",\");\n        if (tokensEachLine.length !\u003d 2) {\n          throw new Exception(\"Cannot parse the output to get device info. \"\n              + \"Unexpected format in it:\" + oneLine);\n        }\n        String minorNumber \u003d tokensEachLine[0].trim();\n        String busId \u003d tokensEachLine[1].trim();\n        String majorNumber \u003d getMajorNumber(DEV_NAME_PREFIX\n            + minorNumber);\n        if (majorNumber !\u003d null) {\n          r.add(Device.Builder.newInstance()\n              .setId(id)\n              .setMajorNumber(Integer.parseInt(majorNumber))\n              .setMinorNumber(Integer.parseInt(minorNumber))\n              .setBusID(busId)\n              .setDevPath(\"/dev/\" + DEV_NAME_PREFIX + minorNumber)\n              .setHealthy(true)\n              .build());\n          id++;\n        }\n      }\n      // cache it which help to topology scheduling\n      lastTimeFoundDevices \u003d r;\n      return r;\n    } catch (IOException e) {\n      LOG.debug(\"Failed to get output from {}\", pathOfGpuBinary);\n      throw new YarnException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/com/nvidia/NvidiaGPUPluginForRuntimeV2.java",
      "extendedDetails": {}
    },
    "dddcfa4d9f07aa96692a12afd3003ae89ac40b17": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8821. [YARN-8851] GPU hierarchy/topology scheduling support based on pluggable device framework. Contributed by Zhankun Tang.\n",
      "commitDate": "24/02/19 1:07 AM",
      "commitName": "dddcfa4d9f07aa96692a12afd3003ae89ac40b17",
      "commitAuthor": "Sunil G",
      "commitDateOld": "18/02/19 2:28 AM",
      "commitNameOld": "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 5.94,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n   public Set\u003cDevice\u003e getDevices() throws Exception {\n     shellExecutor.searchBinary();\n     TreeSet\u003cDevice\u003e r \u003d new TreeSet\u003c\u003e();\n     String output;\n     try {\n       output \u003d shellExecutor.getDeviceInfo();\n       String[] lines \u003d output.trim().split(\"\\n\");\n       int id \u003d 0;\n       for (String oneLine : lines) {\n         String[] tokensEachLine \u003d oneLine.split(\",\");\n         if (tokensEachLine.length !\u003d 2) {\n           throw new Exception(\"Cannot parse the output to get device info. \"\n               + \"Unexpected format in it:\" + oneLine);\n         }\n         String minorNumber \u003d tokensEachLine[0].trim();\n         String busId \u003d tokensEachLine[1].trim();\n         String majorNumber \u003d getMajorNumber(DEV_NAME_PREFIX\n             + minorNumber);\n         if (majorNumber !\u003d null) {\n           r.add(Device.Builder.newInstance()\n               .setId(id)\n               .setMajorNumber(Integer.parseInt(majorNumber))\n               .setMinorNumber(Integer.parseInt(minorNumber))\n               .setBusID(busId)\n               .setDevPath(\"/dev/\" + DEV_NAME_PREFIX + minorNumber)\n               .setHealthy(true)\n               .build());\n           id++;\n         }\n       }\n+      // cache it which help to topology scheduling\n+      lastTimeFoundDevices \u003d r;\n       return r;\n     } catch (IOException e) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Failed to get output from \" + pathOfGpuBinary);\n       }\n       throw new YarnException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cDevice\u003e getDevices() throws Exception {\n    shellExecutor.searchBinary();\n    TreeSet\u003cDevice\u003e r \u003d new TreeSet\u003c\u003e();\n    String output;\n    try {\n      output \u003d shellExecutor.getDeviceInfo();\n      String[] lines \u003d output.trim().split(\"\\n\");\n      int id \u003d 0;\n      for (String oneLine : lines) {\n        String[] tokensEachLine \u003d oneLine.split(\",\");\n        if (tokensEachLine.length !\u003d 2) {\n          throw new Exception(\"Cannot parse the output to get device info. \"\n              + \"Unexpected format in it:\" + oneLine);\n        }\n        String minorNumber \u003d tokensEachLine[0].trim();\n        String busId \u003d tokensEachLine[1].trim();\n        String majorNumber \u003d getMajorNumber(DEV_NAME_PREFIX\n            + minorNumber);\n        if (majorNumber !\u003d null) {\n          r.add(Device.Builder.newInstance()\n              .setId(id)\n              .setMajorNumber(Integer.parseInt(majorNumber))\n              .setMinorNumber(Integer.parseInt(minorNumber))\n              .setBusID(busId)\n              .setDevPath(\"/dev/\" + DEV_NAME_PREFIX + minorNumber)\n              .setHealthy(true)\n              .build());\n          id++;\n        }\n      }\n      // cache it which help to topology scheduling\n      lastTimeFoundDevices \u003d r;\n      return r;\n    } catch (IOException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Failed to get output from \" + pathOfGpuBinary);\n      }\n      throw new YarnException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/com/nvidia/NvidiaGPUPluginForRuntimeV2.java",
      "extendedDetails": {}
    },
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9060. [YARN-8851] Phase 1 - Support device isolation and use the Nvidia GPU plugin as an example. Contributed by Zhankun Tang.\n",
      "commitDate": "18/02/19 2:28 AM",
      "commitName": "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,38 @@\n+  public Set\u003cDevice\u003e getDevices() throws Exception {\n+    shellExecutor.searchBinary();\n+    TreeSet\u003cDevice\u003e r \u003d new TreeSet\u003c\u003e();\n+    String output;\n+    try {\n+      output \u003d shellExecutor.getDeviceInfo();\n+      String[] lines \u003d output.trim().split(\"\\n\");\n+      int id \u003d 0;\n+      for (String oneLine : lines) {\n+        String[] tokensEachLine \u003d oneLine.split(\",\");\n+        if (tokensEachLine.length !\u003d 2) {\n+          throw new Exception(\"Cannot parse the output to get device info. \"\n+              + \"Unexpected format in it:\" + oneLine);\n+        }\n+        String minorNumber \u003d tokensEachLine[0].trim();\n+        String busId \u003d tokensEachLine[1].trim();\n+        String majorNumber \u003d getMajorNumber(DEV_NAME_PREFIX\n+            + minorNumber);\n+        if (majorNumber !\u003d null) {\n+          r.add(Device.Builder.newInstance()\n+              .setId(id)\n+              .setMajorNumber(Integer.parseInt(majorNumber))\n+              .setMinorNumber(Integer.parseInt(minorNumber))\n+              .setBusID(busId)\n+              .setDevPath(\"/dev/\" + DEV_NAME_PREFIX + minorNumber)\n+              .setHealthy(true)\n+              .build());\n+          id++;\n+        }\n+      }\n+      return r;\n+    } catch (IOException e) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Failed to get output from \" + pathOfGpuBinary);\n+      }\n+      throw new YarnException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cDevice\u003e getDevices() throws Exception {\n    shellExecutor.searchBinary();\n    TreeSet\u003cDevice\u003e r \u003d new TreeSet\u003c\u003e();\n    String output;\n    try {\n      output \u003d shellExecutor.getDeviceInfo();\n      String[] lines \u003d output.trim().split(\"\\n\");\n      int id \u003d 0;\n      for (String oneLine : lines) {\n        String[] tokensEachLine \u003d oneLine.split(\",\");\n        if (tokensEachLine.length !\u003d 2) {\n          throw new Exception(\"Cannot parse the output to get device info. \"\n              + \"Unexpected format in it:\" + oneLine);\n        }\n        String minorNumber \u003d tokensEachLine[0].trim();\n        String busId \u003d tokensEachLine[1].trim();\n        String majorNumber \u003d getMajorNumber(DEV_NAME_PREFIX\n            + minorNumber);\n        if (majorNumber !\u003d null) {\n          r.add(Device.Builder.newInstance()\n              .setId(id)\n              .setMajorNumber(Integer.parseInt(majorNumber))\n              .setMinorNumber(Integer.parseInt(minorNumber))\n              .setBusID(busId)\n              .setDevPath(\"/dev/\" + DEV_NAME_PREFIX + minorNumber)\n              .setHealthy(true)\n              .build());\n          id++;\n        }\n      }\n      return r;\n    } catch (IOException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Failed to get output from \" + pathOfGpuBinary);\n      }\n      throw new YarnException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/com/nvidia/NvidiaGPUPluginForRuntimeV2.java"
    }
  }
}