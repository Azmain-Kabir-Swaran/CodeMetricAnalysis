{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataXceiverServer.java",
  "functionName": "setMaxConcurrentMovers",
  "functionId": "setMaxConcurrentMovers___newMaxThreads-int(modifiers-final)__duration-int(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataXceiverServer.java",
  "functionStartLine": 114,
  "functionEndLine": 145,
  "numCommitsSeen": 59,
  "timeTaken": 4912,
  "changeHistory": [
    "dde0ab55aadcf7c9cf71dbe36d90e97da6bc9498",
    "9d817fa1b14b477e5440ae4edd78de849976d9b5"
  ],
  "changeHistoryShort": {
    "dde0ab55aadcf7c9cf71dbe36d90e97da6bc9498": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "9d817fa1b14b477e5440ae4edd78de849976d9b5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dde0ab55aadcf7c9cf71dbe36d90e97da6bc9498": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-14258. Introduce Java Concurrent Package To DataXceiverServer Class. Contributed by BELUGA BEHR.\n",
      "commitDate": "15/02/19 4:32 PM",
      "commitName": "dde0ab55aadcf7c9cf71dbe36d90e97da6bc9498",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14258. Introduce Java Concurrent Package To DataXceiverServer Class. Contributed by BELUGA BEHR.\n",
          "commitDate": "15/02/19 4:32 PM",
          "commitName": "dde0ab55aadcf7c9cf71dbe36d90e97da6bc9498",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "23/06/16 2:13 PM",
          "commitNameOld": "dca298d79e46e27bdf008be53dd77448d7a9c0c6",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 967.14,
          "commitsBetweenForRepo": 7428,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,32 @@\n-    private void setMaxConcurrentMovers(int movers) {\n-      this.maxThreads.set(movers);\n+    private boolean setMaxConcurrentMovers(final int newMaxThreads,\n+        final int duration) {\n+      Preconditions.checkArgument(newMaxThreads \u003e 0);\n+      final int delta \u003d newMaxThreads - this.maxThreads;\n+      LOG.debug(\"Change concurrent thread count to {} from {}\", newMaxThreads,\n+          this.maxThreads);\n+      if (delta \u003d\u003d 0) {\n+        return true;\n+      }\n+      if (delta \u003e 0) {\n+        LOG.debug(\"Adding thread capacity: {}\", delta);\n+        this.semaphore.release(delta);\n+        this.maxThreads \u003d newMaxThreads;\n+        return true;\n+      }\n+      try {\n+        LOG.debug(\"Removing thread capacity: {}. Max wait: {}\", delta,\n+            duration);\n+        boolean acquired \u003d this.semaphore.tryAcquire(Math.abs(delta), duration,\n+            TimeUnit.SECONDS);\n+        if (acquired) {\n+          this.maxThreads \u003d newMaxThreads;\n+        } else {\n+          LOG.warn(\"Could not lower thread count to {} from {}. Too busy.\",\n+              newMaxThreads, this.maxThreads);\n+        }\n+        return acquired;\n+      } catch (InterruptedException e) {\n+        LOG.warn(\"Interrupted before adjusting thread count: {}\", delta);\n+        return false;\n+      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean setMaxConcurrentMovers(final int newMaxThreads,\n        final int duration) {\n      Preconditions.checkArgument(newMaxThreads \u003e 0);\n      final int delta \u003d newMaxThreads - this.maxThreads;\n      LOG.debug(\"Change concurrent thread count to {} from {}\", newMaxThreads,\n          this.maxThreads);\n      if (delta \u003d\u003d 0) {\n        return true;\n      }\n      if (delta \u003e 0) {\n        LOG.debug(\"Adding thread capacity: {}\", delta);\n        this.semaphore.release(delta);\n        this.maxThreads \u003d newMaxThreads;\n        return true;\n      }\n      try {\n        LOG.debug(\"Removing thread capacity: {}. Max wait: {}\", delta,\n            duration);\n        boolean acquired \u003d this.semaphore.tryAcquire(Math.abs(delta), duration,\n            TimeUnit.SECONDS);\n        if (acquired) {\n          this.maxThreads \u003d newMaxThreads;\n        } else {\n          LOG.warn(\"Could not lower thread count to {} from {}. Too busy.\",\n              newMaxThreads, this.maxThreads);\n        }\n        return acquired;\n      } catch (InterruptedException e) {\n        LOG.warn(\"Interrupted before adjusting thread count: {}\", delta);\n        return false;\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataXceiverServer.java",
          "extendedDetails": {
            "oldValue": "[movers-int]",
            "newValue": "[newMaxThreads-int(modifiers-final), duration-int(modifiers-final)]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-14258. Introduce Java Concurrent Package To DataXceiverServer Class. Contributed by BELUGA BEHR.\n",
          "commitDate": "15/02/19 4:32 PM",
          "commitName": "dde0ab55aadcf7c9cf71dbe36d90e97da6bc9498",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "23/06/16 2:13 PM",
          "commitNameOld": "dca298d79e46e27bdf008be53dd77448d7a9c0c6",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 967.14,
          "commitsBetweenForRepo": 7428,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,32 @@\n-    private void setMaxConcurrentMovers(int movers) {\n-      this.maxThreads.set(movers);\n+    private boolean setMaxConcurrentMovers(final int newMaxThreads,\n+        final int duration) {\n+      Preconditions.checkArgument(newMaxThreads \u003e 0);\n+      final int delta \u003d newMaxThreads - this.maxThreads;\n+      LOG.debug(\"Change concurrent thread count to {} from {}\", newMaxThreads,\n+          this.maxThreads);\n+      if (delta \u003d\u003d 0) {\n+        return true;\n+      }\n+      if (delta \u003e 0) {\n+        LOG.debug(\"Adding thread capacity: {}\", delta);\n+        this.semaphore.release(delta);\n+        this.maxThreads \u003d newMaxThreads;\n+        return true;\n+      }\n+      try {\n+        LOG.debug(\"Removing thread capacity: {}. Max wait: {}\", delta,\n+            duration);\n+        boolean acquired \u003d this.semaphore.tryAcquire(Math.abs(delta), duration,\n+            TimeUnit.SECONDS);\n+        if (acquired) {\n+          this.maxThreads \u003d newMaxThreads;\n+        } else {\n+          LOG.warn(\"Could not lower thread count to {} from {}. Too busy.\",\n+              newMaxThreads, this.maxThreads);\n+        }\n+        return acquired;\n+      } catch (InterruptedException e) {\n+        LOG.warn(\"Interrupted before adjusting thread count: {}\", delta);\n+        return false;\n+      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean setMaxConcurrentMovers(final int newMaxThreads,\n        final int duration) {\n      Preconditions.checkArgument(newMaxThreads \u003e 0);\n      final int delta \u003d newMaxThreads - this.maxThreads;\n      LOG.debug(\"Change concurrent thread count to {} from {}\", newMaxThreads,\n          this.maxThreads);\n      if (delta \u003d\u003d 0) {\n        return true;\n      }\n      if (delta \u003e 0) {\n        LOG.debug(\"Adding thread capacity: {}\", delta);\n        this.semaphore.release(delta);\n        this.maxThreads \u003d newMaxThreads;\n        return true;\n      }\n      try {\n        LOG.debug(\"Removing thread capacity: {}. Max wait: {}\", delta,\n            duration);\n        boolean acquired \u003d this.semaphore.tryAcquire(Math.abs(delta), duration,\n            TimeUnit.SECONDS);\n        if (acquired) {\n          this.maxThreads \u003d newMaxThreads;\n        } else {\n          LOG.warn(\"Could not lower thread count to {} from {}. Too busy.\",\n              newMaxThreads, this.maxThreads);\n        }\n        return acquired;\n      } catch (InterruptedException e) {\n        LOG.warn(\"Interrupted before adjusting thread count: {}\", delta);\n        return false;\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataXceiverServer.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14258. Introduce Java Concurrent Package To DataXceiverServer Class. Contributed by BELUGA BEHR.\n",
          "commitDate": "15/02/19 4:32 PM",
          "commitName": "dde0ab55aadcf7c9cf71dbe36d90e97da6bc9498",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "23/06/16 2:13 PM",
          "commitNameOld": "dca298d79e46e27bdf008be53dd77448d7a9c0c6",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 967.14,
          "commitsBetweenForRepo": 7428,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,32 @@\n-    private void setMaxConcurrentMovers(int movers) {\n-      this.maxThreads.set(movers);\n+    private boolean setMaxConcurrentMovers(final int newMaxThreads,\n+        final int duration) {\n+      Preconditions.checkArgument(newMaxThreads \u003e 0);\n+      final int delta \u003d newMaxThreads - this.maxThreads;\n+      LOG.debug(\"Change concurrent thread count to {} from {}\", newMaxThreads,\n+          this.maxThreads);\n+      if (delta \u003d\u003d 0) {\n+        return true;\n+      }\n+      if (delta \u003e 0) {\n+        LOG.debug(\"Adding thread capacity: {}\", delta);\n+        this.semaphore.release(delta);\n+        this.maxThreads \u003d newMaxThreads;\n+        return true;\n+      }\n+      try {\n+        LOG.debug(\"Removing thread capacity: {}. Max wait: {}\", delta,\n+            duration);\n+        boolean acquired \u003d this.semaphore.tryAcquire(Math.abs(delta), duration,\n+            TimeUnit.SECONDS);\n+        if (acquired) {\n+          this.maxThreads \u003d newMaxThreads;\n+        } else {\n+          LOG.warn(\"Could not lower thread count to {} from {}. Too busy.\",\n+              newMaxThreads, this.maxThreads);\n+        }\n+        return acquired;\n+      } catch (InterruptedException e) {\n+        LOG.warn(\"Interrupted before adjusting thread count: {}\", delta);\n+        return false;\n+      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean setMaxConcurrentMovers(final int newMaxThreads,\n        final int duration) {\n      Preconditions.checkArgument(newMaxThreads \u003e 0);\n      final int delta \u003d newMaxThreads - this.maxThreads;\n      LOG.debug(\"Change concurrent thread count to {} from {}\", newMaxThreads,\n          this.maxThreads);\n      if (delta \u003d\u003d 0) {\n        return true;\n      }\n      if (delta \u003e 0) {\n        LOG.debug(\"Adding thread capacity: {}\", delta);\n        this.semaphore.release(delta);\n        this.maxThreads \u003d newMaxThreads;\n        return true;\n      }\n      try {\n        LOG.debug(\"Removing thread capacity: {}. Max wait: {}\", delta,\n            duration);\n        boolean acquired \u003d this.semaphore.tryAcquire(Math.abs(delta), duration,\n            TimeUnit.SECONDS);\n        if (acquired) {\n          this.maxThreads \u003d newMaxThreads;\n        } else {\n          LOG.warn(\"Could not lower thread count to {} from {}. Too busy.\",\n              newMaxThreads, this.maxThreads);\n        }\n        return acquired;\n      } catch (InterruptedException e) {\n        LOG.warn(\"Interrupted before adjusting thread count: {}\", delta);\n        return false;\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataXceiverServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "9d817fa1b14b477e5440ae4edd78de849976d9b5": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9214. Support reconfiguring dfs.datanode.balance.max.concurrent.moves without DN restart. (Contributed by Xiaobing Zhou)\n",
      "commitDate": "04/12/15 2:46 PM",
      "commitName": "9d817fa1b14b477e5440ae4edd78de849976d9b5",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,3 @@\n+    private void setMaxConcurrentMovers(int movers) {\n+      this.maxThreads.set(movers);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void setMaxConcurrentMovers(int movers) {\n      this.maxThreads.set(movers);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataXceiverServer.java"
    }
  }
}