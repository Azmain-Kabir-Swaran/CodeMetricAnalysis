{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AdlFsInputStream.java",
  "functionName": "read",
  "functionId": "read___position-long__buffer-byte[]__offset-int__length-int",
  "sourceFilePath": "hadoop-tools/hadoop-azure-datalake/src/main/java/org/apache/hadoop/fs/adl/AdlFsInputStream.java",
  "functionStartLine": 88,
  "functionEndLine": 101,
  "numCommitsSeen": 4,
  "timeTaken": 2096,
  "changeHistory": [
    "5c61ad24887f76dfc5a5935b2c5dceb6bfd99417",
    "9581fb715cbc8a6ad28566e83c6d0242a7306688"
  ],
  "changeHistoryShort": {
    "5c61ad24887f76dfc5a5935b2c5dceb6bfd99417": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "9581fb715cbc8a6ad28566e83c6d0242a7306688": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5c61ad24887f76dfc5a5935b2c5dceb6bfd99417": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-13037. Refactor Azure Data Lake Store as an independent FileSystem. Contributed by Vishwajeet Dusane\n",
      "commitDate": "11/11/16 11:15 AM",
      "commitName": "5c61ad24887f76dfc5a5935b2c5dceb6bfd99417",
      "commitAuthor": "Chris Douglas",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-13037. Refactor Azure Data Lake Store as an independent FileSystem. Contributed by Vishwajeet Dusane\n",
          "commitDate": "11/11/16 11:15 AM",
          "commitName": "5c61ad24887f76dfc5a5935b2c5dceb6bfd99417",
          "commitAuthor": "Chris Douglas",
          "commitDateOld": "11/11/16 10:58 AM",
          "commitNameOld": "a9ad5d6c815ddd840f4e12f9f2b56164b910da98",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-    public synchronized final int read() throws IOException {\n-      if (streamIsClosed) {\n-        throw new IOException(\"Stream already closed\");\n-      }\n-      int status \u003d doBufferAvailabilityCheck();\n-      if (status \u003d\u003d -1) {\n-        return status;\n-      }\n-      int ch \u003d data[bufferOffset++] \u0026 (0xff);\n-      if (statistics !\u003d null) {\n-        statistics.incrementBytesRead(1);\n-      }\n-      return ch;\n-    }\n\\ No newline at end of file\n+  public int read(long position, byte[] buffer, int offset, int length)\n+      throws IOException {\n+    int numberOfByteRead \u003d 0;\n+    if (enablePositionalReadExperiment) {\n+      numberOfByteRead \u003d in.read(position, buffer, offset, length);\n+    } else {\n+      numberOfByteRead \u003d super.read(position, buffer, offset, length);\n+    }\n+\n+    if (stat !\u003d null \u0026\u0026 numberOfByteRead \u003e 0) {\n+      stat.incrementBytesRead(numberOfByteRead);\n+    }\n+    return numberOfByteRead;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public int read(long position, byte[] buffer, int offset, int length)\n      throws IOException {\n    int numberOfByteRead \u003d 0;\n    if (enablePositionalReadExperiment) {\n      numberOfByteRead \u003d in.read(position, buffer, offset, length);\n    } else {\n      numberOfByteRead \u003d super.read(position, buffer, offset, length);\n    }\n\n    if (stat !\u003d null \u0026\u0026 numberOfByteRead \u003e 0) {\n      stat.incrementBytesRead(numberOfByteRead);\n    }\n    return numberOfByteRead;\n  }",
          "path": "hadoop-tools/hadoop-azure-datalake/src/main/java/org/apache/hadoop/fs/adl/AdlFsInputStream.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-azure-datalake/src/main/java/org/apache/hadoop/hdfs/web/PrivateAzureDataLakeFileSystem.java",
            "newPath": "hadoop-tools/hadoop-azure-datalake/src/main/java/org/apache/hadoop/fs/adl/AdlFsInputStream.java",
            "oldMethodName": "read",
            "newMethodName": "read"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-13037. Refactor Azure Data Lake Store as an independent FileSystem. Contributed by Vishwajeet Dusane\n",
          "commitDate": "11/11/16 11:15 AM",
          "commitName": "5c61ad24887f76dfc5a5935b2c5dceb6bfd99417",
          "commitAuthor": "Chris Douglas",
          "commitDateOld": "11/11/16 10:58 AM",
          "commitNameOld": "a9ad5d6c815ddd840f4e12f9f2b56164b910da98",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-    public synchronized final int read() throws IOException {\n-      if (streamIsClosed) {\n-        throw new IOException(\"Stream already closed\");\n-      }\n-      int status \u003d doBufferAvailabilityCheck();\n-      if (status \u003d\u003d -1) {\n-        return status;\n-      }\n-      int ch \u003d data[bufferOffset++] \u0026 (0xff);\n-      if (statistics !\u003d null) {\n-        statistics.incrementBytesRead(1);\n-      }\n-      return ch;\n-    }\n\\ No newline at end of file\n+  public int read(long position, byte[] buffer, int offset, int length)\n+      throws IOException {\n+    int numberOfByteRead \u003d 0;\n+    if (enablePositionalReadExperiment) {\n+      numberOfByteRead \u003d in.read(position, buffer, offset, length);\n+    } else {\n+      numberOfByteRead \u003d super.read(position, buffer, offset, length);\n+    }\n+\n+    if (stat !\u003d null \u0026\u0026 numberOfByteRead \u003e 0) {\n+      stat.incrementBytesRead(numberOfByteRead);\n+    }\n+    return numberOfByteRead;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public int read(long position, byte[] buffer, int offset, int length)\n      throws IOException {\n    int numberOfByteRead \u003d 0;\n    if (enablePositionalReadExperiment) {\n      numberOfByteRead \u003d in.read(position, buffer, offset, length);\n    } else {\n      numberOfByteRead \u003d super.read(position, buffer, offset, length);\n    }\n\n    if (stat !\u003d null \u0026\u0026 numberOfByteRead \u003e 0) {\n      stat.incrementBytesRead(numberOfByteRead);\n    }\n    return numberOfByteRead;\n  }",
          "path": "hadoop-tools/hadoop-azure-datalake/src/main/java/org/apache/hadoop/fs/adl/AdlFsInputStream.java",
          "extendedDetails": {
            "oldValue": "[public, final, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13037. Refactor Azure Data Lake Store as an independent FileSystem. Contributed by Vishwajeet Dusane\n",
          "commitDate": "11/11/16 11:15 AM",
          "commitName": "5c61ad24887f76dfc5a5935b2c5dceb6bfd99417",
          "commitAuthor": "Chris Douglas",
          "commitDateOld": "11/11/16 10:58 AM",
          "commitNameOld": "a9ad5d6c815ddd840f4e12f9f2b56164b910da98",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-    public synchronized final int read() throws IOException {\n-      if (streamIsClosed) {\n-        throw new IOException(\"Stream already closed\");\n-      }\n-      int status \u003d doBufferAvailabilityCheck();\n-      if (status \u003d\u003d -1) {\n-        return status;\n-      }\n-      int ch \u003d data[bufferOffset++] \u0026 (0xff);\n-      if (statistics !\u003d null) {\n-        statistics.incrementBytesRead(1);\n-      }\n-      return ch;\n-    }\n\\ No newline at end of file\n+  public int read(long position, byte[] buffer, int offset, int length)\n+      throws IOException {\n+    int numberOfByteRead \u003d 0;\n+    if (enablePositionalReadExperiment) {\n+      numberOfByteRead \u003d in.read(position, buffer, offset, length);\n+    } else {\n+      numberOfByteRead \u003d super.read(position, buffer, offset, length);\n+    }\n+\n+    if (stat !\u003d null \u0026\u0026 numberOfByteRead \u003e 0) {\n+      stat.incrementBytesRead(numberOfByteRead);\n+    }\n+    return numberOfByteRead;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public int read(long position, byte[] buffer, int offset, int length)\n      throws IOException {\n    int numberOfByteRead \u003d 0;\n    if (enablePositionalReadExperiment) {\n      numberOfByteRead \u003d in.read(position, buffer, offset, length);\n    } else {\n      numberOfByteRead \u003d super.read(position, buffer, offset, length);\n    }\n\n    if (stat !\u003d null \u0026\u0026 numberOfByteRead \u003e 0) {\n      stat.incrementBytesRead(numberOfByteRead);\n    }\n    return numberOfByteRead;\n  }",
          "path": "hadoop-tools/hadoop-azure-datalake/src/main/java/org/apache/hadoop/fs/adl/AdlFsInputStream.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13037. Refactor Azure Data Lake Store as an independent FileSystem. Contributed by Vishwajeet Dusane\n",
          "commitDate": "11/11/16 11:15 AM",
          "commitName": "5c61ad24887f76dfc5a5935b2c5dceb6bfd99417",
          "commitAuthor": "Chris Douglas",
          "commitDateOld": "11/11/16 10:58 AM",
          "commitNameOld": "a9ad5d6c815ddd840f4e12f9f2b56164b910da98",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-    public synchronized final int read() throws IOException {\n-      if (streamIsClosed) {\n-        throw new IOException(\"Stream already closed\");\n-      }\n-      int status \u003d doBufferAvailabilityCheck();\n-      if (status \u003d\u003d -1) {\n-        return status;\n-      }\n-      int ch \u003d data[bufferOffset++] \u0026 (0xff);\n-      if (statistics !\u003d null) {\n-        statistics.incrementBytesRead(1);\n-      }\n-      return ch;\n-    }\n\\ No newline at end of file\n+  public int read(long position, byte[] buffer, int offset, int length)\n+      throws IOException {\n+    int numberOfByteRead \u003d 0;\n+    if (enablePositionalReadExperiment) {\n+      numberOfByteRead \u003d in.read(position, buffer, offset, length);\n+    } else {\n+      numberOfByteRead \u003d super.read(position, buffer, offset, length);\n+    }\n+\n+    if (stat !\u003d null \u0026\u0026 numberOfByteRead \u003e 0) {\n+      stat.incrementBytesRead(numberOfByteRead);\n+    }\n+    return numberOfByteRead;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public int read(long position, byte[] buffer, int offset, int length)\n      throws IOException {\n    int numberOfByteRead \u003d 0;\n    if (enablePositionalReadExperiment) {\n      numberOfByteRead \u003d in.read(position, buffer, offset, length);\n    } else {\n      numberOfByteRead \u003d super.read(position, buffer, offset, length);\n    }\n\n    if (stat !\u003d null \u0026\u0026 numberOfByteRead \u003e 0) {\n      stat.incrementBytesRead(numberOfByteRead);\n    }\n    return numberOfByteRead;\n  }",
          "path": "hadoop-tools/hadoop-azure-datalake/src/main/java/org/apache/hadoop/fs/adl/AdlFsInputStream.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[position-long, buffer-byte[], offset-int, length-int]"
          }
        }
      ]
    },
    "9581fb715cbc8a6ad28566e83c6d0242a7306688": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12666. Support Microsoft Azure Data Lake - as a file system in Hadoop. Contributed by Vishwajeet Dusane.\n",
      "commitDate": "09/06/16 2:33 PM",
      "commitName": "9581fb715cbc8a6ad28566e83c6d0242a7306688",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,14 @@\n+    public synchronized final int read() throws IOException {\n+      if (streamIsClosed) {\n+        throw new IOException(\"Stream already closed\");\n+      }\n+      int status \u003d doBufferAvailabilityCheck();\n+      if (status \u003d\u003d -1) {\n+        return status;\n+      }\n+      int ch \u003d data[bufferOffset++] \u0026 (0xff);\n+      if (statistics !\u003d null) {\n+        statistics.incrementBytesRead(1);\n+      }\n+      return ch;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized final int read() throws IOException {\n      if (streamIsClosed) {\n        throw new IOException(\"Stream already closed\");\n      }\n      int status \u003d doBufferAvailabilityCheck();\n      if (status \u003d\u003d -1) {\n        return status;\n      }\n      int ch \u003d data[bufferOffset++] \u0026 (0xff);\n      if (statistics !\u003d null) {\n        statistics.incrementBytesRead(1);\n      }\n      return ch;\n    }",
      "path": "hadoop-tools/hadoop-azure-datalake/src/main/java/org/apache/hadoop/hdfs/web/PrivateAzureDataLakeFileSystem.java"
    }
  }
}