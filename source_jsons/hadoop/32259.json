{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeManager.java",
  "functionName": "reregisterCollectors",
  "functionId": "reregisterCollectors",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java",
  "functionStartLine": 587,
  "functionEndLine": 609,
  "numCommitsSeen": 111,
  "timeTaken": 1945,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "c92a7ab31cc3d4a45509d19ffa5d156a794139f7",
    "91d3443806555d336d27cf8cc9250a0fb85b03a9"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "c92a7ab31cc3d4a45509d19ffa5d156a794139f7": "Ybodychange",
    "91d3443806555d336d27cf8cc9250a0fb85b03a9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/12/18 2:05 PM",
      "commitNameOld": "c7a5a4435ec3098c2765e8ef53b7771e0532ff61",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 87.05,
      "commitsBetweenForRepo": 669,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,23 @@\n   protected void reregisterCollectors() {\n     Map\u003cApplicationId, AppCollectorData\u003e knownCollectors\n         \u003d context.getKnownCollectors();\n     if (knownCollectors \u003d\u003d null) {\n       return;\n     }\n     ConcurrentMap\u003cApplicationId, AppCollectorData\u003e registeringCollectors\n         \u003d context.getRegisteringCollectors();\n     for (Map.Entry\u003cApplicationId, AppCollectorData\u003e entry\n         : knownCollectors.entrySet()) {\n       Application app \u003d context.getApplications().get(entry.getKey());\n       if ((app !\u003d null)\n           \u0026\u0026 !ApplicationState.FINISHED.equals(app.getApplicationState())) {\n         registeringCollectors.putIfAbsent(entry.getKey(), entry.getValue());\n         AppCollectorData data \u003d entry.getValue();\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(entry.getKey() + \" : \" + data.getCollectorAddr() + \"@\u003c\"\n-              + data.getRMIdentifier() + \", \" + data.getVersion() + \"\u003e\");\n-        }\n+        LOG.debug(\"{} : {}@\u003c{}, {}\u003e\", entry.getKey(), data.getCollectorAddr(),\n+            data.getRMIdentifier(), data.getVersion());\n       } else {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Remove collector data for done app \" + entry.getKey());\n-        }\n+        LOG.debug(\"Remove collector data for done app {}\", entry.getKey());\n       }\n     }\n     knownCollectors.clear();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void reregisterCollectors() {\n    Map\u003cApplicationId, AppCollectorData\u003e knownCollectors\n        \u003d context.getKnownCollectors();\n    if (knownCollectors \u003d\u003d null) {\n      return;\n    }\n    ConcurrentMap\u003cApplicationId, AppCollectorData\u003e registeringCollectors\n        \u003d context.getRegisteringCollectors();\n    for (Map.Entry\u003cApplicationId, AppCollectorData\u003e entry\n        : knownCollectors.entrySet()) {\n      Application app \u003d context.getApplications().get(entry.getKey());\n      if ((app !\u003d null)\n          \u0026\u0026 !ApplicationState.FINISHED.equals(app.getApplicationState())) {\n        registeringCollectors.putIfAbsent(entry.getKey(), entry.getValue());\n        AppCollectorData data \u003d entry.getValue();\n        LOG.debug(\"{} : {}@\u003c{}, {}\u003e\", entry.getKey(), data.getCollectorAddr(),\n            data.getRMIdentifier(), data.getVersion());\n      } else {\n        LOG.debug(\"Remove collector data for done app {}\", entry.getKey());\n      }\n    }\n    knownCollectors.clear();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java",
      "extendedDetails": {}
    },
    "c92a7ab31cc3d4a45509d19ffa5d156a794139f7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3359. Addendum for Recover collector list when RM fails over (Li Lu via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "c92a7ab31cc3d4a45509d19ffa5d156a794139f7",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "91d3443806555d336d27cf8cc9250a0fb85b03a9",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   protected void reregisterCollectors() {\n     Map\u003cApplicationId, AppCollectorData\u003e knownCollectors\n         \u003d context.getKnownCollectors();\n     if (knownCollectors \u003d\u003d null) {\n       return;\n     }\n-    Map\u003cApplicationId, AppCollectorData\u003e registeringCollectors\n+    ConcurrentMap\u003cApplicationId, AppCollectorData\u003e registeringCollectors\n         \u003d context.getRegisteringCollectors();\n     for (Map.Entry\u003cApplicationId, AppCollectorData\u003e entry\n         : knownCollectors.entrySet()) {\n       Application app \u003d context.getApplications().get(entry.getKey());\n       if ((app !\u003d null)\n           \u0026\u0026 !ApplicationState.FINISHED.equals(app.getApplicationState())) {\n         registeringCollectors.putIfAbsent(entry.getKey(), entry.getValue());\n         AppCollectorData data \u003d entry.getValue();\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(entry.getKey() + \" : \" + data.getCollectorAddr() + \"@\u003c\"\n               + data.getRMIdentifier() + \", \" + data.getVersion() + \"\u003e\");\n         }\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Remove collector data for done app \" + entry.getKey());\n         }\n       }\n     }\n     knownCollectors.clear();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void reregisterCollectors() {\n    Map\u003cApplicationId, AppCollectorData\u003e knownCollectors\n        \u003d context.getKnownCollectors();\n    if (knownCollectors \u003d\u003d null) {\n      return;\n    }\n    ConcurrentMap\u003cApplicationId, AppCollectorData\u003e registeringCollectors\n        \u003d context.getRegisteringCollectors();\n    for (Map.Entry\u003cApplicationId, AppCollectorData\u003e entry\n        : knownCollectors.entrySet()) {\n      Application app \u003d context.getApplications().get(entry.getKey());\n      if ((app !\u003d null)\n          \u0026\u0026 !ApplicationState.FINISHED.equals(app.getApplicationState())) {\n        registeringCollectors.putIfAbsent(entry.getKey(), entry.getValue());\n        AppCollectorData data \u003d entry.getValue();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(entry.getKey() + \" : \" + data.getCollectorAddr() + \"@\u003c\"\n              + data.getRMIdentifier() + \", \" + data.getVersion() + \"\u003e\");\n        }\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Remove collector data for done app \" + entry.getKey());\n        }\n      }\n    }\n    knownCollectors.clear();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java",
      "extendedDetails": {}
    },
    "91d3443806555d336d27cf8cc9250a0fb85b03a9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3359. Recover collector list when RM fails over (Li Lu via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "91d3443806555d336d27cf8cc9250a0fb85b03a9",
      "commitAuthor": "Varun Saxena",
      "diff": "@@ -0,0 +1,27 @@\n+  protected void reregisterCollectors() {\n+    Map\u003cApplicationId, AppCollectorData\u003e knownCollectors\n+        \u003d context.getKnownCollectors();\n+    if (knownCollectors \u003d\u003d null) {\n+      return;\n+    }\n+    Map\u003cApplicationId, AppCollectorData\u003e registeringCollectors\n+        \u003d context.getRegisteringCollectors();\n+    for (Map.Entry\u003cApplicationId, AppCollectorData\u003e entry\n+        : knownCollectors.entrySet()) {\n+      Application app \u003d context.getApplications().get(entry.getKey());\n+      if ((app !\u003d null)\n+          \u0026\u0026 !ApplicationState.FINISHED.equals(app.getApplicationState())) {\n+        registeringCollectors.putIfAbsent(entry.getKey(), entry.getValue());\n+        AppCollectorData data \u003d entry.getValue();\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(entry.getKey() + \" : \" + data.getCollectorAddr() + \"@\u003c\"\n+              + data.getRMIdentifier() + \", \" + data.getVersion() + \"\u003e\");\n+        }\n+      } else {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Remove collector data for done app \" + entry.getKey());\n+        }\n+      }\n+    }\n+    knownCollectors.clear();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void reregisterCollectors() {\n    Map\u003cApplicationId, AppCollectorData\u003e knownCollectors\n        \u003d context.getKnownCollectors();\n    if (knownCollectors \u003d\u003d null) {\n      return;\n    }\n    Map\u003cApplicationId, AppCollectorData\u003e registeringCollectors\n        \u003d context.getRegisteringCollectors();\n    for (Map.Entry\u003cApplicationId, AppCollectorData\u003e entry\n        : knownCollectors.entrySet()) {\n      Application app \u003d context.getApplications().get(entry.getKey());\n      if ((app !\u003d null)\n          \u0026\u0026 !ApplicationState.FINISHED.equals(app.getApplicationState())) {\n        registeringCollectors.putIfAbsent(entry.getKey(), entry.getValue());\n        AppCollectorData data \u003d entry.getValue();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(entry.getKey() + \" : \" + data.getCollectorAddr() + \"@\u003c\"\n              + data.getRMIdentifier() + \", \" + data.getVersion() + \"\u003e\");\n        }\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Remove collector data for done app \" + entry.getKey());\n        }\n      }\n    }\n    knownCollectors.clear();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java"
    }
  }
}