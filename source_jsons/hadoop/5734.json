{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirMkdirOp.java",
  "functionName": "createParentDirectories",
  "functionId": "createParentDirectories___fsd-FSDirectory__iip-INodesInPath__perm-PermissionStatus__inheritPerms-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirMkdirOp.java",
  "functionStartLine": 125,
  "functionEndLine": 149,
  "numCommitsSeen": 18,
  "timeTaken": 910,
  "changeHistory": [
    "8b7adf4ddf420a93c586c4b2eac27dd0f649682e"
  ],
  "changeHistoryShort": {
    "8b7adf4ddf420a93c586c4b2eac27dd0f649682e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8b7adf4ddf420a93c586c4b2eac27dd0f649682e": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10768. Optimize mkdir ops. Contributed by Daryn Sharp.\n",
      "commitDate": "26/08/16 1:39 PM",
      "commitName": "8b7adf4ddf420a93c586c4b2eac27dd0f649682e",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,25 @@\n+  private static INodesInPath createParentDirectories(FSDirectory fsd,\n+      INodesInPath iip, PermissionStatus perm, boolean inheritPerms)\n+      throws IOException {\n+    assert fsd.hasWriteLock();\n+    // this is the desired parent iip if the subsequent delta is 1.\n+    INodesInPath existing \u003d iip.getExistingINodes();\n+    int missing \u003d iip.length() - existing.length();\n+    if (missing \u003d\u003d 0) {  // full path exists, return parents.\n+      existing \u003d iip.getParentINodesInPath();\n+    } else if (missing \u003e 1) { // need to create at least one ancestor dir.\n+      // Ensure that the user can traversal the path by adding implicit\n+      // u+wx permission to all ancestor directories.\n+      PermissionStatus basePerm \u003d inheritPerms\n+          ? existing.getLastINode().getPermissionStatus()\n+          : perm;\n+      perm \u003d addImplicitUwx(basePerm, perm);\n+      // create all the missing directories.\n+      final int last \u003d iip.length() - 2;\n+      for (int i \u003d existing.length(); existing !\u003d null \u0026\u0026 i \u003c\u003d last; i++) {\n+        byte[] component \u003d iip.getPathComponent(i);\n+        existing \u003d createSingleDirectory(fsd, existing, component, perm);\n+      }\n+    }\n+    return existing;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static INodesInPath createParentDirectories(FSDirectory fsd,\n      INodesInPath iip, PermissionStatus perm, boolean inheritPerms)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    // this is the desired parent iip if the subsequent delta is 1.\n    INodesInPath existing \u003d iip.getExistingINodes();\n    int missing \u003d iip.length() - existing.length();\n    if (missing \u003d\u003d 0) {  // full path exists, return parents.\n      existing \u003d iip.getParentINodesInPath();\n    } else if (missing \u003e 1) { // need to create at least one ancestor dir.\n      // Ensure that the user can traversal the path by adding implicit\n      // u+wx permission to all ancestor directories.\n      PermissionStatus basePerm \u003d inheritPerms\n          ? existing.getLastINode().getPermissionStatus()\n          : perm;\n      perm \u003d addImplicitUwx(basePerm, perm);\n      // create all the missing directories.\n      final int last \u003d iip.length() - 2;\n      for (int i \u003d existing.length(); existing !\u003d null \u0026\u0026 i \u003c\u003d last; i++) {\n        byte[] component \u003d iip.getPathComponent(i);\n        existing \u003d createSingleDirectory(fsd, existing, component, perm);\n      }\n    }\n    return existing;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirMkdirOp.java"
    }
  }
}