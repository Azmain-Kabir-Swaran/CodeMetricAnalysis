{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NflyFSystem.java",
  "functionName": "getFileStatus",
  "functionId": "getFileStatus___f-Path",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/NflyFSystem.java",
  "functionStartLine": 876,
  "functionEndLine": 915,
  "numCommitsSeen": 3,
  "timeTaken": 798,
  "changeHistory": [
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0"
  ],
  "changeHistoryShort": {
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12077. Provide a multi-URI replication Inode for ViewFs. Contributed by Gera Shegalov\n",
      "commitDate": "05/09/17 11:51 PM",
      "commitName": "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0",
      "commitAuthor": "Chris Douglas",
      "diff": "@@ -0,0 +1,40 @@\n+  public FileStatus getFileStatus(Path f) throws IOException {\n+    // TODO proxy stream for reads\n+    final List\u003cIOException\u003e ioExceptions \u003d\n+        new ArrayList\u003cIOException\u003e(nodes.length);\n+    int numNotFounds \u003d 0;\n+    final MRNflyNode[] mrNodes \u003d workSet();\n+\n+    long maxMtime \u003d Long.MIN_VALUE;\n+    int maxMtimeIdx \u003d Integer.MIN_VALUE;\n+\n+    // naively iterate until one can be returned\n+    //\n+    for (int i \u003d 0; i \u003c mrNodes.length; i++) {\n+      MRNflyNode nflyNode \u003d mrNodes[i];\n+      try {\n+        nflyNode.updateFileStatus(f);\n+        if (nflyFlags.contains(NflyKey.readMostRecent)) {\n+          final long nflyTime \u003d nflyNode.status.getModificationTime();\n+          if (nflyTime \u003e maxMtime) {\n+            maxMtime \u003d nflyTime;\n+            maxMtimeIdx \u003d i;\n+          }\n+        } else {\n+          return nflyNode.nflyStatus();\n+        }\n+      } catch (FileNotFoundException fnfe) {\n+        numNotFounds++;\n+        processThrowable(nflyNode, \"getFileStatus\", fnfe, ioExceptions, f);\n+      } catch (Throwable t) {\n+        processThrowable(nflyNode, \"getFileStatus\", t, ioExceptions, f);\n+      }\n+    }\n+\n+    if (maxMtimeIdx \u003e\u003d 0) {\n+      return mrNodes[maxMtimeIdx].nflyStatus();\n+    }\n+\n+    mayThrowFileNotFound(ioExceptions, numNotFounds);\n+    throw MultipleIOException.createIOException(ioExceptions);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path f) throws IOException {\n    // TODO proxy stream for reads\n    final List\u003cIOException\u003e ioExceptions \u003d\n        new ArrayList\u003cIOException\u003e(nodes.length);\n    int numNotFounds \u003d 0;\n    final MRNflyNode[] mrNodes \u003d workSet();\n\n    long maxMtime \u003d Long.MIN_VALUE;\n    int maxMtimeIdx \u003d Integer.MIN_VALUE;\n\n    // naively iterate until one can be returned\n    //\n    for (int i \u003d 0; i \u003c mrNodes.length; i++) {\n      MRNflyNode nflyNode \u003d mrNodes[i];\n      try {\n        nflyNode.updateFileStatus(f);\n        if (nflyFlags.contains(NflyKey.readMostRecent)) {\n          final long nflyTime \u003d nflyNode.status.getModificationTime();\n          if (nflyTime \u003e maxMtime) {\n            maxMtime \u003d nflyTime;\n            maxMtimeIdx \u003d i;\n          }\n        } else {\n          return nflyNode.nflyStatus();\n        }\n      } catch (FileNotFoundException fnfe) {\n        numNotFounds++;\n        processThrowable(nflyNode, \"getFileStatus\", fnfe, ioExceptions, f);\n      } catch (Throwable t) {\n        processThrowable(nflyNode, \"getFileStatus\", t, ioExceptions, f);\n      }\n    }\n\n    if (maxMtimeIdx \u003e\u003d 0) {\n      return mrNodes[maxMtimeIdx].nflyStatus();\n    }\n\n    mayThrowFileNotFound(ioExceptions, numNotFounds);\n    throw MultipleIOException.createIOException(ioExceptions);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/NflyFSystem.java"
    }
  }
}