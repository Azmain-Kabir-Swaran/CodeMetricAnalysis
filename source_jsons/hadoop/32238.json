{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeManager.java",
  "functionName": "createNodeAttributesProvider",
  "functionId": "createNodeAttributesProvider___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java",
  "functionStartLine": 174,
  "functionEndLine": 207,
  "numCommitsSeen": 111,
  "timeTaken": 2139,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "3b3b6efe2103244febfe6b4f61989e92bd7bb08a"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "3b3b6efe2103244febfe6b4f61989e92bd7bb08a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/12/18 2:05 PM",
      "commitNameOld": "c7a5a4435ec3098c2765e8ef53b7771e0532ff61",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 87.05,
      "commitsBetweenForRepo": 669,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,34 @@\n   protected NodeAttributesProvider createNodeAttributesProvider(\n       Configuration conf) throws IOException {\n     NodeAttributesProvider attributesProvider \u003d null;\n     String providerString \u003d\n         conf.get(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_CONFIG, null);\n     if (providerString \u003d\u003d null || providerString.trim().length() \u003d\u003d 0) {\n       return attributesProvider;\n     }\n     switch (providerString.trim().toLowerCase()) {\n     case YarnConfiguration.CONFIG_NODE_DESCRIPTOR_PROVIDER:\n       attributesProvider \u003d new ConfigurationNodeAttributesProvider();\n       break;\n     case YarnConfiguration.SCRIPT_NODE_DESCRIPTOR_PROVIDER:\n       attributesProvider \u003d new ScriptBasedNodeAttributesProvider();\n       break;\n     default:\n       try {\n         Class\u003c? extends NodeAttributesProvider\u003e labelsProviderClass \u003d\n             conf.getClass(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_CONFIG,\n                 null, NodeAttributesProvider.class);\n         attributesProvider \u003d labelsProviderClass.newInstance();\n       } catch (InstantiationException | IllegalAccessException\n           | RuntimeException e) {\n         LOG.error(\"Failed to create NodeAttributesProvider\"\n                 + \" based on Configuration\", e);\n         throw new IOException(\n             \"Failed to create NodeAttributesProvider : \"\n                 + e.getMessage(), e);\n       }\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Distributed Node Attributes is enabled\"\n-          + \" with provider class as : \"\n-          + attributesProvider.getClass().toString());\n-    }\n+    LOG.debug(\"Distributed Node Attributes is enabled with provider class\"\n+        + \" as : {}\", attributesProvider.getClass());\n     return attributesProvider;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected NodeAttributesProvider createNodeAttributesProvider(\n      Configuration conf) throws IOException {\n    NodeAttributesProvider attributesProvider \u003d null;\n    String providerString \u003d\n        conf.get(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_CONFIG, null);\n    if (providerString \u003d\u003d null || providerString.trim().length() \u003d\u003d 0) {\n      return attributesProvider;\n    }\n    switch (providerString.trim().toLowerCase()) {\n    case YarnConfiguration.CONFIG_NODE_DESCRIPTOR_PROVIDER:\n      attributesProvider \u003d new ConfigurationNodeAttributesProvider();\n      break;\n    case YarnConfiguration.SCRIPT_NODE_DESCRIPTOR_PROVIDER:\n      attributesProvider \u003d new ScriptBasedNodeAttributesProvider();\n      break;\n    default:\n      try {\n        Class\u003c? extends NodeAttributesProvider\u003e labelsProviderClass \u003d\n            conf.getClass(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_CONFIG,\n                null, NodeAttributesProvider.class);\n        attributesProvider \u003d labelsProviderClass.newInstance();\n      } catch (InstantiationException | IllegalAccessException\n          | RuntimeException e) {\n        LOG.error(\"Failed to create NodeAttributesProvider\"\n                + \" based on Configuration\", e);\n        throw new IOException(\n            \"Failed to create NodeAttributesProvider : \"\n                + e.getMessage(), e);\n      }\n    }\n    LOG.debug(\"Distributed Node Attributes is enabled with provider class\"\n        + \" as : {}\", attributesProvider.getClass());\n    return attributesProvider;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java",
      "extendedDetails": {}
    },
    "3b3b6efe2103244febfe6b4f61989e92bd7bb08a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7871. Node attributes reporting from NM to RM. Contributed by Weiwei Yang.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "3b3b6efe2103244febfe6b4f61989e92bd7bb08a",
      "commitAuthor": "Naganarasimha",
      "diff": "@@ -0,0 +1,37 @@\n+  protected NodeAttributesProvider createNodeAttributesProvider(\n+      Configuration conf) throws IOException {\n+    NodeAttributesProvider attributesProvider \u003d null;\n+    String providerString \u003d\n+        conf.get(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_CONFIG, null);\n+    if (providerString \u003d\u003d null || providerString.trim().length() \u003d\u003d 0) {\n+      return attributesProvider;\n+    }\n+    switch (providerString.trim().toLowerCase()) {\n+    case YarnConfiguration.CONFIG_NODE_DESCRIPTOR_PROVIDER:\n+      attributesProvider \u003d new ConfigurationNodeAttributesProvider();\n+      break;\n+    case YarnConfiguration.SCRIPT_NODE_DESCRIPTOR_PROVIDER:\n+      attributesProvider \u003d new ScriptBasedNodeAttributesProvider();\n+      break;\n+    default:\n+      try {\n+        Class\u003c? extends NodeAttributesProvider\u003e labelsProviderClass \u003d\n+            conf.getClass(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_CONFIG,\n+                null, NodeAttributesProvider.class);\n+        attributesProvider \u003d labelsProviderClass.newInstance();\n+      } catch (InstantiationException | IllegalAccessException\n+          | RuntimeException e) {\n+        LOG.error(\"Failed to create NodeAttributesProvider\"\n+                + \" based on Configuration\", e);\n+        throw new IOException(\n+            \"Failed to create NodeAttributesProvider : \"\n+                + e.getMessage(), e);\n+      }\n+    }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Distributed Node Attributes is enabled\"\n+          + \" with provider class as : \"\n+          + attributesProvider.getClass().toString());\n+    }\n+    return attributesProvider;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected NodeAttributesProvider createNodeAttributesProvider(\n      Configuration conf) throws IOException {\n    NodeAttributesProvider attributesProvider \u003d null;\n    String providerString \u003d\n        conf.get(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_CONFIG, null);\n    if (providerString \u003d\u003d null || providerString.trim().length() \u003d\u003d 0) {\n      return attributesProvider;\n    }\n    switch (providerString.trim().toLowerCase()) {\n    case YarnConfiguration.CONFIG_NODE_DESCRIPTOR_PROVIDER:\n      attributesProvider \u003d new ConfigurationNodeAttributesProvider();\n      break;\n    case YarnConfiguration.SCRIPT_NODE_DESCRIPTOR_PROVIDER:\n      attributesProvider \u003d new ScriptBasedNodeAttributesProvider();\n      break;\n    default:\n      try {\n        Class\u003c? extends NodeAttributesProvider\u003e labelsProviderClass \u003d\n            conf.getClass(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_CONFIG,\n                null, NodeAttributesProvider.class);\n        attributesProvider \u003d labelsProviderClass.newInstance();\n      } catch (InstantiationException | IllegalAccessException\n          | RuntimeException e) {\n        LOG.error(\"Failed to create NodeAttributesProvider\"\n                + \" based on Configuration\", e);\n        throw new IOException(\n            \"Failed to create NodeAttributesProvider : \"\n                + e.getMessage(), e);\n      }\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Distributed Node Attributes is enabled\"\n          + \" with provider class as : \"\n          + attributesProvider.getClass().toString());\n    }\n    return attributesProvider;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeManager.java"
    }
  }
}