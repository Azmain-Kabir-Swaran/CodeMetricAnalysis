{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeveldbConfigurationStore.java",
  "functionName": "initialize",
  "functionId": "initialize___config-Configuration__schedConf-Configuration__rmContext-RMContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
  "functionStartLine": 79,
  "functionEndLine": 99,
  "numCommitsSeen": 17,
  "timeTaken": 4476,
  "changeHistory": [
    "76900b4f5b7ad8d11baf505abc43f7b24d364071",
    "348685dcb9c1a0ea50b536170b3a8c77a8f8df06",
    "d6622daaa3c95a5040d06f91dc0c793bafa70f95",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
    "4d8abd84f40a6124e7b05b34c14b4035309623ef",
    "74ba6ffa0b601badc68366685dcf993a0844520a"
  ],
  "changeHistoryShort": {
    "76900b4f5b7ad8d11baf505abc43f7b24d364071": "Ybodychange",
    "348685dcb9c1a0ea50b536170b3a8c77a8f8df06": "Ybodychange",
    "d6622daaa3c95a5040d06f91dc0c793bafa70f95": "Ybodychange",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": "Ymultichange(Yparameterchange,Ybodychange)",
    "4d8abd84f40a6124e7b05b34c14b4035309623ef": "Ybodychange",
    "74ba6ffa0b601badc68366685dcf993a0844520a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "76900b4f5b7ad8d11baf505abc43f7b24d364071": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10189. Code cleanup in LeveldbRMStateStore. Contributed by Benjamin Teke\n",
      "commitDate": "18/04/20 12:57 AM",
      "commitName": "76900b4f5b7ad8d11baf505abc43f7b24d364071",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "26/03/20 4:18 AM",
      "commitNameOld": "348685dcb9c1a0ea50b536170b3a8c77a8f8df06",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 22.86,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,21 @@\n   public void initialize(Configuration config, Configuration schedConf,\n       RMContext rmContext) throws IOException {\n     this.conf \u003d config;\n     this.initSchedConf \u003d schedConf;\n+    this.dbManager \u003d new DBManager();\n+    this.versionDbManager \u003d new DBManager();\n     try {\n       initDatabase();\n       this.maxLogs \u003d config.getLong(\n           YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n           YarnConfiguration.DEFAULT_RM_SCHEDCONF_LEVELDB_MAX_LOGS);\n-      this.compactionIntervalMsec \u003d config.getLong(\n+      long compactionIntervalMsec \u003d config.getLong(\n           YarnConfiguration.RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS,\n           YarnConfiguration\n               .DEFAULT_RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS) * 1000;\n-      startCompactionTimer();\n+      dbManager.startCompactionTimer(compactionIntervalMsec,\n+          this.getClass().getSimpleName());\n     } catch (Exception e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration config, Configuration schedConf,\n      RMContext rmContext) throws IOException {\n    this.conf \u003d config;\n    this.initSchedConf \u003d schedConf;\n    this.dbManager \u003d new DBManager();\n    this.versionDbManager \u003d new DBManager();\n    try {\n      initDatabase();\n      this.maxLogs \u003d config.getLong(\n          YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n          YarnConfiguration.DEFAULT_RM_SCHEDCONF_LEVELDB_MAX_LOGS);\n      long compactionIntervalMsec \u003d config.getLong(\n          YarnConfiguration.RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS,\n          YarnConfiguration\n              .DEFAULT_RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS) * 1000;\n      dbManager.startCompactionTimer(compactionIntervalMsec,\n          this.getClass().getSimpleName());\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
      "extendedDetails": {}
    },
    "348685dcb9c1a0ea50b536170b3a8c77a8f8df06": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9998. Code cleanup in LeveldbConfigurationStore. Contributed by Benjamin Teke\n",
      "commitDate": "26/03/20 4:18 AM",
      "commitName": "348685dcb9c1a0ea50b536170b3a8c77a8f8df06",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "10/03/20 8:35 AM",
      "commitNameOld": "61f4cf3055e60e64a95f4599ebceac5a924bba02",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 15.82,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   public void initialize(Configuration config, Configuration schedConf,\n       RMContext rmContext) throws IOException {\n     this.conf \u003d config;\n+    this.initSchedConf \u003d schedConf;\n     try {\n-      initDatabase(schedConf);\n+      initDatabase();\n       this.maxLogs \u003d config.getLong(\n           YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n           YarnConfiguration.DEFAULT_RM_SCHEDCONF_LEVELDB_MAX_LOGS);\n       this.compactionIntervalMsec \u003d config.getLong(\n           YarnConfiguration.RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS,\n           YarnConfiguration\n               .DEFAULT_RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS) * 1000;\n       startCompactionTimer();\n     } catch (Exception e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration config, Configuration schedConf,\n      RMContext rmContext) throws IOException {\n    this.conf \u003d config;\n    this.initSchedConf \u003d schedConf;\n    try {\n      initDatabase();\n      this.maxLogs \u003d config.getLong(\n          YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n          YarnConfiguration.DEFAULT_RM_SCHEDCONF_LEVELDB_MAX_LOGS);\n      this.compactionIntervalMsec \u003d config.getLong(\n          YarnConfiguration.RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS,\n          YarnConfiguration\n              .DEFAULT_RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS) * 1000;\n      startCompactionTimer();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
      "extendedDetails": {}
    },
    "d6622daaa3c95a5040d06f91dc0c793bafa70f95": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7046. Add closing logic to configuration store\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "d6622daaa3c95a5040d06f91dc0c793bafa70f95",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public void initialize(Configuration config, Configuration schedConf,\n       RMContext rmContext) throws IOException {\n     this.conf \u003d config;\n     try {\n-      this.db \u003d initDatabase(schedConf);\n+      initDatabase(schedConf);\n       this.maxLogs \u003d config.getLong(\n           YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n           YarnConfiguration.DEFAULT_RM_SCHEDCONF_LEVELDB_MAX_LOGS);\n       this.compactionIntervalMsec \u003d config.getLong(\n           YarnConfiguration.RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS,\n           YarnConfiguration\n               .DEFAULT_RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS) * 1000;\n       startCompactionTimer();\n     } catch (Exception e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration config, Configuration schedConf,\n      RMContext rmContext) throws IOException {\n    this.conf \u003d config;\n    try {\n      initDatabase(schedConf);\n      this.maxLogs \u003d config.getLong(\n          YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n          YarnConfiguration.DEFAULT_RM_SCHEDCONF_LEVELDB_MAX_LOGS);\n      this.compactionIntervalMsec \u003d config.getLong(\n          YarnConfiguration.RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS,\n          YarnConfiguration\n              .DEFAULT_RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS) * 1000;\n      startCompactionTimer();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
      "extendedDetails": {}
    },
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
          "commitDate": "09/10/17 11:11 AM",
          "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/10/17 11:11 AM",
          "commitNameOld": "4d8abd84f40a6124e7b05b34c14b4035309623ef",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,17 @@\n-  public void initialize(Configuration config, Configuration schedConf)\n-      throws IOException {\n+  public void initialize(Configuration config, Configuration schedConf,\n+      RMContext rmContext) throws IOException {\n     this.conf \u003d config;\n     try {\n       this.db \u003d initDatabase(schedConf);\n-      this.txnId \u003d Long.parseLong(new String(db.get(bytes(LOG_COMMITTED_TXN)),\n-          StandardCharsets.UTF_8));\n-      DBIterator itr \u003d db.iterator();\n-      itr.seek(bytes(LOG_PREFIX + txnId));\n-      // Seek to first uncommitted log\n-      itr.next();\n-      while (itr.hasNext()) {\n-        Map.Entry\u003cbyte[], byte[]\u003e entry \u003d itr.next();\n-        if (!new String(entry.getKey(), StandardCharsets.UTF_8)\n-            .startsWith(LOG_PREFIX)) {\n-          break;\n-        }\n-        pendingMutations.add(deserLogMutation(entry.getValue()));\n-        txnId++;\n-      }\n-      // Get the earliest txnId stored in logs\n-      itr.seekToFirst();\n-      if (itr.hasNext()) {\n-        Map.Entry\u003cbyte[], byte[]\u003e entry \u003d itr.next();\n-        byte[] key \u003d entry.getKey();\n-        String logId \u003d new String(key, StandardCharsets.UTF_8);\n-        if (logId.startsWith(LOG_PREFIX)) {\n-          minTxn \u003d Long.parseLong(logId.substring(logId.indexOf(\u0027.\u0027) + 1));\n-        }\n-      }\n       this.maxLogs \u003d config.getLong(\n-          YarnConfiguration.RM_SCHEDCONF_LEVELDB_MAX_LOGS,\n+          YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n           YarnConfiguration.DEFAULT_RM_SCHEDCONF_LEVELDB_MAX_LOGS);\n       this.compactionIntervalMsec \u003d config.getLong(\n           YarnConfiguration.RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS,\n           YarnConfiguration\n               .DEFAULT_RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS) * 1000;\n       startCompactionTimer();\n     } catch (Exception e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initialize(Configuration config, Configuration schedConf,\n      RMContext rmContext) throws IOException {\n    this.conf \u003d config;\n    try {\n      this.db \u003d initDatabase(schedConf);\n      this.maxLogs \u003d config.getLong(\n          YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n          YarnConfiguration.DEFAULT_RM_SCHEDCONF_LEVELDB_MAX_LOGS);\n      this.compactionIntervalMsec \u003d config.getLong(\n          YarnConfiguration.RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS,\n          YarnConfiguration\n              .DEFAULT_RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS) * 1000;\n      startCompactionTimer();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
          "extendedDetails": {
            "oldValue": "[config-Configuration, schedConf-Configuration]",
            "newValue": "[config-Configuration, schedConf-Configuration, rmContext-RMContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
          "commitDate": "09/10/17 11:11 AM",
          "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/10/17 11:11 AM",
          "commitNameOld": "4d8abd84f40a6124e7b05b34c14b4035309623ef",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,17 @@\n-  public void initialize(Configuration config, Configuration schedConf)\n-      throws IOException {\n+  public void initialize(Configuration config, Configuration schedConf,\n+      RMContext rmContext) throws IOException {\n     this.conf \u003d config;\n     try {\n       this.db \u003d initDatabase(schedConf);\n-      this.txnId \u003d Long.parseLong(new String(db.get(bytes(LOG_COMMITTED_TXN)),\n-          StandardCharsets.UTF_8));\n-      DBIterator itr \u003d db.iterator();\n-      itr.seek(bytes(LOG_PREFIX + txnId));\n-      // Seek to first uncommitted log\n-      itr.next();\n-      while (itr.hasNext()) {\n-        Map.Entry\u003cbyte[], byte[]\u003e entry \u003d itr.next();\n-        if (!new String(entry.getKey(), StandardCharsets.UTF_8)\n-            .startsWith(LOG_PREFIX)) {\n-          break;\n-        }\n-        pendingMutations.add(deserLogMutation(entry.getValue()));\n-        txnId++;\n-      }\n-      // Get the earliest txnId stored in logs\n-      itr.seekToFirst();\n-      if (itr.hasNext()) {\n-        Map.Entry\u003cbyte[], byte[]\u003e entry \u003d itr.next();\n-        byte[] key \u003d entry.getKey();\n-        String logId \u003d new String(key, StandardCharsets.UTF_8);\n-        if (logId.startsWith(LOG_PREFIX)) {\n-          minTxn \u003d Long.parseLong(logId.substring(logId.indexOf(\u0027.\u0027) + 1));\n-        }\n-      }\n       this.maxLogs \u003d config.getLong(\n-          YarnConfiguration.RM_SCHEDCONF_LEVELDB_MAX_LOGS,\n+          YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n           YarnConfiguration.DEFAULT_RM_SCHEDCONF_LEVELDB_MAX_LOGS);\n       this.compactionIntervalMsec \u003d config.getLong(\n           YarnConfiguration.RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS,\n           YarnConfiguration\n               .DEFAULT_RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS) * 1000;\n       startCompactionTimer();\n     } catch (Exception e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initialize(Configuration config, Configuration schedConf,\n      RMContext rmContext) throws IOException {\n    this.conf \u003d config;\n    try {\n      this.db \u003d initDatabase(schedConf);\n      this.maxLogs \u003d config.getLong(\n          YarnConfiguration.RM_SCHEDCONF_MAX_LOGS,\n          YarnConfiguration.DEFAULT_RM_SCHEDCONF_LEVELDB_MAX_LOGS);\n      this.compactionIntervalMsec \u003d config.getLong(\n          YarnConfiguration.RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS,\n          YarnConfiguration\n              .DEFAULT_RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS) * 1000;\n      startCompactionTimer();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "4d8abd84f40a6124e7b05b34c14b4035309623ef": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7024: Fix issues on recovery in LevelDB store. Contributed by Jonathan Hung\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "4d8abd84f40a6124e7b05b34c14b4035309623ef",
      "commitAuthor": "Xuan",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "74ba6ffa0b601badc68366685dcf993a0844520a",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   public void initialize(Configuration config, Configuration schedConf)\n       throws IOException {\n     this.conf \u003d config;\n     try {\n       this.db \u003d initDatabase(schedConf);\n       this.txnId \u003d Long.parseLong(new String(db.get(bytes(LOG_COMMITTED_TXN)),\n           StandardCharsets.UTF_8));\n       DBIterator itr \u003d db.iterator();\n       itr.seek(bytes(LOG_PREFIX + txnId));\n       // Seek to first uncommitted log\n       itr.next();\n       while (itr.hasNext()) {\n         Map.Entry\u003cbyte[], byte[]\u003e entry \u003d itr.next();\n         if (!new String(entry.getKey(), StandardCharsets.UTF_8)\n             .startsWith(LOG_PREFIX)) {\n           break;\n         }\n         pendingMutations.add(deserLogMutation(entry.getValue()));\n+        txnId++;\n       }\n       // Get the earliest txnId stored in logs\n       itr.seekToFirst();\n       if (itr.hasNext()) {\n         Map.Entry\u003cbyte[], byte[]\u003e entry \u003d itr.next();\n         byte[] key \u003d entry.getKey();\n         String logId \u003d new String(key, StandardCharsets.UTF_8);\n         if (logId.startsWith(LOG_PREFIX)) {\n           minTxn \u003d Long.parseLong(logId.substring(logId.indexOf(\u0027.\u0027) + 1));\n         }\n       }\n       this.maxLogs \u003d config.getLong(\n           YarnConfiguration.RM_SCHEDCONF_LEVELDB_MAX_LOGS,\n           YarnConfiguration.DEFAULT_RM_SCHEDCONF_LEVELDB_MAX_LOGS);\n       this.compactionIntervalMsec \u003d config.getLong(\n           YarnConfiguration.RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS,\n           YarnConfiguration\n               .DEFAULT_RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS) * 1000;\n       startCompactionTimer();\n     } catch (Exception e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration config, Configuration schedConf)\n      throws IOException {\n    this.conf \u003d config;\n    try {\n      this.db \u003d initDatabase(schedConf);\n      this.txnId \u003d Long.parseLong(new String(db.get(bytes(LOG_COMMITTED_TXN)),\n          StandardCharsets.UTF_8));\n      DBIterator itr \u003d db.iterator();\n      itr.seek(bytes(LOG_PREFIX + txnId));\n      // Seek to first uncommitted log\n      itr.next();\n      while (itr.hasNext()) {\n        Map.Entry\u003cbyte[], byte[]\u003e entry \u003d itr.next();\n        if (!new String(entry.getKey(), StandardCharsets.UTF_8)\n            .startsWith(LOG_PREFIX)) {\n          break;\n        }\n        pendingMutations.add(deserLogMutation(entry.getValue()));\n        txnId++;\n      }\n      // Get the earliest txnId stored in logs\n      itr.seekToFirst();\n      if (itr.hasNext()) {\n        Map.Entry\u003cbyte[], byte[]\u003e entry \u003d itr.next();\n        byte[] key \u003d entry.getKey();\n        String logId \u003d new String(key, StandardCharsets.UTF_8);\n        if (logId.startsWith(LOG_PREFIX)) {\n          minTxn \u003d Long.parseLong(logId.substring(logId.indexOf(\u0027.\u0027) + 1));\n        }\n      }\n      this.maxLogs \u003d config.getLong(\n          YarnConfiguration.RM_SCHEDCONF_LEVELDB_MAX_LOGS,\n          YarnConfiguration.DEFAULT_RM_SCHEDCONF_LEVELDB_MAX_LOGS);\n      this.compactionIntervalMsec \u003d config.getLong(\n          YarnConfiguration.RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS,\n          YarnConfiguration\n              .DEFAULT_RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS) * 1000;\n      startCompactionTimer();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java",
      "extendedDetails": {}
    },
    "74ba6ffa0b601badc68366685dcf993a0844520a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5947: Create LeveldbConfigurationStore class using Leveldb as backing store. Contributed by Jonathan Hung\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "74ba6ffa0b601badc68366685dcf993a0844520a",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,41 @@\n+  public void initialize(Configuration config, Configuration schedConf)\n+      throws IOException {\n+    this.conf \u003d config;\n+    try {\n+      this.db \u003d initDatabase(schedConf);\n+      this.txnId \u003d Long.parseLong(new String(db.get(bytes(LOG_COMMITTED_TXN)),\n+          StandardCharsets.UTF_8));\n+      DBIterator itr \u003d db.iterator();\n+      itr.seek(bytes(LOG_PREFIX + txnId));\n+      // Seek to first uncommitted log\n+      itr.next();\n+      while (itr.hasNext()) {\n+        Map.Entry\u003cbyte[], byte[]\u003e entry \u003d itr.next();\n+        if (!new String(entry.getKey(), StandardCharsets.UTF_8)\n+            .startsWith(LOG_PREFIX)) {\n+          break;\n+        }\n+        pendingMutations.add(deserLogMutation(entry.getValue()));\n+      }\n+      // Get the earliest txnId stored in logs\n+      itr.seekToFirst();\n+      if (itr.hasNext()) {\n+        Map.Entry\u003cbyte[], byte[]\u003e entry \u003d itr.next();\n+        byte[] key \u003d entry.getKey();\n+        String logId \u003d new String(key, StandardCharsets.UTF_8);\n+        if (logId.startsWith(LOG_PREFIX)) {\n+          minTxn \u003d Long.parseLong(logId.substring(logId.indexOf(\u0027.\u0027) + 1));\n+        }\n+      }\n+      this.maxLogs \u003d config.getLong(\n+          YarnConfiguration.RM_SCHEDCONF_LEVELDB_MAX_LOGS,\n+          YarnConfiguration.DEFAULT_RM_SCHEDCONF_LEVELDB_MAX_LOGS);\n+      this.compactionIntervalMsec \u003d config.getLong(\n+          YarnConfiguration.RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS,\n+          YarnConfiguration\n+              .DEFAULT_RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS) * 1000;\n+      startCompactionTimer();\n+    } catch (Exception e) {\n+      throw new IOException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration config, Configuration schedConf)\n      throws IOException {\n    this.conf \u003d config;\n    try {\n      this.db \u003d initDatabase(schedConf);\n      this.txnId \u003d Long.parseLong(new String(db.get(bytes(LOG_COMMITTED_TXN)),\n          StandardCharsets.UTF_8));\n      DBIterator itr \u003d db.iterator();\n      itr.seek(bytes(LOG_PREFIX + txnId));\n      // Seek to first uncommitted log\n      itr.next();\n      while (itr.hasNext()) {\n        Map.Entry\u003cbyte[], byte[]\u003e entry \u003d itr.next();\n        if (!new String(entry.getKey(), StandardCharsets.UTF_8)\n            .startsWith(LOG_PREFIX)) {\n          break;\n        }\n        pendingMutations.add(deserLogMutation(entry.getValue()));\n      }\n      // Get the earliest txnId stored in logs\n      itr.seekToFirst();\n      if (itr.hasNext()) {\n        Map.Entry\u003cbyte[], byte[]\u003e entry \u003d itr.next();\n        byte[] key \u003d entry.getKey();\n        String logId \u003d new String(key, StandardCharsets.UTF_8);\n        if (logId.startsWith(LOG_PREFIX)) {\n          minTxn \u003d Long.parseLong(logId.substring(logId.indexOf(\u0027.\u0027) + 1));\n        }\n      }\n      this.maxLogs \u003d config.getLong(\n          YarnConfiguration.RM_SCHEDCONF_LEVELDB_MAX_LOGS,\n          YarnConfiguration.DEFAULT_RM_SCHEDCONF_LEVELDB_MAX_LOGS);\n      this.compactionIntervalMsec \u003d config.getLong(\n          YarnConfiguration.RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS,\n          YarnConfiguration\n              .DEFAULT_RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS) * 1000;\n      startCompactionTimer();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/LeveldbConfigurationStore.java"
    }
  }
}