{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "YarnChild.java",
  "functionName": "configureLocalDirs",
  "functionId": "configureLocalDirs___task-Task__job-JobConf",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java",
  "functionStartLine": 277,
  "functionEndLine": 312,
  "numCommitsSeen": 33,
  "timeTaken": 7105,
  "changeHistory": [
    "27e8c86999bc6a972a99216060b11ef35b7de858",
    "b45c4500269ed3ece9a3f61aa08acf9b0af71011",
    "13ea1d575ce0c346a5ce6ea33df01007e2b34c28",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "27e8c86999bc6a972a99216060b11ef35b7de858": "Ybodychange",
    "b45c4500269ed3ece9a3f61aa08acf9b0af71011": "Ybodychange",
    "13ea1d575ce0c346a5ce6ea33df01007e2b34c28": "Ymultichange(Yexceptionschange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "27e8c86999bc6a972a99216060b11ef35b7de858": {
      "type": "Ybodychange",
      "commitMessage": "YARN-561. Modified NodeManager to set key information into the environment of every container that it launches. Contributed by Xuan Gong.\nMAPREDUCE-5175. Updated MR App to not set envs that will be set by NMs anyways after YARN-561. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1471156 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/13 2:39 PM",
      "commitName": "27e8c86999bc6a972a99216060b11ef35b7de858",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "22/04/13 1:07 PM",
      "commitNameOld": "009af54d5192c822ba1299c1389e67266dfe7ad1",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private static void configureLocalDirs(Task task, JobConf job) throws IOException {\n     String[] localSysDirs \u003d StringUtils.getTrimmedStrings(\n-        System.getenv(ApplicationConstants.LOCAL_DIR_ENV));\n+        System.getenv(Environment.LOCAL_DIRS.name()));\n     job.setStrings(MRConfig.LOCAL_DIR, localSysDirs);\n     LOG.info(MRConfig.LOCAL_DIR + \" for child: \" + job.get(MRConfig.LOCAL_DIR));\n     LocalDirAllocator lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n     Path workDir \u003d null;\n     // First, try to find the JOB_LOCAL_DIR on this host.\n     try {\n       workDir \u003d lDirAlloc.getLocalPathToRead(\"work\", job);\n     } catch (DiskErrorException e) {\n       // DiskErrorException means dir not found. If not found, it will\n       // be created below.\n     }\n     if (workDir \u003d\u003d null) {\n       // JOB_LOCAL_DIR doesn\u0027t exist on this host -- Create it.\n       workDir \u003d lDirAlloc.getLocalPathForWrite(\"work\", job);\n       FileSystem lfs \u003d FileSystem.getLocal(job).getRaw();\n       boolean madeDir \u003d false;\n       try {\n         madeDir \u003d lfs.mkdirs(workDir);\n       } catch (FileAlreadyExistsException e) {\n         // Since all tasks will be running in their own JVM, the race condition\n         // exists where multiple tasks could be trying to create this directory\n         // at the same time. If this task loses the race, it\u0027s okay because\n         // the directory already exists.\n         madeDir \u003d true;\n         workDir \u003d lDirAlloc.getLocalPathToRead(\"work\", job);\n       }\n       if (!madeDir) {\n           throw new IOException(\"Mkdirs failed to create \"\n               + workDir.toString());\n       }\n     }\n     job.set(MRJobConfig.JOB_LOCAL_DIR,workDir.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void configureLocalDirs(Task task, JobConf job) throws IOException {\n    String[] localSysDirs \u003d StringUtils.getTrimmedStrings(\n        System.getenv(Environment.LOCAL_DIRS.name()));\n    job.setStrings(MRConfig.LOCAL_DIR, localSysDirs);\n    LOG.info(MRConfig.LOCAL_DIR + \" for child: \" + job.get(MRConfig.LOCAL_DIR));\n    LocalDirAllocator lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n    Path workDir \u003d null;\n    // First, try to find the JOB_LOCAL_DIR on this host.\n    try {\n      workDir \u003d lDirAlloc.getLocalPathToRead(\"work\", job);\n    } catch (DiskErrorException e) {\n      // DiskErrorException means dir not found. If not found, it will\n      // be created below.\n    }\n    if (workDir \u003d\u003d null) {\n      // JOB_LOCAL_DIR doesn\u0027t exist on this host -- Create it.\n      workDir \u003d lDirAlloc.getLocalPathForWrite(\"work\", job);\n      FileSystem lfs \u003d FileSystem.getLocal(job).getRaw();\n      boolean madeDir \u003d false;\n      try {\n        madeDir \u003d lfs.mkdirs(workDir);\n      } catch (FileAlreadyExistsException e) {\n        // Since all tasks will be running in their own JVM, the race condition\n        // exists where multiple tasks could be trying to create this directory\n        // at the same time. If this task loses the race, it\u0027s okay because\n        // the directory already exists.\n        madeDir \u003d true;\n        workDir \u003d lDirAlloc.getLocalPathToRead(\"work\", job);\n      }\n      if (!madeDir) {\n          throw new IOException(\"Mkdirs failed to create \"\n              + workDir.toString());\n      }\n    }\n    job.set(MRJobConfig.JOB_LOCAL_DIR,workDir.toString());\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java",
      "extendedDetails": {}
    },
    "b45c4500269ed3ece9a3f61aa08acf9b0af71011": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3988. mapreduce.job.local.dir doesn\u0027t point to a single directory on a node. (Eric Payne via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1309086 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/04/12 11:29 AM",
      "commitName": "b45c4500269ed3ece9a3f61aa08acf9b0af71011",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "06/03/12 5:27 PM",
      "commitNameOld": "13ea1d575ce0c346a5ce6ea33df01007e2b34c28",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 27.71,
      "commitsBetweenForRepo": 170,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,36 @@\n   private static void configureLocalDirs(Task task, JobConf job) throws IOException {\n     String[] localSysDirs \u003d StringUtils.getTrimmedStrings(\n         System.getenv(ApplicationConstants.LOCAL_DIR_ENV));\n     job.setStrings(MRConfig.LOCAL_DIR, localSysDirs);\n     LOG.info(MRConfig.LOCAL_DIR + \" for child: \" + job.get(MRConfig.LOCAL_DIR));\n     LocalDirAllocator lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n-    Path workDir \u003d lDirAlloc.getLocalPathForWrite(\"work\", job);\n-    FileSystem lfs \u003d FileSystem.getLocal(job).getRaw();\n-    if (!lfs.mkdirs(workDir)) {\n-        throw new IOException(\"Mkdirs failed to create \"\n-            + workDir.toString());\n+    Path workDir \u003d null;\n+    // First, try to find the JOB_LOCAL_DIR on this host.\n+    try {\n+      workDir \u003d lDirAlloc.getLocalPathToRead(\"work\", job);\n+    } catch (DiskErrorException e) {\n+      // DiskErrorException means dir not found. If not found, it will\n+      // be created below.\n+    }\n+    if (workDir \u003d\u003d null) {\n+      // JOB_LOCAL_DIR doesn\u0027t exist on this host -- Create it.\n+      workDir \u003d lDirAlloc.getLocalPathForWrite(\"work\", job);\n+      FileSystem lfs \u003d FileSystem.getLocal(job).getRaw();\n+      boolean madeDir \u003d false;\n+      try {\n+        madeDir \u003d lfs.mkdirs(workDir);\n+      } catch (FileAlreadyExistsException e) {\n+        // Since all tasks will be running in their own JVM, the race condition\n+        // exists where multiple tasks could be trying to create this directory\n+        // at the same time. If this task loses the race, it\u0027s okay because\n+        // the directory already exists.\n+        madeDir \u003d true;\n+        workDir \u003d lDirAlloc.getLocalPathToRead(\"work\", job);\n+      }\n+      if (!madeDir) {\n+          throw new IOException(\"Mkdirs failed to create \"\n+              + workDir.toString());\n+      }\n     }\n     job.set(MRJobConfig.JOB_LOCAL_DIR,workDir.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void configureLocalDirs(Task task, JobConf job) throws IOException {\n    String[] localSysDirs \u003d StringUtils.getTrimmedStrings(\n        System.getenv(ApplicationConstants.LOCAL_DIR_ENV));\n    job.setStrings(MRConfig.LOCAL_DIR, localSysDirs);\n    LOG.info(MRConfig.LOCAL_DIR + \" for child: \" + job.get(MRConfig.LOCAL_DIR));\n    LocalDirAllocator lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n    Path workDir \u003d null;\n    // First, try to find the JOB_LOCAL_DIR on this host.\n    try {\n      workDir \u003d lDirAlloc.getLocalPathToRead(\"work\", job);\n    } catch (DiskErrorException e) {\n      // DiskErrorException means dir not found. If not found, it will\n      // be created below.\n    }\n    if (workDir \u003d\u003d null) {\n      // JOB_LOCAL_DIR doesn\u0027t exist on this host -- Create it.\n      workDir \u003d lDirAlloc.getLocalPathForWrite(\"work\", job);\n      FileSystem lfs \u003d FileSystem.getLocal(job).getRaw();\n      boolean madeDir \u003d false;\n      try {\n        madeDir \u003d lfs.mkdirs(workDir);\n      } catch (FileAlreadyExistsException e) {\n        // Since all tasks will be running in their own JVM, the race condition\n        // exists where multiple tasks could be trying to create this directory\n        // at the same time. If this task loses the race, it\u0027s okay because\n        // the directory already exists.\n        madeDir \u003d true;\n        workDir \u003d lDirAlloc.getLocalPathToRead(\"work\", job);\n      }\n      if (!madeDir) {\n          throw new IOException(\"Mkdirs failed to create \"\n              + workDir.toString());\n      }\n    }\n    job.set(MRJobConfig.JOB_LOCAL_DIR,workDir.toString());\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java",
      "extendedDetails": {}
    },
    "13ea1d575ce0c346a5ce6ea33df01007e2b34c28": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3975. Default value not set for Configuration parameter mapreduce.job.local.dir (Eric Payne via bobby)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1297825 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/12 5:27 PM",
      "commitName": "13ea1d575ce0c346a5ce6ea33df01007e2b34c28",
      "commitAuthor": "Robert Joseph Evans",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "MAPREDUCE-3975. Default value not set for Configuration parameter mapreduce.job.local.dir (Eric Payne via bobby)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1297825 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/03/12 5:27 PM",
          "commitName": "13ea1d575ce0c346a5ce6ea33df01007e2b34c28",
          "commitAuthor": "Robert Joseph Evans",
          "commitDateOld": "10/11/11 9:28 AM",
          "commitNameOld": "15150cd997dd2180f5c011fb223c1a8095e441c5",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 117.33,
          "commitsBetweenForRepo": 821,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,14 @@\n-  private static void configureLocalDirs(Task task, JobConf job) {\n+  private static void configureLocalDirs(Task task, JobConf job) throws IOException {\n     String[] localSysDirs \u003d StringUtils.getTrimmedStrings(\n         System.getenv(ApplicationConstants.LOCAL_DIR_ENV));\n     job.setStrings(MRConfig.LOCAL_DIR, localSysDirs);\n     LOG.info(MRConfig.LOCAL_DIR + \" for child: \" + job.get(MRConfig.LOCAL_DIR));\n+    LocalDirAllocator lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n+    Path workDir \u003d lDirAlloc.getLocalPathForWrite(\"work\", job);\n+    FileSystem lfs \u003d FileSystem.getLocal(job).getRaw();\n+    if (!lfs.mkdirs(workDir)) {\n+        throw new IOException(\"Mkdirs failed to create \"\n+            + workDir.toString());\n+    }\n+    job.set(MRJobConfig.JOB_LOCAL_DIR,workDir.toString());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void configureLocalDirs(Task task, JobConf job) throws IOException {\n    String[] localSysDirs \u003d StringUtils.getTrimmedStrings(\n        System.getenv(ApplicationConstants.LOCAL_DIR_ENV));\n    job.setStrings(MRConfig.LOCAL_DIR, localSysDirs);\n    LOG.info(MRConfig.LOCAL_DIR + \" for child: \" + job.get(MRConfig.LOCAL_DIR));\n    LocalDirAllocator lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n    Path workDir \u003d lDirAlloc.getLocalPathForWrite(\"work\", job);\n    FileSystem lfs \u003d FileSystem.getLocal(job).getRaw();\n    if (!lfs.mkdirs(workDir)) {\n        throw new IOException(\"Mkdirs failed to create \"\n            + workDir.toString());\n    }\n    job.set(MRJobConfig.JOB_LOCAL_DIR,workDir.toString());\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3975. Default value not set for Configuration parameter mapreduce.job.local.dir (Eric Payne via bobby)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1297825 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/03/12 5:27 PM",
          "commitName": "13ea1d575ce0c346a5ce6ea33df01007e2b34c28",
          "commitAuthor": "Robert Joseph Evans",
          "commitDateOld": "10/11/11 9:28 AM",
          "commitNameOld": "15150cd997dd2180f5c011fb223c1a8095e441c5",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 117.33,
          "commitsBetweenForRepo": 821,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,14 @@\n-  private static void configureLocalDirs(Task task, JobConf job) {\n+  private static void configureLocalDirs(Task task, JobConf job) throws IOException {\n     String[] localSysDirs \u003d StringUtils.getTrimmedStrings(\n         System.getenv(ApplicationConstants.LOCAL_DIR_ENV));\n     job.setStrings(MRConfig.LOCAL_DIR, localSysDirs);\n     LOG.info(MRConfig.LOCAL_DIR + \" for child: \" + job.get(MRConfig.LOCAL_DIR));\n+    LocalDirAllocator lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n+    Path workDir \u003d lDirAlloc.getLocalPathForWrite(\"work\", job);\n+    FileSystem lfs \u003d FileSystem.getLocal(job).getRaw();\n+    if (!lfs.mkdirs(workDir)) {\n+        throw new IOException(\"Mkdirs failed to create \"\n+            + workDir.toString());\n+    }\n+    job.set(MRJobConfig.JOB_LOCAL_DIR,workDir.toString());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void configureLocalDirs(Task task, JobConf job) throws IOException {\n    String[] localSysDirs \u003d StringUtils.getTrimmedStrings(\n        System.getenv(ApplicationConstants.LOCAL_DIR_ENV));\n    job.setStrings(MRConfig.LOCAL_DIR, localSysDirs);\n    LOG.info(MRConfig.LOCAL_DIR + \" for child: \" + job.get(MRConfig.LOCAL_DIR));\n    LocalDirAllocator lDirAlloc \u003d new LocalDirAllocator(MRConfig.LOCAL_DIR);\n    Path workDir \u003d lDirAlloc.getLocalPathForWrite(\"work\", job);\n    FileSystem lfs \u003d FileSystem.getLocal(job).getRaw();\n    if (!lfs.mkdirs(workDir)) {\n        throw new IOException(\"Mkdirs failed to create \"\n            + workDir.toString());\n    }\n    job.set(MRJobConfig.JOB_LOCAL_DIR,workDir.toString());\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void configureLocalDirs(Task task, JobConf job) {\n    String[] localSysDirs \u003d StringUtils.getTrimmedStrings(\n        System.getenv(ApplicationConstants.LOCAL_DIR_ENV));\n    job.setStrings(MRConfig.LOCAL_DIR, localSysDirs);\n    LOG.info(MRConfig.LOCAL_DIR + \" for child: \" + job.get(MRConfig.LOCAL_DIR));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,6 @@\n+  private static void configureLocalDirs(Task task, JobConf job) {\n+    String[] localSysDirs \u003d StringUtils.getTrimmedStrings(\n+        System.getenv(ApplicationConstants.LOCAL_DIR_ENV));\n+    job.setStrings(MRConfig.LOCAL_DIR, localSysDirs);\n+    LOG.info(MRConfig.LOCAL_DIR + \" for child: \" + job.get(MRConfig.LOCAL_DIR));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void configureLocalDirs(Task task, JobConf job) {\n    String[] localSysDirs \u003d StringUtils.getTrimmedStrings(\n        System.getenv(ApplicationConstants.LOCAL_DIR_ENV));\n    job.setStrings(MRConfig.LOCAL_DIR, localSysDirs);\n    LOG.info(MRConfig.LOCAL_DIR + \" for child: \" + job.get(MRConfig.LOCAL_DIR));\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java"
    }
  }
}