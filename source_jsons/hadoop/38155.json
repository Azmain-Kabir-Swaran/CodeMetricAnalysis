{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacitySchedulerPreemptionUtils.java",
  "functionName": "preemptMapContains",
  "functionId": "preemptMapContains___preemptMap-Map__ApplicationAttemptId,Set__RMContainer______attemptId-ApplicationAttemptId__rmContainer-RMContainer",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/CapacitySchedulerPreemptionUtils.java",
  "functionStartLine": 254,
  "functionEndLine": 262,
  "numCommitsSeen": 56,
  "timeTaken": 6361,
  "changeHistory": [
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
    "60e4116bf1d00afed91010e57357fe54057e4e39",
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
    "03a25d2cc1a2fb124d00edf874d67e329c65a5e6",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61"
  ],
  "changeHistoryShort": {
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "60e4116bf1d00afed91010e57357fe54057e4e39": "Ymovefromfile",
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "03a25d2cc1a2fb124d00edf874d67e329c65a5e6": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": "Yintroduced"
  },
  "changeHistoryDetails": {
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
      "commitDate": "31/10/16 3:18 PM",
      "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
          "commitDate": "31/10/16 3:18 PM",
          "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "31/10/16 2:47 PM",
          "commitNameOld": "773c60bd7bd00651dc3016799b424b9bd2233eb3",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,9 @@\n-  private boolean preemptMapContains(\n+  private static boolean preemptMapContains(\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n       ApplicationAttemptId attemptId, RMContainer rmContainer) {\n-    Set\u003cRMContainer\u003e rmContainers;\n-    if (null \u003d\u003d (rmContainers \u003d preemptMap.get(attemptId))) {\n+    Set\u003cRMContainer\u003e rmContainers \u003d preemptMap.get(attemptId);\n+    if (null \u003d\u003d rmContainers) {\n       return false;\n     }\n     return rmContainers.contains(rmContainer);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean preemptMapContains(\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      ApplicationAttemptId attemptId, RMContainer rmContainer) {\n    Set\u003cRMContainer\u003e rmContainers \u003d preemptMap.get(attemptId);\n    if (null \u003d\u003d rmContainers) {\n      return false;\n    }\n    return rmContainers.contains(rmContainer);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/CapacitySchedulerPreemptionUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoCandidatesSelector.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/CapacitySchedulerPreemptionUtils.java",
            "oldMethodName": "preemptMapContains",
            "newMethodName": "preemptMapContains"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
          "commitDate": "31/10/16 3:18 PM",
          "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "31/10/16 2:47 PM",
          "commitNameOld": "773c60bd7bd00651dc3016799b424b9bd2233eb3",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,9 @@\n-  private boolean preemptMapContains(\n+  private static boolean preemptMapContains(\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n       ApplicationAttemptId attemptId, RMContainer rmContainer) {\n-    Set\u003cRMContainer\u003e rmContainers;\n-    if (null \u003d\u003d (rmContainers \u003d preemptMap.get(attemptId))) {\n+    Set\u003cRMContainer\u003e rmContainers \u003d preemptMap.get(attemptId);\n+    if (null \u003d\u003d rmContainers) {\n       return false;\n     }\n     return rmContainers.contains(rmContainer);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean preemptMapContains(\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      ApplicationAttemptId attemptId, RMContainer rmContainer) {\n    Set\u003cRMContainer\u003e rmContainers \u003d preemptMap.get(attemptId);\n    if (null \u003d\u003d rmContainers) {\n      return false;\n    }\n    return rmContainers.contains(rmContainer);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/CapacitySchedulerPreemptionUtils.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
          "commitDate": "31/10/16 3:18 PM",
          "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "31/10/16 2:47 PM",
          "commitNameOld": "773c60bd7bd00651dc3016799b424b9bd2233eb3",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,9 @@\n-  private boolean preemptMapContains(\n+  private static boolean preemptMapContains(\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n       ApplicationAttemptId attemptId, RMContainer rmContainer) {\n-    Set\u003cRMContainer\u003e rmContainers;\n-    if (null \u003d\u003d (rmContainers \u003d preemptMap.get(attemptId))) {\n+    Set\u003cRMContainer\u003e rmContainers \u003d preemptMap.get(attemptId);\n+    if (null \u003d\u003d rmContainers) {\n       return false;\n     }\n     return rmContainers.contains(rmContainer);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean preemptMapContains(\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      ApplicationAttemptId attemptId, RMContainer rmContainer) {\n    Set\u003cRMContainer\u003e rmContainers \u003d preemptMap.get(attemptId);\n    if (null \u003d\u003d rmContainers) {\n      return false;\n    }\n    return rmContainers.contains(rmContainer);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/CapacitySchedulerPreemptionUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "60e4116bf1d00afed91010e57357fe54057e4e39": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-4822. Refactor existing Preemption Policy of CS for easier adding new approach to select preemption candidates. Contributed by Wangda Tan\n",
      "commitDate": "30/03/16 12:43 PM",
      "commitName": "60e4116bf1d00afed91010e57357fe54057e4e39",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/03/16 11:22 PM",
      "commitNameOld": "09d63d5a192b5d6b172f94ff6c94da348fd49ea6",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.56,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private boolean preemptMapContains(\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      ApplicationAttemptId attemptId, RMContainer rmContainer) {\n    Set\u003cRMContainer\u003e rmContainers;\n    if (null \u003d\u003d (rmContainers \u003d preemptMap.get(attemptId))) {\n      return false;\n    }\n    return rmContainers.contains(rmContainer);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoCandidatesSelector.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoCandidatesSelector.java",
        "oldMethodName": "preemptMapContains",
        "newMethodName": "preemptMapContains"
      }
    },
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
      "commitDate": "24/04/15 5:03 PM",
      "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
          "commitDate": "24/04/15 5:03 PM",
          "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
          "commitAuthor": "Jian He",
          "commitDateOld": "20/04/15 5:12 PM",
          "commitNameOld": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 3.99,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,9 @@\n-  private void preemptAMContainers(Resource clusterResource,\n+  private boolean preemptMapContains(\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n-      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n-      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n-    for (RMContainer c : skippedAMContainerlist) {\n-      // Got required amount of resources for preemption, can stop now\n-      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n-          Resources.none())) {\n-        break;\n-      }\n-      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n-      // container selection iteration for preemption will be stopped. \n-      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n-          maxAMCapacityForThisQueue)) {\n-        break;\n-      }\n-      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n-          .getApplicationAttemptId());\n-      if (null \u003d\u003d contToPrempt) {\n-        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n-        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n-      }\n-      contToPrempt.add(c);\n-      \n-      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n-      Resources.subtractFrom(skippedAMSize, c.getContainer()\n-          .getResource());\n+      ApplicationAttemptId attemptId, RMContainer rmContainer) {\n+    Set\u003cRMContainer\u003e rmContainers;\n+    if (null \u003d\u003d (rmContainers \u003d preemptMap.get(attemptId))) {\n+      return false;\n     }\n-    skippedAMContainerlist.clear();\n+    return rmContainers.contains(rmContainer);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean preemptMapContains(\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      ApplicationAttemptId attemptId, RMContainer rmContainer) {\n    Set\u003cRMContainer\u003e rmContainers;\n    if (null \u003d\u003d (rmContainers \u003d preemptMap.get(attemptId))) {\n      return false;\n    }\n    return rmContainers.contains(rmContainer);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "preemptAMContainers",
            "newValue": "preemptMapContains"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
          "commitDate": "24/04/15 5:03 PM",
          "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
          "commitAuthor": "Jian He",
          "commitDateOld": "20/04/15 5:12 PM",
          "commitNameOld": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 3.99,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,9 @@\n-  private void preemptAMContainers(Resource clusterResource,\n+  private boolean preemptMapContains(\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n-      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n-      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n-    for (RMContainer c : skippedAMContainerlist) {\n-      // Got required amount of resources for preemption, can stop now\n-      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n-          Resources.none())) {\n-        break;\n-      }\n-      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n-      // container selection iteration for preemption will be stopped. \n-      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n-          maxAMCapacityForThisQueue)) {\n-        break;\n-      }\n-      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n-          .getApplicationAttemptId());\n-      if (null \u003d\u003d contToPrempt) {\n-        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n-        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n-      }\n-      contToPrempt.add(c);\n-      \n-      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n-      Resources.subtractFrom(skippedAMSize, c.getContainer()\n-          .getResource());\n+      ApplicationAttemptId attemptId, RMContainer rmContainer) {\n+    Set\u003cRMContainer\u003e rmContainers;\n+    if (null \u003d\u003d (rmContainers \u003d preemptMap.get(attemptId))) {\n+      return false;\n     }\n-    skippedAMContainerlist.clear();\n+    return rmContainers.contains(rmContainer);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean preemptMapContains(\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      ApplicationAttemptId attemptId, RMContainer rmContainer) {\n    Set\u003cRMContainer\u003e rmContainers;\n    if (null \u003d\u003d (rmContainers \u003d preemptMap.get(attemptId))) {\n      return false;\n    }\n    return rmContainers.contains(rmContainer);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, preemptMap-Map\u003cApplicationAttemptId,Set\u003cRMContainer\u003e\u003e, skippedAMContainerlist-List\u003cRMContainer\u003e, resToObtain-Resource, skippedAMSize-Resource, maxAMCapacityForThisQueue-Resource]",
            "newValue": "[preemptMap-Map\u003cApplicationAttemptId,Set\u003cRMContainer\u003e\u003e, attemptId-ApplicationAttemptId, rmContainer-RMContainer]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
          "commitDate": "24/04/15 5:03 PM",
          "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
          "commitAuthor": "Jian He",
          "commitDateOld": "20/04/15 5:12 PM",
          "commitNameOld": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 3.99,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,9 @@\n-  private void preemptAMContainers(Resource clusterResource,\n+  private boolean preemptMapContains(\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n-      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n-      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n-    for (RMContainer c : skippedAMContainerlist) {\n-      // Got required amount of resources for preemption, can stop now\n-      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n-          Resources.none())) {\n-        break;\n-      }\n-      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n-      // container selection iteration for preemption will be stopped. \n-      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n-          maxAMCapacityForThisQueue)) {\n-        break;\n-      }\n-      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n-          .getApplicationAttemptId());\n-      if (null \u003d\u003d contToPrempt) {\n-        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n-        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n-      }\n-      contToPrempt.add(c);\n-      \n-      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n-      Resources.subtractFrom(skippedAMSize, c.getContainer()\n-          .getResource());\n+      ApplicationAttemptId attemptId, RMContainer rmContainer) {\n+    Set\u003cRMContainer\u003e rmContainers;\n+    if (null \u003d\u003d (rmContainers \u003d preemptMap.get(attemptId))) {\n+      return false;\n     }\n-    skippedAMContainerlist.clear();\n+    return rmContainers.contains(rmContainer);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean preemptMapContains(\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      ApplicationAttemptId attemptId, RMContainer rmContainer) {\n    Set\u003cRMContainer\u003e rmContainers;\n    if (null \u003d\u003d (rmContainers \u003d preemptMap.get(attemptId))) {\n      return false;\n    }\n    return rmContainers.contains(rmContainer);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
          "commitDate": "24/04/15 5:03 PM",
          "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
          "commitAuthor": "Jian He",
          "commitDateOld": "20/04/15 5:12 PM",
          "commitNameOld": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 3.99,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,9 @@\n-  private void preemptAMContainers(Resource clusterResource,\n+  private boolean preemptMapContains(\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n-      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n-      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n-    for (RMContainer c : skippedAMContainerlist) {\n-      // Got required amount of resources for preemption, can stop now\n-      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n-          Resources.none())) {\n-        break;\n-      }\n-      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n-      // container selection iteration for preemption will be stopped. \n-      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n-          maxAMCapacityForThisQueue)) {\n-        break;\n-      }\n-      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n-          .getApplicationAttemptId());\n-      if (null \u003d\u003d contToPrempt) {\n-        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n-        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n-      }\n-      contToPrempt.add(c);\n-      \n-      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n-      Resources.subtractFrom(skippedAMSize, c.getContainer()\n-          .getResource());\n+      ApplicationAttemptId attemptId, RMContainer rmContainer) {\n+    Set\u003cRMContainer\u003e rmContainers;\n+    if (null \u003d\u003d (rmContainers \u003d preemptMap.get(attemptId))) {\n+      return false;\n     }\n-    skippedAMContainerlist.clear();\n+    return rmContainers.contains(rmContainer);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean preemptMapContains(\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      ApplicationAttemptId attemptId, RMContainer rmContainer) {\n    Set\u003cRMContainer\u003e rmContainers;\n    if (null \u003d\u003d (rmContainers \u003d preemptMap.get(attemptId))) {\n      return false;\n    }\n    return rmContainers.contains(rmContainer);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {}
        }
      ]
    },
    "03a25d2cc1a2fb124d00edf874d67e329c65a5e6": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-2022 Preempting an Application Master container can be kept as least priority when multiple applications are marked for preemption by ProportionalCapacityPreemptionPolicy (Sunil G via mayank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607227 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/07/14 6:54 PM",
      "commitName": "03a25d2cc1a2fb124d00edf874d67e329c65a5e6",
      "commitAuthor": "Mayank Bansal",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-2022 Preempting an Application Master container can be kept as least priority when multiple applications are marked for preemption by ProportionalCapacityPreemptionPolicy (Sunil G via mayank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607227 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/07/14 6:54 PM",
          "commitName": "03a25d2cc1a2fb124d00edf874d67e329c65a5e6",
          "commitAuthor": "Mayank Bansal",
          "commitDateOld": "11/06/14 11:31 AM",
          "commitNameOld": "c6e29a9f069f71bd77fcff2111def4a60676b4ba",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 20.31,
          "commitsBetweenForRepo": 140,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,30 @@\n-  private Set\u003cRMContainer\u003e preemptFrom(\n-      FiCaSchedulerApp app, Resource clusterResource, Resource rsrcPreempt) {\n-    Set\u003cRMContainer\u003e ret \u003d new HashSet\u003cRMContainer\u003e();\n-    ApplicationAttemptId appId \u003d app.getApplicationAttemptId();\n-\n-    // first drop reserved containers towards rsrcPreempt\n-    List\u003cRMContainer\u003e reservations \u003d\n-        new ArrayList\u003cRMContainer\u003e(app.getReservedContainers());\n-    for (RMContainer c : reservations) {\n-      if (Resources.lessThanOrEqual(rc, clusterResource,\n-          rsrcPreempt, Resources.none())) {\n-        return ret;\n+  private void preemptAMContainers(Resource clusterResource,\n+      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n+      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n+      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n+    for (RMContainer c : skippedAMContainerlist) {\n+      // Got required amount of resources for preemption, can stop now\n+      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n+          Resources.none())) {\n+        break;\n       }\n-      if (!observeOnly) {\n-        dispatcher.handle(new ContainerPreemptEvent(appId, c,\n-            ContainerPreemptEventType.DROP_RESERVATION));\n+      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n+      // container selection iteration for preemption will be stopped. \n+      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n+          maxAMCapacityForThisQueue)) {\n+        break;\n       }\n-      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n+      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n+          .getApplicationAttemptId());\n+      if (null \u003d\u003d contToPrempt) {\n+        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n+        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n+      }\n+      contToPrempt.add(c);\n+      \n+      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n+      Resources.subtractFrom(skippedAMSize, c.getContainer()\n+          .getResource());\n     }\n-\n-    // if more resources are to be freed go through all live containers in\n-    // reverse priority and reverse allocation order and mark them for\n-    // preemption\n-    List\u003cRMContainer\u003e containers \u003d\n-      new ArrayList\u003cRMContainer\u003e(app.getLiveContainers());\n-\n-    sortContainers(containers);\n-\n-    for (RMContainer c : containers) {\n-      if (Resources.lessThanOrEqual(rc, clusterResource,\n-            rsrcPreempt, Resources.none())) {\n-        return ret;\n-      }\n-      ret.add(c);\n-      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n-    }\n-\n-    return ret;\n+    skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n          Resources.none())) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped. \n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n          .getApplicationAttemptId());\n      if (null \u003d\u003d contToPrempt) {\n        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n      }\n      contToPrempt.add(c);\n      \n      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n      Resources.subtractFrom(skippedAMSize, c.getContainer()\n          .getResource());\n    }\n    skippedAMContainerlist.clear();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "preemptFrom",
            "newValue": "preemptAMContainers"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2022 Preempting an Application Master container can be kept as least priority when multiple applications are marked for preemption by ProportionalCapacityPreemptionPolicy (Sunil G via mayank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607227 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/07/14 6:54 PM",
          "commitName": "03a25d2cc1a2fb124d00edf874d67e329c65a5e6",
          "commitAuthor": "Mayank Bansal",
          "commitDateOld": "11/06/14 11:31 AM",
          "commitNameOld": "c6e29a9f069f71bd77fcff2111def4a60676b4ba",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 20.31,
          "commitsBetweenForRepo": 140,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,30 @@\n-  private Set\u003cRMContainer\u003e preemptFrom(\n-      FiCaSchedulerApp app, Resource clusterResource, Resource rsrcPreempt) {\n-    Set\u003cRMContainer\u003e ret \u003d new HashSet\u003cRMContainer\u003e();\n-    ApplicationAttemptId appId \u003d app.getApplicationAttemptId();\n-\n-    // first drop reserved containers towards rsrcPreempt\n-    List\u003cRMContainer\u003e reservations \u003d\n-        new ArrayList\u003cRMContainer\u003e(app.getReservedContainers());\n-    for (RMContainer c : reservations) {\n-      if (Resources.lessThanOrEqual(rc, clusterResource,\n-          rsrcPreempt, Resources.none())) {\n-        return ret;\n+  private void preemptAMContainers(Resource clusterResource,\n+      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n+      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n+      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n+    for (RMContainer c : skippedAMContainerlist) {\n+      // Got required amount of resources for preemption, can stop now\n+      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n+          Resources.none())) {\n+        break;\n       }\n-      if (!observeOnly) {\n-        dispatcher.handle(new ContainerPreemptEvent(appId, c,\n-            ContainerPreemptEventType.DROP_RESERVATION));\n+      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n+      // container selection iteration for preemption will be stopped. \n+      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n+          maxAMCapacityForThisQueue)) {\n+        break;\n       }\n-      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n+      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n+          .getApplicationAttemptId());\n+      if (null \u003d\u003d contToPrempt) {\n+        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n+        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n+      }\n+      contToPrempt.add(c);\n+      \n+      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n+      Resources.subtractFrom(skippedAMSize, c.getContainer()\n+          .getResource());\n     }\n-\n-    // if more resources are to be freed go through all live containers in\n-    // reverse priority and reverse allocation order and mark them for\n-    // preemption\n-    List\u003cRMContainer\u003e containers \u003d\n-      new ArrayList\u003cRMContainer\u003e(app.getLiveContainers());\n-\n-    sortContainers(containers);\n-\n-    for (RMContainer c : containers) {\n-      if (Resources.lessThanOrEqual(rc, clusterResource,\n-            rsrcPreempt, Resources.none())) {\n-        return ret;\n-      }\n-      ret.add(c);\n-      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n-    }\n-\n-    return ret;\n+    skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n          Resources.none())) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped. \n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n          .getApplicationAttemptId());\n      if (null \u003d\u003d contToPrempt) {\n        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n      }\n      contToPrempt.add(c);\n      \n      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n      Resources.subtractFrom(skippedAMSize, c.getContainer()\n          .getResource());\n    }\n    skippedAMContainerlist.clear();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "[app-FiCaSchedulerApp, clusterResource-Resource, rsrcPreempt-Resource]",
            "newValue": "[clusterResource-Resource, preemptMap-Map\u003cApplicationAttemptId,Set\u003cRMContainer\u003e\u003e, skippedAMContainerlist-List\u003cRMContainer\u003e, resToObtain-Resource, skippedAMSize-Resource, maxAMCapacityForThisQueue-Resource]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-2022 Preempting an Application Master container can be kept as least priority when multiple applications are marked for preemption by ProportionalCapacityPreemptionPolicy (Sunil G via mayank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607227 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/07/14 6:54 PM",
          "commitName": "03a25d2cc1a2fb124d00edf874d67e329c65a5e6",
          "commitAuthor": "Mayank Bansal",
          "commitDateOld": "11/06/14 11:31 AM",
          "commitNameOld": "c6e29a9f069f71bd77fcff2111def4a60676b4ba",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 20.31,
          "commitsBetweenForRepo": 140,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,30 @@\n-  private Set\u003cRMContainer\u003e preemptFrom(\n-      FiCaSchedulerApp app, Resource clusterResource, Resource rsrcPreempt) {\n-    Set\u003cRMContainer\u003e ret \u003d new HashSet\u003cRMContainer\u003e();\n-    ApplicationAttemptId appId \u003d app.getApplicationAttemptId();\n-\n-    // first drop reserved containers towards rsrcPreempt\n-    List\u003cRMContainer\u003e reservations \u003d\n-        new ArrayList\u003cRMContainer\u003e(app.getReservedContainers());\n-    for (RMContainer c : reservations) {\n-      if (Resources.lessThanOrEqual(rc, clusterResource,\n-          rsrcPreempt, Resources.none())) {\n-        return ret;\n+  private void preemptAMContainers(Resource clusterResource,\n+      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n+      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n+      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n+    for (RMContainer c : skippedAMContainerlist) {\n+      // Got required amount of resources for preemption, can stop now\n+      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n+          Resources.none())) {\n+        break;\n       }\n-      if (!observeOnly) {\n-        dispatcher.handle(new ContainerPreemptEvent(appId, c,\n-            ContainerPreemptEventType.DROP_RESERVATION));\n+      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n+      // container selection iteration for preemption will be stopped. \n+      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n+          maxAMCapacityForThisQueue)) {\n+        break;\n       }\n-      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n+      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n+          .getApplicationAttemptId());\n+      if (null \u003d\u003d contToPrempt) {\n+        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n+        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n+      }\n+      contToPrempt.add(c);\n+      \n+      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n+      Resources.subtractFrom(skippedAMSize, c.getContainer()\n+          .getResource());\n     }\n-\n-    // if more resources are to be freed go through all live containers in\n-    // reverse priority and reverse allocation order and mark them for\n-    // preemption\n-    List\u003cRMContainer\u003e containers \u003d\n-      new ArrayList\u003cRMContainer\u003e(app.getLiveContainers());\n-\n-    sortContainers(containers);\n-\n-    for (RMContainer c : containers) {\n-      if (Resources.lessThanOrEqual(rc, clusterResource,\n-            rsrcPreempt, Resources.none())) {\n-        return ret;\n-      }\n-      ret.add(c);\n-      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n-    }\n-\n-    return ret;\n+    skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n          Resources.none())) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped. \n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n          .getApplicationAttemptId());\n      if (null \u003d\u003d contToPrempt) {\n        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n      }\n      contToPrempt.add(c);\n      \n      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n      Resources.subtractFrom(skippedAMSize, c.getContainer()\n          .getResource());\n    }\n    skippedAMContainerlist.clear();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "Set\u003cRMContainer\u003e",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2022 Preempting an Application Master container can be kept as least priority when multiple applications are marked for preemption by ProportionalCapacityPreemptionPolicy (Sunil G via mayank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607227 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/07/14 6:54 PM",
          "commitName": "03a25d2cc1a2fb124d00edf874d67e329c65a5e6",
          "commitAuthor": "Mayank Bansal",
          "commitDateOld": "11/06/14 11:31 AM",
          "commitNameOld": "c6e29a9f069f71bd77fcff2111def4a60676b4ba",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 20.31,
          "commitsBetweenForRepo": 140,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,30 @@\n-  private Set\u003cRMContainer\u003e preemptFrom(\n-      FiCaSchedulerApp app, Resource clusterResource, Resource rsrcPreempt) {\n-    Set\u003cRMContainer\u003e ret \u003d new HashSet\u003cRMContainer\u003e();\n-    ApplicationAttemptId appId \u003d app.getApplicationAttemptId();\n-\n-    // first drop reserved containers towards rsrcPreempt\n-    List\u003cRMContainer\u003e reservations \u003d\n-        new ArrayList\u003cRMContainer\u003e(app.getReservedContainers());\n-    for (RMContainer c : reservations) {\n-      if (Resources.lessThanOrEqual(rc, clusterResource,\n-          rsrcPreempt, Resources.none())) {\n-        return ret;\n+  private void preemptAMContainers(Resource clusterResource,\n+      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n+      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n+      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n+    for (RMContainer c : skippedAMContainerlist) {\n+      // Got required amount of resources for preemption, can stop now\n+      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n+          Resources.none())) {\n+        break;\n       }\n-      if (!observeOnly) {\n-        dispatcher.handle(new ContainerPreemptEvent(appId, c,\n-            ContainerPreemptEventType.DROP_RESERVATION));\n+      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n+      // container selection iteration for preemption will be stopped. \n+      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n+          maxAMCapacityForThisQueue)) {\n+        break;\n       }\n-      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n+      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n+          .getApplicationAttemptId());\n+      if (null \u003d\u003d contToPrempt) {\n+        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n+        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n+      }\n+      contToPrempt.add(c);\n+      \n+      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n+      Resources.subtractFrom(skippedAMSize, c.getContainer()\n+          .getResource());\n     }\n-\n-    // if more resources are to be freed go through all live containers in\n-    // reverse priority and reverse allocation order and mark them for\n-    // preemption\n-    List\u003cRMContainer\u003e containers \u003d\n-      new ArrayList\u003cRMContainer\u003e(app.getLiveContainers());\n-\n-    sortContainers(containers);\n-\n-    for (RMContainer c : containers) {\n-      if (Resources.lessThanOrEqual(rc, clusterResource,\n-            rsrcPreempt, Resources.none())) {\n-        return ret;\n-      }\n-      ret.add(c);\n-      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n-    }\n-\n-    return ret;\n+    skippedAMContainerlist.clear();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptAMContainers(Resource clusterResource,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e preemptMap,\n      List\u003cRMContainer\u003e skippedAMContainerlist, Resource resToObtain,\n      Resource skippedAMSize, Resource maxAMCapacityForThisQueue) {\n    for (RMContainer c : skippedAMContainerlist) {\n      // Got required amount of resources for preemption, can stop now\n      if (Resources.lessThanOrEqual(rc, clusterResource, resToObtain,\n          Resources.none())) {\n        break;\n      }\n      // Once skippedAMSize reaches down to maxAMCapacityForThisQueue,\n      // container selection iteration for preemption will be stopped. \n      if (Resources.lessThanOrEqual(rc, clusterResource, skippedAMSize,\n          maxAMCapacityForThisQueue)) {\n        break;\n      }\n      Set\u003cRMContainer\u003e contToPrempt \u003d preemptMap.get(c\n          .getApplicationAttemptId());\n      if (null \u003d\u003d contToPrempt) {\n        contToPrempt \u003d new HashSet\u003cRMContainer\u003e();\n        preemptMap.put(c.getApplicationAttemptId(), contToPrempt);\n      }\n      contToPrempt.add(c);\n      \n      Resources.subtractFrom(resToObtain, c.getContainer().getResource());\n      Resources.subtractFrom(skippedAMSize, c.getContainer()\n          .getResource());\n    }\n    skippedAMContainerlist.clear();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {}
        }
      ]
    },
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": {
      "type": "Yintroduced",
      "commitMessage": "YARN-569. Add support for requesting and enforcing preemption requests via\na capacity monitor. Contributed by Carlo Curino, Chris Douglas\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502083 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/13 6:20 PM",
      "commitName": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,39 @@\n+  private Set\u003cRMContainer\u003e preemptFrom(\n+      FiCaSchedulerApp app, Resource clusterResource, Resource rsrcPreempt) {\n+    Set\u003cRMContainer\u003e ret \u003d new HashSet\u003cRMContainer\u003e();\n+    ApplicationAttemptId appId \u003d app.getApplicationAttemptId();\n+\n+    // first drop reserved containers towards rsrcPreempt\n+    List\u003cRMContainer\u003e reservations \u003d\n+        new ArrayList\u003cRMContainer\u003e(app.getReservedContainers());\n+    for (RMContainer c : reservations) {\n+      if (Resources.lessThanOrEqual(rc, clusterResource,\n+          rsrcPreempt, Resources.none())) {\n+        return ret;\n+      }\n+      if (!observeOnly) {\n+        dispatcher.handle(new ContainerPreemptEvent(appId, c,\n+            ContainerPreemptEventType.DROP_RESERVATION));\n+      }\n+      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n+    }\n+\n+    // if more resources are to be freed go through all live containers in\n+    // reverse priority and reverse allocation order and mark them for\n+    // preemption\n+    List\u003cRMContainer\u003e containers \u003d\n+      new ArrayList\u003cRMContainer\u003e(app.getLiveContainers());\n+\n+    sortContainers(containers);\n+\n+    for (RMContainer c : containers) {\n+      if (Resources.lessThanOrEqual(rc, clusterResource,\n+            rsrcPreempt, Resources.none())) {\n+        return ret;\n+      }\n+      ret.add(c);\n+      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n+    }\n+\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Set\u003cRMContainer\u003e preemptFrom(\n      FiCaSchedulerApp app, Resource clusterResource, Resource rsrcPreempt) {\n    Set\u003cRMContainer\u003e ret \u003d new HashSet\u003cRMContainer\u003e();\n    ApplicationAttemptId appId \u003d app.getApplicationAttemptId();\n\n    // first drop reserved containers towards rsrcPreempt\n    List\u003cRMContainer\u003e reservations \u003d\n        new ArrayList\u003cRMContainer\u003e(app.getReservedContainers());\n    for (RMContainer c : reservations) {\n      if (Resources.lessThanOrEqual(rc, clusterResource,\n          rsrcPreempt, Resources.none())) {\n        return ret;\n      }\n      if (!observeOnly) {\n        dispatcher.handle(new ContainerPreemptEvent(appId, c,\n            ContainerPreemptEventType.DROP_RESERVATION));\n      }\n      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n    }\n\n    // if more resources are to be freed go through all live containers in\n    // reverse priority and reverse allocation order and mark them for\n    // preemption\n    List\u003cRMContainer\u003e containers \u003d\n      new ArrayList\u003cRMContainer\u003e(app.getLiveContainers());\n\n    sortContainers(containers);\n\n    for (RMContainer c : containers) {\n      if (Resources.lessThanOrEqual(rc, clusterResource,\n            rsrcPreempt, Resources.none())) {\n        return ret;\n      }\n      ret.add(c);\n      Resources.subtractFrom(rsrcPreempt, c.getContainer().getResource());\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java"
    }
  }
}