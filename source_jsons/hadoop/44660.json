{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationCLI.java",
  "functionName": "printContainerReport",
  "functionId": "printContainerReport___containerId-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
  "functionStartLine": 399,
  "functionEndLine": 455,
  "numCommitsSeen": 72,
  "timeTaken": 4657,
  "changeHistory": [
    "f82922dcfae0b7e3e68ce970c441d8b7edc59acf",
    "ff06bd1be83a2a6d2ee39cb002e91499720a7243",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "85f6d67fa78511f255fcfa810afc9a156a7b483b",
    "d468c9aaf15e977f12e6214b47996412c907e069",
    "856b46cf47d3d17d3db2ca23106cb472aa8dd488",
    "ca3381de61ff53604d9389694049a1a4dedc7571",
    "fae3e8614f4f9a42904e39c51ca68b0d1e67469f",
    "e285b98f0fe8637b574c52498035f7f11fb4e962",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a"
  ],
  "changeHistoryShort": {
    "f82922dcfae0b7e3e68ce970c441d8b7edc59acf": "Ybodychange",
    "ff06bd1be83a2a6d2ee39cb002e91499720a7243": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "85f6d67fa78511f255fcfa810afc9a156a7b483b": "Ybodychange",
    "d468c9aaf15e977f12e6214b47996412c907e069": "Ybodychange",
    "856b46cf47d3d17d3db2ca23106cb472aa8dd488": "Ybodychange",
    "ca3381de61ff53604d9389694049a1a4dedc7571": "Ybodychange",
    "fae3e8614f4f9a42904e39c51ca68b0d1e67469f": "Ymultichange(Yreturntypechange,Ybodychange)",
    "e285b98f0fe8637b574c52498035f7f11fb4e962": "Ybodychange",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f82922dcfae0b7e3e68ce970c441d8b7edc59acf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5168. Added exposed port information for Docker container.\n           Contributed by Xun Liu\n",
      "commitDate": "21/12/18 4:44 PM",
      "commitName": "f82922dcfae0b7e3e68ce970c441d8b7edc59acf",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "14/12/18 2:08 PM",
      "commitNameOld": "ca90b2480ecb9a627914e7a463b6293024ad6e4d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 7.11,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,57 @@\n   private int printContainerReport(String containerId) throws YarnException,\n       IOException {\n     ContainerReport containerReport \u003d null;\n     try {\n       containerReport \u003d client.getContainerReport(ContainerId.fromString(containerId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application for Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     } catch (ApplicationAttemptNotFoundException e) {\n       sysout.println(\"Application Attempt for Container with id \u0027\"\n           + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     } catch (ContainerNotFoundException e) {\n       sysout.println(\"Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter containerReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (containerReport !\u003d null) {\n       containerReportStr.println(\"Container Report : \");\n       containerReportStr.print(\"\\tContainer-Id : \");\n       containerReportStr.println(containerReport.getContainerId());\n       containerReportStr.print(\"\\tStart-Time : \");\n       containerReportStr.println(containerReport.getCreationTime());\n       containerReportStr.print(\"\\tFinish-Time : \");\n       containerReportStr.println(containerReport.getFinishTime());\n       containerReportStr.print(\"\\tState : \");\n       containerReportStr.println(containerReport.getContainerState());\n       containerReportStr.print(\"\\tExecution-Type : \");\n       containerReportStr.println(containerReport.getExecutionType());\n       containerReportStr.print(\"\\tLOG-URL : \");\n       containerReportStr.println(containerReport.getLogUrl());\n       containerReportStr.print(\"\\tHost : \");\n       containerReportStr.println(containerReport.getAssignedNode());\n       containerReportStr.print(\"\\tNodeHttpAddress : \");\n       containerReportStr.println(containerReport.getNodeHttpAddress() \u003d\u003d null\n           ? \"N/A\" : containerReport.getNodeHttpAddress());\n+      containerReportStr.print(\"\\tExposedPorts : \");\n+      containerReportStr.println(containerReport.getExposedPorts() \u003d\u003d null\n+          ? \"N/A\" : containerReport.getExposedPorts());\n       containerReportStr.print(\"\\tDiagnostics : \");\n       containerReportStr.print(containerReport.getDiagnosticsInfo());\n     } else {\n       containerReportStr.print(\"Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n       containerReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     containerReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printContainerReport(String containerId) throws YarnException,\n      IOException {\n    ContainerReport containerReport \u003d null;\n    try {\n      containerReport \u003d client.getContainerReport(ContainerId.fromString(containerId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application for Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ApplicationAttemptNotFoundException e) {\n      sysout.println(\"Application Attempt for Container with id \u0027\"\n          + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ContainerNotFoundException e) {\n      sysout.println(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter containerReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (containerReport !\u003d null) {\n      containerReportStr.println(\"Container Report : \");\n      containerReportStr.print(\"\\tContainer-Id : \");\n      containerReportStr.println(containerReport.getContainerId());\n      containerReportStr.print(\"\\tStart-Time : \");\n      containerReportStr.println(containerReport.getCreationTime());\n      containerReportStr.print(\"\\tFinish-Time : \");\n      containerReportStr.println(containerReport.getFinishTime());\n      containerReportStr.print(\"\\tState : \");\n      containerReportStr.println(containerReport.getContainerState());\n      containerReportStr.print(\"\\tExecution-Type : \");\n      containerReportStr.println(containerReport.getExecutionType());\n      containerReportStr.print(\"\\tLOG-URL : \");\n      containerReportStr.println(containerReport.getLogUrl());\n      containerReportStr.print(\"\\tHost : \");\n      containerReportStr.println(containerReport.getAssignedNode());\n      containerReportStr.print(\"\\tNodeHttpAddress : \");\n      containerReportStr.println(containerReport.getNodeHttpAddress() \u003d\u003d null\n          ? \"N/A\" : containerReport.getNodeHttpAddress());\n      containerReportStr.print(\"\\tExposedPorts : \");\n      containerReportStr.println(containerReport.getExposedPorts() \u003d\u003d null\n          ? \"N/A\" : containerReport.getExposedPorts());\n      containerReportStr.print(\"\\tDiagnostics : \");\n      containerReportStr.print(containerReport.getDiagnosticsInfo());\n    } else {\n      containerReportStr.print(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n      containerReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    containerReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "ff06bd1be83a2a6d2ee39cb002e91499720a7243": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8601. Print ExecutionType in Container report CLI. Contributed by Bilwa S T.\n",
      "commitDate": "08/08/18 10:12 AM",
      "commitName": "ff06bd1be83a2a6d2ee39cb002e91499720a7243",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "16/07/18 2:41 PM",
      "commitNameOld": "121865c3f96166e2190ed54b433ebcf8d053b91c",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 22.81,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,54 @@\n   private int printContainerReport(String containerId) throws YarnException,\n       IOException {\n     ContainerReport containerReport \u003d null;\n     try {\n       containerReport \u003d client.getContainerReport(ContainerId.fromString(containerId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application for Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     } catch (ApplicationAttemptNotFoundException e) {\n       sysout.println(\"Application Attempt for Container with id \u0027\"\n           + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     } catch (ContainerNotFoundException e) {\n       sysout.println(\"Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter containerReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (containerReport !\u003d null) {\n       containerReportStr.println(\"Container Report : \");\n       containerReportStr.print(\"\\tContainer-Id : \");\n       containerReportStr.println(containerReport.getContainerId());\n       containerReportStr.print(\"\\tStart-Time : \");\n       containerReportStr.println(containerReport.getCreationTime());\n       containerReportStr.print(\"\\tFinish-Time : \");\n       containerReportStr.println(containerReport.getFinishTime());\n       containerReportStr.print(\"\\tState : \");\n       containerReportStr.println(containerReport.getContainerState());\n+      containerReportStr.print(\"\\tExecution-Type : \");\n+      containerReportStr.println(containerReport.getExecutionType());\n       containerReportStr.print(\"\\tLOG-URL : \");\n       containerReportStr.println(containerReport.getLogUrl());\n       containerReportStr.print(\"\\tHost : \");\n       containerReportStr.println(containerReport.getAssignedNode());\n       containerReportStr.print(\"\\tNodeHttpAddress : \");\n       containerReportStr.println(containerReport.getNodeHttpAddress() \u003d\u003d null\n           ? \"N/A\" : containerReport.getNodeHttpAddress());\n       containerReportStr.print(\"\\tDiagnostics : \");\n       containerReportStr.print(containerReport.getDiagnosticsInfo());\n     } else {\n       containerReportStr.print(\"Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n       containerReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     containerReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printContainerReport(String containerId) throws YarnException,\n      IOException {\n    ContainerReport containerReport \u003d null;\n    try {\n      containerReport \u003d client.getContainerReport(ContainerId.fromString(containerId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application for Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ApplicationAttemptNotFoundException e) {\n      sysout.println(\"Application Attempt for Container with id \u0027\"\n          + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ContainerNotFoundException e) {\n      sysout.println(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter containerReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (containerReport !\u003d null) {\n      containerReportStr.println(\"Container Report : \");\n      containerReportStr.print(\"\\tContainer-Id : \");\n      containerReportStr.println(containerReport.getContainerId());\n      containerReportStr.print(\"\\tStart-Time : \");\n      containerReportStr.println(containerReport.getCreationTime());\n      containerReportStr.print(\"\\tFinish-Time : \");\n      containerReportStr.println(containerReport.getFinishTime());\n      containerReportStr.print(\"\\tState : \");\n      containerReportStr.println(containerReport.getContainerState());\n      containerReportStr.print(\"\\tExecution-Type : \");\n      containerReportStr.println(containerReport.getExecutionType());\n      containerReportStr.print(\"\\tLOG-URL : \");\n      containerReportStr.println(containerReport.getLogUrl());\n      containerReportStr.print(\"\\tHost : \");\n      containerReportStr.println(containerReport.getAssignedNode());\n      containerReportStr.print(\"\\tNodeHttpAddress : \");\n      containerReportStr.println(containerReport.getNodeHttpAddress() \u003d\u003d null\n          ? \"N/A\" : containerReport.getNodeHttpAddress());\n      containerReportStr.print(\"\\tDiagnostics : \");\n      containerReportStr.print(containerReport.getDiagnosticsInfo());\n    } else {\n      containerReportStr.print(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n      containerReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    containerReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "06/06/16 2:30 PM",
      "commitNameOld": "4a1cedc010d3fa1d8ef3f2773ca12acadfee5ba5",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 8.02,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,52 @@\n   private int printContainerReport(String containerId) throws YarnException,\n       IOException {\n     ContainerReport containerReport \u003d null;\n     try {\n-      containerReport \u003d client.getContainerReport((ConverterUtils\n-          .toContainerId(containerId)));\n+      containerReport \u003d client.getContainerReport(ContainerId.fromString(containerId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application for Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     } catch (ApplicationAttemptNotFoundException e) {\n       sysout.println(\"Application Attempt for Container with id \u0027\"\n           + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     } catch (ContainerNotFoundException e) {\n       sysout.println(\"Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter containerReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (containerReport !\u003d null) {\n       containerReportStr.println(\"Container Report : \");\n       containerReportStr.print(\"\\tContainer-Id : \");\n       containerReportStr.println(containerReport.getContainerId());\n       containerReportStr.print(\"\\tStart-Time : \");\n       containerReportStr.println(containerReport.getCreationTime());\n       containerReportStr.print(\"\\tFinish-Time : \");\n       containerReportStr.println(containerReport.getFinishTime());\n       containerReportStr.print(\"\\tState : \");\n       containerReportStr.println(containerReport.getContainerState());\n       containerReportStr.print(\"\\tLOG-URL : \");\n       containerReportStr.println(containerReport.getLogUrl());\n       containerReportStr.print(\"\\tHost : \");\n       containerReportStr.println(containerReport.getAssignedNode());\n       containerReportStr.print(\"\\tNodeHttpAddress : \");\n       containerReportStr.println(containerReport.getNodeHttpAddress() \u003d\u003d null\n           ? \"N/A\" : containerReport.getNodeHttpAddress());\n       containerReportStr.print(\"\\tDiagnostics : \");\n       containerReportStr.print(containerReport.getDiagnosticsInfo());\n     } else {\n       containerReportStr.print(\"Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n       containerReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     containerReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printContainerReport(String containerId) throws YarnException,\n      IOException {\n    ContainerReport containerReport \u003d null;\n    try {\n      containerReport \u003d client.getContainerReport(ContainerId.fromString(containerId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application for Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ApplicationAttemptNotFoundException e) {\n      sysout.println(\"Application Attempt for Container with id \u0027\"\n          + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ContainerNotFoundException e) {\n      sysout.println(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter containerReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (containerReport !\u003d null) {\n      containerReportStr.println(\"Container Report : \");\n      containerReportStr.print(\"\\tContainer-Id : \");\n      containerReportStr.println(containerReport.getContainerId());\n      containerReportStr.print(\"\\tStart-Time : \");\n      containerReportStr.println(containerReport.getCreationTime());\n      containerReportStr.print(\"\\tFinish-Time : \");\n      containerReportStr.println(containerReport.getFinishTime());\n      containerReportStr.print(\"\\tState : \");\n      containerReportStr.println(containerReport.getContainerState());\n      containerReportStr.print(\"\\tLOG-URL : \");\n      containerReportStr.println(containerReport.getLogUrl());\n      containerReportStr.print(\"\\tHost : \");\n      containerReportStr.println(containerReport.getAssignedNode());\n      containerReportStr.print(\"\\tNodeHttpAddress : \");\n      containerReportStr.println(containerReport.getNodeHttpAddress() \u003d\u003d null\n          ? \"N/A\" : containerReport.getNodeHttpAddress());\n      containerReportStr.print(\"\\tDiagnostics : \");\n      containerReportStr.print(containerReport.getDiagnosticsInfo());\n    } else {\n      containerReportStr.print(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n      containerReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    containerReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "85f6d67fa78511f255fcfa810afc9a156a7b483b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1884. Added nodeHttpAddress into ContainerReport and fixed the link to NM web page. Contributed by Xuan Gong.\n",
      "commitDate": "11/03/15 7:35 PM",
      "commitName": "85f6d67fa78511f255fcfa810afc9a156a7b483b",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "02/03/15 9:17 PM",
      "commitNameOld": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 8.89,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,53 @@\n   private int printContainerReport(String containerId) throws YarnException,\n       IOException {\n     ContainerReport containerReport \u003d null;\n     try {\n       containerReport \u003d client.getContainerReport((ConverterUtils\n           .toContainerId(containerId)));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application for Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     } catch (ApplicationAttemptNotFoundException e) {\n       sysout.println(\"Application Attempt for Container with id \u0027\"\n           + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     } catch (ContainerNotFoundException e) {\n       sysout.println(\"Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter containerReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (containerReport !\u003d null) {\n       containerReportStr.println(\"Container Report : \");\n       containerReportStr.print(\"\\tContainer-Id : \");\n       containerReportStr.println(containerReport.getContainerId());\n       containerReportStr.print(\"\\tStart-Time : \");\n       containerReportStr.println(containerReport.getCreationTime());\n       containerReportStr.print(\"\\tFinish-Time : \");\n       containerReportStr.println(containerReport.getFinishTime());\n       containerReportStr.print(\"\\tState : \");\n       containerReportStr.println(containerReport.getContainerState());\n       containerReportStr.print(\"\\tLOG-URL : \");\n       containerReportStr.println(containerReport.getLogUrl());\n       containerReportStr.print(\"\\tHost : \");\n       containerReportStr.println(containerReport.getAssignedNode());\n+      containerReportStr.print(\"\\tNodeHttpAddress : \");\n+      containerReportStr.println(containerReport.getNodeHttpAddress() \u003d\u003d null\n+          ? \"N/A\" : containerReport.getNodeHttpAddress());\n       containerReportStr.print(\"\\tDiagnostics : \");\n       containerReportStr.print(containerReport.getDiagnosticsInfo());\n     } else {\n       containerReportStr.print(\"Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n       containerReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     containerReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printContainerReport(String containerId) throws YarnException,\n      IOException {\n    ContainerReport containerReport \u003d null;\n    try {\n      containerReport \u003d client.getContainerReport((ConverterUtils\n          .toContainerId(containerId)));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application for Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ApplicationAttemptNotFoundException e) {\n      sysout.println(\"Application Attempt for Container with id \u0027\"\n          + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ContainerNotFoundException e) {\n      sysout.println(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter containerReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (containerReport !\u003d null) {\n      containerReportStr.println(\"Container Report : \");\n      containerReportStr.print(\"\\tContainer-Id : \");\n      containerReportStr.println(containerReport.getContainerId());\n      containerReportStr.print(\"\\tStart-Time : \");\n      containerReportStr.println(containerReport.getCreationTime());\n      containerReportStr.print(\"\\tFinish-Time : \");\n      containerReportStr.println(containerReport.getFinishTime());\n      containerReportStr.print(\"\\tState : \");\n      containerReportStr.println(containerReport.getContainerState());\n      containerReportStr.print(\"\\tLOG-URL : \");\n      containerReportStr.println(containerReport.getLogUrl());\n      containerReportStr.print(\"\\tHost : \");\n      containerReportStr.println(containerReport.getAssignedNode());\n      containerReportStr.print(\"\\tNodeHttpAddress : \");\n      containerReportStr.println(containerReport.getNodeHttpAddress() \u003d\u003d null\n          ? \"N/A\" : containerReport.getNodeHttpAddress());\n      containerReportStr.print(\"\\tDiagnostics : \");\n      containerReportStr.print(containerReport.getDiagnosticsInfo());\n    } else {\n      containerReportStr.print(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n      containerReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    containerReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "d468c9aaf15e977f12e6214b47996412c907e069": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2940. Fix new findbugs warnings in rest of the hadoop-yarn components. (Contributed by Li Lu)\n",
      "commitDate": "23/12/14 8:04 PM",
      "commitName": "d468c9aaf15e977f12e6214b47996412c907e069",
      "commitAuthor": "Junping Du",
      "commitDateOld": "23/12/14 8:02 PM",
      "commitNameOld": "856b46cf47d3d17d3db2ca23106cb472aa8dd488",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n   private int printContainerReport(String containerId) throws YarnException,\n       IOException {\n     ContainerReport containerReport \u003d null;\n     try {\n       containerReport \u003d client.getContainerReport((ConverterUtils\n           .toContainerId(containerId)));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application for Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     } catch (ApplicationAttemptNotFoundException e) {\n       sysout.println(\"Application Attempt for Container with id \u0027\"\n           + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     } catch (ContainerNotFoundException e) {\n       sysout.println(\"Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n-    PrintWriter containerReportStr \u003d new PrintWriter(baos);\n+    PrintWriter containerReportStr \u003d new PrintWriter(\n+        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (containerReport !\u003d null) {\n       containerReportStr.println(\"Container Report : \");\n       containerReportStr.print(\"\\tContainer-Id : \");\n       containerReportStr.println(containerReport.getContainerId());\n       containerReportStr.print(\"\\tStart-Time : \");\n       containerReportStr.println(containerReport.getCreationTime());\n       containerReportStr.print(\"\\tFinish-Time : \");\n       containerReportStr.println(containerReport.getFinishTime());\n       containerReportStr.print(\"\\tState : \");\n       containerReportStr.println(containerReport.getContainerState());\n       containerReportStr.print(\"\\tLOG-URL : \");\n       containerReportStr.println(containerReport.getLogUrl());\n       containerReportStr.print(\"\\tHost : \");\n       containerReportStr.println(containerReport.getAssignedNode());\n       containerReportStr.print(\"\\tDiagnostics : \");\n       containerReportStr.print(containerReport.getDiagnosticsInfo());\n     } else {\n       containerReportStr.print(\"Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n       containerReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     containerReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printContainerReport(String containerId) throws YarnException,\n      IOException {\n    ContainerReport containerReport \u003d null;\n    try {\n      containerReport \u003d client.getContainerReport((ConverterUtils\n          .toContainerId(containerId)));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application for Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ApplicationAttemptNotFoundException e) {\n      sysout.println(\"Application Attempt for Container with id \u0027\"\n          + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ContainerNotFoundException e) {\n      sysout.println(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter containerReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (containerReport !\u003d null) {\n      containerReportStr.println(\"Container Report : \");\n      containerReportStr.print(\"\\tContainer-Id : \");\n      containerReportStr.println(containerReport.getContainerId());\n      containerReportStr.print(\"\\tStart-Time : \");\n      containerReportStr.println(containerReport.getCreationTime());\n      containerReportStr.print(\"\\tFinish-Time : \");\n      containerReportStr.println(containerReport.getFinishTime());\n      containerReportStr.print(\"\\tState : \");\n      containerReportStr.println(containerReport.getContainerState());\n      containerReportStr.print(\"\\tLOG-URL : \");\n      containerReportStr.println(containerReport.getLogUrl());\n      containerReportStr.print(\"\\tHost : \");\n      containerReportStr.println(containerReport.getAssignedNode());\n      containerReportStr.print(\"\\tDiagnostics : \");\n      containerReportStr.print(containerReport.getDiagnosticsInfo());\n    } else {\n      containerReportStr.print(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n      containerReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    containerReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "856b46cf47d3d17d3db2ca23106cb472aa8dd488": {
      "type": "Ybodychange",
      "commitMessage": "Revert ca3381de61ff53604d9389694049a1a4dedc7571 and 20674255ad891bb693ecb2faa5bdb37477073dac as missing JIRA number in commit message\n",
      "commitDate": "23/12/14 8:02 PM",
      "commitName": "856b46cf47d3d17d3db2ca23106cb472aa8dd488",
      "commitAuthor": "Junping Du",
      "commitDateOld": "23/12/14 6:57 PM",
      "commitNameOld": "ca3381de61ff53604d9389694049a1a4dedc7571",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,49 @@\n   private int printContainerReport(String containerId) throws YarnException,\n       IOException {\n     ContainerReport containerReport \u003d null;\n     try {\n       containerReport \u003d client.getContainerReport((ConverterUtils\n           .toContainerId(containerId)));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application for Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     } catch (ApplicationAttemptNotFoundException e) {\n       sysout.println(\"Application Attempt for Container with id \u0027\"\n           + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     } catch (ContainerNotFoundException e) {\n       sysout.println(\"Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n-    PrintWriter containerReportStr \u003d new PrintWriter(\n-        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n+    PrintWriter containerReportStr \u003d new PrintWriter(baos);\n     if (containerReport !\u003d null) {\n       containerReportStr.println(\"Container Report : \");\n       containerReportStr.print(\"\\tContainer-Id : \");\n       containerReportStr.println(containerReport.getContainerId());\n       containerReportStr.print(\"\\tStart-Time : \");\n       containerReportStr.println(containerReport.getCreationTime());\n       containerReportStr.print(\"\\tFinish-Time : \");\n       containerReportStr.println(containerReport.getFinishTime());\n       containerReportStr.print(\"\\tState : \");\n       containerReportStr.println(containerReport.getContainerState());\n       containerReportStr.print(\"\\tLOG-URL : \");\n       containerReportStr.println(containerReport.getLogUrl());\n       containerReportStr.print(\"\\tHost : \");\n       containerReportStr.println(containerReport.getAssignedNode());\n       containerReportStr.print(\"\\tDiagnostics : \");\n       containerReportStr.print(containerReport.getDiagnosticsInfo());\n     } else {\n       containerReportStr.print(\"Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n       containerReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     containerReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printContainerReport(String containerId) throws YarnException,\n      IOException {\n    ContainerReport containerReport \u003d null;\n    try {\n      containerReport \u003d client.getContainerReport((ConverterUtils\n          .toContainerId(containerId)));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application for Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ApplicationAttemptNotFoundException e) {\n      sysout.println(\"Application Attempt for Container with id \u0027\"\n          + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ContainerNotFoundException e) {\n      sysout.println(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter containerReportStr \u003d new PrintWriter(baos);\n    if (containerReport !\u003d null) {\n      containerReportStr.println(\"Container Report : \");\n      containerReportStr.print(\"\\tContainer-Id : \");\n      containerReportStr.println(containerReport.getContainerId());\n      containerReportStr.print(\"\\tStart-Time : \");\n      containerReportStr.println(containerReport.getCreationTime());\n      containerReportStr.print(\"\\tFinish-Time : \");\n      containerReportStr.println(containerReport.getFinishTime());\n      containerReportStr.print(\"\\tState : \");\n      containerReportStr.println(containerReport.getContainerState());\n      containerReportStr.print(\"\\tLOG-URL : \");\n      containerReportStr.println(containerReport.getLogUrl());\n      containerReportStr.print(\"\\tHost : \");\n      containerReportStr.println(containerReport.getAssignedNode());\n      containerReportStr.print(\"\\tDiagnostics : \");\n      containerReportStr.print(containerReport.getDiagnosticsInfo());\n    } else {\n      containerReportStr.print(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n      containerReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    containerReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "ca3381de61ff53604d9389694049a1a4dedc7571": {
      "type": "Ybodychange",
      "commitMessage": "Fix new findbugs warnings in rest of the hadoop-yarn components. (Contributed by Li Lu)\n",
      "commitDate": "23/12/14 6:57 PM",
      "commitName": "ca3381de61ff53604d9389694049a1a4dedc7571",
      "commitAuthor": "Junping Du",
      "commitDateOld": "15/12/14 1:13 AM",
      "commitNameOld": "fae3e8614f4f9a42904e39c51ca68b0d1e67469f",
      "commitAuthorOld": "Devaraj K",
      "daysBetweenCommits": 8.74,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n   private int printContainerReport(String containerId) throws YarnException,\n       IOException {\n     ContainerReport containerReport \u003d null;\n     try {\n       containerReport \u003d client.getContainerReport((ConverterUtils\n           .toContainerId(containerId)));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application for Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     } catch (ApplicationAttemptNotFoundException e) {\n       sysout.println(\"Application Attempt for Container with id \u0027\"\n           + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     } catch (ContainerNotFoundException e) {\n       sysout.println(\"Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n-    PrintWriter containerReportStr \u003d new PrintWriter(baos);\n+    PrintWriter containerReportStr \u003d new PrintWriter(\n+        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (containerReport !\u003d null) {\n       containerReportStr.println(\"Container Report : \");\n       containerReportStr.print(\"\\tContainer-Id : \");\n       containerReportStr.println(containerReport.getContainerId());\n       containerReportStr.print(\"\\tStart-Time : \");\n       containerReportStr.println(containerReport.getCreationTime());\n       containerReportStr.print(\"\\tFinish-Time : \");\n       containerReportStr.println(containerReport.getFinishTime());\n       containerReportStr.print(\"\\tState : \");\n       containerReportStr.println(containerReport.getContainerState());\n       containerReportStr.print(\"\\tLOG-URL : \");\n       containerReportStr.println(containerReport.getLogUrl());\n       containerReportStr.print(\"\\tHost : \");\n       containerReportStr.println(containerReport.getAssignedNode());\n       containerReportStr.print(\"\\tDiagnostics : \");\n       containerReportStr.print(containerReport.getDiagnosticsInfo());\n     } else {\n       containerReportStr.print(\"Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n       containerReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     containerReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printContainerReport(String containerId) throws YarnException,\n      IOException {\n    ContainerReport containerReport \u003d null;\n    try {\n      containerReport \u003d client.getContainerReport((ConverterUtils\n          .toContainerId(containerId)));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application for Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ApplicationAttemptNotFoundException e) {\n      sysout.println(\"Application Attempt for Container with id \u0027\"\n          + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ContainerNotFoundException e) {\n      sysout.println(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter containerReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (containerReport !\u003d null) {\n      containerReportStr.println(\"Container Report : \");\n      containerReportStr.print(\"\\tContainer-Id : \");\n      containerReportStr.println(containerReport.getContainerId());\n      containerReportStr.print(\"\\tStart-Time : \");\n      containerReportStr.println(containerReport.getCreationTime());\n      containerReportStr.print(\"\\tFinish-Time : \");\n      containerReportStr.println(containerReport.getFinishTime());\n      containerReportStr.print(\"\\tState : \");\n      containerReportStr.println(containerReport.getContainerState());\n      containerReportStr.print(\"\\tLOG-URL : \");\n      containerReportStr.println(containerReport.getLogUrl());\n      containerReportStr.print(\"\\tHost : \");\n      containerReportStr.println(containerReport.getAssignedNode());\n      containerReportStr.print(\"\\tDiagnostics : \");\n      containerReportStr.print(containerReport.getDiagnosticsInfo());\n    } else {\n      containerReportStr.print(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n      containerReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    containerReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "fae3e8614f4f9a42904e39c51ca68b0d1e67469f": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-2356. yarn status command for non-existent application/application\nattempt/container is too verbose. Contributed by Sunil G.\n",
      "commitDate": "15/12/14 1:13 AM",
      "commitName": "fae3e8614f4f9a42904e39c51ca68b0d1e67469f",
      "commitAuthor": "Devaraj K",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-2356. yarn status command for non-existent application/application\nattempt/container is too verbose. Contributed by Sunil G.\n",
          "commitDate": "15/12/14 1:13 AM",
          "commitName": "fae3e8614f4f9a42904e39c51ca68b0d1e67469f",
          "commitAuthor": "Devaraj K",
          "commitDateOld": "04/12/14 12:53 PM",
          "commitNameOld": "258623ff8bb1a1057ae3501d4f20982d5a59ea34",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 10.51,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,49 @@\n-  private void printContainerReport(String containerId) throws YarnException,\n+  private int printContainerReport(String containerId) throws YarnException,\n       IOException {\n-    ContainerReport containerReport \u003d client.getContainerReport((ConverterUtils\n-        .toContainerId(containerId)));\n+    ContainerReport containerReport \u003d null;\n+    try {\n+      containerReport \u003d client.getContainerReport((ConverterUtils\n+          .toContainerId(containerId)));\n+    } catch (ApplicationNotFoundException e) {\n+      sysout.println(\"Application for Container with id \u0027\" + containerId\n+          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n+      return -1;\n+    } catch (ApplicationAttemptNotFoundException e) {\n+      sysout.println(\"Application Attempt for Container with id \u0027\"\n+          + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n+      return -1;\n+    } catch (ContainerNotFoundException e) {\n+      sysout.println(\"Container with id \u0027\" + containerId\n+          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n+      return -1;\n+    }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter containerReportStr \u003d new PrintWriter(baos);\n     if (containerReport !\u003d null) {\n       containerReportStr.println(\"Container Report : \");\n       containerReportStr.print(\"\\tContainer-Id : \");\n       containerReportStr.println(containerReport.getContainerId());\n       containerReportStr.print(\"\\tStart-Time : \");\n       containerReportStr.println(containerReport.getCreationTime());\n       containerReportStr.print(\"\\tFinish-Time : \");\n       containerReportStr.println(containerReport.getFinishTime());\n       containerReportStr.print(\"\\tState : \");\n       containerReportStr.println(containerReport.getContainerState());\n       containerReportStr.print(\"\\tLOG-URL : \");\n       containerReportStr.println(containerReport.getLogUrl());\n       containerReportStr.print(\"\\tHost : \");\n       containerReportStr.println(containerReport.getAssignedNode());\n       containerReportStr.print(\"\\tDiagnostics : \");\n       containerReportStr.print(containerReport.getDiagnosticsInfo());\n     } else {\n       containerReportStr.print(\"Container with id \u0027\" + containerId\n-          + \"\u0027 doesn\u0027t exist in Hostory Server.\");\n+          + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n+      containerReportStr.close();\n+      sysout.println(baos.toString(\"UTF-8\"));\n+      return -1;\n     }\n     containerReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n+    return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printContainerReport(String containerId) throws YarnException,\n      IOException {\n    ContainerReport containerReport \u003d null;\n    try {\n      containerReport \u003d client.getContainerReport((ConverterUtils\n          .toContainerId(containerId)));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application for Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ApplicationAttemptNotFoundException e) {\n      sysout.println(\"Application Attempt for Container with id \u0027\"\n          + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ContainerNotFoundException e) {\n      sysout.println(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter containerReportStr \u003d new PrintWriter(baos);\n    if (containerReport !\u003d null) {\n      containerReportStr.println(\"Container Report : \");\n      containerReportStr.print(\"\\tContainer-Id : \");\n      containerReportStr.println(containerReport.getContainerId());\n      containerReportStr.print(\"\\tStart-Time : \");\n      containerReportStr.println(containerReport.getCreationTime());\n      containerReportStr.print(\"\\tFinish-Time : \");\n      containerReportStr.println(containerReport.getFinishTime());\n      containerReportStr.print(\"\\tState : \");\n      containerReportStr.println(containerReport.getContainerState());\n      containerReportStr.print(\"\\tLOG-URL : \");\n      containerReportStr.println(containerReport.getLogUrl());\n      containerReportStr.print(\"\\tHost : \");\n      containerReportStr.println(containerReport.getAssignedNode());\n      containerReportStr.print(\"\\tDiagnostics : \");\n      containerReportStr.print(containerReport.getDiagnosticsInfo());\n    } else {\n      containerReportStr.print(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n      containerReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    containerReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "int"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2356. yarn status command for non-existent application/application\nattempt/container is too verbose. Contributed by Sunil G.\n",
          "commitDate": "15/12/14 1:13 AM",
          "commitName": "fae3e8614f4f9a42904e39c51ca68b0d1e67469f",
          "commitAuthor": "Devaraj K",
          "commitDateOld": "04/12/14 12:53 PM",
          "commitNameOld": "258623ff8bb1a1057ae3501d4f20982d5a59ea34",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 10.51,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,49 @@\n-  private void printContainerReport(String containerId) throws YarnException,\n+  private int printContainerReport(String containerId) throws YarnException,\n       IOException {\n-    ContainerReport containerReport \u003d client.getContainerReport((ConverterUtils\n-        .toContainerId(containerId)));\n+    ContainerReport containerReport \u003d null;\n+    try {\n+      containerReport \u003d client.getContainerReport((ConverterUtils\n+          .toContainerId(containerId)));\n+    } catch (ApplicationNotFoundException e) {\n+      sysout.println(\"Application for Container with id \u0027\" + containerId\n+          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n+      return -1;\n+    } catch (ApplicationAttemptNotFoundException e) {\n+      sysout.println(\"Application Attempt for Container with id \u0027\"\n+          + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n+      return -1;\n+    } catch (ContainerNotFoundException e) {\n+      sysout.println(\"Container with id \u0027\" + containerId\n+          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n+      return -1;\n+    }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter containerReportStr \u003d new PrintWriter(baos);\n     if (containerReport !\u003d null) {\n       containerReportStr.println(\"Container Report : \");\n       containerReportStr.print(\"\\tContainer-Id : \");\n       containerReportStr.println(containerReport.getContainerId());\n       containerReportStr.print(\"\\tStart-Time : \");\n       containerReportStr.println(containerReport.getCreationTime());\n       containerReportStr.print(\"\\tFinish-Time : \");\n       containerReportStr.println(containerReport.getFinishTime());\n       containerReportStr.print(\"\\tState : \");\n       containerReportStr.println(containerReport.getContainerState());\n       containerReportStr.print(\"\\tLOG-URL : \");\n       containerReportStr.println(containerReport.getLogUrl());\n       containerReportStr.print(\"\\tHost : \");\n       containerReportStr.println(containerReport.getAssignedNode());\n       containerReportStr.print(\"\\tDiagnostics : \");\n       containerReportStr.print(containerReport.getDiagnosticsInfo());\n     } else {\n       containerReportStr.print(\"Container with id \u0027\" + containerId\n-          + \"\u0027 doesn\u0027t exist in Hostory Server.\");\n+          + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n+      containerReportStr.close();\n+      sysout.println(baos.toString(\"UTF-8\"));\n+      return -1;\n     }\n     containerReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n+    return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printContainerReport(String containerId) throws YarnException,\n      IOException {\n    ContainerReport containerReport \u003d null;\n    try {\n      containerReport \u003d client.getContainerReport((ConverterUtils\n          .toContainerId(containerId)));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application for Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ApplicationAttemptNotFoundException e) {\n      sysout.println(\"Application Attempt for Container with id \u0027\"\n          + containerId + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    } catch (ContainerNotFoundException e) {\n      sysout.println(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter containerReportStr \u003d new PrintWriter(baos);\n    if (containerReport !\u003d null) {\n      containerReportStr.println(\"Container Report : \");\n      containerReportStr.print(\"\\tContainer-Id : \");\n      containerReportStr.println(containerReport.getContainerId());\n      containerReportStr.print(\"\\tStart-Time : \");\n      containerReportStr.println(containerReport.getCreationTime());\n      containerReportStr.print(\"\\tFinish-Time : \");\n      containerReportStr.println(containerReport.getFinishTime());\n      containerReportStr.print(\"\\tState : \");\n      containerReportStr.println(containerReport.getContainerState());\n      containerReportStr.print(\"\\tLOG-URL : \");\n      containerReportStr.println(containerReport.getLogUrl());\n      containerReportStr.print(\"\\tHost : \");\n      containerReportStr.println(containerReport.getAssignedNode());\n      containerReportStr.print(\"\\tDiagnostics : \");\n      containerReportStr.print(containerReport.getDiagnosticsInfo());\n    } else {\n      containerReportStr.print(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in Timeline Server.\");\n      containerReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    containerReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "e285b98f0fe8637b574c52498035f7f11fb4e962": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2152. Added missing information into ContainerTokenIdentifier so that NodeManagers can report the same to RM when RM restarts. Contributed Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 2:43 PM",
      "commitName": "e285b98f0fe8637b574c52498035f7f11fb4e962",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/03/14 8:49 PM",
      "commitNameOld": "874cc955e0f501e8093c82e09fc0e44eb1a48908",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 108.7,
      "commitsBetweenForRepo": 688,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private void printContainerReport(String containerId) throws YarnException,\n       IOException {\n     ContainerReport containerReport \u003d client.getContainerReport((ConverterUtils\n         .toContainerId(containerId)));\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter containerReportStr \u003d new PrintWriter(baos);\n     if (containerReport !\u003d null) {\n       containerReportStr.println(\"Container Report : \");\n       containerReportStr.print(\"\\tContainer-Id : \");\n       containerReportStr.println(containerReport.getContainerId());\n       containerReportStr.print(\"\\tStart-Time : \");\n-      containerReportStr.println(containerReport.getStartTime());\n+      containerReportStr.println(containerReport.getCreationTime());\n       containerReportStr.print(\"\\tFinish-Time : \");\n       containerReportStr.println(containerReport.getFinishTime());\n       containerReportStr.print(\"\\tState : \");\n       containerReportStr.println(containerReport.getContainerState());\n       containerReportStr.print(\"\\tLOG-URL : \");\n       containerReportStr.println(containerReport.getLogUrl());\n       containerReportStr.print(\"\\tHost : \");\n       containerReportStr.println(containerReport.getAssignedNode());\n       containerReportStr.print(\"\\tDiagnostics : \");\n       containerReportStr.print(containerReport.getDiagnosticsInfo());\n     } else {\n       containerReportStr.print(\"Container with id \u0027\" + containerId\n           + \"\u0027 doesn\u0027t exist in Hostory Server.\");\n     }\n     containerReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printContainerReport(String containerId) throws YarnException,\n      IOException {\n    ContainerReport containerReport \u003d client.getContainerReport((ConverterUtils\n        .toContainerId(containerId)));\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter containerReportStr \u003d new PrintWriter(baos);\n    if (containerReport !\u003d null) {\n      containerReportStr.println(\"Container Report : \");\n      containerReportStr.print(\"\\tContainer-Id : \");\n      containerReportStr.println(containerReport.getContainerId());\n      containerReportStr.print(\"\\tStart-Time : \");\n      containerReportStr.println(containerReport.getCreationTime());\n      containerReportStr.print(\"\\tFinish-Time : \");\n      containerReportStr.println(containerReport.getFinishTime());\n      containerReportStr.print(\"\\tState : \");\n      containerReportStr.println(containerReport.getContainerState());\n      containerReportStr.print(\"\\tLOG-URL : \");\n      containerReportStr.println(containerReport.getLogUrl());\n      containerReportStr.print(\"\\tHost : \");\n      containerReportStr.println(containerReport.getAssignedNode());\n      containerReportStr.print(\"\\tDiagnostics : \");\n      containerReportStr.print(containerReport.getDiagnosticsInfo());\n    } else {\n      containerReportStr.print(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in Hostory Server.\");\n    }\n    containerReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-321. Merging YARN-321 branch to trunk.\nsvn merge ../branches/YARN-321\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561452 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 8:51 PM",
      "commitName": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,30 @@\n+  private void printContainerReport(String containerId) throws YarnException,\n+      IOException {\n+    ContainerReport containerReport \u003d client.getContainerReport((ConverterUtils\n+        .toContainerId(containerId)));\n+    // Use PrintWriter.println, which uses correct platform line ending.\n+    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n+    PrintWriter containerReportStr \u003d new PrintWriter(baos);\n+    if (containerReport !\u003d null) {\n+      containerReportStr.println(\"Container Report : \");\n+      containerReportStr.print(\"\\tContainer-Id : \");\n+      containerReportStr.println(containerReport.getContainerId());\n+      containerReportStr.print(\"\\tStart-Time : \");\n+      containerReportStr.println(containerReport.getStartTime());\n+      containerReportStr.print(\"\\tFinish-Time : \");\n+      containerReportStr.println(containerReport.getFinishTime());\n+      containerReportStr.print(\"\\tState : \");\n+      containerReportStr.println(containerReport.getContainerState());\n+      containerReportStr.print(\"\\tLOG-URL : \");\n+      containerReportStr.println(containerReport.getLogUrl());\n+      containerReportStr.print(\"\\tHost : \");\n+      containerReportStr.println(containerReport.getAssignedNode());\n+      containerReportStr.print(\"\\tDiagnostics : \");\n+      containerReportStr.print(containerReport.getDiagnosticsInfo());\n+    } else {\n+      containerReportStr.print(\"Container with id \u0027\" + containerId\n+          + \"\u0027 doesn\u0027t exist in Hostory Server.\");\n+    }\n+    containerReportStr.close();\n+    sysout.println(baos.toString(\"UTF-8\"));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void printContainerReport(String containerId) throws YarnException,\n      IOException {\n    ContainerReport containerReport \u003d client.getContainerReport((ConverterUtils\n        .toContainerId(containerId)));\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter containerReportStr \u003d new PrintWriter(baos);\n    if (containerReport !\u003d null) {\n      containerReportStr.println(\"Container Report : \");\n      containerReportStr.print(\"\\tContainer-Id : \");\n      containerReportStr.println(containerReport.getContainerId());\n      containerReportStr.print(\"\\tStart-Time : \");\n      containerReportStr.println(containerReport.getStartTime());\n      containerReportStr.print(\"\\tFinish-Time : \");\n      containerReportStr.println(containerReport.getFinishTime());\n      containerReportStr.print(\"\\tState : \");\n      containerReportStr.println(containerReport.getContainerState());\n      containerReportStr.print(\"\\tLOG-URL : \");\n      containerReportStr.println(containerReport.getLogUrl());\n      containerReportStr.print(\"\\tHost : \");\n      containerReportStr.println(containerReport.getAssignedNode());\n      containerReportStr.print(\"\\tDiagnostics : \");\n      containerReportStr.print(containerReport.getDiagnosticsInfo());\n    } else {\n      containerReportStr.print(\"Container with id \u0027\" + containerId\n          + \"\u0027 doesn\u0027t exist in Hostory Server.\");\n    }\n    containerReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java"
    }
  }
}