{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceUtils.java",
  "functionName": "setAllocationForMandatoryResources",
  "functionId": "setAllocationForMandatoryResources___res-Map__String,ResourceInformation____conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
  "functionStartLine": 179,
  "functionEndLine": 205,
  "numCommitsSeen": 60,
  "timeTaken": 3608,
  "changeHistory": [
    "e094eb74b9e7d8c3c6f1990445d248b062cc230b",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9"
  ],
  "changeHistoryShort": {
    "e094eb74b9e7d8c3c6f1990445d248b062cc230b": "Ymultichange(Yrename,Ybodychange)",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Yfilerename",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e094eb74b9e7d8c3c6f1990445d248b062cc230b": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-6953. Clean up ResourceUtils.setMinimumAllocationForMandatoryResources() and setMaximumAllocationForMandatoryResources()\n(Contributed by Manikandan R via Daniel Templeton)\n",
      "commitDate": "15/11/17 10:03 AM",
      "commitName": "e094eb74b9e7d8c3c6f1990445d248b062cc230b",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-6953. Clean up ResourceUtils.setMinimumAllocationForMandatoryResources() and setMaximumAllocationForMandatoryResources()\n(Contributed by Manikandan R via Daniel Templeton)\n",
          "commitDate": "15/11/17 10:03 AM",
          "commitName": "e094eb74b9e7d8c3c6f1990445d248b062cc230b",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "13/11/17 11:03 AM",
          "commitNameOld": "2e512f016ed689b5afbf1e27fdcd7c9f75b6dc9c",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 1.96,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,27 @@\n-  private static void setMinimumAllocationForMandatoryResources(\n+  private static void setAllocationForMandatoryResources(\n       Map\u003cString, ResourceInformation\u003e res, Configuration conf) {\n-    String[][] resourceTypesKeys \u003d {\n-        {ResourceInformation.MEMORY_MB.getName(),\n-            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n-            String.valueOf(\n-                YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB),\n-            ResourceInformation.MEMORY_MB.getName()},\n-        {ResourceInformation.VCORES.getName(),\n-            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n-            String.valueOf(\n-                YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES),\n-            ResourceInformation.VCORES.getName()}};\n-    for (String[] arr : resourceTypesKeys) {\n-      String resourceTypesKey \u003d\n-          YarnConfiguration.RESOURCE_TYPES + \".\" + arr[0] + MINIMUM_ALLOCATION;\n-      long minimumResourceTypes \u003d conf.getLong(resourceTypesKey, -1);\n-      long minimumConf \u003d conf.getLong(arr[1], -1);\n-      long minimum;\n-      if (minimumResourceTypes !\u003d -1) {\n-        minimum \u003d minimumResourceTypes;\n-        if (minimumConf !\u003d -1) {\n-          LOG.warn(\"Using minimum allocation for memory specified in \"\n-              + \"resource-types config file with key \"\n-              + minimumResourceTypes + \", ignoring minimum specified using \"\n-              + arr[1]);\n-        }\n-      } else {\n-        minimum \u003d conf.getLong(arr[1], Long.parseLong(arr[2]));\n-      }\n-      ResourceInformation ri \u003d res.get(arr[3]);\n-      ri.setMinimumAllocation(minimum);\n-    }\n+    ResourceInformation mem \u003d res.get(ResourceInformation.MEMORY_MB.getName());\n+    mem.setMinimumAllocation(getAllocation(conf,\n+        YarnConfiguration.RESOURCE_TYPES + \".\" +\n+            mem.getName() + MINIMUM_ALLOCATION,\n+        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n+    mem.setMaximumAllocation(getAllocation(conf,\n+        YarnConfiguration.RESOURCE_TYPES + \".\" +\n+            mem.getName() + MAXIMUM_ALLOCATION,\n+        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n+\n+    ResourceInformation cpu \u003d res.get(ResourceInformation.VCORES.getName());\n+\n+    cpu.setMinimumAllocation(getAllocation(conf,\n+        YarnConfiguration.RESOURCE_TYPES + \".\" +\n+            cpu.getName() + MINIMUM_ALLOCATION,\n+        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES));\n+    cpu.setMaximumAllocation(getAllocation(conf,\n+        YarnConfiguration.RESOURCE_TYPES + \".\" +\n+        cpu.getName() + MAXIMUM_ALLOCATION,\n+        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void setAllocationForMandatoryResources(\n      Map\u003cString, ResourceInformation\u003e res, Configuration conf) {\n    ResourceInformation mem \u003d res.get(ResourceInformation.MEMORY_MB.getName());\n    mem.setMinimumAllocation(getAllocation(conf,\n        YarnConfiguration.RESOURCE_TYPES + \".\" +\n            mem.getName() + MINIMUM_ALLOCATION,\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n    mem.setMaximumAllocation(getAllocation(conf,\n        YarnConfiguration.RESOURCE_TYPES + \".\" +\n            mem.getName() + MAXIMUM_ALLOCATION,\n        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n\n    ResourceInformation cpu \u003d res.get(ResourceInformation.VCORES.getName());\n\n    cpu.setMinimumAllocation(getAllocation(conf,\n        YarnConfiguration.RESOURCE_TYPES + \".\" +\n            cpu.getName() + MINIMUM_ALLOCATION,\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES));\n    cpu.setMaximumAllocation(getAllocation(conf,\n        YarnConfiguration.RESOURCE_TYPES + \".\" +\n        cpu.getName() + MAXIMUM_ALLOCATION,\n        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {
            "oldValue": "setMinimumAllocationForMandatoryResources",
            "newValue": "setAllocationForMandatoryResources"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6953. Clean up ResourceUtils.setMinimumAllocationForMandatoryResources() and setMaximumAllocationForMandatoryResources()\n(Contributed by Manikandan R via Daniel Templeton)\n",
          "commitDate": "15/11/17 10:03 AM",
          "commitName": "e094eb74b9e7d8c3c6f1990445d248b062cc230b",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "13/11/17 11:03 AM",
          "commitNameOld": "2e512f016ed689b5afbf1e27fdcd7c9f75b6dc9c",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 1.96,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,27 @@\n-  private static void setMinimumAllocationForMandatoryResources(\n+  private static void setAllocationForMandatoryResources(\n       Map\u003cString, ResourceInformation\u003e res, Configuration conf) {\n-    String[][] resourceTypesKeys \u003d {\n-        {ResourceInformation.MEMORY_MB.getName(),\n-            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n-            String.valueOf(\n-                YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB),\n-            ResourceInformation.MEMORY_MB.getName()},\n-        {ResourceInformation.VCORES.getName(),\n-            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n-            String.valueOf(\n-                YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES),\n-            ResourceInformation.VCORES.getName()}};\n-    for (String[] arr : resourceTypesKeys) {\n-      String resourceTypesKey \u003d\n-          YarnConfiguration.RESOURCE_TYPES + \".\" + arr[0] + MINIMUM_ALLOCATION;\n-      long minimumResourceTypes \u003d conf.getLong(resourceTypesKey, -1);\n-      long minimumConf \u003d conf.getLong(arr[1], -1);\n-      long minimum;\n-      if (minimumResourceTypes !\u003d -1) {\n-        minimum \u003d minimumResourceTypes;\n-        if (minimumConf !\u003d -1) {\n-          LOG.warn(\"Using minimum allocation for memory specified in \"\n-              + \"resource-types config file with key \"\n-              + minimumResourceTypes + \", ignoring minimum specified using \"\n-              + arr[1]);\n-        }\n-      } else {\n-        minimum \u003d conf.getLong(arr[1], Long.parseLong(arr[2]));\n-      }\n-      ResourceInformation ri \u003d res.get(arr[3]);\n-      ri.setMinimumAllocation(minimum);\n-    }\n+    ResourceInformation mem \u003d res.get(ResourceInformation.MEMORY_MB.getName());\n+    mem.setMinimumAllocation(getAllocation(conf,\n+        YarnConfiguration.RESOURCE_TYPES + \".\" +\n+            mem.getName() + MINIMUM_ALLOCATION,\n+        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n+    mem.setMaximumAllocation(getAllocation(conf,\n+        YarnConfiguration.RESOURCE_TYPES + \".\" +\n+            mem.getName() + MAXIMUM_ALLOCATION,\n+        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n+\n+    ResourceInformation cpu \u003d res.get(ResourceInformation.VCORES.getName());\n+\n+    cpu.setMinimumAllocation(getAllocation(conf,\n+        YarnConfiguration.RESOURCE_TYPES + \".\" +\n+            cpu.getName() + MINIMUM_ALLOCATION,\n+        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES));\n+    cpu.setMaximumAllocation(getAllocation(conf,\n+        YarnConfiguration.RESOURCE_TYPES + \".\" +\n+        cpu.getName() + MAXIMUM_ALLOCATION,\n+        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void setAllocationForMandatoryResources(\n      Map\u003cString, ResourceInformation\u003e res, Configuration conf) {\n    ResourceInformation mem \u003d res.get(ResourceInformation.MEMORY_MB.getName());\n    mem.setMinimumAllocation(getAllocation(conf,\n        YarnConfiguration.RESOURCE_TYPES + \".\" +\n            mem.getName() + MINIMUM_ALLOCATION,\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));\n    mem.setMaximumAllocation(getAllocation(conf,\n        YarnConfiguration.RESOURCE_TYPES + \".\" +\n            mem.getName() + MAXIMUM_ALLOCATION,\n        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));\n\n    ResourceInformation cpu \u003d res.get(ResourceInformation.VCORES.getName());\n\n    cpu.setMinimumAllocation(getAllocation(conf,\n        YarnConfiguration.RESOURCE_TYPES + \".\" +\n            cpu.getName() + MINIMUM_ALLOCATION,\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES));\n    cpu.setMaximumAllocation(getAllocation(conf,\n        YarnConfiguration.RESOURCE_TYPES + \".\" +\n        cpu.getName() + MAXIMUM_ALLOCATION,\n        YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "4e5632d28eb8f6b1b8830c2aa89ec6321d477977",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,34 @@\n   private static void setMinimumAllocationForMandatoryResources(\n       Map\u003cString, ResourceInformation\u003e res, Configuration conf) {\n-    String[][] resourceTypesKeys \u003d\n-        {\n-          { ResourceInformation.MEMORY_MB.getName(),\n+    String[][] resourceTypesKeys \u003d {\n+        {ResourceInformation.MEMORY_MB.getName(),\n             YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n             String.valueOf(\n-              YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB),\n-            ResourceInformation.MEMORY_MB.getName()\n-          },\n-          { ResourceInformation.VCORES.getName(),\n+                YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB),\n+            ResourceInformation.MEMORY_MB.getName()},\n+        {ResourceInformation.VCORES.getName(),\n             YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n             String.valueOf(\n-              YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES),\n-            ResourceInformation.VCORES.getName()\n-          }\n-        };\n+                YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES),\n+            ResourceInformation.VCORES.getName()}};\n     for (String[] arr : resourceTypesKeys) {\n       String resourceTypesKey \u003d\n           YarnConfiguration.RESOURCE_TYPES + \".\" + arr[0] + MINIMUM_ALLOCATION;\n       long minimumResourceTypes \u003d conf.getLong(resourceTypesKey, -1);\n       long minimumConf \u003d conf.getLong(arr[1], -1);\n       long minimum;\n       if (minimumResourceTypes !\u003d -1) {\n         minimum \u003d minimumResourceTypes;\n         if (minimumConf !\u003d -1) {\n           LOG.warn(\"Using minimum allocation for memory specified in \"\n               + \"resource-types config file with key \"\n               + minimumResourceTypes + \", ignoring minimum specified using \"\n               + arr[1]);\n         }\n       } else {\n         minimum \u003d conf.getLong(arr[1], Long.parseLong(arr[2]));\n       }\n       ResourceInformation ri \u003d res.get(arr[3]);\n       ri.setMinimumAllocation(minimum);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setMinimumAllocationForMandatoryResources(\n      Map\u003cString, ResourceInformation\u003e res, Configuration conf) {\n    String[][] resourceTypesKeys \u003d {\n        {ResourceInformation.MEMORY_MB.getName(),\n            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n            String.valueOf(\n                YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB),\n            ResourceInformation.MEMORY_MB.getName()},\n        {ResourceInformation.VCORES.getName(),\n            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n            String.valueOf(\n                YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES),\n            ResourceInformation.VCORES.getName()}};\n    for (String[] arr : resourceTypesKeys) {\n      String resourceTypesKey \u003d\n          YarnConfiguration.RESOURCE_TYPES + \".\" + arr[0] + MINIMUM_ALLOCATION;\n      long minimumResourceTypes \u003d conf.getLong(resourceTypesKey, -1);\n      long minimumConf \u003d conf.getLong(arr[1], -1);\n      long minimum;\n      if (minimumResourceTypes !\u003d -1) {\n        minimum \u003d minimumResourceTypes;\n        if (minimumConf !\u003d -1) {\n          LOG.warn(\"Using minimum allocation for memory specified in \"\n              + \"resource-types config file with key \"\n              + minimumResourceTypes + \", ignoring minimum specified using \"\n              + arr[1]);\n        }\n      } else {\n        minimum \u003d conf.getLong(arr[1], Long.parseLong(arr[2]));\n      }\n      ResourceInformation ri \u003d res.get(arr[3]);\n      ri.setMinimumAllocation(minimum);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java"
      }
    },
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5587. Add support for resource profiles. (vvasudev via asuresh)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,38 @@\n+  private static void setMinimumAllocationForMandatoryResources(\n+      Map\u003cString, ResourceInformation\u003e res, Configuration conf) {\n+    String[][] resourceTypesKeys \u003d\n+        {\n+          { ResourceInformation.MEMORY_MB.getName(),\n+            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n+            String.valueOf(\n+              YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB),\n+            ResourceInformation.MEMORY_MB.getName()\n+          },\n+          { ResourceInformation.VCORES.getName(),\n+            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n+            String.valueOf(\n+              YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES),\n+            ResourceInformation.VCORES.getName()\n+          }\n+        };\n+    for (String[] arr : resourceTypesKeys) {\n+      String resourceTypesKey \u003d\n+          YarnConfiguration.RESOURCE_TYPES + \".\" + arr[0] + MINIMUM_ALLOCATION;\n+      long minimumResourceTypes \u003d conf.getLong(resourceTypesKey, -1);\n+      long minimumConf \u003d conf.getLong(arr[1], -1);\n+      long minimum;\n+      if (minimumResourceTypes !\u003d -1) {\n+        minimum \u003d minimumResourceTypes;\n+        if (minimumConf !\u003d -1) {\n+          LOG.warn(\"Using minimum allocation for memory specified in \"\n+              + \"resource-types config file with key \"\n+              + minimumResourceTypes + \", ignoring minimum specified using \"\n+              + arr[1]);\n+        }\n+      } else {\n+        minimum \u003d conf.getLong(arr[1], Long.parseLong(arr[2]));\n+      }\n+      ResourceInformation ri \u003d res.get(arr[3]);\n+      ri.setMinimumAllocation(minimum);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setMinimumAllocationForMandatoryResources(\n      Map\u003cString, ResourceInformation\u003e res, Configuration conf) {\n    String[][] resourceTypesKeys \u003d\n        {\n          { ResourceInformation.MEMORY_MB.getName(),\n            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n            String.valueOf(\n              YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB),\n            ResourceInformation.MEMORY_MB.getName()\n          },\n          { ResourceInformation.VCORES.getName(),\n            YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n            String.valueOf(\n              YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES),\n            ResourceInformation.VCORES.getName()\n          }\n        };\n    for (String[] arr : resourceTypesKeys) {\n      String resourceTypesKey \u003d\n          YarnConfiguration.RESOURCE_TYPES + \".\" + arr[0] + MINIMUM_ALLOCATION;\n      long minimumResourceTypes \u003d conf.getLong(resourceTypesKey, -1);\n      long minimumConf \u003d conf.getLong(arr[1], -1);\n      long minimum;\n      if (minimumResourceTypes !\u003d -1) {\n        minimum \u003d minimumResourceTypes;\n        if (minimumConf !\u003d -1) {\n          LOG.warn(\"Using minimum allocation for memory specified in \"\n              + \"resource-types config file with key \"\n              + minimumResourceTypes + \", ignoring minimum specified using \"\n              + arr[1]);\n        }\n      } else {\n        minimum \u003d conf.getLong(arr[1], Long.parseLong(arr[2]));\n      }\n      ResourceInformation ri \u003d res.get(arr[3]);\n      ri.setMinimumAllocation(minimum);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java"
    }
  }
}