{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DomainSocketFactory.java",
  "functionName": "getPathInfo",
  "functionId": "getPathInfo___addr-InetSocketAddress__conf-ShortCircuitConf",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DomainSocketFactory.java",
  "functionStartLine": 136,
  "functionEndLine": 161,
  "numCommitsSeen": 21,
  "timeTaken": 4300,
  "changeHistory": [
    "b061215ecfebe476bf58f70788113d1af816f553",
    "c992bcf9c136d3df686655a80e636bb7bb0664da",
    "2cc9514ad643ae49d30524743420ee9744e571bd",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be"
  ],
  "changeHistoryShort": {
    "b061215ecfebe476bf58f70788113d1af816f553": "Yexceptionschange",
    "c992bcf9c136d3df686655a80e636bb7bb0664da": "Ymultichange(Yfilerename,Ybodychange)",
    "2cc9514ad643ae49d30524743420ee9744e571bd": "Yparameterchange",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": "Ymultichange(Yfilerename,Ybodychange)",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b061215ecfebe476bf58f70788113d1af816f553": {
      "type": "Yexceptionschange",
      "commitMessage": "HDFS-11701. NPE from Unresolved Host causes permanent DFSInputStream failures. Contributed by Lokesh Jain.\n",
      "commitDate": "07/02/18 11:22 AM",
      "commitName": "b061215ecfebe476bf58f70788113d1af816f553",
      "commitAuthor": "Jitendra Pandey",
      "commitDateOld": "30/01/18 3:25 PM",
      "commitNameOld": "2e7331ca264dd366b975f3c8e610cf84eb8cc155",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 7.83,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n-  public PathInfo getPathInfo(InetSocketAddress addr, ShortCircuitConf conf) {\n+  public PathInfo getPathInfo(InetSocketAddress addr, ShortCircuitConf conf)\n+      throws IOException {\n     // If there is no domain socket path configured, we can\u0027t use domain\n     // sockets.\n     if (conf.getDomainSocketPath().isEmpty()) return PathInfo.NOT_CONFIGURED;\n     // If we can\u0027t do anything with the domain socket, don\u0027t create it.\n     if (!conf.isDomainSocketDataTraffic() \u0026\u0026\n         (!conf.isShortCircuitLocalReads() || conf.isUseLegacyBlockReaderLocal())) {\n       return PathInfo.NOT_CONFIGURED;\n     }\n     // If the DomainSocket code is not loaded, we can\u0027t create\n     // DomainSocket objects.\n     if (DomainSocket.getLoadingFailureReason() !\u003d null) {\n       return PathInfo.NOT_CONFIGURED;\n     }\n     // UNIX domain sockets can only be used to talk to local peers\n     if (!DFSUtilClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;\n     String escapedPath \u003d DomainSocket.getEffectivePath(\n         conf.getDomainSocketPath(), addr.getPort());\n     PathState status \u003d pathMap.getIfPresent(escapedPath);\n     if (status \u003d\u003d null) {\n       return new PathInfo(escapedPath, PathState.VALID);\n     } else {\n       return new PathInfo(escapedPath, status);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public PathInfo getPathInfo(InetSocketAddress addr, ShortCircuitConf conf)\n      throws IOException {\n    // If there is no domain socket path configured, we can\u0027t use domain\n    // sockets.\n    if (conf.getDomainSocketPath().isEmpty()) return PathInfo.NOT_CONFIGURED;\n    // If we can\u0027t do anything with the domain socket, don\u0027t create it.\n    if (!conf.isDomainSocketDataTraffic() \u0026\u0026\n        (!conf.isShortCircuitLocalReads() || conf.isUseLegacyBlockReaderLocal())) {\n      return PathInfo.NOT_CONFIGURED;\n    }\n    // If the DomainSocket code is not loaded, we can\u0027t create\n    // DomainSocket objects.\n    if (DomainSocket.getLoadingFailureReason() !\u003d null) {\n      return PathInfo.NOT_CONFIGURED;\n    }\n    // UNIX domain sockets can only be used to talk to local peers\n    if (!DFSUtilClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;\n    String escapedPath \u003d DomainSocket.getEffectivePath(\n        conf.getDomainSocketPath(), addr.getPort());\n    PathState status \u003d pathMap.getIfPresent(escapedPath);\n    if (status \u003d\u003d null) {\n      return new PathInfo(escapedPath, PathState.VALID);\n    } else {\n      return new PathInfo(escapedPath, status);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DomainSocketFactory.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[IOException]"
      }
    },
    "c992bcf9c136d3df686655a80e636bb7bb0664da": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-8951. Move the shortcircuit package to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/08/15 2:02 PM",
      "commitName": "c992bcf9c136d3df686655a80e636bb7bb0664da",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-8951. Move the shortcircuit package to hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "26/08/15 2:02 PM",
          "commitName": "c992bcf9c136d3df686655a80e636bb7bb0664da",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "25/08/15 2:29 PM",
          "commitNameOld": "a4d9acc51d1a977bc333da17780c00c72e8546f1",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   public PathInfo getPathInfo(InetSocketAddress addr, ShortCircuitConf conf) {\n     // If there is no domain socket path configured, we can\u0027t use domain\n     // sockets.\n     if (conf.getDomainSocketPath().isEmpty()) return PathInfo.NOT_CONFIGURED;\n     // If we can\u0027t do anything with the domain socket, don\u0027t create it.\n     if (!conf.isDomainSocketDataTraffic() \u0026\u0026\n         (!conf.isShortCircuitLocalReads() || conf.isUseLegacyBlockReaderLocal())) {\n       return PathInfo.NOT_CONFIGURED;\n     }\n     // If the DomainSocket code is not loaded, we can\u0027t create\n     // DomainSocket objects.\n     if (DomainSocket.getLoadingFailureReason() !\u003d null) {\n       return PathInfo.NOT_CONFIGURED;\n     }\n     // UNIX domain sockets can only be used to talk to local peers\n-    if (!DFSClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;\n+    if (!DFSUtilClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;\n     String escapedPath \u003d DomainSocket.getEffectivePath(\n         conf.getDomainSocketPath(), addr.getPort());\n     PathState status \u003d pathMap.getIfPresent(escapedPath);\n     if (status \u003d\u003d null) {\n       return new PathInfo(escapedPath, PathState.VALID);\n     } else {\n       return new PathInfo(escapedPath, status);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public PathInfo getPathInfo(InetSocketAddress addr, ShortCircuitConf conf) {\n    // If there is no domain socket path configured, we can\u0027t use domain\n    // sockets.\n    if (conf.getDomainSocketPath().isEmpty()) return PathInfo.NOT_CONFIGURED;\n    // If we can\u0027t do anything with the domain socket, don\u0027t create it.\n    if (!conf.isDomainSocketDataTraffic() \u0026\u0026\n        (!conf.isShortCircuitLocalReads() || conf.isUseLegacyBlockReaderLocal())) {\n      return PathInfo.NOT_CONFIGURED;\n    }\n    // If the DomainSocket code is not loaded, we can\u0027t create\n    // DomainSocket objects.\n    if (DomainSocket.getLoadingFailureReason() !\u003d null) {\n      return PathInfo.NOT_CONFIGURED;\n    }\n    // UNIX domain sockets can only be used to talk to local peers\n    if (!DFSUtilClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;\n    String escapedPath \u003d DomainSocket.getEffectivePath(\n        conf.getDomainSocketPath(), addr.getPort());\n    PathState status \u003d pathMap.getIfPresent(escapedPath);\n    if (status \u003d\u003d null) {\n      return new PathInfo(escapedPath, PathState.VALID);\n    } else {\n      return new PathInfo(escapedPath, status);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DomainSocketFactory.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DomainSocketFactory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DomainSocketFactory.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8951. Move the shortcircuit package to hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "26/08/15 2:02 PM",
          "commitName": "c992bcf9c136d3df686655a80e636bb7bb0664da",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "25/08/15 2:29 PM",
          "commitNameOld": "a4d9acc51d1a977bc333da17780c00c72e8546f1",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   public PathInfo getPathInfo(InetSocketAddress addr, ShortCircuitConf conf) {\n     // If there is no domain socket path configured, we can\u0027t use domain\n     // sockets.\n     if (conf.getDomainSocketPath().isEmpty()) return PathInfo.NOT_CONFIGURED;\n     // If we can\u0027t do anything with the domain socket, don\u0027t create it.\n     if (!conf.isDomainSocketDataTraffic() \u0026\u0026\n         (!conf.isShortCircuitLocalReads() || conf.isUseLegacyBlockReaderLocal())) {\n       return PathInfo.NOT_CONFIGURED;\n     }\n     // If the DomainSocket code is not loaded, we can\u0027t create\n     // DomainSocket objects.\n     if (DomainSocket.getLoadingFailureReason() !\u003d null) {\n       return PathInfo.NOT_CONFIGURED;\n     }\n     // UNIX domain sockets can only be used to talk to local peers\n-    if (!DFSClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;\n+    if (!DFSUtilClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;\n     String escapedPath \u003d DomainSocket.getEffectivePath(\n         conf.getDomainSocketPath(), addr.getPort());\n     PathState status \u003d pathMap.getIfPresent(escapedPath);\n     if (status \u003d\u003d null) {\n       return new PathInfo(escapedPath, PathState.VALID);\n     } else {\n       return new PathInfo(escapedPath, status);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public PathInfo getPathInfo(InetSocketAddress addr, ShortCircuitConf conf) {\n    // If there is no domain socket path configured, we can\u0027t use domain\n    // sockets.\n    if (conf.getDomainSocketPath().isEmpty()) return PathInfo.NOT_CONFIGURED;\n    // If we can\u0027t do anything with the domain socket, don\u0027t create it.\n    if (!conf.isDomainSocketDataTraffic() \u0026\u0026\n        (!conf.isShortCircuitLocalReads() || conf.isUseLegacyBlockReaderLocal())) {\n      return PathInfo.NOT_CONFIGURED;\n    }\n    // If the DomainSocket code is not loaded, we can\u0027t create\n    // DomainSocket objects.\n    if (DomainSocket.getLoadingFailureReason() !\u003d null) {\n      return PathInfo.NOT_CONFIGURED;\n    }\n    // UNIX domain sockets can only be used to talk to local peers\n    if (!DFSUtilClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;\n    String escapedPath \u003d DomainSocket.getEffectivePath(\n        conf.getDomainSocketPath(), addr.getPort());\n    PathState status \u003d pathMap.getIfPresent(escapedPath);\n    if (status \u003d\u003d null) {\n      return new PathInfo(escapedPath, PathState.VALID);\n    } else {\n      return new PathInfo(escapedPath, status);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DomainSocketFactory.java",
          "extendedDetails": {}
        }
      ]
    },
    "2cc9514ad643ae49d30524743420ee9744e571bd": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-8100. Refactor DFSClient.Conf to a standalone class and separates short-circuit related conf to ShortCircuitConf.\n",
      "commitDate": "10/04/15 2:48 PM",
      "commitName": "2cc9514ad643ae49d30524743420ee9744e571bd",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "27/08/14 1:39 PM",
      "commitNameOld": "225569ece229cec32f852f831fd337a139c44b1e",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 226.05,
      "commitsBetweenForRepo": 1972,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n-  public PathInfo getPathInfo(InetSocketAddress addr, DFSClient.Conf conf) {\n+  public PathInfo getPathInfo(InetSocketAddress addr, ShortCircuitConf conf) {\n     // If there is no domain socket path configured, we can\u0027t use domain\n     // sockets.\n     if (conf.getDomainSocketPath().isEmpty()) return PathInfo.NOT_CONFIGURED;\n     // If we can\u0027t do anything with the domain socket, don\u0027t create it.\n     if (!conf.isDomainSocketDataTraffic() \u0026\u0026\n         (!conf.isShortCircuitLocalReads() || conf.isUseLegacyBlockReaderLocal())) {\n       return PathInfo.NOT_CONFIGURED;\n     }\n     // If the DomainSocket code is not loaded, we can\u0027t create\n     // DomainSocket objects.\n     if (DomainSocket.getLoadingFailureReason() !\u003d null) {\n       return PathInfo.NOT_CONFIGURED;\n     }\n     // UNIX domain sockets can only be used to talk to local peers\n     if (!DFSClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;\n     String escapedPath \u003d DomainSocket.getEffectivePath(\n         conf.getDomainSocketPath(), addr.getPort());\n     PathState status \u003d pathMap.getIfPresent(escapedPath);\n     if (status \u003d\u003d null) {\n       return new PathInfo(escapedPath, PathState.VALID);\n     } else {\n       return new PathInfo(escapedPath, status);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public PathInfo getPathInfo(InetSocketAddress addr, ShortCircuitConf conf) {\n    // If there is no domain socket path configured, we can\u0027t use domain\n    // sockets.\n    if (conf.getDomainSocketPath().isEmpty()) return PathInfo.NOT_CONFIGURED;\n    // If we can\u0027t do anything with the domain socket, don\u0027t create it.\n    if (!conf.isDomainSocketDataTraffic() \u0026\u0026\n        (!conf.isShortCircuitLocalReads() || conf.isUseLegacyBlockReaderLocal())) {\n      return PathInfo.NOT_CONFIGURED;\n    }\n    // If the DomainSocket code is not loaded, we can\u0027t create\n    // DomainSocket objects.\n    if (DomainSocket.getLoadingFailureReason() !\u003d null) {\n      return PathInfo.NOT_CONFIGURED;\n    }\n    // UNIX domain sockets can only be used to talk to local peers\n    if (!DFSClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;\n    String escapedPath \u003d DomainSocket.getEffectivePath(\n        conf.getDomainSocketPath(), addr.getPort());\n    PathState status \u003d pathMap.getIfPresent(escapedPath);\n    if (status \u003d\u003d null) {\n      return new PathInfo(escapedPath, PathState.VALID);\n    } else {\n      return new PathInfo(escapedPath, status);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DomainSocketFactory.java",
      "extendedDetails": {
        "oldValue": "[addr-InetSocketAddress, conf-DFSClient.Conf]",
        "newValue": "[addr-InetSocketAddress, conf-ShortCircuitConf]"
      }
    },
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-6167. Relocate the non-public API classes in the hdfs.client package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583878 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/14 10:09 PM",
      "commitName": "f93d99990a9a02ce693cd74466c2e5f127c1f560",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-6167. Relocate the non-public API classes in the hdfs.client package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583878 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/04/14 10:09 PM",
          "commitName": "f93d99990a9a02ce693cd74466c2e5f127c1f560",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "01/04/14 6:00 PM",
          "commitNameOld": "5c7cb51775bd3d4a6e3e1bd501b3a8d747733fe3",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.17,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   public PathInfo getPathInfo(InetSocketAddress addr, DFSClient.Conf conf) {\n     // If there is no domain socket path configured, we can\u0027t use domain\n     // sockets.\n-    if (conf.domainSocketPath.isEmpty()) return PathInfo.NOT_CONFIGURED;\n+    if (conf.getDomainSocketPath().isEmpty()) return PathInfo.NOT_CONFIGURED;\n     // If we can\u0027t do anything with the domain socket, don\u0027t create it.\n-    if (!conf.domainSocketDataTraffic \u0026\u0026\n-        (!conf.shortCircuitLocalReads || conf.useLegacyBlockReaderLocal)) {\n+    if (!conf.isDomainSocketDataTraffic() \u0026\u0026\n+        (!conf.isShortCircuitLocalReads() || conf.isUseLegacyBlockReaderLocal())) {\n       return PathInfo.NOT_CONFIGURED;\n     }\n     // If the DomainSocket code is not loaded, we can\u0027t create\n     // DomainSocket objects.\n     if (DomainSocket.getLoadingFailureReason() !\u003d null) {\n       return PathInfo.NOT_CONFIGURED;\n     }\n     // UNIX domain sockets can only be used to talk to local peers\n     if (!DFSClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;\n-    String escapedPath \u003d DomainSocket.\n-        getEffectivePath(conf.domainSocketPath, addr.getPort());\n+    String escapedPath \u003d DomainSocket.getEffectivePath(\n+        conf.getDomainSocketPath(), addr.getPort());\n     PathState status \u003d pathMap.getIfPresent(escapedPath);\n     if (status \u003d\u003d null) {\n       return new PathInfo(escapedPath, PathState.VALID);\n     } else {\n       return new PathInfo(escapedPath, status);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public PathInfo getPathInfo(InetSocketAddress addr, DFSClient.Conf conf) {\n    // If there is no domain socket path configured, we can\u0027t use domain\n    // sockets.\n    if (conf.getDomainSocketPath().isEmpty()) return PathInfo.NOT_CONFIGURED;\n    // If we can\u0027t do anything with the domain socket, don\u0027t create it.\n    if (!conf.isDomainSocketDataTraffic() \u0026\u0026\n        (!conf.isShortCircuitLocalReads() || conf.isUseLegacyBlockReaderLocal())) {\n      return PathInfo.NOT_CONFIGURED;\n    }\n    // If the DomainSocket code is not loaded, we can\u0027t create\n    // DomainSocket objects.\n    if (DomainSocket.getLoadingFailureReason() !\u003d null) {\n      return PathInfo.NOT_CONFIGURED;\n    }\n    // UNIX domain sockets can only be used to talk to local peers\n    if (!DFSClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;\n    String escapedPath \u003d DomainSocket.getEffectivePath(\n        conf.getDomainSocketPath(), addr.getPort());\n    PathState status \u003d pathMap.getIfPresent(escapedPath);\n    if (status \u003d\u003d null) {\n      return new PathInfo(escapedPath, PathState.VALID);\n    } else {\n      return new PathInfo(escapedPath, status);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DomainSocketFactory.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DomainSocketFactory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DomainSocketFactory.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6167. Relocate the non-public API classes in the hdfs.client package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583878 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/04/14 10:09 PM",
          "commitName": "f93d99990a9a02ce693cd74466c2e5f127c1f560",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "01/04/14 6:00 PM",
          "commitNameOld": "5c7cb51775bd3d4a6e3e1bd501b3a8d747733fe3",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.17,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   public PathInfo getPathInfo(InetSocketAddress addr, DFSClient.Conf conf) {\n     // If there is no domain socket path configured, we can\u0027t use domain\n     // sockets.\n-    if (conf.domainSocketPath.isEmpty()) return PathInfo.NOT_CONFIGURED;\n+    if (conf.getDomainSocketPath().isEmpty()) return PathInfo.NOT_CONFIGURED;\n     // If we can\u0027t do anything with the domain socket, don\u0027t create it.\n-    if (!conf.domainSocketDataTraffic \u0026\u0026\n-        (!conf.shortCircuitLocalReads || conf.useLegacyBlockReaderLocal)) {\n+    if (!conf.isDomainSocketDataTraffic() \u0026\u0026\n+        (!conf.isShortCircuitLocalReads() || conf.isUseLegacyBlockReaderLocal())) {\n       return PathInfo.NOT_CONFIGURED;\n     }\n     // If the DomainSocket code is not loaded, we can\u0027t create\n     // DomainSocket objects.\n     if (DomainSocket.getLoadingFailureReason() !\u003d null) {\n       return PathInfo.NOT_CONFIGURED;\n     }\n     // UNIX domain sockets can only be used to talk to local peers\n     if (!DFSClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;\n-    String escapedPath \u003d DomainSocket.\n-        getEffectivePath(conf.domainSocketPath, addr.getPort());\n+    String escapedPath \u003d DomainSocket.getEffectivePath(\n+        conf.getDomainSocketPath(), addr.getPort());\n     PathState status \u003d pathMap.getIfPresent(escapedPath);\n     if (status \u003d\u003d null) {\n       return new PathInfo(escapedPath, PathState.VALID);\n     } else {\n       return new PathInfo(escapedPath, status);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public PathInfo getPathInfo(InetSocketAddress addr, DFSClient.Conf conf) {\n    // If there is no domain socket path configured, we can\u0027t use domain\n    // sockets.\n    if (conf.getDomainSocketPath().isEmpty()) return PathInfo.NOT_CONFIGURED;\n    // If we can\u0027t do anything with the domain socket, don\u0027t create it.\n    if (!conf.isDomainSocketDataTraffic() \u0026\u0026\n        (!conf.isShortCircuitLocalReads() || conf.isUseLegacyBlockReaderLocal())) {\n      return PathInfo.NOT_CONFIGURED;\n    }\n    // If the DomainSocket code is not loaded, we can\u0027t create\n    // DomainSocket objects.\n    if (DomainSocket.getLoadingFailureReason() !\u003d null) {\n      return PathInfo.NOT_CONFIGURED;\n    }\n    // UNIX domain sockets can only be used to talk to local peers\n    if (!DFSClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;\n    String escapedPath \u003d DomainSocket.getEffectivePath(\n        conf.getDomainSocketPath(), addr.getPort());\n    PathState status \u003d pathMap.getIfPresent(escapedPath);\n    if (status \u003d\u003d null) {\n      return new PathInfo(escapedPath, PathState.VALID);\n    } else {\n      return new PathInfo(escapedPath, status);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DomainSocketFactory.java",
          "extendedDetails": {}
        }
      ]
    },
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 11:08 AM",
      "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,25 @@\n+  public PathInfo getPathInfo(InetSocketAddress addr, DFSClient.Conf conf) {\n+    // If there is no domain socket path configured, we can\u0027t use domain\n+    // sockets.\n+    if (conf.domainSocketPath.isEmpty()) return PathInfo.NOT_CONFIGURED;\n+    // If we can\u0027t do anything with the domain socket, don\u0027t create it.\n+    if (!conf.domainSocketDataTraffic \u0026\u0026\n+        (!conf.shortCircuitLocalReads || conf.useLegacyBlockReaderLocal)) {\n+      return PathInfo.NOT_CONFIGURED;\n+    }\n+    // If the DomainSocket code is not loaded, we can\u0027t create\n+    // DomainSocket objects.\n+    if (DomainSocket.getLoadingFailureReason() !\u003d null) {\n+      return PathInfo.NOT_CONFIGURED;\n+    }\n+    // UNIX domain sockets can only be used to talk to local peers\n+    if (!DFSClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;\n+    String escapedPath \u003d DomainSocket.\n+        getEffectivePath(conf.domainSocketPath, addr.getPort());\n+    PathState status \u003d pathMap.getIfPresent(escapedPath);\n+    if (status \u003d\u003d null) {\n+      return new PathInfo(escapedPath, PathState.VALID);\n+    } else {\n+      return new PathInfo(escapedPath, status);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public PathInfo getPathInfo(InetSocketAddress addr, DFSClient.Conf conf) {\n    // If there is no domain socket path configured, we can\u0027t use domain\n    // sockets.\n    if (conf.domainSocketPath.isEmpty()) return PathInfo.NOT_CONFIGURED;\n    // If we can\u0027t do anything with the domain socket, don\u0027t create it.\n    if (!conf.domainSocketDataTraffic \u0026\u0026\n        (!conf.shortCircuitLocalReads || conf.useLegacyBlockReaderLocal)) {\n      return PathInfo.NOT_CONFIGURED;\n    }\n    // If the DomainSocket code is not loaded, we can\u0027t create\n    // DomainSocket objects.\n    if (DomainSocket.getLoadingFailureReason() !\u003d null) {\n      return PathInfo.NOT_CONFIGURED;\n    }\n    // UNIX domain sockets can only be used to talk to local peers\n    if (!DFSClient.isLocalAddress(addr)) return PathInfo.NOT_CONFIGURED;\n    String escapedPath \u003d DomainSocket.\n        getEffectivePath(conf.domainSocketPath, addr.getPort());\n    PathState status \u003d pathMap.getIfPresent(escapedPath);\n    if (status \u003d\u003d null) {\n      return new PathInfo(escapedPath, PathState.VALID);\n    } else {\n      return new PathInfo(escapedPath, status);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DomainSocketFactory.java"
    }
  }
}