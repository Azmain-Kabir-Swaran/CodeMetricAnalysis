{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceLocalizationService.java",
  "functionName": "writeCredentials",
  "functionId": "writeCredentials___nmPrivateCTokensPath-Path",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
  "functionStartLine": 1332,
  "functionEndLine": 1370,
  "numCommitsSeen": 106,
  "timeTaken": 3948,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "37d939a453d1052878a2a1aab7588cbac48a824d",
    "6c7a9d502a633b5aca75c9798f19ce4a5729014e",
    "a16d022ca4313a41425c8e97841c841a2d6f2f54",
    "0a887a091023073b91b1a789a52e3a26e9b24bae",
    "3f809667bc397ea372efe4b8f1aae7e2729b8ca0",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "6217e54718fc0ba8845ef8cc5a558fe67d98c18e"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "37d939a453d1052878a2a1aab7588cbac48a824d": "Ybodychange",
    "6c7a9d502a633b5aca75c9798f19ce4a5729014e": "Ybodychange",
    "a16d022ca4313a41425c8e97841c841a2d6f2f54": "Ybodychange",
    "0a887a091023073b91b1a789a52e3a26e9b24bae": "Ybodychange",
    "3f809667bc397ea372efe4b8f1aae7e2729b8ca0": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "6217e54718fc0ba8845ef8cc5a558fe67d98c18e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "14/11/18 12:22 PM",
      "commitNameOld": "21ec4bdaef4b68adbbf4f33a6f74494c074f803c",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 121.12,
      "commitsBetweenForRepo": 889,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,39 @@\n     private void writeCredentials(Path nmPrivateCTokensPath)\n         throws IOException {\n       DataOutputStream tokenOut \u003d null;\n       try {\n         Credentials credentials \u003d context.getCredentials();\n         if (UserGroupInformation.isSecurityEnabled()) {\n           Credentials systemCredentials \u003d\n               getSystemCredentialsSentFromRM(context);\n           if (systemCredentials !\u003d null) {\n             credentials \u003d systemCredentials;\n           }\n         }\n \n         FileContext lfs \u003d getLocalFileContext(getConfig());\n         tokenOut \u003d\n             lfs.create(nmPrivateCTokensPath, EnumSet.of(CREATE, OVERWRITE));\n         LOG.info(\"Writing credentials to the nmPrivate file \"\n             + nmPrivateCTokensPath.toString());\n         if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Credentials list in \" + nmPrivateCTokensPath.toString()\n-              + \": \");\n+          LOG.debug(\"Credentials list in {}: \" + nmPrivateCTokensPath);\n           for (Token\u003c? extends TokenIdentifier\u003e tk : credentials\n               .getAllTokens()) {\n-            LOG.debug(tk + \" : \" + buildTokenFingerprint(tk));\n+            LOG.debug(\"{} : {}\", tk, buildTokenFingerprint(tk));\n           }\n         }\n         if (UserGroupInformation.isSecurityEnabled()) {\n           credentials \u003d new Credentials(credentials);\n           LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n           Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n               new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n           credentials.addToken(id.getKind(), localizerToken);\n         }\n         credentials.writeTokenStorageToStream(tokenOut);\n       } finally {\n         if (tokenOut !\u003d null) {\n           tokenOut.close();\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void writeCredentials(Path nmPrivateCTokensPath)\n        throws IOException {\n      DataOutputStream tokenOut \u003d null;\n      try {\n        Credentials credentials \u003d context.getCredentials();\n        if (UserGroupInformation.isSecurityEnabled()) {\n          Credentials systemCredentials \u003d\n              getSystemCredentialsSentFromRM(context);\n          if (systemCredentials !\u003d null) {\n            credentials \u003d systemCredentials;\n          }\n        }\n\n        FileContext lfs \u003d getLocalFileContext(getConfig());\n        tokenOut \u003d\n            lfs.create(nmPrivateCTokensPath, EnumSet.of(CREATE, OVERWRITE));\n        LOG.info(\"Writing credentials to the nmPrivate file \"\n            + nmPrivateCTokensPath.toString());\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Credentials list in {}: \" + nmPrivateCTokensPath);\n          for (Token\u003c? extends TokenIdentifier\u003e tk : credentials\n              .getAllTokens()) {\n            LOG.debug(\"{} : {}\", tk, buildTokenFingerprint(tk));\n          }\n        }\n        if (UserGroupInformation.isSecurityEnabled()) {\n          credentials \u003d new Credentials(credentials);\n          LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n          Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n              new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n          credentials.addToken(id.getKind(), localizerToken);\n        }\n        credentials.writeTokenStorageToStream(tokenOut);\n      } finally {\n        if (tokenOut !\u003d null) {\n          tokenOut.close();\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "37d939a453d1052878a2a1aab7588cbac48a824d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4910. Fix incomplete log info in ResourceLocalizationService (Jun Gong via Varun Saxena)\n",
      "commitDate": "08/08/16 9:42 AM",
      "commitName": "37d939a453d1052878a2a1aab7588cbac48a824d",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 54.78,
      "commitsBetweenForRepo": 491,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n     private void writeCredentials(Path nmPrivateCTokensPath)\n         throws IOException {\n       DataOutputStream tokenOut \u003d null;\n       try {\n         Credentials credentials \u003d context.getCredentials();\n         if (UserGroupInformation.isSecurityEnabled()) {\n           Credentials systemCredentials \u003d\n               getSystemCredentialsSentFromRM(context);\n           if (systemCredentials !\u003d null) {\n             credentials \u003d systemCredentials;\n           }\n         }\n \n         FileContext lfs \u003d getLocalFileContext(getConfig());\n         tokenOut \u003d\n             lfs.create(nmPrivateCTokensPath, EnumSet.of(CREATE, OVERWRITE));\n         LOG.info(\"Writing credentials to the nmPrivate file \"\n-            + nmPrivateCTokensPath.toString() + \". Credentials list: \");\n+            + nmPrivateCTokensPath.toString());\n         if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Credentials list in \" + nmPrivateCTokensPath.toString()\n+              + \": \");\n           for (Token\u003c? extends TokenIdentifier\u003e tk : credentials\n               .getAllTokens()) {\n             LOG.debug(tk + \" : \" + buildTokenFingerprint(tk));\n           }\n         }\n         if (UserGroupInformation.isSecurityEnabled()) {\n           credentials \u003d new Credentials(credentials);\n           LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n           Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n               new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n           credentials.addToken(id.getKind(), localizerToken);\n         }\n         credentials.writeTokenStorageToStream(tokenOut);\n       } finally {\n         if (tokenOut !\u003d null) {\n           tokenOut.close();\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void writeCredentials(Path nmPrivateCTokensPath)\n        throws IOException {\n      DataOutputStream tokenOut \u003d null;\n      try {\n        Credentials credentials \u003d context.getCredentials();\n        if (UserGroupInformation.isSecurityEnabled()) {\n          Credentials systemCredentials \u003d\n              getSystemCredentialsSentFromRM(context);\n          if (systemCredentials !\u003d null) {\n            credentials \u003d systemCredentials;\n          }\n        }\n\n        FileContext lfs \u003d getLocalFileContext(getConfig());\n        tokenOut \u003d\n            lfs.create(nmPrivateCTokensPath, EnumSet.of(CREATE, OVERWRITE));\n        LOG.info(\"Writing credentials to the nmPrivate file \"\n            + nmPrivateCTokensPath.toString());\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Credentials list in \" + nmPrivateCTokensPath.toString()\n              + \": \");\n          for (Token\u003c? extends TokenIdentifier\u003e tk : credentials\n              .getAllTokens()) {\n            LOG.debug(tk + \" : \" + buildTokenFingerprint(tk));\n          }\n        }\n        if (UserGroupInformation.isSecurityEnabled()) {\n          credentials \u003d new Credentials(credentials);\n          LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n          Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n              new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n          credentials.addToken(id.getKind(), localizerToken);\n        }\n        credentials.writeTokenStorageToStream(tokenOut);\n      } finally {\n        if (tokenOut !\u003d null) {\n          tokenOut.close();\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "6c7a9d502a633b5aca75c9798f19ce4a5729014e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3834. Scrub debug logging of tokens during resource localization. Contributed by Chris Nauroth\n",
      "commitDate": "21/06/15 5:13 PM",
      "commitName": "6c7a9d502a633b5aca75c9798f19ce4a5729014e",
      "commitAuthor": "Xuan",
      "commitDateOld": "21/05/15 3:50 PM",
      "commitNameOld": "53fafcf061616516c24e2e2007a66a93d23d3e25",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 31.06,
      "commitsBetweenForRepo": 207,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     private void writeCredentials(Path nmPrivateCTokensPath)\n         throws IOException {\n       DataOutputStream tokenOut \u003d null;\n       try {\n         Credentials credentials \u003d context.getCredentials();\n         if (UserGroupInformation.isSecurityEnabled()) {\n           Credentials systemCredentials \u003d\n               getSystemCredentialsSentFromRM(context);\n           if (systemCredentials !\u003d null) {\n             credentials \u003d systemCredentials;\n           }\n         }\n \n         FileContext lfs \u003d getLocalFileContext(getConfig());\n         tokenOut \u003d\n             lfs.create(nmPrivateCTokensPath, EnumSet.of(CREATE, OVERWRITE));\n         LOG.info(\"Writing credentials to the nmPrivate file \"\n             + nmPrivateCTokensPath.toString() + \". Credentials list: \");\n         if (LOG.isDebugEnabled()) {\n           for (Token\u003c? extends TokenIdentifier\u003e tk : credentials\n               .getAllTokens()) {\n-            LOG.debug(tk.getService() + \" : \" + tk.encodeToUrlString());\n+            LOG.debug(tk + \" : \" + buildTokenFingerprint(tk));\n           }\n         }\n         if (UserGroupInformation.isSecurityEnabled()) {\n           credentials \u003d new Credentials(credentials);\n           LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n           Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n               new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n           credentials.addToken(id.getKind(), localizerToken);\n         }\n         credentials.writeTokenStorageToStream(tokenOut);\n       } finally {\n         if (tokenOut !\u003d null) {\n           tokenOut.close();\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void writeCredentials(Path nmPrivateCTokensPath)\n        throws IOException {\n      DataOutputStream tokenOut \u003d null;\n      try {\n        Credentials credentials \u003d context.getCredentials();\n        if (UserGroupInformation.isSecurityEnabled()) {\n          Credentials systemCredentials \u003d\n              getSystemCredentialsSentFromRM(context);\n          if (systemCredentials !\u003d null) {\n            credentials \u003d systemCredentials;\n          }\n        }\n\n        FileContext lfs \u003d getLocalFileContext(getConfig());\n        tokenOut \u003d\n            lfs.create(nmPrivateCTokensPath, EnumSet.of(CREATE, OVERWRITE));\n        LOG.info(\"Writing credentials to the nmPrivate file \"\n            + nmPrivateCTokensPath.toString() + \". Credentials list: \");\n        if (LOG.isDebugEnabled()) {\n          for (Token\u003c? extends TokenIdentifier\u003e tk : credentials\n              .getAllTokens()) {\n            LOG.debug(tk + \" : \" + buildTokenFingerprint(tk));\n          }\n        }\n        if (UserGroupInformation.isSecurityEnabled()) {\n          credentials \u003d new Credentials(credentials);\n          LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n          Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n              new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n          credentials.addToken(id.getKind(), localizerToken);\n        }\n        credentials.writeTokenStorageToStream(tokenOut);\n      } finally {\n        if (tokenOut !\u003d null) {\n          tokenOut.close();\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "a16d022ca4313a41425c8e97841c841a2d6f2f54": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2704. Changed ResourceManager to optionally obtain tokens itself for the sake of localization and log-aggregation for long-running services. Contributed by Jian He.\n",
      "commitDate": "27/10/14 3:49 PM",
      "commitName": "a16d022ca4313a41425c8e97841c841a2d6f2f54",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "22/10/14 3:57 PM",
      "commitNameOld": "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 4.99,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,38 @@\n     private void writeCredentials(Path nmPrivateCTokensPath)\n         throws IOException {\n       DataOutputStream tokenOut \u003d null;\n       try {\n         Credentials credentials \u003d context.getCredentials();\n+        if (UserGroupInformation.isSecurityEnabled()) {\n+          Credentials systemCredentials \u003d\n+              getSystemCredentialsSentFromRM(context);\n+          if (systemCredentials !\u003d null) {\n+            credentials \u003d systemCredentials;\n+          }\n+        }\n+\n         FileContext lfs \u003d getLocalFileContext(getConfig());\n         tokenOut \u003d\n             lfs.create(nmPrivateCTokensPath, EnumSet.of(CREATE, OVERWRITE));\n         LOG.info(\"Writing credentials to the nmPrivate file \"\n             + nmPrivateCTokensPath.toString() + \". Credentials list: \");\n         if (LOG.isDebugEnabled()) {\n           for (Token\u003c? extends TokenIdentifier\u003e tk : credentials\n               .getAllTokens()) {\n             LOG.debug(tk.getService() + \" : \" + tk.encodeToUrlString());\n           }\n         }\n         if (UserGroupInformation.isSecurityEnabled()) {\n           credentials \u003d new Credentials(credentials);\n           LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n           Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n               new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n           credentials.addToken(id.getKind(), localizerToken);\n         }\n         credentials.writeTokenStorageToStream(tokenOut);\n       } finally {\n         if (tokenOut !\u003d null) {\n           tokenOut.close();\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void writeCredentials(Path nmPrivateCTokensPath)\n        throws IOException {\n      DataOutputStream tokenOut \u003d null;\n      try {\n        Credentials credentials \u003d context.getCredentials();\n        if (UserGroupInformation.isSecurityEnabled()) {\n          Credentials systemCredentials \u003d\n              getSystemCredentialsSentFromRM(context);\n          if (systemCredentials !\u003d null) {\n            credentials \u003d systemCredentials;\n          }\n        }\n\n        FileContext lfs \u003d getLocalFileContext(getConfig());\n        tokenOut \u003d\n            lfs.create(nmPrivateCTokensPath, EnumSet.of(CREATE, OVERWRITE));\n        LOG.info(\"Writing credentials to the nmPrivate file \"\n            + nmPrivateCTokensPath.toString() + \". Credentials list: \");\n        if (LOG.isDebugEnabled()) {\n          for (Token\u003c? extends TokenIdentifier\u003e tk : credentials\n              .getAllTokens()) {\n            LOG.debug(tk.getService() + \" : \" + tk.encodeToUrlString());\n          }\n        }\n        if (UserGroupInformation.isSecurityEnabled()) {\n          credentials \u003d new Credentials(credentials);\n          LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n          Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n              new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n          credentials.addToken(id.getKind(), localizerToken);\n        }\n        credentials.writeTokenStorageToStream(tokenOut);\n      } finally {\n        if (tokenOut !\u003d null) {\n          tokenOut.close();\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "0a887a091023073b91b1a789a52e3a26e9b24bae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1254. Fixed NodeManager to not pollute container\u0027s credentials. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529382 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/10/13 9:25 PM",
      "commitName": "0a887a091023073b91b1a789a52e3a26e9b24bae",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "01/08/13 12:34 PM",
      "commitNameOld": "4757963d3294b6492156a569af8d370436569aff",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 64.37,
      "commitsBetweenForRepo": 380,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n     private void writeCredentials(Path nmPrivateCTokensPath)\n         throws IOException {\n       DataOutputStream tokenOut \u003d null;\n       try {\n         Credentials credentials \u003d context.getCredentials();\n         FileContext lfs \u003d getLocalFileContext(getConfig());\n         tokenOut \u003d\n             lfs.create(nmPrivateCTokensPath, EnumSet.of(CREATE, OVERWRITE));\n         LOG.info(\"Writing credentials to the nmPrivate file \"\n             + nmPrivateCTokensPath.toString() + \". Credentials list: \");\n         if (LOG.isDebugEnabled()) {\n           for (Token\u003c? extends TokenIdentifier\u003e tk : credentials\n               .getAllTokens()) {\n             LOG.debug(tk.getService() + \" : \" + tk.encodeToUrlString());\n           }\n         }\n         if (UserGroupInformation.isSecurityEnabled()) {\n+          credentials \u003d new Credentials(credentials);\n           LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n           Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n               new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n           credentials.addToken(id.getKind(), localizerToken);\n         }\n         credentials.writeTokenStorageToStream(tokenOut);\n       } finally {\n         if (tokenOut !\u003d null) {\n           tokenOut.close();\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void writeCredentials(Path nmPrivateCTokensPath)\n        throws IOException {\n      DataOutputStream tokenOut \u003d null;\n      try {\n        Credentials credentials \u003d context.getCredentials();\n        FileContext lfs \u003d getLocalFileContext(getConfig());\n        tokenOut \u003d\n            lfs.create(nmPrivateCTokensPath, EnumSet.of(CREATE, OVERWRITE));\n        LOG.info(\"Writing credentials to the nmPrivate file \"\n            + nmPrivateCTokensPath.toString() + \". Credentials list: \");\n        if (LOG.isDebugEnabled()) {\n          for (Token\u003c? extends TokenIdentifier\u003e tk : credentials\n              .getAllTokens()) {\n            LOG.debug(tk.getService() + \" : \" + tk.encodeToUrlString());\n          }\n        }\n        if (UserGroupInformation.isSecurityEnabled()) {\n          credentials \u003d new Credentials(credentials);\n          LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n          Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n              new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n          credentials.addToken(id.getKind(), localizerToken);\n        }\n        credentials.writeTokenStorageToStream(tokenOut);\n      } finally {\n        if (tokenOut !\u003d null) {\n          tokenOut.close();\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "3f809667bc397ea372efe4b8f1aae7e2729b8ca0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-854. Fixing YARN bugs that are failing applications in secure environment. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494845 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/13 8:41 PM",
      "commitName": "3f809667bc397ea372efe4b8f1aae7e2729b8ca0",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/06/13 11:39 PM",
      "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.88,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,29 @@\n     private void writeCredentials(Path nmPrivateCTokensPath)\n         throws IOException {\n       DataOutputStream tokenOut \u003d null;\n       try {\n         Credentials credentials \u003d context.getCredentials();\n         FileContext lfs \u003d getLocalFileContext(getConfig());\n         tokenOut \u003d\n             lfs.create(nmPrivateCTokensPath, EnumSet.of(CREATE, OVERWRITE));\n         LOG.info(\"Writing credentials to the nmPrivate file \"\n             + nmPrivateCTokensPath.toString() + \". Credentials list: \");\n         if (LOG.isDebugEnabled()) {\n           for (Token\u003c? extends TokenIdentifier\u003e tk : credentials\n               .getAllTokens()) {\n             LOG.debug(tk.getService() + \" : \" + tk.encodeToUrlString());\n           }\n         }\n+        if (UserGroupInformation.isSecurityEnabled()) {\n+          LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n+          Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n+              new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n+          credentials.addToken(id.getKind(), localizerToken);\n+        }\n         credentials.writeTokenStorageToStream(tokenOut);\n       } finally {\n         if (tokenOut !\u003d null) {\n           tokenOut.close();\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void writeCredentials(Path nmPrivateCTokensPath)\n        throws IOException {\n      DataOutputStream tokenOut \u003d null;\n      try {\n        Credentials credentials \u003d context.getCredentials();\n        FileContext lfs \u003d getLocalFileContext(getConfig());\n        tokenOut \u003d\n            lfs.create(nmPrivateCTokensPath, EnumSet.of(CREATE, OVERWRITE));\n        LOG.info(\"Writing credentials to the nmPrivate file \"\n            + nmPrivateCTokensPath.toString() + \". Credentials list: \");\n        if (LOG.isDebugEnabled()) {\n          for (Token\u003c? extends TokenIdentifier\u003e tk : credentials\n              .getAllTokens()) {\n            LOG.debug(tk.getService() + \" : \" + tk.encodeToUrlString());\n          }\n        }\n        if (UserGroupInformation.isSecurityEnabled()) {\n          LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n          Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n              new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n          credentials.addToken(id.getKind(), localizerToken);\n        }\n        credentials.writeTokenStorageToStream(tokenOut);\n      } finally {\n        if (tokenOut !\u003d null) {\n          tokenOut.close();\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void writeCredentials(Path nmPrivateCTokensPath)\n        throws IOException {\n      DataOutputStream tokenOut \u003d null;\n      try {\n        Credentials credentials \u003d context.getCredentials();\n        FileContext lfs \u003d getLocalFileContext(getConfig());\n        tokenOut \u003d\n            lfs.create(nmPrivateCTokensPath, EnumSet.of(CREATE, OVERWRITE));\n        LOG.info(\"Writing credentials to the nmPrivate file \"\n            + nmPrivateCTokensPath.toString() + \". Credentials list: \");\n        if (LOG.isDebugEnabled()) {\n          for (Token\u003c? extends TokenIdentifier\u003e tk : credentials\n              .getAllTokens()) {\n            LOG.debug(tk.getService() + \" : \" + tk.encodeToUrlString());\n          }\n        }\n        credentials.writeTokenStorageToStream(tokenOut);\n      } finally {\n        if (tokenOut !\u003d null) {\n          tokenOut.close();\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java"
      }
    },
    "6217e54718fc0ba8845ef8cc5a558fe67d98c18e": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3159. Ensure DefaultContainerExecutor doesn\u0027t delete application directories during app-init. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1188466 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/11 5:36 PM",
      "commitName": "6217e54718fc0ba8845ef8cc5a558fe67d98c18e",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,23 @@\n+    private void writeCredentials(Path nmPrivateCTokensPath)\n+        throws IOException {\n+      DataOutputStream tokenOut \u003d null;\n+      try {\n+        Credentials credentials \u003d context.getCredentials();\n+        FileContext lfs \u003d getLocalFileContext(getConfig());\n+        tokenOut \u003d\n+            lfs.create(nmPrivateCTokensPath, EnumSet.of(CREATE, OVERWRITE));\n+        LOG.info(\"Writing credentials to the nmPrivate file \"\n+            + nmPrivateCTokensPath.toString() + \". Credentials list: \");\n+        if (LOG.isDebugEnabled()) {\n+          for (Token\u003c? extends TokenIdentifier\u003e tk : credentials\n+              .getAllTokens()) {\n+            LOG.debug(tk.getService() + \" : \" + tk.encodeToUrlString());\n+          }\n+        }\n+        credentials.writeTokenStorageToStream(tokenOut);\n+      } finally {\n+        if (tokenOut !\u003d null) {\n+          tokenOut.close();\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void writeCredentials(Path nmPrivateCTokensPath)\n        throws IOException {\n      DataOutputStream tokenOut \u003d null;\n      try {\n        Credentials credentials \u003d context.getCredentials();\n        FileContext lfs \u003d getLocalFileContext(getConfig());\n        tokenOut \u003d\n            lfs.create(nmPrivateCTokensPath, EnumSet.of(CREATE, OVERWRITE));\n        LOG.info(\"Writing credentials to the nmPrivate file \"\n            + nmPrivateCTokensPath.toString() + \". Credentials list: \");\n        if (LOG.isDebugEnabled()) {\n          for (Token\u003c? extends TokenIdentifier\u003e tk : credentials\n              .getAllTokens()) {\n            LOG.debug(tk.getService() + \" : \" + tk.encodeToUrlString());\n          }\n        }\n        credentials.writeTokenStorageToStream(tokenOut);\n      } finally {\n        if (tokenOut !\u003d null) {\n          tokenOut.close();\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java"
    }
  }
}