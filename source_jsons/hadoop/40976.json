{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSQueueConverter.java",
  "functionName": "emitMaximumCapacity",
  "functionId": "emitMaximumCapacity___queueName-String__queue-FSQueue",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java",
  "functionStartLine": 159,
  "functionEndLine": 170,
  "numCommitsSeen": 9,
  "timeTaken": 2245,
  "changeHistory": [
    "9314ef947f4f4620943be83a73a170d9fcf3b020",
    "24e6a9e43a210cdecaa8e87926eef09c869988f9",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d"
  ],
  "changeHistoryShort": {
    "9314ef947f4f4620943be83a73a170d9fcf3b020": "Ybodychange",
    "24e6a9e43a210cdecaa8e87926eef09c869988f9": "Ybodychange",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9314ef947f4f4620943be83a73a170d9fcf3b020": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10168. FS-CS Converter: tool doesn\u0027t handle min/max resource conversion correctly. Contributed by Peter Bacsko\n",
      "commitDate": "10/03/20 8:07 AM",
      "commitName": "9314ef947f4f4620943be83a73a170d9fcf3b020",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "05/03/20 12:56 AM",
      "commitNameOld": "004e95534817b3966d8e1727469c657cf1d043d7",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 5.26,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,12 @@\n   private void emitMaximumCapacity(String queueName, FSQueue queue) {\n     ConfigurableResource rawMaxShare \u003d queue.getRawMaxShare();\n     final Resource maxResource \u003d rawMaxShare.getResource();\n \n-    long memSize \u003d 0;\n-    long vCores \u003d 0;\n-    boolean defined \u003d false;\n-\n-    if (maxResource \u003d\u003d null) {\n-      if (rawMaxShare.getPercentages() !\u003d null) {\n-        if (clusterResource \u003d\u003d null) {\n-          String message \u003d String.format(\n-              \"\u003cmaxResources\u003e defined in percentages for\" +\n-              \" queue %s, but cluster resource parameter is not\" +\n-              \" defined via CLI!\", queueName);\n-\n-          conversionOptions.handleConversionError(message);\n-          return;\n-        }\n-\n-        ruleHandler.handleMaxCapacityPercentage(queueName);\n-\n-        double[] percentages \u003d rawMaxShare.getPercentages();\n-        int memIndex \u003d ResourceUtils.getResourceTypeIndex().get(\"memory-mb\");\n-        int vcoreIndex \u003d ResourceUtils.getResourceTypeIndex().get(\"vcores\");\n-\n-        memSize \u003d (long) (percentages[memIndex] *\n-            clusterResource.getMemorySize());\n-        vCores \u003d (long) (percentages[vcoreIndex] *\n-            clusterResource.getVirtualCores());\n-        defined \u003d true;\n-      } else {\n-        conversionOptions.handlePreconditionError(\n-            \"Illegal ConfigurableResource object \u003d \" + rawMaxShare);\n-      }\n-    } else if (isNotUnboundedResource(maxResource)) {\n-      memSize \u003d maxResource.getMemorySize();\n-      vCores \u003d maxResource.getVirtualCores();\n-      defined \u003d true;\n+    if ((maxResource \u003d\u003d null \u0026\u0026 rawMaxShare.getPercentages() !\u003d null)\n+        || isNotUnboundedResource(maxResource)) {\n+      ruleHandler.handleMaxResources();\n     }\n \n-    if (defined) {\n-      capacitySchedulerConfig.set(PREFIX + queueName + \".maximum-capacity\",\n-          String.format(\"[memory\u003d%d, vcores\u003d%d]\", memSize, vCores));\n-    }\n+    capacitySchedulerConfig.set(PREFIX + queueName + \".maximum-capacity\",\n+        \"100\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void emitMaximumCapacity(String queueName, FSQueue queue) {\n    ConfigurableResource rawMaxShare \u003d queue.getRawMaxShare();\n    final Resource maxResource \u003d rawMaxShare.getResource();\n\n    if ((maxResource \u003d\u003d null \u0026\u0026 rawMaxShare.getPercentages() !\u003d null)\n        || isNotUnboundedResource(maxResource)) {\n      ruleHandler.handleMaxResources();\n    }\n\n    capacitySchedulerConfig.set(PREFIX + queueName + \".maximum-capacity\",\n        \"100\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java",
      "extendedDetails": {}
    },
    "24e6a9e43a210cdecaa8e87926eef09c869988f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10067. Add dry-run feature to FS-CS converter tool. Contributed by Peter Bacsko\n",
      "commitDate": "12/01/20 4:48 AM",
      "commitName": "24e6a9e43a210cdecaa8e87926eef09c869988f9",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "14/10/19 8:19 AM",
      "commitNameOld": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 89.9,
      "commitsBetweenForRepo": 324,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,46 @@\n   private void emitMaximumCapacity(String queueName, FSQueue queue) {\n     ConfigurableResource rawMaxShare \u003d queue.getRawMaxShare();\n     final Resource maxResource \u003d rawMaxShare.getResource();\n \n     long memSize \u003d 0;\n     long vCores \u003d 0;\n     boolean defined \u003d false;\n \n     if (maxResource \u003d\u003d null) {\n       if (rawMaxShare.getPercentages() !\u003d null) {\n         if (clusterResource \u003d\u003d null) {\n-          throw new ConversionException(\n-              String.format(\"\u003cmaxResources\u003e defined in percentages for\" +\n-                  \" queue %s, but cluster resource parameter is not\" +\n-                  \" defined via CLI!\", queueName));\n+          String message \u003d String.format(\n+              \"\u003cmaxResources\u003e defined in percentages for\" +\n+              \" queue %s, but cluster resource parameter is not\" +\n+              \" defined via CLI!\", queueName);\n+\n+          conversionOptions.handleConversionError(message);\n+          return;\n         }\n \n         ruleHandler.handleMaxCapacityPercentage(queueName);\n \n         double[] percentages \u003d rawMaxShare.getPercentages();\n         int memIndex \u003d ResourceUtils.getResourceTypeIndex().get(\"memory-mb\");\n         int vcoreIndex \u003d ResourceUtils.getResourceTypeIndex().get(\"vcores\");\n \n         memSize \u003d (long) (percentages[memIndex] *\n             clusterResource.getMemorySize());\n         vCores \u003d (long) (percentages[vcoreIndex] *\n             clusterResource.getVirtualCores());\n         defined \u003d true;\n       } else {\n-        throw new PreconditionException(\n-            \"Illegal ConfigurableResource \u003d \" + rawMaxShare);\n+        conversionOptions.handlePreconditionError(\n+            \"Illegal ConfigurableResource object \u003d \" + rawMaxShare);\n       }\n     } else if (isNotUnboundedResource(maxResource)) {\n       memSize \u003d maxResource.getMemorySize();\n       vCores \u003d maxResource.getVirtualCores();\n       defined \u003d true;\n     }\n \n     if (defined) {\n       capacitySchedulerConfig.set(PREFIX + queueName + \".maximum-capacity\",\n           String.format(\"[memory\u003d%d, vcores\u003d%d]\", memSize, vCores));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void emitMaximumCapacity(String queueName, FSQueue queue) {\n    ConfigurableResource rawMaxShare \u003d queue.getRawMaxShare();\n    final Resource maxResource \u003d rawMaxShare.getResource();\n\n    long memSize \u003d 0;\n    long vCores \u003d 0;\n    boolean defined \u003d false;\n\n    if (maxResource \u003d\u003d null) {\n      if (rawMaxShare.getPercentages() !\u003d null) {\n        if (clusterResource \u003d\u003d null) {\n          String message \u003d String.format(\n              \"\u003cmaxResources\u003e defined in percentages for\" +\n              \" queue %s, but cluster resource parameter is not\" +\n              \" defined via CLI!\", queueName);\n\n          conversionOptions.handleConversionError(message);\n          return;\n        }\n\n        ruleHandler.handleMaxCapacityPercentage(queueName);\n\n        double[] percentages \u003d rawMaxShare.getPercentages();\n        int memIndex \u003d ResourceUtils.getResourceTypeIndex().get(\"memory-mb\");\n        int vcoreIndex \u003d ResourceUtils.getResourceTypeIndex().get(\"vcores\");\n\n        memSize \u003d (long) (percentages[memIndex] *\n            clusterResource.getMemorySize());\n        vCores \u003d (long) (percentages[vcoreIndex] *\n            clusterResource.getVirtualCores());\n        defined \u003d true;\n      } else {\n        conversionOptions.handlePreconditionError(\n            \"Illegal ConfigurableResource object \u003d \" + rawMaxShare);\n      }\n    } else if (isNotUnboundedResource(maxResource)) {\n      memSize \u003d maxResource.getMemorySize();\n      vCores \u003d maxResource.getVirtualCores();\n      defined \u003d true;\n    }\n\n    if (defined) {\n      capacitySchedulerConfig.set(PREFIX + queueName + \".maximum-capacity\",\n          String.format(\"[memory\u003d%d, vcores\u003d%d]\", memSize, vCores));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java",
      "extendedDetails": {}
    },
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9699. Migration tool that help to generate CS config based on FS config [Phase 1]. Contributed by Peter Bacsko\n",
      "commitDate": "14/10/19 8:19 AM",
      "commitName": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,43 @@\n+  private void emitMaximumCapacity(String queueName, FSQueue queue) {\n+    ConfigurableResource rawMaxShare \u003d queue.getRawMaxShare();\n+    final Resource maxResource \u003d rawMaxShare.getResource();\n+\n+    long memSize \u003d 0;\n+    long vCores \u003d 0;\n+    boolean defined \u003d false;\n+\n+    if (maxResource \u003d\u003d null) {\n+      if (rawMaxShare.getPercentages() !\u003d null) {\n+        if (clusterResource \u003d\u003d null) {\n+          throw new ConversionException(\n+              String.format(\"\u003cmaxResources\u003e defined in percentages for\" +\n+                  \" queue %s, but cluster resource parameter is not\" +\n+                  \" defined via CLI!\", queueName));\n+        }\n+\n+        ruleHandler.handleMaxCapacityPercentage(queueName);\n+\n+        double[] percentages \u003d rawMaxShare.getPercentages();\n+        int memIndex \u003d ResourceUtils.getResourceTypeIndex().get(\"memory-mb\");\n+        int vcoreIndex \u003d ResourceUtils.getResourceTypeIndex().get(\"vcores\");\n+\n+        memSize \u003d (long) (percentages[memIndex] *\n+            clusterResource.getMemorySize());\n+        vCores \u003d (long) (percentages[vcoreIndex] *\n+            clusterResource.getVirtualCores());\n+        defined \u003d true;\n+      } else {\n+        throw new PreconditionException(\n+            \"Illegal ConfigurableResource \u003d \" + rawMaxShare);\n+      }\n+    } else if (isNotUnboundedResource(maxResource)) {\n+      memSize \u003d maxResource.getMemorySize();\n+      vCores \u003d maxResource.getVirtualCores();\n+      defined \u003d true;\n+    }\n+\n+    if (defined) {\n+      capacitySchedulerConfig.set(PREFIX + queueName + \".maximum-capacity\",\n+          String.format(\"[memory\u003d%d, vcores\u003d%d]\", memSize, vCores));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void emitMaximumCapacity(String queueName, FSQueue queue) {\n    ConfigurableResource rawMaxShare \u003d queue.getRawMaxShare();\n    final Resource maxResource \u003d rawMaxShare.getResource();\n\n    long memSize \u003d 0;\n    long vCores \u003d 0;\n    boolean defined \u003d false;\n\n    if (maxResource \u003d\u003d null) {\n      if (rawMaxShare.getPercentages() !\u003d null) {\n        if (clusterResource \u003d\u003d null) {\n          throw new ConversionException(\n              String.format(\"\u003cmaxResources\u003e defined in percentages for\" +\n                  \" queue %s, but cluster resource parameter is not\" +\n                  \" defined via CLI!\", queueName));\n        }\n\n        ruleHandler.handleMaxCapacityPercentage(queueName);\n\n        double[] percentages \u003d rawMaxShare.getPercentages();\n        int memIndex \u003d ResourceUtils.getResourceTypeIndex().get(\"memory-mb\");\n        int vcoreIndex \u003d ResourceUtils.getResourceTypeIndex().get(\"vcores\");\n\n        memSize \u003d (long) (percentages[memIndex] *\n            clusterResource.getMemorySize());\n        vCores \u003d (long) (percentages[vcoreIndex] *\n            clusterResource.getVirtualCores());\n        defined \u003d true;\n      } else {\n        throw new PreconditionException(\n            \"Illegal ConfigurableResource \u003d \" + rawMaxShare);\n      }\n    } else if (isNotUnboundedResource(maxResource)) {\n      memSize \u003d maxResource.getMemorySize();\n      vCores \u003d maxResource.getVirtualCores();\n      defined \u003d true;\n    }\n\n    if (defined) {\n      capacitySchedulerConfig.set(PREFIX + queueName + \".maximum-capacity\",\n          String.format(\"[memory\u003d%d, vcores\u003d%d]\", memSize, vCores));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java"
    }
  }
}