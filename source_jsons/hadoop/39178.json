{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerApplicationAttempt.java",
  "functionName": "hasPendingResourceRequest",
  "functionId": "hasPendingResourceRequest___nodePartition-String__schedulingMode-SchedulingMode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
  "functionStartLine": 1303,
  "functionEndLine": 1322,
  "numCommitsSeen": 201,
  "timeTaken": 4583,
  "changeHistory": [
    "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5"
  ],
  "changeHistoryShort": {
    "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795": "Ymultichange(Yparameterchange,Ybodychange)",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ybodychange",
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6964. Fair scheduler misuses Resources operations. (Daniel Templeton and Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "20/07/18 10:46 AM",
      "commitName": "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795",
      "commitAuthor": "Haibo Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6964. Fair scheduler misuses Resources operations. (Daniel Templeton and Szilard Nemeth via Haibo Chen)\n",
          "commitDate": "20/07/18 10:46 AM",
          "commitName": "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "12/06/18 8:35 AM",
          "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 38.09,
          "commitsBetweenForRepo": 225,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,20 @@\n-  public boolean hasPendingResourceRequest(ResourceCalculator rc,\n-      String nodePartition, Resource cluster,\n+  public boolean hasPendingResourceRequest(String nodePartition,\n       SchedulingMode schedulingMode) {\n     // We need to consider unconfirmed allocations\n     if (schedulingMode \u003d\u003d SchedulingMode.IGNORE_PARTITION_EXCLUSIVITY) {\n       nodePartition \u003d RMNodeLabelsManager.NO_LABEL;\n     }\n \n     Resource pending \u003d attemptResourceUsage.getPending(nodePartition);\n \n     // TODO, need consider node partition here\n     // To avoid too many allocation-proposals rejected for non-default\n     // partition allocation\n     if (StringUtils.equals(nodePartition, RMNodeLabelsManager.NO_LABEL)) {\n-      pending \u003d Resources.subtract(pending, Resources\n+      pending \u003d Resources.subtractNonNegative(pending, Resources\n           .createResource(unconfirmedAllocatedMem.get(),\n               unconfirmedAllocatedVcores.get()));\n     }\n \n-    if (Resources.greaterThan(rc, cluster, pending, Resources.none())) {\n-      return true;\n-    }\n-\n-    return false;\n+    return !Resources.isNone(pending);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean hasPendingResourceRequest(String nodePartition,\n      SchedulingMode schedulingMode) {\n    // We need to consider unconfirmed allocations\n    if (schedulingMode \u003d\u003d SchedulingMode.IGNORE_PARTITION_EXCLUSIVITY) {\n      nodePartition \u003d RMNodeLabelsManager.NO_LABEL;\n    }\n\n    Resource pending \u003d attemptResourceUsage.getPending(nodePartition);\n\n    // TODO, need consider node partition here\n    // To avoid too many allocation-proposals rejected for non-default\n    // partition allocation\n    if (StringUtils.equals(nodePartition, RMNodeLabelsManager.NO_LABEL)) {\n      pending \u003d Resources.subtractNonNegative(pending, Resources\n          .createResource(unconfirmedAllocatedMem.get(),\n              unconfirmedAllocatedVcores.get()));\n    }\n\n    return !Resources.isNone(pending);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {
            "oldValue": "[rc-ResourceCalculator, nodePartition-String, cluster-Resource, schedulingMode-SchedulingMode]",
            "newValue": "[nodePartition-String, schedulingMode-SchedulingMode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6964. Fair scheduler misuses Resources operations. (Daniel Templeton and Szilard Nemeth via Haibo Chen)\n",
          "commitDate": "20/07/18 10:46 AM",
          "commitName": "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "12/06/18 8:35 AM",
          "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 38.09,
          "commitsBetweenForRepo": 225,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,20 @@\n-  public boolean hasPendingResourceRequest(ResourceCalculator rc,\n-      String nodePartition, Resource cluster,\n+  public boolean hasPendingResourceRequest(String nodePartition,\n       SchedulingMode schedulingMode) {\n     // We need to consider unconfirmed allocations\n     if (schedulingMode \u003d\u003d SchedulingMode.IGNORE_PARTITION_EXCLUSIVITY) {\n       nodePartition \u003d RMNodeLabelsManager.NO_LABEL;\n     }\n \n     Resource pending \u003d attemptResourceUsage.getPending(nodePartition);\n \n     // TODO, need consider node partition here\n     // To avoid too many allocation-proposals rejected for non-default\n     // partition allocation\n     if (StringUtils.equals(nodePartition, RMNodeLabelsManager.NO_LABEL)) {\n-      pending \u003d Resources.subtract(pending, Resources\n+      pending \u003d Resources.subtractNonNegative(pending, Resources\n           .createResource(unconfirmedAllocatedMem.get(),\n               unconfirmedAllocatedVcores.get()));\n     }\n \n-    if (Resources.greaterThan(rc, cluster, pending, Resources.none())) {\n-      return true;\n-    }\n-\n-    return false;\n+    return !Resources.isNone(pending);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean hasPendingResourceRequest(String nodePartition,\n      SchedulingMode schedulingMode) {\n    // We need to consider unconfirmed allocations\n    if (schedulingMode \u003d\u003d SchedulingMode.IGNORE_PARTITION_EXCLUSIVITY) {\n      nodePartition \u003d RMNodeLabelsManager.NO_LABEL;\n    }\n\n    Resource pending \u003d attemptResourceUsage.getPending(nodePartition);\n\n    // TODO, need consider node partition here\n    // To avoid too many allocation-proposals rejected for non-default\n    // partition allocation\n    if (StringUtils.equals(nodePartition, RMNodeLabelsManager.NO_LABEL)) {\n      pending \u003d Resources.subtractNonNegative(pending, Resources\n          .createResource(unconfirmedAllocatedMem.get(),\n              unconfirmedAllocatedVcores.get()));\n    }\n\n    return !Resources.isNone(pending);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "04/10/16 5:23 PM",
      "commitNameOld": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 33.74,
      "commitsBetweenForRepo": 321,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,25 @@\n   public boolean hasPendingResourceRequest(ResourceCalculator rc,\n       String nodePartition, Resource cluster,\n       SchedulingMode schedulingMode) {\n-    return SchedulerUtils.hasPendingResourceRequest(rc,\n-        this.attemptResourceUsage, nodePartition, cluster,\n-        schedulingMode);\n+    // We need to consider unconfirmed allocations\n+    if (schedulingMode \u003d\u003d SchedulingMode.IGNORE_PARTITION_EXCLUSIVITY) {\n+      nodePartition \u003d RMNodeLabelsManager.NO_LABEL;\n+    }\n+\n+    Resource pending \u003d attemptResourceUsage.getPending(nodePartition);\n+\n+    // TODO, need consider node partition here\n+    // To avoid too many allocation-proposals rejected for non-default\n+    // partition allocation\n+    if (StringUtils.equals(nodePartition, RMNodeLabelsManager.NO_LABEL)) {\n+      pending \u003d Resources.subtract(pending, Resources\n+          .createResource(unconfirmedAllocatedMem.get(),\n+              unconfirmedAllocatedVcores.get()));\n+    }\n+\n+    if (Resources.greaterThan(rc, cluster, pending, Resources.none())) {\n+      return true;\n+    }\n+\n+    return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean hasPendingResourceRequest(ResourceCalculator rc,\n      String nodePartition, Resource cluster,\n      SchedulingMode schedulingMode) {\n    // We need to consider unconfirmed allocations\n    if (schedulingMode \u003d\u003d SchedulingMode.IGNORE_PARTITION_EXCLUSIVITY) {\n      nodePartition \u003d RMNodeLabelsManager.NO_LABEL;\n    }\n\n    Resource pending \u003d attemptResourceUsage.getPending(nodePartition);\n\n    // TODO, need consider node partition here\n    // To avoid too many allocation-proposals rejected for non-default\n    // partition allocation\n    if (StringUtils.equals(nodePartition, RMNodeLabelsManager.NO_LABEL)) {\n      pending \u003d Resources.subtract(pending, Resources\n          .createResource(unconfirmedAllocatedMem.get(),\n              unconfirmedAllocatedVcores.get()));\n    }\n\n    if (Resources.greaterThan(rc, cluster, pending, Resources.none())) {\n      return true;\n    }\n\n    return false;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3361. CapacityScheduler side changes to support non-exclusive node labels. Contributed by Wangda Tan\n",
      "commitDate": "14/04/15 11:45 AM",
      "commitName": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,7 @@\n+  public boolean hasPendingResourceRequest(ResourceCalculator rc,\n+      String nodePartition, Resource cluster,\n+      SchedulingMode schedulingMode) {\n+    return SchedulerUtils.hasPendingResourceRequest(rc,\n+        this.attemptResourceUsage, nodePartition, cluster,\n+        schedulingMode);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean hasPendingResourceRequest(ResourceCalculator rc,\n      String nodePartition, Resource cluster,\n      SchedulingMode schedulingMode) {\n    return SchedulerUtils.hasPendingResourceRequest(rc,\n        this.attemptResourceUsage, nodePartition, cluster,\n        schedulingMode);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java"
    }
  }
}