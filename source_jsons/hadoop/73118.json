{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CryptoInputStream.java",
  "functionName": "skip",
  "functionId": "skip___n-long",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
  "functionStartLine": 546,
  "functionEndLine": 573,
  "numCommitsSeen": 19,
  "timeTaken": 946,
  "changeHistory": [
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d",
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d"
  ],
  "changeHistoryShort": {
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d": "Ybodychange",
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10628. Javadoc and few code style improvement for Crypto input and output streams. (yliu via clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1598429 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/14 3:09 PM",
      "commitName": "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d",
      "commitAuthor": "Charles Lamb",
      "commitDateOld": "23/05/14 6:19 PM",
      "commitNameOld": "b20180ffa6c89396d9fcfec8b029b9c600503c3d",
      "commitAuthorOld": "Yi Liu",
      "daysBetweenCommits": 5.87,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public long skip(long n) throws IOException {\n     Preconditions.checkArgument(n \u003e\u003d 0, \"Negative skip length.\");\n     checkStream();\n     \n     if (n \u003d\u003d 0) {\n       return 0;\n     } else if (n \u003c\u003d outBuffer.remaining()) {\n       int pos \u003d outBuffer.position() + (int) n;\n       outBuffer.position(pos);\n       return n;\n     } else {\n-      /**\n+      /*\n        * Subtract outBuffer.remaining() to see how many bytes we need to \n-       * skip in underlying stream. We get real skipped bytes number of \n-       * underlying stream then add outBuffer.remaining() to get skipped\n-       * bytes number from user\u0027s view.\n+       * skip in the underlying stream. Add outBuffer.remaining() to the \n+       * actual number of skipped bytes in the underlying stream to get the \n+       * number of skipped bytes from the user\u0027s point of view.\n        */\n       n -\u003d outBuffer.remaining();\n       long skipped \u003d in.skip(n);\n       if (skipped \u003c 0) {\n         skipped \u003d 0;\n       }\n       long pos \u003d streamOffset + skipped;\n       skipped +\u003d outBuffer.remaining();\n       resetStreamOffset(pos);\n       return skipped;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long skip(long n) throws IOException {\n    Preconditions.checkArgument(n \u003e\u003d 0, \"Negative skip length.\");\n    checkStream();\n    \n    if (n \u003d\u003d 0) {\n      return 0;\n    } else if (n \u003c\u003d outBuffer.remaining()) {\n      int pos \u003d outBuffer.position() + (int) n;\n      outBuffer.position(pos);\n      return n;\n    } else {\n      /*\n       * Subtract outBuffer.remaining() to see how many bytes we need to \n       * skip in the underlying stream. Add outBuffer.remaining() to the \n       * actual number of skipped bytes in the underlying stream to get the \n       * number of skipped bytes from the user\u0027s point of view.\n       */\n      n -\u003d outBuffer.remaining();\n      long skipped \u003d in.skip(n);\n      if (skipped \u003c 0) {\n        skipped \u003d 0;\n      }\n      long pos \u003d streamOffset + skipped;\n      skipped +\u003d outBuffer.remaining();\n      resetStreamOffset(pos);\n      return skipped;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
      "extendedDetails": {}
    },
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10603. Crypto input and output streams implementing Hadoop stream interfaces. Contributed by Yi Liu and Charles Lamb.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1597230 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 6:19 PM",
      "commitName": "b20180ffa6c89396d9fcfec8b029b9c600503c3d",
      "commitAuthor": "Yi Liu",
      "diff": "@@ -0,0 +1,28 @@\n+  public long skip(long n) throws IOException {\n+    Preconditions.checkArgument(n \u003e\u003d 0, \"Negative skip length.\");\n+    checkStream();\n+    \n+    if (n \u003d\u003d 0) {\n+      return 0;\n+    } else if (n \u003c\u003d outBuffer.remaining()) {\n+      int pos \u003d outBuffer.position() + (int) n;\n+      outBuffer.position(pos);\n+      return n;\n+    } else {\n+      /**\n+       * Subtract outBuffer.remaining() to see how many bytes we need to \n+       * skip in underlying stream. We get real skipped bytes number of \n+       * underlying stream then add outBuffer.remaining() to get skipped\n+       * bytes number from user\u0027s view.\n+       */\n+      n -\u003d outBuffer.remaining();\n+      long skipped \u003d in.skip(n);\n+      if (skipped \u003c 0) {\n+        skipped \u003d 0;\n+      }\n+      long pos \u003d streamOffset + skipped;\n+      skipped +\u003d outBuffer.remaining();\n+      resetStreamOffset(pos);\n+      return skipped;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public long skip(long n) throws IOException {\n    Preconditions.checkArgument(n \u003e\u003d 0, \"Negative skip length.\");\n    checkStream();\n    \n    if (n \u003d\u003d 0) {\n      return 0;\n    } else if (n \u003c\u003d outBuffer.remaining()) {\n      int pos \u003d outBuffer.position() + (int) n;\n      outBuffer.position(pos);\n      return n;\n    } else {\n      /**\n       * Subtract outBuffer.remaining() to see how many bytes we need to \n       * skip in underlying stream. We get real skipped bytes number of \n       * underlying stream then add outBuffer.remaining() to get skipped\n       * bytes number from user\u0027s view.\n       */\n      n -\u003d outBuffer.remaining();\n      long skipped \u003d in.skip(n);\n      if (skipped \u003c 0) {\n        skipped \u003d 0;\n      }\n      long pos \u003d streamOffset + skipped;\n      skipped +\u003d outBuffer.remaining();\n      resetStreamOffset(pos);\n      return skipped;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java"
    }
  }
}