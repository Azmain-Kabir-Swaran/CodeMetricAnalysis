{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AFileSystem.java",
  "functionName": "open",
  "functionId": "open___f-Path__bufferSize-int",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
  "functionStartLine": 1066,
  "functionEndLine": 1069,
  "numCommitsSeen": 141,
  "timeTaken": 8319,
  "changeHistory": [
    "5e2ce370a322a46b496541ccd17443197fcfeb5a",
    "f365957c6326f88734bc0a5d01cfb7eac713db20",
    "6d0bffe17eadedd60d4599427248b0db4a7c5502",
    "7f783970364930cc461d1a73833bc58cdd10553e",
    "d7152332b32a575c3a92e3f4c44b95e58462528d",
    "8110d6a0d59e7dc2ddb25fa424fab188c5e9ce35",
    "7ac88244c54ce483729af3d2736d9f4731e230ca",
    "b62a5ece95a6b5bbb17f273debd55bcbf0c5f28c",
    "ef450df443f1dea1c52082cf281f25db7141972f",
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
    "839b690ed5edc2ac4984640d58c005bb63cd8a07",
    "4ee3543625c77c06d566fe81644d21c607d6d74d",
    "27c4e90efce04e1b1302f668b5eb22412e00d033",
    "aa1c437b6a806de612f030a68984c606c623f1d9",
    "24d920b80eb3626073925a1d0b6dcf148add8cc0"
  ],
  "changeHistoryShort": {
    "5e2ce370a322a46b496541ccd17443197fcfeb5a": "Ybodychange",
    "f365957c6326f88734bc0a5d01cfb7eac713db20": "Ybodychange",
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": "Ybodychange",
    "7f783970364930cc461d1a73833bc58cdd10553e": "Ybodychange",
    "d7152332b32a575c3a92e3f4c44b95e58462528d": "Ybodychange",
    "8110d6a0d59e7dc2ddb25fa424fab188c5e9ce35": "Ybodychange",
    "7ac88244c54ce483729af3d2736d9f4731e230ca": "Ybodychange",
    "b62a5ece95a6b5bbb17f273debd55bcbf0c5f28c": "Ybodychange",
    "ef450df443f1dea1c52082cf281f25db7141972f": "Ybodychange",
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": "Ybodychange",
    "839b690ed5edc2ac4984640d58c005bb63cd8a07": "Ybodychange",
    "4ee3543625c77c06d566fe81644d21c607d6d74d": "Ybodychange",
    "27c4e90efce04e1b1302f668b5eb22412e00d033": "Ybodychange",
    "aa1c437b6a806de612f030a68984c606c623f1d9": "Ybodychange",
    "24d920b80eb3626073925a1d0b6dcf148add8cc0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5e2ce370a322a46b496541ccd17443197fcfeb5a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16759. Filesystem openFile() builder to take a FileStatus param (#1761). Contributed by Steve Loughran\n\n* Enhanced builder + FS spec\r\n* s3a FS to use this to skip HEAD on open\r\n* and to use version/etag when opening the file\r\n\r\nworks with S3AFileStatus FS and S3ALocatedFileStatus",
      "commitDate": "21/01/20 2:31 PM",
      "commitName": "5e2ce370a322a46b496541ccd17443197fcfeb5a",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "10/01/20 3:11 AM",
      "commitNameOld": "49df83899543586bbcaf80f01399ade031cf68b0",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 11.47,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,4 @@\n   public FSDataInputStream open(Path f, int bufferSize)\n       throws IOException {\n-    return open(f, Optional.empty());\n+    return open(f, Optional.empty(), Optional.empty());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize)\n      throws IOException {\n    return open(f, Optional.empty(), Optional.empty());\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "f365957c6326f88734bc0a5d01cfb7eac713db20": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();\nS3A to implement S3 Select through this API.\n\nThe new openFile() API is asynchronous, and implemented across FileSystem and FileContext.\n\nThe MapReduce V2 inputs are moved to this API, and you can actually set must/may\noptions to pass in.\n\nThis is more useful for setting things like s3a seek policy than for S3 select,\nas the existing input format/record readers can\u0027t handle S3 select output where\nthe stream is shorter than the file length, and splitting plain text is suboptimal.\nFuture work is needed there.\n\nIn the meantime, any/all filesystem connectors are now free to add their own filesystem-specific\nconfiguration parameters which can be set in jobs and used to set filesystem input stream\noptions (seek policy, retry, encryption secrets, etc).\n\nContributed by Steve Loughran\n",
      "commitDate": "05/02/19 3:51 AM",
      "commitName": "f365957c6326f88734bc0a5d01cfb7eac713db20",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "14/01/19 9:59 AM",
      "commitNameOld": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 21.74,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,4 @@\n   public FSDataInputStream open(Path f, int bufferSize)\n       throws IOException {\n-    entryPoint(INVOCATION_OPEN);\n-    LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n-    final FileStatus fileStatus \u003d getFileStatus(f);\n-    if (fileStatus.isDirectory()) {\n-      throw new FileNotFoundException(\"Can\u0027t open \" + f\n-          + \" because it is a directory\");\n-    }\n-\n-    return new FSDataInputStream(\n-        new S3AInputStream(new S3AReadOpContext(hasMetadataStore(),\n-            invoker,\n-            s3guardInvoker,\n-            statistics,\n-            instrumentation,\n-            fileStatus),\n-            new S3ObjectAttributes(bucket,\n-                pathToKey(f),\n-                getServerSideEncryptionAlgorithm(),\n-                encryptionSecrets.getEncryptionKey()),\n-            fileStatus.getLen(),\n-            s3,\n-            readAhead,\n-            inputPolicy));\n+    return open(f, Optional.empty());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize)\n      throws IOException {\n    return open(f, Optional.empty());\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
      "commitDate": "14/01/19 9:59 AM",
      "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "07/01/19 9:51 PM",
      "commitNameOld": "7f783970364930cc461d1a73833bc58cdd10553e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.51,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public FSDataInputStream open(Path f, int bufferSize)\n       throws IOException {\n     entryPoint(INVOCATION_OPEN);\n     LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n     final FileStatus fileStatus \u003d getFileStatus(f);\n     if (fileStatus.isDirectory()) {\n       throw new FileNotFoundException(\"Can\u0027t open \" + f\n           + \" because it is a directory\");\n     }\n \n     return new FSDataInputStream(\n         new S3AInputStream(new S3AReadOpContext(hasMetadataStore(),\n             invoker,\n             s3guardInvoker,\n             statistics,\n             instrumentation,\n             fileStatus),\n             new S3ObjectAttributes(bucket,\n                 pathToKey(f),\n-                serverSideEncryptionAlgorithm,\n-                getServerSideEncryptionKey(bucket, getConf())),\n+                getServerSideEncryptionAlgorithm(),\n+                encryptionSecrets.getEncryptionKey()),\n             fileStatus.getLen(),\n             s3,\n             readAhead,\n             inputPolicy));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize)\n      throws IOException {\n    entryPoint(INVOCATION_OPEN);\n    LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n    final FileStatus fileStatus \u003d getFileStatus(f);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + f\n          + \" because it is a directory\");\n    }\n\n    return new FSDataInputStream(\n        new S3AInputStream(new S3AReadOpContext(hasMetadataStore(),\n            invoker,\n            s3guardInvoker,\n            statistics,\n            instrumentation,\n            fileStatus),\n            new S3ObjectAttributes(bucket,\n                pathToKey(f),\n                getServerSideEncryptionAlgorithm(),\n                encryptionSecrets.getEncryptionKey()),\n            fileStatus.getLen(),\n            s3,\n            readAhead,\n            inputPolicy));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "7f783970364930cc461d1a73833bc58cdd10553e": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-14556. S3A to support Delegation Tokens.\"\n\nThis reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.\n",
      "commitDate": "07/01/19 9:51 PM",
      "commitName": "7f783970364930cc461d1a73833bc58cdd10553e",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "07/01/19 5:18 AM",
      "commitNameOld": "d7152332b32a575c3a92e3f4c44b95e58462528d",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.69,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public FSDataInputStream open(Path f, int bufferSize)\n       throws IOException {\n     entryPoint(INVOCATION_OPEN);\n     LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n     final FileStatus fileStatus \u003d getFileStatus(f);\n     if (fileStatus.isDirectory()) {\n       throw new FileNotFoundException(\"Can\u0027t open \" + f\n           + \" because it is a directory\");\n     }\n \n     return new FSDataInputStream(\n         new S3AInputStream(new S3AReadOpContext(hasMetadataStore(),\n             invoker,\n             s3guardInvoker,\n             statistics,\n             instrumentation,\n             fileStatus),\n             new S3ObjectAttributes(bucket,\n                 pathToKey(f),\n-                getServerSideEncryptionAlgorithm(),\n-                encryptionSecrets.getEncryptionKey()),\n+                serverSideEncryptionAlgorithm,\n+                getServerSideEncryptionKey(bucket, getConf())),\n             fileStatus.getLen(),\n             s3,\n             readAhead,\n             inputPolicy));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize)\n      throws IOException {\n    entryPoint(INVOCATION_OPEN);\n    LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n    final FileStatus fileStatus \u003d getFileStatus(f);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + f\n          + \" because it is a directory\");\n    }\n\n    return new FSDataInputStream(\n        new S3AInputStream(new S3AReadOpContext(hasMetadataStore(),\n            invoker,\n            s3guardInvoker,\n            statistics,\n            instrumentation,\n            fileStatus),\n            new S3ObjectAttributes(bucket,\n                pathToKey(f),\n                serverSideEncryptionAlgorithm,\n                getServerSideEncryptionKey(bucket, getConf())),\n            fileStatus.getLen(),\n            s3,\n            readAhead,\n            inputPolicy));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "d7152332b32a575c3a92e3f4c44b95e58462528d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran.\n",
      "commitDate": "07/01/19 5:18 AM",
      "commitName": "d7152332b32a575c3a92e3f4c44b95e58462528d",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "28/11/18 9:45 AM",
      "commitNameOld": "5d96b74f33ca716c9fe4fadb046f79ed488a3059",
      "commitAuthorOld": "Sean Mackrory",
      "daysBetweenCommits": 39.81,
      "commitsBetweenForRepo": 242,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public FSDataInputStream open(Path f, int bufferSize)\n       throws IOException {\n     entryPoint(INVOCATION_OPEN);\n     LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n     final FileStatus fileStatus \u003d getFileStatus(f);\n     if (fileStatus.isDirectory()) {\n       throw new FileNotFoundException(\"Can\u0027t open \" + f\n           + \" because it is a directory\");\n     }\n \n     return new FSDataInputStream(\n         new S3AInputStream(new S3AReadOpContext(hasMetadataStore(),\n             invoker,\n             s3guardInvoker,\n             statistics,\n             instrumentation,\n             fileStatus),\n             new S3ObjectAttributes(bucket,\n                 pathToKey(f),\n-                serverSideEncryptionAlgorithm,\n-                getServerSideEncryptionKey(bucket, getConf())),\n+                getServerSideEncryptionAlgorithm(),\n+                encryptionSecrets.getEncryptionKey()),\n             fileStatus.getLen(),\n             s3,\n             readAhead,\n             inputPolicy));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize)\n      throws IOException {\n    entryPoint(INVOCATION_OPEN);\n    LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n    final FileStatus fileStatus \u003d getFileStatus(f);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + f\n          + \" because it is a directory\");\n    }\n\n    return new FSDataInputStream(\n        new S3AInputStream(new S3AReadOpContext(hasMetadataStore(),\n            invoker,\n            s3guardInvoker,\n            statistics,\n            instrumentation,\n            fileStatus),\n            new S3ObjectAttributes(bucket,\n                pathToKey(f),\n                getServerSideEncryptionAlgorithm(),\n                encryptionSecrets.getEncryptionKey()),\n            fileStatus.getLen(),\n            s3,\n            readAhead,\n            inputPolicy));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "8110d6a0d59e7dc2ddb25fa424fab188c5e9ce35": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13761. S3Guard: implement retries for DDB failures and throttling; translate exceptions.\nContributed by Aaron Fabbri.\n",
      "commitDate": "05/03/18 6:06 AM",
      "commitName": "8110d6a0d59e7dc2ddb25fa424fab188c5e9ce35",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/02/18 5:19 AM",
      "commitNameOld": "4d4dde5112e9ee6b37cbdea17104c5a4c6870bd5",
      "commitAuthorOld": "fang zhenyi",
      "daysBetweenCommits": 15.03,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   public FSDataInputStream open(Path f, int bufferSize)\n       throws IOException {\n     entryPoint(INVOCATION_OPEN);\n     LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n     final FileStatus fileStatus \u003d getFileStatus(f);\n     if (fileStatus.isDirectory()) {\n       throw new FileNotFoundException(\"Can\u0027t open \" + f\n           + \" because it is a directory\");\n     }\n \n     return new FSDataInputStream(\n-        new S3AInputStream(new S3ObjectAttributes(\n-          bucket,\n-          pathToKey(f),\n-          serverSideEncryptionAlgorithm,\n-          getServerSideEncryptionKey(bucket, getConf())),\n-            fileStatus.getLen(),\n-            s3,\n+        new S3AInputStream(new S3AReadOpContext(hasMetadataStore(),\n+            invoker,\n+            s3guardInvoker,\n             statistics,\n             instrumentation,\n+            fileStatus),\n+            new S3ObjectAttributes(bucket,\n+                pathToKey(f),\n+                serverSideEncryptionAlgorithm,\n+                getServerSideEncryptionKey(bucket, getConf())),\n+            fileStatus.getLen(),\n+            s3,\n             readAhead,\n-            inputPolicy,\n-            invoker));\n+            inputPolicy));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize)\n      throws IOException {\n    entryPoint(INVOCATION_OPEN);\n    LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n    final FileStatus fileStatus \u003d getFileStatus(f);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + f\n          + \" because it is a directory\");\n    }\n\n    return new FSDataInputStream(\n        new S3AInputStream(new S3AReadOpContext(hasMetadataStore(),\n            invoker,\n            s3guardInvoker,\n            statistics,\n            instrumentation,\n            fileStatus),\n            new S3ObjectAttributes(bucket,\n                pathToKey(f),\n                serverSideEncryptionAlgorithm,\n                getServerSideEncryptionKey(bucket, getConf())),\n            fileStatus.getLen(),\n            s3,\n            readAhead,\n            inputPolicy));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "7ac88244c54ce483729af3d2736d9f4731e230ca": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14507. Extend per-bucket secret key config with explicit getPassword() on fs.s3a.$bucket.secret.key.\nContributed by Steve Loughran.\n",
      "commitDate": "16/02/18 8:37 AM",
      "commitName": "7ac88244c54ce483729af3d2736d9f4731e230ca",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "15/02/18 7:57 AM",
      "commitNameOld": "9a013b255f301c557c3868dc1ad657202e9e7a67",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 1.03,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public FSDataInputStream open(Path f, int bufferSize)\n       throws IOException {\n     entryPoint(INVOCATION_OPEN);\n     LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n     final FileStatus fileStatus \u003d getFileStatus(f);\n     if (fileStatus.isDirectory()) {\n       throw new FileNotFoundException(\"Can\u0027t open \" + f\n           + \" because it is a directory\");\n     }\n \n     return new FSDataInputStream(\n         new S3AInputStream(new S3ObjectAttributes(\n           bucket,\n           pathToKey(f),\n           serverSideEncryptionAlgorithm,\n-          getServerSideEncryptionKey(getConf())),\n+          getServerSideEncryptionKey(bucket, getConf())),\n             fileStatus.getLen(),\n             s3,\n             statistics,\n             instrumentation,\n             readAhead,\n             inputPolicy,\n             invoker));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize)\n      throws IOException {\n    entryPoint(INVOCATION_OPEN);\n    LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n    final FileStatus fileStatus \u003d getFileStatus(f);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + f\n          + \" because it is a directory\");\n    }\n\n    return new FSDataInputStream(\n        new S3AInputStream(new S3ObjectAttributes(\n          bucket,\n          pathToKey(f),\n          serverSideEncryptionAlgorithm,\n          getServerSideEncryptionKey(bucket, getConf())),\n            fileStatus.getLen(),\n            s3,\n            statistics,\n            instrumentation,\n            readAhead,\n            inputPolicy,\n            invoker));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "b62a5ece95a6b5bbb17f273debd55bcbf0c5f28c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15161. s3a: Stream and common statistics missing from metrics\nContributed by Sean Mackrory\n",
      "commitDate": "09/01/18 10:46 AM",
      "commitName": "b62a5ece95a6b5bbb17f273debd55bcbf0c5f28c",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "21/12/17 6:58 AM",
      "commitNameOld": "c8ff0cc304f07bf793192291e0611b2fb4bcc4e3",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 19.16,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public FSDataInputStream open(Path f, int bufferSize)\n       throws IOException {\n-    checkNotClosed();\n+    entryPoint(INVOCATION_OPEN);\n     LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n     final FileStatus fileStatus \u003d getFileStatus(f);\n     if (fileStatus.isDirectory()) {\n       throw new FileNotFoundException(\"Can\u0027t open \" + f\n           + \" because it is a directory\");\n     }\n \n     return new FSDataInputStream(\n         new S3AInputStream(new S3ObjectAttributes(\n           bucket,\n           pathToKey(f),\n           serverSideEncryptionAlgorithm,\n           getServerSideEncryptionKey(getConf())),\n             fileStatus.getLen(),\n             s3,\n             statistics,\n             instrumentation,\n             readAhead,\n             inputPolicy,\n             invoker));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize)\n      throws IOException {\n    entryPoint(INVOCATION_OPEN);\n    LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n    final FileStatus fileStatus \u003d getFileStatus(f);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + f\n          + \" because it is a directory\");\n    }\n\n    return new FSDataInputStream(\n        new S3AInputStream(new S3ObjectAttributes(\n          bucket,\n          pathToKey(f),\n          serverSideEncryptionAlgorithm,\n          getServerSideEncryptionKey(getConf())),\n            fileStatus.getLen(),\n            s3,\n            statistics,\n            instrumentation,\n            readAhead,\n            inputPolicy,\n            invoker));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "ef450df443f1dea1c52082cf281f25db7141972f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15113. NPE in S3A getFileStatus: null instrumentation on using closed instance.\nContributed by Steve Loughran.\n",
      "commitDate": "21/12/17 6:15 AM",
      "commitName": "ef450df443f1dea1c52082cf281f25db7141972f",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/12/17 1:19 PM",
      "commitNameOld": "35ad9b1dd279b769381ea1625d9bf776c309c5cb",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 2.71,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public FSDataInputStream open(Path f, int bufferSize)\n       throws IOException {\n-\n+    checkNotClosed();\n     LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n     final FileStatus fileStatus \u003d getFileStatus(f);\n     if (fileStatus.isDirectory()) {\n       throw new FileNotFoundException(\"Can\u0027t open \" + f\n           + \" because it is a directory\");\n     }\n \n     return new FSDataInputStream(\n         new S3AInputStream(new S3ObjectAttributes(\n           bucket,\n           pathToKey(f),\n           serverSideEncryptionAlgorithm,\n           getServerSideEncryptionKey(getConf())),\n             fileStatus.getLen(),\n             s3,\n             statistics,\n             instrumentation,\n             readAhead,\n             inputPolicy,\n             invoker));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize)\n      throws IOException {\n    checkNotClosed();\n    LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n    final FileStatus fileStatus \u003d getFileStatus(f);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + f\n          + \" because it is a directory\");\n    }\n\n    return new FSDataInputStream(\n        new S3AInputStream(new S3ObjectAttributes(\n          bucket,\n          pathToKey(f),\n          serverSideEncryptionAlgorithm,\n          getServerSideEncryptionKey(getConf())),\n            fileStatus.getLen(),\n            s3,\n            statistics,\n            instrumentation,\n            readAhead,\n            inputPolicy,\n            invoker));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13786 Add S3A committer for zero-rename commits to S3 endpoints.\nContributed by Steve Loughran and Ryan Blue.\n",
      "commitDate": "22/11/17 7:28 AM",
      "commitName": "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "25/09/17 3:59 PM",
      "commitNameOld": "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
      "commitAuthorOld": "Aaron Fabbri",
      "daysBetweenCommits": 57.69,
      "commitsBetweenForRepo": 477,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   public FSDataInputStream open(Path f, int bufferSize)\n       throws IOException {\n \n-    LOG.debug(\"Opening \u0027{}\u0027 for reading.\", f);\n+    LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n     final FileStatus fileStatus \u003d getFileStatus(f);\n     if (fileStatus.isDirectory()) {\n       throw new FileNotFoundException(\"Can\u0027t open \" + f\n           + \" because it is a directory\");\n     }\n \n     return new FSDataInputStream(\n         new S3AInputStream(new S3ObjectAttributes(\n           bucket,\n           pathToKey(f),\n           serverSideEncryptionAlgorithm,\n           getServerSideEncryptionKey(getConf())),\n             fileStatus.getLen(),\n             s3,\n             statistics,\n             instrumentation,\n             readAhead,\n-            inputPolicy));\n+            inputPolicy,\n+            invoker));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize)\n      throws IOException {\n\n    LOG.debug(\"Opening \u0027{}\u0027 for reading; input policy \u003d {}\", f, inputPolicy);\n    final FileStatus fileStatus \u003d getFileStatus(f);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + f\n          + \" because it is a directory\");\n    }\n\n    return new FSDataInputStream(\n        new S3AInputStream(new S3ObjectAttributes(\n          bucket,\n          pathToKey(f),\n          serverSideEncryptionAlgorithm,\n          getServerSideEncryptionKey(getConf())),\n            fileStatus.getLen(),\n            s3,\n            statistics,\n            instrumentation,\n            readAhead,\n            inputPolicy,\n            invoker));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "839b690ed5edc2ac4984640d58c005bb63cd8a07": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13075. Add support for SSE-KMS and SSE-C in s3a filesystem. (Steve Moist via lei)\n",
      "commitDate": "11/02/17 1:59 PM",
      "commitName": "839b690ed5edc2ac4984640d58c005bb63cd8a07",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "11/01/17 9:25 AM",
      "commitNameOld": "e648b6e1382336af69434dfbf9161bced3caa244",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 31.19,
      "commitsBetweenForRepo": 140,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,23 @@\n   public FSDataInputStream open(Path f, int bufferSize)\n       throws IOException {\n \n     LOG.debug(\"Opening \u0027{}\u0027 for reading.\", f);\n     final FileStatus fileStatus \u003d getFileStatus(f);\n     if (fileStatus.isDirectory()) {\n       throw new FileNotFoundException(\"Can\u0027t open \" + f\n           + \" because it is a directory\");\n     }\n \n-    return new FSDataInputStream(new S3AInputStream(bucket, pathToKey(f),\n-      fileStatus.getLen(), s3, statistics, instrumentation, readAhead,\n-        inputPolicy));\n+    return new FSDataInputStream(\n+        new S3AInputStream(new S3ObjectAttributes(\n+          bucket,\n+          pathToKey(f),\n+          serverSideEncryptionAlgorithm,\n+          getServerSideEncryptionKey(getConf())),\n+            fileStatus.getLen(),\n+            s3,\n+            statistics,\n+            instrumentation,\n+            readAhead,\n+            inputPolicy));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize)\n      throws IOException {\n\n    LOG.debug(\"Opening \u0027{}\u0027 for reading.\", f);\n    final FileStatus fileStatus \u003d getFileStatus(f);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + f\n          + \" because it is a directory\");\n    }\n\n    return new FSDataInputStream(\n        new S3AInputStream(new S3ObjectAttributes(\n          bucket,\n          pathToKey(f),\n          serverSideEncryptionAlgorithm,\n          getServerSideEncryptionKey(getConf())),\n            fileStatus.getLen(),\n            s3,\n            statistics,\n            instrumentation,\n            readAhead,\n            inputPolicy));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "4ee3543625c77c06d566fe81644d21c607d6d74d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13203 S3A: Support fadvise \"random\" mode for high performance readPositioned() reads. Contributed by Rajesh Balamohan and stevel.\n",
      "commitDate": "22/06/16 7:45 AM",
      "commitName": "4ee3543625c77c06d566fe81644d21c607d6d74d",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "16/06/16 11:13 AM",
      "commitNameOld": "4aefe119a0203c03cdc893dcb3330fd37f26f0ee",
      "commitAuthorOld": "Ravi Prakash",
      "daysBetweenCommits": 5.86,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,14 @@\n   public FSDataInputStream open(Path f, int bufferSize)\n       throws IOException {\n \n     LOG.debug(\"Opening \u0027{}\u0027 for reading.\", f);\n     final FileStatus fileStatus \u003d getFileStatus(f);\n     if (fileStatus.isDirectory()) {\n       throw new FileNotFoundException(\"Can\u0027t open \" + f\n           + \" because it is a directory\");\n     }\n \n     return new FSDataInputStream(new S3AInputStream(bucket, pathToKey(f),\n-      fileStatus.getLen(), s3, statistics, instrumentation, readAhead));\n+      fileStatus.getLen(), s3, statistics, instrumentation, readAhead,\n+        inputPolicy));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize)\n      throws IOException {\n\n    LOG.debug(\"Opening \u0027{}\u0027 for reading.\", f);\n    final FileStatus fileStatus \u003d getFileStatus(f);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + f\n          + \" because it is a directory\");\n    }\n\n    return new FSDataInputStream(new S3AInputStream(bucket, pathToKey(f),\n      fileStatus.getLen(), s3, statistics, instrumentation, readAhead,\n        inputPolicy));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "27c4e90efce04e1b1302f668b5eb22412e00d033": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13028 add low level counter metrics for S3A; use in read performance tests. contributed by: stevel\npatch includes\nHADOOP-12844 Recover when S3A fails on IOException in read()\nHADOOP-13058 S3A FS fails during init against a read-only FS if multipart purge\nHADOOP-13047 S3a Forward seek in stream length to be configurable\n",
      "commitDate": "12/05/16 11:24 AM",
      "commitName": "27c4e90efce04e1b1302f668b5eb22412e00d033",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "12/05/16 5:57 AM",
      "commitNameOld": "def2a6d3856452d5c804f04e5bf485541a3bc53a",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,13 @@\n   public FSDataInputStream open(Path f, int bufferSize)\n       throws IOException {\n \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Opening \u0027{}\u0027 for reading.\", f);\n-    }\n+    LOG.debug(\"Opening \u0027{}\u0027 for reading.\", f);\n     final FileStatus fileStatus \u003d getFileStatus(f);\n     if (fileStatus.isDirectory()) {\n-      throw new FileNotFoundException(\"Can\u0027t open \" + f + \" because it is a directory\");\n+      throw new FileNotFoundException(\"Can\u0027t open \" + f\n+          + \" because it is a directory\");\n     }\n \n     return new FSDataInputStream(new S3AInputStream(bucket, pathToKey(f),\n-      fileStatus.getLen(), s3, statistics));\n+      fileStatus.getLen(), s3, statistics, instrumentation, readAhead));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize)\n      throws IOException {\n\n    LOG.debug(\"Opening \u0027{}\u0027 for reading.\", f);\n    final FileStatus fileStatus \u003d getFileStatus(f);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + f\n          + \" because it is a directory\");\n    }\n\n    return new FSDataInputStream(new S3AInputStream(bucket, pathToKey(f),\n      fileStatus.getLen(), s3, statistics, instrumentation, readAhead));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "aa1c437b6a806de612f030a68984c606c623f1d9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11607. Reduce log spew in S3AFileSystem. (Lei (Eddy) Xu via stevel)\n",
      "commitDate": "20/02/15 12:51 PM",
      "commitName": "aa1c437b6a806de612f030a68984c606c623f1d9",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/02/15 12:06 PM",
      "commitNameOld": "00b80958d862dbcc08d6f186c09963d3351ba0fd",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 3.03,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,14 @@\n   public FSDataInputStream open(Path f, int bufferSize)\n       throws IOException {\n \n-    LOG.info(\"Opening \u0027\" + f + \"\u0027 for reading\");\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Opening \u0027{}\u0027 for reading.\", f);\n+    }\n     final FileStatus fileStatus \u003d getFileStatus(f);\n     if (fileStatus.isDirectory()) {\n       throw new FileNotFoundException(\"Can\u0027t open \" + f + \" because it is a directory\");\n     }\n \n     return new FSDataInputStream(new S3AInputStream(bucket, pathToKey(f), \n       fileStatus.getLen(), s3, statistics));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize)\n      throws IOException {\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Opening \u0027{}\u0027 for reading.\", f);\n    }\n    final FileStatus fileStatus \u003d getFileStatus(f);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + f + \" because it is a directory\");\n    }\n\n    return new FSDataInputStream(new S3AInputStream(bucket, pathToKey(f), \n      fileStatus.getLen(), s3, statistics));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "24d920b80eb3626073925a1d0b6dcf148add8cc0": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10400. Incorporate new S3A FileSystem implementation. Contributed by Jordan Mendelson and Dave Wang.\n",
      "commitDate": "15/09/14 8:27 AM",
      "commitName": "24d920b80eb3626073925a1d0b6dcf148add8cc0",
      "commitAuthor": "Aaron T. Myers",
      "diff": "@@ -0,0 +1,12 @@\n+  public FSDataInputStream open(Path f, int bufferSize)\n+      throws IOException {\n+\n+    LOG.info(\"Opening \u0027\" + f + \"\u0027 for reading\");\n+    final FileStatus fileStatus \u003d getFileStatus(f);\n+    if (fileStatus.isDirectory()) {\n+      throw new FileNotFoundException(\"Can\u0027t open \" + f + \" because it is a directory\");\n+    }\n+\n+    return new FSDataInputStream(new S3AInputStream(bucket, pathToKey(f), \n+      fileStatus.getLen(), s3, statistics));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataInputStream open(Path f, int bufferSize)\n      throws IOException {\n\n    LOG.info(\"Opening \u0027\" + f + \"\u0027 for reading\");\n    final FileStatus fileStatus \u003d getFileStatus(f);\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(\"Can\u0027t open \" + f + \" because it is a directory\");\n    }\n\n    return new FSDataInputStream(new S3AInputStream(bucket, pathToKey(f), \n      fileStatus.getLen(), s3, statistics));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}