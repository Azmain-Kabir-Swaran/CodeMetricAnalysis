{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Client.java",
  "functionName": "monitorApplication",
  "functionId": "monitorApplication___appId-ApplicationId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
  "functionStartLine": 1110,
  "functionEndLine": 1170,
  "numCommitsSeen": 83,
  "timeTaken": 2742,
  "changeHistory": [
    "6cec90653dc2ae60a10262745997ea91dd872a8b",
    "5d1b453b8591d87ffb564857015c26c99fb7437c",
    "ff70f912f781e35e3538d00c892d18b17aefa105",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "0727ecaf50481fa7a529398bc2a12ce18c9a6b43",
    "10e704c50ba1fa601329d0fee099993e8c3725a6",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "fad230a49d0d4cdbb2062b10c3dea6c755737db5"
  ],
  "changeHistoryShort": {
    "6cec90653dc2ae60a10262745997ea91dd872a8b": "Ybodychange",
    "5d1b453b8591d87ffb564857015c26c99fb7437c": "Ybodychange",
    "ff70f912f781e35e3538d00c892d18b17aefa105": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Yexceptionschange",
    "0727ecaf50481fa7a529398bc2a12ce18c9a6b43": "Yexceptionschange",
    "10e704c50ba1fa601329d0fee099993e8c3725a6": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "fad230a49d0d4cdbb2062b10c3dea6c755737db5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6cec90653dc2ae60a10262745997ea91dd872a8b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9168. DistributedShell client timeout should be -1 by default. Contributed by Zhankun Tang.\n",
      "commitDate": "25/02/19 1:58 AM",
      "commitName": "6cec90653dc2ae60a10262745997ea91dd872a8b",
      "commitAuthor": "Sunil G",
      "commitDateOld": "05/02/19 12:11 AM",
      "commitNameOld": "ba38db4f5b7d8a1432a9a1b4adaa5c1545218799",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 20.07,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,61 @@\n   private boolean monitorApplication(ApplicationId appId)\n       throws YarnException, IOException {\n \n     while (true) {\n \n       // Check app status every 1 second.\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {\n         LOG.debug(\"Thread sleep in monitoring loop interrupted\");\n       }\n \n       // Get application report for the appId we are interested in \n       ApplicationReport report \u003d yarnClient.getApplicationReport(appId);\n \n       LOG.info(\"Got application report from ASM for\"\n           + \", appId\u003d\" + appId.getId()\n           + \", clientToAMToken\u003d\" + report.getClientToAMToken()\n           + \", appDiagnostics\u003d\" + report.getDiagnostics()\n           + \", appMasterHost\u003d\" + report.getHost()\n           + \", appQueue\u003d\" + report.getQueue()\n           + \", appMasterRpcPort\u003d\" + report.getRpcPort()\n           + \", appStartTime\u003d\" + report.getStartTime()\n           + \", yarnAppState\u003d\" + report.getYarnApplicationState().toString()\n           + \", distributedFinalState\u003d\" + report.getFinalApplicationStatus().toString()\n           + \", appTrackingUrl\u003d\" + report.getTrackingUrl()\n           + \", appUser\u003d\" + report.getUser());\n \n       YarnApplicationState state \u003d report.getYarnApplicationState();\n       FinalApplicationStatus dsStatus \u003d report.getFinalApplicationStatus();\n       if (YarnApplicationState.FINISHED \u003d\u003d state) {\n         if (FinalApplicationStatus.SUCCEEDED \u003d\u003d dsStatus) {\n           LOG.info(\"Application has completed successfully. Breaking monitoring loop\");\n           return true;        \n         }\n         else {\n           LOG.info(\"Application did finished unsuccessfully.\"\n               + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n               + \". Breaking monitoring loop\");\n           return false;\n         }\t\t\t  \n       }\n       else if (YarnApplicationState.KILLED \u003d\u003d state\t\n           || YarnApplicationState.FAILED \u003d\u003d state) {\n         LOG.info(\"Application did not finish.\"\n             + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n             + \". Breaking monitoring loop\");\n         return false;\n-      }\t\t\t\n-\n-      if (System.currentTimeMillis() \u003e (clientStartTime + clientTimeout)) {\n-        LOG.info(\"Reached client specified timeout for application. Killing application\");\n-        forceKillApplication(appId);\n-        return false;\t\t\t\t\n       }\n-    }\t\t\t\n+\n+      // The value equal or less than 0 means no timeout\n+      if (clientTimeout \u003e 0\n+          \u0026\u0026 System.currentTimeMillis() \u003e (clientStartTime + clientTimeout)) {\n+        LOG.info(\"Reached client specified timeout for application. \" +\n+            \"Killing application\");\n+        forceKillApplication(appId);\n+        return false;\n+      }\n+    }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean monitorApplication(ApplicationId appId)\n      throws YarnException, IOException {\n\n    while (true) {\n\n      // Check app status every 1 second.\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        LOG.debug(\"Thread sleep in monitoring loop interrupted\");\n      }\n\n      // Get application report for the appId we are interested in \n      ApplicationReport report \u003d yarnClient.getApplicationReport(appId);\n\n      LOG.info(\"Got application report from ASM for\"\n          + \", appId\u003d\" + appId.getId()\n          + \", clientToAMToken\u003d\" + report.getClientToAMToken()\n          + \", appDiagnostics\u003d\" + report.getDiagnostics()\n          + \", appMasterHost\u003d\" + report.getHost()\n          + \", appQueue\u003d\" + report.getQueue()\n          + \", appMasterRpcPort\u003d\" + report.getRpcPort()\n          + \", appStartTime\u003d\" + report.getStartTime()\n          + \", yarnAppState\u003d\" + report.getYarnApplicationState().toString()\n          + \", distributedFinalState\u003d\" + report.getFinalApplicationStatus().toString()\n          + \", appTrackingUrl\u003d\" + report.getTrackingUrl()\n          + \", appUser\u003d\" + report.getUser());\n\n      YarnApplicationState state \u003d report.getYarnApplicationState();\n      FinalApplicationStatus dsStatus \u003d report.getFinalApplicationStatus();\n      if (YarnApplicationState.FINISHED \u003d\u003d state) {\n        if (FinalApplicationStatus.SUCCEEDED \u003d\u003d dsStatus) {\n          LOG.info(\"Application has completed successfully. Breaking monitoring loop\");\n          return true;        \n        }\n        else {\n          LOG.info(\"Application did finished unsuccessfully.\"\n              + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n              + \". Breaking monitoring loop\");\n          return false;\n        }\t\t\t  \n      }\n      else if (YarnApplicationState.KILLED \u003d\u003d state\t\n          || YarnApplicationState.FAILED \u003d\u003d state) {\n        LOG.info(\"Application did not finish.\"\n            + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n            + \". Breaking monitoring loop\");\n        return false;\n      }\n\n      // The value equal or less than 0 means no timeout\n      if (clientTimeout \u003e 0\n          \u0026\u0026 System.currentTimeMillis() \u003e (clientStartTime + clientTimeout)) {\n        LOG.info(\"Reached client specified timeout for application. \" +\n            \"Killing application\");\n        forceKillApplication(appId);\n        return false;\n      }\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
      "extendedDetails": {}
    },
    "5d1b453b8591d87ffb564857015c26c99fb7437c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-610. ClientToken is no longer set in the environment of the Containers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493968 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 4:13 PM",
      "commitName": "5d1b453b8591d87ffb564857015c26c99fb7437c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/06/13 8:19 PM",
      "commitNameOld": "ff70f912f781e35e3538d00c892d18b17aefa105",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.83,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   private boolean monitorApplication(ApplicationId appId)\n       throws YarnException, IOException {\n \n     while (true) {\n \n       // Check app status every 1 second.\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {\n         LOG.debug(\"Thread sleep in monitoring loop interrupted\");\n       }\n \n       // Get application report for the appId we are interested in \n       ApplicationReport report \u003d yarnClient.getApplicationReport(appId);\n \n       LOG.info(\"Got application report from ASM for\"\n           + \", appId\u003d\" + appId.getId()\n-          + \", clientToken\u003d\" + report.getClientToken()\n+          + \", clientToAMToken\u003d\" + report.getClientToAMToken()\n           + \", appDiagnostics\u003d\" + report.getDiagnostics()\n           + \", appMasterHost\u003d\" + report.getHost()\n           + \", appQueue\u003d\" + report.getQueue()\n           + \", appMasterRpcPort\u003d\" + report.getRpcPort()\n           + \", appStartTime\u003d\" + report.getStartTime()\n           + \", yarnAppState\u003d\" + report.getYarnApplicationState().toString()\n           + \", distributedFinalState\u003d\" + report.getFinalApplicationStatus().toString()\n           + \", appTrackingUrl\u003d\" + report.getTrackingUrl()\n           + \", appUser\u003d\" + report.getUser());\n \n       YarnApplicationState state \u003d report.getYarnApplicationState();\n       FinalApplicationStatus dsStatus \u003d report.getFinalApplicationStatus();\n       if (YarnApplicationState.FINISHED \u003d\u003d state) {\n         if (FinalApplicationStatus.SUCCEEDED \u003d\u003d dsStatus) {\n           LOG.info(\"Application has completed successfully. Breaking monitoring loop\");\n           return true;        \n         }\n         else {\n           LOG.info(\"Application did finished unsuccessfully.\"\n               + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n               + \". Breaking monitoring loop\");\n           return false;\n         }\t\t\t  \n       }\n       else if (YarnApplicationState.KILLED \u003d\u003d state\t\n           || YarnApplicationState.FAILED \u003d\u003d state) {\n         LOG.info(\"Application did not finish.\"\n             + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n             + \". Breaking monitoring loop\");\n         return false;\n       }\t\t\t\n \n       if (System.currentTimeMillis() \u003e (clientStartTime + clientTimeout)) {\n         LOG.info(\"Reached client specified timeout for application. Killing application\");\n         forceKillApplication(appId);\n         return false;\t\t\t\t\n       }\n     }\t\t\t\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean monitorApplication(ApplicationId appId)\n      throws YarnException, IOException {\n\n    while (true) {\n\n      // Check app status every 1 second.\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        LOG.debug(\"Thread sleep in monitoring loop interrupted\");\n      }\n\n      // Get application report for the appId we are interested in \n      ApplicationReport report \u003d yarnClient.getApplicationReport(appId);\n\n      LOG.info(\"Got application report from ASM for\"\n          + \", appId\u003d\" + appId.getId()\n          + \", clientToAMToken\u003d\" + report.getClientToAMToken()\n          + \", appDiagnostics\u003d\" + report.getDiagnostics()\n          + \", appMasterHost\u003d\" + report.getHost()\n          + \", appQueue\u003d\" + report.getQueue()\n          + \", appMasterRpcPort\u003d\" + report.getRpcPort()\n          + \", appStartTime\u003d\" + report.getStartTime()\n          + \", yarnAppState\u003d\" + report.getYarnApplicationState().toString()\n          + \", distributedFinalState\u003d\" + report.getFinalApplicationStatus().toString()\n          + \", appTrackingUrl\u003d\" + report.getTrackingUrl()\n          + \", appUser\u003d\" + report.getUser());\n\n      YarnApplicationState state \u003d report.getYarnApplicationState();\n      FinalApplicationStatus dsStatus \u003d report.getFinalApplicationStatus();\n      if (YarnApplicationState.FINISHED \u003d\u003d state) {\n        if (FinalApplicationStatus.SUCCEEDED \u003d\u003d dsStatus) {\n          LOG.info(\"Application has completed successfully. Breaking monitoring loop\");\n          return true;        \n        }\n        else {\n          LOG.info(\"Application did finished unsuccessfully.\"\n              + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n              + \". Breaking monitoring loop\");\n          return false;\n        }\t\t\t  \n      }\n      else if (YarnApplicationState.KILLED \u003d\u003d state\t\n          || YarnApplicationState.FAILED \u003d\u003d state) {\n        LOG.info(\"Application did not finish.\"\n            + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n            + \". Breaking monitoring loop\");\n        return false;\n      }\t\t\t\n\n      if (System.currentTimeMillis() \u003e (clientStartTime + clientTimeout)) {\n        LOG.info(\"Reached client specified timeout for application. Killing application\");\n        forceKillApplication(appId);\n        return false;\t\t\t\t\n      }\n    }\t\t\t\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
      "extendedDetails": {}
    },
    "ff70f912f781e35e3538d00c892d18b17aefa105": {
      "type": "Ybodychange",
      "commitMessage": "YARN-824. Added static factory methods to hadoop-yarn-client interfaces. Contributed by Jian He.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/06/13 8:19 PM",
      "commitName": "ff70f912f781e35e3538d00c892d18b17aefa105",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "16/06/13 7:33 PM",
      "commitNameOld": "6b75a5c3b50877fc03574932ad54e4b4298f80d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   private boolean monitorApplication(ApplicationId appId)\n       throws YarnException, IOException {\n \n     while (true) {\n \n       // Check app status every 1 second.\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {\n         LOG.debug(\"Thread sleep in monitoring loop interrupted\");\n       }\n \n       // Get application report for the appId we are interested in \n-      ApplicationReport report \u003d super.getApplicationReport(appId);\n+      ApplicationReport report \u003d yarnClient.getApplicationReport(appId);\n \n       LOG.info(\"Got application report from ASM for\"\n           + \", appId\u003d\" + appId.getId()\n           + \", clientToken\u003d\" + report.getClientToken()\n           + \", appDiagnostics\u003d\" + report.getDiagnostics()\n           + \", appMasterHost\u003d\" + report.getHost()\n           + \", appQueue\u003d\" + report.getQueue()\n           + \", appMasterRpcPort\u003d\" + report.getRpcPort()\n           + \", appStartTime\u003d\" + report.getStartTime()\n           + \", yarnAppState\u003d\" + report.getYarnApplicationState().toString()\n           + \", distributedFinalState\u003d\" + report.getFinalApplicationStatus().toString()\n           + \", appTrackingUrl\u003d\" + report.getTrackingUrl()\n           + \", appUser\u003d\" + report.getUser());\n \n       YarnApplicationState state \u003d report.getYarnApplicationState();\n       FinalApplicationStatus dsStatus \u003d report.getFinalApplicationStatus();\n       if (YarnApplicationState.FINISHED \u003d\u003d state) {\n         if (FinalApplicationStatus.SUCCEEDED \u003d\u003d dsStatus) {\n           LOG.info(\"Application has completed successfully. Breaking monitoring loop\");\n           return true;        \n         }\n         else {\n           LOG.info(\"Application did finished unsuccessfully.\"\n               + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n               + \". Breaking monitoring loop\");\n           return false;\n         }\t\t\t  \n       }\n       else if (YarnApplicationState.KILLED \u003d\u003d state\t\n           || YarnApplicationState.FAILED \u003d\u003d state) {\n         LOG.info(\"Application did not finish.\"\n             + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n             + \". Breaking monitoring loop\");\n         return false;\n       }\t\t\t\n \n       if (System.currentTimeMillis() \u003e (clientStartTime + clientTimeout)) {\n         LOG.info(\"Reached client specified timeout for application. Killing application\");\n         forceKillApplication(appId);\n         return false;\t\t\t\t\n       }\n     }\t\t\t\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean monitorApplication(ApplicationId appId)\n      throws YarnException, IOException {\n\n    while (true) {\n\n      // Check app status every 1 second.\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        LOG.debug(\"Thread sleep in monitoring loop interrupted\");\n      }\n\n      // Get application report for the appId we are interested in \n      ApplicationReport report \u003d yarnClient.getApplicationReport(appId);\n\n      LOG.info(\"Got application report from ASM for\"\n          + \", appId\u003d\" + appId.getId()\n          + \", clientToken\u003d\" + report.getClientToken()\n          + \", appDiagnostics\u003d\" + report.getDiagnostics()\n          + \", appMasterHost\u003d\" + report.getHost()\n          + \", appQueue\u003d\" + report.getQueue()\n          + \", appMasterRpcPort\u003d\" + report.getRpcPort()\n          + \", appStartTime\u003d\" + report.getStartTime()\n          + \", yarnAppState\u003d\" + report.getYarnApplicationState().toString()\n          + \", distributedFinalState\u003d\" + report.getFinalApplicationStatus().toString()\n          + \", appTrackingUrl\u003d\" + report.getTrackingUrl()\n          + \", appUser\u003d\" + report.getUser());\n\n      YarnApplicationState state \u003d report.getYarnApplicationState();\n      FinalApplicationStatus dsStatus \u003d report.getFinalApplicationStatus();\n      if (YarnApplicationState.FINISHED \u003d\u003d state) {\n        if (FinalApplicationStatus.SUCCEEDED \u003d\u003d dsStatus) {\n          LOG.info(\"Application has completed successfully. Breaking monitoring loop\");\n          return true;        \n        }\n        else {\n          LOG.info(\"Application did finished unsuccessfully.\"\n              + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n              + \". Breaking monitoring loop\");\n          return false;\n        }\t\t\t  \n      }\n      else if (YarnApplicationState.KILLED \u003d\u003d state\t\n          || YarnApplicationState.FAILED \u003d\u003d state) {\n        LOG.info(\"Application did not finish.\"\n            + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n            + \". Breaking monitoring loop\");\n        return false;\n      }\t\t\t\n\n      if (System.currentTimeMillis() \u003e (clientStartTime + clientTimeout)) {\n        LOG.info(\"Reached client specified timeout for application. Killing application\");\n        forceKillApplication(appId);\n        return false;\t\t\t\t\n      }\n    }\t\t\t\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "08/05/13 3:53 PM",
      "commitNameOld": "0727ecaf50481fa7a529398bc2a12ce18c9a6b43",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 26.22,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   private boolean monitorApplication(ApplicationId appId)\n-      throws YarnRemoteException, IOException {\n+      throws YarnException, IOException {\n \n     while (true) {\n \n       // Check app status every 1 second.\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {\n         LOG.debug(\"Thread sleep in monitoring loop interrupted\");\n       }\n \n       // Get application report for the appId we are interested in \n       ApplicationReport report \u003d super.getApplicationReport(appId);\n \n       LOG.info(\"Got application report from ASM for\"\n           + \", appId\u003d\" + appId.getId()\n           + \", clientToken\u003d\" + report.getClientToken()\n           + \", appDiagnostics\u003d\" + report.getDiagnostics()\n           + \", appMasterHost\u003d\" + report.getHost()\n           + \", appQueue\u003d\" + report.getQueue()\n           + \", appMasterRpcPort\u003d\" + report.getRpcPort()\n           + \", appStartTime\u003d\" + report.getStartTime()\n           + \", yarnAppState\u003d\" + report.getYarnApplicationState().toString()\n           + \", distributedFinalState\u003d\" + report.getFinalApplicationStatus().toString()\n           + \", appTrackingUrl\u003d\" + report.getTrackingUrl()\n           + \", appUser\u003d\" + report.getUser());\n \n       YarnApplicationState state \u003d report.getYarnApplicationState();\n       FinalApplicationStatus dsStatus \u003d report.getFinalApplicationStatus();\n       if (YarnApplicationState.FINISHED \u003d\u003d state) {\n         if (FinalApplicationStatus.SUCCEEDED \u003d\u003d dsStatus) {\n           LOG.info(\"Application has completed successfully. Breaking monitoring loop\");\n           return true;        \n         }\n         else {\n           LOG.info(\"Application did finished unsuccessfully.\"\n               + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n               + \". Breaking monitoring loop\");\n           return false;\n         }\t\t\t  \n       }\n       else if (YarnApplicationState.KILLED \u003d\u003d state\t\n           || YarnApplicationState.FAILED \u003d\u003d state) {\n         LOG.info(\"Application did not finish.\"\n             + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n             + \". Breaking monitoring loop\");\n         return false;\n       }\t\t\t\n \n       if (System.currentTimeMillis() \u003e (clientStartTime + clientTimeout)) {\n         LOG.info(\"Reached client specified timeout for application. Killing application\");\n         forceKillApplication(appId);\n         return false;\t\t\t\t\n       }\n     }\t\t\t\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean monitorApplication(ApplicationId appId)\n      throws YarnException, IOException {\n\n    while (true) {\n\n      // Check app status every 1 second.\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        LOG.debug(\"Thread sleep in monitoring loop interrupted\");\n      }\n\n      // Get application report for the appId we are interested in \n      ApplicationReport report \u003d super.getApplicationReport(appId);\n\n      LOG.info(\"Got application report from ASM for\"\n          + \", appId\u003d\" + appId.getId()\n          + \", clientToken\u003d\" + report.getClientToken()\n          + \", appDiagnostics\u003d\" + report.getDiagnostics()\n          + \", appMasterHost\u003d\" + report.getHost()\n          + \", appQueue\u003d\" + report.getQueue()\n          + \", appMasterRpcPort\u003d\" + report.getRpcPort()\n          + \", appStartTime\u003d\" + report.getStartTime()\n          + \", yarnAppState\u003d\" + report.getYarnApplicationState().toString()\n          + \", distributedFinalState\u003d\" + report.getFinalApplicationStatus().toString()\n          + \", appTrackingUrl\u003d\" + report.getTrackingUrl()\n          + \", appUser\u003d\" + report.getUser());\n\n      YarnApplicationState state \u003d report.getYarnApplicationState();\n      FinalApplicationStatus dsStatus \u003d report.getFinalApplicationStatus();\n      if (YarnApplicationState.FINISHED \u003d\u003d state) {\n        if (FinalApplicationStatus.SUCCEEDED \u003d\u003d dsStatus) {\n          LOG.info(\"Application has completed successfully. Breaking monitoring loop\");\n          return true;        \n        }\n        else {\n          LOG.info(\"Application did finished unsuccessfully.\"\n              + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n              + \". Breaking monitoring loop\");\n          return false;\n        }\t\t\t  \n      }\n      else if (YarnApplicationState.KILLED \u003d\u003d state\t\n          || YarnApplicationState.FAILED \u003d\u003d state) {\n        LOG.info(\"Application did not finish.\"\n            + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n            + \". Breaking monitoring loop\");\n        return false;\n      }\t\t\t\n\n      if (System.currentTimeMillis() \u003e (clientStartTime + clientTimeout)) {\n        LOG.info(\"Reached client specified timeout for application. Killing application\");\n        forceKillApplication(appId);\n        return false;\t\t\t\t\n      }\n    }\t\t\t\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException, IOException]",
        "newValue": "[YarnException, IOException]"
      }
    },
    "0727ecaf50481fa7a529398bc2a12ce18c9a6b43": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-631. Changed ClientRMProtocol api to throw IOException and YarnRemoteException. Contributed by Xuan Gong.\nMAPREDUCE-5212. Handling YarnRemoteException separately from IOException in MR App after YARN-631. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480494 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/13 3:53 PM",
      "commitName": "0727ecaf50481fa7a529398bc2a12ce18c9a6b43",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/05/13 12:04 PM",
      "commitNameOld": "92b7165a71656468f17ce8b760ce11e648932f0e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.16,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n-  private boolean monitorApplication(ApplicationId appId) throws YarnRemoteException {\n+  private boolean monitorApplication(ApplicationId appId)\n+      throws YarnRemoteException, IOException {\n \n     while (true) {\n \n       // Check app status every 1 second.\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {\n         LOG.debug(\"Thread sleep in monitoring loop interrupted\");\n       }\n \n       // Get application report for the appId we are interested in \n       ApplicationReport report \u003d super.getApplicationReport(appId);\n \n       LOG.info(\"Got application report from ASM for\"\n           + \", appId\u003d\" + appId.getId()\n           + \", clientToken\u003d\" + report.getClientToken()\n           + \", appDiagnostics\u003d\" + report.getDiagnostics()\n           + \", appMasterHost\u003d\" + report.getHost()\n           + \", appQueue\u003d\" + report.getQueue()\n           + \", appMasterRpcPort\u003d\" + report.getRpcPort()\n           + \", appStartTime\u003d\" + report.getStartTime()\n           + \", yarnAppState\u003d\" + report.getYarnApplicationState().toString()\n           + \", distributedFinalState\u003d\" + report.getFinalApplicationStatus().toString()\n           + \", appTrackingUrl\u003d\" + report.getTrackingUrl()\n           + \", appUser\u003d\" + report.getUser());\n \n       YarnApplicationState state \u003d report.getYarnApplicationState();\n       FinalApplicationStatus dsStatus \u003d report.getFinalApplicationStatus();\n       if (YarnApplicationState.FINISHED \u003d\u003d state) {\n         if (FinalApplicationStatus.SUCCEEDED \u003d\u003d dsStatus) {\n           LOG.info(\"Application has completed successfully. Breaking monitoring loop\");\n           return true;        \n         }\n         else {\n           LOG.info(\"Application did finished unsuccessfully.\"\n               + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n               + \". Breaking monitoring loop\");\n           return false;\n         }\t\t\t  \n       }\n       else if (YarnApplicationState.KILLED \u003d\u003d state\t\n           || YarnApplicationState.FAILED \u003d\u003d state) {\n         LOG.info(\"Application did not finish.\"\n             + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n             + \". Breaking monitoring loop\");\n         return false;\n       }\t\t\t\n \n       if (System.currentTimeMillis() \u003e (clientStartTime + clientTimeout)) {\n         LOG.info(\"Reached client specified timeout for application. Killing application\");\n         forceKillApplication(appId);\n         return false;\t\t\t\t\n       }\n     }\t\t\t\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean monitorApplication(ApplicationId appId)\n      throws YarnRemoteException, IOException {\n\n    while (true) {\n\n      // Check app status every 1 second.\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        LOG.debug(\"Thread sleep in monitoring loop interrupted\");\n      }\n\n      // Get application report for the appId we are interested in \n      ApplicationReport report \u003d super.getApplicationReport(appId);\n\n      LOG.info(\"Got application report from ASM for\"\n          + \", appId\u003d\" + appId.getId()\n          + \", clientToken\u003d\" + report.getClientToken()\n          + \", appDiagnostics\u003d\" + report.getDiagnostics()\n          + \", appMasterHost\u003d\" + report.getHost()\n          + \", appQueue\u003d\" + report.getQueue()\n          + \", appMasterRpcPort\u003d\" + report.getRpcPort()\n          + \", appStartTime\u003d\" + report.getStartTime()\n          + \", yarnAppState\u003d\" + report.getYarnApplicationState().toString()\n          + \", distributedFinalState\u003d\" + report.getFinalApplicationStatus().toString()\n          + \", appTrackingUrl\u003d\" + report.getTrackingUrl()\n          + \", appUser\u003d\" + report.getUser());\n\n      YarnApplicationState state \u003d report.getYarnApplicationState();\n      FinalApplicationStatus dsStatus \u003d report.getFinalApplicationStatus();\n      if (YarnApplicationState.FINISHED \u003d\u003d state) {\n        if (FinalApplicationStatus.SUCCEEDED \u003d\u003d dsStatus) {\n          LOG.info(\"Application has completed successfully. Breaking monitoring loop\");\n          return true;        \n        }\n        else {\n          LOG.info(\"Application did finished unsuccessfully.\"\n              + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n              + \". Breaking monitoring loop\");\n          return false;\n        }\t\t\t  \n      }\n      else if (YarnApplicationState.KILLED \u003d\u003d state\t\n          || YarnApplicationState.FAILED \u003d\u003d state) {\n        LOG.info(\"Application did not finish.\"\n            + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n            + \". Breaking monitoring loop\");\n        return false;\n      }\t\t\t\n\n      if (System.currentTimeMillis() \u003e (clientStartTime + clientTimeout)) {\n        LOG.info(\"Reached client specified timeout for application. Killing application\");\n        forceKillApplication(appId);\n        return false;\t\t\t\t\n      }\n    }\t\t\t\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException]",
        "newValue": "[YarnRemoteException, IOException]"
      }
    },
    "10e704c50ba1fa601329d0fee099993e8c3725a6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-29. Add a yarn-client module. (Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/08/12 11:27 AM",
      "commitName": "10e704c50ba1fa601329d0fee099993e8c3725a6",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 19.55,
      "commitsBetweenForRepo": 117,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,57 @@\n   private boolean monitorApplication(ApplicationId appId) throws YarnRemoteException {\n \n     while (true) {\n \n       // Check app status every 1 second.\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException e) {\n         LOG.debug(\"Thread sleep in monitoring loop interrupted\");\n       }\n \n       // Get application report for the appId we are interested in \n-      GetApplicationReportRequest reportRequest \u003d Records.newRecord(GetApplicationReportRequest.class);\n-      reportRequest.setApplicationId(appId);\n-      GetApplicationReportResponse reportResponse \u003d applicationsManager.getApplicationReport(reportRequest);\n-      ApplicationReport report \u003d reportResponse.getApplicationReport();\n+      ApplicationReport report \u003d super.getApplicationReport(appId);\n \n       LOG.info(\"Got application report from ASM for\"\n           + \", appId\u003d\" + appId.getId()\n           + \", clientToken\u003d\" + report.getClientToken()\n           + \", appDiagnostics\u003d\" + report.getDiagnostics()\n           + \", appMasterHost\u003d\" + report.getHost()\n           + \", appQueue\u003d\" + report.getQueue()\n           + \", appMasterRpcPort\u003d\" + report.getRpcPort()\n           + \", appStartTime\u003d\" + report.getStartTime()\n           + \", yarnAppState\u003d\" + report.getYarnApplicationState().toString()\n           + \", distributedFinalState\u003d\" + report.getFinalApplicationStatus().toString()\n           + \", appTrackingUrl\u003d\" + report.getTrackingUrl()\n           + \", appUser\u003d\" + report.getUser());\n \n       YarnApplicationState state \u003d report.getYarnApplicationState();\n       FinalApplicationStatus dsStatus \u003d report.getFinalApplicationStatus();\n       if (YarnApplicationState.FINISHED \u003d\u003d state) {\n         if (FinalApplicationStatus.SUCCEEDED \u003d\u003d dsStatus) {\n           LOG.info(\"Application has completed successfully. Breaking monitoring loop\");\n           return true;        \n         }\n         else {\n           LOG.info(\"Application did finished unsuccessfully.\"\n               + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n               + \". Breaking monitoring loop\");\n           return false;\n         }\t\t\t  \n       }\n       else if (YarnApplicationState.KILLED \u003d\u003d state\t\n           || YarnApplicationState.FAILED \u003d\u003d state) {\n         LOG.info(\"Application did not finish.\"\n             + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n             + \". Breaking monitoring loop\");\n         return false;\n       }\t\t\t\n \n       if (System.currentTimeMillis() \u003e (clientStartTime + clientTimeout)) {\n         LOG.info(\"Reached client specified timeout for application. Killing application\");\n-        killApplication(appId);\n+        forceKillApplication(appId);\n         return false;\t\t\t\t\n       }\n     }\t\t\t\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean monitorApplication(ApplicationId appId) throws YarnRemoteException {\n\n    while (true) {\n\n      // Check app status every 1 second.\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        LOG.debug(\"Thread sleep in monitoring loop interrupted\");\n      }\n\n      // Get application report for the appId we are interested in \n      ApplicationReport report \u003d super.getApplicationReport(appId);\n\n      LOG.info(\"Got application report from ASM for\"\n          + \", appId\u003d\" + appId.getId()\n          + \", clientToken\u003d\" + report.getClientToken()\n          + \", appDiagnostics\u003d\" + report.getDiagnostics()\n          + \", appMasterHost\u003d\" + report.getHost()\n          + \", appQueue\u003d\" + report.getQueue()\n          + \", appMasterRpcPort\u003d\" + report.getRpcPort()\n          + \", appStartTime\u003d\" + report.getStartTime()\n          + \", yarnAppState\u003d\" + report.getYarnApplicationState().toString()\n          + \", distributedFinalState\u003d\" + report.getFinalApplicationStatus().toString()\n          + \", appTrackingUrl\u003d\" + report.getTrackingUrl()\n          + \", appUser\u003d\" + report.getUser());\n\n      YarnApplicationState state \u003d report.getYarnApplicationState();\n      FinalApplicationStatus dsStatus \u003d report.getFinalApplicationStatus();\n      if (YarnApplicationState.FINISHED \u003d\u003d state) {\n        if (FinalApplicationStatus.SUCCEEDED \u003d\u003d dsStatus) {\n          LOG.info(\"Application has completed successfully. Breaking monitoring loop\");\n          return true;        \n        }\n        else {\n          LOG.info(\"Application did finished unsuccessfully.\"\n              + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n              + \". Breaking monitoring loop\");\n          return false;\n        }\t\t\t  \n      }\n      else if (YarnApplicationState.KILLED \u003d\u003d state\t\n          || YarnApplicationState.FAILED \u003d\u003d state) {\n        LOG.info(\"Application did not finish.\"\n            + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n            + \". Breaking monitoring loop\");\n        return false;\n      }\t\t\t\n\n      if (System.currentTimeMillis() \u003e (clientStartTime + clientTimeout)) {\n        LOG.info(\"Reached client specified timeout for application. Killing application\");\n        forceKillApplication(appId);\n        return false;\t\t\t\t\n      }\n    }\t\t\t\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private boolean monitorApplication(ApplicationId appId) throws YarnRemoteException {\n\n    while (true) {\n\n      // Check app status every 1 second.\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        LOG.debug(\"Thread sleep in monitoring loop interrupted\");\n      }\n\n      // Get application report for the appId we are interested in \n      GetApplicationReportRequest reportRequest \u003d Records.newRecord(GetApplicationReportRequest.class);\n      reportRequest.setApplicationId(appId);\n      GetApplicationReportResponse reportResponse \u003d applicationsManager.getApplicationReport(reportRequest);\n      ApplicationReport report \u003d reportResponse.getApplicationReport();\n\n      LOG.info(\"Got application report from ASM for\"\n          + \", appId\u003d\" + appId.getId()\n          + \", clientToken\u003d\" + report.getClientToken()\n          + \", appDiagnostics\u003d\" + report.getDiagnostics()\n          + \", appMasterHost\u003d\" + report.getHost()\n          + \", appQueue\u003d\" + report.getQueue()\n          + \", appMasterRpcPort\u003d\" + report.getRpcPort()\n          + \", appStartTime\u003d\" + report.getStartTime()\n          + \", yarnAppState\u003d\" + report.getYarnApplicationState().toString()\n          + \", distributedFinalState\u003d\" + report.getFinalApplicationStatus().toString()\n          + \", appTrackingUrl\u003d\" + report.getTrackingUrl()\n          + \", appUser\u003d\" + report.getUser());\n\n      YarnApplicationState state \u003d report.getYarnApplicationState();\n      FinalApplicationStatus dsStatus \u003d report.getFinalApplicationStatus();\n      if (YarnApplicationState.FINISHED \u003d\u003d state) {\n        if (FinalApplicationStatus.SUCCEEDED \u003d\u003d dsStatus) {\n          LOG.info(\"Application has completed successfully. Breaking monitoring loop\");\n          return true;        \n        }\n        else {\n          LOG.info(\"Application did finished unsuccessfully.\"\n              + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n              + \". Breaking monitoring loop\");\n          return false;\n        }\t\t\t  \n      }\n      else if (YarnApplicationState.KILLED \u003d\u003d state\t\n          || YarnApplicationState.FAILED \u003d\u003d state) {\n        LOG.info(\"Application did not finish.\"\n            + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n            + \". Breaking monitoring loop\");\n        return false;\n      }\t\t\t\n\n      if (System.currentTimeMillis() \u003e (clientStartTime + clientTimeout)) {\n        LOG.info(\"Reached client specified timeout for application. Killing application\");\n        killApplication(appId);\n        return false;\t\t\t\t\n      }\n    }\t\t\t\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java"
      }
    },
    "fad230a49d0d4cdbb2062b10c3dea6c755737db5": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2719. Add a simple, DistributedShell, application to illustrate alternate frameworks on YARN. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1177864 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/09/11 3:25 PM",
      "commitName": "fad230a49d0d4cdbb2062b10c3dea6c755737db5",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,60 @@\n+  private boolean monitorApplication(ApplicationId appId) throws YarnRemoteException {\n+\n+    while (true) {\n+\n+      // Check app status every 1 second.\n+      try {\n+        Thread.sleep(1000);\n+      } catch (InterruptedException e) {\n+        LOG.debug(\"Thread sleep in monitoring loop interrupted\");\n+      }\n+\n+      // Get application report for the appId we are interested in \n+      GetApplicationReportRequest reportRequest \u003d Records.newRecord(GetApplicationReportRequest.class);\n+      reportRequest.setApplicationId(appId);\n+      GetApplicationReportResponse reportResponse \u003d applicationsManager.getApplicationReport(reportRequest);\n+      ApplicationReport report \u003d reportResponse.getApplicationReport();\n+\n+      LOG.info(\"Got application report from ASM for\"\n+          + \", appId\u003d\" + appId.getId()\n+          + \", clientToken\u003d\" + report.getClientToken()\n+          + \", appDiagnostics\u003d\" + report.getDiagnostics()\n+          + \", appMasterHost\u003d\" + report.getHost()\n+          + \", appQueue\u003d\" + report.getQueue()\n+          + \", appMasterRpcPort\u003d\" + report.getRpcPort()\n+          + \", appStartTime\u003d\" + report.getStartTime()\n+          + \", yarnAppState\u003d\" + report.getYarnApplicationState().toString()\n+          + \", distributedFinalState\u003d\" + report.getFinalApplicationStatus().toString()\n+          + \", appTrackingUrl\u003d\" + report.getTrackingUrl()\n+          + \", appUser\u003d\" + report.getUser());\n+\n+      YarnApplicationState state \u003d report.getYarnApplicationState();\n+      FinalApplicationStatus dsStatus \u003d report.getFinalApplicationStatus();\n+      if (YarnApplicationState.FINISHED \u003d\u003d state) {\n+        if (FinalApplicationStatus.SUCCEEDED \u003d\u003d dsStatus) {\n+          LOG.info(\"Application has completed successfully. Breaking monitoring loop\");\n+          return true;        \n+        }\n+        else {\n+          LOG.info(\"Application did finished unsuccessfully.\"\n+              + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n+              + \". Breaking monitoring loop\");\n+          return false;\n+        }\t\t\t  \n+      }\n+      else if (YarnApplicationState.KILLED \u003d\u003d state\t\n+          || YarnApplicationState.FAILED \u003d\u003d state) {\n+        LOG.info(\"Application did not finish.\"\n+            + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n+            + \". Breaking monitoring loop\");\n+        return false;\n+      }\t\t\t\n+\n+      if (System.currentTimeMillis() \u003e (clientStartTime + clientTimeout)) {\n+        LOG.info(\"Reached client specified timeout for application. Killing application\");\n+        killApplication(appId);\n+        return false;\t\t\t\t\n+      }\n+    }\t\t\t\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean monitorApplication(ApplicationId appId) throws YarnRemoteException {\n\n    while (true) {\n\n      // Check app status every 1 second.\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        LOG.debug(\"Thread sleep in monitoring loop interrupted\");\n      }\n\n      // Get application report for the appId we are interested in \n      GetApplicationReportRequest reportRequest \u003d Records.newRecord(GetApplicationReportRequest.class);\n      reportRequest.setApplicationId(appId);\n      GetApplicationReportResponse reportResponse \u003d applicationsManager.getApplicationReport(reportRequest);\n      ApplicationReport report \u003d reportResponse.getApplicationReport();\n\n      LOG.info(\"Got application report from ASM for\"\n          + \", appId\u003d\" + appId.getId()\n          + \", clientToken\u003d\" + report.getClientToken()\n          + \", appDiagnostics\u003d\" + report.getDiagnostics()\n          + \", appMasterHost\u003d\" + report.getHost()\n          + \", appQueue\u003d\" + report.getQueue()\n          + \", appMasterRpcPort\u003d\" + report.getRpcPort()\n          + \", appStartTime\u003d\" + report.getStartTime()\n          + \", yarnAppState\u003d\" + report.getYarnApplicationState().toString()\n          + \", distributedFinalState\u003d\" + report.getFinalApplicationStatus().toString()\n          + \", appTrackingUrl\u003d\" + report.getTrackingUrl()\n          + \", appUser\u003d\" + report.getUser());\n\n      YarnApplicationState state \u003d report.getYarnApplicationState();\n      FinalApplicationStatus dsStatus \u003d report.getFinalApplicationStatus();\n      if (YarnApplicationState.FINISHED \u003d\u003d state) {\n        if (FinalApplicationStatus.SUCCEEDED \u003d\u003d dsStatus) {\n          LOG.info(\"Application has completed successfully. Breaking monitoring loop\");\n          return true;        \n        }\n        else {\n          LOG.info(\"Application did finished unsuccessfully.\"\n              + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n              + \". Breaking monitoring loop\");\n          return false;\n        }\t\t\t  \n      }\n      else if (YarnApplicationState.KILLED \u003d\u003d state\t\n          || YarnApplicationState.FAILED \u003d\u003d state) {\n        LOG.info(\"Application did not finish.\"\n            + \" YarnState\u003d\" + state.toString() + \", DSFinalStatus\u003d\" + dsStatus.toString()\n            + \". Breaking monitoring loop\");\n        return false;\n      }\t\t\t\n\n      if (System.currentTimeMillis() \u003e (clientStartTime + clientTimeout)) {\n        LOG.info(\"Reached client specified timeout for application. Killing application\");\n        killApplication(appId);\n        return false;\t\t\t\t\n      }\n    }\t\t\t\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java"
    }
  }
}