{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystem.java",
  "functionName": "checkAccessPermissions",
  "functionId": "checkAccessPermissions___stat-FileStatus__mode-FsAction",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
  "functionStartLine": 2689,
  "functionEndLine": 2710,
  "numCommitsSeen": 143,
  "timeTaken": 4643,
  "changeHistory": [
    "860d49aa6ae7790d970d7f2322fed890b0e5cda2",
    "94225152399e6e89fa7b4cff6d17d33e544329a3",
    "535fe14dedbf919442ec03ac573315c7a16a6dbe"
  ],
  "changeHistoryShort": {
    "860d49aa6ae7790d970d7f2322fed890b0e5cda2": "Yexceptionschange",
    "94225152399e6e89fa7b4cff6d17d33e544329a3": "Ybodychange",
    "535fe14dedbf919442ec03ac573315c7a16a6dbe": "Yintroduced"
  },
  "changeHistoryDetails": {
    "860d49aa6ae7790d970d7f2322fed890b0e5cda2": {
      "type": "Yexceptionschange",
      "commitMessage": "HADOOP-13605. Clean up FileSystem javadocs, logging; improve diagnostics on FS load. Contributed by Steve Loughran\n",
      "commitDate": "23/11/16 4:42 PM",
      "commitName": "860d49aa6ae7790d970d7f2322fed890b0e5cda2",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "16/11/16 8:08 PM",
      "commitNameOld": "aab9737a058c0bdeeb17c173e530b7e571315a56",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 6.86,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   static void checkAccessPermissions(FileStatus stat, FsAction mode)\n-      throws IOException {\n+      throws AccessControlException, IOException {\n     FsPermission perm \u003d stat.getPermission();\n     UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n     String user \u003d ugi.getShortUserName();\n     if (user.equals(stat.getOwner())) {\n       if (perm.getUserAction().implies(mode)) {\n         return;\n       }\n     } else if (ugi.getGroups().contains(stat.getGroup())) {\n       if (perm.getGroupAction().implies(mode)) {\n         return;\n       }\n     } else {\n       if (perm.getOtherAction().implies(mode)) {\n         return;\n       }\n     }\n     throw new AccessControlException(String.format(\n       \"Permission denied: user\u003d%s, path\u003d\\\"%s\\\":%s:%s:%s%s\", user, stat.getPath(),\n       stat.getOwner(), stat.getGroup(), stat.isDirectory() ? \"d\" : \"-\", perm));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void checkAccessPermissions(FileStatus stat, FsAction mode)\n      throws AccessControlException, IOException {\n    FsPermission perm \u003d stat.getPermission();\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    String user \u003d ugi.getShortUserName();\n    if (user.equals(stat.getOwner())) {\n      if (perm.getUserAction().implies(mode)) {\n        return;\n      }\n    } else if (ugi.getGroups().contains(stat.getGroup())) {\n      if (perm.getGroupAction().implies(mode)) {\n        return;\n      }\n    } else {\n      if (perm.getOtherAction().implies(mode)) {\n        return;\n      }\n    }\n    throw new AccessControlException(String.format(\n      \"Permission denied: user\u003d%s, path\u003d\\\"%s\\\":%s:%s:%s%s\", user, stat.getPath(),\n      stat.getOwner(), stat.getGroup(), stat.isDirectory() ? \"d\" : \"-\", perm));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldValue": "[IOException]",
        "newValue": "[AccessControlException, IOException]"
      }
    },
    "94225152399e6e89fa7b4cff6d17d33e544329a3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13442. Optimize UGI group lookups. Contributed by Daryn Sharp.\n",
      "commitDate": "04/08/16 8:45 AM",
      "commitName": "94225152399e6e89fa7b4cff6d17d33e544329a3",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "07/07/16 2:58 PM",
      "commitNameOld": "6e597600f7916772187fa1861daee42e6a5a71d8",
      "commitAuthorOld": "Jitendra Pandey",
      "daysBetweenCommits": 27.74,
      "commitsBetweenForRepo": 305,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,22 @@\n   static void checkAccessPermissions(FileStatus stat, FsAction mode)\n       throws IOException {\n     FsPermission perm \u003d stat.getPermission();\n     UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n     String user \u003d ugi.getShortUserName();\n-    List\u003cString\u003e groups \u003d Arrays.asList(ugi.getGroupNames());\n     if (user.equals(stat.getOwner())) {\n       if (perm.getUserAction().implies(mode)) {\n         return;\n       }\n-    } else if (groups.contains(stat.getGroup())) {\n+    } else if (ugi.getGroups().contains(stat.getGroup())) {\n       if (perm.getGroupAction().implies(mode)) {\n         return;\n       }\n     } else {\n       if (perm.getOtherAction().implies(mode)) {\n         return;\n       }\n     }\n     throw new AccessControlException(String.format(\n       \"Permission denied: user\u003d%s, path\u003d\\\"%s\\\":%s:%s:%s%s\", user, stat.getPath(),\n       stat.getOwner(), stat.getGroup(), stat.isDirectory() ? \"d\" : \"-\", perm));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void checkAccessPermissions(FileStatus stat, FsAction mode)\n      throws IOException {\n    FsPermission perm \u003d stat.getPermission();\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    String user \u003d ugi.getShortUserName();\n    if (user.equals(stat.getOwner())) {\n      if (perm.getUserAction().implies(mode)) {\n        return;\n      }\n    } else if (ugi.getGroups().contains(stat.getGroup())) {\n      if (perm.getGroupAction().implies(mode)) {\n        return;\n      }\n    } else {\n      if (perm.getOtherAction().implies(mode)) {\n        return;\n      }\n    }\n    throw new AccessControlException(String.format(\n      \"Permission denied: user\u003d%s, path\u003d\\\"%s\\\":%s:%s:%s%s\", user, stat.getPath(),\n      stat.getOwner(), stat.getGroup(), stat.isDirectory() ? \"d\" : \"-\", perm));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "535fe14dedbf919442ec03ac573315c7a16a6dbe": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6570. add api that enables checking if a user has certain permissions on a file. Contributed by Jitendra Pandey.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614723 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/07/14 10:49 AM",
      "commitName": "535fe14dedbf919442ec03ac573315c7a16a6dbe",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,23 @@\n+  static void checkAccessPermissions(FileStatus stat, FsAction mode)\n+      throws IOException {\n+    FsPermission perm \u003d stat.getPermission();\n+    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n+    String user \u003d ugi.getShortUserName();\n+    List\u003cString\u003e groups \u003d Arrays.asList(ugi.getGroupNames());\n+    if (user.equals(stat.getOwner())) {\n+      if (perm.getUserAction().implies(mode)) {\n+        return;\n+      }\n+    } else if (groups.contains(stat.getGroup())) {\n+      if (perm.getGroupAction().implies(mode)) {\n+        return;\n+      }\n+    } else {\n+      if (perm.getOtherAction().implies(mode)) {\n+        return;\n+      }\n+    }\n+    throw new AccessControlException(String.format(\n+      \"Permission denied: user\u003d%s, path\u003d\\\"%s\\\":%s:%s:%s%s\", user, stat.getPath(),\n+      stat.getOwner(), stat.getGroup(), stat.isDirectory() ? \"d\" : \"-\", perm));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static void checkAccessPermissions(FileStatus stat, FsAction mode)\n      throws IOException {\n    FsPermission perm \u003d stat.getPermission();\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    String user \u003d ugi.getShortUserName();\n    List\u003cString\u003e groups \u003d Arrays.asList(ugi.getGroupNames());\n    if (user.equals(stat.getOwner())) {\n      if (perm.getUserAction().implies(mode)) {\n        return;\n      }\n    } else if (groups.contains(stat.getGroup())) {\n      if (perm.getGroupAction().implies(mode)) {\n        return;\n      }\n    } else {\n      if (perm.getOtherAction().implies(mode)) {\n        return;\n      }\n    }\n    throw new AccessControlException(String.format(\n      \"Permission denied: user\u003d%s, path\u003d\\\"%s\\\":%s:%s:%s%s\", user, stat.getPath(),\n      stat.getOwner(), stat.getGroup(), stat.isDirectory() ? \"d\" : \"-\", perm));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java"
    }
  }
}