{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterWebHdfsMethods.java",
  "functionName": "getRandomDatanode",
  "functionId": "getRandomDatanode___dns-DatanodeInfo[](modifiers-final)__excludes-HashSet__Node__(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterWebHdfsMethods.java",
  "functionStartLine": 520,
  "functionEndLine": 549,
  "numCommitsSeen": 6,
  "timeTaken": 775,
  "changeHistory": [
    "6e31a090842f8aeedb331b653b075499f8df6c60"
  ],
  "changeHistoryShort": {
    "6e31a090842f8aeedb331b653b075499f8df6c60": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6e31a090842f8aeedb331b653b075499f8df6c60": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12512. RBF: Add WebHDFS.\n",
      "commitDate": "23/03/18 8:32 AM",
      "commitName": "6e31a090842f8aeedb331b653b075499f8df6c60",
      "commitAuthor": "weiy",
      "diff": "@@ -0,0 +1,30 @@\n+  private static DatanodeInfo getRandomDatanode(\n+      final DatanodeInfo[] dns, final HashSet\u003cNode\u003e excludes) {\n+    DatanodeInfo dn \u003d null;\n+\n+    if (dns \u003d\u003d null) {\n+      return dn;\n+    }\n+\n+    int numDNs \u003d dns.length;\n+    int availableNodes \u003d 0;\n+    if (excludes.isEmpty()) {\n+      availableNodes \u003d numDNs;\n+    } else {\n+      for (DatanodeInfo di : dns) {\n+        if (!excludes.contains(di)) {\n+          availableNodes++;\n+        }\n+      }\n+    }\n+\n+    // Return a random one from the list\n+    if (availableNodes \u003e 0) {\n+      while (dn \u003d\u003d null || excludes.contains(dn)) {\n+        Random rnd \u003d new Random();\n+        int idx \u003d rnd.nextInt(numDNs);\n+        dn \u003d dns[idx];\n+      }\n+    }\n+    return dn;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static DatanodeInfo getRandomDatanode(\n      final DatanodeInfo[] dns, final HashSet\u003cNode\u003e excludes) {\n    DatanodeInfo dn \u003d null;\n\n    if (dns \u003d\u003d null) {\n      return dn;\n    }\n\n    int numDNs \u003d dns.length;\n    int availableNodes \u003d 0;\n    if (excludes.isEmpty()) {\n      availableNodes \u003d numDNs;\n    } else {\n      for (DatanodeInfo di : dns) {\n        if (!excludes.contains(di)) {\n          availableNodes++;\n        }\n      }\n    }\n\n    // Return a random one from the list\n    if (availableNodes \u003e 0) {\n      while (dn \u003d\u003d null || excludes.contains(dn)) {\n        Random rnd \u003d new Random();\n        int idx \u003d rnd.nextInt(numDNs);\n        dn \u003d dns[idx];\n      }\n    }\n    return dn;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterWebHdfsMethods.java"
    }
  }
}