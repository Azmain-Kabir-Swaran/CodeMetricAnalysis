{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultSpeculator.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/DefaultSpeculator.java",
  "functionStartLine": 194,
  "functionEndLine": 220,
  "numCommitsSeen": 23,
  "timeTaken": 9409,
  "changeHistory": [
    "8acc5e9b4b3fea8b418b3526c15022c8a9fedd56",
    "38c4e17ec1e5b6068414227495be81beb808b85f",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "8acc5e9b4b3fea8b418b3526c15022c8a9fedd56": "Ybodychange",
    "38c4e17ec1e5b6068414227495be81beb808b85f": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymultichange(Ymovefromfile,Ybodychange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8acc5e9b4b3fea8b418b3526c15022c8a9fedd56": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6143. add configuration for mapreduce speculative execution in MR2 (zxu via rkanter)\n",
      "commitDate": "02/02/15 1:51 PM",
      "commitName": "8acc5e9b4b3fea8b418b3526c15022c8a9fedd56",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "28/08/14 7:05 PM",
      "commitNameOld": "fef8554be80c01519870ad2969f6c9f3df4d6a7f",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 157.82,
      "commitsBetweenForRepo": 1288,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n             public void run() {\n               while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n                 long backgroundRunStartTime \u003d clock.getTime();\n                 try {\n                   int speculations \u003d computeSpeculations();\n                   long mininumRecomp\n-                      \u003d speculations \u003e 0 ? SOONEST_RETRY_AFTER_SPECULATE\n-                                         : SOONEST_RETRY_AFTER_NO_SPECULATE;\n+                      \u003d speculations \u003e 0 ? soonestRetryAfterSpeculate\n+                                         : soonestRetryAfterNoSpeculate;\n \n                   long wait \u003d Math.max(mininumRecomp,\n                         clock.getTime() - backgroundRunStartTime);\n \n                   if (speculations \u003e 0) {\n                     LOG.info(\"We launched \" + speculations\n                         + \" speculations.  Sleeping \" + wait + \" milliseconds.\");\n                   }\n \n                   Object pollResult\n                       \u003d scanControl.poll(wait, TimeUnit.MILLISECONDS);\n                 } catch (InterruptedException e) {\n                   if (!stopped) {\n                     LOG.error(\"Background thread returning, interrupted\", e);\n                   }\n                   return;\n                 }\n               }\n             }\n\\ No newline at end of file\n",
      "actualSource": "            public void run() {\n              while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n                long backgroundRunStartTime \u003d clock.getTime();\n                try {\n                  int speculations \u003d computeSpeculations();\n                  long mininumRecomp\n                      \u003d speculations \u003e 0 ? soonestRetryAfterSpeculate\n                                         : soonestRetryAfterNoSpeculate;\n\n                  long wait \u003d Math.max(mininumRecomp,\n                        clock.getTime() - backgroundRunStartTime);\n\n                  if (speculations \u003e 0) {\n                    LOG.info(\"We launched \" + speculations\n                        + \" speculations.  Sleeping \" + wait + \" milliseconds.\");\n                  }\n\n                  Object pollResult\n                      \u003d scanControl.poll(wait, TimeUnit.MILLISECONDS);\n                } catch (InterruptedException e) {\n                  if (!stopped) {\n                    LOG.error(\"Background thread returning, interrupted\", e);\n                  }\n                  return;\n                }\n              }\n            }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/DefaultSpeculator.java",
      "extendedDetails": {}
    },
    "38c4e17ec1e5b6068414227495be81beb808b85f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4794. DefaultSpeculator generates error messages on normal shutdown (Jason Lowe via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1451826 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/03/13 7:30 PM",
      "commitName": "38c4e17ec1e5b6068414227495be81beb808b85f",
      "commitAuthor": "Jonathan Turner Eagles",
      "commitDateOld": "18/10/12 10:57 PM",
      "commitNameOld": "022f7b4a25c73b8c43985e8d1bac717b96373ac6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 133.9,
      "commitsBetweenForRepo": 588,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n             public void run() {\n-              while (!Thread.currentThread().isInterrupted()) {\n+              while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n                 long backgroundRunStartTime \u003d clock.getTime();\n                 try {\n                   int speculations \u003d computeSpeculations();\n                   long mininumRecomp\n                       \u003d speculations \u003e 0 ? SOONEST_RETRY_AFTER_SPECULATE\n                                          : SOONEST_RETRY_AFTER_NO_SPECULATE;\n \n                   long wait \u003d Math.max(mininumRecomp,\n                         clock.getTime() - backgroundRunStartTime);\n \n                   if (speculations \u003e 0) {\n                     LOG.info(\"We launched \" + speculations\n                         + \" speculations.  Sleeping \" + wait + \" milliseconds.\");\n                   }\n \n                   Object pollResult\n                       \u003d scanControl.poll(wait, TimeUnit.MILLISECONDS);\n                 } catch (InterruptedException e) {\n-                  LOG.error(\"Background thread returning, interrupted : \" + e);\n-                  e.printStackTrace(System.out);\n+                  if (!stopped) {\n+                    LOG.error(\"Background thread returning, interrupted\", e);\n+                  }\n                   return;\n                 }\n               }\n             }\n\\ No newline at end of file\n",
      "actualSource": "            public void run() {\n              while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n                long backgroundRunStartTime \u003d clock.getTime();\n                try {\n                  int speculations \u003d computeSpeculations();\n                  long mininumRecomp\n                      \u003d speculations \u003e 0 ? SOONEST_RETRY_AFTER_SPECULATE\n                                         : SOONEST_RETRY_AFTER_NO_SPECULATE;\n\n                  long wait \u003d Math.max(mininumRecomp,\n                        clock.getTime() - backgroundRunStartTime);\n\n                  if (speculations \u003e 0) {\n                    LOG.info(\"We launched \" + speculations\n                        + \" speculations.  Sleeping \" + wait + \" milliseconds.\");\n                  }\n\n                  Object pollResult\n                      \u003d scanControl.poll(wait, TimeUnit.MILLISECONDS);\n                } catch (InterruptedException e) {\n                  if (!stopped) {\n                    LOG.error(\"Background thread returning, interrupted\", e);\n                  }\n                  return;\n                }\n              }\n            }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/DefaultSpeculator.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "            public void run() {\n              while (!Thread.currentThread().isInterrupted()) {\n                long backgroundRunStartTime \u003d clock.getTime();\n                try {\n                  int speculations \u003d computeSpeculations();\n                  long mininumRecomp\n                      \u003d speculations \u003e 0 ? SOONEST_RETRY_AFTER_SPECULATE\n                                         : SOONEST_RETRY_AFTER_NO_SPECULATE;\n\n                  long wait \u003d Math.max(mininumRecomp,\n                        clock.getTime() - backgroundRunStartTime);\n\n                  if (speculations \u003e 0) {\n                    LOG.info(\"We launched \" + speculations\n                        + \" speculations.  Sleeping \" + wait + \" milliseconds.\");\n                  }\n\n                  Object pollResult\n                      \u003d scanControl.poll(wait, TimeUnit.MILLISECONDS);\n                } catch (InterruptedException e) {\n                  LOG.error(\"Background thread returning, interrupted : \" + e);\n                  e.printStackTrace(System.out);\n                  return;\n                }\n              }\n            }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/DefaultSpeculator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/DefaultSpeculator.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/DefaultSpeculator.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,26 @@\n-      public void run() {\n-        try {\n-          RunningJob rjob \u003d localizeJob(tip);\n-          // Localization is done. Neither rjob.jobConf nor rjob.ugi can be null\n-          launchTaskForJob(tip, new JobConf(rjob.getJobConf()), rjob.ugi); \n-        } catch (Throwable e) {\n-          String msg \u003d (\"Error initializing \" + tip.getTask().getTaskID() + \n-                        \":\\n\" + StringUtils.stringifyException(e));\n-          LOG.warn(msg);\n-          tip.reportDiagnosticInfo(msg);\n-          try {\n-            tip.kill(true);\n-            tip.cleanup(true);\n-          } catch (IOException ie2) {\n-            LOG.info(\"Error cleaning up \" + tip.getTask().getTaskID() + \":\\n\" +\n-                     StringUtils.stringifyException(ie2));          \n-          }\n-          if (e instanceof Error) {\n-            LOG.error(\"TaskLauncher error \" +\n-                StringUtils.stringifyException(e));\n-          }\n-        }\n-      }\n\\ No newline at end of file\n+            public void run() {\n+              while (!Thread.currentThread().isInterrupted()) {\n+                long backgroundRunStartTime \u003d clock.getTime();\n+                try {\n+                  int speculations \u003d computeSpeculations();\n+                  long mininumRecomp\n+                      \u003d speculations \u003e 0 ? SOONEST_RETRY_AFTER_SPECULATE\n+                                         : SOONEST_RETRY_AFTER_NO_SPECULATE;\n+\n+                  long wait \u003d Math.max(mininumRecomp,\n+                        clock.getTime() - backgroundRunStartTime);\n+\n+                  if (speculations \u003e 0) {\n+                    LOG.info(\"We launched \" + speculations\n+                        + \" speculations.  Sleeping \" + wait + \" milliseconds.\");\n+                  }\n+\n+                  Object pollResult\n+                      \u003d scanControl.poll(wait, TimeUnit.MILLISECONDS);\n+                } catch (InterruptedException e) {\n+                  LOG.error(\"Background thread returning, interrupted : \" + e);\n+                  e.printStackTrace(System.out);\n+                  return;\n+                }\n+              }\n+            }\n\\ No newline at end of file\n",
          "actualSource": "            public void run() {\n              while (!Thread.currentThread().isInterrupted()) {\n                long backgroundRunStartTime \u003d clock.getTime();\n                try {\n                  int speculations \u003d computeSpeculations();\n                  long mininumRecomp\n                      \u003d speculations \u003e 0 ? SOONEST_RETRY_AFTER_SPECULATE\n                                         : SOONEST_RETRY_AFTER_NO_SPECULATE;\n\n                  long wait \u003d Math.max(mininumRecomp,\n                        clock.getTime() - backgroundRunStartTime);\n\n                  if (speculations \u003e 0) {\n                    LOG.info(\"We launched \" + speculations\n                        + \" speculations.  Sleeping \" + wait + \" milliseconds.\");\n                  }\n\n                  Object pollResult\n                      \u003d scanControl.poll(wait, TimeUnit.MILLISECONDS);\n                } catch (InterruptedException e) {\n                  LOG.error(\"Background thread returning, interrupted : \" + e);\n                  e.printStackTrace(System.out);\n                  return;\n                }\n              }\n            }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/DefaultSpeculator.java",
          "extendedDetails": {
            "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/TaskTracker.java",
            "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/DefaultSpeculator.java",
            "oldMethodName": "run",
            "newMethodName": "run"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,26 @@\n-      public void run() {\n-        try {\n-          RunningJob rjob \u003d localizeJob(tip);\n-          // Localization is done. Neither rjob.jobConf nor rjob.ugi can be null\n-          launchTaskForJob(tip, new JobConf(rjob.getJobConf()), rjob.ugi); \n-        } catch (Throwable e) {\n-          String msg \u003d (\"Error initializing \" + tip.getTask().getTaskID() + \n-                        \":\\n\" + StringUtils.stringifyException(e));\n-          LOG.warn(msg);\n-          tip.reportDiagnosticInfo(msg);\n-          try {\n-            tip.kill(true);\n-            tip.cleanup(true);\n-          } catch (IOException ie2) {\n-            LOG.info(\"Error cleaning up \" + tip.getTask().getTaskID() + \":\\n\" +\n-                     StringUtils.stringifyException(ie2));          \n-          }\n-          if (e instanceof Error) {\n-            LOG.error(\"TaskLauncher error \" +\n-                StringUtils.stringifyException(e));\n-          }\n-        }\n-      }\n\\ No newline at end of file\n+            public void run() {\n+              while (!Thread.currentThread().isInterrupted()) {\n+                long backgroundRunStartTime \u003d clock.getTime();\n+                try {\n+                  int speculations \u003d computeSpeculations();\n+                  long mininumRecomp\n+                      \u003d speculations \u003e 0 ? SOONEST_RETRY_AFTER_SPECULATE\n+                                         : SOONEST_RETRY_AFTER_NO_SPECULATE;\n+\n+                  long wait \u003d Math.max(mininumRecomp,\n+                        clock.getTime() - backgroundRunStartTime);\n+\n+                  if (speculations \u003e 0) {\n+                    LOG.info(\"We launched \" + speculations\n+                        + \" speculations.  Sleeping \" + wait + \" milliseconds.\");\n+                  }\n+\n+                  Object pollResult\n+                      \u003d scanControl.poll(wait, TimeUnit.MILLISECONDS);\n+                } catch (InterruptedException e) {\n+                  LOG.error(\"Background thread returning, interrupted : \" + e);\n+                  e.printStackTrace(System.out);\n+                  return;\n+                }\n+              }\n+            }\n\\ No newline at end of file\n",
          "actualSource": "            public void run() {\n              while (!Thread.currentThread().isInterrupted()) {\n                long backgroundRunStartTime \u003d clock.getTime();\n                try {\n                  int speculations \u003d computeSpeculations();\n                  long mininumRecomp\n                      \u003d speculations \u003e 0 ? SOONEST_RETRY_AFTER_SPECULATE\n                                         : SOONEST_RETRY_AFTER_NO_SPECULATE;\n\n                  long wait \u003d Math.max(mininumRecomp,\n                        clock.getTime() - backgroundRunStartTime);\n\n                  if (speculations \u003e 0) {\n                    LOG.info(\"We launched \" + speculations\n                        + \" speculations.  Sleeping \" + wait + \" milliseconds.\");\n                  }\n\n                  Object pollResult\n                      \u003d scanControl.poll(wait, TimeUnit.MILLISECONDS);\n                } catch (InterruptedException e) {\n                  LOG.error(\"Background thread returning, interrupted : \" + e);\n                  e.printStackTrace(System.out);\n                  return;\n                }\n              }\n            }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/DefaultSpeculator.java",
          "extendedDetails": {}
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,48 @@\n+  public void run() {\n+    try {\n+      startCleanupThreads();\n+      boolean denied \u003d false;\n+      while (running \u0026\u0026 !shuttingDown \u0026\u0026 !denied) {\n+        boolean staleState \u003d false;\n+        try {\n+          // This while-loop attempts reconnects if we get network errors\n+          while (running \u0026\u0026 !staleState \u0026\u0026 !shuttingDown \u0026\u0026 !denied) {\n+            try {\n+              State osState \u003d offerService();\n+              if (osState \u003d\u003d State.STALE) {\n+                staleState \u003d true;\n+              } else if (osState \u003d\u003d State.DENIED) {\n+                denied \u003d true;\n+              }\n+            } catch (Exception ex) {\n+              if (!shuttingDown) {\n+                LOG.info(\"Lost connection to JobTracker [\" +\n+                         jobTrackAddr + \"].  Retrying...\", ex);\n+                try {\n+                  Thread.sleep(5000);\n+                } catch (InterruptedException ie) {\n+                }\n+              }\n+            }\n+          }\n+        } finally {\n+          close();\n+        }\n+        if (shuttingDown) { return; }\n+        LOG.warn(\"Reinitializing local state\");\n+        initialize();\n+      }\n+      if (denied) {\n+        shutdown();\n+      }\n+    } catch (IOException iex) {\n+      LOG.error(\"Got fatal exception while reinitializing TaskTracker: \" +\n+                StringUtils.stringifyException(iex));\n+      return;\n+    }\n+    catch (InterruptedException i) {\n+      LOG.error(\"Got interrupted while reinitializing TaskTracker: \" + \n+          i.getMessage());\n+      return;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    try {\n      startCleanupThreads();\n      boolean denied \u003d false;\n      while (running \u0026\u0026 !shuttingDown \u0026\u0026 !denied) {\n        boolean staleState \u003d false;\n        try {\n          // This while-loop attempts reconnects if we get network errors\n          while (running \u0026\u0026 !staleState \u0026\u0026 !shuttingDown \u0026\u0026 !denied) {\n            try {\n              State osState \u003d offerService();\n              if (osState \u003d\u003d State.STALE) {\n                staleState \u003d true;\n              } else if (osState \u003d\u003d State.DENIED) {\n                denied \u003d true;\n              }\n            } catch (Exception ex) {\n              if (!shuttingDown) {\n                LOG.info(\"Lost connection to JobTracker [\" +\n                         jobTrackAddr + \"].  Retrying...\", ex);\n                try {\n                  Thread.sleep(5000);\n                } catch (InterruptedException ie) {\n                }\n              }\n            }\n          }\n        } finally {\n          close();\n        }\n        if (shuttingDown) { return; }\n        LOG.warn(\"Reinitializing local state\");\n        initialize();\n      }\n      if (denied) {\n        shutdown();\n      }\n    } catch (IOException iex) {\n      LOG.error(\"Got fatal exception while reinitializing TaskTracker: \" +\n                StringUtils.stringifyException(iex));\n      return;\n    }\n    catch (InterruptedException i) {\n      LOG.error(\"Got interrupted while reinitializing TaskTracker: \" + \n          i.getMessage());\n      return;\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/TaskTracker.java"
    }
  }
}