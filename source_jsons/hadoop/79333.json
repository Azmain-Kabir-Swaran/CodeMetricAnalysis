{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileUtil.java",
  "functionName": "symLink",
  "functionId": "symLink___target-String__linkname-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
  "functionStartLine": 1032,
  "functionEndLine": 1085,
  "numCommitsSeen": 68,
  "timeTaken": 2801,
  "changeHistory": [
    "db81f85e844b53595f40e5699776a336faad2f84",
    "c59af2fdf8f7f53117c626a895dab7fd78cf08ec",
    "f2942687d44caaaedae98132024f8fc1dc4a884a",
    "638801cce16fc1dc3259c541dc30a599faaddda1",
    "06b394dcf90d38a724ef9b8779a507d0b196d358",
    "972953bd778081b9e8a0c3778d6df5c5e97368fa",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "db81f85e844b53595f40e5699776a336faad2f84": "Ybodychange",
    "c59af2fdf8f7f53117c626a895dab7fd78cf08ec": "Ybodychange",
    "f2942687d44caaaedae98132024f8fc1dc4a884a": "Ybodychange",
    "638801cce16fc1dc3259c541dc30a599faaddda1": "Ybodychange",
    "06b394dcf90d38a724ef9b8779a507d0b196d358": "Ybodychange",
    "972953bd778081b9e8a0c3778d6df5c5e97368fa": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "db81f85e844b53595f40e5699776a336faad2f84": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15513. Add additional test cases to cover some corner cases for FileUtil#symlink. Contributed by Giovanni Matteo Fumarola.\n",
      "commitDate": "06/06/18 11:44 AM",
      "commitName": "db81f85e844b53595f40e5699776a336faad2f84",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "23/05/18 1:16 AM",
      "commitNameOld": "745f203e577bacb35b042206db94615141fa5e6f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 14.44,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,54 @@\n   public static int symLink(String target, String linkname) throws IOException{\n+\n+    if (target \u003d\u003d null || linkname \u003d\u003d null) {\n+      LOG.warn(\"Can not create a symLink with a target \u003d \" + target\n+          + \" and link \u003d\" + linkname);\n+      return 1;\n+    }\n+\n     // Run the input paths through Java\u0027s File so that they are converted to the\n     // native OS form\n     File targetFile \u003d new File(\n         Path.getPathWithoutSchemeAndAuthority(new Path(target)).toString());\n     File linkFile \u003d new File(\n         Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString());\n \n     String[] cmd \u003d Shell.getSymlinkCommand(\n         targetFile.toString(),\n         linkFile.toString());\n \n     ShellCommandExecutor shExec;\n     try {\n       if (Shell.WINDOWS \u0026\u0026\n           linkFile.getParentFile() !\u003d null \u0026\u0026\n           !new Path(target).isAbsolute()) {\n         // Relative links on Windows must be resolvable at the time of\n         // creation. To ensure this we run the shell command in the directory\n         // of the link.\n         //\n         shExec \u003d new ShellCommandExecutor(cmd, linkFile.getParentFile());\n       } else {\n         shExec \u003d new ShellCommandExecutor(cmd);\n       }\n       shExec.execute();\n     } catch (Shell.ExitCodeException ec) {\n       int returnVal \u003d ec.getExitCode();\n       if (Shell.WINDOWS \u0026\u0026 returnVal \u003d\u003d SYMLINK_NO_PRIVILEGE) {\n         LOG.warn(\"Fail to create symbolic links on Windows. \"\n             + \"The default security settings in Windows disallow non-elevated \"\n             + \"administrators and all non-administrators from creating symbolic links. \"\n             + \"This behavior can be changed in the Local Security Policy management console\");\n       } else if (returnVal !\u003d 0) {\n         LOG.warn(\"Command \u0027\" + StringUtils.join(\" \", cmd) + \"\u0027 failed \"\n             + returnVal + \" with: \" + ec.getMessage());\n       }\n       return returnVal;\n     } catch (IOException e) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Error while create symlink \" + linkname + \" to \" + target\n             + \".\" + \" Exception: \" + StringUtils.stringifyException(e));\n       }\n       throw e;\n     }\n     return shExec.getExitCode();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int symLink(String target, String linkname) throws IOException{\n\n    if (target \u003d\u003d null || linkname \u003d\u003d null) {\n      LOG.warn(\"Can not create a symLink with a target \u003d \" + target\n          + \" and link \u003d\" + linkname);\n      return 1;\n    }\n\n    // Run the input paths through Java\u0027s File so that they are converted to the\n    // native OS form\n    File targetFile \u003d new File(\n        Path.getPathWithoutSchemeAndAuthority(new Path(target)).toString());\n    File linkFile \u003d new File(\n        Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString());\n\n    String[] cmd \u003d Shell.getSymlinkCommand(\n        targetFile.toString(),\n        linkFile.toString());\n\n    ShellCommandExecutor shExec;\n    try {\n      if (Shell.WINDOWS \u0026\u0026\n          linkFile.getParentFile() !\u003d null \u0026\u0026\n          !new Path(target).isAbsolute()) {\n        // Relative links on Windows must be resolvable at the time of\n        // creation. To ensure this we run the shell command in the directory\n        // of the link.\n        //\n        shExec \u003d new ShellCommandExecutor(cmd, linkFile.getParentFile());\n      } else {\n        shExec \u003d new ShellCommandExecutor(cmd);\n      }\n      shExec.execute();\n    } catch (Shell.ExitCodeException ec) {\n      int returnVal \u003d ec.getExitCode();\n      if (Shell.WINDOWS \u0026\u0026 returnVal \u003d\u003d SYMLINK_NO_PRIVILEGE) {\n        LOG.warn(\"Fail to create symbolic links on Windows. \"\n            + \"The default security settings in Windows disallow non-elevated \"\n            + \"administrators and all non-administrators from creating symbolic links. \"\n            + \"This behavior can be changed in the Local Security Policy management console\");\n      } else if (returnVal !\u003d 0) {\n        LOG.warn(\"Command \u0027\" + StringUtils.join(\" \", cmd) + \"\u0027 failed \"\n            + returnVal + \" with: \" + ec.getMessage());\n      }\n      return returnVal;\n    } catch (IOException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Error while create symlink \" + linkname + \" to \" + target\n            + \".\" + \" Exception: \" + StringUtils.stringifyException(e));\n      }\n      throw e;\n    }\n    return shExec.getExitCode();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "c59af2fdf8f7f53117c626a895dab7fd78cf08ec": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10775. Shell operations to fail with meaningful errors on windows if winutils.exe not found. (stevel)\n",
      "commitDate": "13/10/15 1:49 PM",
      "commitName": "c59af2fdf8f7f53117c626a895dab7fd78cf08ec",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "01/09/15 10:01 AM",
      "commitNameOld": "dd149adeace8727864371c5a1484c6534f8b450b",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 42.16,
      "commitsBetweenForRepo": 305,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,47 @@\n   public static int symLink(String target, String linkname) throws IOException{\n     // Run the input paths through Java\u0027s File so that they are converted to the\n     // native OS form\n     File targetFile \u003d new File(\n         Path.getPathWithoutSchemeAndAuthority(new Path(target)).toString());\n     File linkFile \u003d new File(\n         Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString());\n \n-    // If not on Java7+, copy a file instead of creating a symlink since\n-    // Java6 has close to no support for symlinks on Windows. Specifically\n-    // File#length and File#renameTo do not work as expected.\n-    // (see HADOOP-9061 for additional details)\n-    // We still create symlinks for directories, since the scenario in this\n-    // case is different. The directory content could change in which\n-    // case the symlink loses its purpose (for example task attempt log folder\n-    // is symlinked under userlogs and userlogs are generated afterwards).\n-    if (Shell.WINDOWS \u0026\u0026 !Shell.isJava7OrAbove() \u0026\u0026 targetFile.isFile()) {\n-      try {\n-        LOG.warn(\"FileUtil#symlink: On Windows+Java6, copying file instead \" +\n-            \"of creating a symlink. Copying \" + target + \" -\u003e \" + linkname);\n-\n-        if (!linkFile.getParentFile().exists()) {\n-          LOG.warn(\"Parent directory \" + linkFile.getParent() +\n-              \" does not exist.\");\n-          return 1;\n-        } else {\n-          org.apache.commons.io.FileUtils.copyFile(targetFile, linkFile);\n-        }\n-      } catch (IOException ex) {\n-        LOG.warn(\"FileUtil#symlink failed to copy the file with error: \"\n-            + ex.getMessage());\n-        // Exit with non-zero exit code\n-        return 1;\n-      }\n-      return 0;\n-    }\n-\n     String[] cmd \u003d Shell.getSymlinkCommand(\n         targetFile.toString(),\n         linkFile.toString());\n \n     ShellCommandExecutor shExec;\n     try {\n       if (Shell.WINDOWS \u0026\u0026\n           linkFile.getParentFile() !\u003d null \u0026\u0026\n           !new Path(target).isAbsolute()) {\n         // Relative links on Windows must be resolvable at the time of\n         // creation. To ensure this we run the shell command in the directory\n         // of the link.\n         //\n         shExec \u003d new ShellCommandExecutor(cmd, linkFile.getParentFile());\n       } else {\n         shExec \u003d new ShellCommandExecutor(cmd);\n       }\n       shExec.execute();\n     } catch (Shell.ExitCodeException ec) {\n       int returnVal \u003d ec.getExitCode();\n       if (Shell.WINDOWS \u0026\u0026 returnVal \u003d\u003d SYMLINK_NO_PRIVILEGE) {\n         LOG.warn(\"Fail to create symbolic links on Windows. \"\n             + \"The default security settings in Windows disallow non-elevated \"\n             + \"administrators and all non-administrators from creating symbolic links. \"\n             + \"This behavior can be changed in the Local Security Policy management console\");\n       } else if (returnVal !\u003d 0) {\n         LOG.warn(\"Command \u0027\" + StringUtils.join(\" \", cmd) + \"\u0027 failed \"\n             + returnVal + \" with: \" + ec.getMessage());\n       }\n       return returnVal;\n     } catch (IOException e) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Error while create symlink \" + linkname + \" to \" + target\n             + \".\" + \" Exception: \" + StringUtils.stringifyException(e));\n       }\n       throw e;\n     }\n     return shExec.getExitCode();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int symLink(String target, String linkname) throws IOException{\n    // Run the input paths through Java\u0027s File so that they are converted to the\n    // native OS form\n    File targetFile \u003d new File(\n        Path.getPathWithoutSchemeAndAuthority(new Path(target)).toString());\n    File linkFile \u003d new File(\n        Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString());\n\n    String[] cmd \u003d Shell.getSymlinkCommand(\n        targetFile.toString(),\n        linkFile.toString());\n\n    ShellCommandExecutor shExec;\n    try {\n      if (Shell.WINDOWS \u0026\u0026\n          linkFile.getParentFile() !\u003d null \u0026\u0026\n          !new Path(target).isAbsolute()) {\n        // Relative links on Windows must be resolvable at the time of\n        // creation. To ensure this we run the shell command in the directory\n        // of the link.\n        //\n        shExec \u003d new ShellCommandExecutor(cmd, linkFile.getParentFile());\n      } else {\n        shExec \u003d new ShellCommandExecutor(cmd);\n      }\n      shExec.execute();\n    } catch (Shell.ExitCodeException ec) {\n      int returnVal \u003d ec.getExitCode();\n      if (Shell.WINDOWS \u0026\u0026 returnVal \u003d\u003d SYMLINK_NO_PRIVILEGE) {\n        LOG.warn(\"Fail to create symbolic links on Windows. \"\n            + \"The default security settings in Windows disallow non-elevated \"\n            + \"administrators and all non-administrators from creating symbolic links. \"\n            + \"This behavior can be changed in the Local Security Policy management console\");\n      } else if (returnVal !\u003d 0) {\n        LOG.warn(\"Command \u0027\" + StringUtils.join(\" \", cmd) + \"\u0027 failed \"\n            + returnVal + \" with: \" + ec.getMessage());\n      }\n      return returnVal;\n    } catch (IOException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Error while create symlink \" + linkname + \" to \" + target\n            + \".\" + \" Exception: \" + StringUtils.stringifyException(e));\n      }\n      throw e;\n    }\n    return shExec.getExitCode();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "f2942687d44caaaedae98132024f8fc1dc4a884a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9527. Add symlink support to LocalFileSystem on Windows. Contributed by Arpit Agarwal.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1511118 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/08/13 1:35 PM",
      "commitName": "f2942687d44caaaedae98132024f8fc1dc4a884a",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "02/07/13 12:22 PM",
      "commitNameOld": "3628553736b148f7be8b13d2e629b1c0c3806f6b",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 35.05,
      "commitsBetweenForRepo": 210,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,76 @@\n   public static int symLink(String target, String linkname) throws IOException{\n     // Run the input paths through Java\u0027s File so that they are converted to the\n     // native OS form\n-    File targetFile \u003d new File(target);\n-    File linkFile \u003d new File(linkname);\n+    File targetFile \u003d new File(\n+        Path.getPathWithoutSchemeAndAuthority(new Path(target)).toString());\n+    File linkFile \u003d new File(\n+        Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString());\n \n     // If not on Java7+, copy a file instead of creating a symlink since\n     // Java6 has close to no support for symlinks on Windows. Specifically\n     // File#length and File#renameTo do not work as expected.\n     // (see HADOOP-9061 for additional details)\n     // We still create symlinks for directories, since the scenario in this\n     // case is different. The directory content could change in which\n     // case the symlink loses its purpose (for example task attempt log folder\n     // is symlinked under userlogs and userlogs are generated afterwards).\n     if (Shell.WINDOWS \u0026\u0026 !Shell.isJava7OrAbove() \u0026\u0026 targetFile.isFile()) {\n       try {\n-        LOG.info(\"FileUtil#symlink: On Java6, copying file instead \"\n-            + linkname + \" -\u003e \" + target);\n-        org.apache.commons.io.FileUtils.copyFile(targetFile, linkFile);\n+        LOG.warn(\"FileUtil#symlink: On Windows+Java6, copying file instead \" +\n+            \"of creating a symlink. Copying \" + target + \" -\u003e \" + linkname);\n+\n+        if (!linkFile.getParentFile().exists()) {\n+          LOG.warn(\"Parent directory \" + linkFile.getParent() +\n+              \" does not exist.\");\n+          return 1;\n+        } else {\n+          org.apache.commons.io.FileUtils.copyFile(targetFile, linkFile);\n+        }\n       } catch (IOException ex) {\n         LOG.warn(\"FileUtil#symlink failed to copy the file with error: \"\n             + ex.getMessage());\n         // Exit with non-zero exit code\n         return 1;\n       }\n       return 0;\n     }\n \n-    String[] cmd \u003d Shell.getSymlinkCommand(targetFile.getPath(),\n-        linkFile.getPath());\n-    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(cmd);\n+    String[] cmd \u003d Shell.getSymlinkCommand(\n+        targetFile.toString(),\n+        linkFile.toString());\n+\n+    ShellCommandExecutor shExec;\n     try {\n+      if (Shell.WINDOWS \u0026\u0026\n+          linkFile.getParentFile() !\u003d null \u0026\u0026\n+          !new Path(target).isAbsolute()) {\n+        // Relative links on Windows must be resolvable at the time of\n+        // creation. To ensure this we run the shell command in the directory\n+        // of the link.\n+        //\n+        shExec \u003d new ShellCommandExecutor(cmd, linkFile.getParentFile());\n+      } else {\n+        shExec \u003d new ShellCommandExecutor(cmd);\n+      }\n       shExec.execute();\n     } catch (Shell.ExitCodeException ec) {\n       int returnVal \u003d ec.getExitCode();\n       if (Shell.WINDOWS \u0026\u0026 returnVal \u003d\u003d SYMLINK_NO_PRIVILEGE) {\n         LOG.warn(\"Fail to create symbolic links on Windows. \"\n             + \"The default security settings in Windows disallow non-elevated \"\n             + \"administrators and all non-administrators from creating symbolic links. \"\n             + \"This behavior can be changed in the Local Security Policy management console\");\n       } else if (returnVal !\u003d 0) {\n         LOG.warn(\"Command \u0027\" + StringUtils.join(\" \", cmd) + \"\u0027 failed \"\n             + returnVal + \" with: \" + ec.getMessage());\n       }\n       return returnVal;\n     } catch (IOException e) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Error while create symlink \" + linkname + \" to \" + target\n             + \".\" + \" Exception: \" + StringUtils.stringifyException(e));\n       }\n       throw e;\n     }\n     return shExec.getExitCode();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int symLink(String target, String linkname) throws IOException{\n    // Run the input paths through Java\u0027s File so that they are converted to the\n    // native OS form\n    File targetFile \u003d new File(\n        Path.getPathWithoutSchemeAndAuthority(new Path(target)).toString());\n    File linkFile \u003d new File(\n        Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString());\n\n    // If not on Java7+, copy a file instead of creating a symlink since\n    // Java6 has close to no support for symlinks on Windows. Specifically\n    // File#length and File#renameTo do not work as expected.\n    // (see HADOOP-9061 for additional details)\n    // We still create symlinks for directories, since the scenario in this\n    // case is different. The directory content could change in which\n    // case the symlink loses its purpose (for example task attempt log folder\n    // is symlinked under userlogs and userlogs are generated afterwards).\n    if (Shell.WINDOWS \u0026\u0026 !Shell.isJava7OrAbove() \u0026\u0026 targetFile.isFile()) {\n      try {\n        LOG.warn(\"FileUtil#symlink: On Windows+Java6, copying file instead \" +\n            \"of creating a symlink. Copying \" + target + \" -\u003e \" + linkname);\n\n        if (!linkFile.getParentFile().exists()) {\n          LOG.warn(\"Parent directory \" + linkFile.getParent() +\n              \" does not exist.\");\n          return 1;\n        } else {\n          org.apache.commons.io.FileUtils.copyFile(targetFile, linkFile);\n        }\n      } catch (IOException ex) {\n        LOG.warn(\"FileUtil#symlink failed to copy the file with error: \"\n            + ex.getMessage());\n        // Exit with non-zero exit code\n        return 1;\n      }\n      return 0;\n    }\n\n    String[] cmd \u003d Shell.getSymlinkCommand(\n        targetFile.toString(),\n        linkFile.toString());\n\n    ShellCommandExecutor shExec;\n    try {\n      if (Shell.WINDOWS \u0026\u0026\n          linkFile.getParentFile() !\u003d null \u0026\u0026\n          !new Path(target).isAbsolute()) {\n        // Relative links on Windows must be resolvable at the time of\n        // creation. To ensure this we run the shell command in the directory\n        // of the link.\n        //\n        shExec \u003d new ShellCommandExecutor(cmd, linkFile.getParentFile());\n      } else {\n        shExec \u003d new ShellCommandExecutor(cmd);\n      }\n      shExec.execute();\n    } catch (Shell.ExitCodeException ec) {\n      int returnVal \u003d ec.getExitCode();\n      if (Shell.WINDOWS \u0026\u0026 returnVal \u003d\u003d SYMLINK_NO_PRIVILEGE) {\n        LOG.warn(\"Fail to create symbolic links on Windows. \"\n            + \"The default security settings in Windows disallow non-elevated \"\n            + \"administrators and all non-administrators from creating symbolic links. \"\n            + \"This behavior can be changed in the Local Security Policy management console\");\n      } else if (returnVal !\u003d 0) {\n        LOG.warn(\"Command \u0027\" + StringUtils.join(\" \", cmd) + \"\u0027 failed \"\n            + returnVal + \" with: \" + ec.getMessage());\n      }\n      return returnVal;\n    } catch (IOException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Error while create symlink \" + linkname + \" to \" + target\n            + \".\" + \" Exception: \" + StringUtils.stringifyException(e));\n      }\n      throw e;\n    }\n    return shExec.getExitCode();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "638801cce16fc1dc3259c541dc30a599faaddda1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8952. Enhancements to support Hadoop on Windows Server and Windows Azure environments. Contributed by Ivan Mitic, Chuan Liu, Ramya Sunil, Bikas Saha, Kanna Karanam, John Gordon, Brandon Li, Chris Nauroth, David Lao, Sumadhur Reddy Bolli, Arpit Agarwal, Ahmed El Baz, Mike Liddell, Jing Zhao, Thejas Nair, Steve Maine, Ganeshan Iyer, Raja Aluri, Giridharan Kesavan, Ramya Bharathi Nimmagadda.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453486 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/13 11:15 AM",
      "commitName": "638801cce16fc1dc3259c541dc30a599faaddda1",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "31/01/13 12:13 PM",
      "commitNameOld": "71a57ded39a605166d616fe68f36017cdb0abe3e",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 33.96,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,54 @@\n   public static int symLink(String target, String linkname) throws IOException{\n-    String cmd \u003d \"ln -s \" + target + \" \" + linkname;\n-    Process p \u003d Runtime.getRuntime().exec(cmd, null);\n-    int returnVal \u003d -1;\n-    try{\n-      returnVal \u003d p.waitFor();\n-    } catch(InterruptedException e){\n-      //do nothing as of yet\n+    // Run the input paths through Java\u0027s File so that they are converted to the\n+    // native OS form\n+    File targetFile \u003d new File(target);\n+    File linkFile \u003d new File(linkname);\n+\n+    // If not on Java7+, copy a file instead of creating a symlink since\n+    // Java6 has close to no support for symlinks on Windows. Specifically\n+    // File#length and File#renameTo do not work as expected.\n+    // (see HADOOP-9061 for additional details)\n+    // We still create symlinks for directories, since the scenario in this\n+    // case is different. The directory content could change in which\n+    // case the symlink loses its purpose (for example task attempt log folder\n+    // is symlinked under userlogs and userlogs are generated afterwards).\n+    if (Shell.WINDOWS \u0026\u0026 !Shell.isJava7OrAbove() \u0026\u0026 targetFile.isFile()) {\n+      try {\n+        LOG.info(\"FileUtil#symlink: On Java6, copying file instead \"\n+            + linkname + \" -\u003e \" + target);\n+        org.apache.commons.io.FileUtils.copyFile(targetFile, linkFile);\n+      } catch (IOException ex) {\n+        LOG.warn(\"FileUtil#symlink failed to copy the file with error: \"\n+            + ex.getMessage());\n+        // Exit with non-zero exit code\n+        return 1;\n+      }\n+      return 0;\n     }\n-    return returnVal;\n+\n+    String[] cmd \u003d Shell.getSymlinkCommand(targetFile.getPath(),\n+        linkFile.getPath());\n+    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(cmd);\n+    try {\n+      shExec.execute();\n+    } catch (Shell.ExitCodeException ec) {\n+      int returnVal \u003d ec.getExitCode();\n+      if (Shell.WINDOWS \u0026\u0026 returnVal \u003d\u003d SYMLINK_NO_PRIVILEGE) {\n+        LOG.warn(\"Fail to create symbolic links on Windows. \"\n+            + \"The default security settings in Windows disallow non-elevated \"\n+            + \"administrators and all non-administrators from creating symbolic links. \"\n+            + \"This behavior can be changed in the Local Security Policy management console\");\n+      } else if (returnVal !\u003d 0) {\n+        LOG.warn(\"Command \u0027\" + StringUtils.join(\" \", cmd) + \"\u0027 failed \"\n+            + returnVal + \" with: \" + ec.getMessage());\n+      }\n+      return returnVal;\n+    } catch (IOException e) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Error while create symlink \" + linkname + \" to \" + target\n+            + \".\" + \" Exception: \" + StringUtils.stringifyException(e));\n+      }\n+      throw e;\n+    }\n+    return shExec.getExitCode();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int symLink(String target, String linkname) throws IOException{\n    // Run the input paths through Java\u0027s File so that they are converted to the\n    // native OS form\n    File targetFile \u003d new File(target);\n    File linkFile \u003d new File(linkname);\n\n    // If not on Java7+, copy a file instead of creating a symlink since\n    // Java6 has close to no support for symlinks on Windows. Specifically\n    // File#length and File#renameTo do not work as expected.\n    // (see HADOOP-9061 for additional details)\n    // We still create symlinks for directories, since the scenario in this\n    // case is different. The directory content could change in which\n    // case the symlink loses its purpose (for example task attempt log folder\n    // is symlinked under userlogs and userlogs are generated afterwards).\n    if (Shell.WINDOWS \u0026\u0026 !Shell.isJava7OrAbove() \u0026\u0026 targetFile.isFile()) {\n      try {\n        LOG.info(\"FileUtil#symlink: On Java6, copying file instead \"\n            + linkname + \" -\u003e \" + target);\n        org.apache.commons.io.FileUtils.copyFile(targetFile, linkFile);\n      } catch (IOException ex) {\n        LOG.warn(\"FileUtil#symlink failed to copy the file with error: \"\n            + ex.getMessage());\n        // Exit with non-zero exit code\n        return 1;\n      }\n      return 0;\n    }\n\n    String[] cmd \u003d Shell.getSymlinkCommand(targetFile.getPath(),\n        linkFile.getPath());\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(cmd);\n    try {\n      shExec.execute();\n    } catch (Shell.ExitCodeException ec) {\n      int returnVal \u003d ec.getExitCode();\n      if (Shell.WINDOWS \u0026\u0026 returnVal \u003d\u003d SYMLINK_NO_PRIVILEGE) {\n        LOG.warn(\"Fail to create symbolic links on Windows. \"\n            + \"The default security settings in Windows disallow non-elevated \"\n            + \"administrators and all non-administrators from creating symbolic links. \"\n            + \"This behavior can be changed in the Local Security Policy management console\");\n      } else if (returnVal !\u003d 0) {\n        LOG.warn(\"Command \u0027\" + StringUtils.join(\" \", cmd) + \"\u0027 failed \"\n            + returnVal + \" with: \" + ec.getMessage());\n      }\n      return returnVal;\n    } catch (IOException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Error while create symlink \" + linkname + \" to \" + target\n            + \".\" + \" Exception: \" + StringUtils.stringifyException(e));\n      }\n      throw e;\n    }\n    return shExec.getExitCode();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "06b394dcf90d38a724ef9b8779a507d0b196d358": {
      "type": "Ybodychange",
      "commitMessage": "Amend previous commit of HDFS-3626: accidentally included a hunk from HADOOP-8621 in svn commit. Reverting that hunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1365817 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/12 3:04 PM",
      "commitName": "06b394dcf90d38a724ef9b8779a507d0b196d358",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "25/07/12 2:52 PM",
      "commitNameOld": "972953bd778081b9e8a0c3778d6df5c5e97368fa",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n   public static int symLink(String target, String linkname) throws IOException{\n     String cmd \u003d \"ln -s \" + target + \" \" + linkname;\n-    Process p \u003d Runtime.getRuntime().exec(new String[]{\"ln\",\"-s\",target,linkname}, null);\n+    Process p \u003d Runtime.getRuntime().exec(cmd, null);\n     int returnVal \u003d -1;\n     try{\n       returnVal \u003d p.waitFor();\n     } catch(InterruptedException e){\n       //do nothing as of yet\n     }\n     return returnVal;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int symLink(String target, String linkname) throws IOException{\n    String cmd \u003d \"ln -s \" + target + \" \" + linkname;\n    Process p \u003d Runtime.getRuntime().exec(cmd, null);\n    int returnVal \u003d -1;\n    try{\n      returnVal \u003d p.waitFor();\n    } catch(InterruptedException e){\n      //do nothing as of yet\n    }\n    return returnVal;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "972953bd778081b9e8a0c3778d6df5c5e97368fa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3626. Creating file with invalid path can corrupt edit log. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1365801 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/12 2:52 PM",
      "commitName": "972953bd778081b9e8a0c3778d6df5c5e97368fa",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "05/04/12 11:28 AM",
      "commitNameOld": "bf5b508074955d8ddcf3da5ac65cf72131526333",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 111.14,
      "commitsBetweenForRepo": 655,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n   public static int symLink(String target, String linkname) throws IOException{\n     String cmd \u003d \"ln -s \" + target + \" \" + linkname;\n-    Process p \u003d Runtime.getRuntime().exec(cmd, null);\n+    Process p \u003d Runtime.getRuntime().exec(new String[]{\"ln\",\"-s\",target,linkname}, null);\n     int returnVal \u003d -1;\n     try{\n       returnVal \u003d p.waitFor();\n     } catch(InterruptedException e){\n       //do nothing as of yet\n     }\n     return returnVal;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int symLink(String target, String linkname) throws IOException{\n    String cmd \u003d \"ln -s \" + target + \" \" + linkname;\n    Process p \u003d Runtime.getRuntime().exec(new String[]{\"ln\",\"-s\",target,linkname}, null);\n    int returnVal \u003d -1;\n    try{\n      returnVal \u003d p.waitFor();\n    } catch(InterruptedException e){\n      //do nothing as of yet\n    }\n    return returnVal;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static int symLink(String target, String linkname) throws IOException{\n    String cmd \u003d \"ln -s \" + target + \" \" + linkname;\n    Process p \u003d Runtime.getRuntime().exec(cmd, null);\n    int returnVal \u003d -1;\n    try{\n      returnVal \u003d p.waitFor();\n    } catch(InterruptedException e){\n      //do nothing as of yet\n    }\n    return returnVal;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static int symLink(String target, String linkname) throws IOException{\n    String cmd \u003d \"ln -s \" + target + \" \" + linkname;\n    Process p \u003d Runtime.getRuntime().exec(cmd, null);\n    int returnVal \u003d -1;\n    try{\n      returnVal \u003d p.waitFor();\n    } catch(InterruptedException e){\n      //do nothing as of yet\n    }\n    return returnVal;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FileUtil.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static int symLink(String target, String linkname) throws IOException{\n    String cmd \u003d \"ln -s \" + target + \" \" + linkname;\n    Process p \u003d Runtime.getRuntime().exec(cmd, null);\n    int returnVal \u003d -1;\n    try{\n      returnVal \u003d p.waitFor();\n    } catch(InterruptedException e){\n      //do nothing as of yet\n    }\n    return returnVal;\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FileUtil.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FileUtil.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,11 @@\n+  public static int symLink(String target, String linkname) throws IOException{\n+    String cmd \u003d \"ln -s \" + target + \" \" + linkname;\n+    Process p \u003d Runtime.getRuntime().exec(cmd, null);\n+    int returnVal \u003d -1;\n+    try{\n+      returnVal \u003d p.waitFor();\n+    } catch(InterruptedException e){\n+      //do nothing as of yet\n+    }\n+    return returnVal;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static int symLink(String target, String linkname) throws IOException{\n    String cmd \u003d \"ln -s \" + target + \" \" + linkname;\n    Process p \u003d Runtime.getRuntime().exec(cmd, null);\n    int returnVal \u003d -1;\n    try{\n      returnVal \u003d p.waitFor();\n    } catch(InterruptedException e){\n      //do nothing as of yet\n    }\n    return returnVal;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileUtil.java"
    }
  }
}