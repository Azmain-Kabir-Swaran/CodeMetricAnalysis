{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FifoScheduler.java",
  "functionName": "completedContainerInternal",
  "functionId": "completedContainerInternal___rmContainer-RMContainer__containerStatus-ContainerStatus__event-RMContainerEventType",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
  "functionStartLine": 837,
  "functionEndLine": 874,
  "numCommitsSeen": 526,
  "timeTaken": 14584,
  "changeHistory": [
    "945db55f2e6521d33d4f90bbb09179b0feba5e7a",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "754cb4e30fac1c5fe8d44626968c0ddbfe459335",
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
    "3fe57285635e8058c34aa40a103845b49ca7d6ff",
    "adf260a728df427eb729abe8fb9ad7248991ea54",
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
    "586348e4cbf197188057d6b843a6701cfffdaff3",
    "f6a778c3725bcdaba1e1de43786af17dd44deb78",
    "1393581bceda234c88cafec00dbfc0ef2a402e83",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "9a4e890f4aadc921fa468fd1292d215704429b61",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
    "cdfabf5ae289836968b3d296668593b9500b6f26",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "945db55f2e6521d33d4f90bbb09179b0feba5e7a": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ybodychange",
    "754cb4e30fac1c5fe8d44626968c0ddbfe459335": "Ybodychange",
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7": "Ymultichange(Yrename,Ybodychange)",
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e": "Ymultichange(Yrename,Ybodychange)",
    "3fe57285635e8058c34aa40a103845b49ca7d6ff": "Ymultichange(Yrename,Ybodychange)",
    "adf260a728df427eb729abe8fb9ad7248991ea54": "Ymultichange(Yrename,Ybodychange)",
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579": "Ymultichange(Yrename,Ybodychange)",
    "586348e4cbf197188057d6b843a6701cfffdaff3": "Ybodychange",
    "f6a778c3725bcdaba1e1de43786af17dd44deb78": "Ymultichange(Yrename,Ymodifierchange)",
    "1393581bceda234c88cafec00dbfc0ef2a402e83": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ybodychange",
    "9a4e890f4aadc921fa468fd1292d215704429b61": "Ybodychange",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": "Ybodychange",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": "Ymultichange(Yparameterchange,Ybodychange)",
    "cdfabf5ae289836968b3d296668593b9500b6f26": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "945db55f2e6521d33d4f90bbb09179b0feba5e7a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4148. When killing app, RM releases app\u0027s resource before they are released by NM. Contributed by Jason Lowe.\n",
      "commitDate": "09/01/17 6:14 PM",
      "commitName": "945db55f2e6521d33d4f90bbb09179b0feba5e7a",
      "commitAuthor": "Junping Du",
      "commitDateOld": "06/01/17 9:59 AM",
      "commitNameOld": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 3.34,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   protected synchronized void completedContainerInternal(\n       RMContainer rmContainer, ContainerStatus containerStatus,\n       RMContainerEventType event) {\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     FifoAppAttempt application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event,\n         RMNodeLabelsManager.NO_LABEL);\n \n     // Inform the node\n-    node.releaseContainer(container);\n+    node.releaseContainer(rmContainer.getContainerId(), false);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FifoAppAttempt application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event,\n        RMNodeLabelsManager.NO_LABEL);\n\n    // Inform the node\n    node.releaseContainer(rmContainer.getContainerId(), false);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "20/10/16 9:17 PM",
      "commitNameOld": "754cb4e30fac1c5fe8d44626968c0ddbfe459335",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 17.58,
      "commitsBetweenForRepo": 196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   protected synchronized void completedContainerInternal(\n       RMContainer rmContainer, ContainerStatus containerStatus,\n       RMContainerEventType event) {\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n-    FiCaSchedulerApp application \u003d\n+    FifoAppAttempt application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event,\n         RMNodeLabelsManager.NO_LABEL);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FifoAppAttempt application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event,\n        RMNodeLabelsManager.NO_LABEL);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "754cb4e30fac1c5fe8d44626968c0ddbfe459335": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5047. Refactor nodeUpdate across schedulers. (Ray Chiang via kasha)\n",
      "commitDate": "20/10/16 9:17 PM",
      "commitName": "754cb4e30fac1c5fe8d44626968c0ddbfe459335",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "30/08/16 3:52 PM",
      "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 51.23,
      "commitsBetweenForRepo": 332,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   protected synchronized void completedContainerInternal(\n       RMContainer rmContainer, ContainerStatus containerStatus,\n       RMContainerEventType event) {\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n-    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n+    FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event,\n         RMNodeLabelsManager.NO_LABEL);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d (FiCaSchedulerNode) getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event,\n        RMNodeLabelsManager.NO_LABEL);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
      "commitDate": "18/01/16 5:30 PM",
      "commitName": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
          "commitDate": "18/01/16 5:30 PM",
          "commitName": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 5:27 PM",
          "commitNameOld": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,38 @@\n-  protected synchronized void completedContainer(RMContainer rmContainer,\n-      ContainerStatus containerStatus, RMContainerEventType event) {\n-    if (rmContainer \u003d\u003d null) {\n-      LOG.info(\"Null container completed...\");\n-      return;\n-    }\n+  protected synchronized void completedContainerInternal(\n+      RMContainer rmContainer, ContainerStatus containerStatus,\n+      RMContainerEventType event) {\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event,\n         RMNodeLabelsManager.NO_LABEL);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event,\n        RMNodeLabelsManager.NO_LABEL);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "completedContainer",
            "newValue": "completedContainerInternal"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
          "commitDate": "18/01/16 5:30 PM",
          "commitName": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 5:27 PM",
          "commitNameOld": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,38 @@\n-  protected synchronized void completedContainer(RMContainer rmContainer,\n-      ContainerStatus containerStatus, RMContainerEventType event) {\n-    if (rmContainer \u003d\u003d null) {\n-      LOG.info(\"Null container completed...\");\n-      return;\n-    }\n+  protected synchronized void completedContainerInternal(\n+      RMContainer rmContainer, ContainerStatus containerStatus,\n+      RMContainerEventType event) {\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event,\n         RMNodeLabelsManager.NO_LABEL);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event,\n        RMNodeLabelsManager.NO_LABEL);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 3fe57285635e8058c34aa40a103845b49ca7d6ff.\n\nConflicts:\n\thadoop-yarn-project/CHANGES.txt\n",
      "commitDate": "18/01/16 5:27 PM",
      "commitName": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 3fe57285635e8058c34aa40a103845b49ca7d6ff.\n\nConflicts:\n\thadoop-yarn-project/CHANGES.txt\n",
          "commitDate": "18/01/16 5:27 PM",
          "commitName": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 1:06 AM",
          "commitNameOld": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,41 @@\n-  protected synchronized void completedContainerInternal(\n-      RMContainer rmContainer, ContainerStatus containerStatus,\n-      RMContainerEventType event) {\n+  protected synchronized void completedContainer(RMContainer rmContainer,\n+      ContainerStatus containerStatus, RMContainerEventType event) {\n+    if (rmContainer \u003d\u003d null) {\n+      LOG.info(\"Null container completed...\");\n+      return;\n+    }\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event,\n         RMNodeLabelsManager.NO_LABEL);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event,\n        RMNodeLabelsManager.NO_LABEL);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "completedContainerInternal",
            "newValue": "completedContainer"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 3fe57285635e8058c34aa40a103845b49ca7d6ff.\n\nConflicts:\n\thadoop-yarn-project/CHANGES.txt\n",
          "commitDate": "18/01/16 5:27 PM",
          "commitName": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 1:06 AM",
          "commitNameOld": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,41 @@\n-  protected synchronized void completedContainerInternal(\n-      RMContainer rmContainer, ContainerStatus containerStatus,\n-      RMContainerEventType event) {\n+  protected synchronized void completedContainer(RMContainer rmContainer,\n+      ContainerStatus containerStatus, RMContainerEventType event) {\n+    if (rmContainer \u003d\u003d null) {\n+      LOG.info(\"Null container completed...\");\n+      return;\n+    }\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event,\n         RMNodeLabelsManager.NO_LABEL);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event,\n        RMNodeLabelsManager.NO_LABEL);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "3fe57285635e8058c34aa40a103845b49ca7d6ff": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n\n(cherry picked from commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579)\n",
      "commitDate": "18/01/16 1:06 AM",
      "commitName": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n\n(cherry picked from commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579)\n",
          "commitDate": "18/01/16 1:06 AM",
          "commitName": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 12:50 AM",
          "commitNameOld": "adf260a728df427eb729abe8fb9ad7248991ea54",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,38 @@\n-  protected synchronized void completedContainer(RMContainer rmContainer,\n-      ContainerStatus containerStatus, RMContainerEventType event) {\n-    if (rmContainer \u003d\u003d null) {\n-      LOG.info(\"Null container completed...\");\n-      return;\n-    }\n+  protected synchronized void completedContainerInternal(\n+      RMContainer rmContainer, ContainerStatus containerStatus,\n+      RMContainerEventType event) {\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event,\n         RMNodeLabelsManager.NO_LABEL);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event,\n        RMNodeLabelsManager.NO_LABEL);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "completedContainer",
            "newValue": "completedContainerInternal"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n\n(cherry picked from commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579)\n",
          "commitDate": "18/01/16 1:06 AM",
          "commitName": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/16 12:50 AM",
          "commitNameOld": "adf260a728df427eb729abe8fb9ad7248991ea54",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,38 @@\n-  protected synchronized void completedContainer(RMContainer rmContainer,\n-      ContainerStatus containerStatus, RMContainerEventType event) {\n-    if (rmContainer \u003d\u003d null) {\n-      LOG.info(\"Null container completed...\");\n-      return;\n-    }\n+  protected synchronized void completedContainerInternal(\n+      RMContainer rmContainer, ContainerStatus containerStatus,\n+      RMContainerEventType event) {\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event,\n         RMNodeLabelsManager.NO_LABEL);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event,\n        RMNodeLabelsManager.NO_LABEL);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "adf260a728df427eb729abe8fb9ad7248991ea54": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579.\n",
      "commitDate": "18/01/16 12:50 AM",
      "commitName": "adf260a728df427eb729abe8fb9ad7248991ea54",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579.\n",
          "commitDate": "18/01/16 12:50 AM",
          "commitName": "adf260a728df427eb729abe8fb9ad7248991ea54",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "17/01/16 7:04 PM",
          "commitNameOld": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,41 @@\n-  protected synchronized void completedContainerInternal(\n-      RMContainer rmContainer, ContainerStatus containerStatus,\n-      RMContainerEventType event) {\n+  protected synchronized void completedContainer(RMContainer rmContainer,\n+      ContainerStatus containerStatus, RMContainerEventType event) {\n+    if (rmContainer \u003d\u003d null) {\n+      LOG.info(\"Null container completed...\");\n+      return;\n+    }\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event,\n         RMNodeLabelsManager.NO_LABEL);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event,\n        RMNodeLabelsManager.NO_LABEL);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "completedContainerInternal",
            "newValue": "completedContainer"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579.\n",
          "commitDate": "18/01/16 12:50 AM",
          "commitName": "adf260a728df427eb729abe8fb9ad7248991ea54",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "17/01/16 7:04 PM",
          "commitNameOld": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,41 @@\n-  protected synchronized void completedContainerInternal(\n-      RMContainer rmContainer, ContainerStatus containerStatus,\n-      RMContainerEventType event) {\n+  protected synchronized void completedContainer(RMContainer rmContainer,\n+      ContainerStatus containerStatus, RMContainerEventType event) {\n+    if (rmContainer \u003d\u003d null) {\n+      LOG.info(\"Null container completed...\");\n+      return;\n+    }\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event,\n         RMNodeLabelsManager.NO_LABEL);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event,\n        RMNodeLabelsManager.NO_LABEL);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
      "commitDate": "17/01/16 7:04 PM",
      "commitName": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
          "commitDate": "17/01/16 7:04 PM",
          "commitName": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "14/12/15 10:52 AM",
          "commitNameOld": "6cb0af3c39a5d49cb2f7911ee21363a9542ca2d7",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 34.34,
          "commitsBetweenForRepo": 200,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,38 @@\n-  protected synchronized void completedContainer(RMContainer rmContainer,\n-      ContainerStatus containerStatus, RMContainerEventType event) {\n-    if (rmContainer \u003d\u003d null) {\n-      LOG.info(\"Null container completed...\");\n-      return;\n-    }\n+  protected synchronized void completedContainerInternal(\n+      RMContainer rmContainer, ContainerStatus containerStatus,\n+      RMContainerEventType event) {\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event,\n         RMNodeLabelsManager.NO_LABEL);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event,\n        RMNodeLabelsManager.NO_LABEL);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "completedContainer",
            "newValue": "completedContainerInternal"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
          "commitDate": "17/01/16 7:04 PM",
          "commitName": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "14/12/15 10:52 AM",
          "commitNameOld": "6cb0af3c39a5d49cb2f7911ee21363a9542ca2d7",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 34.34,
          "commitsBetweenForRepo": 200,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,38 @@\n-  protected synchronized void completedContainer(RMContainer rmContainer,\n-      ContainerStatus containerStatus, RMContainerEventType event) {\n-    if (rmContainer \u003d\u003d null) {\n-      LOG.info(\"Null container completed...\");\n-      return;\n-    }\n+  protected synchronized void completedContainerInternal(\n+      RMContainer rmContainer, ContainerStatus containerStatus,\n+      RMContainerEventType event) {\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event,\n         RMNodeLabelsManager.NO_LABEL);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainerInternal(\n      RMContainer rmContainer, ContainerStatus containerStatus,\n      RMContainerEventType event) {\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event,\n        RMNodeLabelsManager.NO_LABEL);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "586348e4cbf197188057d6b843a6701cfffdaff3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3356. Capacity Scheduler FiCaSchedulerApp should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
      "commitDate": "20/03/15 1:54 PM",
      "commitName": "586348e4cbf197188057d6b843a6701cfffdaff3",
      "commitAuthor": "Jian He",
      "commitDateOld": "17/03/15 9:30 PM",
      "commitNameOld": "658097d6da1b1aac8e01db459f0c3b456e99652f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 2.68,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   protected synchronized void completedContainer(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n-    application.containerCompleted(rmContainer, containerStatus, event);\n+    application.containerCompleted(rmContainer, containerStatus, event,\n+        RMNodeLabelsManager.NO_LABEL);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event,\n        RMNodeLabelsManager.NO_LABEL);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "f6a778c3725bcdaba1e1de43786af17dd44deb78": {
      "type": "Ymultichange(Yrename,Ymodifierchange)",
      "commitMessage": "YARN-2249. Avoided AM release requests being lost on work preserving RM restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618972 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/14 1:33 PM",
      "commitName": "f6a778c3725bcdaba1e1de43786af17dd44deb78",
      "commitAuthor": "Zhijie Shen",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-2249. Avoided AM release requests being lost on work preserving RM restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618972 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/08/14 1:33 PM",
          "commitName": "f6a778c3725bcdaba1e1de43786af17dd44deb78",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "18/07/14 5:12 PM",
          "commitNameOld": "8871d8ed9fb1e4b21943477dcbaa13ef22ea7b8e",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 31.85,
          "commitsBetweenForRepo": 243,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  private synchronized void containerCompleted(RMContainer rmContainer,\n+  protected synchronized void completedContainer(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "containerCompleted",
            "newValue": "completedContainer"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-2249. Avoided AM release requests being lost on work preserving RM restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618972 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/08/14 1:33 PM",
          "commitName": "f6a778c3725bcdaba1e1de43786af17dd44deb78",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "18/07/14 5:12 PM",
          "commitNameOld": "8871d8ed9fb1e4b21943477dcbaa13ef22ea7b8e",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 31.85,
          "commitsBetweenForRepo": 243,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  private synchronized void containerCompleted(RMContainer rmContainer,\n+  protected synchronized void completedContainer(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     FiCaSchedulerApp application \u003d\n         getCurrentAttemptForContainer(container.getId());\n     ApplicationId appId \u003d\n         container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[protected, synchronized]"
          }
        }
      ]
    },
    "1393581bceda234c88cafec00dbfc0ef2a402e83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1490. Introduced the ability to make ResourceManager optionally not kill all containers when an ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 7:04 AM",
      "commitName": "1393581bceda234c88cafec00dbfc0ef2a402e83",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/01/14 12:19 PM",
      "commitNameOld": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.78,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n   private synchronized void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n-    ApplicationAttemptId applicationAttemptId \u003d container.getId().getApplicationAttemptId();\n-    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n+    FiCaSchedulerApp application \u003d\n+        getCurrentAttemptForContainer(container.getId());\n+    ApplicationId appId \u003d\n+        container.getId().getApplicationAttemptId().getApplicationId();\n     \n     // Get the node on which the container was allocated\n     FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n-      LOG.info(\"Unknown application: \" + applicationAttemptId + \n+      LOG.info(\"Unknown application: \" + appId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n-    LOG.info(\"Application \" + applicationAttemptId + \n+    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    FiCaSchedulerApp application \u003d\n        getCurrentAttemptForContainer(container.getId());\n    ApplicationId appId \u003d\n        container.getId().getApplicationAttemptId().getApplicationId();\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + appId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application attempt \" + application.getApplicationAttemptId() + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getApplicationAttemptId();\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "13/07/12 1:53 PM",
      "commitNameOld": "17de78a43e8d010f3df91dc5a1a40d74b60dfb8c",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 3.2,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   private synchronized void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     ApplicationAttemptId applicationAttemptId \u003d container.getId().getApplicationAttemptId();\n-    SchedulerApp application \u003d getApplication(applicationAttemptId);\n+    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n     \n     // Get the node on which the container was allocated\n-    SchedulerNode node \u003d getNode(container.getNodeId());\n+    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + applicationAttemptId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event);\n \n     // Inform the node\n     node.releaseContainer(container);\n     \n     // Update total usage\n     Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application \" + applicationAttemptId + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getApplicationAttemptId();\n    FiCaSchedulerApp application \u003d getApplication(applicationAttemptId);\n    \n    // Get the node on which the container was allocated\n    FiCaSchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "9a4e890f4aadc921fa468fd1292d215704429b61": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2738. Added the missing cluster level statisticss on the RM web UI. Contributed by Robert Joseph Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179229 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/10/11 7:01 AM",
      "commitName": "9a4e890f4aadc921fa468fd1292d215704429b61",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "05/10/11 4:56 AM",
      "commitNameOld": "f24dcb3449c77da665058427bc7fa480cad507fc",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,38 @@\n   private synchronized void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     ApplicationAttemptId applicationAttemptId \u003d container.getId().getApplicationAttemptId();\n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n     \n     // Get the node on which the container was allocated\n     SchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + applicationAttemptId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event);\n \n     // Inform the node\n     node.releaseContainer(container);\n+    \n+    // Update total usage\n+    Resources.subtractFrom(usedResource, container.getResource());\n \n     LOG.info(\"Application \" + applicationAttemptId + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getApplicationAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    \n    // Get the node on which the container was allocated\n    SchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event);\n\n    // Inform the node\n    node.releaseContainer(container);\n    \n    // Update total usage\n    Resources.subtractFrom(usedResource, container.getResource());\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2896. Simplify all apis to in org.apache.hadoop.yarn.api.records.* to be get/set only. Added javadocs to all public records.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169980 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/09/11 5:05 PM",
      "commitName": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "11/09/11 10:26 AM",
      "commitNameOld": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.28,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   private synchronized void containerCompleted(RMContainer rmContainer,\n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n-    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n+    ApplicationAttemptId applicationAttemptId \u003d container.getId().getApplicationAttemptId();\n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n     \n     // Get the node on which the container was allocated\n     SchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + applicationAttemptId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, containerStatus, event);\n \n     // Inform the node\n     node.releaseContainer(container);\n \n     LOG.info(\"Application \" + applicationAttemptId + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getApplicationAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    \n    // Get the node on which the container was allocated\n    SchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event);\n\n    // Inform the node\n    node.releaseContainer(container);\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/11 10:26 AM",
      "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/11 10:26 AM",
          "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "08/09/11 7:04 PM",
          "commitNameOld": "035937bee8ef57bc24b08068e7375ac45413a349",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 2.64,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n   private synchronized void containerCompleted(RMContainer rmContainer,\n-      RMContainerEventType event) {\n+      ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n     \n     // Get the node on which the container was allocated\n     SchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + applicationAttemptId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n-    application.containerCompleted(rmContainer, event);\n+    application.containerCompleted(rmContainer, containerStatus, event);\n \n     // Inform the node\n     node.releaseContainer(container);\n \n     LOG.info(\"Application \" + applicationAttemptId + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    \n    // Get the node on which the container was allocated\n    SchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event);\n\n    // Inform the node\n    node.releaseContainer(container);\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "[rmContainer-RMContainer, event-RMContainerEventType]",
            "newValue": "[rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/11 10:26 AM",
          "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "08/09/11 7:04 PM",
          "commitNameOld": "035937bee8ef57bc24b08068e7375ac45413a349",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 2.64,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n   private synchronized void containerCompleted(RMContainer rmContainer,\n-      RMContainerEventType event) {\n+      ContainerStatus containerStatus, RMContainerEventType event) {\n     if (rmContainer \u003d\u003d null) {\n       LOG.info(\"Null container completed...\");\n       return;\n     }\n \n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n     \n     // Get the node on which the container was allocated\n     SchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + applicationAttemptId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n-    application.containerCompleted(rmContainer, event);\n+    application.containerCompleted(rmContainer, containerStatus, event);\n \n     // Inform the node\n     node.releaseContainer(container);\n \n     LOG.info(\"Application \" + applicationAttemptId + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void containerCompleted(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    \n    // Get the node on which the container was allocated\n    SchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, containerStatus, event);\n\n    // Inform the node\n    node.releaseContainer(container);\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "cdfabf5ae289836968b3d296668593b9500b6f26": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2655. Add audit logs to ResourceManager and NodeManager. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165949 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/11 6:24 PM",
      "commitName": "cdfabf5ae289836968b3d296668593b9500b6f26",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 13.05,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,35 @@\n   private synchronized void containerCompleted(RMContainer rmContainer,\n       RMContainerEventType event) {\n+    if (rmContainer \u003d\u003d null) {\n+      LOG.info(\"Null container completed...\");\n+      return;\n+    }\n+\n     // Get the application for the finished container\n     Container container \u003d rmContainer.getContainer();\n     ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n     SchedulerApp application \u003d getApplication(applicationAttemptId);\n     \n     // Get the node on which the container was allocated\n     SchedulerNode node \u003d getNode(container.getNodeId());\n     \n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application: \" + applicationAttemptId + \n           \" released container \" + container.getId() +\n           \" on node: \" + node + \n           \" with event: \" + event);\n       return;\n     }\n \n     // Inform the application\n     application.containerCompleted(rmContainer, event);\n \n     // Inform the node\n     node.releaseContainer(container);\n \n     LOG.info(\"Application \" + applicationAttemptId + \n         \" released container \" + container.getId() +\n         \" on node: \" + node + \n         \" with event: \" + event);\n      \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void containerCompleted(RMContainer rmContainer,\n      RMContainerEventType event) {\n    if (rmContainer \u003d\u003d null) {\n      LOG.info(\"Null container completed...\");\n      return;\n    }\n\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    \n    // Get the node on which the container was allocated\n    SchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, event);\n\n    // Inform the node\n    node.releaseContainer(container);\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void containerCompleted(RMContainer rmContainer,\n      RMContainerEventType event) {\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    \n    // Get the node on which the container was allocated\n    SchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, event);\n\n    // Inform the node\n    node.releaseContainer(container);\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,30 @@\n+  private synchronized void containerCompleted(RMContainer rmContainer,\n+      RMContainerEventType event) {\n+    // Get the application for the finished container\n+    Container container \u003d rmContainer.getContainer();\n+    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n+    SchedulerApp application \u003d getApplication(applicationAttemptId);\n+    \n+    // Get the node on which the container was allocated\n+    SchedulerNode node \u003d getNode(container.getNodeId());\n+    \n+    if (application \u003d\u003d null) {\n+      LOG.info(\"Unknown application: \" + applicationAttemptId + \n+          \" released container \" + container.getId() +\n+          \" on node: \" + node + \n+          \" with event: \" + event);\n+      return;\n+    }\n+\n+    // Inform the application\n+    application.containerCompleted(rmContainer, event);\n+\n+    // Inform the node\n+    node.releaseContainer(container);\n+\n+    LOG.info(\"Application \" + applicationAttemptId + \n+        \" released container \" + container.getId() +\n+        \" on node: \" + node + \n+        \" with event: \" + event);\n+     \n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void containerCompleted(RMContainer rmContainer,\n      RMContainerEventType event) {\n    // Get the application for the finished container\n    Container container \u003d rmContainer.getContainer();\n    ApplicationAttemptId applicationAttemptId \u003d container.getId().getAppAttemptId();\n    SchedulerApp application \u003d getApplication(applicationAttemptId);\n    \n    // Get the node on which the container was allocated\n    SchedulerNode node \u003d getNode(container.getNodeId());\n    \n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application: \" + applicationAttemptId + \n          \" released container \" + container.getId() +\n          \" on node: \" + node + \n          \" with event: \" + event);\n      return;\n    }\n\n    // Inform the application\n    application.containerCompleted(rmContainer, event);\n\n    // Inform the node\n    node.releaseContainer(container);\n\n    LOG.info(\"Application \" + applicationAttemptId + \n        \" released container \" + container.getId() +\n        \" on node: \" + node + \n        \" with event: \" + event);\n     \n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
    }
  }
}