{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalMetadataStore.java",
  "functionName": "deleteEntryByAncestor",
  "functionId": "deleteEntryByAncestor___ancestor-Path__cache-Cache__Path,LocalMetadataEntry____tombstone-boolean__ttlTimeProvider-ITtlTimeProvider",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java",
  "functionStartLine": 479,
  "functionEndLine": 498,
  "numCommitsSeen": 45,
  "timeTaken": 5185,
  "changeHistory": [
    "7b219778e05a50e33cca75d727e62783322b7f80",
    "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
    "c687a6617d73293019d8d91ac48bbfd2ccca3b40",
    "69aac696d9d4e32a55ba9b6992f41a9ad13424f1",
    "621b43e254afaff708cd6fc4698b29628f6abc33"
  ],
  "changeHistoryShort": {
    "7b219778e05a50e33cca75d727e62783322b7f80": "Ybodychange",
    "f9cc9e162175444efe9d5b07ecb9a795f750ca3c": "Ymultichange(Yparameterchange,Ybodychange)",
    "c687a6617d73293019d8d91ac48bbfd2ccca3b40": "Ymultichange(Yparameterchange,Ybodychange)",
    "69aac696d9d4e32a55ba9b6992f41a9ad13424f1": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7b219778e05a50e33cca75d727e62783322b7f80": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16433. S3Guard: Filter expired entries and tombstones when listing with MetadataStore.listChildren().\n\nContributed by Gabor Bota.\n\nThis pulls the tracking of the lastUpdated timestamp of metadata entries up from the DDB metastore into all s3guard stores, and then uses this to filter out expired tombstones from listings.\n\nChange-Id: I80f121236b49c75a024116f65a3ef29d3580b462\n",
      "commitDate": "24/07/19 10:11 AM",
      "commitName": "7b219778e05a50e33cca75d727e62783322b7f80",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "17/07/19 7:24 AM",
      "commitNameOld": "c58e11bf521d746842ce16724211a2a0339d7b61",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 7.12,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   static void deleteEntryByAncestor(Path ancestor,\n       Cache\u003cPath, LocalMetadataEntry\u003e cache, boolean tombstone,\n       ITtlTimeProvider ttlTimeProvider) {\n \n     cache.asMap().entrySet().stream()\n         .filter(entry -\u003e isAncestorOf(ancestor, entry.getKey()))\n         .forEach(entry -\u003e {\n           LocalMetadataEntry meta \u003d entry.getValue();\n           Path path \u003d entry.getKey();\n           if(meta.hasDirMeta()){\n             cache.invalidate(path);\n           } else if(tombstone \u0026\u0026 meta.hasPathMeta()){\n-            final PathMetadata pmTombstone \u003d PathMetadata.tombstone(path);\n-            pmTombstone.setLastUpdated(ttlTimeProvider.getNow());\n+            final PathMetadata pmTombstone \u003d PathMetadata.tombstone(path,\n+                ttlTimeProvider.getNow());\n             meta.setPathMetadata(pmTombstone);\n           } else {\n             cache.invalidate(path);\n           }\n         });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void deleteEntryByAncestor(Path ancestor,\n      Cache\u003cPath, LocalMetadataEntry\u003e cache, boolean tombstone,\n      ITtlTimeProvider ttlTimeProvider) {\n\n    cache.asMap().entrySet().stream()\n        .filter(entry -\u003e isAncestorOf(ancestor, entry.getKey()))\n        .forEach(entry -\u003e {\n          LocalMetadataEntry meta \u003d entry.getValue();\n          Path path \u003d entry.getKey();\n          if(meta.hasDirMeta()){\n            cache.invalidate(path);\n          } else if(tombstone \u0026\u0026 meta.hasPathMeta()){\n            final PathMetadata pmTombstone \u003d PathMetadata.tombstone(path,\n                ttlTimeProvider.getNow());\n            meta.setPathMetadata(pmTombstone);\n          } else {\n            cache.invalidate(path);\n          }\n        });\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java",
      "extendedDetails": {}
    },
    "f9cc9e162175444efe9d5b07ecb9a795f750ca3c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16279. S3Guard: Implement time-based (TTL) expiry for entries (and tombstones).\n\nContributed by Gabor Bota.\n\nChange-Id: I73a2d2861901dedfe7a0e783b310fbb95e7c1af9\n",
      "commitDate": "16/06/19 9:05 AM",
      "commitName": "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
      "commitAuthor": "Gabor Bota",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16279. S3Guard: Implement time-based (TTL) expiry for entries (and tombstones).\n\nContributed by Gabor Bota.\n\nChange-Id: I73a2d2861901dedfe7a0e783b310fbb95e7c1af9\n",
          "commitDate": "16/06/19 9:05 AM",
          "commitName": "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
          "commitAuthor": "Gabor Bota",
          "commitDateOld": "19/05/19 2:29 PM",
          "commitNameOld": "a36274d69947648dbe82721220cc5240ec5d396d",
          "commitAuthorOld": "Ben Roling",
          "daysBetweenCommits": 27.77,
          "commitsBetweenForRepo": 198,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,20 @@\n   static void deleteEntryByAncestor(Path ancestor,\n-      Cache\u003cPath, LocalMetadataEntry\u003e cache, boolean tombstone) {\n+      Cache\u003cPath, LocalMetadataEntry\u003e cache, boolean tombstone,\n+      ITtlTimeProvider ttlTimeProvider) {\n \n     cache.asMap().entrySet().stream()\n         .filter(entry -\u003e isAncestorOf(ancestor, entry.getKey()))\n         .forEach(entry -\u003e {\n           LocalMetadataEntry meta \u003d entry.getValue();\n           Path path \u003d entry.getKey();\n           if(meta.hasDirMeta()){\n             cache.invalidate(path);\n           } else if(tombstone \u0026\u0026 meta.hasPathMeta()){\n-            meta.setPathMetadata(PathMetadata.tombstone(path));\n+            final PathMetadata pmTombstone \u003d PathMetadata.tombstone(path);\n+            pmTombstone.setLastUpdated(ttlTimeProvider.getNow());\n+            meta.setPathMetadata(pmTombstone);\n           } else {\n             cache.invalidate(path);\n           }\n         });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void deleteEntryByAncestor(Path ancestor,\n      Cache\u003cPath, LocalMetadataEntry\u003e cache, boolean tombstone,\n      ITtlTimeProvider ttlTimeProvider) {\n\n    cache.asMap().entrySet().stream()\n        .filter(entry -\u003e isAncestorOf(ancestor, entry.getKey()))\n        .forEach(entry -\u003e {\n          LocalMetadataEntry meta \u003d entry.getValue();\n          Path path \u003d entry.getKey();\n          if(meta.hasDirMeta()){\n            cache.invalidate(path);\n          } else if(tombstone \u0026\u0026 meta.hasPathMeta()){\n            final PathMetadata pmTombstone \u003d PathMetadata.tombstone(path);\n            pmTombstone.setLastUpdated(ttlTimeProvider.getNow());\n            meta.setPathMetadata(pmTombstone);\n          } else {\n            cache.invalidate(path);\n          }\n        });\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java",
          "extendedDetails": {
            "oldValue": "[ancestor-Path, cache-Cache\u003cPath,LocalMetadataEntry\u003e, tombstone-boolean]",
            "newValue": "[ancestor-Path, cache-Cache\u003cPath,LocalMetadataEntry\u003e, tombstone-boolean, ttlTimeProvider-ITtlTimeProvider]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16279. S3Guard: Implement time-based (TTL) expiry for entries (and tombstones).\n\nContributed by Gabor Bota.\n\nChange-Id: I73a2d2861901dedfe7a0e783b310fbb95e7c1af9\n",
          "commitDate": "16/06/19 9:05 AM",
          "commitName": "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
          "commitAuthor": "Gabor Bota",
          "commitDateOld": "19/05/19 2:29 PM",
          "commitNameOld": "a36274d69947648dbe82721220cc5240ec5d396d",
          "commitAuthorOld": "Ben Roling",
          "daysBetweenCommits": 27.77,
          "commitsBetweenForRepo": 198,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,20 @@\n   static void deleteEntryByAncestor(Path ancestor,\n-      Cache\u003cPath, LocalMetadataEntry\u003e cache, boolean tombstone) {\n+      Cache\u003cPath, LocalMetadataEntry\u003e cache, boolean tombstone,\n+      ITtlTimeProvider ttlTimeProvider) {\n \n     cache.asMap().entrySet().stream()\n         .filter(entry -\u003e isAncestorOf(ancestor, entry.getKey()))\n         .forEach(entry -\u003e {\n           LocalMetadataEntry meta \u003d entry.getValue();\n           Path path \u003d entry.getKey();\n           if(meta.hasDirMeta()){\n             cache.invalidate(path);\n           } else if(tombstone \u0026\u0026 meta.hasPathMeta()){\n-            meta.setPathMetadata(PathMetadata.tombstone(path));\n+            final PathMetadata pmTombstone \u003d PathMetadata.tombstone(path);\n+            pmTombstone.setLastUpdated(ttlTimeProvider.getNow());\n+            meta.setPathMetadata(pmTombstone);\n           } else {\n             cache.invalidate(path);\n           }\n         });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void deleteEntryByAncestor(Path ancestor,\n      Cache\u003cPath, LocalMetadataEntry\u003e cache, boolean tombstone,\n      ITtlTimeProvider ttlTimeProvider) {\n\n    cache.asMap().entrySet().stream()\n        .filter(entry -\u003e isAncestorOf(ancestor, entry.getKey()))\n        .forEach(entry -\u003e {\n          LocalMetadataEntry meta \u003d entry.getValue();\n          Path path \u003d entry.getKey();\n          if(meta.hasDirMeta()){\n            cache.invalidate(path);\n          } else if(tombstone \u0026\u0026 meta.hasPathMeta()){\n            final PathMetadata pmTombstone \u003d PathMetadata.tombstone(path);\n            pmTombstone.setLastUpdated(ttlTimeProvider.getNow());\n            meta.setPathMetadata(pmTombstone);\n          } else {\n            cache.invalidate(path);\n          }\n        });\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "c687a6617d73293019d8d91ac48bbfd2ccca3b40": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-15423. Merge fileCache and dirCache into ine single cache in LocalMetadataStore. Contributed by Gabor Bota.\n",
      "commitDate": "25/06/18 1:59 PM",
      "commitName": "c687a6617d73293019d8d91ac48bbfd2ccca3b40",
      "commitAuthor": "Sean Mackrory",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-15423. Merge fileCache and dirCache into ine single cache in LocalMetadataStore. Contributed by Gabor Bota.\n",
          "commitDate": "25/06/18 1:59 PM",
          "commitName": "c687a6617d73293019d8d91ac48bbfd2ccca3b40",
          "commitAuthor": "Sean Mackrory",
          "commitDateOld": "08/05/18 6:58 PM",
          "commitNameOld": "8981674bbcff0663af820f3e87a3eaea5789968a",
          "commitAuthorOld": "Aaron Fabbri",
          "daysBetweenCommits": 47.79,
          "commitsBetweenForRepo": 363,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,17 @@\n-  static \u003cT\u003e void deleteEntryByAncestor(Path ancestor, Cache\u003cPath, T\u003e cache,\n-                                       boolean tombstone) {\n-    for (Iterator\u003cMap.Entry\u003cPath, T\u003e\u003e it \u003d cache.asMap().entrySet().iterator();\n-         it.hasNext();) {\n-      Map.Entry\u003cPath, T\u003e entry \u003d it.next();\n-      Path f \u003d entry.getKey();\n-      T meta \u003d entry.getValue();\n-      if (isAncestorOf(ancestor, f)) {\n-        if (tombstone) {\n-          if (meta instanceof PathMetadata) {\n-            cache.put(f, (T) PathMetadata.tombstone(f));\n-          } else if (meta instanceof DirListingMetadata) {\n-            it.remove();\n+  static void deleteEntryByAncestor(Path ancestor,\n+      Cache\u003cPath, LocalMetadataEntry\u003e cache, boolean tombstone) {\n+\n+    cache.asMap().entrySet().stream()\n+        .filter(entry -\u003e isAncestorOf(ancestor, entry.getKey()))\n+        .forEach(entry -\u003e {\n+          LocalMetadataEntry meta \u003d entry.getValue();\n+          Path path \u003d entry.getKey();\n+          if(meta.hasDirMeta()){\n+            cache.invalidate(path);\n+          } else if(tombstone \u0026\u0026 meta.hasPathMeta()){\n+            meta.setPathMetadata(PathMetadata.tombstone(path));\n           } else {\n-            throw new IllegalStateException(\"Unknown type in cache\");\n+            cache.invalidate(path);\n           }\n-        } else {\n-          it.remove();\n-        }\n-      }\n-    }\n+        });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void deleteEntryByAncestor(Path ancestor,\n      Cache\u003cPath, LocalMetadataEntry\u003e cache, boolean tombstone) {\n\n    cache.asMap().entrySet().stream()\n        .filter(entry -\u003e isAncestorOf(ancestor, entry.getKey()))\n        .forEach(entry -\u003e {\n          LocalMetadataEntry meta \u003d entry.getValue();\n          Path path \u003d entry.getKey();\n          if(meta.hasDirMeta()){\n            cache.invalidate(path);\n          } else if(tombstone \u0026\u0026 meta.hasPathMeta()){\n            meta.setPathMetadata(PathMetadata.tombstone(path));\n          } else {\n            cache.invalidate(path);\n          }\n        });\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java",
          "extendedDetails": {
            "oldValue": "[ancestor-Path, cache-Cache\u003cPath,T\u003e, tombstone-boolean]",
            "newValue": "[ancestor-Path, cache-Cache\u003cPath,LocalMetadataEntry\u003e, tombstone-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15423. Merge fileCache and dirCache into ine single cache in LocalMetadataStore. Contributed by Gabor Bota.\n",
          "commitDate": "25/06/18 1:59 PM",
          "commitName": "c687a6617d73293019d8d91ac48bbfd2ccca3b40",
          "commitAuthor": "Sean Mackrory",
          "commitDateOld": "08/05/18 6:58 PM",
          "commitNameOld": "8981674bbcff0663af820f3e87a3eaea5789968a",
          "commitAuthorOld": "Aaron Fabbri",
          "daysBetweenCommits": 47.79,
          "commitsBetweenForRepo": 363,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,17 @@\n-  static \u003cT\u003e void deleteEntryByAncestor(Path ancestor, Cache\u003cPath, T\u003e cache,\n-                                       boolean tombstone) {\n-    for (Iterator\u003cMap.Entry\u003cPath, T\u003e\u003e it \u003d cache.asMap().entrySet().iterator();\n-         it.hasNext();) {\n-      Map.Entry\u003cPath, T\u003e entry \u003d it.next();\n-      Path f \u003d entry.getKey();\n-      T meta \u003d entry.getValue();\n-      if (isAncestorOf(ancestor, f)) {\n-        if (tombstone) {\n-          if (meta instanceof PathMetadata) {\n-            cache.put(f, (T) PathMetadata.tombstone(f));\n-          } else if (meta instanceof DirListingMetadata) {\n-            it.remove();\n+  static void deleteEntryByAncestor(Path ancestor,\n+      Cache\u003cPath, LocalMetadataEntry\u003e cache, boolean tombstone) {\n+\n+    cache.asMap().entrySet().stream()\n+        .filter(entry -\u003e isAncestorOf(ancestor, entry.getKey()))\n+        .forEach(entry -\u003e {\n+          LocalMetadataEntry meta \u003d entry.getValue();\n+          Path path \u003d entry.getKey();\n+          if(meta.hasDirMeta()){\n+            cache.invalidate(path);\n+          } else if(tombstone \u0026\u0026 meta.hasPathMeta()){\n+            meta.setPathMetadata(PathMetadata.tombstone(path));\n           } else {\n-            throw new IllegalStateException(\"Unknown type in cache\");\n+            cache.invalidate(path);\n           }\n-        } else {\n-          it.remove();\n-        }\n-      }\n-    }\n+        });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void deleteEntryByAncestor(Path ancestor,\n      Cache\u003cPath, LocalMetadataEntry\u003e cache, boolean tombstone) {\n\n    cache.asMap().entrySet().stream()\n        .filter(entry -\u003e isAncestorOf(ancestor, entry.getKey()))\n        .forEach(entry -\u003e {\n          LocalMetadataEntry meta \u003d entry.getValue();\n          Path path \u003d entry.getKey();\n          if(meta.hasDirMeta()){\n            cache.invalidate(path);\n          } else if(tombstone \u0026\u0026 meta.hasPathMeta()){\n            meta.setPathMetadata(PathMetadata.tombstone(path));\n          } else {\n            cache.invalidate(path);\n          }\n        });\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "69aac696d9d4e32a55ba9b6992f41a9ad13424f1": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-13649 s3guard: implement time-based (TTL) expiry for LocalMetadataStore (Gabor Bota)\n",
      "commitDate": "08/05/18 3:29 PM",
      "commitName": "69aac696d9d4e32a55ba9b6992f41a9ad13424f1",
      "commitAuthor": "Aaron Fabbri",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-13649 s3guard: implement time-based (TTL) expiry for LocalMetadataStore (Gabor Bota)\n",
          "commitDate": "08/05/18 3:29 PM",
          "commitName": "69aac696d9d4e32a55ba9b6992f41a9ad13424f1",
          "commitAuthor": "Aaron Fabbri",
          "commitDateOld": "26/04/18 8:41 PM",
          "commitNameOld": "7d8bcf534acce52fb8cfb745a8671f9350d3b5be",
          "commitAuthorOld": "Aaron Fabbri",
          "daysBetweenCommits": 11.78,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  static \u003cT\u003e void deleteHashByAncestor(Path ancestor, Map\u003cPath, T\u003e hash,\n+  static \u003cT\u003e void deleteEntryByAncestor(Path ancestor, Cache\u003cPath, T\u003e cache,\n                                        boolean tombstone) {\n-    for (Iterator\u003cMap.Entry\u003cPath, T\u003e\u003e it \u003d hash.entrySet().iterator();\n+    for (Iterator\u003cMap.Entry\u003cPath, T\u003e\u003e it \u003d cache.asMap().entrySet().iterator();\n          it.hasNext();) {\n       Map.Entry\u003cPath, T\u003e entry \u003d it.next();\n       Path f \u003d entry.getKey();\n       T meta \u003d entry.getValue();\n       if (isAncestorOf(ancestor, f)) {\n         if (tombstone) {\n           if (meta instanceof PathMetadata) {\n-            entry.setValue((T) PathMetadata.tombstone(f));\n+            cache.put(f, (T) PathMetadata.tombstone(f));\n           } else if (meta instanceof DirListingMetadata) {\n             it.remove();\n           } else {\n-            throw new IllegalStateException(\"Unknown type in hash\");\n+            throw new IllegalStateException(\"Unknown type in cache\");\n           }\n         } else {\n           it.remove();\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static \u003cT\u003e void deleteEntryByAncestor(Path ancestor, Cache\u003cPath, T\u003e cache,\n                                       boolean tombstone) {\n    for (Iterator\u003cMap.Entry\u003cPath, T\u003e\u003e it \u003d cache.asMap().entrySet().iterator();\n         it.hasNext();) {\n      Map.Entry\u003cPath, T\u003e entry \u003d it.next();\n      Path f \u003d entry.getKey();\n      T meta \u003d entry.getValue();\n      if (isAncestorOf(ancestor, f)) {\n        if (tombstone) {\n          if (meta instanceof PathMetadata) {\n            cache.put(f, (T) PathMetadata.tombstone(f));\n          } else if (meta instanceof DirListingMetadata) {\n            it.remove();\n          } else {\n            throw new IllegalStateException(\"Unknown type in cache\");\n          }\n        } else {\n          it.remove();\n        }\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java",
          "extendedDetails": {
            "oldValue": "deleteHashByAncestor",
            "newValue": "deleteEntryByAncestor"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13649 s3guard: implement time-based (TTL) expiry for LocalMetadataStore (Gabor Bota)\n",
          "commitDate": "08/05/18 3:29 PM",
          "commitName": "69aac696d9d4e32a55ba9b6992f41a9ad13424f1",
          "commitAuthor": "Aaron Fabbri",
          "commitDateOld": "26/04/18 8:41 PM",
          "commitNameOld": "7d8bcf534acce52fb8cfb745a8671f9350d3b5be",
          "commitAuthorOld": "Aaron Fabbri",
          "daysBetweenCommits": 11.78,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  static \u003cT\u003e void deleteHashByAncestor(Path ancestor, Map\u003cPath, T\u003e hash,\n+  static \u003cT\u003e void deleteEntryByAncestor(Path ancestor, Cache\u003cPath, T\u003e cache,\n                                        boolean tombstone) {\n-    for (Iterator\u003cMap.Entry\u003cPath, T\u003e\u003e it \u003d hash.entrySet().iterator();\n+    for (Iterator\u003cMap.Entry\u003cPath, T\u003e\u003e it \u003d cache.asMap().entrySet().iterator();\n          it.hasNext();) {\n       Map.Entry\u003cPath, T\u003e entry \u003d it.next();\n       Path f \u003d entry.getKey();\n       T meta \u003d entry.getValue();\n       if (isAncestorOf(ancestor, f)) {\n         if (tombstone) {\n           if (meta instanceof PathMetadata) {\n-            entry.setValue((T) PathMetadata.tombstone(f));\n+            cache.put(f, (T) PathMetadata.tombstone(f));\n           } else if (meta instanceof DirListingMetadata) {\n             it.remove();\n           } else {\n-            throw new IllegalStateException(\"Unknown type in hash\");\n+            throw new IllegalStateException(\"Unknown type in cache\");\n           }\n         } else {\n           it.remove();\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static \u003cT\u003e void deleteEntryByAncestor(Path ancestor, Cache\u003cPath, T\u003e cache,\n                                       boolean tombstone) {\n    for (Iterator\u003cMap.Entry\u003cPath, T\u003e\u003e it \u003d cache.asMap().entrySet().iterator();\n         it.hasNext();) {\n      Map.Entry\u003cPath, T\u003e entry \u003d it.next();\n      Path f \u003d entry.getKey();\n      T meta \u003d entry.getValue();\n      if (isAncestorOf(ancestor, f)) {\n        if (tombstone) {\n          if (meta instanceof PathMetadata) {\n            cache.put(f, (T) PathMetadata.tombstone(f));\n          } else if (meta instanceof DirListingMetadata) {\n            it.remove();\n          } else {\n            throw new IllegalStateException(\"Unknown type in cache\");\n          }\n        } else {\n          it.remove();\n        }\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java",
          "extendedDetails": {
            "oldValue": "[ancestor-Path, hash-Map\u003cPath,T\u003e, tombstone-boolean]",
            "newValue": "[ancestor-Path, cache-Cache\u003cPath,T\u003e, tombstone-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13649 s3guard: implement time-based (TTL) expiry for LocalMetadataStore (Gabor Bota)\n",
          "commitDate": "08/05/18 3:29 PM",
          "commitName": "69aac696d9d4e32a55ba9b6992f41a9ad13424f1",
          "commitAuthor": "Aaron Fabbri",
          "commitDateOld": "26/04/18 8:41 PM",
          "commitNameOld": "7d8bcf534acce52fb8cfb745a8671f9350d3b5be",
          "commitAuthorOld": "Aaron Fabbri",
          "daysBetweenCommits": 11.78,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  static \u003cT\u003e void deleteHashByAncestor(Path ancestor, Map\u003cPath, T\u003e hash,\n+  static \u003cT\u003e void deleteEntryByAncestor(Path ancestor, Cache\u003cPath, T\u003e cache,\n                                        boolean tombstone) {\n-    for (Iterator\u003cMap.Entry\u003cPath, T\u003e\u003e it \u003d hash.entrySet().iterator();\n+    for (Iterator\u003cMap.Entry\u003cPath, T\u003e\u003e it \u003d cache.asMap().entrySet().iterator();\n          it.hasNext();) {\n       Map.Entry\u003cPath, T\u003e entry \u003d it.next();\n       Path f \u003d entry.getKey();\n       T meta \u003d entry.getValue();\n       if (isAncestorOf(ancestor, f)) {\n         if (tombstone) {\n           if (meta instanceof PathMetadata) {\n-            entry.setValue((T) PathMetadata.tombstone(f));\n+            cache.put(f, (T) PathMetadata.tombstone(f));\n           } else if (meta instanceof DirListingMetadata) {\n             it.remove();\n           } else {\n-            throw new IllegalStateException(\"Unknown type in hash\");\n+            throw new IllegalStateException(\"Unknown type in cache\");\n           }\n         } else {\n           it.remove();\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static \u003cT\u003e void deleteEntryByAncestor(Path ancestor, Cache\u003cPath, T\u003e cache,\n                                       boolean tombstone) {\n    for (Iterator\u003cMap.Entry\u003cPath, T\u003e\u003e it \u003d cache.asMap().entrySet().iterator();\n         it.hasNext();) {\n      Map.Entry\u003cPath, T\u003e entry \u003d it.next();\n      Path f \u003d entry.getKey();\n      T meta \u003d entry.getValue();\n      if (isAncestorOf(ancestor, f)) {\n        if (tombstone) {\n          if (meta instanceof PathMetadata) {\n            cache.put(f, (T) PathMetadata.tombstone(f));\n          } else if (meta instanceof DirListingMetadata) {\n            it.remove();\n          } else {\n            throw new IllegalStateException(\"Unknown type in cache\");\n          }\n        } else {\n          it.remove();\n        }\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,22 @@\n+  static \u003cT\u003e void deleteHashByAncestor(Path ancestor, Map\u003cPath, T\u003e hash,\n+                                       boolean tombstone) {\n+    for (Iterator\u003cMap.Entry\u003cPath, T\u003e\u003e it \u003d hash.entrySet().iterator();\n+         it.hasNext();) {\n+      Map.Entry\u003cPath, T\u003e entry \u003d it.next();\n+      Path f \u003d entry.getKey();\n+      T meta \u003d entry.getValue();\n+      if (isAncestorOf(ancestor, f)) {\n+        if (tombstone) {\n+          if (meta instanceof PathMetadata) {\n+            entry.setValue((T) PathMetadata.tombstone(f));\n+          } else if (meta instanceof DirListingMetadata) {\n+            it.remove();\n+          } else {\n+            throw new IllegalStateException(\"Unknown type in hash\");\n+          }\n+        } else {\n+          it.remove();\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static \u003cT\u003e void deleteHashByAncestor(Path ancestor, Map\u003cPath, T\u003e hash,\n                                       boolean tombstone) {\n    for (Iterator\u003cMap.Entry\u003cPath, T\u003e\u003e it \u003d hash.entrySet().iterator();\n         it.hasNext();) {\n      Map.Entry\u003cPath, T\u003e entry \u003d it.next();\n      Path f \u003d entry.getKey();\n      T meta \u003d entry.getValue();\n      if (isAncestorOf(ancestor, f)) {\n        if (tombstone) {\n          if (meta instanceof PathMetadata) {\n            entry.setValue((T) PathMetadata.tombstone(f));\n          } else if (meta instanceof DirListingMetadata) {\n            it.remove();\n          } else {\n            throw new IllegalStateException(\"Unknown type in hash\");\n          }\n        } else {\n          it.remove();\n        }\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java"
    }
  }
}