{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApiServer.java",
  "functionName": "getComponentInstances",
  "functionId": "getComponentInstances___request-HttpServletRequest(annotations-@Context)__serviceName-String(annotations-@PathParam(SERVICE_NAME))__componentNames-List__String__(annotations-@QueryParam(PARAM_COMP_NAME))__version-String(annotations-@QueryParam(PARAM_VERSION))__containerStates-List__String__(annotations-@QueryParam(PARAM_CONTAINER_STATE))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
  "functionStartLine": 601,
  "functionEndLine": 630,
  "numCommitsSeen": 9,
  "timeTaken": 1434,
  "changeHistory": [
    "121865c3f96166e2190ed54b433ebcf8d053b91c"
  ],
  "changeHistoryShort": {
    "121865c3f96166e2190ed54b433ebcf8d053b91c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "121865c3f96166e2190ed54b433ebcf8d053b91c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8299.  Added CLI and REST API for query container status.\n            Contributed by Chandni Singh\n",
      "commitDate": "16/07/18 2:41 PM",
      "commitName": "121865c3f96166e2190ed54b433ebcf8d053b91c",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,30 @@\n+  public Response getComponentInstances(@Context HttpServletRequest request,\n+      @PathParam(SERVICE_NAME) String serviceName,\n+      @QueryParam(PARAM_COMP_NAME) List\u003cString\u003e componentNames,\n+      @QueryParam(PARAM_VERSION) String version,\n+      @QueryParam(PARAM_CONTAINER_STATE) List\u003cString\u003e containerStates) {\n+    try {\n+      UserGroupInformation ugi \u003d getProxyUser(request);\n+      LOG.info(\"GET: component instances for service \u003d {}, compNames in {}, \" +\n+          \"version \u003d {}, containerStates in {}, user \u003d {}\", serviceName,\n+          Objects.toString(componentNames, \"[]\"), Objects.toString(version, \"\"),\n+          Objects.toString(containerStates, \"[]\"), ugi);\n+\n+        List\u003cContainerState\u003e containerStatesDe \u003d containerStates.stream().map(\n+            ContainerState::valueOf).collect(Collectors.toList());\n+\n+        return Response.ok(getContainers(ugi, serviceName, componentNames,\n+            version, containerStatesDe)).build();\n+    } catch (IllegalArgumentException iae) {\n+      return formatResponse(Status.BAD_REQUEST, \"valid container states are: \" +\n+          Arrays.toString(ContainerState.values()));\n+    } catch (AccessControlException e) {\n+      return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\n+    } catch (IOException | InterruptedException e) {\n+      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n+          e.getMessage());\n+    } catch (UndeclaredThrowableException e) {\n+      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n+          e.getCause().getMessage());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getComponentInstances(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String serviceName,\n      @QueryParam(PARAM_COMP_NAME) List\u003cString\u003e componentNames,\n      @QueryParam(PARAM_VERSION) String version,\n      @QueryParam(PARAM_CONTAINER_STATE) List\u003cString\u003e containerStates) {\n    try {\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      LOG.info(\"GET: component instances for service \u003d {}, compNames in {}, \" +\n          \"version \u003d {}, containerStates in {}, user \u003d {}\", serviceName,\n          Objects.toString(componentNames, \"[]\"), Objects.toString(version, \"\"),\n          Objects.toString(containerStates, \"[]\"), ugi);\n\n        List\u003cContainerState\u003e containerStatesDe \u003d containerStates.stream().map(\n            ContainerState::valueOf).collect(Collectors.toList());\n\n        return Response.ok(getContainers(ugi, serviceName, componentNames,\n            version, containerStatesDe)).build();\n    } catch (IllegalArgumentException iae) {\n      return formatResponse(Status.BAD_REQUEST, \"valid container states are: \" +\n          Arrays.toString(ContainerState.values()));\n    } catch (AccessControlException e) {\n      return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
    }
  }
}