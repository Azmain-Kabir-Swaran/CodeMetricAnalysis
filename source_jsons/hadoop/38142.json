{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PreemptableResourceCalculator.java",
  "functionName": "computeIdealAllocation",
  "functionId": "computeIdealAllocation___clusterResource-Resource__totalPreemptionAllowed-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java",
  "functionStartLine": 232,
  "functionEndLine": 249,
  "numCommitsSeen": 9,
  "timeTaken": 1845,
  "changeHistory": [
    "514794e1a5a39ca61de3981d53a05547ae17f5e4",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
    "60e4116bf1d00afed91010e57357fe54057e4e39"
  ],
  "changeHistoryShort": {
    "514794e1a5a39ca61de3981d53a05547ae17f5e4": "Ybodychange",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": "Ybodychange",
    "60e4116bf1d00afed91010e57357fe54057e4e39": "Yintroduced"
  },
  "changeHistoryDetails": {
    "514794e1a5a39ca61de3981d53a05547ae17f5e4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7934. [GQ] Refactor preemption calculators to allow overriding for Federation Global Algos. (Contributed by curino)\n",
      "commitDate": "22/02/18 6:12 PM",
      "commitName": "514794e1a5a39ca61de3981d53a05547ae17f5e4",
      "commitAuthor": "Carlo Curino",
      "commitDateOld": "31/10/16 3:18 PM",
      "commitNameOld": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 479.16,
      "commitsBetweenForRepo": 3052,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public void computeIdealAllocation(Resource clusterResource,\n       Resource totalPreemptionAllowed) {\n     for (String partition : context.getAllPartitions()) {\n       TempQueuePerPartition tRoot \u003d context.getQueueByPartition(\n           CapacitySchedulerConfiguration.ROOT, partition);\n       updatePreemptableExtras(tRoot);\n \n       // compute the ideal distribution of resources among queues\n       // updates cloned queues state accordingly\n-      tRoot.idealAssigned \u003d tRoot.getGuaranteed();\n+      tRoot.initializeRootIdealWithGuarangeed();\n       recursivelyComputeIdealAssignment(tRoot, totalPreemptionAllowed);\n     }\n \n     // based on ideal allocation select containers to be preempted from each\n     // calculate resource-to-obtain by partition for each leaf queues\n     calculateResToObtainByPartitionForLeafQueues(context.getLeafQueueNames(),\n         clusterResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void computeIdealAllocation(Resource clusterResource,\n      Resource totalPreemptionAllowed) {\n    for (String partition : context.getAllPartitions()) {\n      TempQueuePerPartition tRoot \u003d context.getQueueByPartition(\n          CapacitySchedulerConfiguration.ROOT, partition);\n      updatePreemptableExtras(tRoot);\n\n      // compute the ideal distribution of resources among queues\n      // updates cloned queues state accordingly\n      tRoot.initializeRootIdealWithGuarangeed();\n      recursivelyComputeIdealAssignment(tRoot, totalPreemptionAllowed);\n    }\n\n    // based on ideal allocation select containers to be preempted from each\n    // calculate resource-to-obtain by partition for each leaf queues\n    calculateResToObtainByPartitionForLeafQueues(context.getLeafQueueNames(),\n        clusterResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java",
      "extendedDetails": {}
    },
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4390. Do surgical preemption based on reserved container in CapacityScheduler. Contributed by Wangda Tan\n",
      "commitDate": "05/05/16 12:56 PM",
      "commitName": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/03/16 12:43 PM",
      "commitNameOld": "60e4116bf1d00afed91010e57357fe54057e4e39",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 36.01,
      "commitsBetweenForRepo": 225,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,18 @@\n   public void computeIdealAllocation(Resource clusterResource,\n       Resource totalPreemptionAllowed) {\n     for (String partition : context.getAllPartitions()) {\n-      TempQueuePerPartition tRoot \u003d\n-          context.getQueueByPartition(CapacitySchedulerConfiguration.ROOT, partition);\n+      TempQueuePerPartition tRoot \u003d context.getQueueByPartition(\n+          CapacitySchedulerConfiguration.ROOT, partition);\n+      updatePreemptableExtras(tRoot);\n+\n       // compute the ideal distribution of resources among queues\n       // updates cloned queues state accordingly\n-      tRoot.idealAssigned \u003d tRoot.guaranteed;\n+      tRoot.idealAssigned \u003d tRoot.getGuaranteed();\n       recursivelyComputeIdealAssignment(tRoot, totalPreemptionAllowed);\n     }\n \n     // based on ideal allocation select containers to be preempted from each\n     // calculate resource-to-obtain by partition for each leaf queues\n     calculateResToObtainByPartitionForLeafQueues(context.getLeafQueueNames(),\n         clusterResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void computeIdealAllocation(Resource clusterResource,\n      Resource totalPreemptionAllowed) {\n    for (String partition : context.getAllPartitions()) {\n      TempQueuePerPartition tRoot \u003d context.getQueueByPartition(\n          CapacitySchedulerConfiguration.ROOT, partition);\n      updatePreemptableExtras(tRoot);\n\n      // compute the ideal distribution of resources among queues\n      // updates cloned queues state accordingly\n      tRoot.idealAssigned \u003d tRoot.getGuaranteed();\n      recursivelyComputeIdealAssignment(tRoot, totalPreemptionAllowed);\n    }\n\n    // based on ideal allocation select containers to be preempted from each\n    // calculate resource-to-obtain by partition for each leaf queues\n    calculateResToObtainByPartitionForLeafQueues(context.getLeafQueueNames(),\n        clusterResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java",
      "extendedDetails": {}
    },
    "60e4116bf1d00afed91010e57357fe54057e4e39": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4822. Refactor existing Preemption Policy of CS for easier adding new approach to select preemption candidates. Contributed by Wangda Tan\n",
      "commitDate": "30/03/16 12:43 PM",
      "commitName": "60e4116bf1d00afed91010e57357fe54057e4e39",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,16 @@\n+  public void computeIdealAllocation(Resource clusterResource,\n+      Resource totalPreemptionAllowed) {\n+    for (String partition : context.getAllPartitions()) {\n+      TempQueuePerPartition tRoot \u003d\n+          context.getQueueByPartition(CapacitySchedulerConfiguration.ROOT, partition);\n+      // compute the ideal distribution of resources among queues\n+      // updates cloned queues state accordingly\n+      tRoot.idealAssigned \u003d tRoot.guaranteed;\n+      recursivelyComputeIdealAssignment(tRoot, totalPreemptionAllowed);\n+    }\n+\n+    // based on ideal allocation select containers to be preempted from each\n+    // calculate resource-to-obtain by partition for each leaf queues\n+    calculateResToObtainByPartitionForLeafQueues(context.getLeafQueueNames(),\n+        clusterResource);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void computeIdealAllocation(Resource clusterResource,\n      Resource totalPreemptionAllowed) {\n    for (String partition : context.getAllPartitions()) {\n      TempQueuePerPartition tRoot \u003d\n          context.getQueueByPartition(CapacitySchedulerConfiguration.ROOT, partition);\n      // compute the ideal distribution of resources among queues\n      // updates cloned queues state accordingly\n      tRoot.idealAssigned \u003d tRoot.guaranteed;\n      recursivelyComputeIdealAssignment(tRoot, totalPreemptionAllowed);\n    }\n\n    // based on ideal allocation select containers to be preempted from each\n    // calculate resource-to-obtain by partition for each leaf queues\n    calculateResToObtainByPartitionForLeafQueues(context.getLeafQueueNames(),\n        clusterResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/PreemptableResourceCalculator.java"
    }
  }
}