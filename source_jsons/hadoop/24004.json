{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShuffleHandler.java",
  "functionName": "populateHeaders",
  "functionId": "populateHeaders___mapIds-List__String____jobId-String__user-String__reduce-int__request-HttpRequest__response-HttpResponse__keepAliveParam-boolean__mapOutputInfoMap-Map__String,MapOutputInfo__",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
  "functionStartLine": 1141,
  "functionEndLine": 1176,
  "numCommitsSeen": 98,
  "timeTaken": 3105,
  "changeHistory": [
    "3a20debddeac69596ceb5b36f8413529ea8570e6",
    "ea845ba58c585647c4be8d30d9b814f098e34a12",
    "b3d61304f2fa4a99526f7a60ccaac9f262083079",
    "d8107fcd1c93c202925f2946d0cd4072fe0aef1e",
    "a5c08eed16e797d2ba9f98f7bc6a8e1bf09aaddd"
  ],
  "changeHistoryShort": {
    "3a20debddeac69596ceb5b36f8413529ea8570e6": "Ybodychange",
    "ea845ba58c585647c4be8d30d9b814f098e34a12": "Ybodychange",
    "b3d61304f2fa4a99526f7a60ccaac9f262083079": "Ybodychange",
    "d8107fcd1c93c202925f2946d0cd4072fe0aef1e": "Ymultichange(Yparameterchange,Ybodychange)",
    "a5c08eed16e797d2ba9f98f7bc6a8e1bf09aaddd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3a20debddeac69596ceb5b36f8413529ea8570e6": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6958. Shuffle audit logger should log size of shuffle transfer. Contributed by Jason Lowe\n",
      "commitDate": "19/09/17 7:13 AM",
      "commitName": "3a20debddeac69596ceb5b36f8413529ea8570e6",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "19/09/17 6:45 AM",
      "commitNameOld": "ea845ba58c585647c4be8d30d9b814f098e34a12",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,36 @@\n     protected void populateHeaders(List\u003cString\u003e mapIds, String jobId,\n         String user, int reduce, HttpRequest request, HttpResponse response,\n         boolean keepAliveParam, Map\u003cString, MapOutputInfo\u003e mapOutputInfoMap)\n         throws IOException {\n \n       long contentLength \u003d 0;\n       for (String mapId : mapIds) {\n         MapOutputInfo outputInfo \u003d getMapOutputInfo(mapId, reduce, jobId, user);\n         if (mapOutputInfoMap.size() \u003c mapOutputMetaInfoCacheSize) {\n           mapOutputInfoMap.put(mapId, outputInfo);\n         }\n \n         ShuffleHeader header \u003d\n             new ShuffleHeader(mapId, outputInfo.indexRecord.partLength,\n             outputInfo.indexRecord.rawLength, reduce);\n         DataOutputBuffer dob \u003d new DataOutputBuffer();\n         header.write(dob);\n \n         contentLength +\u003d outputInfo.indexRecord.partLength;\n         contentLength +\u003d dob.getLength();\n       }\n \n       // Now set the response headers.\n       setResponseHeaders(response, keepAliveParam, contentLength);\n+\n+      // this audit log is disabled by default,\n+      // to turn it on please enable this audit log\n+      // on log4j.properties by uncommenting the setting\n+      if (AUDITLOG.isDebugEnabled()) {\n+        StringBuilder sb \u003d new StringBuilder(\"shuffle for \");\n+        sb.append(jobId).append(\" reducer \").append(reduce);\n+        sb.append(\" length \").append(contentLength);\n+        sb.append(\" mappers: \").append(mapIds);\n+        AUDITLOG.debug(sb.toString());\n+      }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void populateHeaders(List\u003cString\u003e mapIds, String jobId,\n        String user, int reduce, HttpRequest request, HttpResponse response,\n        boolean keepAliveParam, Map\u003cString, MapOutputInfo\u003e mapOutputInfoMap)\n        throws IOException {\n\n      long contentLength \u003d 0;\n      for (String mapId : mapIds) {\n        MapOutputInfo outputInfo \u003d getMapOutputInfo(mapId, reduce, jobId, user);\n        if (mapOutputInfoMap.size() \u003c mapOutputMetaInfoCacheSize) {\n          mapOutputInfoMap.put(mapId, outputInfo);\n        }\n\n        ShuffleHeader header \u003d\n            new ShuffleHeader(mapId, outputInfo.indexRecord.partLength,\n            outputInfo.indexRecord.rawLength, reduce);\n        DataOutputBuffer dob \u003d new DataOutputBuffer();\n        header.write(dob);\n\n        contentLength +\u003d outputInfo.indexRecord.partLength;\n        contentLength +\u003d dob.getLength();\n      }\n\n      // Now set the response headers.\n      setResponseHeaders(response, keepAliveParam, contentLength);\n\n      // this audit log is disabled by default,\n      // to turn it on please enable this audit log\n      // on log4j.properties by uncommenting the setting\n      if (AUDITLOG.isDebugEnabled()) {\n        StringBuilder sb \u003d new StringBuilder(\"shuffle for \");\n        sb.append(jobId).append(\" reducer \").append(reduce);\n        sb.append(\" length \").append(contentLength);\n        sb.append(\" mappers: \").append(mapIds);\n        AUDITLOG.debug(sb.toString());\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {}
    },
    "ea845ba58c585647c4be8d30d9b814f098e34a12": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"MAPREDUCE-6958. Shuffle audit logger should log size of shuffle transfer. Contributed by Jason Lowe\"\n\nThis reverts commit b3d61304f2fa4a99526f7a60ccaac9f262083079.\n",
      "commitDate": "19/09/17 6:45 AM",
      "commitName": "ea845ba58c585647c4be8d30d9b814f098e34a12",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "18/09/17 3:04 PM",
      "commitNameOld": "b3d61304f2fa4a99526f7a60ccaac9f262083079",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.65,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,25 @@\n     protected void populateHeaders(List\u003cString\u003e mapIds, String jobId,\n         String user, int reduce, HttpRequest request, HttpResponse response,\n         boolean keepAliveParam, Map\u003cString, MapOutputInfo\u003e mapOutputInfoMap)\n         throws IOException {\n \n       long contentLength \u003d 0;\n       for (String mapId : mapIds) {\n         MapOutputInfo outputInfo \u003d getMapOutputInfo(mapId, reduce, jobId, user);\n         if (mapOutputInfoMap.size() \u003c mapOutputMetaInfoCacheSize) {\n           mapOutputInfoMap.put(mapId, outputInfo);\n         }\n \n         ShuffleHeader header \u003d\n             new ShuffleHeader(mapId, outputInfo.indexRecord.partLength,\n             outputInfo.indexRecord.rawLength, reduce);\n         DataOutputBuffer dob \u003d new DataOutputBuffer();\n         header.write(dob);\n \n         contentLength +\u003d outputInfo.indexRecord.partLength;\n         contentLength +\u003d dob.getLength();\n       }\n \n       // Now set the response headers.\n       setResponseHeaders(response, keepAliveParam, contentLength);\n-\n-      // this audit log is disabled by default,\n-      // to turn it on please enable this audit log\n-      // on log4j.properties by uncommenting the setting\n-      if (AUDITLOG.isDebugEnabled()) {\n-        StringBuilder sb \u003d new StringBuilder(\"shuffle for \").append(jobId);\n-        sb.append(\" mappers: \").append(mapIds);\n-        sb.append(\" reducer \").append(reduce);\n-        sb.append(\" length \").append(contentLength);\n-        AUDITLOG.debug(sb.toString());\n-      }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void populateHeaders(List\u003cString\u003e mapIds, String jobId,\n        String user, int reduce, HttpRequest request, HttpResponse response,\n        boolean keepAliveParam, Map\u003cString, MapOutputInfo\u003e mapOutputInfoMap)\n        throws IOException {\n\n      long contentLength \u003d 0;\n      for (String mapId : mapIds) {\n        MapOutputInfo outputInfo \u003d getMapOutputInfo(mapId, reduce, jobId, user);\n        if (mapOutputInfoMap.size() \u003c mapOutputMetaInfoCacheSize) {\n          mapOutputInfoMap.put(mapId, outputInfo);\n        }\n\n        ShuffleHeader header \u003d\n            new ShuffleHeader(mapId, outputInfo.indexRecord.partLength,\n            outputInfo.indexRecord.rawLength, reduce);\n        DataOutputBuffer dob \u003d new DataOutputBuffer();\n        header.write(dob);\n\n        contentLength +\u003d outputInfo.indexRecord.partLength;\n        contentLength +\u003d dob.getLength();\n      }\n\n      // Now set the response headers.\n      setResponseHeaders(response, keepAliveParam, contentLength);\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {}
    },
    "b3d61304f2fa4a99526f7a60ccaac9f262083079": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6958. Shuffle audit logger should log size of shuffle transfer. Contributed by Jason Lowe\n",
      "commitDate": "18/09/17 3:04 PM",
      "commitName": "b3d61304f2fa4a99526f7a60ccaac9f262083079",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "30/03/17 8:57 AM",
      "commitNameOld": "c8bd5fc7a86f9890ceaa37a89491ab650e7e9a64",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 172.26,
      "commitsBetweenForRepo": 1121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,36 @@\n     protected void populateHeaders(List\u003cString\u003e mapIds, String jobId,\n         String user, int reduce, HttpRequest request, HttpResponse response,\n         boolean keepAliveParam, Map\u003cString, MapOutputInfo\u003e mapOutputInfoMap)\n         throws IOException {\n \n       long contentLength \u003d 0;\n       for (String mapId : mapIds) {\n         MapOutputInfo outputInfo \u003d getMapOutputInfo(mapId, reduce, jobId, user);\n         if (mapOutputInfoMap.size() \u003c mapOutputMetaInfoCacheSize) {\n           mapOutputInfoMap.put(mapId, outputInfo);\n         }\n \n         ShuffleHeader header \u003d\n             new ShuffleHeader(mapId, outputInfo.indexRecord.partLength,\n             outputInfo.indexRecord.rawLength, reduce);\n         DataOutputBuffer dob \u003d new DataOutputBuffer();\n         header.write(dob);\n \n         contentLength +\u003d outputInfo.indexRecord.partLength;\n         contentLength +\u003d dob.getLength();\n       }\n \n       // Now set the response headers.\n       setResponseHeaders(response, keepAliveParam, contentLength);\n+\n+      // this audit log is disabled by default,\n+      // to turn it on please enable this audit log\n+      // on log4j.properties by uncommenting the setting\n+      if (AUDITLOG.isDebugEnabled()) {\n+        StringBuilder sb \u003d new StringBuilder(\"shuffle for \").append(jobId);\n+        sb.append(\" mappers: \").append(mapIds);\n+        sb.append(\" reducer \").append(reduce);\n+        sb.append(\" length \").append(contentLength);\n+        AUDITLOG.debug(sb.toString());\n+      }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void populateHeaders(List\u003cString\u003e mapIds, String jobId,\n        String user, int reduce, HttpRequest request, HttpResponse response,\n        boolean keepAliveParam, Map\u003cString, MapOutputInfo\u003e mapOutputInfoMap)\n        throws IOException {\n\n      long contentLength \u003d 0;\n      for (String mapId : mapIds) {\n        MapOutputInfo outputInfo \u003d getMapOutputInfo(mapId, reduce, jobId, user);\n        if (mapOutputInfoMap.size() \u003c mapOutputMetaInfoCacheSize) {\n          mapOutputInfoMap.put(mapId, outputInfo);\n        }\n\n        ShuffleHeader header \u003d\n            new ShuffleHeader(mapId, outputInfo.indexRecord.partLength,\n            outputInfo.indexRecord.rawLength, reduce);\n        DataOutputBuffer dob \u003d new DataOutputBuffer();\n        header.write(dob);\n\n        contentLength +\u003d outputInfo.indexRecord.partLength;\n        contentLength +\u003d dob.getLength();\n      }\n\n      // Now set the response headers.\n      setResponseHeaders(response, keepAliveParam, contentLength);\n\n      // this audit log is disabled by default,\n      // to turn it on please enable this audit log\n      // on log4j.properties by uncommenting the setting\n      if (AUDITLOG.isDebugEnabled()) {\n        StringBuilder sb \u003d new StringBuilder(\"shuffle for \").append(jobId);\n        sb.append(\" mappers: \").append(mapIds);\n        sb.append(\" reducer \").append(reduce);\n        sb.append(\" length \").append(contentLength);\n        AUDITLOG.debug(sb.toString());\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {}
    },
    "d8107fcd1c93c202925f2946d0cd4072fe0aef1e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-6197. Cache MapOutputLocations in ShuffleHandler. Contributed by Junping Du\n",
      "commitDate": "21/06/16 2:25 PM",
      "commitName": "d8107fcd1c93c202925f2946d0cd4072fe0aef1e",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-6197. Cache MapOutputLocations in ShuffleHandler. Contributed by Junping Du\n",
          "commitDate": "21/06/16 2:25 PM",
          "commitName": "d8107fcd1c93c202925f2946d0cd4072fe0aef1e",
          "commitAuthor": "Jian He",
          "commitDateOld": "14/06/16 3:06 PM",
          "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 6.97,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,25 @@\n-    protected void populateHeaders(List\u003cString\u003e mapIds, String outputBaseStr,\n+    protected void populateHeaders(List\u003cString\u003e mapIds, String jobId,\n         String user, int reduce, HttpRequest request, HttpResponse response,\n         boolean keepAliveParam, Map\u003cString, MapOutputInfo\u003e mapOutputInfoMap)\n         throws IOException {\n \n       long contentLength \u003d 0;\n       for (String mapId : mapIds) {\n-        String base \u003d outputBaseStr + mapId;\n-        MapOutputInfo outputInfo \u003d getMapOutputInfo(base, mapId, reduce, user);\n+        MapOutputInfo outputInfo \u003d getMapOutputInfo(mapId, reduce, jobId, user);\n         if (mapOutputInfoMap.size() \u003c mapOutputMetaInfoCacheSize) {\n           mapOutputInfoMap.put(mapId, outputInfo);\n         }\n-        // Index file\n-        Path indexFileName \u003d\n-            lDirAlloc.getLocalPathToRead(base + \"/file.out.index\", conf);\n-        IndexRecord info \u003d\n-            indexCache.getIndexInformation(mapId, reduce, indexFileName, user);\n+\n         ShuffleHeader header \u003d\n-            new ShuffleHeader(mapId, info.partLength, info.rawLength, reduce);\n+            new ShuffleHeader(mapId, outputInfo.indexRecord.partLength,\n+            outputInfo.indexRecord.rawLength, reduce);\n         DataOutputBuffer dob \u003d new DataOutputBuffer();\n         header.write(dob);\n \n-        contentLength +\u003d info.partLength;\n+        contentLength +\u003d outputInfo.indexRecord.partLength;\n         contentLength +\u003d dob.getLength();\n       }\n \n       // Now set the response headers.\n       setResponseHeaders(response, keepAliveParam, contentLength);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void populateHeaders(List\u003cString\u003e mapIds, String jobId,\n        String user, int reduce, HttpRequest request, HttpResponse response,\n        boolean keepAliveParam, Map\u003cString, MapOutputInfo\u003e mapOutputInfoMap)\n        throws IOException {\n\n      long contentLength \u003d 0;\n      for (String mapId : mapIds) {\n        MapOutputInfo outputInfo \u003d getMapOutputInfo(mapId, reduce, jobId, user);\n        if (mapOutputInfoMap.size() \u003c mapOutputMetaInfoCacheSize) {\n          mapOutputInfoMap.put(mapId, outputInfo);\n        }\n\n        ShuffleHeader header \u003d\n            new ShuffleHeader(mapId, outputInfo.indexRecord.partLength,\n            outputInfo.indexRecord.rawLength, reduce);\n        DataOutputBuffer dob \u003d new DataOutputBuffer();\n        header.write(dob);\n\n        contentLength +\u003d outputInfo.indexRecord.partLength;\n        contentLength +\u003d dob.getLength();\n      }\n\n      // Now set the response headers.\n      setResponseHeaders(response, keepAliveParam, contentLength);\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
          "extendedDetails": {
            "oldValue": "[mapIds-List\u003cString\u003e, outputBaseStr-String, user-String, reduce-int, request-HttpRequest, response-HttpResponse, keepAliveParam-boolean, mapOutputInfoMap-Map\u003cString,MapOutputInfo\u003e]",
            "newValue": "[mapIds-List\u003cString\u003e, jobId-String, user-String, reduce-int, request-HttpRequest, response-HttpResponse, keepAliveParam-boolean, mapOutputInfoMap-Map\u003cString,MapOutputInfo\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-6197. Cache MapOutputLocations in ShuffleHandler. Contributed by Junping Du\n",
          "commitDate": "21/06/16 2:25 PM",
          "commitName": "d8107fcd1c93c202925f2946d0cd4072fe0aef1e",
          "commitAuthor": "Jian He",
          "commitDateOld": "14/06/16 3:06 PM",
          "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 6.97,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,25 @@\n-    protected void populateHeaders(List\u003cString\u003e mapIds, String outputBaseStr,\n+    protected void populateHeaders(List\u003cString\u003e mapIds, String jobId,\n         String user, int reduce, HttpRequest request, HttpResponse response,\n         boolean keepAliveParam, Map\u003cString, MapOutputInfo\u003e mapOutputInfoMap)\n         throws IOException {\n \n       long contentLength \u003d 0;\n       for (String mapId : mapIds) {\n-        String base \u003d outputBaseStr + mapId;\n-        MapOutputInfo outputInfo \u003d getMapOutputInfo(base, mapId, reduce, user);\n+        MapOutputInfo outputInfo \u003d getMapOutputInfo(mapId, reduce, jobId, user);\n         if (mapOutputInfoMap.size() \u003c mapOutputMetaInfoCacheSize) {\n           mapOutputInfoMap.put(mapId, outputInfo);\n         }\n-        // Index file\n-        Path indexFileName \u003d\n-            lDirAlloc.getLocalPathToRead(base + \"/file.out.index\", conf);\n-        IndexRecord info \u003d\n-            indexCache.getIndexInformation(mapId, reduce, indexFileName, user);\n+\n         ShuffleHeader header \u003d\n-            new ShuffleHeader(mapId, info.partLength, info.rawLength, reduce);\n+            new ShuffleHeader(mapId, outputInfo.indexRecord.partLength,\n+            outputInfo.indexRecord.rawLength, reduce);\n         DataOutputBuffer dob \u003d new DataOutputBuffer();\n         header.write(dob);\n \n-        contentLength +\u003d info.partLength;\n+        contentLength +\u003d outputInfo.indexRecord.partLength;\n         contentLength +\u003d dob.getLength();\n       }\n \n       // Now set the response headers.\n       setResponseHeaders(response, keepAliveParam, contentLength);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void populateHeaders(List\u003cString\u003e mapIds, String jobId,\n        String user, int reduce, HttpRequest request, HttpResponse response,\n        boolean keepAliveParam, Map\u003cString, MapOutputInfo\u003e mapOutputInfoMap)\n        throws IOException {\n\n      long contentLength \u003d 0;\n      for (String mapId : mapIds) {\n        MapOutputInfo outputInfo \u003d getMapOutputInfo(mapId, reduce, jobId, user);\n        if (mapOutputInfoMap.size() \u003c mapOutputMetaInfoCacheSize) {\n          mapOutputInfoMap.put(mapId, outputInfo);\n        }\n\n        ShuffleHeader header \u003d\n            new ShuffleHeader(mapId, outputInfo.indexRecord.partLength,\n            outputInfo.indexRecord.rawLength, reduce);\n        DataOutputBuffer dob \u003d new DataOutputBuffer();\n        header.write(dob);\n\n        contentLength +\u003d outputInfo.indexRecord.partLength;\n        contentLength +\u003d dob.getLength();\n      }\n\n      // Now set the response headers.\n      setResponseHeaders(response, keepAliveParam, contentLength);\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "a5c08eed16e797d2ba9f98f7bc6a8e1bf09aaddd": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5787. Added the ability to keep alive shuffle connections in the MapReduce shuffle-handler. Contributed by Rajesh Balamohan.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580062 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/14 2:43 PM",
      "commitName": "a5c08eed16e797d2ba9f98f7bc6a8e1bf09aaddd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,29 @@\n+    protected void populateHeaders(List\u003cString\u003e mapIds, String outputBaseStr,\n+        String user, int reduce, HttpRequest request, HttpResponse response,\n+        boolean keepAliveParam, Map\u003cString, MapOutputInfo\u003e mapOutputInfoMap)\n+        throws IOException {\n+\n+      long contentLength \u003d 0;\n+      for (String mapId : mapIds) {\n+        String base \u003d outputBaseStr + mapId;\n+        MapOutputInfo outputInfo \u003d getMapOutputInfo(base, mapId, reduce, user);\n+        if (mapOutputInfoMap.size() \u003c mapOutputMetaInfoCacheSize) {\n+          mapOutputInfoMap.put(mapId, outputInfo);\n+        }\n+        // Index file\n+        Path indexFileName \u003d\n+            lDirAlloc.getLocalPathToRead(base + \"/file.out.index\", conf);\n+        IndexRecord info \u003d\n+            indexCache.getIndexInformation(mapId, reduce, indexFileName, user);\n+        ShuffleHeader header \u003d\n+            new ShuffleHeader(mapId, info.partLength, info.rawLength, reduce);\n+        DataOutputBuffer dob \u003d new DataOutputBuffer();\n+        header.write(dob);\n+\n+        contentLength +\u003d info.partLength;\n+        contentLength +\u003d dob.getLength();\n+      }\n+\n+      // Now set the response headers.\n+      setResponseHeaders(response, keepAliveParam, contentLength);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    protected void populateHeaders(List\u003cString\u003e mapIds, String outputBaseStr,\n        String user, int reduce, HttpRequest request, HttpResponse response,\n        boolean keepAliveParam, Map\u003cString, MapOutputInfo\u003e mapOutputInfoMap)\n        throws IOException {\n\n      long contentLength \u003d 0;\n      for (String mapId : mapIds) {\n        String base \u003d outputBaseStr + mapId;\n        MapOutputInfo outputInfo \u003d getMapOutputInfo(base, mapId, reduce, user);\n        if (mapOutputInfoMap.size() \u003c mapOutputMetaInfoCacheSize) {\n          mapOutputInfoMap.put(mapId, outputInfo);\n        }\n        // Index file\n        Path indexFileName \u003d\n            lDirAlloc.getLocalPathToRead(base + \"/file.out.index\", conf);\n        IndexRecord info \u003d\n            indexCache.getIndexInformation(mapId, reduce, indexFileName, user);\n        ShuffleHeader header \u003d\n            new ShuffleHeader(mapId, info.partLength, info.rawLength, reduce);\n        DataOutputBuffer dob \u003d new DataOutputBuffer();\n        header.write(dob);\n\n        contentLength +\u003d info.partLength;\n        contentLength +\u003d dob.getLength();\n      }\n\n      // Now set the response headers.\n      setResponseHeaders(response, keepAliveParam, contentLength);\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java"
    }
  }
}