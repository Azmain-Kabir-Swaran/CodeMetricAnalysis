{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "checkRpcHeaders",
  "functionId": "checkRpcHeaders___header-RpcRequestHeaderProto",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 2592,
  "functionEndLine": 2614,
  "numCommitsSeen": 162,
  "timeTaken": 4979,
  "changeHistory": [
    "b6bb99c18a772d2179d5cc6757cddf141e8d39c0",
    "a3a9d72e98a9cc0f94af7c832dd13c408856636d"
  ],
  "changeHistoryShort": {
    "b6bb99c18a772d2179d5cc6757cddf141e8d39c0": "Ymultichange(Yexceptionschange,Ybodychange)",
    "a3a9d72e98a9cc0f94af7c832dd13c408856636d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b6bb99c18a772d2179d5cc6757cddf141e8d39c0": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-14034. Allow ipc layer exceptions to selectively close connections. Contributed by Daryn Sharp.\n",
      "commitDate": "09/02/17 8:47 AM",
      "commitName": "b6bb99c18a772d2179d5cc6757cddf141e8d39c0",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-14034. Allow ipc layer exceptions to selectively close connections. Contributed by Daryn Sharp.\n",
          "commitDate": "09/02/17 8:47 AM",
          "commitName": "b6bb99c18a772d2179d5cc6757cddf141e8d39c0",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "28/11/16 9:07 PM",
          "commitNameOld": "67d9f2808efb34b9a7b0b824cb4033b95ad33474",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 72.49,
          "commitsBetweenForRepo": 352,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n     private void checkRpcHeaders(RpcRequestHeaderProto header)\n-        throws WrappedRpcServerException {\n+        throws RpcServerException {\n       if (!header.hasRpcOp()) {\n         String err \u003d \" IPC Server: No rpc op in rpcRequestHeader\";\n-        throw new WrappedRpcServerException(\n+        throw new FatalRpcServerException(\n             RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n       }\n       if (header.getRpcOp() !\u003d \n           RpcRequestHeaderProto.OperationProto.RPC_FINAL_PACKET) {\n         String err \u003d \"IPC Server does not implement rpc header operation\" + \n                 header.getRpcOp();\n-        throw new WrappedRpcServerException(\n+        throw new FatalRpcServerException(\n             RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n       }\n       // If we know the rpc kind, get its class so that we can deserialize\n       // (Note it would make more sense to have the handler deserialize but \n       // we continue with this original design.\n       if (!header.hasRpcKind()) {\n         String err \u003d \" IPC Server: No rpc kind in rpcRequestHeader\";\n-        throw new WrappedRpcServerException(\n+        throw new FatalRpcServerException(\n             RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkRpcHeaders(RpcRequestHeaderProto header)\n        throws RpcServerException {\n      if (!header.hasRpcOp()) {\n        String err \u003d \" IPC Server: No rpc op in rpcRequestHeader\";\n        throw new FatalRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n      }\n      if (header.getRpcOp() !\u003d \n          RpcRequestHeaderProto.OperationProto.RPC_FINAL_PACKET) {\n        String err \u003d \"IPC Server does not implement rpc header operation\" + \n                header.getRpcOp();\n        throw new FatalRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n      }\n      // If we know the rpc kind, get its class so that we can deserialize\n      // (Note it would make more sense to have the handler deserialize but \n      // we continue with this original design.\n      if (!header.hasRpcKind()) {\n        String err \u003d \" IPC Server: No rpc kind in rpcRequestHeader\";\n        throw new FatalRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[WrappedRpcServerException]",
            "newValue": "[RpcServerException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14034. Allow ipc layer exceptions to selectively close connections. Contributed by Daryn Sharp.\n",
          "commitDate": "09/02/17 8:47 AM",
          "commitName": "b6bb99c18a772d2179d5cc6757cddf141e8d39c0",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "28/11/16 9:07 PM",
          "commitNameOld": "67d9f2808efb34b9a7b0b824cb4033b95ad33474",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 72.49,
          "commitsBetweenForRepo": 352,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n     private void checkRpcHeaders(RpcRequestHeaderProto header)\n-        throws WrappedRpcServerException {\n+        throws RpcServerException {\n       if (!header.hasRpcOp()) {\n         String err \u003d \" IPC Server: No rpc op in rpcRequestHeader\";\n-        throw new WrappedRpcServerException(\n+        throw new FatalRpcServerException(\n             RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n       }\n       if (header.getRpcOp() !\u003d \n           RpcRequestHeaderProto.OperationProto.RPC_FINAL_PACKET) {\n         String err \u003d \"IPC Server does not implement rpc header operation\" + \n                 header.getRpcOp();\n-        throw new WrappedRpcServerException(\n+        throw new FatalRpcServerException(\n             RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n       }\n       // If we know the rpc kind, get its class so that we can deserialize\n       // (Note it would make more sense to have the handler deserialize but \n       // we continue with this original design.\n       if (!header.hasRpcKind()) {\n         String err \u003d \" IPC Server: No rpc kind in rpcRequestHeader\";\n-        throw new WrappedRpcServerException(\n+        throw new FatalRpcServerException(\n             RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkRpcHeaders(RpcRequestHeaderProto header)\n        throws RpcServerException {\n      if (!header.hasRpcOp()) {\n        String err \u003d \" IPC Server: No rpc op in rpcRequestHeader\";\n        throw new FatalRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n      }\n      if (header.getRpcOp() !\u003d \n          RpcRequestHeaderProto.OperationProto.RPC_FINAL_PACKET) {\n        String err \u003d \"IPC Server does not implement rpc header operation\" + \n                header.getRpcOp();\n        throw new FatalRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n      }\n      // If we know the rpc kind, get its class so that we can deserialize\n      // (Note it would make more sense to have the handler deserialize but \n      // we continue with this original design.\n      if (!header.hasRpcKind()) {\n        String err \u003d \" IPC Server: No rpc kind in rpcRequestHeader\";\n        throw new FatalRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "a3a9d72e98a9cc0f94af7c832dd13c408856636d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9683. [RPC v9] Wrap IpcConnectionContext in RPC headers (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503811 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 10:59 AM",
      "commitName": "a3a9d72e98a9cc0f94af7c832dd13c408856636d",
      "commitAuthor": "Daryn Sharp",
      "diff": "@@ -0,0 +1,23 @@\n+    private void checkRpcHeaders(RpcRequestHeaderProto header)\n+        throws WrappedRpcServerException {\n+      if (!header.hasRpcOp()) {\n+        String err \u003d \" IPC Server: No rpc op in rpcRequestHeader\";\n+        throw new WrappedRpcServerException(\n+            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n+      }\n+      if (header.getRpcOp() !\u003d \n+          RpcRequestHeaderProto.OperationProto.RPC_FINAL_PACKET) {\n+        String err \u003d \"IPC Server does not implement rpc header operation\" + \n+                header.getRpcOp();\n+        throw new WrappedRpcServerException(\n+            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n+      }\n+      // If we know the rpc kind, get its class so that we can deserialize\n+      // (Note it would make more sense to have the handler deserialize but \n+      // we continue with this original design.\n+      if (!header.hasRpcKind()) {\n+        String err \u003d \" IPC Server: No rpc kind in rpcRequestHeader\";\n+        throw new WrappedRpcServerException(\n+            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkRpcHeaders(RpcRequestHeaderProto header)\n        throws WrappedRpcServerException {\n      if (!header.hasRpcOp()) {\n        String err \u003d \" IPC Server: No rpc op in rpcRequestHeader\";\n        throw new WrappedRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n      }\n      if (header.getRpcOp() !\u003d \n          RpcRequestHeaderProto.OperationProto.RPC_FINAL_PACKET) {\n        String err \u003d \"IPC Server does not implement rpc header operation\" + \n                header.getRpcOp();\n        throw new WrappedRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n      }\n      // If we know the rpc kind, get its class so that we can deserialize\n      // (Note it would make more sense to have the handler deserialize but \n      // we continue with this original design.\n      if (!header.hasRpcKind()) {\n        String err \u003d \" IPC Server: No rpc kind in rpcRequestHeader\";\n        throw new WrappedRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER, err);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}