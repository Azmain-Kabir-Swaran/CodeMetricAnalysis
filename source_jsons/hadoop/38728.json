{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FiCaSchedulerNode.java",
  "functionName": "unreserveResource",
  "functionId": "unreserveResource___application-SchedulerApplicationAttempt",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
  "functionStartLine": 103,
  "functionEndLine": 126,
  "numCommitsSeen": 38,
  "timeTaken": 8432,
  "changeHistory": [
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ybodychange",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": "Yparameterchange",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "15/04/14 1:37 PM",
      "commitNameOld": "44b6261bfacddea88a3cf02d406f970bbbb98d04",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 36.37,
      "commitsBetweenForRepo": 202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n   public synchronized void unreserveResource(\n       SchedulerApplicationAttempt application) {\n-    \n+\n     // adding NP checks as this can now be called for preemption\n-    if (reservedContainer !\u003d null\n-        \u0026\u0026 reservedContainer.getContainer() !\u003d null\n-        \u0026\u0026 reservedContainer.getContainer().getId() !\u003d null\n-        \u0026\u0026 reservedContainer.getContainer().getId().getApplicationAttemptId() !\u003d null) {\n+    if (getReservedContainer() !\u003d null\n+        \u0026\u0026 getReservedContainer().getContainer() !\u003d null\n+        \u0026\u0026 getReservedContainer().getContainer().getId() !\u003d null\n+        \u0026\u0026 getReservedContainer().getContainer().getId()\n+          .getApplicationAttemptId() !\u003d null) {\n \n       // Cannot unreserve for wrong application...\n       ApplicationAttemptId reservedApplication \u003d\n-          reservedContainer.getContainer().getId().getApplicationAttemptId();\n+          getReservedContainer().getContainer().getId()\n+            .getApplicationAttemptId();\n       if (!reservedApplication.equals(\n           application.getApplicationAttemptId())) {\n         throw new IllegalStateException(\"Trying to unreserve \" +\n             \" for application \" + application.getApplicationAttemptId() +\n             \" when currently reserved \" +\n             \" for application \" + reservedApplication.getApplicationId() +\n             \" on node \" + this);\n       }\n     }\n-    reservedContainer \u003d null;\n+    setReservedContainer(null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void unreserveResource(\n      SchedulerApplicationAttempt application) {\n\n    // adding NP checks as this can now be called for preemption\n    if (getReservedContainer() !\u003d null\n        \u0026\u0026 getReservedContainer().getContainer() !\u003d null\n        \u0026\u0026 getReservedContainer().getContainer().getId() !\u003d null\n        \u0026\u0026 getReservedContainer().getContainer().getId()\n          .getApplicationAttemptId() !\u003d null) {\n\n      // Cannot unreserve for wrong application...\n      ApplicationAttemptId reservedApplication \u003d\n          getReservedContainer().getContainer().getId()\n            .getApplicationAttemptId();\n      if (!reservedApplication.equals(\n          application.getApplicationAttemptId())) {\n        throw new IllegalStateException(\"Trying to unreserve \" +\n            \" for application \" + application.getApplicationAttemptId() +\n            \" when currently reserved \" +\n            \" for application \" + reservedApplication.getApplicationId() +\n            \" on node \" + this);\n      }\n    }\n    setReservedContainer(null);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
      "extendedDetails": {}
    },
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:19 PM",
      "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "05/11/13 1:23 PM",
      "commitNameOld": "6990355e577ad19371cb656c250fb665ed14062f",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 57.96,
      "commitsBetweenForRepo": 320,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public synchronized void unreserveResource(\n-      SchedulerApplication application) {\n+      SchedulerApplicationAttempt application) {\n     \n     // adding NP checks as this can now be called for preemption\n     if (reservedContainer !\u003d null\n         \u0026\u0026 reservedContainer.getContainer() !\u003d null\n         \u0026\u0026 reservedContainer.getContainer().getId() !\u003d null\n         \u0026\u0026 reservedContainer.getContainer().getId().getApplicationAttemptId() !\u003d null) {\n \n       // Cannot unreserve for wrong application...\n       ApplicationAttemptId reservedApplication \u003d\n           reservedContainer.getContainer().getId().getApplicationAttemptId();\n       if (!reservedApplication.equals(\n           application.getApplicationAttemptId())) {\n         throw new IllegalStateException(\"Trying to unreserve \" +\n             \" for application \" + application.getApplicationAttemptId() +\n             \" when currently reserved \" +\n             \" for application \" + reservedApplication.getApplicationId() +\n             \" on node \" + this);\n       }\n     }\n     reservedContainer \u003d null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void unreserveResource(\n      SchedulerApplicationAttempt application) {\n    \n    // adding NP checks as this can now be called for preemption\n    if (reservedContainer !\u003d null\n        \u0026\u0026 reservedContainer.getContainer() !\u003d null\n        \u0026\u0026 reservedContainer.getContainer().getId() !\u003d null\n        \u0026\u0026 reservedContainer.getContainer().getId().getApplicationAttemptId() !\u003d null) {\n\n      // Cannot unreserve for wrong application...\n      ApplicationAttemptId reservedApplication \u003d\n          reservedContainer.getContainer().getId().getApplicationAttemptId();\n      if (!reservedApplication.equals(\n          application.getApplicationAttemptId())) {\n        throw new IllegalStateException(\"Trying to unreserve \" +\n            \" for application \" + application.getApplicationAttemptId() +\n            \" when currently reserved \" +\n            \" for application \" + reservedApplication.getApplicationId() +\n            \" on node \" + this);\n      }\n    }\n    reservedContainer \u003d null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
      "extendedDetails": {
        "oldValue": "[application-SchedulerApplication]",
        "newValue": "[application-SchedulerApplicationAttempt]"
      }
    },
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": {
      "type": "Ybodychange",
      "commitMessage": "YARN-569. Add support for requesting and enforcing preemption requests via\na capacity monitor. Contributed by Carlo Curino, Chris Douglas\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502083 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/13 6:20 PM",
      "commitName": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
      "commitAuthor": "Christopher Douglas",
      "commitDateOld": "21/06/13 11:28 AM",
      "commitNameOld": "37d7935a9d7b86635c9c1ffc03f88b49857f88a0",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 19.29,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,23 @@\n   public synchronized void unreserveResource(\n       SchedulerApplication application) {\n-    // Cannot unreserve for wrong application...\n-    ApplicationAttemptId reservedApplication \u003d \n-        reservedContainer.getContainer().getId().getApplicationAttemptId(); \n-    if (!reservedApplication.equals(\n-        application.getApplicationAttemptId())) {\n-      throw new IllegalStateException(\"Trying to unreserve \" +  \n-          \" for application \" + application.getApplicationAttemptId() + \n-          \" when currently reserved \" + \n-          \" for application \" + reservedApplication.getApplicationId() + \n-          \" on node \" + this);\n-    }\n     \n+    // adding NP checks as this can now be called for preemption\n+    if (reservedContainer !\u003d null\n+        \u0026\u0026 reservedContainer.getContainer() !\u003d null\n+        \u0026\u0026 reservedContainer.getContainer().getId() !\u003d null\n+        \u0026\u0026 reservedContainer.getContainer().getId().getApplicationAttemptId() !\u003d null) {\n+\n+      // Cannot unreserve for wrong application...\n+      ApplicationAttemptId reservedApplication \u003d\n+          reservedContainer.getContainer().getId().getApplicationAttemptId();\n+      if (!reservedApplication.equals(\n+          application.getApplicationAttemptId())) {\n+        throw new IllegalStateException(\"Trying to unreserve \" +\n+            \" for application \" + application.getApplicationAttemptId() +\n+            \" when currently reserved \" +\n+            \" for application \" + reservedApplication.getApplicationId() +\n+            \" on node \" + this);\n+      }\n+    }\n     reservedContainer \u003d null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void unreserveResource(\n      SchedulerApplication application) {\n    \n    // adding NP checks as this can now be called for preemption\n    if (reservedContainer !\u003d null\n        \u0026\u0026 reservedContainer.getContainer() !\u003d null\n        \u0026\u0026 reservedContainer.getContainer().getId() !\u003d null\n        \u0026\u0026 reservedContainer.getContainer().getId().getApplicationAttemptId() !\u003d null) {\n\n      // Cannot unreserve for wrong application...\n      ApplicationAttemptId reservedApplication \u003d\n          reservedContainer.getContainer().getId().getApplicationAttemptId();\n      if (!reservedApplication.equals(\n          application.getApplicationAttemptId())) {\n        throw new IllegalStateException(\"Trying to unreserve \" +\n            \" for application \" + application.getApplicationAttemptId() +\n            \" when currently reserved \" +\n            \" for application \" + reservedApplication.getApplicationId() +\n            \" on node \" + this);\n      }\n    }\n    reservedContainer \u003d null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void unreserveResource(\n      SchedulerApplication application) {\n    // Cannot unreserve for wrong application...\n    ApplicationAttemptId reservedApplication \u003d \n        reservedContainer.getContainer().getId().getApplicationAttemptId(); \n    if (!reservedApplication.equals(\n        application.getApplicationAttemptId())) {\n      throw new IllegalStateException(\"Trying to unreserve \" +  \n          \" for application \" + application.getApplicationAttemptId() + \n          \" when currently reserved \" + \n          \" for application \" + reservedApplication.getApplicationId() + \n          \" on node \" + this);\n    }\n    \n    reservedContainer \u003d null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "16/07/12 3:41 PM",
          "commitNameOld": "30099efb3525265f8b9fccd2709d45327f5b6724",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,16 @@\n-  public synchronized void unreserveResource(SchedulerApp application) {\n+  public synchronized void unreserveResource(\n+      SchedulerApplication application) {\n     // Cannot unreserve for wrong application...\n     ApplicationAttemptId reservedApplication \u003d \n         reservedContainer.getContainer().getId().getApplicationAttemptId(); \n     if (!reservedApplication.equals(\n         application.getApplicationAttemptId())) {\n       throw new IllegalStateException(\"Trying to unreserve \" +  \n-          \" for application \" + application.getApplicationId() + \n+          \" for application \" + application.getApplicationAttemptId() + \n           \" when currently reserved \" + \n           \" for application \" + reservedApplication.getApplicationId() + \n           \" on node \" + this);\n     }\n     \n     reservedContainer \u003d null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void unreserveResource(\n      SchedulerApplication application) {\n    // Cannot unreserve for wrong application...\n    ApplicationAttemptId reservedApplication \u003d \n        reservedContainer.getContainer().getId().getApplicationAttemptId(); \n    if (!reservedApplication.equals(\n        application.getApplicationAttemptId())) {\n      throw new IllegalStateException(\"Trying to unreserve \" +  \n          \" for application \" + application.getApplicationAttemptId() + \n          \" when currently reserved \" + \n          \" for application \" + reservedApplication.getApplicationId() + \n          \" on node \" + this);\n    }\n    \n    reservedContainer \u003d null;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
          "extendedDetails": {
            "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
            "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
            "oldMethodName": "unreserveResource",
            "newMethodName": "unreserveResource"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "16/07/12 3:41 PM",
          "commitNameOld": "30099efb3525265f8b9fccd2709d45327f5b6724",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,16 @@\n-  public synchronized void unreserveResource(SchedulerApp application) {\n+  public synchronized void unreserveResource(\n+      SchedulerApplication application) {\n     // Cannot unreserve for wrong application...\n     ApplicationAttemptId reservedApplication \u003d \n         reservedContainer.getContainer().getId().getApplicationAttemptId(); \n     if (!reservedApplication.equals(\n         application.getApplicationAttemptId())) {\n       throw new IllegalStateException(\"Trying to unreserve \" +  \n-          \" for application \" + application.getApplicationId() + \n+          \" for application \" + application.getApplicationAttemptId() + \n           \" when currently reserved \" + \n           \" for application \" + reservedApplication.getApplicationId() + \n           \" on node \" + this);\n     }\n     \n     reservedContainer \u003d null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void unreserveResource(\n      SchedulerApplication application) {\n    // Cannot unreserve for wrong application...\n    ApplicationAttemptId reservedApplication \u003d \n        reservedContainer.getContainer().getId().getApplicationAttemptId(); \n    if (!reservedApplication.equals(\n        application.getApplicationAttemptId())) {\n      throw new IllegalStateException(\"Trying to unreserve \" +  \n          \" for application \" + application.getApplicationAttemptId() + \n          \" when currently reserved \" + \n          \" for application \" + reservedApplication.getApplicationId() + \n          \" on node \" + this);\n    }\n    \n    reservedContainer \u003d null;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "16/07/12 3:41 PM",
          "commitNameOld": "30099efb3525265f8b9fccd2709d45327f5b6724",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,16 @@\n-  public synchronized void unreserveResource(SchedulerApp application) {\n+  public synchronized void unreserveResource(\n+      SchedulerApplication application) {\n     // Cannot unreserve for wrong application...\n     ApplicationAttemptId reservedApplication \u003d \n         reservedContainer.getContainer().getId().getApplicationAttemptId(); \n     if (!reservedApplication.equals(\n         application.getApplicationAttemptId())) {\n       throw new IllegalStateException(\"Trying to unreserve \" +  \n-          \" for application \" + application.getApplicationId() + \n+          \" for application \" + application.getApplicationAttemptId() + \n           \" when currently reserved \" + \n           \" for application \" + reservedApplication.getApplicationId() + \n           \" on node \" + this);\n     }\n     \n     reservedContainer \u003d null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void unreserveResource(\n      SchedulerApplication application) {\n    // Cannot unreserve for wrong application...\n    ApplicationAttemptId reservedApplication \u003d \n        reservedContainer.getContainer().getId().getApplicationAttemptId(); \n    if (!reservedApplication.equals(\n        application.getApplicationAttemptId())) {\n      throw new IllegalStateException(\"Trying to unreserve \" +  \n          \" for application \" + application.getApplicationAttemptId() + \n          \" when currently reserved \" + \n          \" for application \" + reservedApplication.getApplicationId() + \n          \" on node \" + this);\n    }\n    \n    reservedContainer \u003d null;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
          "extendedDetails": {
            "oldValue": "[application-SchedulerApp]",
            "newValue": "[application-SchedulerApplication]"
          }
        }
      ]
    },
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2896. Simplify all apis to in org.apache.hadoop.yarn.api.records.* to be get/set only. Added javadocs to all public records.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169980 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/09/11 5:05 PM",
      "commitName": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "29/08/11 4:27 PM",
      "commitNameOld": "fb6ecb9b27798a923ca290ba5d23368e3a820a6c",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 14.03,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n   public synchronized void unreserveResource(SchedulerApp application) {\n     // Cannot unreserve for wrong application...\n     ApplicationAttemptId reservedApplication \u003d \n-        reservedContainer.getContainer().getId().getAppAttemptId(); \n+        reservedContainer.getContainer().getId().getApplicationAttemptId(); \n     if (!reservedApplication.equals(\n         application.getApplicationAttemptId())) {\n       throw new IllegalStateException(\"Trying to unreserve \" +  \n           \" for application \" + application.getApplicationId() + \n           \" when currently reserved \" + \n           \" for application \" + reservedApplication.getApplicationId() + \n           \" on node \" + this);\n     }\n     \n     reservedContainer \u003d null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void unreserveResource(SchedulerApp application) {\n    // Cannot unreserve for wrong application...\n    ApplicationAttemptId reservedApplication \u003d \n        reservedContainer.getContainer().getId().getApplicationAttemptId(); \n    if (!reservedApplication.equals(\n        application.getApplicationAttemptId())) {\n      throw new IllegalStateException(\"Trying to unreserve \" +  \n          \" for application \" + application.getApplicationId() + \n          \" when currently reserved \" + \n          \" for application \" + reservedApplication.getApplicationId() + \n          \" on node \" + this);\n    }\n    \n    reservedContainer \u003d null;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void unreserveResource(SchedulerApp application) {\n    // Cannot unreserve for wrong application...\n    ApplicationAttemptId reservedApplication \u003d \n        reservedContainer.getContainer().getId().getAppAttemptId(); \n    if (!reservedApplication.equals(\n        application.getApplicationAttemptId())) {\n      throw new IllegalStateException(\"Trying to unreserve \" +  \n          \" for application \" + application.getApplicationId() + \n          \" when currently reserved \" + \n          \" for application \" + reservedApplication.getApplicationId() + \n          \" on node \" + this);\n    }\n    \n    reservedContainer \u003d null;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,15 @@\n+  public synchronized void unreserveResource(SchedulerApp application) {\n+    // Cannot unreserve for wrong application...\n+    ApplicationAttemptId reservedApplication \u003d \n+        reservedContainer.getContainer().getId().getAppAttemptId(); \n+    if (!reservedApplication.equals(\n+        application.getApplicationAttemptId())) {\n+      throw new IllegalStateException(\"Trying to unreserve \" +  \n+          \" for application \" + application.getApplicationId() + \n+          \" when currently reserved \" + \n+          \" for application \" + reservedApplication.getApplicationId() + \n+          \" on node \" + this);\n+    }\n+    \n+    reservedContainer \u003d null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void unreserveResource(SchedulerApp application) {\n    // Cannot unreserve for wrong application...\n    ApplicationAttemptId reservedApplication \u003d \n        reservedContainer.getContainer().getId().getAppAttemptId(); \n    if (!reservedApplication.equals(\n        application.getApplicationAttemptId())) {\n      throw new IllegalStateException(\"Trying to unreserve \" +  \n          \" for application \" + application.getApplicationId() + \n          \" when currently reserved \" + \n          \" for application \" + reservedApplication.getApplicationId() + \n          \" on node \" + this);\n    }\n    \n    reservedContainer \u003d null;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java"
    }
  }
}