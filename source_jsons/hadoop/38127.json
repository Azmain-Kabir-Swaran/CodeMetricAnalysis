{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReservedContainerCandidatesSelector.java",
  "functionName": "getNodesForPreemption",
  "functionId": "getNodesForPreemption___queueToPreemptableResourceByPartition-Map__String,Map__String,Resource______selectedCandidates-Map__ApplicationAttemptId,Set__RMContainer______totalPreemptionAllowed-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ReservedContainerCandidatesSelector.java",
  "functionStartLine": 274,
  "functionEndLine": 304,
  "numCommitsSeen": 6,
  "timeTaken": 3778,
  "changeHistory": [
    "e81596d06d226f1cfa44b2390ce3095ed4dee621",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0"
  ],
  "changeHistoryShort": {
    "e81596d06d226f1cfa44b2390ce3095ed4dee621": "Ymultichange(Yparameterchange,Ybodychange)",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e81596d06d226f1cfa44b2390ce3095ed4dee621": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7172. ResourceCalculator.fitsIn() should not take a cluster resource parameter. (Sen Zhao via wangda)\n\nChange-Id: Icc3670c9381ce7591ca69ec12da5aa52d3612d34\n",
      "commitDate": "17/09/17 9:20 PM",
      "commitName": "e81596d06d226f1cfa44b2390ce3095ed4dee621",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7172. ResourceCalculator.fitsIn() should not take a cluster resource parameter. (Sen Zhao via wangda)\n\nChange-Id: Icc3670c9381ce7591ca69ec12da5aa52d3612d34\n",
          "commitDate": "17/09/17 9:20 PM",
          "commitName": "e81596d06d226f1cfa44b2390ce3095ed4dee621",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "05/05/16 12:56 PM",
          "commitNameOld": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 500.35,
          "commitsBetweenForRepo": 3345,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private List\u003cNodeForPreemption\u003e getNodesForPreemption(Resource cluster,\n+  private List\u003cNodeForPreemption\u003e getNodesForPreemption(\n       Map\u003cString, Map\u003cString, Resource\u003e\u003e queueToPreemptableResourceByPartition,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates,\n       Resource totalPreemptionAllowed) {\n     List\u003cNodeForPreemption\u003e nfps \u003d new ArrayList\u003c\u003e();\n \n     // get nodes have reserved container\n     for (FiCaSchedulerNode node : preemptionContext.getScheduler()\n         .getAllNodes()) {\n       if (node.getReservedContainer() !\u003d null) {\n-        NodeForPreemption nfp \u003d getPreemptionCandidatesOnNode(node, cluster,\n+        NodeForPreemption nfp \u003d getPreemptionCandidatesOnNode(node,\n             queueToPreemptableResourceByPartition, selectedCandidates,\n             totalPreemptionAllowed, true);\n         if (null !\u003d nfp) {\n           // Null means we cannot preempt containers on the node to satisfy\n           // reserved container\n           nfps.add(nfp);\n         }\n       }\n     }\n \n     // Return sorted node-for-preemptions (by cost)\n     Collections.sort(nfps, new Comparator\u003cNodeForPreemption\u003e() {\n       @Override\n       public int compare(NodeForPreemption o1, NodeForPreemption o2) {\n         return Float.compare(o1.preemptionCost, o2.preemptionCost);\n       }\n     });\n \n     return nfps;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cNodeForPreemption\u003e getNodesForPreemption(\n      Map\u003cString, Map\u003cString, Resource\u003e\u003e queueToPreemptableResourceByPartition,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates,\n      Resource totalPreemptionAllowed) {\n    List\u003cNodeForPreemption\u003e nfps \u003d new ArrayList\u003c\u003e();\n\n    // get nodes have reserved container\n    for (FiCaSchedulerNode node : preemptionContext.getScheduler()\n        .getAllNodes()) {\n      if (node.getReservedContainer() !\u003d null) {\n        NodeForPreemption nfp \u003d getPreemptionCandidatesOnNode(node,\n            queueToPreemptableResourceByPartition, selectedCandidates,\n            totalPreemptionAllowed, true);\n        if (null !\u003d nfp) {\n          // Null means we cannot preempt containers on the node to satisfy\n          // reserved container\n          nfps.add(nfp);\n        }\n      }\n    }\n\n    // Return sorted node-for-preemptions (by cost)\n    Collections.sort(nfps, new Comparator\u003cNodeForPreemption\u003e() {\n      @Override\n      public int compare(NodeForPreemption o1, NodeForPreemption o2) {\n        return Float.compare(o1.preemptionCost, o2.preemptionCost);\n      }\n    });\n\n    return nfps;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ReservedContainerCandidatesSelector.java",
          "extendedDetails": {
            "oldValue": "[cluster-Resource, queueToPreemptableResourceByPartition-Map\u003cString,Map\u003cString,Resource\u003e\u003e, selectedCandidates-Map\u003cApplicationAttemptId,Set\u003cRMContainer\u003e\u003e, totalPreemptionAllowed-Resource]",
            "newValue": "[queueToPreemptableResourceByPartition-Map\u003cString,Map\u003cString,Resource\u003e\u003e, selectedCandidates-Map\u003cApplicationAttemptId,Set\u003cRMContainer\u003e\u003e, totalPreemptionAllowed-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7172. ResourceCalculator.fitsIn() should not take a cluster resource parameter. (Sen Zhao via wangda)\n\nChange-Id: Icc3670c9381ce7591ca69ec12da5aa52d3612d34\n",
          "commitDate": "17/09/17 9:20 PM",
          "commitName": "e81596d06d226f1cfa44b2390ce3095ed4dee621",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "05/05/16 12:56 PM",
          "commitNameOld": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 500.35,
          "commitsBetweenForRepo": 3345,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private List\u003cNodeForPreemption\u003e getNodesForPreemption(Resource cluster,\n+  private List\u003cNodeForPreemption\u003e getNodesForPreemption(\n       Map\u003cString, Map\u003cString, Resource\u003e\u003e queueToPreemptableResourceByPartition,\n       Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates,\n       Resource totalPreemptionAllowed) {\n     List\u003cNodeForPreemption\u003e nfps \u003d new ArrayList\u003c\u003e();\n \n     // get nodes have reserved container\n     for (FiCaSchedulerNode node : preemptionContext.getScheduler()\n         .getAllNodes()) {\n       if (node.getReservedContainer() !\u003d null) {\n-        NodeForPreemption nfp \u003d getPreemptionCandidatesOnNode(node, cluster,\n+        NodeForPreemption nfp \u003d getPreemptionCandidatesOnNode(node,\n             queueToPreemptableResourceByPartition, selectedCandidates,\n             totalPreemptionAllowed, true);\n         if (null !\u003d nfp) {\n           // Null means we cannot preempt containers on the node to satisfy\n           // reserved container\n           nfps.add(nfp);\n         }\n       }\n     }\n \n     // Return sorted node-for-preemptions (by cost)\n     Collections.sort(nfps, new Comparator\u003cNodeForPreemption\u003e() {\n       @Override\n       public int compare(NodeForPreemption o1, NodeForPreemption o2) {\n         return Float.compare(o1.preemptionCost, o2.preemptionCost);\n       }\n     });\n \n     return nfps;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cNodeForPreemption\u003e getNodesForPreemption(\n      Map\u003cString, Map\u003cString, Resource\u003e\u003e queueToPreemptableResourceByPartition,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates,\n      Resource totalPreemptionAllowed) {\n    List\u003cNodeForPreemption\u003e nfps \u003d new ArrayList\u003c\u003e();\n\n    // get nodes have reserved container\n    for (FiCaSchedulerNode node : preemptionContext.getScheduler()\n        .getAllNodes()) {\n      if (node.getReservedContainer() !\u003d null) {\n        NodeForPreemption nfp \u003d getPreemptionCandidatesOnNode(node,\n            queueToPreemptableResourceByPartition, selectedCandidates,\n            totalPreemptionAllowed, true);\n        if (null !\u003d nfp) {\n          // Null means we cannot preempt containers on the node to satisfy\n          // reserved container\n          nfps.add(nfp);\n        }\n      }\n    }\n\n    // Return sorted node-for-preemptions (by cost)\n    Collections.sort(nfps, new Comparator\u003cNodeForPreemption\u003e() {\n      @Override\n      public int compare(NodeForPreemption o1, NodeForPreemption o2) {\n        return Float.compare(o1.preemptionCost, o2.preemptionCost);\n      }\n    });\n\n    return nfps;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ReservedContainerCandidatesSelector.java",
          "extendedDetails": {}
        }
      ]
    },
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4390. Do surgical preemption based on reserved container in CapacityScheduler. Contributed by Wangda Tan\n",
      "commitDate": "05/05/16 12:56 PM",
      "commitName": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,31 @@\n+  private List\u003cNodeForPreemption\u003e getNodesForPreemption(Resource cluster,\n+      Map\u003cString, Map\u003cString, Resource\u003e\u003e queueToPreemptableResourceByPartition,\n+      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates,\n+      Resource totalPreemptionAllowed) {\n+    List\u003cNodeForPreemption\u003e nfps \u003d new ArrayList\u003c\u003e();\n+\n+    // get nodes have reserved container\n+    for (FiCaSchedulerNode node : preemptionContext.getScheduler()\n+        .getAllNodes()) {\n+      if (node.getReservedContainer() !\u003d null) {\n+        NodeForPreemption nfp \u003d getPreemptionCandidatesOnNode(node, cluster,\n+            queueToPreemptableResourceByPartition, selectedCandidates,\n+            totalPreemptionAllowed, true);\n+        if (null !\u003d nfp) {\n+          // Null means we cannot preempt containers on the node to satisfy\n+          // reserved container\n+          nfps.add(nfp);\n+        }\n+      }\n+    }\n+\n+    // Return sorted node-for-preemptions (by cost)\n+    Collections.sort(nfps, new Comparator\u003cNodeForPreemption\u003e() {\n+      @Override\n+      public int compare(NodeForPreemption o1, NodeForPreemption o2) {\n+        return Float.compare(o1.preemptionCost, o2.preemptionCost);\n+      }\n+    });\n+\n+    return nfps;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cNodeForPreemption\u003e getNodesForPreemption(Resource cluster,\n      Map\u003cString, Map\u003cString, Resource\u003e\u003e queueToPreemptableResourceByPartition,\n      Map\u003cApplicationAttemptId, Set\u003cRMContainer\u003e\u003e selectedCandidates,\n      Resource totalPreemptionAllowed) {\n    List\u003cNodeForPreemption\u003e nfps \u003d new ArrayList\u003c\u003e();\n\n    // get nodes have reserved container\n    for (FiCaSchedulerNode node : preemptionContext.getScheduler()\n        .getAllNodes()) {\n      if (node.getReservedContainer() !\u003d null) {\n        NodeForPreemption nfp \u003d getPreemptionCandidatesOnNode(node, cluster,\n            queueToPreemptableResourceByPartition, selectedCandidates,\n            totalPreemptionAllowed, true);\n        if (null !\u003d nfp) {\n          // Null means we cannot preempt containers on the node to satisfy\n          // reserved container\n          nfps.add(nfp);\n        }\n      }\n    }\n\n    // Return sorted node-for-preemptions (by cost)\n    Collections.sort(nfps, new Comparator\u003cNodeForPreemption\u003e() {\n      @Override\n      public int compare(NodeForPreemption o1, NodeForPreemption o2) {\n        return Float.compare(o1.preemptionCost, o2.preemptionCost);\n      }\n    });\n\n    return nfps;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ReservedContainerCandidatesSelector.java"
    }
  }
}