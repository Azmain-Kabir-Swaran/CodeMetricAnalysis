{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CopyMapper.java",
  "functionName": "map",
  "functionId": "map___relPath-Text__sourceFileStatus-CopyListingFileStatus__context-Context",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
  "functionStartLine": 139,
  "functionEndLine": 229,
  "numCommitsSeen": 28,
  "timeTaken": 4157,
  "changeHistory": [
    "c757cb61ebc9e69d9f6f143da91189b9f0517ee9",
    "63720ef574df6d79a9bab0628edb915d1e3a7c30",
    "bf3fb585aaf2b179836e139c041fc87920a3c886",
    "144f1cf76527e6c75aec77ef683a898580f3cc8d",
    "064c8b25eca9bc825dc07a54d9147d65c9290a03",
    "c69a649257a331da55c1a1bf61c819e289015a6b",
    "041b8326a1511b721958792a6b94ecfe27d7a1fb",
    "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9",
    "3671a5e16fbddbe5a0516289ce98e1305e02291c",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67"
  ],
  "changeHistoryShort": {
    "c757cb61ebc9e69d9f6f143da91189b9f0517ee9": "Ybodychange",
    "63720ef574df6d79a9bab0628edb915d1e3a7c30": "Ybodychange",
    "bf3fb585aaf2b179836e139c041fc87920a3c886": "Ybodychange",
    "144f1cf76527e6c75aec77ef683a898580f3cc8d": "Ybodychange",
    "064c8b25eca9bc825dc07a54d9147d65c9290a03": "Ybodychange",
    "c69a649257a331da55c1a1bf61c819e289015a6b": "Ybodychange",
    "041b8326a1511b721958792a6b94ecfe27d7a1fb": "Ybodychange",
    "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9": "Ybodychange",
    "3671a5e16fbddbe5a0516289ce98e1305e02291c": "Ybodychange",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": "Ymultichange(Yparameterchange,Ybodychange)",
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c757cb61ebc9e69d9f6f143da91189b9f0517ee9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14254. Add a Distcp option to preserve Erasure Coding attributes. Contributed by Ayush Saxena.\n",
      "commitDate": "13/05/20 12:01 PM",
      "commitName": "c757cb61ebc9e69d9f6f143da91189b9f0517ee9",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/09/19 3:23 AM",
      "commitNameOld": "51c64b357d4bd1a0038e61df3d4b8ea0a3ad7449",
      "commitAuthorOld": "Mukund Thakur",
      "daysBetweenCommits": 232.36,
      "commitsBetweenForRepo": 893,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,91 @@\n   public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n           Context context) throws IOException, InterruptedException {\n     Path sourcePath \u003d sourceFileStatus.getPath();\n     if (LOG.isDebugEnabled())\n       LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n \n     Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                           targetFS.getWorkingDirectory()) + relPath.toString());\n \n     EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n             \u003d getFileAttributeSettings(context);\n     final boolean preserveRawXattrs \u003d context.getConfiguration().getBoolean(\n         DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);\n \n     final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n     context.setStatus(description);\n \n     LOG.info(description);\n \n     try {\n       CopyListingFileStatus sourceCurrStatus;\n       FileSystem sourceFS;\n+      FileStatus sourceStatus;\n       try {\n         sourceFS \u003d sourcePath.getFileSystem(conf);\n+        sourceStatus \u003d sourceFS.getFileStatus(sourcePath);\n         final boolean preserveXAttrs \u003d\n             fileAttributes.contains(FileAttribute.XATTR);\n         sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatusHelper(sourceFS,\n-            sourceFS.getFileStatus(sourcePath),\n+            sourceStatus,\n             fileAttributes.contains(FileAttribute.ACL),\n             preserveXAttrs, preserveRawXattrs,\n             sourceFileStatus.getChunkOffset(),\n             sourceFileStatus.getChunkLength());\n       } catch (FileNotFoundException e) {\n         throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n       }\n \n       FileStatus targetStatus \u003d null;\n \n       try {\n         targetStatus \u003d targetFS.getFileStatus(target);\n       } catch (FileNotFoundException ignore) {\n         if (LOG.isDebugEnabled())\n           LOG.debug(\"Path could not be found: \" + target, ignore);\n       }\n \n       if (targetStatus !\u003d null \u0026\u0026\n           (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n         throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n             getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n       }\n \n       if (sourceCurrStatus.isDirectory()) {\n-        createTargetDirsWithRetry(description, target, context);\n+        createTargetDirsWithRetry(description, target, context, sourceStatus);\n         return;\n       }\n \n       FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target,\n           targetStatus);\n \n       Path tmpTarget \u003d target;\n       if (action \u003d\u003d FileAction.SKIP) {\n         LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                  + \" to \" + target);\n         updateSkipCounters(context, sourceCurrStatus);\n         context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n \n         if (verboseLog) {\n           context.write(null,\n               new Text(\"FILE_SKIPPED: source\u003d\" + sourceFileStatus.getPath()\n               + \", size\u003d\" + sourceFileStatus.getLen() + \" --\u003e \"\n               + \"target\u003d\" + target + \", size\u003d\" + (targetStatus \u003d\u003d null ?\n                   0 : targetStatus.getLen())));\n         }\n       } else {\n         if (sourceCurrStatus.isSplit()) {\n           tmpTarget \u003d DistCpUtils.getSplitChunkPath(target, sourceCurrStatus);\n         }\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"copying \" + sourceCurrStatus + \" \" + tmpTarget);\n         }\n         copyFileWithRetry(description, sourceCurrStatus, tmpTarget,\n-            targetStatus, context, action, fileAttributes);\n+            targetStatus, context, action, fileAttributes, sourceStatus);\n       }\n       DistCpUtils.preserve(target.getFileSystem(conf), tmpTarget,\n           sourceCurrStatus, fileAttributes, preserveRawXattrs);\n     } catch (IOException exception) {\n       handleFailures(exception, sourceFileStatus, target, context);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n          Context context) throws IOException, InterruptedException {\n    Path sourcePath \u003d sourceFileStatus.getPath();\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n\n    Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                          targetFS.getWorkingDirectory()) + relPath.toString());\n\n    EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n            \u003d getFileAttributeSettings(context);\n    final boolean preserveRawXattrs \u003d context.getConfiguration().getBoolean(\n        DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);\n\n    final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n    context.setStatus(description);\n\n    LOG.info(description);\n\n    try {\n      CopyListingFileStatus sourceCurrStatus;\n      FileSystem sourceFS;\n      FileStatus sourceStatus;\n      try {\n        sourceFS \u003d sourcePath.getFileSystem(conf);\n        sourceStatus \u003d sourceFS.getFileStatus(sourcePath);\n        final boolean preserveXAttrs \u003d\n            fileAttributes.contains(FileAttribute.XATTR);\n        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatusHelper(sourceFS,\n            sourceStatus,\n            fileAttributes.contains(FileAttribute.ACL),\n            preserveXAttrs, preserveRawXattrs,\n            sourceFileStatus.getChunkOffset(),\n            sourceFileStatus.getChunkLength());\n      } catch (FileNotFoundException e) {\n        throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n      }\n\n      FileStatus targetStatus \u003d null;\n\n      try {\n        targetStatus \u003d targetFS.getFileStatus(target);\n      } catch (FileNotFoundException ignore) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"Path could not be found: \" + target, ignore);\n      }\n\n      if (targetStatus !\u003d null \u0026\u0026\n          (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n        throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n            getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n      }\n\n      if (sourceCurrStatus.isDirectory()) {\n        createTargetDirsWithRetry(description, target, context, sourceStatus);\n        return;\n      }\n\n      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target,\n          targetStatus);\n\n      Path tmpTarget \u003d target;\n      if (action \u003d\u003d FileAction.SKIP) {\n        LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                 + \" to \" + target);\n        updateSkipCounters(context, sourceCurrStatus);\n        context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n\n        if (verboseLog) {\n          context.write(null,\n              new Text(\"FILE_SKIPPED: source\u003d\" + sourceFileStatus.getPath()\n              + \", size\u003d\" + sourceFileStatus.getLen() + \" --\u003e \"\n              + \"target\u003d\" + target + \", size\u003d\" + (targetStatus \u003d\u003d null ?\n                  0 : targetStatus.getLen())));\n        }\n      } else {\n        if (sourceCurrStatus.isSplit()) {\n          tmpTarget \u003d DistCpUtils.getSplitChunkPath(target, sourceCurrStatus);\n        }\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"copying \" + sourceCurrStatus + \" \" + tmpTarget);\n        }\n        copyFileWithRetry(description, sourceCurrStatus, tmpTarget,\n            targetStatus, context, action, fileAttributes, sourceStatus);\n      }\n      DistCpUtils.preserve(target.getFileSystem(conf), tmpTarget,\n          sourceCurrStatus, fileAttributes, preserveRawXattrs);\n    } catch (IOException exception) {\n      handleFailures(exception, sourceFileStatus, target, context);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "63720ef574df6d79a9bab0628edb915d1e3a7c30": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14839. DistCp log output should contain copied and deleted files and directories. Contributed by Yiqun Lin.\n",
      "commitDate": "05/09/17 11:34 PM",
      "commitName": "63720ef574df6d79a9bab0628edb915d1e3a7c30",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "30/03/17 5:38 PM",
      "commitNameOld": "bf3fb585aaf2b179836e139c041fc87920a3c886",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 159.25,
      "commitsBetweenForRepo": 958,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,90 @@\n   public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n           Context context) throws IOException, InterruptedException {\n     Path sourcePath \u003d sourceFileStatus.getPath();\n \n     if (LOG.isDebugEnabled())\n       LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n \n     Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                           targetFS.getWorkingDirectory()) + relPath.toString());\n \n     EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n             \u003d getFileAttributeSettings(context);\n     final boolean preserveRawXattrs \u003d context.getConfiguration().getBoolean(\n         DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);\n \n     final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n     context.setStatus(description);\n \n     LOG.info(description);\n \n     try {\n       CopyListingFileStatus sourceCurrStatus;\n       FileSystem sourceFS;\n       try {\n         sourceFS \u003d sourcePath.getFileSystem(conf);\n         final boolean preserveXAttrs \u003d\n             fileAttributes.contains(FileAttribute.XATTR);\n         sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatusHelper(sourceFS,\n             sourceFS.getFileStatus(sourcePath),\n             fileAttributes.contains(FileAttribute.ACL),\n             preserveXAttrs, preserveRawXattrs,\n             sourceFileStatus.getChunkOffset(),\n             sourceFileStatus.getChunkLength());\n       } catch (FileNotFoundException e) {\n         throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n       }\n \n       FileStatus targetStatus \u003d null;\n \n       try {\n         targetStatus \u003d targetFS.getFileStatus(target);\n       } catch (FileNotFoundException ignore) {\n         if (LOG.isDebugEnabled())\n           LOG.debug(\"Path could not be found: \" + target, ignore);\n       }\n \n       if (targetStatus !\u003d null \u0026\u0026\n           (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n         throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n             getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n       }\n \n       if (sourceCurrStatus.isDirectory()) {\n         createTargetDirsWithRetry(description, target, context);\n         return;\n       }\n \n       FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target,\n           targetStatus);\n \n       Path tmpTarget \u003d target;\n       if (action \u003d\u003d FileAction.SKIP) {\n         LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                  + \" to \" + target);\n         updateSkipCounters(context, sourceCurrStatus);\n         context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n \n+        if (verboseLog) {\n+          context.write(null,\n+              new Text(\"FILE_SKIPPED: source\u003d\" + sourceFileStatus.getPath()\n+              + \", size\u003d\" + sourceFileStatus.getLen() + \" --\u003e \"\n+              + \"target\u003d\" + target + \", size\u003d\" + (targetStatus \u003d\u003d null ?\n+                  0 : targetStatus.getLen())));\n+        }\n       } else {\n         if (sourceCurrStatus.isSplit()) {\n           tmpTarget \u003d DistCpUtils.getSplitChunkPath(target, sourceCurrStatus);\n         }\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"copying \" + sourceCurrStatus + \" \" + tmpTarget);\n         }\n-        copyFileWithRetry(description, sourceCurrStatus, tmpTarget, context,\n-            action, fileAttributes);\n+        copyFileWithRetry(description, sourceCurrStatus, tmpTarget,\n+            targetStatus, context, action, fileAttributes);\n       }\n       DistCpUtils.preserve(target.getFileSystem(conf), tmpTarget,\n           sourceCurrStatus, fileAttributes, preserveRawXattrs);\n     } catch (IOException exception) {\n       handleFailures(exception, sourceFileStatus, target, context);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n          Context context) throws IOException, InterruptedException {\n    Path sourcePath \u003d sourceFileStatus.getPath();\n\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n\n    Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                          targetFS.getWorkingDirectory()) + relPath.toString());\n\n    EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n            \u003d getFileAttributeSettings(context);\n    final boolean preserveRawXattrs \u003d context.getConfiguration().getBoolean(\n        DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);\n\n    final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n    context.setStatus(description);\n\n    LOG.info(description);\n\n    try {\n      CopyListingFileStatus sourceCurrStatus;\n      FileSystem sourceFS;\n      try {\n        sourceFS \u003d sourcePath.getFileSystem(conf);\n        final boolean preserveXAttrs \u003d\n            fileAttributes.contains(FileAttribute.XATTR);\n        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatusHelper(sourceFS,\n            sourceFS.getFileStatus(sourcePath),\n            fileAttributes.contains(FileAttribute.ACL),\n            preserveXAttrs, preserveRawXattrs,\n            sourceFileStatus.getChunkOffset(),\n            sourceFileStatus.getChunkLength());\n      } catch (FileNotFoundException e) {\n        throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n      }\n\n      FileStatus targetStatus \u003d null;\n\n      try {\n        targetStatus \u003d targetFS.getFileStatus(target);\n      } catch (FileNotFoundException ignore) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"Path could not be found: \" + target, ignore);\n      }\n\n      if (targetStatus !\u003d null \u0026\u0026\n          (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n        throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n            getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n      }\n\n      if (sourceCurrStatus.isDirectory()) {\n        createTargetDirsWithRetry(description, target, context);\n        return;\n      }\n\n      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target,\n          targetStatus);\n\n      Path tmpTarget \u003d target;\n      if (action \u003d\u003d FileAction.SKIP) {\n        LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                 + \" to \" + target);\n        updateSkipCounters(context, sourceCurrStatus);\n        context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n\n        if (verboseLog) {\n          context.write(null,\n              new Text(\"FILE_SKIPPED: source\u003d\" + sourceFileStatus.getPath()\n              + \", size\u003d\" + sourceFileStatus.getLen() + \" --\u003e \"\n              + \"target\u003d\" + target + \", size\u003d\" + (targetStatus \u003d\u003d null ?\n                  0 : targetStatus.getLen())));\n        }\n      } else {\n        if (sourceCurrStatus.isSplit()) {\n          tmpTarget \u003d DistCpUtils.getSplitChunkPath(target, sourceCurrStatus);\n        }\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"copying \" + sourceCurrStatus + \" \" + tmpTarget);\n        }\n        copyFileWithRetry(description, sourceCurrStatus, tmpTarget,\n            targetStatus, context, action, fileAttributes);\n      }\n      DistCpUtils.preserve(target.getFileSystem(conf), tmpTarget,\n          sourceCurrStatus, fileAttributes, preserveRawXattrs);\n    } catch (IOException exception) {\n      handleFailures(exception, sourceFileStatus, target, context);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "bf3fb585aaf2b179836e139c041fc87920a3c886": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen, Rosie Li.\n",
      "commitDate": "30/03/17 5:38 PM",
      "commitName": "bf3fb585aaf2b179836e139c041fc87920a3c886",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "30/03/17 5:38 PM",
      "commitNameOld": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,83 @@\n   public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n           Context context) throws IOException, InterruptedException {\n     Path sourcePath \u003d sourceFileStatus.getPath();\n \n     if (LOG.isDebugEnabled())\n       LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n \n     Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                           targetFS.getWorkingDirectory()) + relPath.toString());\n \n     EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n             \u003d getFileAttributeSettings(context);\n     final boolean preserveRawXattrs \u003d context.getConfiguration().getBoolean(\n         DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);\n \n     final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n     context.setStatus(description);\n \n     LOG.info(description);\n \n     try {\n       CopyListingFileStatus sourceCurrStatus;\n       FileSystem sourceFS;\n       try {\n         sourceFS \u003d sourcePath.getFileSystem(conf);\n         final boolean preserveXAttrs \u003d\n             fileAttributes.contains(FileAttribute.XATTR);\n-        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatus(sourceFS,\n-          sourceFS.getFileStatus(sourcePath),\n-          fileAttributes.contains(FileAttribute.ACL), \n-          preserveXAttrs, preserveRawXattrs);\n+        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatusHelper(sourceFS,\n+            sourceFS.getFileStatus(sourcePath),\n+            fileAttributes.contains(FileAttribute.ACL),\n+            preserveXAttrs, preserveRawXattrs,\n+            sourceFileStatus.getChunkOffset(),\n+            sourceFileStatus.getChunkLength());\n       } catch (FileNotFoundException e) {\n         throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n       }\n \n       FileStatus targetStatus \u003d null;\n \n       try {\n         targetStatus \u003d targetFS.getFileStatus(target);\n       } catch (FileNotFoundException ignore) {\n         if (LOG.isDebugEnabled())\n           LOG.debug(\"Path could not be found: \" + target, ignore);\n       }\n \n-      if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n+      if (targetStatus !\u003d null \u0026\u0026\n+          (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n         throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n             getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n       }\n \n       if (sourceCurrStatus.isDirectory()) {\n         createTargetDirsWithRetry(description, target, context);\n         return;\n       }\n \n-      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target, targetStatus);\n+      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target,\n+          targetStatus);\n+\n+      Path tmpTarget \u003d target;\n       if (action \u003d\u003d FileAction.SKIP) {\n         LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                  + \" to \" + target);\n         updateSkipCounters(context, sourceCurrStatus);\n         context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n+\n       } else {\n-        copyFileWithRetry(description, sourceCurrStatus, target, context,\n+        if (sourceCurrStatus.isSplit()) {\n+          tmpTarget \u003d DistCpUtils.getSplitChunkPath(target, sourceCurrStatus);\n+        }\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"copying \" + sourceCurrStatus + \" \" + tmpTarget);\n+        }\n+        copyFileWithRetry(description, sourceCurrStatus, tmpTarget, context,\n             action, fileAttributes);\n       }\n-\n-      DistCpUtils.preserve(target.getFileSystem(conf), target, sourceCurrStatus,\n-          fileAttributes, preserveRawXattrs);\n+      DistCpUtils.preserve(target.getFileSystem(conf), tmpTarget,\n+          sourceCurrStatus, fileAttributes, preserveRawXattrs);\n     } catch (IOException exception) {\n       handleFailures(exception, sourceFileStatus, target, context);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n          Context context) throws IOException, InterruptedException {\n    Path sourcePath \u003d sourceFileStatus.getPath();\n\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n\n    Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                          targetFS.getWorkingDirectory()) + relPath.toString());\n\n    EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n            \u003d getFileAttributeSettings(context);\n    final boolean preserveRawXattrs \u003d context.getConfiguration().getBoolean(\n        DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);\n\n    final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n    context.setStatus(description);\n\n    LOG.info(description);\n\n    try {\n      CopyListingFileStatus sourceCurrStatus;\n      FileSystem sourceFS;\n      try {\n        sourceFS \u003d sourcePath.getFileSystem(conf);\n        final boolean preserveXAttrs \u003d\n            fileAttributes.contains(FileAttribute.XATTR);\n        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatusHelper(sourceFS,\n            sourceFS.getFileStatus(sourcePath),\n            fileAttributes.contains(FileAttribute.ACL),\n            preserveXAttrs, preserveRawXattrs,\n            sourceFileStatus.getChunkOffset(),\n            sourceFileStatus.getChunkLength());\n      } catch (FileNotFoundException e) {\n        throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n      }\n\n      FileStatus targetStatus \u003d null;\n\n      try {\n        targetStatus \u003d targetFS.getFileStatus(target);\n      } catch (FileNotFoundException ignore) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"Path could not be found: \" + target, ignore);\n      }\n\n      if (targetStatus !\u003d null \u0026\u0026\n          (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n        throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n            getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n      }\n\n      if (sourceCurrStatus.isDirectory()) {\n        createTargetDirsWithRetry(description, target, context);\n        return;\n      }\n\n      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target,\n          targetStatus);\n\n      Path tmpTarget \u003d target;\n      if (action \u003d\u003d FileAction.SKIP) {\n        LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                 + \" to \" + target);\n        updateSkipCounters(context, sourceCurrStatus);\n        context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n\n      } else {\n        if (sourceCurrStatus.isSplit()) {\n          tmpTarget \u003d DistCpUtils.getSplitChunkPath(target, sourceCurrStatus);\n        }\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"copying \" + sourceCurrStatus + \" \" + tmpTarget);\n        }\n        copyFileWithRetry(description, sourceCurrStatus, tmpTarget, context,\n            action, fileAttributes);\n      }\n      DistCpUtils.preserve(target.getFileSystem(conf), tmpTarget,\n          sourceCurrStatus, fileAttributes, preserveRawXattrs);\n    } catch (IOException exception) {\n      handleFailures(exception, sourceFileStatus, target, context);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "144f1cf76527e6c75aec77ef683a898580f3cc8d": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\"\n\nThis reverts commit 064c8b25eca9bc825dc07a54d9147d65c9290a03.\n",
      "commitDate": "30/03/17 5:38 PM",
      "commitName": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "30/03/17 5:01 PM",
      "commitNameOld": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,71 @@\n   public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n           Context context) throws IOException, InterruptedException {\n     Path sourcePath \u003d sourceFileStatus.getPath();\n \n     if (LOG.isDebugEnabled())\n       LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n \n     Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                           targetFS.getWorkingDirectory()) + relPath.toString());\n \n     EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n             \u003d getFileAttributeSettings(context);\n     final boolean preserveRawXattrs \u003d context.getConfiguration().getBoolean(\n         DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);\n \n     final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n     context.setStatus(description);\n \n     LOG.info(description);\n \n     try {\n       CopyListingFileStatus sourceCurrStatus;\n       FileSystem sourceFS;\n       try {\n         sourceFS \u003d sourcePath.getFileSystem(conf);\n         final boolean preserveXAttrs \u003d\n             fileAttributes.contains(FileAttribute.XATTR);\n-        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatusHelper(sourceFS,\n-            sourceFS.getFileStatus(sourcePath),\n-            fileAttributes.contains(FileAttribute.ACL),\n-            preserveXAttrs, preserveRawXattrs,\n-            sourceFileStatus.getChunkOffset(),\n-            sourceFileStatus.getChunkLength());\n+        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatus(sourceFS,\n+          sourceFS.getFileStatus(sourcePath),\n+          fileAttributes.contains(FileAttribute.ACL), \n+          preserveXAttrs, preserveRawXattrs);\n       } catch (FileNotFoundException e) {\n         throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n       }\n \n       FileStatus targetStatus \u003d null;\n \n       try {\n         targetStatus \u003d targetFS.getFileStatus(target);\n       } catch (FileNotFoundException ignore) {\n         if (LOG.isDebugEnabled())\n           LOG.debug(\"Path could not be found: \" + target, ignore);\n       }\n \n-      if (targetStatus !\u003d null \u0026\u0026\n-          (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n+      if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n         throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n             getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n       }\n \n       if (sourceCurrStatus.isDirectory()) {\n         createTargetDirsWithRetry(description, target, context);\n         return;\n       }\n \n-      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target,\n-          targetStatus);\n-\n-      Path tmpTarget \u003d target;\n+      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target, targetStatus);\n       if (action \u003d\u003d FileAction.SKIP) {\n         LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                  + \" to \" + target);\n         updateSkipCounters(context, sourceCurrStatus);\n         context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n-\n       } else {\n-        if (sourceCurrStatus.isSplit()) {\n-          tmpTarget \u003d DistCpUtils.getSplitChunkPath(target, sourceCurrStatus);\n-        }\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"copying \" + sourceCurrStatus + \" \" + tmpTarget);\n-        }\n-        copyFileWithRetry(description, sourceCurrStatus, tmpTarget, context,\n+        copyFileWithRetry(description, sourceCurrStatus, target, context,\n             action, fileAttributes);\n       }\n-      DistCpUtils.preserve(target.getFileSystem(conf), tmpTarget,\n-          sourceCurrStatus, fileAttributes, preserveRawXattrs);\n+\n+      DistCpUtils.preserve(target.getFileSystem(conf), target, sourceCurrStatus,\n+          fileAttributes, preserveRawXattrs);\n     } catch (IOException exception) {\n       handleFailures(exception, sourceFileStatus, target, context);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n          Context context) throws IOException, InterruptedException {\n    Path sourcePath \u003d sourceFileStatus.getPath();\n\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n\n    Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                          targetFS.getWorkingDirectory()) + relPath.toString());\n\n    EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n            \u003d getFileAttributeSettings(context);\n    final boolean preserveRawXattrs \u003d context.getConfiguration().getBoolean(\n        DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);\n\n    final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n    context.setStatus(description);\n\n    LOG.info(description);\n\n    try {\n      CopyListingFileStatus sourceCurrStatus;\n      FileSystem sourceFS;\n      try {\n        sourceFS \u003d sourcePath.getFileSystem(conf);\n        final boolean preserveXAttrs \u003d\n            fileAttributes.contains(FileAttribute.XATTR);\n        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatus(sourceFS,\n          sourceFS.getFileStatus(sourcePath),\n          fileAttributes.contains(FileAttribute.ACL), \n          preserveXAttrs, preserveRawXattrs);\n      } catch (FileNotFoundException e) {\n        throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n      }\n\n      FileStatus targetStatus \u003d null;\n\n      try {\n        targetStatus \u003d targetFS.getFileStatus(target);\n      } catch (FileNotFoundException ignore) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"Path could not be found: \" + target, ignore);\n      }\n\n      if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n        throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n            getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n      }\n\n      if (sourceCurrStatus.isDirectory()) {\n        createTargetDirsWithRetry(description, target, context);\n        return;\n      }\n\n      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target, targetStatus);\n      if (action \u003d\u003d FileAction.SKIP) {\n        LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                 + \" to \" + target);\n        updateSkipCounters(context, sourceCurrStatus);\n        context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n      } else {\n        copyFileWithRetry(description, sourceCurrStatus, target, context,\n            action, fileAttributes);\n      }\n\n      DistCpUtils.preserve(target.getFileSystem(conf), target, sourceCurrStatus,\n          fileAttributes, preserveRawXattrs);\n    } catch (IOException exception) {\n      handleFailures(exception, sourceFileStatus, target, context);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "064c8b25eca9bc825dc07a54d9147d65c9290a03": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\n",
      "commitDate": "30/03/17 5:01 PM",
      "commitName": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "15/11/16 10:57 AM",
      "commitNameOld": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 135.21,
      "commitsBetweenForRepo": 732,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,83 @@\n   public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n           Context context) throws IOException, InterruptedException {\n     Path sourcePath \u003d sourceFileStatus.getPath();\n \n     if (LOG.isDebugEnabled())\n       LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n \n     Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                           targetFS.getWorkingDirectory()) + relPath.toString());\n \n     EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n             \u003d getFileAttributeSettings(context);\n     final boolean preserveRawXattrs \u003d context.getConfiguration().getBoolean(\n         DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);\n \n     final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n     context.setStatus(description);\n \n     LOG.info(description);\n \n     try {\n       CopyListingFileStatus sourceCurrStatus;\n       FileSystem sourceFS;\n       try {\n         sourceFS \u003d sourcePath.getFileSystem(conf);\n         final boolean preserveXAttrs \u003d\n             fileAttributes.contains(FileAttribute.XATTR);\n-        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatus(sourceFS,\n-          sourceFS.getFileStatus(sourcePath),\n-          fileAttributes.contains(FileAttribute.ACL), \n-          preserveXAttrs, preserveRawXattrs);\n+        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatusHelper(sourceFS,\n+            sourceFS.getFileStatus(sourcePath),\n+            fileAttributes.contains(FileAttribute.ACL),\n+            preserveXAttrs, preserveRawXattrs,\n+            sourceFileStatus.getChunkOffset(),\n+            sourceFileStatus.getChunkLength());\n       } catch (FileNotFoundException e) {\n         throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n       }\n \n       FileStatus targetStatus \u003d null;\n \n       try {\n         targetStatus \u003d targetFS.getFileStatus(target);\n       } catch (FileNotFoundException ignore) {\n         if (LOG.isDebugEnabled())\n           LOG.debug(\"Path could not be found: \" + target, ignore);\n       }\n \n-      if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n+      if (targetStatus !\u003d null \u0026\u0026\n+          (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n         throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n             getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n       }\n \n       if (sourceCurrStatus.isDirectory()) {\n         createTargetDirsWithRetry(description, target, context);\n         return;\n       }\n \n-      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target, targetStatus);\n+      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target,\n+          targetStatus);\n+\n+      Path tmpTarget \u003d target;\n       if (action \u003d\u003d FileAction.SKIP) {\n         LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                  + \" to \" + target);\n         updateSkipCounters(context, sourceCurrStatus);\n         context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n+\n       } else {\n-        copyFileWithRetry(description, sourceCurrStatus, target, context,\n+        if (sourceCurrStatus.isSplit()) {\n+          tmpTarget \u003d DistCpUtils.getSplitChunkPath(target, sourceCurrStatus);\n+        }\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"copying \" + sourceCurrStatus + \" \" + tmpTarget);\n+        }\n+        copyFileWithRetry(description, sourceCurrStatus, tmpTarget, context,\n             action, fileAttributes);\n       }\n-\n-      DistCpUtils.preserve(target.getFileSystem(conf), target, sourceCurrStatus,\n-          fileAttributes, preserveRawXattrs);\n+      DistCpUtils.preserve(target.getFileSystem(conf), tmpTarget,\n+          sourceCurrStatus, fileAttributes, preserveRawXattrs);\n     } catch (IOException exception) {\n       handleFailures(exception, sourceFileStatus, target, context);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n          Context context) throws IOException, InterruptedException {\n    Path sourcePath \u003d sourceFileStatus.getPath();\n\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n\n    Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                          targetFS.getWorkingDirectory()) + relPath.toString());\n\n    EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n            \u003d getFileAttributeSettings(context);\n    final boolean preserveRawXattrs \u003d context.getConfiguration().getBoolean(\n        DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);\n\n    final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n    context.setStatus(description);\n\n    LOG.info(description);\n\n    try {\n      CopyListingFileStatus sourceCurrStatus;\n      FileSystem sourceFS;\n      try {\n        sourceFS \u003d sourcePath.getFileSystem(conf);\n        final boolean preserveXAttrs \u003d\n            fileAttributes.contains(FileAttribute.XATTR);\n        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatusHelper(sourceFS,\n            sourceFS.getFileStatus(sourcePath),\n            fileAttributes.contains(FileAttribute.ACL),\n            preserveXAttrs, preserveRawXattrs,\n            sourceFileStatus.getChunkOffset(),\n            sourceFileStatus.getChunkLength());\n      } catch (FileNotFoundException e) {\n        throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n      }\n\n      FileStatus targetStatus \u003d null;\n\n      try {\n        targetStatus \u003d targetFS.getFileStatus(target);\n      } catch (FileNotFoundException ignore) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"Path could not be found: \" + target, ignore);\n      }\n\n      if (targetStatus !\u003d null \u0026\u0026\n          (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n        throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n            getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n      }\n\n      if (sourceCurrStatus.isDirectory()) {\n        createTargetDirsWithRetry(description, target, context);\n        return;\n      }\n\n      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target,\n          targetStatus);\n\n      Path tmpTarget \u003d target;\n      if (action \u003d\u003d FileAction.SKIP) {\n        LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                 + \" to \" + target);\n        updateSkipCounters(context, sourceCurrStatus);\n        context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n\n      } else {\n        if (sourceCurrStatus.isSplit()) {\n          tmpTarget \u003d DistCpUtils.getSplitChunkPath(target, sourceCurrStatus);\n        }\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"copying \" + sourceCurrStatus + \" \" + tmpTarget);\n        }\n        copyFileWithRetry(description, sourceCurrStatus, tmpTarget, context,\n            action, fileAttributes);\n      }\n      DistCpUtils.preserve(target.getFileSystem(conf), tmpTarget,\n          sourceCurrStatus, fileAttributes, preserveRawXattrs);\n    } catch (IOException exception) {\n      handleFailures(exception, sourceFileStatus, target, context);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "c69a649257a331da55c1a1bf61c819e289015a6b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13163 Reuse pre-computed filestatus in Distcp-CopyMapper (Rajesh Balamohan via stevel)\n",
      "commitDate": "17/05/16 5:00 AM",
      "commitName": "c69a649257a331da55c1a1bf61c819e289015a6b",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "04/05/16 10:23 AM",
      "commitNameOld": "af942585a108d70e0946f6dd4c465a54d068eabf",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 12.78,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n   public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n           Context context) throws IOException, InterruptedException {\n     Path sourcePath \u003d sourceFileStatus.getPath();\n \n     if (LOG.isDebugEnabled())\n       LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n \n     Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                           targetFS.getWorkingDirectory()) + relPath.toString());\n \n     EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n             \u003d getFileAttributeSettings(context);\n     final boolean preserveRawXattrs \u003d context.getConfiguration().getBoolean(\n         DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);\n \n     final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n     context.setStatus(description);\n \n     LOG.info(description);\n \n     try {\n       CopyListingFileStatus sourceCurrStatus;\n       FileSystem sourceFS;\n       try {\n         sourceFS \u003d sourcePath.getFileSystem(conf);\n         final boolean preserveXAttrs \u003d\n             fileAttributes.contains(FileAttribute.XATTR);\n         sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatus(sourceFS,\n           sourceFS.getFileStatus(sourcePath),\n           fileAttributes.contains(FileAttribute.ACL), \n           preserveXAttrs, preserveRawXattrs);\n       } catch (FileNotFoundException e) {\n         throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n       }\n \n       FileStatus targetStatus \u003d null;\n \n       try {\n         targetStatus \u003d targetFS.getFileStatus(target);\n       } catch (FileNotFoundException ignore) {\n         if (LOG.isDebugEnabled())\n           LOG.debug(\"Path could not be found: \" + target, ignore);\n       }\n \n       if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n         throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n             getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n       }\n \n       if (sourceCurrStatus.isDirectory()) {\n         createTargetDirsWithRetry(description, target, context);\n         return;\n       }\n \n-      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target);\n+      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target, targetStatus);\n       if (action \u003d\u003d FileAction.SKIP) {\n         LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                  + \" to \" + target);\n         updateSkipCounters(context, sourceCurrStatus);\n         context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n       } else {\n         copyFileWithRetry(description, sourceCurrStatus, target, context,\n             action, fileAttributes);\n       }\n \n       DistCpUtils.preserve(target.getFileSystem(conf), target, sourceCurrStatus,\n           fileAttributes, preserveRawXattrs);\n     } catch (IOException exception) {\n       handleFailures(exception, sourceFileStatus, target, context);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n          Context context) throws IOException, InterruptedException {\n    Path sourcePath \u003d sourceFileStatus.getPath();\n\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n\n    Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                          targetFS.getWorkingDirectory()) + relPath.toString());\n\n    EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n            \u003d getFileAttributeSettings(context);\n    final boolean preserveRawXattrs \u003d context.getConfiguration().getBoolean(\n        DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);\n\n    final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n    context.setStatus(description);\n\n    LOG.info(description);\n\n    try {\n      CopyListingFileStatus sourceCurrStatus;\n      FileSystem sourceFS;\n      try {\n        sourceFS \u003d sourcePath.getFileSystem(conf);\n        final boolean preserveXAttrs \u003d\n            fileAttributes.contains(FileAttribute.XATTR);\n        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatus(sourceFS,\n          sourceFS.getFileStatus(sourcePath),\n          fileAttributes.contains(FileAttribute.ACL), \n          preserveXAttrs, preserveRawXattrs);\n      } catch (FileNotFoundException e) {\n        throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n      }\n\n      FileStatus targetStatus \u003d null;\n\n      try {\n        targetStatus \u003d targetFS.getFileStatus(target);\n      } catch (FileNotFoundException ignore) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"Path could not be found: \" + target, ignore);\n      }\n\n      if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n        throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n            getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n      }\n\n      if (sourceCurrStatus.isDirectory()) {\n        createTargetDirsWithRetry(description, target, context);\n        return;\n      }\n\n      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target, targetStatus);\n      if (action \u003d\u003d FileAction.SKIP) {\n        LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                 + \" to \" + target);\n        updateSkipCounters(context, sourceCurrStatus);\n        context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n      } else {\n        copyFileWithRetry(description, sourceCurrStatus, target, context,\n            action, fileAttributes);\n      }\n\n      DistCpUtils.preserve(target.getFileSystem(conf), target, sourceCurrStatus,\n          fileAttributes, preserveRawXattrs);\n    } catch (IOException exception) {\n      handleFailures(exception, sourceFileStatus, target, context);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "041b8326a1511b721958792a6b94ecfe27d7a1fb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6007. Add support to distcp to preserve raw.* namespace extended attributes. (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1616657 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/14 6:32 PM",
      "commitName": "041b8326a1511b721958792a6b94ecfe27d7a1fb",
      "commitAuthor": "Charles Lamb",
      "commitDateOld": "06/06/14 7:45 AM",
      "commitNameOld": "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 62.45,
      "commitsBetweenForRepo": 482,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,71 @@\n   public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n           Context context) throws IOException, InterruptedException {\n     Path sourcePath \u003d sourceFileStatus.getPath();\n \n     if (LOG.isDebugEnabled())\n       LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n \n     Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                           targetFS.getWorkingDirectory()) + relPath.toString());\n \n     EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n             \u003d getFileAttributeSettings(context);\n+    final boolean preserveRawXattrs \u003d context.getConfiguration().getBoolean(\n+        DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);\n \n     final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n     context.setStatus(description);\n \n     LOG.info(description);\n \n     try {\n       CopyListingFileStatus sourceCurrStatus;\n       FileSystem sourceFS;\n       try {\n         sourceFS \u003d sourcePath.getFileSystem(conf);\n+        final boolean preserveXAttrs \u003d\n+            fileAttributes.contains(FileAttribute.XATTR);\n         sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatus(sourceFS,\n           sourceFS.getFileStatus(sourcePath),\n           fileAttributes.contains(FileAttribute.ACL), \n-          fileAttributes.contains(FileAttribute.XATTR));\n+          preserveXAttrs, preserveRawXattrs);\n       } catch (FileNotFoundException e) {\n         throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n       }\n \n       FileStatus targetStatus \u003d null;\n \n       try {\n         targetStatus \u003d targetFS.getFileStatus(target);\n       } catch (FileNotFoundException ignore) {\n         if (LOG.isDebugEnabled())\n           LOG.debug(\"Path could not be found: \" + target, ignore);\n       }\n \n       if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n         throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n             getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n       }\n \n       if (sourceCurrStatus.isDirectory()) {\n         createTargetDirsWithRetry(description, target, context);\n         return;\n       }\n \n       FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target);\n       if (action \u003d\u003d FileAction.SKIP) {\n         LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                  + \" to \" + target);\n         updateSkipCounters(context, sourceCurrStatus);\n         context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n       } else {\n         copyFileWithRetry(description, sourceCurrStatus, target, context,\n             action, fileAttributes);\n       }\n \n-      DistCpUtils.preserve(target.getFileSystem(conf), target,\n-                           sourceCurrStatus, fileAttributes);\n+      DistCpUtils.preserve(target.getFileSystem(conf), target, sourceCurrStatus,\n+          fileAttributes, preserveRawXattrs);\n     } catch (IOException exception) {\n       handleFailures(exception, sourceFileStatus, target, context);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n          Context context) throws IOException, InterruptedException {\n    Path sourcePath \u003d sourceFileStatus.getPath();\n\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n\n    Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                          targetFS.getWorkingDirectory()) + relPath.toString());\n\n    EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n            \u003d getFileAttributeSettings(context);\n    final boolean preserveRawXattrs \u003d context.getConfiguration().getBoolean(\n        DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);\n\n    final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n    context.setStatus(description);\n\n    LOG.info(description);\n\n    try {\n      CopyListingFileStatus sourceCurrStatus;\n      FileSystem sourceFS;\n      try {\n        sourceFS \u003d sourcePath.getFileSystem(conf);\n        final boolean preserveXAttrs \u003d\n            fileAttributes.contains(FileAttribute.XATTR);\n        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatus(sourceFS,\n          sourceFS.getFileStatus(sourcePath),\n          fileAttributes.contains(FileAttribute.ACL), \n          preserveXAttrs, preserveRawXattrs);\n      } catch (FileNotFoundException e) {\n        throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n      }\n\n      FileStatus targetStatus \u003d null;\n\n      try {\n        targetStatus \u003d targetFS.getFileStatus(target);\n      } catch (FileNotFoundException ignore) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"Path could not be found: \" + target, ignore);\n      }\n\n      if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n        throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n            getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n      }\n\n      if (sourceCurrStatus.isDirectory()) {\n        createTargetDirsWithRetry(description, target, context);\n        return;\n      }\n\n      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target);\n      if (action \u003d\u003d FileAction.SKIP) {\n        LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                 + \" to \" + target);\n        updateSkipCounters(context, sourceCurrStatus);\n        context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n      } else {\n        copyFileWithRetry(description, sourceCurrStatus, target, context,\n            action, fileAttributes);\n      }\n\n      DistCpUtils.preserve(target.getFileSystem(conf), target, sourceCurrStatus,\n          fileAttributes, preserveRawXattrs);\n    } catch (IOException exception) {\n      handleFailures(exception, sourceFileStatus, target, context);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5898. distcp to support preserving HDFS extended attributes(XAttrs). Contributed by Yi Liu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1600900 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/14 7:45 AM",
      "commitName": "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "22/05/14 11:17 AM",
      "commitNameOld": "3671a5e16fbddbe5a0516289ce98e1305e02291c",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 14.85,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,67 @@\n   public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n           Context context) throws IOException, InterruptedException {\n     Path sourcePath \u003d sourceFileStatus.getPath();\n \n     if (LOG.isDebugEnabled())\n       LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n \n     Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                           targetFS.getWorkingDirectory()) + relPath.toString());\n \n     EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n             \u003d getFileAttributeSettings(context);\n \n     final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n     context.setStatus(description);\n \n     LOG.info(description);\n \n     try {\n       CopyListingFileStatus sourceCurrStatus;\n       FileSystem sourceFS;\n       try {\n         sourceFS \u003d sourcePath.getFileSystem(conf);\n         sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatus(sourceFS,\n           sourceFS.getFileStatus(sourcePath),\n-          fileAttributes.contains(FileAttribute.ACL));\n+          fileAttributes.contains(FileAttribute.ACL), \n+          fileAttributes.contains(FileAttribute.XATTR));\n       } catch (FileNotFoundException e) {\n         throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n       }\n \n       FileStatus targetStatus \u003d null;\n \n       try {\n         targetStatus \u003d targetFS.getFileStatus(target);\n       } catch (FileNotFoundException ignore) {\n         if (LOG.isDebugEnabled())\n           LOG.debug(\"Path could not be found: \" + target, ignore);\n       }\n \n       if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n         throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n             getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n       }\n \n       if (sourceCurrStatus.isDirectory()) {\n         createTargetDirsWithRetry(description, target, context);\n         return;\n       }\n \n       FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target);\n       if (action \u003d\u003d FileAction.SKIP) {\n         LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                  + \" to \" + target);\n         updateSkipCounters(context, sourceCurrStatus);\n         context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n       } else {\n         copyFileWithRetry(description, sourceCurrStatus, target, context,\n             action, fileAttributes);\n       }\n \n       DistCpUtils.preserve(target.getFileSystem(conf), target,\n                            sourceCurrStatus, fileAttributes);\n     } catch (IOException exception) {\n       handleFailures(exception, sourceFileStatus, target, context);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n          Context context) throws IOException, InterruptedException {\n    Path sourcePath \u003d sourceFileStatus.getPath();\n\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n\n    Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                          targetFS.getWorkingDirectory()) + relPath.toString());\n\n    EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n            \u003d getFileAttributeSettings(context);\n\n    final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n    context.setStatus(description);\n\n    LOG.info(description);\n\n    try {\n      CopyListingFileStatus sourceCurrStatus;\n      FileSystem sourceFS;\n      try {\n        sourceFS \u003d sourcePath.getFileSystem(conf);\n        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatus(sourceFS,\n          sourceFS.getFileStatus(sourcePath),\n          fileAttributes.contains(FileAttribute.ACL), \n          fileAttributes.contains(FileAttribute.XATTR));\n      } catch (FileNotFoundException e) {\n        throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n      }\n\n      FileStatus targetStatus \u003d null;\n\n      try {\n        targetStatus \u003d targetFS.getFileStatus(target);\n      } catch (FileNotFoundException ignore) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"Path could not be found: \" + target, ignore);\n      }\n\n      if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n        throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n            getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n      }\n\n      if (sourceCurrStatus.isDirectory()) {\n        createTargetDirsWithRetry(description, target, context);\n        return;\n      }\n\n      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target);\n      if (action \u003d\u003d FileAction.SKIP) {\n        LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                 + \" to \" + target);\n        updateSkipCounters(context, sourceCurrStatus);\n        context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n      } else {\n        copyFileWithRetry(description, sourceCurrStatus, target, context,\n            action, fileAttributes);\n      }\n\n      DistCpUtils.preserve(target.getFileSystem(conf), target,\n                           sourceCurrStatus, fileAttributes);\n    } catch (IOException exception) {\n      handleFailures(exception, sourceFileStatus, target, context);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "3671a5e16fbddbe5a0516289ce98e1305e02291c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5899. Support incremental data copy in DistCp. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596931 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/05/14 11:17 AM",
      "commitName": "3671a5e16fbddbe5a0516289ce98e1305e02291c",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "16/05/14 11:25 AM",
      "commitNameOld": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 5.99,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,66 @@\n   public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n           Context context) throws IOException, InterruptedException {\n     Path sourcePath \u003d sourceFileStatus.getPath();\n \n     if (LOG.isDebugEnabled())\n       LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n \n     Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                           targetFS.getWorkingDirectory()) + relPath.toString());\n \n     EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n             \u003d getFileAttributeSettings(context);\n \n     final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n     context.setStatus(description);\n \n     LOG.info(description);\n \n     try {\n       CopyListingFileStatus sourceCurrStatus;\n       FileSystem sourceFS;\n       try {\n         sourceFS \u003d sourcePath.getFileSystem(conf);\n         sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatus(sourceFS,\n           sourceFS.getFileStatus(sourcePath),\n           fileAttributes.contains(FileAttribute.ACL));\n       } catch (FileNotFoundException e) {\n         throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n       }\n \n       FileStatus targetStatus \u003d null;\n \n       try {\n         targetStatus \u003d targetFS.getFileStatus(target);\n       } catch (FileNotFoundException ignore) {\n         if (LOG.isDebugEnabled())\n           LOG.debug(\"Path could not be found: \" + target, ignore);\n       }\n \n       if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n         throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n             getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n       }\n \n       if (sourceCurrStatus.isDirectory()) {\n         createTargetDirsWithRetry(description, target, context);\n         return;\n       }\n \n-      if (skipFile(sourceFS, sourceCurrStatus, target)) {\n+      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target);\n+      if (action \u003d\u003d FileAction.SKIP) {\n         LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                  + \" to \" + target);\n         updateSkipCounters(context, sourceCurrStatus);\n         context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n-      }\n-      else {\n+      } else {\n         copyFileWithRetry(description, sourceCurrStatus, target, context,\n-                          fileAttributes);\n+            action, fileAttributes);\n       }\n \n       DistCpUtils.preserve(target.getFileSystem(conf), target,\n                            sourceCurrStatus, fileAttributes);\n-\n     } catch (IOException exception) {\n       handleFailures(exception, sourceFileStatus, target, context);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n          Context context) throws IOException, InterruptedException {\n    Path sourcePath \u003d sourceFileStatus.getPath();\n\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n\n    Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                          targetFS.getWorkingDirectory()) + relPath.toString());\n\n    EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n            \u003d getFileAttributeSettings(context);\n\n    final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n    context.setStatus(description);\n\n    LOG.info(description);\n\n    try {\n      CopyListingFileStatus sourceCurrStatus;\n      FileSystem sourceFS;\n      try {\n        sourceFS \u003d sourcePath.getFileSystem(conf);\n        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatus(sourceFS,\n          sourceFS.getFileStatus(sourcePath),\n          fileAttributes.contains(FileAttribute.ACL));\n      } catch (FileNotFoundException e) {\n        throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n      }\n\n      FileStatus targetStatus \u003d null;\n\n      try {\n        targetStatus \u003d targetFS.getFileStatus(target);\n      } catch (FileNotFoundException ignore) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"Path could not be found: \" + target, ignore);\n      }\n\n      if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n        throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n            getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n      }\n\n      if (sourceCurrStatus.isDirectory()) {\n        createTargetDirsWithRetry(description, target, context);\n        return;\n      }\n\n      FileAction action \u003d checkUpdate(sourceFS, sourceCurrStatus, target);\n      if (action \u003d\u003d FileAction.SKIP) {\n        LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                 + \" to \" + target);\n        updateSkipCounters(context, sourceCurrStatus);\n        context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n      } else {\n        copyFileWithRetry(description, sourceCurrStatus, target, context,\n            action, fileAttributes);\n      }\n\n      DistCpUtils.preserve(target.getFileSystem(conf), target,\n                           sourceCurrStatus, fileAttributes);\n    } catch (IOException exception) {\n      handleFailures(exception, sourceFileStatus, target, context);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {}
    },
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-5809. Enhance distcp to support preserving HDFS ACLs. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/14 11:25 AM",
      "commitName": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-5809. Enhance distcp to support preserving HDFS ACLs. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595283 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/05/14 11:25 AM",
          "commitName": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "30/01/14 3:53 PM",
          "commitNameOld": "067d52b98c1d17a73b142bb53acc8aaa9c041f38",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 105.77,
          "commitsBetweenForRepo": 805,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,65 +1,67 @@\n-  public void map(Text relPath, FileStatus sourceFileStatus, Context context)\n-          throws IOException, InterruptedException {\n+  public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n+          Context context) throws IOException, InterruptedException {\n     Path sourcePath \u003d sourceFileStatus.getPath();\n \n     if (LOG.isDebugEnabled())\n       LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n \n     Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                           targetFS.getWorkingDirectory()) + relPath.toString());\n \n     EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n             \u003d getFileAttributeSettings(context);\n \n     final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n     context.setStatus(description);\n \n     LOG.info(description);\n \n     try {\n-      FileStatus sourceCurrStatus;\n+      CopyListingFileStatus sourceCurrStatus;\n       FileSystem sourceFS;\n       try {\n         sourceFS \u003d sourcePath.getFileSystem(conf);\n-        sourceCurrStatus \u003d sourceFS.getFileStatus(sourcePath);\n+        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatus(sourceFS,\n+          sourceFS.getFileStatus(sourcePath),\n+          fileAttributes.contains(FileAttribute.ACL));\n       } catch (FileNotFoundException e) {\n         throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n       }\n \n       FileStatus targetStatus \u003d null;\n \n       try {\n         targetStatus \u003d targetFS.getFileStatus(target);\n       } catch (FileNotFoundException ignore) {\n         if (LOG.isDebugEnabled())\n           LOG.debug(\"Path could not be found: \" + target, ignore);\n       }\n \n       if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n         throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n             getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n       }\n \n       if (sourceCurrStatus.isDirectory()) {\n         createTargetDirsWithRetry(description, target, context);\n         return;\n       }\n \n       if (skipFile(sourceFS, sourceCurrStatus, target)) {\n         LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                  + \" to \" + target);\n         updateSkipCounters(context, sourceCurrStatus);\n         context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n       }\n       else {\n         copyFileWithRetry(description, sourceCurrStatus, target, context,\n                           fileAttributes);\n       }\n \n       DistCpUtils.preserve(target.getFileSystem(conf), target,\n                            sourceCurrStatus, fileAttributes);\n \n     } catch (IOException exception) {\n       handleFailures(exception, sourceFileStatus, target, context);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n          Context context) throws IOException, InterruptedException {\n    Path sourcePath \u003d sourceFileStatus.getPath();\n\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n\n    Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                          targetFS.getWorkingDirectory()) + relPath.toString());\n\n    EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n            \u003d getFileAttributeSettings(context);\n\n    final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n    context.setStatus(description);\n\n    LOG.info(description);\n\n    try {\n      CopyListingFileStatus sourceCurrStatus;\n      FileSystem sourceFS;\n      try {\n        sourceFS \u003d sourcePath.getFileSystem(conf);\n        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatus(sourceFS,\n          sourceFS.getFileStatus(sourcePath),\n          fileAttributes.contains(FileAttribute.ACL));\n      } catch (FileNotFoundException e) {\n        throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n      }\n\n      FileStatus targetStatus \u003d null;\n\n      try {\n        targetStatus \u003d targetFS.getFileStatus(target);\n      } catch (FileNotFoundException ignore) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"Path could not be found: \" + target, ignore);\n      }\n\n      if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n        throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n            getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n      }\n\n      if (sourceCurrStatus.isDirectory()) {\n        createTargetDirsWithRetry(description, target, context);\n        return;\n      }\n\n      if (skipFile(sourceFS, sourceCurrStatus, target)) {\n        LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                 + \" to \" + target);\n        updateSkipCounters(context, sourceCurrStatus);\n        context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n      }\n      else {\n        copyFileWithRetry(description, sourceCurrStatus, target, context,\n                          fileAttributes);\n      }\n\n      DistCpUtils.preserve(target.getFileSystem(conf), target,\n                           sourceCurrStatus, fileAttributes);\n\n    } catch (IOException exception) {\n      handleFailures(exception, sourceFileStatus, target, context);\n    }\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
          "extendedDetails": {
            "oldValue": "[relPath-Text, sourceFileStatus-FileStatus, context-Context]",
            "newValue": "[relPath-Text, sourceFileStatus-CopyListingFileStatus, context-Context]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-5809. Enhance distcp to support preserving HDFS ACLs. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595283 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/05/14 11:25 AM",
          "commitName": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "30/01/14 3:53 PM",
          "commitNameOld": "067d52b98c1d17a73b142bb53acc8aaa9c041f38",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 105.77,
          "commitsBetweenForRepo": 805,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,65 +1,67 @@\n-  public void map(Text relPath, FileStatus sourceFileStatus, Context context)\n-          throws IOException, InterruptedException {\n+  public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n+          Context context) throws IOException, InterruptedException {\n     Path sourcePath \u003d sourceFileStatus.getPath();\n \n     if (LOG.isDebugEnabled())\n       LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n \n     Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                           targetFS.getWorkingDirectory()) + relPath.toString());\n \n     EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n             \u003d getFileAttributeSettings(context);\n \n     final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n     context.setStatus(description);\n \n     LOG.info(description);\n \n     try {\n-      FileStatus sourceCurrStatus;\n+      CopyListingFileStatus sourceCurrStatus;\n       FileSystem sourceFS;\n       try {\n         sourceFS \u003d sourcePath.getFileSystem(conf);\n-        sourceCurrStatus \u003d sourceFS.getFileStatus(sourcePath);\n+        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatus(sourceFS,\n+          sourceFS.getFileStatus(sourcePath),\n+          fileAttributes.contains(FileAttribute.ACL));\n       } catch (FileNotFoundException e) {\n         throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n       }\n \n       FileStatus targetStatus \u003d null;\n \n       try {\n         targetStatus \u003d targetFS.getFileStatus(target);\n       } catch (FileNotFoundException ignore) {\n         if (LOG.isDebugEnabled())\n           LOG.debug(\"Path could not be found: \" + target, ignore);\n       }\n \n       if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n         throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n             getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n       }\n \n       if (sourceCurrStatus.isDirectory()) {\n         createTargetDirsWithRetry(description, target, context);\n         return;\n       }\n \n       if (skipFile(sourceFS, sourceCurrStatus, target)) {\n         LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                  + \" to \" + target);\n         updateSkipCounters(context, sourceCurrStatus);\n         context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n       }\n       else {\n         copyFileWithRetry(description, sourceCurrStatus, target, context,\n                           fileAttributes);\n       }\n \n       DistCpUtils.preserve(target.getFileSystem(conf), target,\n                            sourceCurrStatus, fileAttributes);\n \n     } catch (IOException exception) {\n       handleFailures(exception, sourceFileStatus, target, context);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void map(Text relPath, CopyListingFileStatus sourceFileStatus,\n          Context context) throws IOException, InterruptedException {\n    Path sourcePath \u003d sourceFileStatus.getPath();\n\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n\n    Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                          targetFS.getWorkingDirectory()) + relPath.toString());\n\n    EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n            \u003d getFileAttributeSettings(context);\n\n    final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n    context.setStatus(description);\n\n    LOG.info(description);\n\n    try {\n      CopyListingFileStatus sourceCurrStatus;\n      FileSystem sourceFS;\n      try {\n        sourceFS \u003d sourcePath.getFileSystem(conf);\n        sourceCurrStatus \u003d DistCpUtils.toCopyListingFileStatus(sourceFS,\n          sourceFS.getFileStatus(sourcePath),\n          fileAttributes.contains(FileAttribute.ACL));\n      } catch (FileNotFoundException e) {\n        throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n      }\n\n      FileStatus targetStatus \u003d null;\n\n      try {\n        targetStatus \u003d targetFS.getFileStatus(target);\n      } catch (FileNotFoundException ignore) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"Path could not be found: \" + target, ignore);\n      }\n\n      if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n        throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n            getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n      }\n\n      if (sourceCurrStatus.isDirectory()) {\n        createTargetDirsWithRetry(description, target, context);\n        return;\n      }\n\n      if (skipFile(sourceFS, sourceCurrStatus, target)) {\n        LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                 + \" to \" + target);\n        updateSkipCounters(context, sourceCurrStatus);\n        context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n      }\n      else {\n        copyFileWithRetry(description, sourceCurrStatus, target, context,\n                          fileAttributes);\n      }\n\n      DistCpUtils.preserve(target.getFileSystem(conf), target,\n                           sourceCurrStatus, fileAttributes);\n\n    } catch (IOException exception) {\n      handleFailures(exception, sourceFileStatus, target, context);\n    }\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
          "extendedDetails": {}
        }
      ]
    },
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2765. DistCp Rewrite. (Mithun Radhakrishnan via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236045 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 10:36 PM",
      "commitName": "d06948002fb0cabf72cc0d46bf2fa67d45370f67",
      "commitAuthor": "Mahadev Konar",
      "diff": "@@ -0,0 +1,65 @@\n+  public void map(Text relPath, FileStatus sourceFileStatus, Context context)\n+          throws IOException, InterruptedException {\n+    Path sourcePath \u003d sourceFileStatus.getPath();\n+\n+    if (LOG.isDebugEnabled())\n+      LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n+\n+    Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n+                          targetFS.getWorkingDirectory()) + relPath.toString());\n+\n+    EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n+            \u003d getFileAttributeSettings(context);\n+\n+    final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n+    context.setStatus(description);\n+\n+    LOG.info(description);\n+\n+    try {\n+      FileStatus sourceCurrStatus;\n+      FileSystem sourceFS;\n+      try {\n+        sourceFS \u003d sourcePath.getFileSystem(conf);\n+        sourceCurrStatus \u003d sourceFS.getFileStatus(sourcePath);\n+      } catch (FileNotFoundException e) {\n+        throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n+      }\n+\n+      FileStatus targetStatus \u003d null;\n+\n+      try {\n+        targetStatus \u003d targetFS.getFileStatus(target);\n+      } catch (FileNotFoundException ignore) {\n+        if (LOG.isDebugEnabled())\n+          LOG.debug(\"Path could not be found: \" + target, ignore);\n+      }\n+\n+      if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n+        throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n+            getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n+      }\n+\n+      if (sourceCurrStatus.isDirectory()) {\n+        createTargetDirsWithRetry(description, target, context);\n+        return;\n+      }\n+\n+      if (skipFile(sourceFS, sourceCurrStatus, target)) {\n+        LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n+                 + \" to \" + target);\n+        updateSkipCounters(context, sourceCurrStatus);\n+        context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n+      }\n+      else {\n+        copyFileWithRetry(description, sourceCurrStatus, target, context,\n+                          fileAttributes);\n+      }\n+\n+      DistCpUtils.preserve(target.getFileSystem(conf), target,\n+                           sourceCurrStatus, fileAttributes);\n+\n+    } catch (IOException exception) {\n+      handleFailures(exception, sourceFileStatus, target, context);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void map(Text relPath, FileStatus sourceFileStatus, Context context)\n          throws IOException, InterruptedException {\n    Path sourcePath \u003d sourceFileStatus.getPath();\n\n    if (LOG.isDebugEnabled())\n      LOG.debug(\"DistCpMapper::map(): Received \" + sourcePath + \", \" + relPath);\n\n    Path target \u003d new Path(targetWorkPath.makeQualified(targetFS.getUri(),\n                          targetFS.getWorkingDirectory()) + relPath.toString());\n\n    EnumSet\u003cDistCpOptions.FileAttribute\u003e fileAttributes\n            \u003d getFileAttributeSettings(context);\n\n    final String description \u003d \"Copying \" + sourcePath + \" to \" + target;\n    context.setStatus(description);\n\n    LOG.info(description);\n\n    try {\n      FileStatus sourceCurrStatus;\n      FileSystem sourceFS;\n      try {\n        sourceFS \u003d sourcePath.getFileSystem(conf);\n        sourceCurrStatus \u003d sourceFS.getFileStatus(sourcePath);\n      } catch (FileNotFoundException e) {\n        throw new IOException(new RetriableFileCopyCommand.CopyReadException(e));\n      }\n\n      FileStatus targetStatus \u003d null;\n\n      try {\n        targetStatus \u003d targetFS.getFileStatus(target);\n      } catch (FileNotFoundException ignore) {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"Path could not be found: \" + target, ignore);\n      }\n\n      if (targetStatus !\u003d null \u0026\u0026 (targetStatus.isDirectory() !\u003d sourceCurrStatus.isDirectory())) {\n        throw new IOException(\"Can\u0027t replace \" + target + \". Target is \" +\n            getFileType(targetStatus) + \", Source is \" + getFileType(sourceCurrStatus));\n      }\n\n      if (sourceCurrStatus.isDirectory()) {\n        createTargetDirsWithRetry(description, target, context);\n        return;\n      }\n\n      if (skipFile(sourceFS, sourceCurrStatus, target)) {\n        LOG.info(\"Skipping copy of \" + sourceCurrStatus.getPath()\n                 + \" to \" + target);\n        updateSkipCounters(context, sourceCurrStatus);\n        context.write(null, new Text(\"SKIP: \" + sourceCurrStatus.getPath()));\n      }\n      else {\n        copyFileWithRetry(description, sourceCurrStatus, target, context,\n                          fileAttributes);\n      }\n\n      DistCpUtils.preserve(target.getFileSystem(conf), target,\n                           sourceCurrStatus, fileAttributes);\n\n    } catch (IOException exception) {\n      handleFailures(exception, sourceFileStatus, target, context);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java"
    }
  }
}