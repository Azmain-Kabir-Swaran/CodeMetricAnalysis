{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogToolUtils.java",
  "functionName": "outputContainerLogThroughZeroCopy",
  "functionId": "outputContainerLogThroughZeroCopy___containerId-String__nodeId-String__fileName-String__fileLength-long__outputSize-long__lastModifiedTime-String__fis-FileInputStream__os-OutputStream__logType-ContainerLogAggregationType",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogToolUtils.java",
  "functionStartLine": 133,
  "functionEndLine": 169,
  "numCommitsSeen": 10,
  "timeTaken": 2214,
  "changeHistory": [
    "bec0864394fbf30d7979bb7359dc0b5403731c0c",
    "95372657fc25c02399b01793833021ccf88dada2",
    "ad45d19998c1b0da25754d0016854046731fa623"
  ],
  "changeHistoryShort": {
    "bec0864394fbf30d7979bb7359dc0b5403731c0c": "Ybodychange",
    "95372657fc25c02399b01793833021ccf88dada2": "Ybodychange",
    "ad45d19998c1b0da25754d0016854046731fa623": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bec0864394fbf30d7979bb7359dc0b5403731c0c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9808. Zero length files in container log output haven\u0027t got a header. Contributed by Adam Antal\n",
      "commitDate": "25/09/19 1:28 AM",
      "commitName": "bec0864394fbf30d7979bb7359dc0b5403731c0c",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "25/02/19 11:45 AM",
      "commitNameOld": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 211.53,
      "commitsBetweenForRepo": 1651,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,37 @@\n   public static void outputContainerLogThroughZeroCopy(String containerId,\n       String nodeId, String fileName, long fileLength, long outputSize,\n       String lastModifiedTime, FileInputStream fis, OutputStream os,\n       ContainerLogAggregationType logType) throws IOException {\n     long toSkip \u003d 0;\n     long totalBytesToRead \u003d fileLength;\n     if (outputSize \u003c 0) {\n       long absBytes \u003d Math.abs(outputSize);\n       if (absBytes \u003c fileLength) {\n         toSkip \u003d fileLength - absBytes;\n         totalBytesToRead \u003d absBytes;\n       }\n     } else {\n       if (outputSize \u003c fileLength) {\n         totalBytesToRead \u003d outputSize;\n       }\n     }\n \n+    // output log summary\n+    byte[] b \u003d formatContainerLogHeader(containerId, nodeId, logType, fileName,\n+        lastModifiedTime, fileLength);\n+    os.write(b, 0, b.length);\n+\n     if (totalBytesToRead \u003e 0) {\n-      // output log summary\n-      StringBuilder sb \u003d new StringBuilder();\n-      String containerStr \u003d String.format(\n-          LogToolUtils.CONTAINER_ON_NODE_PATTERN,\n-          containerId, nodeId);\n-      sb.append(containerStr + \"\\n\")\n-          .append(\"LogAggregationType: \" + logType + \"\\n\")\n-          .append(StringUtils.repeat(\"\u003d\", containerStr.length()) + \"\\n\")\n-          .append(\"LogType:\" + fileName + \"\\n\")\n-          .append(\"LogLastModifiedTime:\" + lastModifiedTime + \"\\n\")\n-          .append(\"LogLength:\" + Long.toString(fileLength) + \"\\n\")\n-          .append(\"LogContents:\\n\");\n-      byte[] b \u003d sb.toString().getBytes(\n-          Charset.forName(\"UTF-8\"));\n-      os.write(b, 0, b.length);\n       // output log content\n       FileChannel inputChannel \u003d fis.getChannel();\n       WritableByteChannel outputChannel \u003d Channels.newChannel(os);\n       long position \u003d toSkip;\n       while (totalBytesToRead \u003e 0) {\n         long transferred \u003d\n             inputChannel.transferTo(position, totalBytesToRead, outputChannel);\n         totalBytesToRead -\u003d transferred;\n         position +\u003d transferred;\n       }\n       os.flush();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void outputContainerLogThroughZeroCopy(String containerId,\n      String nodeId, String fileName, long fileLength, long outputSize,\n      String lastModifiedTime, FileInputStream fis, OutputStream os,\n      ContainerLogAggregationType logType) throws IOException {\n    long toSkip \u003d 0;\n    long totalBytesToRead \u003d fileLength;\n    if (outputSize \u003c 0) {\n      long absBytes \u003d Math.abs(outputSize);\n      if (absBytes \u003c fileLength) {\n        toSkip \u003d fileLength - absBytes;\n        totalBytesToRead \u003d absBytes;\n      }\n    } else {\n      if (outputSize \u003c fileLength) {\n        totalBytesToRead \u003d outputSize;\n      }\n    }\n\n    // output log summary\n    byte[] b \u003d formatContainerLogHeader(containerId, nodeId, logType, fileName,\n        lastModifiedTime, fileLength);\n    os.write(b, 0, b.length);\n\n    if (totalBytesToRead \u003e 0) {\n      // output log content\n      FileChannel inputChannel \u003d fis.getChannel();\n      WritableByteChannel outputChannel \u003d Channels.newChannel(os);\n      long position \u003d toSkip;\n      while (totalBytesToRead \u003e 0) {\n        long transferred \u003d\n            inputChannel.transferTo(position, totalBytesToRead, outputChannel);\n        totalBytesToRead -\u003d transferred;\n        position +\u003d transferred;\n      }\n      os.flush();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogToolUtils.java",
      "extendedDetails": {}
    },
    "95372657fc25c02399b01793833021ccf88dada2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9287. Consecutive StringBuilder append should be reuse. Contributed by Ayush Saxena.\n",
      "commitDate": "25/02/19 11:45 AM",
      "commitName": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 258.17,
      "commitsBetweenForRepo": 1981,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   public static void outputContainerLogThroughZeroCopy(String containerId,\n       String nodeId, String fileName, long fileLength, long outputSize,\n       String lastModifiedTime, FileInputStream fis, OutputStream os,\n       ContainerLogAggregationType logType) throws IOException {\n     long toSkip \u003d 0;\n     long totalBytesToRead \u003d fileLength;\n     if (outputSize \u003c 0) {\n       long absBytes \u003d Math.abs(outputSize);\n       if (absBytes \u003c fileLength) {\n         toSkip \u003d fileLength - absBytes;\n         totalBytesToRead \u003d absBytes;\n       }\n     } else {\n       if (outputSize \u003c fileLength) {\n         totalBytesToRead \u003d outputSize;\n       }\n     }\n \n     if (totalBytesToRead \u003e 0) {\n       // output log summary\n       StringBuilder sb \u003d new StringBuilder();\n       String containerStr \u003d String.format(\n           LogToolUtils.CONTAINER_ON_NODE_PATTERN,\n           containerId, nodeId);\n-      sb.append(containerStr + \"\\n\");\n-      sb.append(\"LogAggregationType: \" + logType + \"\\n\");\n-      sb.append(StringUtils.repeat(\"\u003d\", containerStr.length()) + \"\\n\");\n-      sb.append(\"LogType:\" + fileName + \"\\n\");\n-      sb.append(\"LogLastModifiedTime:\" + lastModifiedTime + \"\\n\");\n-      sb.append(\"LogLength:\" + Long.toString(fileLength) + \"\\n\");\n-      sb.append(\"LogContents:\\n\");\n+      sb.append(containerStr + \"\\n\")\n+          .append(\"LogAggregationType: \" + logType + \"\\n\")\n+          .append(StringUtils.repeat(\"\u003d\", containerStr.length()) + \"\\n\")\n+          .append(\"LogType:\" + fileName + \"\\n\")\n+          .append(\"LogLastModifiedTime:\" + lastModifiedTime + \"\\n\")\n+          .append(\"LogLength:\" + Long.toString(fileLength) + \"\\n\")\n+          .append(\"LogContents:\\n\");\n       byte[] b \u003d sb.toString().getBytes(\n           Charset.forName(\"UTF-8\"));\n       os.write(b, 0, b.length);\n       // output log content\n       FileChannel inputChannel \u003d fis.getChannel();\n       WritableByteChannel outputChannel \u003d Channels.newChannel(os);\n       long position \u003d toSkip;\n       while (totalBytesToRead \u003e 0) {\n         long transferred \u003d\n             inputChannel.transferTo(position, totalBytesToRead, outputChannel);\n         totalBytesToRead -\u003d transferred;\n         position +\u003d transferred;\n       }\n       os.flush();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void outputContainerLogThroughZeroCopy(String containerId,\n      String nodeId, String fileName, long fileLength, long outputSize,\n      String lastModifiedTime, FileInputStream fis, OutputStream os,\n      ContainerLogAggregationType logType) throws IOException {\n    long toSkip \u003d 0;\n    long totalBytesToRead \u003d fileLength;\n    if (outputSize \u003c 0) {\n      long absBytes \u003d Math.abs(outputSize);\n      if (absBytes \u003c fileLength) {\n        toSkip \u003d fileLength - absBytes;\n        totalBytesToRead \u003d absBytes;\n      }\n    } else {\n      if (outputSize \u003c fileLength) {\n        totalBytesToRead \u003d outputSize;\n      }\n    }\n\n    if (totalBytesToRead \u003e 0) {\n      // output log summary\n      StringBuilder sb \u003d new StringBuilder();\n      String containerStr \u003d String.format(\n          LogToolUtils.CONTAINER_ON_NODE_PATTERN,\n          containerId, nodeId);\n      sb.append(containerStr + \"\\n\")\n          .append(\"LogAggregationType: \" + logType + \"\\n\")\n          .append(StringUtils.repeat(\"\u003d\", containerStr.length()) + \"\\n\")\n          .append(\"LogType:\" + fileName + \"\\n\")\n          .append(\"LogLastModifiedTime:\" + lastModifiedTime + \"\\n\")\n          .append(\"LogLength:\" + Long.toString(fileLength) + \"\\n\")\n          .append(\"LogContents:\\n\");\n      byte[] b \u003d sb.toString().getBytes(\n          Charset.forName(\"UTF-8\"));\n      os.write(b, 0, b.length);\n      // output log content\n      FileChannel inputChannel \u003d fis.getChannel();\n      WritableByteChannel outputChannel \u003d Channels.newChannel(os);\n      long position \u003d toSkip;\n      while (totalBytesToRead \u003e 0) {\n        long transferred \u003d\n            inputChannel.transferTo(position, totalBytesToRead, outputChannel);\n        totalBytesToRead -\u003d transferred;\n        position +\u003d transferred;\n      }\n      os.flush();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogToolUtils.java",
      "extendedDetails": {}
    },
    "ad45d19998c1b0da25754d0016854046731fa623": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7037. Optimize data transfer with zero-copy approach for containerlogs REST API in NMWebServices. Contributed by Tao Yang.\n",
      "commitDate": "29/08/17 3:16 PM",
      "commitName": "ad45d19998c1b0da25754d0016854046731fa623",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,47 @@\n+  public static void outputContainerLogThroughZeroCopy(String containerId,\n+      String nodeId, String fileName, long fileLength, long outputSize,\n+      String lastModifiedTime, FileInputStream fis, OutputStream os,\n+      ContainerLogAggregationType logType) throws IOException {\n+    long toSkip \u003d 0;\n+    long totalBytesToRead \u003d fileLength;\n+    if (outputSize \u003c 0) {\n+      long absBytes \u003d Math.abs(outputSize);\n+      if (absBytes \u003c fileLength) {\n+        toSkip \u003d fileLength - absBytes;\n+        totalBytesToRead \u003d absBytes;\n+      }\n+    } else {\n+      if (outputSize \u003c fileLength) {\n+        totalBytesToRead \u003d outputSize;\n+      }\n+    }\n+\n+    if (totalBytesToRead \u003e 0) {\n+      // output log summary\n+      StringBuilder sb \u003d new StringBuilder();\n+      String containerStr \u003d String.format(\n+          LogToolUtils.CONTAINER_ON_NODE_PATTERN,\n+          containerId, nodeId);\n+      sb.append(containerStr + \"\\n\");\n+      sb.append(\"LogAggregationType: \" + logType + \"\\n\");\n+      sb.append(StringUtils.repeat(\"\u003d\", containerStr.length()) + \"\\n\");\n+      sb.append(\"LogType:\" + fileName + \"\\n\");\n+      sb.append(\"LogLastModifiedTime:\" + lastModifiedTime + \"\\n\");\n+      sb.append(\"LogLength:\" + Long.toString(fileLength) + \"\\n\");\n+      sb.append(\"LogContents:\\n\");\n+      byte[] b \u003d sb.toString().getBytes(\n+          Charset.forName(\"UTF-8\"));\n+      os.write(b, 0, b.length);\n+      // output log content\n+      FileChannel inputChannel \u003d fis.getChannel();\n+      WritableByteChannel outputChannel \u003d Channels.newChannel(os);\n+      long position \u003d toSkip;\n+      while (totalBytesToRead \u003e 0) {\n+        long transferred \u003d\n+            inputChannel.transferTo(position, totalBytesToRead, outputChannel);\n+        totalBytesToRead -\u003d transferred;\n+        position +\u003d transferred;\n+      }\n+      os.flush();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void outputContainerLogThroughZeroCopy(String containerId,\n      String nodeId, String fileName, long fileLength, long outputSize,\n      String lastModifiedTime, FileInputStream fis, OutputStream os,\n      ContainerLogAggregationType logType) throws IOException {\n    long toSkip \u003d 0;\n    long totalBytesToRead \u003d fileLength;\n    if (outputSize \u003c 0) {\n      long absBytes \u003d Math.abs(outputSize);\n      if (absBytes \u003c fileLength) {\n        toSkip \u003d fileLength - absBytes;\n        totalBytesToRead \u003d absBytes;\n      }\n    } else {\n      if (outputSize \u003c fileLength) {\n        totalBytesToRead \u003d outputSize;\n      }\n    }\n\n    if (totalBytesToRead \u003e 0) {\n      // output log summary\n      StringBuilder sb \u003d new StringBuilder();\n      String containerStr \u003d String.format(\n          LogToolUtils.CONTAINER_ON_NODE_PATTERN,\n          containerId, nodeId);\n      sb.append(containerStr + \"\\n\");\n      sb.append(\"LogAggregationType: \" + logType + \"\\n\");\n      sb.append(StringUtils.repeat(\"\u003d\", containerStr.length()) + \"\\n\");\n      sb.append(\"LogType:\" + fileName + \"\\n\");\n      sb.append(\"LogLastModifiedTime:\" + lastModifiedTime + \"\\n\");\n      sb.append(\"LogLength:\" + Long.toString(fileLength) + \"\\n\");\n      sb.append(\"LogContents:\\n\");\n      byte[] b \u003d sb.toString().getBytes(\n          Charset.forName(\"UTF-8\"));\n      os.write(b, 0, b.length);\n      // output log content\n      FileChannel inputChannel \u003d fis.getChannel();\n      WritableByteChannel outputChannel \u003d Channels.newChannel(os);\n      long position \u003d toSkip;\n      while (totalBytesToRead \u003e 0) {\n        long transferred \u003d\n            inputChannel.transferTo(position, totalBytesToRead, outputChannel);\n        totalBytesToRead -\u003d transferred;\n        position +\u003d transferred;\n      }\n      os.flush();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogToolUtils.java"
    }
  }
}