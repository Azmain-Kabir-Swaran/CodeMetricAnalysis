{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LinuxContainerExecutor.java",
  "functionName": "startLocalizer",
  "functionId": "startLocalizer___ctx-LocalizerStartContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
  "functionStartLine": 361,
  "functionEndLine": 430,
  "numCommitsSeen": 141,
  "timeTaken": 13719,
  "changeHistory": [
    "f7df55f4a89ed2d75d874b32209647ef4f448875",
    "21ec4bdaef4b68adbbf4f33a6f74494c074f803c",
    "2dcfc1876e4d73cf85a6b1b7de694b1b4cc54494",
    "d8923cdbf1567aee10a54f144fef734d1465ebed",
    "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d",
    "0ffca5d347df0acb1979dff7a07ae88ea834adc7",
    "f76f5c0919cdb0b032edb309d137093952e77268",
    "9d4d30243b0fc9630da51a2c17b543ef671d035c",
    "059caf99891943d9587cac19b48e82efbed06b2d",
    "8d5929308998869933982bd425102c3a9488ee8f",
    "3e6fce91a471b4a5099de109582e7c6417e8a822",
    "c40bdb56a79fe1499c2284d493edc84620c0c078",
    "53fafcf061616516c24e2e2007a66a93d23d3e25",
    "6471d18bc72bc6c83ce31a03b5c5f5737847bb6d",
    "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5",
    "2839365f230165222f63129979ea82ada79ec56e",
    "ba7f31c2ee8d23ecb183f88920ef06053c0b9769",
    "752441434c99003595c67f22b3a526881e70156b",
    "80c5bffc4b6bd2aa54ed8d49a32fd2c2cb77bfcc",
    "7a29bccd7aaf2eb33adac937379ba6be43a1031d",
    "5f2c518c95b2186b784877a5f41c7b71f8abc2f6",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "00eb28d9272717ae57f0e50b7ece4e143d09e7ff",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
    "fc74b5a25cdb5e5c6145d3c60a36f9f8e0acc9ef",
    "7ce1c4ab352bca4b59ecbafdf237e5817cf833e5",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": "Ybodychange",
    "21ec4bdaef4b68adbbf4f33a6f74494c074f803c": "Ybodychange",
    "2dcfc1876e4d73cf85a6b1b7de694b1b4cc54494": "Ybodychange",
    "d8923cdbf1567aee10a54f144fef734d1465ebed": "Ybodychange",
    "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d": "Ybodychange",
    "0ffca5d347df0acb1979dff7a07ae88ea834adc7": "Ybodychange",
    "f76f5c0919cdb0b032edb309d137093952e77268": "Ybodychange",
    "9d4d30243b0fc9630da51a2c17b543ef671d035c": "Ybodychange",
    "059caf99891943d9587cac19b48e82efbed06b2d": "Ybodychange",
    "8d5929308998869933982bd425102c3a9488ee8f": "Ybodychange",
    "3e6fce91a471b4a5099de109582e7c6417e8a822": "Ybodychange",
    "c40bdb56a79fe1499c2284d493edc84620c0c078": "Ybodychange",
    "53fafcf061616516c24e2e2007a66a93d23d3e25": "Ymultichange(Yparameterchange,Ybodychange)",
    "6471d18bc72bc6c83ce31a03b5c5f5737847bb6d": "Ybodychange",
    "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5": "Ymultichange(Yparameterchange,Ybodychange)",
    "2839365f230165222f63129979ea82ada79ec56e": "Ybodychange",
    "ba7f31c2ee8d23ecb183f88920ef06053c0b9769": "Ybodychange",
    "752441434c99003595c67f22b3a526881e70156b": "Ybodychange",
    "80c5bffc4b6bd2aa54ed8d49a32fd2c2cb77bfcc": "Ybodychange",
    "7a29bccd7aaf2eb33adac937379ba6be43a1031d": "Ybodychange",
    "5f2c518c95b2186b784877a5f41c7b71f8abc2f6": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "00eb28d9272717ae57f0e50b7ece4e143d09e7ff": "Ybodychange",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": "Ymultichange(Yparameterchange,Ybodychange)",
    "fc74b5a25cdb5e5c6145d3c60a36f9f8e0acc9ef": "Ybodychange",
    "7ce1c4ab352bca4b59ecbafdf237e5817cf833e5": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9602. Use logger format in Container Executor. Contributed by Abhishek Modi.\n",
      "commitDate": "11/06/19 9:59 AM",
      "commitName": "f7df55f4a89ed2d75d874b32209647ef4f448875",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 87.73,
      "commitsBetweenForRepo": 542,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,70 @@\n   public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n     Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n     InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n     String user \u003d ctx.getUser();\n     String appId \u003d ctx.getAppId();\n     String locId \u003d ctx.getLocId();\n     LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n     List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n \n     addSchedPriorityCommand(prefixCommands);\n     initializeContainerOp.appendArgs(\n         runAsUser,\n         user,\n         Integer.toString(\n             PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                 .getValue()),\n         appId,\n         locId,\n         nmPrivateContainerTokensPath.toUri().getPath().toString(),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             localDirs),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             logDirs));\n \n     File jvm \u003d                                  // use same jvm as parent\n         new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     initializeContainerOp.appendArgs(jvm.toString());\n     initializeContainerOp.appendArgs(\"-classpath\");\n     initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n \n     initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n \n     List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n \n     buildMainArgs(localizerArgs, user, appId, locId, nmAddr,\n         nmPrivateContainerTokensPath.getName(), localDirs);\n     Path containerLogDir \u003d getContainerLogDir(dirsHandler, appId, locId);\n     localizerArgs \u003d replaceWithContainerLogDir(localizerArgs, containerLogDir);\n \n     initializeContainerOp.appendArgs(localizerArgs);\n \n     try {\n       Configuration conf \u003d super.getConf();\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n           initializeContainerOp, null, null, false, true);\n \n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n-      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n-          + exitCode, e);\n+      LOG.warn(\"Exit code from container {} startLocalizer is : {}\",\n+          locId, exitCode, e);\n \n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n           \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n\n    addSchedPriorityCommand(prefixCommands);\n    initializeContainerOp.appendArgs(\n        runAsUser,\n        user,\n        Integer.toString(\n            PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                .getValue()),\n        appId,\n        locId,\n        nmPrivateContainerTokensPath.toUri().getPath().toString(),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            localDirs),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            logDirs));\n\n    File jvm \u003d                                  // use same jvm as parent\n        new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    initializeContainerOp.appendArgs(jvm.toString());\n    initializeContainerOp.appendArgs(\"-classpath\");\n    initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n\n    initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n\n    List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n\n    buildMainArgs(localizerArgs, user, appId, locId, nmAddr,\n        nmPrivateContainerTokensPath.getName(), localDirs);\n    Path containerLogDir \u003d getContainerLogDir(dirsHandler, appId, locId);\n    localizerArgs \u003d replaceWithContainerLogDir(localizerArgs, containerLogDir);\n\n    initializeContainerOp.appendArgs(localizerArgs);\n\n    try {\n      Configuration conf \u003d super.getConf();\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n          initializeContainerOp, null, null, false, true);\n\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container {} startLocalizer is : {}\",\n          locId, exitCode, e);\n\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n          \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "21ec4bdaef4b68adbbf4f33a6f74494c074f803c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8672.  Improve token filename management for localization.\n            Contributed by Chandni Singh\n",
      "commitDate": "14/11/18 12:22 PM",
      "commitName": "21ec4bdaef4b68adbbf4f33a6f74494c074f803c",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "12/11/18 10:42 AM",
      "commitNameOld": "1f9c4f32e842529be5980e395587f135452372bb",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 2.07,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,70 @@\n   public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n     Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n     InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n     String user \u003d ctx.getUser();\n     String appId \u003d ctx.getAppId();\n     String locId \u003d ctx.getLocId();\n     LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n     List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n \n     addSchedPriorityCommand(prefixCommands);\n     initializeContainerOp.appendArgs(\n         runAsUser,\n         user,\n         Integer.toString(\n             PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                 .getValue()),\n         appId,\n         locId,\n         nmPrivateContainerTokensPath.toUri().getPath().toString(),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             localDirs),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             logDirs));\n \n     File jvm \u003d                                  // use same jvm as parent\n         new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     initializeContainerOp.appendArgs(jvm.toString());\n     initializeContainerOp.appendArgs(\"-classpath\");\n     initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n \n     initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n \n     List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n \n-    buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n-\n+    buildMainArgs(localizerArgs, user, appId, locId, nmAddr,\n+        nmPrivateContainerTokensPath.getName(), localDirs);\n     Path containerLogDir \u003d getContainerLogDir(dirsHandler, appId, locId);\n     localizerArgs \u003d replaceWithContainerLogDir(localizerArgs, containerLogDir);\n \n     initializeContainerOp.appendArgs(localizerArgs);\n \n     try {\n       Configuration conf \u003d super.getConf();\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n           initializeContainerOp, null, null, false, true);\n \n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n           \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n\n    addSchedPriorityCommand(prefixCommands);\n    initializeContainerOp.appendArgs(\n        runAsUser,\n        user,\n        Integer.toString(\n            PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                .getValue()),\n        appId,\n        locId,\n        nmPrivateContainerTokensPath.toUri().getPath().toString(),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            localDirs),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            logDirs));\n\n    File jvm \u003d                                  // use same jvm as parent\n        new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    initializeContainerOp.appendArgs(jvm.toString());\n    initializeContainerOp.appendArgs(\"-classpath\");\n    initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n\n    initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n\n    List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n\n    buildMainArgs(localizerArgs, user, appId, locId, nmAddr,\n        nmPrivateContainerTokensPath.getName(), localDirs);\n    Path containerLogDir \u003d getContainerLogDir(dirsHandler, appId, locId);\n    localizerArgs \u003d replaceWithContainerLogDir(localizerArgs, containerLogDir);\n\n    initializeContainerOp.appendArgs(localizerArgs);\n\n    try {\n      Configuration conf \u003d super.getConf();\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n          initializeContainerOp, null, null, false, true);\n\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n          \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "2dcfc1876e4d73cf85a6b1b7de694b1b4cc54494": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7705. Create the container log directory with correct sticky bit in C code. Contributed by Yufei Gu.\n",
      "commitDate": "12/01/18 5:00 PM",
      "commitName": "2dcfc1876e4d73cf85a6b1b7de694b1b4cc54494",
      "commitAuthor": "Miklos Szegedi",
      "commitDateOld": "12/01/18 10:41 AM",
      "commitNameOld": "3d65dbe032e202361d613344ccc6d9c5f99ba395",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 0.26,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,70 @@\n   public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n     Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n     InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n     String user \u003d ctx.getUser();\n     String appId \u003d ctx.getAppId();\n     String locId \u003d ctx.getLocId();\n     LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n     List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n \n     addSchedPriorityCommand(prefixCommands);\n     initializeContainerOp.appendArgs(\n         runAsUser,\n         user,\n         Integer.toString(\n             PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                 .getValue()),\n         appId,\n+        locId,\n         nmPrivateContainerTokensPath.toUri().getPath().toString(),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             localDirs),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             logDirs));\n \n     File jvm \u003d                                  // use same jvm as parent\n         new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     initializeContainerOp.appendArgs(jvm.toString());\n     initializeContainerOp.appendArgs(\"-classpath\");\n     initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n \n     initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n \n     List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n \n     buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n \n     Path containerLogDir \u003d getContainerLogDir(dirsHandler, appId, locId);\n     localizerArgs \u003d replaceWithContainerLogDir(localizerArgs, containerLogDir);\n \n     initializeContainerOp.appendArgs(localizerArgs);\n \n     try {\n       Configuration conf \u003d super.getConf();\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n           initializeContainerOp, null, null, false, true);\n \n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n           \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n\n    addSchedPriorityCommand(prefixCommands);\n    initializeContainerOp.appendArgs(\n        runAsUser,\n        user,\n        Integer.toString(\n            PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                .getValue()),\n        appId,\n        locId,\n        nmPrivateContainerTokensPath.toUri().getPath().toString(),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            localDirs),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            logDirs));\n\n    File jvm \u003d                                  // use same jvm as parent\n        new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    initializeContainerOp.appendArgs(jvm.toString());\n    initializeContainerOp.appendArgs(\"-classpath\");\n    initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n\n    initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n\n    List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n\n    buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n\n    Path containerLogDir \u003d getContainerLogDir(dirsHandler, appId, locId);\n    localizerArgs \u003d replaceWithContainerLogDir(localizerArgs, containerLogDir);\n\n    initializeContainerOp.appendArgs(localizerArgs);\n\n    try {\n      Configuration conf \u003d super.getConf();\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n          initializeContainerOp, null, null, false, true);\n\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n          \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "d8923cdbf1567aee10a54f144fef734d1465ebed": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7363. ContainerLocalizer don\u0027t have a valid log4j config in case of Linux container executor. (Contributed by Yufei Gu)\n",
      "commitDate": "27/11/17 2:31 PM",
      "commitName": "d8923cdbf1567aee10a54f144fef734d1465ebed",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "28/10/17 10:38 PM",
      "commitNameOld": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 29.7,
      "commitsBetweenForRepo": 250,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,69 @@\n   public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n     Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n     InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n     String user \u003d ctx.getUser();\n     String appId \u003d ctx.getAppId();\n     String locId \u003d ctx.getLocId();\n     LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n     List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n \n     addSchedPriorityCommand(prefixCommands);\n     initializeContainerOp.appendArgs(\n         runAsUser,\n         user,\n         Integer.toString(\n             PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                 .getValue()),\n         appId,\n         nmPrivateContainerTokensPath.toUri().getPath().toString(),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             localDirs),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             logDirs));\n \n     File jvm \u003d                                  // use same jvm as parent\n         new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     initializeContainerOp.appendArgs(jvm.toString());\n     initializeContainerOp.appendArgs(\"-classpath\");\n     initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n \n     initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n \n     List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n \n     buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n+\n+    Path containerLogDir \u003d getContainerLogDir(dirsHandler, appId, locId);\n+    localizerArgs \u003d replaceWithContainerLogDir(localizerArgs, containerLogDir);\n+\n     initializeContainerOp.appendArgs(localizerArgs);\n \n     try {\n       Configuration conf \u003d super.getConf();\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n           initializeContainerOp, null, null, false, true);\n \n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n           \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n\n    addSchedPriorityCommand(prefixCommands);\n    initializeContainerOp.appendArgs(\n        runAsUser,\n        user,\n        Integer.toString(\n            PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                .getValue()),\n        appId,\n        nmPrivateContainerTokensPath.toUri().getPath().toString(),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            localDirs),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            logDirs));\n\n    File jvm \u003d                                  // use same jvm as parent\n        new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    initializeContainerOp.appendArgs(jvm.toString());\n    initializeContainerOp.appendArgs(\"-classpath\");\n    initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n\n    initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n\n    List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n\n    buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n\n    Path containerLogDir \u003d getContainerLogDir(dirsHandler, appId, locId);\n    localizerArgs \u003d replaceWithContainerLogDir(localizerArgs, containerLogDir);\n\n    initializeContainerOp.appendArgs(localizerArgs);\n\n    try {\n      Configuration conf \u003d super.getConf();\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n          initializeContainerOp, null, null, false, true);\n\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n          \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6805. NPE in LinuxContainerExecutor due to null PrivilegedOperationException exit code. Contributed by Jason Lowe\n",
      "commitDate": "13/07/17 3:44 PM",
      "commitName": "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "13/07/17 3:42 PM",
      "commitNameOld": "0ffca5d347df0acb1979dff7a07ae88ea834adc7",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n   public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n     Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n     InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n     String user \u003d ctx.getUser();\n     String appId \u003d ctx.getAppId();\n     String locId \u003d ctx.getLocId();\n     LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n     List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n \n     addSchedPriorityCommand(prefixCommands);\n     initializeContainerOp.appendArgs(\n         runAsUser,\n         user,\n         Integer.toString(\n             PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                 .getValue()),\n         appId,\n         nmPrivateContainerTokensPath.toUri().getPath().toString(),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             localDirs),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             logDirs));\n \n     File jvm \u003d                                  // use same jvm as parent\n         new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     initializeContainerOp.appendArgs(jvm.toString());\n     initializeContainerOp.appendArgs(\"-classpath\");\n     initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n \n     initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n \n     List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n \n     buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n     initializeContainerOp.appendArgs(localizerArgs);\n \n     try {\n       Configuration conf \u003d super.getConf();\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n-          PrivilegedOperationExecutor.getInstance(conf);\n+          getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n           initializeContainerOp, null, null, false, true);\n \n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n           \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n\n    addSchedPriorityCommand(prefixCommands);\n    initializeContainerOp.appendArgs(\n        runAsUser,\n        user,\n        Integer.toString(\n            PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                .getValue()),\n        appId,\n        nmPrivateContainerTokensPath.toUri().getPath().toString(),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            localDirs),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            logDirs));\n\n    File jvm \u003d                                  // use same jvm as parent\n        new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    initializeContainerOp.appendArgs(jvm.toString());\n    initializeContainerOp.appendArgs(\"-classpath\");\n    initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n\n    initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n\n    List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n\n    buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n    initializeContainerOp.appendArgs(localizerArgs);\n\n    try {\n      Configuration conf \u003d super.getConf();\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n          initializeContainerOp, null, null, false, true);\n\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n          \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "0ffca5d347df0acb1979dff7a07ae88ea834adc7": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-6805. NPE in LinuxContainerExecutor due to null PrivilegedOperationException exit code. Contributed by Jason Lowe\"\n\nThis reverts commit f76f5c0919cdb0b032edb309d137093952e77268.\n",
      "commitDate": "13/07/17 3:42 PM",
      "commitName": "0ffca5d347df0acb1979dff7a07ae88ea834adc7",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "13/07/17 3:38 PM",
      "commitNameOld": "f76f5c0919cdb0b032edb309d137093952e77268",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n   public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n     Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n     InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n     String user \u003d ctx.getUser();\n     String appId \u003d ctx.getAppId();\n     String locId \u003d ctx.getLocId();\n     LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n     List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n \n     addSchedPriorityCommand(prefixCommands);\n     initializeContainerOp.appendArgs(\n         runAsUser,\n         user,\n         Integer.toString(\n             PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                 .getValue()),\n         appId,\n         nmPrivateContainerTokensPath.toUri().getPath().toString(),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             localDirs),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             logDirs));\n \n     File jvm \u003d                                  // use same jvm as parent\n         new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     initializeContainerOp.appendArgs(jvm.toString());\n     initializeContainerOp.appendArgs(\"-classpath\");\n     initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n \n     initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n \n     List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n \n     buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n     initializeContainerOp.appendArgs(localizerArgs);\n \n     try {\n       Configuration conf \u003d super.getConf();\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n-          getPrivilegedOperationExecutor();\n+          PrivilegedOperationExecutor.getInstance(conf);\n \n       privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n           initializeContainerOp, null, null, false, true);\n \n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n           \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n\n    addSchedPriorityCommand(prefixCommands);\n    initializeContainerOp.appendArgs(\n        runAsUser,\n        user,\n        Integer.toString(\n            PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                .getValue()),\n        appId,\n        nmPrivateContainerTokensPath.toUri().getPath().toString(),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            localDirs),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            logDirs));\n\n    File jvm \u003d                                  // use same jvm as parent\n        new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    initializeContainerOp.appendArgs(jvm.toString());\n    initializeContainerOp.appendArgs(\"-classpath\");\n    initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n\n    initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n\n    List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n\n    buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n    initializeContainerOp.appendArgs(localizerArgs);\n\n    try {\n      Configuration conf \u003d super.getConf();\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          PrivilegedOperationExecutor.getInstance(conf);\n\n      privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n          initializeContainerOp, null, null, false, true);\n\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n          \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "f76f5c0919cdb0b032edb309d137093952e77268": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6805. NPE in LinuxContainerExecutor due to null PrivilegedOperationException exit code. Contributed by Jason Lowe\n",
      "commitDate": "13/07/17 3:38 PM",
      "commitName": "f76f5c0919cdb0b032edb309d137093952e77268",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "10/05/17 10:46 AM",
      "commitNameOld": "74a61438ca01e2191b54000af73b654a2d0b8253",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 64.2,
      "commitsBetweenForRepo": 304,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n   public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n     Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n     InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n     String user \u003d ctx.getUser();\n     String appId \u003d ctx.getAppId();\n     String locId \u003d ctx.getLocId();\n     LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n     List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n \n     addSchedPriorityCommand(prefixCommands);\n     initializeContainerOp.appendArgs(\n         runAsUser,\n         user,\n         Integer.toString(\n             PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                 .getValue()),\n         appId,\n         nmPrivateContainerTokensPath.toUri().getPath().toString(),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             localDirs),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             logDirs));\n \n     File jvm \u003d                                  // use same jvm as parent\n         new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     initializeContainerOp.appendArgs(jvm.toString());\n     initializeContainerOp.appendArgs(\"-classpath\");\n     initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n \n     initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n \n     List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n \n     buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n     initializeContainerOp.appendArgs(localizerArgs);\n \n     try {\n       Configuration conf \u003d super.getConf();\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n-          PrivilegedOperationExecutor.getInstance(conf);\n+          getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n           initializeContainerOp, null, null, false, true);\n \n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n           \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n\n    addSchedPriorityCommand(prefixCommands);\n    initializeContainerOp.appendArgs(\n        runAsUser,\n        user,\n        Integer.toString(\n            PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                .getValue()),\n        appId,\n        nmPrivateContainerTokensPath.toUri().getPath().toString(),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            localDirs),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            logDirs));\n\n    File jvm \u003d                                  // use same jvm as parent\n        new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    initializeContainerOp.appendArgs(jvm.toString());\n    initializeContainerOp.appendArgs(\"-classpath\");\n    initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n\n    initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n\n    List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n\n    buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n    initializeContainerOp.appendArgs(localizerArgs);\n\n    try {\n      Configuration conf \u003d super.getConf();\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n          initializeContainerOp, null, null, false, true);\n\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n          \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "9d4d30243b0fc9630da51a2c17b543ef671d035c": {
      "type": "Ybodychange",
      "commitMessage": "Remove parent\u0027s env vars from child processes\n",
      "commitDate": "29/04/16 9:25 AM",
      "commitName": "9d4d30243b0fc9630da51a2c17b543ef671d035c",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "07/03/16 7:40 AM",
      "commitNameOld": "059caf99891943d9587cac19b48e82efbed06b2d",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 53.03,
      "commitsBetweenForRepo": 320,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n   public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n     Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n     InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n     String user \u003d ctx.getUser();\n     String appId \u003d ctx.getAppId();\n     String locId \u003d ctx.getLocId();\n     LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n         PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n     List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n \n     addSchedPriorityCommand(prefixCommands);\n     initializeContainerOp.appendArgs(\n         runAsUser,\n         user,\n         Integer.toString(\n             PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                 .getValue()),\n         appId,\n         nmPrivateContainerTokensPath.toUri().getPath().toString(),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             localDirs),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             logDirs));\n \n     File jvm \u003d                                  // use same jvm as parent\n         new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     initializeContainerOp.appendArgs(jvm.toString());\n     initializeContainerOp.appendArgs(\"-classpath\");\n     initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n \n     initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n \n     List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n \n     buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n     initializeContainerOp.appendArgs(localizerArgs);\n \n     try {\n       Configuration conf \u003d super.getConf();\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           PrivilegedOperationExecutor.getInstance(conf);\n \n       privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n-          initializeContainerOp, null, null, false);\n+          initializeContainerOp, null, null, false, true);\n \n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n           \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n\n    addSchedPriorityCommand(prefixCommands);\n    initializeContainerOp.appendArgs(\n        runAsUser,\n        user,\n        Integer.toString(\n            PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                .getValue()),\n        appId,\n        nmPrivateContainerTokensPath.toUri().getPath().toString(),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            localDirs),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            logDirs));\n\n    File jvm \u003d                                  // use same jvm as parent\n        new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    initializeContainerOp.appendArgs(jvm.toString());\n    initializeContainerOp.appendArgs(\"-classpath\");\n    initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n\n    initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n\n    List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n\n    buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n    initializeContainerOp.appendArgs(localizerArgs);\n\n    try {\n      Configuration conf \u003d super.getConf();\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          PrivilegedOperationExecutor.getInstance(conf);\n\n      privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n          initializeContainerOp, null, null, false, true);\n\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n          \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "059caf99891943d9587cac19b48e82efbed06b2d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4744. Too many signal to container failure in case of LCE. Contributed by Sidharta Seethana\n",
      "commitDate": "07/03/16 7:40 AM",
      "commitName": "059caf99891943d9587cac19b48e82efbed06b2d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "25/01/16 4:19 PM",
      "commitNameOld": "2085e60a9655b59aa2ba8917acdc511ab71ff6e4",
      "commitAuthorOld": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "daysBetweenCommits": 41.64,
      "commitsBetweenForRepo": 283,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n   public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n     Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n     InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n     String user \u003d ctx.getUser();\n     String appId \u003d ctx.getAppId();\n     String locId \u003d ctx.getLocId();\n     LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n-        PrivilegedOperation.OperationType.INITIALIZE_CONTAINER, (String) null);\n+        PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n     List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n \n     addSchedPriorityCommand(prefixCommands);\n     initializeContainerOp.appendArgs(\n         runAsUser,\n         user,\n         Integer.toString(\n             PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                 .getValue()),\n         appId,\n         nmPrivateContainerTokensPath.toUri().getPath().toString(),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             localDirs),\n         StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n             logDirs));\n \n     File jvm \u003d                                  // use same jvm as parent\n         new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     initializeContainerOp.appendArgs(jvm.toString());\n     initializeContainerOp.appendArgs(\"-classpath\");\n     initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n \n     initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n \n     List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n \n     buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n     initializeContainerOp.appendArgs(localizerArgs);\n \n     try {\n       Configuration conf \u003d super.getConf();\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           PrivilegedOperationExecutor.getInstance(conf);\n \n       privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n           initializeContainerOp, null, null, false);\n \n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n           \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.INITIALIZE_CONTAINER);\n    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n\n    addSchedPriorityCommand(prefixCommands);\n    initializeContainerOp.appendArgs(\n        runAsUser,\n        user,\n        Integer.toString(\n            PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                .getValue()),\n        appId,\n        nmPrivateContainerTokensPath.toUri().getPath().toString(),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            localDirs),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            logDirs));\n\n    File jvm \u003d                                  // use same jvm as parent\n        new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    initializeContainerOp.appendArgs(jvm.toString());\n    initializeContainerOp.appendArgs(\"-classpath\");\n    initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n\n    initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n\n    List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n\n    buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n    initializeContainerOp.appendArgs(localizerArgs);\n\n    try {\n      Configuration conf \u003d super.getConf();\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          PrivilegedOperationExecutor.getInstance(conf);\n\n      privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n          initializeContainerOp, null, null, false);\n\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n          \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "8d5929308998869933982bd425102c3a9488ee8f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4253. Standardize on using PrivilegedOperationExecutor for all invocations of container-executor in LinuxContainerExecutor. Contributed by Sidharta Seethana.\n",
      "commitDate": "14/10/15 2:28 AM",
      "commitName": "8d5929308998869933982bd425102c3a9488ee8f",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "11/09/15 2:07 AM",
      "commitNameOld": "486d5cb803efec7b4db445ee65a3df83392940a3",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 33.01,
      "commitsBetweenForRepo": 251,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,65 @@\n   public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n     Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n     InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n     String user \u003d ctx.getUser();\n     String appId \u003d ctx.getAppId();\n     String locId \u003d ctx.getLocId();\n     LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n-    \n+\n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n-    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n-    addSchedPriorityCommand(command);\n-    command.addAll(Arrays.asList(containerExecutorExe,\n-                   runAsUser,\n-                   user, \n-                   Integer.toString(PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER.getValue()),\n-                   appId,\n-                   nmPrivateContainerTokensPath.toUri().getPath().toString(),\n-                   StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n-                       localDirs),\n-                   StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n-                       logDirs)));\n+    PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n+        PrivilegedOperation.OperationType.INITIALIZE_CONTAINER, (String) null);\n+    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n+\n+    addSchedPriorityCommand(prefixCommands);\n+    initializeContainerOp.appendArgs(\n+        runAsUser,\n+        user,\n+        Integer.toString(\n+            PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n+                .getValue()),\n+        appId,\n+        nmPrivateContainerTokensPath.toUri().getPath().toString(),\n+        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n+            localDirs),\n+        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n+            logDirs));\n \n     File jvm \u003d                                  // use same jvm as parent\n-      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n-    command.add(jvm.toString());\n-    command.add(\"-classpath\");\n-    command.add(System.getProperty(\"java.class.path\"));\n+        new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n+    initializeContainerOp.appendArgs(jvm.toString());\n+    initializeContainerOp.appendArgs(\"-classpath\");\n+    initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n-      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n+      initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n-    command.addAll(ContainerLocalizer.getJavaOpts(getConf()));\n-    buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n-    String[] commandArray \u003d command.toArray(new String[command.size()]);\n-    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n-    }\n+\n+    initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n+\n+    List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n+\n+    buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n+    initializeContainerOp.appendArgs(localizerArgs);\n+\n     try {\n-      shExec.execute();\n-      if (LOG.isDebugEnabled()) {\n-        logOutput(shExec.getOutput());\n-      }\n-    } catch (ExitCodeException e) {\n-      int exitCode \u003d shExec.getExitCode();\n+      Configuration conf \u003d super.getConf();\n+      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n+          PrivilegedOperationExecutor.getInstance(conf);\n+\n+      privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n+          initializeContainerOp, null, null, false);\n+\n+    } catch (PrivilegedOperationException e) {\n+      int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n-      logOutput(shExec.getOutput());\n+\n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n-      \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n+          \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    PrivilegedOperation initializeContainerOp \u003d new PrivilegedOperation(\n        PrivilegedOperation.OperationType.INITIALIZE_CONTAINER, (String) null);\n    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n\n    addSchedPriorityCommand(prefixCommands);\n    initializeContainerOp.appendArgs(\n        runAsUser,\n        user,\n        Integer.toString(\n            PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER\n                .getValue()),\n        appId,\n        nmPrivateContainerTokensPath.toUri().getPath().toString(),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            localDirs),\n        StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n            logDirs));\n\n    File jvm \u003d                                  // use same jvm as parent\n        new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    initializeContainerOp.appendArgs(jvm.toString());\n    initializeContainerOp.appendArgs(\"-classpath\");\n    initializeContainerOp.appendArgs(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      initializeContainerOp.appendArgs(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n\n    initializeContainerOp.appendArgs(ContainerLocalizer.getJavaOpts(getConf()));\n\n    List\u003cString\u003e localizerArgs \u003d new ArrayList\u003c\u003e();\n\n    buildMainArgs(localizerArgs, user, appId, locId, nmAddr, localDirs);\n    initializeContainerOp.appendArgs(localizerArgs);\n\n    try {\n      Configuration conf \u003d super.getConf();\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          PrivilegedOperationExecutor.getInstance(conf);\n\n      privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,\n          initializeContainerOp, null, null, false);\n\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n          \" (exitCode\u003d\" + exitCode + \") with output: \" + e.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "3e6fce91a471b4a5099de109582e7c6417e8a822": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3853. Add docker container runtime support to LinuxContainterExecutor. Contributed by Sidharta Seethana.\n",
      "commitDate": "27/07/15 11:57 AM",
      "commitName": "3e6fce91a471b4a5099de109582e7c6417e8a822",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "07/07/15 4:29 AM",
      "commitNameOld": "c40bdb56a79fe1499c2284d493edc84620c0c078",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 20.31,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n     Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n     InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n     String user \u003d ctx.getUser();\n     String appId \u003d ctx.getAppId();\n     String locId \u003d ctx.getLocId();\n     LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n     \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n     addSchedPriorityCommand(command);\n     command.addAll(Arrays.asList(containerExecutorExe,\n                    runAsUser,\n                    user, \n-                   Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n+                   Integer.toString(PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                    StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                        localDirs),\n                    StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                        logDirs)));\n \n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n     command.addAll(ContainerLocalizer.getJavaOpts(getConf()));\n     buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n       \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n    \n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n    addSchedPriorityCommand(command);\n    command.addAll(Arrays.asList(containerExecutorExe,\n                   runAsUser,\n                   user, \n                   Integer.toString(PrivilegedOperation.RunAsUserCommand.INITIALIZE_CONTAINER.getValue()),\n                   appId,\n                   nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                   StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                       localDirs),\n                   StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                       logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    command.addAll(ContainerLocalizer.getJavaOpts(getConf()));\n    buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n      \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "c40bdb56a79fe1499c2284d493edc84620c0c078": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2194. Fix bug causing CGroups functionality to fail on RHEL7. Contributed by Wei Yan.\n",
      "commitDate": "07/07/15 4:29 AM",
      "commitName": "c40bdb56a79fe1499c2284d493edc84620c0c078",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "21/05/15 3:50 PM",
      "commitNameOld": "53fafcf061616516c24e2e2007a66a93d23d3e25",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 46.53,
      "commitsBetweenForRepo": 308,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,56 @@\n   public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n     Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n     InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n     String user \u003d ctx.getUser();\n     String appId \u003d ctx.getAppId();\n     String locId \u003d ctx.getLocId();\n     LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n     \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n     addSchedPriorityCommand(command);\n     command.addAll(Arrays.asList(containerExecutorExe,\n                    runAsUser,\n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n-                   StringUtils.join(\",\", localDirs),\n-                   StringUtils.join(\",\", logDirs)));\n+                   StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n+                       localDirs),\n+                   StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n+                       logDirs)));\n \n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n     command.addAll(ContainerLocalizer.getJavaOpts(getConf()));\n     buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n       \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n    \n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n    addSchedPriorityCommand(command);\n    command.addAll(Arrays.asList(containerExecutorExe,\n                   runAsUser,\n                   user, \n                   Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                   appId,\n                   nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                   StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                       localDirs),\n                   StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,\n                       logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    command.addAll(ContainerLocalizer.getJavaOpts(getConf()));\n    buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n      \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "53fafcf061616516c24e2e2007a66a93d23d3e25": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3684. Changed ContainerExecutor\u0027s primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.\n",
      "commitDate": "21/05/15 3:50 PM",
      "commitName": "53fafcf061616516c24e2e2007a66a93d23d3e25",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3684. Changed ContainerExecutor\u0027s primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.\n",
          "commitDate": "21/05/15 3:50 PM",
          "commitName": "53fafcf061616516c24e2e2007a66a93d23d3e25",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "08/05/15 8:01 PM",
          "commitNameOld": "6471d18bc72bc6c83ce31a03b5c5f5737847bb6d",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 12.83,
          "commitsBetweenForRepo": 119,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,54 @@\n-  public void startLocalizer(Path nmPrivateContainerTokensPath,\n-      InetSocketAddress nmAddr, String user, String appId, String locId,\n-      LocalDirsHandlerService dirsHandler)\n+  public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n-\n+    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n+    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n+    String user \u003d ctx.getUser();\n+    String appId \u003d ctx.getAppId();\n+    String locId \u003d ctx.getLocId();\n+    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n     \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n     addSchedPriorityCommand(command);\n     command.addAll(Arrays.asList(containerExecutorExe,\n                    runAsUser,\n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                    StringUtils.join(\",\", localDirs),\n                    StringUtils.join(\",\", logDirs)));\n \n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n     command.addAll(ContainerLocalizer.getJavaOpts(getConf()));\n     buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n       \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n    \n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n    addSchedPriorityCommand(command);\n    command.addAll(Arrays.asList(containerExecutorExe,\n                   runAsUser,\n                   user, \n                   Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                   appId,\n                   nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                   StringUtils.join(\",\", localDirs),\n                   StringUtils.join(\",\", logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    command.addAll(ContainerLocalizer.getJavaOpts(getConf()));\n    buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n      \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[nmPrivateContainerTokensPath-Path, nmAddr-InetSocketAddress, user-String, appId-String, locId-String, dirsHandler-LocalDirsHandlerService]",
            "newValue": "[ctx-LocalizerStartContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3684. Changed ContainerExecutor\u0027s primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.\n",
          "commitDate": "21/05/15 3:50 PM",
          "commitName": "53fafcf061616516c24e2e2007a66a93d23d3e25",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "08/05/15 8:01 PM",
          "commitNameOld": "6471d18bc72bc6c83ce31a03b5c5f5737847bb6d",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 12.83,
          "commitsBetweenForRepo": 119,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,54 @@\n-  public void startLocalizer(Path nmPrivateContainerTokensPath,\n-      InetSocketAddress nmAddr, String user, String appId, String locId,\n-      LocalDirsHandlerService dirsHandler)\n+  public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n-\n+    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n+    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n+    String user \u003d ctx.getUser();\n+    String appId \u003d ctx.getAppId();\n+    String locId \u003d ctx.getLocId();\n+    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n     \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n     addSchedPriorityCommand(command);\n     command.addAll(Arrays.asList(containerExecutorExe,\n                    runAsUser,\n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                    StringUtils.join(\",\", localDirs),\n                    StringUtils.join(\",\", logDirs)));\n \n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n     command.addAll(ContainerLocalizer.getJavaOpts(getConf()));\n     buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n       \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n    \n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n    addSchedPriorityCommand(command);\n    command.addAll(Arrays.asList(containerExecutorExe,\n                   runAsUser,\n                   user, \n                   Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                   appId,\n                   nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                   StringUtils.join(\",\", localDirs),\n                   StringUtils.join(\",\", logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    command.addAll(ContainerLocalizer.getJavaOpts(getConf()));\n    buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n      \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "6471d18bc72bc6c83ce31a03b5c5f5737847bb6d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1912. ResourceLocalizer started without any jvm memory control.\nContributed by Masatake Iwasaki\n",
      "commitDate": "08/05/15 8:01 PM",
      "commitName": "6471d18bc72bc6c83ce31a03b5c5f5737847bb6d",
      "commitAuthor": "Xuan",
      "commitDateOld": "22/04/15 5:26 PM",
      "commitNameOld": "a100be685cc4521e9949589948219231aa5d2733",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 16.11,
      "commitsBetweenForRepo": 222,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n       LocalDirsHandlerService dirsHandler)\n       throws IOException, InterruptedException {\n \n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n     \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n     addSchedPriorityCommand(command);\n     command.addAll(Arrays.asList(containerExecutorExe,\n                    runAsUser,\n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                    StringUtils.join(\",\", localDirs),\n                    StringUtils.join(\",\", logDirs)));\n \n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n+    command.addAll(ContainerLocalizer.getJavaOpts(getConf()));\n     buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n       \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      LocalDirsHandlerService dirsHandler)\n      throws IOException, InterruptedException {\n\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n    \n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n    addSchedPriorityCommand(command);\n    command.addAll(Arrays.asList(containerExecutorExe,\n                   runAsUser,\n                   user, \n                   Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                   appId,\n                   nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                   StringUtils.join(\",\", localDirs),\n                   StringUtils.join(\",\", logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    command.addAll(ContainerLocalizer.getJavaOpts(getConf()));\n    buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n      \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2198. Remove the need to run NodeManager as privileged account for Windows Secure Container Executor. Contributed by Remus Rusanu\n",
      "commitDate": "22/10/14 3:57 PM",
      "commitName": "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2198. Remove the need to run NodeManager as privileged account for Windows Secure Container Executor. Contributed by Remus Rusanu\n",
          "commitDate": "22/10/14 3:57 PM",
          "commitName": "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5",
          "commitAuthor": "Jian He",
          "commitDateOld": "20/10/14 6:45 PM",
          "commitNameOld": "2839365f230165222f63129979ea82ada79ec56e",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 1.88,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,50 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n-      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n+      LocalDirsHandlerService dirsHandler)\n       throws IOException, InterruptedException {\n \n+    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n+    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n+    \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n     addSchedPriorityCommand(command);\n     command.addAll(Arrays.asList(containerExecutorExe,\n                    runAsUser,\n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                    StringUtils.join(\",\", localDirs),\n                    StringUtils.join(\",\", logDirs)));\n \n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n     buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n       \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      LocalDirsHandlerService dirsHandler)\n      throws IOException, InterruptedException {\n\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n    \n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n    addSchedPriorityCommand(command);\n    command.addAll(Arrays.asList(containerExecutorExe,\n                   runAsUser,\n                   user, \n                   Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                   appId,\n                   nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                   StringUtils.join(\",\", localDirs),\n                   StringUtils.join(\",\", logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n      \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[nmPrivateContainerTokensPath-Path, nmAddr-InetSocketAddress, user-String, appId-String, locId-String, localDirs-List\u003cString\u003e, logDirs-List\u003cString\u003e]",
            "newValue": "[nmPrivateContainerTokensPath-Path, nmAddr-InetSocketAddress, user-String, appId-String, locId-String, dirsHandler-LocalDirsHandlerService]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2198. Remove the need to run NodeManager as privileged account for Windows Secure Container Executor. Contributed by Remus Rusanu\n",
          "commitDate": "22/10/14 3:57 PM",
          "commitName": "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5",
          "commitAuthor": "Jian He",
          "commitDateOld": "20/10/14 6:45 PM",
          "commitNameOld": "2839365f230165222f63129979ea82ada79ec56e",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 1.88,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,50 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n-      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n+      LocalDirsHandlerService dirsHandler)\n       throws IOException, InterruptedException {\n \n+    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n+    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n+    \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n     addSchedPriorityCommand(command);\n     command.addAll(Arrays.asList(containerExecutorExe,\n                    runAsUser,\n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                    StringUtils.join(\",\", localDirs),\n                    StringUtils.join(\",\", logDirs)));\n \n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n     buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n       \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      LocalDirsHandlerService dirsHandler)\n      throws IOException, InterruptedException {\n\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n    \n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n    addSchedPriorityCommand(command);\n    command.addAll(Arrays.asList(containerExecutorExe,\n                   runAsUser,\n                   user, \n                   Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                   appId,\n                   nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                   StringUtils.join(\",\", localDirs),\n                   StringUtils.join(\",\", logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n      \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "2839365f230165222f63129979ea82ada79ec56e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2701. Potential race condition in startLocalizer when using LinuxContainerExecutor. Contributed by Xuan Gong\n",
      "commitDate": "20/10/14 6:45 PM",
      "commitName": "2839365f230165222f63129979ea82ada79ec56e",
      "commitAuthor": "Jian He",
      "commitDateOld": "01/10/14 10:14 AM",
      "commitNameOld": "ba7f31c2ee8d23ecb183f88920ef06053c0b9769",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 19.35,
      "commitsBetweenForRepo": 153,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n       List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n       throws IOException, InterruptedException {\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n     addSchedPriorityCommand(command);\n     command.addAll(Arrays.asList(containerExecutorExe,\n                    runAsUser,\n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                    StringUtils.join(\",\", localDirs),\n                    StringUtils.join(\",\", logDirs)));\n \n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n-    ContainerLocalizer.buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n+    buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n       \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n      throws IOException, InterruptedException {\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n    addSchedPriorityCommand(command);\n    command.addAll(Arrays.asList(containerExecutorExe,\n                   runAsUser,\n                   user, \n                   Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                   appId,\n                   nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                   StringUtils.join(\",\", localDirs),\n                   StringUtils.join(\",\", logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n      \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "ba7f31c2ee8d23ecb183f88920ef06053c0b9769": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1972. Added a secure container-executor for Windows. Contributed by Remus Rusanu.\n",
      "commitDate": "01/10/14 10:14 AM",
      "commitName": "ba7f31c2ee8d23ecb183f88920ef06053c0b9769",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/09/14 2:11 PM",
      "commitNameOld": "3fa5f728c4d6944302621965d6a0376827af5b51",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 26.84,
      "commitsBetweenForRepo": 321,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,47 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n       List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n       throws IOException, InterruptedException {\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n     addSchedPriorityCommand(command);\n     command.addAll(Arrays.asList(containerExecutorExe,\n                    runAsUser,\n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                    StringUtils.join(\",\", localDirs),\n                    StringUtils.join(\",\", logDirs)));\n \n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n-    command.add(ContainerLocalizer.class.getName());\n-    command.add(user);\n-    command.add(appId);\n-    command.add(locId);\n-    command.add(nmAddr.getHostName());\n-    command.add(Integer.toString(nmAddr.getPort()));\n-    for (String dir : localDirs) {\n-      command.add(dir);\n-    }\n+    ContainerLocalizer.buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n       \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n      throws IOException, InterruptedException {\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n    addSchedPriorityCommand(command);\n    command.addAll(Arrays.asList(containerExecutorExe,\n                   runAsUser,\n                   user, \n                   Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                   appId,\n                   nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                   StringUtils.join(\",\", localDirs),\n                   StringUtils.join(\",\", logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    ContainerLocalizer.buildMainArgs(command, user, appId, locId, nmAddr, localDirs);\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n      \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "752441434c99003595c67f22b3a526881e70156b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1608. LinuxContainerExecutor has a few DEBUG messages at INFO level (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1558874 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/01/14 10:42 AM",
      "commitName": "752441434c99003595c67f22b3a526881e70156b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "04/10/13 2:59 PM",
      "commitNameOld": "80c5bffc4b6bd2aa54ed8d49a32fd2c2cb77bfcc",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 103.86,
      "commitsBetweenForRepo": 600,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,55 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n       List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n       throws IOException, InterruptedException {\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n     addSchedPriorityCommand(command);\n     command.addAll(Arrays.asList(containerExecutorExe,\n                    runAsUser,\n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                    StringUtils.join(\",\", localDirs),\n                    StringUtils.join(\",\", logDirs)));\n \n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n     command.add(ContainerLocalizer.class.getName());\n     command.add(user);\n     command.add(appId);\n     command.add(locId);\n     command.add(nmAddr.getHostName());\n     command.add(Integer.toString(nmAddr.getPort()));\n     for (String dir : localDirs) {\n       command.add(dir);\n     }\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n-    // TODO: DEBUG\n-    LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n       \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n      throws IOException, InterruptedException {\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n    addSchedPriorityCommand(command);\n    command.addAll(Arrays.asList(containerExecutorExe,\n                   runAsUser,\n                   user, \n                   Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                   appId,\n                   nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                   StringUtils.join(\",\", localDirs),\n                   StringUtils.join(\",\", logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    command.add(ContainerLocalizer.class.getName());\n    command.add(user);\n    command.add(appId);\n    command.add(locId);\n    command.add(nmAddr.getHostName());\n    command.add(Integer.toString(nmAddr.getPort()));\n    for (String dir : localDirs) {\n      command.add(dir);\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n      \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "80c5bffc4b6bd2aa54ed8d49a32fd2c2cb77bfcc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1253. Changes to LinuxContainerExecutor to run containers as a single dedicated user in non-secure mode. (rvs via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529325 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/10/13 2:59 PM",
      "commitName": "80c5bffc4b6bd2aa54ed8d49a32fd2c2cb77bfcc",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/07/13 5:28 PM",
      "commitNameOld": "7a29bccd7aaf2eb33adac937379ba6be43a1031d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 77.9,
      "commitsBetweenForRepo": 467,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,57 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n       List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n       throws IOException, InterruptedException {\n \n+    verifyUsernamePattern(user);\n+    String runAsUser \u003d getRunAsUser(user);\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n     addSchedPriorityCommand(command);\n     command.addAll(Arrays.asList(containerExecutorExe,\n+                   runAsUser,\n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                    StringUtils.join(\",\", localDirs),\n                    StringUtils.join(\",\", logDirs)));\n \n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n     command.add(ContainerLocalizer.class.getName());\n     command.add(user);\n     command.add(appId);\n     command.add(locId);\n     command.add(nmAddr.getHostName());\n     command.add(Integer.toString(nmAddr.getPort()));\n     for (String dir : localDirs) {\n       command.add(dir);\n     }\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     // TODO: DEBUG\n     LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n           + exitCode, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Application \" + appId + \" initialization failed\" +\n       \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n      throws IOException, InterruptedException {\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n    addSchedPriorityCommand(command);\n    command.addAll(Arrays.asList(containerExecutorExe,\n                   runAsUser,\n                   user, \n                   Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                   appId,\n                   nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                   StringUtils.join(\",\", localDirs),\n                   StringUtils.join(\",\", logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    command.add(ContainerLocalizer.class.getName());\n    command.add(user);\n    command.add(appId);\n    command.add(locId);\n    command.add(nmAddr.getHostName());\n    command.add(Integer.toString(nmAddr.getPort()));\n    for (String dir : localDirs) {\n      command.add(dir);\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    // TODO: DEBUG\n    LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n      \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "7a29bccd7aaf2eb33adac937379ba6be43a1031d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-814. Improving diagnostics when containers fail during launch due to various reasons like invalid env etc. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504732 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/13 5:28 PM",
      "commitName": "7a29bccd7aaf2eb33adac937379ba6be43a1031d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/05/13 9:13 PM",
      "commitNameOld": "2692675fc3b5046d2ec88542c30203c87e135b70",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 48.84,
      "commitsBetweenForRepo": 322,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,54 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n       List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n       throws IOException, InterruptedException {\n \n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n     addSchedPriorityCommand(command);\n     command.addAll(Arrays.asList(containerExecutorExe,\n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                    StringUtils.join(\",\", localDirs),\n                    StringUtils.join(\",\", logDirs)));\n \n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n     command.add(ContainerLocalizer.class.getName());\n     command.add(user);\n     command.add(appId);\n     command.add(locId);\n     command.add(nmAddr.getHostName());\n     command.add(Integer.toString(nmAddr.getPort()));\n     for (String dir : localDirs) {\n       command.add(dir);\n     }\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     // TODO: DEBUG\n     LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n-      LOG.warn(\"Exit code from container is : \" + exitCode);\n+      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n+          + exitCode, e);\n       logOutput(shExec.getOutput());\n-      throw new IOException(\"App initialization failed (\" + exitCode + \n-          \") with output: \" + shExec.getOutput(), e);\n+      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n+      \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n      throws IOException, InterruptedException {\n\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n    addSchedPriorityCommand(command);\n    command.addAll(Arrays.asList(containerExecutorExe,\n                   user, \n                   Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                   appId,\n                   nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                   StringUtils.join(\",\", localDirs),\n                   StringUtils.join(\",\", logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    command.add(ContainerLocalizer.class.getName());\n    command.add(user);\n    command.add(appId);\n    command.add(locId);\n    command.add(nmAddr.getHostName());\n    command.add(Integer.toString(nmAddr.getPort()));\n    for (String dir : localDirs) {\n      command.add(dir);\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    // TODO: DEBUG\n    LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container \" + locId + \" startLocalizer is : \"\n          + exitCode, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Application \" + appId + \" initialization failed\" +\n      \t\t\" (exitCode\u003d\" + exitCode + \") with output: \" + shExec.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "5f2c518c95b2186b784877a5f41c7b71f8abc2f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-443. allow OS scheduling priority of NM to be different than the containers it launches (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1454411 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/03/13 6:46 AM",
      "commitName": "5f2c518c95b2186b784877a5f41c7b71f8abc2f6",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "18/12/12 2:58 PM",
      "commitNameOld": "5032a694ed250f65ade8c2b62c97b89ab45f53ea",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 79.66,
      "commitsBetweenForRepo": 346,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n       List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n       throws IOException, InterruptedException {\n \n-    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n-      Arrays.asList(containerExecutorExe, \n-                    user, \n-                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n-                    appId,\n-                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n-                    StringUtils.join(\",\", localDirs),\n-                    StringUtils.join(\",\", logDirs)));\n+    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n+    addSchedPriorityCommand(command);\n+    command.addAll(Arrays.asList(containerExecutorExe,\n+                   user, \n+                   Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n+                   appId,\n+                   nmPrivateContainerTokensPath.toUri().getPath().toString(),\n+                   StringUtils.join(\",\", localDirs),\n+                   StringUtils.join(\",\", logDirs)));\n \n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n     command.add(ContainerLocalizer.class.getName());\n     command.add(user);\n     command.add(appId);\n     command.add(locId);\n     command.add(nmAddr.getHostName());\n     command.add(Integer.toString(nmAddr.getPort()));\n     for (String dir : localDirs) {\n       command.add(dir);\n     }\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     // TODO: DEBUG\n     LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container is : \" + exitCode);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"App initialization failed (\" + exitCode + \n           \") with output: \" + shExec.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n      throws IOException, InterruptedException {\n\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e();\n    addSchedPriorityCommand(command);\n    command.addAll(Arrays.asList(containerExecutorExe,\n                   user, \n                   Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                   appId,\n                   nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                   StringUtils.join(\",\", localDirs),\n                   StringUtils.join(\",\", logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    command.add(ContainerLocalizer.class.getName());\n    command.add(user);\n    command.add(appId);\n    command.add(locId);\n    command.add(nmAddr.getHostName());\n    command.add(Integer.toString(nmAddr.getPort()));\n    for (String dir : localDirs) {\n      command.add(dir);\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    // TODO: DEBUG\n    LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container is : \" + exitCode);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"App initialization failed (\" + exitCode + \n          \") with output: \" + shExec.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n      throws IOException, InterruptedException {\n\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n      Arrays.asList(containerExecutorExe, \n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                    StringUtils.join(\",\", localDirs),\n                    StringUtils.join(\",\", logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    command.add(ContainerLocalizer.class.getName());\n    command.add(user);\n    command.add(appId);\n    command.add(locId);\n    command.add(nmAddr.getHostName());\n    command.add(Integer.toString(nmAddr.getPort()));\n    for (String dir : localDirs) {\n      command.add(dir);\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    // TODO: DEBUG\n    LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container is : \" + exitCode);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"App initialization failed (\" + exitCode + \n          \") with output: \" + shExec.getOutput(), e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
      }
    },
    "00eb28d9272717ae57f0e50b7ece4e143d09e7ff": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4012 Hadoop Job setup error leaves no useful info to users. (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308976 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/04/12 8:27 AM",
      "commitName": "00eb28d9272717ae57f0e50b7ece4e143d09e7ff",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "29/11/11 3:17 PM",
      "commitNameOld": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 125.67,
      "commitsBetweenForRepo": 892,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,52 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n       List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n       throws IOException, InterruptedException {\n \n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n       Arrays.asList(containerExecutorExe, \n                     user, \n                     Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                     appId,\n                     nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                     StringUtils.join(\",\", localDirs),\n                     StringUtils.join(\",\", logDirs)));\n \n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n     command.add(ContainerLocalizer.class.getName());\n     command.add(user);\n     command.add(appId);\n     command.add(locId);\n     command.add(nmAddr.getHostName());\n     command.add(Integer.toString(nmAddr.getPort()));\n     for (String dir : localDirs) {\n       command.add(dir);\n     }\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     // TODO: DEBUG\n     LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container is : \" + exitCode);\n       logOutput(shExec.getOutput());\n-      throw new IOException(\"App initialization failed (\" + exitCode + \")\", e);\n+      throw new IOException(\"App initialization failed (\" + exitCode + \n+          \") with output: \" + shExec.getOutput(), e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n      throws IOException, InterruptedException {\n\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n      Arrays.asList(containerExecutorExe, \n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                    StringUtils.join(\",\", localDirs),\n                    StringUtils.join(\",\", logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    command.add(ContainerLocalizer.class.getName());\n    command.add(user);\n    command.add(appId);\n    command.add(locId);\n    command.add(nmAddr.getHostName());\n    command.add(Integer.toString(nmAddr.getPort()));\n    for (String dir : localDirs) {\n      command.add(dir);\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    // TODO: DEBUG\n    LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container is : \" + exitCode);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"App initialization failed (\" + exitCode + \n          \") with output: \" + shExec.getOutput(), e);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3121. NodeManager should handle disk-failures (Ravi Gummadi via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208131 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/11/11 3:17 PM",
      "commitName": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthor": "Mahadev Konar",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-3121. NodeManager should handle disk-failures (Ravi Gummadi via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208131 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/11/11 3:17 PM",
          "commitName": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
          "commitAuthor": "Mahadev Konar",
          "commitDateOld": "15/11/11 2:30 AM",
          "commitNameOld": "c56e05196190f172e9c8cdcd9d59d09950f1419b",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 14.53,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,51 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n-      List\u003cPath\u003e localDirs) throws IOException, InterruptedException {\n+      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n+      throws IOException, InterruptedException {\n+\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n       Arrays.asList(containerExecutorExe, \n                     user, \n                     Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                     appId,\n-                    nmPrivateContainerTokensPath.toUri().getPath().toString()));\n+                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n+                    StringUtils.join(\",\", localDirs),\n+                    StringUtils.join(\",\", logDirs)));\n+\n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n     command.add(ContainerLocalizer.class.getName());\n     command.add(user);\n     command.add(appId);\n     command.add(locId);\n     command.add(nmAddr.getHostName());\n     command.add(Integer.toString(nmAddr.getPort()));\n-    for (Path p : localDirs) {\n-      command.add(p.toUri().getPath().toString());\n+    for (String dir : localDirs) {\n+      command.add(dir);\n     }\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     // TODO: DEBUG\n     LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container is : \" + exitCode);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"App initialization failed (\" + exitCode + \")\", e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n      throws IOException, InterruptedException {\n\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n      Arrays.asList(containerExecutorExe, \n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                    StringUtils.join(\",\", localDirs),\n                    StringUtils.join(\",\", logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    command.add(ContainerLocalizer.class.getName());\n    command.add(user);\n    command.add(appId);\n    command.add(locId);\n    command.add(nmAddr.getHostName());\n    command.add(Integer.toString(nmAddr.getPort()));\n    for (String dir : localDirs) {\n      command.add(dir);\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    // TODO: DEBUG\n    LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container is : \" + exitCode);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"App initialization failed (\" + exitCode + \")\", e);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[nmPrivateContainerTokensPath-Path, nmAddr-InetSocketAddress, user-String, appId-String, locId-String, localDirs-List\u003cPath\u003e]",
            "newValue": "[nmPrivateContainerTokensPath-Path, nmAddr-InetSocketAddress, user-String, appId-String, locId-String, localDirs-List\u003cString\u003e, logDirs-List\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3121. NodeManager should handle disk-failures (Ravi Gummadi via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208131 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/11/11 3:17 PM",
          "commitName": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
          "commitAuthor": "Mahadev Konar",
          "commitDateOld": "15/11/11 2:30 AM",
          "commitNameOld": "c56e05196190f172e9c8cdcd9d59d09950f1419b",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 14.53,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,51 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n-      List\u003cPath\u003e localDirs) throws IOException, InterruptedException {\n+      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n+      throws IOException, InterruptedException {\n+\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n       Arrays.asList(containerExecutorExe, \n                     user, \n                     Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                     appId,\n-                    nmPrivateContainerTokensPath.toUri().getPath().toString()));\n+                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n+                    StringUtils.join(\",\", localDirs),\n+                    StringUtils.join(\",\", logDirs)));\n+\n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     String javaLibPath \u003d System.getProperty(\"java.library.path\");\n     if (javaLibPath !\u003d null) {\n       command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n     }\n     command.add(ContainerLocalizer.class.getName());\n     command.add(user);\n     command.add(appId);\n     command.add(locId);\n     command.add(nmAddr.getHostName());\n     command.add(Integer.toString(nmAddr.getPort()));\n-    for (Path p : localDirs) {\n-      command.add(p.toUri().getPath().toString());\n+    for (String dir : localDirs) {\n+      command.add(dir);\n     }\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     // TODO: DEBUG\n     LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container is : \" + exitCode);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"App initialization failed (\" + exitCode + \")\", e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n      throws IOException, InterruptedException {\n\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n      Arrays.asList(containerExecutorExe, \n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString(),\n                    StringUtils.join(\",\", localDirs),\n                    StringUtils.join(\",\", logDirs)));\n\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    command.add(ContainerLocalizer.class.getName());\n    command.add(user);\n    command.add(appId);\n    command.add(locId);\n    command.add(nmAddr.getHostName());\n    command.add(Integer.toString(nmAddr.getPort()));\n    for (String dir : localDirs) {\n      command.add(dir);\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    // TODO: DEBUG\n    LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container is : \" + exitCode);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"App initialization failed (\" + exitCode + \")\", e);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "fc74b5a25cdb5e5c6145d3c60a36f9f8e0acc9ef": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3259. Added java.library.path of NodeManager to ContainerLocalizer in LinuxContainerExecutor. Contributed by Kihwal Lee. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189667 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 1:28 AM",
      "commitName": "fc74b5a25cdb5e5c6145d3c60a36f9f8e0acc9ef",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/10/11 10:09 AM",
      "commitNameOld": "7ce1c4ab352bca4b59ecbafdf237e5817cf833e5",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.64,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,46 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n       List\u003cPath\u003e localDirs) throws IOException, InterruptedException {\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n       Arrays.asList(containerExecutorExe, \n                     user, \n                     Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                     appId,\n                     nmPrivateContainerTokensPath.toUri().getPath().toString()));\n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n+    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n+    if (javaLibPath !\u003d null) {\n+      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n+    }\n     command.add(ContainerLocalizer.class.getName());\n     command.add(user);\n     command.add(appId);\n     command.add(locId);\n     command.add(nmAddr.getHostName());\n     command.add(Integer.toString(nmAddr.getPort()));\n     for (Path p : localDirs) {\n       command.add(p.toUri().getPath().toString());\n     }\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     // TODO: DEBUG\n     LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container is : \" + exitCode);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"App initialization failed (\" + exitCode + \")\", e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cPath\u003e localDirs) throws IOException, InterruptedException {\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n      Arrays.asList(containerExecutorExe, \n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString()));\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    String javaLibPath \u003d System.getProperty(\"java.library.path\");\n    if (javaLibPath !\u003d null) {\n      command.add(\"-Djava.library.path\u003d\" + javaLibPath);\n    }\n    command.add(ContainerLocalizer.class.getName());\n    command.add(user);\n    command.add(appId);\n    command.add(locId);\n    command.add(nmAddr.getHostName());\n    command.add(Integer.toString(nmAddr.getPort()));\n    for (Path p : localDirs) {\n      command.add(p.toUri().getPath().toString());\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    // TODO: DEBUG\n    LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container is : \" + exitCode);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"App initialization failed (\" + exitCode + \")\", e);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "7ce1c4ab352bca4b59ecbafdf237e5817cf833e5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2747. Cleaned up LinuxContainerExecutor binary sources and changed the configuration to use yarn names. Contributed by Robert Joseph Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1188236 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/11 10:09 AM",
      "commitName": "7ce1c4ab352bca4b59ecbafdf237e5817cf833e5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/10/11 2:18 AM",
      "commitNameOld": "a8190ce5c520fcb69399485231ef7c0b7fdc3df7",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 14.33,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n       List\u003cPath\u003e localDirs) throws IOException, InterruptedException {\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n       Arrays.asList(containerExecutorExe, \n                     user, \n-                    Integer.toString(Commands.INITIALIZE_JOB.getValue()),\n+                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                     appId,\n                     nmPrivateContainerTokensPath.toUri().getPath().toString()));\n     File jvm \u003d                                  // use same jvm as parent\n       new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n     command.add(jvm.toString());\n     command.add(\"-classpath\");\n     command.add(System.getProperty(\"java.class.path\"));\n     command.add(ContainerLocalizer.class.getName());\n     command.add(user);\n     command.add(appId);\n     command.add(locId);\n     command.add(nmAddr.getHostName());\n     command.add(Integer.toString(nmAddr.getPort()));\n     for (Path p : localDirs) {\n       command.add(p.toUri().getPath().toString());\n     }\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     // TODO: DEBUG\n     LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n       if (LOG.isDebugEnabled()) {\n         logOutput(shExec.getOutput());\n       }\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container is : \" + exitCode);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"App initialization failed (\" + exitCode + \")\", e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cPath\u003e localDirs) throws IOException, InterruptedException {\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n      Arrays.asList(containerExecutorExe, \n                    user, \n                    Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString()));\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    command.add(ContainerLocalizer.class.getName());\n    command.add(user);\n    command.add(appId);\n    command.add(locId);\n    command.add(nmAddr.getHostName());\n    command.add(Integer.toString(nmAddr.getPort()));\n    for (Path p : localDirs) {\n      command.add(p.toUri().getPath().toString());\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    // TODO: DEBUG\n    LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container is : \" + exitCode);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"App initialization failed (\" + exitCode + \")\", e);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cPath\u003e localDirs) throws IOException, InterruptedException {\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n      Arrays.asList(containerExecutorExe, \n                    user, \n                    Integer.toString(Commands.INITIALIZE_JOB.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString()));\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    command.add(ContainerLocalizer.class.getName());\n    command.add(user);\n    command.add(appId);\n    command.add(locId);\n    command.add(nmAddr.getHostName());\n    command.add(Integer.toString(nmAddr.getPort()));\n    for (Path p : localDirs) {\n      command.add(p.toUri().getPath().toString());\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    // TODO: DEBUG\n    LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container is : \" + exitCode);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"App initialization failed (\" + exitCode + \")\", e);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,42 @@\n+  public void startLocalizer(Path nmPrivateContainerTokensPath,\n+      InetSocketAddress nmAddr, String user, String appId, String locId,\n+      List\u003cPath\u003e localDirs) throws IOException, InterruptedException {\n+    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n+      Arrays.asList(containerExecutorExe, \n+                    user, \n+                    Integer.toString(Commands.INITIALIZE_JOB.getValue()),\n+                    appId,\n+                    nmPrivateContainerTokensPath.toUri().getPath().toString()));\n+    File jvm \u003d                                  // use same jvm as parent\n+      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n+    command.add(jvm.toString());\n+    command.add(\"-classpath\");\n+    command.add(System.getProperty(\"java.class.path\"));\n+    command.add(ContainerLocalizer.class.getName());\n+    command.add(user);\n+    command.add(appId);\n+    command.add(locId);\n+    command.add(nmAddr.getHostName());\n+    command.add(Integer.toString(nmAddr.getPort()));\n+    for (Path p : localDirs) {\n+      command.add(p.toUri().getPath().toString());\n+    }\n+    String[] commandArray \u003d command.toArray(new String[command.size()]);\n+    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n+    // TODO: DEBUG\n+    LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n+    }\n+    try {\n+      shExec.execute();\n+      if (LOG.isDebugEnabled()) {\n+        logOutput(shExec.getOutput());\n+      }\n+    } catch (ExitCodeException e) {\n+      int exitCode \u003d shExec.getExitCode();\n+      LOG.warn(\"Exit code from container is : \" + exitCode);\n+      logOutput(shExec.getOutput());\n+      throw new IOException(\"App initialization failed (\" + exitCode + \")\", e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cPath\u003e localDirs) throws IOException, InterruptedException {\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n      Arrays.asList(containerExecutorExe, \n                    user, \n                    Integer.toString(Commands.INITIALIZE_JOB.getValue()),\n                    appId,\n                    nmPrivateContainerTokensPath.toUri().getPath().toString()));\n    File jvm \u003d                                  // use same jvm as parent\n      new File(new File(System.getProperty(\"java.home\"), \"bin\"), \"java\");\n    command.add(jvm.toString());\n    command.add(\"-classpath\");\n    command.add(System.getProperty(\"java.class.path\"));\n    command.add(ContainerLocalizer.class.getName());\n    command.add(user);\n    command.add(appId);\n    command.add(locId);\n    command.add(nmAddr.getHostName());\n    command.add(Integer.toString(nmAddr.getPort()));\n    for (Path p : localDirs) {\n      command.add(p.toUri().getPath().toString());\n    }\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    // TODO: DEBUG\n    LOG.info(\"initApplication: \" + Arrays.toString(commandArray));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"initApplication: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n      if (LOG.isDebugEnabled()) {\n        logOutput(shExec.getOutput());\n      }\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container is : \" + exitCode);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"App initialization failed (\" + exitCode + \")\", e);\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
    }
  }
}