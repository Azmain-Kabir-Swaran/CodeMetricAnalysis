{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Client.java",
  "functionName": "setupConnection",
  "functionId": "setupConnection___ticket-UserGroupInformation",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
  "functionStartLine": 650,
  "functionEndLine": 718,
  "numCommitsSeen": 266,
  "timeTaken": 6740,
  "changeHistory": [
    "f2e29acbfa0b7e1fcecbdcf3e791c96114b456a5",
    "8f42dafcf82d5b426dd931dc5ddd177dd6f283f7",
    "27a1a5fde94d4d7ea0ed172635c146d594413781",
    "85ec5573eb9fd746a9295ecc6fe1ae683073aaf5",
    "754299695b778b9b602e46836c35a3ac9474d7f8",
    "682adc6ba9db3bed94fd4ea3d83761db6abfe695",
    "30c7dfd8ba87fe1b455ad6c05c0a6cd6486f55b7",
    "54639c7d7a34f4a46e8df50d57c79bab34b1ac07",
    "9aa2f51812e28c0f30299b17f6bbc181fbfa30d4",
    "65be21267587f04a2c33af65b951211cc9085b15",
    "5a0b74663951475f668c7c68b9902c2bb54dc861",
    "06f086dd23a654a56c949b3e5437dc7f839ae91d",
    "45fafc2b8fc1aab0a082600b0d50ad693491ea70",
    "009dfed8d7b3056cd8915f74d84dc06850cb8a05",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "2a990ed646b12e53a302dbc08b2f2e3606a98296",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "67c79a25200daf803c62f298d6ff3ab884ab6928",
    "714e5f7165b101f72a43e8c3fb27be5def93fe42",
    "c47d34a8660923f6f6e21e91aa48ca5780c0ff9f"
  ],
  "changeHistoryShort": {
    "f2e29acbfa0b7e1fcecbdcf3e791c96114b456a5": "Ybodychange",
    "8f42dafcf82d5b426dd931dc5ddd177dd6f283f7": "Ybodychange",
    "27a1a5fde94d4d7ea0ed172635c146d594413781": "Ymultichange(Yparameterchange,Ybodychange)",
    "85ec5573eb9fd746a9295ecc6fe1ae683073aaf5": "Ybodychange",
    "754299695b778b9b602e46836c35a3ac9474d7f8": "Ybodychange",
    "682adc6ba9db3bed94fd4ea3d83761db6abfe695": "Ybodychange",
    "30c7dfd8ba87fe1b455ad6c05c0a6cd6486f55b7": "Ybodychange",
    "54639c7d7a34f4a46e8df50d57c79bab34b1ac07": "Ybodychange",
    "9aa2f51812e28c0f30299b17f6bbc181fbfa30d4": "Ybodychange",
    "65be21267587f04a2c33af65b951211cc9085b15": "Ybodychange",
    "5a0b74663951475f668c7c68b9902c2bb54dc861": "Ybodychange",
    "06f086dd23a654a56c949b3e5437dc7f839ae91d": "Ybodychange",
    "45fafc2b8fc1aab0a082600b0d50ad693491ea70": "Ybodychange",
    "009dfed8d7b3056cd8915f74d84dc06850cb8a05": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "2a990ed646b12e53a302dbc08b2f2e3606a98296": "Ybodychange",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "67c79a25200daf803c62f298d6ff3ab884ab6928": "Ybodychange",
    "714e5f7165b101f72a43e8c3fb27be5def93fe42": "Ybodychange",
    "c47d34a8660923f6f6e21e91aa48ca5780c0ff9f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f2e29acbfa0b7e1fcecbdcf3e791c96114b456a5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15476. fix logging for split-dns multihome . Contributed by Ajay Kumar.\n",
      "commitDate": "01/08/18 12:32 PM",
      "commitName": "f2e29acbfa0b7e1fcecbdcf3e791c96114b456a5",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "01/05/18 2:32 PM",
      "commitNameOld": "8f42dafcf82d5b426dd931dc5ddd177dd6f283f7",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 91.92,
      "commitsBetweenForRepo": 656,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,69 @@\n     private synchronized void setupConnection(\n         UserGroupInformation ticket) throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n           this.socket.setKeepAlive(true);\n           \n           if (tcpLowLatency) {\n             /*\n              * This allows intermediate switches to shape IPC traffic\n              * differently from Shuffle/HDFS DataStreamer traffic.\n              *\n              * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n              *\n              * Prefer to optimize connect() speed \u0026 response latency over net\n              * throughput.\n              */\n             this.socket.setTrafficClass(0x04 | 0x10);\n             this.socket.setPerformancePreferences(1, 2, 0);\n           }\n \n           /*\n            * Bind the socket to the host specified in the principal name of the\n            * client, to ensure Server matching address of the client connection\n            * to host name in principal passed.\n            */\n           InetSocketAddress bindAddr \u003d null;\n           if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n             KerberosInfo krbInfo \u003d \n               remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n             if (krbInfo !\u003d null) {\n               String principal \u003d ticket.getUserName();\n               String host \u003d SecurityUtil.getHostFromPrincipal(principal);\n               // If host name is a valid local address then bind socket to it\n               InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n               if (localAddr !\u003d null) {\n                 this.socket.setReuseAddress(true);\n                 localAddr \u003d NetUtils.bindToLocalAddress(localAddr,\n                     bindToWildCardAddress);\n-                LOG.debug(\"Binding {} to {}\", principal, localAddr);\n+                LOG.debug(\"Binding {} to {}\", principal,\n+                    (bindToWildCardAddress) ? \"0.0.0.0\" : localAddr);\n                 this.socket.bind(new InetSocketAddress(localAddr, 0));\n               }\n             }\n           }\n           \n           NetUtils.connect(this.socket, server, bindAddr, connectionTimeout);\n           this.socket.setSoTimeout(soTimeout);\n           return;\n         } catch (ConnectTimeoutException toe) {\n           /* Check for an address change and update the local reference.\n            * Reset the failure counter if the address was changed\n            */\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionTimeout(timeoutFailures++,\n               maxRetriesOnSocketTimeouts, toe);\n         } catch (IOException ie) {\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionFailure(ioFailures++, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection(\n        UserGroupInformation ticket) throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          this.socket.setKeepAlive(true);\n          \n          if (tcpLowLatency) {\n            /*\n             * This allows intermediate switches to shape IPC traffic\n             * differently from Shuffle/HDFS DataStreamer traffic.\n             *\n             * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n             *\n             * Prefer to optimize connect() speed \u0026 response latency over net\n             * throughput.\n             */\n            this.socket.setTrafficClass(0x04 | 0x10);\n            this.socket.setPerformancePreferences(1, 2, 0);\n          }\n\n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          InetSocketAddress bindAddr \u003d null;\n          if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null) {\n              String principal \u003d ticket.getUserName();\n              String host \u003d SecurityUtil.getHostFromPrincipal(principal);\n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.setReuseAddress(true);\n                localAddr \u003d NetUtils.bindToLocalAddress(localAddr,\n                    bindToWildCardAddress);\n                LOG.debug(\"Binding {} to {}\", principal,\n                    (bindToWildCardAddress) ? \"0.0.0.0\" : localAddr);\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          NetUtils.connect(this.socket, server, bindAddr, connectionTimeout);\n          this.socket.setSoTimeout(soTimeout);\n          return;\n        } catch (ConnectTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionTimeout(timeoutFailures++,\n              maxRetriesOnSocketTimeouts, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, ie);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "8f42dafcf82d5b426dd931dc5ddd177dd6f283f7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15250. Split-DNS MultiHomed Server Network Cluster Network IPC Client Bind Addr Wrong\nContributed by Ajay Kumar\n",
      "commitDate": "01/05/18 2:32 PM",
      "commitName": "8f42dafcf82d5b426dd931dc5ddd177dd6f283f7",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/10/17 3:06 PM",
      "commitNameOld": "b016f08f67830ed3ca741bc6a10c3f5164781be5",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 194.98,
      "commitsBetweenForRepo": 1929,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n     private synchronized void setupConnection(\n         UserGroupInformation ticket) throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n           this.socket.setKeepAlive(true);\n           \n           if (tcpLowLatency) {\n             /*\n              * This allows intermediate switches to shape IPC traffic\n              * differently from Shuffle/HDFS DataStreamer traffic.\n              *\n              * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n              *\n              * Prefer to optimize connect() speed \u0026 response latency over net\n              * throughput.\n              */\n             this.socket.setTrafficClass(0x04 | 0x10);\n             this.socket.setPerformancePreferences(1, 2, 0);\n           }\n \n           /*\n            * Bind the socket to the host specified in the principal name of the\n            * client, to ensure Server matching address of the client connection\n            * to host name in principal passed.\n            */\n           InetSocketAddress bindAddr \u003d null;\n           if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n             KerberosInfo krbInfo \u003d \n               remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n             if (krbInfo !\u003d null) {\n               String principal \u003d ticket.getUserName();\n               String host \u003d SecurityUtil.getHostFromPrincipal(principal);\n               // If host name is a valid local address then bind socket to it\n               InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n               if (localAddr !\u003d null) {\n                 this.socket.setReuseAddress(true);\n-                if (LOG.isDebugEnabled()) {\n-                  LOG.debug(\"Binding \" + principal + \" to \" + localAddr);\n-                }\n-                bindAddr \u003d new InetSocketAddress(localAddr, 0);\n+                localAddr \u003d NetUtils.bindToLocalAddress(localAddr,\n+                    bindToWildCardAddress);\n+                LOG.debug(\"Binding {} to {}\", principal, localAddr);\n+                this.socket.bind(new InetSocketAddress(localAddr, 0));\n               }\n             }\n           }\n           \n           NetUtils.connect(this.socket, server, bindAddr, connectionTimeout);\n           this.socket.setSoTimeout(soTimeout);\n           return;\n         } catch (ConnectTimeoutException toe) {\n           /* Check for an address change and update the local reference.\n            * Reset the failure counter if the address was changed\n            */\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionTimeout(timeoutFailures++,\n               maxRetriesOnSocketTimeouts, toe);\n         } catch (IOException ie) {\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionFailure(ioFailures++, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection(\n        UserGroupInformation ticket) throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          this.socket.setKeepAlive(true);\n          \n          if (tcpLowLatency) {\n            /*\n             * This allows intermediate switches to shape IPC traffic\n             * differently from Shuffle/HDFS DataStreamer traffic.\n             *\n             * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n             *\n             * Prefer to optimize connect() speed \u0026 response latency over net\n             * throughput.\n             */\n            this.socket.setTrafficClass(0x04 | 0x10);\n            this.socket.setPerformancePreferences(1, 2, 0);\n          }\n\n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          InetSocketAddress bindAddr \u003d null;\n          if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null) {\n              String principal \u003d ticket.getUserName();\n              String host \u003d SecurityUtil.getHostFromPrincipal(principal);\n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.setReuseAddress(true);\n                localAddr \u003d NetUtils.bindToLocalAddress(localAddr,\n                    bindToWildCardAddress);\n                LOG.debug(\"Binding {} to {}\", principal, localAddr);\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          NetUtils.connect(this.socket, server, bindAddr, connectionTimeout);\n          this.socket.setSoTimeout(soTimeout);\n          return;\n        } catch (ConnectTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionTimeout(timeoutFailures++,\n              maxRetriesOnSocketTimeouts, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, ie);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "27a1a5fde94d4d7ea0ed172635c146d594413781": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-14578. Bind IPC connections to kerberos UPN host for proxy users. Contributed by Daryn Sharp.\n",
      "commitDate": "26/07/17 11:12 AM",
      "commitName": "27a1a5fde94d4d7ea0ed172635c146d594413781",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14578. Bind IPC connections to kerberos UPN host for proxy users. Contributed by Daryn Sharp.\n",
          "commitDate": "26/07/17 11:12 AM",
          "commitName": "27a1a5fde94d4d7ea0ed172635c146d594413781",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "17/07/17 9:32 PM",
          "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,65 +1,68 @@\n-    private synchronized void setupConnection() throws IOException {\n+    private synchronized void setupConnection(\n+        UserGroupInformation ticket) throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n           this.socket.setKeepAlive(true);\n           \n           if (tcpLowLatency) {\n             /*\n              * This allows intermediate switches to shape IPC traffic\n              * differently from Shuffle/HDFS DataStreamer traffic.\n              *\n              * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n              *\n              * Prefer to optimize connect() speed \u0026 response latency over net\n              * throughput.\n              */\n             this.socket.setTrafficClass(0x04 | 0x10);\n             this.socket.setPerformancePreferences(1, 2, 0);\n           }\n \n           /*\n            * Bind the socket to the host specified in the principal name of the\n            * client, to ensure Server matching address of the client connection\n            * to host name in principal passed.\n            */\n-          UserGroupInformation ticket \u003d remoteId.getTicket();\n+          InetSocketAddress bindAddr \u003d null;\n           if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n             KerberosInfo krbInfo \u003d \n               remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n-            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n-              String host \u003d \n-                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n-              \n+            if (krbInfo !\u003d null) {\n+              String principal \u003d ticket.getUserName();\n+              String host \u003d SecurityUtil.getHostFromPrincipal(principal);\n               // If host name is a valid local address then bind socket to it\n               InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n               if (localAddr !\u003d null) {\n                 this.socket.setReuseAddress(true);\n-                this.socket.bind(new InetSocketAddress(localAddr, 0));\n+                if (LOG.isDebugEnabled()) {\n+                  LOG.debug(\"Binding \" + principal + \" to \" + localAddr);\n+                }\n+                bindAddr \u003d new InetSocketAddress(localAddr, 0);\n               }\n             }\n           }\n           \n-          NetUtils.connect(this.socket, server, connectionTimeout);\n+          NetUtils.connect(this.socket, server, bindAddr, connectionTimeout);\n           this.socket.setSoTimeout(soTimeout);\n           return;\n         } catch (ConnectTimeoutException toe) {\n           /* Check for an address change and update the local reference.\n            * Reset the failure counter if the address was changed\n            */\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionTimeout(timeoutFailures++,\n               maxRetriesOnSocketTimeouts, toe);\n         } catch (IOException ie) {\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionFailure(ioFailures++, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private synchronized void setupConnection(\n        UserGroupInformation ticket) throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          this.socket.setKeepAlive(true);\n          \n          if (tcpLowLatency) {\n            /*\n             * This allows intermediate switches to shape IPC traffic\n             * differently from Shuffle/HDFS DataStreamer traffic.\n             *\n             * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n             *\n             * Prefer to optimize connect() speed \u0026 response latency over net\n             * throughput.\n             */\n            this.socket.setTrafficClass(0x04 | 0x10);\n            this.socket.setPerformancePreferences(1, 2, 0);\n          }\n\n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          InetSocketAddress bindAddr \u003d null;\n          if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null) {\n              String principal \u003d ticket.getUserName();\n              String host \u003d SecurityUtil.getHostFromPrincipal(principal);\n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.setReuseAddress(true);\n                if (LOG.isDebugEnabled()) {\n                  LOG.debug(\"Binding \" + principal + \" to \" + localAddr);\n                }\n                bindAddr \u003d new InetSocketAddress(localAddr, 0);\n              }\n            }\n          }\n          \n          NetUtils.connect(this.socket, server, bindAddr, connectionTimeout);\n          this.socket.setSoTimeout(soTimeout);\n          return;\n        } catch (ConnectTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionTimeout(timeoutFailures++,\n              maxRetriesOnSocketTimeouts, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, ie);\n        }\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[ticket-UserGroupInformation]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14578. Bind IPC connections to kerberos UPN host for proxy users. Contributed by Daryn Sharp.\n",
          "commitDate": "26/07/17 11:12 AM",
          "commitName": "27a1a5fde94d4d7ea0ed172635c146d594413781",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "17/07/17 9:32 PM",
          "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,65 +1,68 @@\n-    private synchronized void setupConnection() throws IOException {\n+    private synchronized void setupConnection(\n+        UserGroupInformation ticket) throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n           this.socket.setKeepAlive(true);\n           \n           if (tcpLowLatency) {\n             /*\n              * This allows intermediate switches to shape IPC traffic\n              * differently from Shuffle/HDFS DataStreamer traffic.\n              *\n              * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n              *\n              * Prefer to optimize connect() speed \u0026 response latency over net\n              * throughput.\n              */\n             this.socket.setTrafficClass(0x04 | 0x10);\n             this.socket.setPerformancePreferences(1, 2, 0);\n           }\n \n           /*\n            * Bind the socket to the host specified in the principal name of the\n            * client, to ensure Server matching address of the client connection\n            * to host name in principal passed.\n            */\n-          UserGroupInformation ticket \u003d remoteId.getTicket();\n+          InetSocketAddress bindAddr \u003d null;\n           if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n             KerberosInfo krbInfo \u003d \n               remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n-            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n-              String host \u003d \n-                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n-              \n+            if (krbInfo !\u003d null) {\n+              String principal \u003d ticket.getUserName();\n+              String host \u003d SecurityUtil.getHostFromPrincipal(principal);\n               // If host name is a valid local address then bind socket to it\n               InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n               if (localAddr !\u003d null) {\n                 this.socket.setReuseAddress(true);\n-                this.socket.bind(new InetSocketAddress(localAddr, 0));\n+                if (LOG.isDebugEnabled()) {\n+                  LOG.debug(\"Binding \" + principal + \" to \" + localAddr);\n+                }\n+                bindAddr \u003d new InetSocketAddress(localAddr, 0);\n               }\n             }\n           }\n           \n-          NetUtils.connect(this.socket, server, connectionTimeout);\n+          NetUtils.connect(this.socket, server, bindAddr, connectionTimeout);\n           this.socket.setSoTimeout(soTimeout);\n           return;\n         } catch (ConnectTimeoutException toe) {\n           /* Check for an address change and update the local reference.\n            * Reset the failure counter if the address was changed\n            */\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionTimeout(timeoutFailures++,\n               maxRetriesOnSocketTimeouts, toe);\n         } catch (IOException ie) {\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionFailure(ioFailures++, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private synchronized void setupConnection(\n        UserGroupInformation ticket) throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          this.socket.setKeepAlive(true);\n          \n          if (tcpLowLatency) {\n            /*\n             * This allows intermediate switches to shape IPC traffic\n             * differently from Shuffle/HDFS DataStreamer traffic.\n             *\n             * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n             *\n             * Prefer to optimize connect() speed \u0026 response latency over net\n             * throughput.\n             */\n            this.socket.setTrafficClass(0x04 | 0x10);\n            this.socket.setPerformancePreferences(1, 2, 0);\n          }\n\n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          InetSocketAddress bindAddr \u003d null;\n          if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null) {\n              String principal \u003d ticket.getUserName();\n              String host \u003d SecurityUtil.getHostFromPrincipal(principal);\n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.setReuseAddress(true);\n                if (LOG.isDebugEnabled()) {\n                  LOG.debug(\"Binding \" + principal + \" to \" + localAddr);\n                }\n                bindAddr \u003d new InetSocketAddress(localAddr, 0);\n              }\n            }\n          }\n          \n          NetUtils.connect(this.socket, server, bindAddr, connectionTimeout);\n          this.socket.setSoTimeout(soTimeout);\n          return;\n        } catch (ConnectTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionTimeout(timeoutFailures++,\n              maxRetriesOnSocketTimeouts, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, ie);\n        }\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
          "extendedDetails": {}
        }
      ]
    },
    "85ec5573eb9fd746a9295ecc6fe1ae683073aaf5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12672. RPC timeout should not override IPC ping interval (iwasakims)\n",
      "commitDate": "05/04/16 11:22 AM",
      "commitName": "85ec5573eb9fd746a9295ecc6fe1ae683073aaf5",
      "commitAuthor": "Masatake Iwasaki",
      "commitDateOld": "14/03/16 3:48 PM",
      "commitNameOld": "1898810cda83e6d273a2963b56ed499c0fb91118",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 21.82,
      "commitsBetweenForRepo": 125,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,65 @@\n     private synchronized void setupConnection() throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n           this.socket.setKeepAlive(true);\n           \n           if (tcpLowLatency) {\n             /*\n              * This allows intermediate switches to shape IPC traffic\n              * differently from Shuffle/HDFS DataStreamer traffic.\n              *\n              * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n              *\n              * Prefer to optimize connect() speed \u0026 response latency over net\n              * throughput.\n              */\n             this.socket.setTrafficClass(0x04 | 0x10);\n             this.socket.setPerformancePreferences(1, 2, 0);\n           }\n \n           /*\n            * Bind the socket to the host specified in the principal name of the\n            * client, to ensure Server matching address of the client connection\n            * to host name in principal passed.\n            */\n           UserGroupInformation ticket \u003d remoteId.getTicket();\n           if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n             KerberosInfo krbInfo \u003d \n               remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n             if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n               String host \u003d \n                 SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n               \n               // If host name is a valid local address then bind socket to it\n               InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n               if (localAddr !\u003d null) {\n                 this.socket.setReuseAddress(true);\n                 this.socket.bind(new InetSocketAddress(localAddr, 0));\n               }\n             }\n           }\n           \n           NetUtils.connect(this.socket, server, connectionTimeout);\n-          if (rpcTimeout \u003e 0) {\n-            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n-          }\n-          this.socket.setSoTimeout(pingInterval);\n+          this.socket.setSoTimeout(soTimeout);\n           return;\n         } catch (ConnectTimeoutException toe) {\n           /* Check for an address change and update the local reference.\n            * Reset the failure counter if the address was changed\n            */\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionTimeout(timeoutFailures++,\n               maxRetriesOnSocketTimeouts, toe);\n         } catch (IOException ie) {\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionFailure(ioFailures++, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          this.socket.setKeepAlive(true);\n          \n          if (tcpLowLatency) {\n            /*\n             * This allows intermediate switches to shape IPC traffic\n             * differently from Shuffle/HDFS DataStreamer traffic.\n             *\n             * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n             *\n             * Prefer to optimize connect() speed \u0026 response latency over net\n             * throughput.\n             */\n            this.socket.setTrafficClass(0x04 | 0x10);\n            this.socket.setPerformancePreferences(1, 2, 0);\n          }\n\n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          UserGroupInformation ticket \u003d remoteId.getTicket();\n          if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n              String host \u003d \n                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n              \n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.setReuseAddress(true);\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          NetUtils.connect(this.socket, server, connectionTimeout);\n          this.socket.setSoTimeout(soTimeout);\n          return;\n        } catch (ConnectTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionTimeout(timeoutFailures++,\n              maxRetriesOnSocketTimeouts, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, ie);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "754299695b778b9b602e46836c35a3ac9474d7f8": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-12672. RPC timeout should not override IPC ping interval (iwasakims)\"\n\nThis reverts commit 682adc6ba9db3bed94fd4ea3d83761db6abfe695.\n",
      "commitDate": "11/03/16 9:00 AM",
      "commitName": "754299695b778b9b602e46836c35a3ac9474d7f8",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "10/03/16 10:03 PM",
      "commitNameOld": "682adc6ba9db3bed94fd4ea3d83761db6abfe695",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 0.46,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,68 @@\n     private synchronized void setupConnection() throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n           this.socket.setKeepAlive(true);\n           \n           if (tcpLowLatency) {\n             /*\n              * This allows intermediate switches to shape IPC traffic\n              * differently from Shuffle/HDFS DataStreamer traffic.\n              *\n              * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n              *\n              * Prefer to optimize connect() speed \u0026 response latency over net\n              * throughput.\n              */\n             this.socket.setTrafficClass(0x04 | 0x10);\n             this.socket.setPerformancePreferences(1, 2, 0);\n           }\n \n           /*\n            * Bind the socket to the host specified in the principal name of the\n            * client, to ensure Server matching address of the client connection\n            * to host name in principal passed.\n            */\n           UserGroupInformation ticket \u003d remoteId.getTicket();\n           if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n             KerberosInfo krbInfo \u003d \n               remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n             if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n               String host \u003d \n                 SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n               \n               // If host name is a valid local address then bind socket to it\n               InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n               if (localAddr !\u003d null) {\n                 this.socket.setReuseAddress(true);\n                 this.socket.bind(new InetSocketAddress(localAddr, 0));\n               }\n             }\n           }\n           \n           NetUtils.connect(this.socket, server, connectionTimeout);\n-          this.socket.setSoTimeout(soTimeout);\n+          if (rpcTimeout \u003e 0) {\n+            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n+          }\n+          this.socket.setSoTimeout(pingInterval);\n           return;\n         } catch (ConnectTimeoutException toe) {\n           /* Check for an address change and update the local reference.\n            * Reset the failure counter if the address was changed\n            */\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionTimeout(timeoutFailures++,\n               maxRetriesOnSocketTimeouts, toe);\n         } catch (IOException ie) {\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionFailure(ioFailures++, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          this.socket.setKeepAlive(true);\n          \n          if (tcpLowLatency) {\n            /*\n             * This allows intermediate switches to shape IPC traffic\n             * differently from Shuffle/HDFS DataStreamer traffic.\n             *\n             * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n             *\n             * Prefer to optimize connect() speed \u0026 response latency over net\n             * throughput.\n             */\n            this.socket.setTrafficClass(0x04 | 0x10);\n            this.socket.setPerformancePreferences(1, 2, 0);\n          }\n\n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          UserGroupInformation ticket \u003d remoteId.getTicket();\n          if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n              String host \u003d \n                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n              \n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.setReuseAddress(true);\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          NetUtils.connect(this.socket, server, connectionTimeout);\n          if (rpcTimeout \u003e 0) {\n            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n          }\n          this.socket.setSoTimeout(pingInterval);\n          return;\n        } catch (ConnectTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionTimeout(timeoutFailures++,\n              maxRetriesOnSocketTimeouts, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, ie);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "682adc6ba9db3bed94fd4ea3d83761db6abfe695": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12672. RPC timeout should not override IPC ping interval (iwasakims)\n",
      "commitDate": "10/03/16 10:03 PM",
      "commitName": "682adc6ba9db3bed94fd4ea3d83761db6abfe695",
      "commitAuthor": "Masatake Iwasaki",
      "commitDateOld": "12/01/16 10:46 AM",
      "commitNameOld": "30c7dfd8ba87fe1b455ad6c05c0a6cd6486f55b7",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 58.47,
      "commitsBetweenForRepo": 416,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,65 @@\n     private synchronized void setupConnection() throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n           this.socket.setKeepAlive(true);\n           \n           if (tcpLowLatency) {\n             /*\n              * This allows intermediate switches to shape IPC traffic\n              * differently from Shuffle/HDFS DataStreamer traffic.\n              *\n              * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n              *\n              * Prefer to optimize connect() speed \u0026 response latency over net\n              * throughput.\n              */\n             this.socket.setTrafficClass(0x04 | 0x10);\n             this.socket.setPerformancePreferences(1, 2, 0);\n           }\n \n           /*\n            * Bind the socket to the host specified in the principal name of the\n            * client, to ensure Server matching address of the client connection\n            * to host name in principal passed.\n            */\n           UserGroupInformation ticket \u003d remoteId.getTicket();\n           if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n             KerberosInfo krbInfo \u003d \n               remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n             if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n               String host \u003d \n                 SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n               \n               // If host name is a valid local address then bind socket to it\n               InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n               if (localAddr !\u003d null) {\n                 this.socket.setReuseAddress(true);\n                 this.socket.bind(new InetSocketAddress(localAddr, 0));\n               }\n             }\n           }\n           \n           NetUtils.connect(this.socket, server, connectionTimeout);\n-          if (rpcTimeout \u003e 0) {\n-            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n-          }\n-          this.socket.setSoTimeout(pingInterval);\n+          this.socket.setSoTimeout(soTimeout);\n           return;\n         } catch (ConnectTimeoutException toe) {\n           /* Check for an address change and update the local reference.\n            * Reset the failure counter if the address was changed\n            */\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionTimeout(timeoutFailures++,\n               maxRetriesOnSocketTimeouts, toe);\n         } catch (IOException ie) {\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionFailure(ioFailures++, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          this.socket.setKeepAlive(true);\n          \n          if (tcpLowLatency) {\n            /*\n             * This allows intermediate switches to shape IPC traffic\n             * differently from Shuffle/HDFS DataStreamer traffic.\n             *\n             * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n             *\n             * Prefer to optimize connect() speed \u0026 response latency over net\n             * throughput.\n             */\n            this.socket.setTrafficClass(0x04 | 0x10);\n            this.socket.setPerformancePreferences(1, 2, 0);\n          }\n\n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          UserGroupInformation ticket \u003d remoteId.getTicket();\n          if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n              String host \u003d \n                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n              \n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.setReuseAddress(true);\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          NetUtils.connect(this.socket, server, connectionTimeout);\n          this.socket.setSoTimeout(soTimeout);\n          return;\n        } catch (ConnectTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionTimeout(timeoutFailures++,\n              maxRetriesOnSocketTimeouts, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, ie);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "30c7dfd8ba87fe1b455ad6c05c0a6cd6486f55b7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12653. Use SO_REUSEADDR to avoid getting \"Address already in use\" when using kerberos and attempting to bind to any port on the local IP address (cmccabe)\n",
      "commitDate": "12/01/16 10:46 AM",
      "commitName": "30c7dfd8ba87fe1b455ad6c05c0a6cd6486f55b7",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "03/01/16 9:31 PM",
      "commitNameOld": "64ae85fd2ea91f46ab3b21f007befbeef8c3c947",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 8.55,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,68 @@\n     private synchronized void setupConnection() throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n           this.socket.setKeepAlive(true);\n           \n           if (tcpLowLatency) {\n             /*\n              * This allows intermediate switches to shape IPC traffic\n              * differently from Shuffle/HDFS DataStreamer traffic.\n              *\n              * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n              *\n              * Prefer to optimize connect() speed \u0026 response latency over net\n              * throughput.\n              */\n             this.socket.setTrafficClass(0x04 | 0x10);\n             this.socket.setPerformancePreferences(1, 2, 0);\n           }\n \n           /*\n            * Bind the socket to the host specified in the principal name of the\n            * client, to ensure Server matching address of the client connection\n            * to host name in principal passed.\n            */\n           UserGroupInformation ticket \u003d remoteId.getTicket();\n           if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n             KerberosInfo krbInfo \u003d \n               remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n             if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n               String host \u003d \n                 SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n               \n               // If host name is a valid local address then bind socket to it\n               InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n               if (localAddr !\u003d null) {\n+                this.socket.setReuseAddress(true);\n                 this.socket.bind(new InetSocketAddress(localAddr, 0));\n               }\n             }\n           }\n           \n           NetUtils.connect(this.socket, server, connectionTimeout);\n           if (rpcTimeout \u003e 0) {\n             pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n           }\n           this.socket.setSoTimeout(pingInterval);\n           return;\n         } catch (ConnectTimeoutException toe) {\n           /* Check for an address change and update the local reference.\n            * Reset the failure counter if the address was changed\n            */\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionTimeout(timeoutFailures++,\n               maxRetriesOnSocketTimeouts, toe);\n         } catch (IOException ie) {\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionFailure(ioFailures++, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          this.socket.setKeepAlive(true);\n          \n          if (tcpLowLatency) {\n            /*\n             * This allows intermediate switches to shape IPC traffic\n             * differently from Shuffle/HDFS DataStreamer traffic.\n             *\n             * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n             *\n             * Prefer to optimize connect() speed \u0026 response latency over net\n             * throughput.\n             */\n            this.socket.setTrafficClass(0x04 | 0x10);\n            this.socket.setPerformancePreferences(1, 2, 0);\n          }\n\n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          UserGroupInformation ticket \u003d remoteId.getTicket();\n          if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n              String host \u003d \n                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n              \n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.setReuseAddress(true);\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          NetUtils.connect(this.socket, server, connectionTimeout);\n          if (rpcTimeout \u003e 0) {\n            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n          }\n          this.socket.setSoTimeout(pingInterval);\n          return;\n        } catch (ConnectTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionTimeout(timeoutFailures++,\n              maxRetriesOnSocketTimeouts, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, ie);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "54639c7d7a34f4a46e8df50d57c79bab34b1ac07": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11226. Add a configuration to set ipc.Client\u0027s traffic class with IPTOS_LOWDELAY|IPTOS_RELIABILITY. Contributed by Gopal V.\n",
      "commitDate": "09/03/15 9:08 PM",
      "commitName": "54639c7d7a34f4a46e8df50d57c79bab34b1ac07",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "23/02/15 3:12 PM",
      "commitNameOld": "769507bd7a501929d9a2fd56c72c3f50673488a4",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 14.21,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,67 @@\n     private synchronized void setupConnection() throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n           this.socket.setKeepAlive(true);\n           \n+          if (tcpLowLatency) {\n+            /*\n+             * This allows intermediate switches to shape IPC traffic\n+             * differently from Shuffle/HDFS DataStreamer traffic.\n+             *\n+             * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n+             *\n+             * Prefer to optimize connect() speed \u0026 response latency over net\n+             * throughput.\n+             */\n+            this.socket.setTrafficClass(0x04 | 0x10);\n+            this.socket.setPerformancePreferences(1, 2, 0);\n+          }\n+\n           /*\n            * Bind the socket to the host specified in the principal name of the\n            * client, to ensure Server matching address of the client connection\n            * to host name in principal passed.\n            */\n           UserGroupInformation ticket \u003d remoteId.getTicket();\n           if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n             KerberosInfo krbInfo \u003d \n               remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n             if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n               String host \u003d \n                 SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n               \n               // If host name is a valid local address then bind socket to it\n               InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n               if (localAddr !\u003d null) {\n                 this.socket.bind(new InetSocketAddress(localAddr, 0));\n               }\n             }\n           }\n           \n           NetUtils.connect(this.socket, server, connectionTimeout);\n           if (rpcTimeout \u003e 0) {\n             pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n           }\n           this.socket.setSoTimeout(pingInterval);\n           return;\n         } catch (ConnectTimeoutException toe) {\n           /* Check for an address change and update the local reference.\n            * Reset the failure counter if the address was changed\n            */\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionTimeout(timeoutFailures++,\n               maxRetriesOnSocketTimeouts, toe);\n         } catch (IOException ie) {\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionFailure(ioFailures++, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          this.socket.setKeepAlive(true);\n          \n          if (tcpLowLatency) {\n            /*\n             * This allows intermediate switches to shape IPC traffic\n             * differently from Shuffle/HDFS DataStreamer traffic.\n             *\n             * IPTOS_RELIABILITY (0x04) | IPTOS_LOWDELAY (0x10)\n             *\n             * Prefer to optimize connect() speed \u0026 response latency over net\n             * throughput.\n             */\n            this.socket.setTrafficClass(0x04 | 0x10);\n            this.socket.setPerformancePreferences(1, 2, 0);\n          }\n\n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          UserGroupInformation ticket \u003d remoteId.getTicket();\n          if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n              String host \u003d \n                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n              \n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          NetUtils.connect(this.socket, server, connectionTimeout);\n          if (rpcTimeout \u003e 0) {\n            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n          }\n          this.socket.setSoTimeout(pingInterval);\n          return;\n        } catch (ConnectTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionTimeout(timeoutFailures++,\n              maxRetriesOnSocketTimeouts, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, ie);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "9aa2f51812e28c0f30299b17f6bbc181fbfa30d4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9898. Set SO_KEEPALIVE on all our sockets. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1537637 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/13 1:55 PM",
      "commitName": "9aa2f51812e28c0f30299b17f6bbc181fbfa30d4",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "04/09/13 3:34 AM",
      "commitNameOld": "0e0271b5fdf55c55b825e85c56639a4ae7277a39",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 57.43,
      "commitsBetweenForRepo": 387,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n     private synchronized void setupConnection() throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n+          this.socket.setKeepAlive(true);\n           \n           /*\n            * Bind the socket to the host specified in the principal name of the\n            * client, to ensure Server matching address of the client connection\n            * to host name in principal passed.\n            */\n           UserGroupInformation ticket \u003d remoteId.getTicket();\n           if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n             KerberosInfo krbInfo \u003d \n               remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n             if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n               String host \u003d \n                 SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n               \n               // If host name is a valid local address then bind socket to it\n               InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n               if (localAddr !\u003d null) {\n                 this.socket.bind(new InetSocketAddress(localAddr, 0));\n               }\n             }\n           }\n           \n           NetUtils.connect(this.socket, server, connectionTimeout);\n           if (rpcTimeout \u003e 0) {\n             pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n           }\n           this.socket.setSoTimeout(pingInterval);\n           return;\n         } catch (ConnectTimeoutException toe) {\n           /* Check for an address change and update the local reference.\n            * Reset the failure counter if the address was changed\n            */\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionTimeout(timeoutFailures++,\n               maxRetriesOnSocketTimeouts, toe);\n         } catch (IOException ie) {\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionFailure(ioFailures++, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          this.socket.setKeepAlive(true);\n          \n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          UserGroupInformation ticket \u003d remoteId.getTicket();\n          if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n              String host \u003d \n                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n              \n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          NetUtils.connect(this.socket, server, connectionTimeout);\n          if (rpcTimeout \u003e 0) {\n            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n          }\n          this.socket.setSoTimeout(pingInterval);\n          return;\n        } catch (ConnectTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionTimeout(timeoutFailures++,\n              maxRetriesOnSocketTimeouts, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, ie);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "65be21267587f04a2c33af65b951211cc9085b15": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9698. [RPC v9] Client must honor server\u0027s SASL negotiate response (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1508086 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/13 7:44 AM",
      "commitName": "65be21267587f04a2c33af65b951211cc9085b15",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "22/07/13 12:22 AM",
      "commitNameOld": "3eb61be352589491117ac2781bb18f55988a8084",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 7.31,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,52 @@\n     private synchronized void setupConnection() throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n           \n           /*\n            * Bind the socket to the host specified in the principal name of the\n            * client, to ensure Server matching address of the client connection\n            * to host name in principal passed.\n            */\n-          if (UserGroupInformation.isSecurityEnabled()) {\n+          UserGroupInformation ticket \u003d remoteId.getTicket();\n+          if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n             KerberosInfo krbInfo \u003d \n               remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n             if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n               String host \u003d \n                 SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n               \n               // If host name is a valid local address then bind socket to it\n               InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n               if (localAddr !\u003d null) {\n                 this.socket.bind(new InetSocketAddress(localAddr, 0));\n               }\n             }\n           }\n           \n           NetUtils.connect(this.socket, server, connectionTimeout);\n           if (rpcTimeout \u003e 0) {\n             pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n           }\n           this.socket.setSoTimeout(pingInterval);\n           return;\n         } catch (ConnectTimeoutException toe) {\n           /* Check for an address change and update the local reference.\n            * Reset the failure counter if the address was changed\n            */\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionTimeout(timeoutFailures++,\n               maxRetriesOnSocketTimeouts, toe);\n         } catch (IOException ie) {\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionFailure(ioFailures++, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          \n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          UserGroupInformation ticket \u003d remoteId.getTicket();\n          if (ticket !\u003d null \u0026\u0026 ticket.hasKerberosCredentials()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n              String host \u003d \n                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n              \n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          NetUtils.connect(this.socket, server, connectionTimeout);\n          if (rpcTimeout \u003e 0) {\n            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n          }\n          this.socket.setSoTimeout(pingInterval);\n          return;\n        } catch (ConnectTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionTimeout(timeoutFailures++,\n              maxRetriesOnSocketTimeouts, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, ie);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "5a0b74663951475f668c7c68b9902c2bb54dc861": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4404. Create file failure when the machine of first attempted NameNode is down. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1442461 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/02/13 7:18 PM",
      "commitName": "5a0b74663951475f668c7c68b9902c2bb54dc861",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "15/01/13 3:54 PM",
      "commitNameOld": "06f086dd23a654a56c949b3e5437dc7f839ae91d",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 20.14,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     private synchronized void setupConnection() throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n           \n           /*\n            * Bind the socket to the host specified in the principal name of the\n            * client, to ensure Server matching address of the client connection\n            * to host name in principal passed.\n            */\n           if (UserGroupInformation.isSecurityEnabled()) {\n             KerberosInfo krbInfo \u003d \n               remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n             if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n               String host \u003d \n                 SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n               \n               // If host name is a valid local address then bind socket to it\n               InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n               if (localAddr !\u003d null) {\n                 this.socket.bind(new InetSocketAddress(localAddr, 0));\n               }\n             }\n           }\n           \n           NetUtils.connect(this.socket, server, connectionTimeout);\n           if (rpcTimeout \u003e 0) {\n             pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n           }\n           this.socket.setSoTimeout(pingInterval);\n           return;\n-        } catch (SocketTimeoutException toe) {\n+        } catch (ConnectTimeoutException toe) {\n           /* Check for an address change and update the local reference.\n            * Reset the failure counter if the address was changed\n            */\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n-          handleConnectionFailure(timeoutFailures++,\n+          handleConnectionTimeout(timeoutFailures++,\n               maxRetriesOnSocketTimeouts, toe);\n         } catch (IOException ie) {\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionFailure(ioFailures++, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          \n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          if (UserGroupInformation.isSecurityEnabled()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n              String host \u003d \n                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n              \n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          NetUtils.connect(this.socket, server, connectionTimeout);\n          if (rpcTimeout \u003e 0) {\n            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n          }\n          this.socket.setSoTimeout(pingInterval);\n          return;\n        } catch (ConnectTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionTimeout(timeoutFailures++,\n              maxRetriesOnSocketTimeouts, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, ie);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "06f086dd23a654a56c949b3e5437dc7f839ae91d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9106. Allow configuration of IPC connect timeout. Contributed by Rober Parker.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1433747 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/01/13 3:54 PM",
      "commitName": "06f086dd23a654a56c949b3e5437dc7f839ae91d",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "17/12/12 2:16 PM",
      "commitNameOld": "aa4fe26a01d2ca881cb458d49032ce419351bed1",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 29.07,
      "commitsBetweenForRepo": 141,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,51 @@\n     private synchronized void setupConnection() throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n           \n           /*\n            * Bind the socket to the host specified in the principal name of the\n            * client, to ensure Server matching address of the client connection\n            * to host name in principal passed.\n            */\n           if (UserGroupInformation.isSecurityEnabled()) {\n             KerberosInfo krbInfo \u003d \n               remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n             if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n               String host \u003d \n                 SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n               \n               // If host name is a valid local address then bind socket to it\n               InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n               if (localAddr !\u003d null) {\n                 this.socket.bind(new InetSocketAddress(localAddr, 0));\n               }\n             }\n           }\n           \n-          // connection time out is 20s\n-          NetUtils.connect(this.socket, server, 20000);\n+          NetUtils.connect(this.socket, server, connectionTimeout);\n           if (rpcTimeout \u003e 0) {\n             pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n           }\n           this.socket.setSoTimeout(pingInterval);\n           return;\n         } catch (SocketTimeoutException toe) {\n           /* Check for an address change and update the local reference.\n            * Reset the failure counter if the address was changed\n            */\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionFailure(timeoutFailures++,\n               maxRetriesOnSocketTimeouts, toe);\n         } catch (IOException ie) {\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionFailure(ioFailures++, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          \n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          if (UserGroupInformation.isSecurityEnabled()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n              String host \u003d \n                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n              \n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          NetUtils.connect(this.socket, server, connectionTimeout);\n          if (rpcTimeout \u003e 0) {\n            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n          }\n          this.socket.setSoTimeout(pingInterval);\n          return;\n        } catch (SocketTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(timeoutFailures++,\n              maxRetriesOnSocketTimeouts, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, ie);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "45fafc2b8fc1aab0a082600b0d50ad693491ea70": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3504. Support configurable retry policy in DFSClient for RPC connections and RPC calls, and add MultipleLinearRandomRetry, a new retry policy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349124 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/12 10:27 PM",
      "commitName": "45fafc2b8fc1aab0a082600b0d50ad693491ea70",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "11/05/12 9:56 AM",
      "commitNameOld": "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 31.52,
      "commitsBetweenForRepo": 149,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n     private synchronized void setupConnection() throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n           \n           /*\n            * Bind the socket to the host specified in the principal name of the\n            * client, to ensure Server matching address of the client connection\n            * to host name in principal passed.\n            */\n           if (UserGroupInformation.isSecurityEnabled()) {\n             KerberosInfo krbInfo \u003d \n               remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n             if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n               String host \u003d \n                 SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n               \n               // If host name is a valid local address then bind socket to it\n               InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n               if (localAddr !\u003d null) {\n                 this.socket.bind(new InetSocketAddress(localAddr, 0));\n               }\n             }\n           }\n           \n           // connection time out is 20s\n           NetUtils.connect(this.socket, server, 20000);\n           if (rpcTimeout \u003e 0) {\n             pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n           }\n           this.socket.setSoTimeout(pingInterval);\n           return;\n         } catch (SocketTimeoutException toe) {\n           /* Check for an address change and update the local reference.\n            * Reset the failure counter if the address was changed\n            */\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionFailure(timeoutFailures++,\n               maxRetriesOnSocketTimeouts, toe);\n         } catch (IOException ie) {\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n-          handleConnectionFailure(ioFailures++, maxRetries, ie);\n+          handleConnectionFailure(ioFailures++, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          \n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          if (UserGroupInformation.isSecurityEnabled()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n              String host \u003d \n                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n              \n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          // connection time out is 20s\n          NetUtils.connect(this.socket, server, 20000);\n          if (rpcTimeout \u003e 0) {\n            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n          }\n          this.socket.setSoTimeout(pingInterval);\n          return;\n        } catch (SocketTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(timeoutFailures++,\n              maxRetriesOnSocketTimeouts, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, ie);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "009dfed8d7b3056cd8915f74d84dc06850cb8a05": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7932. Make client connection retries on socket time outs configurable. Contributed by Uma Maheswara Rao G.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1220957 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/12/11 1:32 PM",
      "commitName": "009dfed8d7b3056cd8915f74d84dc06850cb8a05",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "04/12/11 12:44 PM",
      "commitNameOld": "65200998c01b17e017d1814e8b1f4d82ac334a23",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 15.03,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,52 @@\n     private synchronized void setupConnection() throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n           \n           /*\n            * Bind the socket to the host specified in the principal name of the\n            * client, to ensure Server matching address of the client connection\n            * to host name in principal passed.\n            */\n           if (UserGroupInformation.isSecurityEnabled()) {\n             KerberosInfo krbInfo \u003d \n               remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n             if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n               String host \u003d \n                 SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n               \n               // If host name is a valid local address then bind socket to it\n               InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n               if (localAddr !\u003d null) {\n                 this.socket.bind(new InetSocketAddress(localAddr, 0));\n               }\n             }\n           }\n           \n           // connection time out is 20s\n           NetUtils.connect(this.socket, server, 20000);\n           if (rpcTimeout \u003e 0) {\n             pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n           }\n           this.socket.setSoTimeout(pingInterval);\n           return;\n         } catch (SocketTimeoutException toe) {\n           /* Check for an address change and update the local reference.\n            * Reset the failure counter if the address was changed\n            */\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n-          /*\n-           * The max number of retries is 45, which amounts to 20s*45 \u003d 15\n-           * minutes retries.\n-           */\n-          handleConnectionFailure(timeoutFailures++, 45, toe);\n+          handleConnectionFailure(timeoutFailures++,\n+              maxRetriesOnSocketTimeouts, toe);\n         } catch (IOException ie) {\n           if (updateAddress()) {\n             timeoutFailures \u003d ioFailures \u003d 0;\n           }\n           handleConnectionFailure(ioFailures++, maxRetries, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          \n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          if (UserGroupInformation.isSecurityEnabled()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n              String host \u003d \n                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n              \n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          // connection time out is 20s\n          NetUtils.connect(this.socket, server, 20000);\n          if (rpcTimeout \u003e 0) {\n            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n          }\n          this.socket.setSoTimeout(pingInterval);\n          return;\n        } catch (SocketTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(timeoutFailures++,\n              maxRetriesOnSocketTimeouts, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, maxRetries, ie);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          \n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          if (UserGroupInformation.isSecurityEnabled()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n              String host \u003d \n                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n              \n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          // connection time out is 20s\n          NetUtils.connect(this.socket, server, 20000);\n          if (rpcTimeout \u003e 0) {\n            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n          }\n          this.socket.setSoTimeout(pingInterval);\n          return;\n        } catch (SocketTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          /*\n           * The max number of retries is 45, which amounts to 20s*45 \u003d 15\n           * minutes retries.\n           */\n          handleConnectionFailure(timeoutFailures++, 45, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, maxRetries, ie);\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "2a990ed646b12e53a302dbc08b2f2e3606a98296": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7472. RPC client should deal with IP address change. Contributed by Kihwal Lee.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1156350 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/08/11 1:22 PM",
      "commitName": "2a990ed646b12e53a302dbc08b2f2e3606a98296",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "02/08/11 9:37 AM",
      "commitNameOld": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 8.16,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,55 @@\n     private synchronized void setupConnection() throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n           \n           /*\n            * Bind the socket to the host specified in the principal name of the\n            * client, to ensure Server matching address of the client connection\n            * to host name in principal passed.\n            */\n           if (UserGroupInformation.isSecurityEnabled()) {\n             KerberosInfo krbInfo \u003d \n               remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n             if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n               String host \u003d \n                 SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n               \n               // If host name is a valid local address then bind socket to it\n               InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n               if (localAddr !\u003d null) {\n                 this.socket.bind(new InetSocketAddress(localAddr, 0));\n               }\n             }\n           }\n           \n           // connection time out is 20s\n-          NetUtils.connect(this.socket, remoteId.getAddress(), 20000);\n+          NetUtils.connect(this.socket, server, 20000);\n           if (rpcTimeout \u003e 0) {\n             pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n           }\n           this.socket.setSoTimeout(pingInterval);\n           return;\n         } catch (SocketTimeoutException toe) {\n+          /* Check for an address change and update the local reference.\n+           * Reset the failure counter if the address was changed\n+           */\n+          if (updateAddress()) {\n+            timeoutFailures \u003d ioFailures \u003d 0;\n+          }\n           /*\n            * The max number of retries is 45, which amounts to 20s*45 \u003d 15\n            * minutes retries.\n            */\n           handleConnectionFailure(timeoutFailures++, 45, toe);\n         } catch (IOException ie) {\n+          if (updateAddress()) {\n+            timeoutFailures \u003d ioFailures \u003d 0;\n+          }\n           handleConnectionFailure(ioFailures++, maxRetries, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          \n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          if (UserGroupInformation.isSecurityEnabled()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n              String host \u003d \n                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n              \n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          // connection time out is 20s\n          NetUtils.connect(this.socket, server, 20000);\n          if (rpcTimeout \u003e 0) {\n            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n          }\n          this.socket.setSoTimeout(pingInterval);\n          return;\n        } catch (SocketTimeoutException toe) {\n          /* Check for an address change and update the local reference.\n           * Reset the failure counter if the address was changed\n           */\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          /*\n           * The max number of retries is 45, which amounts to 20s*45 \u003d 15\n           * minutes retries.\n           */\n          handleConnectionFailure(timeoutFailures++, 45, toe);\n        } catch (IOException ie) {\n          if (updateAddress()) {\n            timeoutFailures \u003d ioFailures \u003d 0;\n          }\n          handleConnectionFailure(ioFailures++, maxRetries, ie);\n        }\n      }\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          \n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          if (UserGroupInformation.isSecurityEnabled()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n              String host \u003d \n                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n              \n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          // connection time out is 20s\n          NetUtils.connect(this.socket, remoteId.getAddress(), 20000);\n          if (rpcTimeout \u003e 0) {\n            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n          }\n          this.socket.setSoTimeout(pingInterval);\n          return;\n        } catch (SocketTimeoutException toe) {\n          /*\n           * The max number of retries is 45, which amounts to 20s*45 \u003d 15\n           * minutes retries.\n           */\n          handleConnectionFailure(timeoutFailures++, 45, toe);\n        } catch (IOException ie) {\n          handleConnectionFailure(ioFailures++, maxRetries, ie);\n        }\n      }\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          \n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          if (UserGroupInformation.isSecurityEnabled()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n              String host \u003d \n                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n              \n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          // connection time out is 20s\n          NetUtils.connect(this.socket, remoteId.getAddress(), 20000);\n          if (rpcTimeout \u003e 0) {\n            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n          }\n          this.socket.setSoTimeout(pingInterval);\n          return;\n        } catch (SocketTimeoutException toe) {\n          /*\n           * The max number of retries is 45, which amounts to 20s*45 \u003d 15\n           * minutes retries.\n           */\n          handleConnectionFailure(timeoutFailures++, 45, toe);\n        } catch (IOException ie) {\n          handleConnectionFailure(ioFailures++, maxRetries, ie);\n        }\n      }\n    }",
      "path": "common/src/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "common/src/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "67c79a25200daf803c62f298d6ff3ab884ab6928": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7215. RPC clients must use network interface corresponding to the host in the client\u0027s kerberos principal key. Contributed by Suresh Srinivas.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1087844 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/11 11:38 AM",
      "commitName": "67c79a25200daf803c62f298d6ff3ab884ab6928",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "14/01/11 6:40 PM",
      "commitNameOld": "c3fdd289cf26fa3bb9c0d2d9f906eba769ddd789",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 76.67,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,46 @@\n     private synchronized void setupConnection() throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n+          \n+          /*\n+           * Bind the socket to the host specified in the principal name of the\n+           * client, to ensure Server matching address of the client connection\n+           * to host name in principal passed.\n+           */\n+          if (UserGroupInformation.isSecurityEnabled()) {\n+            KerberosInfo krbInfo \u003d \n+              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n+            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n+              String host \u003d \n+                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n+              \n+              // If host name is a valid local address then bind socket to it\n+              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n+              if (localAddr !\u003d null) {\n+                this.socket.bind(new InetSocketAddress(localAddr, 0));\n+              }\n+            }\n+          }\n+          \n           // connection time out is 20s\n           NetUtils.connect(this.socket, remoteId.getAddress(), 20000);\n           if (rpcTimeout \u003e 0) {\n             pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n           }\n           this.socket.setSoTimeout(pingInterval);\n           return;\n         } catch (SocketTimeoutException toe) {\n           /*\n            * The max number of retries is 45, which amounts to 20s*45 \u003d 15\n            * minutes retries.\n            */\n           handleConnectionFailure(timeoutFailures++, 45, toe);\n         } catch (IOException ie) {\n           handleConnectionFailure(ioFailures++, maxRetries, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          \n          /*\n           * Bind the socket to the host specified in the principal name of the\n           * client, to ensure Server matching address of the client connection\n           * to host name in principal passed.\n           */\n          if (UserGroupInformation.isSecurityEnabled()) {\n            KerberosInfo krbInfo \u003d \n              remoteId.getProtocol().getAnnotation(KerberosInfo.class);\n            if (krbInfo !\u003d null \u0026\u0026 krbInfo.clientPrincipal() !\u003d null) {\n              String host \u003d \n                SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());\n              \n              // If host name is a valid local address then bind socket to it\n              InetAddress localAddr \u003d NetUtils.getLocalInetAddress(host);\n              if (localAddr !\u003d null) {\n                this.socket.bind(new InetSocketAddress(localAddr, 0));\n              }\n            }\n          }\n          \n          // connection time out is 20s\n          NetUtils.connect(this.socket, remoteId.getAddress(), 20000);\n          if (rpcTimeout \u003e 0) {\n            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n          }\n          this.socket.setSoTimeout(pingInterval);\n          return;\n        } catch (SocketTimeoutException toe) {\n          /*\n           * The max number of retries is 45, which amounts to 20s*45 \u003d 15\n           * minutes retries.\n           */\n          handleConnectionFailure(timeoutFailures++, 45, toe);\n        } catch (IOException ie) {\n          handleConnectionFailure(ioFailures++, maxRetries, ie);\n        }\n      }\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "714e5f7165b101f72a43e8c3fb27be5def93fe42": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6889. Make RPC to have an option to timeout. Contributed by Hairong Kuang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@982681 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/08/10 9:39 AM",
      "commitName": "714e5f7165b101f72a43e8c3fb27be5def93fe42",
      "commitAuthor": "Hairong Kuang",
      "commitDateOld": "02/08/10 5:51 PM",
      "commitNameOld": "c47d34a8660923f6f6e21e91aa48ca5780c0ff9f",
      "commitAuthorOld": "Devaraj Das",
      "daysBetweenCommits": 2.66,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,25 @@\n     private synchronized void setupConnection() throws IOException {\n       short ioFailures \u003d 0;\n       short timeoutFailures \u003d 0;\n       while (true) {\n         try {\n           this.socket \u003d socketFactory.createSocket();\n           this.socket.setTcpNoDelay(tcpNoDelay);\n           // connection time out is 20s\n           NetUtils.connect(this.socket, remoteId.getAddress(), 20000);\n+          if (rpcTimeout \u003e 0) {\n+            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n+          }\n           this.socket.setSoTimeout(pingInterval);\n           return;\n         } catch (SocketTimeoutException toe) {\n           /*\n            * The max number of retries is 45, which amounts to 20s*45 \u003d 15\n            * minutes retries.\n            */\n           handleConnectionFailure(timeoutFailures++, 45, toe);\n         } catch (IOException ie) {\n           handleConnectionFailure(ioFailures++, maxRetries, ie);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          // connection time out is 20s\n          NetUtils.connect(this.socket, remoteId.getAddress(), 20000);\n          if (rpcTimeout \u003e 0) {\n            pingInterval \u003d rpcTimeout;  // rpcTimeout overwrites pingInterval\n          }\n          this.socket.setSoTimeout(pingInterval);\n          return;\n        } catch (SocketTimeoutException toe) {\n          /*\n           * The max number of retries is 45, which amounts to 20s*45 \u003d 15\n           * minutes retries.\n           */\n          handleConnectionFailure(timeoutFailures++, 45, toe);\n        } catch (IOException ie) {\n          handleConnectionFailure(ioFailures++, maxRetries, ie);\n        }\n      }\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "c47d34a8660923f6f6e21e91aa48ca5780c0ff9f": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6706. Improves the sasl failure handling due to expired tickets, and other server detected failures. Contributed by Jitendra Pandey and Devaraj Das.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@981714 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/10 5:51 PM",
      "commitName": "c47d34a8660923f6f6e21e91aa48ca5780c0ff9f",
      "commitAuthor": "Devaraj Das",
      "diff": "@@ -0,0 +1,22 @@\n+    private synchronized void setupConnection() throws IOException {\n+      short ioFailures \u003d 0;\n+      short timeoutFailures \u003d 0;\n+      while (true) {\n+        try {\n+          this.socket \u003d socketFactory.createSocket();\n+          this.socket.setTcpNoDelay(tcpNoDelay);\n+          // connection time out is 20s\n+          NetUtils.connect(this.socket, remoteId.getAddress(), 20000);\n+          this.socket.setSoTimeout(pingInterval);\n+          return;\n+        } catch (SocketTimeoutException toe) {\n+          /*\n+           * The max number of retries is 45, which amounts to 20s*45 \u003d 15\n+           * minutes retries.\n+           */\n+          handleConnectionFailure(timeoutFailures++, 45, toe);\n+        } catch (IOException ie) {\n+          handleConnectionFailure(ioFailures++, maxRetries, ie);\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void setupConnection() throws IOException {\n      short ioFailures \u003d 0;\n      short timeoutFailures \u003d 0;\n      while (true) {\n        try {\n          this.socket \u003d socketFactory.createSocket();\n          this.socket.setTcpNoDelay(tcpNoDelay);\n          // connection time out is 20s\n          NetUtils.connect(this.socket, remoteId.getAddress(), 20000);\n          this.socket.setSoTimeout(pingInterval);\n          return;\n        } catch (SocketTimeoutException toe) {\n          /*\n           * The max number of retries is 45, which amounts to 20s*45 \u003d 15\n           * minutes retries.\n           */\n          handleConnectionFailure(timeoutFailures++, 45, toe);\n        } catch (IOException ie) {\n          handleConnectionFailure(ioFailures++, maxRetries, ie);\n        }\n      }\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Client.java"
    }
  }
}