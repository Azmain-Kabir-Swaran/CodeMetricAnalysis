{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DAGAMSimulator.java",
  "functionName": "sendContainerRequest",
  "functionId": "sendContainerRequest",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/DAGAMSimulator.java",
  "functionStartLine": 199,
  "functionEndLine": 243,
  "numCommitsSeen": 2,
  "timeTaken": 549,
  "changeHistory": [
    "16576fde8e3697025e1d37a4c21f8ad904208f8e"
  ],
  "changeHistoryShort": {
    "16576fde8e3697025e1d37a4c21f8ad904208f8e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "16576fde8e3697025e1d37a4c21f8ad904208f8e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9754. Add support for arbitrary DAG AM Simulator. Contributed by Abhishek Modi.\n",
      "commitDate": "28/08/19 11:13 PM",
      "commitName": "16576fde8e3697025e1d37a4c21f8ad904208f8e",
      "commitAuthor": "Abhishek Modi",
      "diff": "@@ -0,0 +1,45 @@\n+  protected void sendContainerRequest() throws Exception {\n+    if (isFinished) {\n+      return;\n+    }\n+    // send out request\n+    List\u003cResourceRequest\u003e ask \u003d null;\n+    if (finishedContainers !\u003d totalContainers) {\n+      if (!pendingContainers.isEmpty()) {\n+        List\u003cContainerSimulator\u003e toBeScheduled \u003d\n+            getToBeScheduledContainers(pendingContainers, amStartTime);\n+        if (toBeScheduled.size() \u003e 0) {\n+          ask \u003d packageRequests(toBeScheduled, PRIORITY);\n+          LOG.info(\"Application {} sends out request for {} containers.\",\n+              appId, toBeScheduled.size());\n+          scheduledContainers.addAll(toBeScheduled);\n+          pendingContainers.removeAll(toBeScheduled);\n+          toBeScheduled.clear();\n+        }\n+      }\n+    }\n+\n+    if (ask \u003d\u003d null) {\n+      ask \u003d new ArrayList\u003c\u003e();\n+    }\n+\n+    final AllocateRequest request \u003d createAllocateRequest(ask);\n+    if (totalContainers \u003d\u003d 0) {\n+      request.setProgress(1.0f);\n+    } else {\n+      request.setProgress((float) finishedContainers / totalContainers);\n+    }\n+\n+    UserGroupInformation ugi \u003d\n+        UserGroupInformation.createRemoteUser(appAttemptId.toString());\n+    Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps()\n+        .get(appAttemptId.getApplicationId())\n+        .getRMAppAttempt(appAttemptId).getAMRMToken();\n+    ugi.addTokenIdentifier(token.decodeIdentifier());\n+    AllocateResponse response \u003d ugi.doAs(\n+        (PrivilegedExceptionAction\u003cAllocateResponse\u003e) () -\u003e rm\n+            .getApplicationMasterService().allocate(request));\n+    if (response !\u003d null) {\n+      responseQueue.put(response);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void sendContainerRequest() throws Exception {\n    if (isFinished) {\n      return;\n    }\n    // send out request\n    List\u003cResourceRequest\u003e ask \u003d null;\n    if (finishedContainers !\u003d totalContainers) {\n      if (!pendingContainers.isEmpty()) {\n        List\u003cContainerSimulator\u003e toBeScheduled \u003d\n            getToBeScheduledContainers(pendingContainers, amStartTime);\n        if (toBeScheduled.size() \u003e 0) {\n          ask \u003d packageRequests(toBeScheduled, PRIORITY);\n          LOG.info(\"Application {} sends out request for {} containers.\",\n              appId, toBeScheduled.size());\n          scheduledContainers.addAll(toBeScheduled);\n          pendingContainers.removeAll(toBeScheduled);\n          toBeScheduled.clear();\n        }\n      }\n    }\n\n    if (ask \u003d\u003d null) {\n      ask \u003d new ArrayList\u003c\u003e();\n    }\n\n    final AllocateRequest request \u003d createAllocateRequest(ask);\n    if (totalContainers \u003d\u003d 0) {\n      request.setProgress(1.0f);\n    } else {\n      request.setProgress((float) finishedContainers / totalContainers);\n    }\n\n    UserGroupInformation ugi \u003d\n        UserGroupInformation.createRemoteUser(appAttemptId.toString());\n    Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps()\n        .get(appAttemptId.getApplicationId())\n        .getRMAppAttempt(appAttemptId).getAMRMToken();\n    ugi.addTokenIdentifier(token.decodeIdentifier());\n    AllocateResponse response \u003d ugi.doAs(\n        (PrivilegedExceptionAction\u003cAllocateResponse\u003e) () -\u003e rm\n            .getApplicationMasterService().allocate(request));\n    if (response !\u003d null) {\n      responseQueue.put(response);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/DAGAMSimulator.java"
    }
  }
}