{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractJavaKeyStoreProvider.java",
  "functionName": "getCredentialEntry",
  "functionId": "getCredentialEntry___alias-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/AbstractJavaKeyStoreProvider.java",
  "functionStartLine": 170,
  "functionEndLine": 194,
  "numCommitsSeen": 13,
  "timeTaken": 1708,
  "changeHistory": [
    "fbf55dcaf45285e1795cb107e7846799e4042b0b",
    "860b8373c3a851386b8cd2d4265dd35e5aabc941",
    "c79728478caadd8374bce2bc3f466db1da1e3ad1"
  ],
  "changeHistoryShort": {
    "fbf55dcaf45285e1795cb107e7846799e4042b0b": "Ybodychange",
    "860b8373c3a851386b8cd2d4265dd35e5aabc941": "Ymultichange(Ymovefromfile,Ybodychange)",
    "c79728478caadd8374bce2bc3f466db1da1e3ad1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fbf55dcaf45285e1795cb107e7846799e4042b0b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12076. Incomplete Cache Mechanism in CredentialProvider API. Contributed by Larry McCay.\n",
      "commitDate": "16/06/15 2:44 PM",
      "commitName": "fbf55dcaf45285e1795cb107e7846799e4042b0b",
      "commitAuthor": "cnauroth",
      "commitDateOld": "05/06/15 1:11 PM",
      "commitNameOld": "2dbc40e6086026ef02747223982aa68f2d328ade",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 11.06,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,25 @@\n   public CredentialEntry getCredentialEntry(String alias)\n       throws IOException {\n     readLock.lock();\n     try {\n       SecretKeySpec key \u003d null;\n       try {\n-        if (cache.containsKey(alias)) {\n-          return cache.get(alias);\n-        }\n         if (!keyStore.containsAlias(alias)) {\n           return null;\n         }\n         key \u003d (SecretKeySpec) keyStore.getKey(alias, password);\n       } catch (KeyStoreException e) {\n         throw new IOException(\"Can\u0027t get credential \" + alias + \" from \"\n             + getPathAsString(), e);\n       } catch (NoSuchAlgorithmException e) {\n         throw new IOException(\"Can\u0027t get algorithm for credential \" + alias\n             + \" from \" + getPathAsString(), e);\n       } catch (UnrecoverableKeyException e) {\n         throw new IOException(\"Can\u0027t recover credential \" + alias + \" from \"\n             + getPathAsString(), e);\n       }\n       return new CredentialEntry(alias, bytesToChars(key.getEncoded()));\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CredentialEntry getCredentialEntry(String alias)\n      throws IOException {\n    readLock.lock();\n    try {\n      SecretKeySpec key \u003d null;\n      try {\n        if (!keyStore.containsAlias(alias)) {\n          return null;\n        }\n        key \u003d (SecretKeySpec) keyStore.getKey(alias, password);\n      } catch (KeyStoreException e) {\n        throw new IOException(\"Can\u0027t get credential \" + alias + \" from \"\n            + getPathAsString(), e);\n      } catch (NoSuchAlgorithmException e) {\n        throw new IOException(\"Can\u0027t get algorithm for credential \" + alias\n            + \" from \" + getPathAsString(), e);\n      } catch (UnrecoverableKeyException e) {\n        throw new IOException(\"Can\u0027t recover credential \" + alias + \" from \"\n            + getPathAsString(), e);\n      }\n      return new CredentialEntry(alias, bytesToChars(key.getEncoded()));\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/AbstractJavaKeyStoreProvider.java",
      "extendedDetails": {}
    },
    "860b8373c3a851386b8cd2d4265dd35e5aabc941": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HADOOP-11934. Use of JavaKeyStoreProvider in LdapGroupsMapping causes infinite loop. Contributed by Larry McCay.\n",
      "commitDate": "28/05/15 3:01 PM",
      "commitName": "860b8373c3a851386b8cd2d4265dd35e5aabc941",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-11934. Use of JavaKeyStoreProvider in LdapGroupsMapping causes infinite loop. Contributed by Larry McCay.\n",
          "commitDate": "28/05/15 3:01 PM",
          "commitName": "860b8373c3a851386b8cd2d4265dd35e5aabc941",
          "commitAuthor": "cnauroth",
          "commitDateOld": "28/05/15 1:24 PM",
          "commitNameOld": "ae1454342064c71f414d20ad0885e60a335c7420",
          "commitAuthorOld": "Allen Wittenauer",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n-  public CredentialEntry getCredentialEntry(String alias) throws IOException {\n+  public CredentialEntry getCredentialEntry(String alias)\n+      throws IOException {\n     readLock.lock();\n     try {\n       SecretKeySpec key \u003d null;\n       try {\n         if (cache.containsKey(alias)) {\n           return cache.get(alias);\n         }\n         if (!keyStore.containsAlias(alias)) {\n           return null;\n         }\n         key \u003d (SecretKeySpec) keyStore.getKey(alias, password);\n       } catch (KeyStoreException e) {\n-        throw new IOException(\"Can\u0027t get credential \" + alias + \" from \" +\n-                              path, e);\n+        throw new IOException(\"Can\u0027t get credential \" + alias + \" from \"\n+            + getPathAsString(), e);\n       } catch (NoSuchAlgorithmException e) {\n-        throw new IOException(\"Can\u0027t get algorithm for credential \" + alias + \" from \" +\n-                              path, e);\n+        throw new IOException(\"Can\u0027t get algorithm for credential \" + alias\n+            + \" from \" + getPathAsString(), e);\n       } catch (UnrecoverableKeyException e) {\n-        throw new IOException(\"Can\u0027t recover credential \" + alias + \" from \" + path, e);\n+        throw new IOException(\"Can\u0027t recover credential \" + alias + \" from \"\n+            + getPathAsString(), e);\n       }\n       return new CredentialEntry(alias, bytesToChars(key.getEncoded()));\n-    } \n-    finally {\n+    } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CredentialEntry getCredentialEntry(String alias)\n      throws IOException {\n    readLock.lock();\n    try {\n      SecretKeySpec key \u003d null;\n      try {\n        if (cache.containsKey(alias)) {\n          return cache.get(alias);\n        }\n        if (!keyStore.containsAlias(alias)) {\n          return null;\n        }\n        key \u003d (SecretKeySpec) keyStore.getKey(alias, password);\n      } catch (KeyStoreException e) {\n        throw new IOException(\"Can\u0027t get credential \" + alias + \" from \"\n            + getPathAsString(), e);\n      } catch (NoSuchAlgorithmException e) {\n        throw new IOException(\"Can\u0027t get algorithm for credential \" + alias\n            + \" from \" + getPathAsString(), e);\n      } catch (UnrecoverableKeyException e) {\n        throw new IOException(\"Can\u0027t recover credential \" + alias + \" from \"\n            + getPathAsString(), e);\n      }\n      return new CredentialEntry(alias, bytesToChars(key.getEncoded()));\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/AbstractJavaKeyStoreProvider.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/JavaKeyStoreProvider.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/AbstractJavaKeyStoreProvider.java",
            "oldMethodName": "getCredentialEntry",
            "newMethodName": "getCredentialEntry"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11934. Use of JavaKeyStoreProvider in LdapGroupsMapping causes infinite loop. Contributed by Larry McCay.\n",
          "commitDate": "28/05/15 3:01 PM",
          "commitName": "860b8373c3a851386b8cd2d4265dd35e5aabc941",
          "commitAuthor": "cnauroth",
          "commitDateOld": "28/05/15 1:24 PM",
          "commitNameOld": "ae1454342064c71f414d20ad0885e60a335c7420",
          "commitAuthorOld": "Allen Wittenauer",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n-  public CredentialEntry getCredentialEntry(String alias) throws IOException {\n+  public CredentialEntry getCredentialEntry(String alias)\n+      throws IOException {\n     readLock.lock();\n     try {\n       SecretKeySpec key \u003d null;\n       try {\n         if (cache.containsKey(alias)) {\n           return cache.get(alias);\n         }\n         if (!keyStore.containsAlias(alias)) {\n           return null;\n         }\n         key \u003d (SecretKeySpec) keyStore.getKey(alias, password);\n       } catch (KeyStoreException e) {\n-        throw new IOException(\"Can\u0027t get credential \" + alias + \" from \" +\n-                              path, e);\n+        throw new IOException(\"Can\u0027t get credential \" + alias + \" from \"\n+            + getPathAsString(), e);\n       } catch (NoSuchAlgorithmException e) {\n-        throw new IOException(\"Can\u0027t get algorithm for credential \" + alias + \" from \" +\n-                              path, e);\n+        throw new IOException(\"Can\u0027t get algorithm for credential \" + alias\n+            + \" from \" + getPathAsString(), e);\n       } catch (UnrecoverableKeyException e) {\n-        throw new IOException(\"Can\u0027t recover credential \" + alias + \" from \" + path, e);\n+        throw new IOException(\"Can\u0027t recover credential \" + alias + \" from \"\n+            + getPathAsString(), e);\n       }\n       return new CredentialEntry(alias, bytesToChars(key.getEncoded()));\n-    } \n-    finally {\n+    } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CredentialEntry getCredentialEntry(String alias)\n      throws IOException {\n    readLock.lock();\n    try {\n      SecretKeySpec key \u003d null;\n      try {\n        if (cache.containsKey(alias)) {\n          return cache.get(alias);\n        }\n        if (!keyStore.containsAlias(alias)) {\n          return null;\n        }\n        key \u003d (SecretKeySpec) keyStore.getKey(alias, password);\n      } catch (KeyStoreException e) {\n        throw new IOException(\"Can\u0027t get credential \" + alias + \" from \"\n            + getPathAsString(), e);\n      } catch (NoSuchAlgorithmException e) {\n        throw new IOException(\"Can\u0027t get algorithm for credential \" + alias\n            + \" from \" + getPathAsString(), e);\n      } catch (UnrecoverableKeyException e) {\n        throw new IOException(\"Can\u0027t recover credential \" + alias + \" from \"\n            + getPathAsString(), e);\n      }\n      return new CredentialEntry(alias, bytesToChars(key.getEncoded()));\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/AbstractJavaKeyStoreProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "c79728478caadd8374bce2bc3f466db1da1e3ad1": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10607. Create API to separate credential/password storage from\napplications. (Larry McCay via omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603491 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/14 8:45 AM",
      "commitName": "c79728478caadd8374bce2bc3f466db1da1e3ad1",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,27 @@\n+  public CredentialEntry getCredentialEntry(String alias) throws IOException {\n+    readLock.lock();\n+    try {\n+      SecretKeySpec key \u003d null;\n+      try {\n+        if (cache.containsKey(alias)) {\n+          return cache.get(alias);\n+        }\n+        if (!keyStore.containsAlias(alias)) {\n+          return null;\n+        }\n+        key \u003d (SecretKeySpec) keyStore.getKey(alias, password);\n+      } catch (KeyStoreException e) {\n+        throw new IOException(\"Can\u0027t get credential \" + alias + \" from \" +\n+                              path, e);\n+      } catch (NoSuchAlgorithmException e) {\n+        throw new IOException(\"Can\u0027t get algorithm for credential \" + alias + \" from \" +\n+                              path, e);\n+      } catch (UnrecoverableKeyException e) {\n+        throw new IOException(\"Can\u0027t recover credential \" + alias + \" from \" + path, e);\n+      }\n+      return new CredentialEntry(alias, bytesToChars(key.getEncoded()));\n+    } \n+    finally {\n+      readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public CredentialEntry getCredentialEntry(String alias) throws IOException {\n    readLock.lock();\n    try {\n      SecretKeySpec key \u003d null;\n      try {\n        if (cache.containsKey(alias)) {\n          return cache.get(alias);\n        }\n        if (!keyStore.containsAlias(alias)) {\n          return null;\n        }\n        key \u003d (SecretKeySpec) keyStore.getKey(alias, password);\n      } catch (KeyStoreException e) {\n        throw new IOException(\"Can\u0027t get credential \" + alias + \" from \" +\n                              path, e);\n      } catch (NoSuchAlgorithmException e) {\n        throw new IOException(\"Can\u0027t get algorithm for credential \" + alias + \" from \" +\n                              path, e);\n      } catch (UnrecoverableKeyException e) {\n        throw new IOException(\"Can\u0027t recover credential \" + alias + \" from \" + path, e);\n      }\n      return new CredentialEntry(alias, bytesToChars(key.getEncoded()));\n    } \n    finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/JavaKeyStoreProvider.java"
    }
  }
}