{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "upgradePrecheck",
  "functionId": "upgradePrecheck___service-Service",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 236,
  "functionEndLine": 291,
  "numCommitsSeen": 53,
  "timeTaken": 1729,
  "changeHistory": [
    "66f059ed1db93c0a86e86c64636013001169a677",
    "e557c6bd8de2811a561210f672f47b4d07a9d5c6"
  ],
  "changeHistoryShort": {
    "66f059ed1db93c0a86e86c64636013001169a677": "Ybodychange",
    "e557c6bd8de2811a561210f672f47b4d07a9d5c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "66f059ed1db93c0a86e86c64636013001169a677": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8618. Added detection for non-upgradable service.\n           Contributed by Chandni Singh\n",
      "commitDate": "18/10/18 4:59 PM",
      "commitName": "66f059ed1db93c0a86e86c64636013001169a677",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "26/09/18 11:51 AM",
      "commitNameOld": "913f87dada27776c539dfb352400ecf8d40e7943",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 22.21,
      "commitsBetweenForRepo": 234,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,56 @@\n   private ApplicationReport upgradePrecheck(Service service)\n       throws YarnException, IOException {\n     boolean upgradeEnabled \u003d getConfig().getBoolean(\n         YARN_SERVICE_UPGRADE_ENABLED, YARN_SERVICE_UPGRADE_ENABLED_DEFAULT);\n     if (!upgradeEnabled) {\n       throw new YarnException(ErrorStrings.SERVICE_UPGRADE_DISABLED);\n     }\n     Service persistedService \u003d ServiceApiUtil.loadService(fs,\n         service.getName());\n     if (!StringUtils.isEmpty(persistedService.getId())) {\n       cachedAppInfo.put(persistedService.getName(),\n           new AppInfo(ApplicationId.fromString(persistedService.getId()),\n               persistedService.getKerberosPrincipal().getPrincipalName()));\n     }\n \n     if (persistedService.getVersion().equals(service.getVersion())) {\n       String message \u003d service.getName() + \" is already at version \"\n           + service.getVersion() + \". There is nothing to upgrade.\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n-\n+    boolean foundNotNeverComp \u003d false;\n+    for (Component comp : persistedService.getComponents()) {\n+      // If restart policy of any component is not NEVER then upgrade is\n+      // allowed.\n+      if (!comp.getRestartPolicy().equals(Component.RestartPolicyEnum.NEVER)) {\n+        foundNotNeverComp \u003d true;\n+        break;\n+      }\n+    }\n+    if (!foundNotNeverComp) {\n+      String message \u003d \"All the components of the service \" + service.getName()\n+          + \" have \" + Component.RestartPolicyEnum.NEVER + \" restart policy, \" +\n+          \"so it cannot be upgraded.\";\n+      LOG.error(message);\n+      throw new YarnException(message);\n+    }\n     Service liveService \u003d getStatus(service.getName());\n     if (!liveService.getState().equals(ServiceState.STABLE)) {\n       String message \u003d service.getName() + \" is at \" + liveService.getState()\n           + \" state and upgrade can only be initiated when service is STABLE.\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n \n     Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n     ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n     ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n \n     ApplicationReport appReport \u003d yarnClient\n         .getApplicationReport(getAppId(service.getName()));\n     if (StringUtils.isEmpty(appReport.getHost())) {\n       throw new YarnException(service.getName() + \" AM hostname is empty\");\n     }\n     return appReport;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ApplicationReport upgradePrecheck(Service service)\n      throws YarnException, IOException {\n    boolean upgradeEnabled \u003d getConfig().getBoolean(\n        YARN_SERVICE_UPGRADE_ENABLED, YARN_SERVICE_UPGRADE_ENABLED_DEFAULT);\n    if (!upgradeEnabled) {\n      throw new YarnException(ErrorStrings.SERVICE_UPGRADE_DISABLED);\n    }\n    Service persistedService \u003d ServiceApiUtil.loadService(fs,\n        service.getName());\n    if (!StringUtils.isEmpty(persistedService.getId())) {\n      cachedAppInfo.put(persistedService.getName(),\n          new AppInfo(ApplicationId.fromString(persistedService.getId()),\n              persistedService.getKerberosPrincipal().getPrincipalName()));\n    }\n\n    if (persistedService.getVersion().equals(service.getVersion())) {\n      String message \u003d service.getName() + \" is already at version \"\n          + service.getVersion() + \". There is nothing to upgrade.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    boolean foundNotNeverComp \u003d false;\n    for (Component comp : persistedService.getComponents()) {\n      // If restart policy of any component is not NEVER then upgrade is\n      // allowed.\n      if (!comp.getRestartPolicy().equals(Component.RestartPolicyEnum.NEVER)) {\n        foundNotNeverComp \u003d true;\n        break;\n      }\n    }\n    if (!foundNotNeverComp) {\n      String message \u003d \"All the components of the service \" + service.getName()\n          + \" have \" + Component.RestartPolicyEnum.NEVER + \" restart policy, \" +\n          \"so it cannot be upgraded.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    Service liveService \u003d getStatus(service.getName());\n    if (!liveService.getState().equals(ServiceState.STABLE)) {\n      String message \u003d service.getName() + \" is at \" + liveService.getState()\n          + \" state and upgrade can only be initiated when service is STABLE.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n\n    ApplicationReport appReport \u003d yarnClient\n        .getApplicationReport(getAppId(service.getName()));\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(service.getName() + \" AM hostname is empty\");\n    }\n    return appReport;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "e557c6bd8de2811a561210f672f47b4d07a9d5c6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8298.  Added express upgrade for YARN service.\n            Contributed by Chandni Singh\n",
      "commitDate": "21/08/18 4:49 PM",
      "commitName": "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,41 @@\n+  private ApplicationReport upgradePrecheck(Service service)\n+      throws YarnException, IOException {\n+    boolean upgradeEnabled \u003d getConfig().getBoolean(\n+        YARN_SERVICE_UPGRADE_ENABLED, YARN_SERVICE_UPGRADE_ENABLED_DEFAULT);\n+    if (!upgradeEnabled) {\n+      throw new YarnException(ErrorStrings.SERVICE_UPGRADE_DISABLED);\n+    }\n+    Service persistedService \u003d ServiceApiUtil.loadService(fs,\n+        service.getName());\n+    if (!StringUtils.isEmpty(persistedService.getId())) {\n+      cachedAppInfo.put(persistedService.getName(),\n+          new AppInfo(ApplicationId.fromString(persistedService.getId()),\n+              persistedService.getKerberosPrincipal().getPrincipalName()));\n+    }\n+\n+    if (persistedService.getVersion().equals(service.getVersion())) {\n+      String message \u003d service.getName() + \" is already at version \"\n+          + service.getVersion() + \". There is nothing to upgrade.\";\n+      LOG.error(message);\n+      throw new YarnException(message);\n+    }\n+\n+    Service liveService \u003d getStatus(service.getName());\n+    if (!liveService.getState().equals(ServiceState.STABLE)) {\n+      String message \u003d service.getName() + \" is at \" + liveService.getState()\n+          + \" state and upgrade can only be initiated when service is STABLE.\";\n+      LOG.error(message);\n+      throw new YarnException(message);\n+    }\n+\n+    Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n+    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n+    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n+\n+    ApplicationReport appReport \u003d yarnClient\n+        .getApplicationReport(getAppId(service.getName()));\n+    if (StringUtils.isEmpty(appReport.getHost())) {\n+      throw new YarnException(service.getName() + \" AM hostname is empty\");\n+    }\n+    return appReport;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ApplicationReport upgradePrecheck(Service service)\n      throws YarnException, IOException {\n    boolean upgradeEnabled \u003d getConfig().getBoolean(\n        YARN_SERVICE_UPGRADE_ENABLED, YARN_SERVICE_UPGRADE_ENABLED_DEFAULT);\n    if (!upgradeEnabled) {\n      throw new YarnException(ErrorStrings.SERVICE_UPGRADE_DISABLED);\n    }\n    Service persistedService \u003d ServiceApiUtil.loadService(fs,\n        service.getName());\n    if (!StringUtils.isEmpty(persistedService.getId())) {\n      cachedAppInfo.put(persistedService.getName(),\n          new AppInfo(ApplicationId.fromString(persistedService.getId()),\n              persistedService.getKerberosPrincipal().getPrincipalName()));\n    }\n\n    if (persistedService.getVersion().equals(service.getVersion())) {\n      String message \u003d service.getName() + \" is already at version \"\n          + service.getVersion() + \". There is nothing to upgrade.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    Service liveService \u003d getStatus(service.getName());\n    if (!liveService.getState().equals(ServiceState.STABLE)) {\n      String message \u003d service.getName() + \" is at \" + liveService.getState()\n          + \" state and upgrade can only be initiated when service is STABLE.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n\n    ApplicationReport appReport \u003d yarnClient\n        .getApplicationReport(getAppId(service.getName()));\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(service.getName() + \" AM hostname is empty\");\n    }\n    return appReport;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}