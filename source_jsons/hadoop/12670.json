{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Mover.java",
  "functionName": "scheduleMoveReplica",
  "functionId": "scheduleMoveReplica___db-DBlock__source-Source__targetTypes-List__StorageType__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
  "functionStartLine": 467,
  "functionEndLine": 499,
  "numCommitsSeen": 57,
  "timeTaken": 2533,
  "changeHistory": [
    "e24a923db50879f7dbe5d2afac0e6757089fb07d",
    "058af60c56207907f2bedf76df4284e86d923e0c",
    "a26aa6bd0716da89853566961390d711511084e3",
    "5d5aae0694bc27df5b9fa50819854cd3050a8658"
  ],
  "changeHistoryShort": {
    "e24a923db50879f7dbe5d2afac0e6757089fb07d": "Ybodychange",
    "058af60c56207907f2bedf76df4284e86d923e0c": "Ybodychange",
    "a26aa6bd0716da89853566961390d711511084e3": "Ymultichange(Yparameterchange,Ybodychange)",
    "5d5aae0694bc27df5b9fa50819854cd3050a8658": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e24a923db50879f7dbe5d2afac0e6757089fb07d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11164: Mover should avoid unnecessary retries if the block is pinned. Contributed by Rakesh R\n",
      "commitDate": "13/12/16 5:09 PM",
      "commitName": "e24a923db50879f7dbe5d2afac0e6757089fb07d",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "23/11/16 4:42 PM",
      "commitNameOld": "de4894936a5b581572f35fa5b8979d9f23da0891",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 20.02,
      "commitsBetweenForRepo": 123,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,33 @@\n     boolean scheduleMoveReplica(DBlock db, Source source,\n         List\u003cStorageType\u003e targetTypes) {\n       // Match storage on the same node\n       if (chooseTargetInSameNode(db, source, targetTypes)) {\n         return true;\n       }\n \n+      // Check the given block is pinned in the source datanode. A pinned block\n+      // can\u0027t be moved to a different datanode. So we can skip adding these\n+      // blocks to different nodes.\n+      long blockId \u003d db.getBlock().getBlockId();\n+      if (excludedPinnedBlocks.containsKey(blockId)) {\n+        Set\u003cDatanodeInfo\u003e locs \u003d excludedPinnedBlocks.get(blockId);\n+        for (DatanodeInfo dn : locs) {\n+          if (source.getDatanodeInfo().equals(dn)) {\n+            return false;\n+          }\n+        }\n+      }\n+\n       if (dispatcher.getCluster().isNodeGroupAware()) {\n         if (chooseTarget(db, source, targetTypes, Matcher.SAME_NODE_GROUP)) {\n           return true;\n         }\n       }\n       \n       // Then, match nodes on the same rack\n       if (chooseTarget(db, source, targetTypes, Matcher.SAME_RACK)) {\n         return true;\n       }\n       // At last, match all remaining nodes\n       return chooseTarget(db, source, targetTypes, Matcher.ANY_OTHER);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    boolean scheduleMoveReplica(DBlock db, Source source,\n        List\u003cStorageType\u003e targetTypes) {\n      // Match storage on the same node\n      if (chooseTargetInSameNode(db, source, targetTypes)) {\n        return true;\n      }\n\n      // Check the given block is pinned in the source datanode. A pinned block\n      // can\u0027t be moved to a different datanode. So we can skip adding these\n      // blocks to different nodes.\n      long blockId \u003d db.getBlock().getBlockId();\n      if (excludedPinnedBlocks.containsKey(blockId)) {\n        Set\u003cDatanodeInfo\u003e locs \u003d excludedPinnedBlocks.get(blockId);\n        for (DatanodeInfo dn : locs) {\n          if (source.getDatanodeInfo().equals(dn)) {\n            return false;\n          }\n        }\n      }\n\n      if (dispatcher.getCluster().isNodeGroupAware()) {\n        if (chooseTarget(db, source, targetTypes, Matcher.SAME_NODE_GROUP)) {\n          return true;\n        }\n      }\n      \n      // Then, match nodes on the same rack\n      if (chooseTarget(db, source, targetTypes, Matcher.SAME_RACK)) {\n        return true;\n      }\n      // At last, match all remaining nodes\n      return chooseTarget(db, source, targetTypes, Matcher.ANY_OTHER);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
      "extendedDetails": {}
    },
    "058af60c56207907f2bedf76df4284e86d923e0c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7310. Mover can give first priority to local DN if it has target storage type available in local DN. (Vinayakumar B via umamahesh)\n",
      "commitDate": "26/11/14 9:57 AM",
      "commitName": "058af60c56207907f2bedf76df4284e86d923e0c",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "30/09/14 6:05 PM",
      "commitNameOld": "dde2ed13c24e8906ee135719342acf9faea59ade",
      "commitAuthorOld": "",
      "daysBetweenCommits": 56.7,
      "commitsBetweenForRepo": 505,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,20 @@\n     boolean scheduleMoveReplica(DBlock db, Source source,\n         List\u003cStorageType\u003e targetTypes) {\n+      // Match storage on the same node\n+      if (chooseTargetInSameNode(db, source, targetTypes)) {\n+        return true;\n+      }\n+\n       if (dispatcher.getCluster().isNodeGroupAware()) {\n         if (chooseTarget(db, source, targetTypes, Matcher.SAME_NODE_GROUP)) {\n           return true;\n         }\n       }\n       \n       // Then, match nodes on the same rack\n       if (chooseTarget(db, source, targetTypes, Matcher.SAME_RACK)) {\n         return true;\n       }\n       // At last, match all remaining nodes\n       return chooseTarget(db, source, targetTypes, Matcher.ANY_OTHER);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    boolean scheduleMoveReplica(DBlock db, Source source,\n        List\u003cStorageType\u003e targetTypes) {\n      // Match storage on the same node\n      if (chooseTargetInSameNode(db, source, targetTypes)) {\n        return true;\n      }\n\n      if (dispatcher.getCluster().isNodeGroupAware()) {\n        if (chooseTarget(db, source, targetTypes, Matcher.SAME_NODE_GROUP)) {\n          return true;\n        }\n      }\n      \n      // Then, match nodes on the same rack\n      if (chooseTarget(db, source, targetTypes, Matcher.SAME_RACK)) {\n        return true;\n      }\n      // At last, match all remaining nodes\n      return chooseTarget(db, source, targetTypes, Matcher.ANY_OTHER);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
      "extendedDetails": {}
    },
    "a26aa6bd0716da89853566961390d711511084e3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6944. Archival Storage: add retry and termination logic for Mover. Contributed by Jing Zhao.\n",
      "commitDate": "27/08/14 2:20 PM",
      "commitName": "a26aa6bd0716da89853566961390d711511084e3",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6944. Archival Storage: add retry and termination logic for Mover. Contributed by Jing Zhao.\n",
          "commitDate": "27/08/14 2:20 PM",
          "commitName": "a26aa6bd0716da89853566961390d711511084e3",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "27/08/14 10:38 AM",
          "commitNameOld": "8ea20b53a861a2771c206afaacf8e7783568c4b1",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,15 @@\n-    boolean scheduleMoveReplica(DBlock db, MLocation ml, Source source,\n+    boolean scheduleMoveReplica(DBlock db, Source source,\n         List\u003cStorageType\u003e targetTypes) {\n       if (dispatcher.getCluster().isNodeGroupAware()) {\n-        if (chooseTarget(db, ml, source, targetTypes, Matcher.SAME_NODE_GROUP)) {\n+        if (chooseTarget(db, source, targetTypes, Matcher.SAME_NODE_GROUP)) {\n           return true;\n         }\n       }\n       \n       // Then, match nodes on the same rack\n-      if (chooseTarget(db, ml, source, targetTypes, Matcher.SAME_RACK)) {\n+      if (chooseTarget(db, source, targetTypes, Matcher.SAME_RACK)) {\n         return true;\n       }\n       // At last, match all remaining nodes\n-      if (chooseTarget(db, ml, source, targetTypes, Matcher.ANY_OTHER)) {\n-        return true;\n-      }\n-      return false;\n+      return chooseTarget(db, source, targetTypes, Matcher.ANY_OTHER);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    boolean scheduleMoveReplica(DBlock db, Source source,\n        List\u003cStorageType\u003e targetTypes) {\n      if (dispatcher.getCluster().isNodeGroupAware()) {\n        if (chooseTarget(db, source, targetTypes, Matcher.SAME_NODE_GROUP)) {\n          return true;\n        }\n      }\n      \n      // Then, match nodes on the same rack\n      if (chooseTarget(db, source, targetTypes, Matcher.SAME_RACK)) {\n        return true;\n      }\n      // At last, match all remaining nodes\n      return chooseTarget(db, source, targetTypes, Matcher.ANY_OTHER);\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
          "extendedDetails": {
            "oldValue": "[db-DBlock, ml-MLocation, source-Source, targetTypes-List\u003cStorageType\u003e]",
            "newValue": "[db-DBlock, source-Source, targetTypes-List\u003cStorageType\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6944. Archival Storage: add retry and termination logic for Mover. Contributed by Jing Zhao.\n",
          "commitDate": "27/08/14 2:20 PM",
          "commitName": "a26aa6bd0716da89853566961390d711511084e3",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "27/08/14 10:38 AM",
          "commitNameOld": "8ea20b53a861a2771c206afaacf8e7783568c4b1",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,15 @@\n-    boolean scheduleMoveReplica(DBlock db, MLocation ml, Source source,\n+    boolean scheduleMoveReplica(DBlock db, Source source,\n         List\u003cStorageType\u003e targetTypes) {\n       if (dispatcher.getCluster().isNodeGroupAware()) {\n-        if (chooseTarget(db, ml, source, targetTypes, Matcher.SAME_NODE_GROUP)) {\n+        if (chooseTarget(db, source, targetTypes, Matcher.SAME_NODE_GROUP)) {\n           return true;\n         }\n       }\n       \n       // Then, match nodes on the same rack\n-      if (chooseTarget(db, ml, source, targetTypes, Matcher.SAME_RACK)) {\n+      if (chooseTarget(db, source, targetTypes, Matcher.SAME_RACK)) {\n         return true;\n       }\n       // At last, match all remaining nodes\n-      if (chooseTarget(db, ml, source, targetTypes, Matcher.ANY_OTHER)) {\n-        return true;\n-      }\n-      return false;\n+      return chooseTarget(db, source, targetTypes, Matcher.ANY_OTHER);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    boolean scheduleMoveReplica(DBlock db, Source source,\n        List\u003cStorageType\u003e targetTypes) {\n      if (dispatcher.getCluster().isNodeGroupAware()) {\n        if (chooseTarget(db, source, targetTypes, Matcher.SAME_NODE_GROUP)) {\n          return true;\n        }\n      }\n      \n      // Then, match nodes on the same rack\n      if (chooseTarget(db, source, targetTypes, Matcher.SAME_RACK)) {\n        return true;\n      }\n      // At last, match all remaining nodes\n      return chooseTarget(db, source, targetTypes, Matcher.ANY_OTHER);\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
          "extendedDetails": {}
        }
      ]
    },
    "5d5aae0694bc27df5b9fa50819854cd3050a8658": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6801. Archival Storage: Add a new data migration tool. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1618675 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/14 10:51 AM",
      "commitName": "5d5aae0694bc27df5b9fa50819854cd3050a8658",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,18 @@\n+    boolean scheduleMoveReplica(DBlock db, MLocation ml, Source source,\n+        List\u003cStorageType\u003e targetTypes) {\n+      if (dispatcher.getCluster().isNodeGroupAware()) {\n+        if (chooseTarget(db, ml, source, targetTypes, Matcher.SAME_NODE_GROUP)) {\n+          return true;\n+        }\n+      }\n+      \n+      // Then, match nodes on the same rack\n+      if (chooseTarget(db, ml, source, targetTypes, Matcher.SAME_RACK)) {\n+        return true;\n+      }\n+      // At last, match all remaining nodes\n+      if (chooseTarget(db, ml, source, targetTypes, Matcher.ANY_OTHER)) {\n+        return true;\n+      }\n+      return false;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    boolean scheduleMoveReplica(DBlock db, MLocation ml, Source source,\n        List\u003cStorageType\u003e targetTypes) {\n      if (dispatcher.getCluster().isNodeGroupAware()) {\n        if (chooseTarget(db, ml, source, targetTypes, Matcher.SAME_NODE_GROUP)) {\n          return true;\n        }\n      }\n      \n      // Then, match nodes on the same rack\n      if (chooseTarget(db, ml, source, targetTypes, Matcher.SAME_RACK)) {\n        return true;\n      }\n      // At last, match all remaining nodes\n      if (chooseTarget(db, ml, source, targetTypes, Matcher.ANY_OTHER)) {\n        return true;\n      }\n      return false;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java"
    }
  }
}