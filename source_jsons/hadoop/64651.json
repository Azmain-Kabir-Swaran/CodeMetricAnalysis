{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AFileSystem.java",
  "functionName": "mkdirs",
  "functionId": "mkdirs___path-Path__permission-FsPermission",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
  "functionStartLine": 2699,
  "functionEndLine": 2706,
  "numCommitsSeen": 169,
  "timeTaken": 5260,
  "changeHistory": [
    "39ec1515a205952eda7e171408a8b83eceb4abde",
    "27c4e90efce04e1b1302f668b5eb22412e00d033",
    "6ba52d88ec11444cbac946ffadbc645acd0657de",
    "24d920b80eb3626073925a1d0b6dcf148add8cc0"
  ],
  "changeHistoryShort": {
    "39ec1515a205952eda7e171408a8b83eceb4abde": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "27c4e90efce04e1b1302f668b5eb22412e00d033": "Ybodychange",
    "6ba52d88ec11444cbac946ffadbc645acd0657de": "Ybodychange",
    "24d920b80eb3626073925a1d0b6dcf148add8cc0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39ec1515a205952eda7e171408a8b83eceb4abde": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-13130. s3a failures can surface as RTEs, not IOEs. (Steve Loughran)\n",
      "commitDate": "21/05/16 8:39 AM",
      "commitName": "39ec1515a205952eda7e171408a8b83eceb4abde",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13130. s3a failures can surface as RTEs, not IOEs. (Steve Loughran)\n",
          "commitDate": "21/05/16 8:39 AM",
          "commitName": "39ec1515a205952eda7e171408a8b83eceb4abde",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "20/05/16 5:52 AM",
          "commitNameOld": "757050ff355d40bc28f9dbfd0c0083c5f337d270",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 1.12,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,8 @@\n-  public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n-    LOG.debug(\"Making directory: {}\", f);\n-\n+  public boolean mkdirs(Path path, FsPermission permission) throws IOException,\n+      FileAlreadyExistsException {\n     try {\n-      FileStatus fileStatus \u003d getFileStatus(f);\n-\n-      if (fileStatus.isDirectory()) {\n-        return true;\n-      } else {\n-        throw new FileAlreadyExistsException(\"Path is a file: \" + f);\n-      }\n-    } catch (FileNotFoundException e) {\n-      Path fPart \u003d f;\n-      do {\n-        try {\n-          FileStatus fileStatus \u003d getFileStatus(fPart);\n-          if (fileStatus.isFile()) {\n-            throw new FileAlreadyExistsException(String.format(\n-                \"Can\u0027t make directory for path \u0027%s\u0027 since it is a file.\",\n-                fPart));\n-          }\n-        } catch (FileNotFoundException fnfe) {\n-          instrumentation.errorIgnored();\n-        }\n-        fPart \u003d fPart.getParent();\n-      } while (fPart !\u003d null);\n-\n-      String key \u003d pathToKey(f);\n-      createFakeDirectory(bucket, key);\n-      return true;\n+      return innerMkdirs(path, permission);\n+    } catch (AmazonClientException e) {\n+      throw translateException(\"innerMkdirs\", path, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean mkdirs(Path path, FsPermission permission) throws IOException,\n      FileAlreadyExistsException {\n    try {\n      return innerMkdirs(path, permission);\n    } catch (AmazonClientException e) {\n      throw translateException(\"innerMkdirs\", path, e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[f-Path, permission-FsPermission]",
            "newValue": "[path-Path, permission-FsPermission]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-13130. s3a failures can surface as RTEs, not IOEs. (Steve Loughran)\n",
          "commitDate": "21/05/16 8:39 AM",
          "commitName": "39ec1515a205952eda7e171408a8b83eceb4abde",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "20/05/16 5:52 AM",
          "commitNameOld": "757050ff355d40bc28f9dbfd0c0083c5f337d270",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 1.12,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,8 @@\n-  public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n-    LOG.debug(\"Making directory: {}\", f);\n-\n+  public boolean mkdirs(Path path, FsPermission permission) throws IOException,\n+      FileAlreadyExistsException {\n     try {\n-      FileStatus fileStatus \u003d getFileStatus(f);\n-\n-      if (fileStatus.isDirectory()) {\n-        return true;\n-      } else {\n-        throw new FileAlreadyExistsException(\"Path is a file: \" + f);\n-      }\n-    } catch (FileNotFoundException e) {\n-      Path fPart \u003d f;\n-      do {\n-        try {\n-          FileStatus fileStatus \u003d getFileStatus(fPart);\n-          if (fileStatus.isFile()) {\n-            throw new FileAlreadyExistsException(String.format(\n-                \"Can\u0027t make directory for path \u0027%s\u0027 since it is a file.\",\n-                fPart));\n-          }\n-        } catch (FileNotFoundException fnfe) {\n-          instrumentation.errorIgnored();\n-        }\n-        fPart \u003d fPart.getParent();\n-      } while (fPart !\u003d null);\n-\n-      String key \u003d pathToKey(f);\n-      createFakeDirectory(bucket, key);\n-      return true;\n+      return innerMkdirs(path, permission);\n+    } catch (AmazonClientException e) {\n+      throw translateException(\"innerMkdirs\", path, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean mkdirs(Path path, FsPermission permission) throws IOException,\n      FileAlreadyExistsException {\n    try {\n      return innerMkdirs(path, permission);\n    } catch (AmazonClientException e) {\n      throw translateException(\"innerMkdirs\", path, e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[IOException, FileAlreadyExistsException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13130. s3a failures can surface as RTEs, not IOEs. (Steve Loughran)\n",
          "commitDate": "21/05/16 8:39 AM",
          "commitName": "39ec1515a205952eda7e171408a8b83eceb4abde",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "20/05/16 5:52 AM",
          "commitNameOld": "757050ff355d40bc28f9dbfd0c0083c5f337d270",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 1.12,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,8 @@\n-  public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n-    LOG.debug(\"Making directory: {}\", f);\n-\n+  public boolean mkdirs(Path path, FsPermission permission) throws IOException,\n+      FileAlreadyExistsException {\n     try {\n-      FileStatus fileStatus \u003d getFileStatus(f);\n-\n-      if (fileStatus.isDirectory()) {\n-        return true;\n-      } else {\n-        throw new FileAlreadyExistsException(\"Path is a file: \" + f);\n-      }\n-    } catch (FileNotFoundException e) {\n-      Path fPart \u003d f;\n-      do {\n-        try {\n-          FileStatus fileStatus \u003d getFileStatus(fPart);\n-          if (fileStatus.isFile()) {\n-            throw new FileAlreadyExistsException(String.format(\n-                \"Can\u0027t make directory for path \u0027%s\u0027 since it is a file.\",\n-                fPart));\n-          }\n-        } catch (FileNotFoundException fnfe) {\n-          instrumentation.errorIgnored();\n-        }\n-        fPart \u003d fPart.getParent();\n-      } while (fPart !\u003d null);\n-\n-      String key \u003d pathToKey(f);\n-      createFakeDirectory(bucket, key);\n-      return true;\n+      return innerMkdirs(path, permission);\n+    } catch (AmazonClientException e) {\n+      throw translateException(\"innerMkdirs\", path, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean mkdirs(Path path, FsPermission permission) throws IOException,\n      FileAlreadyExistsException {\n    try {\n      return innerMkdirs(path, permission);\n    } catch (AmazonClientException e) {\n      throw translateException(\"innerMkdirs\", path, e);\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "27c4e90efce04e1b1302f668b5eb22412e00d033": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13028 add low level counter metrics for S3A; use in read performance tests. contributed by: stevel\npatch includes\nHADOOP-12844 Recover when S3A fails on IOException in read()\nHADOOP-13058 S3A FS fails during init against a read-only FS if multipart purge\nHADOOP-13047 S3a Forward seek in stream length to be configurable\n",
      "commitDate": "12/05/16 11:24 AM",
      "commitName": "27c4e90efce04e1b1302f668b5eb22412e00d033",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "12/05/16 5:57 AM",
      "commitNameOld": "def2a6d3856452d5c804f04e5bf485541a3bc53a",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,32 @@\n   public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Making directory: \" + f);\n-    }\n-\n+    LOG.debug(\"Making directory: {}\", f);\n \n     try {\n       FileStatus fileStatus \u003d getFileStatus(f);\n \n       if (fileStatus.isDirectory()) {\n         return true;\n       } else {\n         throw new FileAlreadyExistsException(\"Path is a file: \" + f);\n       }\n     } catch (FileNotFoundException e) {\n       Path fPart \u003d f;\n       do {\n         try {\n           FileStatus fileStatus \u003d getFileStatus(fPart);\n           if (fileStatus.isFile()) {\n             throw new FileAlreadyExistsException(String.format(\n                 \"Can\u0027t make directory for path \u0027%s\u0027 since it is a file.\",\n                 fPart));\n           }\n         } catch (FileNotFoundException fnfe) {\n+          instrumentation.errorIgnored();\n         }\n         fPart \u003d fPart.getParent();\n       } while (fPart !\u003d null);\n \n       String key \u003d pathToKey(f);\n       createFakeDirectory(bucket, key);\n       return true;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n    LOG.debug(\"Making directory: {}\", f);\n\n    try {\n      FileStatus fileStatus \u003d getFileStatus(f);\n\n      if (fileStatus.isDirectory()) {\n        return true;\n      } else {\n        throw new FileAlreadyExistsException(\"Path is a file: \" + f);\n      }\n    } catch (FileNotFoundException e) {\n      Path fPart \u003d f;\n      do {\n        try {\n          FileStatus fileStatus \u003d getFileStatus(fPart);\n          if (fileStatus.isFile()) {\n            throw new FileAlreadyExistsException(String.format(\n                \"Can\u0027t make directory for path \u0027%s\u0027 since it is a file.\",\n                fPart));\n          }\n        } catch (FileNotFoundException fnfe) {\n          instrumentation.errorIgnored();\n        }\n        fPart \u003d fPart.getParent();\n      } while (fPart !\u003d null);\n\n      String key \u003d pathToKey(f);\n      createFakeDirectory(bucket, key);\n      return true;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "6ba52d88ec11444cbac946ffadbc645acd0657de": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10714. AmazonS3Client.deleteObjects() need to be limited to 1000 entries per call. Contributed by Juan Yu.\n",
      "commitDate": "05/11/14 5:17 PM",
      "commitName": "6ba52d88ec11444cbac946ffadbc645acd0657de",
      "commitAuthor": "Aaron T. Myers",
      "commitDateOld": "15/09/14 4:49 PM",
      "commitNameOld": "0ac760a58d96b36ab30e9d60679bbea6365ef120",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 51.06,
      "commitsBetweenForRepo": 536,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,34 @@\n   public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n-    LOG.info(\"Making directory: \" + f);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Making directory: \" + f);\n+    }\n+\n \n     try {\n       FileStatus fileStatus \u003d getFileStatus(f);\n \n       if (fileStatus.isDirectory()) {\n         return true;\n       } else {\n         throw new FileAlreadyExistsException(\"Path is a file: \" + f);\n       }\n     } catch (FileNotFoundException e) {\n       Path fPart \u003d f;\n       do {\n         try {\n           FileStatus fileStatus \u003d getFileStatus(fPart);\n           if (fileStatus.isFile()) {\n             throw new FileAlreadyExistsException(String.format(\n                 \"Can\u0027t make directory for path \u0027%s\u0027 since it is a file.\", \n                 fPart));\n           }\n         } catch (FileNotFoundException fnfe) {\n         }\n         fPart \u003d fPart.getParent();\n       } while (fPart !\u003d null);\n \n       String key \u003d pathToKey(f);\n       createFakeDirectory(bucket, key);\n       return true;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Making directory: \" + f);\n    }\n\n\n    try {\n      FileStatus fileStatus \u003d getFileStatus(f);\n\n      if (fileStatus.isDirectory()) {\n        return true;\n      } else {\n        throw new FileAlreadyExistsException(\"Path is a file: \" + f);\n      }\n    } catch (FileNotFoundException e) {\n      Path fPart \u003d f;\n      do {\n        try {\n          FileStatus fileStatus \u003d getFileStatus(fPart);\n          if (fileStatus.isFile()) {\n            throw new FileAlreadyExistsException(String.format(\n                \"Can\u0027t make directory for path \u0027%s\u0027 since it is a file.\", \n                fPart));\n          }\n        } catch (FileNotFoundException fnfe) {\n        }\n        fPart \u003d fPart.getParent();\n      } while (fPart !\u003d null);\n\n      String key \u003d pathToKey(f);\n      createFakeDirectory(bucket, key);\n      return true;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "24d920b80eb3626073925a1d0b6dcf148add8cc0": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10400. Incorporate new S3A FileSystem implementation. Contributed by Jordan Mendelson and Dave Wang.\n",
      "commitDate": "15/09/14 8:27 AM",
      "commitName": "24d920b80eb3626073925a1d0b6dcf148add8cc0",
      "commitAuthor": "Aaron T. Myers",
      "diff": "@@ -0,0 +1,31 @@\n+  public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n+    LOG.info(\"Making directory: \" + f);\n+\n+    try {\n+      FileStatus fileStatus \u003d getFileStatus(f);\n+\n+      if (fileStatus.isDirectory()) {\n+        return true;\n+      } else {\n+        throw new FileAlreadyExistsException(\"Path is a file: \" + f);\n+      }\n+    } catch (FileNotFoundException e) {\n+      Path fPart \u003d f;\n+      do {\n+        try {\n+          FileStatus fileStatus \u003d getFileStatus(fPart);\n+          if (fileStatus.isFile()) {\n+            throw new FileAlreadyExistsException(String.format(\n+                \"Can\u0027t make directory for path \u0027%s\u0027 since it is a file.\", \n+                fPart));\n+          }\n+        } catch (FileNotFoundException fnfe) {\n+        }\n+        fPart \u003d fPart.getParent();\n+      } while (fPart !\u003d null);\n+\n+      String key \u003d pathToKey(f);\n+      createFakeDirectory(bucket, key);\n+      return true;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n    LOG.info(\"Making directory: \" + f);\n\n    try {\n      FileStatus fileStatus \u003d getFileStatus(f);\n\n      if (fileStatus.isDirectory()) {\n        return true;\n      } else {\n        throw new FileAlreadyExistsException(\"Path is a file: \" + f);\n      }\n    } catch (FileNotFoundException e) {\n      Path fPart \u003d f;\n      do {\n        try {\n          FileStatus fileStatus \u003d getFileStatus(fPart);\n          if (fileStatus.isFile()) {\n            throw new FileAlreadyExistsException(String.format(\n                \"Can\u0027t make directory for path \u0027%s\u0027 since it is a file.\", \n                fPart));\n          }\n        } catch (FileNotFoundException fnfe) {\n        }\n        fPart \u003d fPart.getParent();\n      } while (fPart !\u003d null);\n\n      String key \u003d pathToKey(f);\n      createFakeDirectory(bucket, key);\n      return true;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}