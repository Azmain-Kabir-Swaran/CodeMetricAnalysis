{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebHdfsFileSystem.java",
  "functionName": "validateResponse",
  "functionId": "validateResponse___op-HttpOpParam.Op(modifiers-final)__conn-HttpURLConnection(modifiers-final)__unwrapException-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
  "functionStartLine": 490,
  "functionEndLine": 537,
  "numCommitsSeen": 284,
  "timeTaken": 5829,
  "changeHistory": [
    "701c27a7762294e1a5fb2b3ac81f5534aa37f667",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
    "ab04ff9efe632b4eca6faca7407ac35e00e6a379",
    "6f5f604a798b545faf6fadc9b66c8a8995b354db",
    "cbd21fd13b321d042faeff00fa71c9becc0d6087",
    "0c5128969522cf754010c32cdcbfcfa5ebe5b3b0",
    "004d0854b7964d4f748f6e91b2d54a84928843f7",
    "cb787968c5deac3dd5d10291aae39c36656a1487",
    "556be2af92b68808aff71937d437ab9948164bb1",
    "e4eec269d91ae541a321ae2f28ff03310682b3fe",
    "361ea9a62cb85e6d60682c4a73e874d305625d8b",
    "09a156fcce2bc1be4081717bf7ef7d290e80d818",
    "8cb0d4b380e0fd4437310c1dd6ef8b8995cc383d",
    "6c3b59505b863f03629da52a1e9b886fe9b496d0",
    "61d0b7530c8978c095ab6f62d9d38e168bd829c6"
  ],
  "changeHistoryShort": {
    "701c27a7762294e1a5fb2b3ac81f5534aa37f667": "Ybodychange",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": "Yfilerename",
    "ab04ff9efe632b4eca6faca7407ac35e00e6a379": "Ybodychange",
    "6f5f604a798b545faf6fadc9b66c8a8995b354db": "Ybodychange",
    "cbd21fd13b321d042faeff00fa71c9becc0d6087": "Ybodychange",
    "0c5128969522cf754010c32cdcbfcfa5ebe5b3b0": "Ybodychange",
    "004d0854b7964d4f748f6e91b2d54a84928843f7": "Ybodychange",
    "cb787968c5deac3dd5d10291aae39c36656a1487": "Ymultichange(Yparameterchange,Ybodychange)",
    "556be2af92b68808aff71937d437ab9948164bb1": "Ymultichange(Yparameterchange,Ybodychange)",
    "e4eec269d91ae541a321ae2f28ff03310682b3fe": "Ymultichange(Yparameterchange,Ybodychange)",
    "361ea9a62cb85e6d60682c4a73e874d305625d8b": "Ybodychange",
    "09a156fcce2bc1be4081717bf7ef7d290e80d818": "Ybodychange",
    "8cb0d4b380e0fd4437310c1dd6ef8b8995cc383d": "Ymultichange(Yreturntypechange,Ybodychange)",
    "6c3b59505b863f03629da52a1e9b886fe9b496d0": "Ybodychange",
    "61d0b7530c8978c095ab6f62d9d38e168bd829c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "701c27a7762294e1a5fb2b3ac81f5534aa37f667": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10735 Distcp using webhdfs on secure HA clusters fails with StandbyException\n",
      "commitDate": "14/10/16 10:26 AM",
      "commitName": "701c27a7762294e1a5fb2b3ac81f5534aa37f667",
      "commitAuthor": "Benoy Antony",
      "commitDateOld": "16/09/16 3:37 PM",
      "commitNameOld": "8a40953058d50d421d62b71067a13b626b3cba1f",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 27.78,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,48 @@\n   private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n       final HttpURLConnection conn, boolean unwrapException)\n       throws IOException {\n     final int code \u003d conn.getResponseCode();\n     // server is demanding an authentication we don\u0027t support\n     if (code \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED) {\n       // match hdfs/rpc exception\n       throw new AccessControlException(conn.getResponseMessage());\n     }\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n       final Map\u003c?, ?\u003e m;\n       try {\n         m \u003d jsonParse(conn, true);\n       } catch(Exception e) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n       if (m \u003d\u003d null) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage());\n       } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n         return m;\n       }\n \n       IOException re \u003d JsonUtilClient.toRemoteException(m);\n+\n+      //check if exception is due to communication with a Standby name node\n+      if (re.getMessage() !\u003d null \u0026\u0026 re.getMessage().endsWith(\n+          StandbyException.class.getSimpleName())) {\n+        LOG.trace(\"Detected StandbyException\", re);\n+        throw new IOException(re);\n+      }\n       // extract UGI-related exceptions and unwrap InvalidToken\n       // the NN mangles these exceptions but the DN does not and may need\n       // to re-fetch a token if either report the token is expired\n       if (re.getMessage() !\u003d null \u0026\u0026 re.getMessage().startsWith(\n           SecurityUtil.FAILED_TO_GET_UGI_MSG_HEADER)) {\n         String[] parts \u003d re.getMessage().split(\":\\\\s+\", 3);\n         re \u003d new RemoteException(parts[1], parts[2]);\n         re \u003d ((RemoteException)re).unwrapRemoteException(InvalidToken.class);\n       }\n       throw unwrapException? toIOException(re): re;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn, boolean unwrapException)\n      throws IOException {\n    final int code \u003d conn.getResponseCode();\n    // server is demanding an authentication we don\u0027t support\n    if (code \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED) {\n      // match hdfs/rpc exception\n      throw new AccessControlException(conn.getResponseMessage());\n    }\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn, true);\n      } catch(Exception e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m \u003d\u003d null) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage());\n      } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      IOException re \u003d JsonUtilClient.toRemoteException(m);\n\n      //check if exception is due to communication with a Standby name node\n      if (re.getMessage() !\u003d null \u0026\u0026 re.getMessage().endsWith(\n          StandbyException.class.getSimpleName())) {\n        LOG.trace(\"Detected StandbyException\", re);\n        throw new IOException(re);\n      }\n      // extract UGI-related exceptions and unwrap InvalidToken\n      // the NN mangles these exceptions but the DN does not and may need\n      // to re-fetch a token if either report the token is expired\n      if (re.getMessage() !\u003d null \u0026\u0026 re.getMessage().startsWith(\n          SecurityUtil.FAILED_TO_GET_UGI_MSG_HEADER)) {\n        String[] parts \u003d re.getMessage().split(\":\\\\s+\", 3);\n        re \u003d new RemoteException(parts[1], parts[2]);\n        re \u003d ((RemoteException)re).unwrapRemoteException(InvalidToken.class);\n      }\n      throw unwrapException? toIOException(re): re;\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8052. Move WebHdfsFileSystem into hadoop-hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "23/04/15 5:33 PM",
      "commitName": "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "23/04/15 4:40 PM",
      "commitNameOld": "0b3f8957a87ada1a275c9904b211fdbdcefafb02",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn, boolean unwrapException) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    // server is demanding an authentication we don\u0027t support\n    if (code \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED) {\n      // match hdfs/rpc exception\n      throw new AccessControlException(conn.getResponseMessage());\n    }\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn, true);\n      } catch(Exception e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m \u003d\u003d null) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage());\n      } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      IOException re \u003d JsonUtilClient.toRemoteException(m);\n      // extract UGI-related exceptions and unwrap InvalidToken\n      // the NN mangles these exceptions but the DN does not and may need\n      // to re-fetch a token if either report the token is expired\n      if (re.getMessage() !\u003d null \u0026\u0026 re.getMessage().startsWith(\n          SecurityUtil.FAILED_TO_GET_UGI_MSG_HEADER)) {\n        String[] parts \u003d re.getMessage().split(\":\\\\s+\", 3);\n        re \u003d new RemoteException(parts[1], parts[2]);\n        re \u003d ((RemoteException)re).unwrapRemoteException(InvalidToken.class);\n      }\n      throw unwrapException? toIOException(re): re;\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java"
      }
    },
    "ab04ff9efe632b4eca6faca7407ac35e00e6a379": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8080. Separate JSON related routines used by WebHdfsFileSystem to a package local class. Contributed by Haohui Mai.\n",
      "commitDate": "07/04/15 9:30 PM",
      "commitName": "ab04ff9efe632b4eca6faca7407ac35e00e6a379",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "01/04/15 12:54 PM",
      "commitNameOld": "ed72daa5df97669906234e8ac9a406d78136b206",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 6.36,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n       final HttpURLConnection conn, boolean unwrapException) throws IOException {\n     final int code \u003d conn.getResponseCode();\n     // server is demanding an authentication we don\u0027t support\n     if (code \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED) {\n       // match hdfs/rpc exception\n       throw new AccessControlException(conn.getResponseMessage());\n     }\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n       final Map\u003c?, ?\u003e m;\n       try {\n         m \u003d jsonParse(conn, true);\n       } catch(Exception e) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n       if (m \u003d\u003d null) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage());\n       } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n         return m;\n       }\n \n-      IOException re \u003d JsonUtil.toRemoteException(m);\n+      IOException re \u003d JsonUtilClient.toRemoteException(m);\n       // extract UGI-related exceptions and unwrap InvalidToken\n       // the NN mangles these exceptions but the DN does not and may need\n       // to re-fetch a token if either report the token is expired\n       if (re.getMessage() !\u003d null \u0026\u0026 re.getMessage().startsWith(\n           SecurityUtil.FAILED_TO_GET_UGI_MSG_HEADER)) {\n         String[] parts \u003d re.getMessage().split(\":\\\\s+\", 3);\n         re \u003d new RemoteException(parts[1], parts[2]);\n         re \u003d ((RemoteException)re).unwrapRemoteException(InvalidToken.class);\n       }\n       throw unwrapException? toIOException(re): re;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn, boolean unwrapException) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    // server is demanding an authentication we don\u0027t support\n    if (code \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED) {\n      // match hdfs/rpc exception\n      throw new AccessControlException(conn.getResponseMessage());\n    }\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn, true);\n      } catch(Exception e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m \u003d\u003d null) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage());\n      } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      IOException re \u003d JsonUtilClient.toRemoteException(m);\n      // extract UGI-related exceptions and unwrap InvalidToken\n      // the NN mangles these exceptions but the DN does not and may need\n      // to re-fetch a token if either report the token is expired\n      if (re.getMessage() !\u003d null \u0026\u0026 re.getMessage().startsWith(\n          SecurityUtil.FAILED_TO_GET_UGI_MSG_HEADER)) {\n        String[] parts \u003d re.getMessage().split(\":\\\\s+\", 3);\n        re \u003d new RemoteException(parts[1], parts[2]);\n        re \u003d ((RemoteException)re).unwrapRemoteException(InvalidToken.class);\n      }\n      throw unwrapException? toIOException(re): re;\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "6f5f604a798b545faf6fadc9b66c8a8995b354db": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7305. NPE seen in wbhdfs FS while running SLive. Contributed by Jing Zhao.\n",
      "commitDate": "29/10/14 4:25 PM",
      "commitName": "6f5f604a798b545faf6fadc9b66c8a8995b354db",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "09/10/14 6:52 PM",
      "commitNameOld": "cbd21fd13b321d042faeff00fa71c9becc0d6087",
      "commitAuthorOld": "Aaron T. Myers",
      "daysBetweenCommits": 19.9,
      "commitsBetweenForRepo": 170,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n       final HttpURLConnection conn, boolean unwrapException) throws IOException {\n     final int code \u003d conn.getResponseCode();\n     // server is demanding an authentication we don\u0027t support\n     if (code \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED) {\n       // match hdfs/rpc exception\n       throw new AccessControlException(conn.getResponseMessage());\n     }\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n       final Map\u003c?, ?\u003e m;\n       try {\n         m \u003d jsonParse(conn, true);\n       } catch(Exception e) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n       if (m \u003d\u003d null) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage());\n       } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n         return m;\n       }\n \n       IOException re \u003d JsonUtil.toRemoteException(m);\n       // extract UGI-related exceptions and unwrap InvalidToken\n       // the NN mangles these exceptions but the DN does not and may need\n       // to re-fetch a token if either report the token is expired\n-      if (re.getMessage().startsWith(\n+      if (re.getMessage() !\u003d null \u0026\u0026 re.getMessage().startsWith(\n           SecurityUtil.FAILED_TO_GET_UGI_MSG_HEADER)) {\n         String[] parts \u003d re.getMessage().split(\":\\\\s+\", 3);\n         re \u003d new RemoteException(parts[1], parts[2]);\n         re \u003d ((RemoteException)re).unwrapRemoteException(InvalidToken.class);\n       }\n       throw unwrapException? toIOException(re): re;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn, boolean unwrapException) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    // server is demanding an authentication we don\u0027t support\n    if (code \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED) {\n      // match hdfs/rpc exception\n      throw new AccessControlException(conn.getResponseMessage());\n    }\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn, true);\n      } catch(Exception e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m \u003d\u003d null) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage());\n      } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      IOException re \u003d JsonUtil.toRemoteException(m);\n      // extract UGI-related exceptions and unwrap InvalidToken\n      // the NN mangles these exceptions but the DN does not and may need\n      // to re-fetch a token if either report the token is expired\n      if (re.getMessage() !\u003d null \u0026\u0026 re.getMessage().startsWith(\n          SecurityUtil.FAILED_TO_GET_UGI_MSG_HEADER)) {\n        String[] parts \u003d re.getMessage().split(\":\\\\s+\", 3);\n        re \u003d new RemoteException(parts[1], parts[2]);\n        re \u003d ((RemoteException)re).unwrapRemoteException(InvalidToken.class);\n      }\n      throw unwrapException? toIOException(re): re;\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "cbd21fd13b321d042faeff00fa71c9becc0d6087": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7026. Introduce a string constant for \"Failed to obtain user group info...\". Contributed by Yongjun Zhang.\n",
      "commitDate": "09/10/14 6:52 PM",
      "commitName": "cbd21fd13b321d042faeff00fa71c9becc0d6087",
      "commitAuthor": "Aaron T. Myers",
      "commitDateOld": "09/09/14 10:16 PM",
      "commitNameOld": "bbff44cb03d0150f990acc3b77170893241cc282",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 29.86,
      "commitsBetweenForRepo": 339,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n       final HttpURLConnection conn, boolean unwrapException) throws IOException {\n     final int code \u003d conn.getResponseCode();\n     // server is demanding an authentication we don\u0027t support\n     if (code \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED) {\n       // match hdfs/rpc exception\n       throw new AccessControlException(conn.getResponseMessage());\n     }\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n       final Map\u003c?, ?\u003e m;\n       try {\n         m \u003d jsonParse(conn, true);\n       } catch(Exception e) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n       if (m \u003d\u003d null) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage());\n       } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n         return m;\n       }\n \n       IOException re \u003d JsonUtil.toRemoteException(m);\n       // extract UGI-related exceptions and unwrap InvalidToken\n       // the NN mangles these exceptions but the DN does not and may need\n       // to re-fetch a token if either report the token is expired\n-      if (re.getMessage().startsWith(\"Failed to obtain user group information:\")) {\n+      if (re.getMessage().startsWith(\n+          SecurityUtil.FAILED_TO_GET_UGI_MSG_HEADER)) {\n         String[] parts \u003d re.getMessage().split(\":\\\\s+\", 3);\n         re \u003d new RemoteException(parts[1], parts[2]);\n         re \u003d ((RemoteException)re).unwrapRemoteException(InvalidToken.class);\n       }\n       throw unwrapException? toIOException(re): re;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn, boolean unwrapException) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    // server is demanding an authentication we don\u0027t support\n    if (code \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED) {\n      // match hdfs/rpc exception\n      throw new AccessControlException(conn.getResponseMessage());\n    }\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn, true);\n      } catch(Exception e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m \u003d\u003d null) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage());\n      } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      IOException re \u003d JsonUtil.toRemoteException(m);\n      // extract UGI-related exceptions and unwrap InvalidToken\n      // the NN mangles these exceptions but the DN does not and may need\n      // to re-fetch a token if either report the token is expired\n      if (re.getMessage().startsWith(\n          SecurityUtil.FAILED_TO_GET_UGI_MSG_HEADER)) {\n        String[] parts \u003d re.getMessage().split(\":\\\\s+\", 3);\n        re \u003d new RemoteException(parts[1], parts[2]);\n        re \u003d ((RemoteException)re).unwrapRemoteException(InvalidToken.class);\n      }\n      throw unwrapException? toIOException(re): re;\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "0c5128969522cf754010c32cdcbfcfa5ebe5b3b0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6222. Remove background token renewer from webhdfs. Contributed by Rushabh Shah and Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604300 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/06/14 4:58 PM",
      "commitName": "0c5128969522cf754010c32cdcbfcfa5ebe5b3b0",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "19/06/14 4:06 PM",
      "commitNameOld": "46dc32e12568c5e254a3a2f2664095dc9de8bd55",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,39 @@\n   private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n       final HttpURLConnection conn, boolean unwrapException) throws IOException {\n     final int code \u003d conn.getResponseCode();\n     // server is demanding an authentication we don\u0027t support\n     if (code \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED) {\n-      throw new IOException(\n-          new AuthenticationException(conn.getResponseMessage()));\n+      // match hdfs/rpc exception\n+      throw new AccessControlException(conn.getResponseMessage());\n     }\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n       final Map\u003c?, ?\u003e m;\n       try {\n         m \u003d jsonParse(conn, true);\n       } catch(Exception e) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n       if (m \u003d\u003d null) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage());\n       } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n         return m;\n       }\n \n-      final RemoteException re \u003d JsonUtil.toRemoteException(m);\n+      IOException re \u003d JsonUtil.toRemoteException(m);\n+      // extract UGI-related exceptions and unwrap InvalidToken\n+      // the NN mangles these exceptions but the DN does not and may need\n+      // to re-fetch a token if either report the token is expired\n+      if (re.getMessage().startsWith(\"Failed to obtain user group information:\")) {\n+        String[] parts \u003d re.getMessage().split(\":\\\\s+\", 3);\n+        re \u003d new RemoteException(parts[1], parts[2]);\n+        re \u003d ((RemoteException)re).unwrapRemoteException(InvalidToken.class);\n+      }\n       throw unwrapException? toIOException(re): re;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn, boolean unwrapException) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    // server is demanding an authentication we don\u0027t support\n    if (code \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED) {\n      // match hdfs/rpc exception\n      throw new AccessControlException(conn.getResponseMessage());\n    }\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn, true);\n      } catch(Exception e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m \u003d\u003d null) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage());\n      } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      IOException re \u003d JsonUtil.toRemoteException(m);\n      // extract UGI-related exceptions and unwrap InvalidToken\n      // the NN mangles these exceptions but the DN does not and may need\n      // to re-fetch a token if either report the token is expired\n      if (re.getMessage().startsWith(\"Failed to obtain user group information:\")) {\n        String[] parts \u003d re.getMessage().split(\":\\\\s+\", 3);\n        re \u003d new RemoteException(parts[1], parts[2]);\n        re \u003d ((RemoteException)re).unwrapRemoteException(InvalidToken.class);\n      }\n      throw unwrapException? toIOException(re): re;\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "004d0854b7964d4f748f6e91b2d54a84928843f7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4564. Ensure webhdfs returns correct HTTP response codes for denied operations. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583241 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/03/14 12:25 AM",
      "commitName": "004d0854b7964d4f748f6e91b2d54a84928843f7",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "10/03/14 1:48 PM",
      "commitNameOld": "b674dfd480ab8bfdaab390778b283dbf86ae8575",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 20.44,
      "commitsBetweenForRepo": 165,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,31 @@\n   private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n       final HttpURLConnection conn, boolean unwrapException) throws IOException {\n     final int code \u003d conn.getResponseCode();\n+    // server is demanding an authentication we don\u0027t support\n+    if (code \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED) {\n+      throw new IOException(\n+          new AuthenticationException(conn.getResponseMessage()));\n+    }\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n       final Map\u003c?, ?\u003e m;\n       try {\n         m \u003d jsonParse(conn, true);\n       } catch(Exception e) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n       if (m \u003d\u003d null) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage());\n       } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n         return m;\n       }\n \n       final RemoteException re \u003d JsonUtil.toRemoteException(m);\n       throw unwrapException? toIOException(re): re;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn, boolean unwrapException) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    // server is demanding an authentication we don\u0027t support\n    if (code \u003d\u003d HttpURLConnection.HTTP_UNAUTHORIZED) {\n      throw new IOException(\n          new AuthenticationException(conn.getResponseMessage()));\n    }\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn, true);\n      } catch(Exception e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m \u003d\u003d null) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage());\n      } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      final RemoteException re \u003d JsonUtil.toRemoteException(m);\n      throw unwrapException? toIOException(re): re;\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "cb787968c5deac3dd5d10291aae39c36656a1487": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-3667.  Add retry support to WebHdfsFileSystem.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1367841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/12 6:41 PM",
      "commitName": "cb787968c5deac3dd5d10291aae39c36656a1487",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3667.  Add retry support to WebHdfsFileSystem.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1367841 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "31/07/12 6:41 PM",
          "commitName": "cb787968c5deac3dd5d10291aae39c36656a1487",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "30/07/12 9:33 PM",
          "commitNameOld": "556be2af92b68808aff71937d437ab9948164bb1",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.88,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,26 @@\n   private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n-      final HttpURLConnection conn) throws IOException {\n+      final HttpURLConnection conn, boolean unwrapException) throws IOException {\n     final int code \u003d conn.getResponseCode();\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n       final Map\u003c?, ?\u003e m;\n       try {\n         m \u003d jsonParse(conn, true);\n-      } catch(IOException e) {\n+      } catch(Exception e) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n-      if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n+      if (m \u003d\u003d null) {\n+        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n+            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n+            + \", message\u003d\" + conn.getResponseMessage());\n+      } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n         return m;\n       }\n \n       final RemoteException re \u003d JsonUtil.toRemoteException(m);\n-      throw re.unwrapRemoteException(AccessControlException.class,\n-          InvalidToken.class,\n-          AuthenticationException.class,\n-          AuthorizationException.class,\n-          FileAlreadyExistsException.class,\n-          FileNotFoundException.class,\n-          ParentNotDirectoryException.class,\n-          UnresolvedPathException.class,\n-          SafeModeException.class,\n-          DSQuotaExceededException.class,\n-          NSQuotaExceededException.class);\n+      throw unwrapException? toIOException(re): re;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn, boolean unwrapException) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn, true);\n      } catch(Exception e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m \u003d\u003d null) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage());\n      } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      final RemoteException re \u003d JsonUtil.toRemoteException(m);\n      throw unwrapException? toIOException(re): re;\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {
            "oldValue": "[op-HttpOpParam.Op(modifiers-final), conn-HttpURLConnection(modifiers-final)]",
            "newValue": "[op-HttpOpParam.Op(modifiers-final), conn-HttpURLConnection(modifiers-final), unwrapException-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3667.  Add retry support to WebHdfsFileSystem.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1367841 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "31/07/12 6:41 PM",
          "commitName": "cb787968c5deac3dd5d10291aae39c36656a1487",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "30/07/12 9:33 PM",
          "commitNameOld": "556be2af92b68808aff71937d437ab9948164bb1",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.88,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,26 @@\n   private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n-      final HttpURLConnection conn) throws IOException {\n+      final HttpURLConnection conn, boolean unwrapException) throws IOException {\n     final int code \u003d conn.getResponseCode();\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n       final Map\u003c?, ?\u003e m;\n       try {\n         m \u003d jsonParse(conn, true);\n-      } catch(IOException e) {\n+      } catch(Exception e) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n-      if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n+      if (m \u003d\u003d null) {\n+        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n+            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n+            + \", message\u003d\" + conn.getResponseMessage());\n+      } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n         return m;\n       }\n \n       final RemoteException re \u003d JsonUtil.toRemoteException(m);\n-      throw re.unwrapRemoteException(AccessControlException.class,\n-          InvalidToken.class,\n-          AuthenticationException.class,\n-          AuthorizationException.class,\n-          FileAlreadyExistsException.class,\n-          FileNotFoundException.class,\n-          ParentNotDirectoryException.class,\n-          UnresolvedPathException.class,\n-          SafeModeException.class,\n-          DSQuotaExceededException.class,\n-          NSQuotaExceededException.class);\n+      throw unwrapException? toIOException(re): re;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn, boolean unwrapException) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn, true);\n      } catch(Exception e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m \u003d\u003d null) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage());\n      } else if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      final RemoteException re \u003d JsonUtil.toRemoteException(m);\n      throw unwrapException? toIOException(re): re;\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "556be2af92b68808aff71937d437ab9948164bb1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "svn merge -c -1366601 for reverting HDFS-3667.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1367407 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/07/12 9:33 PM",
      "commitName": "556be2af92b68808aff71937d437ab9948164bb1",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "svn merge -c -1366601 for reverting HDFS-3667.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1367407 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/07/12 9:33 PM",
          "commitName": "556be2af92b68808aff71937d437ab9948164bb1",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "27/07/12 10:57 PM",
          "commitNameOld": "e4eec269d91ae541a321ae2f28ff03310682b3fe",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 2.94,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,32 @@\n   private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n-      final HttpURLConnection conn, boolean unwrapException) throws IOException {\n+      final HttpURLConnection conn) throws IOException {\n     final int code \u003d conn.getResponseCode();\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n       final Map\u003c?, ?\u003e m;\n       try {\n         m \u003d jsonParse(conn, true);\n-      } catch(Exception e) {\n+      } catch(IOException e) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n       if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n         return m;\n       }\n \n       final RemoteException re \u003d JsonUtil.toRemoteException(m);\n-      throw unwrapException? toIOException(re): re;\n+      throw re.unwrapRemoteException(AccessControlException.class,\n+          InvalidToken.class,\n+          AuthenticationException.class,\n+          AuthorizationException.class,\n+          FileAlreadyExistsException.class,\n+          FileNotFoundException.class,\n+          ParentNotDirectoryException.class,\n+          UnresolvedPathException.class,\n+          SafeModeException.class,\n+          DSQuotaExceededException.class,\n+          NSQuotaExceededException.class);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn, true);\n      } catch(IOException e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      final RemoteException re \u003d JsonUtil.toRemoteException(m);\n      throw re.unwrapRemoteException(AccessControlException.class,\n          InvalidToken.class,\n          AuthenticationException.class,\n          AuthorizationException.class,\n          FileAlreadyExistsException.class,\n          FileNotFoundException.class,\n          ParentNotDirectoryException.class,\n          UnresolvedPathException.class,\n          SafeModeException.class,\n          DSQuotaExceededException.class,\n          NSQuotaExceededException.class);\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {
            "oldValue": "[op-HttpOpParam.Op(modifiers-final), conn-HttpURLConnection(modifiers-final), unwrapException-boolean]",
            "newValue": "[op-HttpOpParam.Op(modifiers-final), conn-HttpURLConnection(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "svn merge -c -1366601 for reverting HDFS-3667.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1367407 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/07/12 9:33 PM",
          "commitName": "556be2af92b68808aff71937d437ab9948164bb1",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "27/07/12 10:57 PM",
          "commitNameOld": "e4eec269d91ae541a321ae2f28ff03310682b3fe",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 2.94,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,32 @@\n   private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n-      final HttpURLConnection conn, boolean unwrapException) throws IOException {\n+      final HttpURLConnection conn) throws IOException {\n     final int code \u003d conn.getResponseCode();\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n       final Map\u003c?, ?\u003e m;\n       try {\n         m \u003d jsonParse(conn, true);\n-      } catch(Exception e) {\n+      } catch(IOException e) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n       if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n         return m;\n       }\n \n       final RemoteException re \u003d JsonUtil.toRemoteException(m);\n-      throw unwrapException? toIOException(re): re;\n+      throw re.unwrapRemoteException(AccessControlException.class,\n+          InvalidToken.class,\n+          AuthenticationException.class,\n+          AuthorizationException.class,\n+          FileAlreadyExistsException.class,\n+          FileNotFoundException.class,\n+          ParentNotDirectoryException.class,\n+          UnresolvedPathException.class,\n+          SafeModeException.class,\n+          DSQuotaExceededException.class,\n+          NSQuotaExceededException.class);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn, true);\n      } catch(IOException e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      final RemoteException re \u003d JsonUtil.toRemoteException(m);\n      throw re.unwrapRemoteException(AccessControlException.class,\n          InvalidToken.class,\n          AuthenticationException.class,\n          AuthorizationException.class,\n          FileAlreadyExistsException.class,\n          FileNotFoundException.class,\n          ParentNotDirectoryException.class,\n          UnresolvedPathException.class,\n          SafeModeException.class,\n          DSQuotaExceededException.class,\n          NSQuotaExceededException.class);\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "e4eec269d91ae541a321ae2f28ff03310682b3fe": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-3667.  Add retry support to WebHdfsFileSystem.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1366601 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/07/12 10:57 PM",
      "commitName": "e4eec269d91ae541a321ae2f28ff03310682b3fe",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3667.  Add retry support to WebHdfsFileSystem.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1366601 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/07/12 10:57 PM",
          "commitName": "e4eec269d91ae541a321ae2f28ff03310682b3fe",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "25/07/12 4:37 PM",
          "commitNameOld": "8f395c2f78e5813e613197c3078a4ebc5d42775a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 2.26,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,22 @@\n   private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n-      final HttpURLConnection conn) throws IOException {\n+      final HttpURLConnection conn, boolean unwrapException) throws IOException {\n     final int code \u003d conn.getResponseCode();\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n       final Map\u003c?, ?\u003e m;\n       try {\n         m \u003d jsonParse(conn, true);\n-      } catch(IOException e) {\n+      } catch(Exception e) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n       if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n         return m;\n       }\n \n       final RemoteException re \u003d JsonUtil.toRemoteException(m);\n-      throw re.unwrapRemoteException(AccessControlException.class,\n-          InvalidToken.class,\n-          AuthenticationException.class,\n-          AuthorizationException.class,\n-          FileAlreadyExistsException.class,\n-          FileNotFoundException.class,\n-          ParentNotDirectoryException.class,\n-          UnresolvedPathException.class,\n-          SafeModeException.class,\n-          DSQuotaExceededException.class,\n-          NSQuotaExceededException.class);\n+      throw unwrapException? toIOException(re): re;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn, boolean unwrapException) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn, true);\n      } catch(Exception e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      final RemoteException re \u003d JsonUtil.toRemoteException(m);\n      throw unwrapException? toIOException(re): re;\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {
            "oldValue": "[op-HttpOpParam.Op(modifiers-final), conn-HttpURLConnection(modifiers-final)]",
            "newValue": "[op-HttpOpParam.Op(modifiers-final), conn-HttpURLConnection(modifiers-final), unwrapException-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3667.  Add retry support to WebHdfsFileSystem.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1366601 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/07/12 10:57 PM",
          "commitName": "e4eec269d91ae541a321ae2f28ff03310682b3fe",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "25/07/12 4:37 PM",
          "commitNameOld": "8f395c2f78e5813e613197c3078a4ebc5d42775a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 2.26,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,22 @@\n   private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n-      final HttpURLConnection conn) throws IOException {\n+      final HttpURLConnection conn, boolean unwrapException) throws IOException {\n     final int code \u003d conn.getResponseCode();\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n       final Map\u003c?, ?\u003e m;\n       try {\n         m \u003d jsonParse(conn, true);\n-      } catch(IOException e) {\n+      } catch(Exception e) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n       if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n         return m;\n       }\n \n       final RemoteException re \u003d JsonUtil.toRemoteException(m);\n-      throw re.unwrapRemoteException(AccessControlException.class,\n-          InvalidToken.class,\n-          AuthenticationException.class,\n-          AuthorizationException.class,\n-          FileAlreadyExistsException.class,\n-          FileNotFoundException.class,\n-          ParentNotDirectoryException.class,\n-          UnresolvedPathException.class,\n-          SafeModeException.class,\n-          DSQuotaExceededException.class,\n-          NSQuotaExceededException.class);\n+      throw unwrapException? toIOException(re): re;\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn, boolean unwrapException) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn, true);\n      } catch(Exception e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      final RemoteException re \u003d JsonUtil.toRemoteException(m);\n      throw unwrapException? toIOException(re): re;\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "361ea9a62cb85e6d60682c4a73e874d305625d8b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3516. Check content-type in WebHdfsFileSystem.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1353800 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/06/12 6:58 PM",
      "commitName": "361ea9a62cb85e6d60682c4a73e874d305625d8b",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "12/06/12 2:52 PM",
      "commitNameOld": "4d4661802e8109c264a5fce27cbad091fb91697a",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 13.17,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n       final HttpURLConnection conn) throws IOException {\n     final int code \u003d conn.getResponseCode();\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n       final Map\u003c?, ?\u003e m;\n       try {\n-        m \u003d jsonParse(conn.getErrorStream());\n+        m \u003d jsonParse(conn, true);\n       } catch(IOException e) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n       if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n         return m;\n       }\n \n       final RemoteException re \u003d JsonUtil.toRemoteException(m);\n       throw re.unwrapRemoteException(AccessControlException.class,\n           InvalidToken.class,\n           AuthenticationException.class,\n           AuthorizationException.class,\n           FileAlreadyExistsException.class,\n           FileNotFoundException.class,\n           ParentNotDirectoryException.class,\n           UnresolvedPathException.class,\n           SafeModeException.class,\n           DSQuotaExceededException.class,\n           NSQuotaExceededException.class);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn, true);\n      } catch(IOException e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      final RemoteException re \u003d JsonUtil.toRemoteException(m);\n      throw re.unwrapRemoteException(AccessControlException.class,\n          InvalidToken.class,\n          AuthenticationException.class,\n          AuthorizationException.class,\n          FileAlreadyExistsException.class,\n          FileNotFoundException.class,\n          ParentNotDirectoryException.class,\n          UnresolvedPathException.class,\n          SafeModeException.class,\n          DSQuotaExceededException.class,\n          NSQuotaExceededException.class);\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "09a156fcce2bc1be4081717bf7ef7d290e80d818": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2539. Support doAs and GETHOMEDIRECTORY in webhdfs.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1200731 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/11/11 8:19 PM",
      "commitName": "09a156fcce2bc1be4081717bf7ef7d290e80d818",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "08/11/11 11:25 AM",
      "commitNameOld": "94c631af1fc49f5ae5881fcd5f0e80b17308d15d",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 2.37,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,32 @@\n   private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n       final HttpURLConnection conn) throws IOException {\n     final int code \u003d conn.getResponseCode();\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n       final Map\u003c?, ?\u003e m;\n       try {\n         m \u003d jsonParse(conn.getErrorStream());\n       } catch(IOException e) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n       if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n         return m;\n       }\n \n       final RemoteException re \u003d JsonUtil.toRemoteException(m);\n       throw re.unwrapRemoteException(AccessControlException.class,\n-          DSQuotaExceededException.class,\n+          InvalidToken.class,\n+          AuthenticationException.class,\n+          AuthorizationException.class,\n           FileAlreadyExistsException.class,\n           FileNotFoundException.class,\n           ParentNotDirectoryException.class,\n+          UnresolvedPathException.class,\n           SafeModeException.class,\n-          NSQuotaExceededException.class,\n-          UnresolvedPathException.class);\n+          DSQuotaExceededException.class,\n+          NSQuotaExceededException.class);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn.getErrorStream());\n      } catch(IOException e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      final RemoteException re \u003d JsonUtil.toRemoteException(m);\n      throw re.unwrapRemoteException(AccessControlException.class,\n          InvalidToken.class,\n          AuthenticationException.class,\n          AuthorizationException.class,\n          FileAlreadyExistsException.class,\n          FileNotFoundException.class,\n          ParentNotDirectoryException.class,\n          UnresolvedPathException.class,\n          SafeModeException.class,\n          DSQuotaExceededException.class,\n          NSQuotaExceededException.class);\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "8cb0d4b380e0fd4437310c1dd6ef8b8995cc383d": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-2432. Webhdfs: response FORBIDDEN when setReplication on non-files; clear umask before creating a flie; throw IllegalArgumentException if setOwner with both owner and group empty; throw FileNotFoundException if getFileStatus on non-existing files; fix bugs in getBlockLocations; and changed getFileChecksum json response root to \"FileChecksum\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190077 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 4:13 PM",
      "commitName": "8cb0d4b380e0fd4437310c1dd6ef8b8995cc383d",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-2432. Webhdfs: response FORBIDDEN when setReplication on non-files; clear umask before creating a flie; throw IllegalArgumentException if setOwner with both owner and group empty; throw FileNotFoundException if getFileStatus on non-existing files; fix bugs in getBlockLocations; and changed getFileChecksum json response root to \"FileChecksum\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190077 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/10/11 4:13 PM",
          "commitName": "8cb0d4b380e0fd4437310c1dd6ef8b8995cc383d",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "25/10/11 10:16 PM",
          "commitNameOld": "8335995630e2c4288795fa0dfa9b670090a6790b",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 1.75,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,29 @@\n-  private static void validateResponse(final HttpOpParam.Op op,\n+  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n       final HttpURLConnection conn) throws IOException {\n     final int code \u003d conn.getResponseCode();\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n-      final Map\u003cString, Object\u003e m;\n+      final Map\u003c?, ?\u003e m;\n       try {\n         m \u003d jsonParse(conn.getErrorStream());\n       } catch(IOException e) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n+      if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n+        return m;\n+      }\n+\n       final RemoteException re \u003d JsonUtil.toRemoteException(m);\n       throw re.unwrapRemoteException(AccessControlException.class,\n           DSQuotaExceededException.class,\n           FileAlreadyExistsException.class,\n           FileNotFoundException.class,\n           ParentNotDirectoryException.class,\n           SafeModeException.class,\n           NSQuotaExceededException.class,\n           UnresolvedPathException.class);\n     }\n+    return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn.getErrorStream());\n      } catch(IOException e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      final RemoteException re \u003d JsonUtil.toRemoteException(m);\n      throw re.unwrapRemoteException(AccessControlException.class,\n          DSQuotaExceededException.class,\n          FileAlreadyExistsException.class,\n          FileNotFoundException.class,\n          ParentNotDirectoryException.class,\n          SafeModeException.class,\n          NSQuotaExceededException.class,\n          UnresolvedPathException.class);\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "Map\u003c?,?\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2432. Webhdfs: response FORBIDDEN when setReplication on non-files; clear umask before creating a flie; throw IllegalArgumentException if setOwner with both owner and group empty; throw FileNotFoundException if getFileStatus on non-existing files; fix bugs in getBlockLocations; and changed getFileChecksum json response root to \"FileChecksum\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190077 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/10/11 4:13 PM",
          "commitName": "8cb0d4b380e0fd4437310c1dd6ef8b8995cc383d",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "25/10/11 10:16 PM",
          "commitNameOld": "8335995630e2c4288795fa0dfa9b670090a6790b",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 1.75,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,29 @@\n-  private static void validateResponse(final HttpOpParam.Op op,\n+  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n       final HttpURLConnection conn) throws IOException {\n     final int code \u003d conn.getResponseCode();\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n-      final Map\u003cString, Object\u003e m;\n+      final Map\u003c?, ?\u003e m;\n       try {\n         m \u003d jsonParse(conn.getErrorStream());\n       } catch(IOException e) {\n         throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n+      if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n+        return m;\n+      }\n+\n       final RemoteException re \u003d JsonUtil.toRemoteException(m);\n       throw re.unwrapRemoteException(AccessControlException.class,\n           DSQuotaExceededException.class,\n           FileAlreadyExistsException.class,\n           FileNotFoundException.class,\n           ParentNotDirectoryException.class,\n           SafeModeException.class,\n           NSQuotaExceededException.class,\n           UnresolvedPathException.class);\n     }\n+    return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Map\u003c?, ?\u003e validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003c?, ?\u003e m;\n      try {\n        m \u003d jsonParse(conn.getErrorStream());\n      } catch(IOException e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      if (m.get(RemoteException.class.getSimpleName()) \u003d\u003d null) {\n        return m;\n      }\n\n      final RemoteException re \u003d JsonUtil.toRemoteException(m);\n      throw re.unwrapRemoteException(AccessControlException.class,\n          DSQuotaExceededException.class,\n          FileAlreadyExistsException.class,\n          FileNotFoundException.class,\n          ParentNotDirectoryException.class,\n          SafeModeException.class,\n          NSQuotaExceededException.class,\n          UnresolvedPathException.class);\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "6c3b59505b863f03629da52a1e9b886fe9b496d0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2317. Support read access to HDFS in webhdfs.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1170085 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/09/11 1:34 AM",
      "commitName": "6c3b59505b863f03629da52a1e9b886fe9b496d0",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "10/09/11 6:41 PM",
      "commitNameOld": "61d0b7530c8978c095ab6f62d9d38e168bd829c6",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 2.29,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   private static void validateResponse(final HttpOpParam.Op op,\n       final HttpURLConnection conn) throws IOException {\n     final int code \u003d conn.getResponseCode();\n     if (code !\u003d op.getExpectedHttpResponseCode()) {\n       final Map\u003cString, Object\u003e m;\n       try {\n         m \u003d jsonParse(conn.getErrorStream());\n       } catch(IOException e) {\n-        throw new IOException(\"Unexpected HTTP response: code \u003d \" + code + \" !\u003d \"\n+        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n             + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n             + \", message\u003d\" + conn.getResponseMessage(), e);\n       }\n \n       final RemoteException re \u003d JsonUtil.toRemoteException(m);\n       throw re.unwrapRemoteException(AccessControlException.class,\n           DSQuotaExceededException.class,\n           FileAlreadyExistsException.class,\n           FileNotFoundException.class,\n           ParentNotDirectoryException.class,\n           SafeModeException.class,\n           NSQuotaExceededException.class,\n           UnresolvedPathException.class);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003cString, Object\u003e m;\n      try {\n        m \u003d jsonParse(conn.getErrorStream());\n      } catch(IOException e) {\n        throw new IOException(\"Unexpected HTTP response: code\u003d\" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      final RemoteException re \u003d JsonUtil.toRemoteException(m);\n      throw re.unwrapRemoteException(AccessControlException.class,\n          DSQuotaExceededException.class,\n          FileAlreadyExistsException.class,\n          FileNotFoundException.class,\n          ParentNotDirectoryException.class,\n          SafeModeException.class,\n          NSQuotaExceededException.class,\n          UnresolvedPathException.class);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "61d0b7530c8978c095ab6f62d9d38e168bd829c6": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2284. Add a new FileSystem, webhdfs://, for supporting write Http access to HDFS.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1167662 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/11 6:41 PM",
      "commitName": "61d0b7530c8978c095ab6f62d9d38e168bd829c6",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,24 @@\n+  private static void validateResponse(final HttpOpParam.Op op,\n+      final HttpURLConnection conn) throws IOException {\n+    final int code \u003d conn.getResponseCode();\n+    if (code !\u003d op.getExpectedHttpResponseCode()) {\n+      final Map\u003cString, Object\u003e m;\n+      try {\n+        m \u003d jsonParse(conn.getErrorStream());\n+      } catch(IOException e) {\n+        throw new IOException(\"Unexpected HTTP response: code \u003d \" + code + \" !\u003d \"\n+            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n+            + \", message\u003d\" + conn.getResponseMessage(), e);\n+      }\n+\n+      final RemoteException re \u003d JsonUtil.toRemoteException(m);\n+      throw re.unwrapRemoteException(AccessControlException.class,\n+          DSQuotaExceededException.class,\n+          FileAlreadyExistsException.class,\n+          FileNotFoundException.class,\n+          ParentNotDirectoryException.class,\n+          SafeModeException.class,\n+          NSQuotaExceededException.class,\n+          UnresolvedPathException.class);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validateResponse(final HttpOpParam.Op op,\n      final HttpURLConnection conn) throws IOException {\n    final int code \u003d conn.getResponseCode();\n    if (code !\u003d op.getExpectedHttpResponseCode()) {\n      final Map\u003cString, Object\u003e m;\n      try {\n        m \u003d jsonParse(conn.getErrorStream());\n      } catch(IOException e) {\n        throw new IOException(\"Unexpected HTTP response: code \u003d \" + code + \" !\u003d \"\n            + op.getExpectedHttpResponseCode() + \", \" + op.toQueryString()\n            + \", message\u003d\" + conn.getResponseMessage(), e);\n      }\n\n      final RemoteException re \u003d JsonUtil.toRemoteException(m);\n      throw re.unwrapRemoteException(AccessControlException.class,\n          DSQuotaExceededException.class,\n          FileAlreadyExistsException.class,\n          FileNotFoundException.class,\n          ParentNotDirectoryException.class,\n          SafeModeException.class,\n          NSQuotaExceededException.class,\n          UnresolvedPathException.class);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java"
    }
  }
}