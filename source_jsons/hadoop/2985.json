{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSUtilClient.java",
  "functionName": "peerFromSocket",
  "functionId": "peerFromSocket___socket-Socket",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
  "functionStartLine": 685,
  "functionEndLine": 718,
  "numCommitsSeen": 49,
  "timeTaken": 2846,
  "changeHistory": [
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
    "c9db06f2e4d1c1f71f021d5070323f9fc194cdd7"
  ],
  "changeHistoryShort": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": "Ymovefromfile",
    "c9db06f2e4d1c1f71f021d5070323f9fc194cdd7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/09/15 8:39 AM",
      "commitNameOld": "6c17d315287020368689fa078a40a1eaedf89d5b",
      "commitAuthorOld": "",
      "daysBetweenCommits": 3.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public static Peer peerFromSocket(Socket socket)\n       throws IOException {\n-    Peer peer \u003d null;\n+    Peer peer;\n     boolean success \u003d false;\n     try {\n       // TCP_NODELAY is crucial here because of bad interactions between\n       // Nagle\u0027s Algorithm and Delayed ACKs. With connection keepalive\n       // between the client and DN, the conversation looks like:\n       //   1. Client -\u003e DN: Read block X\n       //   2. DN -\u003e Client: data for block X\n       //   3. Client -\u003e DN: Status OK (successful read)\n       //   4. Client -\u003e DN: Read block Y\n       // The fact that step #3 and #4 are both in the client-\u003eDN direction\n       // triggers Nagling. If the DN is using delayed ACKs, this results\n       // in a delay of 40ms or more.\n       //\n       // TCP_NODELAY disables nagling and thus avoids this performance\n       // disaster.\n       socket.setTcpNoDelay(true);\n       SocketChannel channel \u003d socket.getChannel();\n       if (channel \u003d\u003d null) {\n         peer \u003d new BasicInetPeer(socket);\n       } else {\n         peer \u003d new NioInetPeer(socket);\n       }\n       success \u003d true;\n       return peer;\n     } finally {\n       if (!success) {\n-        if (peer !\u003d null) peer.close();\n+        // peer is always null so no need to call peer.close().\n         socket.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Peer peerFromSocket(Socket socket)\n      throws IOException {\n    Peer peer;\n    boolean success \u003d false;\n    try {\n      // TCP_NODELAY is crucial here because of bad interactions between\n      // Nagle\u0027s Algorithm and Delayed ACKs. With connection keepalive\n      // between the client and DN, the conversation looks like:\n      //   1. Client -\u003e DN: Read block X\n      //   2. DN -\u003e Client: data for block X\n      //   3. Client -\u003e DN: Status OK (successful read)\n      //   4. Client -\u003e DN: Read block Y\n      // The fact that step #3 and #4 are both in the client-\u003eDN direction\n      // triggers Nagling. If the DN is using delayed ACKs, this results\n      // in a delay of 40ms or more.\n      //\n      // TCP_NODELAY disables nagling and thus avoids this performance\n      // disaster.\n      socket.setTcpNoDelay(true);\n      SocketChannel channel \u003d socket.getChannel();\n      if (channel \u003d\u003d null) {\n        peer \u003d new BasicInetPeer(socket);\n      } else {\n        peer \u003d new NioInetPeer(socket);\n      }\n      success \u003d true;\n      return peer;\n    } finally {\n      if (!success) {\n        // peer is always null so no need to call peer.close().\n        socket.close();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
      "extendedDetails": {}
    },
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": {
      "type": "Ymovefromfile",
      "commitMessage": "HDFS-9002. Move o.a.h.hdfs.net/*Peer classes to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "03/09/15 3:32 PM",
      "commitName": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "03/09/15 1:26 PM",
      "commitNameOld": "c2d2c1802a11e3e11a953b23b0eccbf4d107de59",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static Peer peerFromSocket(Socket socket)\n      throws IOException {\n    Peer peer \u003d null;\n    boolean success \u003d false;\n    try {\n      // TCP_NODELAY is crucial here because of bad interactions between\n      // Nagle\u0027s Algorithm and Delayed ACKs. With connection keepalive\n      // between the client and DN, the conversation looks like:\n      //   1. Client -\u003e DN: Read block X\n      //   2. DN -\u003e Client: data for block X\n      //   3. Client -\u003e DN: Status OK (successful read)\n      //   4. Client -\u003e DN: Read block Y\n      // The fact that step #3 and #4 are both in the client-\u003eDN direction\n      // triggers Nagling. If the DN is using delayed ACKs, this results\n      // in a delay of 40ms or more.\n      //\n      // TCP_NODELAY disables nagling and thus avoids this performance\n      // disaster.\n      socket.setTcpNoDelay(true);\n      SocketChannel channel \u003d socket.getChannel();\n      if (channel \u003d\u003d null) {\n        peer \u003d new BasicInetPeer(socket);\n      } else {\n        peer \u003d new NioInetPeer(socket);\n      }\n      success \u003d true;\n      return peer;\n    } finally {\n      if (!success) {\n        if (peer !\u003d null) peer.close();\n        socket.close();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/net/TcpPeerServer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
        "oldMethodName": "peerFromSocket",
        "newMethodName": "peerFromSocket"
      }
    },
    "c9db06f2e4d1c1f71f021d5070323f9fc194cdd7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4353. Encapsulate connections to peers in Peer and PeerServer classes. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-347@1431097 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/13 1:34 PM",
      "commitName": "c9db06f2e4d1c1f71f021d5070323f9fc194cdd7",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,34 @@\n+  public static Peer peerFromSocket(Socket socket)\n+      throws IOException {\n+    Peer peer \u003d null;\n+    boolean success \u003d false;\n+    try {\n+      // TCP_NODELAY is crucial here because of bad interactions between\n+      // Nagle\u0027s Algorithm and Delayed ACKs. With connection keepalive\n+      // between the client and DN, the conversation looks like:\n+      //   1. Client -\u003e DN: Read block X\n+      //   2. DN -\u003e Client: data for block X\n+      //   3. Client -\u003e DN: Status OK (successful read)\n+      //   4. Client -\u003e DN: Read block Y\n+      // The fact that step #3 and #4 are both in the client-\u003eDN direction\n+      // triggers Nagling. If the DN is using delayed ACKs, this results\n+      // in a delay of 40ms or more.\n+      //\n+      // TCP_NODELAY disables nagling and thus avoids this performance\n+      // disaster.\n+      socket.setTcpNoDelay(true);\n+      SocketChannel channel \u003d socket.getChannel();\n+      if (channel \u003d\u003d null) {\n+        peer \u003d new BasicInetPeer(socket);\n+      } else {\n+        peer \u003d new NioInetPeer(socket);\n+      }\n+      success \u003d true;\n+      return peer;\n+    } finally {\n+      if (!success) {\n+        if (peer !\u003d null) peer.close();\n+        socket.close();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Peer peerFromSocket(Socket socket)\n      throws IOException {\n    Peer peer \u003d null;\n    boolean success \u003d false;\n    try {\n      // TCP_NODELAY is crucial here because of bad interactions between\n      // Nagle\u0027s Algorithm and Delayed ACKs. With connection keepalive\n      // between the client and DN, the conversation looks like:\n      //   1. Client -\u003e DN: Read block X\n      //   2. DN -\u003e Client: data for block X\n      //   3. Client -\u003e DN: Status OK (successful read)\n      //   4. Client -\u003e DN: Read block Y\n      // The fact that step #3 and #4 are both in the client-\u003eDN direction\n      // triggers Nagling. If the DN is using delayed ACKs, this results\n      // in a delay of 40ms or more.\n      //\n      // TCP_NODELAY disables nagling and thus avoids this performance\n      // disaster.\n      socket.setTcpNoDelay(true);\n      SocketChannel channel \u003d socket.getChannel();\n      if (channel \u003d\u003d null) {\n        peer \u003d new BasicInetPeer(socket);\n      } else {\n        peer \u003d new NioInetPeer(socket);\n      }\n      success \u003d true;\n      return peer;\n    } finally {\n      if (!success) {\n        if (peer !\u003d null) peer.close();\n        socket.close();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/net/TcpPeerServer.java"
    }
  }
}