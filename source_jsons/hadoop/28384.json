{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMRMClientRelayer.java",
  "functionName": "addNewAsks",
  "functionId": "addNewAsks___asks-List__ResourceRequest__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/AMRMClientRelayer.java",
  "functionStartLine": 499,
  "functionEndLine": 570,
  "numCommitsSeen": 8,
  "timeTaken": 1260,
  "changeHistory": [
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
    "3159bffce23abf35754da2d7d51de7d8c2631ae3"
  ],
  "changeHistoryShort": {
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09": "Ybodychange",
    "3159bffce23abf35754da2d7d51de7d8c2631ae3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8658. [AMRMProxy] Metrics for AMRMClientRelayer inside FederationInterceptor. Contributed by Young Chen.\n",
      "commitDate": "12/09/18 11:46 AM",
      "commitName": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "20/08/18 12:22 PM",
      "commitNameOld": "8736fc39ac3b3de168d2c216f3d1c0edb48fb3f9",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 22.97,
      "commitsBetweenForRepo": 175,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,72 @@\n   private void addNewAsks(List\u003cResourceRequest\u003e asks) throws YarnException {\n     Set\u003cResourceRequestSetKey\u003e touchedKeys \u003d new HashSet\u003c\u003e();\n+    Set\u003cResourceRequestSetKey\u003e nonZeroNewKeys \u003d new HashSet\u003c\u003e();\n     for (ResourceRequest rr : asks) {\n       addResourceRequestToAsk(rr);\n \n       ResourceRequestSetKey key \u003d new ResourceRequestSetKey(rr);\n       touchedKeys.add(key);\n \n       ResourceRequestSet askSet \u003d this.remotePendingAsks.get(key);\n       if (askSet \u003d\u003d null) {\n         askSet \u003d new ResourceRequestSet(key);\n         this.remotePendingAsks.put(key, askSet);\n+        if (key.getAllocationRequestId() !\u003d 0) {\n+          nonZeroNewKeys.add(key);\n+        }\n       }\n+\n+      int numContainers \u003d askSet.getNumContainers();\n       askSet.addAndOverrideRR(rr);\n+      int deltaContainers \u003d askSet.getNumContainers() - numContainers;\n+\n+      if (key.getAllocationRequestId() \u003d\u003d 0) {\n+        // AllocationRequestId is zero, keep track of pending count in the\n+        // delayed but correct way. Allocation latency is not supported\n+        if (deltaContainers !\u003d 0) {\n+          this.metrics.incrClientPending(this.rmId,\n+              AMRMClientRelayerMetrics.getRequestType(key.getExeType()),\n+              deltaContainers);\n+          if(deltaContainers \u003e 0){\n+            this.metrics.addRequestedQPS(this.rmId,\n+                AMRMClientRelayerMetrics.getRequestType(key.getExeType()),\n+                deltaContainers);\n+          }\n+        }\n+      } else {\n+        // AllocationRequestId is non-zero, we do pending decrement and latency\n+        // aggressively. So don\u0027t update metrics here. Double check AM is not\n+        // reusing the requestId for more asks\n+        if (deltaContainers \u003e 0 \u0026\u0026 numContainers !\u003d 0) {\n+          throw new YarnException(\"Received new ask (\"\n+              + askSet.getNumContainers() + \") on top of existing (\"\n+              + numContainers + \") in key \" + key);\n+        }\n+      }\n     }\n \n     // Cleanup properly if needed\n     for (ResourceRequestSetKey key : touchedKeys) {\n       ResourceRequestSet askSet \u003d this.remotePendingAsks.get(key);\n       if (askSet.getNumContainers() \u003d\u003d 0) {\n         this.remotePendingAsks.remove(key);\n       } else {\n         // Remove non-any zero RRs\n         askSet.cleanupZeroNonAnyRR();\n       }\n     }\n+\n+    // Initialize data for pending metrics for each new key\n+    for (ResourceRequestSetKey key : nonZeroNewKeys) {\n+      if(remotePendingAsks.containsKey(key)){\n+        this.askTimeStamp.put(key.getAllocationRequestId(),\n+            System.currentTimeMillis());\n+        int count \u003d this.remotePendingAsks.get(key).getNumContainers();\n+        this.pendingCountForMetrics.put(key.getAllocationRequestId(), count);\n+        this.metrics.incrClientPending(this.rmId,\n+            AMRMClientRelayerMetrics.getRequestType(key.getExeType()), count);\n+        this.metrics.addRequestedQPS(this.rmId,\n+            AMRMClientRelayerMetrics.getRequestType(key.getExeType()), count);\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addNewAsks(List\u003cResourceRequest\u003e asks) throws YarnException {\n    Set\u003cResourceRequestSetKey\u003e touchedKeys \u003d new HashSet\u003c\u003e();\n    Set\u003cResourceRequestSetKey\u003e nonZeroNewKeys \u003d new HashSet\u003c\u003e();\n    for (ResourceRequest rr : asks) {\n      addResourceRequestToAsk(rr);\n\n      ResourceRequestSetKey key \u003d new ResourceRequestSetKey(rr);\n      touchedKeys.add(key);\n\n      ResourceRequestSet askSet \u003d this.remotePendingAsks.get(key);\n      if (askSet \u003d\u003d null) {\n        askSet \u003d new ResourceRequestSet(key);\n        this.remotePendingAsks.put(key, askSet);\n        if (key.getAllocationRequestId() !\u003d 0) {\n          nonZeroNewKeys.add(key);\n        }\n      }\n\n      int numContainers \u003d askSet.getNumContainers();\n      askSet.addAndOverrideRR(rr);\n      int deltaContainers \u003d askSet.getNumContainers() - numContainers;\n\n      if (key.getAllocationRequestId() \u003d\u003d 0) {\n        // AllocationRequestId is zero, keep track of pending count in the\n        // delayed but correct way. Allocation latency is not supported\n        if (deltaContainers !\u003d 0) {\n          this.metrics.incrClientPending(this.rmId,\n              AMRMClientRelayerMetrics.getRequestType(key.getExeType()),\n              deltaContainers);\n          if(deltaContainers \u003e 0){\n            this.metrics.addRequestedQPS(this.rmId,\n                AMRMClientRelayerMetrics.getRequestType(key.getExeType()),\n                deltaContainers);\n          }\n        }\n      } else {\n        // AllocationRequestId is non-zero, we do pending decrement and latency\n        // aggressively. So don\u0027t update metrics here. Double check AM is not\n        // reusing the requestId for more asks\n        if (deltaContainers \u003e 0 \u0026\u0026 numContainers !\u003d 0) {\n          throw new YarnException(\"Received new ask (\"\n              + askSet.getNumContainers() + \") on top of existing (\"\n              + numContainers + \") in key \" + key);\n        }\n      }\n    }\n\n    // Cleanup properly if needed\n    for (ResourceRequestSetKey key : touchedKeys) {\n      ResourceRequestSet askSet \u003d this.remotePendingAsks.get(key);\n      if (askSet.getNumContainers() \u003d\u003d 0) {\n        this.remotePendingAsks.remove(key);\n      } else {\n        // Remove non-any zero RRs\n        askSet.cleanupZeroNonAnyRR();\n      }\n    }\n\n    // Initialize data for pending metrics for each new key\n    for (ResourceRequestSetKey key : nonZeroNewKeys) {\n      if(remotePendingAsks.containsKey(key)){\n        this.askTimeStamp.put(key.getAllocationRequestId(),\n            System.currentTimeMillis());\n        int count \u003d this.remotePendingAsks.get(key).getNumContainers();\n        this.pendingCountForMetrics.put(key.getAllocationRequestId(), count);\n        this.metrics.incrClientPending(this.rmId,\n            AMRMClientRelayerMetrics.getRequestType(key.getExeType()), count);\n        this.metrics.addRequestedQPS(this.rmId,\n            AMRMClientRelayerMetrics.getRequestType(key.getExeType()), count);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/AMRMClientRelayer.java",
      "extendedDetails": {}
    },
    "3159bffce23abf35754da2d7d51de7d8c2631ae3": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7900. [AMRMProxy] AMRMClientRelayer for stateful FederationInterceptor. (Botong Huang via asuresh)\n",
      "commitDate": "17/05/18 8:00 PM",
      "commitName": "3159bffce23abf35754da2d7d51de7d8c2631ae3",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,27 @@\n+  private void addNewAsks(List\u003cResourceRequest\u003e asks) throws YarnException {\n+    Set\u003cResourceRequestSetKey\u003e touchedKeys \u003d new HashSet\u003c\u003e();\n+    for (ResourceRequest rr : asks) {\n+      addResourceRequestToAsk(rr);\n+\n+      ResourceRequestSetKey key \u003d new ResourceRequestSetKey(rr);\n+      touchedKeys.add(key);\n+\n+      ResourceRequestSet askSet \u003d this.remotePendingAsks.get(key);\n+      if (askSet \u003d\u003d null) {\n+        askSet \u003d new ResourceRequestSet(key);\n+        this.remotePendingAsks.put(key, askSet);\n+      }\n+      askSet.addAndOverrideRR(rr);\n+    }\n+\n+    // Cleanup properly if needed\n+    for (ResourceRequestSetKey key : touchedKeys) {\n+      ResourceRequestSet askSet \u003d this.remotePendingAsks.get(key);\n+      if (askSet.getNumContainers() \u003d\u003d 0) {\n+        this.remotePendingAsks.remove(key);\n+      } else {\n+        // Remove non-any zero RRs\n+        askSet.cleanupZeroNonAnyRR();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addNewAsks(List\u003cResourceRequest\u003e asks) throws YarnException {\n    Set\u003cResourceRequestSetKey\u003e touchedKeys \u003d new HashSet\u003c\u003e();\n    for (ResourceRequest rr : asks) {\n      addResourceRequestToAsk(rr);\n\n      ResourceRequestSetKey key \u003d new ResourceRequestSetKey(rr);\n      touchedKeys.add(key);\n\n      ResourceRequestSet askSet \u003d this.remotePendingAsks.get(key);\n      if (askSet \u003d\u003d null) {\n        askSet \u003d new ResourceRequestSet(key);\n        this.remotePendingAsks.put(key, askSet);\n      }\n      askSet.addAndOverrideRR(rr);\n    }\n\n    // Cleanup properly if needed\n    for (ResourceRequestSetKey key : touchedKeys) {\n      ResourceRequestSet askSet \u003d this.remotePendingAsks.get(key);\n      if (askSet.getNumContainers() \u003d\u003d 0) {\n        this.remotePendingAsks.remove(key);\n      } else {\n        // Remove non-any zero RRs\n        askSet.cleanupZeroNonAnyRR();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/AMRMClientRelayer.java"
    }
  }
}