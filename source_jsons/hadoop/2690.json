{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientDatanodeProtocolTranslatorPB.java",
  "functionName": "createClientDatanodeProtocolProxy",
  "functionId": "createClientDatanodeProtocolProxy___datanodeid-DatanodeID__conf-Configuration__socketTimeout-int__connectToDnViaHostname-boolean__locatedBlock-LocatedBlock",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientDatanodeProtocolTranslatorPB.java",
  "functionStartLine": 154,
  "functionEndLine": 178,
  "numCommitsSeen": 48,
  "timeTaken": 2686,
  "changeHistory": [
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "e2c9b288b223b9fd82dc12018936e13128413492",
    "f98d8eb291be364102b5c3011ce72e8f43eab389",
    "be7dd8333a7e56e732171db0781786987de03195",
    "2740112bb64e1cc8132a1dc450d9e461c2e4729e"
  ],
  "changeHistoryShort": {
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "e2c9b288b223b9fd82dc12018936e13128413492": "Yfilerename",
    "f98d8eb291be364102b5c3011ce72e8f43eab389": "Ymultichange(Yparameterchange,Ybodychange)",
    "be7dd8333a7e56e732171db0781786987de03195": "Ybodychange",
    "2740112bb64e1cc8132a1dc450d9e461c2e4729e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,24 @@\n   static ClientDatanodeProtocolPB createClientDatanodeProtocolProxy(\n       DatanodeID datanodeid, Configuration conf, int socketTimeout,\n       boolean connectToDnViaHostname, LocatedBlock locatedBlock) throws IOException {\n     final String dnAddr \u003d datanodeid.getIpcAddr(connectToDnViaHostname);\n     InetSocketAddress addr \u003d NetUtils.createSocketAddr(dnAddr);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Connecting to datanode \" + dnAddr + \" addr\u003d\" + addr);\n-    }\n-    \n+    LOG.debug(\"Connecting to datanode {} addr\u003d{}\", dnAddr, addr);\n+\n     // Since we\u0027re creating a new UserGroupInformation here, we know that no\n     // future RPC proxies will be able to re-use the same connection. And\n     // usages of this proxy tend to be one-off calls.\n     //\n     // This is a temporary fix: callers should really achieve this by using\n     // RPC.stopProxy() on the resulting object, but this is currently not\n     // working in trunk. See the discussion on HDFS-1965.\n     Configuration confWithNoIpcIdle \u003d new Configuration(conf);\n     confWithNoIpcIdle.setInt(CommonConfigurationKeysPublic\n         .IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, 0);\n \n     UserGroupInformation ticket \u003d UserGroupInformation\n         .createRemoteUser(locatedBlock.getBlock().getLocalBlock().toString());\n     ticket.addToken(locatedBlock.getBlockToken());\n     return createClientDatanodeProtocolProxy(addr, ticket, confWithNoIpcIdle,\n         NetUtils.getDefaultSocketFactory(conf), socketTimeout);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static ClientDatanodeProtocolPB createClientDatanodeProtocolProxy(\n      DatanodeID datanodeid, Configuration conf, int socketTimeout,\n      boolean connectToDnViaHostname, LocatedBlock locatedBlock) throws IOException {\n    final String dnAddr \u003d datanodeid.getIpcAddr(connectToDnViaHostname);\n    InetSocketAddress addr \u003d NetUtils.createSocketAddr(dnAddr);\n    LOG.debug(\"Connecting to datanode {} addr\u003d{}\", dnAddr, addr);\n\n    // Since we\u0027re creating a new UserGroupInformation here, we know that no\n    // future RPC proxies will be able to re-use the same connection. And\n    // usages of this proxy tend to be one-off calls.\n    //\n    // This is a temporary fix: callers should really achieve this by using\n    // RPC.stopProxy() on the resulting object, but this is currently not\n    // working in trunk. See the discussion on HDFS-1965.\n    Configuration confWithNoIpcIdle \u003d new Configuration(conf);\n    confWithNoIpcIdle.setInt(CommonConfigurationKeysPublic\n        .IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, 0);\n\n    UserGroupInformation ticket \u003d UserGroupInformation\n        .createRemoteUser(locatedBlock.getBlock().getLocalBlock().toString());\n    ticket.addToken(locatedBlock.getBlockToken());\n    return createClientDatanodeProtocolProxy(addr, ticket, confWithNoIpcIdle,\n        NetUtils.getDefaultSocketFactory(conf), socketTimeout);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientDatanodeProtocolTranslatorPB.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   static ClientDatanodeProtocolPB createClientDatanodeProtocolProxy(\n       DatanodeID datanodeid, Configuration conf, int socketTimeout,\n       boolean connectToDnViaHostname, LocatedBlock locatedBlock) throws IOException {\n     final String dnAddr \u003d datanodeid.getIpcAddr(connectToDnViaHostname);\n     InetSocketAddress addr \u003d NetUtils.createSocketAddr(dnAddr);\n-    LOG.debug(\"Connecting to datanode {} addr\u003d{}\", dnAddr, addr);\n-\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Connecting to datanode \" + dnAddr + \" addr\u003d\" + addr);\n+    }\n+    \n     // Since we\u0027re creating a new UserGroupInformation here, we know that no\n     // future RPC proxies will be able to re-use the same connection. And\n     // usages of this proxy tend to be one-off calls.\n     //\n     // This is a temporary fix: callers should really achieve this by using\n     // RPC.stopProxy() on the resulting object, but this is currently not\n     // working in trunk. See the discussion on HDFS-1965.\n     Configuration confWithNoIpcIdle \u003d new Configuration(conf);\n     confWithNoIpcIdle.setInt(CommonConfigurationKeysPublic\n         .IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, 0);\n \n     UserGroupInformation ticket \u003d UserGroupInformation\n         .createRemoteUser(locatedBlock.getBlock().getLocalBlock().toString());\n     ticket.addToken(locatedBlock.getBlockToken());\n     return createClientDatanodeProtocolProxy(addr, ticket, confWithNoIpcIdle,\n         NetUtils.getDefaultSocketFactory(conf), socketTimeout);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static ClientDatanodeProtocolPB createClientDatanodeProtocolProxy(\n      DatanodeID datanodeid, Configuration conf, int socketTimeout,\n      boolean connectToDnViaHostname, LocatedBlock locatedBlock) throws IOException {\n    final String dnAddr \u003d datanodeid.getIpcAddr(connectToDnViaHostname);\n    InetSocketAddress addr \u003d NetUtils.createSocketAddr(dnAddr);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Connecting to datanode \" + dnAddr + \" addr\u003d\" + addr);\n    }\n    \n    // Since we\u0027re creating a new UserGroupInformation here, we know that no\n    // future RPC proxies will be able to re-use the same connection. And\n    // usages of this proxy tend to be one-off calls.\n    //\n    // This is a temporary fix: callers should really achieve this by using\n    // RPC.stopProxy() on the resulting object, but this is currently not\n    // working in trunk. See the discussion on HDFS-1965.\n    Configuration confWithNoIpcIdle \u003d new Configuration(conf);\n    confWithNoIpcIdle.setInt(CommonConfigurationKeysPublic\n        .IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, 0);\n\n    UserGroupInformation ticket \u003d UserGroupInformation\n        .createRemoteUser(locatedBlock.getBlock().getLocalBlock().toString());\n    ticket.addToken(locatedBlock.getBlockToken());\n    return createClientDatanodeProtocolProxy(addr, ticket, confWithNoIpcIdle,\n        NetUtils.getDefaultSocketFactory(conf), socketTimeout);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientDatanodeProtocolTranslatorPB.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "09/09/15 10:28 AM",
      "commitNameOld": "0f0e897bf1ff8383f3f524ba83161969531b0772",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 20.31,
      "commitsBetweenForRepo": 153,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,24 @@\n   static ClientDatanodeProtocolPB createClientDatanodeProtocolProxy(\n       DatanodeID datanodeid, Configuration conf, int socketTimeout,\n       boolean connectToDnViaHostname, LocatedBlock locatedBlock) throws IOException {\n     final String dnAddr \u003d datanodeid.getIpcAddr(connectToDnViaHostname);\n     InetSocketAddress addr \u003d NetUtils.createSocketAddr(dnAddr);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Connecting to datanode \" + dnAddr + \" addr\u003d\" + addr);\n-    }\n-    \n+    LOG.debug(\"Connecting to datanode {} addr\u003d{}\", dnAddr, addr);\n+\n     // Since we\u0027re creating a new UserGroupInformation here, we know that no\n     // future RPC proxies will be able to re-use the same connection. And\n     // usages of this proxy tend to be one-off calls.\n     //\n     // This is a temporary fix: callers should really achieve this by using\n     // RPC.stopProxy() on the resulting object, but this is currently not\n     // working in trunk. See the discussion on HDFS-1965.\n     Configuration confWithNoIpcIdle \u003d new Configuration(conf);\n     confWithNoIpcIdle.setInt(CommonConfigurationKeysPublic\n         .IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, 0);\n \n     UserGroupInformation ticket \u003d UserGroupInformation\n         .createRemoteUser(locatedBlock.getBlock().getLocalBlock().toString());\n     ticket.addToken(locatedBlock.getBlockToken());\n     return createClientDatanodeProtocolProxy(addr, ticket, confWithNoIpcIdle,\n         NetUtils.getDefaultSocketFactory(conf), socketTimeout);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static ClientDatanodeProtocolPB createClientDatanodeProtocolProxy(\n      DatanodeID datanodeid, Configuration conf, int socketTimeout,\n      boolean connectToDnViaHostname, LocatedBlock locatedBlock) throws IOException {\n    final String dnAddr \u003d datanodeid.getIpcAddr(connectToDnViaHostname);\n    InetSocketAddress addr \u003d NetUtils.createSocketAddr(dnAddr);\n    LOG.debug(\"Connecting to datanode {} addr\u003d{}\", dnAddr, addr);\n\n    // Since we\u0027re creating a new UserGroupInformation here, we know that no\n    // future RPC proxies will be able to re-use the same connection. And\n    // usages of this proxy tend to be one-off calls.\n    //\n    // This is a temporary fix: callers should really achieve this by using\n    // RPC.stopProxy() on the resulting object, but this is currently not\n    // working in trunk. See the discussion on HDFS-1965.\n    Configuration confWithNoIpcIdle \u003d new Configuration(conf);\n    confWithNoIpcIdle.setInt(CommonConfigurationKeysPublic\n        .IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, 0);\n\n    UserGroupInformation ticket \u003d UserGroupInformation\n        .createRemoteUser(locatedBlock.getBlock().getLocalBlock().toString());\n    ticket.addToken(locatedBlock.getBlockToken());\n    return createClientDatanodeProtocolProxy(addr, ticket, confWithNoIpcIdle,\n        NetUtils.getDefaultSocketFactory(conf), socketTimeout);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientDatanodeProtocolTranslatorPB.java",
      "extendedDetails": {}
    },
    "e2c9b288b223b9fd82dc12018936e13128413492": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8925. Move BlockReaderLocal to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "28/08/15 2:38 PM",
      "commitName": "e2c9b288b223b9fd82dc12018936e13128413492",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/08/15 2:21 PM",
      "commitNameOld": "b94b56806d3d6e04984e229b479f7ac15b62bbfa",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static ClientDatanodeProtocolPB createClientDatanodeProtocolProxy(\n      DatanodeID datanodeid, Configuration conf, int socketTimeout,\n      boolean connectToDnViaHostname, LocatedBlock locatedBlock) throws IOException {\n    final String dnAddr \u003d datanodeid.getIpcAddr(connectToDnViaHostname);\n    InetSocketAddress addr \u003d NetUtils.createSocketAddr(dnAddr);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Connecting to datanode \" + dnAddr + \" addr\u003d\" + addr);\n    }\n    \n    // Since we\u0027re creating a new UserGroupInformation here, we know that no\n    // future RPC proxies will be able to re-use the same connection. And\n    // usages of this proxy tend to be one-off calls.\n    //\n    // This is a temporary fix: callers should really achieve this by using\n    // RPC.stopProxy() on the resulting object, but this is currently not\n    // working in trunk. See the discussion on HDFS-1965.\n    Configuration confWithNoIpcIdle \u003d new Configuration(conf);\n    confWithNoIpcIdle.setInt(CommonConfigurationKeysPublic\n        .IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, 0);\n\n    UserGroupInformation ticket \u003d UserGroupInformation\n        .createRemoteUser(locatedBlock.getBlock().getLocalBlock().toString());\n    ticket.addToken(locatedBlock.getBlockToken());\n    return createClientDatanodeProtocolProxy(addr, ticket, confWithNoIpcIdle,\n        NetUtils.getDefaultSocketFactory(conf), socketTimeout);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientDatanodeProtocolTranslatorPB.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientDatanodeProtocolTranslatorPB.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientDatanodeProtocolTranslatorPB.java"
      }
    },
    "f98d8eb291be364102b5c3011ce72e8f43eab389": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-3150. Add option for clients to contact DNs via hostname. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373094 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/12 1:59 PM",
      "commitName": "f98d8eb291be364102b5c3011ce72e8f43eab389",
      "commitAuthor": "Eli Collins",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3150. Add option for clients to contact DNs via hostname. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373094 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/08/12 1:59 PM",
          "commitName": "f98d8eb291be364102b5c3011ce72e8f43eab389",
          "commitAuthor": "Eli Collins",
          "commitDateOld": "23/04/12 9:34 AM",
          "commitNameOld": "589c68ae09effd6c4f26505d61636f779c22e99f",
          "commitAuthorOld": "Sanjay Radia",
          "daysBetweenCommits": 113.18,
          "commitsBetweenForRepo": 597,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,26 @@\n   static ClientDatanodeProtocolPB createClientDatanodeProtocolProxy(\n       DatanodeID datanodeid, Configuration conf, int socketTimeout,\n-      LocatedBlock locatedBlock) throws IOException {\n-    InetSocketAddress addr \u003d NetUtils.createSocketAddr(datanodeid.getIpcAddr());\n+      boolean connectToDnViaHostname, LocatedBlock locatedBlock) throws IOException {\n+    final String dnAddr \u003d datanodeid.getIpcAddr(connectToDnViaHostname);\n+    InetSocketAddress addr \u003d NetUtils.createSocketAddr(dnAddr);\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"ClientDatanodeProtocol addr\u003d\" + addr);\n+      LOG.debug(\"Connecting to datanode \" + dnAddr + \" addr\u003d\" + addr);\n     }\n     \n     // Since we\u0027re creating a new UserGroupInformation here, we know that no\n     // future RPC proxies will be able to re-use the same connection. And\n     // usages of this proxy tend to be one-off calls.\n     //\n     // This is a temporary fix: callers should really achieve this by using\n     // RPC.stopProxy() on the resulting object, but this is currently not\n     // working in trunk. See the discussion on HDFS-1965.\n     Configuration confWithNoIpcIdle \u003d new Configuration(conf);\n     confWithNoIpcIdle.setInt(CommonConfigurationKeysPublic\n         .IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, 0);\n \n     UserGroupInformation ticket \u003d UserGroupInformation\n         .createRemoteUser(locatedBlock.getBlock().getLocalBlock().toString());\n     ticket.addToken(locatedBlock.getBlockToken());\n     return createClientDatanodeProtocolProxy(addr, ticket, confWithNoIpcIdle,\n         NetUtils.getDefaultSocketFactory(conf), socketTimeout);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static ClientDatanodeProtocolPB createClientDatanodeProtocolProxy(\n      DatanodeID datanodeid, Configuration conf, int socketTimeout,\n      boolean connectToDnViaHostname, LocatedBlock locatedBlock) throws IOException {\n    final String dnAddr \u003d datanodeid.getIpcAddr(connectToDnViaHostname);\n    InetSocketAddress addr \u003d NetUtils.createSocketAddr(dnAddr);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Connecting to datanode \" + dnAddr + \" addr\u003d\" + addr);\n    }\n    \n    // Since we\u0027re creating a new UserGroupInformation here, we know that no\n    // future RPC proxies will be able to re-use the same connection. And\n    // usages of this proxy tend to be one-off calls.\n    //\n    // This is a temporary fix: callers should really achieve this by using\n    // RPC.stopProxy() on the resulting object, but this is currently not\n    // working in trunk. See the discussion on HDFS-1965.\n    Configuration confWithNoIpcIdle \u003d new Configuration(conf);\n    confWithNoIpcIdle.setInt(CommonConfigurationKeysPublic\n        .IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, 0);\n\n    UserGroupInformation ticket \u003d UserGroupInformation\n        .createRemoteUser(locatedBlock.getBlock().getLocalBlock().toString());\n    ticket.addToken(locatedBlock.getBlockToken());\n    return createClientDatanodeProtocolProxy(addr, ticket, confWithNoIpcIdle,\n        NetUtils.getDefaultSocketFactory(conf), socketTimeout);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientDatanodeProtocolTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "[datanodeid-DatanodeID, conf-Configuration, socketTimeout-int, locatedBlock-LocatedBlock]",
            "newValue": "[datanodeid-DatanodeID, conf-Configuration, socketTimeout-int, connectToDnViaHostname-boolean, locatedBlock-LocatedBlock]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3150. Add option for clients to contact DNs via hostname. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373094 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/08/12 1:59 PM",
          "commitName": "f98d8eb291be364102b5c3011ce72e8f43eab389",
          "commitAuthor": "Eli Collins",
          "commitDateOld": "23/04/12 9:34 AM",
          "commitNameOld": "589c68ae09effd6c4f26505d61636f779c22e99f",
          "commitAuthorOld": "Sanjay Radia",
          "daysBetweenCommits": 113.18,
          "commitsBetweenForRepo": 597,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,26 @@\n   static ClientDatanodeProtocolPB createClientDatanodeProtocolProxy(\n       DatanodeID datanodeid, Configuration conf, int socketTimeout,\n-      LocatedBlock locatedBlock) throws IOException {\n-    InetSocketAddress addr \u003d NetUtils.createSocketAddr(datanodeid.getIpcAddr());\n+      boolean connectToDnViaHostname, LocatedBlock locatedBlock) throws IOException {\n+    final String dnAddr \u003d datanodeid.getIpcAddr(connectToDnViaHostname);\n+    InetSocketAddress addr \u003d NetUtils.createSocketAddr(dnAddr);\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"ClientDatanodeProtocol addr\u003d\" + addr);\n+      LOG.debug(\"Connecting to datanode \" + dnAddr + \" addr\u003d\" + addr);\n     }\n     \n     // Since we\u0027re creating a new UserGroupInformation here, we know that no\n     // future RPC proxies will be able to re-use the same connection. And\n     // usages of this proxy tend to be one-off calls.\n     //\n     // This is a temporary fix: callers should really achieve this by using\n     // RPC.stopProxy() on the resulting object, but this is currently not\n     // working in trunk. See the discussion on HDFS-1965.\n     Configuration confWithNoIpcIdle \u003d new Configuration(conf);\n     confWithNoIpcIdle.setInt(CommonConfigurationKeysPublic\n         .IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, 0);\n \n     UserGroupInformation ticket \u003d UserGroupInformation\n         .createRemoteUser(locatedBlock.getBlock().getLocalBlock().toString());\n     ticket.addToken(locatedBlock.getBlockToken());\n     return createClientDatanodeProtocolProxy(addr, ticket, confWithNoIpcIdle,\n         NetUtils.getDefaultSocketFactory(conf), socketTimeout);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static ClientDatanodeProtocolPB createClientDatanodeProtocolProxy(\n      DatanodeID datanodeid, Configuration conf, int socketTimeout,\n      boolean connectToDnViaHostname, LocatedBlock locatedBlock) throws IOException {\n    final String dnAddr \u003d datanodeid.getIpcAddr(connectToDnViaHostname);\n    InetSocketAddress addr \u003d NetUtils.createSocketAddr(dnAddr);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Connecting to datanode \" + dnAddr + \" addr\u003d\" + addr);\n    }\n    \n    // Since we\u0027re creating a new UserGroupInformation here, we know that no\n    // future RPC proxies will be able to re-use the same connection. And\n    // usages of this proxy tend to be one-off calls.\n    //\n    // This is a temporary fix: callers should really achieve this by using\n    // RPC.stopProxy() on the resulting object, but this is currently not\n    // working in trunk. See the discussion on HDFS-1965.\n    Configuration confWithNoIpcIdle \u003d new Configuration(conf);\n    confWithNoIpcIdle.setInt(CommonConfigurationKeysPublic\n        .IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, 0);\n\n    UserGroupInformation ticket \u003d UserGroupInformation\n        .createRemoteUser(locatedBlock.getBlock().getLocalBlock().toString());\n    ticket.addToken(locatedBlock.getBlockToken());\n    return createClientDatanodeProtocolProxy(addr, ticket, confWithNoIpcIdle,\n        NetUtils.getDefaultSocketFactory(conf), socketTimeout);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientDatanodeProtocolTranslatorPB.java",
          "extendedDetails": {}
        }
      ]
    },
    "be7dd8333a7e56e732171db0781786987de03195": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3144. Refactor DatanodeID#getName by use. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/12 3:12 PM",
      "commitName": "be7dd8333a7e56e732171db0781786987de03195",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "29/02/12 3:47 PM",
      "commitNameOld": "1ba357553aafe30ecf33b9c7863c44c0b8021e78",
      "commitAuthorOld": "",
      "daysBetweenCommits": 31.93,
      "commitsBetweenForRepo": 192,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,25 @@\n   static ClientDatanodeProtocolPB createClientDatanodeProtocolProxy(\n       DatanodeID datanodeid, Configuration conf, int socketTimeout,\n       LocatedBlock locatedBlock) throws IOException {\n-    InetSocketAddress addr \u003d NetUtils.createSocketAddr(\n-      datanodeid.getHost() + \":\" + datanodeid.getIpcPort());\n+    InetSocketAddress addr \u003d NetUtils.createSocketAddr(datanodeid.getIpcAddr());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"ClientDatanodeProtocol addr\u003d\" + addr);\n     }\n     \n     // Since we\u0027re creating a new UserGroupInformation here, we know that no\n     // future RPC proxies will be able to re-use the same connection. And\n     // usages of this proxy tend to be one-off calls.\n     //\n     // This is a temporary fix: callers should really achieve this by using\n     // RPC.stopProxy() on the resulting object, but this is currently not\n     // working in trunk. See the discussion on HDFS-1965.\n     Configuration confWithNoIpcIdle \u003d new Configuration(conf);\n     confWithNoIpcIdle.setInt(CommonConfigurationKeysPublic\n         .IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, 0);\n \n     UserGroupInformation ticket \u003d UserGroupInformation\n         .createRemoteUser(locatedBlock.getBlock().getLocalBlock().toString());\n     ticket.addToken(locatedBlock.getBlockToken());\n     return createClientDatanodeProtocolProxy(addr, ticket, confWithNoIpcIdle,\n         NetUtils.getDefaultSocketFactory(conf), socketTimeout);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static ClientDatanodeProtocolPB createClientDatanodeProtocolProxy(\n      DatanodeID datanodeid, Configuration conf, int socketTimeout,\n      LocatedBlock locatedBlock) throws IOException {\n    InetSocketAddress addr \u003d NetUtils.createSocketAddr(datanodeid.getIpcAddr());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"ClientDatanodeProtocol addr\u003d\" + addr);\n    }\n    \n    // Since we\u0027re creating a new UserGroupInformation here, we know that no\n    // future RPC proxies will be able to re-use the same connection. And\n    // usages of this proxy tend to be one-off calls.\n    //\n    // This is a temporary fix: callers should really achieve this by using\n    // RPC.stopProxy() on the resulting object, but this is currently not\n    // working in trunk. See the discussion on HDFS-1965.\n    Configuration confWithNoIpcIdle \u003d new Configuration(conf);\n    confWithNoIpcIdle.setInt(CommonConfigurationKeysPublic\n        .IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, 0);\n\n    UserGroupInformation ticket \u003d UserGroupInformation\n        .createRemoteUser(locatedBlock.getBlock().getLocalBlock().toString());\n    ticket.addToken(locatedBlock.getBlockToken());\n    return createClientDatanodeProtocolProxy(addr, ticket, confWithNoIpcIdle,\n        NetUtils.getDefaultSocketFactory(conf), socketTimeout);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientDatanodeProtocolTranslatorPB.java",
      "extendedDetails": {}
    },
    "2740112bb64e1cc8132a1dc450d9e461c2e4729e": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2647. Used protobuf based RPC for InterDatanodeProtocol, ClientDatanodeProtocol, JournalProtocol, NamenodeProtocol. Contributed by Suresh Srinivas.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213040 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/12/11 10:53 AM",
      "commitName": "2740112bb64e1cc8132a1dc450d9e461c2e4729e",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,26 @@\n+  static ClientDatanodeProtocolPB createClientDatanodeProtocolProxy(\n+      DatanodeID datanodeid, Configuration conf, int socketTimeout,\n+      LocatedBlock locatedBlock) throws IOException {\n+    InetSocketAddress addr \u003d NetUtils.createSocketAddr(\n+      datanodeid.getHost() + \":\" + datanodeid.getIpcPort());\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"ClientDatanodeProtocol addr\u003d\" + addr);\n+    }\n+    \n+    // Since we\u0027re creating a new UserGroupInformation here, we know that no\n+    // future RPC proxies will be able to re-use the same connection. And\n+    // usages of this proxy tend to be one-off calls.\n+    //\n+    // This is a temporary fix: callers should really achieve this by using\n+    // RPC.stopProxy() on the resulting object, but this is currently not\n+    // working in trunk. See the discussion on HDFS-1965.\n+    Configuration confWithNoIpcIdle \u003d new Configuration(conf);\n+    confWithNoIpcIdle.setInt(CommonConfigurationKeysPublic\n+        .IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, 0);\n+\n+    UserGroupInformation ticket \u003d UserGroupInformation\n+        .createRemoteUser(locatedBlock.getBlock().getLocalBlock().toString());\n+    ticket.addToken(locatedBlock.getBlockToken());\n+    return createClientDatanodeProtocolProxy(addr, ticket, confWithNoIpcIdle,\n+        NetUtils.getDefaultSocketFactory(conf), socketTimeout);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static ClientDatanodeProtocolPB createClientDatanodeProtocolProxy(\n      DatanodeID datanodeid, Configuration conf, int socketTimeout,\n      LocatedBlock locatedBlock) throws IOException {\n    InetSocketAddress addr \u003d NetUtils.createSocketAddr(\n      datanodeid.getHost() + \":\" + datanodeid.getIpcPort());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"ClientDatanodeProtocol addr\u003d\" + addr);\n    }\n    \n    // Since we\u0027re creating a new UserGroupInformation here, we know that no\n    // future RPC proxies will be able to re-use the same connection. And\n    // usages of this proxy tend to be one-off calls.\n    //\n    // This is a temporary fix: callers should really achieve this by using\n    // RPC.stopProxy() on the resulting object, but this is currently not\n    // working in trunk. See the discussion on HDFS-1965.\n    Configuration confWithNoIpcIdle \u003d new Configuration(conf);\n    confWithNoIpcIdle.setInt(CommonConfigurationKeysPublic\n        .IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, 0);\n\n    UserGroupInformation ticket \u003d UserGroupInformation\n        .createRemoteUser(locatedBlock.getBlock().getLocalBlock().toString());\n    ticket.addToken(locatedBlock.getBlockToken());\n    return createClientDatanodeProtocolProxy(addr, ticket, confWithNoIpcIdle,\n        NetUtils.getDefaultSocketFactory(conf), socketTimeout);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientDatanodeProtocolTranslatorPB.java"
    }
  }
}