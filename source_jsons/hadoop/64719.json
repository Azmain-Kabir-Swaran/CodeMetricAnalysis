{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AFileSystem.java",
  "functionName": "select",
  "functionId": "select___source-Path(modifiers-final)__expression-String(modifiers-final)__options-Configuration(modifiers-final)__providedStatus-Optional__S3AFileStatus__(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
  "functionStartLine": 4536,
  "functionEndLine": 4582,
  "numCommitsSeen": 272,
  "timeTaken": 5681,
  "changeHistory": [
    "5e2ce370a322a46b496541ccd17443197fcfeb5a",
    "e02eb24e0a9139418120027b694492e0738df20a",
    "a36274d69947648dbe82721220cc5240ec5d396d",
    "6fa229891e06eea62cb9634efde755f40247e816",
    "f365957c6326f88734bc0a5d01cfb7eac713db20"
  ],
  "changeHistoryShort": {
    "5e2ce370a322a46b496541ccd17443197fcfeb5a": "Ymultichange(Yparameterchange,Ybodychange)",
    "e02eb24e0a9139418120027b694492e0738df20a": "Ybodychange",
    "a36274d69947648dbe82721220cc5240ec5d396d": "Ybodychange",
    "6fa229891e06eea62cb9634efde755f40247e816": "Ybodychange",
    "f365957c6326f88734bc0a5d01cfb7eac713db20": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5e2ce370a322a46b496541ccd17443197fcfeb5a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16759. Filesystem openFile() builder to take a FileStatus param (#1761). Contributed by Steve Loughran\n\n* Enhanced builder + FS spec\r\n* s3a FS to use this to skip HEAD on open\r\n* and to use version/etag when opening the file\r\n\r\nworks with S3AFileStatus FS and S3ALocatedFileStatus",
      "commitDate": "21/01/20 2:31 PM",
      "commitName": "5e2ce370a322a46b496541ccd17443197fcfeb5a",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16759. Filesystem openFile() builder to take a FileStatus param (#1761). Contributed by Steve Loughran\n\n* Enhanced builder + FS spec\r\n* s3a FS to use this to skip HEAD on open\r\n* and to use version/etag when opening the file\r\n\r\nworks with S3AFileStatus FS and S3ALocatedFileStatus",
          "commitDate": "21/01/20 2:31 PM",
          "commitName": "5e2ce370a322a46b496541ccd17443197fcfeb5a",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "10/01/20 3:11 AM",
          "commitNameOld": "49df83899543586bbcaf80f01399ade031cf68b0",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 11.47,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,47 @@\n   private FSDataInputStream select(final Path source,\n       final String expression,\n-      final Configuration options)\n+      final Configuration options,\n+      final Optional\u003cS3AFileStatus\u003e providedStatus)\n       throws IOException {\n     entryPoint(OBJECT_SELECT_REQUESTS);\n     requireSelectSupport(source);\n     final Path path \u003d makeQualified(source);\n-    // call getFileStatus(), which will look at S3Guard first,\n-    // so the operation will fail if it is not there or S3Guard believes it has\n-    // been deleted.\n-    // validation of the file status are delegated to the binding.\n-    final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n+    final S3AFileStatus fileStatus \u003d extractOrFetchSimpleFileStatus(path,\n+        providedStatus);\n \n     // readahead range can be dynamically set\n     long ra \u003d options.getLong(READAHEAD_RANGE, readAhead);\n     S3ObjectAttributes objectAttributes \u003d createObjectAttributes(fileStatus);\n     S3AReadOpContext readContext \u003d createReadContext(fileStatus, inputPolicy,\n         changeDetectionPolicy, ra);\n \n-    if (!fileStatus.isDirectory()) {\n+    if (changeDetectionPolicy.getSource() !\u003d ChangeDetectionPolicy.Source.None\n+        \u0026\u0026 fileStatus.getETag() !\u003d null) {\n+      // if there is change detection, and the status includes at least an\n+      // etag,\n       // check that the object metadata lines up with what is expected\n       // based on the object attributes (which may contain an eTag or\n-      // versionId) from S3Guard\n+      // versionId).\n+      // This is because the select API doesn\u0027t offer this.\n+      // (note: this is trouble for version checking as cannot force the old\n+      // version in the final read; nor can we check the etag match)\n       ChangeTracker changeTracker \u003d\n           new ChangeTracker(uri.toString(),\n               changeDetectionPolicy,\n               readContext.instrumentation.newInputStreamStatistics()\n                   .getVersionMismatchCounter(),\n               objectAttributes);\n \n       // will retry internally if wrong version detected\n       Invoker readInvoker \u003d readContext.getReadInvoker();\n       getObjectMetadata(path, changeTracker, readInvoker, \"select\");\n     }\n \n     // build and execute the request\n     return selectBinding.select(\n         readContext,\n         expression,\n         options,\n         generateSSECustomerKey(),\n         objectAttributes);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FSDataInputStream select(final Path source,\n      final String expression,\n      final Configuration options,\n      final Optional\u003cS3AFileStatus\u003e providedStatus)\n      throws IOException {\n    entryPoint(OBJECT_SELECT_REQUESTS);\n    requireSelectSupport(source);\n    final Path path \u003d makeQualified(source);\n    final S3AFileStatus fileStatus \u003d extractOrFetchSimpleFileStatus(path,\n        providedStatus);\n\n    // readahead range can be dynamically set\n    long ra \u003d options.getLong(READAHEAD_RANGE, readAhead);\n    S3ObjectAttributes objectAttributes \u003d createObjectAttributes(fileStatus);\n    S3AReadOpContext readContext \u003d createReadContext(fileStatus, inputPolicy,\n        changeDetectionPolicy, ra);\n\n    if (changeDetectionPolicy.getSource() !\u003d ChangeDetectionPolicy.Source.None\n        \u0026\u0026 fileStatus.getETag() !\u003d null) {\n      // if there is change detection, and the status includes at least an\n      // etag,\n      // check that the object metadata lines up with what is expected\n      // based on the object attributes (which may contain an eTag or\n      // versionId).\n      // This is because the select API doesn\u0027t offer this.\n      // (note: this is trouble for version checking as cannot force the old\n      // version in the final read; nor can we check the etag match)\n      ChangeTracker changeTracker \u003d\n          new ChangeTracker(uri.toString(),\n              changeDetectionPolicy,\n              readContext.instrumentation.newInputStreamStatistics()\n                  .getVersionMismatchCounter(),\n              objectAttributes);\n\n      // will retry internally if wrong version detected\n      Invoker readInvoker \u003d readContext.getReadInvoker();\n      getObjectMetadata(path, changeTracker, readInvoker, \"select\");\n    }\n\n    // build and execute the request\n    return selectBinding.select(\n        readContext,\n        expression,\n        options,\n        generateSSECustomerKey(),\n        objectAttributes);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[source-Path(modifiers-final), expression-String(modifiers-final), options-Configuration(modifiers-final)]",
            "newValue": "[source-Path(modifiers-final), expression-String(modifiers-final), options-Configuration(modifiers-final), providedStatus-Optional\u003cS3AFileStatus\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16759. Filesystem openFile() builder to take a FileStatus param (#1761). Contributed by Steve Loughran\n\n* Enhanced builder + FS spec\r\n* s3a FS to use this to skip HEAD on open\r\n* and to use version/etag when opening the file\r\n\r\nworks with S3AFileStatus FS and S3ALocatedFileStatus",
          "commitDate": "21/01/20 2:31 PM",
          "commitName": "5e2ce370a322a46b496541ccd17443197fcfeb5a",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "10/01/20 3:11 AM",
          "commitNameOld": "49df83899543586bbcaf80f01399ade031cf68b0",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 11.47,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,47 @@\n   private FSDataInputStream select(final Path source,\n       final String expression,\n-      final Configuration options)\n+      final Configuration options,\n+      final Optional\u003cS3AFileStatus\u003e providedStatus)\n       throws IOException {\n     entryPoint(OBJECT_SELECT_REQUESTS);\n     requireSelectSupport(source);\n     final Path path \u003d makeQualified(source);\n-    // call getFileStatus(), which will look at S3Guard first,\n-    // so the operation will fail if it is not there or S3Guard believes it has\n-    // been deleted.\n-    // validation of the file status are delegated to the binding.\n-    final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n+    final S3AFileStatus fileStatus \u003d extractOrFetchSimpleFileStatus(path,\n+        providedStatus);\n \n     // readahead range can be dynamically set\n     long ra \u003d options.getLong(READAHEAD_RANGE, readAhead);\n     S3ObjectAttributes objectAttributes \u003d createObjectAttributes(fileStatus);\n     S3AReadOpContext readContext \u003d createReadContext(fileStatus, inputPolicy,\n         changeDetectionPolicy, ra);\n \n-    if (!fileStatus.isDirectory()) {\n+    if (changeDetectionPolicy.getSource() !\u003d ChangeDetectionPolicy.Source.None\n+        \u0026\u0026 fileStatus.getETag() !\u003d null) {\n+      // if there is change detection, and the status includes at least an\n+      // etag,\n       // check that the object metadata lines up with what is expected\n       // based on the object attributes (which may contain an eTag or\n-      // versionId) from S3Guard\n+      // versionId).\n+      // This is because the select API doesn\u0027t offer this.\n+      // (note: this is trouble for version checking as cannot force the old\n+      // version in the final read; nor can we check the etag match)\n       ChangeTracker changeTracker \u003d\n           new ChangeTracker(uri.toString(),\n               changeDetectionPolicy,\n               readContext.instrumentation.newInputStreamStatistics()\n                   .getVersionMismatchCounter(),\n               objectAttributes);\n \n       // will retry internally if wrong version detected\n       Invoker readInvoker \u003d readContext.getReadInvoker();\n       getObjectMetadata(path, changeTracker, readInvoker, \"select\");\n     }\n \n     // build and execute the request\n     return selectBinding.select(\n         readContext,\n         expression,\n         options,\n         generateSSECustomerKey(),\n         objectAttributes);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FSDataInputStream select(final Path source,\n      final String expression,\n      final Configuration options,\n      final Optional\u003cS3AFileStatus\u003e providedStatus)\n      throws IOException {\n    entryPoint(OBJECT_SELECT_REQUESTS);\n    requireSelectSupport(source);\n    final Path path \u003d makeQualified(source);\n    final S3AFileStatus fileStatus \u003d extractOrFetchSimpleFileStatus(path,\n        providedStatus);\n\n    // readahead range can be dynamically set\n    long ra \u003d options.getLong(READAHEAD_RANGE, readAhead);\n    S3ObjectAttributes objectAttributes \u003d createObjectAttributes(fileStatus);\n    S3AReadOpContext readContext \u003d createReadContext(fileStatus, inputPolicy,\n        changeDetectionPolicy, ra);\n\n    if (changeDetectionPolicy.getSource() !\u003d ChangeDetectionPolicy.Source.None\n        \u0026\u0026 fileStatus.getETag() !\u003d null) {\n      // if there is change detection, and the status includes at least an\n      // etag,\n      // check that the object metadata lines up with what is expected\n      // based on the object attributes (which may contain an eTag or\n      // versionId).\n      // This is because the select API doesn\u0027t offer this.\n      // (note: this is trouble for version checking as cannot force the old\n      // version in the final read; nor can we check the etag match)\n      ChangeTracker changeTracker \u003d\n          new ChangeTracker(uri.toString(),\n              changeDetectionPolicy,\n              readContext.instrumentation.newInputStreamStatistics()\n                  .getVersionMismatchCounter(),\n              objectAttributes);\n\n      // will retry internally if wrong version detected\n      Invoker readInvoker \u003d readContext.getReadInvoker();\n      getObjectMetadata(path, changeTracker, readInvoker, \"select\");\n    }\n\n    // build and execute the request\n    return selectBinding.select(\n        readContext,\n        expression,\n        options,\n        generateSSECustomerKey(),\n        objectAttributes);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "e02eb24e0a9139418120027b694492e0738df20a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
      "commitDate": "20/06/19 1:56 AM",
      "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "16/06/19 9:05 AM",
      "commitNameOld": "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 3.7,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,43 @@\n   private FSDataInputStream select(final Path source,\n       final String expression,\n       final Configuration options)\n       throws IOException {\n     entryPoint(OBJECT_SELECT_REQUESTS);\n     requireSelectSupport(source);\n     final Path path \u003d makeQualified(source);\n     // call getFileStatus(), which will look at S3Guard first,\n     // so the operation will fail if it is not there or S3Guard believes it has\n     // been deleted.\n     // validation of the file status are delegated to the binding.\n     final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n \n     // readahead range can be dynamically set\n     long ra \u003d options.getLong(READAHEAD_RANGE, readAhead);\n-    S3ObjectAttributes objectAttributes \u003d createObjectAttributes(\n-        path, fileStatus.getETag(), fileStatus.getVersionId());\n+    S3ObjectAttributes objectAttributes \u003d createObjectAttributes(fileStatus);\n     S3AReadOpContext readContext \u003d createReadContext(fileStatus, inputPolicy,\n         changeDetectionPolicy, ra);\n \n     if (!fileStatus.isDirectory()) {\n       // check that the object metadata lines up with what is expected\n       // based on the object attributes (which may contain an eTag or\n       // versionId) from S3Guard\n       ChangeTracker changeTracker \u003d\n           new ChangeTracker(uri.toString(),\n               changeDetectionPolicy,\n               readContext.instrumentation.newInputStreamStatistics()\n                   .getVersionMismatchCounter(),\n               objectAttributes);\n \n       // will retry internally if wrong version detected\n       Invoker readInvoker \u003d readContext.getReadInvoker();\n       getObjectMetadata(path, changeTracker, readInvoker, \"select\");\n     }\n \n     // build and execute the request\n     return selectBinding.select(\n         readContext,\n         expression,\n         options,\n         generateSSECustomerKey(),\n         objectAttributes);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FSDataInputStream select(final Path source,\n      final String expression,\n      final Configuration options)\n      throws IOException {\n    entryPoint(OBJECT_SELECT_REQUESTS);\n    requireSelectSupport(source);\n    final Path path \u003d makeQualified(source);\n    // call getFileStatus(), which will look at S3Guard first,\n    // so the operation will fail if it is not there or S3Guard believes it has\n    // been deleted.\n    // validation of the file status are delegated to the binding.\n    final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n\n    // readahead range can be dynamically set\n    long ra \u003d options.getLong(READAHEAD_RANGE, readAhead);\n    S3ObjectAttributes objectAttributes \u003d createObjectAttributes(fileStatus);\n    S3AReadOpContext readContext \u003d createReadContext(fileStatus, inputPolicy,\n        changeDetectionPolicy, ra);\n\n    if (!fileStatus.isDirectory()) {\n      // check that the object metadata lines up with what is expected\n      // based on the object attributes (which may contain an eTag or\n      // versionId) from S3Guard\n      ChangeTracker changeTracker \u003d\n          new ChangeTracker(uri.toString(),\n              changeDetectionPolicy,\n              readContext.instrumentation.newInputStreamStatistics()\n                  .getVersionMismatchCounter(),\n              objectAttributes);\n\n      // will retry internally if wrong version detected\n      Invoker readInvoker \u003d readContext.getReadInvoker();\n      getObjectMetadata(path, changeTracker, readInvoker, \"select\");\n    }\n\n    // build and execute the request\n    return selectBinding.select(\n        readContext,\n        expression,\n        options,\n        generateSSECustomerKey(),\n        objectAttributes);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "a36274d69947648dbe82721220cc5240ec5d396d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
      "commitDate": "19/05/19 2:29 PM",
      "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthor": "Ben Roling",
      "commitDateOld": "30/04/19 3:53 AM",
      "commitNameOld": "0af4011580878566213016af0c32633eabd15100",
      "commitAuthorOld": "Ben Roling",
      "daysBetweenCommits": 19.44,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,44 @@\n   private FSDataInputStream select(final Path source,\n       final String expression,\n       final Configuration options)\n       throws IOException {\n     entryPoint(OBJECT_SELECT_REQUESTS);\n     requireSelectSupport(source);\n     final Path path \u003d makeQualified(source);\n     // call getFileStatus(), which will look at S3Guard first,\n     // so the operation will fail if it is not there or S3Guard believes it has\n     // been deleted.\n     // validation of the file status are delegated to the binding.\n-    final FileStatus fileStatus \u003d getFileStatus(path);\n+    final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n \n     // readahead range can be dynamically set\n     long ra \u003d options.getLong(READAHEAD_RANGE, readAhead);\n+    S3ObjectAttributes objectAttributes \u003d createObjectAttributes(\n+        path, fileStatus.getETag(), fileStatus.getVersionId());\n+    S3AReadOpContext readContext \u003d createReadContext(fileStatus, inputPolicy,\n+        changeDetectionPolicy, ra);\n+\n+    if (!fileStatus.isDirectory()) {\n+      // check that the object metadata lines up with what is expected\n+      // based on the object attributes (which may contain an eTag or\n+      // versionId) from S3Guard\n+      ChangeTracker changeTracker \u003d\n+          new ChangeTracker(uri.toString(),\n+              changeDetectionPolicy,\n+              readContext.instrumentation.newInputStreamStatistics()\n+                  .getVersionMismatchCounter(),\n+              objectAttributes);\n+\n+      // will retry internally if wrong version detected\n+      Invoker readInvoker \u003d readContext.getReadInvoker();\n+      getObjectMetadata(path, changeTracker, readInvoker, \"select\");\n+    }\n+\n     // build and execute the request\n     return selectBinding.select(\n-        createReadContext(fileStatus, inputPolicy, changeDetectionPolicy, ra),\n+        readContext,\n         expression,\n         options,\n         generateSSECustomerKey(),\n-        createObjectAttributes(path));\n+        objectAttributes);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FSDataInputStream select(final Path source,\n      final String expression,\n      final Configuration options)\n      throws IOException {\n    entryPoint(OBJECT_SELECT_REQUESTS);\n    requireSelectSupport(source);\n    final Path path \u003d makeQualified(source);\n    // call getFileStatus(), which will look at S3Guard first,\n    // so the operation will fail if it is not there or S3Guard believes it has\n    // been deleted.\n    // validation of the file status are delegated to the binding.\n    final S3AFileStatus fileStatus \u003d (S3AFileStatus) getFileStatus(path);\n\n    // readahead range can be dynamically set\n    long ra \u003d options.getLong(READAHEAD_RANGE, readAhead);\n    S3ObjectAttributes objectAttributes \u003d createObjectAttributes(\n        path, fileStatus.getETag(), fileStatus.getVersionId());\n    S3AReadOpContext readContext \u003d createReadContext(fileStatus, inputPolicy,\n        changeDetectionPolicy, ra);\n\n    if (!fileStatus.isDirectory()) {\n      // check that the object metadata lines up with what is expected\n      // based on the object attributes (which may contain an eTag or\n      // versionId) from S3Guard\n      ChangeTracker changeTracker \u003d\n          new ChangeTracker(uri.toString(),\n              changeDetectionPolicy,\n              readContext.instrumentation.newInputStreamStatistics()\n                  .getVersionMismatchCounter(),\n              objectAttributes);\n\n      // will retry internally if wrong version detected\n      Invoker readInvoker \u003d readContext.getReadInvoker();\n      getObjectMetadata(path, changeTracker, readInvoker, \"select\");\n    }\n\n    // build and execute the request\n    return selectBinding.select(\n        readContext,\n        expression,\n        options,\n        generateSSECustomerKey(),\n        objectAttributes);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "6fa229891e06eea62cb9634efde755f40247e816": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15625. S3A input stream to use etags/version number to detect changed source files.\n\nAuthor: Ben Roling \u003cben.roling@gmail.com\u003e\n\nInitial patch from Brahma Reddy Battula.\n",
      "commitDate": "13/03/19 1:37 PM",
      "commitName": "6fa229891e06eea62cb9634efde755f40247e816",
      "commitAuthor": "Ben Roling",
      "commitDateOld": "05/02/19 3:51 AM",
      "commitNameOld": "f365957c6326f88734bc0a5d01cfb7eac713db20",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 36.37,
      "commitsBetweenForRepo": 327,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private FSDataInputStream select(final Path source,\n       final String expression,\n       final Configuration options)\n       throws IOException {\n     entryPoint(OBJECT_SELECT_REQUESTS);\n     requireSelectSupport(source);\n     final Path path \u003d makeQualified(source);\n     // call getFileStatus(), which will look at S3Guard first,\n     // so the operation will fail if it is not there or S3Guard believes it has\n     // been deleted.\n     // validation of the file status are delegated to the binding.\n     final FileStatus fileStatus \u003d getFileStatus(path);\n \n     // readahead range can be dynamically set\n     long ra \u003d options.getLong(READAHEAD_RANGE, readAhead);\n     // build and execute the request\n     return selectBinding.select(\n-        createReadContext(fileStatus, inputPolicy, ra),\n+        createReadContext(fileStatus, inputPolicy, changeDetectionPolicy, ra),\n         expression,\n         options,\n         generateSSECustomerKey(),\n         createObjectAttributes(path));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FSDataInputStream select(final Path source,\n      final String expression,\n      final Configuration options)\n      throws IOException {\n    entryPoint(OBJECT_SELECT_REQUESTS);\n    requireSelectSupport(source);\n    final Path path \u003d makeQualified(source);\n    // call getFileStatus(), which will look at S3Guard first,\n    // so the operation will fail if it is not there or S3Guard believes it has\n    // been deleted.\n    // validation of the file status are delegated to the binding.\n    final FileStatus fileStatus \u003d getFileStatus(path);\n\n    // readahead range can be dynamically set\n    long ra \u003d options.getLong(READAHEAD_RANGE, readAhead);\n    // build and execute the request\n    return selectBinding.select(\n        createReadContext(fileStatus, inputPolicy, changeDetectionPolicy, ra),\n        expression,\n        options,\n        generateSSECustomerKey(),\n        createObjectAttributes(path));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "f365957c6326f88734bc0a5d01cfb7eac713db20": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();\nS3A to implement S3 Select through this API.\n\nThe new openFile() API is asynchronous, and implemented across FileSystem and FileContext.\n\nThe MapReduce V2 inputs are moved to this API, and you can actually set must/may\noptions to pass in.\n\nThis is more useful for setting things like s3a seek policy than for S3 select,\nas the existing input format/record readers can\u0027t handle S3 select output where\nthe stream is shorter than the file length, and splitting plain text is suboptimal.\nFuture work is needed there.\n\nIn the meantime, any/all filesystem connectors are now free to add their own filesystem-specific\nconfiguration parameters which can be set in jobs and used to set filesystem input stream\noptions (seek policy, retry, encryption secrets, etc).\n\nContributed by Steve Loughran\n",
      "commitDate": "05/02/19 3:51 AM",
      "commitName": "f365957c6326f88734bc0a5d01cfb7eac713db20",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,23 @@\n+  private FSDataInputStream select(final Path source,\n+      final String expression,\n+      final Configuration options)\n+      throws IOException {\n+    entryPoint(OBJECT_SELECT_REQUESTS);\n+    requireSelectSupport(source);\n+    final Path path \u003d makeQualified(source);\n+    // call getFileStatus(), which will look at S3Guard first,\n+    // so the operation will fail if it is not there or S3Guard believes it has\n+    // been deleted.\n+    // validation of the file status are delegated to the binding.\n+    final FileStatus fileStatus \u003d getFileStatus(path);\n+\n+    // readahead range can be dynamically set\n+    long ra \u003d options.getLong(READAHEAD_RANGE, readAhead);\n+    // build and execute the request\n+    return selectBinding.select(\n+        createReadContext(fileStatus, inputPolicy, ra),\n+        expression,\n+        options,\n+        generateSSECustomerKey(),\n+        createObjectAttributes(path));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private FSDataInputStream select(final Path source,\n      final String expression,\n      final Configuration options)\n      throws IOException {\n    entryPoint(OBJECT_SELECT_REQUESTS);\n    requireSelectSupport(source);\n    final Path path \u003d makeQualified(source);\n    // call getFileStatus(), which will look at S3Guard first,\n    // so the operation will fail if it is not there or S3Guard believes it has\n    // been deleted.\n    // validation of the file status are delegated to the binding.\n    final FileStatus fileStatus \u003d getFileStatus(path);\n\n    // readahead range can be dynamically set\n    long ra \u003d options.getLong(READAHEAD_RANGE, readAhead);\n    // build and execute the request\n    return selectBinding.select(\n        createReadContext(fileStatus, inputPolicy, ra),\n        expression,\n        options,\n        generateSSECustomerKey(),\n        createObjectAttributes(path));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}