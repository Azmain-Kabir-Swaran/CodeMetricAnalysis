{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RetryInvocationHandler.java",
  "functionName": "invoke",
  "functionId": "invoke",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
  "functionStartLine": 156,
  "functionEndLine": 158,
  "numCommitsSeen": 129,
  "timeTaken": 4721,
  "changeHistory": [
    "35f255b03b1bb5c94063ec1818af1d253ceee991",
    "5360da8bd9f720384860f411bee081aef13b4bd4",
    "83f2f78c118a7e52aba5104bd97b0acedc96be7b",
    "a9a8297cad4122961b34265c0a31d87134a4a028"
  ],
  "changeHistoryShort": {
    "35f255b03b1bb5c94063ec1818af1d253ceee991": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "5360da8bd9f720384860f411bee081aef13b4bd4": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "83f2f78c118a7e52aba5104bd97b0acedc96be7b": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "a9a8297cad4122961b34265c0a31d87134a4a028": "Yintroduced"
  },
  "changeHistoryDetails": {
    "35f255b03b1bb5c94063ec1818af1d253ceee991": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Revert \"Revert \"HADOOP-13226 Support async call retry and failover.\"\"\n\nThis reverts commit 5360da8bd9f720384860f411bee081aef13b4bd4.\n",
      "commitDate": "06/06/16 1:31 AM",
      "commitName": "35f255b03b1bb5c94063ec1818af1d253ceee991",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"Revert \"HADOOP-13226 Support async call retry and failover.\"\"\n\nThis reverts commit 5360da8bd9f720384860f411bee081aef13b4bd4.\n",
          "commitDate": "06/06/16 1:31 AM",
          "commitName": "35f255b03b1bb5c94063ec1818af1d253ceee991",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "03/06/16 6:09 PM",
          "commitNameOld": "5360da8bd9f720384860f411bee081aef13b4bd4",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 2.31,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,3 @@\n-  private Object invoke(final Method method, final Object[] args,\n-      final boolean isRpc, final int callId, final Counters counters)\n-      throws Throwable {\n-    final RetryPolicy policy \u003d getRetryPolicy(method);\n-\n-    while (true) {\n-      // The number of times this invocation handler has ever been failed over,\n-      // before this method invocation attempt. Used to prevent concurrent\n-      // failed method invocations from triggering multiple failover attempts.\n-      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n-\n-      if (isRpc) {\n-        Client.setCallIdAndRetryCount(callId, counters.retries);\n-      }\n-      try {\n-        final Object ret \u003d invokeMethod(method, args);\n-        hasMadeASuccessfulCall \u003d true;\n-        return ret;\n-      } catch (Exception ex) {\n-        if (Thread.currentThread().isInterrupted()) {\n-          // If interrupted, do not retry.\n-          throw ex;\n-        }\n-        handleException(method, policy, failoverCount, counters, ex);\n-      }\n-    }\n-  }\n\\ No newline at end of file\n+    CallReturn invoke() throws Throwable {\n+      return new CallReturn(invokeMethod());\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    CallReturn invoke() throws Throwable {\n      return new CallReturn(invokeMethod());\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
          "extendedDetails": {
            "oldValue": "[method-Method(modifiers-final), args-Object[](modifiers-final), isRpc-boolean(modifiers-final), callId-int(modifiers-final), counters-Counters(modifiers-final)]",
            "newValue": "[]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Revert \"Revert \"HADOOP-13226 Support async call retry and failover.\"\"\n\nThis reverts commit 5360da8bd9f720384860f411bee081aef13b4bd4.\n",
          "commitDate": "06/06/16 1:31 AM",
          "commitName": "35f255b03b1bb5c94063ec1818af1d253ceee991",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "03/06/16 6:09 PM",
          "commitNameOld": "5360da8bd9f720384860f411bee081aef13b4bd4",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 2.31,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,3 @@\n-  private Object invoke(final Method method, final Object[] args,\n-      final boolean isRpc, final int callId, final Counters counters)\n-      throws Throwable {\n-    final RetryPolicy policy \u003d getRetryPolicy(method);\n-\n-    while (true) {\n-      // The number of times this invocation handler has ever been failed over,\n-      // before this method invocation attempt. Used to prevent concurrent\n-      // failed method invocations from triggering multiple failover attempts.\n-      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n-\n-      if (isRpc) {\n-        Client.setCallIdAndRetryCount(callId, counters.retries);\n-      }\n-      try {\n-        final Object ret \u003d invokeMethod(method, args);\n-        hasMadeASuccessfulCall \u003d true;\n-        return ret;\n-      } catch (Exception ex) {\n-        if (Thread.currentThread().isInterrupted()) {\n-          // If interrupted, do not retry.\n-          throw ex;\n-        }\n-        handleException(method, policy, failoverCount, counters, ex);\n-      }\n-    }\n-  }\n\\ No newline at end of file\n+    CallReturn invoke() throws Throwable {\n+      return new CallReturn(invokeMethod());\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    CallReturn invoke() throws Throwable {\n      return new CallReturn(invokeMethod());\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
          "extendedDetails": {
            "oldValue": "Object",
            "newValue": "CallReturn"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Revert \"Revert \"HADOOP-13226 Support async call retry and failover.\"\"\n\nThis reverts commit 5360da8bd9f720384860f411bee081aef13b4bd4.\n",
          "commitDate": "06/06/16 1:31 AM",
          "commitName": "35f255b03b1bb5c94063ec1818af1d253ceee991",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "03/06/16 6:09 PM",
          "commitNameOld": "5360da8bd9f720384860f411bee081aef13b4bd4",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 2.31,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,3 @@\n-  private Object invoke(final Method method, final Object[] args,\n-      final boolean isRpc, final int callId, final Counters counters)\n-      throws Throwable {\n-    final RetryPolicy policy \u003d getRetryPolicy(method);\n-\n-    while (true) {\n-      // The number of times this invocation handler has ever been failed over,\n-      // before this method invocation attempt. Used to prevent concurrent\n-      // failed method invocations from triggering multiple failover attempts.\n-      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n-\n-      if (isRpc) {\n-        Client.setCallIdAndRetryCount(callId, counters.retries);\n-      }\n-      try {\n-        final Object ret \u003d invokeMethod(method, args);\n-        hasMadeASuccessfulCall \u003d true;\n-        return ret;\n-      } catch (Exception ex) {\n-        if (Thread.currentThread().isInterrupted()) {\n-          // If interrupted, do not retry.\n-          throw ex;\n-        }\n-        handleException(method, policy, failoverCount, counters, ex);\n-      }\n-    }\n-  }\n\\ No newline at end of file\n+    CallReturn invoke() throws Throwable {\n+      return new CallReturn(invokeMethod());\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    CallReturn invoke() throws Throwable {\n      return new CallReturn(invokeMethod());\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"Revert \"HADOOP-13226 Support async call retry and failover.\"\"\n\nThis reverts commit 5360da8bd9f720384860f411bee081aef13b4bd4.\n",
          "commitDate": "06/06/16 1:31 AM",
          "commitName": "35f255b03b1bb5c94063ec1818af1d253ceee991",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "03/06/16 6:09 PM",
          "commitNameOld": "5360da8bd9f720384860f411bee081aef13b4bd4",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 2.31,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,3 @@\n-  private Object invoke(final Method method, final Object[] args,\n-      final boolean isRpc, final int callId, final Counters counters)\n-      throws Throwable {\n-    final RetryPolicy policy \u003d getRetryPolicy(method);\n-\n-    while (true) {\n-      // The number of times this invocation handler has ever been failed over,\n-      // before this method invocation attempt. Used to prevent concurrent\n-      // failed method invocations from triggering multiple failover attempts.\n-      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n-\n-      if (isRpc) {\n-        Client.setCallIdAndRetryCount(callId, counters.retries);\n-      }\n-      try {\n-        final Object ret \u003d invokeMethod(method, args);\n-        hasMadeASuccessfulCall \u003d true;\n-        return ret;\n-      } catch (Exception ex) {\n-        if (Thread.currentThread().isInterrupted()) {\n-          // If interrupted, do not retry.\n-          throw ex;\n-        }\n-        handleException(method, policy, failoverCount, counters, ex);\n-      }\n-    }\n-  }\n\\ No newline at end of file\n+    CallReturn invoke() throws Throwable {\n+      return new CallReturn(invokeMethod());\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    CallReturn invoke() throws Throwable {\n      return new CallReturn(invokeMethod());\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "5360da8bd9f720384860f411bee081aef13b4bd4": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Revert \"HADOOP-13226 Support async call retry and failover.\"\n\nThis reverts commit 83f2f78c118a7e52aba5104bd97b0acedc96be7b.\n",
      "commitDate": "03/06/16 6:09 PM",
      "commitName": "5360da8bd9f720384860f411bee081aef13b4bd4",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"HADOOP-13226 Support async call retry and failover.\"\n\nThis reverts commit 83f2f78c118a7e52aba5104bd97b0acedc96be7b.\n",
          "commitDate": "03/06/16 6:09 PM",
          "commitName": "5360da8bd9f720384860f411bee081aef13b4bd4",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "31/05/16 4:30 PM",
          "commitNameOld": "83f2f78c118a7e52aba5104bd97b0acedc96be7b",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 3.07,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,27 @@\n-    CallReturn invoke() throws Throwable {\n-      return new CallReturn(invokeMethod());\n-    }\n\\ No newline at end of file\n+  private Object invoke(final Method method, final Object[] args,\n+      final boolean isRpc, final int callId, final Counters counters)\n+      throws Throwable {\n+    final RetryPolicy policy \u003d getRetryPolicy(method);\n+\n+    while (true) {\n+      // The number of times this invocation handler has ever been failed over,\n+      // before this method invocation attempt. Used to prevent concurrent\n+      // failed method invocations from triggering multiple failover attempts.\n+      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n+\n+      if (isRpc) {\n+        Client.setCallIdAndRetryCount(callId, counters.retries);\n+      }\n+      try {\n+        final Object ret \u003d invokeMethod(method, args);\n+        hasMadeASuccessfulCall \u003d true;\n+        return ret;\n+      } catch (Exception ex) {\n+        if (Thread.currentThread().isInterrupted()) {\n+          // If interrupted, do not retry.\n+          throw ex;\n+        }\n+        handleException(method, policy, failoverCount, counters, ex);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private Object invoke(final Method method, final Object[] args,\n      final boolean isRpc, final int callId, final Counters counters)\n      throws Throwable {\n    final RetryPolicy policy \u003d getRetryPolicy(method);\n\n    while (true) {\n      // The number of times this invocation handler has ever been failed over,\n      // before this method invocation attempt. Used to prevent concurrent\n      // failed method invocations from triggering multiple failover attempts.\n      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n\n      if (isRpc) {\n        Client.setCallIdAndRetryCount(callId, counters.retries);\n      }\n      try {\n        final Object ret \u003d invokeMethod(method, args);\n        hasMadeASuccessfulCall \u003d true;\n        return ret;\n      } catch (Exception ex) {\n        if (Thread.currentThread().isInterrupted()) {\n          // If interrupted, do not retry.\n          throw ex;\n        }\n        handleException(method, policy, failoverCount, counters, ex);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[method-Method(modifiers-final), args-Object[](modifiers-final), isRpc-boolean(modifiers-final), callId-int(modifiers-final), counters-Counters(modifiers-final)]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Revert \"HADOOP-13226 Support async call retry and failover.\"\n\nThis reverts commit 83f2f78c118a7e52aba5104bd97b0acedc96be7b.\n",
          "commitDate": "03/06/16 6:09 PM",
          "commitName": "5360da8bd9f720384860f411bee081aef13b4bd4",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "31/05/16 4:30 PM",
          "commitNameOld": "83f2f78c118a7e52aba5104bd97b0acedc96be7b",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 3.07,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,27 @@\n-    CallReturn invoke() throws Throwable {\n-      return new CallReturn(invokeMethod());\n-    }\n\\ No newline at end of file\n+  private Object invoke(final Method method, final Object[] args,\n+      final boolean isRpc, final int callId, final Counters counters)\n+      throws Throwable {\n+    final RetryPolicy policy \u003d getRetryPolicy(method);\n+\n+    while (true) {\n+      // The number of times this invocation handler has ever been failed over,\n+      // before this method invocation attempt. Used to prevent concurrent\n+      // failed method invocations from triggering multiple failover attempts.\n+      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n+\n+      if (isRpc) {\n+        Client.setCallIdAndRetryCount(callId, counters.retries);\n+      }\n+      try {\n+        final Object ret \u003d invokeMethod(method, args);\n+        hasMadeASuccessfulCall \u003d true;\n+        return ret;\n+      } catch (Exception ex) {\n+        if (Thread.currentThread().isInterrupted()) {\n+          // If interrupted, do not retry.\n+          throw ex;\n+        }\n+        handleException(method, policy, failoverCount, counters, ex);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private Object invoke(final Method method, final Object[] args,\n      final boolean isRpc, final int callId, final Counters counters)\n      throws Throwable {\n    final RetryPolicy policy \u003d getRetryPolicy(method);\n\n    while (true) {\n      // The number of times this invocation handler has ever been failed over,\n      // before this method invocation attempt. Used to prevent concurrent\n      // failed method invocations from triggering multiple failover attempts.\n      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n\n      if (isRpc) {\n        Client.setCallIdAndRetryCount(callId, counters.retries);\n      }\n      try {\n        final Object ret \u003d invokeMethod(method, args);\n        hasMadeASuccessfulCall \u003d true;\n        return ret;\n      } catch (Exception ex) {\n        if (Thread.currentThread().isInterrupted()) {\n          // If interrupted, do not retry.\n          throw ex;\n        }\n        handleException(method, policy, failoverCount, counters, ex);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
          "extendedDetails": {
            "oldValue": "CallReturn",
            "newValue": "Object"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Revert \"HADOOP-13226 Support async call retry and failover.\"\n\nThis reverts commit 83f2f78c118a7e52aba5104bd97b0acedc96be7b.\n",
          "commitDate": "03/06/16 6:09 PM",
          "commitName": "5360da8bd9f720384860f411bee081aef13b4bd4",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "31/05/16 4:30 PM",
          "commitNameOld": "83f2f78c118a7e52aba5104bd97b0acedc96be7b",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 3.07,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,27 @@\n-    CallReturn invoke() throws Throwable {\n-      return new CallReturn(invokeMethod());\n-    }\n\\ No newline at end of file\n+  private Object invoke(final Method method, final Object[] args,\n+      final boolean isRpc, final int callId, final Counters counters)\n+      throws Throwable {\n+    final RetryPolicy policy \u003d getRetryPolicy(method);\n+\n+    while (true) {\n+      // The number of times this invocation handler has ever been failed over,\n+      // before this method invocation attempt. Used to prevent concurrent\n+      // failed method invocations from triggering multiple failover attempts.\n+      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n+\n+      if (isRpc) {\n+        Client.setCallIdAndRetryCount(callId, counters.retries);\n+      }\n+      try {\n+        final Object ret \u003d invokeMethod(method, args);\n+        hasMadeASuccessfulCall \u003d true;\n+        return ret;\n+      } catch (Exception ex) {\n+        if (Thread.currentThread().isInterrupted()) {\n+          // If interrupted, do not retry.\n+          throw ex;\n+        }\n+        handleException(method, policy, failoverCount, counters, ex);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private Object invoke(final Method method, final Object[] args,\n      final boolean isRpc, final int callId, final Counters counters)\n      throws Throwable {\n    final RetryPolicy policy \u003d getRetryPolicy(method);\n\n    while (true) {\n      // The number of times this invocation handler has ever been failed over,\n      // before this method invocation attempt. Used to prevent concurrent\n      // failed method invocations from triggering multiple failover attempts.\n      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n\n      if (isRpc) {\n        Client.setCallIdAndRetryCount(callId, counters.retries);\n      }\n      try {\n        final Object ret \u003d invokeMethod(method, args);\n        hasMadeASuccessfulCall \u003d true;\n        return ret;\n      } catch (Exception ex) {\n        if (Thread.currentThread().isInterrupted()) {\n          // If interrupted, do not retry.\n          throw ex;\n        }\n        handleException(method, policy, failoverCount, counters, ex);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HADOOP-13226 Support async call retry and failover.\"\n\nThis reverts commit 83f2f78c118a7e52aba5104bd97b0acedc96be7b.\n",
          "commitDate": "03/06/16 6:09 PM",
          "commitName": "5360da8bd9f720384860f411bee081aef13b4bd4",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "31/05/16 4:30 PM",
          "commitNameOld": "83f2f78c118a7e52aba5104bd97b0acedc96be7b",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 3.07,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,27 @@\n-    CallReturn invoke() throws Throwable {\n-      return new CallReturn(invokeMethod());\n-    }\n\\ No newline at end of file\n+  private Object invoke(final Method method, final Object[] args,\n+      final boolean isRpc, final int callId, final Counters counters)\n+      throws Throwable {\n+    final RetryPolicy policy \u003d getRetryPolicy(method);\n+\n+    while (true) {\n+      // The number of times this invocation handler has ever been failed over,\n+      // before this method invocation attempt. Used to prevent concurrent\n+      // failed method invocations from triggering multiple failover attempts.\n+      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n+\n+      if (isRpc) {\n+        Client.setCallIdAndRetryCount(callId, counters.retries);\n+      }\n+      try {\n+        final Object ret \u003d invokeMethod(method, args);\n+        hasMadeASuccessfulCall \u003d true;\n+        return ret;\n+      } catch (Exception ex) {\n+        if (Thread.currentThread().isInterrupted()) {\n+          // If interrupted, do not retry.\n+          throw ex;\n+        }\n+        handleException(method, policy, failoverCount, counters, ex);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private Object invoke(final Method method, final Object[] args,\n      final boolean isRpc, final int callId, final Counters counters)\n      throws Throwable {\n    final RetryPolicy policy \u003d getRetryPolicy(method);\n\n    while (true) {\n      // The number of times this invocation handler has ever been failed over,\n      // before this method invocation attempt. Used to prevent concurrent\n      // failed method invocations from triggering multiple failover attempts.\n      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n\n      if (isRpc) {\n        Client.setCallIdAndRetryCount(callId, counters.retries);\n      }\n      try {\n        final Object ret \u003d invokeMethod(method, args);\n        hasMadeASuccessfulCall \u003d true;\n        return ret;\n      } catch (Exception ex) {\n        if (Thread.currentThread().isInterrupted()) {\n          // If interrupted, do not retry.\n          throw ex;\n        }\n        handleException(method, policy, failoverCount, counters, ex);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "83f2f78c118a7e52aba5104bd97b0acedc96be7b": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-13226 Support async call retry and failover.\n",
      "commitDate": "31/05/16 4:30 PM",
      "commitName": "83f2f78c118a7e52aba5104bd97b0acedc96be7b",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13226 Support async call retry and failover.\n",
          "commitDate": "31/05/16 4:30 PM",
          "commitName": "83f2f78c118a7e52aba5104bd97b0acedc96be7b",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "16/05/16 3:23 PM",
          "commitNameOld": "a9a8297cad4122961b34265c0a31d87134a4a028",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 15.05,
          "commitsBetweenForRepo": 112,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,3 @@\n-  private Object invoke(final Method method, final Object[] args,\n-      final boolean isRpc, final int callId, final Counters counters)\n-      throws Throwable {\n-    final RetryPolicy policy \u003d getRetryPolicy(method);\n-\n-    while (true) {\n-      // The number of times this invocation handler has ever been failed over,\n-      // before this method invocation attempt. Used to prevent concurrent\n-      // failed method invocations from triggering multiple failover attempts.\n-      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n-\n-      if (isRpc) {\n-        Client.setCallIdAndRetryCount(callId, counters.retries);\n-      }\n-      try {\n-        final Object ret \u003d invokeMethod(method, args);\n-        hasMadeASuccessfulCall \u003d true;\n-        return ret;\n-      } catch (Exception ex) {\n-        if (Thread.currentThread().isInterrupted()) {\n-          // If interrupted, do not retry.\n-          throw ex;\n-        }\n-        handleException(method, policy, failoverCount, counters, ex);\n-      }\n-    }\n-  }\n\\ No newline at end of file\n+    CallReturn invoke() throws Throwable {\n+      return new CallReturn(invokeMethod());\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    CallReturn invoke() throws Throwable {\n      return new CallReturn(invokeMethod());\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
          "extendedDetails": {
            "oldValue": "[method-Method(modifiers-final), args-Object[](modifiers-final), isRpc-boolean(modifiers-final), callId-int(modifiers-final), counters-Counters(modifiers-final)]",
            "newValue": "[]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-13226 Support async call retry and failover.\n",
          "commitDate": "31/05/16 4:30 PM",
          "commitName": "83f2f78c118a7e52aba5104bd97b0acedc96be7b",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "16/05/16 3:23 PM",
          "commitNameOld": "a9a8297cad4122961b34265c0a31d87134a4a028",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 15.05,
          "commitsBetweenForRepo": 112,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,3 @@\n-  private Object invoke(final Method method, final Object[] args,\n-      final boolean isRpc, final int callId, final Counters counters)\n-      throws Throwable {\n-    final RetryPolicy policy \u003d getRetryPolicy(method);\n-\n-    while (true) {\n-      // The number of times this invocation handler has ever been failed over,\n-      // before this method invocation attempt. Used to prevent concurrent\n-      // failed method invocations from triggering multiple failover attempts.\n-      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n-\n-      if (isRpc) {\n-        Client.setCallIdAndRetryCount(callId, counters.retries);\n-      }\n-      try {\n-        final Object ret \u003d invokeMethod(method, args);\n-        hasMadeASuccessfulCall \u003d true;\n-        return ret;\n-      } catch (Exception ex) {\n-        if (Thread.currentThread().isInterrupted()) {\n-          // If interrupted, do not retry.\n-          throw ex;\n-        }\n-        handleException(method, policy, failoverCount, counters, ex);\n-      }\n-    }\n-  }\n\\ No newline at end of file\n+    CallReturn invoke() throws Throwable {\n+      return new CallReturn(invokeMethod());\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    CallReturn invoke() throws Throwable {\n      return new CallReturn(invokeMethod());\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
          "extendedDetails": {
            "oldValue": "Object",
            "newValue": "CallReturn"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-13226 Support async call retry and failover.\n",
          "commitDate": "31/05/16 4:30 PM",
          "commitName": "83f2f78c118a7e52aba5104bd97b0acedc96be7b",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "16/05/16 3:23 PM",
          "commitNameOld": "a9a8297cad4122961b34265c0a31d87134a4a028",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 15.05,
          "commitsBetweenForRepo": 112,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,3 @@\n-  private Object invoke(final Method method, final Object[] args,\n-      final boolean isRpc, final int callId, final Counters counters)\n-      throws Throwable {\n-    final RetryPolicy policy \u003d getRetryPolicy(method);\n-\n-    while (true) {\n-      // The number of times this invocation handler has ever been failed over,\n-      // before this method invocation attempt. Used to prevent concurrent\n-      // failed method invocations from triggering multiple failover attempts.\n-      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n-\n-      if (isRpc) {\n-        Client.setCallIdAndRetryCount(callId, counters.retries);\n-      }\n-      try {\n-        final Object ret \u003d invokeMethod(method, args);\n-        hasMadeASuccessfulCall \u003d true;\n-        return ret;\n-      } catch (Exception ex) {\n-        if (Thread.currentThread().isInterrupted()) {\n-          // If interrupted, do not retry.\n-          throw ex;\n-        }\n-        handleException(method, policy, failoverCount, counters, ex);\n-      }\n-    }\n-  }\n\\ No newline at end of file\n+    CallReturn invoke() throws Throwable {\n+      return new CallReturn(invokeMethod());\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    CallReturn invoke() throws Throwable {\n      return new CallReturn(invokeMethod());\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13226 Support async call retry and failover.\n",
          "commitDate": "31/05/16 4:30 PM",
          "commitName": "83f2f78c118a7e52aba5104bd97b0acedc96be7b",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "16/05/16 3:23 PM",
          "commitNameOld": "a9a8297cad4122961b34265c0a31d87134a4a028",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 15.05,
          "commitsBetweenForRepo": 112,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,3 @@\n-  private Object invoke(final Method method, final Object[] args,\n-      final boolean isRpc, final int callId, final Counters counters)\n-      throws Throwable {\n-    final RetryPolicy policy \u003d getRetryPolicy(method);\n-\n-    while (true) {\n-      // The number of times this invocation handler has ever been failed over,\n-      // before this method invocation attempt. Used to prevent concurrent\n-      // failed method invocations from triggering multiple failover attempts.\n-      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n-\n-      if (isRpc) {\n-        Client.setCallIdAndRetryCount(callId, counters.retries);\n-      }\n-      try {\n-        final Object ret \u003d invokeMethod(method, args);\n-        hasMadeASuccessfulCall \u003d true;\n-        return ret;\n-      } catch (Exception ex) {\n-        if (Thread.currentThread().isInterrupted()) {\n-          // If interrupted, do not retry.\n-          throw ex;\n-        }\n-        handleException(method, policy, failoverCount, counters, ex);\n-      }\n-    }\n-  }\n\\ No newline at end of file\n+    CallReturn invoke() throws Throwable {\n+      return new CallReturn(invokeMethod());\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    CallReturn invoke() throws Throwable {\n      return new CallReturn(invokeMethod());\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "a9a8297cad4122961b34265c0a31d87134a4a028": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13146. Refactor RetryInvocationHandler. Contributed by Tsz Wo Nicholas Sze.\n",
      "commitDate": "16/05/16 3:23 PM",
      "commitName": "a9a8297cad4122961b34265c0a31d87134a4a028",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,27 @@\n+  private Object invoke(final Method method, final Object[] args,\n+      final boolean isRpc, final int callId, final Counters counters)\n+      throws Throwable {\n+    final RetryPolicy policy \u003d getRetryPolicy(method);\n+\n+    while (true) {\n+      // The number of times this invocation handler has ever been failed over,\n+      // before this method invocation attempt. Used to prevent concurrent\n+      // failed method invocations from triggering multiple failover attempts.\n+      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n+\n+      if (isRpc) {\n+        Client.setCallIdAndRetryCount(callId, counters.retries);\n+      }\n+      try {\n+        final Object ret \u003d invokeMethod(method, args);\n+        hasMadeASuccessfulCall \u003d true;\n+        return ret;\n+      } catch (Exception ex) {\n+        if (Thread.currentThread().isInterrupted()) {\n+          // If interrupted, do not retry.\n+          throw ex;\n+        }\n+        handleException(method, policy, failoverCount, counters, ex);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Object invoke(final Method method, final Object[] args,\n      final boolean isRpc, final int callId, final Counters counters)\n      throws Throwable {\n    final RetryPolicy policy \u003d getRetryPolicy(method);\n\n    while (true) {\n      // The number of times this invocation handler has ever been failed over,\n      // before this method invocation attempt. Used to prevent concurrent\n      // failed method invocations from triggering multiple failover attempts.\n      final long failoverCount \u003d proxyDescriptor.getFailoverCount();\n\n      if (isRpc) {\n        Client.setCallIdAndRetryCount(callId, counters.retries);\n      }\n      try {\n        final Object ret \u003d invokeMethod(method, args);\n        hasMadeASuccessfulCall \u003d true;\n        return ret;\n      } catch (Exception ex) {\n        if (Thread.currentThread().isInterrupted()) {\n          // If interrupted, do not retry.\n          throw ex;\n        }\n        handleException(method, policy, failoverCount, counters, ex);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/RetryInvocationHandler.java"
    }
  }
}