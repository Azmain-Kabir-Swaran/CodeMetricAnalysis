{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMContainerAllocator.java",
  "functionName": "preemptReducer",
  "functionId": "preemptReducer___hangingMapRequests-int",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
  "functionStartLine": 601,
  "functionEndLine": 624,
  "numCommitsSeen": 82,
  "timeTaken": 1581,
  "changeHistory": [
    "4aa9b3e75ca86917125e56e1b438668273a5d87f"
  ],
  "changeHistoryShort": {
    "4aa9b3e75ca86917125e56e1b438668273a5d87f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4aa9b3e75ca86917125e56e1b438668273a5d87f": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6302. Incorrect headroom can lead to a deadlock between map and reduce allocations. (kasha)\n",
      "commitDate": "09/10/15 7:37 AM",
      "commitName": "4aa9b3e75ca86917125e56e1b438668273a5d87f",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,24 @@\n+  private void preemptReducer(int hangingMapRequests) {\n+    clearAllPendingReduceRequests();\n+\n+    // preempt for making space for at least one map\n+    int preemptionReduceNumForOneMap \u003d\n+        ResourceCalculatorUtils.divideAndCeilContainers(mapResourceRequest,\n+            reduceResourceRequest, getSchedulerResourceTypes());\n+    int preemptionReduceNumForPreemptionLimit \u003d\n+        ResourceCalculatorUtils.divideAndCeilContainers(\n+            Resources.multiply(getResourceLimit(), maxReducePreemptionLimit),\n+            reduceResourceRequest, getSchedulerResourceTypes());\n+    int preemptionReduceNumForAllMaps \u003d\n+        ResourceCalculatorUtils.divideAndCeilContainers(\n+            Resources.multiply(mapResourceRequest, hangingMapRequests),\n+            reduceResourceRequest, getSchedulerResourceTypes());\n+    int toPreempt \u003d\n+        Math.min(Math.max(preemptionReduceNumForOneMap,\n+                preemptionReduceNumForPreemptionLimit),\n+            preemptionReduceNumForAllMaps);\n+\n+    LOG.info(\"Going to preempt \" + toPreempt\n+        + \" due to lack of space for maps\");\n+    assignedRequests.preemptReduce(toPreempt);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void preemptReducer(int hangingMapRequests) {\n    clearAllPendingReduceRequests();\n\n    // preempt for making space for at least one map\n    int preemptionReduceNumForOneMap \u003d\n        ResourceCalculatorUtils.divideAndCeilContainers(mapResourceRequest,\n            reduceResourceRequest, getSchedulerResourceTypes());\n    int preemptionReduceNumForPreemptionLimit \u003d\n        ResourceCalculatorUtils.divideAndCeilContainers(\n            Resources.multiply(getResourceLimit(), maxReducePreemptionLimit),\n            reduceResourceRequest, getSchedulerResourceTypes());\n    int preemptionReduceNumForAllMaps \u003d\n        ResourceCalculatorUtils.divideAndCeilContainers(\n            Resources.multiply(mapResourceRequest, hangingMapRequests),\n            reduceResourceRequest, getSchedulerResourceTypes());\n    int toPreempt \u003d\n        Math.min(Math.max(preemptionReduceNumForOneMap,\n                preemptionReduceNumForPreemptionLimit),\n            preemptionReduceNumForAllMaps);\n\n    LOG.info(\"Going to preempt \" + toPreempt\n        + \" due to lack of space for maps\");\n    assignedRequests.preemptReduce(toPreempt);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java"
    }
  }
}