{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerService.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/scheduler/SchedulerService.java",
  "functionStartLine": 100,
  "functionEndLine": 119,
  "numCommitsSeen": 4,
  "timeTaken": 410,
  "changeHistory": [
    "3334306512b5dc932814fded31a89ba1ee97cd9f"
  ],
  "changeHistoryShort": {
    "3334306512b5dc932814fded31a89ba1ee97cd9f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3334306512b5dc932814fded31a89ba1ee97cd9f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2178. Contributing Hoop to HDFS, replacement for HDFS proxy with read/write capabilities. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212060 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/12/11 11:25 AM",
      "commitName": "3334306512b5dc932814fded31a89ba1ee97cd9f",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,20 @@\n+        public void run() {\n+          String instrName \u003d callable.getClass().getSimpleName();\n+          Instrumentation instr \u003d getServer().get(Instrumentation.class);\n+          if (getServer().getStatus() \u003d\u003d Server.Status.HALTED) {\n+            LOG.debug(\"Skipping [{}], server status [{}]\", callable, getServer().getStatus());\n+            instr.incr(INST_GROUP, instrName + \".skips\", 1);\n+          } else {\n+            LOG.debug(\"Executing [{}]\", callable);\n+            instr.incr(INST_GROUP, instrName + \".execs\", 1);\n+            Instrumentation.Cron cron \u003d instr.createCron().start();\n+            try {\n+              callable.call();\n+            } catch (Exception ex) {\n+              instr.incr(INST_GROUP, instrName + \".fails\", 1);\n+              LOG.error(\"Error executing [{}], {}\", new Object[]{callable, ex.getMessage(), ex});\n+            } finally {\n+              instr.addCron(INST_GROUP, instrName, cron.stop());\n+            }\n+          }\n+        }\n\\ No newline at end of file\n",
      "actualSource": "        public void run() {\n          String instrName \u003d callable.getClass().getSimpleName();\n          Instrumentation instr \u003d getServer().get(Instrumentation.class);\n          if (getServer().getStatus() \u003d\u003d Server.Status.HALTED) {\n            LOG.debug(\"Skipping [{}], server status [{}]\", callable, getServer().getStatus());\n            instr.incr(INST_GROUP, instrName + \".skips\", 1);\n          } else {\n            LOG.debug(\"Executing [{}]\", callable);\n            instr.incr(INST_GROUP, instrName + \".execs\", 1);\n            Instrumentation.Cron cron \u003d instr.createCron().start();\n            try {\n              callable.call();\n            } catch (Exception ex) {\n              instr.incr(INST_GROUP, instrName + \".fails\", 1);\n              LOG.error(\"Error executing [{}], {}\", new Object[]{callable, ex.getMessage(), ex});\n            } finally {\n              instr.addCron(INST_GROUP, instrName, cron.stop());\n            }\n          }\n        }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/scheduler/SchedulerService.java"
    }
  }
}