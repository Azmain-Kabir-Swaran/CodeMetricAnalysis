{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImage.java",
  "functionName": "doImportCheckpoint",
  "functionId": "doImportCheckpoint___target-FSNamesystem",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
  "functionStartLine": 576,
  "functionEndLine": 611,
  "numCommitsSeen": 134,
  "timeTaken": 6978,
  "changeHistory": [
    "b1fce2b8b14c4ce43f7098a269ac2b95304db0ce",
    "9ca79e8d327e95845ef9794396afd43a52bc3d40",
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
    "7accbabdee0b7619ff83514c173e815d290b33bf",
    "706394d03992b394e9f907aff2155df493e4ea4e",
    "11df1c256171564b0578477c226723358be812c4",
    "06e84a1bca19bd01568a3095e33944d4d6387fd3",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "b1fce2b8b14c4ce43f7098a269ac2b95304db0ce": "Ybodychange",
    "9ca79e8d327e95845ef9794396afd43a52bc3d40": "Ybodychange",
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de": "Ybodychange",
    "7accbabdee0b7619ff83514c173e815d290b33bf": "Ybodychange",
    "706394d03992b394e9f907aff2155df493e4ea4e": "Ybodychange",
    "11df1c256171564b0578477c226723358be812c4": "Ybodychange",
    "06e84a1bca19bd01568a3095e33944d4d6387fd3": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b1fce2b8b14c4ce43f7098a269ac2b95304db0ce": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11209. SNN can\u0027t checkpoint when rolling upgrade is not finalized. Contributed by Xiaoyu Yao.\n",
      "commitDate": "17/01/17 2:33 PM",
      "commitName": "b1fce2b8b14c4ce43f7098a269ac2b95304db0ce",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "19/12/16 9:34 PM",
      "commitNameOld": "d2026ae9e6c86f4fd9e48b80e71233181c1853d9",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 28.71,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   void doImportCheckpoint(FSNamesystem target) throws IOException {\n     Collection\u003cURI\u003e checkpointDirs \u003d\n       FSImage.getCheckpointDirs(conf, null);\n     List\u003cURI\u003e checkpointEditsDirs \u003d\n       FSImage.getCheckpointEditsDirs(conf, null);\n \n     if (checkpointDirs \u003d\u003d null || checkpointDirs.isEmpty()) {\n       throw new IOException(\"Cannot import image from a checkpoint. \"\n                             + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n     }\n     \n     if (checkpointEditsDirs \u003d\u003d null || checkpointEditsDirs.isEmpty()) {\n       throw new IOException(\"Cannot import image from a checkpoint. \"\n                             + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n     }\n \n     FSImage realImage \u003d target.getFSImage();\n     FSImage ckptImage \u003d new FSImage(conf, \n                                     checkpointDirs, checkpointEditsDirs);\n     // load from the checkpoint dirs\n     try {\n       ckptImage.recoverTransitionRead(StartupOption.REGULAR, target, null);\n     } finally {\n       ckptImage.close();\n     }\n     // return back the real image\n     realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n     realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n     realImage.initEditLog(StartupOption.IMPORT);\n \n     realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n \n     // and save it but keep the same checkpointTime\n     saveNamespace(target);\n-    getStorage().writeAll();\n+    updateStorageVersion();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doImportCheckpoint(FSNamesystem target) throws IOException {\n    Collection\u003cURI\u003e checkpointDirs \u003d\n      FSImage.getCheckpointDirs(conf, null);\n    List\u003cURI\u003e checkpointEditsDirs \u003d\n      FSImage.getCheckpointEditsDirs(conf, null);\n\n    if (checkpointDirs \u003d\u003d null || checkpointDirs.isEmpty()) {\n      throw new IOException(\"Cannot import image from a checkpoint. \"\n                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n    }\n    \n    if (checkpointEditsDirs \u003d\u003d null || checkpointEditsDirs.isEmpty()) {\n      throw new IOException(\"Cannot import image from a checkpoint. \"\n                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n    }\n\n    FSImage realImage \u003d target.getFSImage();\n    FSImage ckptImage \u003d new FSImage(conf, \n                                    checkpointDirs, checkpointEditsDirs);\n    // load from the checkpoint dirs\n    try {\n      ckptImage.recoverTransitionRead(StartupOption.REGULAR, target, null);\n    } finally {\n      ckptImage.close();\n    }\n    // return back the real image\n    realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n    realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n    realImage.initEditLog(StartupOption.IMPORT);\n\n    realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n\n    // and save it but keep the same checkpointTime\n    saveNamespace(target);\n    updateStorageVersion();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "9ca79e8d327e95845ef9794396afd43a52bc3d40": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6557. Move the reference of fsimage to FSNamesystem. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604242 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/06/14 11:54 AM",
      "commitName": "9ca79e8d327e95845ef9794396afd43a52bc3d40",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "21/05/14 9:38 PM",
      "commitNameOld": "b2f4e53e2bf1808762669628fb9cdbc13beb4790",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 29.59,
      "commitsBetweenForRepo": 179,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,36 @@\n   void doImportCheckpoint(FSNamesystem target) throws IOException {\n     Collection\u003cURI\u003e checkpointDirs \u003d\n       FSImage.getCheckpointDirs(conf, null);\n     List\u003cURI\u003e checkpointEditsDirs \u003d\n       FSImage.getCheckpointEditsDirs(conf, null);\n \n     if (checkpointDirs \u003d\u003d null || checkpointDirs.isEmpty()) {\n       throw new IOException(\"Cannot import image from a checkpoint. \"\n                             + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n     }\n     \n     if (checkpointEditsDirs \u003d\u003d null || checkpointEditsDirs.isEmpty()) {\n       throw new IOException(\"Cannot import image from a checkpoint. \"\n                             + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n     }\n \n     FSImage realImage \u003d target.getFSImage();\n     FSImage ckptImage \u003d new FSImage(conf, \n                                     checkpointDirs, checkpointEditsDirs);\n-    target.dir.fsImage \u003d ckptImage;\n     // load from the checkpoint dirs\n     try {\n       ckptImage.recoverTransitionRead(StartupOption.REGULAR, target, null);\n     } finally {\n       ckptImage.close();\n     }\n     // return back the real image\n     realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n     realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n     realImage.initEditLog(StartupOption.IMPORT);\n \n-    target.dir.fsImage \u003d realImage;\n     realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n \n     // and save it but keep the same checkpointTime\n     saveNamespace(target);\n     getStorage().writeAll();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doImportCheckpoint(FSNamesystem target) throws IOException {\n    Collection\u003cURI\u003e checkpointDirs \u003d\n      FSImage.getCheckpointDirs(conf, null);\n    List\u003cURI\u003e checkpointEditsDirs \u003d\n      FSImage.getCheckpointEditsDirs(conf, null);\n\n    if (checkpointDirs \u003d\u003d null || checkpointDirs.isEmpty()) {\n      throw new IOException(\"Cannot import image from a checkpoint. \"\n                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n    }\n    \n    if (checkpointEditsDirs \u003d\u003d null || checkpointEditsDirs.isEmpty()) {\n      throw new IOException(\"Cannot import image from a checkpoint. \"\n                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n    }\n\n    FSImage realImage \u003d target.getFSImage();\n    FSImage ckptImage \u003d new FSImage(conf, \n                                    checkpointDirs, checkpointEditsDirs);\n    // load from the checkpoint dirs\n    try {\n      ckptImage.recoverTransitionRead(StartupOption.REGULAR, target, null);\n    } finally {\n      ckptImage.close();\n    }\n    // return back the real image\n    realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n    realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n    realImage.initEditLog(StartupOption.IMPORT);\n\n    realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n\n    // and save it but keep the same checkpointTime\n    saveNamespace(target);\n    getStorage().writeAll();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5138. Support HDFS upgrade in HA. Contributed by Aaron T. Myers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561381 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 12:01 PM",
      "commitName": "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "07/01/14 12:52 PM",
      "commitNameOld": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 17.96,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   void doImportCheckpoint(FSNamesystem target) throws IOException {\n     Collection\u003cURI\u003e checkpointDirs \u003d\n       FSImage.getCheckpointDirs(conf, null);\n     List\u003cURI\u003e checkpointEditsDirs \u003d\n       FSImage.getCheckpointEditsDirs(conf, null);\n \n     if (checkpointDirs \u003d\u003d null || checkpointDirs.isEmpty()) {\n       throw new IOException(\"Cannot import image from a checkpoint. \"\n                             + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n     }\n     \n     if (checkpointEditsDirs \u003d\u003d null || checkpointEditsDirs.isEmpty()) {\n       throw new IOException(\"Cannot import image from a checkpoint. \"\n                             + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n     }\n \n     FSImage realImage \u003d target.getFSImage();\n     FSImage ckptImage \u003d new FSImage(conf, \n                                     checkpointDirs, checkpointEditsDirs);\n     target.dir.fsImage \u003d ckptImage;\n     // load from the checkpoint dirs\n     try {\n       ckptImage.recoverTransitionRead(StartupOption.REGULAR, target, null);\n     } finally {\n       ckptImage.close();\n     }\n     // return back the real image\n     realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n     realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n-    realImage.initEditLog();\n+    realImage.initEditLog(StartupOption.IMPORT);\n \n     target.dir.fsImage \u003d realImage;\n     realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n \n     // and save it but keep the same checkpointTime\n     saveNamespace(target);\n     getStorage().writeAll();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doImportCheckpoint(FSNamesystem target) throws IOException {\n    Collection\u003cURI\u003e checkpointDirs \u003d\n      FSImage.getCheckpointDirs(conf, null);\n    List\u003cURI\u003e checkpointEditsDirs \u003d\n      FSImage.getCheckpointEditsDirs(conf, null);\n\n    if (checkpointDirs \u003d\u003d null || checkpointDirs.isEmpty()) {\n      throw new IOException(\"Cannot import image from a checkpoint. \"\n                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n    }\n    \n    if (checkpointEditsDirs \u003d\u003d null || checkpointEditsDirs.isEmpty()) {\n      throw new IOException(\"Cannot import image from a checkpoint. \"\n                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n    }\n\n    FSImage realImage \u003d target.getFSImage();\n    FSImage ckptImage \u003d new FSImage(conf, \n                                    checkpointDirs, checkpointEditsDirs);\n    target.dir.fsImage \u003d ckptImage;\n    // load from the checkpoint dirs\n    try {\n      ckptImage.recoverTransitionRead(StartupOption.REGULAR, target, null);\n    } finally {\n      ckptImage.close();\n    }\n    // return back the real image\n    realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n    realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n    realImage.initEditLog(StartupOption.IMPORT);\n\n    target.dir.fsImage \u003d realImage;\n    realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n\n    // and save it but keep the same checkpointTime\n    saveNamespace(target);\n    getStorage().writeAll();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "7accbabdee0b7619ff83514c173e815d290b33bf": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3573. Supply NamespaceInfo when instantiating JournalManagers. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1356388 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/12 11:21 AM",
      "commitName": "7accbabdee0b7619ff83514c173e815d290b33bf",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "23/05/12 1:42 PM",
      "commitNameOld": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 39.9,
      "commitsBetweenForRepo": 171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   void doImportCheckpoint(FSNamesystem target) throws IOException {\n     Collection\u003cURI\u003e checkpointDirs \u003d\n       FSImage.getCheckpointDirs(conf, null);\n     List\u003cURI\u003e checkpointEditsDirs \u003d\n       FSImage.getCheckpointEditsDirs(conf, null);\n \n     if (checkpointDirs \u003d\u003d null || checkpointDirs.isEmpty()) {\n       throw new IOException(\"Cannot import image from a checkpoint. \"\n                             + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n     }\n     \n     if (checkpointEditsDirs \u003d\u003d null || checkpointEditsDirs.isEmpty()) {\n       throw new IOException(\"Cannot import image from a checkpoint. \"\n                             + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n     }\n \n     FSImage realImage \u003d target.getFSImage();\n     FSImage ckptImage \u003d new FSImage(conf, \n                                     checkpointDirs, checkpointEditsDirs);\n     target.dir.fsImage \u003d ckptImage;\n     // load from the checkpoint dirs\n     try {\n       ckptImage.recoverTransitionRead(StartupOption.REGULAR, target, null);\n     } finally {\n       ckptImage.close();\n     }\n     // return back the real image\n     realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n     realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n+    realImage.initEditLog();\n \n     target.dir.fsImage \u003d realImage;\n     realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n \n     // and save it but keep the same checkpointTime\n     saveNamespace(target);\n     getStorage().writeAll();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doImportCheckpoint(FSNamesystem target) throws IOException {\n    Collection\u003cURI\u003e checkpointDirs \u003d\n      FSImage.getCheckpointDirs(conf, null);\n    List\u003cURI\u003e checkpointEditsDirs \u003d\n      FSImage.getCheckpointEditsDirs(conf, null);\n\n    if (checkpointDirs \u003d\u003d null || checkpointDirs.isEmpty()) {\n      throw new IOException(\"Cannot import image from a checkpoint. \"\n                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n    }\n    \n    if (checkpointEditsDirs \u003d\u003d null || checkpointEditsDirs.isEmpty()) {\n      throw new IOException(\"Cannot import image from a checkpoint. \"\n                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n    }\n\n    FSImage realImage \u003d target.getFSImage();\n    FSImage ckptImage \u003d new FSImage(conf, \n                                    checkpointDirs, checkpointEditsDirs);\n    target.dir.fsImage \u003d ckptImage;\n    // load from the checkpoint dirs\n    try {\n      ckptImage.recoverTransitionRead(StartupOption.REGULAR, target, null);\n    } finally {\n      ckptImage.close();\n    }\n    // return back the real image\n    realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n    realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n    realImage.initEditLog();\n\n    target.dir.fsImage \u003d realImage;\n    realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n\n    // and save it but keep the same checkpointTime\n    saveNamespace(target);\n    getStorage().writeAll();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "706394d03992b394e9f907aff2155df493e4ea4e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3004. Implement Recovery Mode. Contributed by Colin Patrick McCabe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1311394 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/04/12 12:39 PM",
      "commitName": "706394d03992b394e9f907aff2155df493e4ea4e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "12/03/12 12:41 PM",
      "commitNameOld": "1a75ec82885e45baf4d5cd56d6c738d8e68d8bc7",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 28.0,
      "commitsBetweenForRepo": 204,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   void doImportCheckpoint(FSNamesystem target) throws IOException {\n     Collection\u003cURI\u003e checkpointDirs \u003d\n       FSImage.getCheckpointDirs(conf, null);\n     List\u003cURI\u003e checkpointEditsDirs \u003d\n       FSImage.getCheckpointEditsDirs(conf, null);\n \n     if (checkpointDirs \u003d\u003d null || checkpointDirs.isEmpty()) {\n       throw new IOException(\"Cannot import image from a checkpoint. \"\n                             + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n     }\n     \n     if (checkpointEditsDirs \u003d\u003d null || checkpointEditsDirs.isEmpty()) {\n       throw new IOException(\"Cannot import image from a checkpoint. \"\n                             + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n     }\n \n     FSImage realImage \u003d target.getFSImage();\n     FSImage ckptImage \u003d new FSImage(conf, \n                                     checkpointDirs, checkpointEditsDirs);\n     target.dir.fsImage \u003d ckptImage;\n     // load from the checkpoint dirs\n     try {\n-      ckptImage.recoverTransitionRead(StartupOption.REGULAR, target);\n+      ckptImage.recoverTransitionRead(StartupOption.REGULAR, target, null);\n     } finally {\n       ckptImage.close();\n     }\n     // return back the real image\n     realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n     realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n \n     target.dir.fsImage \u003d realImage;\n     realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n \n     // and save it but keep the same checkpointTime\n     saveNamespace(target);\n     getStorage().writeAll();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doImportCheckpoint(FSNamesystem target) throws IOException {\n    Collection\u003cURI\u003e checkpointDirs \u003d\n      FSImage.getCheckpointDirs(conf, null);\n    List\u003cURI\u003e checkpointEditsDirs \u003d\n      FSImage.getCheckpointEditsDirs(conf, null);\n\n    if (checkpointDirs \u003d\u003d null || checkpointDirs.isEmpty()) {\n      throw new IOException(\"Cannot import image from a checkpoint. \"\n                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n    }\n    \n    if (checkpointEditsDirs \u003d\u003d null || checkpointEditsDirs.isEmpty()) {\n      throw new IOException(\"Cannot import image from a checkpoint. \"\n                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n    }\n\n    FSImage realImage \u003d target.getFSImage();\n    FSImage ckptImage \u003d new FSImage(conf, \n                                    checkpointDirs, checkpointEditsDirs);\n    target.dir.fsImage \u003d ckptImage;\n    // load from the checkpoint dirs\n    try {\n      ckptImage.recoverTransitionRead(StartupOption.REGULAR, target, null);\n    } finally {\n      ckptImage.close();\n    }\n    // return back the real image\n    realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n    realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n\n    target.dir.fsImage \u003d realImage;\n    realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n\n    // and save it but keep the same checkpointTime\n    saveNamespace(target);\n    getStorage().writeAll();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "11df1c256171564b0578477c226723358be812c4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2874. Edit log should log to shared dirs before local dirs. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1240445 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/02/12 6:52 PM",
      "commitName": "11df1c256171564b0578477c226723358be812c4",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/01/12 12:32 AM",
      "commitNameOld": "4f1bf2fe23e53ff4b8550882d19f2cf1dd477926",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 23.76,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   void doImportCheckpoint(FSNamesystem target) throws IOException {\n     Collection\u003cURI\u003e checkpointDirs \u003d\n       FSImage.getCheckpointDirs(conf, null);\n-    Collection\u003cURI\u003e checkpointEditsDirs \u003d\n+    List\u003cURI\u003e checkpointEditsDirs \u003d\n       FSImage.getCheckpointEditsDirs(conf, null);\n \n     if (checkpointDirs \u003d\u003d null || checkpointDirs.isEmpty()) {\n       throw new IOException(\"Cannot import image from a checkpoint. \"\n                             + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n     }\n     \n     if (checkpointEditsDirs \u003d\u003d null || checkpointEditsDirs.isEmpty()) {\n       throw new IOException(\"Cannot import image from a checkpoint. \"\n                             + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n     }\n \n     FSImage realImage \u003d target.getFSImage();\n     FSImage ckptImage \u003d new FSImage(conf, \n                                     checkpointDirs, checkpointEditsDirs);\n     target.dir.fsImage \u003d ckptImage;\n     // load from the checkpoint dirs\n     try {\n       ckptImage.recoverTransitionRead(StartupOption.REGULAR, target);\n     } finally {\n       ckptImage.close();\n     }\n     // return back the real image\n     realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n     realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n \n     target.dir.fsImage \u003d realImage;\n     realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n \n     // and save it but keep the same checkpointTime\n     saveNamespace(target);\n     getStorage().writeAll();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doImportCheckpoint(FSNamesystem target) throws IOException {\n    Collection\u003cURI\u003e checkpointDirs \u003d\n      FSImage.getCheckpointDirs(conf, null);\n    List\u003cURI\u003e checkpointEditsDirs \u003d\n      FSImage.getCheckpointEditsDirs(conf, null);\n\n    if (checkpointDirs \u003d\u003d null || checkpointDirs.isEmpty()) {\n      throw new IOException(\"Cannot import image from a checkpoint. \"\n                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n    }\n    \n    if (checkpointEditsDirs \u003d\u003d null || checkpointEditsDirs.isEmpty()) {\n      throw new IOException(\"Cannot import image from a checkpoint. \"\n                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n    }\n\n    FSImage realImage \u003d target.getFSImage();\n    FSImage ckptImage \u003d new FSImage(conf, \n                                    checkpointDirs, checkpointEditsDirs);\n    target.dir.fsImage \u003d ckptImage;\n    // load from the checkpoint dirs\n    try {\n      ckptImage.recoverTransitionRead(StartupOption.REGULAR, target);\n    } finally {\n      ckptImage.close();\n    }\n    // return back the real image\n    realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n    realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n\n    target.dir.fsImage \u003d realImage;\n    realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n\n    // and save it but keep the same checkpointTime\n    saveNamespace(target);\n    getStorage().writeAll();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "06e84a1bca19bd01568a3095e33944d4d6387fd3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-2223. Untangle depencencies between NN components. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166466 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/09/11 4:23 PM",
      "commitName": "06e84a1bca19bd01568a3095e33944d4d6387fd3",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2223. Untangle depencencies between NN components. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166466 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/09/11 4:23 PM",
          "commitName": "06e84a1bca19bd01568a3095e33944d4d6387fd3",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "06/09/11 1:27 PM",
          "commitNameOld": "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15",
          "commitAuthorOld": "Jitendra Nath Pandey",
          "daysBetweenCommits": 1.12,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,37 @@\n-  void doImportCheckpoint() throws IOException {\n-    FSNamesystem fsNamesys \u003d getFSNamesystem();\n-    FSImage ckptImage \u003d new FSImage(conf, fsNamesys,\n+  void doImportCheckpoint(FSNamesystem target) throws IOException {\n+    Collection\u003cURI\u003e checkpointDirs \u003d\n+      FSImage.getCheckpointDirs(conf, null);\n+    Collection\u003cURI\u003e checkpointEditsDirs \u003d\n+      FSImage.getCheckpointEditsDirs(conf, null);\n+\n+    if (checkpointDirs \u003d\u003d null || checkpointDirs.isEmpty()) {\n+      throw new IOException(\"Cannot import image from a checkpoint. \"\n+                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n+    }\n+    \n+    if (checkpointEditsDirs \u003d\u003d null || checkpointEditsDirs.isEmpty()) {\n+      throw new IOException(\"Cannot import image from a checkpoint. \"\n+                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n+    }\n+\n+    FSImage realImage \u003d target.getFSImage();\n+    FSImage ckptImage \u003d new FSImage(conf, \n                                     checkpointDirs, checkpointEditsDirs);\n-    // replace real image with the checkpoint image\n-    FSImage realImage \u003d fsNamesys.getFSImage();\n-    assert realImage \u003d\u003d this;\n-    fsNamesys.dir.fsImage \u003d ckptImage;\n+    target.dir.fsImage \u003d ckptImage;\n     // load from the checkpoint dirs\n     try {\n-      ckptImage.recoverTransitionRead(StartupOption.REGULAR);\n+      ckptImage.recoverTransitionRead(StartupOption.REGULAR, target);\n     } finally {\n       ckptImage.close();\n     }\n     // return back the real image\n     realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n     realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n \n-    fsNamesys.dir.fsImage \u003d realImage;\n+    target.dir.fsImage \u003d realImage;\n     realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n+\n     // and save it but keep the same checkpointTime\n-    saveNamespace();\n+    saveNamespace(target);\n     getStorage().writeAll();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void doImportCheckpoint(FSNamesystem target) throws IOException {\n    Collection\u003cURI\u003e checkpointDirs \u003d\n      FSImage.getCheckpointDirs(conf, null);\n    Collection\u003cURI\u003e checkpointEditsDirs \u003d\n      FSImage.getCheckpointEditsDirs(conf, null);\n\n    if (checkpointDirs \u003d\u003d null || checkpointDirs.isEmpty()) {\n      throw new IOException(\"Cannot import image from a checkpoint. \"\n                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n    }\n    \n    if (checkpointEditsDirs \u003d\u003d null || checkpointEditsDirs.isEmpty()) {\n      throw new IOException(\"Cannot import image from a checkpoint. \"\n                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n    }\n\n    FSImage realImage \u003d target.getFSImage();\n    FSImage ckptImage \u003d new FSImage(conf, \n                                    checkpointDirs, checkpointEditsDirs);\n    target.dir.fsImage \u003d ckptImage;\n    // load from the checkpoint dirs\n    try {\n      ckptImage.recoverTransitionRead(StartupOption.REGULAR, target);\n    } finally {\n      ckptImage.close();\n    }\n    // return back the real image\n    realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n    realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n\n    target.dir.fsImage \u003d realImage;\n    realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n\n    // and save it but keep the same checkpointTime\n    saveNamespace(target);\n    getStorage().writeAll();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[target-FSNamesystem]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2223. Untangle depencencies between NN components. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166466 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/09/11 4:23 PM",
          "commitName": "06e84a1bca19bd01568a3095e33944d4d6387fd3",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "06/09/11 1:27 PM",
          "commitNameOld": "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15",
          "commitAuthorOld": "Jitendra Nath Pandey",
          "daysBetweenCommits": 1.12,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,37 @@\n-  void doImportCheckpoint() throws IOException {\n-    FSNamesystem fsNamesys \u003d getFSNamesystem();\n-    FSImage ckptImage \u003d new FSImage(conf, fsNamesys,\n+  void doImportCheckpoint(FSNamesystem target) throws IOException {\n+    Collection\u003cURI\u003e checkpointDirs \u003d\n+      FSImage.getCheckpointDirs(conf, null);\n+    Collection\u003cURI\u003e checkpointEditsDirs \u003d\n+      FSImage.getCheckpointEditsDirs(conf, null);\n+\n+    if (checkpointDirs \u003d\u003d null || checkpointDirs.isEmpty()) {\n+      throw new IOException(\"Cannot import image from a checkpoint. \"\n+                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n+    }\n+    \n+    if (checkpointEditsDirs \u003d\u003d null || checkpointEditsDirs.isEmpty()) {\n+      throw new IOException(\"Cannot import image from a checkpoint. \"\n+                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n+    }\n+\n+    FSImage realImage \u003d target.getFSImage();\n+    FSImage ckptImage \u003d new FSImage(conf, \n                                     checkpointDirs, checkpointEditsDirs);\n-    // replace real image with the checkpoint image\n-    FSImage realImage \u003d fsNamesys.getFSImage();\n-    assert realImage \u003d\u003d this;\n-    fsNamesys.dir.fsImage \u003d ckptImage;\n+    target.dir.fsImage \u003d ckptImage;\n     // load from the checkpoint dirs\n     try {\n-      ckptImage.recoverTransitionRead(StartupOption.REGULAR);\n+      ckptImage.recoverTransitionRead(StartupOption.REGULAR, target);\n     } finally {\n       ckptImage.close();\n     }\n     // return back the real image\n     realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n     realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n \n-    fsNamesys.dir.fsImage \u003d realImage;\n+    target.dir.fsImage \u003d realImage;\n     realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n+\n     // and save it but keep the same checkpointTime\n-    saveNamespace();\n+    saveNamespace(target);\n     getStorage().writeAll();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void doImportCheckpoint(FSNamesystem target) throws IOException {\n    Collection\u003cURI\u003e checkpointDirs \u003d\n      FSImage.getCheckpointDirs(conf, null);\n    Collection\u003cURI\u003e checkpointEditsDirs \u003d\n      FSImage.getCheckpointEditsDirs(conf, null);\n\n    if (checkpointDirs \u003d\u003d null || checkpointDirs.isEmpty()) {\n      throw new IOException(\"Cannot import image from a checkpoint. \"\n                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n    }\n    \n    if (checkpointEditsDirs \u003d\u003d null || checkpointEditsDirs.isEmpty()) {\n      throw new IOException(\"Cannot import image from a checkpoint. \"\n                            + \"\\\"dfs.namenode.checkpoint.dir\\\" is not set.\" );\n    }\n\n    FSImage realImage \u003d target.getFSImage();\n    FSImage ckptImage \u003d new FSImage(conf, \n                                    checkpointDirs, checkpointEditsDirs);\n    target.dir.fsImage \u003d ckptImage;\n    // load from the checkpoint dirs\n    try {\n      ckptImage.recoverTransitionRead(StartupOption.REGULAR, target);\n    } finally {\n      ckptImage.close();\n    }\n    // return back the real image\n    realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n    realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n\n    target.dir.fsImage \u003d realImage;\n    realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n\n    // and save it but keep the same checkpointTime\n    saveNamespace(target);\n    getStorage().writeAll();\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void doImportCheckpoint() throws IOException {\n    FSNamesystem fsNamesys \u003d getFSNamesystem();\n    FSImage ckptImage \u003d new FSImage(conf, fsNamesys,\n                                    checkpointDirs, checkpointEditsDirs);\n    // replace real image with the checkpoint image\n    FSImage realImage \u003d fsNamesys.getFSImage();\n    assert realImage \u003d\u003d this;\n    fsNamesys.dir.fsImage \u003d ckptImage;\n    // load from the checkpoint dirs\n    try {\n      ckptImage.recoverTransitionRead(StartupOption.REGULAR);\n    } finally {\n      ckptImage.close();\n    }\n    // return back the real image\n    realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n    realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n\n    fsNamesys.dir.fsImage \u003d realImage;\n    realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n    // and save it but keep the same checkpointTime\n    saveNamespace();\n    getStorage().writeAll();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void doImportCheckpoint() throws IOException {\n    FSNamesystem fsNamesys \u003d getFSNamesystem();\n    FSImage ckptImage \u003d new FSImage(conf, fsNamesys,\n                                    checkpointDirs, checkpointEditsDirs);\n    // replace real image with the checkpoint image\n    FSImage realImage \u003d fsNamesys.getFSImage();\n    assert realImage \u003d\u003d this;\n    fsNamesys.dir.fsImage \u003d ckptImage;\n    // load from the checkpoint dirs\n    try {\n      ckptImage.recoverTransitionRead(StartupOption.REGULAR);\n    } finally {\n      ckptImage.close();\n    }\n    // return back the real image\n    realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n    realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n\n    fsNamesys.dir.fsImage \u003d realImage;\n    realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n    // and save it but keep the same checkpointTime\n    saveNamespace();\n    getStorage().writeAll();\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java"
      }
    },
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1073. Redesign the NameNode\u0027s storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/11 9:28 AM",
      "commitName": "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "27/07/11 8:19 PM",
      "commitNameOld": "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 1.55,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,24 @@\n   void doImportCheckpoint() throws IOException {\n     FSNamesystem fsNamesys \u003d getFSNamesystem();\n-    FSImage ckptImage \u003d new FSImage(fsNamesys);\n+    FSImage ckptImage \u003d new FSImage(conf, fsNamesys,\n+                                    checkpointDirs, checkpointEditsDirs);\n     // replace real image with the checkpoint image\n     FSImage realImage \u003d fsNamesys.getFSImage();\n     assert realImage \u003d\u003d this;\n     fsNamesys.dir.fsImage \u003d ckptImage;\n     // load from the checkpoint dirs\n     try {\n-      ckptImage.recoverTransitionRead(checkpointDirs, checkpointEditsDirs,\n-                                              StartupOption.REGULAR);\n+      ckptImage.recoverTransitionRead(StartupOption.REGULAR);\n     } finally {\n       ckptImage.close();\n     }\n     // return back the real image\n     realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n-    storage.setCheckpointTime(ckptImage.getStorage().getCheckpointTime());\n+    realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n+\n     fsNamesys.dir.fsImage \u003d realImage;\n     realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n     // and save it but keep the same checkpointTime\n-    saveNamespace(false);\n+    saveNamespace();\n+    getStorage().writeAll();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doImportCheckpoint() throws IOException {\n    FSNamesystem fsNamesys \u003d getFSNamesystem();\n    FSImage ckptImage \u003d new FSImage(conf, fsNamesys,\n                                    checkpointDirs, checkpointEditsDirs);\n    // replace real image with the checkpoint image\n    FSImage realImage \u003d fsNamesys.getFSImage();\n    assert realImage \u003d\u003d this;\n    fsNamesys.dir.fsImage \u003d ckptImage;\n    // load from the checkpoint dirs\n    try {\n      ckptImage.recoverTransitionRead(StartupOption.REGULAR);\n    } finally {\n      ckptImage.close();\n    }\n    // return back the real image\n    realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n    realImage.getEditLog().setNextTxId(ckptImage.getEditLog().getLastWrittenTxId()+1);\n\n    fsNamesys.dir.fsImage \u003d realImage;\n    realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n    // and save it but keep the same checkpointTime\n    saveNamespace();\n    getStorage().writeAll();\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,22 @@\n+  void doImportCheckpoint() throws IOException {\n+    FSNamesystem fsNamesys \u003d getFSNamesystem();\n+    FSImage ckptImage \u003d new FSImage(fsNamesys);\n+    // replace real image with the checkpoint image\n+    FSImage realImage \u003d fsNamesys.getFSImage();\n+    assert realImage \u003d\u003d this;\n+    fsNamesys.dir.fsImage \u003d ckptImage;\n+    // load from the checkpoint dirs\n+    try {\n+      ckptImage.recoverTransitionRead(checkpointDirs, checkpointEditsDirs,\n+                                              StartupOption.REGULAR);\n+    } finally {\n+      ckptImage.close();\n+    }\n+    // return back the real image\n+    realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n+    storage.setCheckpointTime(ckptImage.getStorage().getCheckpointTime());\n+    fsNamesys.dir.fsImage \u003d realImage;\n+    realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n+    // and save it but keep the same checkpointTime\n+    saveNamespace(false);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void doImportCheckpoint() throws IOException {\n    FSNamesystem fsNamesys \u003d getFSNamesystem();\n    FSImage ckptImage \u003d new FSImage(fsNamesys);\n    // replace real image with the checkpoint image\n    FSImage realImage \u003d fsNamesys.getFSImage();\n    assert realImage \u003d\u003d this;\n    fsNamesys.dir.fsImage \u003d ckptImage;\n    // load from the checkpoint dirs\n    try {\n      ckptImage.recoverTransitionRead(checkpointDirs, checkpointEditsDirs,\n                                              StartupOption.REGULAR);\n    } finally {\n      ckptImage.close();\n    }\n    // return back the real image\n    realImage.getStorage().setStorageInfo(ckptImage.getStorage());\n    storage.setCheckpointTime(ckptImage.getStorage().getCheckpointTime());\n    fsNamesys.dir.fsImage \u003d realImage;\n    realImage.getStorage().setBlockPoolID(ckptImage.getBlockPoolID());\n    // and save it but keep the same checkpointTime\n    saveNamespace(false);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java"
    }
  }
}