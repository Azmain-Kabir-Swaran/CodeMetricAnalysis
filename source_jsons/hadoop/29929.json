{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EntityGroupFSTimelineStore.java",
  "functionName": "getTimelineStoresForRead",
  "functionId": "getTimelineStoresForRead___entityType-String__primaryFilter-NameValuePair__secondaryFilters-Collection__NameValuePair____cacheItems-List__EntityCacheItem__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
  "functionStartLine": 1013,
  "functionEndLine": 1028,
  "numCommitsSeen": 21,
  "timeTaken": 1991,
  "changeHistory": [
    "705286ccaeea36941d97ec1c1700746b74264924",
    "02f597c5db36ded385413958bdee793ad7eda40e"
  ],
  "changeHistoryShort": {
    "705286ccaeea36941d97ec1c1700746b74264924": "Ymultichange(Yparameterchange,Ybodychange)",
    "02f597c5db36ded385413958bdee793ad7eda40e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "705286ccaeea36941d97ec1c1700746b74264924": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4987. Read cache concurrency issue between read and evict in EntityGroupFS timeline store. Contributed by Li Lu.\n",
      "commitDate": "27/05/16 6:58 AM",
      "commitName": "705286ccaeea36941d97ec1c1700746b74264924",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4987. Read cache concurrency issue between read and evict in EntityGroupFS timeline store. Contributed by Li Lu.\n",
          "commitDate": "27/05/16 6:58 AM",
          "commitName": "705286ccaeea36941d97ec1c1700746b74264924",
          "commitAuthor": "Junping Du",
          "commitDateOld": "03/05/16 4:16 AM",
          "commitNameOld": "06413da72efed9a50e49efaf7110c220c88a7f4a",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 24.11,
          "commitsBetweenForRepo": 182,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n   private List\u003cTimelineStore\u003e getTimelineStoresForRead(String entityType,\n-      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters)\n-      throws IOException {\n+      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n+      List\u003cEntityCacheItem\u003e cacheItems) throws IOException {\n     Set\u003cTimelineEntityGroupId\u003e groupIds \u003d new HashSet\u003cTimelineEntityGroupId\u003e();\n     for (TimelineEntityGroupPlugin cacheIdPlugin : cacheIdPlugins) {\n       Set\u003cTimelineEntityGroupId\u003e idsFromPlugin \u003d\n           cacheIdPlugin.getTimelineEntityGroupId(entityType, primaryFilter,\n               secondaryFilters);\n       if (idsFromPlugin !\u003d null) {\n         LOG.debug(\"plugin {} returns a non-null value on query {}\",\n             cacheIdPlugin.getClass().getName(), idsFromPlugin);\n         groupIds.addAll(idsFromPlugin);\n       }\n     }\n-    return getTimelineStoresFromCacheIds(groupIds, entityType);\n+    return getTimelineStoresFromCacheIds(groupIds, entityType, cacheItems);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cTimelineStore\u003e getTimelineStoresForRead(String entityType,\n      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n      List\u003cEntityCacheItem\u003e cacheItems) throws IOException {\n    Set\u003cTimelineEntityGroupId\u003e groupIds \u003d new HashSet\u003cTimelineEntityGroupId\u003e();\n    for (TimelineEntityGroupPlugin cacheIdPlugin : cacheIdPlugins) {\n      Set\u003cTimelineEntityGroupId\u003e idsFromPlugin \u003d\n          cacheIdPlugin.getTimelineEntityGroupId(entityType, primaryFilter,\n              secondaryFilters);\n      if (idsFromPlugin !\u003d null) {\n        LOG.debug(\"plugin {} returns a non-null value on query {}\",\n            cacheIdPlugin.getClass().getName(), idsFromPlugin);\n        groupIds.addAll(idsFromPlugin);\n      }\n    }\n    return getTimelineStoresFromCacheIds(groupIds, entityType, cacheItems);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
          "extendedDetails": {
            "oldValue": "[entityType-String, primaryFilter-NameValuePair, secondaryFilters-Collection\u003cNameValuePair\u003e]",
            "newValue": "[entityType-String, primaryFilter-NameValuePair, secondaryFilters-Collection\u003cNameValuePair\u003e, cacheItems-List\u003cEntityCacheItem\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4987. Read cache concurrency issue between read and evict in EntityGroupFS timeline store. Contributed by Li Lu.\n",
          "commitDate": "27/05/16 6:58 AM",
          "commitName": "705286ccaeea36941d97ec1c1700746b74264924",
          "commitAuthor": "Junping Du",
          "commitDateOld": "03/05/16 4:16 AM",
          "commitNameOld": "06413da72efed9a50e49efaf7110c220c88a7f4a",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 24.11,
          "commitsBetweenForRepo": 182,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n   private List\u003cTimelineStore\u003e getTimelineStoresForRead(String entityType,\n-      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters)\n-      throws IOException {\n+      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n+      List\u003cEntityCacheItem\u003e cacheItems) throws IOException {\n     Set\u003cTimelineEntityGroupId\u003e groupIds \u003d new HashSet\u003cTimelineEntityGroupId\u003e();\n     for (TimelineEntityGroupPlugin cacheIdPlugin : cacheIdPlugins) {\n       Set\u003cTimelineEntityGroupId\u003e idsFromPlugin \u003d\n           cacheIdPlugin.getTimelineEntityGroupId(entityType, primaryFilter,\n               secondaryFilters);\n       if (idsFromPlugin !\u003d null) {\n         LOG.debug(\"plugin {} returns a non-null value on query {}\",\n             cacheIdPlugin.getClass().getName(), idsFromPlugin);\n         groupIds.addAll(idsFromPlugin);\n       }\n     }\n-    return getTimelineStoresFromCacheIds(groupIds, entityType);\n+    return getTimelineStoresFromCacheIds(groupIds, entityType, cacheItems);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cTimelineStore\u003e getTimelineStoresForRead(String entityType,\n      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n      List\u003cEntityCacheItem\u003e cacheItems) throws IOException {\n    Set\u003cTimelineEntityGroupId\u003e groupIds \u003d new HashSet\u003cTimelineEntityGroupId\u003e();\n    for (TimelineEntityGroupPlugin cacheIdPlugin : cacheIdPlugins) {\n      Set\u003cTimelineEntityGroupId\u003e idsFromPlugin \u003d\n          cacheIdPlugin.getTimelineEntityGroupId(entityType, primaryFilter,\n              secondaryFilters);\n      if (idsFromPlugin !\u003d null) {\n        LOG.debug(\"plugin {} returns a non-null value on query {}\",\n            cacheIdPlugin.getClass().getName(), idsFromPlugin);\n        groupIds.addAll(idsFromPlugin);\n      }\n    }\n    return getTimelineStoresFromCacheIds(groupIds, entityType, cacheItems);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "02f597c5db36ded385413958bdee793ad7eda40e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4265. Provide new timeline plugin storage to support fine-grained entity caching. Contributed by Li Lu and Jason Lowe\n",
      "commitDate": "17/01/16 5:37 PM",
      "commitName": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,16 @@\n+  private List\u003cTimelineStore\u003e getTimelineStoresForRead(String entityType,\n+      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters)\n+      throws IOException {\n+    Set\u003cTimelineEntityGroupId\u003e groupIds \u003d new HashSet\u003cTimelineEntityGroupId\u003e();\n+    for (TimelineEntityGroupPlugin cacheIdPlugin : cacheIdPlugins) {\n+      Set\u003cTimelineEntityGroupId\u003e idsFromPlugin \u003d\n+          cacheIdPlugin.getTimelineEntityGroupId(entityType, primaryFilter,\n+              secondaryFilters);\n+      if (idsFromPlugin !\u003d null) {\n+        LOG.debug(\"plugin {} returns a non-null value on query {}\",\n+            cacheIdPlugin.getClass().getName(), idsFromPlugin);\n+        groupIds.addAll(idsFromPlugin);\n+      }\n+    }\n+    return getTimelineStoresFromCacheIds(groupIds, entityType);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cTimelineStore\u003e getTimelineStoresForRead(String entityType,\n      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters)\n      throws IOException {\n    Set\u003cTimelineEntityGroupId\u003e groupIds \u003d new HashSet\u003cTimelineEntityGroupId\u003e();\n    for (TimelineEntityGroupPlugin cacheIdPlugin : cacheIdPlugins) {\n      Set\u003cTimelineEntityGroupId\u003e idsFromPlugin \u003d\n          cacheIdPlugin.getTimelineEntityGroupId(entityType, primaryFilter,\n              secondaryFilters);\n      if (idsFromPlugin !\u003d null) {\n        LOG.debug(\"plugin {} returns a non-null value on query {}\",\n            cacheIdPlugin.getClass().getName(), idsFromPlugin);\n        groupIds.addAll(idsFromPlugin);\n      }\n    }\n    return getTimelineStoresFromCacheIds(groupIds, entityType);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java"
    }
  }
}