{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystem.java",
  "functionName": "primitiveCreate",
  "functionId": "primitiveCreate___f-Path__absolutePermission-FsPermission__flag-EnumSet__CreateFlag____bufferSize-int__replication-short__blockSize-long__progress-Progressable__checksumOpt-ChecksumOpt",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
  "functionStartLine": 1254,
  "functionEndLine": 1278,
  "numCommitsSeen": 210,
  "timeTaken": 4989,
  "changeHistory": [
    "b0ea77303ba62a400376ca32c63c5b138f32cbe7",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "a8dbce159679cd031f60e6151399fa2cd5ac9374",
    "a12ab4bc6fdaf51a2d0c611a522d195b30e25a72",
    "f5efc187e5490b2172e0f1d68ce5b528977c81ee",
    "35a4624771f84a60deb62a3807a3ac0701b0d7d0",
    "0294c49df60150bd9b363af5cfbc312222c12c69"
  ],
  "changeHistoryShort": {
    "b0ea77303ba62a400376ca32c63c5b138f32cbe7": "Yparameterchange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "a8dbce159679cd031f60e6151399fa2cd5ac9374": "Ybodychange",
    "a12ab4bc6fdaf51a2d0c611a522d195b30e25a72": "Ybodychange",
    "f5efc187e5490b2172e0f1d68ce5b528977c81ee": "Ybodychange",
    "35a4624771f84a60deb62a3807a3ac0701b0d7d0": "Ybodychange",
    "0294c49df60150bd9b363af5cfbc312222c12c69": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b0ea77303ba62a400376ca32c63c5b138f32cbe7": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-8240. Add a new API to allow users to specify a checksum type on FileSystem.create(..).  Contributed by Kihwal Lee\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1374696 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/12 10:46 PM",
      "commitName": "b0ea77303ba62a400376ca32c63c5b138f32cbe7",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "17/08/12 4:22 PM",
      "commitNameOld": "18c5bc86ca256beb9d4ccd6588c0b0ebe9dfcbd0",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 1.27,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   protected FSDataOutputStream primitiveCreate(Path f,\n      FsPermission absolutePermission, EnumSet\u003cCreateFlag\u003e flag, int bufferSize,\n      short replication, long blockSize, Progressable progress,\n-     int bytesPerChecksum) throws IOException {\n+     ChecksumOpt checksumOpt) throws IOException {\n \n     boolean pathExists \u003d exists(f);\n     CreateFlag.validate(f, pathExists, flag);\n     \n     // Default impl  assumes that permissions do not matter and \n     // nor does the bytesPerChecksum  hence\n     // calling the regular create is good enough.\n     // FSs that implement permissions should override this.\n \n     if (pathExists \u0026\u0026 flag.contains(CreateFlag.APPEND)) {\n       return append(f, bufferSize, progress);\n     }\n     \n     return this.create(f, absolutePermission,\n         flag.contains(CreateFlag.OVERWRITE), bufferSize, replication,\n         blockSize, progress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected FSDataOutputStream primitiveCreate(Path f,\n     FsPermission absolutePermission, EnumSet\u003cCreateFlag\u003e flag, int bufferSize,\n     short replication, long blockSize, Progressable progress,\n     ChecksumOpt checksumOpt) throws IOException {\n\n    boolean pathExists \u003d exists(f);\n    CreateFlag.validate(f, pathExists, flag);\n    \n    // Default impl  assumes that permissions do not matter and \n    // nor does the bytesPerChecksum  hence\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n\n    if (pathExists \u0026\u0026 flag.contains(CreateFlag.APPEND)) {\n      return append(f, bufferSize, progress);\n    }\n    \n    return this.create(f, absolutePermission,\n        flag.contains(CreateFlag.OVERWRITE), bufferSize, replication,\n        blockSize, progress);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldValue": "[f-Path, absolutePermission-FsPermission, flag-EnumSet\u003cCreateFlag\u003e, bufferSize-int, replication-short, blockSize-long, progress-Progressable, bytesPerChecksum-int]",
        "newValue": "[f-Path, absolutePermission-FsPermission, flag-EnumSet\u003cCreateFlag\u003e, bufferSize-int, replication-short, blockSize-long, progress-Progressable, checksumOpt-ChecksumOpt]"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected FSDataOutputStream primitiveCreate(Path f,\n     FsPermission absolutePermission, EnumSet\u003cCreateFlag\u003e flag, int bufferSize,\n     short replication, long blockSize, Progressable progress,\n     int bytesPerChecksum) throws IOException {\n\n    boolean pathExists \u003d exists(f);\n    CreateFlag.validate(f, pathExists, flag);\n    \n    // Default impl  assumes that permissions do not matter and \n    // nor does the bytesPerChecksum  hence\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n\n    if (pathExists \u0026\u0026 flag.contains(CreateFlag.APPEND)) {\n      return append(f, bufferSize, progress);\n    }\n    \n    return this.create(f, absolutePermission,\n        flag.contains(CreateFlag.OVERWRITE), bufferSize, replication,\n        blockSize, progress);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected FSDataOutputStream primitiveCreate(Path f,\n     FsPermission absolutePermission, EnumSet\u003cCreateFlag\u003e flag, int bufferSize,\n     short replication, long blockSize, Progressable progress,\n     int bytesPerChecksum) throws IOException {\n\n    boolean pathExists \u003d exists(f);\n    CreateFlag.validate(f, pathExists, flag);\n    \n    // Default impl  assumes that permissions do not matter and \n    // nor does the bytesPerChecksum  hence\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n\n    if (pathExists \u0026\u0026 flag.contains(CreateFlag.APPEND)) {\n      return append(f, bufferSize, progress);\n    }\n    \n    return this.create(f, absolutePermission,\n        flag.contains(CreateFlag.OVERWRITE), bufferSize, replication,\n        blockSize, progress);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected FSDataOutputStream primitiveCreate(Path f,\n     FsPermission absolutePermission, EnumSet\u003cCreateFlag\u003e flag, int bufferSize,\n     short replication, long blockSize, Progressable progress,\n     int bytesPerChecksum) throws IOException {\n\n    boolean pathExists \u003d exists(f);\n    CreateFlag.validate(f, pathExists, flag);\n    \n    // Default impl  assumes that permissions do not matter and \n    // nor does the bytesPerChecksum  hence\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n\n    if (pathExists \u0026\u0026 flag.contains(CreateFlag.APPEND)) {\n      return append(f, bufferSize, progress);\n    }\n    \n    return this.create(f, absolutePermission,\n        flag.contains(CreateFlag.OVERWRITE), bufferSize, replication,\n        blockSize, progress);\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "a8dbce159679cd031f60e6151399fa2cd5ac9374": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7223. FileContext createFlag combinations are not clearly defined. Contributed by Suresh Srinivas.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1092565 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/04/11 6:51 PM",
      "commitName": "a8dbce159679cd031f60e6151399fa2cd5ac9374",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "13/04/11 1:55 PM",
      "commitNameOld": "a12ab4bc6fdaf51a2d0c611a522d195b30e25a72",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 1.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,21 @@\n   protected FSDataOutputStream primitiveCreate(Path f,\n      FsPermission absolutePermission, EnumSet\u003cCreateFlag\u003e flag, int bufferSize,\n      short replication, long blockSize, Progressable progress,\n      int bytesPerChecksum) throws IOException {\n+\n+    boolean pathExists \u003d exists(f);\n+    CreateFlag.validate(f, pathExists, flag);\n     \n     // Default impl  assumes that permissions do not matter and \n     // nor does the bytesPerChecksum  hence\n     // calling the regular create is good enough.\n     // FSs that implement permissions should override this.\n \n-    if (exists(f)) {\n-      if (flag.contains(CreateFlag.APPEND)) {\n-        return append(f, bufferSize, progress);\n-      } else if (!flag.contains(CreateFlag.OVERWRITE)) {\n-        throw new IOException(\"File already exists: \" + f);\n-      }\n-    } else {\n-      if (flag.contains(CreateFlag.APPEND) \u0026\u0026 !flag.contains(CreateFlag.CREATE))\n-        throw new IOException(\"File already exists: \" + f.toString());\n+    if (pathExists \u0026\u0026 flag.contains(CreateFlag.APPEND)) {\n+      return append(f, bufferSize, progress);\n     }\n     \n-    return this.create(f, absolutePermission, flag.contains(CreateFlag.OVERWRITE), bufferSize, replication,\n+    return this.create(f, absolutePermission,\n+        flag.contains(CreateFlag.OVERWRITE), bufferSize, replication,\n         blockSize, progress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected FSDataOutputStream primitiveCreate(Path f,\n     FsPermission absolutePermission, EnumSet\u003cCreateFlag\u003e flag, int bufferSize,\n     short replication, long blockSize, Progressable progress,\n     int bytesPerChecksum) throws IOException {\n\n    boolean pathExists \u003d exists(f);\n    CreateFlag.validate(f, pathExists, flag);\n    \n    // Default impl  assumes that permissions do not matter and \n    // nor does the bytesPerChecksum  hence\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n\n    if (pathExists \u0026\u0026 flag.contains(CreateFlag.APPEND)) {\n      return append(f, bufferSize, progress);\n    }\n    \n    return this.create(f, absolutePermission,\n        flag.contains(CreateFlag.OVERWRITE), bufferSize, replication,\n        blockSize, progress);\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "a12ab4bc6fdaf51a2d0c611a522d195b30e25a72": {
      "type": "Ybodychange",
      "commitMessage": "Undoing commit r1091613 for HADOOP-7223. FileContext createFlag combinations are not clearly defined.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1091916 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/04/11 1:55 PM",
      "commitName": "a12ab4bc6fdaf51a2d0c611a522d195b30e25a72",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "12/04/11 5:42 PM",
      "commitNameOld": "d03e5b75bc03b4fd11917c9950749856f0333af2",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 0.84,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,24 @@\n   protected FSDataOutputStream primitiveCreate(Path f,\n      FsPermission absolutePermission, EnumSet\u003cCreateFlag\u003e flag, int bufferSize,\n      short replication, long blockSize, Progressable progress,\n      int bytesPerChecksum) throws IOException {\n-\n-    boolean pathExists \u003d exists(f);\n-    CreateFlag.validate(f, pathExists, flag);\n     \n     // Default impl  assumes that permissions do not matter and \n     // nor does the bytesPerChecksum  hence\n     // calling the regular create is good enough.\n     // FSs that implement permissions should override this.\n \n-    if (pathExists \u0026\u0026 flag.contains(CreateFlag.APPEND)) {\n-      return append(f, bufferSize, progress);\n+    if (exists(f)) {\n+      if (flag.contains(CreateFlag.APPEND)) {\n+        return append(f, bufferSize, progress);\n+      } else if (!flag.contains(CreateFlag.OVERWRITE)) {\n+        throw new IOException(\"File already exists: \" + f);\n+      }\n+    } else {\n+      if (flag.contains(CreateFlag.APPEND) \u0026\u0026 !flag.contains(CreateFlag.CREATE))\n+        throw new IOException(\"File already exists: \" + f.toString());\n     }\n     \n-    return this.create(f, absolutePermission,\n-        flag.contains(CreateFlag.OVERWRITE), bufferSize, replication,\n+    return this.create(f, absolutePermission, flag.contains(CreateFlag.OVERWRITE), bufferSize, replication,\n         blockSize, progress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected FSDataOutputStream primitiveCreate(Path f,\n     FsPermission absolutePermission, EnumSet\u003cCreateFlag\u003e flag, int bufferSize,\n     short replication, long blockSize, Progressable progress,\n     int bytesPerChecksum) throws IOException {\n    \n    // Default impl  assumes that permissions do not matter and \n    // nor does the bytesPerChecksum  hence\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n\n    if (exists(f)) {\n      if (flag.contains(CreateFlag.APPEND)) {\n        return append(f, bufferSize, progress);\n      } else if (!flag.contains(CreateFlag.OVERWRITE)) {\n        throw new IOException(\"File already exists: \" + f);\n      }\n    } else {\n      if (flag.contains(CreateFlag.APPEND) \u0026\u0026 !flag.contains(CreateFlag.CREATE))\n        throw new IOException(\"File already exists: \" + f.toString());\n    }\n    \n    return this.create(f, absolutePermission, flag.contains(CreateFlag.OVERWRITE), bufferSize, replication,\n        blockSize, progress);\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "f5efc187e5490b2172e0f1d68ce5b528977c81ee": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7223. FileContext createFlag combinations are not clearly defined. Contributed by Suresh Srinivas.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1091613 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/04/11 5:09 PM",
      "commitName": "f5efc187e5490b2172e0f1d68ce5b528977c81ee",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "12/04/11 3:34 PM",
      "commitNameOld": "6e5bd7b622e50a28a70b53e8e3b910e726cd78ca",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,21 @@\n   protected FSDataOutputStream primitiveCreate(Path f,\n      FsPermission absolutePermission, EnumSet\u003cCreateFlag\u003e flag, int bufferSize,\n      short replication, long blockSize, Progressable progress,\n      int bytesPerChecksum) throws IOException {\n+\n+    boolean pathExists \u003d exists(f);\n+    CreateFlag.validate(f, pathExists, flag);\n     \n     // Default impl  assumes that permissions do not matter and \n     // nor does the bytesPerChecksum  hence\n     // calling the regular create is good enough.\n     // FSs that implement permissions should override this.\n \n-    if (exists(f)) {\n-      if (flag.contains(CreateFlag.APPEND)) {\n-        return append(f, bufferSize, progress);\n-      } else if (!flag.contains(CreateFlag.OVERWRITE)) {\n-        throw new IOException(\"File already exists: \" + f);\n-      }\n-    } else {\n-      if (flag.contains(CreateFlag.APPEND) \u0026\u0026 !flag.contains(CreateFlag.CREATE))\n-        throw new IOException(\"File already exists: \" + f.toString());\n+    if (pathExists \u0026\u0026 flag.contains(CreateFlag.APPEND)) {\n+      return append(f, bufferSize, progress);\n     }\n     \n-    return this.create(f, absolutePermission, flag.contains(CreateFlag.OVERWRITE), bufferSize, replication,\n+    return this.create(f, absolutePermission,\n+        flag.contains(CreateFlag.OVERWRITE), bufferSize, replication,\n         blockSize, progress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected FSDataOutputStream primitiveCreate(Path f,\n     FsPermission absolutePermission, EnumSet\u003cCreateFlag\u003e flag, int bufferSize,\n     short replication, long blockSize, Progressable progress,\n     int bytesPerChecksum) throws IOException {\n\n    boolean pathExists \u003d exists(f);\n    CreateFlag.validate(f, pathExists, flag);\n    \n    // Default impl  assumes that permissions do not matter and \n    // nor does the bytesPerChecksum  hence\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n\n    if (pathExists \u0026\u0026 flag.contains(CreateFlag.APPEND)) {\n      return append(f, bufferSize, progress);\n    }\n    \n    return this.create(f, absolutePermission,\n        flag.contains(CreateFlag.OVERWRITE), bufferSize, replication,\n        blockSize, progress);\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "35a4624771f84a60deb62a3807a3ac0701b0d7d0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6826.  Revert FileSystem create method that takes CreateFlags.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@956710 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/10 2:45 PM",
      "commitName": "35a4624771f84a60deb62a3807a3ac0701b0d7d0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "11/06/10 2:34 PM",
      "commitNameOld": "6378822a67c0baa502d22201f5c2b478cbe1261c",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 10.01,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,24 @@\n   protected FSDataOutputStream primitiveCreate(Path f,\n      FsPermission absolutePermission, EnumSet\u003cCreateFlag\u003e flag, int bufferSize,\n      short replication, long blockSize, Progressable progress,\n      int bytesPerChecksum) throws IOException {\n     \n     // Default impl  assumes that permissions do not matter and \n     // nor does the bytesPerChecksum  hence\n     // calling the regular create is good enough.\n     // FSs that implement permissions should override this.\n+\n+    if (exists(f)) {\n+      if (flag.contains(CreateFlag.APPEND)) {\n+        return append(f, bufferSize, progress);\n+      } else if (!flag.contains(CreateFlag.OVERWRITE)) {\n+        throw new IOException(\"File already exists: \" + f);\n+      }\n+    } else {\n+      if (flag.contains(CreateFlag.APPEND) \u0026\u0026 !flag.contains(CreateFlag.CREATE))\n+        throw new IOException(\"File already exists: \" + f.toString());\n+    }\n     \n-    return this.create(f, absolutePermission, flag, bufferSize, replication,\n+    return this.create(f, absolutePermission, flag.contains(CreateFlag.OVERWRITE), bufferSize, replication,\n         blockSize, progress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected FSDataOutputStream primitiveCreate(Path f,\n     FsPermission absolutePermission, EnumSet\u003cCreateFlag\u003e flag, int bufferSize,\n     short replication, long blockSize, Progressable progress,\n     int bytesPerChecksum) throws IOException {\n    \n    // Default impl  assumes that permissions do not matter and \n    // nor does the bytesPerChecksum  hence\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n\n    if (exists(f)) {\n      if (flag.contains(CreateFlag.APPEND)) {\n        return append(f, bufferSize, progress);\n      } else if (!flag.contains(CreateFlag.OVERWRITE)) {\n        throw new IOException(\"File already exists: \" + f);\n      }\n    } else {\n      if (flag.contains(CreateFlag.APPEND) \u0026\u0026 !flag.contains(CreateFlag.CREATE))\n        throw new IOException(\"File already exists: \" + f.toString());\n    }\n    \n    return this.create(f, absolutePermission, flag.contains(CreateFlag.OVERWRITE), bufferSize, replication,\n        blockSize, progress);\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "0294c49df60150bd9b363af5cfbc312222c12c69": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4952. Add new improved file system interface FileContext for the application writer. Contributed by Sanjay Radia.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@816398 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/09/09 3:27 PM",
      "commitName": "0294c49df60150bd9b363af5cfbc312222c12c69",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,13 @@\n+  protected FSDataOutputStream primitiveCreate(Path f,\n+     FsPermission absolutePermission, EnumSet\u003cCreateFlag\u003e flag, int bufferSize,\n+     short replication, long blockSize, Progressable progress,\n+     int bytesPerChecksum) throws IOException {\n+    \n+    // Default impl  assumes that permissions do not matter and \n+    // nor does the bytesPerChecksum  hence\n+    // calling the regular create is good enough.\n+    // FSs that implement permissions should override this.\n+    \n+    return this.create(f, absolutePermission, flag, bufferSize, replication,\n+        blockSize, progress);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected FSDataOutputStream primitiveCreate(Path f,\n     FsPermission absolutePermission, EnumSet\u003cCreateFlag\u003e flag, int bufferSize,\n     short replication, long blockSize, Progressable progress,\n     int bytesPerChecksum) throws IOException {\n    \n    // Default impl  assumes that permissions do not matter and \n    // nor does the bytesPerChecksum  hence\n    // calling the regular create is good enough.\n    // FSs that implement permissions should override this.\n    \n    return this.create(f, absolutePermission, flag, bufferSize, replication,\n        blockSize, progress);\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileSystem.java"
    }
  }
}