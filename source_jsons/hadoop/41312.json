{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSAppAttempt.java",
  "functionName": "reservationExceedsThreshold",
  "functionId": "reservationExceedsThreshold___node-FSSchedulerNode__type-NodeType",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
  "functionStartLine": 732,
  "functionEndLine": 760,
  "numCommitsSeen": 91,
  "timeTaken": 3840,
  "changeHistory": [
    "58d1df585c2b8a4d2f78ae30726f07b4c6a94731",
    "7e2837f830382835838c82398db6fc9823d612a7",
    "486e718fc1f5befd231494e2ec06bb360484f191"
  ],
  "changeHistoryShort": {
    "58d1df585c2b8a4d2f78ae30726f07b4c6a94731": "Ybodychange",
    "7e2837f830382835838c82398db6fc9823d612a7": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "486e718fc1f5befd231494e2ec06bb360484f191": "Yintroduced"
  },
  "changeHistoryDetails": {
    "58d1df585c2b8a4d2f78ae30726f07b4c6a94731": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4310. FairScheduler: Log skipping reservation messages at DEBUG level (asuresh)\n",
      "commitDate": "29/10/15 1:42 PM",
      "commitName": "58d1df585c2b8a4d2f78ae30726f07b4c6a94731",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "19/10/15 8:00 PM",
      "commitNameOld": "7e2837f830382835838c82398db6fc9823d612a7",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 9.74,
      "commitsBetweenForRepo": 113,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   private boolean reservationExceedsThreshold(FSSchedulerNode node,\n                                                  NodeType type) {\n     // Only if not node-local\n     if (type !\u003d NodeType.NODE_LOCAL) {\n       int existingReservations \u003d getNumReservations(node.getRackName(),\n               type \u003d\u003d NodeType.OFF_SWITCH);\n       int totalAvailNodes \u003d\n               (type \u003d\u003d NodeType.OFF_SWITCH) ? scheduler.getNumClusterNodes() :\n                       scheduler.getNumNodesInRack(node.getRackName());\n       int numAllowedReservations \u003d\n               (int)Math.ceil(\n                       totalAvailNodes * scheduler.getReservableNodesRatio());\n       if (existingReservations \u003e\u003d numAllowedReservations) {\n         DecimalFormat df \u003d new DecimalFormat();\n         df.setMaximumFractionDigits(2);\n-        LOG.info(\"Reservation Exceeds Allowed number of nodes:\" +\n-                \" app_id\u003d\" + getApplicationId() +\n-                \" existingReservations\u003d\" + existingReservations +\n-                \" totalAvailableNodes\u003d\" + totalAvailNodes +\n-                \" reservableNodesRatio\u003d\" + df.format(\n-                                        scheduler.getReservableNodesRatio()) +\n-                \" numAllowedReservations\u003d\" + numAllowedReservations);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Reservation Exceeds Allowed number of nodes:\" +\n+                  \" app_id\u003d\" + getApplicationId() +\n+                  \" existingReservations\u003d\" + existingReservations +\n+                  \" totalAvailableNodes\u003d\" + totalAvailNodes +\n+                  \" reservableNodesRatio\u003d\" + df.format(\n+                                          scheduler.getReservableNodesRatio()) +\n+                  \" numAllowedReservations\u003d\" + numAllowedReservations);\n+        }\n         return true;\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean reservationExceedsThreshold(FSSchedulerNode node,\n                                                 NodeType type) {\n    // Only if not node-local\n    if (type !\u003d NodeType.NODE_LOCAL) {\n      int existingReservations \u003d getNumReservations(node.getRackName(),\n              type \u003d\u003d NodeType.OFF_SWITCH);\n      int totalAvailNodes \u003d\n              (type \u003d\u003d NodeType.OFF_SWITCH) ? scheduler.getNumClusterNodes() :\n                      scheduler.getNumNodesInRack(node.getRackName());\n      int numAllowedReservations \u003d\n              (int)Math.ceil(\n                      totalAvailNodes * scheduler.getReservableNodesRatio());\n      if (existingReservations \u003e\u003d numAllowedReservations) {\n        DecimalFormat df \u003d new DecimalFormat();\n        df.setMaximumFractionDigits(2);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Reservation Exceeds Allowed number of nodes:\" +\n                  \" app_id\u003d\" + getApplicationId() +\n                  \" existingReservations\u003d\" + existingReservations +\n                  \" totalAvailableNodes\u003d\" + totalAvailNodes +\n                  \" reservableNodesRatio\u003d\" + df.format(\n                                          scheduler.getReservableNodesRatio()) +\n                  \" numAllowedReservations\u003d\" + numAllowedReservations);\n        }\n        return true;\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "7e2837f830382835838c82398db6fc9823d612a7": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-4270. Limit application resource reservation on nodes for non-node/rack specific requests (asuresh)\n",
      "commitDate": "19/10/15 8:00 PM",
      "commitName": "7e2837f830382835838c82398db6fc9823d612a7",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-4270. Limit application resource reservation on nodes for non-node/rack specific requests (asuresh)\n",
          "commitDate": "19/10/15 8:00 PM",
          "commitName": "7e2837f830382835838c82398db6fc9823d612a7",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "18/09/15 2:02 PM",
          "commitNameOld": "94dec5a9164cd9bc573fbf74e76bcff9e7c5c637",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 31.25,
          "commitsBetweenForRepo": 225,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,27 @@\n-  private void reserve(Priority priority, FSSchedulerNode node,\n-      Container container, boolean alreadyReserved) {\n-    LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n-        \" app_id\u003d\" + getApplicationId());\n-\n-    if (!alreadyReserved) {\n-      getMetrics().reserveResource(getUser(), container.getResource());\n-      RMContainer rmContainer \u003d\n-          super.reserve(node, priority, null, container);\n-      node.reserveResource(this, priority, rmContainer);\n-    } else {\n-      RMContainer rmContainer \u003d node.getReservedContainer();\n-      super.reserve(node, priority, rmContainer, container);\n-      node.reserveResource(this, priority, rmContainer);\n+  private boolean reservationExceedsThreshold(FSSchedulerNode node,\n+                                                 NodeType type) {\n+    // Only if not node-local\n+    if (type !\u003d NodeType.NODE_LOCAL) {\n+      int existingReservations \u003d getNumReservations(node.getRackName(),\n+              type \u003d\u003d NodeType.OFF_SWITCH);\n+      int totalAvailNodes \u003d\n+              (type \u003d\u003d NodeType.OFF_SWITCH) ? scheduler.getNumClusterNodes() :\n+                      scheduler.getNumNodesInRack(node.getRackName());\n+      int numAllowedReservations \u003d\n+              (int)Math.ceil(\n+                      totalAvailNodes * scheduler.getReservableNodesRatio());\n+      if (existingReservations \u003e\u003d numAllowedReservations) {\n+        DecimalFormat df \u003d new DecimalFormat();\n+        df.setMaximumFractionDigits(2);\n+        LOG.info(\"Reservation Exceeds Allowed number of nodes:\" +\n+                \" app_id\u003d\" + getApplicationId() +\n+                \" existingReservations\u003d\" + existingReservations +\n+                \" totalAvailableNodes\u003d\" + totalAvailNodes +\n+                \" reservableNodesRatio\u003d\" + df.format(\n+                                        scheduler.getReservableNodesRatio()) +\n+                \" numAllowedReservations\u003d\" + numAllowedReservations);\n+        return true;\n+      }\n     }\n+    return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean reservationExceedsThreshold(FSSchedulerNode node,\n                                                 NodeType type) {\n    // Only if not node-local\n    if (type !\u003d NodeType.NODE_LOCAL) {\n      int existingReservations \u003d getNumReservations(node.getRackName(),\n              type \u003d\u003d NodeType.OFF_SWITCH);\n      int totalAvailNodes \u003d\n              (type \u003d\u003d NodeType.OFF_SWITCH) ? scheduler.getNumClusterNodes() :\n                      scheduler.getNumNodesInRack(node.getRackName());\n      int numAllowedReservations \u003d\n              (int)Math.ceil(\n                      totalAvailNodes * scheduler.getReservableNodesRatio());\n      if (existingReservations \u003e\u003d numAllowedReservations) {\n        DecimalFormat df \u003d new DecimalFormat();\n        df.setMaximumFractionDigits(2);\n        LOG.info(\"Reservation Exceeds Allowed number of nodes:\" +\n                \" app_id\u003d\" + getApplicationId() +\n                \" existingReservations\u003d\" + existingReservations +\n                \" totalAvailableNodes\u003d\" + totalAvailNodes +\n                \" reservableNodesRatio\u003d\" + df.format(\n                                        scheduler.getReservableNodesRatio()) +\n                \" numAllowedReservations\u003d\" + numAllowedReservations);\n        return true;\n      }\n    }\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "reserve",
            "newValue": "reservationExceedsThreshold"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4270. Limit application resource reservation on nodes for non-node/rack specific requests (asuresh)\n",
          "commitDate": "19/10/15 8:00 PM",
          "commitName": "7e2837f830382835838c82398db6fc9823d612a7",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "18/09/15 2:02 PM",
          "commitNameOld": "94dec5a9164cd9bc573fbf74e76bcff9e7c5c637",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 31.25,
          "commitsBetweenForRepo": 225,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,27 @@\n-  private void reserve(Priority priority, FSSchedulerNode node,\n-      Container container, boolean alreadyReserved) {\n-    LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n-        \" app_id\u003d\" + getApplicationId());\n-\n-    if (!alreadyReserved) {\n-      getMetrics().reserveResource(getUser(), container.getResource());\n-      RMContainer rmContainer \u003d\n-          super.reserve(node, priority, null, container);\n-      node.reserveResource(this, priority, rmContainer);\n-    } else {\n-      RMContainer rmContainer \u003d node.getReservedContainer();\n-      super.reserve(node, priority, rmContainer, container);\n-      node.reserveResource(this, priority, rmContainer);\n+  private boolean reservationExceedsThreshold(FSSchedulerNode node,\n+                                                 NodeType type) {\n+    // Only if not node-local\n+    if (type !\u003d NodeType.NODE_LOCAL) {\n+      int existingReservations \u003d getNumReservations(node.getRackName(),\n+              type \u003d\u003d NodeType.OFF_SWITCH);\n+      int totalAvailNodes \u003d\n+              (type \u003d\u003d NodeType.OFF_SWITCH) ? scheduler.getNumClusterNodes() :\n+                      scheduler.getNumNodesInRack(node.getRackName());\n+      int numAllowedReservations \u003d\n+              (int)Math.ceil(\n+                      totalAvailNodes * scheduler.getReservableNodesRatio());\n+      if (existingReservations \u003e\u003d numAllowedReservations) {\n+        DecimalFormat df \u003d new DecimalFormat();\n+        df.setMaximumFractionDigits(2);\n+        LOG.info(\"Reservation Exceeds Allowed number of nodes:\" +\n+                \" app_id\u003d\" + getApplicationId() +\n+                \" existingReservations\u003d\" + existingReservations +\n+                \" totalAvailableNodes\u003d\" + totalAvailNodes +\n+                \" reservableNodesRatio\u003d\" + df.format(\n+                                        scheduler.getReservableNodesRatio()) +\n+                \" numAllowedReservations\u003d\" + numAllowedReservations);\n+        return true;\n+      }\n     }\n+    return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean reservationExceedsThreshold(FSSchedulerNode node,\n                                                 NodeType type) {\n    // Only if not node-local\n    if (type !\u003d NodeType.NODE_LOCAL) {\n      int existingReservations \u003d getNumReservations(node.getRackName(),\n              type \u003d\u003d NodeType.OFF_SWITCH);\n      int totalAvailNodes \u003d\n              (type \u003d\u003d NodeType.OFF_SWITCH) ? scheduler.getNumClusterNodes() :\n                      scheduler.getNumNodesInRack(node.getRackName());\n      int numAllowedReservations \u003d\n              (int)Math.ceil(\n                      totalAvailNodes * scheduler.getReservableNodesRatio());\n      if (existingReservations \u003e\u003d numAllowedReservations) {\n        DecimalFormat df \u003d new DecimalFormat();\n        df.setMaximumFractionDigits(2);\n        LOG.info(\"Reservation Exceeds Allowed number of nodes:\" +\n                \" app_id\u003d\" + getApplicationId() +\n                \" existingReservations\u003d\" + existingReservations +\n                \" totalAvailableNodes\u003d\" + totalAvailNodes +\n                \" reservableNodesRatio\u003d\" + df.format(\n                                        scheduler.getReservableNodesRatio()) +\n                \" numAllowedReservations\u003d\" + numAllowedReservations);\n        return true;\n      }\n    }\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "[priority-Priority, node-FSSchedulerNode, container-Container, alreadyReserved-boolean]",
            "newValue": "[node-FSSchedulerNode, type-NodeType]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-4270. Limit application resource reservation on nodes for non-node/rack specific requests (asuresh)\n",
          "commitDate": "19/10/15 8:00 PM",
          "commitName": "7e2837f830382835838c82398db6fc9823d612a7",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "18/09/15 2:02 PM",
          "commitNameOld": "94dec5a9164cd9bc573fbf74e76bcff9e7c5c637",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 31.25,
          "commitsBetweenForRepo": 225,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,27 @@\n-  private void reserve(Priority priority, FSSchedulerNode node,\n-      Container container, boolean alreadyReserved) {\n-    LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n-        \" app_id\u003d\" + getApplicationId());\n-\n-    if (!alreadyReserved) {\n-      getMetrics().reserveResource(getUser(), container.getResource());\n-      RMContainer rmContainer \u003d\n-          super.reserve(node, priority, null, container);\n-      node.reserveResource(this, priority, rmContainer);\n-    } else {\n-      RMContainer rmContainer \u003d node.getReservedContainer();\n-      super.reserve(node, priority, rmContainer, container);\n-      node.reserveResource(this, priority, rmContainer);\n+  private boolean reservationExceedsThreshold(FSSchedulerNode node,\n+                                                 NodeType type) {\n+    // Only if not node-local\n+    if (type !\u003d NodeType.NODE_LOCAL) {\n+      int existingReservations \u003d getNumReservations(node.getRackName(),\n+              type \u003d\u003d NodeType.OFF_SWITCH);\n+      int totalAvailNodes \u003d\n+              (type \u003d\u003d NodeType.OFF_SWITCH) ? scheduler.getNumClusterNodes() :\n+                      scheduler.getNumNodesInRack(node.getRackName());\n+      int numAllowedReservations \u003d\n+              (int)Math.ceil(\n+                      totalAvailNodes * scheduler.getReservableNodesRatio());\n+      if (existingReservations \u003e\u003d numAllowedReservations) {\n+        DecimalFormat df \u003d new DecimalFormat();\n+        df.setMaximumFractionDigits(2);\n+        LOG.info(\"Reservation Exceeds Allowed number of nodes:\" +\n+                \" app_id\u003d\" + getApplicationId() +\n+                \" existingReservations\u003d\" + existingReservations +\n+                \" totalAvailableNodes\u003d\" + totalAvailNodes +\n+                \" reservableNodesRatio\u003d\" + df.format(\n+                                        scheduler.getReservableNodesRatio()) +\n+                \" numAllowedReservations\u003d\" + numAllowedReservations);\n+        return true;\n+      }\n     }\n+    return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean reservationExceedsThreshold(FSSchedulerNode node,\n                                                 NodeType type) {\n    // Only if not node-local\n    if (type !\u003d NodeType.NODE_LOCAL) {\n      int existingReservations \u003d getNumReservations(node.getRackName(),\n              type \u003d\u003d NodeType.OFF_SWITCH);\n      int totalAvailNodes \u003d\n              (type \u003d\u003d NodeType.OFF_SWITCH) ? scheduler.getNumClusterNodes() :\n                      scheduler.getNumNodesInRack(node.getRackName());\n      int numAllowedReservations \u003d\n              (int)Math.ceil(\n                      totalAvailNodes * scheduler.getReservableNodesRatio());\n      if (existingReservations \u003e\u003d numAllowedReservations) {\n        DecimalFormat df \u003d new DecimalFormat();\n        df.setMaximumFractionDigits(2);\n        LOG.info(\"Reservation Exceeds Allowed number of nodes:\" +\n                \" app_id\u003d\" + getApplicationId() +\n                \" existingReservations\u003d\" + existingReservations +\n                \" totalAvailableNodes\u003d\" + totalAvailNodes +\n                \" reservableNodesRatio\u003d\" + df.format(\n                                        scheduler.getReservableNodesRatio()) +\n                \" numAllowedReservations\u003d\" + numAllowedReservations);\n        return true;\n      }\n    }\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4270. Limit application resource reservation on nodes for non-node/rack specific requests (asuresh)\n",
          "commitDate": "19/10/15 8:00 PM",
          "commitName": "7e2837f830382835838c82398db6fc9823d612a7",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "18/09/15 2:02 PM",
          "commitNameOld": "94dec5a9164cd9bc573fbf74e76bcff9e7c5c637",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 31.25,
          "commitsBetweenForRepo": 225,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,27 @@\n-  private void reserve(Priority priority, FSSchedulerNode node,\n-      Container container, boolean alreadyReserved) {\n-    LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n-        \" app_id\u003d\" + getApplicationId());\n-\n-    if (!alreadyReserved) {\n-      getMetrics().reserveResource(getUser(), container.getResource());\n-      RMContainer rmContainer \u003d\n-          super.reserve(node, priority, null, container);\n-      node.reserveResource(this, priority, rmContainer);\n-    } else {\n-      RMContainer rmContainer \u003d node.getReservedContainer();\n-      super.reserve(node, priority, rmContainer, container);\n-      node.reserveResource(this, priority, rmContainer);\n+  private boolean reservationExceedsThreshold(FSSchedulerNode node,\n+                                                 NodeType type) {\n+    // Only if not node-local\n+    if (type !\u003d NodeType.NODE_LOCAL) {\n+      int existingReservations \u003d getNumReservations(node.getRackName(),\n+              type \u003d\u003d NodeType.OFF_SWITCH);\n+      int totalAvailNodes \u003d\n+              (type \u003d\u003d NodeType.OFF_SWITCH) ? scheduler.getNumClusterNodes() :\n+                      scheduler.getNumNodesInRack(node.getRackName());\n+      int numAllowedReservations \u003d\n+              (int)Math.ceil(\n+                      totalAvailNodes * scheduler.getReservableNodesRatio());\n+      if (existingReservations \u003e\u003d numAllowedReservations) {\n+        DecimalFormat df \u003d new DecimalFormat();\n+        df.setMaximumFractionDigits(2);\n+        LOG.info(\"Reservation Exceeds Allowed number of nodes:\" +\n+                \" app_id\u003d\" + getApplicationId() +\n+                \" existingReservations\u003d\" + existingReservations +\n+                \" totalAvailableNodes\u003d\" + totalAvailNodes +\n+                \" reservableNodesRatio\u003d\" + df.format(\n+                                        scheduler.getReservableNodesRatio()) +\n+                \" numAllowedReservations\u003d\" + numAllowedReservations);\n+        return true;\n+      }\n     }\n+    return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean reservationExceedsThreshold(FSSchedulerNode node,\n                                                 NodeType type) {\n    // Only if not node-local\n    if (type !\u003d NodeType.NODE_LOCAL) {\n      int existingReservations \u003d getNumReservations(node.getRackName(),\n              type \u003d\u003d NodeType.OFF_SWITCH);\n      int totalAvailNodes \u003d\n              (type \u003d\u003d NodeType.OFF_SWITCH) ? scheduler.getNumClusterNodes() :\n                      scheduler.getNumNodesInRack(node.getRackName());\n      int numAllowedReservations \u003d\n              (int)Math.ceil(\n                      totalAvailNodes * scheduler.getReservableNodesRatio());\n      if (existingReservations \u003e\u003d numAllowedReservations) {\n        DecimalFormat df \u003d new DecimalFormat();\n        df.setMaximumFractionDigits(2);\n        LOG.info(\"Reservation Exceeds Allowed number of nodes:\" +\n                \" app_id\u003d\" + getApplicationId() +\n                \" existingReservations\u003d\" + existingReservations +\n                \" totalAvailableNodes\u003d\" + totalAvailNodes +\n                \" reservableNodesRatio\u003d\" + df.format(\n                                        scheduler.getReservableNodesRatio()) +\n                \" numAllowedReservations\u003d\" + numAllowedReservations);\n        return true;\n      }\n    }\n    return false;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "486e718fc1f5befd231494e2ec06bb360484f191": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 2:43 PM",
      "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,16 @@\n+  private void reserve(Priority priority, FSSchedulerNode node,\n+      Container container, boolean alreadyReserved) {\n+    LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n+        \" app_id\u003d\" + getApplicationId());\n+\n+    if (!alreadyReserved) {\n+      getMetrics().reserveResource(getUser(), container.getResource());\n+      RMContainer rmContainer \u003d\n+          super.reserve(node, priority, null, container);\n+      node.reserveResource(this, priority, rmContainer);\n+    } else {\n+      RMContainer rmContainer \u003d node.getReservedContainer();\n+      super.reserve(node, priority, rmContainer, container);\n+      node.reserveResource(this, priority, rmContainer);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void reserve(Priority priority, FSSchedulerNode node,\n      Container container, boolean alreadyReserved) {\n    LOG.info(\"Making reservation: node\u003d\" + node.getNodeName() +\n        \" app_id\u003d\" + getApplicationId());\n\n    if (!alreadyReserved) {\n      getMetrics().reserveResource(getUser(), container.getResource());\n      RMContainer rmContainer \u003d\n          super.reserve(node, priority, null, container);\n      node.reserveResource(this, priority, rmContainer);\n    } else {\n      RMContainer rmContainer \u003d node.getReservedContainer();\n      super.reserve(node, priority, rmContainer, container);\n      node.reserveResource(this, priority, rmContainer);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java"
    }
  }
}