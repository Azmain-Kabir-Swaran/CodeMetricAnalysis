{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerRequestKey.java",
  "functionName": "compareTo",
  "functionId": "compareTo___o-SchedulerRequestKey",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/SchedulerRequestKey.java",
  "functionStartLine": 106,
  "functionEndLine": 139,
  "numCommitsSeen": 8,
  "timeTaken": 3302,
  "changeHistory": [
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
    "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
    "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828"
  ],
  "changeHistoryShort": {
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Ybodychange",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Ybodychange",
    "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8": "Yfilerename",
    "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270": "Ybodychange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/01/17 8:24 AM",
      "commitNameOld": "ac16400e1fb85a4186e5bf5bbc9cf204735ae74f",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 52.09,
      "commitsBetweenForRepo": 266,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,34 @@\n   public int compareTo(SchedulerRequestKey o) {\n     if (o \u003d\u003d null) {\n       return (priority !\u003d null) ? -1 : 0;\n     } else {\n       if (priority \u003d\u003d null) {\n         return 1;\n       }\n     }\n \n     // Ensure updates are ranked higher\n     if (this.containerToUpdate \u003d\u003d null \u0026\u0026 o.containerToUpdate !\u003d null) {\n       return -1;\n     }\n     if (this.containerToUpdate !\u003d null \u0026\u0026 o.containerToUpdate \u003d\u003d null) {\n       return 1;\n     }\n \n     int priorityCompare \u003d o.getPriority().compareTo(priority);\n     // we first sort by priority and then by allocationRequestId\n     if (priorityCompare !\u003d 0) {\n       return priorityCompare;\n     }\n-    return Long.compare(allocationRequestId, o.getAllocationRequestId());\n+    int allocReqCompare \u003d Long.compare(\n+        allocationRequestId, o.getAllocationRequestId());\n+\n+    if (allocReqCompare !\u003d 0) {\n+      return allocReqCompare;\n+    }\n+\n+    if (this.containerToUpdate !\u003d null \u0026\u0026 o.containerToUpdate !\u003d null) {\n+      return (this.containerToUpdate.compareTo(o.containerToUpdate));\n+    }\n+    return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int compareTo(SchedulerRequestKey o) {\n    if (o \u003d\u003d null) {\n      return (priority !\u003d null) ? -1 : 0;\n    } else {\n      if (priority \u003d\u003d null) {\n        return 1;\n      }\n    }\n\n    // Ensure updates are ranked higher\n    if (this.containerToUpdate \u003d\u003d null \u0026\u0026 o.containerToUpdate !\u003d null) {\n      return -1;\n    }\n    if (this.containerToUpdate !\u003d null \u0026\u0026 o.containerToUpdate \u003d\u003d null) {\n      return 1;\n    }\n\n    int priorityCompare \u003d o.getPriority().compareTo(priority);\n    // we first sort by priority and then by allocationRequestId\n    if (priorityCompare !\u003d 0) {\n      return priorityCompare;\n    }\n    int allocReqCompare \u003d Long.compare(\n        allocationRequestId, o.getAllocationRequestId());\n\n    if (allocReqCompare !\u003d 0) {\n      return allocReqCompare;\n    }\n\n    if (this.containerToUpdate !\u003d null \u0026\u0026 o.containerToUpdate !\u003d null) {\n      return (this.containerToUpdate.compareTo(o.containerToUpdate));\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/SchedulerRequestKey.java",
      "extendedDetails": {}
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "27/12/16 12:40 PM",
      "commitNameOld": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 8.91,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,24 @@\n   public int compareTo(SchedulerRequestKey o) {\n     if (o \u003d\u003d null) {\n       return (priority !\u003d null) ? -1 : 0;\n     } else {\n       if (priority \u003d\u003d null) {\n         return 1;\n       }\n     }\n+\n+    // Ensure updates are ranked higher\n+    if (this.containerToUpdate \u003d\u003d null \u0026\u0026 o.containerToUpdate !\u003d null) {\n+      return -1;\n+    }\n+    if (this.containerToUpdate !\u003d null \u0026\u0026 o.containerToUpdate \u003d\u003d null) {\n+      return 1;\n+    }\n+\n     int priorityCompare \u003d o.getPriority().compareTo(priority);\n     // we first sort by priority and then by allocationRequestId\n     if (priorityCompare !\u003d 0) {\n       return priorityCompare;\n     }\n     return Long.compare(allocationRequestId, o.getAllocationRequestId());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int compareTo(SchedulerRequestKey o) {\n    if (o \u003d\u003d null) {\n      return (priority !\u003d null) ? -1 : 0;\n    } else {\n      if (priority \u003d\u003d null) {\n        return 1;\n      }\n    }\n\n    // Ensure updates are ranked higher\n    if (this.containerToUpdate \u003d\u003d null \u0026\u0026 o.containerToUpdate !\u003d null) {\n      return -1;\n    }\n    if (this.containerToUpdate !\u003d null \u0026\u0026 o.containerToUpdate \u003d\u003d null) {\n      return 1;\n    }\n\n    int priorityCompare \u003d o.getPriority().compareTo(priority);\n    // we first sort by priority and then by allocationRequestId\n    if (priorityCompare !\u003d 0) {\n      return priorityCompare;\n    }\n    return Long.compare(allocationRequestId, o.getAllocationRequestId());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/SchedulerRequestKey.java",
      "extendedDetails": {}
    },
    "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5938. Refactoring OpportunisticContainerAllocator to use SchedulerRequestKey instead of Priority and other misc fixes (asuresh)\n",
      "commitDate": "27/12/16 12:40 PM",
      "commitName": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "27/12/16 12:30 PM",
      "commitNameOld": "c3973e7080bf71b57ace4a6adf4bb43f3c5d35b5",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int compareTo(SchedulerRequestKey o) {\n    if (o \u003d\u003d null) {\n      return (priority !\u003d null) ? -1 : 0;\n    } else {\n      if (priority \u003d\u003d null) {\n        return 1;\n      }\n    }\n    int priorityCompare \u003d o.getPriority().compareTo(priority);\n    // we first sort by priority and then by allocationRequestId\n    if (priorityCompare !\u003d 0) {\n      return priorityCompare;\n    }\n    return Long.compare(allocationRequestId, o.getAllocationRequestId());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/SchedulerRequestKey.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerRequestKey.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/SchedulerRequestKey.java"
      }
    },
    "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4888. Changes in scheduler to identify resource-requests explicitly by allocation-id. (Subru Krishnan via wangda)\n",
      "commitDate": "05/08/16 10:43 AM",
      "commitName": "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "26/07/16 2:54 PM",
      "commitNameOld": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 9.83,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,15 @@\n   public int compareTo(SchedulerRequestKey o) {\n     if (o \u003d\u003d null) {\n       return (priority !\u003d null) ? -1 : 0;\n     } else {\n       if (priority \u003d\u003d null) {\n         return 1;\n       }\n     }\n-    return o.getPriority().compareTo(priority);\n+    int priorityCompare \u003d o.getPriority().compareTo(priority);\n+    // we first sort by priority and then by allocationRequestId\n+    if (priorityCompare !\u003d 0) {\n+      return priorityCompare;\n+    }\n+    return Long.compare(allocationRequestId, o.getAllocationRequestId());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int compareTo(SchedulerRequestKey o) {\n    if (o \u003d\u003d null) {\n      return (priority !\u003d null) ? -1 : 0;\n    } else {\n      if (priority \u003d\u003d null) {\n        return 1;\n      }\n    }\n    int priorityCompare \u003d o.getPriority().compareTo(priority);\n    // we first sort by priority and then by allocationRequestId\n    if (priorityCompare !\u003d 0) {\n      return priorityCompare;\n    }\n    return Long.compare(allocationRequestId, o.getAllocationRequestId());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerRequestKey.java",
      "extendedDetails": {}
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,10 @@\n+  public int compareTo(SchedulerRequestKey o) {\n+    if (o \u003d\u003d null) {\n+      return (priority !\u003d null) ? -1 : 0;\n+    } else {\n+      if (priority \u003d\u003d null) {\n+        return 1;\n+      }\n+    }\n+    return o.getPriority().compareTo(priority);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int compareTo(SchedulerRequestKey o) {\n    if (o \u003d\u003d null) {\n      return (priority !\u003d null) ? -1 : 0;\n    } else {\n      if (priority \u003d\u003d null) {\n        return 1;\n      }\n    }\n    return o.getPriority().compareTo(priority);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerRequestKey.java"
    }
  }
}