{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNodeProxiesClient.java",
  "functionName": "createProxyWithAlignmentContext",
  "functionId": "createProxyWithAlignmentContext___address-InetSocketAddress__conf-Configuration__ugi-UserGroupInformation__withRetries-boolean__fallbackToSimpleAuth-AtomicBoolean__alignmentContext-AlignmentContext",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/NameNodeProxiesClient.java",
  "functionStartLine": 352,
  "functionEndLine": 389,
  "numCommitsSeen": 8,
  "timeTaken": 1316,
  "changeHistory": [
    "e880660a204b6fd0e5a0799393a4d36359765a54"
  ],
  "changeHistoryShort": {
    "e880660a204b6fd0e5a0799393a4d36359765a54": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e880660a204b6fd0e5a0799393a4d36359765a54": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13399. [SBN read] Make Client field AlignmentContext non-static. Contributed by Plamen Jeliazkov.",
      "commitDate": "24/12/18 9:33 AM",
      "commitName": "e880660a204b6fd0e5a0799393a4d36359765a54",
      "commitAuthor": "Plamen Jeliazkov",
      "diff": "@@ -0,0 +1,38 @@\n+  public static ClientProtocol createProxyWithAlignmentContext(\n+      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n+      boolean withRetries, AtomicBoolean fallbackToSimpleAuth,\n+      AlignmentContext alignmentContext)\n+      throws IOException {\n+    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class,\n+        ProtobufRpcEngine.class);\n+\n+    final RetryPolicy defaultPolicy \u003d\n+        RetryUtils.getDefaultRetryPolicy(\n+            conf,\n+            HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY,\n+            HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT,\n+            HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n+            HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n+            SafeModeException.class.getName());\n+\n+    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n+    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n+        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n+        NetUtils.getDefaultSocketFactory(conf),\n+        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n+        fallbackToSimpleAuth, alignmentContext).getProxy();\n+\n+    if (withRetries) { // create the proxy with retries\n+      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \u003d new HashMap\u003c\u003e();\n+      ClientProtocol translatorProxy \u003d\n+          new ClientNamenodeProtocolTranslatorPB(proxy);\n+      return (ClientProtocol) RetryProxy.create(\n+          ClientProtocol.class,\n+          new DefaultFailoverProxyProvider\u003c\u003e(ClientProtocol.class,\n+              translatorProxy),\n+          methodNameToPolicyMap,\n+          defaultPolicy);\n+    } else {\n+      return new ClientNamenodeProtocolTranslatorPB(proxy);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static ClientProtocol createProxyWithAlignmentContext(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries, AtomicBoolean fallbackToSimpleAuth,\n      AlignmentContext alignmentContext)\n      throws IOException {\n    RPC.setProtocolEngine(conf, ClientNamenodeProtocolPB.class,\n        ProtobufRpcEngine.class);\n\n    final RetryPolicy defaultPolicy \u003d\n        RetryUtils.getDefaultRetryPolicy(\n            conf,\n            HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY,\n            HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT,\n            HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n            HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n            SafeModeException.class.getName());\n\n    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n        ClientNamenodeProtocolPB.class, version, address, ugi, conf,\n        NetUtils.getDefaultSocketFactory(conf),\n        org.apache.hadoop.ipc.Client.getTimeout(conf), defaultPolicy,\n        fallbackToSimpleAuth, alignmentContext).getProxy();\n\n    if (withRetries) { // create the proxy with retries\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \u003d new HashMap\u003c\u003e();\n      ClientProtocol translatorProxy \u003d\n          new ClientNamenodeProtocolTranslatorPB(proxy);\n      return (ClientProtocol) RetryProxy.create(\n          ClientProtocol.class,\n          new DefaultFailoverProxyProvider\u003c\u003e(ClientProtocol.class,\n              translatorProxy),\n          methodNameToPolicyMap,\n          defaultPolicy);\n    } else {\n      return new ClientNamenodeProtocolTranslatorPB(proxy);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/NameNodeProxiesClient.java"
    }
  }
}