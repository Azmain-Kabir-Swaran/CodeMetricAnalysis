{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "actionDependency",
  "functionId": "actionDependency___destinationFolder-String__overwrite-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 1632,
  "functionEndLine": 1687,
  "numCommitsSeen": 75,
  "timeTaken": 5451,
  "changeHistory": [
    "24eeea8b18749e02ea05b03eb18e3cf0455077c5",
    "a72cdcc47a1b3a4fcadbc9e12bd1bae2bbf04d83",
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "24eeea8b18749e02ea05b03eb18e3cf0455077c5": "Ymultichange(Yexceptionschange,Ybodychange)",
    "a72cdcc47a1b3a4fcadbc9e12bd1bae2bbf04d83": "Ymultichange(Yparameterchange,Ybodychange)",
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": "Ybodychange",
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca": "Ymultichange(Yparameterchange,Ybodychange)",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yfilerename",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ybodychange",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "24eeea8b18749e02ea05b03eb18e3cf0455077c5": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-7799. Improved YARN service jar file handling.\n           Contributed by Billie Rinaldi\n",
      "commitDate": "01/05/18 1:46 PM",
      "commitName": "24eeea8b18749e02ea05b03eb18e3cf0455077c5",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-7799. Improved YARN service jar file handling.\n           Contributed by Billie Rinaldi\n",
          "commitDate": "01/05/18 1:46 PM",
          "commitName": "24eeea8b18749e02ea05b03eb18e3cf0455077c5",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "27/04/18 9:24 AM",
          "commitNameOld": "14b47990af39de71b0a09d995208f45ea3b79c23",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 4.18,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,56 @@\n-  public int actionDependency(String destinationFolder, boolean overwrite)\n-      throws IOException, YarnException {\n+  public int actionDependency(String destinationFolder, boolean overwrite) {\n     String currentUser \u003d RegistryUtils.currentUser();\n     LOG.info(\"Running command as user {}\", currentUser);\n \n+    Path dependencyLibTarGzip;\n     if (destinationFolder \u003d\u003d null) {\n-      destinationFolder \u003d String.format(YarnServiceConstants.DEPENDENCY_DIR,\n-          VersionInfo.getVersion());\n+      dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n+    } else {\n+      dependencyLibTarGzip \u003d new Path(destinationFolder,\n+          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME\n+              + YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n     }\n-    Path dependencyLibTarGzip \u003d new Path(destinationFolder,\n-        YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME\n-            + YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n \n     // Check if dependency has already been uploaded, in which case log\n     // appropriately and exit success (unless overwrite has been requested)\n     if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !overwrite) {\n       System.out.println(String.format(\n           \"Dependency libs are already uploaded to %s.\", dependencyLibTarGzip\n               .toUri()));\n       return EXIT_SUCCESS;\n     }\n \n     String[] libDirs \u003d ServiceUtils.getLibDirs();\n     if (libDirs.length \u003e 0) {\n-      File tempLibTarGzipFile \u003d File.createTempFile(\n-          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n-          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n-      // copy all jars\n-      tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n+      File tempLibTarGzipFile \u003d null;\n+      try {\n+        if (!checkPermissions(dependencyLibTarGzip)) {\n+          return EXIT_UNAUTHORIZED;\n+        }\n \n-      LOG.info(\"Version Info: \" + VersionInfo.getBuildVersion());\n-      fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n-          new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n-      LOG.info(\"To let apps use this tarball, in yarn-site set config property \"\n-          + \"{} to {}\", YarnServiceConf.DEPENDENCY_TARBALL_PATH,\n-          dependencyLibTarGzip);\n-      return EXIT_SUCCESS;\n+        tempLibTarGzipFile \u003d File.createTempFile(\n+            YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n+            YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n+        // copy all jars\n+        tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n+\n+        fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n+            new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n+        LOG.info(\"To let apps use this tarball, in yarn-site set config \" +\n+                \"property {} to {}\", YarnServiceConf.DEPENDENCY_TARBALL_PATH,\n+            dependencyLibTarGzip);\n+        return EXIT_SUCCESS;\n+      } catch (IOException e) {\n+        LOG.error(\"Got exception creating tarball and uploading to HDFS\", e);\n+        return EXIT_EXCEPTION_THROWN;\n+      } finally {\n+        if (tempLibTarGzipFile !\u003d null) {\n+          if (!tempLibTarGzipFile.delete()) {\n+            LOG.warn(\"Failed to delete tmp file {}\", tempLibTarGzipFile);\n+          }\n+        }\n+      }\n     } else {\n       return EXIT_FALSE;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionDependency(String destinationFolder, boolean overwrite) {\n    String currentUser \u003d RegistryUtils.currentUser();\n    LOG.info(\"Running command as user {}\", currentUser);\n\n    Path dependencyLibTarGzip;\n    if (destinationFolder \u003d\u003d null) {\n      dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n    } else {\n      dependencyLibTarGzip \u003d new Path(destinationFolder,\n          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME\n              + YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n    }\n\n    // Check if dependency has already been uploaded, in which case log\n    // appropriately and exit success (unless overwrite has been requested)\n    if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !overwrite) {\n      System.out.println(String.format(\n          \"Dependency libs are already uploaded to %s.\", dependencyLibTarGzip\n              .toUri()));\n      return EXIT_SUCCESS;\n    }\n\n    String[] libDirs \u003d ServiceUtils.getLibDirs();\n    if (libDirs.length \u003e 0) {\n      File tempLibTarGzipFile \u003d null;\n      try {\n        if (!checkPermissions(dependencyLibTarGzip)) {\n          return EXIT_UNAUTHORIZED;\n        }\n\n        tempLibTarGzipFile \u003d File.createTempFile(\n            YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n            YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n        // copy all jars\n        tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n\n        fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n            new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n        LOG.info(\"To let apps use this tarball, in yarn-site set config \" +\n                \"property {} to {}\", YarnServiceConf.DEPENDENCY_TARBALL_PATH,\n            dependencyLibTarGzip);\n        return EXIT_SUCCESS;\n      } catch (IOException e) {\n        LOG.error(\"Got exception creating tarball and uploading to HDFS\", e);\n        return EXIT_EXCEPTION_THROWN;\n      } finally {\n        if (tempLibTarGzipFile !\u003d null) {\n          if (!tempLibTarGzipFile.delete()) {\n            LOG.warn(\"Failed to delete tmp file {}\", tempLibTarGzipFile);\n          }\n        }\n      }\n    } else {\n      return EXIT_FALSE;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[IOException, YarnException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7799. Improved YARN service jar file handling.\n           Contributed by Billie Rinaldi\n",
          "commitDate": "01/05/18 1:46 PM",
          "commitName": "24eeea8b18749e02ea05b03eb18e3cf0455077c5",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "27/04/18 9:24 AM",
          "commitNameOld": "14b47990af39de71b0a09d995208f45ea3b79c23",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 4.18,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,56 @@\n-  public int actionDependency(String destinationFolder, boolean overwrite)\n-      throws IOException, YarnException {\n+  public int actionDependency(String destinationFolder, boolean overwrite) {\n     String currentUser \u003d RegistryUtils.currentUser();\n     LOG.info(\"Running command as user {}\", currentUser);\n \n+    Path dependencyLibTarGzip;\n     if (destinationFolder \u003d\u003d null) {\n-      destinationFolder \u003d String.format(YarnServiceConstants.DEPENDENCY_DIR,\n-          VersionInfo.getVersion());\n+      dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n+    } else {\n+      dependencyLibTarGzip \u003d new Path(destinationFolder,\n+          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME\n+              + YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n     }\n-    Path dependencyLibTarGzip \u003d new Path(destinationFolder,\n-        YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME\n-            + YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n \n     // Check if dependency has already been uploaded, in which case log\n     // appropriately and exit success (unless overwrite has been requested)\n     if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !overwrite) {\n       System.out.println(String.format(\n           \"Dependency libs are already uploaded to %s.\", dependencyLibTarGzip\n               .toUri()));\n       return EXIT_SUCCESS;\n     }\n \n     String[] libDirs \u003d ServiceUtils.getLibDirs();\n     if (libDirs.length \u003e 0) {\n-      File tempLibTarGzipFile \u003d File.createTempFile(\n-          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n-          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n-      // copy all jars\n-      tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n+      File tempLibTarGzipFile \u003d null;\n+      try {\n+        if (!checkPermissions(dependencyLibTarGzip)) {\n+          return EXIT_UNAUTHORIZED;\n+        }\n \n-      LOG.info(\"Version Info: \" + VersionInfo.getBuildVersion());\n-      fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n-          new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n-      LOG.info(\"To let apps use this tarball, in yarn-site set config property \"\n-          + \"{} to {}\", YarnServiceConf.DEPENDENCY_TARBALL_PATH,\n-          dependencyLibTarGzip);\n-      return EXIT_SUCCESS;\n+        tempLibTarGzipFile \u003d File.createTempFile(\n+            YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n+            YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n+        // copy all jars\n+        tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n+\n+        fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n+            new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n+        LOG.info(\"To let apps use this tarball, in yarn-site set config \" +\n+                \"property {} to {}\", YarnServiceConf.DEPENDENCY_TARBALL_PATH,\n+            dependencyLibTarGzip);\n+        return EXIT_SUCCESS;\n+      } catch (IOException e) {\n+        LOG.error(\"Got exception creating tarball and uploading to HDFS\", e);\n+        return EXIT_EXCEPTION_THROWN;\n+      } finally {\n+        if (tempLibTarGzipFile !\u003d null) {\n+          if (!tempLibTarGzipFile.delete()) {\n+            LOG.warn(\"Failed to delete tmp file {}\", tempLibTarGzipFile);\n+          }\n+        }\n+      }\n     } else {\n       return EXIT_FALSE;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionDependency(String destinationFolder, boolean overwrite) {\n    String currentUser \u003d RegistryUtils.currentUser();\n    LOG.info(\"Running command as user {}\", currentUser);\n\n    Path dependencyLibTarGzip;\n    if (destinationFolder \u003d\u003d null) {\n      dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n    } else {\n      dependencyLibTarGzip \u003d new Path(destinationFolder,\n          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME\n              + YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n    }\n\n    // Check if dependency has already been uploaded, in which case log\n    // appropriately and exit success (unless overwrite has been requested)\n    if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !overwrite) {\n      System.out.println(String.format(\n          \"Dependency libs are already uploaded to %s.\", dependencyLibTarGzip\n              .toUri()));\n      return EXIT_SUCCESS;\n    }\n\n    String[] libDirs \u003d ServiceUtils.getLibDirs();\n    if (libDirs.length \u003e 0) {\n      File tempLibTarGzipFile \u003d null;\n      try {\n        if (!checkPermissions(dependencyLibTarGzip)) {\n          return EXIT_UNAUTHORIZED;\n        }\n\n        tempLibTarGzipFile \u003d File.createTempFile(\n            YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n            YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n        // copy all jars\n        tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n\n        fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n            new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n        LOG.info(\"To let apps use this tarball, in yarn-site set config \" +\n                \"property {} to {}\", YarnServiceConf.DEPENDENCY_TARBALL_PATH,\n            dependencyLibTarGzip);\n        return EXIT_SUCCESS;\n      } catch (IOException e) {\n        LOG.error(\"Got exception creating tarball and uploading to HDFS\", e);\n        return EXIT_EXCEPTION_THROWN;\n      } finally {\n        if (tempLibTarGzipFile !\u003d null) {\n          if (!tempLibTarGzipFile.delete()) {\n            LOG.warn(\"Failed to delete tmp file {}\", tempLibTarGzipFile);\n          }\n        }\n      }\n    } else {\n      return EXIT_FALSE;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "a72cdcc47a1b3a4fcadbc9e12bd1bae2bbf04d83": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7766. Introduce a new config property for YARN Service dependency tarball location. Contributed by Gour Saha\n",
      "commitDate": "23/01/18 10:53 AM",
      "commitName": "a72cdcc47a1b3a4fcadbc9e12bd1bae2bbf04d83",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7766. Introduce a new config property for YARN Service dependency tarball location. Contributed by Gour Saha\n",
          "commitDate": "23/01/18 10:53 AM",
          "commitName": "a72cdcc47a1b3a4fcadbc9e12bd1bae2bbf04d83",
          "commitAuthor": "Jian He",
          "commitDateOld": "18/01/18 12:11 PM",
          "commitNameOld": "37f4696a9cc9284b242215f56a10990e1028d40c",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 4.95,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,41 @@\n-  public int actionDependency(boolean overwrite)\n+  public int actionDependency(String destinationFolder, boolean overwrite)\n       throws IOException, YarnException {\n     String currentUser \u003d RegistryUtils.currentUser();\n     LOG.info(\"Running command as user {}\", currentUser);\n \n-    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n+    if (destinationFolder \u003d\u003d null) {\n+      destinationFolder \u003d String.format(YarnServiceConstants.DEPENDENCY_DIR,\n+          VersionInfo.getVersion());\n+    }\n+    Path dependencyLibTarGzip \u003d new Path(destinationFolder,\n+        YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME\n+            + YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n \n     // Check if dependency has already been uploaded, in which case log\n     // appropriately and exit success (unless overwrite has been requested)\n     if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !overwrite) {\n       System.out.println(String.format(\n           \"Dependency libs are already uploaded to %s.\", dependencyLibTarGzip\n               .toUri()));\n       return EXIT_SUCCESS;\n     }\n \n     String[] libDirs \u003d ServiceUtils.getLibDirs();\n     if (libDirs.length \u003e 0) {\n       File tempLibTarGzipFile \u003d File.createTempFile(\n           YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n           YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n       // copy all jars\n       tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n \n       LOG.info(\"Version Info: \" + VersionInfo.getBuildVersion());\n       fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n           new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n+      LOG.info(\"To let apps use this tarball, in yarn-site set config property \"\n+          + \"{} to {}\", YarnServiceConf.DEPENDENCY_TARBALL_PATH,\n+          dependencyLibTarGzip);\n       return EXIT_SUCCESS;\n     } else {\n       return EXIT_FALSE;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionDependency(String destinationFolder, boolean overwrite)\n      throws IOException, YarnException {\n    String currentUser \u003d RegistryUtils.currentUser();\n    LOG.info(\"Running command as user {}\", currentUser);\n\n    if (destinationFolder \u003d\u003d null) {\n      destinationFolder \u003d String.format(YarnServiceConstants.DEPENDENCY_DIR,\n          VersionInfo.getVersion());\n    }\n    Path dependencyLibTarGzip \u003d new Path(destinationFolder,\n        YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME\n            + YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n\n    // Check if dependency has already been uploaded, in which case log\n    // appropriately and exit success (unless overwrite has been requested)\n    if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !overwrite) {\n      System.out.println(String.format(\n          \"Dependency libs are already uploaded to %s.\", dependencyLibTarGzip\n              .toUri()));\n      return EXIT_SUCCESS;\n    }\n\n    String[] libDirs \u003d ServiceUtils.getLibDirs();\n    if (libDirs.length \u003e 0) {\n      File tempLibTarGzipFile \u003d File.createTempFile(\n          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n      // copy all jars\n      tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n\n      LOG.info(\"Version Info: \" + VersionInfo.getBuildVersion());\n      fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n          new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n      LOG.info(\"To let apps use this tarball, in yarn-site set config property \"\n          + \"{} to {}\", YarnServiceConf.DEPENDENCY_TARBALL_PATH,\n          dependencyLibTarGzip);\n      return EXIT_SUCCESS;\n    } else {\n      return EXIT_FALSE;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[overwrite-boolean]",
            "newValue": "[destinationFolder-String, overwrite-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7766. Introduce a new config property for YARN Service dependency tarball location. Contributed by Gour Saha\n",
          "commitDate": "23/01/18 10:53 AM",
          "commitName": "a72cdcc47a1b3a4fcadbc9e12bd1bae2bbf04d83",
          "commitAuthor": "Jian He",
          "commitDateOld": "18/01/18 12:11 PM",
          "commitNameOld": "37f4696a9cc9284b242215f56a10990e1028d40c",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 4.95,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,41 @@\n-  public int actionDependency(boolean overwrite)\n+  public int actionDependency(String destinationFolder, boolean overwrite)\n       throws IOException, YarnException {\n     String currentUser \u003d RegistryUtils.currentUser();\n     LOG.info(\"Running command as user {}\", currentUser);\n \n-    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n+    if (destinationFolder \u003d\u003d null) {\n+      destinationFolder \u003d String.format(YarnServiceConstants.DEPENDENCY_DIR,\n+          VersionInfo.getVersion());\n+    }\n+    Path dependencyLibTarGzip \u003d new Path(destinationFolder,\n+        YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME\n+            + YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n \n     // Check if dependency has already been uploaded, in which case log\n     // appropriately and exit success (unless overwrite has been requested)\n     if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !overwrite) {\n       System.out.println(String.format(\n           \"Dependency libs are already uploaded to %s.\", dependencyLibTarGzip\n               .toUri()));\n       return EXIT_SUCCESS;\n     }\n \n     String[] libDirs \u003d ServiceUtils.getLibDirs();\n     if (libDirs.length \u003e 0) {\n       File tempLibTarGzipFile \u003d File.createTempFile(\n           YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n           YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n       // copy all jars\n       tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n \n       LOG.info(\"Version Info: \" + VersionInfo.getBuildVersion());\n       fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n           new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n+      LOG.info(\"To let apps use this tarball, in yarn-site set config property \"\n+          + \"{} to {}\", YarnServiceConf.DEPENDENCY_TARBALL_PATH,\n+          dependencyLibTarGzip);\n       return EXIT_SUCCESS;\n     } else {\n       return EXIT_FALSE;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionDependency(String destinationFolder, boolean overwrite)\n      throws IOException, YarnException {\n    String currentUser \u003d RegistryUtils.currentUser();\n    LOG.info(\"Running command as user {}\", currentUser);\n\n    if (destinationFolder \u003d\u003d null) {\n      destinationFolder \u003d String.format(YarnServiceConstants.DEPENDENCY_DIR,\n          VersionInfo.getVersion());\n    }\n    Path dependencyLibTarGzip \u003d new Path(destinationFolder,\n        YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME\n            + YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n\n    // Check if dependency has already been uploaded, in which case log\n    // appropriately and exit success (unless overwrite has been requested)\n    if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !overwrite) {\n      System.out.println(String.format(\n          \"Dependency libs are already uploaded to %s.\", dependencyLibTarGzip\n              .toUri()));\n      return EXIT_SUCCESS;\n    }\n\n    String[] libDirs \u003d ServiceUtils.getLibDirs();\n    if (libDirs.length \u003e 0) {\n      File tempLibTarGzipFile \u003d File.createTempFile(\n          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n      // copy all jars\n      tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n\n      LOG.info(\"Version Info: \" + VersionInfo.getBuildVersion());\n      fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n          new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n      LOG.info(\"To let apps use this tarball, in yarn-site set config property \"\n          + \"{} to {}\", YarnServiceConf.DEPENDENCY_TARBALL_PATH,\n          dependencyLibTarGzip);\n      return EXIT_SUCCESS;\n    } else {\n      return EXIT_FALSE;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7423. Improve service client loggings. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public int actionDependency(boolean overwrite)\n       throws IOException, YarnException {\n     String currentUser \u003d RegistryUtils.currentUser();\n     LOG.info(\"Running command as user {}\", currentUser);\n \n     Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n \n     // Check if dependency has already been uploaded, in which case log\n     // appropriately and exit success (unless overwrite has been requested)\n     if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !overwrite) {\n       System.out.println(String.format(\n           \"Dependency libs are already uploaded to %s.\", dependencyLibTarGzip\n               .toUri()));\n       return EXIT_SUCCESS;\n     }\n \n-    String[] libDirs \u003d SliderUtils.getLibDirs();\n+    String[] libDirs \u003d ServiceUtils.getLibDirs();\n     if (libDirs.length \u003e 0) {\n       File tempLibTarGzipFile \u003d File.createTempFile(\n           YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n           YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n       // copy all jars\n       tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n \n       LOG.info(\"Version Info: \" + VersionInfo.getBuildVersion());\n       fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n           new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n       return EXIT_SUCCESS;\n     } else {\n       return EXIT_FALSE;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionDependency(boolean overwrite)\n      throws IOException, YarnException {\n    String currentUser \u003d RegistryUtils.currentUser();\n    LOG.info(\"Running command as user {}\", currentUser);\n\n    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n\n    // Check if dependency has already been uploaded, in which case log\n    // appropriately and exit success (unless overwrite has been requested)\n    if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !overwrite) {\n      System.out.println(String.format(\n          \"Dependency libs are already uploaded to %s.\", dependencyLibTarGzip\n              .toUri()));\n      return EXIT_SUCCESS;\n    }\n\n    String[] libDirs \u003d ServiceUtils.getLibDirs();\n    if (libDirs.length \u003e 0) {\n      File tempLibTarGzipFile \u003d File.createTempFile(\n          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n      // copy all jars\n      tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n\n      LOG.info(\"Version Info: \" + VersionInfo.getBuildVersion());\n      fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n          new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n      return EXIT_SUCCESS;\n    } else {\n      return EXIT_FALSE;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,32 @@\n-  public int actionDependency(ActionDependencyArgs args)\n+  public int actionDependency(boolean overwrite)\n       throws IOException, YarnException {\n     String currentUser \u003d RegistryUtils.currentUser();\n     LOG.info(\"Running command as user {}\", currentUser);\n \n     Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n \n     // Check if dependency has already been uploaded, in which case log\n     // appropriately and exit success (unless overwrite has been requested)\n-    if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !args.overwrite) {\n+    if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !overwrite) {\n       System.out.println(String.format(\n-          \"Dependency libs are already uploaded to %s. Use %s \"\n-              + \"if you want to re-upload\", dependencyLibTarGzip.toUri(),\n-          Arguments.ARG_OVERWRITE));\n+          \"Dependency libs are already uploaded to %s.\", dependencyLibTarGzip\n+              .toUri()));\n       return EXIT_SUCCESS;\n     }\n \n     String[] libDirs \u003d SliderUtils.getLibDirs();\n     if (libDirs.length \u003e 0) {\n       File tempLibTarGzipFile \u003d File.createTempFile(\n           YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n           YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n       // copy all jars\n       tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n \n       LOG.info(\"Version Info: \" + VersionInfo.getBuildVersion());\n       fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n           new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n       return EXIT_SUCCESS;\n     } else {\n       return EXIT_FALSE;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionDependency(boolean overwrite)\n      throws IOException, YarnException {\n    String currentUser \u003d RegistryUtils.currentUser();\n    LOG.info(\"Running command as user {}\", currentUser);\n\n    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n\n    // Check if dependency has already been uploaded, in which case log\n    // appropriately and exit success (unless overwrite has been requested)\n    if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !overwrite) {\n      System.out.println(String.format(\n          \"Dependency libs are already uploaded to %s.\", dependencyLibTarGzip\n              .toUri()));\n      return EXIT_SUCCESS;\n    }\n\n    String[] libDirs \u003d SliderUtils.getLibDirs();\n    if (libDirs.length \u003e 0) {\n      File tempLibTarGzipFile \u003d File.createTempFile(\n          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n      // copy all jars\n      tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n\n      LOG.info(\"Version Info: \" + VersionInfo.getBuildVersion());\n      fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n          new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n      return EXIT_SUCCESS;\n    } else {\n      return EXIT_FALSE;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[args-ActionDependencyArgs]",
            "newValue": "[overwrite-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,32 @@\n-  public int actionDependency(ActionDependencyArgs args)\n+  public int actionDependency(boolean overwrite)\n       throws IOException, YarnException {\n     String currentUser \u003d RegistryUtils.currentUser();\n     LOG.info(\"Running command as user {}\", currentUser);\n \n     Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n \n     // Check if dependency has already been uploaded, in which case log\n     // appropriately and exit success (unless overwrite has been requested)\n-    if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !args.overwrite) {\n+    if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !overwrite) {\n       System.out.println(String.format(\n-          \"Dependency libs are already uploaded to %s. Use %s \"\n-              + \"if you want to re-upload\", dependencyLibTarGzip.toUri(),\n-          Arguments.ARG_OVERWRITE));\n+          \"Dependency libs are already uploaded to %s.\", dependencyLibTarGzip\n+              .toUri()));\n       return EXIT_SUCCESS;\n     }\n \n     String[] libDirs \u003d SliderUtils.getLibDirs();\n     if (libDirs.length \u003e 0) {\n       File tempLibTarGzipFile \u003d File.createTempFile(\n           YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n           YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n       // copy all jars\n       tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n \n       LOG.info(\"Version Info: \" + VersionInfo.getBuildVersion());\n       fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n           new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n       return EXIT_SUCCESS;\n     } else {\n       return EXIT_FALSE;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionDependency(boolean overwrite)\n      throws IOException, YarnException {\n    String currentUser \u003d RegistryUtils.currentUser();\n    LOG.info(\"Running command as user {}\", currentUser);\n\n    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n\n    // Check if dependency has already been uploaded, in which case log\n    // appropriately and exit success (unless overwrite has been requested)\n    if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !overwrite) {\n      System.out.println(String.format(\n          \"Dependency libs are already uploaded to %s.\", dependencyLibTarGzip\n              .toUri()));\n      return EXIT_SUCCESS;\n    }\n\n    String[] libDirs \u003d SliderUtils.getLibDirs();\n    if (libDirs.length \u003e 0) {\n      File tempLibTarGzipFile \u003d File.createTempFile(\n          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n      // copy all jars\n      tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n\n      LOG.info(\"Version Info: \" + VersionInfo.getBuildVersion());\n      fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n          new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n      return EXIT_SUCCESS;\n    } else {\n      return EXIT_FALSE;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int actionDependency(ActionDependencyArgs args)\n      throws IOException, YarnException {\n    String currentUser \u003d RegistryUtils.currentUser();\n    LOG.info(\"Running command as user {}\", currentUser);\n\n    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n\n    // Check if dependency has already been uploaded, in which case log\n    // appropriately and exit success (unless overwrite has been requested)\n    if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !args.overwrite) {\n      System.out.println(String.format(\n          \"Dependency libs are already uploaded to %s. Use %s \"\n              + \"if you want to re-upload\", dependencyLibTarGzip.toUri(),\n          Arguments.ARG_OVERWRITE));\n      return EXIT_SUCCESS;\n    }\n\n    String[] libDirs \u003d SliderUtils.getLibDirs();\n    if (libDirs.length \u003e 0) {\n      File tempLibTarGzipFile \u003d File.createTempFile(\n          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n      // copy all jars\n      tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n\n      LOG.info(\"Version Info: \" + VersionInfo.getBuildVersion());\n      fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n          new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n      return EXIT_SUCCESS;\n    } else {\n      return EXIT_FALSE;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
      }
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,33 @@\n   public int actionDependency(ActionDependencyArgs args)\n       throws IOException, YarnException {\n     String currentUser \u003d RegistryUtils.currentUser();\n     LOG.info(\"Running command as user {}\", currentUser);\n \n     Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n \n     // Check if dependency has already been uploaded, in which case log\n     // appropriately and exit success (unless overwrite has been requested)\n     if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !args.overwrite) {\n       System.out.println(String.format(\n           \"Dependency libs are already uploaded to %s. Use %s \"\n               + \"if you want to re-upload\", dependencyLibTarGzip.toUri(),\n           Arguments.ARG_OVERWRITE));\n       return EXIT_SUCCESS;\n     }\n \n     String[] libDirs \u003d SliderUtils.getLibDirs();\n     if (libDirs.length \u003e 0) {\n       File tempLibTarGzipFile \u003d File.createTempFile(\n-          SliderKeys.SLIDER_DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n-          SliderKeys.SLIDER_DEPENDENCY_TAR_GZ_FILE_EXT);\n+          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n+          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n       // copy all jars\n       tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n \n-      LOG.info(\"Uploading dependency for AM (version {}) from {} to {}\",\n-          VersionInfo.getBuildVersion(), tempLibTarGzipFile.toURI(),\n-          dependencyLibTarGzip.toUri());\n+      LOG.info(\"Version Info: \" + VersionInfo.getBuildVersion());\n       fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n-          new FsPermission(SliderKeys.SLIDER_DEPENDENCY_DIR_PERMISSIONS));\n+          new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n       return EXIT_SUCCESS;\n     } else {\n       return EXIT_FALSE;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionDependency(ActionDependencyArgs args)\n      throws IOException, YarnException {\n    String currentUser \u003d RegistryUtils.currentUser();\n    LOG.info(\"Running command as user {}\", currentUser);\n\n    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n\n    // Check if dependency has already been uploaded, in which case log\n    // appropriately and exit success (unless overwrite has been requested)\n    if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !args.overwrite) {\n      System.out.println(String.format(\n          \"Dependency libs are already uploaded to %s. Use %s \"\n              + \"if you want to re-upload\", dependencyLibTarGzip.toUri(),\n          Arguments.ARG_OVERWRITE));\n      return EXIT_SUCCESS;\n    }\n\n    String[] libDirs \u003d SliderUtils.getLibDirs();\n    if (libDirs.length \u003e 0) {\n      File tempLibTarGzipFile \u003d File.createTempFile(\n          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n          YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\n      // copy all jars\n      tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n\n      LOG.info(\"Version Info: \" + VersionInfo.getBuildVersion());\n      fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n          new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\n      return EXIT_SUCCESS;\n    } else {\n      return EXIT_FALSE;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,35 @@\n+  public int actionDependency(ActionDependencyArgs args)\n+      throws IOException, YarnException {\n+    String currentUser \u003d RegistryUtils.currentUser();\n+    LOG.info(\"Running command as user {}\", currentUser);\n+\n+    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n+\n+    // Check if dependency has already been uploaded, in which case log\n+    // appropriately and exit success (unless overwrite has been requested)\n+    if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !args.overwrite) {\n+      System.out.println(String.format(\n+          \"Dependency libs are already uploaded to %s. Use %s \"\n+              + \"if you want to re-upload\", dependencyLibTarGzip.toUri(),\n+          Arguments.ARG_OVERWRITE));\n+      return EXIT_SUCCESS;\n+    }\n+\n+    String[] libDirs \u003d SliderUtils.getLibDirs();\n+    if (libDirs.length \u003e 0) {\n+      File tempLibTarGzipFile \u003d File.createTempFile(\n+          SliderKeys.SLIDER_DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n+          SliderKeys.SLIDER_DEPENDENCY_TAR_GZ_FILE_EXT);\n+      // copy all jars\n+      tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n+\n+      LOG.info(\"Uploading dependency for AM (version {}) from {} to {}\",\n+          VersionInfo.getBuildVersion(), tempLibTarGzipFile.toURI(),\n+          dependencyLibTarGzip.toUri());\n+      fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n+          new FsPermission(SliderKeys.SLIDER_DEPENDENCY_DIR_PERMISSIONS));\n+      return EXIT_SUCCESS;\n+    } else {\n+      return EXIT_FALSE;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionDependency(ActionDependencyArgs args)\n      throws IOException, YarnException {\n    String currentUser \u003d RegistryUtils.currentUser();\n    LOG.info(\"Running command as user {}\", currentUser);\n\n    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n\n    // Check if dependency has already been uploaded, in which case log\n    // appropriately and exit success (unless overwrite has been requested)\n    if (fs.isFile(dependencyLibTarGzip) \u0026\u0026 !args.overwrite) {\n      System.out.println(String.format(\n          \"Dependency libs are already uploaded to %s. Use %s \"\n              + \"if you want to re-upload\", dependencyLibTarGzip.toUri(),\n          Arguments.ARG_OVERWRITE));\n      return EXIT_SUCCESS;\n    }\n\n    String[] libDirs \u003d SliderUtils.getLibDirs();\n    if (libDirs.length \u003e 0) {\n      File tempLibTarGzipFile \u003d File.createTempFile(\n          SliderKeys.SLIDER_DEPENDENCY_TAR_GZ_FILE_NAME + \"_\",\n          SliderKeys.SLIDER_DEPENDENCY_TAR_GZ_FILE_EXT);\n      // copy all jars\n      tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\n\n      LOG.info(\"Uploading dependency for AM (version {}) from {} to {}\",\n          VersionInfo.getBuildVersion(), tempLibTarGzipFile.toURI(),\n          dependencyLibTarGzip.toUri());\n      fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip,\n          new FsPermission(SliderKeys.SLIDER_DEPENDENCY_DIR_PERMISSIONS));\n      return EXIT_SUCCESS;\n    } else {\n      return EXIT_FALSE;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}