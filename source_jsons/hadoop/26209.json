{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TaskHeartbeatHandler.java",
  "functionName": "checkRunning",
  "functionId": "checkRunning___currentTime-long",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/TaskHeartbeatHandler.java",
  "functionStartLine": 185,
  "functionEndLine": 213,
  "numCommitsSeen": 15,
  "timeTaken": 1769,
  "changeHistory": [
    "5565f2c532f5a2bee6999155672dce8bf3179519",
    "13a21f66078c91df97088b01f49a5919895f7110",
    "82f029f7b50679ea477a3a898e4ee400fa394adf"
  ],
  "changeHistoryShort": {
    "5565f2c532f5a2bee6999155672dce8bf3179519": "Ybodychange",
    "13a21f66078c91df97088b01f49a5919895f7110": "Ybodychange",
    "82f029f7b50679ea477a3a898e4ee400fa394adf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5565f2c532f5a2bee6999155672dce8bf3179519": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7198. mapreduce.task.timeout\u003d0 configuration used to disable timeout doesn\u0027t work.\n",
      "commitDate": "22/05/19 6:21 PM",
      "commitName": "5565f2c532f5a2bee6999155672dce8bf3179519",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "28/11/18 12:57 AM",
      "commitNameOld": "13a21f66078c91df97088b01f49a5919895f7110",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 175.68,
      "commitsBetweenForRepo": 1194,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n     private void checkRunning(long currentTime) {\n       Iterator\u003cMap.Entry\u003cTaskAttemptId, ReportTime\u003e\u003e iterator \u003d\n           runningAttempts.entrySet().iterator();\n \n       while (iterator.hasNext()) {\n         Map.Entry\u003cTaskAttemptId, ReportTime\u003e entry \u003d iterator.next();\n         boolean taskTimedOut \u003d (taskTimeOut \u003e 0) \u0026\u0026\n             (currentTime \u003e (entry.getValue().getLastProgress() + taskTimeOut));\n         // when container in NM not started in a long time,\n         // we think the taskAttempt is stuck\n-        boolean taskStuck \u003d (!entry.getValue().isReported()) \u0026\u0026\n+        boolean taskStuck \u003d (taskStuckTimeOut \u003e 0) \u0026\u0026\n+            (!entry.getValue().isReported()) \u0026\u0026\n             (currentTime \u003e\n                 (entry.getValue().getLastProgress() + taskStuckTimeOut));\n \n         if(taskTimedOut || taskStuck) {\n           // task is lost, remove from the list and raise lost event\n           iterator.remove();\n           eventHandler.handle(new TaskAttemptDiagnosticsUpdateEvent(entry\n               .getKey(), \"AttemptID:\" + entry.getKey().toString()\n               + \" task timeout set: \" + taskTimeOut / 1000 + \"s,\"\n               + \" taskTimedOut: \" + taskTimedOut + \";\"\n               + \" task stuck timeout set: \" + taskStuckTimeOut / 1000 + \"s,\"\n               + \" taskStuck: \" + taskStuck));\n           eventHandler.handle(new TaskAttemptEvent(entry.getKey(),\n               TaskAttemptEventType.TA_TIMED_OUT));\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkRunning(long currentTime) {\n      Iterator\u003cMap.Entry\u003cTaskAttemptId, ReportTime\u003e\u003e iterator \u003d\n          runningAttempts.entrySet().iterator();\n\n      while (iterator.hasNext()) {\n        Map.Entry\u003cTaskAttemptId, ReportTime\u003e entry \u003d iterator.next();\n        boolean taskTimedOut \u003d (taskTimeOut \u003e 0) \u0026\u0026\n            (currentTime \u003e (entry.getValue().getLastProgress() + taskTimeOut));\n        // when container in NM not started in a long time,\n        // we think the taskAttempt is stuck\n        boolean taskStuck \u003d (taskStuckTimeOut \u003e 0) \u0026\u0026\n            (!entry.getValue().isReported()) \u0026\u0026\n            (currentTime \u003e\n                (entry.getValue().getLastProgress() + taskStuckTimeOut));\n\n        if(taskTimedOut || taskStuck) {\n          // task is lost, remove from the list and raise lost event\n          iterator.remove();\n          eventHandler.handle(new TaskAttemptDiagnosticsUpdateEvent(entry\n              .getKey(), \"AttemptID:\" + entry.getKey().toString()\n              + \" task timeout set: \" + taskTimeOut / 1000 + \"s,\"\n              + \" taskTimedOut: \" + taskTimedOut + \";\"\n              + \" task stuck timeout set: \" + taskStuckTimeOut / 1000 + \"s,\"\n              + \" taskStuck: \" + taskStuck));\n          eventHandler.handle(new TaskAttemptEvent(entry.getKey(),\n              TaskAttemptEventType.TA_TIMED_OUT));\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/TaskHeartbeatHandler.java",
      "extendedDetails": {}
    },
    "13a21f66078c91df97088b01f49a5919895f7110": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6190. If a task stucks before its first heartbeat, it never timeouts and the MR job becomes stuck. Contributed by Zhaohui Xin.\n",
      "commitDate": "28/11/18 12:57 AM",
      "commitName": "13a21f66078c91df97088b01f49a5919895f7110",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "16/02/18 6:15 AM",
      "commitNameOld": "82f029f7b50679ea477a3a898e4ee400fa394adf",
      "commitAuthorOld": "Eric Payne",
      "daysBetweenCommits": 284.78,
      "commitsBetweenForRepo": 2828,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,28 @@\n     private void checkRunning(long currentTime) {\n       Iterator\u003cMap.Entry\u003cTaskAttemptId, ReportTime\u003e\u003e iterator \u003d\n           runningAttempts.entrySet().iterator();\n \n       while (iterator.hasNext()) {\n         Map.Entry\u003cTaskAttemptId, ReportTime\u003e entry \u003d iterator.next();\n         boolean taskTimedOut \u003d (taskTimeOut \u003e 0) \u0026\u0026\n             (currentTime \u003e (entry.getValue().getLastProgress() + taskTimeOut));\n+        // when container in NM not started in a long time,\n+        // we think the taskAttempt is stuck\n+        boolean taskStuck \u003d (!entry.getValue().isReported()) \u0026\u0026\n+            (currentTime \u003e\n+                (entry.getValue().getLastProgress() + taskStuckTimeOut));\n \n-        if(taskTimedOut) {\n+        if(taskTimedOut || taskStuck) {\n           // task is lost, remove from the list and raise lost event\n           iterator.remove();\n           eventHandler.handle(new TaskAttemptDiagnosticsUpdateEvent(entry\n               .getKey(), \"AttemptID:\" + entry.getKey().toString()\n-              + \" Timed out after \" + taskTimeOut / 1000 + \" secs\"));\n+              + \" task timeout set: \" + taskTimeOut / 1000 + \"s,\"\n+              + \" taskTimedOut: \" + taskTimedOut + \";\"\n+              + \" task stuck timeout set: \" + taskStuckTimeOut / 1000 + \"s,\"\n+              + \" taskStuck: \" + taskStuck));\n           eventHandler.handle(new TaskAttemptEvent(entry.getKey(),\n               TaskAttemptEventType.TA_TIMED_OUT));\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkRunning(long currentTime) {\n      Iterator\u003cMap.Entry\u003cTaskAttemptId, ReportTime\u003e\u003e iterator \u003d\n          runningAttempts.entrySet().iterator();\n\n      while (iterator.hasNext()) {\n        Map.Entry\u003cTaskAttemptId, ReportTime\u003e entry \u003d iterator.next();\n        boolean taskTimedOut \u003d (taskTimeOut \u003e 0) \u0026\u0026\n            (currentTime \u003e (entry.getValue().getLastProgress() + taskTimeOut));\n        // when container in NM not started in a long time,\n        // we think the taskAttempt is stuck\n        boolean taskStuck \u003d (!entry.getValue().isReported()) \u0026\u0026\n            (currentTime \u003e\n                (entry.getValue().getLastProgress() + taskStuckTimeOut));\n\n        if(taskTimedOut || taskStuck) {\n          // task is lost, remove from the list and raise lost event\n          iterator.remove();\n          eventHandler.handle(new TaskAttemptDiagnosticsUpdateEvent(entry\n              .getKey(), \"AttemptID:\" + entry.getKey().toString()\n              + \" task timeout set: \" + taskTimeOut / 1000 + \"s,\"\n              + \" taskTimedOut: \" + taskTimedOut + \";\"\n              + \" task stuck timeout set: \" + taskStuckTimeOut / 1000 + \"s,\"\n              + \" taskStuck: \" + taskStuck));\n          eventHandler.handle(new TaskAttemptEvent(entry.getKey(),\n              TaskAttemptEventType.TA_TIMED_OUT));\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/TaskHeartbeatHandler.java",
      "extendedDetails": {}
    },
    "82f029f7b50679ea477a3a898e4ee400fa394adf": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-7053: Timed out tasks can fail to produce thread dump. Contributed by Jason Lowe.\n",
      "commitDate": "16/02/18 6:15 AM",
      "commitName": "82f029f7b50679ea477a3a898e4ee400fa394adf",
      "commitAuthor": "Eric Payne",
      "diff": "@@ -0,0 +1,20 @@\n+    private void checkRunning(long currentTime) {\n+      Iterator\u003cMap.Entry\u003cTaskAttemptId, ReportTime\u003e\u003e iterator \u003d\n+          runningAttempts.entrySet().iterator();\n+\n+      while (iterator.hasNext()) {\n+        Map.Entry\u003cTaskAttemptId, ReportTime\u003e entry \u003d iterator.next();\n+        boolean taskTimedOut \u003d (taskTimeOut \u003e 0) \u0026\u0026\n+            (currentTime \u003e (entry.getValue().getLastProgress() + taskTimeOut));\n+\n+        if(taskTimedOut) {\n+          // task is lost, remove from the list and raise lost event\n+          iterator.remove();\n+          eventHandler.handle(new TaskAttemptDiagnosticsUpdateEvent(entry\n+              .getKey(), \"AttemptID:\" + entry.getKey().toString()\n+              + \" Timed out after \" + taskTimeOut / 1000 + \" secs\"));\n+          eventHandler.handle(new TaskAttemptEvent(entry.getKey(),\n+              TaskAttemptEventType.TA_TIMED_OUT));\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkRunning(long currentTime) {\n      Iterator\u003cMap.Entry\u003cTaskAttemptId, ReportTime\u003e\u003e iterator \u003d\n          runningAttempts.entrySet().iterator();\n\n      while (iterator.hasNext()) {\n        Map.Entry\u003cTaskAttemptId, ReportTime\u003e entry \u003d iterator.next();\n        boolean taskTimedOut \u003d (taskTimeOut \u003e 0) \u0026\u0026\n            (currentTime \u003e (entry.getValue().getLastProgress() + taskTimeOut));\n\n        if(taskTimedOut) {\n          // task is lost, remove from the list and raise lost event\n          iterator.remove();\n          eventHandler.handle(new TaskAttemptDiagnosticsUpdateEvent(entry\n              .getKey(), \"AttemptID:\" + entry.getKey().toString()\n              + \" Timed out after \" + taskTimeOut / 1000 + \" secs\"));\n          eventHandler.handle(new TaskAttemptEvent(entry.getKey(),\n              TaskAttemptEventType.TA_TIMED_OUT));\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/TaskHeartbeatHandler.java"
    }
  }
}