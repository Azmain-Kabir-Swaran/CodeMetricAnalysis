{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "addCredentials",
  "functionId": "addCredentials___amContext-ContainerLaunchContext__app-Service",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 1421,
  "functionEndLine": 1453,
  "numCommitsSeen": 53,
  "timeTaken": 1519,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "28/11/18 5:34 PM",
      "commitNameOld": "efc4d91cbeab8a13f6d61cb0e56443adb2d77559",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 106.91,
      "commitsBetweenForRepo": 783,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   private void addCredentials(ContainerLaunchContext amContext, Service app)\n       throws IOException {\n     Credentials allCreds \u003d new Credentials();\n     // HDFS DT\n     if (UserGroupInformation.isSecurityEnabled()) {\n       String tokenRenewer \u003d YarnClientUtils.getRmPrincipal(getConfig());\n       if (StringUtils.isEmpty(tokenRenewer)) {\n         throw new IOException(\n             \"Can\u0027t get Master Kerberos principal for the RM to use as renewer\");\n       }\n       final org.apache.hadoop.security.token.Token\u003c?\u003e[] tokens \u003d\n           fs.getFileSystem().addDelegationTokens(tokenRenewer, allCreds);\n       if (LOG.isDebugEnabled()) {\n         if (tokens !\u003d null \u0026\u0026 tokens.length !\u003d 0) {\n           for (Token\u003c?\u003e token : tokens) {\n-            LOG.debug(\"Got DT: \" + token);\n+            LOG.debug(\"Got DT: {}\", token);\n           }\n         }\n       }\n     }\n \n     if (!StringUtils.isEmpty(app.getDockerClientConfig())) {\n       allCreds.addAll(DockerClientConfigHandler.readCredentialsFromConfigFile(\n           new Path(app.getDockerClientConfig()), getConfig(), app.getName()));\n     }\n \n     if (allCreds.numberOfTokens() \u003e 0) {\n       DataOutputBuffer dob \u003d new DataOutputBuffer();\n       allCreds.writeTokenStorageToStream(dob);\n       ByteBuffer tokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n       amContext.setTokens(tokens);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addCredentials(ContainerLaunchContext amContext, Service app)\n      throws IOException {\n    Credentials allCreds \u003d new Credentials();\n    // HDFS DT\n    if (UserGroupInformation.isSecurityEnabled()) {\n      String tokenRenewer \u003d YarnClientUtils.getRmPrincipal(getConfig());\n      if (StringUtils.isEmpty(tokenRenewer)) {\n        throw new IOException(\n            \"Can\u0027t get Master Kerberos principal for the RM to use as renewer\");\n      }\n      final org.apache.hadoop.security.token.Token\u003c?\u003e[] tokens \u003d\n          fs.getFileSystem().addDelegationTokens(tokenRenewer, allCreds);\n      if (LOG.isDebugEnabled()) {\n        if (tokens !\u003d null \u0026\u0026 tokens.length !\u003d 0) {\n          for (Token\u003c?\u003e token : tokens) {\n            LOG.debug(\"Got DT: {}\", token);\n          }\n        }\n      }\n    }\n\n    if (!StringUtils.isEmpty(app.getDockerClientConfig())) {\n      allCreds.addAll(DockerClientConfigHandler.readCredentialsFromConfigFile(\n          new Path(app.getDockerClientConfig()), getConfig(), app.getName()));\n    }\n\n    if (allCreds.numberOfTokens() \u003e 0) {\n      DataOutputBuffer dob \u003d new DataOutputBuffer();\n      allCreds.writeTokenStorageToStream(dob);\n      ByteBuffer tokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n      amContext.setTokens(tokens);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7996. Allow user supplied Docker client configurations with YARN native services. Contributed by Shane Kumpf\n",
      "commitDate": "17/04/18 6:57 AM",
      "commitName": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,33 @@\n+  private void addCredentials(ContainerLaunchContext amContext, Service app)\n+      throws IOException {\n+    Credentials allCreds \u003d new Credentials();\n+    // HDFS DT\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      String tokenRenewer \u003d YarnClientUtils.getRmPrincipal(getConfig());\n+      if (StringUtils.isEmpty(tokenRenewer)) {\n+        throw new IOException(\n+            \"Can\u0027t get Master Kerberos principal for the RM to use as renewer\");\n+      }\n+      final org.apache.hadoop.security.token.Token\u003c?\u003e[] tokens \u003d\n+          fs.getFileSystem().addDelegationTokens(tokenRenewer, allCreds);\n+      if (LOG.isDebugEnabled()) {\n+        if (tokens !\u003d null \u0026\u0026 tokens.length !\u003d 0) {\n+          for (Token\u003c?\u003e token : tokens) {\n+            LOG.debug(\"Got DT: \" + token);\n+          }\n+        }\n+      }\n+    }\n+\n+    if (!StringUtils.isEmpty(app.getDockerClientConfig())) {\n+      allCreds.addAll(DockerClientConfigHandler.readCredentialsFromConfigFile(\n+          new Path(app.getDockerClientConfig()), getConfig(), app.getName()));\n+    }\n+\n+    if (allCreds.numberOfTokens() \u003e 0) {\n+      DataOutputBuffer dob \u003d new DataOutputBuffer();\n+      allCreds.writeTokenStorageToStream(dob);\n+      ByteBuffer tokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n+      amContext.setTokens(tokens);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addCredentials(ContainerLaunchContext amContext, Service app)\n      throws IOException {\n    Credentials allCreds \u003d new Credentials();\n    // HDFS DT\n    if (UserGroupInformation.isSecurityEnabled()) {\n      String tokenRenewer \u003d YarnClientUtils.getRmPrincipal(getConfig());\n      if (StringUtils.isEmpty(tokenRenewer)) {\n        throw new IOException(\n            \"Can\u0027t get Master Kerberos principal for the RM to use as renewer\");\n      }\n      final org.apache.hadoop.security.token.Token\u003c?\u003e[] tokens \u003d\n          fs.getFileSystem().addDelegationTokens(tokenRenewer, allCreds);\n      if (LOG.isDebugEnabled()) {\n        if (tokens !\u003d null \u0026\u0026 tokens.length !\u003d 0) {\n          for (Token\u003c?\u003e token : tokens) {\n            LOG.debug(\"Got DT: \" + token);\n          }\n        }\n      }\n    }\n\n    if (!StringUtils.isEmpty(app.getDockerClientConfig())) {\n      allCreds.addAll(DockerClientConfigHandler.readCredentialsFromConfigFile(\n          new Path(app.getDockerClientConfig()), getConfig(), app.getName()));\n    }\n\n    if (allCreds.numberOfTokens() \u003e 0) {\n      DataOutputBuffer dob \u003d new DataOutputBuffer();\n      allCreds.writeTokenStorageToStream(dob);\n      ByteBuffer tokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n      amContext.setTokens(tokens);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}