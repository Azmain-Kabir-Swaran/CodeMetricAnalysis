{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebServices.java",
  "functionName": "killApp",
  "functionId": "killApp___app-RMApp__callerUGI-UserGroupInformation__hsr-HttpServletRequest__diagnostic-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
  "functionStartLine": 1412,
  "functionEndLine": 1465,
  "numCommitsSeen": 163,
  "timeTaken": 4597,
  "changeHistory": [
    "d0372dc613136910160e9d42bd5eaa0d4bde2356",
    "dc7dd1fa191733a52ff5041556c9372d3a93004a"
  ],
  "changeHistoryShort": {
    "d0372dc613136910160e9d42bd5eaa0d4bde2356": "Ymultichange(Yparameterchange,Ybodychange)",
    "dc7dd1fa191733a52ff5041556c9372d3a93004a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d0372dc613136910160e9d42bd5eaa0d4bde2356": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3692. Allow REST API to set a user generated message when killing an application. Contributed by Rohith Sharma K S\n",
      "commitDate": "22/09/16 6:00 PM",
      "commitName": "d0372dc613136910160e9d42bd5eaa0d4bde2356",
      "commitAuthor": "Naganarasimha",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3692. Allow REST API to set a user generated message when killing an application. Contributed by Rohith Sharma K S\n",
          "commitDate": "22/09/16 6:00 PM",
          "commitName": "d0372dc613136910160e9d42bd5eaa0d4bde2356",
          "commitAuthor": "Naganarasimha",
          "commitDateOld": "05/08/16 10:27 AM",
          "commitNameOld": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.31,
          "commitsBetweenForRepo": 284,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,56 @@\n   protected Response killApp(RMApp app, UserGroupInformation callerUGI,\n-      HttpServletRequest hsr) throws IOException, InterruptedException {\n+      HttpServletRequest hsr, String diagnostic)\n+      throws IOException, InterruptedException {\n \n     if (app \u003d\u003d null) {\n       throw new IllegalArgumentException(\"app cannot be null\");\n     }\n     String userName \u003d callerUGI.getUserName();\n     final ApplicationId appid \u003d app.getApplicationId();\n     KillApplicationResponse resp \u003d null;\n     try {\n       resp \u003d\n           callerUGI\n             .doAs(new PrivilegedExceptionAction\u003cKillApplicationResponse\u003e() {\n               @Override\n               public KillApplicationResponse run() throws IOException,\n                   YarnException {\n                 KillApplicationRequest req \u003d\n                     KillApplicationRequest.newInstance(appid);\n+                  if (diagnostic !\u003d null) {\n+                    req.setDiagnostics(diagnostic);\n+                  }\n                 return rm.getClientRMService().forceKillApplication(req);\n               }\n             });\n     } catch (UndeclaredThrowableException ue) {\n       // if the root cause is a permissions issue\n       // bubble that up to the user\n       if (ue.getCause() instanceof YarnException) {\n         YarnException ye \u003d (YarnException) ue.getCause();\n         if (ye.getCause() instanceof AccessControlException) {\n           String appId \u003d app.getApplicationId().toString();\n           String msg \u003d\n               \"Unauthorized attempt to kill appid \" + appId\n                   + \" by remote user \" + userName;\n           return Response.status(Status.FORBIDDEN).entity(msg).build();\n         } else {\n           throw ue;\n         }\n       } else {\n         throw ue;\n       }\n     }\n \n     AppState ret \u003d new AppState();\n     ret.setState(app.getState().toString());\n \n     if (resp.getIsKillCompleted()) {\n       RMAuditLogger.logSuccess(userName, AuditConstants.KILL_APP_REQUEST,\n         \"RMWebService\", app.getApplicationId());\n     } else {\n       return Response.status(Status.ACCEPTED).entity(ret)\n         .header(HttpHeaders.LOCATION, hsr.getRequestURL()).build();\n     }\n     return Response.status(Status.OK).entity(ret).build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Response killApp(RMApp app, UserGroupInformation callerUGI,\n      HttpServletRequest hsr, String diagnostic)\n      throws IOException, InterruptedException {\n\n    if (app \u003d\u003d null) {\n      throw new IllegalArgumentException(\"app cannot be null\");\n    }\n    String userName \u003d callerUGI.getUserName();\n    final ApplicationId appid \u003d app.getApplicationId();\n    KillApplicationResponse resp \u003d null;\n    try {\n      resp \u003d\n          callerUGI\n            .doAs(new PrivilegedExceptionAction\u003cKillApplicationResponse\u003e() {\n              @Override\n              public KillApplicationResponse run() throws IOException,\n                  YarnException {\n                KillApplicationRequest req \u003d\n                    KillApplicationRequest.newInstance(appid);\n                  if (diagnostic !\u003d null) {\n                    req.setDiagnostics(diagnostic);\n                  }\n                return rm.getClientRMService().forceKillApplication(req);\n              }\n            });\n    } catch (UndeclaredThrowableException ue) {\n      // if the root cause is a permissions issue\n      // bubble that up to the user\n      if (ue.getCause() instanceof YarnException) {\n        YarnException ye \u003d (YarnException) ue.getCause();\n        if (ye.getCause() instanceof AccessControlException) {\n          String appId \u003d app.getApplicationId().toString();\n          String msg \u003d\n              \"Unauthorized attempt to kill appid \" + appId\n                  + \" by remote user \" + userName;\n          return Response.status(Status.FORBIDDEN).entity(msg).build();\n        } else {\n          throw ue;\n        }\n      } else {\n        throw ue;\n      }\n    }\n\n    AppState ret \u003d new AppState();\n    ret.setState(app.getState().toString());\n\n    if (resp.getIsKillCompleted()) {\n      RMAuditLogger.logSuccess(userName, AuditConstants.KILL_APP_REQUEST,\n        \"RMWebService\", app.getApplicationId());\n    } else {\n      return Response.status(Status.ACCEPTED).entity(ret)\n        .header(HttpHeaders.LOCATION, hsr.getRequestURL()).build();\n    }\n    return Response.status(Status.OK).entity(ret).build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {
            "oldValue": "[app-RMApp, callerUGI-UserGroupInformation, hsr-HttpServletRequest]",
            "newValue": "[app-RMApp, callerUGI-UserGroupInformation, hsr-HttpServletRequest, diagnostic-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3692. Allow REST API to set a user generated message when killing an application. Contributed by Rohith Sharma K S\n",
          "commitDate": "22/09/16 6:00 PM",
          "commitName": "d0372dc613136910160e9d42bd5eaa0d4bde2356",
          "commitAuthor": "Naganarasimha",
          "commitDateOld": "05/08/16 10:27 AM",
          "commitNameOld": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.31,
          "commitsBetweenForRepo": 284,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,56 @@\n   protected Response killApp(RMApp app, UserGroupInformation callerUGI,\n-      HttpServletRequest hsr) throws IOException, InterruptedException {\n+      HttpServletRequest hsr, String diagnostic)\n+      throws IOException, InterruptedException {\n \n     if (app \u003d\u003d null) {\n       throw new IllegalArgumentException(\"app cannot be null\");\n     }\n     String userName \u003d callerUGI.getUserName();\n     final ApplicationId appid \u003d app.getApplicationId();\n     KillApplicationResponse resp \u003d null;\n     try {\n       resp \u003d\n           callerUGI\n             .doAs(new PrivilegedExceptionAction\u003cKillApplicationResponse\u003e() {\n               @Override\n               public KillApplicationResponse run() throws IOException,\n                   YarnException {\n                 KillApplicationRequest req \u003d\n                     KillApplicationRequest.newInstance(appid);\n+                  if (diagnostic !\u003d null) {\n+                    req.setDiagnostics(diagnostic);\n+                  }\n                 return rm.getClientRMService().forceKillApplication(req);\n               }\n             });\n     } catch (UndeclaredThrowableException ue) {\n       // if the root cause is a permissions issue\n       // bubble that up to the user\n       if (ue.getCause() instanceof YarnException) {\n         YarnException ye \u003d (YarnException) ue.getCause();\n         if (ye.getCause() instanceof AccessControlException) {\n           String appId \u003d app.getApplicationId().toString();\n           String msg \u003d\n               \"Unauthorized attempt to kill appid \" + appId\n                   + \" by remote user \" + userName;\n           return Response.status(Status.FORBIDDEN).entity(msg).build();\n         } else {\n           throw ue;\n         }\n       } else {\n         throw ue;\n       }\n     }\n \n     AppState ret \u003d new AppState();\n     ret.setState(app.getState().toString());\n \n     if (resp.getIsKillCompleted()) {\n       RMAuditLogger.logSuccess(userName, AuditConstants.KILL_APP_REQUEST,\n         \"RMWebService\", app.getApplicationId());\n     } else {\n       return Response.status(Status.ACCEPTED).entity(ret)\n         .header(HttpHeaders.LOCATION, hsr.getRequestURL()).build();\n     }\n     return Response.status(Status.OK).entity(ret).build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Response killApp(RMApp app, UserGroupInformation callerUGI,\n      HttpServletRequest hsr, String diagnostic)\n      throws IOException, InterruptedException {\n\n    if (app \u003d\u003d null) {\n      throw new IllegalArgumentException(\"app cannot be null\");\n    }\n    String userName \u003d callerUGI.getUserName();\n    final ApplicationId appid \u003d app.getApplicationId();\n    KillApplicationResponse resp \u003d null;\n    try {\n      resp \u003d\n          callerUGI\n            .doAs(new PrivilegedExceptionAction\u003cKillApplicationResponse\u003e() {\n              @Override\n              public KillApplicationResponse run() throws IOException,\n                  YarnException {\n                KillApplicationRequest req \u003d\n                    KillApplicationRequest.newInstance(appid);\n                  if (diagnostic !\u003d null) {\n                    req.setDiagnostics(diagnostic);\n                  }\n                return rm.getClientRMService().forceKillApplication(req);\n              }\n            });\n    } catch (UndeclaredThrowableException ue) {\n      // if the root cause is a permissions issue\n      // bubble that up to the user\n      if (ue.getCause() instanceof YarnException) {\n        YarnException ye \u003d (YarnException) ue.getCause();\n        if (ye.getCause() instanceof AccessControlException) {\n          String appId \u003d app.getApplicationId().toString();\n          String msg \u003d\n              \"Unauthorized attempt to kill appid \" + appId\n                  + \" by remote user \" + userName;\n          return Response.status(Status.FORBIDDEN).entity(msg).build();\n        } else {\n          throw ue;\n        }\n      } else {\n        throw ue;\n      }\n    }\n\n    AppState ret \u003d new AppState();\n    ret.setState(app.getState().toString());\n\n    if (resp.getIsKillCompleted()) {\n      RMAuditLogger.logSuccess(userName, AuditConstants.KILL_APP_REQUEST,\n        \"RMWebService\", app.getApplicationId());\n    } else {\n      return Response.status(Status.ACCEPTED).entity(ret)\n        .header(HttpHeaders.LOCATION, hsr.getRequestURL()).build();\n    }\n    return Response.status(Status.OK).entity(ret).build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "dc7dd1fa191733a52ff5041556c9372d3a93004a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1702. Added kill app functionality to RM web services. Contributed by Varun Vasudev.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1602298 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/14 2:31 PM",
      "commitName": "dc7dd1fa191733a52ff5041556c9372d3a93004a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,52 @@\n+  protected Response killApp(RMApp app, UserGroupInformation callerUGI,\n+      HttpServletRequest hsr) throws IOException, InterruptedException {\n+\n+    if (app \u003d\u003d null) {\n+      throw new IllegalArgumentException(\"app cannot be null\");\n+    }\n+    String userName \u003d callerUGI.getUserName();\n+    final ApplicationId appid \u003d app.getApplicationId();\n+    KillApplicationResponse resp \u003d null;\n+    try {\n+      resp \u003d\n+          callerUGI\n+            .doAs(new PrivilegedExceptionAction\u003cKillApplicationResponse\u003e() {\n+              @Override\n+              public KillApplicationResponse run() throws IOException,\n+                  YarnException {\n+                KillApplicationRequest req \u003d\n+                    KillApplicationRequest.newInstance(appid);\n+                return rm.getClientRMService().forceKillApplication(req);\n+              }\n+            });\n+    } catch (UndeclaredThrowableException ue) {\n+      // if the root cause is a permissions issue\n+      // bubble that up to the user\n+      if (ue.getCause() instanceof YarnException) {\n+        YarnException ye \u003d (YarnException) ue.getCause();\n+        if (ye.getCause() instanceof AccessControlException) {\n+          String appId \u003d app.getApplicationId().toString();\n+          String msg \u003d\n+              \"Unauthorized attempt to kill appid \" + appId\n+                  + \" by remote user \" + userName;\n+          return Response.status(Status.FORBIDDEN).entity(msg).build();\n+        } else {\n+          throw ue;\n+        }\n+      } else {\n+        throw ue;\n+      }\n+    }\n+\n+    AppState ret \u003d new AppState();\n+    ret.setState(app.getState().toString());\n+\n+    if (resp.getIsKillCompleted()) {\n+      RMAuditLogger.logSuccess(userName, AuditConstants.KILL_APP_REQUEST,\n+        \"RMWebService\", app.getApplicationId());\n+    } else {\n+      return Response.status(Status.ACCEPTED).entity(ret)\n+        .header(HttpHeaders.LOCATION, hsr.getRequestURL()).build();\n+    }\n+    return Response.status(Status.OK).entity(ret).build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected Response killApp(RMApp app, UserGroupInformation callerUGI,\n      HttpServletRequest hsr) throws IOException, InterruptedException {\n\n    if (app \u003d\u003d null) {\n      throw new IllegalArgumentException(\"app cannot be null\");\n    }\n    String userName \u003d callerUGI.getUserName();\n    final ApplicationId appid \u003d app.getApplicationId();\n    KillApplicationResponse resp \u003d null;\n    try {\n      resp \u003d\n          callerUGI\n            .doAs(new PrivilegedExceptionAction\u003cKillApplicationResponse\u003e() {\n              @Override\n              public KillApplicationResponse run() throws IOException,\n                  YarnException {\n                KillApplicationRequest req \u003d\n                    KillApplicationRequest.newInstance(appid);\n                return rm.getClientRMService().forceKillApplication(req);\n              }\n            });\n    } catch (UndeclaredThrowableException ue) {\n      // if the root cause is a permissions issue\n      // bubble that up to the user\n      if (ue.getCause() instanceof YarnException) {\n        YarnException ye \u003d (YarnException) ue.getCause();\n        if (ye.getCause() instanceof AccessControlException) {\n          String appId \u003d app.getApplicationId().toString();\n          String msg \u003d\n              \"Unauthorized attempt to kill appid \" + appId\n                  + \" by remote user \" + userName;\n          return Response.status(Status.FORBIDDEN).entity(msg).build();\n        } else {\n          throw ue;\n        }\n      } else {\n        throw ue;\n      }\n    }\n\n    AppState ret \u003d new AppState();\n    ret.setState(app.getState().toString());\n\n    if (resp.getIsKillCompleted()) {\n      RMAuditLogger.logSuccess(userName, AuditConstants.KILL_APP_REQUEST,\n        \"RMWebService\", app.getApplicationId());\n    } else {\n      return Response.status(Status.ACCEPTED).entity(ret)\n        .header(HttpHeaders.LOCATION, hsr.getRequestURL()).build();\n    }\n    return Response.status(Status.OK).entity(ret).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}