{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StringUtils.java",
  "functionName": "long2String",
  "functionId": "long2String___n-long__unit-String__decimalPlaces-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/StringUtils.java",
  "functionStartLine": 864,
  "functionEndLine": 904,
  "numCommitsSeen": 44,
  "timeTaken": 1229,
  "changeHistory": [
    "ef2ff99d36752d2e95236c4ab8e5290a2e41e5bf"
  ],
  "changeHistoryShort": {
    "ef2ff99d36752d2e95236c4ab8e5290a2e41e5bf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ef2ff99d36752d2e95236c4ab8e5290a2e41e5bf": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9252. In StringUtils, humanReadableInt(..) has a race condition and the synchronization of limitDecimalTo2(double) can be avoided.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1442386 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/02/13 1:40 PM",
      "commitName": "ef2ff99d36752d2e95236c4ab8e5290a2e41e5bf",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,41 @@\n+    public static String long2String(long n, String unit, int decimalPlaces) {\n+      if (unit \u003d\u003d null) {\n+        unit \u003d \"\";\n+      }\n+      //take care a special case\n+      if (n \u003d\u003d Long.MIN_VALUE) {\n+        return \"-8 \" + EXA.symbol + unit;\n+      }\n+\n+      final StringBuilder b \u003d new StringBuilder();\n+      //take care negative numbers\n+      if (n \u003c 0) {\n+        b.append(\u0027-\u0027);\n+        n \u003d -n;\n+      }\n+      if (n \u003c KILO.value) {\n+        //no prefix\n+        b.append(n);\n+        return (unit.isEmpty()? b: b.append(\" \").append(unit)).toString();\n+      } else {\n+        //find traditional binary prefix\n+        int i \u003d 0;\n+        for(; i \u003c values().length \u0026\u0026 n \u003e\u003d values()[i].value; i++);\n+        TraditionalBinaryPrefix prefix \u003d values()[i - 1];\n+\n+        if ((n \u0026 prefix.bitMask) \u003d\u003d 0) {\n+          //exact division\n+          b.append(n \u003e\u003e prefix.bitShift);\n+        } else {\n+          final String  format \u003d \"%.\" + decimalPlaces + \"f\";\n+          String s \u003d format(format, n/(double)prefix.value);\n+          //check a special rounding up case\n+          if (s.startsWith(\"1024\")) {\n+            prefix \u003d values()[i];\n+            s \u003d format(format, n/(double)prefix.value);\n+          }\n+          b.append(s);\n+        }\n+        return b.append(\u0027 \u0027).append(prefix.symbol).append(unit).toString();\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public static String long2String(long n, String unit, int decimalPlaces) {\n      if (unit \u003d\u003d null) {\n        unit \u003d \"\";\n      }\n      //take care a special case\n      if (n \u003d\u003d Long.MIN_VALUE) {\n        return \"-8 \" + EXA.symbol + unit;\n      }\n\n      final StringBuilder b \u003d new StringBuilder();\n      //take care negative numbers\n      if (n \u003c 0) {\n        b.append(\u0027-\u0027);\n        n \u003d -n;\n      }\n      if (n \u003c KILO.value) {\n        //no prefix\n        b.append(n);\n        return (unit.isEmpty()? b: b.append(\" \").append(unit)).toString();\n      } else {\n        //find traditional binary prefix\n        int i \u003d 0;\n        for(; i \u003c values().length \u0026\u0026 n \u003e\u003d values()[i].value; i++);\n        TraditionalBinaryPrefix prefix \u003d values()[i - 1];\n\n        if ((n \u0026 prefix.bitMask) \u003d\u003d 0) {\n          //exact division\n          b.append(n \u003e\u003e prefix.bitShift);\n        } else {\n          final String  format \u003d \"%.\" + decimalPlaces + \"f\";\n          String s \u003d format(format, n/(double)prefix.value);\n          //check a special rounding up case\n          if (s.startsWith(\"1024\")) {\n            prefix \u003d values()[i];\n            s \u003d format(format, n/(double)prefix.value);\n          }\n          b.append(s);\n        }\n        return b.append(\u0027 \u0027).append(prefix.symbol).append(unit).toString();\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/StringUtils.java"
    }
  }
}