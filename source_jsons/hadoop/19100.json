{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TaskLog.java",
  "functionName": "writeToIndexFile",
  "functionId": "writeToIndexFile___logLocation-String__isCleanup-boolean",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/TaskLog.java",
  "functionStartLine": 196,
  "functionEndLine": 244,
  "numCommitsSeen": 18,
  "timeTaken": 5077,
  "changeHistory": [
    "178751ed8c9d47038acf8616c226f1f52e884feb",
    "61c59c07043e5d6d13ef8bec1fc10e6db8317a70",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "ebf61db566ba2611f7fe2a19158d7d786fb7f868",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "7e18c90d396e51b2dbf9f647822dc233c73518fc",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "178751ed8c9d47038acf8616c226f1f52e884feb": "Ybodychange",
    "61c59c07043e5d6d13ef8bec1fc10e6db8317a70": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "ebf61db566ba2611f7fe2a19158d7d786fb7f868": "Ymodifierchange",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "7e18c90d396e51b2dbf9f647822dc233c73518fc": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "178751ed8c9d47038acf8616c226f1f52e884feb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6983. Moving logging APIs over to slf4j in hadoop-mapreduce-client-core. Contributed by Jinjiang Ling.\n",
      "commitDate": "02/11/17 1:43 AM",
      "commitName": "178751ed8c9d47038acf8616c226f1f52e884feb",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "29/05/17 10:48 PM",
      "commitNameOld": "d4015f8628dd973c7433639451a9acc3e741d2a2",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 156.12,
      "commitsBetweenForRepo": 1119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   void writeToIndexFile(String logLocation,\n                         boolean isCleanup) throws IOException {\n     // To ensure atomicity of updates to index file, write to temporary index\n     // file first and then rename.\n     File tmpIndexFile \u003d getTmpIndexFile(currentTaskid, isCleanup);\n \n     BufferedOutputStream bos \u003d null;\n     DataOutputStream dos \u003d null;\n     try{\n       bos \u003d new BufferedOutputStream(\n           SecureIOUtils.createForWrite(tmpIndexFile, 0644));\n       dos \u003d new DataOutputStream(bos);\n       //the format of the index file is\n       //LOG_DIR: \u003cthe dir where the task logs are really stored\u003e\n       //STDOUT: \u003cstart-offset in the stdout file\u003e \u003clength\u003e\n       //STDERR: \u003cstart-offset in the stderr file\u003e \u003clength\u003e\n       //SYSLOG: \u003cstart-offset in the syslog file\u003e \u003clength\u003e   \n \n       dos.writeBytes(LogFileDetail.LOCATION + logLocation + \"\\n\"\n           + LogName.STDOUT.toString() + \":\");\n       dos.writeBytes(Long.toString(prevOutLength) + \" \");\n       dos.writeBytes(Long.toString(new File(logLocation, LogName.STDOUT\n           .toString()).length() - prevOutLength)\n           + \"\\n\" + LogName.STDERR + \":\");\n       dos.writeBytes(Long.toString(prevErrLength) + \" \");\n       dos.writeBytes(Long.toString(new File(logLocation, LogName.STDERR\n           .toString()).length() - prevErrLength)\n           + \"\\n\" + LogName.SYSLOG.toString() + \":\");\n       dos.writeBytes(Long.toString(prevLogLength) + \" \");\n       dos.writeBytes(Long.toString(new File(logLocation, LogName.SYSLOG\n           .toString()).length() - prevLogLength)\n           + \"\\n\");\n       dos.close();\n       dos \u003d null;\n       bos.close();\n       bos \u003d null;\n     } finally {\n-      IOUtils.cleanup(LOG, dos, bos);\n+      IOUtils.cleanupWithLogger(LOG, dos, bos);\n     }\n \n     File indexFile \u003d getIndexFile(currentTaskid, isCleanup);\n     Path indexFilePath \u003d new Path(indexFile.getAbsolutePath());\n     Path tmpIndexFilePath \u003d new Path(tmpIndexFile.getAbsolutePath());\n \n     if (localFS \u003d\u003d null) {// set localFS once\n       localFS \u003d FileSystem.getLocal(new Configuration());\n     }\n     localFS.rename (tmpIndexFilePath, indexFilePath);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void writeToIndexFile(String logLocation,\n                        boolean isCleanup) throws IOException {\n    // To ensure atomicity of updates to index file, write to temporary index\n    // file first and then rename.\n    File tmpIndexFile \u003d getTmpIndexFile(currentTaskid, isCleanup);\n\n    BufferedOutputStream bos \u003d null;\n    DataOutputStream dos \u003d null;\n    try{\n      bos \u003d new BufferedOutputStream(\n          SecureIOUtils.createForWrite(tmpIndexFile, 0644));\n      dos \u003d new DataOutputStream(bos);\n      //the format of the index file is\n      //LOG_DIR: \u003cthe dir where the task logs are really stored\u003e\n      //STDOUT: \u003cstart-offset in the stdout file\u003e \u003clength\u003e\n      //STDERR: \u003cstart-offset in the stderr file\u003e \u003clength\u003e\n      //SYSLOG: \u003cstart-offset in the syslog file\u003e \u003clength\u003e   \n\n      dos.writeBytes(LogFileDetail.LOCATION + logLocation + \"\\n\"\n          + LogName.STDOUT.toString() + \":\");\n      dos.writeBytes(Long.toString(prevOutLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.STDOUT\n          .toString()).length() - prevOutLength)\n          + \"\\n\" + LogName.STDERR + \":\");\n      dos.writeBytes(Long.toString(prevErrLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.STDERR\n          .toString()).length() - prevErrLength)\n          + \"\\n\" + LogName.SYSLOG.toString() + \":\");\n      dos.writeBytes(Long.toString(prevLogLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.SYSLOG\n          .toString()).length() - prevLogLength)\n          + \"\\n\");\n      dos.close();\n      dos \u003d null;\n      bos.close();\n      bos \u003d null;\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, dos, bos);\n    }\n\n    File indexFile \u003d getIndexFile(currentTaskid, isCleanup);\n    Path indexFilePath \u003d new Path(indexFile.getAbsolutePath());\n    Path tmpIndexFilePath \u003d new Path(tmpIndexFile.getAbsolutePath());\n\n    if (localFS \u003d\u003d null) {// set localFS once\n      localFS \u003d FileSystem.getLocal(new Configuration());\n    }\n    localFS.rename (tmpIndexFilePath, indexFilePath);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/TaskLog.java",
      "extendedDetails": {}
    },
    "61c59c07043e5d6d13ef8bec1fc10e6db8317a70": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5895. Close streams properly to avoid leakage in TaskLog. Contributed by Kousuke Saruta.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598209 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/14 12:05 AM",
      "commitName": "61c59c07043e5d6d13ef8bec1fc10e6db8317a70",
      "commitAuthor": "Devarajulu K",
      "commitDateOld": "21/01/14 11:23 AM",
      "commitNameOld": "d1963ad4bd1fb735bfa39e2b70773bdf1f623a87",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 127.49,
      "commitsBetweenForRepo": 936,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,49 @@\n   void writeToIndexFile(String logLocation,\n                         boolean isCleanup) throws IOException {\n     // To ensure atomicity of updates to index file, write to temporary index\n     // file first and then rename.\n     File tmpIndexFile \u003d getTmpIndexFile(currentTaskid, isCleanup);\n \n-    BufferedOutputStream bos \u003d \n-      new BufferedOutputStream(\n-        SecureIOUtils.createForWrite(tmpIndexFile, 0644));\n-    DataOutputStream dos \u003d new DataOutputStream(bos);\n-    //the format of the index file is\n-    //LOG_DIR: \u003cthe dir where the task logs are really stored\u003e\n-    //STDOUT: \u003cstart-offset in the stdout file\u003e \u003clength\u003e\n-    //STDERR: \u003cstart-offset in the stderr file\u003e \u003clength\u003e\n-    //SYSLOG: \u003cstart-offset in the syslog file\u003e \u003clength\u003e   \n+    BufferedOutputStream bos \u003d null;\n+    DataOutputStream dos \u003d null;\n     try{\n+      bos \u003d new BufferedOutputStream(\n+          SecureIOUtils.createForWrite(tmpIndexFile, 0644));\n+      dos \u003d new DataOutputStream(bos);\n+      //the format of the index file is\n+      //LOG_DIR: \u003cthe dir where the task logs are really stored\u003e\n+      //STDOUT: \u003cstart-offset in the stdout file\u003e \u003clength\u003e\n+      //STDERR: \u003cstart-offset in the stderr file\u003e \u003clength\u003e\n+      //SYSLOG: \u003cstart-offset in the syslog file\u003e \u003clength\u003e   \n+\n       dos.writeBytes(LogFileDetail.LOCATION + logLocation + \"\\n\"\n           + LogName.STDOUT.toString() + \":\");\n       dos.writeBytes(Long.toString(prevOutLength) + \" \");\n       dos.writeBytes(Long.toString(new File(logLocation, LogName.STDOUT\n           .toString()).length() - prevOutLength)\n           + \"\\n\" + LogName.STDERR + \":\");\n       dos.writeBytes(Long.toString(prevErrLength) + \" \");\n       dos.writeBytes(Long.toString(new File(logLocation, LogName.STDERR\n           .toString()).length() - prevErrLength)\n           + \"\\n\" + LogName.SYSLOG.toString() + \":\");\n       dos.writeBytes(Long.toString(prevLogLength) + \" \");\n       dos.writeBytes(Long.toString(new File(logLocation, LogName.SYSLOG\n           .toString()).length() - prevLogLength)\n           + \"\\n\");\n       dos.close();\n       dos \u003d null;\n+      bos.close();\n+      bos \u003d null;\n     } finally {\n-      IOUtils.cleanup(LOG, dos);\n+      IOUtils.cleanup(LOG, dos, bos);\n     }\n \n     File indexFile \u003d getIndexFile(currentTaskid, isCleanup);\n     Path indexFilePath \u003d new Path(indexFile.getAbsolutePath());\n     Path tmpIndexFilePath \u003d new Path(tmpIndexFile.getAbsolutePath());\n \n     if (localFS \u003d\u003d null) {// set localFS once\n       localFS \u003d FileSystem.getLocal(new Configuration());\n     }\n     localFS.rename (tmpIndexFilePath, indexFilePath);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void writeToIndexFile(String logLocation,\n                        boolean isCleanup) throws IOException {\n    // To ensure atomicity of updates to index file, write to temporary index\n    // file first and then rename.\n    File tmpIndexFile \u003d getTmpIndexFile(currentTaskid, isCleanup);\n\n    BufferedOutputStream bos \u003d null;\n    DataOutputStream dos \u003d null;\n    try{\n      bos \u003d new BufferedOutputStream(\n          SecureIOUtils.createForWrite(tmpIndexFile, 0644));\n      dos \u003d new DataOutputStream(bos);\n      //the format of the index file is\n      //LOG_DIR: \u003cthe dir where the task logs are really stored\u003e\n      //STDOUT: \u003cstart-offset in the stdout file\u003e \u003clength\u003e\n      //STDERR: \u003cstart-offset in the stderr file\u003e \u003clength\u003e\n      //SYSLOG: \u003cstart-offset in the syslog file\u003e \u003clength\u003e   \n\n      dos.writeBytes(LogFileDetail.LOCATION + logLocation + \"\\n\"\n          + LogName.STDOUT.toString() + \":\");\n      dos.writeBytes(Long.toString(prevOutLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.STDOUT\n          .toString()).length() - prevOutLength)\n          + \"\\n\" + LogName.STDERR + \":\");\n      dos.writeBytes(Long.toString(prevErrLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.STDERR\n          .toString()).length() - prevErrLength)\n          + \"\\n\" + LogName.SYSLOG.toString() + \":\");\n      dos.writeBytes(Long.toString(prevLogLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.SYSLOG\n          .toString()).length() - prevLogLength)\n          + \"\\n\");\n      dos.close();\n      dos \u003d null;\n      bos.close();\n      bos \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, dos, bos);\n    }\n\n    File indexFile \u003d getIndexFile(currentTaskid, isCleanup);\n    Path indexFilePath \u003d new Path(indexFile.getAbsolutePath());\n    Path tmpIndexFilePath \u003d new Path(tmpIndexFile.getAbsolutePath());\n\n    if (localFS \u003d\u003d null) {// set localFS once\n      localFS \u003d FileSystem.getLocal(new Configuration());\n    }\n    localFS.rename (tmpIndexFilePath, indexFilePath);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/TaskLog.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void writeToIndexFile(String logLocation,\n                        boolean isCleanup) throws IOException {\n    // To ensure atomicity of updates to index file, write to temporary index\n    // file first and then rename.\n    File tmpIndexFile \u003d getTmpIndexFile(currentTaskid, isCleanup);\n\n    BufferedOutputStream bos \u003d \n      new BufferedOutputStream(\n        SecureIOUtils.createForWrite(tmpIndexFile, 0644));\n    DataOutputStream dos \u003d new DataOutputStream(bos);\n    //the format of the index file is\n    //LOG_DIR: \u003cthe dir where the task logs are really stored\u003e\n    //STDOUT: \u003cstart-offset in the stdout file\u003e \u003clength\u003e\n    //STDERR: \u003cstart-offset in the stderr file\u003e \u003clength\u003e\n    //SYSLOG: \u003cstart-offset in the syslog file\u003e \u003clength\u003e   \n    try{\n      dos.writeBytes(LogFileDetail.LOCATION + logLocation + \"\\n\"\n          + LogName.STDOUT.toString() + \":\");\n      dos.writeBytes(Long.toString(prevOutLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.STDOUT\n          .toString()).length() - prevOutLength)\n          + \"\\n\" + LogName.STDERR + \":\");\n      dos.writeBytes(Long.toString(prevErrLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.STDERR\n          .toString()).length() - prevErrLength)\n          + \"\\n\" + LogName.SYSLOG.toString() + \":\");\n      dos.writeBytes(Long.toString(prevLogLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.SYSLOG\n          .toString()).length() - prevLogLength)\n          + \"\\n\");\n      dos.close();\n      dos \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, dos);\n    }\n\n    File indexFile \u003d getIndexFile(currentTaskid, isCleanup);\n    Path indexFilePath \u003d new Path(indexFile.getAbsolutePath());\n    Path tmpIndexFilePath \u003d new Path(tmpIndexFile.getAbsolutePath());\n\n    if (localFS \u003d\u003d null) {// set localFS once\n      localFS \u003d FileSystem.getLocal(new Configuration());\n    }\n    localFS.rename (tmpIndexFilePath, indexFilePath);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/TaskLog.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/TaskLog.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/TaskLog.java"
      }
    },
    "ebf61db566ba2611f7fe2a19158d7d786fb7f868": {
      "type": "Ymodifierchange",
      "commitMessage": "MAPREDUCE-2846. Fix missing synchronization in the task log management.\n(omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161324 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 4:52 PM",
      "commitName": "ebf61db566ba2611f7fe2a19158d7d786fb7f868",
      "commitAuthor": "Owen O\u0027Malley",
      "commitDateOld": "18/08/11 4:07 AM",
      "commitNameOld": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.53,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,45 @@\n-  private static void writeToIndexFile(String logLocation,\n-                                       boolean isCleanup) \n-  throws IOException {\n+  void writeToIndexFile(String logLocation,\n+                        boolean isCleanup) throws IOException {\n     // To ensure atomicity of updates to index file, write to temporary index\n     // file first and then rename.\n     File tmpIndexFile \u003d getTmpIndexFile(currentTaskid, isCleanup);\n \n     BufferedOutputStream bos \u003d \n       new BufferedOutputStream(\n         SecureIOUtils.createForWrite(tmpIndexFile, 0644));\n     DataOutputStream dos \u003d new DataOutputStream(bos);\n     //the format of the index file is\n     //LOG_DIR: \u003cthe dir where the task logs are really stored\u003e\n     //STDOUT: \u003cstart-offset in the stdout file\u003e \u003clength\u003e\n     //STDERR: \u003cstart-offset in the stderr file\u003e \u003clength\u003e\n     //SYSLOG: \u003cstart-offset in the syslog file\u003e \u003clength\u003e   \n     try{\n       dos.writeBytes(LogFileDetail.LOCATION + logLocation + \"\\n\"\n           + LogName.STDOUT.toString() + \":\");\n       dos.writeBytes(Long.toString(prevOutLength) + \" \");\n       dos.writeBytes(Long.toString(new File(logLocation, LogName.STDOUT\n           .toString()).length() - prevOutLength)\n           + \"\\n\" + LogName.STDERR + \":\");\n       dos.writeBytes(Long.toString(prevErrLength) + \" \");\n       dos.writeBytes(Long.toString(new File(logLocation, LogName.STDERR\n           .toString()).length() - prevErrLength)\n           + \"\\n\" + LogName.SYSLOG.toString() + \":\");\n       dos.writeBytes(Long.toString(prevLogLength) + \" \");\n       dos.writeBytes(Long.toString(new File(logLocation, LogName.SYSLOG\n           .toString()).length() - prevLogLength)\n           + \"\\n\");\n       dos.close();\n       dos \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, dos);\n     }\n \n     File indexFile \u003d getIndexFile(currentTaskid, isCleanup);\n     Path indexFilePath \u003d new Path(indexFile.getAbsolutePath());\n     Path tmpIndexFilePath \u003d new Path(tmpIndexFile.getAbsolutePath());\n \n     if (localFS \u003d\u003d null) {// set localFS once\n       localFS \u003d FileSystem.getLocal(new Configuration());\n     }\n     localFS.rename (tmpIndexFilePath, indexFilePath);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void writeToIndexFile(String logLocation,\n                        boolean isCleanup) throws IOException {\n    // To ensure atomicity of updates to index file, write to temporary index\n    // file first and then rename.\n    File tmpIndexFile \u003d getTmpIndexFile(currentTaskid, isCleanup);\n\n    BufferedOutputStream bos \u003d \n      new BufferedOutputStream(\n        SecureIOUtils.createForWrite(tmpIndexFile, 0644));\n    DataOutputStream dos \u003d new DataOutputStream(bos);\n    //the format of the index file is\n    //LOG_DIR: \u003cthe dir where the task logs are really stored\u003e\n    //STDOUT: \u003cstart-offset in the stdout file\u003e \u003clength\u003e\n    //STDERR: \u003cstart-offset in the stderr file\u003e \u003clength\u003e\n    //SYSLOG: \u003cstart-offset in the syslog file\u003e \u003clength\u003e   \n    try{\n      dos.writeBytes(LogFileDetail.LOCATION + logLocation + \"\\n\"\n          + LogName.STDOUT.toString() + \":\");\n      dos.writeBytes(Long.toString(prevOutLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.STDOUT\n          .toString()).length() - prevOutLength)\n          + \"\\n\" + LogName.STDERR + \":\");\n      dos.writeBytes(Long.toString(prevErrLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.STDERR\n          .toString()).length() - prevErrLength)\n          + \"\\n\" + LogName.SYSLOG.toString() + \":\");\n      dos.writeBytes(Long.toString(prevLogLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.SYSLOG\n          .toString()).length() - prevLogLength)\n          + \"\\n\");\n      dos.close();\n      dos \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, dos);\n    }\n\n    File indexFile \u003d getIndexFile(currentTaskid, isCleanup);\n    Path indexFilePath \u003d new Path(indexFile.getAbsolutePath());\n    Path tmpIndexFilePath \u003d new Path(tmpIndexFile.getAbsolutePath());\n\n    if (localFS \u003d\u003d null) {// set localFS once\n      localFS \u003d FileSystem.getLocal(new Configuration());\n    }\n    localFS.rename (tmpIndexFilePath, indexFilePath);\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/TaskLog.java",
      "extendedDetails": {
        "oldValue": "[private, static]",
        "newValue": "[private, static, synchronized]"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void writeToIndexFile(String logLocation,\n                                       boolean isCleanup) \n  throws IOException {\n    // To ensure atomicity of updates to index file, write to temporary index\n    // file first and then rename.\n    File tmpIndexFile \u003d getTmpIndexFile(currentTaskid, isCleanup);\n\n    BufferedOutputStream bos \u003d \n      new BufferedOutputStream(\n        SecureIOUtils.createForWrite(tmpIndexFile, 0644));\n    DataOutputStream dos \u003d new DataOutputStream(bos);\n    //the format of the index file is\n    //LOG_DIR: \u003cthe dir where the task logs are really stored\u003e\n    //STDOUT: \u003cstart-offset in the stdout file\u003e \u003clength\u003e\n    //STDERR: \u003cstart-offset in the stderr file\u003e \u003clength\u003e\n    //SYSLOG: \u003cstart-offset in the syslog file\u003e \u003clength\u003e   \n    try{\n      dos.writeBytes(LogFileDetail.LOCATION + logLocation + \"\\n\"\n          + LogName.STDOUT.toString() + \":\");\n      dos.writeBytes(Long.toString(prevOutLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.STDOUT\n          .toString()).length() - prevOutLength)\n          + \"\\n\" + LogName.STDERR + \":\");\n      dos.writeBytes(Long.toString(prevErrLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.STDERR\n          .toString()).length() - prevErrLength)\n          + \"\\n\" + LogName.SYSLOG.toString() + \":\");\n      dos.writeBytes(Long.toString(prevLogLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.SYSLOG\n          .toString()).length() - prevLogLength)\n          + \"\\n\");\n      dos.close();\n      dos \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, dos);\n    }\n\n    File indexFile \u003d getIndexFile(currentTaskid, isCleanup);\n    Path indexFilePath \u003d new Path(indexFile.getAbsolutePath());\n    Path tmpIndexFilePath \u003d new Path(tmpIndexFile.getAbsolutePath());\n\n    if (localFS \u003d\u003d null) {// set localFS once\n      localFS \u003d FileSystem.getLocal(new Configuration());\n    }\n    localFS.rename (tmpIndexFilePath, indexFilePath);\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/TaskLog.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/TaskLog.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/TaskLog.java"
      }
    },
    "7e18c90d396e51b2dbf9f647822dc233c73518fc": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2243. Close streams propely in a finally-block to avoid leakage in CompletedJobStatusStore, TaskLog, EventWriter and TotalOrderPartitioner.  Contributed by Devaraj K\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152787 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/11 7:11 AM",
      "commitName": "7e18c90d396e51b2dbf9f647822dc233c73518fc",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "12/06/11 3:00 PM",
      "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 49.67,
      "commitsBetweenForRepo": 168,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,46 @@\n   private static void writeToIndexFile(String logLocation,\n                                        boolean isCleanup) \n   throws IOException {\n     // To ensure atomicity of updates to index file, write to temporary index\n     // file first and then rename.\n     File tmpIndexFile \u003d getTmpIndexFile(currentTaskid, isCleanup);\n \n     BufferedOutputStream bos \u003d \n       new BufferedOutputStream(\n         SecureIOUtils.createForWrite(tmpIndexFile, 0644));\n     DataOutputStream dos \u003d new DataOutputStream(bos);\n     //the format of the index file is\n     //LOG_DIR: \u003cthe dir where the task logs are really stored\u003e\n     //STDOUT: \u003cstart-offset in the stdout file\u003e \u003clength\u003e\n     //STDERR: \u003cstart-offset in the stderr file\u003e \u003clength\u003e\n-    //SYSLOG: \u003cstart-offset in the syslog file\u003e \u003clength\u003e    \n-    dos.writeBytes(LogFileDetail.LOCATION + logLocation + \"\\n\"\n-        + LogName.STDOUT.toString() + \":\");\n-    dos.writeBytes(Long.toString(prevOutLength) + \" \");\n-    dos.writeBytes(Long.toString(new File(logLocation, LogName.STDOUT\n-        .toString()).length() - prevOutLength)\n-        + \"\\n\" + LogName.STDERR + \":\");\n-    dos.writeBytes(Long.toString(prevErrLength) + \" \");\n-    dos.writeBytes(Long.toString(new File(logLocation, LogName.STDERR\n-        .toString()).length() - prevErrLength)\n-        + \"\\n\" + LogName.SYSLOG.toString() + \":\");\n-    dos.writeBytes(Long.toString(prevLogLength) + \" \");\n-    dos.writeBytes(Long.toString(new File(logLocation, LogName.SYSLOG\n-        .toString()).length() - prevLogLength)\n-        + \"\\n\");\n-    dos.close();\n+    //SYSLOG: \u003cstart-offset in the syslog file\u003e \u003clength\u003e   \n+    try{\n+      dos.writeBytes(LogFileDetail.LOCATION + logLocation + \"\\n\"\n+          + LogName.STDOUT.toString() + \":\");\n+      dos.writeBytes(Long.toString(prevOutLength) + \" \");\n+      dos.writeBytes(Long.toString(new File(logLocation, LogName.STDOUT\n+          .toString()).length() - prevOutLength)\n+          + \"\\n\" + LogName.STDERR + \":\");\n+      dos.writeBytes(Long.toString(prevErrLength) + \" \");\n+      dos.writeBytes(Long.toString(new File(logLocation, LogName.STDERR\n+          .toString()).length() - prevErrLength)\n+          + \"\\n\" + LogName.SYSLOG.toString() + \":\");\n+      dos.writeBytes(Long.toString(prevLogLength) + \" \");\n+      dos.writeBytes(Long.toString(new File(logLocation, LogName.SYSLOG\n+          .toString()).length() - prevLogLength)\n+          + \"\\n\");\n+      dos.close();\n+      dos \u003d null;\n+    } finally {\n+      IOUtils.cleanup(LOG, dos);\n+    }\n \n     File indexFile \u003d getIndexFile(currentTaskid, isCleanup);\n     Path indexFilePath \u003d new Path(indexFile.getAbsolutePath());\n     Path tmpIndexFilePath \u003d new Path(tmpIndexFile.getAbsolutePath());\n \n     if (localFS \u003d\u003d null) {// set localFS once\n       localFS \u003d FileSystem.getLocal(new Configuration());\n     }\n     localFS.rename (tmpIndexFilePath, indexFilePath);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void writeToIndexFile(String logLocation,\n                                       boolean isCleanup) \n  throws IOException {\n    // To ensure atomicity of updates to index file, write to temporary index\n    // file first and then rename.\n    File tmpIndexFile \u003d getTmpIndexFile(currentTaskid, isCleanup);\n\n    BufferedOutputStream bos \u003d \n      new BufferedOutputStream(\n        SecureIOUtils.createForWrite(tmpIndexFile, 0644));\n    DataOutputStream dos \u003d new DataOutputStream(bos);\n    //the format of the index file is\n    //LOG_DIR: \u003cthe dir where the task logs are really stored\u003e\n    //STDOUT: \u003cstart-offset in the stdout file\u003e \u003clength\u003e\n    //STDERR: \u003cstart-offset in the stderr file\u003e \u003clength\u003e\n    //SYSLOG: \u003cstart-offset in the syslog file\u003e \u003clength\u003e   \n    try{\n      dos.writeBytes(LogFileDetail.LOCATION + logLocation + \"\\n\"\n          + LogName.STDOUT.toString() + \":\");\n      dos.writeBytes(Long.toString(prevOutLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.STDOUT\n          .toString()).length() - prevOutLength)\n          + \"\\n\" + LogName.STDERR + \":\");\n      dos.writeBytes(Long.toString(prevErrLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.STDERR\n          .toString()).length() - prevErrLength)\n          + \"\\n\" + LogName.SYSLOG.toString() + \":\");\n      dos.writeBytes(Long.toString(prevLogLength) + \" \");\n      dos.writeBytes(Long.toString(new File(logLocation, LogName.SYSLOG\n          .toString()).length() - prevLogLength)\n          + \"\\n\");\n      dos.close();\n      dos \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, dos);\n    }\n\n    File indexFile \u003d getIndexFile(currentTaskid, isCleanup);\n    Path indexFilePath \u003d new Path(indexFile.getAbsolutePath());\n    Path tmpIndexFilePath \u003d new Path(tmpIndexFile.getAbsolutePath());\n\n    if (localFS \u003d\u003d null) {// set localFS once\n      localFS \u003d FileSystem.getLocal(new Configuration());\n    }\n    localFS.rename (tmpIndexFilePath, indexFilePath);\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/TaskLog.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,41 @@\n+  private static void writeToIndexFile(String logLocation,\n+                                       boolean isCleanup) \n+  throws IOException {\n+    // To ensure atomicity of updates to index file, write to temporary index\n+    // file first and then rename.\n+    File tmpIndexFile \u003d getTmpIndexFile(currentTaskid, isCleanup);\n+\n+    BufferedOutputStream bos \u003d \n+      new BufferedOutputStream(\n+        SecureIOUtils.createForWrite(tmpIndexFile, 0644));\n+    DataOutputStream dos \u003d new DataOutputStream(bos);\n+    //the format of the index file is\n+    //LOG_DIR: \u003cthe dir where the task logs are really stored\u003e\n+    //STDOUT: \u003cstart-offset in the stdout file\u003e \u003clength\u003e\n+    //STDERR: \u003cstart-offset in the stderr file\u003e \u003clength\u003e\n+    //SYSLOG: \u003cstart-offset in the syslog file\u003e \u003clength\u003e    \n+    dos.writeBytes(LogFileDetail.LOCATION + logLocation + \"\\n\"\n+        + LogName.STDOUT.toString() + \":\");\n+    dos.writeBytes(Long.toString(prevOutLength) + \" \");\n+    dos.writeBytes(Long.toString(new File(logLocation, LogName.STDOUT\n+        .toString()).length() - prevOutLength)\n+        + \"\\n\" + LogName.STDERR + \":\");\n+    dos.writeBytes(Long.toString(prevErrLength) + \" \");\n+    dos.writeBytes(Long.toString(new File(logLocation, LogName.STDERR\n+        .toString()).length() - prevErrLength)\n+        + \"\\n\" + LogName.SYSLOG.toString() + \":\");\n+    dos.writeBytes(Long.toString(prevLogLength) + \" \");\n+    dos.writeBytes(Long.toString(new File(logLocation, LogName.SYSLOG\n+        .toString()).length() - prevLogLength)\n+        + \"\\n\");\n+    dos.close();\n+\n+    File indexFile \u003d getIndexFile(currentTaskid, isCleanup);\n+    Path indexFilePath \u003d new Path(indexFile.getAbsolutePath());\n+    Path tmpIndexFilePath \u003d new Path(tmpIndexFile.getAbsolutePath());\n+\n+    if (localFS \u003d\u003d null) {// set localFS once\n+      localFS \u003d FileSystem.getLocal(new Configuration());\n+    }\n+    localFS.rename (tmpIndexFilePath, indexFilePath);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void writeToIndexFile(String logLocation,\n                                       boolean isCleanup) \n  throws IOException {\n    // To ensure atomicity of updates to index file, write to temporary index\n    // file first and then rename.\n    File tmpIndexFile \u003d getTmpIndexFile(currentTaskid, isCleanup);\n\n    BufferedOutputStream bos \u003d \n      new BufferedOutputStream(\n        SecureIOUtils.createForWrite(tmpIndexFile, 0644));\n    DataOutputStream dos \u003d new DataOutputStream(bos);\n    //the format of the index file is\n    //LOG_DIR: \u003cthe dir where the task logs are really stored\u003e\n    //STDOUT: \u003cstart-offset in the stdout file\u003e \u003clength\u003e\n    //STDERR: \u003cstart-offset in the stderr file\u003e \u003clength\u003e\n    //SYSLOG: \u003cstart-offset in the syslog file\u003e \u003clength\u003e    \n    dos.writeBytes(LogFileDetail.LOCATION + logLocation + \"\\n\"\n        + LogName.STDOUT.toString() + \":\");\n    dos.writeBytes(Long.toString(prevOutLength) + \" \");\n    dos.writeBytes(Long.toString(new File(logLocation, LogName.STDOUT\n        .toString()).length() - prevOutLength)\n        + \"\\n\" + LogName.STDERR + \":\");\n    dos.writeBytes(Long.toString(prevErrLength) + \" \");\n    dos.writeBytes(Long.toString(new File(logLocation, LogName.STDERR\n        .toString()).length() - prevErrLength)\n        + \"\\n\" + LogName.SYSLOG.toString() + \":\");\n    dos.writeBytes(Long.toString(prevLogLength) + \" \");\n    dos.writeBytes(Long.toString(new File(logLocation, LogName.SYSLOG\n        .toString()).length() - prevLogLength)\n        + \"\\n\");\n    dos.close();\n\n    File indexFile \u003d getIndexFile(currentTaskid, isCleanup);\n    Path indexFilePath \u003d new Path(indexFile.getAbsolutePath());\n    Path tmpIndexFilePath \u003d new Path(tmpIndexFile.getAbsolutePath());\n\n    if (localFS \u003d\u003d null) {// set localFS once\n      localFS \u003d FileSystem.getLocal(new Configuration());\n    }\n    localFS.rename (tmpIndexFilePath, indexFilePath);\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/TaskLog.java"
    }
  }
}