{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ActiveStandbyElector.java",
  "functionName": "ensureParentZNode",
  "functionId": "ensureParentZNode",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
  "functionStartLine": 331,
  "functionEndLine": 367,
  "numCommitsSeen": 38,
  "timeTaken": 2311,
  "changeHistory": [
    "384764cdeac6490bc47fa0eb7b936baa4c0d3230",
    "0aacd8fd2530f9f5febbe81ec05cd958cc0c3e2c",
    "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18",
    "b74d7427855eb7e20be70155c11acac0e333bd6a",
    "31c2e3f29cbdc33a7333022d61130a25cee03684",
    "805c1280ce2773bc61ea718723b42b09d795688f"
  ],
  "changeHistoryShort": {
    "384764cdeac6490bc47fa0eb7b936baa4c0d3230": "Ymultichange(Yexceptionschange,Ybodychange)",
    "0aacd8fd2530f9f5febbe81ec05cd958cc0c3e2c": "Ybodychange",
    "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18": "Ybodychange",
    "b74d7427855eb7e20be70155c11acac0e333bd6a": "Ybodychange",
    "31c2e3f29cbdc33a7333022d61130a25cee03684": "Ybodychange",
    "805c1280ce2773bc61ea718723b42b09d795688f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "384764cdeac6490bc47fa0eb7b936baa4c0d3230": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-8409.  Fixed NPE in ActiveStandbyElectorBasedElectorService.\n            Contributed by Chandni Singh\n",
      "commitDate": "28/06/18 9:39 AM",
      "commitName": "384764cdeac6490bc47fa0eb7b936baa4c0d3230",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-8409.  Fixed NPE in ActiveStandbyElectorBasedElectorService.\n            Contributed by Chandni Singh\n",
          "commitDate": "28/06/18 9:39 AM",
          "commitName": "384764cdeac6490bc47fa0eb7b936baa4c0d3230",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "14/02/18 8:20 AM",
          "commitNameOld": "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 134.01,
          "commitsBetweenForRepo": 1570,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,37 @@\n   public synchronized void ensureParentZNode()\n-      throws IOException, InterruptedException {\n+      throws IOException, InterruptedException, KeeperException {\n     Preconditions.checkState(!wantToBeInElection,\n         \"ensureParentZNode() may not be called while in the election\");\n+    if (zkClient \u003d\u003d null) {\n+      createConnection();\n+    }\n \n     String pathParts[] \u003d znodeWorkingDir.split(\"/\");\n     Preconditions.checkArgument(pathParts.length \u003e\u003d 1 \u0026\u0026\n         pathParts[0].isEmpty(),\n         \"Invalid path: %s\", znodeWorkingDir);\n     \n     StringBuilder sb \u003d new StringBuilder();\n     for (int i \u003d 1; i \u003c pathParts.length; i++) {\n       sb.append(\"/\").append(pathParts[i]);\n       String prefixPath \u003d sb.toString();\n       LOG.debug(\"Ensuring existence of \" + prefixPath);\n       try {\n         createWithRetries(prefixPath, new byte[]{}, zkAcl, CreateMode.PERSISTENT);\n       } catch (KeeperException e) {\n         if (isNodeExists(e.code())) {\n           // Set ACLs for parent node, if they do not exist or are different\n           try {\n             setAclsWithRetries(prefixPath);\n           } catch (KeeperException e1) {\n             throw new IOException(\"Couldn\u0027t set ACLs on parent ZNode: \" +\n                 prefixPath, e1);\n           }\n         } else {\n           throw new IOException(\"Couldn\u0027t create \" + prefixPath, e);\n         }\n       }\n     }\n     \n     LOG.info(\"Successfully created \" + znodeWorkingDir + \" in ZK.\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void ensureParentZNode()\n      throws IOException, InterruptedException, KeeperException {\n    Preconditions.checkState(!wantToBeInElection,\n        \"ensureParentZNode() may not be called while in the election\");\n    if (zkClient \u003d\u003d null) {\n      createConnection();\n    }\n\n    String pathParts[] \u003d znodeWorkingDir.split(\"/\");\n    Preconditions.checkArgument(pathParts.length \u003e\u003d 1 \u0026\u0026\n        pathParts[0].isEmpty(),\n        \"Invalid path: %s\", znodeWorkingDir);\n    \n    StringBuilder sb \u003d new StringBuilder();\n    for (int i \u003d 1; i \u003c pathParts.length; i++) {\n      sb.append(\"/\").append(pathParts[i]);\n      String prefixPath \u003d sb.toString();\n      LOG.debug(\"Ensuring existence of \" + prefixPath);\n      try {\n        createWithRetries(prefixPath, new byte[]{}, zkAcl, CreateMode.PERSISTENT);\n      } catch (KeeperException e) {\n        if (isNodeExists(e.code())) {\n          // Set ACLs for parent node, if they do not exist or are different\n          try {\n            setAclsWithRetries(prefixPath);\n          } catch (KeeperException e1) {\n            throw new IOException(\"Couldn\u0027t set ACLs on parent ZNode: \" +\n                prefixPath, e1);\n          }\n        } else {\n          throw new IOException(\"Couldn\u0027t create \" + prefixPath, e);\n        }\n      }\n    }\n    \n    LOG.info(\"Successfully created \" + znodeWorkingDir + \" in ZK.\");\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
          "extendedDetails": {
            "oldValue": "[IOException, InterruptedException]",
            "newValue": "[IOException, InterruptedException, KeeperException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8409.  Fixed NPE in ActiveStandbyElectorBasedElectorService.\n            Contributed by Chandni Singh\n",
          "commitDate": "28/06/18 9:39 AM",
          "commitName": "384764cdeac6490bc47fa0eb7b936baa4c0d3230",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "14/02/18 8:20 AM",
          "commitNameOld": "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 134.01,
          "commitsBetweenForRepo": 1570,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,37 @@\n   public synchronized void ensureParentZNode()\n-      throws IOException, InterruptedException {\n+      throws IOException, InterruptedException, KeeperException {\n     Preconditions.checkState(!wantToBeInElection,\n         \"ensureParentZNode() may not be called while in the election\");\n+    if (zkClient \u003d\u003d null) {\n+      createConnection();\n+    }\n \n     String pathParts[] \u003d znodeWorkingDir.split(\"/\");\n     Preconditions.checkArgument(pathParts.length \u003e\u003d 1 \u0026\u0026\n         pathParts[0].isEmpty(),\n         \"Invalid path: %s\", znodeWorkingDir);\n     \n     StringBuilder sb \u003d new StringBuilder();\n     for (int i \u003d 1; i \u003c pathParts.length; i++) {\n       sb.append(\"/\").append(pathParts[i]);\n       String prefixPath \u003d sb.toString();\n       LOG.debug(\"Ensuring existence of \" + prefixPath);\n       try {\n         createWithRetries(prefixPath, new byte[]{}, zkAcl, CreateMode.PERSISTENT);\n       } catch (KeeperException e) {\n         if (isNodeExists(e.code())) {\n           // Set ACLs for parent node, if they do not exist or are different\n           try {\n             setAclsWithRetries(prefixPath);\n           } catch (KeeperException e1) {\n             throw new IOException(\"Couldn\u0027t set ACLs on parent ZNode: \" +\n                 prefixPath, e1);\n           }\n         } else {\n           throw new IOException(\"Couldn\u0027t create \" + prefixPath, e);\n         }\n       }\n     }\n     \n     LOG.info(\"Successfully created \" + znodeWorkingDir + \" in ZK.\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void ensureParentZNode()\n      throws IOException, InterruptedException, KeeperException {\n    Preconditions.checkState(!wantToBeInElection,\n        \"ensureParentZNode() may not be called while in the election\");\n    if (zkClient \u003d\u003d null) {\n      createConnection();\n    }\n\n    String pathParts[] \u003d znodeWorkingDir.split(\"/\");\n    Preconditions.checkArgument(pathParts.length \u003e\u003d 1 \u0026\u0026\n        pathParts[0].isEmpty(),\n        \"Invalid path: %s\", znodeWorkingDir);\n    \n    StringBuilder sb \u003d new StringBuilder();\n    for (int i \u003d 1; i \u003c pathParts.length; i++) {\n      sb.append(\"/\").append(pathParts[i]);\n      String prefixPath \u003d sb.toString();\n      LOG.debug(\"Ensuring existence of \" + prefixPath);\n      try {\n        createWithRetries(prefixPath, new byte[]{}, zkAcl, CreateMode.PERSISTENT);\n      } catch (KeeperException e) {\n        if (isNodeExists(e.code())) {\n          // Set ACLs for parent node, if they do not exist or are different\n          try {\n            setAclsWithRetries(prefixPath);\n          } catch (KeeperException e1) {\n            throw new IOException(\"Couldn\u0027t set ACLs on parent ZNode: \" +\n                prefixPath, e1);\n          }\n        } else {\n          throw new IOException(\"Couldn\u0027t create \" + prefixPath, e);\n        }\n      }\n    }\n    \n    LOG.info(\"Successfully created \" + znodeWorkingDir + \" in ZK.\");\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
          "extendedDetails": {}
        }
      ]
    },
    "0aacd8fd2530f9f5febbe81ec05cd958cc0c3e2c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11403. Zookeper ACLs on NN HA enabled clusters should be handled consistently. Contributed by Hanisha Koneru.\n",
      "commitDate": "11/02/17 1:17 AM",
      "commitName": "0aacd8fd2530f9f5febbe81ec05cd958cc0c3e2c",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "03/08/16 1:17 PM",
      "commitNameOld": "c82745432a962c817a8a7db92bb830fb6af01e33",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 191.54,
      "commitsBetweenForRepo": 1215,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,34 @@\n   public synchronized void ensureParentZNode()\n       throws IOException, InterruptedException {\n     Preconditions.checkState(!wantToBeInElection,\n         \"ensureParentZNode() may not be called while in the election\");\n \n     String pathParts[] \u003d znodeWorkingDir.split(\"/\");\n     Preconditions.checkArgument(pathParts.length \u003e\u003d 1 \u0026\u0026\n         pathParts[0].isEmpty(),\n         \"Invalid path: %s\", znodeWorkingDir);\n     \n     StringBuilder sb \u003d new StringBuilder();\n     for (int i \u003d 1; i \u003c pathParts.length; i++) {\n       sb.append(\"/\").append(pathParts[i]);\n       String prefixPath \u003d sb.toString();\n       LOG.debug(\"Ensuring existence of \" + prefixPath);\n       try {\n         createWithRetries(prefixPath, new byte[]{}, zkAcl, CreateMode.PERSISTENT);\n       } catch (KeeperException e) {\n         if (isNodeExists(e.code())) {\n-          // This is OK - just ensuring existence.\n-          continue;\n+          // Set ACLs for parent node, if they do not exist or are different\n+          try {\n+            setAclsWithRetries(prefixPath);\n+          } catch (KeeperException e1) {\n+            throw new IOException(\"Couldn\u0027t set ACLs on parent ZNode: \" +\n+                prefixPath, e1);\n+          }\n         } else {\n           throw new IOException(\"Couldn\u0027t create \" + prefixPath, e);\n         }\n       }\n     }\n     \n     LOG.info(\"Successfully created \" + znodeWorkingDir + \" in ZK.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void ensureParentZNode()\n      throws IOException, InterruptedException {\n    Preconditions.checkState(!wantToBeInElection,\n        \"ensureParentZNode() may not be called while in the election\");\n\n    String pathParts[] \u003d znodeWorkingDir.split(\"/\");\n    Preconditions.checkArgument(pathParts.length \u003e\u003d 1 \u0026\u0026\n        pathParts[0].isEmpty(),\n        \"Invalid path: %s\", znodeWorkingDir);\n    \n    StringBuilder sb \u003d new StringBuilder();\n    for (int i \u003d 1; i \u003c pathParts.length; i++) {\n      sb.append(\"/\").append(pathParts[i]);\n      String prefixPath \u003d sb.toString();\n      LOG.debug(\"Ensuring existence of \" + prefixPath);\n      try {\n        createWithRetries(prefixPath, new byte[]{}, zkAcl, CreateMode.PERSISTENT);\n      } catch (KeeperException e) {\n        if (isNodeExists(e.code())) {\n          // Set ACLs for parent node, if they do not exist or are different\n          try {\n            setAclsWithRetries(prefixPath);\n          } catch (KeeperException e1) {\n            throw new IOException(\"Couldn\u0027t set ACLs on parent ZNode: \" +\n                prefixPath, e1);\n          }\n        } else {\n          throw new IOException(\"Couldn\u0027t create \" + prefixPath, e);\n        }\n      }\n    }\n    \n    LOG.info(\"Successfully created \" + znodeWorkingDir + \" in ZK.\");\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8814. Replace string equals  by String#isEmpty(). Contributed by Brandon Li.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1387853 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/09/12 9:06 PM",
      "commitName": "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 26.13,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   public synchronized void ensureParentZNode()\n       throws IOException, InterruptedException {\n     Preconditions.checkState(!wantToBeInElection,\n         \"ensureParentZNode() may not be called while in the election\");\n \n     String pathParts[] \u003d znodeWorkingDir.split(\"/\");\n     Preconditions.checkArgument(pathParts.length \u003e\u003d 1 \u0026\u0026\n-        \"\".equals(pathParts[0]),\n+        pathParts[0].isEmpty(),\n         \"Invalid path: %s\", znodeWorkingDir);\n     \n     StringBuilder sb \u003d new StringBuilder();\n     for (int i \u003d 1; i \u003c pathParts.length; i++) {\n       sb.append(\"/\").append(pathParts[i]);\n       String prefixPath \u003d sb.toString();\n       LOG.debug(\"Ensuring existence of \" + prefixPath);\n       try {\n         createWithRetries(prefixPath, new byte[]{}, zkAcl, CreateMode.PERSISTENT);\n       } catch (KeeperException e) {\n         if (isNodeExists(e.code())) {\n           // This is OK - just ensuring existence.\n           continue;\n         } else {\n           throw new IOException(\"Couldn\u0027t create \" + prefixPath, e);\n         }\n       }\n     }\n     \n     LOG.info(\"Successfully created \" + znodeWorkingDir + \" in ZK.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void ensureParentZNode()\n      throws IOException, InterruptedException {\n    Preconditions.checkState(!wantToBeInElection,\n        \"ensureParentZNode() may not be called while in the election\");\n\n    String pathParts[] \u003d znodeWorkingDir.split(\"/\");\n    Preconditions.checkArgument(pathParts.length \u003e\u003d 1 \u0026\u0026\n        pathParts[0].isEmpty(),\n        \"Invalid path: %s\", znodeWorkingDir);\n    \n    StringBuilder sb \u003d new StringBuilder();\n    for (int i \u003d 1; i \u003c pathParts.length; i++) {\n      sb.append(\"/\").append(pathParts[i]);\n      String prefixPath \u003d sb.toString();\n      LOG.debug(\"Ensuring existence of \" + prefixPath);\n      try {\n        createWithRetries(prefixPath, new byte[]{}, zkAcl, CreateMode.PERSISTENT);\n      } catch (KeeperException e) {\n        if (isNodeExists(e.code())) {\n          // This is OK - just ensuring existence.\n          continue;\n        } else {\n          throw new IOException(\"Couldn\u0027t create \" + prefixPath, e);\n        }\n      }\n    }\n    \n    LOG.info(\"Successfully created \" + znodeWorkingDir + \" in ZK.\");\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "b74d7427855eb7e20be70155c11acac0e333bd6a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8245. Fix flakiness in TestZKFailoverController. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1309554 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/04/12 12:21 PM",
      "commitName": "b74d7427855eb7e20be70155c11acac0e333bd6a",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "03/04/12 4:37 PM",
      "commitNameOld": "30e1b3bba856b2379a0dc1e7450512427d39c5d7",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.82,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,29 @@\n   public synchronized void ensureParentZNode()\n       throws IOException, InterruptedException {\n+    Preconditions.checkState(!wantToBeInElection,\n+        \"ensureParentZNode() may not be called while in the election\");\n+\n     String pathParts[] \u003d znodeWorkingDir.split(\"/\");\n     Preconditions.checkArgument(pathParts.length \u003e\u003d 1 \u0026\u0026\n         \"\".equals(pathParts[0]),\n         \"Invalid path: %s\", znodeWorkingDir);\n     \n     StringBuilder sb \u003d new StringBuilder();\n     for (int i \u003d 1; i \u003c pathParts.length; i++) {\n       sb.append(\"/\").append(pathParts[i]);\n       String prefixPath \u003d sb.toString();\n       LOG.debug(\"Ensuring existence of \" + prefixPath);\n       try {\n         createWithRetries(prefixPath, new byte[]{}, zkAcl, CreateMode.PERSISTENT);\n       } catch (KeeperException e) {\n         if (isNodeExists(e.code())) {\n           // This is OK - just ensuring existence.\n           continue;\n         } else {\n           throw new IOException(\"Couldn\u0027t create \" + prefixPath, e);\n         }\n       }\n     }\n     \n     LOG.info(\"Successfully created \" + znodeWorkingDir + \" in ZK.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void ensureParentZNode()\n      throws IOException, InterruptedException {\n    Preconditions.checkState(!wantToBeInElection,\n        \"ensureParentZNode() may not be called while in the election\");\n\n    String pathParts[] \u003d znodeWorkingDir.split(\"/\");\n    Preconditions.checkArgument(pathParts.length \u003e\u003d 1 \u0026\u0026\n        \"\".equals(pathParts[0]),\n        \"Invalid path: %s\", znodeWorkingDir);\n    \n    StringBuilder sb \u003d new StringBuilder();\n    for (int i \u003d 1; i \u003c pathParts.length; i++) {\n      sb.append(\"/\").append(pathParts[i]);\n      String prefixPath \u003d sb.toString();\n      LOG.debug(\"Ensuring existence of \" + prefixPath);\n      try {\n        createWithRetries(prefixPath, new byte[]{}, zkAcl, CreateMode.PERSISTENT);\n      } catch (KeeperException e) {\n        if (isNodeExists(e.code())) {\n          // This is OK - just ensuring existence.\n          continue;\n        } else {\n          throw new IOException(\"Couldn\u0027t create \" + prefixPath, e);\n        }\n      }\n    }\n    \n    LOG.info(\"Successfully created \" + znodeWorkingDir + \" in ZK.\");\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "31c2e3f29cbdc33a7333022d61130a25cee03684": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8212. Improve ActiveStandbyElector\u0027s behavior when session expires. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305510 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/12 12:31 PM",
      "commitName": "31c2e3f29cbdc33a7333022d61130a25cee03684",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "23/03/12 5:05 PM",
      "commitNameOld": "805c1280ce2773bc61ea718723b42b09d795688f",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 2.81,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   public synchronized void ensureParentZNode()\n       throws IOException, InterruptedException {\n     String pathParts[] \u003d znodeWorkingDir.split(\"/\");\n     Preconditions.checkArgument(pathParts.length \u003e\u003d 1 \u0026\u0026\n         \"\".equals(pathParts[0]),\n         \"Invalid path: %s\", znodeWorkingDir);\n     \n     StringBuilder sb \u003d new StringBuilder();\n     for (int i \u003d 1; i \u003c pathParts.length; i++) {\n       sb.append(\"/\").append(pathParts[i]);\n       String prefixPath \u003d sb.toString();\n       LOG.debug(\"Ensuring existence of \" + prefixPath);\n       try {\n         createWithRetries(prefixPath, new byte[]{}, zkAcl, CreateMode.PERSISTENT);\n       } catch (KeeperException e) {\n         if (isNodeExists(e.code())) {\n           // This is OK - just ensuring existence.\n           continue;\n         } else {\n           throw new IOException(\"Couldn\u0027t create \" + prefixPath, e);\n         }\n       }\n     }\n+    \n+    LOG.info(\"Successfully created \" + znodeWorkingDir + \" in ZK.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void ensureParentZNode()\n      throws IOException, InterruptedException {\n    String pathParts[] \u003d znodeWorkingDir.split(\"/\");\n    Preconditions.checkArgument(pathParts.length \u003e\u003d 1 \u0026\u0026\n        \"\".equals(pathParts[0]),\n        \"Invalid path: %s\", znodeWorkingDir);\n    \n    StringBuilder sb \u003d new StringBuilder();\n    for (int i \u003d 1; i \u003c pathParts.length; i++) {\n      sb.append(\"/\").append(pathParts[i]);\n      String prefixPath \u003d sb.toString();\n      LOG.debug(\"Ensuring existence of \" + prefixPath);\n      try {\n        createWithRetries(prefixPath, new byte[]{}, zkAcl, CreateMode.PERSISTENT);\n      } catch (KeeperException e) {\n        if (isNodeExists(e.code())) {\n          // This is OK - just ensuring existence.\n          continue;\n        } else {\n          throw new IOException(\"Couldn\u0027t create \" + prefixPath, e);\n        }\n      }\n    }\n    \n    LOG.info(\"Successfully created \" + znodeWorkingDir + \" in ZK.\");\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "805c1280ce2773bc61ea718723b42b09d795688f": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8163. Improve ActiveStandbyElector to provide hooks for fencing old active. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1304675 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/03/12 5:05 PM",
      "commitName": "805c1280ce2773bc61ea718723b42b09d795688f",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,24 @@\n+  public synchronized void ensureParentZNode()\n+      throws IOException, InterruptedException {\n+    String pathParts[] \u003d znodeWorkingDir.split(\"/\");\n+    Preconditions.checkArgument(pathParts.length \u003e\u003d 1 \u0026\u0026\n+        \"\".equals(pathParts[0]),\n+        \"Invalid path: %s\", znodeWorkingDir);\n+    \n+    StringBuilder sb \u003d new StringBuilder();\n+    for (int i \u003d 1; i \u003c pathParts.length; i++) {\n+      sb.append(\"/\").append(pathParts[i]);\n+      String prefixPath \u003d sb.toString();\n+      LOG.debug(\"Ensuring existence of \" + prefixPath);\n+      try {\n+        createWithRetries(prefixPath, new byte[]{}, zkAcl, CreateMode.PERSISTENT);\n+      } catch (KeeperException e) {\n+        if (isNodeExists(e.code())) {\n+          // This is OK - just ensuring existence.\n+          continue;\n+        } else {\n+          throw new IOException(\"Couldn\u0027t create \" + prefixPath, e);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void ensureParentZNode()\n      throws IOException, InterruptedException {\n    String pathParts[] \u003d znodeWorkingDir.split(\"/\");\n    Preconditions.checkArgument(pathParts.length \u003e\u003d 1 \u0026\u0026\n        \"\".equals(pathParts[0]),\n        \"Invalid path: %s\", znodeWorkingDir);\n    \n    StringBuilder sb \u003d new StringBuilder();\n    for (int i \u003d 1; i \u003c pathParts.length; i++) {\n      sb.append(\"/\").append(pathParts[i]);\n      String prefixPath \u003d sb.toString();\n      LOG.debug(\"Ensuring existence of \" + prefixPath);\n      try {\n        createWithRetries(prefixPath, new byte[]{}, zkAcl, CreateMode.PERSISTENT);\n      } catch (KeeperException e) {\n        if (isNodeExists(e.code())) {\n          // This is OK - just ensuring existence.\n          continue;\n        } else {\n          throw new IOException(\"Couldn\u0027t create \" + prefixPath, e);\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java"
    }
  }
}