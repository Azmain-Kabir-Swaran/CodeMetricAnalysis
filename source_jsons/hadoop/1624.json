{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReplaceDatanodeOnFailure.java",
  "functionName": "satisfy",
  "functionId": "satisfy___replication-short(modifiers-final)__existings-DatanodeInfo[](modifiers-final)__isAppend-boolean(modifiers-final)__isHflushed-boolean(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
  "functionStartLine": 128,
  "functionEndLine": 136,
  "numCommitsSeen": 8,
  "timeTaken": 5345,
  "changeHistory": [
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "727331becc3902cb4e60ee04741e79703238e782",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "727331becc3902cb4e60ee04741e79703238e782": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 11:08 AM",
      "commitNameOld": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 7.02,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,9 @@\n   public boolean satisfy(\n       final short replication, final DatanodeInfo[] existings,\n       final boolean isAppend, final boolean isHflushed) {\n-    final int n \u003d existings \u003d\u003d null? 0: existings.length;\n-    if (n \u003d\u003d 0 || n \u003e\u003d replication) {\n-      //don\u0027t need to add datanode for any policy.\n-      return false;\n-    } else {\n-      return policy.getCondition().satisfy(\n-          replication, existings, n, isAppend, isHflushed);\n-    }\n+    final int n \u003d existings \u003d\u003d null ? 0 : existings.length;\n+    //don\u0027t need to add datanode for any policy.\n+    return !(n \u003d\u003d 0 || n \u003e\u003d replication) \u0026\u0026\n+        policy.getCondition().satisfy(replication, existings, n, isAppend,\n+            isHflushed);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean satisfy(\n      final short replication, final DatanodeInfo[] existings,\n      final boolean isAppend, final boolean isHflushed) {\n    final int n \u003d existings \u003d\u003d null ? 0 : existings.length;\n    //don\u0027t need to add datanode for any policy.\n    return !(n \u003d\u003d 0 || n \u003e\u003d replication) \u0026\u0026\n        policy.getCondition().satisfy(replication, existings, n, isAppend,\n            isHflushed);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean satisfy(\n      final short replication, final DatanodeInfo[] existings,\n      final boolean isAppend, final boolean isHflushed) {\n    final int n \u003d existings \u003d\u003d null? 0: existings.length;\n    if (n \u003d\u003d 0 || n \u003e\u003d replication) {\n      //don\u0027t need to add datanode for any policy.\n      return false;\n    } else {\n      return policy.getCondition().satisfy(\n          replication, existings, n, isAppend, isHflushed);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java"
      }
    },
    "727331becc3902cb4e60ee04741e79703238e782": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4257. The ReplaceDatanodeOnFailure policies could have a forgiving option.  Contributed by szetszwo.\n",
      "commitDate": "02/09/14 3:14 PM",
      "commitName": "727331becc3902cb4e60ee04741e79703238e782",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1104.92,
      "commitsBetweenForRepo": 7171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,12 @@\n   public boolean satisfy(\n       final short replication, final DatanodeInfo[] existings,\n       final boolean isAppend, final boolean isHflushed) {\n     final int n \u003d existings \u003d\u003d null? 0: existings.length;\n     if (n \u003d\u003d 0 || n \u003e\u003d replication) {\n       //don\u0027t need to add datanode for any policy.\n       return false;\n-    } else if (this \u003d\u003d DISABLE || this \u003d\u003d NEVER) {\n-      return false;\n-    } else if (this \u003d\u003d ALWAYS) {\n-      return true;\n     } else {\n-      //DEFAULT\n-      if (replication \u003c 3) {\n-        return false;\n-      } else {\n-        if (n \u003c\u003d (replication/2)) {\n-          return true;\n-        } else {\n-          return isAppend || isHflushed;\n-        }\n-      }\n+      return policy.getCondition().satisfy(\n+          replication, existings, n, isAppend, isHflushed);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean satisfy(\n      final short replication, final DatanodeInfo[] existings,\n      final boolean isAppend, final boolean isHflushed) {\n    final int n \u003d existings \u003d\u003d null? 0: existings.length;\n    if (n \u003d\u003d 0 || n \u003e\u003d replication) {\n      //don\u0027t need to add datanode for any policy.\n      return false;\n    } else {\n      return policy.getCondition().satisfy(\n          replication, existings, n, isAppend, isHflushed);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean satisfy(\n      final short replication, final DatanodeInfo[] existings,\n      final boolean isAppend, final boolean isHflushed) {\n    final int n \u003d existings \u003d\u003d null? 0: existings.length;\n    if (n \u003d\u003d 0 || n \u003e\u003d replication) {\n      //don\u0027t need to add datanode for any policy.\n      return false;\n    } else if (this \u003d\u003d DISABLE || this \u003d\u003d NEVER) {\n      return false;\n    } else if (this \u003d\u003d ALWAYS) {\n      return true;\n    } else {\n      //DEFAULT\n      if (replication \u003c 3) {\n        return false;\n      } else {\n        if (n \u003c\u003d (replication/2)) {\n          return true;\n        } else {\n          return isAppend || isHflushed;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean satisfy(\n      final short replication, final DatanodeInfo[] existings,\n      final boolean isAppend, final boolean isHflushed) {\n    final int n \u003d existings \u003d\u003d null? 0: existings.length;\n    if (n \u003d\u003d 0 || n \u003e\u003d replication) {\n      //don\u0027t need to add datanode for any policy.\n      return false;\n    } else if (this \u003d\u003d DISABLE || this \u003d\u003d NEVER) {\n      return false;\n    } else if (this \u003d\u003d ALWAYS) {\n      return true;\n    } else {\n      //DEFAULT\n      if (replication \u003c 3) {\n        return false;\n      } else {\n        if (n \u003c\u003d (replication/2)) {\n          return true;\n        } else {\n          return isAppend || isHflushed;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,24 @@\n+  public boolean satisfy(\n+      final short replication, final DatanodeInfo[] existings,\n+      final boolean isAppend, final boolean isHflushed) {\n+    final int n \u003d existings \u003d\u003d null? 0: existings.length;\n+    if (n \u003d\u003d 0 || n \u003e\u003d replication) {\n+      //don\u0027t need to add datanode for any policy.\n+      return false;\n+    } else if (this \u003d\u003d DISABLE || this \u003d\u003d NEVER) {\n+      return false;\n+    } else if (this \u003d\u003d ALWAYS) {\n+      return true;\n+    } else {\n+      //DEFAULT\n+      if (replication \u003c 3) {\n+        return false;\n+      } else {\n+        if (n \u003c\u003d (replication/2)) {\n+          return true;\n+        } else {\n+          return isAppend || isHflushed;\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean satisfy(\n      final short replication, final DatanodeInfo[] existings,\n      final boolean isAppend, final boolean isHflushed) {\n    final int n \u003d existings \u003d\u003d null? 0: existings.length;\n    if (n \u003d\u003d 0 || n \u003e\u003d replication) {\n      //don\u0027t need to add datanode for any policy.\n      return false;\n    } else if (this \u003d\u003d DISABLE || this \u003d\u003d NEVER) {\n      return false;\n    } else if (this \u003d\u003d ALWAYS) {\n      return true;\n    } else {\n      //DEFAULT\n      if (replication \u003c 3) {\n        return false;\n      } else {\n        if (n \u003c\u003d (replication/2)) {\n          return true;\n        } else {\n          return isAppend || isHflushed;\n        }\n      }\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure.java"
    }
  }
}