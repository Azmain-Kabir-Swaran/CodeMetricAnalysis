{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CopyCommitter.java",
  "functionName": "preserveFileAttributesForDirectories",
  "functionId": "preserveFileAttributesForDirectories___conf-Configuration",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyCommitter.java",
  "functionStartLine": 305,
  "functionEndLine": 353,
  "numCommitsSeen": 23,
  "timeTaken": 1101,
  "changeHistory": [
    "041b8326a1511b721958792a6b94ecfe27d7a1fb",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
    "640a097533e0883bf49504673228d5a327089b44",
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67"
  ],
  "changeHistoryShort": {
    "041b8326a1511b721958792a6b94ecfe27d7a1fb": "Ybodychange",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": "Ybodychange",
    "640a097533e0883bf49504673228d5a327089b44": "Ybodychange",
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67": "Yintroduced"
  },
  "changeHistoryDetails": {
    "041b8326a1511b721958792a6b94ecfe27d7a1fb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6007. Add support to distcp to preserve raw.* namespace extended attributes. (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1616657 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/14 6:32 PM",
      "commitName": "041b8326a1511b721958792a6b94ecfe27d7a1fb",
      "commitAuthor": "Charles Lamb",
      "commitDateOld": "16/05/14 11:25 AM",
      "commitNameOld": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 83.3,
      "commitsBetweenForRepo": 591,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,48 @@\n   private void preserveFileAttributesForDirectories(Configuration conf) throws IOException {\n     String attrSymbols \u003d conf.get(DistCpConstants.CONF_LABEL_PRESERVE_STATUS);\n     final boolean syncOrOverwrite \u003d syncFolder || overwrite;\n \n     LOG.info(\"About to preserve attributes: \" + attrSymbols);\n \n     EnumSet\u003cFileAttribute\u003e attributes \u003d DistCpUtils.unpackAttributes(attrSymbols);\n+    final boolean preserveRawXattrs \u003d\n+        conf.getBoolean(DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);\n \n     Path sourceListing \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_LISTING_FILE_PATH));\n     FileSystem clusterFS \u003d sourceListing.getFileSystem(conf);\n     SequenceFile.Reader sourceReader \u003d new SequenceFile.Reader(conf,\n                                       SequenceFile.Reader.file(sourceListing));\n     long totalLen \u003d clusterFS.getFileStatus(sourceListing).getLen();\n \n     Path targetRoot \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n \n     long preservedEntries \u003d 0;\n     try {\n       CopyListingFileStatus srcFileStatus \u003d new CopyListingFileStatus();\n       Text srcRelPath \u003d new Text();\n \n       // Iterate over every source path that was copied.\n       while (sourceReader.next(srcRelPath, srcFileStatus)) {\n         // File-attributes for files are set at the time of copy,\n         // in the map-task.\n         if (! srcFileStatus.isDirectory()) continue;\n \n         Path targetFile \u003d new Path(targetRoot.toString() + \"/\" + srcRelPath);\n         //\n         // Skip the root folder when syncOrOverwrite is true.\n         //\n         if (targetRoot.equals(targetFile) \u0026\u0026 syncOrOverwrite) continue;\n \n         FileSystem targetFS \u003d targetFile.getFileSystem(conf);\n-        DistCpUtils.preserve(targetFS, targetFile, srcFileStatus,  attributes);\n+        DistCpUtils.preserve(targetFS, targetFile, srcFileStatus, attributes,\n+            preserveRawXattrs);\n \n         taskAttemptContext.progress();\n         taskAttemptContext.setStatus(\"Preserving status on directory entries. [\" +\n             sourceReader.getPosition() * 100 / totalLen + \"%]\");\n       }\n     } finally {\n       IOUtils.closeStream(sourceReader);\n     }\n     LOG.info(\"Preserved status on \" + preservedEntries + \" dir entries on target\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void preserveFileAttributesForDirectories(Configuration conf) throws IOException {\n    String attrSymbols \u003d conf.get(DistCpConstants.CONF_LABEL_PRESERVE_STATUS);\n    final boolean syncOrOverwrite \u003d syncFolder || overwrite;\n\n    LOG.info(\"About to preserve attributes: \" + attrSymbols);\n\n    EnumSet\u003cFileAttribute\u003e attributes \u003d DistCpUtils.unpackAttributes(attrSymbols);\n    final boolean preserveRawXattrs \u003d\n        conf.getBoolean(DistCpConstants.CONF_LABEL_PRESERVE_RAWXATTRS, false);\n\n    Path sourceListing \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_LISTING_FILE_PATH));\n    FileSystem clusterFS \u003d sourceListing.getFileSystem(conf);\n    SequenceFile.Reader sourceReader \u003d new SequenceFile.Reader(conf,\n                                      SequenceFile.Reader.file(sourceListing));\n    long totalLen \u003d clusterFS.getFileStatus(sourceListing).getLen();\n\n    Path targetRoot \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n\n    long preservedEntries \u003d 0;\n    try {\n      CopyListingFileStatus srcFileStatus \u003d new CopyListingFileStatus();\n      Text srcRelPath \u003d new Text();\n\n      // Iterate over every source path that was copied.\n      while (sourceReader.next(srcRelPath, srcFileStatus)) {\n        // File-attributes for files are set at the time of copy,\n        // in the map-task.\n        if (! srcFileStatus.isDirectory()) continue;\n\n        Path targetFile \u003d new Path(targetRoot.toString() + \"/\" + srcRelPath);\n        //\n        // Skip the root folder when syncOrOverwrite is true.\n        //\n        if (targetRoot.equals(targetFile) \u0026\u0026 syncOrOverwrite) continue;\n\n        FileSystem targetFS \u003d targetFile.getFileSystem(conf);\n        DistCpUtils.preserve(targetFS, targetFile, srcFileStatus, attributes,\n            preserveRawXattrs);\n\n        taskAttemptContext.progress();\n        taskAttemptContext.setStatus(\"Preserving status on directory entries. [\" +\n            sourceReader.getPosition() * 100 / totalLen + \"%]\");\n      }\n    } finally {\n      IOUtils.closeStream(sourceReader);\n    }\n    LOG.info(\"Preserved status on \" + preservedEntries + \" dir entries on target\");\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyCommitter.java",
      "extendedDetails": {}
    },
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5809. Enhance distcp to support preserving HDFS ACLs. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/14 11:25 AM",
      "commitName": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "02/04/14 5:32 PM",
      "commitNameOld": "640a097533e0883bf49504673228d5a327089b44",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 43.75,
      "commitsBetweenForRepo": 263,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   private void preserveFileAttributesForDirectories(Configuration conf) throws IOException {\n     String attrSymbols \u003d conf.get(DistCpConstants.CONF_LABEL_PRESERVE_STATUS);\n     final boolean syncOrOverwrite \u003d syncFolder || overwrite;\n \n     LOG.info(\"About to preserve attributes: \" + attrSymbols);\n \n     EnumSet\u003cFileAttribute\u003e attributes \u003d DistCpUtils.unpackAttributes(attrSymbols);\n \n     Path sourceListing \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_LISTING_FILE_PATH));\n     FileSystem clusterFS \u003d sourceListing.getFileSystem(conf);\n     SequenceFile.Reader sourceReader \u003d new SequenceFile.Reader(conf,\n                                       SequenceFile.Reader.file(sourceListing));\n     long totalLen \u003d clusterFS.getFileStatus(sourceListing).getLen();\n \n     Path targetRoot \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n \n     long preservedEntries \u003d 0;\n     try {\n-      FileStatus srcFileStatus \u003d new FileStatus();\n+      CopyListingFileStatus srcFileStatus \u003d new CopyListingFileStatus();\n       Text srcRelPath \u003d new Text();\n \n       // Iterate over every source path that was copied.\n       while (sourceReader.next(srcRelPath, srcFileStatus)) {\n         // File-attributes for files are set at the time of copy,\n         // in the map-task.\n         if (! srcFileStatus.isDirectory()) continue;\n \n         Path targetFile \u003d new Path(targetRoot.toString() + \"/\" + srcRelPath);\n         //\n         // Skip the root folder when syncOrOverwrite is true.\n         //\n         if (targetRoot.equals(targetFile) \u0026\u0026 syncOrOverwrite) continue;\n \n         FileSystem targetFS \u003d targetFile.getFileSystem(conf);\n         DistCpUtils.preserve(targetFS, targetFile, srcFileStatus,  attributes);\n \n         taskAttemptContext.progress();\n         taskAttemptContext.setStatus(\"Preserving status on directory entries. [\" +\n             sourceReader.getPosition() * 100 / totalLen + \"%]\");\n       }\n     } finally {\n       IOUtils.closeStream(sourceReader);\n     }\n     LOG.info(\"Preserved status on \" + preservedEntries + \" dir entries on target\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void preserveFileAttributesForDirectories(Configuration conf) throws IOException {\n    String attrSymbols \u003d conf.get(DistCpConstants.CONF_LABEL_PRESERVE_STATUS);\n    final boolean syncOrOverwrite \u003d syncFolder || overwrite;\n\n    LOG.info(\"About to preserve attributes: \" + attrSymbols);\n\n    EnumSet\u003cFileAttribute\u003e attributes \u003d DistCpUtils.unpackAttributes(attrSymbols);\n\n    Path sourceListing \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_LISTING_FILE_PATH));\n    FileSystem clusterFS \u003d sourceListing.getFileSystem(conf);\n    SequenceFile.Reader sourceReader \u003d new SequenceFile.Reader(conf,\n                                      SequenceFile.Reader.file(sourceListing));\n    long totalLen \u003d clusterFS.getFileStatus(sourceListing).getLen();\n\n    Path targetRoot \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n\n    long preservedEntries \u003d 0;\n    try {\n      CopyListingFileStatus srcFileStatus \u003d new CopyListingFileStatus();\n      Text srcRelPath \u003d new Text();\n\n      // Iterate over every source path that was copied.\n      while (sourceReader.next(srcRelPath, srcFileStatus)) {\n        // File-attributes for files are set at the time of copy,\n        // in the map-task.\n        if (! srcFileStatus.isDirectory()) continue;\n\n        Path targetFile \u003d new Path(targetRoot.toString() + \"/\" + srcRelPath);\n        //\n        // Skip the root folder when syncOrOverwrite is true.\n        //\n        if (targetRoot.equals(targetFile) \u0026\u0026 syncOrOverwrite) continue;\n\n        FileSystem targetFS \u003d targetFile.getFileSystem(conf);\n        DistCpUtils.preserve(targetFS, targetFile, srcFileStatus,  attributes);\n\n        taskAttemptContext.progress();\n        taskAttemptContext.setStatus(\"Preserving status on directory entries. [\" +\n            sourceReader.getPosition() * 100 / totalLen + \"%]\");\n      }\n    } finally {\n      IOUtils.closeStream(sourceReader);\n    }\n    LOG.info(\"Preserved status on \" + preservedEntries + \" dir entries on target\");\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyCommitter.java",
      "extendedDetails": {}
    },
    "640a097533e0883bf49504673228d5a327089b44": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10459. distcp V2 doesn\u0027t preserve root dir\u0027s attributes when -p is specified. Contributed by Yongjun Zhang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1584227 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/14 5:32 PM",
      "commitName": "640a097533e0883bf49504673228d5a327089b44",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "25/01/12 10:36 PM",
      "commitNameOld": "d06948002fb0cabf72cc0d46bf2fa67d45370f67",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 797.75,
      "commitsBetweenForRepo": 5080,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   private void preserveFileAttributesForDirectories(Configuration conf) throws IOException {\n     String attrSymbols \u003d conf.get(DistCpConstants.CONF_LABEL_PRESERVE_STATUS);\n+    final boolean syncOrOverwrite \u003d syncFolder || overwrite;\n+\n     LOG.info(\"About to preserve attributes: \" + attrSymbols);\n \n     EnumSet\u003cFileAttribute\u003e attributes \u003d DistCpUtils.unpackAttributes(attrSymbols);\n \n     Path sourceListing \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_LISTING_FILE_PATH));\n     FileSystem clusterFS \u003d sourceListing.getFileSystem(conf);\n     SequenceFile.Reader sourceReader \u003d new SequenceFile.Reader(conf,\n                                       SequenceFile.Reader.file(sourceListing));\n     long totalLen \u003d clusterFS.getFileStatus(sourceListing).getLen();\n \n     Path targetRoot \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n \n     long preservedEntries \u003d 0;\n     try {\n       FileStatus srcFileStatus \u003d new FileStatus();\n       Text srcRelPath \u003d new Text();\n \n       // Iterate over every source path that was copied.\n       while (sourceReader.next(srcRelPath, srcFileStatus)) {\n         // File-attributes for files are set at the time of copy,\n         // in the map-task.\n         if (! srcFileStatus.isDirectory()) continue;\n \n         Path targetFile \u003d new Path(targetRoot.toString() + \"/\" + srcRelPath);\n-\n-        // Skip the root folder.\n-        // Status can\u0027t be preserved on root-folder. (E.g. multiple paths may\n-        // be copied to a single target folder. Which source-attributes to use\n-        // on the target is undefined.)\n-        if (targetRoot.equals(targetFile)) continue;\n+        //\n+        // Skip the root folder when syncOrOverwrite is true.\n+        //\n+        if (targetRoot.equals(targetFile) \u0026\u0026 syncOrOverwrite) continue;\n \n         FileSystem targetFS \u003d targetFile.getFileSystem(conf);\n         DistCpUtils.preserve(targetFS, targetFile, srcFileStatus,  attributes);\n \n         taskAttemptContext.progress();\n         taskAttemptContext.setStatus(\"Preserving status on directory entries. [\" +\n             sourceReader.getPosition() * 100 / totalLen + \"%]\");\n       }\n     } finally {\n       IOUtils.closeStream(sourceReader);\n     }\n     LOG.info(\"Preserved status on \" + preservedEntries + \" dir entries on target\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void preserveFileAttributesForDirectories(Configuration conf) throws IOException {\n    String attrSymbols \u003d conf.get(DistCpConstants.CONF_LABEL_PRESERVE_STATUS);\n    final boolean syncOrOverwrite \u003d syncFolder || overwrite;\n\n    LOG.info(\"About to preserve attributes: \" + attrSymbols);\n\n    EnumSet\u003cFileAttribute\u003e attributes \u003d DistCpUtils.unpackAttributes(attrSymbols);\n\n    Path sourceListing \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_LISTING_FILE_PATH));\n    FileSystem clusterFS \u003d sourceListing.getFileSystem(conf);\n    SequenceFile.Reader sourceReader \u003d new SequenceFile.Reader(conf,\n                                      SequenceFile.Reader.file(sourceListing));\n    long totalLen \u003d clusterFS.getFileStatus(sourceListing).getLen();\n\n    Path targetRoot \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n\n    long preservedEntries \u003d 0;\n    try {\n      FileStatus srcFileStatus \u003d new FileStatus();\n      Text srcRelPath \u003d new Text();\n\n      // Iterate over every source path that was copied.\n      while (sourceReader.next(srcRelPath, srcFileStatus)) {\n        // File-attributes for files are set at the time of copy,\n        // in the map-task.\n        if (! srcFileStatus.isDirectory()) continue;\n\n        Path targetFile \u003d new Path(targetRoot.toString() + \"/\" + srcRelPath);\n        //\n        // Skip the root folder when syncOrOverwrite is true.\n        //\n        if (targetRoot.equals(targetFile) \u0026\u0026 syncOrOverwrite) continue;\n\n        FileSystem targetFS \u003d targetFile.getFileSystem(conf);\n        DistCpUtils.preserve(targetFS, targetFile, srcFileStatus,  attributes);\n\n        taskAttemptContext.progress();\n        taskAttemptContext.setStatus(\"Preserving status on directory entries. [\" +\n            sourceReader.getPosition() * 100 / totalLen + \"%]\");\n      }\n    } finally {\n      IOUtils.closeStream(sourceReader);\n    }\n    LOG.info(\"Preserved status on \" + preservedEntries + \" dir entries on target\");\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyCommitter.java",
      "extendedDetails": {}
    },
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2765. DistCp Rewrite. (Mithun Radhakrishnan via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236045 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 10:36 PM",
      "commitName": "d06948002fb0cabf72cc0d46bf2fa67d45370f67",
      "commitAuthor": "Mahadev Konar",
      "diff": "@@ -0,0 +1,45 @@\n+  private void preserveFileAttributesForDirectories(Configuration conf) throws IOException {\n+    String attrSymbols \u003d conf.get(DistCpConstants.CONF_LABEL_PRESERVE_STATUS);\n+    LOG.info(\"About to preserve attributes: \" + attrSymbols);\n+\n+    EnumSet\u003cFileAttribute\u003e attributes \u003d DistCpUtils.unpackAttributes(attrSymbols);\n+\n+    Path sourceListing \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_LISTING_FILE_PATH));\n+    FileSystem clusterFS \u003d sourceListing.getFileSystem(conf);\n+    SequenceFile.Reader sourceReader \u003d new SequenceFile.Reader(conf,\n+                                      SequenceFile.Reader.file(sourceListing));\n+    long totalLen \u003d clusterFS.getFileStatus(sourceListing).getLen();\n+\n+    Path targetRoot \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n+\n+    long preservedEntries \u003d 0;\n+    try {\n+      FileStatus srcFileStatus \u003d new FileStatus();\n+      Text srcRelPath \u003d new Text();\n+\n+      // Iterate over every source path that was copied.\n+      while (sourceReader.next(srcRelPath, srcFileStatus)) {\n+        // File-attributes for files are set at the time of copy,\n+        // in the map-task.\n+        if (! srcFileStatus.isDirectory()) continue;\n+\n+        Path targetFile \u003d new Path(targetRoot.toString() + \"/\" + srcRelPath);\n+\n+        // Skip the root folder.\n+        // Status can\u0027t be preserved on root-folder. (E.g. multiple paths may\n+        // be copied to a single target folder. Which source-attributes to use\n+        // on the target is undefined.)\n+        if (targetRoot.equals(targetFile)) continue;\n+\n+        FileSystem targetFS \u003d targetFile.getFileSystem(conf);\n+        DistCpUtils.preserve(targetFS, targetFile, srcFileStatus,  attributes);\n+\n+        taskAttemptContext.progress();\n+        taskAttemptContext.setStatus(\"Preserving status on directory entries. [\" +\n+            sourceReader.getPosition() * 100 / totalLen + \"%]\");\n+      }\n+    } finally {\n+      IOUtils.closeStream(sourceReader);\n+    }\n+    LOG.info(\"Preserved status on \" + preservedEntries + \" dir entries on target\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void preserveFileAttributesForDirectories(Configuration conf) throws IOException {\n    String attrSymbols \u003d conf.get(DistCpConstants.CONF_LABEL_PRESERVE_STATUS);\n    LOG.info(\"About to preserve attributes: \" + attrSymbols);\n\n    EnumSet\u003cFileAttribute\u003e attributes \u003d DistCpUtils.unpackAttributes(attrSymbols);\n\n    Path sourceListing \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_LISTING_FILE_PATH));\n    FileSystem clusterFS \u003d sourceListing.getFileSystem(conf);\n    SequenceFile.Reader sourceReader \u003d new SequenceFile.Reader(conf,\n                                      SequenceFile.Reader.file(sourceListing));\n    long totalLen \u003d clusterFS.getFileStatus(sourceListing).getLen();\n\n    Path targetRoot \u003d new Path(conf.get(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH));\n\n    long preservedEntries \u003d 0;\n    try {\n      FileStatus srcFileStatus \u003d new FileStatus();\n      Text srcRelPath \u003d new Text();\n\n      // Iterate over every source path that was copied.\n      while (sourceReader.next(srcRelPath, srcFileStatus)) {\n        // File-attributes for files are set at the time of copy,\n        // in the map-task.\n        if (! srcFileStatus.isDirectory()) continue;\n\n        Path targetFile \u003d new Path(targetRoot.toString() + \"/\" + srcRelPath);\n\n        // Skip the root folder.\n        // Status can\u0027t be preserved on root-folder. (E.g. multiple paths may\n        // be copied to a single target folder. Which source-attributes to use\n        // on the target is undefined.)\n        if (targetRoot.equals(targetFile)) continue;\n\n        FileSystem targetFS \u003d targetFile.getFileSystem(conf);\n        DistCpUtils.preserve(targetFS, targetFile, srcFileStatus,  attributes);\n\n        taskAttemptContext.progress();\n        taskAttemptContext.setStatus(\"Preserving status on directory entries. [\" +\n            sourceReader.getPosition() * 100 / totalLen + \"%]\");\n      }\n    } finally {\n      IOUtils.closeStream(sourceReader);\n    }\n    LOG.info(\"Preserved status on \" + preservedEntries + \" dir entries on target\");\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyCommitter.java"
    }
  }
}