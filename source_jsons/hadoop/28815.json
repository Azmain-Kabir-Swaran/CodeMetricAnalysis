{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistributedOpportunisticContainerAllocator.java",
  "functionName": "findNodeCandidates",
  "functionId": "findNodeCandidates___loopIndex-int__allNodes-Map__String,RemoteNode____blackList-Set__String____allocatedNodes-Set__String____enrichedRR-EnrichedResourceRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/DistributedOpportunisticContainerAllocator.java",
  "functionStartLine": 280,
  "functionEndLine": 314,
  "numCommitsSeen": 31,
  "timeTaken": 3611,
  "changeHistory": [
    "4d3c580b03475a6ec9323d11e6875c542f8e3f6d",
    "aeadb9432f84e679f00a9a12f63675c456bc14a8",
    "6a69239d867070ee85d79026542033ac661c4c1c",
    "b733348dde18a242e6c9074c512116a8baf1d281"
  ],
  "changeHistoryShort": {
    "4d3c580b03475a6ec9323d11e6875c542f8e3f6d": "Ymovefromfile",
    "aeadb9432f84e679f00a9a12f63675c456bc14a8": "Ymultichange(Yparameterchange,Ybodychange)",
    "6a69239d867070ee85d79026542033ac661c4c1c": "Ybodychange",
    "b733348dde18a242e6c9074c512116a8baf1d281": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4d3c580b03475a6ec9323d11e6875c542f8e3f6d": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-9859. Refactoring of OpportunisticContainerAllocator. Contributed by Abhishek Modi.\n",
      "commitDate": "30/09/19 11:10 AM",
      "commitName": "4d3c580b03475a6ec9323d11e6875c542f8e3f6d",
      "commitAuthor": "Abhishek Modi",
      "commitDateOld": "30/09/19 8:06 AM",
      "commitNameOld": "98ca07ebed2ae3d7e41e5029b5bba6d089d41d43",
      "commitAuthorOld": "bshashikant",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Collection\u003cRemoteNode\u003e findNodeCandidates(int loopIndex,\n      Map\u003cString, RemoteNode\u003e allNodes, Set\u003cString\u003e blackList,\n      Set\u003cString\u003e allocatedNodes, EnrichedResourceRequest enrichedRR) {\n    LinkedList\u003cRemoteNode\u003e retList \u003d new LinkedList\u003c\u003e();\n    String partition \u003d getRequestPartition(enrichedRR);\n    if (loopIndex \u003e 1) {\n      for (RemoteNode remoteNode : allNodes.values()) {\n        if (StringUtils.equals(partition, getRemoteNodePartition(remoteNode))) {\n          retList.add(remoteNode);\n        }\n      }\n      return retList;\n    } else {\n\n      int numContainers \u003d enrichedRR.getRequest().getNumContainers();\n      while (numContainers \u003e 0) {\n        if (loopIndex \u003d\u003d 0) {\n          // Node local candidates\n          numContainers \u003d collectNodeLocalCandidates(\n              allNodes, enrichedRR, retList, numContainers);\n        } else {\n          // Rack local candidates\n          numContainers \u003d\n              collectRackLocalCandidates(allNodes, enrichedRR, retList,\n                  blackList, allocatedNodes, numContainers);\n        }\n        if (numContainers \u003d\u003d enrichedRR.getRequest().getNumContainers()) {\n          // If there is no change in numContainers, then there is no point\n          // in looping again.\n          break;\n        }\n      }\n      return retList;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/DistributedOpportunisticContainerAllocator.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/DistributedOpportunisticContainerAllocator.java",
        "oldMethodName": "findNodeCandidates",
        "newMethodName": "findNodeCandidates"
      }
    },
    "aeadb9432f84e679f00a9a12f63675c456bc14a8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9448. Fix Opportunistic Scheduling for node local allocations. Contributed by Abhishek Modi.\n",
      "commitDate": "19/04/19 9:41 AM",
      "commitName": "aeadb9432f84e679f00a9a12f63675c456bc14a8",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9448. Fix Opportunistic Scheduling for node local allocations. Contributed by Abhishek Modi.\n",
          "commitDate": "19/04/19 9:41 AM",
          "commitName": "aeadb9432f84e679f00a9a12f63675c456bc14a8",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "11/04/19 11:49 AM",
          "commitNameOld": "ed3747c1ccc303e206de50c2b74f3c318cb1c416",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 7.91,
          "commitsBetweenForRepo": 56,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,35 @@\n   private Collection\u003cRemoteNode\u003e findNodeCandidates(int loopIndex,\n       Map\u003cString, RemoteNode\u003e allNodes, Set\u003cString\u003e blackList,\n-      EnrichedResourceRequest enrichedRR) {\n+      Set\u003cString\u003e allocatedNodes, EnrichedResourceRequest enrichedRR) {\n     LinkedList\u003cRemoteNode\u003e retList \u003d new LinkedList\u003c\u003e();\n     String partition \u003d getRequestPartition(enrichedRR);\n     if (loopIndex \u003e 1) {\n       for (RemoteNode remoteNode : allNodes.values()) {\n         if (StringUtils.equals(partition, getRemoteNodePartition(remoteNode))) {\n           retList.add(remoteNode);\n         }\n       }\n       return retList;\n     } else {\n \n       int numContainers \u003d enrichedRR.getRequest().getNumContainers();\n       while (numContainers \u003e 0) {\n         if (loopIndex \u003d\u003d 0) {\n           // Node local candidates\n           numContainers \u003d collectNodeLocalCandidates(\n               allNodes, enrichedRR, retList, numContainers);\n         } else {\n           // Rack local candidates\n-          numContainers \u003d collectRackLocalCandidates(\n-              allNodes, enrichedRR, retList, blackList, numContainers);\n+          numContainers \u003d\n+              collectRackLocalCandidates(allNodes, enrichedRR, retList,\n+                  blackList, allocatedNodes, numContainers);\n         }\n         if (numContainers \u003d\u003d enrichedRR.getRequest().getNumContainers()) {\n           // If there is no change in numContainers, then there is no point\n           // in looping again.\n           break;\n         }\n       }\n       return retList;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Collection\u003cRemoteNode\u003e findNodeCandidates(int loopIndex,\n      Map\u003cString, RemoteNode\u003e allNodes, Set\u003cString\u003e blackList,\n      Set\u003cString\u003e allocatedNodes, EnrichedResourceRequest enrichedRR) {\n    LinkedList\u003cRemoteNode\u003e retList \u003d new LinkedList\u003c\u003e();\n    String partition \u003d getRequestPartition(enrichedRR);\n    if (loopIndex \u003e 1) {\n      for (RemoteNode remoteNode : allNodes.values()) {\n        if (StringUtils.equals(partition, getRemoteNodePartition(remoteNode))) {\n          retList.add(remoteNode);\n        }\n      }\n      return retList;\n    } else {\n\n      int numContainers \u003d enrichedRR.getRequest().getNumContainers();\n      while (numContainers \u003e 0) {\n        if (loopIndex \u003d\u003d 0) {\n          // Node local candidates\n          numContainers \u003d collectNodeLocalCandidates(\n              allNodes, enrichedRR, retList, numContainers);\n        } else {\n          // Rack local candidates\n          numContainers \u003d\n              collectRackLocalCandidates(allNodes, enrichedRR, retList,\n                  blackList, allocatedNodes, numContainers);\n        }\n        if (numContainers \u003d\u003d enrichedRR.getRequest().getNumContainers()) {\n          // If there is no change in numContainers, then there is no point\n          // in looping again.\n          break;\n        }\n      }\n      return retList;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[loopIndex-int, allNodes-Map\u003cString,RemoteNode\u003e, blackList-Set\u003cString\u003e, enrichedRR-EnrichedResourceRequest]",
            "newValue": "[loopIndex-int, allNodes-Map\u003cString,RemoteNode\u003e, blackList-Set\u003cString\u003e, allocatedNodes-Set\u003cString\u003e, enrichedRR-EnrichedResourceRequest]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9448. Fix Opportunistic Scheduling for node local allocations. Contributed by Abhishek Modi.\n",
          "commitDate": "19/04/19 9:41 AM",
          "commitName": "aeadb9432f84e679f00a9a12f63675c456bc14a8",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "11/04/19 11:49 AM",
          "commitNameOld": "ed3747c1ccc303e206de50c2b74f3c318cb1c416",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 7.91,
          "commitsBetweenForRepo": 56,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,35 @@\n   private Collection\u003cRemoteNode\u003e findNodeCandidates(int loopIndex,\n       Map\u003cString, RemoteNode\u003e allNodes, Set\u003cString\u003e blackList,\n-      EnrichedResourceRequest enrichedRR) {\n+      Set\u003cString\u003e allocatedNodes, EnrichedResourceRequest enrichedRR) {\n     LinkedList\u003cRemoteNode\u003e retList \u003d new LinkedList\u003c\u003e();\n     String partition \u003d getRequestPartition(enrichedRR);\n     if (loopIndex \u003e 1) {\n       for (RemoteNode remoteNode : allNodes.values()) {\n         if (StringUtils.equals(partition, getRemoteNodePartition(remoteNode))) {\n           retList.add(remoteNode);\n         }\n       }\n       return retList;\n     } else {\n \n       int numContainers \u003d enrichedRR.getRequest().getNumContainers();\n       while (numContainers \u003e 0) {\n         if (loopIndex \u003d\u003d 0) {\n           // Node local candidates\n           numContainers \u003d collectNodeLocalCandidates(\n               allNodes, enrichedRR, retList, numContainers);\n         } else {\n           // Rack local candidates\n-          numContainers \u003d collectRackLocalCandidates(\n-              allNodes, enrichedRR, retList, blackList, numContainers);\n+          numContainers \u003d\n+              collectRackLocalCandidates(allNodes, enrichedRR, retList,\n+                  blackList, allocatedNodes, numContainers);\n         }\n         if (numContainers \u003d\u003d enrichedRR.getRequest().getNumContainers()) {\n           // If there is no change in numContainers, then there is no point\n           // in looping again.\n           break;\n         }\n       }\n       return retList;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Collection\u003cRemoteNode\u003e findNodeCandidates(int loopIndex,\n      Map\u003cString, RemoteNode\u003e allNodes, Set\u003cString\u003e blackList,\n      Set\u003cString\u003e allocatedNodes, EnrichedResourceRequest enrichedRR) {\n    LinkedList\u003cRemoteNode\u003e retList \u003d new LinkedList\u003c\u003e();\n    String partition \u003d getRequestPartition(enrichedRR);\n    if (loopIndex \u003e 1) {\n      for (RemoteNode remoteNode : allNodes.values()) {\n        if (StringUtils.equals(partition, getRemoteNodePartition(remoteNode))) {\n          retList.add(remoteNode);\n        }\n      }\n      return retList;\n    } else {\n\n      int numContainers \u003d enrichedRR.getRequest().getNumContainers();\n      while (numContainers \u003e 0) {\n        if (loopIndex \u003d\u003d 0) {\n          // Node local candidates\n          numContainers \u003d collectNodeLocalCandidates(\n              allNodes, enrichedRR, retList, numContainers);\n        } else {\n          // Rack local candidates\n          numContainers \u003d\n              collectRackLocalCandidates(allNodes, enrichedRR, retList,\n                  blackList, allocatedNodes, numContainers);\n        }\n        if (numContainers \u003d\u003d enrichedRR.getRequest().getNumContainers()) {\n          // If there is no change in numContainers, then there is no point\n          // in looping again.\n          break;\n        }\n      }\n      return retList;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "6a69239d867070ee85d79026542033ac661c4c1c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8163. Add support for Node Labels in opportunistic scheduling. Contributed by Abhishek Modi.\n",
      "commitDate": "04/05/18 2:59 PM",
      "commitName": "6a69239d867070ee85d79026542033ac661c4c1c",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 179.02,
      "commitsBetweenForRepo": 1731,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,34 @@\n   private Collection\u003cRemoteNode\u003e findNodeCandidates(int loopIndex,\n       Map\u003cString, RemoteNode\u003e allNodes, Set\u003cString\u003e blackList,\n       EnrichedResourceRequest enrichedRR) {\n+    LinkedList\u003cRemoteNode\u003e retList \u003d new LinkedList\u003c\u003e();\n+    String partition \u003d getRequestPartition(enrichedRR);\n     if (loopIndex \u003e 1) {\n-      return allNodes.values();\n+      for (RemoteNode remoteNode : allNodes.values()) {\n+        if (StringUtils.equals(partition, getRemoteNodePartition(remoteNode))) {\n+          retList.add(remoteNode);\n+        }\n+      }\n+      return retList;\n     } else {\n-      LinkedList\u003cRemoteNode\u003e retList \u003d new LinkedList\u003c\u003e();\n+\n       int numContainers \u003d enrichedRR.getRequest().getNumContainers();\n       while (numContainers \u003e 0) {\n         if (loopIndex \u003d\u003d 0) {\n           // Node local candidates\n           numContainers \u003d collectNodeLocalCandidates(\n               allNodes, enrichedRR, retList, numContainers);\n         } else {\n           // Rack local candidates\n           numContainers \u003d collectRackLocalCandidates(\n               allNodes, enrichedRR, retList, blackList, numContainers);\n         }\n         if (numContainers \u003d\u003d enrichedRR.getRequest().getNumContainers()) {\n           // If there is no change in numContainers, then there is no point\n           // in looping again.\n           break;\n         }\n       }\n       return retList;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Collection\u003cRemoteNode\u003e findNodeCandidates(int loopIndex,\n      Map\u003cString, RemoteNode\u003e allNodes, Set\u003cString\u003e blackList,\n      EnrichedResourceRequest enrichedRR) {\n    LinkedList\u003cRemoteNode\u003e retList \u003d new LinkedList\u003c\u003e();\n    String partition \u003d getRequestPartition(enrichedRR);\n    if (loopIndex \u003e 1) {\n      for (RemoteNode remoteNode : allNodes.values()) {\n        if (StringUtils.equals(partition, getRemoteNodePartition(remoteNode))) {\n          retList.add(remoteNode);\n        }\n      }\n      return retList;\n    } else {\n\n      int numContainers \u003d enrichedRR.getRequest().getNumContainers();\n      while (numContainers \u003e 0) {\n        if (loopIndex \u003d\u003d 0) {\n          // Node local candidates\n          numContainers \u003d collectNodeLocalCandidates(\n              allNodes, enrichedRR, retList, numContainers);\n        } else {\n          // Rack local candidates\n          numContainers \u003d collectRackLocalCandidates(\n              allNodes, enrichedRR, retList, blackList, numContainers);\n        }\n        if (numContainers \u003d\u003d enrichedRR.getRequest().getNumContainers()) {\n          // If there is no change in numContainers, then there is no point\n          // in looping again.\n          break;\n        }\n      }\n      return retList;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
      "extendedDetails": {}
    },
    "b733348dde18a242e6c9074c512116a8baf1d281": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7258. Add Node and Rack Hints to Opportunistic Scheduler. (Kartheek Muthyala via asuresh).\n",
      "commitDate": "05/10/17 9:58 AM",
      "commitName": "b733348dde18a242e6c9074c512116a8baf1d281",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,27 @@\n+  private Collection\u003cRemoteNode\u003e findNodeCandidates(int loopIndex,\n+      Map\u003cString, RemoteNode\u003e allNodes, Set\u003cString\u003e blackList,\n+      EnrichedResourceRequest enrichedRR) {\n+    if (loopIndex \u003e 1) {\n+      return allNodes.values();\n+    } else {\n+      LinkedList\u003cRemoteNode\u003e retList \u003d new LinkedList\u003c\u003e();\n+      int numContainers \u003d enrichedRR.getRequest().getNumContainers();\n+      while (numContainers \u003e 0) {\n+        if (loopIndex \u003d\u003d 0) {\n+          // Node local candidates\n+          numContainers \u003d collectNodeLocalCandidates(\n+              allNodes, enrichedRR, retList, numContainers);\n+        } else {\n+          // Rack local candidates\n+          numContainers \u003d collectRackLocalCandidates(\n+              allNodes, enrichedRR, retList, blackList, numContainers);\n+        }\n+        if (numContainers \u003d\u003d enrichedRR.getRequest().getNumContainers()) {\n+          // If there is no change in numContainers, then there is no point\n+          // in looping again.\n+          break;\n+        }\n+      }\n+      return retList;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Collection\u003cRemoteNode\u003e findNodeCandidates(int loopIndex,\n      Map\u003cString, RemoteNode\u003e allNodes, Set\u003cString\u003e blackList,\n      EnrichedResourceRequest enrichedRR) {\n    if (loopIndex \u003e 1) {\n      return allNodes.values();\n    } else {\n      LinkedList\u003cRemoteNode\u003e retList \u003d new LinkedList\u003c\u003e();\n      int numContainers \u003d enrichedRR.getRequest().getNumContainers();\n      while (numContainers \u003e 0) {\n        if (loopIndex \u003d\u003d 0) {\n          // Node local candidates\n          numContainers \u003d collectNodeLocalCandidates(\n              allNodes, enrichedRR, retList, numContainers);\n        } else {\n          // Rack local candidates\n          numContainers \u003d collectRackLocalCandidates(\n              allNodes, enrichedRR, retList, blackList, numContainers);\n        }\n        if (numContainers \u003d\u003d enrichedRR.getRequest().getNumContainers()) {\n          // If there is no change in numContainers, then there is no point\n          // in looping again.\n          break;\n        }\n      }\n      return retList;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java"
    }
  }
}