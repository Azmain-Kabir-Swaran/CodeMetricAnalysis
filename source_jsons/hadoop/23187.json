{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileOutputCommitter.java",
  "functionName": "recoverTask",
  "functionId": "recoverTask___context-TaskAttemptContext",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java",
  "functionStartLine": 689,
  "functionEndLine": 738,
  "numCommitsSeen": 22,
  "timeTaken": 2268,
  "changeHistory": [
    "4d8de7ab690ef919b392b12d856482a6a1f2bb3d",
    "5af572b6443715b7a741296c1bd520a1840f9a7c",
    "91baca145a6c16fe13f455d150c05bd73179531b",
    "aa92b764a7ddb888d097121c4d610089a0053d11",
    "9f2b77aee496b0636aabafa61f13903f28bd86fe",
    "94242c93857a06fb9c56ee571a47d6ca18f00f48",
    "c7fb49b3c5b8aa394f578e644bbc13fc9cbfcaca",
    "f29bfa0e0e88de49f1558138eeaba1396fa5a1d2"
  ],
  "changeHistoryShort": {
    "4d8de7ab690ef919b392b12d856482a6a1f2bb3d": "Ybodychange",
    "5af572b6443715b7a741296c1bd520a1840f9a7c": "Ybodychange",
    "91baca145a6c16fe13f455d150c05bd73179531b": "Ybodychange",
    "aa92b764a7ddb888d097121c4d610089a0053d11": "Ybodychange",
    "9f2b77aee496b0636aabafa61f13903f28bd86fe": "Ybodychange",
    "94242c93857a06fb9c56ee571a47d6ca18f00f48": "Ybodychange",
    "c7fb49b3c5b8aa394f578e644bbc13fc9cbfcaca": "Ybodychange",
    "f29bfa0e0e88de49f1558138eeaba1396fa5a1d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4d8de7ab690ef919b392b12d856482a6a1f2bb3d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7164. FileOutputCommitter does not report progress while merging paths. Contributed by Kuhu Shukla\n",
      "commitDate": "28/11/18 12:54 PM",
      "commitName": "4d8de7ab690ef919b392b12d856482a6a1f2bb3d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "17/01/18 6:14 AM",
      "commitNameOld": "6e42d058292d9656e9ebc9a47be13280e3c919ea",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 315.28,
      "commitsBetweenForRepo": 3035,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public void recoverTask(TaskAttemptContext context)\n       throws IOException {\n     if(hasOutputPath()) {\n       context.progress();\n       TaskAttemptID attemptId \u003d context.getTaskAttemptID();\n       int previousAttempt \u003d getAppAttemptId(context) - 1;\n       if (previousAttempt \u003c 0) {\n         throw new IOException (\"Cannot recover task output for first attempt...\");\n       }\n \n       Path previousCommittedTaskPath \u003d getCommittedTaskPath(\n           previousAttempt, context);\n       FileSystem fs \u003d previousCommittedTaskPath.getFileSystem(context.getConfiguration());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Trying to recover task from \" + previousCommittedTaskPath);\n       }\n       if (algorithmVersion \u003d\u003d 1) {\n         if (fs.exists(previousCommittedTaskPath)) {\n           Path committedTaskPath \u003d getCommittedTaskPath(context);\n           if (!fs.delete(committedTaskPath, true) \u0026\u0026\n               fs.exists(committedTaskPath)) {\n             throw new IOException(\"Could not delete \" + committedTaskPath);\n           }\n           //Rename can fail if the parent directory does not yet exist.\n           Path committedParent \u003d committedTaskPath.getParent();\n           fs.mkdirs(committedParent);\n           if (!fs.rename(previousCommittedTaskPath, committedTaskPath)) {\n             throw new IOException(\"Could not rename \" + previousCommittedTaskPath +\n                 \" to \" + committedTaskPath);\n           }\n         } else {\n             LOG.warn(attemptId+\" had no output to recover.\");\n         }\n       } else {\n         // essentially a no-op, but for backwards compatibility\n         // after upgrade to the new fileOutputCommitter,\n         // check if there are any output left in committedTaskPath\n         try {\n           FileStatus from \u003d fs.getFileStatus(previousCommittedTaskPath);\n           LOG.info(\"Recovering task for upgrading scenario, moving files from \"\n               + previousCommittedTaskPath + \" to \" + outputPath);\n-          mergePaths(fs, from, outputPath);\n+          mergePaths(fs, from, outputPath, context);\n         } catch (FileNotFoundException ignored) {\n         }\n         LOG.info(\"Done recovering task \" + attemptId);\n       }\n     } else {\n       LOG.warn(\"Output Path is null in recoverTask()\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverTask(TaskAttemptContext context)\n      throws IOException {\n    if(hasOutputPath()) {\n      context.progress();\n      TaskAttemptID attemptId \u003d context.getTaskAttemptID();\n      int previousAttempt \u003d getAppAttemptId(context) - 1;\n      if (previousAttempt \u003c 0) {\n        throw new IOException (\"Cannot recover task output for first attempt...\");\n      }\n\n      Path previousCommittedTaskPath \u003d getCommittedTaskPath(\n          previousAttempt, context);\n      FileSystem fs \u003d previousCommittedTaskPath.getFileSystem(context.getConfiguration());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Trying to recover task from \" + previousCommittedTaskPath);\n      }\n      if (algorithmVersion \u003d\u003d 1) {\n        if (fs.exists(previousCommittedTaskPath)) {\n          Path committedTaskPath \u003d getCommittedTaskPath(context);\n          if (!fs.delete(committedTaskPath, true) \u0026\u0026\n              fs.exists(committedTaskPath)) {\n            throw new IOException(\"Could not delete \" + committedTaskPath);\n          }\n          //Rename can fail if the parent directory does not yet exist.\n          Path committedParent \u003d committedTaskPath.getParent();\n          fs.mkdirs(committedParent);\n          if (!fs.rename(previousCommittedTaskPath, committedTaskPath)) {\n            throw new IOException(\"Could not rename \" + previousCommittedTaskPath +\n                \" to \" + committedTaskPath);\n          }\n        } else {\n            LOG.warn(attemptId+\" had no output to recover.\");\n        }\n      } else {\n        // essentially a no-op, but for backwards compatibility\n        // after upgrade to the new fileOutputCommitter,\n        // check if there are any output left in committedTaskPath\n        try {\n          FileStatus from \u003d fs.getFileStatus(previousCommittedTaskPath);\n          LOG.info(\"Recovering task for upgrading scenario, moving files from \"\n              + previousCommittedTaskPath + \" to \" + outputPath);\n          mergePaths(fs, from, outputPath, context);\n        } catch (FileNotFoundException ignored) {\n        }\n        LOG.info(\"Done recovering task \" + attemptId);\n      }\n    } else {\n      LOG.warn(\"Output Path is null in recoverTask()\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java",
      "extendedDetails": {}
    },
    "5af572b6443715b7a741296c1bd520a1840f9a7c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13427. Eliminate needless uses of FileSystem#{exists(), isFile(), isDirectory()}. Contributed by Steve Loughran and Mingliang Liu\n",
      "commitDate": "15/11/16 10:57 AM",
      "commitName": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "16/11/15 5:06 PM",
      "commitNameOld": "6502d59e73cd6f3f3a358fce58d398ca38a61fba",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 364.74,
      "commitsBetweenForRepo": 2585,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public void recoverTask(TaskAttemptContext context)\n       throws IOException {\n     if(hasOutputPath()) {\n       context.progress();\n       TaskAttemptID attemptId \u003d context.getTaskAttemptID();\n       int previousAttempt \u003d getAppAttemptId(context) - 1;\n       if (previousAttempt \u003c 0) {\n         throw new IOException (\"Cannot recover task output for first attempt...\");\n       }\n \n       Path previousCommittedTaskPath \u003d getCommittedTaskPath(\n           previousAttempt, context);\n       FileSystem fs \u003d previousCommittedTaskPath.getFileSystem(context.getConfiguration());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Trying to recover task from \" + previousCommittedTaskPath);\n       }\n       if (algorithmVersion \u003d\u003d 1) {\n         if (fs.exists(previousCommittedTaskPath)) {\n           Path committedTaskPath \u003d getCommittedTaskPath(context);\n-          if (fs.exists(committedTaskPath)) {\n-            if (!fs.delete(committedTaskPath, true)) {\n-              throw new IOException(\"Could not delete \"+committedTaskPath);\n-            }\n+          if (!fs.delete(committedTaskPath, true) \u0026\u0026\n+              fs.exists(committedTaskPath)) {\n+            throw new IOException(\"Could not delete \" + committedTaskPath);\n           }\n           //Rename can fail if the parent directory does not yet exist.\n           Path committedParent \u003d committedTaskPath.getParent();\n           fs.mkdirs(committedParent);\n           if (!fs.rename(previousCommittedTaskPath, committedTaskPath)) {\n             throw new IOException(\"Could not rename \" + previousCommittedTaskPath +\n                 \" to \" + committedTaskPath);\n           }\n         } else {\n             LOG.warn(attemptId+\" had no output to recover.\");\n         }\n       } else {\n         // essentially a no-op, but for backwards compatibility\n         // after upgrade to the new fileOutputCommitter,\n         // check if there are any output left in committedTaskPath\n-        if (fs.exists(previousCommittedTaskPath)) {\n+        try {\n+          FileStatus from \u003d fs.getFileStatus(previousCommittedTaskPath);\n           LOG.info(\"Recovering task for upgrading scenario, moving files from \"\n               + previousCommittedTaskPath + \" to \" + outputPath);\n-          FileStatus from \u003d fs.getFileStatus(previousCommittedTaskPath);\n           mergePaths(fs, from, outputPath);\n+        } catch (FileNotFoundException ignored) {\n         }\n         LOG.info(\"Done recovering task \" + attemptId);\n       }\n     } else {\n       LOG.warn(\"Output Path is null in recoverTask()\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverTask(TaskAttemptContext context)\n      throws IOException {\n    if(hasOutputPath()) {\n      context.progress();\n      TaskAttemptID attemptId \u003d context.getTaskAttemptID();\n      int previousAttempt \u003d getAppAttemptId(context) - 1;\n      if (previousAttempt \u003c 0) {\n        throw new IOException (\"Cannot recover task output for first attempt...\");\n      }\n\n      Path previousCommittedTaskPath \u003d getCommittedTaskPath(\n          previousAttempt, context);\n      FileSystem fs \u003d previousCommittedTaskPath.getFileSystem(context.getConfiguration());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Trying to recover task from \" + previousCommittedTaskPath);\n      }\n      if (algorithmVersion \u003d\u003d 1) {\n        if (fs.exists(previousCommittedTaskPath)) {\n          Path committedTaskPath \u003d getCommittedTaskPath(context);\n          if (!fs.delete(committedTaskPath, true) \u0026\u0026\n              fs.exists(committedTaskPath)) {\n            throw new IOException(\"Could not delete \" + committedTaskPath);\n          }\n          //Rename can fail if the parent directory does not yet exist.\n          Path committedParent \u003d committedTaskPath.getParent();\n          fs.mkdirs(committedParent);\n          if (!fs.rename(previousCommittedTaskPath, committedTaskPath)) {\n            throw new IOException(\"Could not rename \" + previousCommittedTaskPath +\n                \" to \" + committedTaskPath);\n          }\n        } else {\n            LOG.warn(attemptId+\" had no output to recover.\");\n        }\n      } else {\n        // essentially a no-op, but for backwards compatibility\n        // after upgrade to the new fileOutputCommitter,\n        // check if there are any output left in committedTaskPath\n        try {\n          FileStatus from \u003d fs.getFileStatus(previousCommittedTaskPath);\n          LOG.info(\"Recovering task for upgrading scenario, moving files from \"\n              + previousCommittedTaskPath + \" to \" + outputPath);\n          mergePaths(fs, from, outputPath);\n        } catch (FileNotFoundException ignored) {\n        }\n        LOG.info(\"Done recovering task \" + attemptId);\n      }\n    } else {\n      LOG.warn(\"Output Path is null in recoverTask()\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java",
      "extendedDetails": {}
    },
    "91baca145a6c16fe13f455d150c05bd73179531b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6275. Race condition in FileOutputCommitter v2 for user-specified task output subdirs. Contributed by Gera Shegalov and Siqi Li\n",
      "commitDate": "19/03/15 2:39 PM",
      "commitName": "91baca145a6c16fe13f455d150c05bd73179531b",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "10/03/15 11:32 AM",
      "commitNameOld": "aa92b764a7ddb888d097121c4d610089a0053d11",
      "commitAuthorOld": "Gera Shegalov",
      "daysBetweenCommits": 9.13,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n   public void recoverTask(TaskAttemptContext context)\n       throws IOException {\n     if(hasOutputPath()) {\n       context.progress();\n       TaskAttemptID attemptId \u003d context.getTaskAttemptID();\n       int previousAttempt \u003d getAppAttemptId(context) - 1;\n       if (previousAttempt \u003c 0) {\n         throw new IOException (\"Cannot recover task output for first attempt...\");\n       }\n \n       Path previousCommittedTaskPath \u003d getCommittedTaskPath(\n           previousAttempt, context);\n       FileSystem fs \u003d previousCommittedTaskPath.getFileSystem(context.getConfiguration());\n-\n-      LOG.debug(\"Trying to recover task from \" + previousCommittedTaskPath);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Trying to recover task from \" + previousCommittedTaskPath);\n+      }\n       if (algorithmVersion \u003d\u003d 1) {\n         if (fs.exists(previousCommittedTaskPath)) {\n           Path committedTaskPath \u003d getCommittedTaskPath(context);\n           if (fs.exists(committedTaskPath)) {\n             if (!fs.delete(committedTaskPath, true)) {\n               throw new IOException(\"Could not delete \"+committedTaskPath);\n             }\n           }\n           //Rename can fail if the parent directory does not yet exist.\n           Path committedParent \u003d committedTaskPath.getParent();\n           fs.mkdirs(committedParent);\n           if (!fs.rename(previousCommittedTaskPath, committedTaskPath)) {\n             throw new IOException(\"Could not rename \" + previousCommittedTaskPath +\n                 \" to \" + committedTaskPath);\n           }\n         } else {\n             LOG.warn(attemptId+\" had no output to recover.\");\n         }\n       } else {\n         // essentially a no-op, but for backwards compatibility\n         // after upgrade to the new fileOutputCommitter,\n         // check if there are any output left in committedTaskPath\n         if (fs.exists(previousCommittedTaskPath)) {\n           LOG.info(\"Recovering task for upgrading scenario, moving files from \"\n               + previousCommittedTaskPath + \" to \" + outputPath);\n           FileStatus from \u003d fs.getFileStatus(previousCommittedTaskPath);\n           mergePaths(fs, from, outputPath);\n         }\n         LOG.info(\"Done recovering task \" + attemptId);\n       }\n     } else {\n       LOG.warn(\"Output Path is null in recoverTask()\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverTask(TaskAttemptContext context)\n      throws IOException {\n    if(hasOutputPath()) {\n      context.progress();\n      TaskAttemptID attemptId \u003d context.getTaskAttemptID();\n      int previousAttempt \u003d getAppAttemptId(context) - 1;\n      if (previousAttempt \u003c 0) {\n        throw new IOException (\"Cannot recover task output for first attempt...\");\n      }\n\n      Path previousCommittedTaskPath \u003d getCommittedTaskPath(\n          previousAttempt, context);\n      FileSystem fs \u003d previousCommittedTaskPath.getFileSystem(context.getConfiguration());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Trying to recover task from \" + previousCommittedTaskPath);\n      }\n      if (algorithmVersion \u003d\u003d 1) {\n        if (fs.exists(previousCommittedTaskPath)) {\n          Path committedTaskPath \u003d getCommittedTaskPath(context);\n          if (fs.exists(committedTaskPath)) {\n            if (!fs.delete(committedTaskPath, true)) {\n              throw new IOException(\"Could not delete \"+committedTaskPath);\n            }\n          }\n          //Rename can fail if the parent directory does not yet exist.\n          Path committedParent \u003d committedTaskPath.getParent();\n          fs.mkdirs(committedParent);\n          if (!fs.rename(previousCommittedTaskPath, committedTaskPath)) {\n            throw new IOException(\"Could not rename \" + previousCommittedTaskPath +\n                \" to \" + committedTaskPath);\n          }\n        } else {\n            LOG.warn(attemptId+\" had no output to recover.\");\n        }\n      } else {\n        // essentially a no-op, but for backwards compatibility\n        // after upgrade to the new fileOutputCommitter,\n        // check if there are any output left in committedTaskPath\n        if (fs.exists(previousCommittedTaskPath)) {\n          LOG.info(\"Recovering task for upgrading scenario, moving files from \"\n              + previousCommittedTaskPath + \" to \" + outputPath);\n          FileStatus from \u003d fs.getFileStatus(previousCommittedTaskPath);\n          mergePaths(fs, from, outputPath);\n        }\n        LOG.info(\"Done recovering task \" + attemptId);\n      }\n    } else {\n      LOG.warn(\"Output Path is null in recoverTask()\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java",
      "extendedDetails": {}
    },
    "aa92b764a7ddb888d097121c4d610089a0053d11": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4815. Speed up FileOutputCommitter#commitJob for many output files. (Siqi Li via gera)\n",
      "commitDate": "10/03/15 11:32 AM",
      "commitName": "aa92b764a7ddb888d097121c4d610089a0053d11",
      "commitAuthor": "Gera Shegalov",
      "commitDateOld": "28/04/14 8:18 AM",
      "commitNameOld": "bb7ce82816574f67aa1898f67e0e0cff54fa67be",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 316.13,
      "commitsBetweenForRepo": 2567,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,49 @@\n   public void recoverTask(TaskAttemptContext context)\n       throws IOException {\n     if(hasOutputPath()) {\n       context.progress();\n       TaskAttemptID attemptId \u003d context.getTaskAttemptID();\n       int previousAttempt \u003d getAppAttemptId(context) - 1;\n       if (previousAttempt \u003c 0) {\n         throw new IOException (\"Cannot recover task output for first attempt...\");\n       }\n \n-      Path committedTaskPath \u003d getCommittedTaskPath(context);\n       Path previousCommittedTaskPath \u003d getCommittedTaskPath(\n           previousAttempt, context);\n-      FileSystem fs \u003d committedTaskPath.getFileSystem(context.getConfiguration());\n+      FileSystem fs \u003d previousCommittedTaskPath.getFileSystem(context.getConfiguration());\n \n-      LOG.debug(\"Trying to recover task from \" + previousCommittedTaskPath \n-          + \" into \" + committedTaskPath);\n-      if (fs.exists(previousCommittedTaskPath)) {\n-        if(fs.exists(committedTaskPath)) {\n-          if(!fs.delete(committedTaskPath, true)) {\n-            throw new IOException(\"Could not delete \"+committedTaskPath);\n+      LOG.debug(\"Trying to recover task from \" + previousCommittedTaskPath);\n+      if (algorithmVersion \u003d\u003d 1) {\n+        if (fs.exists(previousCommittedTaskPath)) {\n+          Path committedTaskPath \u003d getCommittedTaskPath(context);\n+          if (fs.exists(committedTaskPath)) {\n+            if (!fs.delete(committedTaskPath, true)) {\n+              throw new IOException(\"Could not delete \"+committedTaskPath);\n+            }\n           }\n+          //Rename can fail if the parent directory does not yet exist.\n+          Path committedParent \u003d committedTaskPath.getParent();\n+          fs.mkdirs(committedParent);\n+          if (!fs.rename(previousCommittedTaskPath, committedTaskPath)) {\n+            throw new IOException(\"Could not rename \" + previousCommittedTaskPath +\n+                \" to \" + committedTaskPath);\n+          }\n+        } else {\n+            LOG.warn(attemptId+\" had no output to recover.\");\n         }\n-        //Rename can fail if the parent directory does not yet exist.\n-        Path committedParent \u003d committedTaskPath.getParent();\n-        fs.mkdirs(committedParent);\n-        if(!fs.rename(previousCommittedTaskPath, committedTaskPath)) {\n-          throw new IOException(\"Could not rename \" + previousCommittedTaskPath +\n-              \" to \" + committedTaskPath);\n-        }\n-        LOG.info(\"Saved output of \" + attemptId + \" to \" + committedTaskPath);\n       } else {\n-        LOG.warn(attemptId+\" had no output to recover.\");\n+        // essentially a no-op, but for backwards compatibility\n+        // after upgrade to the new fileOutputCommitter,\n+        // check if there are any output left in committedTaskPath\n+        if (fs.exists(previousCommittedTaskPath)) {\n+          LOG.info(\"Recovering task for upgrading scenario, moving files from \"\n+              + previousCommittedTaskPath + \" to \" + outputPath);\n+          FileStatus from \u003d fs.getFileStatus(previousCommittedTaskPath);\n+          mergePaths(fs, from, outputPath);\n+        }\n+        LOG.info(\"Done recovering task \" + attemptId);\n       }\n     } else {\n       LOG.warn(\"Output Path is null in recoverTask()\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverTask(TaskAttemptContext context)\n      throws IOException {\n    if(hasOutputPath()) {\n      context.progress();\n      TaskAttemptID attemptId \u003d context.getTaskAttemptID();\n      int previousAttempt \u003d getAppAttemptId(context) - 1;\n      if (previousAttempt \u003c 0) {\n        throw new IOException (\"Cannot recover task output for first attempt...\");\n      }\n\n      Path previousCommittedTaskPath \u003d getCommittedTaskPath(\n          previousAttempt, context);\n      FileSystem fs \u003d previousCommittedTaskPath.getFileSystem(context.getConfiguration());\n\n      LOG.debug(\"Trying to recover task from \" + previousCommittedTaskPath);\n      if (algorithmVersion \u003d\u003d 1) {\n        if (fs.exists(previousCommittedTaskPath)) {\n          Path committedTaskPath \u003d getCommittedTaskPath(context);\n          if (fs.exists(committedTaskPath)) {\n            if (!fs.delete(committedTaskPath, true)) {\n              throw new IOException(\"Could not delete \"+committedTaskPath);\n            }\n          }\n          //Rename can fail if the parent directory does not yet exist.\n          Path committedParent \u003d committedTaskPath.getParent();\n          fs.mkdirs(committedParent);\n          if (!fs.rename(previousCommittedTaskPath, committedTaskPath)) {\n            throw new IOException(\"Could not rename \" + previousCommittedTaskPath +\n                \" to \" + committedTaskPath);\n          }\n        } else {\n            LOG.warn(attemptId+\" had no output to recover.\");\n        }\n      } else {\n        // essentially a no-op, but for backwards compatibility\n        // after upgrade to the new fileOutputCommitter,\n        // check if there are any output left in committedTaskPath\n        if (fs.exists(previousCommittedTaskPath)) {\n          LOG.info(\"Recovering task for upgrading scenario, moving files from \"\n              + previousCommittedTaskPath + \" to \" + outputPath);\n          FileStatus from \u003d fs.getFileStatus(previousCommittedTaskPath);\n          mergePaths(fs, from, outputPath);\n        }\n        LOG.info(\"Done recovering task \" + attemptId);\n      }\n    } else {\n      LOG.warn(\"Output Path is null in recoverTask()\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java",
      "extendedDetails": {}
    },
    "9f2b77aee496b0636aabafa61f13903f28bd86fe": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3808. Fixed an NPE in FileOutputCommitter for jobs with maps but no reduces. Contributed by Robert Joseph Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241217 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/12 2:16 PM",
      "commitName": "9f2b77aee496b0636aabafa61f13903f28bd86fe",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/02/12 4:04 PM",
      "commitNameOld": "94242c93857a06fb9c56ee571a47d6ca18f00f48",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.92,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,38 @@\n   public void recoverTask(TaskAttemptContext context)\n       throws IOException {\n-    context.progress();\n-    TaskAttemptID attemptId \u003d context.getTaskAttemptID();\n-    int previousAttempt \u003d getAppAttemptId(context) - 1;\n-    if (previousAttempt \u003c 0) {\n-      throw new IOException (\"Cannot recover task output for first attempt...\");\n-    }\n-    \n-    Path committedTaskPath \u003d getCommittedTaskPath(context);\n-    Path previousCommittedTaskPath \u003d getCommittedTaskPath(\n-        previousAttempt, context);\n-    FileSystem fs \u003d committedTaskPath.getFileSystem(context.getConfiguration());\n-    \n-    LOG.debug(\"Trying to recover task from \" + previousCommittedTaskPath \n-        + \" into \" + committedTaskPath);\n-    if (fs.exists(previousCommittedTaskPath)) {\n-      if(fs.exists(committedTaskPath)) {\n-        if(!fs.delete(committedTaskPath, true)) {\n-          throw new IOException(\"Could not delete \"+committedTaskPath);\n+    if(hasOutputPath()) {\n+      context.progress();\n+      TaskAttemptID attemptId \u003d context.getTaskAttemptID();\n+      int previousAttempt \u003d getAppAttemptId(context) - 1;\n+      if (previousAttempt \u003c 0) {\n+        throw new IOException (\"Cannot recover task output for first attempt...\");\n+      }\n+\n+      Path committedTaskPath \u003d getCommittedTaskPath(context);\n+      Path previousCommittedTaskPath \u003d getCommittedTaskPath(\n+          previousAttempt, context);\n+      FileSystem fs \u003d committedTaskPath.getFileSystem(context.getConfiguration());\n+\n+      LOG.debug(\"Trying to recover task from \" + previousCommittedTaskPath \n+          + \" into \" + committedTaskPath);\n+      if (fs.exists(previousCommittedTaskPath)) {\n+        if(fs.exists(committedTaskPath)) {\n+          if(!fs.delete(committedTaskPath, true)) {\n+            throw new IOException(\"Could not delete \"+committedTaskPath);\n+          }\n         }\n+        //Rename can fail if the parent directory does not yet exist.\n+        Path committedParent \u003d committedTaskPath.getParent();\n+        fs.mkdirs(committedParent);\n+        if(!fs.rename(previousCommittedTaskPath, committedTaskPath)) {\n+          throw new IOException(\"Could not rename \" + previousCommittedTaskPath +\n+              \" to \" + committedTaskPath);\n+        }\n+        LOG.info(\"Saved output of \" + attemptId + \" to \" + committedTaskPath);\n+      } else {\n+        LOG.warn(attemptId+\" had no output to recover.\");\n       }\n-      //Rename can fail if the parent directory does not yet exist.\n-      Path committedParent \u003d committedTaskPath.getParent();\n-      fs.mkdirs(committedParent);\n-      if(!fs.rename(previousCommittedTaskPath, committedTaskPath)) {\n-        throw new IOException(\"Could not rename \" + previousCommittedTaskPath +\n-            \" to \" + committedTaskPath);\n-      }\n-      LOG.info(\"Saved output of \" + attemptId + \" to \" + committedTaskPath);\n     } else {\n-      LOG.warn(attemptId+\" had no output to recover.\");\n+      LOG.warn(\"Output Path is null in recoverTask()\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverTask(TaskAttemptContext context)\n      throws IOException {\n    if(hasOutputPath()) {\n      context.progress();\n      TaskAttemptID attemptId \u003d context.getTaskAttemptID();\n      int previousAttempt \u003d getAppAttemptId(context) - 1;\n      if (previousAttempt \u003c 0) {\n        throw new IOException (\"Cannot recover task output for first attempt...\");\n      }\n\n      Path committedTaskPath \u003d getCommittedTaskPath(context);\n      Path previousCommittedTaskPath \u003d getCommittedTaskPath(\n          previousAttempt, context);\n      FileSystem fs \u003d committedTaskPath.getFileSystem(context.getConfiguration());\n\n      LOG.debug(\"Trying to recover task from \" + previousCommittedTaskPath \n          + \" into \" + committedTaskPath);\n      if (fs.exists(previousCommittedTaskPath)) {\n        if(fs.exists(committedTaskPath)) {\n          if(!fs.delete(committedTaskPath, true)) {\n            throw new IOException(\"Could not delete \"+committedTaskPath);\n          }\n        }\n        //Rename can fail if the parent directory does not yet exist.\n        Path committedParent \u003d committedTaskPath.getParent();\n        fs.mkdirs(committedParent);\n        if(!fs.rename(previousCommittedTaskPath, committedTaskPath)) {\n          throw new IOException(\"Could not rename \" + previousCommittedTaskPath +\n              \" to \" + committedTaskPath);\n        }\n        LOG.info(\"Saved output of \" + attemptId + \" to \" + committedTaskPath);\n      } else {\n        LOG.warn(attemptId+\" had no output to recover.\");\n      }\n    } else {\n      LOG.warn(\"Output Path is null in recoverTask()\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java",
      "extendedDetails": {}
    },
    "94242c93857a06fb9c56ee571a47d6ca18f00f48": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3711. Fixed MR AM recovery so that only single selected task output is recovered and thus reduce the unnecessarily bloated recovery time. Contributed by Robert Joseph Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1240413 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/02/12 4:04 PM",
      "commitName": "94242c93857a06fb9c56ee571a47d6ca18f00f48",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/12/11 3:07 PM",
      "commitNameOld": "a61a18cc098591eacd998e4a2f61babe27353a31",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 46.04,
      "commitsBetweenForRepo": 217,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,34 @@\n   public void recoverTask(TaskAttemptContext context)\n       throws IOException {\n     context.progress();\n-    Path jobOutputPath \u003d \n-        new Path(outputPath, getJobAttemptBaseDirName(context));\n-    int previousAttempt \u003d         \n-        context.getConfiguration().getInt(\n-            MRJobConfig.APPLICATION_ATTEMPT_ID, 0) - 1;\n+    TaskAttemptID attemptId \u003d context.getTaskAttemptID();\n+    int previousAttempt \u003d getAppAttemptId(context) - 1;\n     if (previousAttempt \u003c 0) {\n       throw new IOException (\"Cannot recover task output for first attempt...\");\n     }\n-\n-    Path pathToRecover \u003d \n-        new Path(outputPath, getJobAttemptBaseDirName(previousAttempt));\n-    LOG.debug(\"Trying to recover task from \" + pathToRecover\n-        + \" into \" + jobOutputPath);\n-    if (outputFileSystem.exists(pathToRecover)) {\n-      // Move the task outputs to their final place\n-      moveJobOutputs(outputFileSystem, \n-          pathToRecover, jobOutputPath, pathToRecover);\n-      LOG.info(\"Saved output of job to \" + jobOutputPath);\n+    \n+    Path committedTaskPath \u003d getCommittedTaskPath(context);\n+    Path previousCommittedTaskPath \u003d getCommittedTaskPath(\n+        previousAttempt, context);\n+    FileSystem fs \u003d committedTaskPath.getFileSystem(context.getConfiguration());\n+    \n+    LOG.debug(\"Trying to recover task from \" + previousCommittedTaskPath \n+        + \" into \" + committedTaskPath);\n+    if (fs.exists(previousCommittedTaskPath)) {\n+      if(fs.exists(committedTaskPath)) {\n+        if(!fs.delete(committedTaskPath, true)) {\n+          throw new IOException(\"Could not delete \"+committedTaskPath);\n+        }\n+      }\n+      //Rename can fail if the parent directory does not yet exist.\n+      Path committedParent \u003d committedTaskPath.getParent();\n+      fs.mkdirs(committedParent);\n+      if(!fs.rename(previousCommittedTaskPath, committedTaskPath)) {\n+        throw new IOException(\"Could not rename \" + previousCommittedTaskPath +\n+            \" to \" + committedTaskPath);\n+      }\n+      LOG.info(\"Saved output of \" + attemptId + \" to \" + committedTaskPath);\n+    } else {\n+      LOG.warn(attemptId+\" had no output to recover.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverTask(TaskAttemptContext context)\n      throws IOException {\n    context.progress();\n    TaskAttemptID attemptId \u003d context.getTaskAttemptID();\n    int previousAttempt \u003d getAppAttemptId(context) - 1;\n    if (previousAttempt \u003c 0) {\n      throw new IOException (\"Cannot recover task output for first attempt...\");\n    }\n    \n    Path committedTaskPath \u003d getCommittedTaskPath(context);\n    Path previousCommittedTaskPath \u003d getCommittedTaskPath(\n        previousAttempt, context);\n    FileSystem fs \u003d committedTaskPath.getFileSystem(context.getConfiguration());\n    \n    LOG.debug(\"Trying to recover task from \" + previousCommittedTaskPath \n        + \" into \" + committedTaskPath);\n    if (fs.exists(previousCommittedTaskPath)) {\n      if(fs.exists(committedTaskPath)) {\n        if(!fs.delete(committedTaskPath, true)) {\n          throw new IOException(\"Could not delete \"+committedTaskPath);\n        }\n      }\n      //Rename can fail if the parent directory does not yet exist.\n      Path committedParent \u003d committedTaskPath.getParent();\n      fs.mkdirs(committedParent);\n      if(!fs.rename(previousCommittedTaskPath, committedTaskPath)) {\n        throw new IOException(\"Could not rename \" + previousCommittedTaskPath +\n            \" to \" + committedTaskPath);\n      }\n      LOG.info(\"Saved output of \" + attemptId + \" to \" + committedTaskPath);\n    } else {\n      LOG.warn(attemptId+\" had no output to recover.\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java",
      "extendedDetails": {}
    },
    "c7fb49b3c5b8aa394f578e644bbc13fc9cbfcaca": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3170. Fixed job output commit for deep hierarchies. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1183185 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/10/11 6:16 PM",
      "commitName": "c7fb49b3c5b8aa394f578e644bbc13fc9cbfcaca",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "05/10/11 5:15 AM",
      "commitNameOld": "f29bfa0e0e88de49f1558138eeaba1396fa5a1d2",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.54,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,23 @@\n   public void recoverTask(TaskAttemptContext context)\n       throws IOException {\n     context.progress();\n     Path jobOutputPath \u003d \n         new Path(outputPath, getJobAttemptBaseDirName(context));\n     int previousAttempt \u003d         \n         context.getConfiguration().getInt(\n             MRJobConfig.APPLICATION_ATTEMPT_ID, 0) - 1;\n     if (previousAttempt \u003c 0) {\n       throw new IOException (\"Cannot recover task output for first attempt...\");\n     }\n \n     Path pathToRecover \u003d \n         new Path(outputPath, getJobAttemptBaseDirName(previousAttempt));\n+    LOG.debug(\"Trying to recover task from \" + pathToRecover\n+        + \" into \" + jobOutputPath);\n     if (outputFileSystem.exists(pathToRecover)) {\n       // Move the task outputs to their final place\n-      moveJobOutputs(outputFileSystem, jobOutputPath, pathToRecover);\n+      moveJobOutputs(outputFileSystem, \n+          pathToRecover, jobOutputPath, pathToRecover);\n       LOG.info(\"Saved output of job to \" + jobOutputPath);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverTask(TaskAttemptContext context)\n      throws IOException {\n    context.progress();\n    Path jobOutputPath \u003d \n        new Path(outputPath, getJobAttemptBaseDirName(context));\n    int previousAttempt \u003d         \n        context.getConfiguration().getInt(\n            MRJobConfig.APPLICATION_ATTEMPT_ID, 0) - 1;\n    if (previousAttempt \u003c 0) {\n      throw new IOException (\"Cannot recover task output for first attempt...\");\n    }\n\n    Path pathToRecover \u003d \n        new Path(outputPath, getJobAttemptBaseDirName(previousAttempt));\n    LOG.debug(\"Trying to recover task from \" + pathToRecover\n        + \" into \" + jobOutputPath);\n    if (outputFileSystem.exists(pathToRecover)) {\n      // Move the task outputs to their final place\n      moveJobOutputs(outputFileSystem, \n          pathToRecover, jobOutputPath, pathToRecover);\n      LOG.info(\"Saved output of job to \" + jobOutputPath);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java",
      "extendedDetails": {}
    },
    "f29bfa0e0e88de49f1558138eeaba1396fa5a1d2": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2702. Added a new API in OutputCommitter for recovering the outputs of tasks from a crashed job so as to support MR Application Master recovery. Contributed by Sharad Agarwal and Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179188 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/10/11 5:15 AM",
      "commitName": "f29bfa0e0e88de49f1558138eeaba1396fa5a1d2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,20 @@\n+  public void recoverTask(TaskAttemptContext context)\n+      throws IOException {\n+    context.progress();\n+    Path jobOutputPath \u003d \n+        new Path(outputPath, getJobAttemptBaseDirName(context));\n+    int previousAttempt \u003d         \n+        context.getConfiguration().getInt(\n+            MRJobConfig.APPLICATION_ATTEMPT_ID, 0) - 1;\n+    if (previousAttempt \u003c 0) {\n+      throw new IOException (\"Cannot recover task output for first attempt...\");\n+    }\n+\n+    Path pathToRecover \u003d \n+        new Path(outputPath, getJobAttemptBaseDirName(previousAttempt));\n+    if (outputFileSystem.exists(pathToRecover)) {\n+      // Move the task outputs to their final place\n+      moveJobOutputs(outputFileSystem, jobOutputPath, pathToRecover);\n+      LOG.info(\"Saved output of job to \" + jobOutputPath);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverTask(TaskAttemptContext context)\n      throws IOException {\n    context.progress();\n    Path jobOutputPath \u003d \n        new Path(outputPath, getJobAttemptBaseDirName(context));\n    int previousAttempt \u003d         \n        context.getConfiguration().getInt(\n            MRJobConfig.APPLICATION_ATTEMPT_ID, 0) - 1;\n    if (previousAttempt \u003c 0) {\n      throw new IOException (\"Cannot recover task output for first attempt...\");\n    }\n\n    Path pathToRecover \u003d \n        new Path(outputPath, getJobAttemptBaseDirName(previousAttempt));\n    if (outputFileSystem.exists(pathToRecover)) {\n      // Move the task outputs to their final place\n      moveJobOutputs(outputFileSystem, jobOutputPath, pathToRecover);\n      LOG.info(\"Saved output of job to \" + jobOutputPath);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java"
    }
  }
}