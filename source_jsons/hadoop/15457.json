{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataTransferThrottler.java",
  "functionName": "throttle",
  "functionId": "throttle___numOfBytes-long__canceler-Canceler",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/DataTransferThrottler.java",
  "functionStartLine": 94,
  "functionEndLine": 131,
  "numCommitsSeen": 14,
  "timeTaken": 5134,
  "changeHistory": [
    "01af3a31772ee820e932ac70973072e9509a30fa",
    "91c28d440952bdd50f10ff2d892182b8cd7a8065",
    "6d8efb7378b15ccf14719e74094ab7910226a2d6",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "01af3a31772ee820e932ac70973072e9509a30fa": "Ymultichange(Yparameterchange,Ybodychange)",
    "91c28d440952bdd50f10ff2d892182b8cd7a8065": "Ybodychange",
    "6d8efb7378b15ccf14719e74094ab7910226a2d6": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "01af3a31772ee820e932ac70973072e9509a30fa": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6243. HA NameNode transition to active or shutdown may leave lingering image transfer thread. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1587410 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/04/14 9:49 PM",
      "commitName": "01af3a31772ee820e932ac70973072e9509a30fa",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6243. HA NameNode transition to active or shutdown may leave lingering image transfer thread. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1587410 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/04/14 9:49 PM",
          "commitName": "01af3a31772ee820e932ac70973072e9509a30fa",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "24/03/14 4:32 PM",
          "commitNameOld": "c2ef7e239eb0e81cf8a3e971378e9e696202de67",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 21.22,
          "commitsBetweenForRepo": 146,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,38 @@\n-  public synchronized void throttle(long numOfBytes) {\n+  public synchronized void throttle(long numOfBytes, Canceler canceler) {\n     if ( numOfBytes \u003c\u003d 0 ) {\n       return;\n     }\n \n     curReserve -\u003d numOfBytes;\n     bytesAlreadyUsed +\u003d numOfBytes;\n \n     while (curReserve \u003c\u003d 0) {\n+      if (canceler !\u003d null \u0026\u0026 canceler.isCancelled()) {\n+        return;\n+      }\n       long now \u003d monotonicNow();\n       long curPeriodEnd \u003d curPeriodStart + period;\n \n       if ( now \u003c curPeriodEnd ) {\n         // Wait for next period so that curReserve can be increased.\n         try {\n           wait( curPeriodEnd - now );\n         } catch (InterruptedException e) {\n           // Abort throttle and reset interrupted status to make sure other\n           // interrupt handling higher in the call stack executes.\n           Thread.currentThread().interrupt();\n           break;\n         }\n       } else if ( now \u003c  (curPeriodStart + periodExtension)) {\n         curPeriodStart \u003d curPeriodEnd;\n         curReserve +\u003d bytesPerPeriod;\n       } else {\n         // discard the prev period. Throttler might not have\n         // been used for a long time.\n         curPeriodStart \u003d now;\n         curReserve \u003d bytesPerPeriod - bytesAlreadyUsed;\n       }\n     }\n \n     bytesAlreadyUsed -\u003d numOfBytes;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void throttle(long numOfBytes, Canceler canceler) {\n    if ( numOfBytes \u003c\u003d 0 ) {\n      return;\n    }\n\n    curReserve -\u003d numOfBytes;\n    bytesAlreadyUsed +\u003d numOfBytes;\n\n    while (curReserve \u003c\u003d 0) {\n      if (canceler !\u003d null \u0026\u0026 canceler.isCancelled()) {\n        return;\n      }\n      long now \u003d monotonicNow();\n      long curPeriodEnd \u003d curPeriodStart + period;\n\n      if ( now \u003c curPeriodEnd ) {\n        // Wait for next period so that curReserve can be increased.\n        try {\n          wait( curPeriodEnd - now );\n        } catch (InterruptedException e) {\n          // Abort throttle and reset interrupted status to make sure other\n          // interrupt handling higher in the call stack executes.\n          Thread.currentThread().interrupt();\n          break;\n        }\n      } else if ( now \u003c  (curPeriodStart + periodExtension)) {\n        curPeriodStart \u003d curPeriodEnd;\n        curReserve +\u003d bytesPerPeriod;\n      } else {\n        // discard the prev period. Throttler might not have\n        // been used for a long time.\n        curPeriodStart \u003d now;\n        curReserve \u003d bytesPerPeriod - bytesAlreadyUsed;\n      }\n    }\n\n    bytesAlreadyUsed -\u003d numOfBytes;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/DataTransferThrottler.java",
          "extendedDetails": {
            "oldValue": "[numOfBytes-long]",
            "newValue": "[numOfBytes-long, canceler-Canceler]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6243. HA NameNode transition to active or shutdown may leave lingering image transfer thread. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1587410 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/04/14 9:49 PM",
          "commitName": "01af3a31772ee820e932ac70973072e9509a30fa",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "24/03/14 4:32 PM",
          "commitNameOld": "c2ef7e239eb0e81cf8a3e971378e9e696202de67",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 21.22,
          "commitsBetweenForRepo": 146,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,38 @@\n-  public synchronized void throttle(long numOfBytes) {\n+  public synchronized void throttle(long numOfBytes, Canceler canceler) {\n     if ( numOfBytes \u003c\u003d 0 ) {\n       return;\n     }\n \n     curReserve -\u003d numOfBytes;\n     bytesAlreadyUsed +\u003d numOfBytes;\n \n     while (curReserve \u003c\u003d 0) {\n+      if (canceler !\u003d null \u0026\u0026 canceler.isCancelled()) {\n+        return;\n+      }\n       long now \u003d monotonicNow();\n       long curPeriodEnd \u003d curPeriodStart + period;\n \n       if ( now \u003c curPeriodEnd ) {\n         // Wait for next period so that curReserve can be increased.\n         try {\n           wait( curPeriodEnd - now );\n         } catch (InterruptedException e) {\n           // Abort throttle and reset interrupted status to make sure other\n           // interrupt handling higher in the call stack executes.\n           Thread.currentThread().interrupt();\n           break;\n         }\n       } else if ( now \u003c  (curPeriodStart + periodExtension)) {\n         curPeriodStart \u003d curPeriodEnd;\n         curReserve +\u003d bytesPerPeriod;\n       } else {\n         // discard the prev period. Throttler might not have\n         // been used for a long time.\n         curPeriodStart \u003d now;\n         curReserve \u003d bytesPerPeriod - bytesAlreadyUsed;\n       }\n     }\n \n     bytesAlreadyUsed -\u003d numOfBytes;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void throttle(long numOfBytes, Canceler canceler) {\n    if ( numOfBytes \u003c\u003d 0 ) {\n      return;\n    }\n\n    curReserve -\u003d numOfBytes;\n    bytesAlreadyUsed +\u003d numOfBytes;\n\n    while (curReserve \u003c\u003d 0) {\n      if (canceler !\u003d null \u0026\u0026 canceler.isCancelled()) {\n        return;\n      }\n      long now \u003d monotonicNow();\n      long curPeriodEnd \u003d curPeriodStart + period;\n\n      if ( now \u003c curPeriodEnd ) {\n        // Wait for next period so that curReserve can be increased.\n        try {\n          wait( curPeriodEnd - now );\n        } catch (InterruptedException e) {\n          // Abort throttle and reset interrupted status to make sure other\n          // interrupt handling higher in the call stack executes.\n          Thread.currentThread().interrupt();\n          break;\n        }\n      } else if ( now \u003c  (curPeriodStart + periodExtension)) {\n        curPeriodStart \u003d curPeriodEnd;\n        curReserve +\u003d bytesPerPeriod;\n      } else {\n        // discard the prev period. Throttler might not have\n        // been used for a long time.\n        curPeriodStart \u003d now;\n        curReserve \u003d bytesPerPeriod - bytesAlreadyUsed;\n      }\n    }\n\n    bytesAlreadyUsed -\u003d numOfBytes;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/DataTransferThrottler.java",
          "extendedDetails": {}
        }
      ]
    },
    "91c28d440952bdd50f10ff2d892182b8cd7a8065": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4328. TestLargeBlock#testLargeBlockSize is timing out. Contributed by Chris Nauroth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1431867 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/13 7:44 PM",
      "commitName": "91c28d440952bdd50f10ff2d892182b8cd7a8065",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "12/07/12 12:01 PM",
      "commitNameOld": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 182.36,
      "commitsBetweenForRepo": 979,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,35 @@\n   public synchronized void throttle(long numOfBytes) {\n     if ( numOfBytes \u003c\u003d 0 ) {\n       return;\n     }\n \n     curReserve -\u003d numOfBytes;\n     bytesAlreadyUsed +\u003d numOfBytes;\n \n     while (curReserve \u003c\u003d 0) {\n       long now \u003d monotonicNow();\n       long curPeriodEnd \u003d curPeriodStart + period;\n \n       if ( now \u003c curPeriodEnd ) {\n         // Wait for next period so that curReserve can be increased.\n         try {\n           wait( curPeriodEnd - now );\n-        } catch (InterruptedException ignored) {}\n+        } catch (InterruptedException e) {\n+          // Abort throttle and reset interrupted status to make sure other\n+          // interrupt handling higher in the call stack executes.\n+          Thread.currentThread().interrupt();\n+          break;\n+        }\n       } else if ( now \u003c  (curPeriodStart + periodExtension)) {\n         curPeriodStart \u003d curPeriodEnd;\n         curReserve +\u003d bytesPerPeriod;\n       } else {\n         // discard the prev period. Throttler might not have\n         // been used for a long time.\n         curPeriodStart \u003d now;\n         curReserve \u003d bytesPerPeriod - bytesAlreadyUsed;\n       }\n     }\n \n     bytesAlreadyUsed -\u003d numOfBytes;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void throttle(long numOfBytes) {\n    if ( numOfBytes \u003c\u003d 0 ) {\n      return;\n    }\n\n    curReserve -\u003d numOfBytes;\n    bytesAlreadyUsed +\u003d numOfBytes;\n\n    while (curReserve \u003c\u003d 0) {\n      long now \u003d monotonicNow();\n      long curPeriodEnd \u003d curPeriodStart + period;\n\n      if ( now \u003c curPeriodEnd ) {\n        // Wait for next period so that curReserve can be increased.\n        try {\n          wait( curPeriodEnd - now );\n        } catch (InterruptedException e) {\n          // Abort throttle and reset interrupted status to make sure other\n          // interrupt handling higher in the call stack executes.\n          Thread.currentThread().interrupt();\n          break;\n        }\n      } else if ( now \u003c  (curPeriodStart + periodExtension)) {\n        curPeriodStart \u003d curPeriodEnd;\n        curReserve +\u003d bytesPerPeriod;\n      } else {\n        // discard the prev period. Throttler might not have\n        // been used for a long time.\n        curPeriodStart \u003d now;\n        curReserve \u003d bytesPerPeriod - bytesAlreadyUsed;\n      }\n    }\n\n    bytesAlreadyUsed -\u003d numOfBytes;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/DataTransferThrottler.java",
      "extendedDetails": {}
    },
    "6d8efb7378b15ccf14719e74094ab7910226a2d6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3485. DataTransferThrottler will over-throttle when currentTimeMillis jumps. Contributed by Andy Isaacson.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1347751 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/06/12 11:41 AM",
      "commitName": "6d8efb7378b15ccf14719e74094ab7910226a2d6",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 287.77,
      "commitsBetweenForRepo": 2013,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public synchronized void throttle(long numOfBytes) {\n     if ( numOfBytes \u003c\u003d 0 ) {\n       return;\n     }\n \n     curReserve -\u003d numOfBytes;\n     bytesAlreadyUsed +\u003d numOfBytes;\n \n     while (curReserve \u003c\u003d 0) {\n-      long now \u003d System.currentTimeMillis();\n+      long now \u003d monotonicNow();\n       long curPeriodEnd \u003d curPeriodStart + period;\n \n       if ( now \u003c curPeriodEnd ) {\n         // Wait for next period so that curReserve can be increased.\n         try {\n           wait( curPeriodEnd - now );\n         } catch (InterruptedException ignored) {}\n       } else if ( now \u003c  (curPeriodStart + periodExtension)) {\n         curPeriodStart \u003d curPeriodEnd;\n         curReserve +\u003d bytesPerPeriod;\n       } else {\n         // discard the prev period. Throttler might not have\n         // been used for a long time.\n         curPeriodStart \u003d now;\n         curReserve \u003d bytesPerPeriod - bytesAlreadyUsed;\n       }\n     }\n \n     bytesAlreadyUsed -\u003d numOfBytes;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void throttle(long numOfBytes) {\n    if ( numOfBytes \u003c\u003d 0 ) {\n      return;\n    }\n\n    curReserve -\u003d numOfBytes;\n    bytesAlreadyUsed +\u003d numOfBytes;\n\n    while (curReserve \u003c\u003d 0) {\n      long now \u003d monotonicNow();\n      long curPeriodEnd \u003d curPeriodStart + period;\n\n      if ( now \u003c curPeriodEnd ) {\n        // Wait for next period so that curReserve can be increased.\n        try {\n          wait( curPeriodEnd - now );\n        } catch (InterruptedException ignored) {}\n      } else if ( now \u003c  (curPeriodStart + periodExtension)) {\n        curPeriodStart \u003d curPeriodEnd;\n        curReserve +\u003d bytesPerPeriod;\n      } else {\n        // discard the prev period. Throttler might not have\n        // been used for a long time.\n        curPeriodStart \u003d now;\n        curReserve \u003d bytesPerPeriod - bytesAlreadyUsed;\n      }\n    }\n\n    bytesAlreadyUsed -\u003d numOfBytes;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/DataTransferThrottler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void throttle(long numOfBytes) {\n    if ( numOfBytes \u003c\u003d 0 ) {\n      return;\n    }\n\n    curReserve -\u003d numOfBytes;\n    bytesAlreadyUsed +\u003d numOfBytes;\n\n    while (curReserve \u003c\u003d 0) {\n      long now \u003d System.currentTimeMillis();\n      long curPeriodEnd \u003d curPeriodStart + period;\n\n      if ( now \u003c curPeriodEnd ) {\n        // Wait for next period so that curReserve can be increased.\n        try {\n          wait( curPeriodEnd - now );\n        } catch (InterruptedException ignored) {}\n      } else if ( now \u003c  (curPeriodStart + periodExtension)) {\n        curPeriodStart \u003d curPeriodEnd;\n        curReserve +\u003d bytesPerPeriod;\n      } else {\n        // discard the prev period. Throttler might not have\n        // been used for a long time.\n        curPeriodStart \u003d now;\n        curReserve \u003d bytesPerPeriod - bytesAlreadyUsed;\n      }\n    }\n\n    bytesAlreadyUsed -\u003d numOfBytes;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/DataTransferThrottler.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/DataTransferThrottler.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/DataTransferThrottler.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void throttle(long numOfBytes) {\n    if ( numOfBytes \u003c\u003d 0 ) {\n      return;\n    }\n\n    curReserve -\u003d numOfBytes;\n    bytesAlreadyUsed +\u003d numOfBytes;\n\n    while (curReserve \u003c\u003d 0) {\n      long now \u003d System.currentTimeMillis();\n      long curPeriodEnd \u003d curPeriodStart + period;\n\n      if ( now \u003c curPeriodEnd ) {\n        // Wait for next period so that curReserve can be increased.\n        try {\n          wait( curPeriodEnd - now );\n        } catch (InterruptedException ignored) {}\n      } else if ( now \u003c  (curPeriodStart + periodExtension)) {\n        curPeriodStart \u003d curPeriodEnd;\n        curReserve +\u003d bytesPerPeriod;\n      } else {\n        // discard the prev period. Throttler might not have\n        // been used for a long time.\n        curPeriodStart \u003d now;\n        curReserve \u003d bytesPerPeriod - bytesAlreadyUsed;\n      }\n    }\n\n    bytesAlreadyUsed -\u003d numOfBytes;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/DataTransferThrottler.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/util/DataTransferThrottler.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/DataTransferThrottler.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,30 @@\n+  public synchronized void throttle(long numOfBytes) {\n+    if ( numOfBytes \u003c\u003d 0 ) {\n+      return;\n+    }\n+\n+    curReserve -\u003d numOfBytes;\n+    bytesAlreadyUsed +\u003d numOfBytes;\n+\n+    while (curReserve \u003c\u003d 0) {\n+      long now \u003d System.currentTimeMillis();\n+      long curPeriodEnd \u003d curPeriodStart + period;\n+\n+      if ( now \u003c curPeriodEnd ) {\n+        // Wait for next period so that curReserve can be increased.\n+        try {\n+          wait( curPeriodEnd - now );\n+        } catch (InterruptedException ignored) {}\n+      } else if ( now \u003c  (curPeriodStart + periodExtension)) {\n+        curPeriodStart \u003d curPeriodEnd;\n+        curReserve +\u003d bytesPerPeriod;\n+      } else {\n+        // discard the prev period. Throttler might not have\n+        // been used for a long time.\n+        curPeriodStart \u003d now;\n+        curReserve \u003d bytesPerPeriod - bytesAlreadyUsed;\n+      }\n+    }\n+\n+    bytesAlreadyUsed -\u003d numOfBytes;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void throttle(long numOfBytes) {\n    if ( numOfBytes \u003c\u003d 0 ) {\n      return;\n    }\n\n    curReserve -\u003d numOfBytes;\n    bytesAlreadyUsed +\u003d numOfBytes;\n\n    while (curReserve \u003c\u003d 0) {\n      long now \u003d System.currentTimeMillis();\n      long curPeriodEnd \u003d curPeriodStart + period;\n\n      if ( now \u003c curPeriodEnd ) {\n        // Wait for next period so that curReserve can be increased.\n        try {\n          wait( curPeriodEnd - now );\n        } catch (InterruptedException ignored) {}\n      } else if ( now \u003c  (curPeriodStart + periodExtension)) {\n        curPeriodStart \u003d curPeriodEnd;\n        curReserve +\u003d bytesPerPeriod;\n      } else {\n        // discard the prev period. Throttler might not have\n        // been used for a long time.\n        curPeriodStart \u003d now;\n        curReserve \u003d bytesPerPeriod - bytesAlreadyUsed;\n      }\n    }\n\n    bytesAlreadyUsed -\u003d numOfBytes;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/util/DataTransferThrottler.java"
    }
  }
}