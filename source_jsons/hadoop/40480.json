{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SingleConstraintAppPlacementAllocator.java",
  "functionName": "validateAndGetTargetNodePartition",
  "functionId": "validateAndGetTargetNodePartition___placementConstraint-PlacementConstraint",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/SingleConstraintAppPlacementAllocator.java",
  "functionStartLine": 256,
  "functionEndLine": 292,
  "numCommitsSeen": 17,
  "timeTaken": 1567,
  "changeHistory": [
    "83dcb9d87ec75f2be0acb8972f5f0faefe6ffbcd",
    "1ac01444a24faee6f74f2e83d9521eb4e0be651b"
  ],
  "changeHistoryShort": {
    "83dcb9d87ec75f2be0acb8972f5f0faefe6ffbcd": "Ybodychange",
    "1ac01444a24faee6f74f2e83d9521eb4e0be651b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "83dcb9d87ec75f2be0acb8972f5f0faefe6ffbcd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9209. When nodePartition is not set in Placement Constraints, containers are allocated only in default partition. Contributed by Tarun Parimi.\n",
      "commitDate": "21/06/19 2:41 AM",
      "commitName": "83dcb9d87ec75f2be0acb8972f5f0faefe6ffbcd",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "06/05/19 5:00 AM",
      "commitNameOld": "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 45.9,
      "commitsBetweenForRepo": 316,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,37 @@\n   private String validateAndGetTargetNodePartition(\n       PlacementConstraint placementConstraint) {\n-    String nodePartition \u003d RMNodeLabelsManager.NO_LABEL;\n+    String defaultNodeLabelExpression \u003d\n+        appSchedulingInfo.getDefaultNodeLabelExpression();\n+    String nodePartition \u003d defaultNodeLabelExpression \u003d\u003d null ?\n+        RMNodeLabelsManager.NO_LABEL : defaultNodeLabelExpression;\n     if (placementConstraint !\u003d null \u0026\u0026\n         placementConstraint.getConstraintExpr() !\u003d null) {\n       PlacementConstraint.AbstractConstraint ac \u003d\n           placementConstraint.getConstraintExpr();\n       if (ac !\u003d null \u0026\u0026 ac instanceof PlacementConstraint.SingleConstraint) {\n         PlacementConstraint.SingleConstraint singleConstraint \u003d\n             (PlacementConstraint.SingleConstraint) ac;\n         for (PlacementConstraint.TargetExpression targetExpression :\n             singleConstraint.getTargetExpressions()) {\n           // Handle node partition\n           if (targetExpression.getTargetType().equals(NODE_ATTRIBUTE) \u0026\u0026\n               targetExpression.getTargetKey().equals(NODE_PARTITION)) {\n             Set\u003cString\u003e values \u003d targetExpression.getTargetValues();\n             if (values \u003d\u003d null || values.isEmpty()) {\n               continue;\n             }\n             if (values.size() \u003e 1) {\n               throwExceptionWithMetaInfo(\n                   \"Inside one targetExpression, we only support\"\n                       + \" affinity to at most one node partition now\");\n             }\n             nodePartition \u003d values.iterator().next();\n             if (nodePartition !\u003d null) {\n               break;\n             }\n           }\n         }\n       }\n     }\n     return nodePartition;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String validateAndGetTargetNodePartition(\n      PlacementConstraint placementConstraint) {\n    String defaultNodeLabelExpression \u003d\n        appSchedulingInfo.getDefaultNodeLabelExpression();\n    String nodePartition \u003d defaultNodeLabelExpression \u003d\u003d null ?\n        RMNodeLabelsManager.NO_LABEL : defaultNodeLabelExpression;\n    if (placementConstraint !\u003d null \u0026\u0026\n        placementConstraint.getConstraintExpr() !\u003d null) {\n      PlacementConstraint.AbstractConstraint ac \u003d\n          placementConstraint.getConstraintExpr();\n      if (ac !\u003d null \u0026\u0026 ac instanceof PlacementConstraint.SingleConstraint) {\n        PlacementConstraint.SingleConstraint singleConstraint \u003d\n            (PlacementConstraint.SingleConstraint) ac;\n        for (PlacementConstraint.TargetExpression targetExpression :\n            singleConstraint.getTargetExpressions()) {\n          // Handle node partition\n          if (targetExpression.getTargetType().equals(NODE_ATTRIBUTE) \u0026\u0026\n              targetExpression.getTargetKey().equals(NODE_PARTITION)) {\n            Set\u003cString\u003e values \u003d targetExpression.getTargetValues();\n            if (values \u003d\u003d null || values.isEmpty()) {\n              continue;\n            }\n            if (values.size() \u003e 1) {\n              throwExceptionWithMetaInfo(\n                  \"Inside one targetExpression, we only support\"\n                      + \" affinity to at most one node partition now\");\n            }\n            nodePartition \u003d values.iterator().next();\n            if (nodePartition !\u003d null) {\n              break;\n            }\n          }\n        }\n      }\n    }\n    return nodePartition;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/SingleConstraintAppPlacementAllocator.java",
      "extendedDetails": {}
    },
    "1ac01444a24faee6f74f2e83d9521eb4e0be651b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8015. Support all types of placement constraint support for Capacity Scheduler. Contributed by Weiwei Yang.\n",
      "commitDate": "22/08/18 9:35 PM",
      "commitName": "1ac01444a24faee6f74f2e83d9521eb4e0be651b",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,34 @@\n+  private String validateAndGetTargetNodePartition(\n+      PlacementConstraint placementConstraint) {\n+    String nodePartition \u003d RMNodeLabelsManager.NO_LABEL;\n+    if (placementConstraint !\u003d null \u0026\u0026\n+        placementConstraint.getConstraintExpr() !\u003d null) {\n+      PlacementConstraint.AbstractConstraint ac \u003d\n+          placementConstraint.getConstraintExpr();\n+      if (ac !\u003d null \u0026\u0026 ac instanceof PlacementConstraint.SingleConstraint) {\n+        PlacementConstraint.SingleConstraint singleConstraint \u003d\n+            (PlacementConstraint.SingleConstraint) ac;\n+        for (PlacementConstraint.TargetExpression targetExpression :\n+            singleConstraint.getTargetExpressions()) {\n+          // Handle node partition\n+          if (targetExpression.getTargetType().equals(NODE_ATTRIBUTE) \u0026\u0026\n+              targetExpression.getTargetKey().equals(NODE_PARTITION)) {\n+            Set\u003cString\u003e values \u003d targetExpression.getTargetValues();\n+            if (values \u003d\u003d null || values.isEmpty()) {\n+              continue;\n+            }\n+            if (values.size() \u003e 1) {\n+              throwExceptionWithMetaInfo(\n+                  \"Inside one targetExpression, we only support\"\n+                      + \" affinity to at most one node partition now\");\n+            }\n+            nodePartition \u003d values.iterator().next();\n+            if (nodePartition !\u003d null) {\n+              break;\n+            }\n+          }\n+        }\n+      }\n+    }\n+    return nodePartition;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String validateAndGetTargetNodePartition(\n      PlacementConstraint placementConstraint) {\n    String nodePartition \u003d RMNodeLabelsManager.NO_LABEL;\n    if (placementConstraint !\u003d null \u0026\u0026\n        placementConstraint.getConstraintExpr() !\u003d null) {\n      PlacementConstraint.AbstractConstraint ac \u003d\n          placementConstraint.getConstraintExpr();\n      if (ac !\u003d null \u0026\u0026 ac instanceof PlacementConstraint.SingleConstraint) {\n        PlacementConstraint.SingleConstraint singleConstraint \u003d\n            (PlacementConstraint.SingleConstraint) ac;\n        for (PlacementConstraint.TargetExpression targetExpression :\n            singleConstraint.getTargetExpressions()) {\n          // Handle node partition\n          if (targetExpression.getTargetType().equals(NODE_ATTRIBUTE) \u0026\u0026\n              targetExpression.getTargetKey().equals(NODE_PARTITION)) {\n            Set\u003cString\u003e values \u003d targetExpression.getTargetValues();\n            if (values \u003d\u003d null || values.isEmpty()) {\n              continue;\n            }\n            if (values.size() \u003e 1) {\n              throwExceptionWithMetaInfo(\n                  \"Inside one targetExpression, we only support\"\n                      + \" affinity to at most one node partition now\");\n            }\n            nodePartition \u003d values.iterator().next();\n            if (nodePartition !\u003d null) {\n              break;\n            }\n          }\n        }\n      }\n    }\n    return nodePartition;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/SingleConstraintAppPlacementAllocator.java"
    }
  }
}