{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocatedBlocks.java",
  "functionName": "findBlock",
  "functionId": "findBlock___offset-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/LocatedBlocks.java",
  "functionStartLine": 131,
  "functionEndLine": 155,
  "numCommitsSeen": 19,
  "timeTaken": 5161,
  "changeHistory": [
    "5c97db07fb306842f49d73a67a90cecec19a7833",
    "a6a5aae472d015d2ea5cd746719485dff93873a8",
    "0e8e499ff482c165d21c8e4f5ff9c33f306ca0d9",
    "c4e4e561608d332245837060e777786644046a90",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "5c97db07fb306842f49d73a67a90cecec19a7833": "Yfilerename",
    "a6a5aae472d015d2ea5cd746719485dff93873a8": "Ybodychange",
    "0e8e499ff482c165d21c8e4f5ff9c33f306ca0d9": "Ybodychange",
    "c4e4e561608d332245837060e777786644046a90": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5c97db07fb306842f49d73a67a90cecec19a7833": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8169. Move LocatedBlocks and related classes to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "20/04/15 12:36 AM",
      "commitName": "5c97db07fb306842f49d73a67a90cecec19a7833",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "19/04/15 4:09 PM",
      "commitNameOld": "8511d80804de052618168a456a475ee0f7aa6d8c",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.35,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public int findBlock(long offset) {\n     // create fake block of size 0 as a key\n     LocatedBlock key \u003d new LocatedBlock(\n         new ExtendedBlock(), new DatanodeInfo[0]);\n     key.setStartOffset(offset);\n     key.getBlock().setNumBytes(1);\n-    Comparator\u003cLocatedBlock\u003e comp \u003d \n+    Comparator\u003cLocatedBlock\u003e comp \u003d\n       new Comparator\u003cLocatedBlock\u003e() {\n         // Returns 0 iff a is inside b or b is inside a\n         @Override\n         public int compare(LocatedBlock a, LocatedBlock b) {\n           long aBeg \u003d a.getStartOffset();\n           long bBeg \u003d b.getStartOffset();\n           long aEnd \u003d aBeg + a.getBlockSize();\n           long bEnd \u003d bBeg + b.getBlockSize();\n-          if(aBeg \u003c\u003d bBeg \u0026\u0026 bEnd \u003c\u003d aEnd \n+          if(aBeg \u003c\u003d bBeg \u0026\u0026 bEnd \u003c\u003d aEnd\n               || bBeg \u003c\u003d aBeg \u0026\u0026 aEnd \u003c\u003d bEnd)\n             return 0; // one of the blocks is inside the other\n           if(aBeg \u003c bBeg)\n             return -1; // a\u0027s left bound is to the left of the b\u0027s\n           return 1;\n         }\n       };\n     return Collections.binarySearch(blocks, key, comp);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int findBlock(long offset) {\n    // create fake block of size 0 as a key\n    LocatedBlock key \u003d new LocatedBlock(\n        new ExtendedBlock(), new DatanodeInfo[0]);\n    key.setStartOffset(offset);\n    key.getBlock().setNumBytes(1);\n    Comparator\u003cLocatedBlock\u003e comp \u003d\n      new Comparator\u003cLocatedBlock\u003e() {\n        // Returns 0 iff a is inside b or b is inside a\n        @Override\n        public int compare(LocatedBlock a, LocatedBlock b) {\n          long aBeg \u003d a.getStartOffset();\n          long bBeg \u003d b.getStartOffset();\n          long aEnd \u003d aBeg + a.getBlockSize();\n          long bEnd \u003d bBeg + b.getBlockSize();\n          if(aBeg \u003c\u003d bBeg \u0026\u0026 bEnd \u003c\u003d aEnd\n              || bBeg \u003c\u003d aBeg \u0026\u0026 aEnd \u003c\u003d bEnd)\n            return 0; // one of the blocks is inside the other\n          if(aBeg \u003c bBeg)\n            return -1; // a\u0027s left bound is to the left of the b\u0027s\n          return 1;\n        }\n      };\n    return Collections.binarySearch(blocks, key, comp);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/LocatedBlocks.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/LocatedBlocks.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/LocatedBlocks.java"
      }
    },
    "a6a5aae472d015d2ea5cd746719485dff93873a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7829. Code clean up for LocatedBlock. Contributed by Takanobu Asanuma.\n",
      "commitDate": "20/03/15 10:50 AM",
      "commitName": "a6a5aae472d015d2ea5cd746719485dff93873a8",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "02/12/14 8:57 PM",
      "commitNameOld": "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f",
      "commitAuthorOld": "stack",
      "daysBetweenCommits": 107.54,
      "commitsBetweenForRepo": 842,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public int findBlock(long offset) {\n     // create fake block of size 0 as a key\n     LocatedBlock key \u003d new LocatedBlock(\n-        new ExtendedBlock(), new DatanodeInfo[0], 0L, false);\n+        new ExtendedBlock(), new DatanodeInfo[0]);\n     key.setStartOffset(offset);\n     key.getBlock().setNumBytes(1);\n     Comparator\u003cLocatedBlock\u003e comp \u003d \n       new Comparator\u003cLocatedBlock\u003e() {\n         // Returns 0 iff a is inside b or b is inside a\n         @Override\n         public int compare(LocatedBlock a, LocatedBlock b) {\n           long aBeg \u003d a.getStartOffset();\n           long bBeg \u003d b.getStartOffset();\n           long aEnd \u003d aBeg + a.getBlockSize();\n           long bEnd \u003d bBeg + b.getBlockSize();\n           if(aBeg \u003c\u003d bBeg \u0026\u0026 bEnd \u003c\u003d aEnd \n               || bBeg \u003c\u003d aBeg \u0026\u0026 aEnd \u003c\u003d bEnd)\n             return 0; // one of the blocks is inside the other\n           if(aBeg \u003c bBeg)\n             return -1; // a\u0027s left bound is to the left of the b\u0027s\n           return 1;\n         }\n       };\n     return Collections.binarySearch(blocks, key, comp);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int findBlock(long offset) {\n    // create fake block of size 0 as a key\n    LocatedBlock key \u003d new LocatedBlock(\n        new ExtendedBlock(), new DatanodeInfo[0]);\n    key.setStartOffset(offset);\n    key.getBlock().setNumBytes(1);\n    Comparator\u003cLocatedBlock\u003e comp \u003d \n      new Comparator\u003cLocatedBlock\u003e() {\n        // Returns 0 iff a is inside b or b is inside a\n        @Override\n        public int compare(LocatedBlock a, LocatedBlock b) {\n          long aBeg \u003d a.getStartOffset();\n          long bBeg \u003d b.getStartOffset();\n          long aEnd \u003d aBeg + a.getBlockSize();\n          long bEnd \u003d bBeg + b.getBlockSize();\n          if(aBeg \u003c\u003d bBeg \u0026\u0026 bEnd \u003c\u003d aEnd \n              || bBeg \u003c\u003d aBeg \u0026\u0026 aEnd \u003c\u003d bEnd)\n            return 0; // one of the blocks is inside the other\n          if(aBeg \u003c bBeg)\n            return -1; // a\u0027s left bound is to the left of the b\u0027s\n          return 1;\n        }\n      };\n    return Collections.binarySearch(blocks, key, comp);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/LocatedBlocks.java",
      "extendedDetails": {}
    },
    "0e8e499ff482c165d21c8e4f5ff9c33f306ca0d9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3659. Add missing @Override to methods across the hadoop-hdfs project. Contributed by Brandon Li. (harsh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1361894 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/07/12 7:58 PM",
      "commitName": "0e8e499ff482c165d21c8e4f5ff9c33f306ca0d9",
      "commitAuthor": "Harsh J",
      "commitDateOld": "15/05/12 10:23 AM",
      "commitNameOld": "c4e4e561608d332245837060e777786644046a90",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 61.4,
      "commitsBetweenForRepo": 309,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   public int findBlock(long offset) {\n     // create fake block of size 0 as a key\n     LocatedBlock key \u003d new LocatedBlock(\n         new ExtendedBlock(), new DatanodeInfo[0], 0L, false);\n     key.setStartOffset(offset);\n     key.getBlock().setNumBytes(1);\n     Comparator\u003cLocatedBlock\u003e comp \u003d \n       new Comparator\u003cLocatedBlock\u003e() {\n         // Returns 0 iff a is inside b or b is inside a\n+        @Override\n         public int compare(LocatedBlock a, LocatedBlock b) {\n           long aBeg \u003d a.getStartOffset();\n           long bBeg \u003d b.getStartOffset();\n           long aEnd \u003d aBeg + a.getBlockSize();\n           long bEnd \u003d bBeg + b.getBlockSize();\n           if(aBeg \u003c\u003d bBeg \u0026\u0026 bEnd \u003c\u003d aEnd \n               || bBeg \u003c\u003d aBeg \u0026\u0026 aEnd \u003c\u003d bEnd)\n             return 0; // one of the blocks is inside the other\n           if(aBeg \u003c bBeg)\n             return -1; // a\u0027s left bound is to the left of the b\u0027s\n           return 1;\n         }\n       };\n     return Collections.binarySearch(blocks, key, comp);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int findBlock(long offset) {\n    // create fake block of size 0 as a key\n    LocatedBlock key \u003d new LocatedBlock(\n        new ExtendedBlock(), new DatanodeInfo[0], 0L, false);\n    key.setStartOffset(offset);\n    key.getBlock().setNumBytes(1);\n    Comparator\u003cLocatedBlock\u003e comp \u003d \n      new Comparator\u003cLocatedBlock\u003e() {\n        // Returns 0 iff a is inside b or b is inside a\n        @Override\n        public int compare(LocatedBlock a, LocatedBlock b) {\n          long aBeg \u003d a.getStartOffset();\n          long bBeg \u003d b.getStartOffset();\n          long aEnd \u003d aBeg + a.getBlockSize();\n          long bEnd \u003d bBeg + b.getBlockSize();\n          if(aBeg \u003c\u003d bBeg \u0026\u0026 bEnd \u003c\u003d aEnd \n              || bBeg \u003c\u003d aBeg \u0026\u0026 aEnd \u003c\u003d bEnd)\n            return 0; // one of the blocks is inside the other\n          if(aBeg \u003c bBeg)\n            return -1; // a\u0027s left bound is to the left of the b\u0027s\n          return 1;\n        }\n      };\n    return Collections.binarySearch(blocks, key, comp);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/LocatedBlocks.java",
      "extendedDetails": {}
    },
    "c4e4e561608d332245837060e777786644046a90": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3419. Cleanup LocatedBlock. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1338802 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/05/12 10:23 AM",
      "commitName": "c4e4e561608d332245837060e777786644046a90",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "10/04/12 6:10 PM",
      "commitNameOld": "80447bd35a79ca58a03354d0552fbefd4edd7565",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 34.68,
      "commitsBetweenForRepo": 228,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   public int findBlock(long offset) {\n-    // create fake block of size 1 as a key\n-    LocatedBlock key \u003d new LocatedBlock();\n+    // create fake block of size 0 as a key\n+    LocatedBlock key \u003d new LocatedBlock(\n+        new ExtendedBlock(), new DatanodeInfo[0], 0L, false);\n     key.setStartOffset(offset);\n     key.getBlock().setNumBytes(1);\n     Comparator\u003cLocatedBlock\u003e comp \u003d \n       new Comparator\u003cLocatedBlock\u003e() {\n         // Returns 0 iff a is inside b or b is inside a\n         public int compare(LocatedBlock a, LocatedBlock b) {\n           long aBeg \u003d a.getStartOffset();\n           long bBeg \u003d b.getStartOffset();\n           long aEnd \u003d aBeg + a.getBlockSize();\n           long bEnd \u003d bBeg + b.getBlockSize();\n           if(aBeg \u003c\u003d bBeg \u0026\u0026 bEnd \u003c\u003d aEnd \n               || bBeg \u003c\u003d aBeg \u0026\u0026 aEnd \u003c\u003d bEnd)\n             return 0; // one of the blocks is inside the other\n           if(aBeg \u003c bBeg)\n             return -1; // a\u0027s left bound is to the left of the b\u0027s\n           return 1;\n         }\n       };\n     return Collections.binarySearch(blocks, key, comp);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int findBlock(long offset) {\n    // create fake block of size 0 as a key\n    LocatedBlock key \u003d new LocatedBlock(\n        new ExtendedBlock(), new DatanodeInfo[0], 0L, false);\n    key.setStartOffset(offset);\n    key.getBlock().setNumBytes(1);\n    Comparator\u003cLocatedBlock\u003e comp \u003d \n      new Comparator\u003cLocatedBlock\u003e() {\n        // Returns 0 iff a is inside b or b is inside a\n        public int compare(LocatedBlock a, LocatedBlock b) {\n          long aBeg \u003d a.getStartOffset();\n          long bBeg \u003d b.getStartOffset();\n          long aEnd \u003d aBeg + a.getBlockSize();\n          long bEnd \u003d bBeg + b.getBlockSize();\n          if(aBeg \u003c\u003d bBeg \u0026\u0026 bEnd \u003c\u003d aEnd \n              || bBeg \u003c\u003d aBeg \u0026\u0026 aEnd \u003c\u003d bEnd)\n            return 0; // one of the blocks is inside the other\n          if(aBeg \u003c bBeg)\n            return -1; // a\u0027s left bound is to the left of the b\u0027s\n          return 1;\n        }\n      };\n    return Collections.binarySearch(blocks, key, comp);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/LocatedBlocks.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int findBlock(long offset) {\n    // create fake block of size 1 as a key\n    LocatedBlock key \u003d new LocatedBlock();\n    key.setStartOffset(offset);\n    key.getBlock().setNumBytes(1);\n    Comparator\u003cLocatedBlock\u003e comp \u003d \n      new Comparator\u003cLocatedBlock\u003e() {\n        // Returns 0 iff a is inside b or b is inside a\n        public int compare(LocatedBlock a, LocatedBlock b) {\n          long aBeg \u003d a.getStartOffset();\n          long bBeg \u003d b.getStartOffset();\n          long aEnd \u003d aBeg + a.getBlockSize();\n          long bEnd \u003d bBeg + b.getBlockSize();\n          if(aBeg \u003c\u003d bBeg \u0026\u0026 bEnd \u003c\u003d aEnd \n              || bBeg \u003c\u003d aBeg \u0026\u0026 aEnd \u003c\u003d bEnd)\n            return 0; // one of the blocks is inside the other\n          if(aBeg \u003c bBeg)\n            return -1; // a\u0027s left bound is to the left of the b\u0027s\n          return 1;\n        }\n      };\n    return Collections.binarySearch(blocks, key, comp);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/LocatedBlocks.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/LocatedBlocks.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/LocatedBlocks.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int findBlock(long offset) {\n    // create fake block of size 1 as a key\n    LocatedBlock key \u003d new LocatedBlock();\n    key.setStartOffset(offset);\n    key.getBlock().setNumBytes(1);\n    Comparator\u003cLocatedBlock\u003e comp \u003d \n      new Comparator\u003cLocatedBlock\u003e() {\n        // Returns 0 iff a is inside b or b is inside a\n        public int compare(LocatedBlock a, LocatedBlock b) {\n          long aBeg \u003d a.getStartOffset();\n          long bBeg \u003d b.getStartOffset();\n          long aEnd \u003d aBeg + a.getBlockSize();\n          long bEnd \u003d bBeg + b.getBlockSize();\n          if(aBeg \u003c\u003d bBeg \u0026\u0026 bEnd \u003c\u003d aEnd \n              || bBeg \u003c\u003d aBeg \u0026\u0026 aEnd \u003c\u003d bEnd)\n            return 0; // one of the blocks is inside the other\n          if(aBeg \u003c bBeg)\n            return -1; // a\u0027s left bound is to the left of the b\u0027s\n          return 1;\n        }\n      };\n    return Collections.binarySearch(blocks, key, comp);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/LocatedBlocks.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/protocol/LocatedBlocks.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/LocatedBlocks.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,23 @@\n+  public int findBlock(long offset) {\n+    // create fake block of size 1 as a key\n+    LocatedBlock key \u003d new LocatedBlock();\n+    key.setStartOffset(offset);\n+    key.getBlock().setNumBytes(1);\n+    Comparator\u003cLocatedBlock\u003e comp \u003d \n+      new Comparator\u003cLocatedBlock\u003e() {\n+        // Returns 0 iff a is inside b or b is inside a\n+        public int compare(LocatedBlock a, LocatedBlock b) {\n+          long aBeg \u003d a.getStartOffset();\n+          long bBeg \u003d b.getStartOffset();\n+          long aEnd \u003d aBeg + a.getBlockSize();\n+          long bEnd \u003d bBeg + b.getBlockSize();\n+          if(aBeg \u003c\u003d bBeg \u0026\u0026 bEnd \u003c\u003d aEnd \n+              || bBeg \u003c\u003d aBeg \u0026\u0026 aEnd \u003c\u003d bEnd)\n+            return 0; // one of the blocks is inside the other\n+          if(aBeg \u003c bBeg)\n+            return -1; // a\u0027s left bound is to the left of the b\u0027s\n+          return 1;\n+        }\n+      };\n+    return Collections.binarySearch(blocks, key, comp);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int findBlock(long offset) {\n    // create fake block of size 1 as a key\n    LocatedBlock key \u003d new LocatedBlock();\n    key.setStartOffset(offset);\n    key.getBlock().setNumBytes(1);\n    Comparator\u003cLocatedBlock\u003e comp \u003d \n      new Comparator\u003cLocatedBlock\u003e() {\n        // Returns 0 iff a is inside b or b is inside a\n        public int compare(LocatedBlock a, LocatedBlock b) {\n          long aBeg \u003d a.getStartOffset();\n          long bBeg \u003d b.getStartOffset();\n          long aEnd \u003d aBeg + a.getBlockSize();\n          long bEnd \u003d bBeg + b.getBlockSize();\n          if(aBeg \u003c\u003d bBeg \u0026\u0026 bEnd \u003c\u003d aEnd \n              || bBeg \u003c\u003d aBeg \u0026\u0026 aEnd \u003c\u003d bEnd)\n            return 0; // one of the blocks is inside the other\n          if(aBeg \u003c bBeg)\n            return -1; // a\u0027s left bound is to the left of the b\u0027s\n          return 1;\n        }\n      };\n    return Collections.binarySearch(blocks, key, comp);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/protocol/LocatedBlocks.java"
    }
  }
}