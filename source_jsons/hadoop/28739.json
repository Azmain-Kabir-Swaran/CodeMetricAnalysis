{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceRequestSet.java",
  "functionName": "addAndOverrideRR",
  "functionId": "addAndOverrideRR___ask-ResourceRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/ResourceRequestSet.java",
  "functionStartLine": 76,
  "functionEndLine": 99,
  "numCommitsSeen": 2,
  "timeTaken": 829,
  "changeHistory": [
    "3159bffce23abf35754da2d7d51de7d8c2631ae3"
  ],
  "changeHistoryShort": {
    "3159bffce23abf35754da2d7d51de7d8c2631ae3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3159bffce23abf35754da2d7d51de7d8c2631ae3": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7900. [AMRMProxy] AMRMClientRelayer for stateful FederationInterceptor. (Botong Huang via asuresh)\n",
      "commitDate": "17/05/18 8:00 PM",
      "commitName": "3159bffce23abf35754da2d7d51de7d8c2631ae3",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,24 @@\n+  public void addAndOverrideRR(ResourceRequest ask) throws YarnException {\n+    if (!this.key.equals(new ResourceRequestSetKey(ask))) {\n+      throw new YarnException(\n+          \"None compatible asks: \\n\" + ask + \"\\n\" + this.key);\n+    }\n+\n+    // Override directly if exists\n+    this.asks.put(ask.getResourceName(), ask);\n+\n+    if (this.key.getExeType().equals(ExecutionType.GUARANTEED)) {\n+      // For G requestSet, update the numContainers only for ANY RR\n+      if (ask.getResourceName().equals(ResourceRequest.ANY)) {\n+        this.numContainers \u003d ask.getNumContainers();\n+      }\n+    } else {\n+      // The assumption we made about O asks is that all RR in a requestSet has\n+      // the same numContainers value. So we just take the value of the last RR\n+      this.numContainers \u003d ask.getNumContainers();\n+    }\n+    if (this.numContainers \u003c 0) {\n+      throw new YarnException(\"numContainers becomes \" + this.numContainers\n+          + \" when adding ask \" + ask + \"\\n requestSet: \" + toString());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void addAndOverrideRR(ResourceRequest ask) throws YarnException {\n    if (!this.key.equals(new ResourceRequestSetKey(ask))) {\n      throw new YarnException(\n          \"None compatible asks: \\n\" + ask + \"\\n\" + this.key);\n    }\n\n    // Override directly if exists\n    this.asks.put(ask.getResourceName(), ask);\n\n    if (this.key.getExeType().equals(ExecutionType.GUARANTEED)) {\n      // For G requestSet, update the numContainers only for ANY RR\n      if (ask.getResourceName().equals(ResourceRequest.ANY)) {\n        this.numContainers \u003d ask.getNumContainers();\n      }\n    } else {\n      // The assumption we made about O asks is that all RR in a requestSet has\n      // the same numContainers value. So we just take the value of the last RR\n      this.numContainers \u003d ask.getNumContainers();\n    }\n    if (this.numContainers \u003c 0) {\n      throw new YarnException(\"numContainers becomes \" + this.numContainers\n          + \" when adding ask \" + ask + \"\\n requestSet: \" + toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/ResourceRequestSet.java"
    }
  }
}