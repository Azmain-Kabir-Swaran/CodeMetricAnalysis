{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractYarnScheduler.java",
  "functionName": "containerIncreasedOnNode",
  "functionId": "containerIncreasedOnNode___containerId-ContainerId__node-SchedulerNode__increasedContainerReportedByNM-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
  "functionStartLine": 394,
  "functionEndLine": 421,
  "numCommitsSeen": 115,
  "timeTaken": 4340,
  "changeHistory": [
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "d16b17b4d299b4d58f879a2a15708bacd0938685",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434"
  ],
  "changeHistoryShort": {
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ybodychange",
    "d16b17b4d299b4d58f879a2a15708bacd0938685": "Ymultichange(Ymodifierchange,Ybodychange)",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Yintroduced"
  },
  "changeHistoryDetails": {
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/08/16 3:52 PM",
      "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 35.06,
      "commitsBetweenForRepo": 195,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   protected void containerIncreasedOnNode(ContainerId containerId,\n       SchedulerNode node, Container increasedContainerReportedByNM) {\n+    /*\n+     * No lock is required, as this method is protected by scheduler\u0027s writeLock\n+     */\n     // Get the application for the finished container\n-    SchedulerApplicationAttempt application \u003d\n-        getCurrentAttemptForContainer(containerId);\n+    SchedulerApplicationAttempt application \u003d getCurrentAttemptForContainer(\n+        containerId);\n     if (application \u003d\u003d null) {\n-      LOG.info(\"Unknown application \"\n-          + containerId.getApplicationAttemptId().getApplicationId()\n-          + \" increased container \" + containerId + \" on node: \" + node);\n-      this.rmContext.getDispatcher().getEventHandler()\n-          .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n+      LOG.info(\"Unknown application \" + containerId.getApplicationAttemptId()\n+          .getApplicationId() + \" increased container \" + containerId\n+          + \" on node: \" + node);\n+      this.rmContext.getDispatcher().getEventHandler().handle(\n+          new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n       return;\n     }\n-    LeafQueue leafQueue \u003d (LeafQueue) application.getQueue();\n-    synchronized (leafQueue) {\n-      RMContainer rmContainer \u003d getRMContainer(containerId);\n-      if (rmContainer \u003d\u003d null) {\n-        // Some unknown container sneaked into the system. Kill it.\n-        this.rmContext.getDispatcher().getEventHandler()\n-            .handle(new RMNodeCleanContainerEvent(\n-                node.getNodeID(), containerId));\n-        return;\n-      }\n-      rmContainer.handle(new RMContainerNMDoneChangeResourceEvent(\n-          containerId, increasedContainerReportedByNM.getResource()));\n+\n+    RMContainer rmContainer \u003d getRMContainer(containerId);\n+    if (rmContainer \u003d\u003d null) {\n+      // Some unknown container sneaked into the system. Kill it.\n+      this.rmContext.getDispatcher().getEventHandler().handle(\n+          new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n+      return;\n     }\n+    rmContainer.handle(new RMContainerNMDoneChangeResourceEvent(containerId,\n+        increasedContainerReportedByNM.getResource()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void containerIncreasedOnNode(ContainerId containerId,\n      SchedulerNode node, Container increasedContainerReportedByNM) {\n    /*\n     * No lock is required, as this method is protected by scheduler\u0027s writeLock\n     */\n    // Get the application for the finished container\n    SchedulerApplicationAttempt application \u003d getCurrentAttemptForContainer(\n        containerId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application \" + containerId.getApplicationAttemptId()\n          .getApplicationId() + \" increased container \" + containerId\n          + \" on node: \" + node);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n      return;\n    }\n\n    RMContainer rmContainer \u003d getRMContainer(containerId);\n    if (rmContainer \u003d\u003d null) {\n      // Some unknown container sneaked into the system. Kill it.\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n      return;\n    }\n    rmContainer.handle(new RMContainerNMDoneChangeResourceEvent(containerId,\n        increasedContainerReportedByNM.getResource()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "d16b17b4d299b4d58f879a2a15708bacd0938685": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-4138. Roll back container resource allocation after resource increase token expires. Contributed by Meng Ding\n",
      "commitDate": "10/02/16 6:06 PM",
      "commitName": "d16b17b4d299b4d58f879a2a15708bacd0938685",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4138. Roll back container resource allocation after resource increase token expires. Contributed by Meng Ding\n",
          "commitDate": "10/02/16 6:06 PM",
          "commitName": "d16b17b4d299b4d58f879a2a15708bacd0938685",
          "commitAuthor": "Jian He",
          "commitDateOld": "28/01/16 2:51 PM",
          "commitNameOld": "7f46636495e23693d588b0915f464fa7afd9102e",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 13.14,
          "commitsBetweenForRepo": 94,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,27 @@\n-  protected synchronized void containerIncreasedOnNode(ContainerId containerId,\n+  protected void containerIncreasedOnNode(ContainerId containerId,\n       SchedulerNode node, Container increasedContainerReportedByNM) {\n     // Get the application for the finished container\n     SchedulerApplicationAttempt application \u003d\n         getCurrentAttemptForContainer(containerId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application \"\n           + containerId.getApplicationAttemptId().getApplicationId()\n           + \" increased container \" + containerId + \" on node: \" + node);\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n       return;\n     }\n-\n-    RMContainer rmContainer \u003d getRMContainer(containerId);\n-    Resource rmContainerResource \u003d rmContainer.getAllocatedResource();\n-    Resource nmContainerResource \u003d increasedContainerReportedByNM.getResource();\n-    \n-    \n-    if (Resources.equals(nmContainerResource, rmContainerResource)){\n-      // NM reported expected container size, tell RMContainer. Which will stop\n-      // container expire monitor\n-      rmContainer.handle(new RMContainerEvent(containerId,\n-          RMContainerEventType.NM_DONE_CHANGE_RESOURCE));\n-    } else if (Resources.fitsIn(getResourceCalculator(), clusterResource,\n-        nmContainerResource, rmContainerResource)) {\n-      // when rmContainerResource \u003e\u003d nmContainerResource, we won\u0027t do anything,\n-      // it is possible a container increased is issued by RM, but AM hasn\u0027t\n-      // told NM.\n-    } else if (Resources.fitsIn(getResourceCalculator(), clusterResource,\n-        rmContainerResource, nmContainerResource)) {\n-      // When rmContainerResource \u003c\u003d nmContainerResource, it could happen when a\n-      // container decreased by RM before it is increased in NM.\n-      \n-      // Tell NM to decrease the container\n-      this.rmContext.getDispatcher().getEventHandler()\n-          .handle(new RMNodeDecreaseContainerEvent(node.getNodeID(),\n-              Arrays.asList(rmContainer.getContainer())));\n-    } else {\n-      // Something wrong happened, kill the container\n-      LOG.warn(\"Something wrong happened, container size reported by NM\"\n-          + \" is not expected, ContainerID\u003d\" + containerId\n-          + \" rm-size-resource:\" + rmContainerResource + \" nm-size-reosurce:\"\n-          + nmContainerResource);\n-      this.rmContext.getDispatcher().getEventHandler()\n-          .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n+    LeafQueue leafQueue \u003d (LeafQueue) application.getQueue();\n+    synchronized (leafQueue) {\n+      RMContainer rmContainer \u003d getRMContainer(containerId);\n+      if (rmContainer \u003d\u003d null) {\n+        // Some unknown container sneaked into the system. Kill it.\n+        this.rmContext.getDispatcher().getEventHandler()\n+            .handle(new RMNodeCleanContainerEvent(\n+                node.getNodeID(), containerId));\n+        return;\n+      }\n+      rmContainer.handle(new RMContainerNMDoneChangeResourceEvent(\n+          containerId, increasedContainerReportedByNM.getResource()));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void containerIncreasedOnNode(ContainerId containerId,\n      SchedulerNode node, Container increasedContainerReportedByNM) {\n    // Get the application for the finished container\n    SchedulerApplicationAttempt application \u003d\n        getCurrentAttemptForContainer(containerId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application \"\n          + containerId.getApplicationAttemptId().getApplicationId()\n          + \" increased container \" + containerId + \" on node: \" + node);\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n      return;\n    }\n    LeafQueue leafQueue \u003d (LeafQueue) application.getQueue();\n    synchronized (leafQueue) {\n      RMContainer rmContainer \u003d getRMContainer(containerId);\n      if (rmContainer \u003d\u003d null) {\n        // Some unknown container sneaked into the system. Kill it.\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMNodeCleanContainerEvent(\n                node.getNodeID(), containerId));\n        return;\n      }\n      rmContainer.handle(new RMContainerNMDoneChangeResourceEvent(\n          containerId, increasedContainerReportedByNM.getResource()));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {
            "oldValue": "[protected, synchronized]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4138. Roll back container resource allocation after resource increase token expires. Contributed by Meng Ding\n",
          "commitDate": "10/02/16 6:06 PM",
          "commitName": "d16b17b4d299b4d58f879a2a15708bacd0938685",
          "commitAuthor": "Jian He",
          "commitDateOld": "28/01/16 2:51 PM",
          "commitNameOld": "7f46636495e23693d588b0915f464fa7afd9102e",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 13.14,
          "commitsBetweenForRepo": 94,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,27 @@\n-  protected synchronized void containerIncreasedOnNode(ContainerId containerId,\n+  protected void containerIncreasedOnNode(ContainerId containerId,\n       SchedulerNode node, Container increasedContainerReportedByNM) {\n     // Get the application for the finished container\n     SchedulerApplicationAttempt application \u003d\n         getCurrentAttemptForContainer(containerId);\n     if (application \u003d\u003d null) {\n       LOG.info(\"Unknown application \"\n           + containerId.getApplicationAttemptId().getApplicationId()\n           + \" increased container \" + containerId + \" on node: \" + node);\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n       return;\n     }\n-\n-    RMContainer rmContainer \u003d getRMContainer(containerId);\n-    Resource rmContainerResource \u003d rmContainer.getAllocatedResource();\n-    Resource nmContainerResource \u003d increasedContainerReportedByNM.getResource();\n-    \n-    \n-    if (Resources.equals(nmContainerResource, rmContainerResource)){\n-      // NM reported expected container size, tell RMContainer. Which will stop\n-      // container expire monitor\n-      rmContainer.handle(new RMContainerEvent(containerId,\n-          RMContainerEventType.NM_DONE_CHANGE_RESOURCE));\n-    } else if (Resources.fitsIn(getResourceCalculator(), clusterResource,\n-        nmContainerResource, rmContainerResource)) {\n-      // when rmContainerResource \u003e\u003d nmContainerResource, we won\u0027t do anything,\n-      // it is possible a container increased is issued by RM, but AM hasn\u0027t\n-      // told NM.\n-    } else if (Resources.fitsIn(getResourceCalculator(), clusterResource,\n-        rmContainerResource, nmContainerResource)) {\n-      // When rmContainerResource \u003c\u003d nmContainerResource, it could happen when a\n-      // container decreased by RM before it is increased in NM.\n-      \n-      // Tell NM to decrease the container\n-      this.rmContext.getDispatcher().getEventHandler()\n-          .handle(new RMNodeDecreaseContainerEvent(node.getNodeID(),\n-              Arrays.asList(rmContainer.getContainer())));\n-    } else {\n-      // Something wrong happened, kill the container\n-      LOG.warn(\"Something wrong happened, container size reported by NM\"\n-          + \" is not expected, ContainerID\u003d\" + containerId\n-          + \" rm-size-resource:\" + rmContainerResource + \" nm-size-reosurce:\"\n-          + nmContainerResource);\n-      this.rmContext.getDispatcher().getEventHandler()\n-          .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n+    LeafQueue leafQueue \u003d (LeafQueue) application.getQueue();\n+    synchronized (leafQueue) {\n+      RMContainer rmContainer \u003d getRMContainer(containerId);\n+      if (rmContainer \u003d\u003d null) {\n+        // Some unknown container sneaked into the system. Kill it.\n+        this.rmContext.getDispatcher().getEventHandler()\n+            .handle(new RMNodeCleanContainerEvent(\n+                node.getNodeID(), containerId));\n+        return;\n+      }\n+      rmContainer.handle(new RMContainerNMDoneChangeResourceEvent(\n+          containerId, increasedContainerReportedByNM.getResource()));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void containerIncreasedOnNode(ContainerId containerId,\n      SchedulerNode node, Container increasedContainerReportedByNM) {\n    // Get the application for the finished container\n    SchedulerApplicationAttempt application \u003d\n        getCurrentAttemptForContainer(containerId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application \"\n          + containerId.getApplicationAttemptId().getApplicationId()\n          + \" increased container \" + containerId + \" on node: \" + node);\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n      return;\n    }\n    LeafQueue leafQueue \u003d (LeafQueue) application.getQueue();\n    synchronized (leafQueue) {\n      RMContainer rmContainer \u003d getRMContainer(containerId);\n      if (rmContainer \u003d\u003d null) {\n        // Some unknown container sneaked into the system. Kill it.\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMNodeCleanContainerEvent(\n                node.getNodeID(), containerId));\n        return;\n      }\n      rmContainer.handle(new RMContainerNMDoneChangeResourceEvent(\n          containerId, increasedContainerReportedByNM.getResource()));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,48 @@\n+  protected synchronized void containerIncreasedOnNode(ContainerId containerId,\n+      SchedulerNode node, Container increasedContainerReportedByNM) {\n+    // Get the application for the finished container\n+    SchedulerApplicationAttempt application \u003d\n+        getCurrentAttemptForContainer(containerId);\n+    if (application \u003d\u003d null) {\n+      LOG.info(\"Unknown application \"\n+          + containerId.getApplicationAttemptId().getApplicationId()\n+          + \" increased container \" + containerId + \" on node: \" + node);\n+      this.rmContext.getDispatcher().getEventHandler()\n+          .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n+      return;\n+    }\n+\n+    RMContainer rmContainer \u003d getRMContainer(containerId);\n+    Resource rmContainerResource \u003d rmContainer.getAllocatedResource();\n+    Resource nmContainerResource \u003d increasedContainerReportedByNM.getResource();\n+    \n+    \n+    if (Resources.equals(nmContainerResource, rmContainerResource)){\n+      // NM reported expected container size, tell RMContainer. Which will stop\n+      // container expire monitor\n+      rmContainer.handle(new RMContainerEvent(containerId,\n+          RMContainerEventType.NM_DONE_CHANGE_RESOURCE));\n+    } else if (Resources.fitsIn(getResourceCalculator(), clusterResource,\n+        nmContainerResource, rmContainerResource)) {\n+      // when rmContainerResource \u003e\u003d nmContainerResource, we won\u0027t do anything,\n+      // it is possible a container increased is issued by RM, but AM hasn\u0027t\n+      // told NM.\n+    } else if (Resources.fitsIn(getResourceCalculator(), clusterResource,\n+        rmContainerResource, nmContainerResource)) {\n+      // When rmContainerResource \u003c\u003d nmContainerResource, it could happen when a\n+      // container decreased by RM before it is increased in NM.\n+      \n+      // Tell NM to decrease the container\n+      this.rmContext.getDispatcher().getEventHandler()\n+          .handle(new RMNodeDecreaseContainerEvent(node.getNodeID(),\n+              Arrays.asList(rmContainer.getContainer())));\n+    } else {\n+      // Something wrong happened, kill the container\n+      LOG.warn(\"Something wrong happened, container size reported by NM\"\n+          + \" is not expected, ContainerID\u003d\" + containerId\n+          + \" rm-size-resource:\" + rmContainerResource + \" nm-size-reosurce:\"\n+          + nmContainerResource);\n+      this.rmContext.getDispatcher().getEventHandler()\n+          .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void containerIncreasedOnNode(ContainerId containerId,\n      SchedulerNode node, Container increasedContainerReportedByNM) {\n    // Get the application for the finished container\n    SchedulerApplicationAttempt application \u003d\n        getCurrentAttemptForContainer(containerId);\n    if (application \u003d\u003d null) {\n      LOG.info(\"Unknown application \"\n          + containerId.getApplicationAttemptId().getApplicationId()\n          + \" increased container \" + containerId + \" on node: \" + node);\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n      return;\n    }\n\n    RMContainer rmContainer \u003d getRMContainer(containerId);\n    Resource rmContainerResource \u003d rmContainer.getAllocatedResource();\n    Resource nmContainerResource \u003d increasedContainerReportedByNM.getResource();\n    \n    \n    if (Resources.equals(nmContainerResource, rmContainerResource)){\n      // NM reported expected container size, tell RMContainer. Which will stop\n      // container expire monitor\n      rmContainer.handle(new RMContainerEvent(containerId,\n          RMContainerEventType.NM_DONE_CHANGE_RESOURCE));\n    } else if (Resources.fitsIn(getResourceCalculator(), clusterResource,\n        nmContainerResource, rmContainerResource)) {\n      // when rmContainerResource \u003e\u003d nmContainerResource, we won\u0027t do anything,\n      // it is possible a container increased is issued by RM, but AM hasn\u0027t\n      // told NM.\n    } else if (Resources.fitsIn(getResourceCalculator(), clusterResource,\n        rmContainerResource, nmContainerResource)) {\n      // When rmContainerResource \u003c\u003d nmContainerResource, it could happen when a\n      // container decreased by RM before it is increased in NM.\n      \n      // Tell NM to decrease the container\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMNodeDecreaseContainerEvent(node.getNodeID(),\n              Arrays.asList(rmContainer.getContainer())));\n    } else {\n      // Something wrong happened, kill the container\n      LOG.warn(\"Something wrong happened, container size reported by NM\"\n          + \" is not expected, ContainerID\u003d\" + containerId\n          + \" rm-size-resource:\" + rmContainerResource + \" nm-size-reosurce:\"\n          + nmContainerResource);\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMNodeCleanContainerEvent(node.getNodeID(), containerId));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java"
    }
  }
}