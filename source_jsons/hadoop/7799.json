{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JournalSet.java",
  "functionName": "selectInputStreams",
  "functionId": "selectInputStreams___streams-Collection__EditLogInputStream____fromTxId-long__inProgressOk-boolean__onlyDurableTxns-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
  "functionStartLine": 264,
  "functionEndLine": 283,
  "numCommitsSeen": 97,
  "timeTaken": 4569,
  "changeHistory": [
    "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
    "512a18a8d92305a34f3037064ceabdc5aff1f8bf",
    "8172215e5601c3bb03fb5c0a0d88768142ea5087",
    "8c62c46046656c01b327c378e89d57b4bf37e16e",
    "437948ea1c0c9c61c2b5049b82ffd9525f33be97",
    "74d4573a23db5586c6e47ff2277aa7c35237da34",
    "9947d8054c035c93c775908a37489efc1ed36dbd",
    "74dfa8f1f22d58df64a78c660af111e17ab7053e"
  ],
  "changeHistoryShort": {
    "098ec2b11ff3f677eb823f75b147a1ac8dbf959e": "Ymultichange(Yparameterchange,Ybodychange)",
    "512a18a8d92305a34f3037064ceabdc5aff1f8bf": "Ymultichange(Yparameterchange,Ybodychange)",
    "8172215e5601c3bb03fb5c0a0d88768142ea5087": "Ybodychange",
    "8c62c46046656c01b327c378e89d57b4bf37e16e": "Ymultichange(Yparameterchange,Ybodychange)",
    "437948ea1c0c9c61c2b5049b82ffd9525f33be97": "Ybodychange",
    "74d4573a23db5586c6e47ff2277aa7c35237da34": "Ybodychange",
    "9947d8054c035c93c775908a37489efc1ed36dbd": "Ybodychange",
    "74dfa8f1f22d58df64a78c660af111e17ab7053e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "098ec2b11ff3f677eb823f75b147a1ac8dbf959e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10519. Add a configuration option to enable in-progress edit log tailing. Contributed by Jiayi Zhou.\n",
      "commitDate": "27/07/16 5:55 PM",
      "commitName": "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10519. Add a configuration option to enable in-progress edit log tailing. Contributed by Jiayi Zhou.\n",
          "commitDate": "27/07/16 5:55 PM",
          "commitName": "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "02/09/14 2:02 PM",
          "commitNameOld": "faa4455be512e070fa420084be8d1be5c72f3b08",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 694.16,
          "commitsBetweenForRepo": 5487,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,20 @@\n   public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n-      long fromTxId, boolean inProgressOk) {\n+      long fromTxId, boolean inProgressOk, boolean onlyDurableTxns) {\n     final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n         new PriorityQueue\u003cEditLogInputStream\u003e(64,\n             EDIT_LOG_INPUT_STREAM_COMPARATOR);\n     for (JournalAndStream jas : journals) {\n       if (jas.isDisabled()) {\n         LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n         continue;\n       }\n       try {\n-        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n+        jas.getManager().selectInputStreams(allStreams, fromTxId,\n+            inProgressOk, onlyDurableTxns);\n       } catch (IOException ioe) {\n         LOG.warn(\"Unable to determine input streams from \" + jas.getManager() +\n             \". Skipping.\", ioe);\n       }\n     }\n     chainAndMakeRedundantStreams(streams, allStreams, fromTxId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n      long fromTxId, boolean inProgressOk, boolean onlyDurableTxns) {\n    final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n        new PriorityQueue\u003cEditLogInputStream\u003e(64,\n            EDIT_LOG_INPUT_STREAM_COMPARATOR);\n    for (JournalAndStream jas : journals) {\n      if (jas.isDisabled()) {\n        LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n        continue;\n      }\n      try {\n        jas.getManager().selectInputStreams(allStreams, fromTxId,\n            inProgressOk, onlyDurableTxns);\n      } catch (IOException ioe) {\n        LOG.warn(\"Unable to determine input streams from \" + jas.getManager() +\n            \". Skipping.\", ioe);\n      }\n    }\n    chainAndMakeRedundantStreams(streams, allStreams, fromTxId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
          "extendedDetails": {
            "oldValue": "[streams-Collection\u003cEditLogInputStream\u003e, fromTxId-long, inProgressOk-boolean]",
            "newValue": "[streams-Collection\u003cEditLogInputStream\u003e, fromTxId-long, inProgressOk-boolean, onlyDurableTxns-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10519. Add a configuration option to enable in-progress edit log tailing. Contributed by Jiayi Zhou.\n",
          "commitDate": "27/07/16 5:55 PM",
          "commitName": "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "02/09/14 2:02 PM",
          "commitNameOld": "faa4455be512e070fa420084be8d1be5c72f3b08",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 694.16,
          "commitsBetweenForRepo": 5487,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,20 @@\n   public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n-      long fromTxId, boolean inProgressOk) {\n+      long fromTxId, boolean inProgressOk, boolean onlyDurableTxns) {\n     final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n         new PriorityQueue\u003cEditLogInputStream\u003e(64,\n             EDIT_LOG_INPUT_STREAM_COMPARATOR);\n     for (JournalAndStream jas : journals) {\n       if (jas.isDisabled()) {\n         LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n         continue;\n       }\n       try {\n-        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n+        jas.getManager().selectInputStreams(allStreams, fromTxId,\n+            inProgressOk, onlyDurableTxns);\n       } catch (IOException ioe) {\n         LOG.warn(\"Unable to determine input streams from \" + jas.getManager() +\n             \". Skipping.\", ioe);\n       }\n     }\n     chainAndMakeRedundantStreams(streams, allStreams, fromTxId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n      long fromTxId, boolean inProgressOk, boolean onlyDurableTxns) {\n    final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n        new PriorityQueue\u003cEditLogInputStream\u003e(64,\n            EDIT_LOG_INPUT_STREAM_COMPARATOR);\n    for (JournalAndStream jas : journals) {\n      if (jas.isDisabled()) {\n        LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n        continue;\n      }\n      try {\n        jas.getManager().selectInputStreams(allStreams, fromTxId,\n            inProgressOk, onlyDurableTxns);\n      } catch (IOException ioe) {\n        LOG.warn(\"Unable to determine input streams from \" + jas.getManager() +\n            \". Skipping.\", ioe);\n      }\n    }\n    chainAndMakeRedundantStreams(streams, allStreams, fromTxId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
          "extendedDetails": {}
        }
      ]
    },
    "512a18a8d92305a34f3037064ceabdc5aff1f8bf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5074. Allow starting up from an fsimage checkpoint in the middle of a segment. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550016 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/13 5:32 PM",
      "commitName": "512a18a8d92305a34f3037064ceabdc5aff1f8bf",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5074. Allow starting up from an fsimage checkpoint in the middle of a segment. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550016 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/12/13 5:32 PM",
          "commitName": "512a18a8d92305a34f3037064ceabdc5aff1f8bf",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "15/08/13 10:19 AM",
          "commitNameOld": "8172215e5601c3bb03fb5c0a0d88768142ea5087",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 117.34,
          "commitsBetweenForRepo": 711,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,19 @@\n   public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n-      long fromTxId, boolean inProgressOk, boolean forReading) {\n+      long fromTxId, boolean inProgressOk) {\n     final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n         new PriorityQueue\u003cEditLogInputStream\u003e(64,\n             EDIT_LOG_INPUT_STREAM_COMPARATOR);\n     for (JournalAndStream jas : journals) {\n       if (jas.isDisabled()) {\n         LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n         continue;\n       }\n       try {\n-        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk,\n-            forReading);\n+        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n       } catch (IOException ioe) {\n         LOG.warn(\"Unable to determine input streams from \" + jas.getManager() +\n             \". Skipping.\", ioe);\n       }\n     }\n     chainAndMakeRedundantStreams(streams, allStreams, fromTxId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n      long fromTxId, boolean inProgressOk) {\n    final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n        new PriorityQueue\u003cEditLogInputStream\u003e(64,\n            EDIT_LOG_INPUT_STREAM_COMPARATOR);\n    for (JournalAndStream jas : journals) {\n      if (jas.isDisabled()) {\n        LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n        continue;\n      }\n      try {\n        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n      } catch (IOException ioe) {\n        LOG.warn(\"Unable to determine input streams from \" + jas.getManager() +\n            \". Skipping.\", ioe);\n      }\n    }\n    chainAndMakeRedundantStreams(streams, allStreams, fromTxId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
          "extendedDetails": {
            "oldValue": "[streams-Collection\u003cEditLogInputStream\u003e, fromTxId-long, inProgressOk-boolean, forReading-boolean]",
            "newValue": "[streams-Collection\u003cEditLogInputStream\u003e, fromTxId-long, inProgressOk-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5074. Allow starting up from an fsimage checkpoint in the middle of a segment. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550016 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/12/13 5:32 PM",
          "commitName": "512a18a8d92305a34f3037064ceabdc5aff1f8bf",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "15/08/13 10:19 AM",
          "commitNameOld": "8172215e5601c3bb03fb5c0a0d88768142ea5087",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 117.34,
          "commitsBetweenForRepo": 711,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,19 @@\n   public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n-      long fromTxId, boolean inProgressOk, boolean forReading) {\n+      long fromTxId, boolean inProgressOk) {\n     final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n         new PriorityQueue\u003cEditLogInputStream\u003e(64,\n             EDIT_LOG_INPUT_STREAM_COMPARATOR);\n     for (JournalAndStream jas : journals) {\n       if (jas.isDisabled()) {\n         LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n         continue;\n       }\n       try {\n-        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk,\n-            forReading);\n+        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n       } catch (IOException ioe) {\n         LOG.warn(\"Unable to determine input streams from \" + jas.getManager() +\n             \". Skipping.\", ioe);\n       }\n     }\n     chainAndMakeRedundantStreams(streams, allStreams, fromTxId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n      long fromTxId, boolean inProgressOk) {\n    final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n        new PriorityQueue\u003cEditLogInputStream\u003e(64,\n            EDIT_LOG_INPUT_STREAM_COMPARATOR);\n    for (JournalAndStream jas : journals) {\n      if (jas.isDisabled()) {\n        LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n        continue;\n      }\n      try {\n        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n      } catch (IOException ioe) {\n        LOG.warn(\"Unable to determine input streams from \" + jas.getManager() +\n            \". Skipping.\", ioe);\n      }\n    }\n    chainAndMakeRedundantStreams(streams, allStreams, fromTxId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
          "extendedDetails": {}
        }
      ]
    },
    "8172215e5601c3bb03fb5c0a0d88768142ea5087": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5080. BootstrapStandby not working with QJM when the existing NN is active. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514386 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/08/13 10:19 AM",
      "commitName": "8172215e5601c3bb03fb5c0a0d88768142ea5087",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "22/05/13 12:37 PM",
      "commitNameOld": "8c62c46046656c01b327c378e89d57b4bf37e16e",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 84.9,
      "commitsBetweenForRepo": 539,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n       long fromTxId, boolean inProgressOk, boolean forReading) {\n     final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n         new PriorityQueue\u003cEditLogInputStream\u003e(64,\n             EDIT_LOG_INPUT_STREAM_COMPARATOR);\n     for (JournalAndStream jas : journals) {\n       if (jas.isDisabled()) {\n         LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n         continue;\n       }\n       try {\n         jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk,\n             forReading);\n       } catch (IOException ioe) {\n         LOG.warn(\"Unable to determine input streams from \" + jas.getManager() +\n             \". Skipping.\", ioe);\n       }\n     }\n-    chainAndMakeRedundantStreams(streams, allStreams, fromTxId, inProgressOk);\n+    chainAndMakeRedundantStreams(streams, allStreams, fromTxId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n      long fromTxId, boolean inProgressOk, boolean forReading) {\n    final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n        new PriorityQueue\u003cEditLogInputStream\u003e(64,\n            EDIT_LOG_INPUT_STREAM_COMPARATOR);\n    for (JournalAndStream jas : journals) {\n      if (jas.isDisabled()) {\n        LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n        continue;\n      }\n      try {\n        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk,\n            forReading);\n      } catch (IOException ioe) {\n        LOG.warn(\"Unable to determine input streams from \" + jas.getManager() +\n            \". Skipping.\", ioe);\n      }\n    }\n    chainAndMakeRedundantStreams(streams, allStreams, fromTxId);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
      "extendedDetails": {}
    },
    "8c62c46046656c01b327c378e89d57b4bf37e16e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4298. StorageRetentionManager spews warnings when used with QJM. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485371 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/05/13 12:37 PM",
      "commitName": "8c62c46046656c01b327c378e89d57b4bf37e16e",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4298. StorageRetentionManager spews warnings when used with QJM. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485371 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/05/13 12:37 PM",
          "commitName": "8c62c46046656c01b327c378e89d57b4bf37e16e",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "10/09/12 11:51 AM",
          "commitNameOld": "ca4582222e89114e4c61d38fbf973a66d2867abf",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 254.03,
          "commitsBetweenForRepo": 1408,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,20 @@\n   public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n-      long fromTxId, boolean inProgressOk) {\n+      long fromTxId, boolean inProgressOk, boolean forReading) {\n     final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n         new PriorityQueue\u003cEditLogInputStream\u003e(64,\n             EDIT_LOG_INPUT_STREAM_COMPARATOR);\n     for (JournalAndStream jas : journals) {\n       if (jas.isDisabled()) {\n         LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n         continue;\n       }\n       try {\n-        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n+        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk,\n+            forReading);\n       } catch (IOException ioe) {\n         LOG.warn(\"Unable to determine input streams from \" + jas.getManager() +\n             \". Skipping.\", ioe);\n       }\n     }\n     chainAndMakeRedundantStreams(streams, allStreams, fromTxId, inProgressOk);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n      long fromTxId, boolean inProgressOk, boolean forReading) {\n    final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n        new PriorityQueue\u003cEditLogInputStream\u003e(64,\n            EDIT_LOG_INPUT_STREAM_COMPARATOR);\n    for (JournalAndStream jas : journals) {\n      if (jas.isDisabled()) {\n        LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n        continue;\n      }\n      try {\n        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk,\n            forReading);\n      } catch (IOException ioe) {\n        LOG.warn(\"Unable to determine input streams from \" + jas.getManager() +\n            \". Skipping.\", ioe);\n      }\n    }\n    chainAndMakeRedundantStreams(streams, allStreams, fromTxId, inProgressOk);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
          "extendedDetails": {
            "oldValue": "[streams-Collection\u003cEditLogInputStream\u003e, fromTxId-long, inProgressOk-boolean]",
            "newValue": "[streams-Collection\u003cEditLogInputStream\u003e, fromTxId-long, inProgressOk-boolean, forReading-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4298. StorageRetentionManager spews warnings when used with QJM. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485371 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/05/13 12:37 PM",
          "commitName": "8c62c46046656c01b327c378e89d57b4bf37e16e",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "10/09/12 11:51 AM",
          "commitNameOld": "ca4582222e89114e4c61d38fbf973a66d2867abf",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 254.03,
          "commitsBetweenForRepo": 1408,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,20 @@\n   public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n-      long fromTxId, boolean inProgressOk) {\n+      long fromTxId, boolean inProgressOk, boolean forReading) {\n     final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n         new PriorityQueue\u003cEditLogInputStream\u003e(64,\n             EDIT_LOG_INPUT_STREAM_COMPARATOR);\n     for (JournalAndStream jas : journals) {\n       if (jas.isDisabled()) {\n         LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n         continue;\n       }\n       try {\n-        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n+        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk,\n+            forReading);\n       } catch (IOException ioe) {\n         LOG.warn(\"Unable to determine input streams from \" + jas.getManager() +\n             \". Skipping.\", ioe);\n       }\n     }\n     chainAndMakeRedundantStreams(streams, allStreams, fromTxId, inProgressOk);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n      long fromTxId, boolean inProgressOk, boolean forReading) {\n    final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n        new PriorityQueue\u003cEditLogInputStream\u003e(64,\n            EDIT_LOG_INPUT_STREAM_COMPARATOR);\n    for (JournalAndStream jas : journals) {\n      if (jas.isDisabled()) {\n        LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n        continue;\n      }\n      try {\n        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk,\n            forReading);\n      } catch (IOException ioe) {\n        LOG.warn(\"Unable to determine input streams from \" + jas.getManager() +\n            \". Skipping.\", ioe);\n      }\n    }\n    chainAndMakeRedundantStreams(streams, allStreams, fromTxId, inProgressOk);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
          "extendedDetails": {}
        }
      ]
    },
    "437948ea1c0c9c61c2b5049b82ffd9525f33be97": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3891. Make selectInputStreams throw IOE instead of RTE. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1381481 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/09/12 11:57 PM",
      "commitName": "437948ea1c0c9c61c2b5049b82ffd9525f33be97",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "04/09/12 9:16 PM",
      "commitNameOld": "72485f3112832a6a32f912d59ecf303a0c7e919a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.11,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,19 @@\n   public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n       long fromTxId, boolean inProgressOk) {\n     final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n         new PriorityQueue\u003cEditLogInputStream\u003e(64,\n             EDIT_LOG_INPUT_STREAM_COMPARATOR);\n     for (JournalAndStream jas : journals) {\n       if (jas.isDisabled()) {\n         LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n         continue;\n       }\n-      jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n+      try {\n+        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n+      } catch (IOException ioe) {\n+        LOG.warn(\"Unable to determine input streams from \" + jas.getManager() +\n+            \". Skipping.\", ioe);\n+      }\n     }\n     chainAndMakeRedundantStreams(streams, allStreams, fromTxId, inProgressOk);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n      long fromTxId, boolean inProgressOk) {\n    final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n        new PriorityQueue\u003cEditLogInputStream\u003e(64,\n            EDIT_LOG_INPUT_STREAM_COMPARATOR);\n    for (JournalAndStream jas : journals) {\n      if (jas.isDisabled()) {\n        LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n        continue;\n      }\n      try {\n        jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n      } catch (IOException ioe) {\n        LOG.warn(\"Unable to determine input streams from \" + jas.getManager() +\n            \". Skipping.\", ioe);\n      }\n    }\n    chainAndMakeRedundantStreams(streams, allStreams, fromTxId, inProgressOk);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
      "extendedDetails": {}
    },
    "74d4573a23db5586c6e47ff2277aa7c35237da34": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3077. Quorum-based protocol for reading and writing edit logs. Contributed by Todd Lipcon based on initial work from Brandon Li and Hari Mankude.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1363596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 5:25 PM",
      "commitName": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/07/12 10:58 AM",
      "commitNameOld": "cdae6953e80e81693bb4c9eb38b62eaba3ac8cf9",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 8.27,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,14 @@\n   public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n       long fromTxId, boolean inProgressOk) {\n     final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n         new PriorityQueue\u003cEditLogInputStream\u003e(64,\n             EDIT_LOG_INPUT_STREAM_COMPARATOR);\n     for (JournalAndStream jas : journals) {\n       if (jas.isDisabled()) {\n         LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n         continue;\n       }\n       jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n     }\n-    // We want to group together all the streams that start on the same start\n-    // transaction ID.  To do this, we maintain an accumulator (acc) of all\n-    // the streams we\u0027ve seen at a given start transaction ID.  When we see a\n-    // higher start transaction ID, we select a stream from the accumulator and\n-    // clear it.  Then we begin accumulating streams with the new, higher start\n-    // transaction ID.\n-    LinkedList\u003cEditLogInputStream\u003e acc \u003d\n-        new LinkedList\u003cEditLogInputStream\u003e();\n-    EditLogInputStream elis;\n-    while ((elis \u003d allStreams.poll()) !\u003d null) {\n-      if (acc.isEmpty()) {\n-        acc.add(elis);\n-      } else {\n-        long accFirstTxId \u003d acc.get(0).getFirstTxId();\n-        if (accFirstTxId \u003d\u003d elis.getFirstTxId()) {\n-          acc.add(elis);\n-        } else if (accFirstTxId \u003c elis.getFirstTxId()) {\n-          streams.add(new RedundantEditLogInputStream(acc, fromTxId));\n-          acc.clear();\n-          acc.add(elis);\n-        } else if (accFirstTxId \u003e elis.getFirstTxId()) {\n-          throw new RuntimeException(\"sorted set invariants violated!  \" +\n-              \"Got stream with first txid \" + elis.getFirstTxId() +\n-              \", but the last firstTxId was \" + accFirstTxId);\n-        }\n-      }\n-    }\n-    if (!acc.isEmpty()) {\n-      streams.add(new RedundantEditLogInputStream(acc, fromTxId));\n-      acc.clear();\n-    }\n+    chainAndMakeRedundantStreams(streams, allStreams, fromTxId, inProgressOk);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n      long fromTxId, boolean inProgressOk) {\n    final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n        new PriorityQueue\u003cEditLogInputStream\u003e(64,\n            EDIT_LOG_INPUT_STREAM_COMPARATOR);\n    for (JournalAndStream jas : journals) {\n      if (jas.isDisabled()) {\n        LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n        continue;\n      }\n      jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n    }\n    chainAndMakeRedundantStreams(streams, allStreams, fromTxId, inProgressOk);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
      "extendedDetails": {}
    },
    "9947d8054c035c93c775908a37489efc1ed36dbd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3049. During the normal NN startup process, fall back on a different edit log if we see one that is corrupt. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349114 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/12 9:15 PM",
      "commitName": "9947d8054c035c93c775908a37489efc1ed36dbd",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "23/05/12 1:42 PM",
      "commitNameOld": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 19.31,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n   public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n       long fromTxId, boolean inProgressOk) {\n-    final TreeMultiset\u003cEditLogInputStream\u003e allStreams \u003d\n-        TreeMultiset.create(EDIT_LOG_INPUT_STREAM_COMPARATOR);\n+    final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n+        new PriorityQueue\u003cEditLogInputStream\u003e(64,\n+            EDIT_LOG_INPUT_STREAM_COMPARATOR);\n     for (JournalAndStream jas : journals) {\n       if (jas.isDisabled()) {\n         LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n         continue;\n       }\n       jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n     }\n     // We want to group together all the streams that start on the same start\n     // transaction ID.  To do this, we maintain an accumulator (acc) of all\n     // the streams we\u0027ve seen at a given start transaction ID.  When we see a\n     // higher start transaction ID, we select a stream from the accumulator and\n     // clear it.  Then we begin accumulating streams with the new, higher start\n     // transaction ID.\n     LinkedList\u003cEditLogInputStream\u003e acc \u003d\n         new LinkedList\u003cEditLogInputStream\u003e();\n-    for (EditLogInputStream elis : allStreams) {\n+    EditLogInputStream elis;\n+    while ((elis \u003d allStreams.poll()) !\u003d null) {\n       if (acc.isEmpty()) {\n         acc.add(elis);\n       } else {\n         long accFirstTxId \u003d acc.get(0).getFirstTxId();\n         if (accFirstTxId \u003d\u003d elis.getFirstTxId()) {\n           acc.add(elis);\n         } else if (accFirstTxId \u003c elis.getFirstTxId()) {\n-          streams.add(acc.get(0));\n+          streams.add(new RedundantEditLogInputStream(acc, fromTxId));\n           acc.clear();\n           acc.add(elis);\n         } else if (accFirstTxId \u003e elis.getFirstTxId()) {\n           throw new RuntimeException(\"sorted set invariants violated!  \" +\n               \"Got stream with first txid \" + elis.getFirstTxId() +\n               \", but the last firstTxId was \" + accFirstTxId);\n         }\n       }\n     }\n     if (!acc.isEmpty()) {\n-      streams.add(acc.get(0));\n+      streams.add(new RedundantEditLogInputStream(acc, fromTxId));\n       acc.clear();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n      long fromTxId, boolean inProgressOk) {\n    final PriorityQueue\u003cEditLogInputStream\u003e allStreams \u003d \n        new PriorityQueue\u003cEditLogInputStream\u003e(64,\n            EDIT_LOG_INPUT_STREAM_COMPARATOR);\n    for (JournalAndStream jas : journals) {\n      if (jas.isDisabled()) {\n        LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n        continue;\n      }\n      jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n    }\n    // We want to group together all the streams that start on the same start\n    // transaction ID.  To do this, we maintain an accumulator (acc) of all\n    // the streams we\u0027ve seen at a given start transaction ID.  When we see a\n    // higher start transaction ID, we select a stream from the accumulator and\n    // clear it.  Then we begin accumulating streams with the new, higher start\n    // transaction ID.\n    LinkedList\u003cEditLogInputStream\u003e acc \u003d\n        new LinkedList\u003cEditLogInputStream\u003e();\n    EditLogInputStream elis;\n    while ((elis \u003d allStreams.poll()) !\u003d null) {\n      if (acc.isEmpty()) {\n        acc.add(elis);\n      } else {\n        long accFirstTxId \u003d acc.get(0).getFirstTxId();\n        if (accFirstTxId \u003d\u003d elis.getFirstTxId()) {\n          acc.add(elis);\n        } else if (accFirstTxId \u003c elis.getFirstTxId()) {\n          streams.add(new RedundantEditLogInputStream(acc, fromTxId));\n          acc.clear();\n          acc.add(elis);\n        } else if (accFirstTxId \u003e elis.getFirstTxId()) {\n          throw new RuntimeException(\"sorted set invariants violated!  \" +\n              \"Got stream with first txid \" + elis.getFirstTxId() +\n              \", but the last firstTxId was \" + accFirstTxId);\n        }\n      }\n    }\n    if (!acc.isEmpty()) {\n      streams.add(new RedundantEditLogInputStream(acc, fromTxId));\n      acc.clear();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java",
      "extendedDetails": {}
    },
    "74dfa8f1f22d58df64a78c660af111e17ab7053e": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342042 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/12 1:42 PM",
      "commitName": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,42 @@\n+  public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n+      long fromTxId, boolean inProgressOk) {\n+    final TreeMultiset\u003cEditLogInputStream\u003e allStreams \u003d\n+        TreeMultiset.create(EDIT_LOG_INPUT_STREAM_COMPARATOR);\n+    for (JournalAndStream jas : journals) {\n+      if (jas.isDisabled()) {\n+        LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n+        continue;\n+      }\n+      jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n+    }\n+    // We want to group together all the streams that start on the same start\n+    // transaction ID.  To do this, we maintain an accumulator (acc) of all\n+    // the streams we\u0027ve seen at a given start transaction ID.  When we see a\n+    // higher start transaction ID, we select a stream from the accumulator and\n+    // clear it.  Then we begin accumulating streams with the new, higher start\n+    // transaction ID.\n+    LinkedList\u003cEditLogInputStream\u003e acc \u003d\n+        new LinkedList\u003cEditLogInputStream\u003e();\n+    for (EditLogInputStream elis : allStreams) {\n+      if (acc.isEmpty()) {\n+        acc.add(elis);\n+      } else {\n+        long accFirstTxId \u003d acc.get(0).getFirstTxId();\n+        if (accFirstTxId \u003d\u003d elis.getFirstTxId()) {\n+          acc.add(elis);\n+        } else if (accFirstTxId \u003c elis.getFirstTxId()) {\n+          streams.add(acc.get(0));\n+          acc.clear();\n+          acc.add(elis);\n+        } else if (accFirstTxId \u003e elis.getFirstTxId()) {\n+          throw new RuntimeException(\"sorted set invariants violated!  \" +\n+              \"Got stream with first txid \" + elis.getFirstTxId() +\n+              \", but the last firstTxId was \" + accFirstTxId);\n+        }\n+      }\n+    }\n+    if (!acc.isEmpty()) {\n+      streams.add(acc.get(0));\n+      acc.clear();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void selectInputStreams(Collection\u003cEditLogInputStream\u003e streams,\n      long fromTxId, boolean inProgressOk) {\n    final TreeMultiset\u003cEditLogInputStream\u003e allStreams \u003d\n        TreeMultiset.create(EDIT_LOG_INPUT_STREAM_COMPARATOR);\n    for (JournalAndStream jas : journals) {\n      if (jas.isDisabled()) {\n        LOG.info(\"Skipping jas \" + jas + \" since it\u0027s disabled\");\n        continue;\n      }\n      jas.getManager().selectInputStreams(allStreams, fromTxId, inProgressOk);\n    }\n    // We want to group together all the streams that start on the same start\n    // transaction ID.  To do this, we maintain an accumulator (acc) of all\n    // the streams we\u0027ve seen at a given start transaction ID.  When we see a\n    // higher start transaction ID, we select a stream from the accumulator and\n    // clear it.  Then we begin accumulating streams with the new, higher start\n    // transaction ID.\n    LinkedList\u003cEditLogInputStream\u003e acc \u003d\n        new LinkedList\u003cEditLogInputStream\u003e();\n    for (EditLogInputStream elis : allStreams) {\n      if (acc.isEmpty()) {\n        acc.add(elis);\n      } else {\n        long accFirstTxId \u003d acc.get(0).getFirstTxId();\n        if (accFirstTxId \u003d\u003d elis.getFirstTxId()) {\n          acc.add(elis);\n        } else if (accFirstTxId \u003c elis.getFirstTxId()) {\n          streams.add(acc.get(0));\n          acc.clear();\n          acc.add(elis);\n        } else if (accFirstTxId \u003e elis.getFirstTxId()) {\n          throw new RuntimeException(\"sorted set invariants violated!  \" +\n              \"Got stream with first txid \" + elis.getFirstTxId() +\n              \", but the last firstTxId was \" + accFirstTxId);\n        }\n      }\n    }\n    if (!acc.isEmpty()) {\n      streams.add(acc.get(0));\n      acc.clear();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/JournalSet.java"
    }
  }
}