{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterSecurityManager.java",
  "functionName": "getDelegationToken",
  "functionId": "getDelegationToken___renewer-Text",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/security/RouterSecurityManager.java",
  "functionStartLine": 124,
  "functionEndLine": 158,
  "numCommitsSeen": 6,
  "timeTaken": 721,
  "changeHistory": [
    "75f8b6ccfa6160e695ce8f7ad13c6e3624e9e7aa"
  ],
  "changeHistoryShort": {
    "75f8b6ccfa6160e695ce8f7ad13c6e3624e9e7aa": "Yintroduced"
  },
  "changeHistoryDetails": {
    "75f8b6ccfa6160e695ce8f7ad13c6e3624e9e7aa": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13358. RBF: Support for Delegation Token (RPC). Contributed by CR Hota.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "75f8b6ccfa6160e695ce8f7ad13c6e3624e9e7aa",
      "commitAuthor": "Brahma Reddy Battula",
      "diff": "@@ -0,0 +1,35 @@\n+  public Token\u003cDelegationTokenIdentifier\u003e getDelegationToken(Text renewer)\n+      throws IOException {\n+    LOG.debug(\"Generate delegation token with renewer \" + renewer);\n+    final String operationName \u003d \"getDelegationToken\";\n+    boolean success \u003d false;\n+    String tokenId \u003d \"\";\n+    Token\u003cDelegationTokenIdentifier\u003e token;\n+    try {\n+      if (!isAllowedDelegationTokenOp()) {\n+        throw new IOException(\n+            \"Delegation Token can be issued only \" +\n+                \"with kerberos or web authentication\");\n+      }\n+      if (dtSecretManager \u003d\u003d null || !dtSecretManager.isRunning()) {\n+        LOG.warn(\"trying to get DT with no secret manager running\");\n+        return null;\n+      }\n+      UserGroupInformation ugi \u003d getRemoteUser();\n+      String user \u003d ugi.getUserName();\n+      Text owner \u003d new Text(user);\n+      Text realUser \u003d null;\n+      if (ugi.getRealUser() !\u003d null) {\n+        realUser \u003d new Text(ugi.getRealUser().getUserName());\n+      }\n+      DelegationTokenIdentifier dtId \u003d new DelegationTokenIdentifier(owner,\n+          renewer, realUser);\n+      token \u003d new Token\u003cDelegationTokenIdentifier\u003e(\n+          dtId, dtSecretManager);\n+      tokenId \u003d dtId.toStringStable();\n+      success \u003d true;\n+    } finally {\n+      logAuditEvent(success, operationName, tokenId);\n+    }\n+    return token;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Token\u003cDelegationTokenIdentifier\u003e getDelegationToken(Text renewer)\n      throws IOException {\n    LOG.debug(\"Generate delegation token with renewer \" + renewer);\n    final String operationName \u003d \"getDelegationToken\";\n    boolean success \u003d false;\n    String tokenId \u003d \"\";\n    Token\u003cDelegationTokenIdentifier\u003e token;\n    try {\n      if (!isAllowedDelegationTokenOp()) {\n        throw new IOException(\n            \"Delegation Token can be issued only \" +\n                \"with kerberos or web authentication\");\n      }\n      if (dtSecretManager \u003d\u003d null || !dtSecretManager.isRunning()) {\n        LOG.warn(\"trying to get DT with no secret manager running\");\n        return null;\n      }\n      UserGroupInformation ugi \u003d getRemoteUser();\n      String user \u003d ugi.getUserName();\n      Text owner \u003d new Text(user);\n      Text realUser \u003d null;\n      if (ugi.getRealUser() !\u003d null) {\n        realUser \u003d new Text(ugi.getRealUser().getUserName());\n      }\n      DelegationTokenIdentifier dtId \u003d new DelegationTokenIdentifier(owner,\n          renewer, realUser);\n      token \u003d new Token\u003cDelegationTokenIdentifier\u003e(\n          dtId, dtSecretManager);\n      tokenId \u003d dtId.toStringStable();\n      success \u003d true;\n    } finally {\n      logAuditEvent(success, operationName, tokenId);\n    }\n    return token;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/security/RouterSecurityManager.java"
    }
  }
}