{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineParserForCompareExpr.java",
  "functionName": "parseCompareOp",
  "functionId": "parseCompareOp",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineParserForCompareExpr.java",
  "functionStartLine": 178,
  "functionEndLine": 213,
  "numCommitsSeen": 2,
  "timeTaken": 640,
  "changeHistory": [
    "089caf49fe968cf4cd3fd4f9637da89ee143991a"
  ],
  "changeHistoryShort": {
    "089caf49fe968cf4cd3fd4f9637da89ee143991a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "089caf49fe968cf4cd3fd4f9637da89ee143991a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4447. Provide a mechanism to represent complex filters and parse them at the REST layer (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,36 @@\n+  private void parseCompareOp() throws TimelineParseException {\n+    if (offset + 2 \u003e\u003d exprLength) {\n+      throw new TimelineParseException(\"Compare op cannot be parsed for \" +\n+          exprName + \".\");\n+    }\n+    TimelineCompareOp compareOp \u003d null;\n+    boolean keyExistFlag \u003d true;\n+    if (expr.charAt(offset + 2) \u003d\u003d TimelineParseConstants.SPACE_CHAR) {\n+      if (exprInLowerCase.startsWith(\"eq\", offset)) {\n+        compareOp \u003d TimelineCompareOp.EQUAL;\n+      } else if (exprInLowerCase.startsWith(\"ne\", offset)) {\n+        compareOp \u003d TimelineCompareOp.NOT_EQUAL;\n+        keyExistFlag \u003d false;\n+      } else if (exprInLowerCase.startsWith(\"lt\", offset)) {\n+        compareOp \u003d TimelineCompareOp.LESS_THAN;\n+      } else if (exprInLowerCase.startsWith(\"le\", offset)) {\n+        compareOp \u003d TimelineCompareOp.LESS_OR_EQUAL;\n+      } else if (exprInLowerCase.startsWith(\"gt\", offset)) {\n+        compareOp \u003d TimelineCompareOp.GREATER_THAN;\n+      } else if (exprInLowerCase.startsWith(\"ge\", offset)) {\n+        compareOp \u003d TimelineCompareOp.GREATER_OR_EQUAL;\n+      }\n+      offset \u003d offset + 3;\n+    } else if (exprInLowerCase.startsWith(\"ene \", offset)) {\n+      // Not equal but key should be present.\n+      compareOp \u003d TimelineCompareOp.NOT_EQUAL;\n+      offset \u003d offset + 4;\n+    }\n+    if (compareOp \u003d\u003d null) {\n+      throw new TimelineParseException(\"Compare op cannot be parsed for \" +\n+          exprName + \".\");\n+    }\n+    setCompareOpToCurrentFilter(compareOp, keyExistFlag);\n+    kvStartOffset \u003d offset;\n+    currentParseState \u003d ParseState.PARSING_VALUE;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void parseCompareOp() throws TimelineParseException {\n    if (offset + 2 \u003e\u003d exprLength) {\n      throw new TimelineParseException(\"Compare op cannot be parsed for \" +\n          exprName + \".\");\n    }\n    TimelineCompareOp compareOp \u003d null;\n    boolean keyExistFlag \u003d true;\n    if (expr.charAt(offset + 2) \u003d\u003d TimelineParseConstants.SPACE_CHAR) {\n      if (exprInLowerCase.startsWith(\"eq\", offset)) {\n        compareOp \u003d TimelineCompareOp.EQUAL;\n      } else if (exprInLowerCase.startsWith(\"ne\", offset)) {\n        compareOp \u003d TimelineCompareOp.NOT_EQUAL;\n        keyExistFlag \u003d false;\n      } else if (exprInLowerCase.startsWith(\"lt\", offset)) {\n        compareOp \u003d TimelineCompareOp.LESS_THAN;\n      } else if (exprInLowerCase.startsWith(\"le\", offset)) {\n        compareOp \u003d TimelineCompareOp.LESS_OR_EQUAL;\n      } else if (exprInLowerCase.startsWith(\"gt\", offset)) {\n        compareOp \u003d TimelineCompareOp.GREATER_THAN;\n      } else if (exprInLowerCase.startsWith(\"ge\", offset)) {\n        compareOp \u003d TimelineCompareOp.GREATER_OR_EQUAL;\n      }\n      offset \u003d offset + 3;\n    } else if (exprInLowerCase.startsWith(\"ene \", offset)) {\n      // Not equal but key should be present.\n      compareOp \u003d TimelineCompareOp.NOT_EQUAL;\n      offset \u003d offset + 4;\n    }\n    if (compareOp \u003d\u003d null) {\n      throw new TimelineParseException(\"Compare op cannot be parsed for \" +\n          exprName + \".\");\n    }\n    setCompareOpToCurrentFilter(compareOp, keyExistFlag);\n    kvStartOffset \u003d offset;\n    currentParseState \u003d ParseState.PARSING_VALUE;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineParserForCompareExpr.java"
    }
  }
}