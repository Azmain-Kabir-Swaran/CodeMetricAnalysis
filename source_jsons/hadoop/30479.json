{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineDataManager.java",
  "functionName": "getEntities",
  "functionId": "getEntities___entityType-String__primaryFilter-NameValuePair__secondaryFilter-Collection__NameValuePair____windowStart-Long__windowEnd-Long__fromId-String__fromTs-Long__limit-Long__fields-EnumSet__Field____callerUGI-UserGroupInformation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
  "functionStartLine": 126,
  "functionEndLine": 156,
  "numCommitsSeen": 15,
  "timeTaken": 1722,
  "changeHistory": [
    "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0",
    "8180e676abb2bb500a48b3a0c0809d2a807ab235",
    "4a114dd67aae83e5bb2d65470166de954acf36a2",
    "f5b19bed7d71979dc8685b03152188902b6e45e9",
    "9e40de6af7959ac7bb5f4e4d2833ca14ea457614",
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357"
  ],
  "changeHistoryShort": {
    "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0": "Ybodychange",
    "8180e676abb2bb500a48b3a0c0809d2a807ab235": "Ybodychange",
    "4a114dd67aae83e5bb2d65470166de954acf36a2": "Ybodychange",
    "f5b19bed7d71979dc8685b03152188902b6e45e9": "Ybodychange",
    "9e40de6af7959ac7bb5f4e4d2833ca14ea457614": "Ybodychange",
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3360. Add JMX metrics to TimelineDataManager (Jason Lowe via jeagles)\n",
      "commitDate": "24/06/15 2:16 PM",
      "commitName": "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "07/05/15 10:01 AM",
      "commitNameOld": "daf3e4ef8bf73cbe4a799d51b4765809cd81089f",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 48.18,
      "commitsBetweenForRepo": 425,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n   public TimelineEntities getEntities(\n       String entityType,\n       NameValuePair primaryFilter,\n       Collection\u003cNameValuePair\u003e secondaryFilter,\n       Long windowStart,\n       Long windowEnd,\n       String fromId,\n       Long fromTs,\n       Long limit,\n       EnumSet\u003cField\u003e fields,\n       UserGroupInformation callerUGI) throws YarnException, IOException {\n-    TimelineEntities entities \u003d null;\n-    entities \u003d store.getEntities(\n-        entityType,\n-        limit,\n-        windowStart,\n-        windowEnd,\n-        fromId,\n-        fromTs,\n-        primaryFilter,\n-        secondaryFilter,\n-        fields,\n-        new CheckAclImpl(callerUGI));\n-\n-    if (entities \u003d\u003d null) {\n-      return new TimelineEntities();\n+    long startTime \u003d Time.monotonicNow();\n+    metrics.incrGetEntitiesOps();\n+    try {\n+      TimelineEntities entities \u003d doGetEntities(\n+          entityType,\n+          primaryFilter,\n+          secondaryFilter,\n+          windowStart,\n+          windowEnd,\n+          fromId,\n+          fromTs,\n+          limit,\n+          fields,\n+          callerUGI);\n+      metrics.incrGetEntitiesTotal(entities.getEntities().size());\n+      return entities;\n+    } finally {\n+      metrics.addGetEntitiesTime(Time.monotonicNow() - startTime);\n     }\n-    return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntities getEntities(\n      String entityType,\n      NameValuePair primaryFilter,\n      Collection\u003cNameValuePair\u003e secondaryFilter,\n      Long windowStart,\n      Long windowEnd,\n      String fromId,\n      Long fromTs,\n      Long limit,\n      EnumSet\u003cField\u003e fields,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    long startTime \u003d Time.monotonicNow();\n    metrics.incrGetEntitiesOps();\n    try {\n      TimelineEntities entities \u003d doGetEntities(\n          entityType,\n          primaryFilter,\n          secondaryFilter,\n          windowStart,\n          windowEnd,\n          fromId,\n          fromTs,\n          limit,\n          fields,\n          callerUGI);\n      metrics.incrGetEntitiesTotal(entities.getEntities().size());\n      return entities;\n    } finally {\n      metrics.addGetEntitiesTime(Time.monotonicNow() - startTime);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
      "extendedDetails": {}
    },
    "8180e676abb2bb500a48b3a0c0809d2a807ab235": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3267. Timelineserver applies the ACL rules after applying the limit on the number of records (Chang Li via jeagles)\n",
      "commitDate": "13/03/15 10:04 AM",
      "commitName": "8180e676abb2bb500a48b3a0c0809d2a807ab235",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "07/11/14 4:11 PM",
      "commitNameOld": "4a114dd67aae83e5bb2d65470166de954acf36a2",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 125.7,
      "commitsBetweenForRepo": 928,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,29 @@\n   public TimelineEntities getEntities(\n       String entityType,\n       NameValuePair primaryFilter,\n       Collection\u003cNameValuePair\u003e secondaryFilter,\n       Long windowStart,\n       Long windowEnd,\n       String fromId,\n       Long fromTs,\n       Long limit,\n       EnumSet\u003cField\u003e fields,\n       UserGroupInformation callerUGI) throws YarnException, IOException {\n     TimelineEntities entities \u003d null;\n     entities \u003d store.getEntities(\n         entityType,\n         limit,\n         windowStart,\n         windowEnd,\n         fromId,\n         fromTs,\n         primaryFilter,\n         secondaryFilter,\n-        fields);\n-    if (entities !\u003d null) {\n-      Iterator\u003cTimelineEntity\u003e entitiesItr \u003d\n-          entities.getEntities().iterator();\n-      while (entitiesItr.hasNext()) {\n-        TimelineEntity entity \u003d entitiesItr.next();\n-        addDefaultDomainIdIfAbsent(entity);\n-        try {\n-          // check ACLs\n-          if (!timelineACLsManager.checkAccess(\n-              callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\n-            entitiesItr.remove();\n-          }\n-        } catch (YarnException e) {\n-          LOG.error(\"Error when verifying access for user \" + callerUGI\n-              + \" on the events of the timeline entity \"\n-              + new EntityIdentifier(entity.getEntityId(),\n-                  entity.getEntityType()), e);\n-          entitiesItr.remove();\n-        }\n-      }\n-    }\n+        fields,\n+        new CheckAclImpl(callerUGI));\n+\n     if (entities \u003d\u003d null) {\n       return new TimelineEntities();\n     }\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntities getEntities(\n      String entityType,\n      NameValuePair primaryFilter,\n      Collection\u003cNameValuePair\u003e secondaryFilter,\n      Long windowStart,\n      Long windowEnd,\n      String fromId,\n      Long fromTs,\n      Long limit,\n      EnumSet\u003cField\u003e fields,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    TimelineEntities entities \u003d null;\n    entities \u003d store.getEntities(\n        entityType,\n        limit,\n        windowStart,\n        windowEnd,\n        fromId,\n        fromTs,\n        primaryFilter,\n        secondaryFilter,\n        fields,\n        new CheckAclImpl(callerUGI));\n\n    if (entities \u003d\u003d null) {\n      return new TimelineEntities();\n    }\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
      "extendedDetails": {}
    },
    "4a114dd67aae83e5bb2d65470166de954acf36a2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2819. NPE in ATS Timeline Domains when upgrading from 2.4 to 2.6. Contributed by Zhijie Shen\n",
      "commitDate": "07/11/14 4:11 PM",
      "commitName": "4a114dd67aae83e5bb2d65470166de954acf36a2",
      "commitAuthor": "Xuan",
      "commitDateOld": "06/11/14 11:48 AM",
      "commitNameOld": "f5b19bed7d71979dc8685b03152188902b6e45e9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.18,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   public TimelineEntities getEntities(\n       String entityType,\n       NameValuePair primaryFilter,\n       Collection\u003cNameValuePair\u003e secondaryFilter,\n       Long windowStart,\n       Long windowEnd,\n       String fromId,\n       Long fromTs,\n       Long limit,\n       EnumSet\u003cField\u003e fields,\n       UserGroupInformation callerUGI) throws YarnException, IOException {\n     TimelineEntities entities \u003d null;\n     entities \u003d store.getEntities(\n         entityType,\n         limit,\n         windowStart,\n         windowEnd,\n         fromId,\n         fromTs,\n         primaryFilter,\n         secondaryFilter,\n         fields);\n     if (entities !\u003d null) {\n       Iterator\u003cTimelineEntity\u003e entitiesItr \u003d\n           entities.getEntities().iterator();\n       while (entitiesItr.hasNext()) {\n         TimelineEntity entity \u003d entitiesItr.next();\n+        addDefaultDomainIdIfAbsent(entity);\n         try {\n           // check ACLs\n           if (!timelineACLsManager.checkAccess(\n               callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\n             entitiesItr.remove();\n           }\n         } catch (YarnException e) {\n           LOG.error(\"Error when verifying access for user \" + callerUGI\n               + \" on the events of the timeline entity \"\n               + new EntityIdentifier(entity.getEntityId(),\n                   entity.getEntityType()), e);\n           entitiesItr.remove();\n         }\n       }\n     }\n     if (entities \u003d\u003d null) {\n       return new TimelineEntities();\n     }\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntities getEntities(\n      String entityType,\n      NameValuePair primaryFilter,\n      Collection\u003cNameValuePair\u003e secondaryFilter,\n      Long windowStart,\n      Long windowEnd,\n      String fromId,\n      Long fromTs,\n      Long limit,\n      EnumSet\u003cField\u003e fields,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    TimelineEntities entities \u003d null;\n    entities \u003d store.getEntities(\n        entityType,\n        limit,\n        windowStart,\n        windowEnd,\n        fromId,\n        fromTs,\n        primaryFilter,\n        secondaryFilter,\n        fields);\n    if (entities !\u003d null) {\n      Iterator\u003cTimelineEntity\u003e entitiesItr \u003d\n          entities.getEntities().iterator();\n      while (entitiesItr.hasNext()) {\n        TimelineEntity entity \u003d entitiesItr.next();\n        addDefaultDomainIdIfAbsent(entity);\n        try {\n          // check ACLs\n          if (!timelineACLsManager.checkAccess(\n              callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\n            entitiesItr.remove();\n          }\n        } catch (YarnException e) {\n          LOG.error(\"Error when verifying access for user \" + callerUGI\n              + \" on the events of the timeline entity \"\n              + new EntityIdentifier(entity.getEntityId(),\n                  entity.getEntityType()), e);\n          entitiesItr.remove();\n        }\n      }\n    }\n    if (entities \u003d\u003d null) {\n      return new TimelineEntities();\n    }\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
      "extendedDetails": {}
    },
    "f5b19bed7d71979dc8685b03152188902b6e45e9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2818. Removed the now unnecessary user entity injection from Timeline service given we now have domains. Contributed by Zhijie Shen.\n",
      "commitDate": "06/11/14 11:48 AM",
      "commitName": "f5b19bed7d71979dc8685b03152188902b6e45e9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/10/14 4:37 PM",
      "commitNameOld": "233d446be1bc1bc77c7c1c45386086a732897afd",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 20.84,
      "commitsBetweenForRepo": 214,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,47 @@\n   public TimelineEntities getEntities(\n       String entityType,\n       NameValuePair primaryFilter,\n       Collection\u003cNameValuePair\u003e secondaryFilter,\n       Long windowStart,\n       Long windowEnd,\n       String fromId,\n       Long fromTs,\n       Long limit,\n       EnumSet\u003cField\u003e fields,\n       UserGroupInformation callerUGI) throws YarnException, IOException {\n     TimelineEntities entities \u003d null;\n-    boolean modified \u003d extendFields(fields);\n     entities \u003d store.getEntities(\n         entityType,\n         limit,\n         windowStart,\n         windowEnd,\n         fromId,\n         fromTs,\n         primaryFilter,\n         secondaryFilter,\n         fields);\n     if (entities !\u003d null) {\n       Iterator\u003cTimelineEntity\u003e entitiesItr \u003d\n           entities.getEntities().iterator();\n       while (entitiesItr.hasNext()) {\n         TimelineEntity entity \u003d entitiesItr.next();\n         try {\n           // check ACLs\n           if (!timelineACLsManager.checkAccess(\n               callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\n             entitiesItr.remove();\n-          } else {\n-            // clean up system data\n-            if (modified) {\n-              entity.setPrimaryFilters(null);\n-            } else {\n-              cleanupOwnerInfo(entity);\n-            }\n           }\n         } catch (YarnException e) {\n           LOG.error(\"Error when verifying access for user \" + callerUGI\n               + \" on the events of the timeline entity \"\n               + new EntityIdentifier(entity.getEntityId(),\n                   entity.getEntityType()), e);\n           entitiesItr.remove();\n         }\n       }\n     }\n     if (entities \u003d\u003d null) {\n       return new TimelineEntities();\n     }\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntities getEntities(\n      String entityType,\n      NameValuePair primaryFilter,\n      Collection\u003cNameValuePair\u003e secondaryFilter,\n      Long windowStart,\n      Long windowEnd,\n      String fromId,\n      Long fromTs,\n      Long limit,\n      EnumSet\u003cField\u003e fields,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    TimelineEntities entities \u003d null;\n    entities \u003d store.getEntities(\n        entityType,\n        limit,\n        windowStart,\n        windowEnd,\n        fromId,\n        fromTs,\n        primaryFilter,\n        secondaryFilter,\n        fields);\n    if (entities !\u003d null) {\n      Iterator\u003cTimelineEntity\u003e entitiesItr \u003d\n          entities.getEntities().iterator();\n      while (entitiesItr.hasNext()) {\n        TimelineEntity entity \u003d entitiesItr.next();\n        try {\n          // check ACLs\n          if (!timelineACLsManager.checkAccess(\n              callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\n            entitiesItr.remove();\n          }\n        } catch (YarnException e) {\n          LOG.error(\"Error when verifying access for user \" + callerUGI\n              + \" on the events of the timeline entity \"\n              + new EntityIdentifier(entity.getEntityId(),\n                  entity.getEntityType()), e);\n          entitiesItr.remove();\n        }\n      }\n    }\n    if (entities \u003d\u003d null) {\n      return new TimelineEntities();\n    }\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
      "extendedDetails": {}
    },
    "9e40de6af7959ac7bb5f4e4d2833ca14ea457614": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2446. Augmented Timeline service APIs to start taking in domains as a parameter while posting entities and events. Contributed by Zhijie Shen.\n",
      "commitDate": "01/10/14 5:52 PM",
      "commitName": "9e40de6af7959ac7bb5f4e4d2833ca14ea457614",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/09/14 11:27 AM",
      "commitNameOld": "d78b452a4f413c6931a494c33df0666ce9b44973",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.27,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,55 @@\n   public TimelineEntities getEntities(\n       String entityType,\n       NameValuePair primaryFilter,\n       Collection\u003cNameValuePair\u003e secondaryFilter,\n       Long windowStart,\n       Long windowEnd,\n       String fromId,\n       Long fromTs,\n       Long limit,\n       EnumSet\u003cField\u003e fields,\n       UserGroupInformation callerUGI) throws YarnException, IOException {\n     TimelineEntities entities \u003d null;\n     boolean modified \u003d extendFields(fields);\n     entities \u003d store.getEntities(\n         entityType,\n         limit,\n         windowStart,\n         windowEnd,\n         fromId,\n         fromTs,\n         primaryFilter,\n         secondaryFilter,\n         fields);\n     if (entities !\u003d null) {\n       Iterator\u003cTimelineEntity\u003e entitiesItr \u003d\n           entities.getEntities().iterator();\n       while (entitiesItr.hasNext()) {\n         TimelineEntity entity \u003d entitiesItr.next();\n         try {\n           // check ACLs\n-          if (!timelineACLsManager.checkAccess(callerUGI, entity)) {\n+          if (!timelineACLsManager.checkAccess(\n+              callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\n             entitiesItr.remove();\n           } else {\n             // clean up system data\n             if (modified) {\n               entity.setPrimaryFilters(null);\n             } else {\n               cleanupOwnerInfo(entity);\n             }\n           }\n         } catch (YarnException e) {\n           LOG.error(\"Error when verifying access for user \" + callerUGI\n               + \" on the events of the timeline entity \"\n               + new EntityIdentifier(entity.getEntityId(),\n                   entity.getEntityType()), e);\n           entitiesItr.remove();\n         }\n       }\n     }\n     if (entities \u003d\u003d null) {\n       return new TimelineEntities();\n     }\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntities getEntities(\n      String entityType,\n      NameValuePair primaryFilter,\n      Collection\u003cNameValuePair\u003e secondaryFilter,\n      Long windowStart,\n      Long windowEnd,\n      String fromId,\n      Long fromTs,\n      Long limit,\n      EnumSet\u003cField\u003e fields,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    TimelineEntities entities \u003d null;\n    boolean modified \u003d extendFields(fields);\n    entities \u003d store.getEntities(\n        entityType,\n        limit,\n        windowStart,\n        windowEnd,\n        fromId,\n        fromTs,\n        primaryFilter,\n        secondaryFilter,\n        fields);\n    if (entities !\u003d null) {\n      Iterator\u003cTimelineEntity\u003e entitiesItr \u003d\n          entities.getEntities().iterator();\n      while (entitiesItr.hasNext()) {\n        TimelineEntity entity \u003d entitiesItr.next();\n        try {\n          // check ACLs\n          if (!timelineACLsManager.checkAccess(\n              callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\n            entitiesItr.remove();\n          } else {\n            // clean up system data\n            if (modified) {\n              entity.setPrimaryFilters(null);\n            } else {\n              cleanupOwnerInfo(entity);\n            }\n          }\n        } catch (YarnException e) {\n          LOG.error(\"Error when verifying access for user \" + callerUGI\n              + \" on the events of the timeline entity \"\n              + new EntityIdentifier(entity.getEntityId(),\n                  entity.getEntityType()), e);\n          entitiesItr.remove();\n        }\n      }\n    }\n    if (entities \u003d\u003d null) {\n      return new TimelineEntities();\n    }\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
      "extendedDetails": {}
    },
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2302. Refactor TimelineWebServices. (Contributed by Zhijie Shen)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617055 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/08/14 12:21 AM",
      "commitName": "e91d099c4a4182c25c1a19237aff28e4d1bc1357",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,54 @@\n+  public TimelineEntities getEntities(\n+      String entityType,\n+      NameValuePair primaryFilter,\n+      Collection\u003cNameValuePair\u003e secondaryFilter,\n+      Long windowStart,\n+      Long windowEnd,\n+      String fromId,\n+      Long fromTs,\n+      Long limit,\n+      EnumSet\u003cField\u003e fields,\n+      UserGroupInformation callerUGI) throws YarnException, IOException {\n+    TimelineEntities entities \u003d null;\n+    boolean modified \u003d extendFields(fields);\n+    entities \u003d store.getEntities(\n+        entityType,\n+        limit,\n+        windowStart,\n+        windowEnd,\n+        fromId,\n+        fromTs,\n+        primaryFilter,\n+        secondaryFilter,\n+        fields);\n+    if (entities !\u003d null) {\n+      Iterator\u003cTimelineEntity\u003e entitiesItr \u003d\n+          entities.getEntities().iterator();\n+      while (entitiesItr.hasNext()) {\n+        TimelineEntity entity \u003d entitiesItr.next();\n+        try {\n+          // check ACLs\n+          if (!timelineACLsManager.checkAccess(callerUGI, entity)) {\n+            entitiesItr.remove();\n+          } else {\n+            // clean up system data\n+            if (modified) {\n+              entity.setPrimaryFilters(null);\n+            } else {\n+              cleanupOwnerInfo(entity);\n+            }\n+          }\n+        } catch (YarnException e) {\n+          LOG.error(\"Error when verifying access for user \" + callerUGI\n+              + \" on the events of the timeline entity \"\n+              + new EntityIdentifier(entity.getEntityId(),\n+                  entity.getEntityType()), e);\n+          entitiesItr.remove();\n+        }\n+      }\n+    }\n+    if (entities \u003d\u003d null) {\n+      return new TimelineEntities();\n+    }\n+    return entities;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntities getEntities(\n      String entityType,\n      NameValuePair primaryFilter,\n      Collection\u003cNameValuePair\u003e secondaryFilter,\n      Long windowStart,\n      Long windowEnd,\n      String fromId,\n      Long fromTs,\n      Long limit,\n      EnumSet\u003cField\u003e fields,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    TimelineEntities entities \u003d null;\n    boolean modified \u003d extendFields(fields);\n    entities \u003d store.getEntities(\n        entityType,\n        limit,\n        windowStart,\n        windowEnd,\n        fromId,\n        fromTs,\n        primaryFilter,\n        secondaryFilter,\n        fields);\n    if (entities !\u003d null) {\n      Iterator\u003cTimelineEntity\u003e entitiesItr \u003d\n          entities.getEntities().iterator();\n      while (entitiesItr.hasNext()) {\n        TimelineEntity entity \u003d entitiesItr.next();\n        try {\n          // check ACLs\n          if (!timelineACLsManager.checkAccess(callerUGI, entity)) {\n            entitiesItr.remove();\n          } else {\n            // clean up system data\n            if (modified) {\n              entity.setPrimaryFilters(null);\n            } else {\n              cleanupOwnerInfo(entity);\n            }\n          }\n        } catch (YarnException e) {\n          LOG.error(\"Error when verifying access for user \" + callerUGI\n              + \" on the events of the timeline entity \"\n              + new EntityIdentifier(entity.getEntityId(),\n                  entity.getEntityType()), e);\n          entitiesItr.remove();\n        }\n      }\n    }\n    if (entities \u003d\u003d null) {\n      return new TimelineEntities();\n    }\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java"
    }
  }
}