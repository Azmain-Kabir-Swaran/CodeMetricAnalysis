{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "YarnConfigurationStore.java",
  "functionName": "checkVersion",
  "functionId": "checkVersion",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/YarnConfigurationStore.java",
  "functionStartLine": 179,
  "functionEndLine": 198,
  "numCommitsSeen": 14,
  "timeTaken": 1900,
  "changeHistory": [
    "ea0444851d852f6475c53706701fc757d72eba88",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634"
  ],
  "changeHistoryShort": {
    "ea0444851d852f6475c53706701fc757d72eba88": "Ybodychange",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ea0444851d852f6475c53706701fc757d72eba88": {
      "type": "Ybodychange",
      "commitMessage": "YARN.10003. YarnConfigurationStore#checkVersion throws exception that belongs to RMStateStore. Contributed by Benjamin Teke\n",
      "commitDate": "06/03/20 8:49 AM",
      "commitName": "ea0444851d852f6475c53706701fc757d72eba88",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "14/01/20 3:26 AM",
      "commitNameOld": "1c51f36be79924489ca4a2e5ca7e96ac75a6ec18",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 52.22,
      "commitsBetweenForRepo": 168,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,20 @@\n   public void checkVersion() throws Exception {\n-    // TODO this was taken from RMStateStore. Should probably refactor\n     Version loadedVersion \u003d getConfStoreVersion();\n-    LOG.info(\"Loaded configuration store version info \" + loadedVersion);\n-    if (loadedVersion !\u003d null \u0026\u0026 loadedVersion.equals(getCurrentVersion())) {\n+    Version currentVersion \u003d getCurrentVersion();\n+    LOG.info(\"Loaded configuration store version info {}\", loadedVersion);\n+\n+    // when hard-coded schema version (currentVersion) is null the version check\n+    // is unnecessary\n+    if (currentVersion \u003d\u003d null || currentVersion.equals(loadedVersion)) {\n       return;\n     }\n     // if there is no version info, treat it as CURRENT_VERSION_INFO;\n-    if (loadedVersion \u003d\u003d null) {\n-      loadedVersion \u003d getCurrentVersion();\n-    }\n-    if (loadedVersion.isCompatibleTo(getCurrentVersion())) {\n-      LOG.info(\"Storing configuration store version info \"\n-          + getCurrentVersion());\n+    if (loadedVersion \u003d\u003d null || loadedVersion.isCompatibleTo(currentVersion)) {\n+      LOG.info(\"Storing configuration store version info {}\", currentVersion);\n       storeVersion();\n     } else {\n-      throw new RMStateVersionIncompatibleException(\n-          \"Expecting configuration store version \" + getCurrentVersion()\n+      throw new YarnConfStoreVersionIncompatibleException(\n+          \"Expecting configuration store version \" + currentVersion\n               + \", but loading version \" + loadedVersion);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void checkVersion() throws Exception {\n    Version loadedVersion \u003d getConfStoreVersion();\n    Version currentVersion \u003d getCurrentVersion();\n    LOG.info(\"Loaded configuration store version info {}\", loadedVersion);\n\n    // when hard-coded schema version (currentVersion) is null the version check\n    // is unnecessary\n    if (currentVersion \u003d\u003d null || currentVersion.equals(loadedVersion)) {\n      return;\n    }\n    // if there is no version info, treat it as CURRENT_VERSION_INFO;\n    if (loadedVersion \u003d\u003d null || loadedVersion.isCompatibleTo(currentVersion)) {\n      LOG.info(\"Storing configuration store version info {}\", currentVersion);\n      storeVersion();\n    } else {\n      throw new YarnConfStoreVersionIncompatibleException(\n          \"Expecting configuration store version \" + currentVersion\n              + \", but loading version \" + loadedVersion);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/YarnConfigurationStore.java",
      "extendedDetails": {}
    },
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,21 @@\n+  public void checkVersion() throws Exception {\n+    // TODO this was taken from RMStateStore. Should probably refactor\n+    Version loadedVersion \u003d getConfStoreVersion();\n+    LOG.info(\"Loaded configuration store version info \" + loadedVersion);\n+    if (loadedVersion !\u003d null \u0026\u0026 loadedVersion.equals(getCurrentVersion())) {\n+      return;\n+    }\n+    // if there is no version info, treat it as CURRENT_VERSION_INFO;\n+    if (loadedVersion \u003d\u003d null) {\n+      loadedVersion \u003d getCurrentVersion();\n+    }\n+    if (loadedVersion.isCompatibleTo(getCurrentVersion())) {\n+      LOG.info(\"Storing configuration store version info \"\n+          + getCurrentVersion());\n+      storeVersion();\n+    } else {\n+      throw new RMStateVersionIncompatibleException(\n+          \"Expecting configuration store version \" + getCurrentVersion()\n+              + \", but loading version \" + loadedVersion);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void checkVersion() throws Exception {\n    // TODO this was taken from RMStateStore. Should probably refactor\n    Version loadedVersion \u003d getConfStoreVersion();\n    LOG.info(\"Loaded configuration store version info \" + loadedVersion);\n    if (loadedVersion !\u003d null \u0026\u0026 loadedVersion.equals(getCurrentVersion())) {\n      return;\n    }\n    // if there is no version info, treat it as CURRENT_VERSION_INFO;\n    if (loadedVersion \u003d\u003d null) {\n      loadedVersion \u003d getCurrentVersion();\n    }\n    if (loadedVersion.isCompatibleTo(getCurrentVersion())) {\n      LOG.info(\"Storing configuration store version info \"\n          + getCurrentVersion());\n      storeVersion();\n    } else {\n      throw new RMStateVersionIncompatibleException(\n          \"Expecting configuration store version \" + getCurrentVersion()\n              + \", but loading version \" + loadedVersion);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/YarnConfigurationStore.java"
    }
  }
}