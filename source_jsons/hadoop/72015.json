{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KerberosAuthenticationHandler.java",
  "functionName": "runWithPrincipal",
  "functionId": "runWithPrincipal___serverPrincipal-String__clientToken-byte[]__base64-Base64__response-HttpServletResponse",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
  "functionStartLine": 358,
  "functionEndLine": 404,
  "numCommitsSeen": 21,
  "timeTaken": 1559,
  "changeHistory": [
    "e806c6e0ce6026d53227b51d58ec6d5458164571",
    "f5e0bd30fde654ed48fe73e5c0523030365385a4",
    "4c38f11cec0664b70e52f9563052dca8fb17c33f"
  ],
  "changeHistoryShort": {
    "e806c6e0ce6026d53227b51d58ec6d5458164571": "Ymultichange(Yexceptionschange,Ybodychange)",
    "f5e0bd30fde654ed48fe73e5c0523030365385a4": "Ybodychange",
    "4c38f11cec0664b70e52f9563052dca8fb17c33f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e806c6e0ce6026d53227b51d58ec6d5458164571": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-14146.  KerberosAuthenticationHandler should authenticate with SPN in AP-REQ.  Contributed by Daryn Sharp\n",
      "commitDate": "21/06/17 9:03 AM",
      "commitName": "e806c6e0ce6026d53227b51d58ec6d5458164571",
      "commitAuthor": "Daryn Sharp",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-14146.  KerberosAuthenticationHandler should authenticate with SPN in AP-REQ.  Contributed by Daryn Sharp\n",
          "commitDate": "21/06/17 9:03 AM",
          "commitName": "e806c6e0ce6026d53227b51d58ec6d5458164571",
          "commitAuthor": "Daryn Sharp",
          "commitDateOld": "14/12/16 1:45 PM",
          "commitNameOld": "f5e0bd30fde654ed48fe73e5c0523030365385a4",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 188.76,
          "commitsBetweenForRepo": 981,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,47 @@\n   private AuthenticationToken runWithPrincipal(String serverPrincipal,\n       byte[] clientToken, Base64 base64, HttpServletResponse response) throws\n-      IOException, AuthenticationException, ClassNotFoundException,\n-      GSSException, IllegalAccessException, NoSuchFieldException {\n+      IOException, GSSException {\n     GSSContext gssContext \u003d null;\n     GSSCredential gssCreds \u003d null;\n     AuthenticationToken token \u003d null;\n     try {\n       LOG.trace(\"SPNEGO initiated with server principal [{}]\", serverPrincipal);\n       gssCreds \u003d this.gssManager.createCredential(\n           this.gssManager.createName(serverPrincipal,\n-              KerberosUtil.getOidInstance(\"NT_GSS_KRB5_PRINCIPAL\")),\n+              KerberosUtil.NT_GSS_KRB5_PRINCIPAL_OID),\n           GSSCredential.INDEFINITE_LIFETIME,\n           new Oid[]{\n-              KerberosUtil.getOidInstance(\"GSS_SPNEGO_MECH_OID\"),\n-              KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\")},\n+              KerberosUtil.GSS_SPNEGO_MECH_OID,\n+              KerberosUtil.GSS_KRB5_MECH_OID },\n           GSSCredential.ACCEPT_ONLY);\n       gssContext \u003d this.gssManager.createContext(gssCreds);\n       byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0,\n           clientToken.length);\n       if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n         String authenticate \u003d base64.encodeToString(serverToken);\n         response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                            KerberosAuthenticator.NEGOTIATE + \" \" +\n                            authenticate);\n       }\n       if (!gssContext.isEstablished()) {\n         response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n         LOG.trace(\"SPNEGO in progress\");\n       } else {\n         String clientPrincipal \u003d gssContext.getSrcName().toString();\n         KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n         String userName \u003d kerberosName.getShortName();\n         token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n         response.setStatus(HttpServletResponse.SC_OK);\n         LOG.trace(\"SPNEGO completed for client principal [{}]\",\n             clientPrincipal);\n       }\n     } finally {\n       if (gssContext !\u003d null) {\n         gssContext.dispose();\n       }\n       if (gssCreds !\u003d null) {\n         gssCreds.dispose();\n       }\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private AuthenticationToken runWithPrincipal(String serverPrincipal,\n      byte[] clientToken, Base64 base64, HttpServletResponse response) throws\n      IOException, GSSException {\n    GSSContext gssContext \u003d null;\n    GSSCredential gssCreds \u003d null;\n    AuthenticationToken token \u003d null;\n    try {\n      LOG.trace(\"SPNEGO initiated with server principal [{}]\", serverPrincipal);\n      gssCreds \u003d this.gssManager.createCredential(\n          this.gssManager.createName(serverPrincipal,\n              KerberosUtil.NT_GSS_KRB5_PRINCIPAL_OID),\n          GSSCredential.INDEFINITE_LIFETIME,\n          new Oid[]{\n              KerberosUtil.GSS_SPNEGO_MECH_OID,\n              KerberosUtil.GSS_KRB5_MECH_OID },\n          GSSCredential.ACCEPT_ONLY);\n      gssContext \u003d this.gssManager.createContext(gssCreds);\n      byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0,\n          clientToken.length);\n      if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n        String authenticate \u003d base64.encodeToString(serverToken);\n        response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                           KerberosAuthenticator.NEGOTIATE + \" \" +\n                           authenticate);\n      }\n      if (!gssContext.isEstablished()) {\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n        LOG.trace(\"SPNEGO in progress\");\n      } else {\n        String clientPrincipal \u003d gssContext.getSrcName().toString();\n        KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n        String userName \u003d kerberosName.getShortName();\n        token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n        response.setStatus(HttpServletResponse.SC_OK);\n        LOG.trace(\"SPNEGO completed for client principal [{}]\",\n            clientPrincipal);\n      }\n    } finally {\n      if (gssContext !\u003d null) {\n        gssContext.dispose();\n      }\n      if (gssCreds !\u003d null) {\n        gssCreds.dispose();\n      }\n    }\n    return token;\n  }",
          "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
          "extendedDetails": {
            "oldValue": "[IOException, AuthenticationException, ClassNotFoundException, GSSException, IllegalAccessException, NoSuchFieldException]",
            "newValue": "[IOException, GSSException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14146.  KerberosAuthenticationHandler should authenticate with SPN in AP-REQ.  Contributed by Daryn Sharp\n",
          "commitDate": "21/06/17 9:03 AM",
          "commitName": "e806c6e0ce6026d53227b51d58ec6d5458164571",
          "commitAuthor": "Daryn Sharp",
          "commitDateOld": "14/12/16 1:45 PM",
          "commitNameOld": "f5e0bd30fde654ed48fe73e5c0523030365385a4",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 188.76,
          "commitsBetweenForRepo": 981,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,47 @@\n   private AuthenticationToken runWithPrincipal(String serverPrincipal,\n       byte[] clientToken, Base64 base64, HttpServletResponse response) throws\n-      IOException, AuthenticationException, ClassNotFoundException,\n-      GSSException, IllegalAccessException, NoSuchFieldException {\n+      IOException, GSSException {\n     GSSContext gssContext \u003d null;\n     GSSCredential gssCreds \u003d null;\n     AuthenticationToken token \u003d null;\n     try {\n       LOG.trace(\"SPNEGO initiated with server principal [{}]\", serverPrincipal);\n       gssCreds \u003d this.gssManager.createCredential(\n           this.gssManager.createName(serverPrincipal,\n-              KerberosUtil.getOidInstance(\"NT_GSS_KRB5_PRINCIPAL\")),\n+              KerberosUtil.NT_GSS_KRB5_PRINCIPAL_OID),\n           GSSCredential.INDEFINITE_LIFETIME,\n           new Oid[]{\n-              KerberosUtil.getOidInstance(\"GSS_SPNEGO_MECH_OID\"),\n-              KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\")},\n+              KerberosUtil.GSS_SPNEGO_MECH_OID,\n+              KerberosUtil.GSS_KRB5_MECH_OID },\n           GSSCredential.ACCEPT_ONLY);\n       gssContext \u003d this.gssManager.createContext(gssCreds);\n       byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0,\n           clientToken.length);\n       if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n         String authenticate \u003d base64.encodeToString(serverToken);\n         response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                            KerberosAuthenticator.NEGOTIATE + \" \" +\n                            authenticate);\n       }\n       if (!gssContext.isEstablished()) {\n         response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n         LOG.trace(\"SPNEGO in progress\");\n       } else {\n         String clientPrincipal \u003d gssContext.getSrcName().toString();\n         KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n         String userName \u003d kerberosName.getShortName();\n         token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n         response.setStatus(HttpServletResponse.SC_OK);\n         LOG.trace(\"SPNEGO completed for client principal [{}]\",\n             clientPrincipal);\n       }\n     } finally {\n       if (gssContext !\u003d null) {\n         gssContext.dispose();\n       }\n       if (gssCreds !\u003d null) {\n         gssCreds.dispose();\n       }\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private AuthenticationToken runWithPrincipal(String serverPrincipal,\n      byte[] clientToken, Base64 base64, HttpServletResponse response) throws\n      IOException, GSSException {\n    GSSContext gssContext \u003d null;\n    GSSCredential gssCreds \u003d null;\n    AuthenticationToken token \u003d null;\n    try {\n      LOG.trace(\"SPNEGO initiated with server principal [{}]\", serverPrincipal);\n      gssCreds \u003d this.gssManager.createCredential(\n          this.gssManager.createName(serverPrincipal,\n              KerberosUtil.NT_GSS_KRB5_PRINCIPAL_OID),\n          GSSCredential.INDEFINITE_LIFETIME,\n          new Oid[]{\n              KerberosUtil.GSS_SPNEGO_MECH_OID,\n              KerberosUtil.GSS_KRB5_MECH_OID },\n          GSSCredential.ACCEPT_ONLY);\n      gssContext \u003d this.gssManager.createContext(gssCreds);\n      byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0,\n          clientToken.length);\n      if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n        String authenticate \u003d base64.encodeToString(serverToken);\n        response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                           KerberosAuthenticator.NEGOTIATE + \" \" +\n                           authenticate);\n      }\n      if (!gssContext.isEstablished()) {\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n        LOG.trace(\"SPNEGO in progress\");\n      } else {\n        String clientPrincipal \u003d gssContext.getSrcName().toString();\n        KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n        String userName \u003d kerberosName.getShortName();\n        token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n        response.setStatus(HttpServletResponse.SC_OK);\n        LOG.trace(\"SPNEGO completed for client principal [{}]\",\n            clientPrincipal);\n      }\n    } finally {\n      if (gssContext !\u003d null) {\n        gssContext.dispose();\n      }\n      if (gssCreds !\u003d null) {\n        gssCreds.dispose();\n      }\n    }\n    return token;\n  }",
          "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "f5e0bd30fde654ed48fe73e5c0523030365385a4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13890. Maintain HTTP/host as SPNEGO SPN support and fix KerberosName parsing. Contributed by Xiaoyu Yao.\n",
      "commitDate": "14/12/16 1:45 PM",
      "commitName": "f5e0bd30fde654ed48fe73e5c0523030365385a4",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "09/12/16 9:27 PM",
      "commitNameOld": "4c38f11cec0664b70e52f9563052dca8fb17c33f",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 4.68,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   private AuthenticationToken runWithPrincipal(String serverPrincipal,\n       byte[] clientToken, Base64 base64, HttpServletResponse response) throws\n       IOException, AuthenticationException, ClassNotFoundException,\n       GSSException, IllegalAccessException, NoSuchFieldException {\n     GSSContext gssContext \u003d null;\n     GSSCredential gssCreds \u003d null;\n     AuthenticationToken token \u003d null;\n     try {\n-      LOG.trace(\"SPNEGO initiated with principal {}\", serverPrincipal);\n+      LOG.trace(\"SPNEGO initiated with server principal [{}]\", serverPrincipal);\n       gssCreds \u003d this.gssManager.createCredential(\n           this.gssManager.createName(serverPrincipal,\n               KerberosUtil.getOidInstance(\"NT_GSS_KRB5_PRINCIPAL\")),\n           GSSCredential.INDEFINITE_LIFETIME,\n           new Oid[]{\n               KerberosUtil.getOidInstance(\"GSS_SPNEGO_MECH_OID\"),\n               KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\")},\n           GSSCredential.ACCEPT_ONLY);\n       gssContext \u003d this.gssManager.createContext(gssCreds);\n       byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0,\n           clientToken.length);\n       if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n         String authenticate \u003d base64.encodeToString(serverToken);\n         response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                            KerberosAuthenticator.NEGOTIATE + \" \" +\n                            authenticate);\n       }\n       if (!gssContext.isEstablished()) {\n         response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n         LOG.trace(\"SPNEGO in progress\");\n       } else {\n         String clientPrincipal \u003d gssContext.getSrcName().toString();\n         KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n         String userName \u003d kerberosName.getShortName();\n         token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n         response.setStatus(HttpServletResponse.SC_OK);\n-        LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n+        LOG.trace(\"SPNEGO completed for client principal [{}]\",\n+            clientPrincipal);\n       }\n     } finally {\n       if (gssContext !\u003d null) {\n         gssContext.dispose();\n       }\n       if (gssCreds !\u003d null) {\n         gssCreds.dispose();\n       }\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private AuthenticationToken runWithPrincipal(String serverPrincipal,\n      byte[] clientToken, Base64 base64, HttpServletResponse response) throws\n      IOException, AuthenticationException, ClassNotFoundException,\n      GSSException, IllegalAccessException, NoSuchFieldException {\n    GSSContext gssContext \u003d null;\n    GSSCredential gssCreds \u003d null;\n    AuthenticationToken token \u003d null;\n    try {\n      LOG.trace(\"SPNEGO initiated with server principal [{}]\", serverPrincipal);\n      gssCreds \u003d this.gssManager.createCredential(\n          this.gssManager.createName(serverPrincipal,\n              KerberosUtil.getOidInstance(\"NT_GSS_KRB5_PRINCIPAL\")),\n          GSSCredential.INDEFINITE_LIFETIME,\n          new Oid[]{\n              KerberosUtil.getOidInstance(\"GSS_SPNEGO_MECH_OID\"),\n              KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\")},\n          GSSCredential.ACCEPT_ONLY);\n      gssContext \u003d this.gssManager.createContext(gssCreds);\n      byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0,\n          clientToken.length);\n      if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n        String authenticate \u003d base64.encodeToString(serverToken);\n        response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                           KerberosAuthenticator.NEGOTIATE + \" \" +\n                           authenticate);\n      }\n      if (!gssContext.isEstablished()) {\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n        LOG.trace(\"SPNEGO in progress\");\n      } else {\n        String clientPrincipal \u003d gssContext.getSrcName().toString();\n        KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n        String userName \u003d kerberosName.getShortName();\n        token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n        response.setStatus(HttpServletResponse.SC_OK);\n        LOG.trace(\"SPNEGO completed for client principal [{}]\",\n            clientPrincipal);\n      }\n    } finally {\n      if (gssContext !\u003d null) {\n        gssContext.dispose();\n      }\n      if (gssCreds !\u003d null) {\n        gssCreds.dispose();\n      }\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "4c38f11cec0664b70e52f9563052dca8fb17c33f": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13565. KerberosAuthenticationHandler#authenticate should not rebuild SPN based on client request. Contributed by Xiaoyu Yao.\n",
      "commitDate": "09/12/16 9:27 PM",
      "commitName": "4c38f11cec0664b70e52f9563052dca8fb17c33f",
      "commitAuthor": "Xiaoyu Yao",
      "diff": "@@ -0,0 +1,47 @@\n+  private AuthenticationToken runWithPrincipal(String serverPrincipal,\n+      byte[] clientToken, Base64 base64, HttpServletResponse response) throws\n+      IOException, AuthenticationException, ClassNotFoundException,\n+      GSSException, IllegalAccessException, NoSuchFieldException {\n+    GSSContext gssContext \u003d null;\n+    GSSCredential gssCreds \u003d null;\n+    AuthenticationToken token \u003d null;\n+    try {\n+      LOG.trace(\"SPNEGO initiated with principal {}\", serverPrincipal);\n+      gssCreds \u003d this.gssManager.createCredential(\n+          this.gssManager.createName(serverPrincipal,\n+              KerberosUtil.getOidInstance(\"NT_GSS_KRB5_PRINCIPAL\")),\n+          GSSCredential.INDEFINITE_LIFETIME,\n+          new Oid[]{\n+              KerberosUtil.getOidInstance(\"GSS_SPNEGO_MECH_OID\"),\n+              KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\")},\n+          GSSCredential.ACCEPT_ONLY);\n+      gssContext \u003d this.gssManager.createContext(gssCreds);\n+      byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0,\n+          clientToken.length);\n+      if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n+        String authenticate \u003d base64.encodeToString(serverToken);\n+        response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n+                           KerberosAuthenticator.NEGOTIATE + \" \" +\n+                           authenticate);\n+      }\n+      if (!gssContext.isEstablished()) {\n+        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n+        LOG.trace(\"SPNEGO in progress\");\n+      } else {\n+        String clientPrincipal \u003d gssContext.getSrcName().toString();\n+        KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n+        String userName \u003d kerberosName.getShortName();\n+        token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n+        response.setStatus(HttpServletResponse.SC_OK);\n+        LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n+      }\n+    } finally {\n+      if (gssContext !\u003d null) {\n+        gssContext.dispose();\n+      }\n+      if (gssCreds !\u003d null) {\n+        gssCreds.dispose();\n+      }\n+    }\n+    return token;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private AuthenticationToken runWithPrincipal(String serverPrincipal,\n      byte[] clientToken, Base64 base64, HttpServletResponse response) throws\n      IOException, AuthenticationException, ClassNotFoundException,\n      GSSException, IllegalAccessException, NoSuchFieldException {\n    GSSContext gssContext \u003d null;\n    GSSCredential gssCreds \u003d null;\n    AuthenticationToken token \u003d null;\n    try {\n      LOG.trace(\"SPNEGO initiated with principal {}\", serverPrincipal);\n      gssCreds \u003d this.gssManager.createCredential(\n          this.gssManager.createName(serverPrincipal,\n              KerberosUtil.getOidInstance(\"NT_GSS_KRB5_PRINCIPAL\")),\n          GSSCredential.INDEFINITE_LIFETIME,\n          new Oid[]{\n              KerberosUtil.getOidInstance(\"GSS_SPNEGO_MECH_OID\"),\n              KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\")},\n          GSSCredential.ACCEPT_ONLY);\n      gssContext \u003d this.gssManager.createContext(gssCreds);\n      byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0,\n          clientToken.length);\n      if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n        String authenticate \u003d base64.encodeToString(serverToken);\n        response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                           KerberosAuthenticator.NEGOTIATE + \" \" +\n                           authenticate);\n      }\n      if (!gssContext.isEstablished()) {\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n        LOG.trace(\"SPNEGO in progress\");\n      } else {\n        String clientPrincipal \u003d gssContext.getSrcName().toString();\n        KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n        String userName \u003d kerberosName.getShortName();\n        token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n        response.setStatus(HttpServletResponse.SC_OK);\n        LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n      }\n    } finally {\n      if (gssContext !\u003d null) {\n        gssContext.dispose();\n      }\n      if (gssCreds !\u003d null) {\n        gssCreds.dispose();\n      }\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java"
    }
  }
}