{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeAzureFileSystem.java",
  "functionName": "mkdirs",
  "functionId": "mkdirs___f-Path__permission-FsPermission__noUmask-boolean",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
  "functionStartLine": 2991,
  "functionEndLine": 3044,
  "numCommitsSeen": 71,
  "timeTaken": 5861,
  "changeHistory": [
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1",
    "792eff9ea70da2c6e0ff5a1b177a51e7b2fb96eb",
    "b415c6fe743242acf1d1d3eb7ea7091d90d2c0d4",
    "2ba9903932e3c99afb0e6abb7cd3c5d29a554bd9",
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5",
    "686823529be09bea2a6cecb3503ef722017475bc",
    "52d7d5aa1a303cf70519a61487641211f4267c6f",
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
    "3369a4f6916f12e9d6b97072badd1b176be443bd",
    "5f6edb30c2bb648d5564c951edc25645e17e6636",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
    "0d91576ec31f63402f2db6107a04155368e2632d",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1": "Ybodychange",
    "792eff9ea70da2c6e0ff5a1b177a51e7b2fb96eb": "Ybodychange",
    "b415c6fe743242acf1d1d3eb7ea7091d90d2c0d4": "Ybodychange",
    "2ba9903932e3c99afb0e6abb7cd3c5d29a554bd9": "Ybodychange",
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5": "Ybodychange",
    "686823529be09bea2a6cecb3503ef722017475bc": "Ybodychange",
    "52d7d5aa1a303cf70519a61487641211f4267c6f": "Ybodychange",
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f": "Ybodychange",
    "3369a4f6916f12e9d6b97072badd1b176be443bd": "Ybodychange",
    "5f6edb30c2bb648d5564c951edc25645e17e6636": "Ybodychange",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Ymultichange(Yparameterchange,Ybodychange)",
    "0d91576ec31f63402f2db6107a04155368e2632d": "Ybodychange",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15547/ WASB: improve listStatus performance.\nContributed by Thomas Marquardt.\n\n(cherry picked from commit 749fff577ed9afb4ef8a54b8948f74be083cc620)\n",
      "commitDate": "19/07/18 12:31 PM",
      "commitName": "45d9568aaaf532a6da11bd7c1844ff81bf66bab1",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/06/18 10:37 PM",
      "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 21.58,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n \n     LOG.debug(\"Creating directory: {}\", f.toString());\n \n     if (containsColon(f)) {\n       throw new IOException(\"Cannot create directory \" + f\n           + \" through WASB that has colons in the name\");\n     }\n \n     Path absolutePath \u003d makeAbsolute(f);\n     Path ancestor \u003d getAncestor(absolutePath);\n \n     if (absolutePath.equals(ancestor)) {\n       return true;\n     }\n \n     performAuthCheck(ancestor, WasbAuthorizationOperations.WRITE, \"mkdirs\", absolutePath);\n \n     PermissionStatus permissionStatus \u003d null;\n     if(noUmask) {\n       // ensure owner still has wx permissions at the minimum\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n               UMaskApplyMode.NewDirectoryNoUmask));\n     } else {\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(permission, UMaskApplyMode.NewDirectory));\n     }\n \n \n     ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n     // Check that there is no file in the parent chain of the given path.\n     for (Path current \u003d absolutePath, parent \u003d current.getParent();\n         parent !\u003d null; // Stop when you get to the root\n         current \u003d parent, parent \u003d current.getParent()) {\n       String currentKey \u003d pathToKey(current);\n       FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n-      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n+      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDirectory()) {\n         throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n             + current + \" is an existing file.\");\n       } else if (currentMetadata \u003d\u003d null) {\n         keysToCreateAsFolder.add(currentKey);\n       }\n     }\n \n     for (String currentKey : keysToCreateAsFolder) {\n       store.storeEmptyFolder(currentKey, permissionStatus);\n     }\n \n     instrumentation.directoryCreated();\n \n     // otherwise throws exception\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n\n    LOG.debug(\"Creating directory: {}\", f.toString());\n\n    if (containsColon(f)) {\n      throw new IOException(\"Cannot create directory \" + f\n          + \" through WASB that has colons in the name\");\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n    Path ancestor \u003d getAncestor(absolutePath);\n\n    if (absolutePath.equals(ancestor)) {\n      return true;\n    }\n\n    performAuthCheck(ancestor, WasbAuthorizationOperations.WRITE, \"mkdirs\", absolutePath);\n\n    PermissionStatus permissionStatus \u003d null;\n    if(noUmask) {\n      // ensure owner still has wx permissions at the minimum\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n              UMaskApplyMode.NewDirectoryNoUmask));\n    } else {\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(permission, UMaskApplyMode.NewDirectory));\n    }\n\n\n    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n    // Check that there is no file in the parent chain of the given path.\n    for (Path current \u003d absolutePath, parent \u003d current.getParent();\n        parent !\u003d null; // Stop when you get to the root\n        current \u003d parent, parent \u003d current.getParent()) {\n      String currentKey \u003d pathToKey(current);\n      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDirectory()) {\n        throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n            + current + \" is an existing file.\");\n      } else if (currentMetadata \u003d\u003d null) {\n        keysToCreateAsFolder.add(currentKey);\n      }\n    }\n\n    for (String currentKey : keysToCreateAsFolder) {\n      store.storeEmptyFolder(currentKey, permissionStatus);\n    }\n\n    instrumentation.directoryCreated();\n\n    // otherwise throws exception\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "792eff9ea70da2c6e0ff5a1b177a51e7b2fb96eb": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14820 Wasb mkdirs security checks inconsistent with HDFS.\nContributed by Sivaguru Sankaridurg\n",
      "commitDate": "05/09/17 6:16 AM",
      "commitName": "792eff9ea70da2c6e0ff5a1b177a51e7b2fb96eb",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/08/17 6:13 AM",
      "commitNameOld": "c6b4e656b76b68cc1d0dbcc15a5aa5ea23335b7b",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 18.0,
      "commitsBetweenForRepo": 154,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,54 @@\n   public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n \n-\n     LOG.debug(\"Creating directory: {}\", f.toString());\n \n     if (containsColon(f)) {\n       throw new IOException(\"Cannot create directory \" + f\n           + \" through WASB that has colons in the name\");\n     }\n \n     Path absolutePath \u003d makeAbsolute(f);\n     Path ancestor \u003d getAncestor(absolutePath);\n \n+    if (absolutePath.equals(ancestor)) {\n+      return true;\n+    }\n+\n     performAuthCheck(ancestor, WasbAuthorizationOperations.WRITE, \"mkdirs\", absolutePath);\n \n     PermissionStatus permissionStatus \u003d null;\n     if(noUmask) {\n       // ensure owner still has wx permissions at the minimum\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n               UMaskApplyMode.NewDirectoryNoUmask));\n     } else {\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(permission, UMaskApplyMode.NewDirectory));\n     }\n \n \n     ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n     // Check that there is no file in the parent chain of the given path.\n     for (Path current \u003d absolutePath, parent \u003d current.getParent();\n         parent !\u003d null; // Stop when you get to the root\n         current \u003d parent, parent \u003d current.getParent()) {\n       String currentKey \u003d pathToKey(current);\n       FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n       if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n         throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n             + current + \" is an existing file.\");\n       } else if (currentMetadata \u003d\u003d null) {\n         keysToCreateAsFolder.add(currentKey);\n       }\n     }\n \n     for (String currentKey : keysToCreateAsFolder) {\n       store.storeEmptyFolder(currentKey, permissionStatus);\n     }\n \n     instrumentation.directoryCreated();\n \n     // otherwise throws exception\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n\n    LOG.debug(\"Creating directory: {}\", f.toString());\n\n    if (containsColon(f)) {\n      throw new IOException(\"Cannot create directory \" + f\n          + \" through WASB that has colons in the name\");\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n    Path ancestor \u003d getAncestor(absolutePath);\n\n    if (absolutePath.equals(ancestor)) {\n      return true;\n    }\n\n    performAuthCheck(ancestor, WasbAuthorizationOperations.WRITE, \"mkdirs\", absolutePath);\n\n    PermissionStatus permissionStatus \u003d null;\n    if(noUmask) {\n      // ensure owner still has wx permissions at the minimum\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n              UMaskApplyMode.NewDirectoryNoUmask));\n    } else {\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(permission, UMaskApplyMode.NewDirectory));\n    }\n\n\n    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n    // Check that there is no file in the parent chain of the given path.\n    for (Path current \u003d absolutePath, parent \u003d current.getParent();\n        parent !\u003d null; // Stop when you get to the root\n        current \u003d parent, parent \u003d current.getParent()) {\n      String currentKey \u003d pathToKey(current);\n      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n        throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n            + current + \" is an existing file.\");\n      } else if (currentMetadata \u003d\u003d null) {\n        keysToCreateAsFolder.add(currentKey);\n      }\n    }\n\n    for (String currentKey : keysToCreateAsFolder) {\n      store.storeEmptyFolder(currentKey, permissionStatus);\n    }\n\n    instrumentation.directoryCreated();\n\n    // otherwise throws exception\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "b415c6fe743242acf1d1d3eb7ea7091d90d2c0d4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14416. Path starting with \u0027wasb:///\u0027 not resolved correctly while authorizing with WASB-Ranger. Contributed by Sivaguru Sankaridurg\n",
      "commitDate": "16/05/17 11:22 AM",
      "commitName": "b415c6fe743242acf1d1d3eb7ea7091d90d2c0d4",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "10/05/17 3:05 PM",
      "commitNameOld": "eed731496f63537350206274af09d2118b116a17",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 5.85,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n \n \n     LOG.debug(\"Creating directory: {}\", f.toString());\n \n     if (containsColon(f)) {\n       throw new IOException(\"Cannot create directory \" + f\n           + \" through WASB that has colons in the name\");\n     }\n \n     Path absolutePath \u003d makeAbsolute(f);\n     Path ancestor \u003d getAncestor(absolutePath);\n \n-    performAuthCheck(ancestor.toString(), WasbAuthorizationOperations.WRITE, \"mkdirs\", absolutePath.toString());\n+    performAuthCheck(ancestor, WasbAuthorizationOperations.WRITE, \"mkdirs\", absolutePath);\n \n     PermissionStatus permissionStatus \u003d null;\n     if(noUmask) {\n       // ensure owner still has wx permissions at the minimum\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n               UMaskApplyMode.NewDirectoryNoUmask));\n     } else {\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(permission, UMaskApplyMode.NewDirectory));\n     }\n \n \n     ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n     // Check that there is no file in the parent chain of the given path.\n     for (Path current \u003d absolutePath, parent \u003d current.getParent();\n         parent !\u003d null; // Stop when you get to the root\n         current \u003d parent, parent \u003d current.getParent()) {\n       String currentKey \u003d pathToKey(current);\n       FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n       if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n         throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n             + current + \" is an existing file.\");\n       } else if (currentMetadata \u003d\u003d null) {\n         keysToCreateAsFolder.add(currentKey);\n       }\n     }\n \n     for (String currentKey : keysToCreateAsFolder) {\n       store.storeEmptyFolder(currentKey, permissionStatus);\n     }\n \n     instrumentation.directoryCreated();\n \n     // otherwise throws exception\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n\n\n    LOG.debug(\"Creating directory: {}\", f.toString());\n\n    if (containsColon(f)) {\n      throw new IOException(\"Cannot create directory \" + f\n          + \" through WASB that has colons in the name\");\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n    Path ancestor \u003d getAncestor(absolutePath);\n\n    performAuthCheck(ancestor, WasbAuthorizationOperations.WRITE, \"mkdirs\", absolutePath);\n\n    PermissionStatus permissionStatus \u003d null;\n    if(noUmask) {\n      // ensure owner still has wx permissions at the minimum\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n              UMaskApplyMode.NewDirectoryNoUmask));\n    } else {\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(permission, UMaskApplyMode.NewDirectory));\n    }\n\n\n    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n    // Check that there is no file in the parent chain of the given path.\n    for (Path current \u003d absolutePath, parent \u003d current.getParent();\n        parent !\u003d null; // Stop when you get to the root\n        current \u003d parent, parent \u003d current.getParent()) {\n      String currentKey \u003d pathToKey(current);\n      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n        throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n            + current + \" is an existing file.\");\n      } else if (currentMetadata \u003d\u003d null) {\n        keysToCreateAsFolder.add(currentKey);\n      }\n    }\n\n    for (String currentKey : keysToCreateAsFolder) {\n      store.storeEmptyFolder(currentKey, permissionStatus);\n    }\n\n    instrumentation.directoryCreated();\n\n    // otherwise throws exception\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "2ba9903932e3c99afb0e6abb7cd3c5d29a554bd9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14400. Fix warnings from spotbugs in hadoop-tools. Contributed by Weiwei Yang.\n",
      "commitDate": "10/05/17 3:57 AM",
      "commitName": "2ba9903932e3c99afb0e6abb7cd3c5d29a554bd9",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "26/04/17 1:47 PM",
      "commitNameOld": "8b5f2c372e70999f3ee0a0bd685a494e06bc3652",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 13.59,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,51 @@\n   public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n \n \n     LOG.debug(\"Creating directory: {}\", f.toString());\n \n     if (containsColon(f)) {\n       throw new IOException(\"Cannot create directory \" + f\n           + \" through WASB that has colons in the name\");\n     }\n \n     Path absolutePath \u003d makeAbsolute(f);\n     Path ancestor \u003d getAncestor(absolutePath);\n \n     performAuthCheck(ancestor.toString(), WasbAuthorizationOperations.WRITE, \"mkdirs\", absolutePath.toString());\n \n     PermissionStatus permissionStatus \u003d null;\n     if(noUmask) {\n       // ensure owner still has wx permissions at the minimum\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n               UMaskApplyMode.NewDirectoryNoUmask));\n     } else {\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(permission, UMaskApplyMode.NewDirectory));\n     }\n \n \n     ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n-    ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n-    boolean childCreated \u003d false;\n     // Check that there is no file in the parent chain of the given path.\n     for (Path current \u003d absolutePath, parent \u003d current.getParent();\n         parent !\u003d null; // Stop when you get to the root\n         current \u003d parent, parent \u003d current.getParent()) {\n       String currentKey \u003d pathToKey(current);\n       FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n       if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n         throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n             + current + \" is an existing file.\");\n       } else if (currentMetadata \u003d\u003d null) {\n         keysToCreateAsFolder.add(currentKey);\n-        childCreated \u003d true;\n-      } else {\n-        // The directory already exists. Its last modified time need to be\n-        // updated if there is a child directory created under it.\n-        if (childCreated) {\n-          keysToUpdateAsFolder.add(currentKey);\n-        }\n-        childCreated \u003d false;\n       }\n     }\n \n     for (String currentKey : keysToCreateAsFolder) {\n       store.storeEmptyFolder(currentKey, permissionStatus);\n     }\n \n     instrumentation.directoryCreated();\n \n     // otherwise throws exception\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n\n\n    LOG.debug(\"Creating directory: {}\", f.toString());\n\n    if (containsColon(f)) {\n      throw new IOException(\"Cannot create directory \" + f\n          + \" through WASB that has colons in the name\");\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n    Path ancestor \u003d getAncestor(absolutePath);\n\n    performAuthCheck(ancestor.toString(), WasbAuthorizationOperations.WRITE, \"mkdirs\", absolutePath.toString());\n\n    PermissionStatus permissionStatus \u003d null;\n    if(noUmask) {\n      // ensure owner still has wx permissions at the minimum\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n              UMaskApplyMode.NewDirectoryNoUmask));\n    } else {\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(permission, UMaskApplyMode.NewDirectory));\n    }\n\n\n    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n    // Check that there is no file in the parent chain of the given path.\n    for (Path current \u003d absolutePath, parent \u003d current.getParent();\n        parent !\u003d null; // Stop when you get to the root\n        current \u003d parent, parent \u003d current.getParent()) {\n      String currentKey \u003d pathToKey(current);\n      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n        throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n            + current + \" is an existing file.\");\n      } else if (currentMetadata \u003d\u003d null) {\n        keysToCreateAsFolder.add(currentKey);\n      }\n    }\n\n    for (String currentKey : keysToCreateAsFolder) {\n      store.storeEmptyFolder(currentKey, permissionStatus);\n    }\n\n    instrumentation.directoryCreated();\n\n    // otherwise throws exception\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14274. Azure: Simplify Ranger-WASB policy model. Contributed by Sivaguru Sankaridurg\n",
      "commitDate": "12/04/17 4:07 PM",
      "commitName": "0cab57223e3f54be17a5f27cefdb6d1da1b073e5",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "04/04/17 11:10 AM",
      "commitNameOld": "56ab02eed9b61e1c80605104dfc4c87fc6abac96",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 8.21,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n   public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n \n \n     LOG.debug(\"Creating directory: {}\", f.toString());\n \n     if (containsColon(f)) {\n       throw new IOException(\"Cannot create directory \" + f\n           + \" through WASB that has colons in the name\");\n     }\n \n     Path absolutePath \u003d makeAbsolute(f);\n+    Path ancestor \u003d getAncestor(absolutePath);\n \n-    performAuthCheck(absolutePath.toString(),\n-        WasbAuthorizationOperations.EXECUTE.toString(), \"mkdirs\");\n+    performAuthCheck(ancestor.toString(), WasbAuthorizationOperations.WRITE, \"mkdirs\", absolutePath.toString());\n \n     PermissionStatus permissionStatus \u003d null;\n     if(noUmask) {\n       // ensure owner still has wx permissions at the minimum\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n               UMaskApplyMode.NewDirectoryNoUmask));\n     } else {\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(permission, UMaskApplyMode.NewDirectory));\n     }\n \n \n     ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n     ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n     boolean childCreated \u003d false;\n     // Check that there is no file in the parent chain of the given path.\n     for (Path current \u003d absolutePath, parent \u003d current.getParent();\n         parent !\u003d null; // Stop when you get to the root\n         current \u003d parent, parent \u003d current.getParent()) {\n       String currentKey \u003d pathToKey(current);\n       FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n       if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n         throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n             + current + \" is an existing file.\");\n       } else if (currentMetadata \u003d\u003d null) {\n         keysToCreateAsFolder.add(currentKey);\n         childCreated \u003d true;\n       } else {\n         // The directory already exists. Its last modified time need to be\n         // updated if there is a child directory created under it.\n         if (childCreated) {\n           keysToUpdateAsFolder.add(currentKey);\n         }\n         childCreated \u003d false;\n       }\n     }\n \n     for (String currentKey : keysToCreateAsFolder) {\n       store.storeEmptyFolder(currentKey, permissionStatus);\n     }\n \n     instrumentation.directoryCreated();\n \n     // otherwise throws exception\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n\n\n    LOG.debug(\"Creating directory: {}\", f.toString());\n\n    if (containsColon(f)) {\n      throw new IOException(\"Cannot create directory \" + f\n          + \" through WASB that has colons in the name\");\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n    Path ancestor \u003d getAncestor(absolutePath);\n\n    performAuthCheck(ancestor.toString(), WasbAuthorizationOperations.WRITE, \"mkdirs\", absolutePath.toString());\n\n    PermissionStatus permissionStatus \u003d null;\n    if(noUmask) {\n      // ensure owner still has wx permissions at the minimum\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n              UMaskApplyMode.NewDirectoryNoUmask));\n    } else {\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(permission, UMaskApplyMode.NewDirectory));\n    }\n\n\n    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n    ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n    boolean childCreated \u003d false;\n    // Check that there is no file in the parent chain of the given path.\n    for (Path current \u003d absolutePath, parent \u003d current.getParent();\n        parent !\u003d null; // Stop when you get to the root\n        current \u003d parent, parent \u003d current.getParent()) {\n      String currentKey \u003d pathToKey(current);\n      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n        throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n            + current + \" is an existing file.\");\n      } else if (currentMetadata \u003d\u003d null) {\n        keysToCreateAsFolder.add(currentKey);\n        childCreated \u003d true;\n      } else {\n        // The directory already exists. Its last modified time need to be\n        // updated if there is a child directory created under it.\n        if (childCreated) {\n          keysToUpdateAsFolder.add(currentKey);\n        }\n        childCreated \u003d false;\n      }\n    }\n\n    for (String currentKey : keysToCreateAsFolder) {\n      store.storeEmptyFolder(currentKey, permissionStatus);\n    }\n\n    instrumentation.directoryCreated();\n\n    // otherwise throws exception\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "686823529be09bea2a6cecb3503ef722017475bc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\n",
      "commitDate": "06/03/17 5:16 PM",
      "commitName": "686823529be09bea2a6cecb3503ef722017475bc",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "06/03/17 5:10 PM",
      "commitNameOld": "52d7d5aa1a303cf70519a61487641211f4267c6f",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,61 @@\n   public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n \n \n     LOG.debug(\"Creating directory: {}\", f.toString());\n \n     if (containsColon(f)) {\n       throw new IOException(\"Cannot create directory \" + f\n           + \" through WASB that has colons in the name\");\n     }\n \n     Path absolutePath \u003d makeAbsolute(f);\n+\n+    performAuthCheck(absolutePath.toString(),\n+        WasbAuthorizationOperations.EXECUTE.toString(), \"mkdirs\");\n+\n     PermissionStatus permissionStatus \u003d null;\n     if(noUmask) {\n       // ensure owner still has wx permissions at the minimum\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n               UMaskApplyMode.NewDirectoryNoUmask));\n     } else {\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(permission, UMaskApplyMode.NewDirectory));\n     }\n \n \n     ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n     ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n     boolean childCreated \u003d false;\n     // Check that there is no file in the parent chain of the given path.\n     for (Path current \u003d absolutePath, parent \u003d current.getParent();\n         parent !\u003d null; // Stop when you get to the root\n         current \u003d parent, parent \u003d current.getParent()) {\n       String currentKey \u003d pathToKey(current);\n       FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n       if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n         throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n             + current + \" is an existing file.\");\n       } else if (currentMetadata \u003d\u003d null) {\n         keysToCreateAsFolder.add(currentKey);\n         childCreated \u003d true;\n       } else {\n         // The directory already exists. Its last modified time need to be\n         // updated if there is a child directory created under it.\n         if (childCreated) {\n           keysToUpdateAsFolder.add(currentKey);\n         }\n         childCreated \u003d false;\n       }\n     }\n \n     for (String currentKey : keysToCreateAsFolder) {\n       store.storeEmptyFolder(currentKey, permissionStatus);\n     }\n \n     instrumentation.directoryCreated();\n \n     // otherwise throws exception\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n\n\n    LOG.debug(\"Creating directory: {}\", f.toString());\n\n    if (containsColon(f)) {\n      throw new IOException(\"Cannot create directory \" + f\n          + \" through WASB that has colons in the name\");\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath.toString(),\n        WasbAuthorizationOperations.EXECUTE.toString(), \"mkdirs\");\n\n    PermissionStatus permissionStatus \u003d null;\n    if(noUmask) {\n      // ensure owner still has wx permissions at the minimum\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n              UMaskApplyMode.NewDirectoryNoUmask));\n    } else {\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(permission, UMaskApplyMode.NewDirectory));\n    }\n\n\n    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n    ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n    boolean childCreated \u003d false;\n    // Check that there is no file in the parent chain of the given path.\n    for (Path current \u003d absolutePath, parent \u003d current.getParent();\n        parent !\u003d null; // Stop when you get to the root\n        current \u003d parent, parent \u003d current.getParent()) {\n      String currentKey \u003d pathToKey(current);\n      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n        throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n            + current + \" is an existing file.\");\n      } else if (currentMetadata \u003d\u003d null) {\n        keysToCreateAsFolder.add(currentKey);\n        childCreated \u003d true;\n      } else {\n        // The directory already exists. Its last modified time need to be\n        // updated if there is a child directory created under it.\n        if (childCreated) {\n          keysToUpdateAsFolder.add(currentKey);\n        }\n        childCreated \u003d false;\n      }\n    }\n\n    for (String currentKey : keysToCreateAsFolder) {\n      store.storeEmptyFolder(currentKey, permissionStatus);\n    }\n\n    instrumentation.directoryCreated();\n\n    // otherwise throws exception\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "52d7d5aa1a303cf70519a61487641211f4267c6f": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\"\n\nThis reverts commit 6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f.\n",
      "commitDate": "06/03/17 5:10 PM",
      "commitName": "52d7d5aa1a303cf70519a61487641211f4267c6f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "06/03/17 5:00 PM",
      "commitNameOld": "c571cda5c7d929477961dfff4176d7de4944d874",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,57 @@\n   public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n \n \n     LOG.debug(\"Creating directory: {}\", f.toString());\n \n     if (containsColon(f)) {\n       throw new IOException(\"Cannot create directory \" + f\n           + \" through WASB that has colons in the name\");\n     }\n \n     Path absolutePath \u003d makeAbsolute(f);\n-\n-    performAuthCheck(absolutePath.toString(),\n-        WasbAuthorizationOperations.EXECUTE.toString(), \"mkdirs\");\n-\n     PermissionStatus permissionStatus \u003d null;\n     if(noUmask) {\n       // ensure owner still has wx permissions at the minimum\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n               UMaskApplyMode.NewDirectoryNoUmask));\n     } else {\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(permission, UMaskApplyMode.NewDirectory));\n     }\n \n \n     ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n     ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n     boolean childCreated \u003d false;\n     // Check that there is no file in the parent chain of the given path.\n     for (Path current \u003d absolutePath, parent \u003d current.getParent();\n         parent !\u003d null; // Stop when you get to the root\n         current \u003d parent, parent \u003d current.getParent()) {\n       String currentKey \u003d pathToKey(current);\n       FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n       if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n         throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n             + current + \" is an existing file.\");\n       } else if (currentMetadata \u003d\u003d null) {\n         keysToCreateAsFolder.add(currentKey);\n         childCreated \u003d true;\n       } else {\n         // The directory already exists. Its last modified time need to be\n         // updated if there is a child directory created under it.\n         if (childCreated) {\n           keysToUpdateAsFolder.add(currentKey);\n         }\n         childCreated \u003d false;\n       }\n     }\n \n     for (String currentKey : keysToCreateAsFolder) {\n       store.storeEmptyFolder(currentKey, permissionStatus);\n     }\n \n     instrumentation.directoryCreated();\n \n     // otherwise throws exception\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n\n\n    LOG.debug(\"Creating directory: {}\", f.toString());\n\n    if (containsColon(f)) {\n      throw new IOException(\"Cannot create directory \" + f\n          + \" through WASB that has colons in the name\");\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n    PermissionStatus permissionStatus \u003d null;\n    if(noUmask) {\n      // ensure owner still has wx permissions at the minimum\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n              UMaskApplyMode.NewDirectoryNoUmask));\n    } else {\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(permission, UMaskApplyMode.NewDirectory));\n    }\n\n\n    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n    ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n    boolean childCreated \u003d false;\n    // Check that there is no file in the parent chain of the given path.\n    for (Path current \u003d absolutePath, parent \u003d current.getParent();\n        parent !\u003d null; // Stop when you get to the root\n        current \u003d parent, parent \u003d current.getParent()) {\n      String currentKey \u003d pathToKey(current);\n      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n        throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n            + current + \" is an existing file.\");\n      } else if (currentMetadata \u003d\u003d null) {\n        keysToCreateAsFolder.add(currentKey);\n        childCreated \u003d true;\n      } else {\n        // The directory already exists. Its last modified time need to be\n        // updated if there is a child directory created under it.\n        if (childCreated) {\n          keysToUpdateAsFolder.add(currentKey);\n        }\n        childCreated \u003d false;\n      }\n    }\n\n    for (String currentKey : keysToCreateAsFolder) {\n      store.storeEmptyFolder(currentKey, permissionStatus);\n    }\n\n    instrumentation.directoryCreated();\n\n    // otherwise throws exception\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\n",
      "commitDate": "03/03/17 5:09 PM",
      "commitName": "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "29/12/16 4:24 PM",
      "commitNameOld": "c6a5b689db573046819f0e9193cb042e6c7298f4",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 64.03,
      "commitsBetweenForRepo": 324,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,61 @@\n   public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n \n \n     LOG.debug(\"Creating directory: {}\", f.toString());\n \n     if (containsColon(f)) {\n       throw new IOException(\"Cannot create directory \" + f\n           + \" through WASB that has colons in the name\");\n     }\n \n     Path absolutePath \u003d makeAbsolute(f);\n+\n+    performAuthCheck(absolutePath.toString(),\n+        WasbAuthorizationOperations.EXECUTE.toString(), \"mkdirs\");\n+\n     PermissionStatus permissionStatus \u003d null;\n     if(noUmask) {\n       // ensure owner still has wx permissions at the minimum\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n               UMaskApplyMode.NewDirectoryNoUmask));\n     } else {\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(permission, UMaskApplyMode.NewDirectory));\n     }\n \n \n     ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n     ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n     boolean childCreated \u003d false;\n     // Check that there is no file in the parent chain of the given path.\n     for (Path current \u003d absolutePath, parent \u003d current.getParent();\n         parent !\u003d null; // Stop when you get to the root\n         current \u003d parent, parent \u003d current.getParent()) {\n       String currentKey \u003d pathToKey(current);\n       FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n       if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n         throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n             + current + \" is an existing file.\");\n       } else if (currentMetadata \u003d\u003d null) {\n         keysToCreateAsFolder.add(currentKey);\n         childCreated \u003d true;\n       } else {\n         // The directory already exists. Its last modified time need to be\n         // updated if there is a child directory created under it.\n         if (childCreated) {\n           keysToUpdateAsFolder.add(currentKey);\n         }\n         childCreated \u003d false;\n       }\n     }\n \n     for (String currentKey : keysToCreateAsFolder) {\n       store.storeEmptyFolder(currentKey, permissionStatus);\n     }\n \n     instrumentation.directoryCreated();\n \n     // otherwise throws exception\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n\n\n    LOG.debug(\"Creating directory: {}\", f.toString());\n\n    if (containsColon(f)) {\n      throw new IOException(\"Cannot create directory \" + f\n          + \" through WASB that has colons in the name\");\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath.toString(),\n        WasbAuthorizationOperations.EXECUTE.toString(), \"mkdirs\");\n\n    PermissionStatus permissionStatus \u003d null;\n    if(noUmask) {\n      // ensure owner still has wx permissions at the minimum\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n              UMaskApplyMode.NewDirectoryNoUmask));\n    } else {\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(permission, UMaskApplyMode.NewDirectory));\n    }\n\n\n    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n    ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n    boolean childCreated \u003d false;\n    // Check that there is no file in the parent chain of the given path.\n    for (Path current \u003d absolutePath, parent \u003d current.getParent();\n        parent !\u003d null; // Stop when you get to the root\n        current \u003d parent, parent \u003d current.getParent()) {\n      String currentKey \u003d pathToKey(current);\n      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n        throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n            + current + \" is an existing file.\");\n      } else if (currentMetadata \u003d\u003d null) {\n        keysToCreateAsFolder.add(currentKey);\n        childCreated \u003d true;\n      } else {\n        // The directory already exists. Its last modified time need to be\n        // updated if there is a child directory created under it.\n        if (childCreated) {\n          keysToUpdateAsFolder.add(currentKey);\n        }\n        childCreated \u003d false;\n      }\n    }\n\n    for (String currentKey : keysToCreateAsFolder) {\n      store.storeEmptyFolder(currentKey, permissionStatus);\n    }\n\n    instrumentation.directoryCreated();\n\n    // otherwise throws exception\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "3369a4f6916f12e9d6b97072badd1b176be443bd": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12535. Run FileSystem contract tests with hadoop-azure. Contributed by Madhumita Chakraborty.\n",
      "commitDate": "23/02/16 9:37 PM",
      "commitName": "3369a4f6916f12e9d6b97072badd1b176be443bd",
      "commitAuthor": "cnauroth",
      "commitDateOld": "12/02/16 3:50 PM",
      "commitNameOld": "91a96eaa534dbb27e81b6c24bbb8138200a80a83",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 11.24,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n \n \n     LOG.debug(\"Creating directory: {}\", f.toString());\n \n     if (containsColon(f)) {\n       throw new IOException(\"Cannot create directory \" + f\n           + \" through WASB that has colons in the name\");\n     }\n \n     Path absolutePath \u003d makeAbsolute(f);\n     PermissionStatus permissionStatus \u003d null;\n     if(noUmask) {\n       // ensure owner still has wx permissions at the minimum\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n               UMaskApplyMode.NewDirectoryNoUmask));\n     } else {\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(permission, UMaskApplyMode.NewDirectory));\n     }\n \n \n     ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n     ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n     boolean childCreated \u003d false;\n     // Check that there is no file in the parent chain of the given path.\n     for (Path current \u003d absolutePath, parent \u003d current.getParent();\n         parent !\u003d null; // Stop when you get to the root\n         current \u003d parent, parent \u003d current.getParent()) {\n       String currentKey \u003d pathToKey(current);\n       FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n       if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n-        throw new IOException(\"Cannot create directory \" + f + \" because \" +\n-            current + \" is an existing file.\");\n+        throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n+            + current + \" is an existing file.\");\n       } else if (currentMetadata \u003d\u003d null) {\n         keysToCreateAsFolder.add(currentKey);\n         childCreated \u003d true;\n       } else {\n         // The directory already exists. Its last modified time need to be\n         // updated if there is a child directory created under it.\n         if (childCreated) {\n           keysToUpdateAsFolder.add(currentKey);\n         }\n         childCreated \u003d false;\n       }\n     }\n \n     for (String currentKey : keysToCreateAsFolder) {\n       store.storeEmptyFolder(currentKey, permissionStatus);\n     }\n \n     instrumentation.directoryCreated();\n \n     // otherwise throws exception\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n\n\n    LOG.debug(\"Creating directory: {}\", f.toString());\n\n    if (containsColon(f)) {\n      throw new IOException(\"Cannot create directory \" + f\n          + \" through WASB that has colons in the name\");\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n    PermissionStatus permissionStatus \u003d null;\n    if(noUmask) {\n      // ensure owner still has wx permissions at the minimum\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n              UMaskApplyMode.NewDirectoryNoUmask));\n    } else {\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(permission, UMaskApplyMode.NewDirectory));\n    }\n\n\n    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n    ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n    boolean childCreated \u003d false;\n    // Check that there is no file in the parent chain of the given path.\n    for (Path current \u003d absolutePath, parent \u003d current.getParent();\n        parent !\u003d null; // Stop when you get to the root\n        current \u003d parent, parent \u003d current.getParent()) {\n      String currentKey \u003d pathToKey(current);\n      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n        throw new FileAlreadyExistsException(\"Cannot create directory \" + f + \" because \"\n            + current + \" is an existing file.\");\n      } else if (currentMetadata \u003d\u003d null) {\n        keysToCreateAsFolder.add(currentKey);\n        childCreated \u003d true;\n      } else {\n        // The directory already exists. Its last modified time need to be\n        // updated if there is a child directory created under it.\n        if (childCreated) {\n          keysToUpdateAsFolder.add(currentKey);\n        }\n        childCreated \u003d false;\n      }\n    }\n\n    for (String currentKey : keysToCreateAsFolder) {\n      store.storeEmptyFolder(currentKey, permissionStatus);\n    }\n\n    instrumentation.directoryCreated();\n\n    // otherwise throws exception\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "5f6edb30c2bb648d5564c951edc25645e17e6636": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12350. WASB Logging: Improve WASB Logging around deletes, reads and writes. Contributed by Dushyanth.\n",
      "commitDate": "05/10/15 8:11 PM",
      "commitName": "5f6edb30c2bb648d5564c951edc25645e17e6636",
      "commitAuthor": "cnauroth",
      "commitDateOld": "28/09/15 3:31 PM",
      "commitNameOld": "3abbdc929bde05f8819f5410cef1eaeb8940203f",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 7.19,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Creating directory: \" + f.toString());\n-    }\n+\n+\n+    LOG.debug(\"Creating directory: {}\", f.toString());\n \n     if (containsColon(f)) {\n       throw new IOException(\"Cannot create directory \" + f\n           + \" through WASB that has colons in the name\");\n     }\n \n     Path absolutePath \u003d makeAbsolute(f);\n     PermissionStatus permissionStatus \u003d null;\n     if(noUmask) {\n       // ensure owner still has wx permissions at the minimum\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n               UMaskApplyMode.NewDirectoryNoUmask));\n     } else {\n       permissionStatus \u003d createPermissionStatus(\n           applyUMask(permission, UMaskApplyMode.NewDirectory));\n     }\n \n \n     ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n     ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n     boolean childCreated \u003d false;\n     // Check that there is no file in the parent chain of the given path.\n     for (Path current \u003d absolutePath, parent \u003d current.getParent();\n         parent !\u003d null; // Stop when you get to the root\n         current \u003d parent, parent \u003d current.getParent()) {\n       String currentKey \u003d pathToKey(current);\n       FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n       if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n         throw new IOException(\"Cannot create directory \" + f + \" because \" +\n             current + \" is an existing file.\");\n       } else if (currentMetadata \u003d\u003d null) {\n         keysToCreateAsFolder.add(currentKey);\n         childCreated \u003d true;\n       } else {\n         // The directory already exists. Its last modified time need to be\n         // updated if there is a child directory created under it.\n         if (childCreated) {\n           keysToUpdateAsFolder.add(currentKey);\n         }\n         childCreated \u003d false;\n       }\n     }\n \n     for (String currentKey : keysToCreateAsFolder) {\n       store.storeEmptyFolder(currentKey, permissionStatus);\n     }\n \n     instrumentation.directoryCreated();\n \n     // otherwise throws exception\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n\n\n    LOG.debug(\"Creating directory: {}\", f.toString());\n\n    if (containsColon(f)) {\n      throw new IOException(\"Cannot create directory \" + f\n          + \" through WASB that has colons in the name\");\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n    PermissionStatus permissionStatus \u003d null;\n    if(noUmask) {\n      // ensure owner still has wx permissions at the minimum\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n              UMaskApplyMode.NewDirectoryNoUmask));\n    } else {\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(permission, UMaskApplyMode.NewDirectory));\n    }\n\n\n    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n    ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n    boolean childCreated \u003d false;\n    // Check that there is no file in the parent chain of the given path.\n    for (Path current \u003d absolutePath, parent \u003d current.getParent();\n        parent !\u003d null; // Stop when you get to the root\n        current \u003d parent, parent \u003d current.getParent()) {\n      String currentKey \u003d pathToKey(current);\n      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n        throw new IOException(\"Cannot create directory \" + f + \" because \" +\n            current + \" is an existing file.\");\n      } else if (currentMetadata \u003d\u003d null) {\n        keysToCreateAsFolder.add(currentKey);\n        childCreated \u003d true;\n      } else {\n        // The directory already exists. Its last modified time need to be\n        // updated if there is a child directory created under it.\n        if (childCreated) {\n          keysToUpdateAsFolder.add(currentKey);\n        }\n        childCreated \u003d false;\n      }\n    }\n\n    for (String currentKey : keysToCreateAsFolder) {\n      store.storeEmptyFolder(currentKey, permissionStatus);\n    }\n\n    instrumentation.directoryCreated();\n\n    // otherwise throws exception\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
          "commitDate": "08/10/14 2:20 PM",
          "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
          "commitAuthor": "cnauroth",
          "commitDateOld": "19/09/14 11:33 AM",
          "commitNameOld": "9f03a7c018bb2c497cd0ef758f1a3e08e8163d06",
          "commitAuthorOld": "Allen Wittenauer",
          "daysBetweenCommits": 19.12,
          "commitsBetweenForRepo": 199,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,57 @@\n-  public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n+  public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Creating directory: \" + f.toString());\n     }\n \n     if (containsColon(f)) {\n       throw new IOException(\"Cannot create directory \" + f\n           + \" through WASB that has colons in the name\");\n     }\n \n     Path absolutePath \u003d makeAbsolute(f);\n-    PermissionStatus permissionStatus \u003d createPermissionStatus(applyUMask(\n-        permission, UMaskApplyMode.NewDirectory));\n+    PermissionStatus permissionStatus \u003d null;\n+    if(noUmask) {\n+      // ensure owner still has wx permissions at the minimum\n+      permissionStatus \u003d createPermissionStatus(\n+          applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n+              UMaskApplyMode.NewDirectoryNoUmask));\n+    } else {\n+      permissionStatus \u003d createPermissionStatus(\n+          applyUMask(permission, UMaskApplyMode.NewDirectory));\n+    }\n+\n \n     ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n     ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n     boolean childCreated \u003d false;\n     // Check that there is no file in the parent chain of the given path.\n-    // Stop when you get to the root\n-    for (Path current \u003d absolutePath, parent \u003d current.getParent(); parent !\u003d null; current \u003d parent, parent \u003d current\n-        .getParent()) {\n+    for (Path current \u003d absolutePath, parent \u003d current.getParent();\n+        parent !\u003d null; // Stop when you get to the root\n+        current \u003d parent, parent \u003d current.getParent()) {\n       String currentKey \u003d pathToKey(current);\n       FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n       if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n-        throw new IOException(\"Cannot create directory \" + f + \" because \"\n-            + current + \" is an existing file.\");\n-      } else if (currentMetadata \u003d\u003d null\n-          || (currentMetadata.isDir() \u0026\u0026 currentMetadata\n-              .getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit)) {\n+        throw new IOException(\"Cannot create directory \" + f + \" because \" +\n+            current + \" is an existing file.\");\n+      } else if (currentMetadata \u003d\u003d null) {\n         keysToCreateAsFolder.add(currentKey);\n         childCreated \u003d true;\n       } else {\n         // The directory already exists. Its last modified time need to be\n         // updated if there is a child directory created under it.\n         if (childCreated) {\n           keysToUpdateAsFolder.add(currentKey);\n         }\n         childCreated \u003d false;\n       }\n     }\n \n     for (String currentKey : keysToCreateAsFolder) {\n       store.storeEmptyFolder(currentKey, permissionStatus);\n     }\n \n-    // Take the time after finishing mkdirs as the modified time, and update all\n-    // the existing directories\u0027 modified time to it uniformly.\n-    final Calendar lastModifiedCalendar \u003d Calendar\n-        .getInstance(Utility.LOCALE_US);\n-    lastModifiedCalendar.setTimeZone(Utility.UTC_ZONE);\n-    Date lastModified \u003d lastModifiedCalendar.getTime();\n-    for (String key : keysToUpdateAsFolder) {\n-      store.updateFolderLastModifiedTime(key, lastModified);\n-    }\n-\n     instrumentation.directoryCreated();\n-    \n+\n     // otherwise throws exception\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Creating directory: \" + f.toString());\n    }\n\n    if (containsColon(f)) {\n      throw new IOException(\"Cannot create directory \" + f\n          + \" through WASB that has colons in the name\");\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n    PermissionStatus permissionStatus \u003d null;\n    if(noUmask) {\n      // ensure owner still has wx permissions at the minimum\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n              UMaskApplyMode.NewDirectoryNoUmask));\n    } else {\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(permission, UMaskApplyMode.NewDirectory));\n    }\n\n\n    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n    ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n    boolean childCreated \u003d false;\n    // Check that there is no file in the parent chain of the given path.\n    for (Path current \u003d absolutePath, parent \u003d current.getParent();\n        parent !\u003d null; // Stop when you get to the root\n        current \u003d parent, parent \u003d current.getParent()) {\n      String currentKey \u003d pathToKey(current);\n      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n        throw new IOException(\"Cannot create directory \" + f + \" because \" +\n            current + \" is an existing file.\");\n      } else if (currentMetadata \u003d\u003d null) {\n        keysToCreateAsFolder.add(currentKey);\n        childCreated \u003d true;\n      } else {\n        // The directory already exists. Its last modified time need to be\n        // updated if there is a child directory created under it.\n        if (childCreated) {\n          keysToUpdateAsFolder.add(currentKey);\n        }\n        childCreated \u003d false;\n      }\n    }\n\n    for (String currentKey : keysToCreateAsFolder) {\n      store.storeEmptyFolder(currentKey, permissionStatus);\n    }\n\n    instrumentation.directoryCreated();\n\n    // otherwise throws exception\n    return true;\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
          "extendedDetails": {
            "oldValue": "[f-Path, permission-FsPermission]",
            "newValue": "[f-Path, permission-FsPermission, noUmask-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
          "commitDate": "08/10/14 2:20 PM",
          "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
          "commitAuthor": "cnauroth",
          "commitDateOld": "19/09/14 11:33 AM",
          "commitNameOld": "9f03a7c018bb2c497cd0ef758f1a3e08e8163d06",
          "commitAuthorOld": "Allen Wittenauer",
          "daysBetweenCommits": 19.12,
          "commitsBetweenForRepo": 199,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,57 @@\n-  public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n+  public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Creating directory: \" + f.toString());\n     }\n \n     if (containsColon(f)) {\n       throw new IOException(\"Cannot create directory \" + f\n           + \" through WASB that has colons in the name\");\n     }\n \n     Path absolutePath \u003d makeAbsolute(f);\n-    PermissionStatus permissionStatus \u003d createPermissionStatus(applyUMask(\n-        permission, UMaskApplyMode.NewDirectory));\n+    PermissionStatus permissionStatus \u003d null;\n+    if(noUmask) {\n+      // ensure owner still has wx permissions at the minimum\n+      permissionStatus \u003d createPermissionStatus(\n+          applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n+              UMaskApplyMode.NewDirectoryNoUmask));\n+    } else {\n+      permissionStatus \u003d createPermissionStatus(\n+          applyUMask(permission, UMaskApplyMode.NewDirectory));\n+    }\n+\n \n     ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n     ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n     boolean childCreated \u003d false;\n     // Check that there is no file in the parent chain of the given path.\n-    // Stop when you get to the root\n-    for (Path current \u003d absolutePath, parent \u003d current.getParent(); parent !\u003d null; current \u003d parent, parent \u003d current\n-        .getParent()) {\n+    for (Path current \u003d absolutePath, parent \u003d current.getParent();\n+        parent !\u003d null; // Stop when you get to the root\n+        current \u003d parent, parent \u003d current.getParent()) {\n       String currentKey \u003d pathToKey(current);\n       FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n       if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n-        throw new IOException(\"Cannot create directory \" + f + \" because \"\n-            + current + \" is an existing file.\");\n-      } else if (currentMetadata \u003d\u003d null\n-          || (currentMetadata.isDir() \u0026\u0026 currentMetadata\n-              .getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit)) {\n+        throw new IOException(\"Cannot create directory \" + f + \" because \" +\n+            current + \" is an existing file.\");\n+      } else if (currentMetadata \u003d\u003d null) {\n         keysToCreateAsFolder.add(currentKey);\n         childCreated \u003d true;\n       } else {\n         // The directory already exists. Its last modified time need to be\n         // updated if there is a child directory created under it.\n         if (childCreated) {\n           keysToUpdateAsFolder.add(currentKey);\n         }\n         childCreated \u003d false;\n       }\n     }\n \n     for (String currentKey : keysToCreateAsFolder) {\n       store.storeEmptyFolder(currentKey, permissionStatus);\n     }\n \n-    // Take the time after finishing mkdirs as the modified time, and update all\n-    // the existing directories\u0027 modified time to it uniformly.\n-    final Calendar lastModifiedCalendar \u003d Calendar\n-        .getInstance(Utility.LOCALE_US);\n-    lastModifiedCalendar.setTimeZone(Utility.UTC_ZONE);\n-    Date lastModified \u003d lastModifiedCalendar.getTime();\n-    for (String key : keysToUpdateAsFolder) {\n-      store.updateFolderLastModifiedTime(key, lastModified);\n-    }\n-\n     instrumentation.directoryCreated();\n-    \n+\n     // otherwise throws exception\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean mkdirs(Path f, FsPermission permission, boolean noUmask) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Creating directory: \" + f.toString());\n    }\n\n    if (containsColon(f)) {\n      throw new IOException(\"Cannot create directory \" + f\n          + \" through WASB that has colons in the name\");\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n    PermissionStatus permissionStatus \u003d null;\n    if(noUmask) {\n      // ensure owner still has wx permissions at the minimum\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(FsPermission.createImmutable((short) (permission.toShort() | USER_WX_PERMISION)),\n              UMaskApplyMode.NewDirectoryNoUmask));\n    } else {\n      permissionStatus \u003d createPermissionStatus(\n          applyUMask(permission, UMaskApplyMode.NewDirectory));\n    }\n\n\n    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n    ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n    boolean childCreated \u003d false;\n    // Check that there is no file in the parent chain of the given path.\n    for (Path current \u003d absolutePath, parent \u003d current.getParent();\n        parent !\u003d null; // Stop when you get to the root\n        current \u003d parent, parent \u003d current.getParent()) {\n      String currentKey \u003d pathToKey(current);\n      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n        throw new IOException(\"Cannot create directory \" + f + \" because \" +\n            current + \" is an existing file.\");\n      } else if (currentMetadata \u003d\u003d null) {\n        keysToCreateAsFolder.add(currentKey);\n        childCreated \u003d true;\n      } else {\n        // The directory already exists. Its last modified time need to be\n        // updated if there is a child directory created under it.\n        if (childCreated) {\n          keysToUpdateAsFolder.add(currentKey);\n        }\n        childCreated \u003d false;\n      }\n    }\n\n    for (String currentKey : keysToCreateAsFolder) {\n      store.storeEmptyFolder(currentKey, permissionStatus);\n    }\n\n    instrumentation.directoryCreated();\n\n    // otherwise throws exception\n    return true;\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "0d91576ec31f63402f2db6107a04155368e2632d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10728. Metrics system for Windows Azure Storage Filesystem. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605187 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 1:52 PM",
      "commitName": "0d91576ec31f63402f2db6107a04155368e2632d",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "20/06/14 11:36 AM",
      "commitNameOld": "61bf9f779919206296d2ce84a8a6b2d912709a59",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 4.09,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,60 @@\n   public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Creating directory: \" + f.toString());\n     }\n \n     if (containsColon(f)) {\n       throw new IOException(\"Cannot create directory \" + f\n           + \" through WASB that has colons in the name\");\n     }\n \n     Path absolutePath \u003d makeAbsolute(f);\n     PermissionStatus permissionStatus \u003d createPermissionStatus(applyUMask(\n         permission, UMaskApplyMode.NewDirectory));\n \n     ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n     ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n     boolean childCreated \u003d false;\n     // Check that there is no file in the parent chain of the given path.\n     // Stop when you get to the root\n     for (Path current \u003d absolutePath, parent \u003d current.getParent(); parent !\u003d null; current \u003d parent, parent \u003d current\n         .getParent()) {\n       String currentKey \u003d pathToKey(current);\n       FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n       if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n         throw new IOException(\"Cannot create directory \" + f + \" because \"\n             + current + \" is an existing file.\");\n       } else if (currentMetadata \u003d\u003d null\n           || (currentMetadata.isDir() \u0026\u0026 currentMetadata\n               .getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit)) {\n         keysToCreateAsFolder.add(currentKey);\n         childCreated \u003d true;\n       } else {\n         // The directory already exists. Its last modified time need to be\n         // updated if there is a child directory created under it.\n         if (childCreated) {\n           keysToUpdateAsFolder.add(currentKey);\n         }\n         childCreated \u003d false;\n       }\n     }\n \n     for (String currentKey : keysToCreateAsFolder) {\n       store.storeEmptyFolder(currentKey, permissionStatus);\n     }\n \n     // Take the time after finishing mkdirs as the modified time, and update all\n     // the existing directories\u0027 modified time to it uniformly.\n     final Calendar lastModifiedCalendar \u003d Calendar\n         .getInstance(Utility.LOCALE_US);\n     lastModifiedCalendar.setTimeZone(Utility.UTC_ZONE);\n     Date lastModified \u003d lastModifiedCalendar.getTime();\n     for (String key : keysToUpdateAsFolder) {\n       store.updateFolderLastModifiedTime(key, lastModified);\n     }\n \n+    instrumentation.directoryCreated();\n+    \n     // otherwise throws exception\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Creating directory: \" + f.toString());\n    }\n\n    if (containsColon(f)) {\n      throw new IOException(\"Cannot create directory \" + f\n          + \" through WASB that has colons in the name\");\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n    PermissionStatus permissionStatus \u003d createPermissionStatus(applyUMask(\n        permission, UMaskApplyMode.NewDirectory));\n\n    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n    ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n    boolean childCreated \u003d false;\n    // Check that there is no file in the parent chain of the given path.\n    // Stop when you get to the root\n    for (Path current \u003d absolutePath, parent \u003d current.getParent(); parent !\u003d null; current \u003d parent, parent \u003d current\n        .getParent()) {\n      String currentKey \u003d pathToKey(current);\n      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n        throw new IOException(\"Cannot create directory \" + f + \" because \"\n            + current + \" is an existing file.\");\n      } else if (currentMetadata \u003d\u003d null\n          || (currentMetadata.isDir() \u0026\u0026 currentMetadata\n              .getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit)) {\n        keysToCreateAsFolder.add(currentKey);\n        childCreated \u003d true;\n      } else {\n        // The directory already exists. Its last modified time need to be\n        // updated if there is a child directory created under it.\n        if (childCreated) {\n          keysToUpdateAsFolder.add(currentKey);\n        }\n        childCreated \u003d false;\n      }\n    }\n\n    for (String currentKey : keysToCreateAsFolder) {\n      store.storeEmptyFolder(currentKey, permissionStatus);\n    }\n\n    // Take the time after finishing mkdirs as the modified time, and update all\n    // the existing directories\u0027 modified time to it uniformly.\n    final Calendar lastModifiedCalendar \u003d Calendar\n        .getInstance(Utility.LOCALE_US);\n    lastModifiedCalendar.setTimeZone(Utility.UTC_ZONE);\n    Date lastModified \u003d lastModifiedCalendar.getTime();\n    for (String key : keysToUpdateAsFolder) {\n      store.updateFolderLastModifiedTime(key, lastModified);\n    }\n\n    instrumentation.directoryCreated();\n    \n    // otherwise throws exception\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,58 @@\n+  public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Creating directory: \" + f.toString());\n+    }\n+\n+    if (containsColon(f)) {\n+      throw new IOException(\"Cannot create directory \" + f\n+          + \" through WASB that has colons in the name\");\n+    }\n+\n+    Path absolutePath \u003d makeAbsolute(f);\n+    PermissionStatus permissionStatus \u003d createPermissionStatus(applyUMask(\n+        permission, UMaskApplyMode.NewDirectory));\n+\n+    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n+    ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n+    boolean childCreated \u003d false;\n+    // Check that there is no file in the parent chain of the given path.\n+    // Stop when you get to the root\n+    for (Path current \u003d absolutePath, parent \u003d current.getParent(); parent !\u003d null; current \u003d parent, parent \u003d current\n+        .getParent()) {\n+      String currentKey \u003d pathToKey(current);\n+      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n+      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n+        throw new IOException(\"Cannot create directory \" + f + \" because \"\n+            + current + \" is an existing file.\");\n+      } else if (currentMetadata \u003d\u003d null\n+          || (currentMetadata.isDir() \u0026\u0026 currentMetadata\n+              .getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit)) {\n+        keysToCreateAsFolder.add(currentKey);\n+        childCreated \u003d true;\n+      } else {\n+        // The directory already exists. Its last modified time need to be\n+        // updated if there is a child directory created under it.\n+        if (childCreated) {\n+          keysToUpdateAsFolder.add(currentKey);\n+        }\n+        childCreated \u003d false;\n+      }\n+    }\n+\n+    for (String currentKey : keysToCreateAsFolder) {\n+      store.storeEmptyFolder(currentKey, permissionStatus);\n+    }\n+\n+    // Take the time after finishing mkdirs as the modified time, and update all\n+    // the existing directories\u0027 modified time to it uniformly.\n+    final Calendar lastModifiedCalendar \u003d Calendar\n+        .getInstance(Utility.LOCALE_US);\n+    lastModifiedCalendar.setTimeZone(Utility.UTC_ZONE);\n+    Date lastModified \u003d lastModifiedCalendar.getTime();\n+    for (String key : keysToUpdateAsFolder) {\n+      store.updateFolderLastModifiedTime(key, lastModified);\n+    }\n+\n+    // otherwise throws exception\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Creating directory: \" + f.toString());\n    }\n\n    if (containsColon(f)) {\n      throw new IOException(\"Cannot create directory \" + f\n          + \" through WASB that has colons in the name\");\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n    PermissionStatus permissionStatus \u003d createPermissionStatus(applyUMask(\n        permission, UMaskApplyMode.NewDirectory));\n\n    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n    ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n    boolean childCreated \u003d false;\n    // Check that there is no file in the parent chain of the given path.\n    // Stop when you get to the root\n    for (Path current \u003d absolutePath, parent \u003d current.getParent(); parent !\u003d null; current \u003d parent, parent \u003d current\n        .getParent()) {\n      String currentKey \u003d pathToKey(current);\n      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n        throw new IOException(\"Cannot create directory \" + f + \" because \"\n            + current + \" is an existing file.\");\n      } else if (currentMetadata \u003d\u003d null\n          || (currentMetadata.isDir() \u0026\u0026 currentMetadata\n              .getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit)) {\n        keysToCreateAsFolder.add(currentKey);\n        childCreated \u003d true;\n      } else {\n        // The directory already exists. Its last modified time need to be\n        // updated if there is a child directory created under it.\n        if (childCreated) {\n          keysToUpdateAsFolder.add(currentKey);\n        }\n        childCreated \u003d false;\n      }\n    }\n\n    for (String currentKey : keysToCreateAsFolder) {\n      store.storeEmptyFolder(currentKey, permissionStatus);\n    }\n\n    // Take the time after finishing mkdirs as the modified time, and update all\n    // the existing directories\u0027 modified time to it uniformly.\n    final Calendar lastModifiedCalendar \u003d Calendar\n        .getInstance(Utility.LOCALE_US);\n    lastModifiedCalendar.setTimeZone(Utility.UTC_ZONE);\n    Date lastModified \u003d lastModifiedCalendar.getTime();\n    for (String key : keysToUpdateAsFolder) {\n      store.updateFolderLastModifiedTime(key, lastModified);\n    }\n\n    // otherwise throws exception\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java"
    }
  }
}