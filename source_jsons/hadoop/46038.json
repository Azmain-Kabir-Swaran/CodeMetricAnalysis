{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebApps.java",
  "functionName": "start",
  "functionId": "start___webapp-WebApp__ui2Context-WebAppContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
  "functionStartLine": 464,
  "functionEndLine": 479,
  "numCommitsSeen": 107,
  "timeTaken": 13867,
  "changeHistory": [
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
    "0940e4f692441f16e742666ac925f71a083eab27",
    "298b174f663a06e67098f7b5cd645769c1a98a80",
    "c00b5d1e51b3f495893921dd804085bba66235e0",
    "3de0da2a7659db268d630cb8c4ad1d1c4b8398a2",
    "25f8f801d15e3d9f27f4a2a198262407203e14a5",
    "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
    "94b29b3348f5919a7599cc4b8e0466a4c72e95ae",
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
    "4de2bd3fbfd99139836db2778512768d6c9e70e8",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4",
    "1152e23ed03e8831a3167a729503aad3cbcb4ee7",
    "2214871d916fdcae62aa51afbb5fd571f2808745",
    "1608d8b5275dc6f6328f16d6949eca65bec27d05",
    "76cb07ee2077da61e0c07131bcbe7d0ddc73080e",
    "914a0e51729ffe9816d007fc08640c44cc6bc9ee",
    "5adba5597ce071c2e84d0c9834e1d9e5e76f9bdb",
    "e86036662c139cd7e67e69a0215471b1ec724a05",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "0ea8570be578be60e2f32849900a1c50506d78d3",
    "a39992ea6345a9f29814587604ac61b21c99fc3e",
    "5fadd4de2a73fcf35eab78d6c078e62b5a3c60d5",
    "8aabd3d4e67cad8dc7e46f5339981135badc7421",
    "87b969c83541c6719abcc1dabc38dc41704876ee",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": "Ymultichange(Yparameterchange,Ybodychange)",
    "0940e4f692441f16e742666ac925f71a083eab27": "Ymultichange(Yparameterchange,Ybodychange)",
    "298b174f663a06e67098f7b5cd645769c1a98a80": "Ybodychange",
    "c00b5d1e51b3f495893921dd804085bba66235e0": "Ybodychange",
    "3de0da2a7659db268d630cb8c4ad1d1c4b8398a2": "Ymultichange(Yparameterchange,Ybodychange)",
    "25f8f801d15e3d9f27f4a2a198262407203e14a5": "Ybodychange",
    "23bf6c72071782e3fd5a628e21495d6b974c7a9e": "Ybodychange",
    "94b29b3348f5919a7599cc4b8e0466a4c72e95ae": "Ybodychange",
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d": "Ybodychange",
    "4de2bd3fbfd99139836db2778512768d6c9e70e8": "Ybodychange",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": "Ybodychange",
    "1152e23ed03e8831a3167a729503aad3cbcb4ee7": "Ybodychange",
    "2214871d916fdcae62aa51afbb5fd571f2808745": "Ybodychange",
    "1608d8b5275dc6f6328f16d6949eca65bec27d05": "Ybodychange",
    "76cb07ee2077da61e0c07131bcbe7d0ddc73080e": "Ybodychange",
    "914a0e51729ffe9816d007fc08640c44cc6bc9ee": "Ybodychange",
    "5adba5597ce071c2e84d0c9834e1d9e5e76f9bdb": "Ybodychange",
    "e86036662c139cd7e67e69a0215471b1ec724a05": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "0ea8570be578be60e2f32849900a1c50506d78d3": "Ybodychange",
    "a39992ea6345a9f29814587604ac61b21c99fc3e": "Ybodychange",
    "5fadd4de2a73fcf35eab78d6c078e62b5a3c60d5": "Ybodychange",
    "8aabd3d4e67cad8dc7e46f5339981135badc7421": "Ybodychange",
    "87b969c83541c6719abcc1dabc38dc41704876ee": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
      "commitDate": "23/01/18 5:54 PM",
      "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
          "commitDate": "23/01/18 5:54 PM",
          "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "17/11/17 9:28 AM",
          "commitNameOld": "0940e4f692441f16e742666ac925f71a083eab27",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 67.35,
          "commitsBetweenForRepo": 343,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,16 @@\n-    public WebApp start(WebApp webapp, WebAppContext ui2Context,\n-        Map\u003cString, String\u003e services) {\n+    public WebApp start(WebApp webapp, WebAppContext ui2Context) {\n       WebApp webApp \u003d build(webapp);\n       HttpServer2 httpServer \u003d webApp.httpServer();\n       if (ui2Context !\u003d null) {\n         addFiltersForNewContext(ui2Context);\n         httpServer.addHandlerAtFront(ui2Context);\n       }\n-      if (services!\u003dnull) {\n-        String packageName \u003d services.get(\"PackageName\");\n-        String pathSpec \u003d services.get(\"PathSpec\");\n-        httpServer.addJerseyResourcePackage(packageName, pathSpec);\n-      }\n       try {\n         httpServer.start();\n         LOG.info(\"Web app \" + name + \" started at \"\n             + httpServer.getConnectorAddress(0).getPort());\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       return webApp;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public WebApp start(WebApp webapp, WebAppContext ui2Context) {\n      WebApp webApp \u003d build(webapp);\n      HttpServer2 httpServer \u003d webApp.httpServer();\n      if (ui2Context !\u003d null) {\n        addFiltersForNewContext(ui2Context);\n        httpServer.addHandlerAtFront(ui2Context);\n      }\n      try {\n        httpServer.start();\n        LOG.info(\"Web app \" + name + \" started at \"\n            + httpServer.getConnectorAddress(0).getPort());\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      return webApp;\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
          "extendedDetails": {
            "oldValue": "[webapp-WebApp, ui2Context-WebAppContext, services-Map\u003cString,String\u003e]",
            "newValue": "[webapp-WebApp, ui2Context-WebAppContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
          "commitDate": "23/01/18 5:54 PM",
          "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "17/11/17 9:28 AM",
          "commitNameOld": "0940e4f692441f16e742666ac925f71a083eab27",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 67.35,
          "commitsBetweenForRepo": 343,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,16 @@\n-    public WebApp start(WebApp webapp, WebAppContext ui2Context,\n-        Map\u003cString, String\u003e services) {\n+    public WebApp start(WebApp webapp, WebAppContext ui2Context) {\n       WebApp webApp \u003d build(webapp);\n       HttpServer2 httpServer \u003d webApp.httpServer();\n       if (ui2Context !\u003d null) {\n         addFiltersForNewContext(ui2Context);\n         httpServer.addHandlerAtFront(ui2Context);\n       }\n-      if (services!\u003dnull) {\n-        String packageName \u003d services.get(\"PackageName\");\n-        String pathSpec \u003d services.get(\"PathSpec\");\n-        httpServer.addJerseyResourcePackage(packageName, pathSpec);\n-      }\n       try {\n         httpServer.start();\n         LOG.info(\"Web app \" + name + \" started at \"\n             + httpServer.getConnectorAddress(0).getPort());\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       return webApp;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public WebApp start(WebApp webapp, WebAppContext ui2Context) {\n      WebApp webApp \u003d build(webapp);\n      HttpServer2 httpServer \u003d webApp.httpServer();\n      if (ui2Context !\u003d null) {\n        addFiltersForNewContext(ui2Context);\n        httpServer.addHandlerAtFront(ui2Context);\n      }\n      try {\n        httpServer.start();\n        LOG.info(\"Web app \" + name + \" started at \"\n            + httpServer.getConnectorAddress(0).getPort());\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      return webApp;\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
          "extendedDetails": {}
        }
      ]
    },
    "0940e4f692441f16e742666ac925f71a083eab27": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7218.  Decouple YARN Services REST API namespace from RM.  (Contributed by Eric Yang)\n",
      "commitDate": "17/11/17 9:28 AM",
      "commitName": "0940e4f692441f16e742666ac925f71a083eab27",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7218.  Decouple YARN Services REST API namespace from RM.  (Contributed by Eric Yang)\n",
          "commitDate": "17/11/17 9:28 AM",
          "commitName": "0940e4f692441f16e742666ac925f71a083eab27",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "19/10/17 2:44 PM",
          "commitNameOld": "298b174f663a06e67098f7b5cd645769c1a98a80",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 28.82,
          "commitsBetweenForRepo": 286,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,22 @@\n-    public WebApp start(WebApp webapp, WebAppContext ui2Context) {\n+    public WebApp start(WebApp webapp, WebAppContext ui2Context,\n+        Map\u003cString, String\u003e services) {\n       WebApp webApp \u003d build(webapp);\n       HttpServer2 httpServer \u003d webApp.httpServer();\n       if (ui2Context !\u003d null) {\n         addFiltersForNewContext(ui2Context);\n         httpServer.addHandlerAtFront(ui2Context);\n       }\n+      if (services!\u003dnull) {\n+        String packageName \u003d services.get(\"PackageName\");\n+        String pathSpec \u003d services.get(\"PathSpec\");\n+        httpServer.addJerseyResourcePackage(packageName, pathSpec);\n+      }\n       try {\n         httpServer.start();\n         LOG.info(\"Web app \" + name + \" started at \"\n             + httpServer.getConnectorAddress(0).getPort());\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       return webApp;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public WebApp start(WebApp webapp, WebAppContext ui2Context,\n        Map\u003cString, String\u003e services) {\n      WebApp webApp \u003d build(webapp);\n      HttpServer2 httpServer \u003d webApp.httpServer();\n      if (ui2Context !\u003d null) {\n        addFiltersForNewContext(ui2Context);\n        httpServer.addHandlerAtFront(ui2Context);\n      }\n      if (services!\u003dnull) {\n        String packageName \u003d services.get(\"PackageName\");\n        String pathSpec \u003d services.get(\"PathSpec\");\n        httpServer.addJerseyResourcePackage(packageName, pathSpec);\n      }\n      try {\n        httpServer.start();\n        LOG.info(\"Web app \" + name + \" started at \"\n            + httpServer.getConnectorAddress(0).getPort());\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      return webApp;\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
          "extendedDetails": {
            "oldValue": "[webapp-WebApp, ui2Context-WebAppContext]",
            "newValue": "[webapp-WebApp, ui2Context-WebAppContext, services-Map\u003cString,String\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7218.  Decouple YARN Services REST API namespace from RM.  (Contributed by Eric Yang)\n",
          "commitDate": "17/11/17 9:28 AM",
          "commitName": "0940e4f692441f16e742666ac925f71a083eab27",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "19/10/17 2:44 PM",
          "commitNameOld": "298b174f663a06e67098f7b5cd645769c1a98a80",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 28.82,
          "commitsBetweenForRepo": 286,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,22 @@\n-    public WebApp start(WebApp webapp, WebAppContext ui2Context) {\n+    public WebApp start(WebApp webapp, WebAppContext ui2Context,\n+        Map\u003cString, String\u003e services) {\n       WebApp webApp \u003d build(webapp);\n       HttpServer2 httpServer \u003d webApp.httpServer();\n       if (ui2Context !\u003d null) {\n         addFiltersForNewContext(ui2Context);\n         httpServer.addHandlerAtFront(ui2Context);\n       }\n+      if (services!\u003dnull) {\n+        String packageName \u003d services.get(\"PackageName\");\n+        String pathSpec \u003d services.get(\"PathSpec\");\n+        httpServer.addJerseyResourcePackage(packageName, pathSpec);\n+      }\n       try {\n         httpServer.start();\n         LOG.info(\"Web app \" + name + \" started at \"\n             + httpServer.getConnectorAddress(0).getPort());\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       return webApp;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public WebApp start(WebApp webapp, WebAppContext ui2Context,\n        Map\u003cString, String\u003e services) {\n      WebApp webApp \u003d build(webapp);\n      HttpServer2 httpServer \u003d webApp.httpServer();\n      if (ui2Context !\u003d null) {\n        addFiltersForNewContext(ui2Context);\n        httpServer.addHandlerAtFront(ui2Context);\n      }\n      if (services!\u003dnull) {\n        String packageName \u003d services.get(\"PackageName\");\n        String pathSpec \u003d services.get(\"PathSpec\");\n        httpServer.addJerseyResourcePackage(packageName, pathSpec);\n      }\n      try {\n        httpServer.start();\n        LOG.info(\"Web app \" + name + \" started at \"\n            + httpServer.getConnectorAddress(0).getPort());\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      return webApp;\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
          "extendedDetails": {}
        }
      ]
    },
    "298b174f663a06e67098f7b5cd645769c1a98a80": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7338. Support same origin policy for cross site scripting prevention. (Sunil G via wangda)\n",
      "commitDate": "19/10/17 2:44 PM",
      "commitName": "298b174f663a06e67098f7b5cd645769c1a98a80",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "05/02/17 7:42 PM",
      "commitNameOld": "cce35c38159b23eb55204b3c9afcaa3215f4f4ef",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 255.75,
      "commitsBetweenForRepo": 1670,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,16 @@\n     public WebApp start(WebApp webapp, WebAppContext ui2Context) {\n       WebApp webApp \u003d build(webapp);\n       HttpServer2 httpServer \u003d webApp.httpServer();\n       if (ui2Context !\u003d null) {\n+        addFiltersForNewContext(ui2Context);\n         httpServer.addHandlerAtFront(ui2Context);\n       }\n       try {\n         httpServer.start();\n         LOG.info(\"Web app \" + name + \" started at \"\n             + httpServer.getConnectorAddress(0).getPort());\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       return webApp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp, WebAppContext ui2Context) {\n      WebApp webApp \u003d build(webapp);\n      HttpServer2 httpServer \u003d webApp.httpServer();\n      if (ui2Context !\u003d null) {\n        addFiltersForNewContext(ui2Context);\n        httpServer.addHandlerAtFront(ui2Context);\n      }\n      try {\n        httpServer.start();\n        LOG.info(\"Web app \" + name + \" started at \"\n            + httpServer.getConnectorAddress(0).getPort());\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      return webApp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "c00b5d1e51b3f495893921dd804085bba66235e0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5804. New UI2 is not able to launch with jetty 9 upgrade post HADOOP-10075. (Sunil G via wangda)\n\n(cherry picked from commit ddebaa6b7ae1031899139d153d57df5387d60542)\n",
      "commitDate": "06/11/16 1:13 PM",
      "commitName": "c00b5d1e51b3f495893921dd804085bba66235e0",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "06/11/16 1:13 PM",
      "commitNameOld": "3de0da2a7659db268d630cb8c4ad1d1c4b8398a2",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n     public WebApp start(WebApp webapp, WebAppContext ui2Context) {\n       WebApp webApp \u003d build(webapp);\n       HttpServer2 httpServer \u003d webApp.httpServer();\n       if (ui2Context !\u003d null) {\n-        httpServer.addContext(ui2Context, true);\n+        httpServer.addHandlerAtFront(ui2Context);\n       }\n       try {\n         httpServer.start();\n         LOG.info(\"Web app \" + name + \" started at \"\n             + httpServer.getConnectorAddress(0).getPort());\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       return webApp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp, WebAppContext ui2Context) {\n      WebApp webApp \u003d build(webapp);\n      HttpServer2 httpServer \u003d webApp.httpServer();\n      if (ui2Context !\u003d null) {\n        httpServer.addHandlerAtFront(ui2Context);\n      }\n      try {\n        httpServer.start();\n        LOG.info(\"Web app \" + name + \" started at \"\n            + httpServer.getConnectorAddress(0).getPort());\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      return webApp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "3de0da2a7659db268d630cb8c4ad1d1c4b8398a2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5698. [YARN-3368] Launch new YARN UI under hadoop web app port. (Sunil G via wangda)\n",
      "commitDate": "06/11/16 1:13 PM",
      "commitName": "3de0da2a7659db268d630cb8c4ad1d1c4b8398a2",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5698. [YARN-3368] Launch new YARN UI under hadoop web app port. (Sunil G via wangda)\n",
          "commitDate": "06/11/16 1:13 PM",
          "commitName": "3de0da2a7659db268d630cb8c4ad1d1c4b8398a2",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "19/05/16 2:15 PM",
          "commitNameOld": "22fcd819f0c445be661e644ed67221f867013af8",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 171.0,
          "commitsBetweenForRepo": 1326,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,15 @@\n-    public WebApp start(WebApp webapp) {\n+    public WebApp start(WebApp webapp, WebAppContext ui2Context) {\n       WebApp webApp \u003d build(webapp);\n       HttpServer2 httpServer \u003d webApp.httpServer();\n+      if (ui2Context !\u003d null) {\n+        httpServer.addContext(ui2Context, true);\n+      }\n       try {\n         httpServer.start();\n         LOG.info(\"Web app \" + name + \" started at \"\n             + httpServer.getConnectorAddress(0).getPort());\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       return webApp;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public WebApp start(WebApp webapp, WebAppContext ui2Context) {\n      WebApp webApp \u003d build(webapp);\n      HttpServer2 httpServer \u003d webApp.httpServer();\n      if (ui2Context !\u003d null) {\n        httpServer.addContext(ui2Context, true);\n      }\n      try {\n        httpServer.start();\n        LOG.info(\"Web app \" + name + \" started at \"\n            + httpServer.getConnectorAddress(0).getPort());\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      return webApp;\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
          "extendedDetails": {
            "oldValue": "[webapp-WebApp]",
            "newValue": "[webapp-WebApp, ui2Context-WebAppContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5698. [YARN-3368] Launch new YARN UI under hadoop web app port. (Sunil G via wangda)\n",
          "commitDate": "06/11/16 1:13 PM",
          "commitName": "3de0da2a7659db268d630cb8c4ad1d1c4b8398a2",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "19/05/16 2:15 PM",
          "commitNameOld": "22fcd819f0c445be661e644ed67221f867013af8",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 171.0,
          "commitsBetweenForRepo": 1326,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,15 @@\n-    public WebApp start(WebApp webapp) {\n+    public WebApp start(WebApp webapp, WebAppContext ui2Context) {\n       WebApp webApp \u003d build(webapp);\n       HttpServer2 httpServer \u003d webApp.httpServer();\n+      if (ui2Context !\u003d null) {\n+        httpServer.addContext(ui2Context, true);\n+      }\n       try {\n         httpServer.start();\n         LOG.info(\"Web app \" + name + \" started at \"\n             + httpServer.getConnectorAddress(0).getPort());\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       return webApp;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public WebApp start(WebApp webapp, WebAppContext ui2Context) {\n      WebApp webApp \u003d build(webapp);\n      HttpServer2 httpServer \u003d webApp.httpServer();\n      if (ui2Context !\u003d null) {\n        httpServer.addContext(ui2Context, true);\n      }\n      try {\n        httpServer.start();\n        LOG.info(\"Web app \" + name + \" started at \"\n            + httpServer.getConnectorAddress(0).getPort());\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      return webApp;\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
          "extendedDetails": {}
        }
      ]
    },
    "25f8f801d15e3d9f27f4a2a198262407203e14a5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2513. Host framework UIs in YARN for use with the ATS (jeagles)\n",
      "commitDate": "21/10/15 1:38 PM",
      "commitName": "25f8f801d15e3d9f27f4a2a198262407203e14a5",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "16/03/15 7:19 AM",
      "commitNameOld": "3da9a97cfbcc3a1c50aaf85b1a129d4d269cd5fd",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 219.26,
      "commitsBetweenForRepo": 1872,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,129 +1,12 @@\n     public WebApp start(WebApp webapp) {\n-      if (webapp \u003d\u003d null) {\n-        webapp \u003d new WebApp() {\n-          @Override\n-          public void setup() {\n-            // Defaults should be fine in usual cases\n-          }\n-        };\n-      }\n-      webapp.setName(name);\n-      webapp.setWebServices(wsName);\n-      String basePath \u003d \"/\" + name;\n-      webapp.setRedirectPath(basePath);\n-      List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n-      if (basePath.equals(\"/\")) { \n-        webapp.addServePathSpec(\"/*\");\n-        pathList.add(\"/*\");\n-      }  else {\n-        webapp.addServePathSpec(basePath);\n-        webapp.addServePathSpec(basePath + \"/*\");\n-        pathList.add(basePath + \"/*\");\n-      }\n-      if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n-        if (wsName.equals(\"/\")) { \n-          webapp.addServePathSpec(\"/*\");\n-          pathList.add(\"/*\");\n-        } else {\n-          webapp.addServePathSpec(\"/\" + wsName);\n-          webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n-          pathList.add(\"/\" + wsName + \"/*\");\n-        }\n-      }\n-      if (conf \u003d\u003d null) {\n-        conf \u003d new Configuration();\n-      }\n+      WebApp webApp \u003d build(webapp);\n+      HttpServer2 httpServer \u003d webApp.httpServer();\n       try {\n-        if (application !\u003d null) {\n-          webapp.setHostClass(application.getClass());\n-        } else {\n-          String cls \u003d inferHostClass();\n-          LOG.debug(\"setting webapp host class to {}\", cls);\n-          webapp.setHostClass(Class.forName(cls));\n-        }\n-        if (devMode) {\n-          if (port \u003e 0) {\n-            try {\n-              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n-              LOG.info(\"stopping existing webapp instance\");\n-              Thread.sleep(100);\n-            } catch (ConnectException e) {\n-              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n-            } catch (Exception e) {\n-              // should not be fatal\n-              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n-            }\n-          } else {\n-            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n-            System.exit(1);\n-          }\n-        }\n-        String httpScheme;\n-        if (this.httpPolicy \u003d\u003d null) {\n-          httpScheme \u003d WebAppUtils.getHttpSchemePrefix(conf);\n-        } else {\n-          httpScheme \u003d\n-              (httpPolicy \u003d\u003d Policy.HTTPS_ONLY) ? WebAppUtils.HTTPS_PREFIX\n-                  : WebAppUtils.HTTP_PREFIX;\n-        }\n-        HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n-            .setName(name)\n-            .addEndpoint(\n-                URI.create(httpScheme + bindAddress\n-                    + \":\" + port)).setConf(conf).setFindPort(findPort)\n-            .setACL(new AccessControlList(conf.get(\n-              YarnConfiguration.YARN_ADMIN_ACL, \n-              YarnConfiguration.DEFAULT_YARN_ADMIN_ACL)))\n-            .setPathSpec(pathList.toArray(new String[0]));\n-\n-        boolean hasSpnegoConf \u003d spnegoPrincipalKey !\u003d null\n-            \u0026\u0026 conf.get(spnegoPrincipalKey) !\u003d null \u0026\u0026 spnegoKeytabKey !\u003d null\n-            \u0026\u0026 conf.get(spnegoKeytabKey) !\u003d null;\n-\n-        if (hasSpnegoConf) {\n-          builder.setUsernameConfKey(spnegoPrincipalKey)\n-              .setKeytabConfKey(spnegoKeytabKey)\n-              .setSecurityEnabled(UserGroupInformation.isSecurityEnabled());\n-        }\n-\n-        if (httpScheme.equals(WebAppUtils.HTTPS_PREFIX)) {\n-          WebAppUtils.loadSslConfiguration(builder);\n-        }\n-\n-        HttpServer2 server \u003d builder.build();\n-\n-        for(ServletStruct struct: servlets) {\n-          server.addServlet(struct.name, struct.spec, struct.clazz);\n-        }\n-        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n-          server.setAttribute(entry.getKey(), entry.getValue());\n-        }\n-        HttpServer2.defineFilter(server.getWebAppContext(), \"guice\",\n-          GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n-\n-        webapp.setConf(conf);\n-        webapp.setHttpServer(server);\n-        server.start();\n-        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getConnectorAddress(0).getPort());\n-      } catch (ClassNotFoundException e) {\n-        throw new WebAppException(\"Error starting http server\", e);\n+        httpServer.start();\n+        LOG.info(\"Web app \" + name + \" started at \"\n+            + httpServer.getConnectorAddress(0).getPort());\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n-      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n-        @Override\n-        protected void configure() {\n-          if (api !\u003d null) {\n-            bind(api).toInstance(application);\n-          }\n-        }\n-      });\n-      LOG.info(\"Registered webapp guice modules\");\n-      // save a guice filter instance for webapp stop (mostly for unit tests)\n-      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n-      if (devMode) {\n-        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n-        LOG.info(\"in dev mode!\");\n-      }\n-      return webapp;\n+      return webApp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      WebApp webApp \u003d build(webapp);\n      HttpServer2 httpServer \u003d webApp.httpServer();\n      try {\n        httpServer.start();\n        LOG.info(\"Web app \" + name + \" started at \"\n            + httpServer.getConnectorAddress(0).getPort());\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      return webApp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "23bf6c72071782e3fd5a628e21495d6b974c7a9e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3100. Made YARN authorization pluggable. Contributed by Jian He.\n",
      "commitDate": "09/02/15 8:34 PM",
      "commitName": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "27/02/14 11:23 AM",
      "commitNameOld": "94b29b3348f5919a7599cc4b8e0466a4c72e95ae",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 347.38,
      "commitsBetweenForRepo": 2722,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,127 +1,129 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n       webapp.setWebServices(wsName);\n       String basePath \u003d \"/\" + name;\n       webapp.setRedirectPath(basePath);\n       List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n       if (basePath.equals(\"/\")) { \n         webapp.addServePathSpec(\"/*\");\n         pathList.add(\"/*\");\n       }  else {\n         webapp.addServePathSpec(basePath);\n         webapp.addServePathSpec(basePath + \"/*\");\n         pathList.add(basePath + \"/*\");\n       }\n       if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n         if (wsName.equals(\"/\")) { \n           webapp.addServePathSpec(\"/*\");\n           pathList.add(\"/*\");\n         } else {\n           webapp.addServePathSpec(\"/\" + wsName);\n           webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n           pathList.add(\"/\" + wsName + \"/*\");\n         }\n       }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n         String httpScheme;\n         if (this.httpPolicy \u003d\u003d null) {\n           httpScheme \u003d WebAppUtils.getHttpSchemePrefix(conf);\n         } else {\n           httpScheme \u003d\n               (httpPolicy \u003d\u003d Policy.HTTPS_ONLY) ? WebAppUtils.HTTPS_PREFIX\n                   : WebAppUtils.HTTP_PREFIX;\n         }\n         HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n             .setName(name)\n             .addEndpoint(\n                 URI.create(httpScheme + bindAddress\n                     + \":\" + port)).setConf(conf).setFindPort(findPort)\n-            .setACL(new AdminACLsManager(conf).getAdminAcl())\n+            .setACL(new AccessControlList(conf.get(\n+              YarnConfiguration.YARN_ADMIN_ACL, \n+              YarnConfiguration.DEFAULT_YARN_ADMIN_ACL)))\n             .setPathSpec(pathList.toArray(new String[0]));\n \n         boolean hasSpnegoConf \u003d spnegoPrincipalKey !\u003d null\n             \u0026\u0026 conf.get(spnegoPrincipalKey) !\u003d null \u0026\u0026 spnegoKeytabKey !\u003d null\n             \u0026\u0026 conf.get(spnegoKeytabKey) !\u003d null;\n \n         if (hasSpnegoConf) {\n           builder.setUsernameConfKey(spnegoPrincipalKey)\n               .setKeytabConfKey(spnegoKeytabKey)\n               .setSecurityEnabled(UserGroupInformation.isSecurityEnabled());\n         }\n \n         if (httpScheme.equals(WebAppUtils.HTTPS_PREFIX)) {\n           WebAppUtils.loadSslConfiguration(builder);\n         }\n \n         HttpServer2 server \u003d builder.build();\n \n         for(ServletStruct struct: servlets) {\n           server.addServlet(struct.name, struct.spec, struct.clazz);\n         }\n         for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n           server.setAttribute(entry.getKey(), entry.getValue());\n         }\n         HttpServer2.defineFilter(server.getWebAppContext(), \"guice\",\n           GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n \n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n         LOG.info(\"Web app /\"+ name +\" started at \"+ server.getConnectorAddress(0).getPort());\n       } catch (ClassNotFoundException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      webapp.setWebServices(wsName);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n        pathList.add(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n        pathList.add(basePath + \"/*\");\n      }\n      if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n        if (wsName.equals(\"/\")) { \n          webapp.addServePathSpec(\"/*\");\n          pathList.add(\"/*\");\n        } else {\n          webapp.addServePathSpec(\"/\" + wsName);\n          webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n          pathList.add(\"/\" + wsName + \"/*\");\n        }\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        String httpScheme;\n        if (this.httpPolicy \u003d\u003d null) {\n          httpScheme \u003d WebAppUtils.getHttpSchemePrefix(conf);\n        } else {\n          httpScheme \u003d\n              (httpPolicy \u003d\u003d Policy.HTTPS_ONLY) ? WebAppUtils.HTTPS_PREFIX\n                  : WebAppUtils.HTTP_PREFIX;\n        }\n        HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n            .setName(name)\n            .addEndpoint(\n                URI.create(httpScheme + bindAddress\n                    + \":\" + port)).setConf(conf).setFindPort(findPort)\n            .setACL(new AccessControlList(conf.get(\n              YarnConfiguration.YARN_ADMIN_ACL, \n              YarnConfiguration.DEFAULT_YARN_ADMIN_ACL)))\n            .setPathSpec(pathList.toArray(new String[0]));\n\n        boolean hasSpnegoConf \u003d spnegoPrincipalKey !\u003d null\n            \u0026\u0026 conf.get(spnegoPrincipalKey) !\u003d null \u0026\u0026 spnegoKeytabKey !\u003d null\n            \u0026\u0026 conf.get(spnegoKeytabKey) !\u003d null;\n\n        if (hasSpnegoConf) {\n          builder.setUsernameConfKey(spnegoPrincipalKey)\n              .setKeytabConfKey(spnegoKeytabKey)\n              .setSecurityEnabled(UserGroupInformation.isSecurityEnabled());\n        }\n\n        if (httpScheme.equals(WebAppUtils.HTTPS_PREFIX)) {\n          WebAppUtils.loadSslConfiguration(builder);\n        }\n\n        HttpServer2 server \u003d builder.build();\n\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        HttpServer2.defineFilter(server.getWebAppContext(), \"guice\",\n          GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getConnectorAddress(0).getPort());\n      } catch (ClassNotFoundException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "94b29b3348f5919a7599cc4b8e0466a4c72e95ae": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5770. Fixed MapReduce ApplicationMaster to correctly redirect to the YARN\u0027s web-app proxy with the correct scheme prefix. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1572711 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/02/14 11:23 AM",
      "commitName": "94b29b3348f5919a7599cc4b8e0466a4c72e95ae",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/02/14 12:01 PM",
      "commitNameOld": "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.97,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,119 +1,127 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n       webapp.setWebServices(wsName);\n       String basePath \u003d \"/\" + name;\n       webapp.setRedirectPath(basePath);\n       List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n       if (basePath.equals(\"/\")) { \n         webapp.addServePathSpec(\"/*\");\n         pathList.add(\"/*\");\n       }  else {\n         webapp.addServePathSpec(basePath);\n         webapp.addServePathSpec(basePath + \"/*\");\n         pathList.add(basePath + \"/*\");\n       }\n       if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n         if (wsName.equals(\"/\")) { \n           webapp.addServePathSpec(\"/*\");\n           pathList.add(\"/*\");\n         } else {\n           webapp.addServePathSpec(\"/\" + wsName);\n           webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n           pathList.add(\"/\" + wsName + \"/*\");\n         }\n       }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n+        String httpScheme;\n+        if (this.httpPolicy \u003d\u003d null) {\n+          httpScheme \u003d WebAppUtils.getHttpSchemePrefix(conf);\n+        } else {\n+          httpScheme \u003d\n+              (httpPolicy \u003d\u003d Policy.HTTPS_ONLY) ? WebAppUtils.HTTPS_PREFIX\n+                  : WebAppUtils.HTTP_PREFIX;\n+        }\n         HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n             .setName(name)\n             .addEndpoint(\n-                URI.create(WebAppUtils.getHttpSchemePrefix(conf) + bindAddress\n+                URI.create(httpScheme + bindAddress\n                     + \":\" + port)).setConf(conf).setFindPort(findPort)\n             .setACL(new AdminACLsManager(conf).getAdminAcl())\n             .setPathSpec(pathList.toArray(new String[0]));\n \n         boolean hasSpnegoConf \u003d spnegoPrincipalKey !\u003d null\n             \u0026\u0026 conf.get(spnegoPrincipalKey) !\u003d null \u0026\u0026 spnegoKeytabKey !\u003d null\n             \u0026\u0026 conf.get(spnegoKeytabKey) !\u003d null;\n \n         if (hasSpnegoConf) {\n           builder.setUsernameConfKey(spnegoPrincipalKey)\n               .setKeytabConfKey(spnegoKeytabKey)\n               .setSecurityEnabled(UserGroupInformation.isSecurityEnabled());\n         }\n \n-        if (YarnConfiguration.useHttps(conf)) {\n+        if (httpScheme.equals(WebAppUtils.HTTPS_PREFIX)) {\n           WebAppUtils.loadSslConfiguration(builder);\n         }\n \n         HttpServer2 server \u003d builder.build();\n \n         for(ServletStruct struct: servlets) {\n           server.addServlet(struct.name, struct.spec, struct.clazz);\n         }\n         for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n           server.setAttribute(entry.getKey(), entry.getValue());\n         }\n         HttpServer2.defineFilter(server.getWebAppContext(), \"guice\",\n           GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n \n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n         LOG.info(\"Web app /\"+ name +\" started at \"+ server.getConnectorAddress(0).getPort());\n       } catch (ClassNotFoundException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      webapp.setWebServices(wsName);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n        pathList.add(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n        pathList.add(basePath + \"/*\");\n      }\n      if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n        if (wsName.equals(\"/\")) { \n          webapp.addServePathSpec(\"/*\");\n          pathList.add(\"/*\");\n        } else {\n          webapp.addServePathSpec(\"/\" + wsName);\n          webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n          pathList.add(\"/\" + wsName + \"/*\");\n        }\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        String httpScheme;\n        if (this.httpPolicy \u003d\u003d null) {\n          httpScheme \u003d WebAppUtils.getHttpSchemePrefix(conf);\n        } else {\n          httpScheme \u003d\n              (httpPolicy \u003d\u003d Policy.HTTPS_ONLY) ? WebAppUtils.HTTPS_PREFIX\n                  : WebAppUtils.HTTP_PREFIX;\n        }\n        HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n            .setName(name)\n            .addEndpoint(\n                URI.create(httpScheme + bindAddress\n                    + \":\" + port)).setConf(conf).setFindPort(findPort)\n            .setACL(new AdminACLsManager(conf).getAdminAcl())\n            .setPathSpec(pathList.toArray(new String[0]));\n\n        boolean hasSpnegoConf \u003d spnegoPrincipalKey !\u003d null\n            \u0026\u0026 conf.get(spnegoPrincipalKey) !\u003d null \u0026\u0026 spnegoKeytabKey !\u003d null\n            \u0026\u0026 conf.get(spnegoKeytabKey) !\u003d null;\n\n        if (hasSpnegoConf) {\n          builder.setUsernameConfKey(spnegoPrincipalKey)\n              .setKeytabConfKey(spnegoKeytabKey)\n              .setSecurityEnabled(UserGroupInformation.isSecurityEnabled());\n        }\n\n        if (httpScheme.equals(WebAppUtils.HTTPS_PREFIX)) {\n          WebAppUtils.loadSslConfiguration(builder);\n        }\n\n        HttpServer2 server \u003d builder.build();\n\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        HttpServer2.defineFilter(server.getWebAppContext(), \"guice\",\n          GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getConnectorAddress(0).getPort());\n      } catch (ClassNotFoundException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1553. Modified YARN and MR to stop using HttpConfig.isSecure() and\ninstead rely on the http policy framework. And also fix some bugs related\nto https handling in YARN web-apps. Contributed by Haohui Mai.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1568501 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/14 12:01 PM",
      "commitName": "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/01/14 7:30 AM",
      "commitNameOld": "4de2bd3fbfd99139836db2778512768d6c9e70e8",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 16.19,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,112 +1,119 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n       webapp.setWebServices(wsName);\n       String basePath \u003d \"/\" + name;\n       webapp.setRedirectPath(basePath);\n       List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n       if (basePath.equals(\"/\")) { \n         webapp.addServePathSpec(\"/*\");\n         pathList.add(\"/*\");\n       }  else {\n         webapp.addServePathSpec(basePath);\n         webapp.addServePathSpec(basePath + \"/*\");\n         pathList.add(basePath + \"/*\");\n       }\n       if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n         if (wsName.equals(\"/\")) { \n           webapp.addServePathSpec(\"/*\");\n           pathList.add(\"/*\");\n         } else {\n           webapp.addServePathSpec(\"/\" + wsName);\n           webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n           pathList.add(\"/\" + wsName + \"/*\");\n         }\n       }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n-        HttpServer2.Builder builder \u003d new HttpServer2.Builder().setName(name)\n-            .addEndpoint(URI.create(\"http://\" + bindAddress + \":\" + port))\n-            .setConf(conf).setFindPort(findPort)\n+        HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n+            .setName(name)\n+            .addEndpoint(\n+                URI.create(WebAppUtils.getHttpSchemePrefix(conf) + bindAddress\n+                    + \":\" + port)).setConf(conf).setFindPort(findPort)\n             .setACL(new AdminACLsManager(conf).getAdminAcl())\n             .setPathSpec(pathList.toArray(new String[0]));\n \n         boolean hasSpnegoConf \u003d spnegoPrincipalKey !\u003d null\n             \u0026\u0026 conf.get(spnegoPrincipalKey) !\u003d null \u0026\u0026 spnegoKeytabKey !\u003d null\n             \u0026\u0026 conf.get(spnegoKeytabKey) !\u003d null;\n \n         if (hasSpnegoConf) {\n           builder.setUsernameConfKey(spnegoPrincipalKey)\n               .setKeytabConfKey(spnegoKeytabKey)\n               .setSecurityEnabled(UserGroupInformation.isSecurityEnabled());\n         }\n+\n+        if (YarnConfiguration.useHttps(conf)) {\n+          WebAppUtils.loadSslConfiguration(builder);\n+        }\n+\n         HttpServer2 server \u003d builder.build();\n \n         for(ServletStruct struct: servlets) {\n           server.addServlet(struct.name, struct.spec, struct.clazz);\n         }\n         for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n           server.setAttribute(entry.getKey(), entry.getValue());\n         }\n         HttpServer2.defineFilter(server.getWebAppContext(), \"guice\",\n           GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n \n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n         LOG.info(\"Web app /\"+ name +\" started at \"+ server.getConnectorAddress(0).getPort());\n       } catch (ClassNotFoundException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      webapp.setWebServices(wsName);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n        pathList.add(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n        pathList.add(basePath + \"/*\");\n      }\n      if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n        if (wsName.equals(\"/\")) { \n          webapp.addServePathSpec(\"/*\");\n          pathList.add(\"/*\");\n        } else {\n          webapp.addServePathSpec(\"/\" + wsName);\n          webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n          pathList.add(\"/\" + wsName + \"/*\");\n        }\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer2.Builder builder \u003d new HttpServer2.Builder()\n            .setName(name)\n            .addEndpoint(\n                URI.create(WebAppUtils.getHttpSchemePrefix(conf) + bindAddress\n                    + \":\" + port)).setConf(conf).setFindPort(findPort)\n            .setACL(new AdminACLsManager(conf).getAdminAcl())\n            .setPathSpec(pathList.toArray(new String[0]));\n\n        boolean hasSpnegoConf \u003d spnegoPrincipalKey !\u003d null\n            \u0026\u0026 conf.get(spnegoPrincipalKey) !\u003d null \u0026\u0026 spnegoKeytabKey !\u003d null\n            \u0026\u0026 conf.get(spnegoKeytabKey) !\u003d null;\n\n        if (hasSpnegoConf) {\n          builder.setUsernameConfKey(spnegoPrincipalKey)\n              .setKeytabConfKey(spnegoKeytabKey)\n              .setSecurityEnabled(UserGroupInformation.isSecurityEnabled());\n        }\n\n        if (YarnConfiguration.useHttps(conf)) {\n          WebAppUtils.loadSslConfiguration(builder);\n        }\n\n        HttpServer2 server \u003d builder.build();\n\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        HttpServer2.defineFilter(server.getWebAppContext(), \"guice\",\n          GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getConnectorAddress(0).getPort());\n      } catch (ClassNotFoundException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "4de2bd3fbfd99139836db2778512768d6c9e70e8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1600. RM does not startup when security is enabled without spnego configured. Contributed by Haohui Mai\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1562482 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/01/14 7:30 AM",
      "commitName": "4de2bd3fbfd99139836db2778512768d6c9e70e8",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "27/01/14 11:32 PM",
      "commitNameOld": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 1.33,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,110 +1,112 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n       webapp.setWebServices(wsName);\n       String basePath \u003d \"/\" + name;\n       webapp.setRedirectPath(basePath);\n       List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n       if (basePath.equals(\"/\")) { \n         webapp.addServePathSpec(\"/*\");\n         pathList.add(\"/*\");\n       }  else {\n         webapp.addServePathSpec(basePath);\n         webapp.addServePathSpec(basePath + \"/*\");\n         pathList.add(basePath + \"/*\");\n       }\n       if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n         if (wsName.equals(\"/\")) { \n           webapp.addServePathSpec(\"/*\");\n           pathList.add(\"/*\");\n         } else {\n           webapp.addServePathSpec(\"/\" + wsName);\n           webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n           pathList.add(\"/\" + wsName + \"/*\");\n         }\n       }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n         HttpServer2.Builder builder \u003d new HttpServer2.Builder().setName(name)\n             .addEndpoint(URI.create(\"http://\" + bindAddress + \":\" + port))\n             .setConf(conf).setFindPort(findPort)\n             .setACL(new AdminACLsManager(conf).getAdminAcl())\n             .setPathSpec(pathList.toArray(new String[0]));\n \n         boolean hasSpnegoConf \u003d spnegoPrincipalKey !\u003d null\n-            \u0026\u0026 spnegoKeytabKey !\u003d null;\n+            \u0026\u0026 conf.get(spnegoPrincipalKey) !\u003d null \u0026\u0026 spnegoKeytabKey !\u003d null\n+            \u0026\u0026 conf.get(spnegoKeytabKey) !\u003d null;\n+\n         if (hasSpnegoConf) {\n           builder.setUsernameConfKey(spnegoPrincipalKey)\n               .setKeytabConfKey(spnegoKeytabKey)\n               .setSecurityEnabled(UserGroupInformation.isSecurityEnabled());\n         }\n         HttpServer2 server \u003d builder.build();\n \n         for(ServletStruct struct: servlets) {\n           server.addServlet(struct.name, struct.spec, struct.clazz);\n         }\n         for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n           server.setAttribute(entry.getKey(), entry.getValue());\n         }\n         HttpServer2.defineFilter(server.getWebAppContext(), \"guice\",\n           GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n \n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n         LOG.info(\"Web app /\"+ name +\" started at \"+ server.getConnectorAddress(0).getPort());\n       } catch (ClassNotFoundException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      webapp.setWebServices(wsName);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n        pathList.add(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n        pathList.add(basePath + \"/*\");\n      }\n      if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n        if (wsName.equals(\"/\")) { \n          webapp.addServePathSpec(\"/*\");\n          pathList.add(\"/*\");\n        } else {\n          webapp.addServePathSpec(\"/\" + wsName);\n          webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n          pathList.add(\"/\" + wsName + \"/*\");\n        }\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer2.Builder builder \u003d new HttpServer2.Builder().setName(name)\n            .addEndpoint(URI.create(\"http://\" + bindAddress + \":\" + port))\n            .setConf(conf).setFindPort(findPort)\n            .setACL(new AdminACLsManager(conf).getAdminAcl())\n            .setPathSpec(pathList.toArray(new String[0]));\n\n        boolean hasSpnegoConf \u003d spnegoPrincipalKey !\u003d null\n            \u0026\u0026 conf.get(spnegoPrincipalKey) !\u003d null \u0026\u0026 spnegoKeytabKey !\u003d null\n            \u0026\u0026 conf.get(spnegoKeytabKey) !\u003d null;\n\n        if (hasSpnegoConf) {\n          builder.setUsernameConfKey(spnegoPrincipalKey)\n              .setKeytabConfKey(spnegoKeytabKey)\n              .setSecurityEnabled(UserGroupInformation.isSecurityEnabled());\n        }\n        HttpServer2 server \u003d builder.build();\n\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        HttpServer2.defineFilter(server.getWebAppContext(), \"guice\",\n          GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getConnectorAddress(0).getPort());\n      } catch (ClassNotFoundException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 11:32 PM",
      "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "27/12/13 10:55 PM",
      "commitNameOld": "1152e23ed03e8831a3167a729503aad3cbcb4ee7",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 31.03,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,110 +1,110 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n       webapp.setWebServices(wsName);\n       String basePath \u003d \"/\" + name;\n       webapp.setRedirectPath(basePath);\n       List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n       if (basePath.equals(\"/\")) { \n         webapp.addServePathSpec(\"/*\");\n         pathList.add(\"/*\");\n       }  else {\n         webapp.addServePathSpec(basePath);\n         webapp.addServePathSpec(basePath + \"/*\");\n         pathList.add(basePath + \"/*\");\n       }\n       if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n         if (wsName.equals(\"/\")) { \n           webapp.addServePathSpec(\"/*\");\n           pathList.add(\"/*\");\n         } else {\n           webapp.addServePathSpec(\"/\" + wsName);\n           webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n           pathList.add(\"/\" + wsName + \"/*\");\n         }\n       }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n-        HttpServer.Builder builder \u003d new HttpServer.Builder().setName(name)\n+        HttpServer2.Builder builder \u003d new HttpServer2.Builder().setName(name)\n             .addEndpoint(URI.create(\"http://\" + bindAddress + \":\" + port))\n             .setConf(conf).setFindPort(findPort)\n             .setACL(new AdminACLsManager(conf).getAdminAcl())\n             .setPathSpec(pathList.toArray(new String[0]));\n \n         boolean hasSpnegoConf \u003d spnegoPrincipalKey !\u003d null\n             \u0026\u0026 spnegoKeytabKey !\u003d null;\n         if (hasSpnegoConf) {\n           builder.setUsernameConfKey(spnegoPrincipalKey)\n               .setKeytabConfKey(spnegoKeytabKey)\n               .setSecurityEnabled(UserGroupInformation.isSecurityEnabled());\n         }\n-        HttpServer server \u003d builder.build();\n+        HttpServer2 server \u003d builder.build();\n \n         for(ServletStruct struct: servlets) {\n           server.addServlet(struct.name, struct.spec, struct.clazz);\n         }\n         for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n           server.setAttribute(entry.getKey(), entry.getValue());\n         }\n-        HttpServer.defineFilter(server.getWebAppContext(), \"guice\",\n+        HttpServer2.defineFilter(server.getWebAppContext(), \"guice\",\n           GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n \n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n         LOG.info(\"Web app /\"+ name +\" started at \"+ server.getConnectorAddress(0).getPort());\n       } catch (ClassNotFoundException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      webapp.setWebServices(wsName);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n        pathList.add(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n        pathList.add(basePath + \"/*\");\n      }\n      if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n        if (wsName.equals(\"/\")) { \n          webapp.addServePathSpec(\"/*\");\n          pathList.add(\"/*\");\n        } else {\n          webapp.addServePathSpec(\"/\" + wsName);\n          webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n          pathList.add(\"/\" + wsName + \"/*\");\n        }\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer2.Builder builder \u003d new HttpServer2.Builder().setName(name)\n            .addEndpoint(URI.create(\"http://\" + bindAddress + \":\" + port))\n            .setConf(conf).setFindPort(findPort)\n            .setACL(new AdminACLsManager(conf).getAdminAcl())\n            .setPathSpec(pathList.toArray(new String[0]));\n\n        boolean hasSpnegoConf \u003d spnegoPrincipalKey !\u003d null\n            \u0026\u0026 spnegoKeytabKey !\u003d null;\n        if (hasSpnegoConf) {\n          builder.setUsernameConfKey(spnegoPrincipalKey)\n              .setKeytabConfKey(spnegoKeytabKey)\n              .setSecurityEnabled(UserGroupInformation.isSecurityEnabled());\n        }\n        HttpServer2 server \u003d builder.build();\n\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        HttpServer2.defineFilter(server.getWebAppContext(), \"guice\",\n          GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getConnectorAddress(0).getPort());\n      } catch (ClassNotFoundException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "1152e23ed03e8831a3167a729503aad3cbcb4ee7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1463. Tests should avoid starting http-server where possible or creates spnego keytab/principals (vinodkv via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1553790 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/12/13 10:55 PM",
      "commitName": "1152e23ed03e8831a3167a729503aad3cbcb4ee7",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "27/11/13 10:20 AM",
      "commitNameOld": "2214871d916fdcae62aa51afbb5fd571f2808745",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 30.52,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,110 +1,110 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n       webapp.setWebServices(wsName);\n       String basePath \u003d \"/\" + name;\n       webapp.setRedirectPath(basePath);\n       List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n       if (basePath.equals(\"/\")) { \n         webapp.addServePathSpec(\"/*\");\n         pathList.add(\"/*\");\n       }  else {\n         webapp.addServePathSpec(basePath);\n         webapp.addServePathSpec(basePath + \"/*\");\n         pathList.add(basePath + \"/*\");\n       }\n       if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n         if (wsName.equals(\"/\")) { \n           webapp.addServePathSpec(\"/*\");\n           pathList.add(\"/*\");\n         } else {\n           webapp.addServePathSpec(\"/\" + wsName);\n           webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n           pathList.add(\"/\" + wsName + \"/*\");\n         }\n       }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n         HttpServer.Builder builder \u003d new HttpServer.Builder().setName(name)\n             .addEndpoint(URI.create(\"http://\" + bindAddress + \":\" + port))\n             .setConf(conf).setFindPort(findPort)\n             .setACL(new AdminACLsManager(conf).getAdminAcl())\n             .setPathSpec(pathList.toArray(new String[0]));\n \n         boolean hasSpnegoConf \u003d spnegoPrincipalKey !\u003d null\n             \u0026\u0026 spnegoKeytabKey !\u003d null;\n         if (hasSpnegoConf) {\n-          builder.setUsernameConfKey(conf.get(spnegoPrincipalKey))\n-              .setKeytabConfKey(conf.get(spnegoKeytabKey))\n+          builder.setUsernameConfKey(spnegoPrincipalKey)\n+              .setKeytabConfKey(spnegoKeytabKey)\n               .setSecurityEnabled(UserGroupInformation.isSecurityEnabled());\n         }\n         HttpServer server \u003d builder.build();\n \n         for(ServletStruct struct: servlets) {\n           server.addServlet(struct.name, struct.spec, struct.clazz);\n         }\n         for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n           server.setAttribute(entry.getKey(), entry.getValue());\n         }\n         HttpServer.defineFilter(server.getWebAppContext(), \"guice\",\n           GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n \n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n         LOG.info(\"Web app /\"+ name +\" started at \"+ server.getConnectorAddress(0).getPort());\n       } catch (ClassNotFoundException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      webapp.setWebServices(wsName);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n        pathList.add(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n        pathList.add(basePath + \"/*\");\n      }\n      if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n        if (wsName.equals(\"/\")) { \n          webapp.addServePathSpec(\"/*\");\n          pathList.add(\"/*\");\n        } else {\n          webapp.addServePathSpec(\"/\" + wsName);\n          webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n          pathList.add(\"/\" + wsName + \"/*\");\n        }\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer.Builder builder \u003d new HttpServer.Builder().setName(name)\n            .addEndpoint(URI.create(\"http://\" + bindAddress + \":\" + port))\n            .setConf(conf).setFindPort(findPort)\n            .setACL(new AdminACLsManager(conf).getAdminAcl())\n            .setPathSpec(pathList.toArray(new String[0]));\n\n        boolean hasSpnegoConf \u003d spnegoPrincipalKey !\u003d null\n            \u0026\u0026 spnegoKeytabKey !\u003d null;\n        if (hasSpnegoConf) {\n          builder.setUsernameConfKey(spnegoPrincipalKey)\n              .setKeytabConfKey(spnegoKeytabKey)\n              .setSecurityEnabled(UserGroupInformation.isSecurityEnabled());\n        }\n        HttpServer server \u003d builder.build();\n\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        HttpServer.defineFilter(server.getWebAppContext(), \"guice\",\n          GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getConnectorAddress(0).getPort());\n      } catch (ClassNotFoundException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "2214871d916fdcae62aa51afbb5fd571f2808745": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5545. Allow specifying endpoints for listeners in HttpServer. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546151 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/11/13 10:20 AM",
      "commitName": "2214871d916fdcae62aa51afbb5fd571f2808745",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "03/10/13 4:21 PM",
      "commitNameOld": "1608d8b5275dc6f6328f16d6949eca65bec27d05",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 54.79,
      "commitsBetweenForRepo": 340,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,122 +1,110 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n       webapp.setWebServices(wsName);\n       String basePath \u003d \"/\" + name;\n       webapp.setRedirectPath(basePath);\n       List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n       if (basePath.equals(\"/\")) { \n         webapp.addServePathSpec(\"/*\");\n         pathList.add(\"/*\");\n       }  else {\n         webapp.addServePathSpec(basePath);\n         webapp.addServePathSpec(basePath + \"/*\");\n         pathList.add(basePath + \"/*\");\n       }\n       if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n         if (wsName.equals(\"/\")) { \n           webapp.addServePathSpec(\"/*\");\n           pathList.add(\"/*\");\n         } else {\n           webapp.addServePathSpec(\"/\" + wsName);\n           webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n           pathList.add(\"/\" + wsName + \"/*\");\n         }\n       }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n-        HttpServer server \u003d\n-            new HttpServer(name, bindAddress, port, findPort, conf,\n-                new AdminACLsManager(conf).getAdminAcl(), null,\n-                pathList.toArray(new String[0])) {\n+        HttpServer.Builder builder \u003d new HttpServer.Builder().setName(name)\n+            .addEndpoint(URI.create(\"http://\" + bindAddress + \":\" + port))\n+            .setConf(conf).setFindPort(findPort)\n+            .setACL(new AdminACLsManager(conf).getAdminAcl())\n+            .setPathSpec(pathList.toArray(new String[0]));\n \n-              {\n-                if (UserGroupInformation.isSecurityEnabled()) {\n-                  boolean initSpnego \u003d true;\n-                  if (spnegoPrincipalKey \u003d\u003d null\n-                      || conf.get(spnegoPrincipalKey, \"\").isEmpty()) {\n-                    LOG.warn(\"Principal for spnego filter is not set\");\n-                    initSpnego \u003d false;\n-                  }\n-                  if (spnegoKeytabKey \u003d\u003d null\n-                      || conf.get(spnegoKeytabKey, \"\").isEmpty()) {\n-                    LOG.warn(\"Keytab for spnego filter is not set\");\n-                    initSpnego \u003d false;\n-                  }\n-                  if (initSpnego) {\n-                    LOG.info(\"Initializing spnego filter with principal key : \"\n-                        + spnegoPrincipalKey + \" keytab key : \"\n-                        + spnegoKeytabKey);\n-                    initSpnego(conf, spnegoPrincipalKey, spnegoKeytabKey);\n-                  }\n-                }\n-              }\n-            };\n+        boolean hasSpnegoConf \u003d spnegoPrincipalKey !\u003d null\n+            \u0026\u0026 spnegoKeytabKey !\u003d null;\n+        if (hasSpnegoConf) {\n+          builder.setUsernameConfKey(conf.get(spnegoPrincipalKey))\n+              .setKeytabConfKey(conf.get(spnegoKeytabKey))\n+              .setSecurityEnabled(UserGroupInformation.isSecurityEnabled());\n+        }\n+        HttpServer server \u003d builder.build();\n+\n         for(ServletStruct struct: servlets) {\n           server.addServlet(struct.name, struct.spec, struct.clazz);\n         }\n         for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n           server.setAttribute(entry.getKey(), entry.getValue());\n         }\n-        server.defineFilter(server.getWebAppContext(), \"guice\",\n+        HttpServer.defineFilter(server.getWebAppContext(), \"guice\",\n           GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n \n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n-        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n+        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getConnectorAddress(0).getPort());\n       } catch (ClassNotFoundException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      webapp.setWebServices(wsName);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n        pathList.add(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n        pathList.add(basePath + \"/*\");\n      }\n      if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n        if (wsName.equals(\"/\")) { \n          webapp.addServePathSpec(\"/*\");\n          pathList.add(\"/*\");\n        } else {\n          webapp.addServePathSpec(\"/\" + wsName);\n          webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n          pathList.add(\"/\" + wsName + \"/*\");\n        }\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer.Builder builder \u003d new HttpServer.Builder().setName(name)\n            .addEndpoint(URI.create(\"http://\" + bindAddress + \":\" + port))\n            .setConf(conf).setFindPort(findPort)\n            .setACL(new AdminACLsManager(conf).getAdminAcl())\n            .setPathSpec(pathList.toArray(new String[0]));\n\n        boolean hasSpnegoConf \u003d spnegoPrincipalKey !\u003d null\n            \u0026\u0026 spnegoKeytabKey !\u003d null;\n        if (hasSpnegoConf) {\n          builder.setUsernameConfKey(conf.get(spnegoPrincipalKey))\n              .setKeytabConfKey(conf.get(spnegoKeytabKey))\n              .setSecurityEnabled(UserGroupInformation.isSecurityEnabled());\n        }\n        HttpServer server \u003d builder.build();\n\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        HttpServer.defineFilter(server.getWebAppContext(), \"guice\",\n          GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getConnectorAddress(0).getPort());\n      } catch (ClassNotFoundException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "1608d8b5275dc6f6328f16d6949eca65bec27d05": {
      "type": "Ybodychange",
      "commitMessage": "YARN-621. Changed YARN web app to not add paths that can cause duplicate additions of authenticated filters there by causing kerberos replay errors. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529030 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/13 4:21 PM",
      "commitName": "1608d8b5275dc6f6328f16d6949eca65bec27d05",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/08/13 12:55 PM",
      "commitNameOld": "76cb07ee2077da61e0c07131bcbe7d0ddc73080e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 33.14,
      "commitsBetweenForRepo": 185,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,117 +1,122 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n       webapp.setWebServices(wsName);\n       String basePath \u003d \"/\" + name;\n       webapp.setRedirectPath(basePath);\n+      List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n       if (basePath.equals(\"/\")) { \n         webapp.addServePathSpec(\"/*\");\n+        pathList.add(\"/*\");\n       }  else {\n         webapp.addServePathSpec(basePath);\n         webapp.addServePathSpec(basePath + \"/*\");\n+        pathList.add(basePath + \"/*\");\n       }\n       if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n         if (wsName.equals(\"/\")) { \n           webapp.addServePathSpec(\"/*\");\n+          pathList.add(\"/*\");\n         } else {\n           webapp.addServePathSpec(\"/\" + wsName);\n           webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n+          pathList.add(\"/\" + wsName + \"/*\");\n         }\n       }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n         HttpServer server \u003d\n             new HttpServer(name, bindAddress, port, findPort, conf,\n                 new AdminACLsManager(conf).getAdminAcl(), null,\n-                webapp.getServePathSpecs()) {\n+                pathList.toArray(new String[0])) {\n \n               {\n                 if (UserGroupInformation.isSecurityEnabled()) {\n                   boolean initSpnego \u003d true;\n                   if (spnegoPrincipalKey \u003d\u003d null\n                       || conf.get(spnegoPrincipalKey, \"\").isEmpty()) {\n                     LOG.warn(\"Principal for spnego filter is not set\");\n                     initSpnego \u003d false;\n                   }\n                   if (spnegoKeytabKey \u003d\u003d null\n                       || conf.get(spnegoKeytabKey, \"\").isEmpty()) {\n                     LOG.warn(\"Keytab for spnego filter is not set\");\n                     initSpnego \u003d false;\n                   }\n                   if (initSpnego) {\n                     LOG.info(\"Initializing spnego filter with principal key : \"\n                         + spnegoPrincipalKey + \" keytab key : \"\n                         + spnegoKeytabKey);\n                     initSpnego(conf, spnegoPrincipalKey, spnegoKeytabKey);\n                   }\n                 }\n               }\n             };\n         for(ServletStruct struct: servlets) {\n           server.addServlet(struct.name, struct.spec, struct.clazz);\n         }\n         for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n           server.setAttribute(entry.getKey(), entry.getValue());\n         }\n         server.defineFilter(server.getWebAppContext(), \"guice\",\n           GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n \n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n         LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n       } catch (ClassNotFoundException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      webapp.setWebServices(wsName);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      List\u003cString\u003e pathList \u003d new ArrayList\u003cString\u003e();\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n        pathList.add(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n        pathList.add(basePath + \"/*\");\n      }\n      if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n        if (wsName.equals(\"/\")) { \n          webapp.addServePathSpec(\"/*\");\n          pathList.add(\"/*\");\n        } else {\n          webapp.addServePathSpec(\"/\" + wsName);\n          webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n          pathList.add(\"/\" + wsName + \"/*\");\n        }\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer server \u003d\n            new HttpServer(name, bindAddress, port, findPort, conf,\n                new AdminACLsManager(conf).getAdminAcl(), null,\n                pathList.toArray(new String[0])) {\n\n              {\n                if (UserGroupInformation.isSecurityEnabled()) {\n                  boolean initSpnego \u003d true;\n                  if (spnegoPrincipalKey \u003d\u003d null\n                      || conf.get(spnegoPrincipalKey, \"\").isEmpty()) {\n                    LOG.warn(\"Principal for spnego filter is not set\");\n                    initSpnego \u003d false;\n                  }\n                  if (spnegoKeytabKey \u003d\u003d null\n                      || conf.get(spnegoKeytabKey, \"\").isEmpty()) {\n                    LOG.warn(\"Keytab for spnego filter is not set\");\n                    initSpnego \u003d false;\n                  }\n                  if (initSpnego) {\n                    LOG.info(\"Initializing spnego filter with principal key : \"\n                        + spnegoPrincipalKey + \" keytab key : \"\n                        + spnegoKeytabKey);\n                    initSpnego(conf, spnegoPrincipalKey, spnegoKeytabKey);\n                  }\n                }\n              }\n            };\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        server.defineFilter(server.getWebAppContext(), \"guice\",\n          GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n      } catch (ClassNotFoundException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "76cb07ee2077da61e0c07131bcbe7d0ddc73080e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-981. Fixed YARN webapp so that /logs servlet works like before. Addendum patch to fix bugs in the first patch. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1519208 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/08/13 12:55 PM",
      "commitName": "76cb07ee2077da61e0c07131bcbe7d0ddc73080e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/08/13 4:36 PM",
      "commitNameOld": "914a0e51729ffe9816d007fc08640c44cc6bc9ee",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.85,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,118 +1,117 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n       webapp.setWebServices(wsName);\n       String basePath \u003d \"/\" + name;\n       webapp.setRedirectPath(basePath);\n       if (basePath.equals(\"/\")) { \n         webapp.addServePathSpec(\"/*\");\n       }  else {\n         webapp.addServePathSpec(basePath);\n         webapp.addServePathSpec(basePath + \"/*\");\n       }\n       if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n         if (wsName.equals(\"/\")) { \n           webapp.addServePathSpec(\"/*\");\n         } else {\n           webapp.addServePathSpec(\"/\" + wsName);\n           webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n         }\n       }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n         HttpServer server \u003d\n             new HttpServer(name, bindAddress, port, findPort, conf,\n                 new AdminACLsManager(conf).getAdminAcl(), null,\n                 webapp.getServePathSpecs()) {\n \n               {\n                 if (UserGroupInformation.isSecurityEnabled()) {\n                   boolean initSpnego \u003d true;\n                   if (spnegoPrincipalKey \u003d\u003d null\n                       || conf.get(spnegoPrincipalKey, \"\").isEmpty()) {\n                     LOG.warn(\"Principal for spnego filter is not set\");\n                     initSpnego \u003d false;\n                   }\n                   if (spnegoKeytabKey \u003d\u003d null\n                       || conf.get(spnegoKeytabKey, \"\").isEmpty()) {\n                     LOG.warn(\"Keytab for spnego filter is not set\");\n                     initSpnego \u003d false;\n                   }\n                   if (initSpnego) {\n                     LOG.info(\"Initializing spnego filter with principal key : \"\n                         + spnegoPrincipalKey + \" keytab key : \"\n                         + spnegoKeytabKey);\n                     initSpnego(conf, spnegoPrincipalKey, spnegoKeytabKey);\n                   }\n                 }\n               }\n             };\n         for(ServletStruct struct: servlets) {\n           server.addServlet(struct.name, struct.spec, struct.clazz);\n         }\n         for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n           server.setAttribute(entry.getKey(), entry.getValue());\n         }\n-        String webAppPath \u003d \"/\" + name + \"/*\";\n         server.defineFilter(server.getWebAppContext(), \"guice\",\n-          GuiceFilter.class.getName(), null, new String[] { webAppPath, \"/\" });\n+          GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n \n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n         LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n       } catch (ClassNotFoundException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      webapp.setWebServices(wsName);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n      }\n      if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n        if (wsName.equals(\"/\")) { \n          webapp.addServePathSpec(\"/*\");\n        } else {\n          webapp.addServePathSpec(\"/\" + wsName);\n          webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n        }\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer server \u003d\n            new HttpServer(name, bindAddress, port, findPort, conf,\n                new AdminACLsManager(conf).getAdminAcl(), null,\n                webapp.getServePathSpecs()) {\n\n              {\n                if (UserGroupInformation.isSecurityEnabled()) {\n                  boolean initSpnego \u003d true;\n                  if (spnegoPrincipalKey \u003d\u003d null\n                      || conf.get(spnegoPrincipalKey, \"\").isEmpty()) {\n                    LOG.warn(\"Principal for spnego filter is not set\");\n                    initSpnego \u003d false;\n                  }\n                  if (spnegoKeytabKey \u003d\u003d null\n                      || conf.get(spnegoKeytabKey, \"\").isEmpty()) {\n                    LOG.warn(\"Keytab for spnego filter is not set\");\n                    initSpnego \u003d false;\n                  }\n                  if (initSpnego) {\n                    LOG.info(\"Initializing spnego filter with principal key : \"\n                        + spnegoPrincipalKey + \" keytab key : \"\n                        + spnegoKeytabKey);\n                    initSpnego(conf, spnegoPrincipalKey, spnegoKeytabKey);\n                  }\n                }\n              }\n            };\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        server.defineFilter(server.getWebAppContext(), \"guice\",\n          GuiceFilter.class.getName(), null, new String[] { \"/*\" });\n\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n      } catch (ClassNotFoundException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "914a0e51729ffe9816d007fc08640c44cc6bc9ee": {
      "type": "Ybodychange",
      "commitMessage": "YARN-981. Fixed YARN webapp so that /logs servlet works like before. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1518030 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/08/13 4:36 PM",
      "commitName": "914a0e51729ffe9816d007fc08640c44cc6bc9ee",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/08/13 3:59 PM",
      "commitNameOld": "5adba5597ce071c2e84d0c9834e1d9e5e76f9bdb",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.03,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,115 +1,118 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n       webapp.setWebServices(wsName);\n       String basePath \u003d \"/\" + name;\n       webapp.setRedirectPath(basePath);\n       if (basePath.equals(\"/\")) { \n         webapp.addServePathSpec(\"/*\");\n       }  else {\n         webapp.addServePathSpec(basePath);\n         webapp.addServePathSpec(basePath + \"/*\");\n       }\n       if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n         if (wsName.equals(\"/\")) { \n           webapp.addServePathSpec(\"/*\");\n         } else {\n           webapp.addServePathSpec(\"/\" + wsName);\n           webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n         }\n       }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n         HttpServer server \u003d\n             new HttpServer(name, bindAddress, port, findPort, conf,\n                 new AdminACLsManager(conf).getAdminAcl(), null,\n                 webapp.getServePathSpecs()) {\n \n               {\n                 if (UserGroupInformation.isSecurityEnabled()) {\n                   boolean initSpnego \u003d true;\n                   if (spnegoPrincipalKey \u003d\u003d null\n                       || conf.get(spnegoPrincipalKey, \"\").isEmpty()) {\n                     LOG.warn(\"Principal for spnego filter is not set\");\n                     initSpnego \u003d false;\n                   }\n                   if (spnegoKeytabKey \u003d\u003d null\n                       || conf.get(spnegoKeytabKey, \"\").isEmpty()) {\n                     LOG.warn(\"Keytab for spnego filter is not set\");\n                     initSpnego \u003d false;\n                   }\n                   if (initSpnego) {\n                     LOG.info(\"Initializing spnego filter with principal key : \"\n                         + spnegoPrincipalKey + \" keytab key : \"\n                         + spnegoKeytabKey);\n                     initSpnego(conf, spnegoPrincipalKey, spnegoKeytabKey);\n                   }\n                 }\n               }\n             };\n         for(ServletStruct struct: servlets) {\n           server.addServlet(struct.name, struct.spec, struct.clazz);\n         }\n         for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n           server.setAttribute(entry.getKey(), entry.getValue());\n         }\n-        server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n+        String webAppPath \u003d \"/\" + name + \"/*\";\n+        server.defineFilter(server.getWebAppContext(), \"guice\",\n+          GuiceFilter.class.getName(), null, new String[] { webAppPath, \"/\" });\n+\n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n         LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n       } catch (ClassNotFoundException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      webapp.setWebServices(wsName);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n      }\n      if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n        if (wsName.equals(\"/\")) { \n          webapp.addServePathSpec(\"/*\");\n        } else {\n          webapp.addServePathSpec(\"/\" + wsName);\n          webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n        }\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer server \u003d\n            new HttpServer(name, bindAddress, port, findPort, conf,\n                new AdminACLsManager(conf).getAdminAcl(), null,\n                webapp.getServePathSpecs()) {\n\n              {\n                if (UserGroupInformation.isSecurityEnabled()) {\n                  boolean initSpnego \u003d true;\n                  if (spnegoPrincipalKey \u003d\u003d null\n                      || conf.get(spnegoPrincipalKey, \"\").isEmpty()) {\n                    LOG.warn(\"Principal for spnego filter is not set\");\n                    initSpnego \u003d false;\n                  }\n                  if (spnegoKeytabKey \u003d\u003d null\n                      || conf.get(spnegoKeytabKey, \"\").isEmpty()) {\n                    LOG.warn(\"Keytab for spnego filter is not set\");\n                    initSpnego \u003d false;\n                  }\n                  if (initSpnego) {\n                    LOG.info(\"Initializing spnego filter with principal key : \"\n                        + spnegoPrincipalKey + \" keytab key : \"\n                        + spnegoKeytabKey);\n                    initSpnego(conf, spnegoPrincipalKey, spnegoKeytabKey);\n                  }\n                }\n              }\n            };\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        String webAppPath \u003d \"/\" + name + \"/*\";\n        server.defineFilter(server.getWebAppContext(), \"guice\",\n          GuiceFilter.class.getName(), null, new String[] { webAppPath, \"/\" });\n\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n      } catch (ClassNotFoundException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "5adba5597ce071c2e84d0c9834e1d9e5e76f9bdb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1085. Addendum patch to address issues with the earlier patch.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/08/13 3:59 PM",
      "commitName": "5adba5597ce071c2e84d0c9834e1d9e5e76f9bdb",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "23/08/13 7:47 PM",
      "commitNameOld": "e86036662c139cd7e67e69a0215471b1ec724a05",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.84,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,113 +1,115 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n       webapp.setWebServices(wsName);\n       String basePath \u003d \"/\" + name;\n       webapp.setRedirectPath(basePath);\n       if (basePath.equals(\"/\")) { \n         webapp.addServePathSpec(\"/*\");\n       }  else {\n         webapp.addServePathSpec(basePath);\n         webapp.addServePathSpec(basePath + \"/*\");\n       }\n       if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n         if (wsName.equals(\"/\")) { \n           webapp.addServePathSpec(\"/*\");\n         } else {\n           webapp.addServePathSpec(\"/\" + wsName);\n           webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n         }\n       }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n         HttpServer server \u003d\n             new HttpServer(name, bindAddress, port, findPort, conf,\n                 new AdminACLsManager(conf).getAdminAcl(), null,\n                 webapp.getServePathSpecs()) {\n \n               {\n                 if (UserGroupInformation.isSecurityEnabled()) {\n                   boolean initSpnego \u003d true;\n-                  if (spnegoPrincipalKey \u003d\u003d null || spnegoPrincipalKey.isEmpty()) {\n+                  if (spnegoPrincipalKey \u003d\u003d null\n+                      || conf.get(spnegoPrincipalKey, \"\").isEmpty()) {\n                     LOG.warn(\"Principal for spnego filter is not set\");\n                     initSpnego \u003d false;\n                   }\n-                  if (spnegoKeytabKey \u003d\u003d null || spnegoKeytabKey.isEmpty()) {\n+                  if (spnegoKeytabKey \u003d\u003d null\n+                      || conf.get(spnegoKeytabKey, \"\").isEmpty()) {\n                     LOG.warn(\"Keytab for spnego filter is not set\");\n                     initSpnego \u003d false;\n                   }\n                   if (initSpnego) {\n                     LOG.info(\"Initializing spnego filter with principal key : \"\n                         + spnegoPrincipalKey + \" keytab key : \"\n                         + spnegoKeytabKey);\n                     initSpnego(conf, spnegoPrincipalKey, spnegoKeytabKey);\n                   }\n                 }\n               }\n             };\n         for(ServletStruct struct: servlets) {\n           server.addServlet(struct.name, struct.spec, struct.clazz);\n         }\n         for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n           server.setAttribute(entry.getKey(), entry.getValue());\n         }\n         server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n         LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n       } catch (ClassNotFoundException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      webapp.setWebServices(wsName);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n      }\n      if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n        if (wsName.equals(\"/\")) { \n          webapp.addServePathSpec(\"/*\");\n        } else {\n          webapp.addServePathSpec(\"/\" + wsName);\n          webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n        }\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer server \u003d\n            new HttpServer(name, bindAddress, port, findPort, conf,\n                new AdminACLsManager(conf).getAdminAcl(), null,\n                webapp.getServePathSpecs()) {\n\n              {\n                if (UserGroupInformation.isSecurityEnabled()) {\n                  boolean initSpnego \u003d true;\n                  if (spnegoPrincipalKey \u003d\u003d null\n                      || conf.get(spnegoPrincipalKey, \"\").isEmpty()) {\n                    LOG.warn(\"Principal for spnego filter is not set\");\n                    initSpnego \u003d false;\n                  }\n                  if (spnegoKeytabKey \u003d\u003d null\n                      || conf.get(spnegoKeytabKey, \"\").isEmpty()) {\n                    LOG.warn(\"Keytab for spnego filter is not set\");\n                    initSpnego \u003d false;\n                  }\n                  if (initSpnego) {\n                    LOG.info(\"Initializing spnego filter with principal key : \"\n                        + spnegoPrincipalKey + \" keytab key : \"\n                        + spnegoKeytabKey);\n                    initSpnego(conf, spnegoPrincipalKey, spnegoKeytabKey);\n                  }\n                }\n              }\n            };\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n      } catch (ClassNotFoundException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "e86036662c139cd7e67e69a0215471b1ec724a05": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1085. Modified YARN and MR2 web-apps to do HTTP authentication in secure setup with kerberos. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517101 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/08/13 7:47 PM",
      "commitName": "e86036662c139cd7e67e69a0215471b1ec724a05",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/06/13 8:32 PM",
      "commitNameOld": "f5f8f3bca4eeaedeff8181812452ec363c4db744",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 67.97,
      "commitsBetweenForRepo": 411,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,113 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n       webapp.setWebServices(wsName);\n       String basePath \u003d \"/\" + name;\n       webapp.setRedirectPath(basePath);\n       if (basePath.equals(\"/\")) { \n         webapp.addServePathSpec(\"/*\");\n       }  else {\n         webapp.addServePathSpec(basePath);\n         webapp.addServePathSpec(basePath + \"/*\");\n       }\n       if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n         if (wsName.equals(\"/\")) { \n           webapp.addServePathSpec(\"/*\");\n         } else {\n           webapp.addServePathSpec(\"/\" + wsName);\n           webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n         }\n       }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n         HttpServer server \u003d\n-            new HttpServer(name, bindAddress, port, findPort, conf, \n-            new AdminACLsManager(conf).getAdminAcl(), null, webapp.getServePathSpecs());\n+            new HttpServer(name, bindAddress, port, findPort, conf,\n+                new AdminACLsManager(conf).getAdminAcl(), null,\n+                webapp.getServePathSpecs()) {\n+\n+              {\n+                if (UserGroupInformation.isSecurityEnabled()) {\n+                  boolean initSpnego \u003d true;\n+                  if (spnegoPrincipalKey \u003d\u003d null || spnegoPrincipalKey.isEmpty()) {\n+                    LOG.warn(\"Principal for spnego filter is not set\");\n+                    initSpnego \u003d false;\n+                  }\n+                  if (spnegoKeytabKey \u003d\u003d null || spnegoKeytabKey.isEmpty()) {\n+                    LOG.warn(\"Keytab for spnego filter is not set\");\n+                    initSpnego \u003d false;\n+                  }\n+                  if (initSpnego) {\n+                    LOG.info(\"Initializing spnego filter with principal key : \"\n+                        + spnegoPrincipalKey + \" keytab key : \"\n+                        + spnegoKeytabKey);\n+                    initSpnego(conf, spnegoPrincipalKey, spnegoKeytabKey);\n+                  }\n+                }\n+              }\n+            };\n         for(ServletStruct struct: servlets) {\n           server.addServlet(struct.name, struct.spec, struct.clazz);\n         }\n         for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n           server.setAttribute(entry.getKey(), entry.getValue());\n         }\n         server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n         LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n       } catch (ClassNotFoundException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      webapp.setWebServices(wsName);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n      }\n      if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n        if (wsName.equals(\"/\")) { \n          webapp.addServePathSpec(\"/*\");\n        } else {\n          webapp.addServePathSpec(\"/\" + wsName);\n          webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n        }\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer server \u003d\n            new HttpServer(name, bindAddress, port, findPort, conf,\n                new AdminACLsManager(conf).getAdminAcl(), null,\n                webapp.getServePathSpecs()) {\n\n              {\n                if (UserGroupInformation.isSecurityEnabled()) {\n                  boolean initSpnego \u003d true;\n                  if (spnegoPrincipalKey \u003d\u003d null || spnegoPrincipalKey.isEmpty()) {\n                    LOG.warn(\"Principal for spnego filter is not set\");\n                    initSpnego \u003d false;\n                  }\n                  if (spnegoKeytabKey \u003d\u003d null || spnegoKeytabKey.isEmpty()) {\n                    LOG.warn(\"Keytab for spnego filter is not set\");\n                    initSpnego \u003d false;\n                  }\n                  if (initSpnego) {\n                    LOG.info(\"Initializing spnego filter with principal key : \"\n                        + spnegoPrincipalKey + \" keytab key : \"\n                        + spnegoKeytabKey);\n                    initSpnego(conf, spnegoPrincipalKey, spnegoKeytabKey);\n                  }\n                }\n              }\n            };\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n      } catch (ClassNotFoundException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      webapp.setWebServices(wsName);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n      }\n      if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n        if (wsName.equals(\"/\")) { \n          webapp.addServePathSpec(\"/*\");\n        } else {\n          webapp.addServePathSpec(\"/\" + wsName);\n          webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n        }\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer server \u003d\n            new HttpServer(name, bindAddress, port, findPort, conf, \n            new AdminACLsManager(conf).getAdminAcl(), null, webapp.getServePathSpecs());\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n      } catch (ClassNotFoundException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java"
      }
    },
    "0ea8570be578be60e2f32849900a1c50506d78d3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2863. Support web services for YARN and MR components. (Thomas Graves via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213975 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 3:05 PM",
      "commitName": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "28/10/11 12:44 AM",
      "commitNameOld": "a39992ea6345a9f29814587604ac61b21c99fc3e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 46.64,
      "commitsBetweenForRepo": 272,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,91 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n+      webapp.setWebServices(wsName);\n       String basePath \u003d \"/\" + name;\n       webapp.setRedirectPath(basePath);\n       if (basePath.equals(\"/\")) { \n         webapp.addServePathSpec(\"/*\");\n       }  else {\n         webapp.addServePathSpec(basePath);\n         webapp.addServePathSpec(basePath + \"/*\");\n       }\n+      if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n+        if (wsName.equals(\"/\")) { \n+          webapp.addServePathSpec(\"/*\");\n+        } else {\n+          webapp.addServePathSpec(\"/\" + wsName);\n+          webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n+        }\n+      }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n         HttpServer server \u003d\n             new HttpServer(name, bindAddress, port, findPort, conf, \n             new AdminACLsManager(conf).getAdminAcl(), null, webapp.getServePathSpecs());\n         for(ServletStruct struct: servlets) {\n           server.addServlet(struct.name, struct.spec, struct.clazz);\n         }\n         for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n           server.setAttribute(entry.getKey(), entry.getValue());\n         }\n         server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n         LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n       } catch (ClassNotFoundException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      webapp.setWebServices(wsName);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n      }\n      if (wsName !\u003d null \u0026\u0026 !wsName.equals(basePath)) {\n        if (wsName.equals(\"/\")) { \n          webapp.addServePathSpec(\"/*\");\n        } else {\n          webapp.addServePathSpec(\"/\" + wsName);\n          webapp.addServePathSpec(\"/\" + wsName + \"/*\");\n        }\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer server \u003d\n            new HttpServer(name, bindAddress, port, findPort, conf, \n            new AdminACLsManager(conf).getAdminAcl(), null, webapp.getServePathSpecs());\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n      } catch (ClassNotFoundException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "a39992ea6345a9f29814587604ac61b21c99fc3e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3296. Fixed the remaining nine FindBugs warnings. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190187 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/11 12:44 AM",
      "commitName": "a39992ea6345a9f29814587604ac61b21c99fc3e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/10/11 11:11 PM",
      "commitNameOld": "5fadd4de2a73fcf35eab78d6c078e62b5a3c60d5",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,82 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n       String basePath \u003d \"/\" + name;\n       webapp.setRedirectPath(basePath);\n       if (basePath.equals(\"/\")) { \n         webapp.addServePathSpec(\"/*\");\n       }  else {\n         webapp.addServePathSpec(basePath);\n         webapp.addServePathSpec(basePath + \"/*\");\n       }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n         HttpServer server \u003d\n             new HttpServer(name, bindAddress, port, findPort, conf, \n             new AdminACLsManager(conf).getAdminAcl(), null, webapp.getServePathSpecs());\n         for(ServletStruct struct: servlets) {\n           server.addServlet(struct.name, struct.spec, struct.clazz);\n         }\n         for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n           server.setAttribute(entry.getKey(), entry.getValue());\n         }\n         server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n         LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n-      } catch (Exception e) {\n+      } catch (ClassNotFoundException e) {\n+        throw new WebAppException(\"Error starting http server\", e);\n+      } catch (IOException e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer server \u003d\n            new HttpServer(name, bindAddress, port, findPort, conf, \n            new AdminACLsManager(conf).getAdminAcl(), null, webapp.getServePathSpecs());\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n      } catch (ClassNotFoundException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      } catch (IOException e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "5fadd4de2a73fcf35eab78d6c078e62b5a3c60d5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3175. Add authorization to admin web-pages such as /stacks, /jmx etc. Contributed by Jonathan Eagles.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189619 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/10/11 11:11 PM",
      "commitName": "5fadd4de2a73fcf35eab78d6c078e62b5a3c60d5",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "25/10/11 11:29 PM",
      "commitNameOld": "8aabd3d4e67cad8dc7e46f5339981135badc7421",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.99,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,80 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n       String basePath \u003d \"/\" + name;\n       webapp.setRedirectPath(basePath);\n       if (basePath.equals(\"/\")) { \n         webapp.addServePathSpec(\"/*\");\n       }  else {\n         webapp.addServePathSpec(basePath);\n         webapp.addServePathSpec(basePath + \"/*\");\n       }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n         HttpServer server \u003d\n             new HttpServer(name, bindAddress, port, findPort, conf, \n-            webapp.getServePathSpecs());\n+            new AdminACLsManager(conf).getAdminAcl(), null, webapp.getServePathSpecs());\n         for(ServletStruct struct: servlets) {\n           server.addServlet(struct.name, struct.spec, struct.clazz);\n         }\n         for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n           server.setAttribute(entry.getKey(), entry.getValue());\n         }\n         server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n         LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n       } catch (Exception e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer server \u003d\n            new HttpServer(name, bindAddress, port, findPort, conf, \n            new AdminACLsManager(conf).getAdminAcl(), null, webapp.getServePathSpecs());\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n      } catch (Exception e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "8aabd3d4e67cad8dc7e46f5339981135badc7421": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2858. Added a WebApp Proxy for applications. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189036 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/10/11 11:29 PM",
      "commitName": "8aabd3d4e67cad8dc7e46f5339981135badc7421",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "27/09/11 10:03 AM",
      "commitNameOld": "87b969c83541c6719abcc1dabc38dc41704876ee",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 28.56,
      "commitsBetweenForRepo": 233,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,80 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n       String basePath \u003d \"/\" + name;\n       webapp.setRedirectPath(basePath);\n       if (basePath.equals(\"/\")) { \n         webapp.addServePathSpec(\"/*\");\n       }  else {\n         webapp.addServePathSpec(basePath);\n         webapp.addServePathSpec(basePath + \"/*\");\n       }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n         HttpServer server \u003d\n             new HttpServer(name, bindAddress, port, findPort, conf, \n             webapp.getServePathSpecs());\n+        for(ServletStruct struct: servlets) {\n+          server.addServlet(struct.name, struct.spec, struct.clazz);\n+        }\n+        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n+          server.setAttribute(entry.getKey(), entry.getValue());\n+        }\n         server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n         LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n       } catch (Exception e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer server \u003d\n            new HttpServer(name, bindAddress, port, findPort, conf, \n            webapp.getServePathSpecs());\n        for(ServletStruct struct: servlets) {\n          server.addServlet(struct.name, struct.spec, struct.clazz);\n        }\n        for(Map.Entry\u003cString, Object\u003e entry : attributes.entrySet()) {\n          server.setAttribute(entry.getKey(), entry.getValue());\n        }\n        server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n      } catch (Exception e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "87b969c83541c6719abcc1dabc38dc41704876ee": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2999. Fix YARN webapp framework to properly filter servlet paths. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176469 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/11 10:03 AM",
      "commitName": "87b969c83541c6719abcc1dabc38dc41704876ee",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "08/09/11 11:26 AM",
      "commitNameOld": "1f46b991da9b91585608a0babd3eda39485dce09",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 18.94,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,74 @@\n     public WebApp start(WebApp webapp) {\n       if (webapp \u003d\u003d null) {\n         webapp \u003d new WebApp() {\n           @Override\n           public void setup() {\n             // Defaults should be fine in usual cases\n           }\n         };\n       }\n       webapp.setName(name);\n+      String basePath \u003d \"/\" + name;\n+      webapp.setRedirectPath(basePath);\n+      if (basePath.equals(\"/\")) { \n+        webapp.addServePathSpec(\"/*\");\n+      }  else {\n+        webapp.addServePathSpec(basePath);\n+        webapp.addServePathSpec(basePath + \"/*\");\n+      }\n       if (conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       try {\n         if (application !\u003d null) {\n           webapp.setHostClass(application.getClass());\n         } else {\n           String cls \u003d inferHostClass();\n           LOG.debug(\"setting webapp host class to {}\", cls);\n           webapp.setHostClass(Class.forName(cls));\n         }\n         if (devMode) {\n           if (port \u003e 0) {\n             try {\n               new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n               LOG.info(\"stopping existing webapp instance\");\n               Thread.sleep(100);\n             } catch (ConnectException e) {\n               LOG.info(\"no existing webapp instance found: {}\", e.toString());\n             } catch (Exception e) {\n               // should not be fatal\n               LOG.warn(\"error stopping existing instance: {}\", e.toString());\n             }\n           } else {\n             LOG.error(\"dev mode does NOT work with ephemeral port!\");\n             System.exit(1);\n           }\n         }\n         HttpServer server \u003d\n-            new HttpServer(name, bindAddress, port, findPort, conf);\n+            new HttpServer(name, bindAddress, port, findPort, conf, \n+            webapp.getServePathSpecs());\n         server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n         webapp.setConf(conf);\n         webapp.setHttpServer(server);\n         server.start();\n         LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n       } catch (Exception e) {\n         throw new WebAppException(\"Error starting http server\", e);\n       }\n       Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n         @Override\n         protected void configure() {\n           if (api !\u003d null) {\n             bind(api).toInstance(application);\n           }\n         }\n       });\n       LOG.info(\"Registered webapp guice modules\");\n       // save a guice filter instance for webapp stop (mostly for unit tests)\n       webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n       if (devMode) {\n         injector.getInstance(Dispatcher.class).setDevMode(devMode);\n         LOG.info(\"in dev mode!\");\n       }\n       return webapp;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      String basePath \u003d \"/\" + name;\n      webapp.setRedirectPath(basePath);\n      if (basePath.equals(\"/\")) { \n        webapp.addServePathSpec(\"/*\");\n      }  else {\n        webapp.addServePathSpec(basePath);\n        webapp.addServePathSpec(basePath + \"/*\");\n      }\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer server \u003d\n            new HttpServer(name, bindAddress, port, findPort, conf, \n            webapp.getServePathSpecs());\n        server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n      } catch (Exception e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer server \u003d\n            new HttpServer(name, bindAddress, port, findPort, conf);\n        server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n      } catch (Exception e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,65 @@\n+    public WebApp start(WebApp webapp) {\n+      if (webapp \u003d\u003d null) {\n+        webapp \u003d new WebApp() {\n+          @Override\n+          public void setup() {\n+            // Defaults should be fine in usual cases\n+          }\n+        };\n+      }\n+      webapp.setName(name);\n+      if (conf \u003d\u003d null) {\n+        conf \u003d new Configuration();\n+      }\n+      try {\n+        if (application !\u003d null) {\n+          webapp.setHostClass(application.getClass());\n+        } else {\n+          String cls \u003d inferHostClass();\n+          LOG.debug(\"setting webapp host class to {}\", cls);\n+          webapp.setHostClass(Class.forName(cls));\n+        }\n+        if (devMode) {\n+          if (port \u003e 0) {\n+            try {\n+              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n+              LOG.info(\"stopping existing webapp instance\");\n+              Thread.sleep(100);\n+            } catch (ConnectException e) {\n+              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n+            } catch (Exception e) {\n+              // should not be fatal\n+              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n+            }\n+          } else {\n+            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n+            System.exit(1);\n+          }\n+        }\n+        HttpServer server \u003d\n+            new HttpServer(name, bindAddress, port, findPort, conf);\n+        server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n+        webapp.setConf(conf);\n+        webapp.setHttpServer(server);\n+        server.start();\n+        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n+      } catch (Exception e) {\n+        throw new WebAppException(\"Error starting http server\", e);\n+      }\n+      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n+        @Override\n+        protected void configure() {\n+          if (api !\u003d null) {\n+            bind(api).toInstance(application);\n+          }\n+        }\n+      });\n+      LOG.info(\"Registered webapp guice modules\");\n+      // save a guice filter instance for webapp stop (mostly for unit tests)\n+      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n+      if (devMode) {\n+        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n+        LOG.info(\"in dev mode!\");\n+      }\n+      return webapp;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public WebApp start(WebApp webapp) {\n      if (webapp \u003d\u003d null) {\n        webapp \u003d new WebApp() {\n          @Override\n          public void setup() {\n            // Defaults should be fine in usual cases\n          }\n        };\n      }\n      webapp.setName(name);\n      if (conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      try {\n        if (application !\u003d null) {\n          webapp.setHostClass(application.getClass());\n        } else {\n          String cls \u003d inferHostClass();\n          LOG.debug(\"setting webapp host class to {}\", cls);\n          webapp.setHostClass(Class.forName(cls));\n        }\n        if (devMode) {\n          if (port \u003e 0) {\n            try {\n              new URL(\"http://localhost:\"+ port +\"/__stop\").getContent();\n              LOG.info(\"stopping existing webapp instance\");\n              Thread.sleep(100);\n            } catch (ConnectException e) {\n              LOG.info(\"no existing webapp instance found: {}\", e.toString());\n            } catch (Exception e) {\n              // should not be fatal\n              LOG.warn(\"error stopping existing instance: {}\", e.toString());\n            }\n          } else {\n            LOG.error(\"dev mode does NOT work with ephemeral port!\");\n            System.exit(1);\n          }\n        }\n        HttpServer server \u003d\n            new HttpServer(name, bindAddress, port, findPort, conf);\n        server.addGlobalFilter(\"guice\", GuiceFilter.class.getName(), null);\n        webapp.setConf(conf);\n        webapp.setHttpServer(server);\n        server.start();\n        LOG.info(\"Web app /\"+ name +\" started at \"+ server.getPort());\n      } catch (Exception e) {\n        throw new WebAppException(\"Error starting http server\", e);\n      }\n      Injector injector \u003d Guice.createInjector(webapp, new AbstractModule() {\n        @Override\n        protected void configure() {\n          if (api !\u003d null) {\n            bind(api).toInstance(application);\n          }\n        }\n      });\n      LOG.info(\"Registered webapp guice modules\");\n      // save a guice filter instance for webapp stop (mostly for unit tests)\n      webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));\n      if (devMode) {\n        injector.getInstance(Dispatcher.class).setDevMode(devMode);\n        LOG.info(\"in dev mode!\");\n      }\n      return webapp;\n    }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/WebApps.java"
    }
  }
}