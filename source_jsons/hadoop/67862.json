{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OptionsParser.java",
  "functionName": "parseSourceAndTargetPaths",
  "functionId": "parseSourceAndTargetPaths___command-CommandLine",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/OptionsParser.java",
  "functionStartLine": 248,
  "functionEndLine": 283,
  "numCommitsSeen": 29,
  "timeTaken": 1644,
  "changeHistory": [
    "26172a94d6431e70d7fe15d66be9a7e195f79f60",
    "0790275f058b0cf41780ad337c9150a1e8ebebc6"
  ],
  "changeHistoryShort": {
    "26172a94d6431e70d7fe15d66be9a7e195f79f60": "Ymultichange(Yreturntypechange,Ybodychange)",
    "0790275f058b0cf41780ad337c9150a1e8ebebc6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "26172a94d6431e70d7fe15d66be9a7e195f79f60": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-14267. Make DistCpOptions immutable. Contributed by Mingliang Liu\n",
      "commitDate": "31/03/17 8:04 PM",
      "commitName": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
      "commitAuthor": "Mingliang Liu",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-14267. Make DistCpOptions immutable. Contributed by Mingliang Liu\n",
          "commitDate": "31/03/17 8:04 PM",
          "commitName": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "30/03/17 5:38 PM",
          "commitNameOld": "bf3fb585aaf2b179836e139c041fc87920a3c886",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,36 @@\n-  private static DistCpOptions parseSourceAndTargetPaths(\n+  private static DistCpOptions.Builder parseSourceAndTargetPaths(\n       CommandLine command) {\n-    DistCpOptions option;\n     Path targetPath;\n     List\u003cPath\u003e sourcePaths \u003d new ArrayList\u003cPath\u003e();\n \n     String[] leftOverArgs \u003d command.getArgs();\n     if (leftOverArgs \u003d\u003d null || leftOverArgs.length \u003c 1) {\n       throw new IllegalArgumentException(\"Target path not specified\");\n     }\n \n     //Last Argument is the target path\n     targetPath \u003d new Path(leftOverArgs[leftOverArgs.length - 1].trim());\n \n     //Copy any source paths in the arguments to the list\n     for (int index \u003d 0; index \u003c leftOverArgs.length - 1; index++) {\n       sourcePaths.add(new Path(leftOverArgs[index].trim()));\n     }\n \n     /* If command has source file listing, use it else, fall back on source\n        paths in args.  If both are present, throw exception and bail */\n     if (command.hasOption(\n         DistCpOptionSwitch.SOURCE_FILE_LISTING.getSwitch())) {\n       if (!sourcePaths.isEmpty()) {\n         throw new IllegalArgumentException(\"Both source file listing and \" +\n             \"source paths present\");\n       }\n-      option \u003d new DistCpOptions(new Path(getVal(command, DistCpOptionSwitch.\n-          SOURCE_FILE_LISTING.getSwitch())), targetPath);\n+      return new DistCpOptions.Builder(new Path(getVal(command,\n+          DistCpOptionSwitch.SOURCE_FILE_LISTING.getSwitch())), targetPath);\n     } else {\n       if (sourcePaths.isEmpty()) {\n         throw new IllegalArgumentException(\"Neither source file listing nor \" +\n             \"source paths present\");\n       }\n-      option \u003d new DistCpOptions(sourcePaths, targetPath);\n+      return new DistCpOptions.Builder(sourcePaths, targetPath);\n     }\n-    return option;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static DistCpOptions.Builder parseSourceAndTargetPaths(\n      CommandLine command) {\n    Path targetPath;\n    List\u003cPath\u003e sourcePaths \u003d new ArrayList\u003cPath\u003e();\n\n    String[] leftOverArgs \u003d command.getArgs();\n    if (leftOverArgs \u003d\u003d null || leftOverArgs.length \u003c 1) {\n      throw new IllegalArgumentException(\"Target path not specified\");\n    }\n\n    //Last Argument is the target path\n    targetPath \u003d new Path(leftOverArgs[leftOverArgs.length - 1].trim());\n\n    //Copy any source paths in the arguments to the list\n    for (int index \u003d 0; index \u003c leftOverArgs.length - 1; index++) {\n      sourcePaths.add(new Path(leftOverArgs[index].trim()));\n    }\n\n    /* If command has source file listing, use it else, fall back on source\n       paths in args.  If both are present, throw exception and bail */\n    if (command.hasOption(\n        DistCpOptionSwitch.SOURCE_FILE_LISTING.getSwitch())) {\n      if (!sourcePaths.isEmpty()) {\n        throw new IllegalArgumentException(\"Both source file listing and \" +\n            \"source paths present\");\n      }\n      return new DistCpOptions.Builder(new Path(getVal(command,\n          DistCpOptionSwitch.SOURCE_FILE_LISTING.getSwitch())), targetPath);\n    } else {\n      if (sourcePaths.isEmpty()) {\n        throw new IllegalArgumentException(\"Neither source file listing nor \" +\n            \"source paths present\");\n      }\n      return new DistCpOptions.Builder(sourcePaths, targetPath);\n    }\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/OptionsParser.java",
          "extendedDetails": {
            "oldValue": "DistCpOptions",
            "newValue": "DistCpOptions.Builder"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14267. Make DistCpOptions immutable. Contributed by Mingliang Liu\n",
          "commitDate": "31/03/17 8:04 PM",
          "commitName": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "30/03/17 5:38 PM",
          "commitNameOld": "bf3fb585aaf2b179836e139c041fc87920a3c886",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,36 @@\n-  private static DistCpOptions parseSourceAndTargetPaths(\n+  private static DistCpOptions.Builder parseSourceAndTargetPaths(\n       CommandLine command) {\n-    DistCpOptions option;\n     Path targetPath;\n     List\u003cPath\u003e sourcePaths \u003d new ArrayList\u003cPath\u003e();\n \n     String[] leftOverArgs \u003d command.getArgs();\n     if (leftOverArgs \u003d\u003d null || leftOverArgs.length \u003c 1) {\n       throw new IllegalArgumentException(\"Target path not specified\");\n     }\n \n     //Last Argument is the target path\n     targetPath \u003d new Path(leftOverArgs[leftOverArgs.length - 1].trim());\n \n     //Copy any source paths in the arguments to the list\n     for (int index \u003d 0; index \u003c leftOverArgs.length - 1; index++) {\n       sourcePaths.add(new Path(leftOverArgs[index].trim()));\n     }\n \n     /* If command has source file listing, use it else, fall back on source\n        paths in args.  If both are present, throw exception and bail */\n     if (command.hasOption(\n         DistCpOptionSwitch.SOURCE_FILE_LISTING.getSwitch())) {\n       if (!sourcePaths.isEmpty()) {\n         throw new IllegalArgumentException(\"Both source file listing and \" +\n             \"source paths present\");\n       }\n-      option \u003d new DistCpOptions(new Path(getVal(command, DistCpOptionSwitch.\n-          SOURCE_FILE_LISTING.getSwitch())), targetPath);\n+      return new DistCpOptions.Builder(new Path(getVal(command,\n+          DistCpOptionSwitch.SOURCE_FILE_LISTING.getSwitch())), targetPath);\n     } else {\n       if (sourcePaths.isEmpty()) {\n         throw new IllegalArgumentException(\"Neither source file listing nor \" +\n             \"source paths present\");\n       }\n-      option \u003d new DistCpOptions(sourcePaths, targetPath);\n+      return new DistCpOptions.Builder(sourcePaths, targetPath);\n     }\n-    return option;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static DistCpOptions.Builder parseSourceAndTargetPaths(\n      CommandLine command) {\n    Path targetPath;\n    List\u003cPath\u003e sourcePaths \u003d new ArrayList\u003cPath\u003e();\n\n    String[] leftOverArgs \u003d command.getArgs();\n    if (leftOverArgs \u003d\u003d null || leftOverArgs.length \u003c 1) {\n      throw new IllegalArgumentException(\"Target path not specified\");\n    }\n\n    //Last Argument is the target path\n    targetPath \u003d new Path(leftOverArgs[leftOverArgs.length - 1].trim());\n\n    //Copy any source paths in the arguments to the list\n    for (int index \u003d 0; index \u003c leftOverArgs.length - 1; index++) {\n      sourcePaths.add(new Path(leftOverArgs[index].trim()));\n    }\n\n    /* If command has source file listing, use it else, fall back on source\n       paths in args.  If both are present, throw exception and bail */\n    if (command.hasOption(\n        DistCpOptionSwitch.SOURCE_FILE_LISTING.getSwitch())) {\n      if (!sourcePaths.isEmpty()) {\n        throw new IllegalArgumentException(\"Both source file listing and \" +\n            \"source paths present\");\n      }\n      return new DistCpOptions.Builder(new Path(getVal(command,\n          DistCpOptionSwitch.SOURCE_FILE_LISTING.getSwitch())), targetPath);\n    } else {\n      if (sourcePaths.isEmpty()) {\n        throw new IllegalArgumentException(\"Neither source file listing nor \" +\n            \"source paths present\");\n      }\n      return new DistCpOptions.Builder(sourcePaths, targetPath);\n    }\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/OptionsParser.java",
          "extendedDetails": {}
        }
      ]
    },
    "0790275f058b0cf41780ad337c9150a1e8ebebc6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-1540. Support file exclusion list in distcp. Contributed by Rich Haase.\n",
      "commitDate": "18/05/15 1:24 PM",
      "commitName": "0790275f058b0cf41780ad337c9150a1e8ebebc6",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,38 @@\n+  private static DistCpOptions parseSourceAndTargetPaths(\n+      CommandLine command) {\n+    DistCpOptions option;\n+    Path targetPath;\n+    List\u003cPath\u003e sourcePaths \u003d new ArrayList\u003cPath\u003e();\n+\n+    String[] leftOverArgs \u003d command.getArgs();\n+    if (leftOverArgs \u003d\u003d null || leftOverArgs.length \u003c 1) {\n+      throw new IllegalArgumentException(\"Target path not specified\");\n+    }\n+\n+    //Last Argument is the target path\n+    targetPath \u003d new Path(leftOverArgs[leftOverArgs.length - 1].trim());\n+\n+    //Copy any source paths in the arguments to the list\n+    for (int index \u003d 0; index \u003c leftOverArgs.length - 1; index++) {\n+      sourcePaths.add(new Path(leftOverArgs[index].trim()));\n+    }\n+\n+    /* If command has source file listing, use it else, fall back on source\n+       paths in args.  If both are present, throw exception and bail */\n+    if (command.hasOption(\n+        DistCpOptionSwitch.SOURCE_FILE_LISTING.getSwitch())) {\n+      if (!sourcePaths.isEmpty()) {\n+        throw new IllegalArgumentException(\"Both source file listing and \" +\n+            \"source paths present\");\n+      }\n+      option \u003d new DistCpOptions(new Path(getVal(command, DistCpOptionSwitch.\n+              SOURCE_FILE_LISTING.getSwitch())), targetPath);\n+    } else {\n+      if (sourcePaths.isEmpty()) {\n+        throw new IllegalArgumentException(\"Neither source file listing nor \" +\n+            \"source paths present\");\n+      }\n+      option \u003d new DistCpOptions(sourcePaths, targetPath);\n+    }\n+    return option;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static DistCpOptions parseSourceAndTargetPaths(\n      CommandLine command) {\n    DistCpOptions option;\n    Path targetPath;\n    List\u003cPath\u003e sourcePaths \u003d new ArrayList\u003cPath\u003e();\n\n    String[] leftOverArgs \u003d command.getArgs();\n    if (leftOverArgs \u003d\u003d null || leftOverArgs.length \u003c 1) {\n      throw new IllegalArgumentException(\"Target path not specified\");\n    }\n\n    //Last Argument is the target path\n    targetPath \u003d new Path(leftOverArgs[leftOverArgs.length - 1].trim());\n\n    //Copy any source paths in the arguments to the list\n    for (int index \u003d 0; index \u003c leftOverArgs.length - 1; index++) {\n      sourcePaths.add(new Path(leftOverArgs[index].trim()));\n    }\n\n    /* If command has source file listing, use it else, fall back on source\n       paths in args.  If both are present, throw exception and bail */\n    if (command.hasOption(\n        DistCpOptionSwitch.SOURCE_FILE_LISTING.getSwitch())) {\n      if (!sourcePaths.isEmpty()) {\n        throw new IllegalArgumentException(\"Both source file listing and \" +\n            \"source paths present\");\n      }\n      option \u003d new DistCpOptions(new Path(getVal(command, DistCpOptionSwitch.\n              SOURCE_FILE_LISTING.getSwitch())), targetPath);\n    } else {\n      if (sourcePaths.isEmpty()) {\n        throw new IllegalArgumentException(\"Neither source file listing nor \" +\n            \"source paths present\");\n      }\n      option \u003d new DistCpOptions(sourcePaths, targetPath);\n    }\n    return option;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/OptionsParser.java"
    }
  }
}