{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeleteOperation.java",
  "functionName": "asyncDeleteAction",
  "functionId": "asyncDeleteAction___state-BulkOperationState(modifiers-final)__keyList-List__DeleteObjectsRequest.KeyVersion__(modifiers-final)__pathList-List__Path__(modifiers-final)__auditDeletedKeys-boolean(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/impl/DeleteOperation.java",
  "functionStartLine": 515,
  "functionEndLine": 558,
  "numCommitsSeen": 3,
  "timeTaken": 1255,
  "changeHistory": [
    "511df1e837b19ccb9271520589452d82d50ac69d"
  ],
  "changeHistoryShort": {
    "511df1e837b19ccb9271520589452d82d50ac69d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "511df1e837b19ccb9271520589452d82d50ac69d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16430. S3AFilesystem.delete to incrementally update s3guard with deletions\n\nContributed by Steve Loughran.\n\nThis overlaps the scanning for directory entries with batched calls to S3 DELETE and updates of the S3Guard tables.\nIt also uses S3Guard to list the files to delete, so find newly created files even when S3 listings are not use consistent.\n\nFor path which the client considers S3Guard to be authoritative, we also do a recursive LIST of the store and delete files; this is to find unindexed files and do guarantee that the delete(path, true) call really does delete everything underneath.\n\nChange-Id: Ice2f6e940c506e0b3a78fa534a99721b1698708e\n",
      "commitDate": "05/09/19 6:25 AM",
      "commitName": "511df1e837b19ccb9271520589452d82d50ac69d",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,44 @@\n+  private void asyncDeleteAction(\n+      final BulkOperationState state,\n+      final List\u003cDeleteObjectsRequest.KeyVersion\u003e keyList,\n+      final List\u003cPath\u003e pathList,\n+      final boolean auditDeletedKeys)\n+      throws IOException {\n+    try (DurationInfo ignored \u003d\n+             new DurationInfo(LOG, false, \"Delete page of keys\")) {\n+      DeleteObjectsResult result \u003d null;\n+      List\u003cPath\u003e undeletedObjects \u003d new ArrayList\u003c\u003e();\n+      if (!keyList.isEmpty()) {\n+        result \u003d Invoker.once(\"Remove S3 Keys\",\n+            status.getPath().toString(),\n+            () -\u003e callbacks.removeKeys(\n+                keyList,\n+                false,\n+                undeletedObjects,\n+                state,\n+                !auditDeletedKeys));\n+      }\n+      if (!pathList.isEmpty()) {\n+        metadataStore.deletePaths(pathList, state);\n+      }\n+      if (auditDeletedKeys \u0026\u0026 result !\u003d null) {\n+        // audit the deleted keys\n+        List\u003cDeleteObjectsResult.DeletedObject\u003e deletedObjects \u003d\n+            result.getDeletedObjects();\n+        if (deletedObjects.size() !\u003d keyList.size()) {\n+          // size mismatch\n+          LOG.warn(\"Size mismatch in deletion operation. \"\n+                  + \"Expected count of deleted files: {}; \"\n+                  + \"actual: {}\",\n+              keyList.size(), deletedObjects.size());\n+          // strip out the deleted keys\n+          for (DeleteObjectsResult.DeletedObject del : deletedObjects) {\n+            keyList.removeIf(kv -\u003e kv.getKey().equals(del.getKey()));\n+          }\n+          for (DeleteObjectsRequest.KeyVersion kv : keyList) {\n+            LOG.debug(\"{}\", kv.getKey());\n+          }\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void asyncDeleteAction(\n      final BulkOperationState state,\n      final List\u003cDeleteObjectsRequest.KeyVersion\u003e keyList,\n      final List\u003cPath\u003e pathList,\n      final boolean auditDeletedKeys)\n      throws IOException {\n    try (DurationInfo ignored \u003d\n             new DurationInfo(LOG, false, \"Delete page of keys\")) {\n      DeleteObjectsResult result \u003d null;\n      List\u003cPath\u003e undeletedObjects \u003d new ArrayList\u003c\u003e();\n      if (!keyList.isEmpty()) {\n        result \u003d Invoker.once(\"Remove S3 Keys\",\n            status.getPath().toString(),\n            () -\u003e callbacks.removeKeys(\n                keyList,\n                false,\n                undeletedObjects,\n                state,\n                !auditDeletedKeys));\n      }\n      if (!pathList.isEmpty()) {\n        metadataStore.deletePaths(pathList, state);\n      }\n      if (auditDeletedKeys \u0026\u0026 result !\u003d null) {\n        // audit the deleted keys\n        List\u003cDeleteObjectsResult.DeletedObject\u003e deletedObjects \u003d\n            result.getDeletedObjects();\n        if (deletedObjects.size() !\u003d keyList.size()) {\n          // size mismatch\n          LOG.warn(\"Size mismatch in deletion operation. \"\n                  + \"Expected count of deleted files: {}; \"\n                  + \"actual: {}\",\n              keyList.size(), deletedObjects.size());\n          // strip out the deleted keys\n          for (DeleteObjectsResult.DeletedObject del : deletedObjects) {\n            keyList.removeIf(kv -\u003e kv.getKey().equals(del.getKey()));\n          }\n          for (DeleteObjectsRequest.KeyVersion kv : keyList) {\n            LOG.debug(\"{}\", kv.getKey());\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/impl/DeleteOperation.java"
    }
  }
}