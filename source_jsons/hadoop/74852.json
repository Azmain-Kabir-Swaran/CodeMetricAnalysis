{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DelegationTokenAuthenticatedURL.java",
  "functionName": "openConnection",
  "functionId": "openConnection___url-URL__token-Token__doAs-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticatedURL.java",
  "functionStartLine": 284,
  "functionEndLine": 337,
  "numCommitsSeen": 11,
  "timeTaken": 2791,
  "changeHistory": [
    "5ec86b445cc492f52c33639efb6a09a0d2f27475",
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
    "0202480742b8539aa7aa1e94dc9cab75d863cc4e",
    "6bf16d115637c7761123e3b92186daa675c4769c",
    "6d7a6766bd55b355e44dbdcc4dfa22b050b1a509",
    "be9c67930b57c516723d566625f9036a88a84055"
  ],
  "changeHistoryShort": {
    "5ec86b445cc492f52c33639efb6a09a0d2f27475": "Ybodychange",
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2": "Ybodychange",
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81": "Ybodychange",
    "0202480742b8539aa7aa1e94dc9cab75d863cc4e": "Ybodychange",
    "6bf16d115637c7761123e3b92186daa675c4769c": "Ybodychange",
    "6d7a6766bd55b355e44dbdcc4dfa22b050b1a509": "Ybodychange",
    "be9c67930b57c516723d566625f9036a88a84055": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5ec86b445cc492f52c33639efb6a09a0d2f27475": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
      "commitDate": "12/10/18 9:35 AM",
      "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "10/10/18 9:51 PM",
      "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 1.49,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,54 @@\n   public HttpURLConnection openConnection(URL url, Token token, String doAs)\n       throws IOException, AuthenticationException {\n     Preconditions.checkNotNull(url, \"url\");\n     Preconditions.checkNotNull(token, \"token\");\n     Map\u003cString, String\u003e extraParams \u003d new HashMap\u003cString, String\u003e();\n     org.apache.hadoop.security.token.Token\u003c? extends TokenIdentifier\u003e dToken\n         \u003d null;\n     LOG.debug(\"Connecting to url {} with token {} as {}\", url, token, doAs);\n     // if we have valid auth token, it takes precedence over a delegation token\n     // and we don\u0027t even look for one.\n     if (!token.isSet()) {\n       // delegation token\n       Credentials creds \u003d UserGroupInformation.getCurrentUser().\n           getCredentials();\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Token not set, looking for delegation token. Creds:{}\",\n-            creds.getAllTokens());\n+        LOG.debug(\"Token not set, looking for delegation token. Creds:{},\"\n+                + \" size:{}\", creds.getAllTokens(), creds.numberOfTokens());\n       }\n       if (!creds.getAllTokens().isEmpty()) {\n-        InetSocketAddress serviceAddr \u003d new InetSocketAddress(url.getHost(),\n-            url.getPort());\n-        Text service \u003d SecurityUtil.buildTokenService(serviceAddr);\n-        dToken \u003d creds.getToken(service);\n-        LOG.debug(\"Using delegation token {} from service:{}\", dToken, service);\n+        dToken \u003d selectDelegationToken(url, creds);\n         if (dToken !\u003d null) {\n           if (useQueryStringForDelegationToken()) {\n             // delegation token will go in the query string, injecting it\n             extraParams.put(\n                 KerberosDelegationTokenAuthenticator.DELEGATION_PARAM,\n                 dToken.encodeToUrlString());\n           } else {\n             // delegation token will go as request header, setting it in the\n             // auth-token to ensure no authentication handshake is triggered\n             // (if we have a delegation token, we are authenticated)\n             // the delegation token header is injected in the connection request\n             // at the end of this method.\n             token.delegationToken \u003d (org.apache.hadoop.security.token.Token\n                 \u003cAbstractDelegationTokenIdentifier\u003e) dToken;\n           }\n         }\n       }\n     }\n \n     // proxyuser\n     if (doAs !\u003d null) {\n       extraParams.put(DO_AS, URLEncoder.encode(doAs, \"UTF-8\"));\n     }\n \n     url \u003d augmentURL(url, extraParams);\n     HttpURLConnection conn \u003d super.openConnection(url, token);\n     if (!token.isSet() \u0026\u0026 !useQueryStringForDelegationToken() \u0026\u0026 dToken !\u003d null) {\n       // injecting the delegation token header in the connection request\n       conn.setRequestProperty(\n           DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER,\n           dToken.encodeToUrlString());\n     }\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HttpURLConnection openConnection(URL url, Token token, String doAs)\n      throws IOException, AuthenticationException {\n    Preconditions.checkNotNull(url, \"url\");\n    Preconditions.checkNotNull(token, \"token\");\n    Map\u003cString, String\u003e extraParams \u003d new HashMap\u003cString, String\u003e();\n    org.apache.hadoop.security.token.Token\u003c? extends TokenIdentifier\u003e dToken\n        \u003d null;\n    LOG.debug(\"Connecting to url {} with token {} as {}\", url, token, doAs);\n    // if we have valid auth token, it takes precedence over a delegation token\n    // and we don\u0027t even look for one.\n    if (!token.isSet()) {\n      // delegation token\n      Credentials creds \u003d UserGroupInformation.getCurrentUser().\n          getCredentials();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Token not set, looking for delegation token. Creds:{},\"\n                + \" size:{}\", creds.getAllTokens(), creds.numberOfTokens());\n      }\n      if (!creds.getAllTokens().isEmpty()) {\n        dToken \u003d selectDelegationToken(url, creds);\n        if (dToken !\u003d null) {\n          if (useQueryStringForDelegationToken()) {\n            // delegation token will go in the query string, injecting it\n            extraParams.put(\n                KerberosDelegationTokenAuthenticator.DELEGATION_PARAM,\n                dToken.encodeToUrlString());\n          } else {\n            // delegation token will go as request header, setting it in the\n            // auth-token to ensure no authentication handshake is triggered\n            // (if we have a delegation token, we are authenticated)\n            // the delegation token header is injected in the connection request\n            // at the end of this method.\n            token.delegationToken \u003d (org.apache.hadoop.security.token.Token\n                \u003cAbstractDelegationTokenIdentifier\u003e) dToken;\n          }\n        }\n      }\n    }\n\n    // proxyuser\n    if (doAs !\u003d null) {\n      extraParams.put(DO_AS, URLEncoder.encode(doAs, \"UTF-8\"));\n    }\n\n    url \u003d augmentURL(url, extraParams);\n    HttpURLConnection conn \u003d super.openConnection(url, token);\n    if (!token.isSet() \u0026\u0026 !useQueryStringForDelegationToken() \u0026\u0026 dToken !\u003d null) {\n      // injecting the delegation token header in the connection request\n      conn.setRequestProperty(\n          DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER,\n          dToken.encodeToUrlString());\n    }\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticatedURL.java",
      "extendedDetails": {}
    },
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\"\n\nThis reverts commit 583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81.\n\n Conflicts:\n\thadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSTokenRenewer.java\n\thadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java\n",
      "commitDate": "07/05/18 1:32 PM",
      "commitName": "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "10/04/18 3:38 PM",
      "commitNameOld": "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 26.91,
      "commitsBetweenForRepo": 686,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,58 @@\n   public HttpURLConnection openConnection(URL url, Token token, String doAs)\n       throws IOException, AuthenticationException {\n     Preconditions.checkNotNull(url, \"url\");\n     Preconditions.checkNotNull(token, \"token\");\n     Map\u003cString, String\u003e extraParams \u003d new HashMap\u003cString, String\u003e();\n     org.apache.hadoop.security.token.Token\u003c? extends TokenIdentifier\u003e dToken\n         \u003d null;\n     LOG.debug(\"Connecting to url {} with token {} as {}\", url, token, doAs);\n     // if we have valid auth token, it takes precedence over a delegation token\n     // and we don\u0027t even look for one.\n     if (!token.isSet()) {\n       // delegation token\n       Credentials creds \u003d UserGroupInformation.getCurrentUser().\n           getCredentials();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Token not set, looking for delegation token. Creds:{}\",\n             creds.getAllTokens());\n       }\n       if (!creds.getAllTokens().isEmpty()) {\n-        dToken \u003d getDelegationToken(url, creds);\n+        InetSocketAddress serviceAddr \u003d new InetSocketAddress(url.getHost(),\n+            url.getPort());\n+        Text service \u003d SecurityUtil.buildTokenService(serviceAddr);\n+        dToken \u003d creds.getToken(service);\n+        LOG.debug(\"Using delegation token {} from service:{}\", dToken, service);\n         if (dToken !\u003d null) {\n           if (useQueryStringForDelegationToken()) {\n             // delegation token will go in the query string, injecting it\n             extraParams.put(\n                 KerberosDelegationTokenAuthenticator.DELEGATION_PARAM,\n                 dToken.encodeToUrlString());\n           } else {\n             // delegation token will go as request header, setting it in the\n             // auth-token to ensure no authentication handshake is triggered\n             // (if we have a delegation token, we are authenticated)\n             // the delegation token header is injected in the connection request\n             // at the end of this method.\n             token.delegationToken \u003d (org.apache.hadoop.security.token.Token\n                 \u003cAbstractDelegationTokenIdentifier\u003e) dToken;\n           }\n         }\n       }\n     }\n \n     // proxyuser\n     if (doAs !\u003d null) {\n       extraParams.put(DO_AS, URLEncoder.encode(doAs, \"UTF-8\"));\n     }\n \n     url \u003d augmentURL(url, extraParams);\n     HttpURLConnection conn \u003d super.openConnection(url, token);\n     if (!token.isSet() \u0026\u0026 !useQueryStringForDelegationToken() \u0026\u0026 dToken !\u003d null) {\n       // injecting the delegation token header in the connection request\n       conn.setRequestProperty(\n           DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER,\n           dToken.encodeToUrlString());\n     }\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HttpURLConnection openConnection(URL url, Token token, String doAs)\n      throws IOException, AuthenticationException {\n    Preconditions.checkNotNull(url, \"url\");\n    Preconditions.checkNotNull(token, \"token\");\n    Map\u003cString, String\u003e extraParams \u003d new HashMap\u003cString, String\u003e();\n    org.apache.hadoop.security.token.Token\u003c? extends TokenIdentifier\u003e dToken\n        \u003d null;\n    LOG.debug(\"Connecting to url {} with token {} as {}\", url, token, doAs);\n    // if we have valid auth token, it takes precedence over a delegation token\n    // and we don\u0027t even look for one.\n    if (!token.isSet()) {\n      // delegation token\n      Credentials creds \u003d UserGroupInformation.getCurrentUser().\n          getCredentials();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Token not set, looking for delegation token. Creds:{}\",\n            creds.getAllTokens());\n      }\n      if (!creds.getAllTokens().isEmpty()) {\n        InetSocketAddress serviceAddr \u003d new InetSocketAddress(url.getHost(),\n            url.getPort());\n        Text service \u003d SecurityUtil.buildTokenService(serviceAddr);\n        dToken \u003d creds.getToken(service);\n        LOG.debug(\"Using delegation token {} from service:{}\", dToken, service);\n        if (dToken !\u003d null) {\n          if (useQueryStringForDelegationToken()) {\n            // delegation token will go in the query string, injecting it\n            extraParams.put(\n                KerberosDelegationTokenAuthenticator.DELEGATION_PARAM,\n                dToken.encodeToUrlString());\n          } else {\n            // delegation token will go as request header, setting it in the\n            // auth-token to ensure no authentication handshake is triggered\n            // (if we have a delegation token, we are authenticated)\n            // the delegation token header is injected in the connection request\n            // at the end of this method.\n            token.delegationToken \u003d (org.apache.hadoop.security.token.Token\n                \u003cAbstractDelegationTokenIdentifier\u003e) dToken;\n          }\n        }\n      }\n    }\n\n    // proxyuser\n    if (doAs !\u003d null) {\n      extraParams.put(DO_AS, URLEncoder.encode(doAs, \"UTF-8\"));\n    }\n\n    url \u003d augmentURL(url, extraParams);\n    HttpURLConnection conn \u003d super.openConnection(url, token);\n    if (!token.isSet() \u0026\u0026 !useQueryStringForDelegationToken() \u0026\u0026 dToken !\u003d null) {\n      // injecting the delegation token header in the connection request\n      conn.setRequestProperty(\n          DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER,\n          dToken.encodeToUrlString());\n    }\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticatedURL.java",
      "extendedDetails": {}
    },
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\n",
      "commitDate": "10/04/18 3:38 PM",
      "commitName": "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "08/06/17 9:34 PM",
      "commitNameOld": "0202480742b8539aa7aa1e94dc9cab75d863cc4e",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 305.75,
      "commitsBetweenForRepo": 2243,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,54 @@\n   public HttpURLConnection openConnection(URL url, Token token, String doAs)\n       throws IOException, AuthenticationException {\n     Preconditions.checkNotNull(url, \"url\");\n     Preconditions.checkNotNull(token, \"token\");\n     Map\u003cString, String\u003e extraParams \u003d new HashMap\u003cString, String\u003e();\n     org.apache.hadoop.security.token.Token\u003c? extends TokenIdentifier\u003e dToken\n         \u003d null;\n     LOG.debug(\"Connecting to url {} with token {} as {}\", url, token, doAs);\n     // if we have valid auth token, it takes precedence over a delegation token\n     // and we don\u0027t even look for one.\n     if (!token.isSet()) {\n       // delegation token\n       Credentials creds \u003d UserGroupInformation.getCurrentUser().\n           getCredentials();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Token not set, looking for delegation token. Creds:{}\",\n             creds.getAllTokens());\n       }\n       if (!creds.getAllTokens().isEmpty()) {\n-        InetSocketAddress serviceAddr \u003d new InetSocketAddress(url.getHost(),\n-            url.getPort());\n-        Text service \u003d SecurityUtil.buildTokenService(serviceAddr);\n-        dToken \u003d creds.getToken(service);\n-        LOG.debug(\"Using delegation token {} from service:{}\", dToken, service);\n+        dToken \u003d getDelegationToken(url, creds);\n         if (dToken !\u003d null) {\n           if (useQueryStringForDelegationToken()) {\n             // delegation token will go in the query string, injecting it\n             extraParams.put(\n                 KerberosDelegationTokenAuthenticator.DELEGATION_PARAM,\n                 dToken.encodeToUrlString());\n           } else {\n             // delegation token will go as request header, setting it in the\n             // auth-token to ensure no authentication handshake is triggered\n             // (if we have a delegation token, we are authenticated)\n             // the delegation token header is injected in the connection request\n             // at the end of this method.\n             token.delegationToken \u003d (org.apache.hadoop.security.token.Token\n                 \u003cAbstractDelegationTokenIdentifier\u003e) dToken;\n           }\n         }\n       }\n     }\n \n     // proxyuser\n     if (doAs !\u003d null) {\n       extraParams.put(DO_AS, URLEncoder.encode(doAs, \"UTF-8\"));\n     }\n \n     url \u003d augmentURL(url, extraParams);\n     HttpURLConnection conn \u003d super.openConnection(url, token);\n     if (!token.isSet() \u0026\u0026 !useQueryStringForDelegationToken() \u0026\u0026 dToken !\u003d null) {\n       // injecting the delegation token header in the connection request\n       conn.setRequestProperty(\n           DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER,\n           dToken.encodeToUrlString());\n     }\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HttpURLConnection openConnection(URL url, Token token, String doAs)\n      throws IOException, AuthenticationException {\n    Preconditions.checkNotNull(url, \"url\");\n    Preconditions.checkNotNull(token, \"token\");\n    Map\u003cString, String\u003e extraParams \u003d new HashMap\u003cString, String\u003e();\n    org.apache.hadoop.security.token.Token\u003c? extends TokenIdentifier\u003e dToken\n        \u003d null;\n    LOG.debug(\"Connecting to url {} with token {} as {}\", url, token, doAs);\n    // if we have valid auth token, it takes precedence over a delegation token\n    // and we don\u0027t even look for one.\n    if (!token.isSet()) {\n      // delegation token\n      Credentials creds \u003d UserGroupInformation.getCurrentUser().\n          getCredentials();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Token not set, looking for delegation token. Creds:{}\",\n            creds.getAllTokens());\n      }\n      if (!creds.getAllTokens().isEmpty()) {\n        dToken \u003d getDelegationToken(url, creds);\n        if (dToken !\u003d null) {\n          if (useQueryStringForDelegationToken()) {\n            // delegation token will go in the query string, injecting it\n            extraParams.put(\n                KerberosDelegationTokenAuthenticator.DELEGATION_PARAM,\n                dToken.encodeToUrlString());\n          } else {\n            // delegation token will go as request header, setting it in the\n            // auth-token to ensure no authentication handshake is triggered\n            // (if we have a delegation token, we are authenticated)\n            // the delegation token header is injected in the connection request\n            // at the end of this method.\n            token.delegationToken \u003d (org.apache.hadoop.security.token.Token\n                \u003cAbstractDelegationTokenIdentifier\u003e) dToken;\n          }\n        }\n      }\n    }\n\n    // proxyuser\n    if (doAs !\u003d null) {\n      extraParams.put(DO_AS, URLEncoder.encode(doAs, \"UTF-8\"));\n    }\n\n    url \u003d augmentURL(url, extraParams);\n    HttpURLConnection conn \u003d super.openConnection(url, token);\n    if (!token.isSet() \u0026\u0026 !useQueryStringForDelegationToken() \u0026\u0026 dToken !\u003d null) {\n      // injecting the delegation token header in the connection request\n      conn.setRequestProperty(\n          DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER,\n          dToken.encodeToUrlString());\n    }\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticatedURL.java",
      "extendedDetails": {}
    },
    "0202480742b8539aa7aa1e94dc9cab75d863cc4e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13174. Add more debug logs for delegation tokens and authentication.\n",
      "commitDate": "08/06/17 9:34 PM",
      "commitName": "0202480742b8539aa7aa1e94dc9cab75d863cc4e",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "31/10/14 1:16 PM",
      "commitNameOld": "1b4be918664b09272b120bc42de3e5fc02d79047",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 951.35,
      "commitsBetweenForRepo": 6800,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,58 @@\n   public HttpURLConnection openConnection(URL url, Token token, String doAs)\n       throws IOException, AuthenticationException {\n     Preconditions.checkNotNull(url, \"url\");\n     Preconditions.checkNotNull(token, \"token\");\n     Map\u003cString, String\u003e extraParams \u003d new HashMap\u003cString, String\u003e();\n     org.apache.hadoop.security.token.Token\u003c? extends TokenIdentifier\u003e dToken\n         \u003d null;\n+    LOG.debug(\"Connecting to url {} with token {} as {}\", url, token, doAs);\n     // if we have valid auth token, it takes precedence over a delegation token\n     // and we don\u0027t even look for one.\n     if (!token.isSet()) {\n       // delegation token\n       Credentials creds \u003d UserGroupInformation.getCurrentUser().\n           getCredentials();\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Token not set, looking for delegation token. Creds:{}\",\n+            creds.getAllTokens());\n+      }\n       if (!creds.getAllTokens().isEmpty()) {\n         InetSocketAddress serviceAddr \u003d new InetSocketAddress(url.getHost(),\n             url.getPort());\n         Text service \u003d SecurityUtil.buildTokenService(serviceAddr);\n         dToken \u003d creds.getToken(service);\n+        LOG.debug(\"Using delegation token {} from service:{}\", dToken, service);\n         if (dToken !\u003d null) {\n           if (useQueryStringForDelegationToken()) {\n             // delegation token will go in the query string, injecting it\n             extraParams.put(\n                 KerberosDelegationTokenAuthenticator.DELEGATION_PARAM,\n                 dToken.encodeToUrlString());\n           } else {\n             // delegation token will go as request header, setting it in the\n             // auth-token to ensure no authentication handshake is triggered\n             // (if we have a delegation token, we are authenticated)\n             // the delegation token header is injected in the connection request\n             // at the end of this method.\n             token.delegationToken \u003d (org.apache.hadoop.security.token.Token\n                 \u003cAbstractDelegationTokenIdentifier\u003e) dToken;\n           }\n         }\n       }\n     }\n \n     // proxyuser\n     if (doAs !\u003d null) {\n       extraParams.put(DO_AS, URLEncoder.encode(doAs, \"UTF-8\"));\n     }\n \n     url \u003d augmentURL(url, extraParams);\n     HttpURLConnection conn \u003d super.openConnection(url, token);\n     if (!token.isSet() \u0026\u0026 !useQueryStringForDelegationToken() \u0026\u0026 dToken !\u003d null) {\n       // injecting the delegation token header in the connection request\n       conn.setRequestProperty(\n           DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER,\n           dToken.encodeToUrlString());\n     }\n     return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HttpURLConnection openConnection(URL url, Token token, String doAs)\n      throws IOException, AuthenticationException {\n    Preconditions.checkNotNull(url, \"url\");\n    Preconditions.checkNotNull(token, \"token\");\n    Map\u003cString, String\u003e extraParams \u003d new HashMap\u003cString, String\u003e();\n    org.apache.hadoop.security.token.Token\u003c? extends TokenIdentifier\u003e dToken\n        \u003d null;\n    LOG.debug(\"Connecting to url {} with token {} as {}\", url, token, doAs);\n    // if we have valid auth token, it takes precedence over a delegation token\n    // and we don\u0027t even look for one.\n    if (!token.isSet()) {\n      // delegation token\n      Credentials creds \u003d UserGroupInformation.getCurrentUser().\n          getCredentials();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Token not set, looking for delegation token. Creds:{}\",\n            creds.getAllTokens());\n      }\n      if (!creds.getAllTokens().isEmpty()) {\n        InetSocketAddress serviceAddr \u003d new InetSocketAddress(url.getHost(),\n            url.getPort());\n        Text service \u003d SecurityUtil.buildTokenService(serviceAddr);\n        dToken \u003d creds.getToken(service);\n        LOG.debug(\"Using delegation token {} from service:{}\", dToken, service);\n        if (dToken !\u003d null) {\n          if (useQueryStringForDelegationToken()) {\n            // delegation token will go in the query string, injecting it\n            extraParams.put(\n                KerberosDelegationTokenAuthenticator.DELEGATION_PARAM,\n                dToken.encodeToUrlString());\n          } else {\n            // delegation token will go as request header, setting it in the\n            // auth-token to ensure no authentication handshake is triggered\n            // (if we have a delegation token, we are authenticated)\n            // the delegation token header is injected in the connection request\n            // at the end of this method.\n            token.delegationToken \u003d (org.apache.hadoop.security.token.Token\n                \u003cAbstractDelegationTokenIdentifier\u003e) dToken;\n          }\n        }\n      }\n    }\n\n    // proxyuser\n    if (doAs !\u003d null) {\n      extraParams.put(DO_AS, URLEncoder.encode(doAs, \"UTF-8\"));\n    }\n\n    url \u003d augmentURL(url, extraParams);\n    HttpURLConnection conn \u003d super.openConnection(url, token);\n    if (!token.isSet() \u0026\u0026 !useQueryStringForDelegationToken() \u0026\u0026 dToken !\u003d null) {\n      // injecting the delegation token header in the connection request\n      conn.setRequestProperty(\n          DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER,\n          dToken.encodeToUrlString());\n    }\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticatedURL.java",
      "extendedDetails": {}
    },
    "6bf16d115637c7761123e3b92186daa675c4769c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10880. Move HTTP delegation tokens out of URL querystring to a header. (tucu)\n",
      "commitDate": "28/08/14 7:05 PM",
      "commitName": "6bf16d115637c7761123e3b92186daa675c4769c",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "11/08/14 5:10 PM",
      "commitNameOld": "6d7a6766bd55b355e44dbdcc4dfa22b050b1a509",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 17.08,
      "commitsBetweenForRepo": 140,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,52 @@\n   public HttpURLConnection openConnection(URL url, Token token, String doAs)\n       throws IOException, AuthenticationException {\n     Preconditions.checkNotNull(url, \"url\");\n     Preconditions.checkNotNull(token, \"token\");\n     Map\u003cString, String\u003e extraParams \u003d new HashMap\u003cString, String\u003e();\n-\n-    // delegation token\n-    Credentials creds \u003d UserGroupInformation.getCurrentUser().getCredentials();\n-    if (!creds.getAllTokens().isEmpty()) {\n-      InetSocketAddress serviceAddr \u003d new InetSocketAddress(url.getHost(),\n-          url.getPort());\n-      Text service \u003d SecurityUtil.buildTokenService(serviceAddr);\n-      org.apache.hadoop.security.token.Token\u003c? extends TokenIdentifier\u003e dt \u003d\n-          creds.getToken(service);\n-      if (dt !\u003d null) {\n-        extraParams.put(KerberosDelegationTokenAuthenticator.DELEGATION_PARAM,\n-            dt.encodeToUrlString());\n+    org.apache.hadoop.security.token.Token\u003c? extends TokenIdentifier\u003e dToken\n+        \u003d null;\n+    // if we have valid auth token, it takes precedence over a delegation token\n+    // and we don\u0027t even look for one.\n+    if (!token.isSet()) {\n+      // delegation token\n+      Credentials creds \u003d UserGroupInformation.getCurrentUser().\n+          getCredentials();\n+      if (!creds.getAllTokens().isEmpty()) {\n+        InetSocketAddress serviceAddr \u003d new InetSocketAddress(url.getHost(),\n+            url.getPort());\n+        Text service \u003d SecurityUtil.buildTokenService(serviceAddr);\n+        dToken \u003d creds.getToken(service);\n+        if (dToken !\u003d null) {\n+          if (useQueryStringForDelegationToken()) {\n+            // delegation token will go in the query string, injecting it\n+            extraParams.put(\n+                KerberosDelegationTokenAuthenticator.DELEGATION_PARAM,\n+                dToken.encodeToUrlString());\n+          } else {\n+            // delegation token will go as request header, setting it in the\n+            // auth-token to ensure no authentication handshake is triggered\n+            // (if we have a delegation token, we are authenticated)\n+            // the delegation token header is injected in the connection request\n+            // at the end of this method.\n+            token.delegationToken \u003d (org.apache.hadoop.security.token.Token\n+                \u003cAbstractDelegationTokenIdentifier\u003e) dToken;\n+          }\n+        }\n       }\n     }\n \n     // proxyuser\n     if (doAs !\u003d null) {\n       extraParams.put(DO_AS, URLEncoder.encode(doAs, \"UTF-8\"));\n     }\n \n     url \u003d augmentURL(url, extraParams);\n-    return super.openConnection(url, token);\n+    HttpURLConnection conn \u003d super.openConnection(url, token);\n+    if (!token.isSet() \u0026\u0026 !useQueryStringForDelegationToken() \u0026\u0026 dToken !\u003d null) {\n+      // injecting the delegation token header in the connection request\n+      conn.setRequestProperty(\n+          DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER,\n+          dToken.encodeToUrlString());\n+    }\n+    return conn;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HttpURLConnection openConnection(URL url, Token token, String doAs)\n      throws IOException, AuthenticationException {\n    Preconditions.checkNotNull(url, \"url\");\n    Preconditions.checkNotNull(token, \"token\");\n    Map\u003cString, String\u003e extraParams \u003d new HashMap\u003cString, String\u003e();\n    org.apache.hadoop.security.token.Token\u003c? extends TokenIdentifier\u003e dToken\n        \u003d null;\n    // if we have valid auth token, it takes precedence over a delegation token\n    // and we don\u0027t even look for one.\n    if (!token.isSet()) {\n      // delegation token\n      Credentials creds \u003d UserGroupInformation.getCurrentUser().\n          getCredentials();\n      if (!creds.getAllTokens().isEmpty()) {\n        InetSocketAddress serviceAddr \u003d new InetSocketAddress(url.getHost(),\n            url.getPort());\n        Text service \u003d SecurityUtil.buildTokenService(serviceAddr);\n        dToken \u003d creds.getToken(service);\n        if (dToken !\u003d null) {\n          if (useQueryStringForDelegationToken()) {\n            // delegation token will go in the query string, injecting it\n            extraParams.put(\n                KerberosDelegationTokenAuthenticator.DELEGATION_PARAM,\n                dToken.encodeToUrlString());\n          } else {\n            // delegation token will go as request header, setting it in the\n            // auth-token to ensure no authentication handshake is triggered\n            // (if we have a delegation token, we are authenticated)\n            // the delegation token header is injected in the connection request\n            // at the end of this method.\n            token.delegationToken \u003d (org.apache.hadoop.security.token.Token\n                \u003cAbstractDelegationTokenIdentifier\u003e) dToken;\n          }\n        }\n      }\n    }\n\n    // proxyuser\n    if (doAs !\u003d null) {\n      extraParams.put(DO_AS, URLEncoder.encode(doAs, \"UTF-8\"));\n    }\n\n    url \u003d augmentURL(url, extraParams);\n    HttpURLConnection conn \u003d super.openConnection(url, token);\n    if (!token.isSet() \u0026\u0026 !useQueryStringForDelegationToken() \u0026\u0026 dToken !\u003d null) {\n      // injecting the delegation token header in the connection request\n      conn.setRequestProperty(\n          DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER,\n          dToken.encodeToUrlString());\n    }\n    return conn;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticatedURL.java",
      "extendedDetails": {}
    },
    "6d7a6766bd55b355e44dbdcc4dfa22b050b1a509": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10835. Implement HTTP proxyuser support in HTTP authentication client/server libraries. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617384 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/08/14 5:10 PM",
      "commitName": "6d7a6766bd55b355e44dbdcc4dfa22b050b1a509",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "07/08/14 9:58 PM",
      "commitNameOld": "be9c67930b57c516723d566625f9036a88a84055",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 3.8,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,28 @@\n   public HttpURLConnection openConnection(URL url, Token token, String doAs)\n       throws IOException, AuthenticationException {\n     Preconditions.checkNotNull(url, \"url\");\n     Preconditions.checkNotNull(token, \"token\");\n     Map\u003cString, String\u003e extraParams \u003d new HashMap\u003cString, String\u003e();\n \n     // delegation token\n     Credentials creds \u003d UserGroupInformation.getCurrentUser().getCredentials();\n     if (!creds.getAllTokens().isEmpty()) {\n       InetSocketAddress serviceAddr \u003d new InetSocketAddress(url.getHost(),\n           url.getPort());\n       Text service \u003d SecurityUtil.buildTokenService(serviceAddr);\n       org.apache.hadoop.security.token.Token\u003c? extends TokenIdentifier\u003e dt \u003d\n           creds.getToken(service);\n       if (dt !\u003d null) {\n         extraParams.put(KerberosDelegationTokenAuthenticator.DELEGATION_PARAM,\n             dt.encodeToUrlString());\n       }\n     }\n \n+    // proxyuser\n+    if (doAs !\u003d null) {\n+      extraParams.put(DO_AS, URLEncoder.encode(doAs, \"UTF-8\"));\n+    }\n+\n     url \u003d augmentURL(url, extraParams);\n     return super.openConnection(url, token);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HttpURLConnection openConnection(URL url, Token token, String doAs)\n      throws IOException, AuthenticationException {\n    Preconditions.checkNotNull(url, \"url\");\n    Preconditions.checkNotNull(token, \"token\");\n    Map\u003cString, String\u003e extraParams \u003d new HashMap\u003cString, String\u003e();\n\n    // delegation token\n    Credentials creds \u003d UserGroupInformation.getCurrentUser().getCredentials();\n    if (!creds.getAllTokens().isEmpty()) {\n      InetSocketAddress serviceAddr \u003d new InetSocketAddress(url.getHost(),\n          url.getPort());\n      Text service \u003d SecurityUtil.buildTokenService(serviceAddr);\n      org.apache.hadoop.security.token.Token\u003c? extends TokenIdentifier\u003e dt \u003d\n          creds.getToken(service);\n      if (dt !\u003d null) {\n        extraParams.put(KerberosDelegationTokenAuthenticator.DELEGATION_PARAM,\n            dt.encodeToUrlString());\n      }\n    }\n\n    // proxyuser\n    if (doAs !\u003d null) {\n      extraParams.put(DO_AS, URLEncoder.encode(doAs, \"UTF-8\"));\n    }\n\n    url \u003d augmentURL(url, extraParams);\n    return super.openConnection(url, token);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticatedURL.java",
      "extendedDetails": {}
    },
    "be9c67930b57c516723d566625f9036a88a84055": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10771. Refactor HTTP delegation support out of httpfs to common, PART 2. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616672 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/14 9:58 PM",
      "commitName": "be9c67930b57c516723d566625f9036a88a84055",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,23 @@\n+  public HttpURLConnection openConnection(URL url, Token token, String doAs)\n+      throws IOException, AuthenticationException {\n+    Preconditions.checkNotNull(url, \"url\");\n+    Preconditions.checkNotNull(token, \"token\");\n+    Map\u003cString, String\u003e extraParams \u003d new HashMap\u003cString, String\u003e();\n+\n+    // delegation token\n+    Credentials creds \u003d UserGroupInformation.getCurrentUser().getCredentials();\n+    if (!creds.getAllTokens().isEmpty()) {\n+      InetSocketAddress serviceAddr \u003d new InetSocketAddress(url.getHost(),\n+          url.getPort());\n+      Text service \u003d SecurityUtil.buildTokenService(serviceAddr);\n+      org.apache.hadoop.security.token.Token\u003c? extends TokenIdentifier\u003e dt \u003d\n+          creds.getToken(service);\n+      if (dt !\u003d null) {\n+        extraParams.put(KerberosDelegationTokenAuthenticator.DELEGATION_PARAM,\n+            dt.encodeToUrlString());\n+      }\n+    }\n+\n+    url \u003d augmentURL(url, extraParams);\n+    return super.openConnection(url, token);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public HttpURLConnection openConnection(URL url, Token token, String doAs)\n      throws IOException, AuthenticationException {\n    Preconditions.checkNotNull(url, \"url\");\n    Preconditions.checkNotNull(token, \"token\");\n    Map\u003cString, String\u003e extraParams \u003d new HashMap\u003cString, String\u003e();\n\n    // delegation token\n    Credentials creds \u003d UserGroupInformation.getCurrentUser().getCredentials();\n    if (!creds.getAllTokens().isEmpty()) {\n      InetSocketAddress serviceAddr \u003d new InetSocketAddress(url.getHost(),\n          url.getPort());\n      Text service \u003d SecurityUtil.buildTokenService(serviceAddr);\n      org.apache.hadoop.security.token.Token\u003c? extends TokenIdentifier\u003e dt \u003d\n          creds.getToken(service);\n      if (dt !\u003d null) {\n        extraParams.put(KerberosDelegationTokenAuthenticator.DELEGATION_PARAM,\n            dt.encodeToUrlString());\n      }\n    }\n\n    url \u003d augmentURL(url, extraParams);\n    return super.openConnection(url, token);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticatedURL.java"
    }
  }
}