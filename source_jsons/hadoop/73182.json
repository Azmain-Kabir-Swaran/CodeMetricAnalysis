{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HttpServer2.java",
  "functionName": "build",
  "functionId": "build",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
  "functionStartLine": 447,
  "functionEndLine": 519,
  "numCommitsSeen": 89,
  "timeTaken": 6290,
  "changeHistory": [
    "f1ab7f18c423a9cfc59292d25fa178e73715b85b",
    "294695dd57cb75f2756a31a54264bdd37b32bb01",
    "e780556ae9229fe7a90817eb4e5449d7eed35dd8",
    "1f04cb45f70648678840cdafbec68d534b03fe95",
    "a180ba408128b2d916822e78deb979bbcd1894da",
    "5d182949badb2eb80393de7ba3838102d006488b",
    "5877f20f9c3f6f0afa505715e9a2ee312475af17",
    "03a9343d5798384b66fbd21e1e028acaf55b00e9",
    "a2fdfff02daef85b651eda31e99868986aab5b28",
    "3ab3a6498812c9fa0c53dae02ce696033062af87",
    "2860eeb14a958a8861b9ad3d6bd685df48da8cd3",
    "dbf30e3c0e1522e6588aecac71c990c0b01fd8fb",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4",
    "e8de319789def7ccf2a7e9e14b1011ee825ff37b",
    "2214871d916fdcae62aa51afbb5fd571f2808745",
    "782191f1ba27e0ff0acf3c6cf8a88df00274d308"
  ],
  "changeHistoryShort": {
    "f1ab7f18c423a9cfc59292d25fa178e73715b85b": "Ybodychange",
    "294695dd57cb75f2756a31a54264bdd37b32bb01": "Ybodychange",
    "e780556ae9229fe7a90817eb4e5449d7eed35dd8": "Ybodychange",
    "1f04cb45f70648678840cdafbec68d534b03fe95": "Ybodychange",
    "a180ba408128b2d916822e78deb979bbcd1894da": "Ybodychange",
    "5d182949badb2eb80393de7ba3838102d006488b": "Ybodychange",
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": "Ybodychange",
    "03a9343d5798384b66fbd21e1e028acaf55b00e9": "Ybodychange",
    "a2fdfff02daef85b651eda31e99868986aab5b28": "Ybodychange",
    "3ab3a6498812c9fa0c53dae02ce696033062af87": "Ybodychange",
    "2860eeb14a958a8861b9ad3d6bd685df48da8cd3": "Ybodychange",
    "dbf30e3c0e1522e6588aecac71c990c0b01fd8fb": "Ybodychange",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
    "e8de319789def7ccf2a7e9e14b1011ee825ff37b": "Ybodychange",
    "2214871d916fdcae62aa51afbb5fd571f2808745": "Ybodychange",
    "782191f1ba27e0ff0acf3c6cf8a88df00274d308": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f1ab7f18c423a9cfc59292d25fa178e73715b85b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16718. Allow disabling Server Name Indication (SNI) for Jetty. Contributed by Aravindan Vijayan.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\nReviewed-by: Siyao Meng \u003csmeng@cloudera.com\u003e\n",
      "commitDate": "03/12/19 3:47 PM",
      "commitName": "f1ab7f18c423a9cfc59292d25fa178e73715b85b",
      "commitAuthor": "Aravindan Vijayan",
      "commitDateOld": "18/10/19 8:25 AM",
      "commitNameOld": "3d41f330186f6481850b46e0c345d3ecf7b1b818",
      "commitAuthorOld": "Yuming Wang",
      "daysBetweenCommits": 46.35,
      "commitsBetweenForRepo": 164,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,73 @@\n     public HttpServer2 build() throws IOException {\n       Preconditions.checkNotNull(name, \"name is not set\");\n       Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n \n       if (hostName \u003d\u003d null) {\n         hostName \u003d endpoints.get(0).getHost();\n       }\n \n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n \n       HttpServer2 server \u003d new HttpServer2(this);\n \n       if (this.securityEnabled \u0026\u0026\n           !this.conf.get(authFilterConfigurationPrefix + \"type\").\n           equals(PseudoAuthenticationHandler.TYPE)) {\n         server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n \n       for (URI ep : endpoints) {\n         if (HTTPS_SCHEME.equals(ep.getScheme())) {\n           loadSSLConfiguration();\n           break;\n         }\n       }\n \n       int requestHeaderSize \u003d conf.getInt(\n           HTTP_MAX_REQUEST_HEADER_SIZE_KEY,\n           HTTP_MAX_REQUEST_HEADER_SIZE_DEFAULT);\n       int responseHeaderSize \u003d conf.getInt(\n           HTTP_MAX_RESPONSE_HEADER_SIZE_KEY,\n           HTTP_MAX_RESPONSE_HEADER_SIZE_DEFAULT);\n       int idleTimeout \u003d conf.getInt(HTTP_IDLE_TIMEOUT_MS_KEY,\n           HTTP_IDLE_TIMEOUT_MS_DEFAULT);\n \n       HttpConfiguration httpConfig \u003d new HttpConfiguration();\n       httpConfig.setRequestHeaderSize(requestHeaderSize);\n       httpConfig.setResponseHeaderSize(responseHeaderSize);\n       httpConfig.setSendServerVersion(false);\n \n       int backlogSize \u003d conf.getInt(HTTP_SOCKET_BACKLOG_SIZE_KEY,\n           HTTP_SOCKET_BACKLOG_SIZE_DEFAULT);\n \n+      // If setSniHostCheckEnabled() is used to enable SNI hostname check,\n+      // configuration lookup is skipped.\n+      if (!sniHostCheckEnabled) {\n+        sniHostCheckEnabled \u003d conf.getBoolean(HTTP_SNI_HOST_CHECK_ENABLED_KEY,\n+            HTTP_SNI_HOST_CHECK_ENABLED_DEFAULT);\n+      }\n+\n       for (URI ep : endpoints) {\n         final ServerConnector connector;\n         String scheme \u003d ep.getScheme();\n         if (HTTP_SCHEME.equals(scheme)) {\n           connector \u003d createHttpChannelConnector(server.webServer,\n               httpConfig);\n         } else if (HTTPS_SCHEME.equals(scheme)) {\n           connector \u003d createHttpsChannelConnector(server.webServer,\n               httpConfig);\n         } else {\n           throw new HadoopIllegalArgumentException(\n               \"unknown scheme for endpoint:\" + ep);\n         }\n         connector.setHost(ep.getHost());\n         connector.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n         connector.setAcceptQueueSize(backlogSize);\n         connector.setIdleTimeout(idleTimeout);\n         server.addListener(connector);\n       }\n       server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public HttpServer2 build() throws IOException {\n      Preconditions.checkNotNull(name, \"name is not set\");\n      Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.get(0).getHost();\n      }\n\n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n\n      HttpServer2 server \u003d new HttpServer2(this);\n\n      if (this.securityEnabled \u0026\u0026\n          !this.conf.get(authFilterConfigurationPrefix + \"type\").\n          equals(PseudoAuthenticationHandler.TYPE)) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      for (URI ep : endpoints) {\n        if (HTTPS_SCHEME.equals(ep.getScheme())) {\n          loadSSLConfiguration();\n          break;\n        }\n      }\n\n      int requestHeaderSize \u003d conf.getInt(\n          HTTP_MAX_REQUEST_HEADER_SIZE_KEY,\n          HTTP_MAX_REQUEST_HEADER_SIZE_DEFAULT);\n      int responseHeaderSize \u003d conf.getInt(\n          HTTP_MAX_RESPONSE_HEADER_SIZE_KEY,\n          HTTP_MAX_RESPONSE_HEADER_SIZE_DEFAULT);\n      int idleTimeout \u003d conf.getInt(HTTP_IDLE_TIMEOUT_MS_KEY,\n          HTTP_IDLE_TIMEOUT_MS_DEFAULT);\n\n      HttpConfiguration httpConfig \u003d new HttpConfiguration();\n      httpConfig.setRequestHeaderSize(requestHeaderSize);\n      httpConfig.setResponseHeaderSize(responseHeaderSize);\n      httpConfig.setSendServerVersion(false);\n\n      int backlogSize \u003d conf.getInt(HTTP_SOCKET_BACKLOG_SIZE_KEY,\n          HTTP_SOCKET_BACKLOG_SIZE_DEFAULT);\n\n      // If setSniHostCheckEnabled() is used to enable SNI hostname check,\n      // configuration lookup is skipped.\n      if (!sniHostCheckEnabled) {\n        sniHostCheckEnabled \u003d conf.getBoolean(HTTP_SNI_HOST_CHECK_ENABLED_KEY,\n            HTTP_SNI_HOST_CHECK_ENABLED_DEFAULT);\n      }\n\n      for (URI ep : endpoints) {\n        final ServerConnector connector;\n        String scheme \u003d ep.getScheme();\n        if (HTTP_SCHEME.equals(scheme)) {\n          connector \u003d createHttpChannelConnector(server.webServer,\n              httpConfig);\n        } else if (HTTPS_SCHEME.equals(scheme)) {\n          connector \u003d createHttpsChannelConnector(server.webServer,\n              httpConfig);\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        connector.setHost(ep.getHost());\n        connector.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        connector.setAcceptQueueSize(backlogSize);\n        connector.setIdleTimeout(idleTimeout);\n        server.addListener(connector);\n      }\n      server.loadListeners();\n      return server;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "294695dd57cb75f2756a31a54264bdd37b32bb01": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16314.  Make sure all web end points are covered by the same authentication filter.\n               Contributed by Prabhu Joseph\n",
      "commitDate": "05/06/19 3:55 PM",
      "commitName": "294695dd57cb75f2756a31a54264bdd37b32bb01",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/01/19 2:54 PM",
      "commitNameOld": "d43af8b3db4743b4b240751b6f29de6c20cfd6e5",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 152.0,
      "commitsBetweenForRepo": 1072,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,66 @@\n     public HttpServer2 build() throws IOException {\n       Preconditions.checkNotNull(name, \"name is not set\");\n       Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n \n       if (hostName \u003d\u003d null) {\n         hostName \u003d endpoints.get(0).getHost();\n       }\n \n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n \n       HttpServer2 server \u003d new HttpServer2(this);\n \n-      if (this.securityEnabled) {\n+      if (this.securityEnabled \u0026\u0026\n+          !this.conf.get(authFilterConfigurationPrefix + \"type\").\n+          equals(PseudoAuthenticationHandler.TYPE)) {\n         server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n \n       for (URI ep : endpoints) {\n         if (HTTPS_SCHEME.equals(ep.getScheme())) {\n           loadSSLConfiguration();\n           break;\n         }\n       }\n \n       int requestHeaderSize \u003d conf.getInt(\n           HTTP_MAX_REQUEST_HEADER_SIZE_KEY,\n           HTTP_MAX_REQUEST_HEADER_SIZE_DEFAULT);\n       int responseHeaderSize \u003d conf.getInt(\n           HTTP_MAX_RESPONSE_HEADER_SIZE_KEY,\n           HTTP_MAX_RESPONSE_HEADER_SIZE_DEFAULT);\n       int idleTimeout \u003d conf.getInt(HTTP_IDLE_TIMEOUT_MS_KEY,\n           HTTP_IDLE_TIMEOUT_MS_DEFAULT);\n \n       HttpConfiguration httpConfig \u003d new HttpConfiguration();\n       httpConfig.setRequestHeaderSize(requestHeaderSize);\n       httpConfig.setResponseHeaderSize(responseHeaderSize);\n       httpConfig.setSendServerVersion(false);\n \n       int backlogSize \u003d conf.getInt(HTTP_SOCKET_BACKLOG_SIZE_KEY,\n           HTTP_SOCKET_BACKLOG_SIZE_DEFAULT);\n \n       for (URI ep : endpoints) {\n         final ServerConnector connector;\n         String scheme \u003d ep.getScheme();\n         if (HTTP_SCHEME.equals(scheme)) {\n           connector \u003d createHttpChannelConnector(server.webServer,\n               httpConfig);\n         } else if (HTTPS_SCHEME.equals(scheme)) {\n           connector \u003d createHttpsChannelConnector(server.webServer,\n               httpConfig);\n         } else {\n           throw new HadoopIllegalArgumentException(\n               \"unknown scheme for endpoint:\" + ep);\n         }\n         connector.setHost(ep.getHost());\n         connector.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n         connector.setAcceptQueueSize(backlogSize);\n         connector.setIdleTimeout(idleTimeout);\n         server.addListener(connector);\n       }\n       server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public HttpServer2 build() throws IOException {\n      Preconditions.checkNotNull(name, \"name is not set\");\n      Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.get(0).getHost();\n      }\n\n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n\n      HttpServer2 server \u003d new HttpServer2(this);\n\n      if (this.securityEnabled \u0026\u0026\n          !this.conf.get(authFilterConfigurationPrefix + \"type\").\n          equals(PseudoAuthenticationHandler.TYPE)) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      for (URI ep : endpoints) {\n        if (HTTPS_SCHEME.equals(ep.getScheme())) {\n          loadSSLConfiguration();\n          break;\n        }\n      }\n\n      int requestHeaderSize \u003d conf.getInt(\n          HTTP_MAX_REQUEST_HEADER_SIZE_KEY,\n          HTTP_MAX_REQUEST_HEADER_SIZE_DEFAULT);\n      int responseHeaderSize \u003d conf.getInt(\n          HTTP_MAX_RESPONSE_HEADER_SIZE_KEY,\n          HTTP_MAX_RESPONSE_HEADER_SIZE_DEFAULT);\n      int idleTimeout \u003d conf.getInt(HTTP_IDLE_TIMEOUT_MS_KEY,\n          HTTP_IDLE_TIMEOUT_MS_DEFAULT);\n\n      HttpConfiguration httpConfig \u003d new HttpConfiguration();\n      httpConfig.setRequestHeaderSize(requestHeaderSize);\n      httpConfig.setResponseHeaderSize(responseHeaderSize);\n      httpConfig.setSendServerVersion(false);\n\n      int backlogSize \u003d conf.getInt(HTTP_SOCKET_BACKLOG_SIZE_KEY,\n          HTTP_SOCKET_BACKLOG_SIZE_DEFAULT);\n\n      for (URI ep : endpoints) {\n        final ServerConnector connector;\n        String scheme \u003d ep.getScheme();\n        if (HTTP_SCHEME.equals(scheme)) {\n          connector \u003d createHttpChannelConnector(server.webServer,\n              httpConfig);\n        } else if (HTTPS_SCHEME.equals(scheme)) {\n          connector \u003d createHttpsChannelConnector(server.webServer,\n              httpConfig);\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        connector.setHost(ep.getHost());\n        connector.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        connector.setAcceptQueueSize(backlogSize);\n        connector.setIdleTimeout(idleTimeout);\n        server.addListener(connector);\n      }\n      server.loadListeners();\n      return server;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "e780556ae9229fe7a90817eb4e5449d7eed35dd8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15696. KMS performance regression due to too many open file descriptors after Jetty migration. Contributed by Wei-Chiu Chuang.\n",
      "commitDate": "05/09/18 9:52 AM",
      "commitName": "e780556ae9229fe7a90817eb4e5449d7eed35dd8",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "01/06/18 2:42 PM",
      "commitNameOld": "cba319499822a2475c60c43ea71f8e78237e139f",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 95.8,
      "commitsBetweenForRepo": 673,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,64 @@\n     public HttpServer2 build() throws IOException {\n       Preconditions.checkNotNull(name, \"name is not set\");\n       Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n \n       if (hostName \u003d\u003d null) {\n         hostName \u003d endpoints.get(0).getHost();\n       }\n \n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n \n       HttpServer2 server \u003d new HttpServer2(this);\n \n       if (this.securityEnabled) {\n         server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n \n       for (URI ep : endpoints) {\n         if (HTTPS_SCHEME.equals(ep.getScheme())) {\n           loadSSLConfiguration();\n           break;\n         }\n       }\n \n       int requestHeaderSize \u003d conf.getInt(\n           HTTP_MAX_REQUEST_HEADER_SIZE_KEY,\n           HTTP_MAX_REQUEST_HEADER_SIZE_DEFAULT);\n       int responseHeaderSize \u003d conf.getInt(\n           HTTP_MAX_RESPONSE_HEADER_SIZE_KEY,\n           HTTP_MAX_RESPONSE_HEADER_SIZE_DEFAULT);\n+      int idleTimeout \u003d conf.getInt(HTTP_IDLE_TIMEOUT_MS_KEY,\n+          HTTP_IDLE_TIMEOUT_MS_DEFAULT);\n \n       HttpConfiguration httpConfig \u003d new HttpConfiguration();\n       httpConfig.setRequestHeaderSize(requestHeaderSize);\n       httpConfig.setResponseHeaderSize(responseHeaderSize);\n       httpConfig.setSendServerVersion(false);\n \n       int backlogSize \u003d conf.getInt(HTTP_SOCKET_BACKLOG_SIZE_KEY,\n           HTTP_SOCKET_BACKLOG_SIZE_DEFAULT);\n \n       for (URI ep : endpoints) {\n         final ServerConnector connector;\n         String scheme \u003d ep.getScheme();\n         if (HTTP_SCHEME.equals(scheme)) {\n           connector \u003d createHttpChannelConnector(server.webServer,\n               httpConfig);\n         } else if (HTTPS_SCHEME.equals(scheme)) {\n           connector \u003d createHttpsChannelConnector(server.webServer,\n               httpConfig);\n         } else {\n           throw new HadoopIllegalArgumentException(\n               \"unknown scheme for endpoint:\" + ep);\n         }\n         connector.setHost(ep.getHost());\n         connector.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n         connector.setAcceptQueueSize(backlogSize);\n+        connector.setIdleTimeout(idleTimeout);\n         server.addListener(connector);\n       }\n       server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public HttpServer2 build() throws IOException {\n      Preconditions.checkNotNull(name, \"name is not set\");\n      Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.get(0).getHost();\n      }\n\n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n\n      HttpServer2 server \u003d new HttpServer2(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      for (URI ep : endpoints) {\n        if (HTTPS_SCHEME.equals(ep.getScheme())) {\n          loadSSLConfiguration();\n          break;\n        }\n      }\n\n      int requestHeaderSize \u003d conf.getInt(\n          HTTP_MAX_REQUEST_HEADER_SIZE_KEY,\n          HTTP_MAX_REQUEST_HEADER_SIZE_DEFAULT);\n      int responseHeaderSize \u003d conf.getInt(\n          HTTP_MAX_RESPONSE_HEADER_SIZE_KEY,\n          HTTP_MAX_RESPONSE_HEADER_SIZE_DEFAULT);\n      int idleTimeout \u003d conf.getInt(HTTP_IDLE_TIMEOUT_MS_KEY,\n          HTTP_IDLE_TIMEOUT_MS_DEFAULT);\n\n      HttpConfiguration httpConfig \u003d new HttpConfiguration();\n      httpConfig.setRequestHeaderSize(requestHeaderSize);\n      httpConfig.setResponseHeaderSize(responseHeaderSize);\n      httpConfig.setSendServerVersion(false);\n\n      int backlogSize \u003d conf.getInt(HTTP_SOCKET_BACKLOG_SIZE_KEY,\n          HTTP_SOCKET_BACKLOG_SIZE_DEFAULT);\n\n      for (URI ep : endpoints) {\n        final ServerConnector connector;\n        String scheme \u003d ep.getScheme();\n        if (HTTP_SCHEME.equals(scheme)) {\n          connector \u003d createHttpChannelConnector(server.webServer,\n              httpConfig);\n        } else if (HTTPS_SCHEME.equals(scheme)) {\n          connector \u003d createHttpsChannelConnector(server.webServer,\n              httpConfig);\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        connector.setHost(ep.getHost());\n        connector.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        connector.setAcceptQueueSize(backlogSize);\n        connector.setIdleTimeout(idleTimeout);\n        server.addListener(connector);\n      }\n      server.loadListeners();\n      return server;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "1f04cb45f70648678840cdafbec68d534b03fe95": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14560. Make HttpServer2 backlog size configurable. Contributed by Alexander Krasheninnikov.\n\nThis closes #242.\n",
      "commitDate": "17/08/17 1:05 AM",
      "commitName": "1f04cb45f70648678840cdafbec68d534b03fe95",
      "commitAuthor": "Alexandr Krasheninnikov",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 30.15,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,61 @@\n     public HttpServer2 build() throws IOException {\n       Preconditions.checkNotNull(name, \"name is not set\");\n       Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n \n       if (hostName \u003d\u003d null) {\n         hostName \u003d endpoints.get(0).getHost();\n       }\n \n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n \n       HttpServer2 server \u003d new HttpServer2(this);\n \n       if (this.securityEnabled) {\n         server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n \n       for (URI ep : endpoints) {\n         if (HTTPS_SCHEME.equals(ep.getScheme())) {\n           loadSSLConfiguration();\n           break;\n         }\n       }\n \n       int requestHeaderSize \u003d conf.getInt(\n           HTTP_MAX_REQUEST_HEADER_SIZE_KEY,\n           HTTP_MAX_REQUEST_HEADER_SIZE_DEFAULT);\n       int responseHeaderSize \u003d conf.getInt(\n           HTTP_MAX_RESPONSE_HEADER_SIZE_KEY,\n           HTTP_MAX_RESPONSE_HEADER_SIZE_DEFAULT);\n \n       HttpConfiguration httpConfig \u003d new HttpConfiguration();\n       httpConfig.setRequestHeaderSize(requestHeaderSize);\n       httpConfig.setResponseHeaderSize(responseHeaderSize);\n       httpConfig.setSendServerVersion(false);\n \n+      int backlogSize \u003d conf.getInt(HTTP_SOCKET_BACKLOG_SIZE_KEY,\n+          HTTP_SOCKET_BACKLOG_SIZE_DEFAULT);\n+\n       for (URI ep : endpoints) {\n         final ServerConnector connector;\n         String scheme \u003d ep.getScheme();\n         if (HTTP_SCHEME.equals(scheme)) {\n           connector \u003d createHttpChannelConnector(server.webServer,\n               httpConfig);\n         } else if (HTTPS_SCHEME.equals(scheme)) {\n           connector \u003d createHttpsChannelConnector(server.webServer,\n               httpConfig);\n         } else {\n           throw new HadoopIllegalArgumentException(\n               \"unknown scheme for endpoint:\" + ep);\n         }\n         connector.setHost(ep.getHost());\n         connector.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n+        connector.setAcceptQueueSize(backlogSize);\n         server.addListener(connector);\n       }\n       server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public HttpServer2 build() throws IOException {\n      Preconditions.checkNotNull(name, \"name is not set\");\n      Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.get(0).getHost();\n      }\n\n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n\n      HttpServer2 server \u003d new HttpServer2(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      for (URI ep : endpoints) {\n        if (HTTPS_SCHEME.equals(ep.getScheme())) {\n          loadSSLConfiguration();\n          break;\n        }\n      }\n\n      int requestHeaderSize \u003d conf.getInt(\n          HTTP_MAX_REQUEST_HEADER_SIZE_KEY,\n          HTTP_MAX_REQUEST_HEADER_SIZE_DEFAULT);\n      int responseHeaderSize \u003d conf.getInt(\n          HTTP_MAX_RESPONSE_HEADER_SIZE_KEY,\n          HTTP_MAX_RESPONSE_HEADER_SIZE_DEFAULT);\n\n      HttpConfiguration httpConfig \u003d new HttpConfiguration();\n      httpConfig.setRequestHeaderSize(requestHeaderSize);\n      httpConfig.setResponseHeaderSize(responseHeaderSize);\n      httpConfig.setSendServerVersion(false);\n\n      int backlogSize \u003d conf.getInt(HTTP_SOCKET_BACKLOG_SIZE_KEY,\n          HTTP_SOCKET_BACKLOG_SIZE_DEFAULT);\n\n      for (URI ep : endpoints) {\n        final ServerConnector connector;\n        String scheme \u003d ep.getScheme();\n        if (HTTP_SCHEME.equals(scheme)) {\n          connector \u003d createHttpChannelConnector(server.webServer,\n              httpConfig);\n        } else if (HTTPS_SCHEME.equals(scheme)) {\n          connector \u003d createHttpsChannelConnector(server.webServer,\n              httpConfig);\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        connector.setHost(ep.getHost());\n        connector.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        connector.setAcceptQueueSize(backlogSize);\n        server.addListener(connector);\n      }\n      server.loadListeners();\n      return server;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "a180ba408128b2d916822e78deb979bbcd1894da": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13414. Hide Jetty Server version header in HTTP responses. Contributed by Surendra Singth Lilhore.\n",
      "commitDate": "05/07/17 3:35 AM",
      "commitName": "a180ba408128b2d916822e78deb979bbcd1894da",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "02/05/17 5:51 PM",
      "commitNameOld": "8b82317fab0cb3023da333d4d557e226712a9c92",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 63.41,
      "commitsBetweenForRepo": 311,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,57 @@\n     public HttpServer2 build() throws IOException {\n       Preconditions.checkNotNull(name, \"name is not set\");\n       Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n \n       if (hostName \u003d\u003d null) {\n         hostName \u003d endpoints.get(0).getHost();\n       }\n \n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n \n       HttpServer2 server \u003d new HttpServer2(this);\n \n       if (this.securityEnabled) {\n         server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n \n       for (URI ep : endpoints) {\n         if (HTTPS_SCHEME.equals(ep.getScheme())) {\n           loadSSLConfiguration();\n           break;\n         }\n       }\n \n       int requestHeaderSize \u003d conf.getInt(\n           HTTP_MAX_REQUEST_HEADER_SIZE_KEY,\n           HTTP_MAX_REQUEST_HEADER_SIZE_DEFAULT);\n       int responseHeaderSize \u003d conf.getInt(\n           HTTP_MAX_RESPONSE_HEADER_SIZE_KEY,\n           HTTP_MAX_RESPONSE_HEADER_SIZE_DEFAULT);\n \n       HttpConfiguration httpConfig \u003d new HttpConfiguration();\n       httpConfig.setRequestHeaderSize(requestHeaderSize);\n       httpConfig.setResponseHeaderSize(responseHeaderSize);\n+      httpConfig.setSendServerVersion(false);\n \n       for (URI ep : endpoints) {\n         final ServerConnector connector;\n         String scheme \u003d ep.getScheme();\n         if (HTTP_SCHEME.equals(scheme)) {\n           connector \u003d createHttpChannelConnector(server.webServer,\n               httpConfig);\n         } else if (HTTPS_SCHEME.equals(scheme)) {\n           connector \u003d createHttpsChannelConnector(server.webServer,\n               httpConfig);\n         } else {\n           throw new HadoopIllegalArgumentException(\n               \"unknown scheme for endpoint:\" + ep);\n         }\n         connector.setHost(ep.getHost());\n         connector.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n         server.addListener(connector);\n       }\n       server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public HttpServer2 build() throws IOException {\n      Preconditions.checkNotNull(name, \"name is not set\");\n      Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.get(0).getHost();\n      }\n\n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n\n      HttpServer2 server \u003d new HttpServer2(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      for (URI ep : endpoints) {\n        if (HTTPS_SCHEME.equals(ep.getScheme())) {\n          loadSSLConfiguration();\n          break;\n        }\n      }\n\n      int requestHeaderSize \u003d conf.getInt(\n          HTTP_MAX_REQUEST_HEADER_SIZE_KEY,\n          HTTP_MAX_REQUEST_HEADER_SIZE_DEFAULT);\n      int responseHeaderSize \u003d conf.getInt(\n          HTTP_MAX_RESPONSE_HEADER_SIZE_KEY,\n          HTTP_MAX_RESPONSE_HEADER_SIZE_DEFAULT);\n\n      HttpConfiguration httpConfig \u003d new HttpConfiguration();\n      httpConfig.setRequestHeaderSize(requestHeaderSize);\n      httpConfig.setResponseHeaderSize(responseHeaderSize);\n      httpConfig.setSendServerVersion(false);\n\n      for (URI ep : endpoints) {\n        final ServerConnector connector;\n        String scheme \u003d ep.getScheme();\n        if (HTTP_SCHEME.equals(scheme)) {\n          connector \u003d createHttpChannelConnector(server.webServer,\n              httpConfig);\n        } else if (HTTPS_SCHEME.equals(scheme)) {\n          connector \u003d createHttpsChannelConnector(server.webServer,\n              httpConfig);\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        connector.setHost(ep.getHost());\n        connector.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        server.addListener(connector);\n      }\n      server.loadListeners();\n      return server;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "5d182949badb2eb80393de7ba3838102d006488b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13597. Switch KMS from Tomcat to Jetty. Contributed by John Zhuge.\n",
      "commitDate": "05/01/17 5:21 PM",
      "commitName": "5d182949badb2eb80393de7ba3838102d006488b",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "08/11/16 7:25 AM",
      "commitNameOld": "dbb133ccfc00e20622a5dbf7a6e1126fb63d7487",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 58.41,
      "commitsBetweenForRepo": 318,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,56 @@\n     public HttpServer2 build() throws IOException {\n       Preconditions.checkNotNull(name, \"name is not set\");\n       Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n \n       if (hostName \u003d\u003d null) {\n         hostName \u003d endpoints.get(0).getHost();\n       }\n \n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n \n       HttpServer2 server \u003d new HttpServer2(this);\n \n       if (this.securityEnabled) {\n         server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n \n       for (URI ep : endpoints) {\n+        if (HTTPS_SCHEME.equals(ep.getScheme())) {\n+          loadSSLConfiguration();\n+          break;\n+        }\n+      }\n+\n+      int requestHeaderSize \u003d conf.getInt(\n+          HTTP_MAX_REQUEST_HEADER_SIZE_KEY,\n+          HTTP_MAX_REQUEST_HEADER_SIZE_DEFAULT);\n+      int responseHeaderSize \u003d conf.getInt(\n+          HTTP_MAX_RESPONSE_HEADER_SIZE_KEY,\n+          HTTP_MAX_RESPONSE_HEADER_SIZE_DEFAULT);\n+\n+      HttpConfiguration httpConfig \u003d new HttpConfiguration();\n+      httpConfig.setRequestHeaderSize(requestHeaderSize);\n+      httpConfig.setResponseHeaderSize(responseHeaderSize);\n+\n+      for (URI ep : endpoints) {\n         final ServerConnector connector;\n         String scheme \u003d ep.getScheme();\n-        if (\"http\".equals(scheme)) {\n-          connector \u003d\n-              HttpServer2.createDefaultChannelConnector(server.webServer);\n-        } else if (\"https\".equals(scheme)) {\n-          connector \u003d createHttpsChannelConnector(server.webServer);\n-\n+        if (HTTP_SCHEME.equals(scheme)) {\n+          connector \u003d createHttpChannelConnector(server.webServer,\n+              httpConfig);\n+        } else if (HTTPS_SCHEME.equals(scheme)) {\n+          connector \u003d createHttpsChannelConnector(server.webServer,\n+              httpConfig);\n         } else {\n           throw new HadoopIllegalArgumentException(\n               \"unknown scheme for endpoint:\" + ep);\n         }\n         connector.setHost(ep.getHost());\n         connector.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n         server.addListener(connector);\n       }\n       server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public HttpServer2 build() throws IOException {\n      Preconditions.checkNotNull(name, \"name is not set\");\n      Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.get(0).getHost();\n      }\n\n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n\n      HttpServer2 server \u003d new HttpServer2(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      for (URI ep : endpoints) {\n        if (HTTPS_SCHEME.equals(ep.getScheme())) {\n          loadSSLConfiguration();\n          break;\n        }\n      }\n\n      int requestHeaderSize \u003d conf.getInt(\n          HTTP_MAX_REQUEST_HEADER_SIZE_KEY,\n          HTTP_MAX_REQUEST_HEADER_SIZE_DEFAULT);\n      int responseHeaderSize \u003d conf.getInt(\n          HTTP_MAX_RESPONSE_HEADER_SIZE_KEY,\n          HTTP_MAX_RESPONSE_HEADER_SIZE_DEFAULT);\n\n      HttpConfiguration httpConfig \u003d new HttpConfiguration();\n      httpConfig.setRequestHeaderSize(requestHeaderSize);\n      httpConfig.setResponseHeaderSize(responseHeaderSize);\n\n      for (URI ep : endpoints) {\n        final ServerConnector connector;\n        String scheme \u003d ep.getScheme();\n        if (HTTP_SCHEME.equals(scheme)) {\n          connector \u003d createHttpChannelConnector(server.webServer,\n              httpConfig);\n        } else if (HTTPS_SCHEME.equals(scheme)) {\n          connector \u003d createHttpsChannelConnector(server.webServer,\n              httpConfig);\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        connector.setHost(ep.getHost());\n        connector.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        server.addListener(connector);\n      }\n      server.loadListeners();\n      return server;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10075. Update jetty dependency to version 9 (rkanter)\n",
      "commitDate": "27/10/16 4:09 PM",
      "commitName": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "19/08/16 9:22 AM",
      "commitNameOld": "03a9343d5798384b66fbd21e1e028acaf55b00e9",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 69.28,
      "commitsBetweenForRepo": 490,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n     public HttpServer2 build() throws IOException {\n       Preconditions.checkNotNull(name, \"name is not set\");\n       Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n \n       if (hostName \u003d\u003d null) {\n         hostName \u003d endpoints.get(0).getHost();\n       }\n \n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n \n       HttpServer2 server \u003d new HttpServer2(this);\n \n       if (this.securityEnabled) {\n         server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n \n       for (URI ep : endpoints) {\n-        final Connector listener;\n+        final ServerConnector connector;\n         String scheme \u003d ep.getScheme();\n         if (\"http\".equals(scheme)) {\n-          listener \u003d HttpServer2.createDefaultChannelConnector();\n+          connector \u003d\n+              HttpServer2.createDefaultChannelConnector(server.webServer);\n         } else if (\"https\".equals(scheme)) {\n-          listener \u003d createHttpsChannelConnector();\n+          connector \u003d createHttpsChannelConnector(server.webServer);\n \n         } else {\n           throw new HadoopIllegalArgumentException(\n               \"unknown scheme for endpoint:\" + ep);\n         }\n-        listener.setHost(ep.getHost());\n-        listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n-        server.addListener(listener);\n+        connector.setHost(ep.getHost());\n+        connector.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n+        server.addListener(connector);\n       }\n       server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public HttpServer2 build() throws IOException {\n      Preconditions.checkNotNull(name, \"name is not set\");\n      Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.get(0).getHost();\n      }\n\n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n\n      HttpServer2 server \u003d new HttpServer2(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      for (URI ep : endpoints) {\n        final ServerConnector connector;\n        String scheme \u003d ep.getScheme();\n        if (\"http\".equals(scheme)) {\n          connector \u003d\n              HttpServer2.createDefaultChannelConnector(server.webServer);\n        } else if (\"https\".equals(scheme)) {\n          connector \u003d createHttpsChannelConnector(server.webServer);\n\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        connector.setHost(ep.getHost());\n        connector.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        server.addListener(connector);\n      }\n      server.loadListeners();\n      return server;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "03a9343d5798384b66fbd21e1e028acaf55b00e9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12765. HttpServer2 should switch to using the non-blocking SslSelectChannelConnector to prevent performance degradation when handling SSL connections. Contributed by Min Shen.\n",
      "commitDate": "19/08/16 9:22 AM",
      "commitName": "03a9343d5798384b66fbd21e1e028acaf55b00e9",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "08/07/16 2:17 PM",
      "commitNameOld": "ef30bf3c3f2688f803b3e9d16cc7e9f61a1ab0de",
      "commitAuthorOld": "Jitendra Pandey",
      "daysBetweenCommits": 41.8,
      "commitsBetweenForRepo": 412,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,37 @@\n     public HttpServer2 build() throws IOException {\n       Preconditions.checkNotNull(name, \"name is not set\");\n       Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n \n       if (hostName \u003d\u003d null) {\n         hostName \u003d endpoints.get(0).getHost();\n       }\n \n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n \n       HttpServer2 server \u003d new HttpServer2(this);\n \n       if (this.securityEnabled) {\n         server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n \n       for (URI ep : endpoints) {\n         final Connector listener;\n         String scheme \u003d ep.getScheme();\n         if (\"http\".equals(scheme)) {\n           listener \u003d HttpServer2.createDefaultChannelConnector();\n         } else if (\"https\".equals(scheme)) {\n-          SslSocketConnector c \u003d new SslSocketConnectorSecure();\n-          c.setHeaderBufferSize(1024*64);\n-          c.setNeedClientAuth(needsClientAuth);\n-          c.setKeyPassword(keyPassword);\n-\n-          if (keyStore !\u003d null) {\n-            c.setKeystore(keyStore);\n-            c.setKeystoreType(keyStoreType);\n-            c.setPassword(keyStorePassword);\n-          }\n-\n-          if (trustStore !\u003d null) {\n-            c.setTruststore(trustStore);\n-            c.setTruststoreType(trustStoreType);\n-            c.setTrustPassword(trustStorePassword);\n-          }\n-\n-          if(null !\u003d excludeCiphers \u0026\u0026 !excludeCiphers.isEmpty()) {\n-            c.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n-            LOG.info(\"Excluded Cipher List:\" + excludeCiphers);\n-          }\n-\n-          listener \u003d c;\n+          listener \u003d createHttpsChannelConnector();\n \n         } else {\n           throw new HadoopIllegalArgumentException(\n               \"unknown scheme for endpoint:\" + ep);\n         }\n         listener.setHost(ep.getHost());\n         listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n         server.addListener(listener);\n       }\n       server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public HttpServer2 build() throws IOException {\n      Preconditions.checkNotNull(name, \"name is not set\");\n      Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.get(0).getHost();\n      }\n\n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n\n      HttpServer2 server \u003d new HttpServer2(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      for (URI ep : endpoints) {\n        final Connector listener;\n        String scheme \u003d ep.getScheme();\n        if (\"http\".equals(scheme)) {\n          listener \u003d HttpServer2.createDefaultChannelConnector();\n        } else if (\"https\".equals(scheme)) {\n          listener \u003d createHttpsChannelConnector();\n\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        listener.setHost(ep.getHost());\n        listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        server.addListener(listener);\n      }\n      server.loadListeners();\n      return server;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "a2fdfff02daef85b651eda31e99868986aab5b28": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12668. Support excluding weak Ciphers in HttpServer2 through ssl-server.conf. Contributed by Vijay Singh.\n\nChange-Id: Ie46a5427d29188935427f67e55203c19fcd83335\n",
      "commitDate": "22/02/16 2:13 PM",
      "commitName": "a2fdfff02daef85b651eda31e99868986aab5b28",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "11/01/16 8:34 PM",
      "commitNameOld": "56b9500bbd44b79c3c3be84a17c97502f923c6f8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 41.74,
      "commitsBetweenForRepo": 298,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,59 @@\n     public HttpServer2 build() throws IOException {\n       Preconditions.checkNotNull(name, \"name is not set\");\n       Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n \n       if (hostName \u003d\u003d null) {\n         hostName \u003d endpoints.get(0).getHost();\n       }\n \n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n \n       HttpServer2 server \u003d new HttpServer2(this);\n \n       if (this.securityEnabled) {\n         server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n \n       for (URI ep : endpoints) {\n         final Connector listener;\n         String scheme \u003d ep.getScheme();\n         if (\"http\".equals(scheme)) {\n           listener \u003d HttpServer2.createDefaultChannelConnector();\n         } else if (\"https\".equals(scheme)) {\n           SslSocketConnector c \u003d new SslSocketConnectorSecure();\n           c.setHeaderBufferSize(1024*64);\n           c.setNeedClientAuth(needsClientAuth);\n           c.setKeyPassword(keyPassword);\n \n           if (keyStore !\u003d null) {\n             c.setKeystore(keyStore);\n             c.setKeystoreType(keyStoreType);\n             c.setPassword(keyStorePassword);\n           }\n \n           if (trustStore !\u003d null) {\n             c.setTruststore(trustStore);\n             c.setTruststoreType(trustStoreType);\n             c.setTrustPassword(trustStorePassword);\n           }\n+\n+          if(null !\u003d excludeCiphers \u0026\u0026 !excludeCiphers.isEmpty()) {\n+            c.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n+            LOG.info(\"Excluded Cipher List:\" + excludeCiphers);\n+          }\n+\n           listener \u003d c;\n \n         } else {\n           throw new HadoopIllegalArgumentException(\n               \"unknown scheme for endpoint:\" + ep);\n         }\n         listener.setHost(ep.getHost());\n         listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n         server.addListener(listener);\n       }\n       server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public HttpServer2 build() throws IOException {\n      Preconditions.checkNotNull(name, \"name is not set\");\n      Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.get(0).getHost();\n      }\n\n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n\n      HttpServer2 server \u003d new HttpServer2(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      for (URI ep : endpoints) {\n        final Connector listener;\n        String scheme \u003d ep.getScheme();\n        if (\"http\".equals(scheme)) {\n          listener \u003d HttpServer2.createDefaultChannelConnector();\n        } else if (\"https\".equals(scheme)) {\n          SslSocketConnector c \u003d new SslSocketConnectorSecure();\n          c.setHeaderBufferSize(1024*64);\n          c.setNeedClientAuth(needsClientAuth);\n          c.setKeyPassword(keyPassword);\n\n          if (keyStore !\u003d null) {\n            c.setKeystore(keyStore);\n            c.setKeystoreType(keyStoreType);\n            c.setPassword(keyStorePassword);\n          }\n\n          if (trustStore !\u003d null) {\n            c.setTruststore(trustStore);\n            c.setTruststoreType(trustStoreType);\n            c.setTrustPassword(trustStorePassword);\n          }\n\n          if(null !\u003d excludeCiphers \u0026\u0026 !excludeCiphers.isEmpty()) {\n            c.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n            LOG.info(\"Excluded Cipher List:\" + excludeCiphers);\n          }\n\n          listener \u003d c;\n\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        listener.setHost(ep.getHost());\n        listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        server.addListener(listener);\n      }\n      server.loadListeners();\n      return server;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "3ab3a6498812c9fa0c53dae02ce696033062af87": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11350. The size of header buffer of HttpServer is too small when HTTPS is enabled. Contributed by Benoy Antony.\n",
      "commitDate": "15/01/15 4:17 PM",
      "commitName": "3ab3a6498812c9fa0c53dae02ce696033062af87",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "21/12/14 2:45 PM",
      "commitNameOld": "2860eeb14a958a8861b9ad3d6bd685df48da8cd3",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 25.06,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n     public HttpServer2 build() throws IOException {\n       Preconditions.checkNotNull(name, \"name is not set\");\n       Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n \n       if (hostName \u003d\u003d null) {\n         hostName \u003d endpoints.get(0).getHost();\n       }\n \n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n \n       HttpServer2 server \u003d new HttpServer2(this);\n \n       if (this.securityEnabled) {\n         server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n \n       for (URI ep : endpoints) {\n         final Connector listener;\n         String scheme \u003d ep.getScheme();\n         if (\"http\".equals(scheme)) {\n           listener \u003d HttpServer2.createDefaultChannelConnector();\n         } else if (\"https\".equals(scheme)) {\n           SslSocketConnector c \u003d new SslSocketConnectorSecure();\n+          c.setHeaderBufferSize(1024*64);\n           c.setNeedClientAuth(needsClientAuth);\n           c.setKeyPassword(keyPassword);\n \n           if (keyStore !\u003d null) {\n             c.setKeystore(keyStore);\n             c.setKeystoreType(keyStoreType);\n             c.setPassword(keyStorePassword);\n           }\n \n           if (trustStore !\u003d null) {\n             c.setTruststore(trustStore);\n             c.setTruststoreType(trustStoreType);\n             c.setTrustPassword(trustStorePassword);\n           }\n           listener \u003d c;\n \n         } else {\n           throw new HadoopIllegalArgumentException(\n               \"unknown scheme for endpoint:\" + ep);\n         }\n         listener.setHost(ep.getHost());\n         listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n         server.addListener(listener);\n       }\n       server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public HttpServer2 build() throws IOException {\n      Preconditions.checkNotNull(name, \"name is not set\");\n      Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.get(0).getHost();\n      }\n\n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n\n      HttpServer2 server \u003d new HttpServer2(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      for (URI ep : endpoints) {\n        final Connector listener;\n        String scheme \u003d ep.getScheme();\n        if (\"http\".equals(scheme)) {\n          listener \u003d HttpServer2.createDefaultChannelConnector();\n        } else if (\"https\".equals(scheme)) {\n          SslSocketConnector c \u003d new SslSocketConnectorSecure();\n          c.setHeaderBufferSize(1024*64);\n          c.setNeedClientAuth(needsClientAuth);\n          c.setKeyPassword(keyPassword);\n\n          if (keyStore !\u003d null) {\n            c.setKeystore(keyStore);\n            c.setKeystoreType(keyStoreType);\n            c.setPassword(keyStorePassword);\n          }\n\n          if (trustStore !\u003d null) {\n            c.setTruststore(trustStore);\n            c.setTruststoreType(trustStoreType);\n            c.setTrustPassword(trustStorePassword);\n          }\n          listener \u003d c;\n\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        listener.setHost(ep.getHost());\n        listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        server.addListener(listener);\n      }\n      server.loadListeners();\n      return server;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "2860eeb14a958a8861b9ad3d6bd685df48da8cd3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7555. Remove the support of unmanaged connectors in HttpServer2. Contributed by Haohui Mai.\n",
      "commitDate": "21/12/14 2:45 PM",
      "commitName": "2860eeb14a958a8861b9ad3d6bd685df48da8cd3",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "11/12/14 4:42 PM",
      "commitNameOld": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 9.92,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,52 @@\n     public HttpServer2 build() throws IOException {\n-      if (this.name \u003d\u003d null) {\n-        throw new HadoopIllegalArgumentException(\"name is not set\");\n-      }\n-\n-      if (endpoints.size() \u003d\u003d 0 \u0026\u0026 connector \u003d\u003d null) {\n-        throw new HadoopIllegalArgumentException(\"No endpoints specified\");\n-      }\n+      Preconditions.checkNotNull(name, \"name is not set\");\n+      Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n \n       if (hostName \u003d\u003d null) {\n-        hostName \u003d endpoints.size() \u003d\u003d 0 ? connector.getHost() : endpoints.get(\n-            0).getHost();\n+        hostName \u003d endpoints.get(0).getHost();\n       }\n \n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n \n       HttpServer2 server \u003d new HttpServer2(this);\n \n       if (this.securityEnabled) {\n         server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n \n-      if (connector !\u003d null) {\n-        server.addUnmanagedListener(connector);\n-      }\n-\n       for (URI ep : endpoints) {\n-        Connector listener \u003d null;\n+        final Connector listener;\n         String scheme \u003d ep.getScheme();\n         if (\"http\".equals(scheme)) {\n           listener \u003d HttpServer2.createDefaultChannelConnector();\n         } else if (\"https\".equals(scheme)) {\n           SslSocketConnector c \u003d new SslSocketConnectorSecure();\n           c.setNeedClientAuth(needsClientAuth);\n           c.setKeyPassword(keyPassword);\n \n           if (keyStore !\u003d null) {\n             c.setKeystore(keyStore);\n             c.setKeystoreType(keyStoreType);\n             c.setPassword(keyStorePassword);\n           }\n \n           if (trustStore !\u003d null) {\n             c.setTruststore(trustStore);\n             c.setTruststoreType(trustStoreType);\n             c.setTrustPassword(trustStorePassword);\n           }\n           listener \u003d c;\n \n         } else {\n           throw new HadoopIllegalArgumentException(\n               \"unknown scheme for endpoint:\" + ep);\n         }\n         listener.setHost(ep.getHost());\n         listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n-        server.addManagedListener(listener);\n+        server.addListener(listener);\n       }\n       server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public HttpServer2 build() throws IOException {\n      Preconditions.checkNotNull(name, \"name is not set\");\n      Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.get(0).getHost();\n      }\n\n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n\n      HttpServer2 server \u003d new HttpServer2(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      for (URI ep : endpoints) {\n        final Connector listener;\n        String scheme \u003d ep.getScheme();\n        if (\"http\".equals(scheme)) {\n          listener \u003d HttpServer2.createDefaultChannelConnector();\n        } else if (\"https\".equals(scheme)) {\n          SslSocketConnector c \u003d new SslSocketConnectorSecure();\n          c.setNeedClientAuth(needsClientAuth);\n          c.setKeyPassword(keyPassword);\n\n          if (keyStore !\u003d null) {\n            c.setKeystore(keyStore);\n            c.setKeystoreType(keyStoreType);\n            c.setPassword(keyStorePassword);\n          }\n\n          if (trustStore !\u003d null) {\n            c.setTruststore(trustStore);\n            c.setTruststoreType(trustStoreType);\n            c.setTrustPassword(trustStorePassword);\n          }\n          listener \u003d c;\n\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        listener.setHost(ep.getHost());\n        listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        server.addListener(listener);\n      }\n      server.loadListeners();\n      return server;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "dbf30e3c0e1522e6588aecac71c990c0b01fd8fb": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11260. Patch up Jetty to disable SSLv3. (Mike Yoder via kasha)\n",
      "commitDate": "04/11/14 4:18 PM",
      "commitName": "dbf30e3c0e1522e6588aecac71c990c0b01fd8fb",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "27/08/14 1:26 PM",
      "commitNameOld": "fdd3bc5f45da615db4fd51cc07cb7d44c211150d",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 69.16,
      "commitsBetweenForRepo": 715,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n     public HttpServer2 build() throws IOException {\n       if (this.name \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\"name is not set\");\n       }\n \n       if (endpoints.size() \u003d\u003d 0 \u0026\u0026 connector \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\"No endpoints specified\");\n       }\n \n       if (hostName \u003d\u003d null) {\n         hostName \u003d endpoints.size() \u003d\u003d 0 ? connector.getHost() : endpoints.get(\n             0).getHost();\n       }\n \n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n \n       HttpServer2 server \u003d new HttpServer2(this);\n \n       if (this.securityEnabled) {\n         server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n \n       if (connector !\u003d null) {\n         server.addUnmanagedListener(connector);\n       }\n \n       for (URI ep : endpoints) {\n         Connector listener \u003d null;\n         String scheme \u003d ep.getScheme();\n         if (\"http\".equals(scheme)) {\n           listener \u003d HttpServer2.createDefaultChannelConnector();\n         } else if (\"https\".equals(scheme)) {\n-          SslSocketConnector c \u003d new SslSocketConnector();\n+          SslSocketConnector c \u003d new SslSocketConnectorSecure();\n           c.setNeedClientAuth(needsClientAuth);\n           c.setKeyPassword(keyPassword);\n \n           if (keyStore !\u003d null) {\n             c.setKeystore(keyStore);\n             c.setKeystoreType(keyStoreType);\n             c.setPassword(keyStorePassword);\n           }\n \n           if (trustStore !\u003d null) {\n             c.setTruststore(trustStore);\n             c.setTruststoreType(trustStoreType);\n             c.setTrustPassword(trustStorePassword);\n           }\n           listener \u003d c;\n \n         } else {\n           throw new HadoopIllegalArgumentException(\n               \"unknown scheme for endpoint:\" + ep);\n         }\n         listener.setHost(ep.getHost());\n         listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n         server.addManagedListener(listener);\n       }\n       server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public HttpServer2 build() throws IOException {\n      if (this.name \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\"name is not set\");\n      }\n\n      if (endpoints.size() \u003d\u003d 0 \u0026\u0026 connector \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\"No endpoints specified\");\n      }\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.size() \u003d\u003d 0 ? connector.getHost() : endpoints.get(\n            0).getHost();\n      }\n\n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n\n      HttpServer2 server \u003d new HttpServer2(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      if (connector !\u003d null) {\n        server.addUnmanagedListener(connector);\n      }\n\n      for (URI ep : endpoints) {\n        Connector listener \u003d null;\n        String scheme \u003d ep.getScheme();\n        if (\"http\".equals(scheme)) {\n          listener \u003d HttpServer2.createDefaultChannelConnector();\n        } else if (\"https\".equals(scheme)) {\n          SslSocketConnector c \u003d new SslSocketConnectorSecure();\n          c.setNeedClientAuth(needsClientAuth);\n          c.setKeyPassword(keyPassword);\n\n          if (keyStore !\u003d null) {\n            c.setKeystore(keyStore);\n            c.setKeystoreType(keyStoreType);\n            c.setPassword(keyStorePassword);\n          }\n\n          if (trustStore !\u003d null) {\n            c.setTruststore(trustStore);\n            c.setTruststoreType(trustStoreType);\n            c.setTrustPassword(trustStorePassword);\n          }\n          listener \u003d c;\n\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        listener.setHost(ep.getHost());\n        listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        server.addManagedListener(listener);\n      }\n      server.loadListeners();\n      return server;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 11:32 PM",
      "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/01/14 11:32 PM",
          "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "27/01/14 10:41 PM",
          "commitNameOld": "87166f1ee81dbad579508c2bdbc7dda96b1ef809",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,71 +1,62 @@\n-    public HttpServer build() throws IOException {\n+    public HttpServer2 build() throws IOException {\n       if (this.name \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\"name is not set\");\n       }\n \n-      // Make the behavior compatible with deprecated interfaces\n-      if (bindAddress !\u003d null \u0026\u0026 port !\u003d -1) {\n-        try {\n-          endpoints.add(0, new URI(\"http\", \"\", bindAddress, port, \"\", \"\", \"\"));\n-        } catch (URISyntaxException e) {\n-          throw new HadoopIllegalArgumentException(\"Invalid endpoint: \"+ e);\n-        }\n-      }\n-\n       if (endpoints.size() \u003d\u003d 0 \u0026\u0026 connector \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\"No endpoints specified\");\n       }\n \n       if (hostName \u003d\u003d null) {\n         hostName \u003d endpoints.size() \u003d\u003d 0 ? connector.getHost() : endpoints.get(\n             0).getHost();\n       }\n-      \n+\n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n-      \n-      HttpServer server \u003d new HttpServer(this);\n+\n+      HttpServer2 server \u003d new HttpServer2(this);\n \n       if (this.securityEnabled) {\n         server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n \n       if (connector !\u003d null) {\n         server.addUnmanagedListener(connector);\n       }\n \n       for (URI ep : endpoints) {\n         Connector listener \u003d null;\n         String scheme \u003d ep.getScheme();\n         if (\"http\".equals(scheme)) {\n-          listener \u003d HttpServer.createDefaultChannelConnector();\n+          listener \u003d HttpServer2.createDefaultChannelConnector();\n         } else if (\"https\".equals(scheme)) {\n           SslSocketConnector c \u003d new SslSocketConnector();\n           c.setNeedClientAuth(needsClientAuth);\n           c.setKeyPassword(keyPassword);\n \n           if (keyStore !\u003d null) {\n             c.setKeystore(keyStore);\n             c.setKeystoreType(keyStoreType);\n             c.setPassword(keyStorePassword);\n           }\n \n           if (trustStore !\u003d null) {\n             c.setTruststore(trustStore);\n             c.setTruststoreType(trustStoreType);\n             c.setTrustPassword(trustStorePassword);\n           }\n           listener \u003d c;\n \n         } else {\n           throw new HadoopIllegalArgumentException(\n               \"unknown scheme for endpoint:\" + ep);\n         }\n         listener.setHost(ep.getHost());\n         listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n         server.addManagedListener(listener);\n       }\n       server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public HttpServer2 build() throws IOException {\n      if (this.name \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\"name is not set\");\n      }\n\n      if (endpoints.size() \u003d\u003d 0 \u0026\u0026 connector \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\"No endpoints specified\");\n      }\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.size() \u003d\u003d 0 ? connector.getHost() : endpoints.get(\n            0).getHost();\n      }\n\n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n\n      HttpServer2 server \u003d new HttpServer2(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      if (connector !\u003d null) {\n        server.addUnmanagedListener(connector);\n      }\n\n      for (URI ep : endpoints) {\n        Connector listener \u003d null;\n        String scheme \u003d ep.getScheme();\n        if (\"http\".equals(scheme)) {\n          listener \u003d HttpServer2.createDefaultChannelConnector();\n        } else if (\"https\".equals(scheme)) {\n          SslSocketConnector c \u003d new SslSocketConnector();\n          c.setNeedClientAuth(needsClientAuth);\n          c.setKeyPassword(keyPassword);\n\n          if (keyStore !\u003d null) {\n            c.setKeystore(keyStore);\n            c.setKeystoreType(keyStoreType);\n            c.setPassword(keyStorePassword);\n          }\n\n          if (trustStore !\u003d null) {\n            c.setTruststore(trustStore);\n            c.setTruststoreType(trustStoreType);\n            c.setTrustPassword(trustStorePassword);\n          }\n          listener \u003d c;\n\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        listener.setHost(ep.getHost());\n        listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        server.addManagedListener(listener);\n      }\n      server.loadListeners();\n      return server;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/01/14 11:32 PM",
          "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "27/01/14 10:41 PM",
          "commitNameOld": "87166f1ee81dbad579508c2bdbc7dda96b1ef809",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,71 +1,62 @@\n-    public HttpServer build() throws IOException {\n+    public HttpServer2 build() throws IOException {\n       if (this.name \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\"name is not set\");\n       }\n \n-      // Make the behavior compatible with deprecated interfaces\n-      if (bindAddress !\u003d null \u0026\u0026 port !\u003d -1) {\n-        try {\n-          endpoints.add(0, new URI(\"http\", \"\", bindAddress, port, \"\", \"\", \"\"));\n-        } catch (URISyntaxException e) {\n-          throw new HadoopIllegalArgumentException(\"Invalid endpoint: \"+ e);\n-        }\n-      }\n-\n       if (endpoints.size() \u003d\u003d 0 \u0026\u0026 connector \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\"No endpoints specified\");\n       }\n \n       if (hostName \u003d\u003d null) {\n         hostName \u003d endpoints.size() \u003d\u003d 0 ? connector.getHost() : endpoints.get(\n             0).getHost();\n       }\n-      \n+\n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n-      \n-      HttpServer server \u003d new HttpServer(this);\n+\n+      HttpServer2 server \u003d new HttpServer2(this);\n \n       if (this.securityEnabled) {\n         server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n \n       if (connector !\u003d null) {\n         server.addUnmanagedListener(connector);\n       }\n \n       for (URI ep : endpoints) {\n         Connector listener \u003d null;\n         String scheme \u003d ep.getScheme();\n         if (\"http\".equals(scheme)) {\n-          listener \u003d HttpServer.createDefaultChannelConnector();\n+          listener \u003d HttpServer2.createDefaultChannelConnector();\n         } else if (\"https\".equals(scheme)) {\n           SslSocketConnector c \u003d new SslSocketConnector();\n           c.setNeedClientAuth(needsClientAuth);\n           c.setKeyPassword(keyPassword);\n \n           if (keyStore !\u003d null) {\n             c.setKeystore(keyStore);\n             c.setKeystoreType(keyStoreType);\n             c.setPassword(keyStorePassword);\n           }\n \n           if (trustStore !\u003d null) {\n             c.setTruststore(trustStore);\n             c.setTruststoreType(trustStoreType);\n             c.setTrustPassword(trustStorePassword);\n           }\n           listener \u003d c;\n \n         } else {\n           throw new HadoopIllegalArgumentException(\n               \"unknown scheme for endpoint:\" + ep);\n         }\n         listener.setHost(ep.getHost());\n         listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n         server.addManagedListener(listener);\n       }\n       server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public HttpServer2 build() throws IOException {\n      if (this.name \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\"name is not set\");\n      }\n\n      if (endpoints.size() \u003d\u003d 0 \u0026\u0026 connector \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\"No endpoints specified\");\n      }\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.size() \u003d\u003d 0 ? connector.getHost() : endpoints.get(\n            0).getHost();\n      }\n\n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n\n      HttpServer2 server \u003d new HttpServer2(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      if (connector !\u003d null) {\n        server.addUnmanagedListener(connector);\n      }\n\n      for (URI ep : endpoints) {\n        Connector listener \u003d null;\n        String scheme \u003d ep.getScheme();\n        if (\"http\".equals(scheme)) {\n          listener \u003d HttpServer2.createDefaultChannelConnector();\n        } else if (\"https\".equals(scheme)) {\n          SslSocketConnector c \u003d new SslSocketConnector();\n          c.setNeedClientAuth(needsClientAuth);\n          c.setKeyPassword(keyPassword);\n\n          if (keyStore !\u003d null) {\n            c.setKeystore(keyStore);\n            c.setKeystoreType(keyStoreType);\n            c.setPassword(keyStorePassword);\n          }\n\n          if (trustStore !\u003d null) {\n            c.setTruststore(trustStore);\n            c.setTruststoreType(trustStoreType);\n            c.setTrustPassword(trustStorePassword);\n          }\n          listener \u003d c;\n\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        listener.setHost(ep.getHost());\n        listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        server.addManagedListener(listener);\n      }\n      server.loadListeners();\n      return server;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
          "extendedDetails": {
            "oldValue": "HttpServer",
            "newValue": "HttpServer2"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/01/14 11:32 PM",
          "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "27/01/14 10:41 PM",
          "commitNameOld": "87166f1ee81dbad579508c2bdbc7dda96b1ef809",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,71 +1,62 @@\n-    public HttpServer build() throws IOException {\n+    public HttpServer2 build() throws IOException {\n       if (this.name \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\"name is not set\");\n       }\n \n-      // Make the behavior compatible with deprecated interfaces\n-      if (bindAddress !\u003d null \u0026\u0026 port !\u003d -1) {\n-        try {\n-          endpoints.add(0, new URI(\"http\", \"\", bindAddress, port, \"\", \"\", \"\"));\n-        } catch (URISyntaxException e) {\n-          throw new HadoopIllegalArgumentException(\"Invalid endpoint: \"+ e);\n-        }\n-      }\n-\n       if (endpoints.size() \u003d\u003d 0 \u0026\u0026 connector \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\"No endpoints specified\");\n       }\n \n       if (hostName \u003d\u003d null) {\n         hostName \u003d endpoints.size() \u003d\u003d 0 ? connector.getHost() : endpoints.get(\n             0).getHost();\n       }\n-      \n+\n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n-      \n-      HttpServer server \u003d new HttpServer(this);\n+\n+      HttpServer2 server \u003d new HttpServer2(this);\n \n       if (this.securityEnabled) {\n         server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n \n       if (connector !\u003d null) {\n         server.addUnmanagedListener(connector);\n       }\n \n       for (URI ep : endpoints) {\n         Connector listener \u003d null;\n         String scheme \u003d ep.getScheme();\n         if (\"http\".equals(scheme)) {\n-          listener \u003d HttpServer.createDefaultChannelConnector();\n+          listener \u003d HttpServer2.createDefaultChannelConnector();\n         } else if (\"https\".equals(scheme)) {\n           SslSocketConnector c \u003d new SslSocketConnector();\n           c.setNeedClientAuth(needsClientAuth);\n           c.setKeyPassword(keyPassword);\n \n           if (keyStore !\u003d null) {\n             c.setKeystore(keyStore);\n             c.setKeystoreType(keyStoreType);\n             c.setPassword(keyStorePassword);\n           }\n \n           if (trustStore !\u003d null) {\n             c.setTruststore(trustStore);\n             c.setTruststoreType(trustStoreType);\n             c.setTrustPassword(trustStorePassword);\n           }\n           listener \u003d c;\n \n         } else {\n           throw new HadoopIllegalArgumentException(\n               \"unknown scheme for endpoint:\" + ep);\n         }\n         listener.setHost(ep.getHost());\n         listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n         server.addManagedListener(listener);\n       }\n       server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public HttpServer2 build() throws IOException {\n      if (this.name \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\"name is not set\");\n      }\n\n      if (endpoints.size() \u003d\u003d 0 \u0026\u0026 connector \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\"No endpoints specified\");\n      }\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.size() \u003d\u003d 0 ? connector.getHost() : endpoints.get(\n            0).getHost();\n      }\n\n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n\n      HttpServer2 server \u003d new HttpServer2(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      if (connector !\u003d null) {\n        server.addUnmanagedListener(connector);\n      }\n\n      for (URI ep : endpoints) {\n        Connector listener \u003d null;\n        String scheme \u003d ep.getScheme();\n        if (\"http\".equals(scheme)) {\n          listener \u003d HttpServer2.createDefaultChannelConnector();\n        } else if (\"https\".equals(scheme)) {\n          SslSocketConnector c \u003d new SslSocketConnector();\n          c.setNeedClientAuth(needsClientAuth);\n          c.setKeyPassword(keyPassword);\n\n          if (keyStore !\u003d null) {\n            c.setKeystore(keyStore);\n            c.setKeystoreType(keyStoreType);\n            c.setPassword(keyStorePassword);\n          }\n\n          if (trustStore !\u003d null) {\n            c.setTruststore(trustStore);\n            c.setTruststoreType(trustStoreType);\n            c.setTrustPassword(trustStorePassword);\n          }\n          listener \u003d c;\n\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        listener.setHost(ep.getHost());\n        listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        server.addManagedListener(listener);\n      }\n      server.loadListeners();\n      return server;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
          "extendedDetails": {}
        }
      ]
    },
    "e8de319789def7ccf2a7e9e14b1011ee825ff37b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5690. DataNode fails to start in secure mode when dfs.http.policy equals to HTTP_ONLY. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1553167 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/12/13 10:23 AM",
      "commitName": "e8de319789def7ccf2a7e9e14b1011ee825ff37b",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "27/11/13 10:20 AM",
      "commitNameOld": "2214871d916fdcae62aa51afbb5fd571f2808745",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 26.0,
      "commitsBetweenForRepo": 144,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,71 @@\n     public HttpServer build() throws IOException {\n       if (this.name \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\"name is not set\");\n       }\n \n       // Make the behavior compatible with deprecated interfaces\n       if (bindAddress !\u003d null \u0026\u0026 port !\u003d -1) {\n         try {\n           endpoints.add(0, new URI(\"http\", \"\", bindAddress, port, \"\", \"\", \"\"));\n         } catch (URISyntaxException e) {\n           throw new HadoopIllegalArgumentException(\"Invalid endpoint: \"+ e);\n         }\n       }\n \n-      if (endpoints.size() \u003d\u003d 0) {\n+      if (endpoints.size() \u003d\u003d 0 \u0026\u0026 connector \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\"No endpoints specified\");\n       }\n \n       if (hostName \u003d\u003d null) {\n-        hostName \u003d endpoints.get(0).getHost();\n+        hostName \u003d endpoints.size() \u003d\u003d 0 ? connector.getHost() : endpoints.get(\n+            0).getHost();\n       }\n       \n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       \n       HttpServer server \u003d new HttpServer(this);\n \n       if (this.securityEnabled) {\n         server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n \n       if (connector !\u003d null) {\n         server.addUnmanagedListener(connector);\n       }\n \n       for (URI ep : endpoints) {\n         Connector listener \u003d null;\n         String scheme \u003d ep.getScheme();\n         if (\"http\".equals(scheme)) {\n           listener \u003d HttpServer.createDefaultChannelConnector();\n         } else if (\"https\".equals(scheme)) {\n           SslSocketConnector c \u003d new SslSocketConnector();\n           c.setNeedClientAuth(needsClientAuth);\n           c.setKeyPassword(keyPassword);\n \n           if (keyStore !\u003d null) {\n             c.setKeystore(keyStore);\n             c.setKeystoreType(keyStoreType);\n             c.setPassword(keyStorePassword);\n           }\n \n           if (trustStore !\u003d null) {\n             c.setTruststore(trustStore);\n             c.setTruststoreType(trustStoreType);\n             c.setTrustPassword(trustStorePassword);\n           }\n           listener \u003d c;\n \n         } else {\n           throw new HadoopIllegalArgumentException(\n               \"unknown scheme for endpoint:\" + ep);\n         }\n         listener.setHost(ep.getHost());\n         listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n         server.addManagedListener(listener);\n       }\n       server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public HttpServer build() throws IOException {\n      if (this.name \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\"name is not set\");\n      }\n\n      // Make the behavior compatible with deprecated interfaces\n      if (bindAddress !\u003d null \u0026\u0026 port !\u003d -1) {\n        try {\n          endpoints.add(0, new URI(\"http\", \"\", bindAddress, port, \"\", \"\", \"\"));\n        } catch (URISyntaxException e) {\n          throw new HadoopIllegalArgumentException(\"Invalid endpoint: \"+ e);\n        }\n      }\n\n      if (endpoints.size() \u003d\u003d 0 \u0026\u0026 connector \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\"No endpoints specified\");\n      }\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.size() \u003d\u003d 0 ? connector.getHost() : endpoints.get(\n            0).getHost();\n      }\n      \n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      \n      HttpServer server \u003d new HttpServer(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      if (connector !\u003d null) {\n        server.addUnmanagedListener(connector);\n      }\n\n      for (URI ep : endpoints) {\n        Connector listener \u003d null;\n        String scheme \u003d ep.getScheme();\n        if (\"http\".equals(scheme)) {\n          listener \u003d HttpServer.createDefaultChannelConnector();\n        } else if (\"https\".equals(scheme)) {\n          SslSocketConnector c \u003d new SslSocketConnector();\n          c.setNeedClientAuth(needsClientAuth);\n          c.setKeyPassword(keyPassword);\n\n          if (keyStore !\u003d null) {\n            c.setKeystore(keyStore);\n            c.setKeystoreType(keyStoreType);\n            c.setPassword(keyStorePassword);\n          }\n\n          if (trustStore !\u003d null) {\n            c.setTruststore(trustStore);\n            c.setTruststoreType(trustStoreType);\n            c.setTrustPassword(trustStorePassword);\n          }\n          listener \u003d c;\n\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        listener.setHost(ep.getHost());\n        listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        server.addManagedListener(listener);\n      }\n      server.loadListeners();\n      return server;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java",
      "extendedDetails": {}
    },
    "2214871d916fdcae62aa51afbb5fd571f2808745": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5545. Allow specifying endpoints for listeners in HttpServer. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546151 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/11/13 10:20 AM",
      "commitName": "2214871d916fdcae62aa51afbb5fd571f2808745",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "20/11/13 1:51 PM",
      "commitNameOld": "3cae2ba63fe6f0765d860677a9bd9f1ea158c1c3",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 6.85,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,70 @@\n     public HttpServer build() throws IOException {\n       if (this.name \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\"name is not set\");\n       }\n-      if (this.bindAddress \u003d\u003d null) {\n-        throw new HadoopIllegalArgumentException(\"bindAddress is not set\");\n+\n+      // Make the behavior compatible with deprecated interfaces\n+      if (bindAddress !\u003d null \u0026\u0026 port !\u003d -1) {\n+        try {\n+          endpoints.add(0, new URI(\"http\", \"\", bindAddress, port, \"\", \"\", \"\"));\n+        } catch (URISyntaxException e) {\n+          throw new HadoopIllegalArgumentException(\"Invalid endpoint: \"+ e);\n+        }\n       }\n-      if (this.port \u003d\u003d null) {\n-        throw new HadoopIllegalArgumentException(\"port is not set\");\n+\n+      if (endpoints.size() \u003d\u003d 0) {\n+        throw new HadoopIllegalArgumentException(\"No endpoints specified\");\n       }\n-      if (this.findPort \u003d\u003d null) {\n-        throw new HadoopIllegalArgumentException(\"findPort is not set\");\n+\n+      if (hostName \u003d\u003d null) {\n+        hostName \u003d endpoints.get(0).getHost();\n       }\n       \n       if (this.conf \u003d\u003d null) {\n         conf \u003d new Configuration();\n       }\n       \n-      HttpServer server \u003d new HttpServer(this.name, this.bindAddress, this.port,\n-      this.findPort, this.conf, this.adminsAcl, this.connector, this.pathSpecs);\n+      HttpServer server \u003d new HttpServer(this);\n+\n       if (this.securityEnabled) {\n-        server.initSpnego(this.conf, this.usernameConfKey, this.keytabConfKey);\n+        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n       }\n+\n+      if (connector !\u003d null) {\n+        server.addUnmanagedListener(connector);\n+      }\n+\n+      for (URI ep : endpoints) {\n+        Connector listener \u003d null;\n+        String scheme \u003d ep.getScheme();\n+        if (\"http\".equals(scheme)) {\n+          listener \u003d HttpServer.createDefaultChannelConnector();\n+        } else if (\"https\".equals(scheme)) {\n+          SslSocketConnector c \u003d new SslSocketConnector();\n+          c.setNeedClientAuth(needsClientAuth);\n+          c.setKeyPassword(keyPassword);\n+\n+          if (keyStore !\u003d null) {\n+            c.setKeystore(keyStore);\n+            c.setKeystoreType(keyStoreType);\n+            c.setPassword(keyStorePassword);\n+          }\n+\n+          if (trustStore !\u003d null) {\n+            c.setTruststore(trustStore);\n+            c.setTruststoreType(trustStoreType);\n+            c.setTrustPassword(trustStorePassword);\n+          }\n+          listener \u003d c;\n+\n+        } else {\n+          throw new HadoopIllegalArgumentException(\n+              \"unknown scheme for endpoint:\" + ep);\n+        }\n+        listener.setHost(ep.getHost());\n+        listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n+        server.addManagedListener(listener);\n+      }\n+      server.loadListeners();\n       return server;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public HttpServer build() throws IOException {\n      if (this.name \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\"name is not set\");\n      }\n\n      // Make the behavior compatible with deprecated interfaces\n      if (bindAddress !\u003d null \u0026\u0026 port !\u003d -1) {\n        try {\n          endpoints.add(0, new URI(\"http\", \"\", bindAddress, port, \"\", \"\", \"\"));\n        } catch (URISyntaxException e) {\n          throw new HadoopIllegalArgumentException(\"Invalid endpoint: \"+ e);\n        }\n      }\n\n      if (endpoints.size() \u003d\u003d 0) {\n        throw new HadoopIllegalArgumentException(\"No endpoints specified\");\n      }\n\n      if (hostName \u003d\u003d null) {\n        hostName \u003d endpoints.get(0).getHost();\n      }\n      \n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      \n      HttpServer server \u003d new HttpServer(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      if (connector !\u003d null) {\n        server.addUnmanagedListener(connector);\n      }\n\n      for (URI ep : endpoints) {\n        Connector listener \u003d null;\n        String scheme \u003d ep.getScheme();\n        if (\"http\".equals(scheme)) {\n          listener \u003d HttpServer.createDefaultChannelConnector();\n        } else if (\"https\".equals(scheme)) {\n          SslSocketConnector c \u003d new SslSocketConnector();\n          c.setNeedClientAuth(needsClientAuth);\n          c.setKeyPassword(keyPassword);\n\n          if (keyStore !\u003d null) {\n            c.setKeystore(keyStore);\n            c.setKeystoreType(keyStoreType);\n            c.setPassword(keyStorePassword);\n          }\n\n          if (trustStore !\u003d null) {\n            c.setTruststore(trustStore);\n            c.setTruststoreType(trustStoreType);\n            c.setTrustPassword(trustStorePassword);\n          }\n          listener \u003d c;\n\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        listener.setHost(ep.getHost());\n        listener.setPort(ep.getPort() \u003d\u003d -1 ? 0 : ep.getPort());\n        server.addManagedListener(listener);\n      }\n      server.loadListeners();\n      return server;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java",
      "extendedDetails": {}
    },
    "782191f1ba27e0ff0acf3c6cf8a88df00274d308": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9784. Add a builder for HttpServer. (Junping Du via llu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1516128 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/13 3:12 AM",
      "commitName": "782191f1ba27e0ff0acf3c6cf8a88df00274d308",
      "commitAuthor": "Luke Lu",
      "diff": "@@ -0,0 +1,25 @@\n+    public HttpServer build() throws IOException {\n+      if (this.name \u003d\u003d null) {\n+        throw new HadoopIllegalArgumentException(\"name is not set\");\n+      }\n+      if (this.bindAddress \u003d\u003d null) {\n+        throw new HadoopIllegalArgumentException(\"bindAddress is not set\");\n+      }\n+      if (this.port \u003d\u003d null) {\n+        throw new HadoopIllegalArgumentException(\"port is not set\");\n+      }\n+      if (this.findPort \u003d\u003d null) {\n+        throw new HadoopIllegalArgumentException(\"findPort is not set\");\n+      }\n+      \n+      if (this.conf \u003d\u003d null) {\n+        conf \u003d new Configuration();\n+      }\n+      \n+      HttpServer server \u003d new HttpServer(this.name, this.bindAddress, this.port,\n+      this.findPort, this.conf, this.adminsAcl, this.connector, this.pathSpecs);\n+      if (this.securityEnabled) {\n+        server.initSpnego(this.conf, this.usernameConfKey, this.keytabConfKey);\n+      }\n+      return server;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public HttpServer build() throws IOException {\n      if (this.name \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\"name is not set\");\n      }\n      if (this.bindAddress \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\"bindAddress is not set\");\n      }\n      if (this.port \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\"port is not set\");\n      }\n      if (this.findPort \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\"findPort is not set\");\n      }\n      \n      if (this.conf \u003d\u003d null) {\n        conf \u003d new Configuration();\n      }\n      \n      HttpServer server \u003d new HttpServer(this.name, this.bindAddress, this.port,\n      this.findPort, this.conf, this.adminsAcl, this.connector, this.pathSpecs);\n      if (this.securityEnabled) {\n        server.initSpnego(this.conf, this.usernameConfKey, this.keytabConfKey);\n      }\n      return server;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java"
    }
  }
}