{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityOverTimePolicy.java",
  "functionName": "availableResources",
  "functionId": "availableResources___available-RLESparseResourceAllocation__plan-Plan__user-String__oldId-ReservationId__start-long__end-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/CapacityOverTimePolicy.java",
  "functionStartLine": 219,
  "functionEndLine": 256,
  "numCommitsSeen": 11,
  "timeTaken": 2449,
  "changeHistory": [
    "fa6137501c1499ae33f6e0e2adc31671a7e782dc",
    "5cf5c41a895f5ab8bf6270089f8cfdea50573a97",
    "742632e346604fd2b263bd42367165638fcf2416"
  ],
  "changeHistoryShort": {
    "fa6137501c1499ae33f6e0e2adc31671a7e782dc": "Ybodychange",
    "5cf5c41a895f5ab8bf6270089f8cfdea50573a97": "Ybodychange",
    "742632e346604fd2b263bd42367165638fcf2416": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fa6137501c1499ae33f6e0e2adc31671a7e782dc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5330. SharingPolicy enhancements required to support recurring reservations in ReservationSystem. (Carlo Curino via Subru).\n",
      "commitDate": "07/09/17 7:07 PM",
      "commitName": "fa6137501c1499ae33f6e0e2adc31671a7e782dc",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "25/07/16 4:37 PM",
      "commitNameOld": "d383bfdcd40c2315197fa5f85c3e5cb3bb83167f",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 409.1,
      "commitsBetweenForRepo": 2565,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   public RLESparseResourceAllocation availableResources(\n       RLESparseResourceAllocation available, Plan plan, String user,\n       ReservationId oldId, long start, long end) throws PlanningException {\n \n     // this only propagates the instantaneous maxInst properties, while\n     // the time-varying one depends on the current allocation as well\n     // and are not easily captured here\n     Resource planTotalCapacity \u003d plan.getTotalCapacity();\n     Resource maxInsRes \u003d Resources.multiply(planTotalCapacity, maxInst);\n     NavigableMap\u003cLong, Resource\u003e instQuota \u003d new TreeMap\u003cLong, Resource\u003e();\n     instQuota.put(start, maxInsRes);\n \n     RLESparseResourceAllocation instRLEQuota \u003d\n         new RLESparseResourceAllocation(instQuota,\n             plan.getResourceCalculator());\n \n     RLESparseResourceAllocation used \u003d\n         plan.getConsumptionForUserOverTime(user, start, end);\n \n     // add back in old reservation used resources if any\n     ReservationAllocation old \u003d plan.getReservationById(oldId);\n     if (old !\u003d null) {\n       used \u003d RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n           Resources.clone(plan.getTotalCapacity()), used,\n-          old.getResourcesOverTime(), RLEOperator.subtract, start, end);\n+          old.getResourcesOverTime(start, end), RLEOperator.subtract, start,\n+          end);\n     }\n \n     instRLEQuota \u003d RLESparseResourceAllocation\n         .merge(plan.getResourceCalculator(), planTotalCapacity, instRLEQuota,\n             used, RLEOperator.subtract, start, end);\n \n     instRLEQuota \u003d RLESparseResourceAllocation\n         .merge(plan.getResourceCalculator(), planTotalCapacity, available,\n             instRLEQuota, RLEOperator.min, start, end);\n \n     return instRLEQuota;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RLESparseResourceAllocation availableResources(\n      RLESparseResourceAllocation available, Plan plan, String user,\n      ReservationId oldId, long start, long end) throws PlanningException {\n\n    // this only propagates the instantaneous maxInst properties, while\n    // the time-varying one depends on the current allocation as well\n    // and are not easily captured here\n    Resource planTotalCapacity \u003d plan.getTotalCapacity();\n    Resource maxInsRes \u003d Resources.multiply(planTotalCapacity, maxInst);\n    NavigableMap\u003cLong, Resource\u003e instQuota \u003d new TreeMap\u003cLong, Resource\u003e();\n    instQuota.put(start, maxInsRes);\n\n    RLESparseResourceAllocation instRLEQuota \u003d\n        new RLESparseResourceAllocation(instQuota,\n            plan.getResourceCalculator());\n\n    RLESparseResourceAllocation used \u003d\n        plan.getConsumptionForUserOverTime(user, start, end);\n\n    // add back in old reservation used resources if any\n    ReservationAllocation old \u003d plan.getReservationById(oldId);\n    if (old !\u003d null) {\n      used \u003d RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n          Resources.clone(plan.getTotalCapacity()), used,\n          old.getResourcesOverTime(start, end), RLEOperator.subtract, start,\n          end);\n    }\n\n    instRLEQuota \u003d RLESparseResourceAllocation\n        .merge(plan.getResourceCalculator(), planTotalCapacity, instRLEQuota,\n            used, RLEOperator.subtract, start, end);\n\n    instRLEQuota \u003d RLESparseResourceAllocation\n        .merge(plan.getResourceCalculator(), planTotalCapacity, available,\n            instRLEQuota, RLEOperator.min, start, end);\n\n    return instRLEQuota;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/CapacityOverTimePolicy.java",
      "extendedDetails": {}
    },
    "5cf5c41a895f5ab8bf6270089f8cfdea50573a97": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4360. Improve GreedyReservationAgent to support \"early\" allocations, and performance improvements (curino via asuresh)\n",
      "commitDate": "10/02/16 9:11 AM",
      "commitName": "5cf5c41a895f5ab8bf6270089f8cfdea50573a97",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/12/15 9:26 PM",
      "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 66.49,
      "commitsBetweenForRepo": 408,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,40 @@\n   public RLESparseResourceAllocation availableResources(\n       RLESparseResourceAllocation available, Plan plan, String user,\n       ReservationId oldId, long start, long end) throws PlanningException {\n \n     // this only propagates the instantaneous maxInst properties, while\n     // the time-varying one depends on the current allocation as well\n     // and are not easily captured here\n     Resource planTotalCapacity \u003d plan.getTotalCapacity();\n     Resource maxInsRes \u003d Resources.multiply(planTotalCapacity, maxInst);\n     NavigableMap\u003cLong, Resource\u003e instQuota \u003d new TreeMap\u003cLong, Resource\u003e();\n     instQuota.put(start, maxInsRes);\n \n     RLESparseResourceAllocation instRLEQuota \u003d\n         new RLESparseResourceAllocation(instQuota,\n             plan.getResourceCalculator());\n \n     RLESparseResourceAllocation used \u003d\n         plan.getConsumptionForUserOverTime(user, start, end);\n \n+    // add back in old reservation used resources if any\n+    ReservationAllocation old \u003d plan.getReservationById(oldId);\n+    if (old !\u003d null) {\n+      used \u003d\n+          RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n+              Resources.clone(plan.getTotalCapacity()), used,\n+              old.getResourcesOverTime(), RLEOperator.subtract, start, end);\n+    }\n+\n     instRLEQuota \u003d\n         RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n             planTotalCapacity, instRLEQuota, used, RLEOperator.subtract, start,\n             end);\n \n     instRLEQuota \u003d\n         RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n             planTotalCapacity, available, instRLEQuota, RLEOperator.min, start,\n             end);\n \n     return instRLEQuota;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RLESparseResourceAllocation availableResources(\n      RLESparseResourceAllocation available, Plan plan, String user,\n      ReservationId oldId, long start, long end) throws PlanningException {\n\n    // this only propagates the instantaneous maxInst properties, while\n    // the time-varying one depends on the current allocation as well\n    // and are not easily captured here\n    Resource planTotalCapacity \u003d plan.getTotalCapacity();\n    Resource maxInsRes \u003d Resources.multiply(planTotalCapacity, maxInst);\n    NavigableMap\u003cLong, Resource\u003e instQuota \u003d new TreeMap\u003cLong, Resource\u003e();\n    instQuota.put(start, maxInsRes);\n\n    RLESparseResourceAllocation instRLEQuota \u003d\n        new RLESparseResourceAllocation(instQuota,\n            plan.getResourceCalculator());\n\n    RLESparseResourceAllocation used \u003d\n        plan.getConsumptionForUserOverTime(user, start, end);\n\n    // add back in old reservation used resources if any\n    ReservationAllocation old \u003d plan.getReservationById(oldId);\n    if (old !\u003d null) {\n      used \u003d\n          RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n              Resources.clone(plan.getTotalCapacity()), used,\n              old.getResourcesOverTime(), RLEOperator.subtract, start, end);\n    }\n\n    instRLEQuota \u003d\n        RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n            planTotalCapacity, instRLEQuota, used, RLEOperator.subtract, start,\n            end);\n\n    instRLEQuota \u003d\n        RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n            planTotalCapacity, available, instRLEQuota, RLEOperator.min, start,\n            end);\n\n    return instRLEQuota;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/CapacityOverTimePolicy.java",
      "extendedDetails": {}
    },
    "742632e346604fd2b263bd42367165638fcf2416": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4358. Reservation System: Improve relationship between SharingPolicy and ReservationAgent. (Carlo Curino via asuresh)\n",
      "commitDate": "05/12/15 9:26 PM",
      "commitName": "742632e346604fd2b263bd42367165638fcf2416",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,31 @@\n+  public RLESparseResourceAllocation availableResources(\n+      RLESparseResourceAllocation available, Plan plan, String user,\n+      ReservationId oldId, long start, long end) throws PlanningException {\n+\n+    // this only propagates the instantaneous maxInst properties, while\n+    // the time-varying one depends on the current allocation as well\n+    // and are not easily captured here\n+    Resource planTotalCapacity \u003d plan.getTotalCapacity();\n+    Resource maxInsRes \u003d Resources.multiply(planTotalCapacity, maxInst);\n+    NavigableMap\u003cLong, Resource\u003e instQuota \u003d new TreeMap\u003cLong, Resource\u003e();\n+    instQuota.put(start, maxInsRes);\n+\n+    RLESparseResourceAllocation instRLEQuota \u003d\n+        new RLESparseResourceAllocation(instQuota,\n+            plan.getResourceCalculator());\n+\n+    RLESparseResourceAllocation used \u003d\n+        plan.getConsumptionForUserOverTime(user, start, end);\n+\n+    instRLEQuota \u003d\n+        RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n+            planTotalCapacity, instRLEQuota, used, RLEOperator.subtract, start,\n+            end);\n+\n+    instRLEQuota \u003d\n+        RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n+            planTotalCapacity, available, instRLEQuota, RLEOperator.min, start,\n+            end);\n+\n+    return instRLEQuota;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RLESparseResourceAllocation availableResources(\n      RLESparseResourceAllocation available, Plan plan, String user,\n      ReservationId oldId, long start, long end) throws PlanningException {\n\n    // this only propagates the instantaneous maxInst properties, while\n    // the time-varying one depends on the current allocation as well\n    // and are not easily captured here\n    Resource planTotalCapacity \u003d plan.getTotalCapacity();\n    Resource maxInsRes \u003d Resources.multiply(planTotalCapacity, maxInst);\n    NavigableMap\u003cLong, Resource\u003e instQuota \u003d new TreeMap\u003cLong, Resource\u003e();\n    instQuota.put(start, maxInsRes);\n\n    RLESparseResourceAllocation instRLEQuota \u003d\n        new RLESparseResourceAllocation(instQuota,\n            plan.getResourceCalculator());\n\n    RLESparseResourceAllocation used \u003d\n        plan.getConsumptionForUserOverTime(user, start, end);\n\n    instRLEQuota \u003d\n        RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n            planTotalCapacity, instRLEQuota, used, RLEOperator.subtract, start,\n            end);\n\n    instRLEQuota \u003d\n        RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n            planTotalCapacity, available, instRLEQuota, RLEOperator.min, start,\n            end);\n\n    return instRLEQuota;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/CapacityOverTimePolicy.java"
    }
  }
}