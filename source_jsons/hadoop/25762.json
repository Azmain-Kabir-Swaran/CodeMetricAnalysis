{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMContainerRequestor.java",
  "functionName": "makeRemoteRequest",
  "functionId": "makeRemoteRequest",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
  "functionStartLine": 197,
  "functionEndLine": 241,
  "numCommitsSeen": 39,
  "timeTaken": 8761,
  "changeHistory": [
    "4228de94028f1e10ca59ce23e963e488fe566909",
    "0f3b6900be1a3b2e4624f31f84656f4a32dadce9",
    "875592220fb250ff9d0bba73c8ace9858fd369fd",
    "fb3f338c652be737436accd076d2aacfd70c276c",
    "ac914f79bc80b152e71e7de5497b73f22824f4a7",
    "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
    "7359dc32d3781d5318efee4cf6185616c7c00c18",
    "9c4f86879cad6d6e19255d4ae8f28b61328bd10b",
    "1bd345d6e3855ab330963efd32e0fac102e61d1a",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
    "fcbad14a3da7fadbb601bf245552ecca2fbc5026",
    "e7543b944c2b35d0a1ca0a92efeca47ad414ac7a",
    "312a7e71001d55f88781e56b331ab1b40a72a980",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "4228de94028f1e10ca59ce23e963e488fe566909": "Ybodychange",
    "0f3b6900be1a3b2e4624f31f84656f4a32dadce9": "Ymultichange(Yexceptionschange,Ybodychange)",
    "875592220fb250ff9d0bba73c8ace9858fd369fd": "Ybodychange",
    "fb3f338c652be737436accd076d2aacfd70c276c": "Ybodychange",
    "ac914f79bc80b152e71e7de5497b73f22824f4a7": "Ybodychange",
    "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "d33534c4fb35cb82ff8d56abeeb63a949e72a031": "Ybodychange",
    "7359dc32d3781d5318efee4cf6185616c7c00c18": "Ymultichange(Yexceptionschange,Ybodychange)",
    "9c4f86879cad6d6e19255d4ae8f28b61328bd10b": "Yexceptionschange",
    "1bd345d6e3855ab330963efd32e0fac102e61d1a": "Ymultichange(Yreturntypechange,Ybodychange)",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": "Ybodychange",
    "fcbad14a3da7fadbb601bf245552ecca2fbc5026": "Ybodychange",
    "e7543b944c2b35d0a1ca0a92efeca47ad414ac7a": "Ybodychange",
    "312a7e71001d55f88781e56b331ab1b40a72a980": "Ybodychange",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4228de94028f1e10ca59ce23e963e488fe566909": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5583. Ability to limit running map and reduce tasks. Contributed by Jason Lowe.\n",
      "commitDate": "03/03/15 2:02 AM",
      "commitName": "4228de94028f1e10ca59ce23e963e488fe566909",
      "commitAuthor": "Junping Du",
      "commitDateOld": "23/10/14 9:56 PM",
      "commitNameOld": "0f3b6900be1a3b2e4624f31f84656f4a32dadce9",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 130.21,
      "commitsBetweenForRepo": 1029,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,45 @@\n   protected AllocateResponse makeRemoteRequest() throws YarnException,\n       IOException {\n+    applyRequestLimits();\n     ResourceBlacklistRequest blacklistRequest \u003d\n         ResourceBlacklistRequest.newInstance(new ArrayList\u003cString\u003e(blacklistAdditions),\n             new ArrayList\u003cString\u003e(blacklistRemovals));\n     AllocateRequest allocateRequest \u003d\n         AllocateRequest.newInstance(lastResponseID,\n           super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(ask),\n           new ArrayList\u003cContainerId\u003e(release), blacklistRequest);\n     AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n     lastResponseID \u003d allocateResponse.getResponseId();\n     availableResources \u003d allocateResponse.getAvailableResources();\n     lastClusterNmCount \u003d clusterNmCount;\n     clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n+    int numCompletedContainers \u003d\n+        allocateResponse.getCompletedContainersStatuses().size();\n \n     if (ask.size() \u003e 0 || release.size() \u003e 0) {\n       LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n           + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n           + allocateResponse.getAllocatedContainers().size()\n-          + \" finishedContainers\u003d\"\n-          + allocateResponse.getCompletedContainersStatuses().size()\n+          + \" finishedContainers\u003d\" + numCompletedContainers\n           + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n           + clusterNmCount);\n     }\n \n     ask.clear();\n     release.clear();\n \n+    if (numCompletedContainers \u003e 0) {\n+      // re-send limited requests when a container completes to trigger asking\n+      // for more containers\n+      requestLimitsToUpdate.addAll(requestLimits.keySet());\n+    }\n+\n     if (blacklistAdditions.size() \u003e 0 || blacklistRemovals.size() \u003e 0) {\n       LOG.info(\"Update the blacklist for \" + applicationId +\n           \": blacklistAdditions\u003d\" + blacklistAdditions.size() +\n           \" blacklistRemovals\u003d\" +  blacklistRemovals.size());\n     }\n     blacklistAdditions.clear();\n     blacklistRemovals.clear();\n     return allocateResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AllocateResponse makeRemoteRequest() throws YarnException,\n      IOException {\n    applyRequestLimits();\n    ResourceBlacklistRequest blacklistRequest \u003d\n        ResourceBlacklistRequest.newInstance(new ArrayList\u003cString\u003e(blacklistAdditions),\n            new ArrayList\u003cString\u003e(blacklistRemovals));\n    AllocateRequest allocateRequest \u003d\n        AllocateRequest.newInstance(lastResponseID,\n          super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(ask),\n          new ArrayList\u003cContainerId\u003e(release), blacklistRequest);\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    lastResponseID \u003d allocateResponse.getResponseId();\n    availableResources \u003d allocateResponse.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n    int numCompletedContainers \u003d\n        allocateResponse.getCompletedContainersStatuses().size();\n\n    if (ask.size() \u003e 0 || release.size() \u003e 0) {\n      LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n          + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n          + allocateResponse.getAllocatedContainers().size()\n          + \" finishedContainers\u003d\" + numCompletedContainers\n          + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n          + clusterNmCount);\n    }\n\n    ask.clear();\n    release.clear();\n\n    if (numCompletedContainers \u003e 0) {\n      // re-send limited requests when a container completes to trigger asking\n      // for more containers\n      requestLimitsToUpdate.addAll(requestLimits.keySet());\n    }\n\n    if (blacklistAdditions.size() \u003e 0 || blacklistRemovals.size() \u003e 0) {\n      LOG.info(\"Update the blacklist for \" + applicationId +\n          \": blacklistAdditions\u003d\" + blacklistAdditions.size() +\n          \" blacklistRemovals\u003d\" +  blacklistRemovals.size());\n    }\n    blacklistAdditions.clear();\n    blacklistRemovals.clear();\n    return allocateResponse;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "0f3b6900be1a3b2e4624f31f84656f4a32dadce9": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-2209. Replaced AM resync/shutdown command with corresponding exceptions and made related MR changes. Contributed by Jian He.\n",
      "commitDate": "23/10/14 9:56 PM",
      "commitName": "0f3b6900be1a3b2e4624f31f84656f4a32dadce9",
      "commitAuthor": "Zhijie Shen",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-2209. Replaced AM resync/shutdown command with corresponding exceptions and made related MR changes. Contributed by Jian He.\n",
          "commitDate": "23/10/14 9:56 PM",
          "commitName": "0f3b6900be1a3b2e4624f31f84656f4a32dadce9",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "17/07/14 11:46 AM",
          "commitNameOld": "875592220fb250ff9d0bba73c8ace9858fd369fd",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 98.42,
          "commitsBetweenForRepo": 956,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,37 @@\n-  protected AllocateResponse makeRemoteRequest() throws IOException {\n+  protected AllocateResponse makeRemoteRequest() throws YarnException,\n+      IOException {\n     ResourceBlacklistRequest blacklistRequest \u003d\n         ResourceBlacklistRequest.newInstance(new ArrayList\u003cString\u003e(blacklistAdditions),\n             new ArrayList\u003cString\u003e(blacklistRemovals));\n     AllocateRequest allocateRequest \u003d\n         AllocateRequest.newInstance(lastResponseID,\n           super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(ask),\n           new ArrayList\u003cContainerId\u003e(release), blacklistRequest);\n-    AllocateResponse allocateResponse;\n-    try {\n-      allocateResponse \u003d scheduler.allocate(allocateRequest);\n-    } catch (YarnException e) {\n-      throw new IOException(e);\n-    }\n-\n-    if (isResyncCommand(allocateResponse)) {\n-      return allocateResponse;\n-    }\n+    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n     lastResponseID \u003d allocateResponse.getResponseId();\n     availableResources \u003d allocateResponse.getAvailableResources();\n     lastClusterNmCount \u003d clusterNmCount;\n     clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n \n     if (ask.size() \u003e 0 || release.size() \u003e 0) {\n       LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n           + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n           + allocateResponse.getAllocatedContainers().size()\n           + \" finishedContainers\u003d\"\n           + allocateResponse.getCompletedContainersStatuses().size()\n           + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n           + clusterNmCount);\n     }\n \n     ask.clear();\n     release.clear();\n \n     if (blacklistAdditions.size() \u003e 0 || blacklistRemovals.size() \u003e 0) {\n       LOG.info(\"Update the blacklist for \" + applicationId +\n           \": blacklistAdditions\u003d\" + blacklistAdditions.size() +\n           \" blacklistRemovals\u003d\" +  blacklistRemovals.size());\n     }\n     blacklistAdditions.clear();\n     blacklistRemovals.clear();\n     return allocateResponse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected AllocateResponse makeRemoteRequest() throws YarnException,\n      IOException {\n    ResourceBlacklistRequest blacklistRequest \u003d\n        ResourceBlacklistRequest.newInstance(new ArrayList\u003cString\u003e(blacklistAdditions),\n            new ArrayList\u003cString\u003e(blacklistRemovals));\n    AllocateRequest allocateRequest \u003d\n        AllocateRequest.newInstance(lastResponseID,\n          super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(ask),\n          new ArrayList\u003cContainerId\u003e(release), blacklistRequest);\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    lastResponseID \u003d allocateResponse.getResponseId();\n    availableResources \u003d allocateResponse.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n\n    if (ask.size() \u003e 0 || release.size() \u003e 0) {\n      LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n          + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n          + allocateResponse.getAllocatedContainers().size()\n          + \" finishedContainers\u003d\"\n          + allocateResponse.getCompletedContainersStatuses().size()\n          + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n          + clusterNmCount);\n    }\n\n    ask.clear();\n    release.clear();\n\n    if (blacklistAdditions.size() \u003e 0 || blacklistRemovals.size() \u003e 0) {\n      LOG.info(\"Update the blacklist for \" + applicationId +\n          \": blacklistAdditions\u003d\" + blacklistAdditions.size() +\n          \" blacklistRemovals\u003d\" +  blacklistRemovals.size());\n    }\n    blacklistAdditions.clear();\n    blacklistRemovals.clear();\n    return allocateResponse;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[YarnException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2209. Replaced AM resync/shutdown command with corresponding exceptions and made related MR changes. Contributed by Jian He.\n",
          "commitDate": "23/10/14 9:56 PM",
          "commitName": "0f3b6900be1a3b2e4624f31f84656f4a32dadce9",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "17/07/14 11:46 AM",
          "commitNameOld": "875592220fb250ff9d0bba73c8ace9858fd369fd",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 98.42,
          "commitsBetweenForRepo": 956,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,37 @@\n-  protected AllocateResponse makeRemoteRequest() throws IOException {\n+  protected AllocateResponse makeRemoteRequest() throws YarnException,\n+      IOException {\n     ResourceBlacklistRequest blacklistRequest \u003d\n         ResourceBlacklistRequest.newInstance(new ArrayList\u003cString\u003e(blacklistAdditions),\n             new ArrayList\u003cString\u003e(blacklistRemovals));\n     AllocateRequest allocateRequest \u003d\n         AllocateRequest.newInstance(lastResponseID,\n           super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(ask),\n           new ArrayList\u003cContainerId\u003e(release), blacklistRequest);\n-    AllocateResponse allocateResponse;\n-    try {\n-      allocateResponse \u003d scheduler.allocate(allocateRequest);\n-    } catch (YarnException e) {\n-      throw new IOException(e);\n-    }\n-\n-    if (isResyncCommand(allocateResponse)) {\n-      return allocateResponse;\n-    }\n+    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n     lastResponseID \u003d allocateResponse.getResponseId();\n     availableResources \u003d allocateResponse.getAvailableResources();\n     lastClusterNmCount \u003d clusterNmCount;\n     clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n \n     if (ask.size() \u003e 0 || release.size() \u003e 0) {\n       LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n           + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n           + allocateResponse.getAllocatedContainers().size()\n           + \" finishedContainers\u003d\"\n           + allocateResponse.getCompletedContainersStatuses().size()\n           + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n           + clusterNmCount);\n     }\n \n     ask.clear();\n     release.clear();\n \n     if (blacklistAdditions.size() \u003e 0 || blacklistRemovals.size() \u003e 0) {\n       LOG.info(\"Update the blacklist for \" + applicationId +\n           \": blacklistAdditions\u003d\" + blacklistAdditions.size() +\n           \" blacklistRemovals\u003d\" +  blacklistRemovals.size());\n     }\n     blacklistAdditions.clear();\n     blacklistRemovals.clear();\n     return allocateResponse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected AllocateResponse makeRemoteRequest() throws YarnException,\n      IOException {\n    ResourceBlacklistRequest blacklistRequest \u003d\n        ResourceBlacklistRequest.newInstance(new ArrayList\u003cString\u003e(blacklistAdditions),\n            new ArrayList\u003cString\u003e(blacklistRemovals));\n    AllocateRequest allocateRequest \u003d\n        AllocateRequest.newInstance(lastResponseID,\n          super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(ask),\n          new ArrayList\u003cContainerId\u003e(release), blacklistRequest);\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    lastResponseID \u003d allocateResponse.getResponseId();\n    availableResources \u003d allocateResponse.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n\n    if (ask.size() \u003e 0 || release.size() \u003e 0) {\n      LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n          + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n          + allocateResponse.getAllocatedContainers().size()\n          + \" finishedContainers\u003d\"\n          + allocateResponse.getCompletedContainersStatuses().size()\n          + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n          + clusterNmCount);\n    }\n\n    ask.clear();\n    release.clear();\n\n    if (blacklistAdditions.size() \u003e 0 || blacklistRemovals.size() \u003e 0) {\n      LOG.info(\"Update the blacklist for \" + applicationId +\n          \": blacklistAdditions\u003d\" + blacklistAdditions.size() +\n          \" blacklistRemovals\u003d\" +  blacklistRemovals.size());\n    }\n    blacklistAdditions.clear();\n    blacklistRemovals.clear();\n    return allocateResponse;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
          "extendedDetails": {}
        }
      ]
    },
    "875592220fb250ff9d0bba73c8ace9858fd369fd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5910. Make MR AM resync with RM in case of work-preserving RM-restart. Contributed by Rohith\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611434 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/14 11:46 AM",
      "commitName": "875592220fb250ff9d0bba73c8ace9858fd369fd",
      "commitAuthor": "Jian He",
      "commitDateOld": "19/06/14 10:22 AM",
      "commitNameOld": "7b9c074b7635e3dcdc38d4e7fb1afbff7145e698",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 28.06,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,45 @@\n   protected AllocateResponse makeRemoteRequest() throws IOException {\n     ResourceBlacklistRequest blacklistRequest \u003d\n         ResourceBlacklistRequest.newInstance(new ArrayList\u003cString\u003e(blacklistAdditions),\n             new ArrayList\u003cString\u003e(blacklistRemovals));\n     AllocateRequest allocateRequest \u003d\n         AllocateRequest.newInstance(lastResponseID,\n           super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(ask),\n           new ArrayList\u003cContainerId\u003e(release), blacklistRequest);\n     AllocateResponse allocateResponse;\n     try {\n       allocateResponse \u003d scheduler.allocate(allocateRequest);\n     } catch (YarnException e) {\n       throw new IOException(e);\n     }\n+\n+    if (isResyncCommand(allocateResponse)) {\n+      return allocateResponse;\n+    }\n     lastResponseID \u003d allocateResponse.getResponseId();\n     availableResources \u003d allocateResponse.getAvailableResources();\n     lastClusterNmCount \u003d clusterNmCount;\n     clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n \n     if (ask.size() \u003e 0 || release.size() \u003e 0) {\n       LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n           + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n           + allocateResponse.getAllocatedContainers().size()\n           + \" finishedContainers\u003d\"\n           + allocateResponse.getCompletedContainersStatuses().size()\n           + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n           + clusterNmCount);\n     }\n \n     ask.clear();\n     release.clear();\n \n     if (blacklistAdditions.size() \u003e 0 || blacklistRemovals.size() \u003e 0) {\n       LOG.info(\"Update the blacklist for \" + applicationId +\n           \": blacklistAdditions\u003d\" + blacklistAdditions.size() +\n           \" blacklistRemovals\u003d\" +  blacklistRemovals.size());\n     }\n     blacklistAdditions.clear();\n     blacklistRemovals.clear();\n     return allocateResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AllocateResponse makeRemoteRequest() throws IOException {\n    ResourceBlacklistRequest blacklistRequest \u003d\n        ResourceBlacklistRequest.newInstance(new ArrayList\u003cString\u003e(blacklistAdditions),\n            new ArrayList\u003cString\u003e(blacklistRemovals));\n    AllocateRequest allocateRequest \u003d\n        AllocateRequest.newInstance(lastResponseID,\n          super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(ask),\n          new ArrayList\u003cContainerId\u003e(release), blacklistRequest);\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n    } catch (YarnException e) {\n      throw new IOException(e);\n    }\n\n    if (isResyncCommand(allocateResponse)) {\n      return allocateResponse;\n    }\n    lastResponseID \u003d allocateResponse.getResponseId();\n    availableResources \u003d allocateResponse.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n\n    if (ask.size() \u003e 0 || release.size() \u003e 0) {\n      LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n          + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n          + allocateResponse.getAllocatedContainers().size()\n          + \" finishedContainers\u003d\"\n          + allocateResponse.getCompletedContainersStatuses().size()\n          + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n          + clusterNmCount);\n    }\n\n    ask.clear();\n    release.clear();\n\n    if (blacklistAdditions.size() \u003e 0 || blacklistRemovals.size() \u003e 0) {\n      LOG.info(\"Update the blacklist for \" + applicationId +\n          \": blacklistAdditions\u003d\" + blacklistAdditions.size() +\n          \" blacklistRemovals\u003d\" +  blacklistRemovals.size());\n    }\n    blacklistAdditions.clear();\n    blacklistRemovals.clear();\n    return allocateResponse;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "fb3f338c652be737436accd076d2aacfd70c276c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5489. MR jobs hangs as it does not use the node-blacklisting feature in RM requests (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529005 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/13 2:14 PM",
      "commitName": "fb3f338c652be737436accd076d2aacfd70c276c",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "18/07/13 5:57 PM",
      "commitNameOld": "ac914f79bc80b152e71e7de5497b73f22824f4a7",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 76.85,
      "commitsBetweenForRepo": 451,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,41 @@\n   protected AllocateResponse makeRemoteRequest() throws IOException {\n+    ResourceBlacklistRequest blacklistRequest \u003d\n+        ResourceBlacklistRequest.newInstance(new ArrayList\u003cString\u003e(blacklistAdditions),\n+            new ArrayList\u003cString\u003e(blacklistRemovals));\n     AllocateRequest allocateRequest \u003d\n         AllocateRequest.newInstance(lastResponseID,\n           super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(ask),\n-          new ArrayList\u003cContainerId\u003e(release), null);\n+          new ArrayList\u003cContainerId\u003e(release), blacklistRequest);\n     AllocateResponse allocateResponse;\n     try {\n       allocateResponse \u003d scheduler.allocate(allocateRequest);\n     } catch (YarnException e) {\n       throw new IOException(e);\n     }\n     lastResponseID \u003d allocateResponse.getResponseId();\n     availableResources \u003d allocateResponse.getAvailableResources();\n     lastClusterNmCount \u003d clusterNmCount;\n     clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n \n     if (ask.size() \u003e 0 || release.size() \u003e 0) {\n       LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n           + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n           + allocateResponse.getAllocatedContainers().size()\n           + \" finishedContainers\u003d\"\n           + allocateResponse.getCompletedContainersStatuses().size()\n           + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n           + clusterNmCount);\n     }\n \n     ask.clear();\n     release.clear();\n+\n+    if (blacklistAdditions.size() \u003e 0 || blacklistRemovals.size() \u003e 0) {\n+      LOG.info(\"Update the blacklist for \" + applicationId +\n+          \": blacklistAdditions\u003d\" + blacklistAdditions.size() +\n+          \" blacklistRemovals\u003d\" +  blacklistRemovals.size());\n+    }\n+    blacklistAdditions.clear();\n+    blacklistRemovals.clear();\n     return allocateResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AllocateResponse makeRemoteRequest() throws IOException {\n    ResourceBlacklistRequest blacklistRequest \u003d\n        ResourceBlacklistRequest.newInstance(new ArrayList\u003cString\u003e(blacklistAdditions),\n            new ArrayList\u003cString\u003e(blacklistRemovals));\n    AllocateRequest allocateRequest \u003d\n        AllocateRequest.newInstance(lastResponseID,\n          super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(ask),\n          new ArrayList\u003cContainerId\u003e(release), blacklistRequest);\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n    } catch (YarnException e) {\n      throw new IOException(e);\n    }\n    lastResponseID \u003d allocateResponse.getResponseId();\n    availableResources \u003d allocateResponse.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n\n    if (ask.size() \u003e 0 || release.size() \u003e 0) {\n      LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n          + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n          + allocateResponse.getAllocatedContainers().size()\n          + \" finishedContainers\u003d\"\n          + allocateResponse.getCompletedContainersStatuses().size()\n          + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n          + clusterNmCount);\n    }\n\n    ask.clear();\n    release.clear();\n\n    if (blacklistAdditions.size() \u003e 0 || blacklistRemovals.size() \u003e 0) {\n      LOG.info(\"Update the blacklist for \" + applicationId +\n          \": blacklistAdditions\u003d\" + blacklistAdditions.size() +\n          \" blacklistRemovals\u003d\" +  blacklistRemovals.size());\n    }\n    blacklistAdditions.clear();\n    blacklistRemovals.clear();\n    return allocateResponse;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "ac914f79bc80b152e71e7de5497b73f22824f4a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-918. Remove ApplicationAttemptId from RegisterApplicationMasterRequestProto. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504735 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/13 5:57 PM",
      "commitName": "ac914f79bc80b152e71e7de5497b73f22824f4a7",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "17/06/13 8:10 PM",
      "commitNameOld": "2b14656ab5050dd75935b64681cdc25fb49db94f",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 30.91,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   protected AllocateResponse makeRemoteRequest() throws IOException {\n-    AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n-        applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n-        new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n-            release), null);\n+    AllocateRequest allocateRequest \u003d\n+        AllocateRequest.newInstance(lastResponseID,\n+          super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(ask),\n+          new ArrayList\u003cContainerId\u003e(release), null);\n     AllocateResponse allocateResponse;\n     try {\n       allocateResponse \u003d scheduler.allocate(allocateRequest);\n     } catch (YarnException e) {\n       throw new IOException(e);\n     }\n     lastResponseID \u003d allocateResponse.getResponseId();\n     availableResources \u003d allocateResponse.getAvailableResources();\n     lastClusterNmCount \u003d clusterNmCount;\n     clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n \n     if (ask.size() \u003e 0 || release.size() \u003e 0) {\n       LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n           + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n           + allocateResponse.getAllocatedContainers().size()\n           + \" finishedContainers\u003d\"\n           + allocateResponse.getCompletedContainersStatuses().size()\n           + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n           + clusterNmCount);\n     }\n \n     ask.clear();\n     release.clear();\n     return allocateResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AllocateResponse makeRemoteRequest() throws IOException {\n    AllocateRequest allocateRequest \u003d\n        AllocateRequest.newInstance(lastResponseID,\n          super.getApplicationProgress(), new ArrayList\u003cResourceRequest\u003e(ask),\n          new ArrayList\u003cContainerId\u003e(release), null);\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n    } catch (YarnException e) {\n      throw new IOException(e);\n    }\n    lastResponseID \u003d allocateResponse.getResponseId();\n    availableResources \u003d allocateResponse.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n\n    if (ask.size() \u003e 0 || release.size() \u003e 0) {\n      LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n          + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n          + allocateResponse.getAllocatedContainers().size()\n          + \" finishedContainers\u003d\"\n          + allocateResponse.getCompletedContainersStatuses().size()\n          + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n          + clusterNmCount);\n    }\n\n    ask.clear();\n    release.clear();\n    return allocateResponse;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-750. Allow for black-listing resources in YARN API and Impl in CS (acmurthy via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490392 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/13 11:46 AM",
      "commitName": "2051fd5ee29e99df6fe79c70b0c7c8c0c1cc131f",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "03/06/13 9:05 PM",
      "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.61,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   protected AllocateResponse makeRemoteRequest() throws IOException {\n     AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n         applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n         new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n-            release));\n+            release), null);\n     AllocateResponse allocateResponse;\n     try {\n       allocateResponse \u003d scheduler.allocate(allocateRequest);\n     } catch (YarnException e) {\n       throw new IOException(e);\n     }\n     lastResponseID \u003d allocateResponse.getResponseId();\n     availableResources \u003d allocateResponse.getAvailableResources();\n     lastClusterNmCount \u003d clusterNmCount;\n     clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n \n     if (ask.size() \u003e 0 || release.size() \u003e 0) {\n       LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n           + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n           + allocateResponse.getAllocatedContainers().size()\n           + \" finishedContainers\u003d\"\n           + allocateResponse.getCompletedContainersStatuses().size()\n           + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n           + clusterNmCount);\n     }\n \n     ask.clear();\n     release.clear();\n     return allocateResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AllocateResponse makeRemoteRequest() throws IOException {\n    AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n        applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n        new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n            release), null);\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n    } catch (YarnException e) {\n      throw new IOException(e);\n    }\n    lastResponseID \u003d allocateResponse.getResponseId();\n    availableResources \u003d allocateResponse.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n\n    if (ask.size() \u003e 0 || release.size() \u003e 0) {\n      LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n          + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n          + allocateResponse.getAllocatedContainers().size()\n          + \" finishedContainers\u003d\"\n          + allocateResponse.getCompletedContainersStatuses().size()\n          + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n          + clusterNmCount);\n    }\n\n    ask.clear();\n    release.clear();\n    return allocateResponse;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 5:34 PM",
      "commitNameOld": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   protected AllocateResponse makeRemoteRequest() throws IOException {\n     AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n         applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n         new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n             release));\n     AllocateResponse allocateResponse;\n     try {\n       allocateResponse \u003d scheduler.allocate(allocateRequest);\n-    } catch (YarnRemoteException e) {\n+    } catch (YarnException e) {\n       throw new IOException(e);\n     }\n     lastResponseID \u003d allocateResponse.getResponseId();\n     availableResources \u003d allocateResponse.getAvailableResources();\n     lastClusterNmCount \u003d clusterNmCount;\n     clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n \n     if (ask.size() \u003e 0 || release.size() \u003e 0) {\n       LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n           + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n           + allocateResponse.getAllocatedContainers().size()\n           + \" finishedContainers\u003d\"\n           + allocateResponse.getCompletedContainersStatuses().size()\n           + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n           + clusterNmCount);\n     }\n \n     ask.clear();\n     release.clear();\n     return allocateResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AllocateResponse makeRemoteRequest() throws IOException {\n    AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n        applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n        new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n            release));\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n    } catch (YarnException e) {\n      throw new IOException(e);\n    }\n    lastResponseID \u003d allocateResponse.getResponseId();\n    availableResources \u003d allocateResponse.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n\n    if (ask.size() \u003e 0 || release.size() \u003e 0) {\n      LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n          + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n          + allocateResponse.getAllocatedContainers().size()\n          + \" finishedContainers\u003d\"\n          + allocateResponse.getCompletedContainersStatuses().size()\n          + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n          + clusterNmCount);\n    }\n\n    ask.clear();\n    release.clear();\n    return allocateResponse;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "d33534c4fb35cb82ff8d56abeeb63a949e72a031": {
      "type": "Ybodychange",
      "commitMessage": "YARN-748. Moved BuilderUtils from yarn-common to yarn-server-common for eventual retirement. Contributed by Jian He.\nMAPREDUCE-5297. Updated MR App since BuilderUtils is no longer public after YARN-748. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489257 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 5:34 PM",
      "commitName": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/06/13 3:53 PM",
      "commitNameOld": "f27e484636f9903bb80afac9c9e51a04a7dbce76",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.07,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   protected AllocateResponse makeRemoteRequest() throws IOException {\n-    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n+    AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n         applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n         new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n             release));\n     AllocateResponse allocateResponse;\n     try {\n       allocateResponse \u003d scheduler.allocate(allocateRequest);\n     } catch (YarnRemoteException e) {\n       throw new IOException(e);\n     }\n     lastResponseID \u003d allocateResponse.getResponseId();\n     availableResources \u003d allocateResponse.getAvailableResources();\n     lastClusterNmCount \u003d clusterNmCount;\n     clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n \n     if (ask.size() \u003e 0 || release.size() \u003e 0) {\n       LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n           + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n           + allocateResponse.getAllocatedContainers().size()\n           + \" finishedContainers\u003d\"\n           + allocateResponse.getCompletedContainersStatuses().size()\n           + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n           + clusterNmCount);\n     }\n \n     ask.clear();\n     release.clear();\n     return allocateResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AllocateResponse makeRemoteRequest() throws IOException {\n    AllocateRequest allocateRequest \u003d AllocateRequest.newInstance(\n        applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n        new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n            release));\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n    } catch (YarnRemoteException e) {\n      throw new IOException(e);\n    }\n    lastResponseID \u003d allocateResponse.getResponseId();\n    availableResources \u003d allocateResponse.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n\n    if (ask.size() \u003e 0 || release.size() \u003e 0) {\n      LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n          + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n          + allocateResponse.getAllocatedContainers().size()\n          + \" finishedContainers\u003d\"\n          + allocateResponse.getCompletedContainersStatuses().size()\n          + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n          + clusterNmCount);\n    }\n\n    ask.clear();\n    release.clear();\n    return allocateResponse;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "7359dc32d3781d5318efee4cf6185616c7c00c18": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "MAPREDUCE-4067. Changed MRClientProtocol api to throw IOException only (Xuan Gong via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1481695 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/05/13 8:34 PM",
      "commitName": "7359dc32d3781d5318efee4cf6185616c7c00c18",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "MAPREDUCE-4067. Changed MRClientProtocol api to throw IOException only (Xuan Gong via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1481695 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/05/13 8:34 PM",
          "commitName": "7359dc32d3781d5318efee4cf6185616c7c00c18",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "08/05/13 10:32 PM",
          "commitNameOld": "9c4f86879cad6d6e19255d4ae8f28b61328bd10b",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 3.92,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,30 @@\n-  protected AllocateResponse makeRemoteRequest() throws YarnRemoteException,\n-      IOException {\n+  protected AllocateResponse makeRemoteRequest() throws IOException {\n     AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n         applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n         new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n             release));\n-    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n+    AllocateResponse allocateResponse;\n+    try {\n+      allocateResponse \u003d scheduler.allocate(allocateRequest);\n+    } catch (YarnRemoteException e) {\n+      throw new IOException(e);\n+    }\n     lastResponseID \u003d allocateResponse.getResponseId();\n     availableResources \u003d allocateResponse.getAvailableResources();\n     lastClusterNmCount \u003d clusterNmCount;\n     clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n \n     if (ask.size() \u003e 0 || release.size() \u003e 0) {\n       LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n           + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n           + allocateResponse.getAllocatedContainers().size()\n           + \" finishedContainers\u003d\"\n           + allocateResponse.getCompletedContainersStatuses().size()\n           + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n           + clusterNmCount);\n     }\n \n     ask.clear();\n     release.clear();\n     return allocateResponse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected AllocateResponse makeRemoteRequest() throws IOException {\n    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n        applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n        new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n            release));\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n    } catch (YarnRemoteException e) {\n      throw new IOException(e);\n    }\n    lastResponseID \u003d allocateResponse.getResponseId();\n    availableResources \u003d allocateResponse.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n\n    if (ask.size() \u003e 0 || release.size() \u003e 0) {\n      LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n          + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n          + allocateResponse.getAllocatedContainers().size()\n          + \" finishedContainers\u003d\"\n          + allocateResponse.getCompletedContainersStatuses().size()\n          + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n          + clusterNmCount);\n    }\n\n    ask.clear();\n    release.clear();\n    return allocateResponse;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
          "extendedDetails": {
            "oldValue": "[YarnRemoteException, IOException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4067. Changed MRClientProtocol api to throw IOException only (Xuan Gong via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1481695 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/05/13 8:34 PM",
          "commitName": "7359dc32d3781d5318efee4cf6185616c7c00c18",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "08/05/13 10:32 PM",
          "commitNameOld": "9c4f86879cad6d6e19255d4ae8f28b61328bd10b",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 3.92,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,30 @@\n-  protected AllocateResponse makeRemoteRequest() throws YarnRemoteException,\n-      IOException {\n+  protected AllocateResponse makeRemoteRequest() throws IOException {\n     AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n         applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n         new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n             release));\n-    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n+    AllocateResponse allocateResponse;\n+    try {\n+      allocateResponse \u003d scheduler.allocate(allocateRequest);\n+    } catch (YarnRemoteException e) {\n+      throw new IOException(e);\n+    }\n     lastResponseID \u003d allocateResponse.getResponseId();\n     availableResources \u003d allocateResponse.getAvailableResources();\n     lastClusterNmCount \u003d clusterNmCount;\n     clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n \n     if (ask.size() \u003e 0 || release.size() \u003e 0) {\n       LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n           + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n           + allocateResponse.getAllocatedContainers().size()\n           + \" finishedContainers\u003d\"\n           + allocateResponse.getCompletedContainersStatuses().size()\n           + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n           + clusterNmCount);\n     }\n \n     ask.clear();\n     release.clear();\n     return allocateResponse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected AllocateResponse makeRemoteRequest() throws IOException {\n    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n        applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n        new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n            release));\n    AllocateResponse allocateResponse;\n    try {\n      allocateResponse \u003d scheduler.allocate(allocateRequest);\n    } catch (YarnRemoteException e) {\n      throw new IOException(e);\n    }\n    lastResponseID \u003d allocateResponse.getResponseId();\n    availableResources \u003d allocateResponse.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n\n    if (ask.size() \u003e 0 || release.size() \u003e 0) {\n      LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n          + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n          + allocateResponse.getAllocatedContainers().size()\n          + \" finishedContainers\u003d\"\n          + allocateResponse.getCompletedContainersStatuses().size()\n          + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n          + clusterNmCount);\n    }\n\n    ask.clear();\n    release.clear();\n    return allocateResponse;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
          "extendedDetails": {}
        }
      ]
    },
    "9c4f86879cad6d6e19255d4ae8f28b61328bd10b": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-630. Changed AMRMProtocol api to throw IOException and YarnRemoteException. Contributed by Xuan Gong.\nMAPREDUCE-5226. Handling YarnRemoteException separately from IOException in MR App\u0027s use of AMRMProtocol after YARN-630. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480529 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/13 10:32 PM",
      "commitName": "9c4f86879cad6d6e19255d4ae8f28b61328bd10b",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "28/03/13 12:44 PM",
      "commitNameOld": "520033b1cd81c76b38fcdcfcfeed16158db4bbba",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 41.41,
      "commitsBetweenForRepo": 220,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n-  protected AllocateResponse makeRemoteRequest() throws YarnRemoteException {\n+  protected AllocateResponse makeRemoteRequest() throws YarnRemoteException,\n+      IOException {\n     AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n         applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n         new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n             release));\n     AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n     lastResponseID \u003d allocateResponse.getResponseId();\n     availableResources \u003d allocateResponse.getAvailableResources();\n     lastClusterNmCount \u003d clusterNmCount;\n     clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n \n     if (ask.size() \u003e 0 || release.size() \u003e 0) {\n       LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n           + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n           + allocateResponse.getAllocatedContainers().size()\n           + \" finishedContainers\u003d\"\n           + allocateResponse.getCompletedContainersStatuses().size()\n           + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n           + clusterNmCount);\n     }\n \n     ask.clear();\n     release.clear();\n     return allocateResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AllocateResponse makeRemoteRequest() throws YarnRemoteException,\n      IOException {\n    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n        applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n        new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n            release));\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    lastResponseID \u003d allocateResponse.getResponseId();\n    availableResources \u003d allocateResponse.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n\n    if (ask.size() \u003e 0 || release.size() \u003e 0) {\n      LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n          + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n          + allocateResponse.getAllocatedContainers().size()\n          + \" finishedContainers\u003d\"\n          + allocateResponse.getCompletedContainersStatuses().size()\n          + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n          + clusterNmCount);\n    }\n\n    ask.clear();\n    release.clear();\n    return allocateResponse;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException]",
        "newValue": "[YarnRemoteException, IOException]"
      }
    },
    "1bd345d6e3855ab330963efd32e0fac102e61d1a": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-396. Rationalize AllocateResponse in RM Scheduler API. Contributed by Zhijie Shen.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1459040 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/03/13 1:44 PM",
      "commitName": "1bd345d6e3855ab330963efd32e0fac102e61d1a",
      "commitAuthor": "Hitesh Shah",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-396. Rationalize AllocateResponse in RM Scheduler API. Contributed by Zhijie Shen.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1459040 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/03/13 1:44 PM",
          "commitName": "1bd345d6e3855ab330963efd32e0fac102e61d1a",
          "commitAuthor": "Hitesh Shah",
          "commitDateOld": "06/02/13 11:07 PM",
          "commitNameOld": "35832053bf46f77a6350ef8e716a67f2a374b1a0",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 41.57,
          "commitsBetweenForRepo": 170,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  protected AMResponse makeRemoteRequest() throws YarnRemoteException {\n+  protected AllocateResponse makeRemoteRequest() throws YarnRemoteException {\n     AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n         applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n         new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n             release));\n     AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n-    AMResponse response \u003d allocateResponse.getAMResponse();\n-    lastResponseID \u003d response.getResponseId();\n-    availableResources \u003d response.getAvailableResources();\n+    lastResponseID \u003d allocateResponse.getResponseId();\n+    availableResources \u003d allocateResponse.getAvailableResources();\n     lastClusterNmCount \u003d clusterNmCount;\n     clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n \n     if (ask.size() \u003e 0 || release.size() \u003e 0) {\n       LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n           + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n-          + response.getAllocatedContainers().size() + \" finishedContainers\u003d\"\n-          + response.getCompletedContainersStatuses().size()\n+          + allocateResponse.getAllocatedContainers().size()\n+          + \" finishedContainers\u003d\"\n+          + allocateResponse.getCompletedContainersStatuses().size()\n           + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n           + clusterNmCount);\n     }\n \n     ask.clear();\n     release.clear();\n-    return response;\n+    return allocateResponse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected AllocateResponse makeRemoteRequest() throws YarnRemoteException {\n    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n        applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n        new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n            release));\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    lastResponseID \u003d allocateResponse.getResponseId();\n    availableResources \u003d allocateResponse.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n\n    if (ask.size() \u003e 0 || release.size() \u003e 0) {\n      LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n          + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n          + allocateResponse.getAllocatedContainers().size()\n          + \" finishedContainers\u003d\"\n          + allocateResponse.getCompletedContainersStatuses().size()\n          + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n          + clusterNmCount);\n    }\n\n    ask.clear();\n    release.clear();\n    return allocateResponse;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
          "extendedDetails": {
            "oldValue": "AMResponse",
            "newValue": "AllocateResponse"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-396. Rationalize AllocateResponse in RM Scheduler API. Contributed by Zhijie Shen.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1459040 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/03/13 1:44 PM",
          "commitName": "1bd345d6e3855ab330963efd32e0fac102e61d1a",
          "commitAuthor": "Hitesh Shah",
          "commitDateOld": "06/02/13 11:07 PM",
          "commitNameOld": "35832053bf46f77a6350ef8e716a67f2a374b1a0",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 41.57,
          "commitsBetweenForRepo": 170,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  protected AMResponse makeRemoteRequest() throws YarnRemoteException {\n+  protected AllocateResponse makeRemoteRequest() throws YarnRemoteException {\n     AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n         applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n         new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n             release));\n     AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n-    AMResponse response \u003d allocateResponse.getAMResponse();\n-    lastResponseID \u003d response.getResponseId();\n-    availableResources \u003d response.getAvailableResources();\n+    lastResponseID \u003d allocateResponse.getResponseId();\n+    availableResources \u003d allocateResponse.getAvailableResources();\n     lastClusterNmCount \u003d clusterNmCount;\n     clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n \n     if (ask.size() \u003e 0 || release.size() \u003e 0) {\n       LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n           + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n-          + response.getAllocatedContainers().size() + \" finishedContainers\u003d\"\n-          + response.getCompletedContainersStatuses().size()\n+          + allocateResponse.getAllocatedContainers().size()\n+          + \" finishedContainers\u003d\"\n+          + allocateResponse.getCompletedContainersStatuses().size()\n           + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n           + clusterNmCount);\n     }\n \n     ask.clear();\n     release.clear();\n-    return response;\n+    return allocateResponse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected AllocateResponse makeRemoteRequest() throws YarnRemoteException {\n    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n        applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n        new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n            release));\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    lastResponseID \u003d allocateResponse.getResponseId();\n    availableResources \u003d allocateResponse.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n\n    if (ask.size() \u003e 0 || release.size() \u003e 0) {\n      LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n          + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n          + allocateResponse.getAllocatedContainers().size()\n          + \" finishedContainers\u003d\"\n          + allocateResponse.getCompletedContainersStatuses().size()\n          + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n          + clusterNmCount);\n    }\n\n    ask.clear();\n    release.clear();\n    return allocateResponse;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
          "extendedDetails": {}
        }
      ]
    },
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3810. Performance tweaks - reduced logging in AM and defined hascode/equals for ResourceRequest \u0026 Priority. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/12 2:01 PM",
      "commitName": "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "27/12/11 11:54 AM",
      "commitNameOld": "fcbad14a3da7fadbb601bf245552ecca2fbc5026",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 41.09,
      "commitsBetweenForRepo": 218,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   protected AMResponse makeRemoteRequest() throws YarnRemoteException {\n     AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n         applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n         new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n             release));\n     AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n     AMResponse response \u003d allocateResponse.getAMResponse();\n     lastResponseID \u003d response.getResponseId();\n     availableResources \u003d response.getAvailableResources();\n     lastClusterNmCount \u003d clusterNmCount;\n     clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n \n-    LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n-        + ask.size() + \" release\u003d \" + release.size() + \n-        \" newContainers\u003d\" + response.getAllocatedContainers().size() + \n-        \" finishedContainers\u003d\" + \n-        response.getCompletedContainersStatuses().size() + \n-        \" resourcelimit\u003d\" + availableResources + \n-        \" knownNMs\u003d\" + clusterNmCount);\n+    if (ask.size() \u003e 0 || release.size() \u003e 0) {\n+      LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n+          + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n+          + response.getAllocatedContainers().size() + \" finishedContainers\u003d\"\n+          + response.getCompletedContainersStatuses().size()\n+          + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n+          + clusterNmCount);\n+    }\n \n     ask.clear();\n     release.clear();\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AMResponse makeRemoteRequest() throws YarnRemoteException {\n    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n        applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n        new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n            release));\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    AMResponse response \u003d allocateResponse.getAMResponse();\n    lastResponseID \u003d response.getResponseId();\n    availableResources \u003d response.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n\n    if (ask.size() \u003e 0 || release.size() \u003e 0) {\n      LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n          + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n          + response.getAllocatedContainers().size() + \" finishedContainers\u003d\"\n          + response.getCompletedContainersStatuses().size()\n          + \" resourcelimit\u003d\" + availableResources + \" knownNMs\u003d\"\n          + clusterNmCount);\n    }\n\n    ask.clear();\n    release.clear();\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "fcbad14a3da7fadbb601bf245552ecca2fbc5026": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3568. Optimized Job\u0027s progress calculations in MR AM. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1224995 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/12/11 11:54 AM",
      "commitName": "fcbad14a3da7fadbb601bf245552ecca2fbc5026",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "20/12/11 3:27 PM",
      "commitNameOld": "e7543b944c2b35d0a1ca0a92efeca47ad414ac7a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.85,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   protected AMResponse makeRemoteRequest() throws YarnRemoteException {\n     AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n         applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n         new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n             release));\n     AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n     AMResponse response \u003d allocateResponse.getAMResponse();\n     lastResponseID \u003d response.getResponseId();\n     availableResources \u003d response.getAvailableResources();\n     lastClusterNmCount \u003d clusterNmCount;\n     clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n \n     LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n         + ask.size() + \" release\u003d \" + release.size() + \n         \" newContainers\u003d\" + response.getAllocatedContainers().size() + \n         \" finishedContainers\u003d\" + \n         response.getCompletedContainersStatuses().size() + \n         \" resourcelimit\u003d\" + availableResources + \n-        \"knownNMs\u003d\" + clusterNmCount);\n+        \" knownNMs\u003d\" + clusterNmCount);\n \n     ask.clear();\n     release.clear();\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AMResponse makeRemoteRequest() throws YarnRemoteException {\n    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n        applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n        new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n            release));\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    AMResponse response \u003d allocateResponse.getAMResponse();\n    lastResponseID \u003d response.getResponseId();\n    availableResources \u003d response.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n\n    LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n        + ask.size() + \" release\u003d \" + release.size() + \n        \" newContainers\u003d\" + response.getAllocatedContainers().size() + \n        \" finishedContainers\u003d\" + \n        response.getCompletedContainersStatuses().size() + \n        \" resourcelimit\u003d\" + availableResources + \n        \" knownNMs\u003d\" + clusterNmCount);\n\n    ask.clear();\n    release.clear();\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "e7543b944c2b35d0a1ca0a92efeca47ad414ac7a": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3339. Fixed MR AM to stop considering node blacklisting after the number of nodes blacklisted crosses a threshold. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1221523 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/12/11 3:27 PM",
      "commitName": "e7543b944c2b35d0a1ca0a92efeca47ad414ac7a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/12/11 2:18 PM",
      "commitNameOld": "a3f37e15f75d01bb342480b0b1035ea16c5fd9aa",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 18.05,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,24 @@\n   protected AMResponse makeRemoteRequest() throws YarnRemoteException {\n     AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n         applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n         new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n             release));\n     AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n     AMResponse response \u003d allocateResponse.getAMResponse();\n     lastResponseID \u003d response.getResponseId();\n     availableResources \u003d response.getAvailableResources();\n+    lastClusterNmCount \u003d clusterNmCount;\n+    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n \n     LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n         + ask.size() + \" release\u003d \" + release.size() + \n         \" newContainers\u003d\" + response.getAllocatedContainers().size() + \n         \" finishedContainers\u003d\" + \n         response.getCompletedContainersStatuses().size() + \n-        \" resourcelimit\u003d\" + availableResources);\n+        \" resourcelimit\u003d\" + availableResources + \n+        \"knownNMs\u003d\" + clusterNmCount);\n \n     ask.clear();\n     release.clear();\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AMResponse makeRemoteRequest() throws YarnRemoteException {\n    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n        applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n        new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n            release));\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    AMResponse response \u003d allocateResponse.getAMResponse();\n    lastResponseID \u003d response.getResponseId();\n    availableResources \u003d response.getAvailableResources();\n    lastClusterNmCount \u003d clusterNmCount;\n    clusterNmCount \u003d allocateResponse.getNumClusterNodes();\n\n    LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n        + ask.size() + \" release\u003d \" + release.size() + \n        \" newContainers\u003d\" + response.getAllocatedContainers().size() + \n        \" finishedContainers\u003d\" + \n        response.getCompletedContainersStatuses().size() + \n        \" resourcelimit\u003d\" + availableResources + \n        \"knownNMs\u003d\" + clusterNmCount);\n\n    ask.clear();\n    release.clear();\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "312a7e71001d55f88781e56b331ab1b40a72a980": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3078. Ensure MapReduce AM reports progress correctly for displaying on the RM Web-UI. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176762 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/09/11 12:31 AM",
      "commitName": "312a7e71001d55f88781e56b331ab1b40a72a980",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "11/09/11 10:26 AM",
      "commitNameOld": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 115,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,21 @@\n   protected AMResponse makeRemoteRequest() throws YarnRemoteException {\n-    AllocateRequest allocateRequest \u003d recordFactory\n-        .newRecordInstance(AllocateRequest.class);\n-    allocateRequest.setApplicationAttemptId(applicationAttemptId);\n-    allocateRequest.setResponseId(lastResponseID);\n-    allocateRequest.addAllAsks(new ArrayList\u003cResourceRequest\u003e(ask));\n-    allocateRequest.addAllReleases(new ArrayList\u003cContainerId\u003e(release));\n+    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n+        applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n+        new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n+            release));\n     AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n     AMResponse response \u003d allocateResponse.getAMResponse();\n     lastResponseID \u003d response.getResponseId();\n     availableResources \u003d response.getAvailableResources();\n \n     LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n         + ask.size() + \" release\u003d \" + release.size() + \n         \" newContainers\u003d\" + response.getAllocatedContainers().size() + \n         \" finishedContainers\u003d\" + \n         response.getCompletedContainersStatuses().size() + \n         \" resourcelimit\u003d\" + availableResources);\n \n     ask.clear();\n     release.clear();\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AMResponse makeRemoteRequest() throws YarnRemoteException {\n    AllocateRequest allocateRequest \u003d BuilderUtils.newAllocateRequest(\n        applicationAttemptId, lastResponseID, super.getApplicationProgress(),\n        new ArrayList\u003cResourceRequest\u003e(ask), new ArrayList\u003cContainerId\u003e(\n            release));\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    AMResponse response \u003d allocateResponse.getAMResponse();\n    lastResponseID \u003d response.getResponseId();\n    availableResources \u003d response.getAvailableResources();\n\n    LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n        + ask.size() + \" release\u003d \" + release.size() + \n        \" newContainers\u003d\" + response.getAllocatedContainers().size() + \n        \" finishedContainers\u003d\" + \n        response.getCompletedContainersStatuses().size() + \n        \" resourcelimit\u003d\" + availableResources);\n\n    ask.clear();\n    release.clear();\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/11 10:26 AM",
      "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "08/09/11 6:44 PM",
      "commitNameOld": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 2.65,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   protected AMResponse makeRemoteRequest() throws YarnRemoteException {\n     AllocateRequest allocateRequest \u003d recordFactory\n         .newRecordInstance(AllocateRequest.class);\n     allocateRequest.setApplicationAttemptId(applicationAttemptId);\n     allocateRequest.setResponseId(lastResponseID);\n     allocateRequest.addAllAsks(new ArrayList\u003cResourceRequest\u003e(ask));\n     allocateRequest.addAllReleases(new ArrayList\u003cContainerId\u003e(release));\n     AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n     AMResponse response \u003d allocateResponse.getAMResponse();\n     lastResponseID \u003d response.getResponseId();\n     availableResources \u003d response.getAvailableResources();\n \n     LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n-        + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n-        + response.getNewContainerCount() + \" finishedContainers\u003d\"\n-        + response.getFinishedContainerCount()\n-        + \" resourcelimit\u003d\" + availableResources);\n+        + ask.size() + \" release\u003d \" + release.size() + \n+        \" newContainers\u003d\" + response.getAllocatedContainers().size() + \n+        \" finishedContainers\u003d\" + \n+        response.getCompletedContainersStatuses().size() + \n+        \" resourcelimit\u003d\" + availableResources);\n \n     ask.clear();\n     release.clear();\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AMResponse makeRemoteRequest() throws YarnRemoteException {\n    AllocateRequest allocateRequest \u003d recordFactory\n        .newRecordInstance(AllocateRequest.class);\n    allocateRequest.setApplicationAttemptId(applicationAttemptId);\n    allocateRequest.setResponseId(lastResponseID);\n    allocateRequest.addAllAsks(new ArrayList\u003cResourceRequest\u003e(ask));\n    allocateRequest.addAllReleases(new ArrayList\u003cContainerId\u003e(release));\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    AMResponse response \u003d allocateResponse.getAMResponse();\n    lastResponseID \u003d response.getResponseId();\n    availableResources \u003d response.getAvailableResources();\n\n    LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n        + ask.size() + \" release\u003d \" + release.size() + \n        \" newContainers\u003d\" + response.getAllocatedContainers().size() + \n        \" finishedContainers\u003d\" + \n        response.getCompletedContainersStatuses().size() + \n        \" resourcelimit\u003d\" + availableResources);\n\n    ask.clear();\n    release.clear();\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected AMResponse makeRemoteRequest() throws YarnRemoteException {\n    AllocateRequest allocateRequest \u003d recordFactory\n        .newRecordInstance(AllocateRequest.class);\n    allocateRequest.setApplicationAttemptId(applicationAttemptId);\n    allocateRequest.setResponseId(lastResponseID);\n    allocateRequest.addAllAsks(new ArrayList\u003cResourceRequest\u003e(ask));\n    allocateRequest.addAllReleases(new ArrayList\u003cContainerId\u003e(release));\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    AMResponse response \u003d allocateResponse.getAMResponse();\n    lastResponseID \u003d response.getResponseId();\n    availableResources \u003d response.getAvailableResources();\n\n    LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n        + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n        + response.getNewContainerCount() + \" finishedContainers\u003d\"\n        + response.getFinishedContainerCount()\n        + \" resourcelimit\u003d\" + availableResources);\n\n    ask.clear();\n    release.clear();\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,22 @@\n+  protected AMResponse makeRemoteRequest() throws YarnRemoteException {\n+    AllocateRequest allocateRequest \u003d recordFactory\n+        .newRecordInstance(AllocateRequest.class);\n+    allocateRequest.setApplicationAttemptId(applicationAttemptId);\n+    allocateRequest.setResponseId(lastResponseID);\n+    allocateRequest.addAllAsks(new ArrayList\u003cResourceRequest\u003e(ask));\n+    allocateRequest.addAllReleases(new ArrayList\u003cContainerId\u003e(release));\n+    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n+    AMResponse response \u003d allocateResponse.getAMResponse();\n+    lastResponseID \u003d response.getResponseId();\n+    availableResources \u003d response.getAvailableResources();\n+\n+    LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n+        + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n+        + response.getNewContainerCount() + \" finishedContainers\u003d\"\n+        + response.getFinishedContainerCount()\n+        + \" resourcelimit\u003d\" + availableResources);\n+\n+    ask.clear();\n+    release.clear();\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected AMResponse makeRemoteRequest() throws YarnRemoteException {\n    AllocateRequest allocateRequest \u003d recordFactory\n        .newRecordInstance(AllocateRequest.class);\n    allocateRequest.setApplicationAttemptId(applicationAttemptId);\n    allocateRequest.setResponseId(lastResponseID);\n    allocateRequest.addAllAsks(new ArrayList\u003cResourceRequest\u003e(ask));\n    allocateRequest.addAllReleases(new ArrayList\u003cContainerId\u003e(release));\n    AllocateResponse allocateResponse \u003d scheduler.allocate(allocateRequest);\n    AMResponse response \u003d allocateResponse.getAMResponse();\n    lastResponseID \u003d response.getResponseId();\n    availableResources \u003d response.getAvailableResources();\n\n    LOG.info(\"getResources() for \" + applicationId + \":\" + \" ask\u003d\"\n        + ask.size() + \" release\u003d \" + release.size() + \" newContainers\u003d\"\n        + response.getNewContainerCount() + \" finishedContainers\u003d\"\n        + response.getFinishedContainerCount()\n        + \" resourcelimit\u003d\" + availableResources);\n\n    ask.clear();\n    release.clear();\n    return response;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java"
    }
  }
}