{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AMultipartUploader.java",
  "functionName": "putPart",
  "functionId": "putPart___filePath-Path__inputStream-InputStream__partNumber-int__uploadId-UploadHandle__lengthInBytes-long",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AMultipartUploader.java",
  "functionStartLine": 88,
  "functionEndLine": 106,
  "numCommitsSeen": 5,
  "timeTaken": 2002,
  "changeHistory": [
    "c1d24f848345f6d34a2ac2d570d49e9787a0df6a",
    "2e6c1109dcdeedb59a3345047e9201271c9a0b27",
    "2ec97abb2e93c1a8127e7a146c08e26454b583fa",
    "980031bb043dd026a6bf42b0e71d304ac89294a5"
  ],
  "changeHistoryShort": {
    "c1d24f848345f6d34a2ac2d570d49e9787a0df6a": "Ybodychange",
    "2e6c1109dcdeedb59a3345047e9201271c9a0b27": "Ybodychange",
    "2ec97abb2e93c1a8127e7a146c08e26454b583fa": "Ymultichange(Yexceptionschange,Ybodychange)",
    "980031bb043dd026a6bf42b0e71d304ac89294a5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c1d24f848345f6d34a2ac2d570d49e9787a0df6a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13713. Add specification of Multipart Upload API to FS specification, with contract tests.\n\nContributed by Ewan Higgs and Steve Loughran.\n",
      "commitDate": "29/11/18 7:12 AM",
      "commitName": "c1d24f848345f6d34a2ac2d570d49e9787a0df6a",
      "commitAuthor": "Ewan Higgs",
      "commitDateOld": "24/09/18 8:49 AM",
      "commitNameOld": "d060cbea48ffc75da0f4fa98c3ea5203d6db1360",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 65.97,
      "commitsBetweenForRepo": 566,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,19 @@\n   public PartHandle putPart(Path filePath, InputStream inputStream,\n       int partNumber, UploadHandle uploadId, long lengthInBytes)\n       throws IOException {\n+    checkPutArguments(filePath, inputStream, partNumber, uploadId,\n+        lengthInBytes);\n     byte[] uploadIdBytes \u003d uploadId.toByteArray();\n     checkUploadId(uploadIdBytes);\n     String key \u003d s3a.pathToKey(filePath);\n     final WriteOperationHelper writeHelper \u003d s3a.getWriteOperationHelper();\n     String uploadIdString \u003d new String(uploadIdBytes, 0, uploadIdBytes.length,\n         Charsets.UTF_8);\n     UploadPartRequest request \u003d writeHelper.newUploadPartRequest(key,\n         uploadIdString, partNumber, (int) lengthInBytes, inputStream, null, 0L);\n     UploadPartResult result \u003d writeHelper.uploadPart(request);\n     String eTag \u003d result.getETag();\n     return BBPartHandle.from(\n         ByteBuffer.wrap(\n             buildPartHandlePayload(eTag, lengthInBytes)));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public PartHandle putPart(Path filePath, InputStream inputStream,\n      int partNumber, UploadHandle uploadId, long lengthInBytes)\n      throws IOException {\n    checkPutArguments(filePath, inputStream, partNumber, uploadId,\n        lengthInBytes);\n    byte[] uploadIdBytes \u003d uploadId.toByteArray();\n    checkUploadId(uploadIdBytes);\n    String key \u003d s3a.pathToKey(filePath);\n    final WriteOperationHelper writeHelper \u003d s3a.getWriteOperationHelper();\n    String uploadIdString \u003d new String(uploadIdBytes, 0, uploadIdBytes.length,\n        Charsets.UTF_8);\n    UploadPartRequest request \u003d writeHelper.newUploadPartRequest(key,\n        uploadIdString, partNumber, (int) lengthInBytes, inputStream, null, 0L);\n    UploadPartResult result \u003d writeHelper.uploadPart(request);\n    String eTag \u003d result.getETag();\n    return BBPartHandle.from(\n        ByteBuffer.wrap(\n            buildPartHandlePayload(eTag, lengthInBytes)));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AMultipartUploader.java",
      "extendedDetails": {}
    },
    "2e6c1109dcdeedb59a3345047e9201271c9a0b27": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15667. FileSystemMultipartUploader should verify that UploadHandle has non-0 length.\nContributed by Ewan Higgs\n",
      "commitDate": "30/08/18 6:33 AM",
      "commitName": "2e6c1109dcdeedb59a3345047e9201271c9a0b27",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "08/08/18 4:50 AM",
      "commitNameOld": "2ec97abb2e93c1a8127e7a146c08e26454b583fa",
      "commitAuthorOld": "Ewan Higgs",
      "daysBetweenCommits": 22.07,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,17 @@\n   public PartHandle putPart(Path filePath, InputStream inputStream,\n       int partNumber, UploadHandle uploadId, long lengthInBytes)\n       throws IOException {\n-    final WriteOperationHelper writeHelper \u003d s3a.getWriteOperationHelper();\n-    String key \u003d s3a.pathToKey(filePath);\n     byte[] uploadIdBytes \u003d uploadId.toByteArray();\n+    checkUploadId(uploadIdBytes);\n+    String key \u003d s3a.pathToKey(filePath);\n+    final WriteOperationHelper writeHelper \u003d s3a.getWriteOperationHelper();\n     String uploadIdString \u003d new String(uploadIdBytes, 0, uploadIdBytes.length,\n         Charsets.UTF_8);\n     UploadPartRequest request \u003d writeHelper.newUploadPartRequest(key,\n         uploadIdString, partNumber, (int) lengthInBytes, inputStream, null, 0L);\n     UploadPartResult result \u003d writeHelper.uploadPart(request);\n     String eTag \u003d result.getETag();\n     return BBPartHandle.from(\n         ByteBuffer.wrap(\n             buildPartHandlePayload(eTag, lengthInBytes)));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public PartHandle putPart(Path filePath, InputStream inputStream,\n      int partNumber, UploadHandle uploadId, long lengthInBytes)\n      throws IOException {\n    byte[] uploadIdBytes \u003d uploadId.toByteArray();\n    checkUploadId(uploadIdBytes);\n    String key \u003d s3a.pathToKey(filePath);\n    final WriteOperationHelper writeHelper \u003d s3a.getWriteOperationHelper();\n    String uploadIdString \u003d new String(uploadIdBytes, 0, uploadIdBytes.length,\n        Charsets.UTF_8);\n    UploadPartRequest request \u003d writeHelper.newUploadPartRequest(key,\n        uploadIdString, partNumber, (int) lengthInBytes, inputStream, null, 0L);\n    UploadPartResult result \u003d writeHelper.uploadPart(request);\n    String eTag \u003d result.getETag();\n    return BBPartHandle.from(\n        ByteBuffer.wrap(\n            buildPartHandlePayload(eTag, lengthInBytes)));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AMultipartUploader.java",
      "extendedDetails": {}
    },
    "2ec97abb2e93c1a8127e7a146c08e26454b583fa": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-15576. S3A Multipart Uploader to work with S3Guard and encryption Originally contributed by Ewan Higgs with refinements by Steve Loughran.\n",
      "commitDate": "08/08/18 4:50 AM",
      "commitName": "2ec97abb2e93c1a8127e7a146c08e26454b583fa",
      "commitAuthor": "Ewan Higgs",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-15576. S3A Multipart Uploader to work with S3Guard and encryption Originally contributed by Ewan Higgs with refinements by Steve Loughran.\n",
          "commitDate": "08/08/18 4:50 AM",
          "commitName": "2ec97abb2e93c1a8127e7a146c08e26454b583fa",
          "commitAuthor": "Ewan Higgs",
          "commitDateOld": "17/06/18 11:54 AM",
          "commitNameOld": "980031bb043dd026a6bf42b0e71d304ac89294a5",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 51.71,
          "commitsBetweenForRepo": 308,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,16 @@\n   public PartHandle putPart(Path filePath, InputStream inputStream,\n-      int partNumber, UploadHandle uploadId, long lengthInBytes) {\n+      int partNumber, UploadHandle uploadId, long lengthInBytes)\n+      throws IOException {\n+    final WriteOperationHelper writeHelper \u003d s3a.getWriteOperationHelper();\n     String key \u003d s3a.pathToKey(filePath);\n-    UploadPartRequest request \u003d new UploadPartRequest();\n     byte[] uploadIdBytes \u003d uploadId.toByteArray();\n-    request.setUploadId(new String(uploadIdBytes, 0, uploadIdBytes.length,\n-        Charsets.UTF_8));\n-    request.setInputStream(inputStream);\n-    request.setPartSize(lengthInBytes);\n-    request.setPartNumber(partNumber);\n-    request.setBucketName(s3a.getBucket());\n-    request.setKey(key);\n-    LOG.debug(\"putPart request: {}\", request);\n-    UploadPartResult result \u003d s3a.uploadPart(request);\n+    String uploadIdString \u003d new String(uploadIdBytes, 0, uploadIdBytes.length,\n+        Charsets.UTF_8);\n+    UploadPartRequest request \u003d writeHelper.newUploadPartRequest(key,\n+        uploadIdString, partNumber, (int) lengthInBytes, inputStream, null, 0L);\n+    UploadPartResult result \u003d writeHelper.uploadPart(request);\n     String eTag \u003d result.getETag();\n-    return BBPartHandle.from(ByteBuffer.wrap(eTag.getBytes(Charsets.UTF_8)));\n+    return BBPartHandle.from(\n+        ByteBuffer.wrap(\n+            buildPartHandlePayload(eTag, lengthInBytes)));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public PartHandle putPart(Path filePath, InputStream inputStream,\n      int partNumber, UploadHandle uploadId, long lengthInBytes)\n      throws IOException {\n    final WriteOperationHelper writeHelper \u003d s3a.getWriteOperationHelper();\n    String key \u003d s3a.pathToKey(filePath);\n    byte[] uploadIdBytes \u003d uploadId.toByteArray();\n    String uploadIdString \u003d new String(uploadIdBytes, 0, uploadIdBytes.length,\n        Charsets.UTF_8);\n    UploadPartRequest request \u003d writeHelper.newUploadPartRequest(key,\n        uploadIdString, partNumber, (int) lengthInBytes, inputStream, null, 0L);\n    UploadPartResult result \u003d writeHelper.uploadPart(request);\n    String eTag \u003d result.getETag();\n    return BBPartHandle.from(\n        ByteBuffer.wrap(\n            buildPartHandlePayload(eTag, lengthInBytes)));\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AMultipartUploader.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15576. S3A Multipart Uploader to work with S3Guard and encryption Originally contributed by Ewan Higgs with refinements by Steve Loughran.\n",
          "commitDate": "08/08/18 4:50 AM",
          "commitName": "2ec97abb2e93c1a8127e7a146c08e26454b583fa",
          "commitAuthor": "Ewan Higgs",
          "commitDateOld": "17/06/18 11:54 AM",
          "commitNameOld": "980031bb043dd026a6bf42b0e71d304ac89294a5",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 51.71,
          "commitsBetweenForRepo": 308,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,16 @@\n   public PartHandle putPart(Path filePath, InputStream inputStream,\n-      int partNumber, UploadHandle uploadId, long lengthInBytes) {\n+      int partNumber, UploadHandle uploadId, long lengthInBytes)\n+      throws IOException {\n+    final WriteOperationHelper writeHelper \u003d s3a.getWriteOperationHelper();\n     String key \u003d s3a.pathToKey(filePath);\n-    UploadPartRequest request \u003d new UploadPartRequest();\n     byte[] uploadIdBytes \u003d uploadId.toByteArray();\n-    request.setUploadId(new String(uploadIdBytes, 0, uploadIdBytes.length,\n-        Charsets.UTF_8));\n-    request.setInputStream(inputStream);\n-    request.setPartSize(lengthInBytes);\n-    request.setPartNumber(partNumber);\n-    request.setBucketName(s3a.getBucket());\n-    request.setKey(key);\n-    LOG.debug(\"putPart request: {}\", request);\n-    UploadPartResult result \u003d s3a.uploadPart(request);\n+    String uploadIdString \u003d new String(uploadIdBytes, 0, uploadIdBytes.length,\n+        Charsets.UTF_8);\n+    UploadPartRequest request \u003d writeHelper.newUploadPartRequest(key,\n+        uploadIdString, partNumber, (int) lengthInBytes, inputStream, null, 0L);\n+    UploadPartResult result \u003d writeHelper.uploadPart(request);\n     String eTag \u003d result.getETag();\n-    return BBPartHandle.from(ByteBuffer.wrap(eTag.getBytes(Charsets.UTF_8)));\n+    return BBPartHandle.from(\n+        ByteBuffer.wrap(\n+            buildPartHandlePayload(eTag, lengthInBytes)));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public PartHandle putPart(Path filePath, InputStream inputStream,\n      int partNumber, UploadHandle uploadId, long lengthInBytes)\n      throws IOException {\n    final WriteOperationHelper writeHelper \u003d s3a.getWriteOperationHelper();\n    String key \u003d s3a.pathToKey(filePath);\n    byte[] uploadIdBytes \u003d uploadId.toByteArray();\n    String uploadIdString \u003d new String(uploadIdBytes, 0, uploadIdBytes.length,\n        Charsets.UTF_8);\n    UploadPartRequest request \u003d writeHelper.newUploadPartRequest(key,\n        uploadIdString, partNumber, (int) lengthInBytes, inputStream, null, 0L);\n    UploadPartResult result \u003d writeHelper.uploadPart(request);\n    String eTag \u003d result.getETag();\n    return BBPartHandle.from(\n        ByteBuffer.wrap(\n            buildPartHandlePayload(eTag, lengthInBytes)));\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AMultipartUploader.java",
          "extendedDetails": {}
        }
      ]
    },
    "980031bb043dd026a6bf42b0e71d304ac89294a5": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13186. Multipart Uploader API. Contributed by Ewan Higgs\n",
      "commitDate": "17/06/18 11:54 AM",
      "commitName": "980031bb043dd026a6bf42b0e71d304ac89294a5",
      "commitAuthor": "Chris Douglas",
      "diff": "@@ -0,0 +1,17 @@\n+  public PartHandle putPart(Path filePath, InputStream inputStream,\n+      int partNumber, UploadHandle uploadId, long lengthInBytes) {\n+    String key \u003d s3a.pathToKey(filePath);\n+    UploadPartRequest request \u003d new UploadPartRequest();\n+    byte[] uploadIdBytes \u003d uploadId.toByteArray();\n+    request.setUploadId(new String(uploadIdBytes, 0, uploadIdBytes.length,\n+        Charsets.UTF_8));\n+    request.setInputStream(inputStream);\n+    request.setPartSize(lengthInBytes);\n+    request.setPartNumber(partNumber);\n+    request.setBucketName(s3a.getBucket());\n+    request.setKey(key);\n+    LOG.debug(\"putPart request: {}\", request);\n+    UploadPartResult result \u003d s3a.uploadPart(request);\n+    String eTag \u003d result.getETag();\n+    return BBPartHandle.from(ByteBuffer.wrap(eTag.getBytes(Charsets.UTF_8)));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public PartHandle putPart(Path filePath, InputStream inputStream,\n      int partNumber, UploadHandle uploadId, long lengthInBytes) {\n    String key \u003d s3a.pathToKey(filePath);\n    UploadPartRequest request \u003d new UploadPartRequest();\n    byte[] uploadIdBytes \u003d uploadId.toByteArray();\n    request.setUploadId(new String(uploadIdBytes, 0, uploadIdBytes.length,\n        Charsets.UTF_8));\n    request.setInputStream(inputStream);\n    request.setPartSize(lengthInBytes);\n    request.setPartNumber(partNumber);\n    request.setBucketName(s3a.getBucket());\n    request.setKey(key);\n    LOG.debug(\"putPart request: {}\", request);\n    UploadPartResult result \u003d s3a.uploadPart(request);\n    String eTag \u003d result.getETag();\n    return BBPartHandle.from(ByteBuffer.wrap(eTag.getBytes(Charsets.UTF_8)));\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AMultipartUploader.java"
    }
  }
}