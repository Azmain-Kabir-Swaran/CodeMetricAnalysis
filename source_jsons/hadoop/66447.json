{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSWebApp.java",
  "functionName": "printJsonTrack",
  "functionId": "printJsonTrack___request-HttpServletRequest__response-HttpServletResponse",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/web/SLSWebApp.java",
  "functionStartLine": 554,
  "functionEndLine": 611,
  "numCommitsSeen": 10,
  "timeTaken": 564,
  "changeHistory": [
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,58 @@\n+  private void printJsonTrack(HttpServletRequest request,\n+                              HttpServletResponse response) throws IOException {\n+    response.setContentType(\"text/json\");\n+    response.setStatus(HttpServletResponse.SC_OK);\n+\n+    StringBuilder sb \u003d new StringBuilder();\n+    if(schedulerMetrics instanceof FairSchedulerMetrics) {\n+      String para \u003d request.getParameter(\"t\");\n+      if (para.startsWith(\"Job \")) {\n+        String appId \u003d para.substring(\"Job \".length());\n+\n+        sb.append(\"{\");\n+        sb.append(\"\\\"time\\\": \").append(System.currentTimeMillis()).append(\",\");\n+        sb.append(\"\\\"appId\\\": \\\"\").append(appId).append(\"\\\"\");\n+        for(String metric : this.schedulerMetrics.getAppTrackedMetrics()) {\n+          String key \u003d \"variable.app.\" + appId + \".\" + metric;\n+          sb.append(\",\\\"\").append(metric).append(\"\\\": \");\n+          if (metrics.getGauges().containsKey(key)) {\n+            double memoryGB \u003d\n+                    Double.parseDouble(\n+                            metrics.getGauges().get(key).getValue().toString())\n+                            / 1024;\n+            sb.append(memoryGB);\n+          } else {\n+            sb.append(-1);\n+          }\n+        }\n+        sb.append(\"}\");\n+\n+      } else if(para.startsWith(\"Queue \")) {\n+        String queueName \u003d para.substring(\"Queue \".length());\n+        sb.append(\"{\");\n+        sb.append(\"\\\"time\\\": \").append(System.currentTimeMillis()).append(\",\");\n+        sb.append(\"\\\"queueName\\\": \\\"\").append(queueName).append(\"\\\"\");\n+        for(String metric : this.schedulerMetrics.getQueueTrackedMetrics()) {\n+          String key \u003d \"variable.queue.\" + queueName + \".\" + metric;\n+          sb.append(\",\\\"\").append(metric).append(\"\\\": \");\n+          if (metrics.getGauges().containsKey(key)) {\n+            double memoryGB \u003d\n+                    Double.parseDouble(\n+                            metrics.getGauges().get(key).getValue().toString())\n+                            / 1024;\n+            sb.append(memoryGB);\n+          } else {\n+            sb.append(-1);\n+          }\n+        }\n+        sb.append(\"}\");\n+      }\n+    }\n+    String output \u003d sb.toString();\n+    if (output.isEmpty()) {\n+      output \u003d \"[]\";\n+    }\n+    response.getWriter().println(output);\n+    // package result\n+    ((Request) request).setHandled(true);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void printJsonTrack(HttpServletRequest request,\n                              HttpServletResponse response) throws IOException {\n    response.setContentType(\"text/json\");\n    response.setStatus(HttpServletResponse.SC_OK);\n\n    StringBuilder sb \u003d new StringBuilder();\n    if(schedulerMetrics instanceof FairSchedulerMetrics) {\n      String para \u003d request.getParameter(\"t\");\n      if (para.startsWith(\"Job \")) {\n        String appId \u003d para.substring(\"Job \".length());\n\n        sb.append(\"{\");\n        sb.append(\"\\\"time\\\": \").append(System.currentTimeMillis()).append(\",\");\n        sb.append(\"\\\"appId\\\": \\\"\").append(appId).append(\"\\\"\");\n        for(String metric : this.schedulerMetrics.getAppTrackedMetrics()) {\n          String key \u003d \"variable.app.\" + appId + \".\" + metric;\n          sb.append(\",\\\"\").append(metric).append(\"\\\": \");\n          if (metrics.getGauges().containsKey(key)) {\n            double memoryGB \u003d\n                    Double.parseDouble(\n                            metrics.getGauges().get(key).getValue().toString())\n                            / 1024;\n            sb.append(memoryGB);\n          } else {\n            sb.append(-1);\n          }\n        }\n        sb.append(\"}\");\n\n      } else if(para.startsWith(\"Queue \")) {\n        String queueName \u003d para.substring(\"Queue \".length());\n        sb.append(\"{\");\n        sb.append(\"\\\"time\\\": \").append(System.currentTimeMillis()).append(\",\");\n        sb.append(\"\\\"queueName\\\": \\\"\").append(queueName).append(\"\\\"\");\n        for(String metric : this.schedulerMetrics.getQueueTrackedMetrics()) {\n          String key \u003d \"variable.queue.\" + queueName + \".\" + metric;\n          sb.append(\",\\\"\").append(metric).append(\"\\\": \");\n          if (metrics.getGauges().containsKey(key)) {\n            double memoryGB \u003d\n                    Double.parseDouble(\n                            metrics.getGauges().get(key).getValue().toString())\n                            / 1024;\n            sb.append(memoryGB);\n          } else {\n            sb.append(-1);\n          }\n        }\n        sb.append(\"}\");\n      }\n    }\n    String output \u003d sb.toString();\n    if (output.isEmpty()) {\n      output \u003d \"[]\";\n    }\n    response.getWriter().println(output);\n    // package result\n    ((Request) request).setHandled(true);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/web/SLSWebApp.java"
    }
  }
}