{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FsDatasetImpl.java",
  "functionName": "append",
  "functionId": "append___b-ExtendedBlock__newGS-long__expectedBlockLen-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
  "functionStartLine": 1227,
  "functionEndLine": 1264,
  "numCommitsSeen": 230,
  "timeTaken": 13970,
  "changeHistory": [
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8",
    "86c9862bec0248d671e657aa56094a2919b8ac14",
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
    "b7f4a3156c0f5c600816c469637237ba6c9b330c",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
    "bc13dfb1426944ce45293cb8f444239a7406762c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8": "Ybodychange",
    "86c9862bec0248d671e657aa56094a2919b8ac14": "Ybodychange",
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c": "Ymultichange(Ymodifierchange,Ybodychange)",
    "b7f4a3156c0f5c600816c469637237ba6c9b330c": "Ymultichange(Yreturntypechange,Ybodychange)",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": "Ybodychange",
    "bc13dfb1426944ce45293cb8f444239a7406762c": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15150. Introduce read write lock to Datanode. Contributed Stephen O\u0027Donnell.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "11/02/20 8:00 AM",
      "commitName": "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8",
      "commitAuthor": "Stephen O\u0027Donnell",
      "commitDateOld": "28/01/20 10:10 AM",
      "commitNameOld": "1839c467f60cbb8592d446694ec3d7710cda5142",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 13.91,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public ReplicaHandler append(ExtendedBlock b,\n       long newGS, long expectedBlockLen) throws IOException {\n-    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n+    try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n       // If the block was successfully finalized because all packets\n       // were successfully processed at the Datanode but the ack for\n       // some of the packets were not received by the client. The client\n       // re-opens the connection and retries sending those packets.\n       // The other reason is that an \"append\" is occurring to this block.\n \n       // check the validity of the parameter\n       if (newGS \u003c b.getGenerationStamp()) {\n         throw new IOException(\"The new generation stamp \" + newGS +\n             \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n       }\n       ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n       LOG.info(\"Appending to \" + replicaInfo);\n       if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n         throw new ReplicaNotFoundException(\n             ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n       }\n       if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n         throw new IOException(\"Corrupted replica \" + replicaInfo +\n             \" with a length of \" + replicaInfo.getNumBytes() +\n             \" expected length is \" + expectedBlockLen);\n       }\n \n       FsVolumeReference ref \u003d replicaInfo.getVolume().obtainReference();\n       ReplicaInPipeline replica \u003d null;\n       try {\n         replica \u003d append(b.getBlockPoolId(), replicaInfo, newGS,\n             b.getNumBytes());\n       } catch (IOException e) {\n         IOUtils.cleanup(null, ref);\n         throw e;\n       }\n       return new ReplicaHandler(replica, ref);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReplicaHandler append(ExtendedBlock b,\n      long newGS, long expectedBlockLen) throws IOException {\n    try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n      // If the block was successfully finalized because all packets\n      // were successfully processed at the Datanode but the ack for\n      // some of the packets were not received by the client. The client\n      // re-opens the connection and retries sending those packets.\n      // The other reason is that an \"append\" is occurring to this block.\n\n      // check the validity of the parameter\n      if (newGS \u003c b.getGenerationStamp()) {\n        throw new IOException(\"The new generation stamp \" + newGS +\n            \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n      }\n      ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n      LOG.info(\"Appending to \" + replicaInfo);\n      if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n        throw new ReplicaNotFoundException(\n            ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n      }\n      if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n        throw new IOException(\"Corrupted replica \" + replicaInfo +\n            \" with a length of \" + replicaInfo.getNumBytes() +\n            \" expected length is \" + expectedBlockLen);\n      }\n\n      FsVolumeReference ref \u003d replicaInfo.getVolume().obtainReference();\n      ReplicaInPipeline replica \u003d null;\n      try {\n        replica \u003d append(b.getBlockPoolId(), replicaInfo, newGS,\n            b.getNumBytes());\n      } catch (IOException e) {\n        IOUtils.cleanup(null, ref);\n        throw e;\n      }\n      return new ReplicaHandler(replica, ref);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "86c9862bec0248d671e657aa56094a2919b8ac14": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10636. Modify ReplicaInfo to remove the assumption that replica metadata and data are stored in java.io.File. (Virajith Jalaparti via lei)\n",
      "commitDate": "13/09/16 12:54 PM",
      "commitName": "86c9862bec0248d671e657aa56094a2919b8ac14",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "10/09/16 6:22 PM",
      "commitNameOld": "a99bf26a0899bcc4307c3a242c8414eaef555aa7",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 2.77,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,38 @@\n   public ReplicaHandler append(ExtendedBlock b,\n       long newGS, long expectedBlockLen) throws IOException {\n     try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n       // If the block was successfully finalized because all packets\n       // were successfully processed at the Datanode but the ack for\n       // some of the packets were not received by the client. The client\n       // re-opens the connection and retries sending those packets.\n       // The other reason is that an \"append\" is occurring to this block.\n \n       // check the validity of the parameter\n       if (newGS \u003c b.getGenerationStamp()) {\n         throw new IOException(\"The new generation stamp \" + newGS +\n             \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n       }\n       ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n       LOG.info(\"Appending to \" + replicaInfo);\n       if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n         throw new ReplicaNotFoundException(\n             ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n       }\n       if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n         throw new IOException(\"Corrupted replica \" + replicaInfo +\n             \" with a length of \" + replicaInfo.getNumBytes() +\n             \" expected length is \" + expectedBlockLen);\n       }\n \n       FsVolumeReference ref \u003d replicaInfo.getVolume().obtainReference();\n-      ReplicaBeingWritten replica \u003d null;\n+      ReplicaInPipeline replica \u003d null;\n       try {\n-        replica \u003d append(b.getBlockPoolId(),\n-            (FinalizedReplica) replicaInfo, newGS,\n+        replica \u003d append(b.getBlockPoolId(), replicaInfo, newGS,\n             b.getNumBytes());\n       } catch (IOException e) {\n         IOUtils.cleanup(null, ref);\n         throw e;\n       }\n       return new ReplicaHandler(replica, ref);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReplicaHandler append(ExtendedBlock b,\n      long newGS, long expectedBlockLen) throws IOException {\n    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n      // If the block was successfully finalized because all packets\n      // were successfully processed at the Datanode but the ack for\n      // some of the packets were not received by the client. The client\n      // re-opens the connection and retries sending those packets.\n      // The other reason is that an \"append\" is occurring to this block.\n\n      // check the validity of the parameter\n      if (newGS \u003c b.getGenerationStamp()) {\n        throw new IOException(\"The new generation stamp \" + newGS +\n            \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n      }\n      ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n      LOG.info(\"Appending to \" + replicaInfo);\n      if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n        throw new ReplicaNotFoundException(\n            ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n      }\n      if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n        throw new IOException(\"Corrupted replica \" + replicaInfo +\n            \" with a length of \" + replicaInfo.getNumBytes() +\n            \" expected length is \" + expectedBlockLen);\n      }\n\n      FsVolumeReference ref \u003d replicaInfo.getVolume().obtainReference();\n      ReplicaInPipeline replica \u003d null;\n      try {\n        replica \u003d append(b.getBlockPoolId(), replicaInfo, newGS,\n            b.getNumBytes());\n      } catch (IOException e) {\n        IOUtils.cleanup(null, ref);\n        throw e;\n      }\n      return new ReplicaHandler(replica, ref);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-10682. Replace FsDatasetImpl object lock with a separate lock object. (Chen Liang)\n",
      "commitDate": "08/08/16 12:02 PM",
      "commitName": "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-10682. Replace FsDatasetImpl object lock with a separate lock object. (Chen Liang)\n",
          "commitDate": "08/08/16 12:02 PM",
          "commitName": "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/07/16 7:40 PM",
          "commitNameOld": "da6f1b88dd47e22b24d44f6fc8bbee73e85746f7",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 30.68,
          "commitsBetweenForRepo": 320,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,39 @@\n-  public synchronized ReplicaHandler append(ExtendedBlock b,\n+  public ReplicaHandler append(ExtendedBlock b,\n       long newGS, long expectedBlockLen) throws IOException {\n-    // If the block was successfully finalized because all packets\n-    // were successfully processed at the Datanode but the ack for\n-    // some of the packets were not received by the client. The client \n-    // re-opens the connection and retries sending those packets.\n-    // The other reason is that an \"append\" is occurring to this block.\n-    \n-    // check the validity of the parameter\n-    if (newGS \u003c b.getGenerationStamp()) {\n-      throw new IOException(\"The new generation stamp \" + newGS + \n-          \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n-    }\n-    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n-    LOG.info(\"Appending to \" + replicaInfo);\n-    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n-      throw new ReplicaNotFoundException(\n-          ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n-    }\n-    if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n-      throw new IOException(\"Corrupted replica \" + replicaInfo + \n-          \" with a length of \" + replicaInfo.getNumBytes() + \n-          \" expected length is \" + expectedBlockLen);\n-    }\n+    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n+      // If the block was successfully finalized because all packets\n+      // were successfully processed at the Datanode but the ack for\n+      // some of the packets were not received by the client. The client\n+      // re-opens the connection and retries sending those packets.\n+      // The other reason is that an \"append\" is occurring to this block.\n \n-    FsVolumeReference ref \u003d replicaInfo.getVolume().obtainReference();\n-    ReplicaBeingWritten replica \u003d null;\n-    try {\n-      replica \u003d append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n-          b.getNumBytes());\n-    } catch (IOException e) {\n-      IOUtils.cleanup(null, ref);\n-      throw e;\n+      // check the validity of the parameter\n+      if (newGS \u003c b.getGenerationStamp()) {\n+        throw new IOException(\"The new generation stamp \" + newGS +\n+            \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n+      }\n+      ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n+      LOG.info(\"Appending to \" + replicaInfo);\n+      if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n+        throw new ReplicaNotFoundException(\n+            ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n+      }\n+      if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n+        throw new IOException(\"Corrupted replica \" + replicaInfo +\n+            \" with a length of \" + replicaInfo.getNumBytes() +\n+            \" expected length is \" + expectedBlockLen);\n+      }\n+\n+      FsVolumeReference ref \u003d replicaInfo.getVolume().obtainReference();\n+      ReplicaBeingWritten replica \u003d null;\n+      try {\n+        replica \u003d append(b.getBlockPoolId(),\n+            (FinalizedReplica) replicaInfo, newGS,\n+            b.getNumBytes());\n+      } catch (IOException e) {\n+        IOUtils.cleanup(null, ref);\n+        throw e;\n+      }\n+      return new ReplicaHandler(replica, ref);\n     }\n-    return new ReplicaHandler(replica, ref);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ReplicaHandler append(ExtendedBlock b,\n      long newGS, long expectedBlockLen) throws IOException {\n    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n      // If the block was successfully finalized because all packets\n      // were successfully processed at the Datanode but the ack for\n      // some of the packets were not received by the client. The client\n      // re-opens the connection and retries sending those packets.\n      // The other reason is that an \"append\" is occurring to this block.\n\n      // check the validity of the parameter\n      if (newGS \u003c b.getGenerationStamp()) {\n        throw new IOException(\"The new generation stamp \" + newGS +\n            \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n      }\n      ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n      LOG.info(\"Appending to \" + replicaInfo);\n      if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n        throw new ReplicaNotFoundException(\n            ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n      }\n      if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n        throw new IOException(\"Corrupted replica \" + replicaInfo +\n            \" with a length of \" + replicaInfo.getNumBytes() +\n            \" expected length is \" + expectedBlockLen);\n      }\n\n      FsVolumeReference ref \u003d replicaInfo.getVolume().obtainReference();\n      ReplicaBeingWritten replica \u003d null;\n      try {\n        replica \u003d append(b.getBlockPoolId(),\n            (FinalizedReplica) replicaInfo, newGS,\n            b.getNumBytes());\n      } catch (IOException e) {\n        IOUtils.cleanup(null, ref);\n        throw e;\n      }\n      return new ReplicaHandler(replica, ref);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10682. Replace FsDatasetImpl object lock with a separate lock object. (Chen Liang)\n",
          "commitDate": "08/08/16 12:02 PM",
          "commitName": "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/07/16 7:40 PM",
          "commitNameOld": "da6f1b88dd47e22b24d44f6fc8bbee73e85746f7",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 30.68,
          "commitsBetweenForRepo": 320,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,39 @@\n-  public synchronized ReplicaHandler append(ExtendedBlock b,\n+  public ReplicaHandler append(ExtendedBlock b,\n       long newGS, long expectedBlockLen) throws IOException {\n-    // If the block was successfully finalized because all packets\n-    // were successfully processed at the Datanode but the ack for\n-    // some of the packets were not received by the client. The client \n-    // re-opens the connection and retries sending those packets.\n-    // The other reason is that an \"append\" is occurring to this block.\n-    \n-    // check the validity of the parameter\n-    if (newGS \u003c b.getGenerationStamp()) {\n-      throw new IOException(\"The new generation stamp \" + newGS + \n-          \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n-    }\n-    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n-    LOG.info(\"Appending to \" + replicaInfo);\n-    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n-      throw new ReplicaNotFoundException(\n-          ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n-    }\n-    if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n-      throw new IOException(\"Corrupted replica \" + replicaInfo + \n-          \" with a length of \" + replicaInfo.getNumBytes() + \n-          \" expected length is \" + expectedBlockLen);\n-    }\n+    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n+      // If the block was successfully finalized because all packets\n+      // were successfully processed at the Datanode but the ack for\n+      // some of the packets were not received by the client. The client\n+      // re-opens the connection and retries sending those packets.\n+      // The other reason is that an \"append\" is occurring to this block.\n \n-    FsVolumeReference ref \u003d replicaInfo.getVolume().obtainReference();\n-    ReplicaBeingWritten replica \u003d null;\n-    try {\n-      replica \u003d append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n-          b.getNumBytes());\n-    } catch (IOException e) {\n-      IOUtils.cleanup(null, ref);\n-      throw e;\n+      // check the validity of the parameter\n+      if (newGS \u003c b.getGenerationStamp()) {\n+        throw new IOException(\"The new generation stamp \" + newGS +\n+            \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n+      }\n+      ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n+      LOG.info(\"Appending to \" + replicaInfo);\n+      if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n+        throw new ReplicaNotFoundException(\n+            ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n+      }\n+      if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n+        throw new IOException(\"Corrupted replica \" + replicaInfo +\n+            \" with a length of \" + replicaInfo.getNumBytes() +\n+            \" expected length is \" + expectedBlockLen);\n+      }\n+\n+      FsVolumeReference ref \u003d replicaInfo.getVolume().obtainReference();\n+      ReplicaBeingWritten replica \u003d null;\n+      try {\n+        replica \u003d append(b.getBlockPoolId(),\n+            (FinalizedReplica) replicaInfo, newGS,\n+            b.getNumBytes());\n+      } catch (IOException e) {\n+        IOUtils.cleanup(null, ref);\n+        throw e;\n+      }\n+      return new ReplicaHandler(replica, ref);\n     }\n-    return new ReplicaHandler(replica, ref);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ReplicaHandler append(ExtendedBlock b,\n      long newGS, long expectedBlockLen) throws IOException {\n    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n      // If the block was successfully finalized because all packets\n      // were successfully processed at the Datanode but the ack for\n      // some of the packets were not received by the client. The client\n      // re-opens the connection and retries sending those packets.\n      // The other reason is that an \"append\" is occurring to this block.\n\n      // check the validity of the parameter\n      if (newGS \u003c b.getGenerationStamp()) {\n        throw new IOException(\"The new generation stamp \" + newGS +\n            \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n      }\n      ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n      LOG.info(\"Appending to \" + replicaInfo);\n      if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n        throw new ReplicaNotFoundException(\n            ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n      }\n      if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n        throw new IOException(\"Corrupted replica \" + replicaInfo +\n            \" with a length of \" + replicaInfo.getNumBytes() +\n            \" expected length is \" + expectedBlockLen);\n      }\n\n      FsVolumeReference ref \u003d replicaInfo.getVolume().obtainReference();\n      ReplicaBeingWritten replica \u003d null;\n      try {\n        replica \u003d append(b.getBlockPoolId(),\n            (FinalizedReplica) replicaInfo, newGS,\n            b.getNumBytes());\n      } catch (IOException e) {\n        IOUtils.cleanup(null, ref);\n        throw e;\n      }\n      return new ReplicaHandler(replica, ref);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "b7f4a3156c0f5c600816c469637237ba6c9b330c": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-7496. Fix FsVolume removal race conditions on the DataNode by reference-counting the volume instances (lei via cmccabe)\n",
      "commitDate": "20/01/15 7:05 PM",
      "commitName": "b7f4a3156c0f5c600816c469637237ba6c9b330c",
      "commitAuthor": "Colin Patrick Mccabe",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7496. Fix FsVolume removal race conditions on the DataNode by reference-counting the volume instances (lei via cmccabe)\n",
          "commitDate": "20/01/15 7:05 PM",
          "commitName": "b7f4a3156c0f5c600816c469637237ba6c9b330c",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "13/01/15 12:24 AM",
          "commitNameOld": "08ac06283a3e9bf0d49d873823aabd419b08e41f",
          "commitAuthorOld": "Konstantin V Shvachko",
          "daysBetweenCommits": 7.78,
          "commitsBetweenForRepo": 49,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,36 @@\n-  public synchronized ReplicaInPipeline append(ExtendedBlock b,\n+  public synchronized ReplicaHandler append(ExtendedBlock b,\n       long newGS, long expectedBlockLen) throws IOException {\n     // If the block was successfully finalized because all packets\n     // were successfully processed at the Datanode but the ack for\n     // some of the packets were not received by the client. The client \n     // re-opens the connection and retries sending those packets.\n     // The other reason is that an \"append\" is occurring to this block.\n     \n     // check the validity of the parameter\n     if (newGS \u003c b.getGenerationStamp()) {\n       throw new IOException(\"The new generation stamp \" + newGS + \n           \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n     }\n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n     LOG.info(\"Appending to \" + replicaInfo);\n     if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n     }\n     if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n       throw new IOException(\"Corrupted replica \" + replicaInfo + \n           \" with a length of \" + replicaInfo.getNumBytes() + \n           \" expected length is \" + expectedBlockLen);\n     }\n \n-    return append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n-        b.getNumBytes());\n+    FsVolumeReference ref \u003d replicaInfo.getVolume().obtainReference();\n+    ReplicaBeingWritten replica \u003d null;\n+    try {\n+      replica \u003d append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n+          b.getNumBytes());\n+    } catch (IOException e) {\n+      IOUtils.cleanup(null, ref);\n+      throw e;\n+    }\n+    return new ReplicaHandler(replica, ref);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized ReplicaHandler append(ExtendedBlock b,\n      long newGS, long expectedBlockLen) throws IOException {\n    // If the block was successfully finalized because all packets\n    // were successfully processed at the Datanode but the ack for\n    // some of the packets were not received by the client. The client \n    // re-opens the connection and retries sending those packets.\n    // The other reason is that an \"append\" is occurring to this block.\n    \n    // check the validity of the parameter\n    if (newGS \u003c b.getGenerationStamp()) {\n      throw new IOException(\"The new generation stamp \" + newGS + \n          \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n    }\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n    LOG.info(\"Appending to \" + replicaInfo);\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n    }\n    if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaInfo.getNumBytes() + \n          \" expected length is \" + expectedBlockLen);\n    }\n\n    FsVolumeReference ref \u003d replicaInfo.getVolume().obtainReference();\n    ReplicaBeingWritten replica \u003d null;\n    try {\n      replica \u003d append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n          b.getNumBytes());\n    } catch (IOException e) {\n      IOUtils.cleanup(null, ref);\n      throw e;\n    }\n    return new ReplicaHandler(replica, ref);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {
            "oldValue": "ReplicaInPipeline",
            "newValue": "ReplicaHandler"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7496. Fix FsVolume removal race conditions on the DataNode by reference-counting the volume instances (lei via cmccabe)\n",
          "commitDate": "20/01/15 7:05 PM",
          "commitName": "b7f4a3156c0f5c600816c469637237ba6c9b330c",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "13/01/15 12:24 AM",
          "commitNameOld": "08ac06283a3e9bf0d49d873823aabd419b08e41f",
          "commitAuthorOld": "Konstantin V Shvachko",
          "daysBetweenCommits": 7.78,
          "commitsBetweenForRepo": 49,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,36 @@\n-  public synchronized ReplicaInPipeline append(ExtendedBlock b,\n+  public synchronized ReplicaHandler append(ExtendedBlock b,\n       long newGS, long expectedBlockLen) throws IOException {\n     // If the block was successfully finalized because all packets\n     // were successfully processed at the Datanode but the ack for\n     // some of the packets were not received by the client. The client \n     // re-opens the connection and retries sending those packets.\n     // The other reason is that an \"append\" is occurring to this block.\n     \n     // check the validity of the parameter\n     if (newGS \u003c b.getGenerationStamp()) {\n       throw new IOException(\"The new generation stamp \" + newGS + \n           \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n     }\n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n     LOG.info(\"Appending to \" + replicaInfo);\n     if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n     }\n     if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n       throw new IOException(\"Corrupted replica \" + replicaInfo + \n           \" with a length of \" + replicaInfo.getNumBytes() + \n           \" expected length is \" + expectedBlockLen);\n     }\n \n-    return append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n-        b.getNumBytes());\n+    FsVolumeReference ref \u003d replicaInfo.getVolume().obtainReference();\n+    ReplicaBeingWritten replica \u003d null;\n+    try {\n+      replica \u003d append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n+          b.getNumBytes());\n+    } catch (IOException e) {\n+      IOUtils.cleanup(null, ref);\n+      throw e;\n+    }\n+    return new ReplicaHandler(replica, ref);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized ReplicaHandler append(ExtendedBlock b,\n      long newGS, long expectedBlockLen) throws IOException {\n    // If the block was successfully finalized because all packets\n    // were successfully processed at the Datanode but the ack for\n    // some of the packets were not received by the client. The client \n    // re-opens the connection and retries sending those packets.\n    // The other reason is that an \"append\" is occurring to this block.\n    \n    // check the validity of the parameter\n    if (newGS \u003c b.getGenerationStamp()) {\n      throw new IOException(\"The new generation stamp \" + newGS + \n          \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n    }\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n    LOG.info(\"Appending to \" + replicaInfo);\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n    }\n    if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaInfo.getNumBytes() + \n          \" expected length is \" + expectedBlockLen);\n    }\n\n    FsVolumeReference ref \u003d replicaInfo.getVolume().obtainReference();\n    ReplicaBeingWritten replica \u003d null;\n    try {\n      replica \u003d append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n          b.getNumBytes());\n    } catch (IOException e) {\n      IOUtils.cleanup(null, ref);\n      throw e;\n    }\n    return new ReplicaHandler(replica, ref);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4122. Cleanup HDFS logs and reduce the size of logged messages. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1403120 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/12 4:10 PM",
      "commitName": "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "13/09/12 4:48 PM",
      "commitNameOld": "86635168feaaf9a8f20d01b5fd6c1b6fbe98c1ea",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 44.97,
      "commitsBetweenForRepo": 247,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public synchronized ReplicaInPipeline append(ExtendedBlock b,\n       long newGS, long expectedBlockLen) throws IOException {\n     // If the block was successfully finalized because all packets\n     // were successfully processed at the Datanode but the ack for\n     // some of the packets were not received by the client. The client \n     // re-opens the connection and retries sending those packets.\n     // The other reason is that an \"append\" is occurring to this block.\n     \n     // check the validity of the parameter\n     if (newGS \u003c b.getGenerationStamp()) {\n       throw new IOException(\"The new generation stamp \" + newGS + \n           \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n     }\n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n-    LOG.info(\"Appending to replica \" + replicaInfo);\n+    LOG.info(\"Appending to \" + replicaInfo);\n     if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n     }\n     if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n       throw new IOException(\"Corrupted replica \" + replicaInfo + \n           \" with a length of \" + replicaInfo.getNumBytes() + \n           \" expected length is \" + expectedBlockLen);\n     }\n \n     return append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n         b.getNumBytes());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ReplicaInPipeline append(ExtendedBlock b,\n      long newGS, long expectedBlockLen) throws IOException {\n    // If the block was successfully finalized because all packets\n    // were successfully processed at the Datanode but the ack for\n    // some of the packets were not received by the client. The client \n    // re-opens the connection and retries sending those packets.\n    // The other reason is that an \"append\" is occurring to this block.\n    \n    // check the validity of the parameter\n    if (newGS \u003c b.getGenerationStamp()) {\n      throw new IOException(\"The new generation stamp \" + newGS + \n          \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n    }\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n    LOG.info(\"Appending to \" + replicaInfo);\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n    }\n    if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaInfo.getNumBytes() + \n          \" expected length is \" + expectedBlockLen);\n    }\n\n    return append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n        b.getNumBytes());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "bc13dfb1426944ce45293cb8f444239a7406762c": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/12 10:38 AM",
      "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 10:38 AM",
          "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "01/04/12 8:48 PM",
          "commitNameOld": "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  public synchronized ReplicaInPipelineInterface append(ExtendedBlock b,\n+  public synchronized ReplicaInPipeline append(ExtendedBlock b,\n       long newGS, long expectedBlockLen) throws IOException {\n     // If the block was successfully finalized because all packets\n     // were successfully processed at the Datanode but the ack for\n     // some of the packets were not received by the client. The client \n     // re-opens the connection and retries sending those packets.\n     // The other reason is that an \"append\" is occurring to this block.\n     \n     // check the validity of the parameter\n     if (newGS \u003c b.getGenerationStamp()) {\n       throw new IOException(\"The new generation stamp \" + newGS + \n           \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n     }\n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n-    DataNode.LOG.info(\"Appending to replica \" + replicaInfo);\n+    LOG.info(\"Appending to replica \" + replicaInfo);\n     if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n     }\n     if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n       throw new IOException(\"Corrupted replica \" + replicaInfo + \n           \" with a length of \" + replicaInfo.getNumBytes() + \n           \" expected length is \" + expectedBlockLen);\n     }\n \n     return append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n         b.getNumBytes());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized ReplicaInPipeline append(ExtendedBlock b,\n      long newGS, long expectedBlockLen) throws IOException {\n    // If the block was successfully finalized because all packets\n    // were successfully processed at the Datanode but the ack for\n    // some of the packets were not received by the client. The client \n    // re-opens the connection and retries sending those packets.\n    // The other reason is that an \"append\" is occurring to this block.\n    \n    // check the validity of the parameter\n    if (newGS \u003c b.getGenerationStamp()) {\n      throw new IOException(\"The new generation stamp \" + newGS + \n          \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n    }\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n    LOG.info(\"Appending to replica \" + replicaInfo);\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n    }\n    if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaInfo.getNumBytes() + \n          \" expected length is \" + expectedBlockLen);\n    }\n\n    return append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n        b.getNumBytes());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
            "oldMethodName": "append",
            "newMethodName": "append"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 10:38 AM",
          "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "01/04/12 8:48 PM",
          "commitNameOld": "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  public synchronized ReplicaInPipelineInterface append(ExtendedBlock b,\n+  public synchronized ReplicaInPipeline append(ExtendedBlock b,\n       long newGS, long expectedBlockLen) throws IOException {\n     // If the block was successfully finalized because all packets\n     // were successfully processed at the Datanode but the ack for\n     // some of the packets were not received by the client. The client \n     // re-opens the connection and retries sending those packets.\n     // The other reason is that an \"append\" is occurring to this block.\n     \n     // check the validity of the parameter\n     if (newGS \u003c b.getGenerationStamp()) {\n       throw new IOException(\"The new generation stamp \" + newGS + \n           \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n     }\n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n-    DataNode.LOG.info(\"Appending to replica \" + replicaInfo);\n+    LOG.info(\"Appending to replica \" + replicaInfo);\n     if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n     }\n     if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n       throw new IOException(\"Corrupted replica \" + replicaInfo + \n           \" with a length of \" + replicaInfo.getNumBytes() + \n           \" expected length is \" + expectedBlockLen);\n     }\n \n     return append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n         b.getNumBytes());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized ReplicaInPipeline append(ExtendedBlock b,\n      long newGS, long expectedBlockLen) throws IOException {\n    // If the block was successfully finalized because all packets\n    // were successfully processed at the Datanode but the ack for\n    // some of the packets were not received by the client. The client \n    // re-opens the connection and retries sending those packets.\n    // The other reason is that an \"append\" is occurring to this block.\n    \n    // check the validity of the parameter\n    if (newGS \u003c b.getGenerationStamp()) {\n      throw new IOException(\"The new generation stamp \" + newGS + \n          \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n    }\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n    LOG.info(\"Appending to replica \" + replicaInfo);\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n    }\n    if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaInfo.getNumBytes() + \n          \" expected length is \" + expectedBlockLen);\n    }\n\n    return append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n        b.getNumBytes());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {
            "oldValue": "ReplicaInPipelineInterface",
            "newValue": "ReplicaInPipeline"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 10:38 AM",
          "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "01/04/12 8:48 PM",
          "commitNameOld": "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  public synchronized ReplicaInPipelineInterface append(ExtendedBlock b,\n+  public synchronized ReplicaInPipeline append(ExtendedBlock b,\n       long newGS, long expectedBlockLen) throws IOException {\n     // If the block was successfully finalized because all packets\n     // were successfully processed at the Datanode but the ack for\n     // some of the packets were not received by the client. The client \n     // re-opens the connection and retries sending those packets.\n     // The other reason is that an \"append\" is occurring to this block.\n     \n     // check the validity of the parameter\n     if (newGS \u003c b.getGenerationStamp()) {\n       throw new IOException(\"The new generation stamp \" + newGS + \n           \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n     }\n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n-    DataNode.LOG.info(\"Appending to replica \" + replicaInfo);\n+    LOG.info(\"Appending to replica \" + replicaInfo);\n     if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n     }\n     if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n       throw new IOException(\"Corrupted replica \" + replicaInfo + \n           \" with a length of \" + replicaInfo.getNumBytes() + \n           \" expected length is \" + expectedBlockLen);\n     }\n \n     return append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n         b.getNumBytes());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized ReplicaInPipeline append(ExtendedBlock b,\n      long newGS, long expectedBlockLen) throws IOException {\n    // If the block was successfully finalized because all packets\n    // were successfully processed at the Datanode but the ack for\n    // some of the packets were not received by the client. The client \n    // re-opens the connection and retries sending those packets.\n    // The other reason is that an \"append\" is occurring to this block.\n    \n    // check the validity of the parameter\n    if (newGS \u003c b.getGenerationStamp()) {\n      throw new IOException(\"The new generation stamp \" + newGS + \n          \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n    }\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n    LOG.info(\"Appending to replica \" + replicaInfo);\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n    }\n    if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaInfo.getNumBytes() + \n          \" expected length is \" + expectedBlockLen);\n    }\n\n    return append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n        b.getNumBytes());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized ReplicaInPipelineInterface append(ExtendedBlock b,\n      long newGS, long expectedBlockLen) throws IOException {\n    // If the block was successfully finalized because all packets\n    // were successfully processed at the Datanode but the ack for\n    // some of the packets were not received by the client. The client \n    // re-opens the connection and retries sending those packets.\n    // The other reason is that an \"append\" is occurring to this block.\n    \n    // check the validity of the parameter\n    if (newGS \u003c b.getGenerationStamp()) {\n      throw new IOException(\"The new generation stamp \" + newGS + \n          \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n    }\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n    DataNode.LOG.info(\"Appending to replica \" + replicaInfo);\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n    }\n    if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaInfo.getNumBytes() + \n          \" expected length is \" + expectedBlockLen);\n    }\n\n    return append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n        b.getNumBytes());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized ReplicaInPipelineInterface append(ExtendedBlock b,\n      long newGS, long expectedBlockLen) throws IOException {\n    // If the block was successfully finalized because all packets\n    // were successfully processed at the Datanode but the ack for\n    // some of the packets were not received by the client. The client \n    // re-opens the connection and retries sending those packets.\n    // The other reason is that an \"append\" is occurring to this block.\n    \n    // check the validity of the parameter\n    if (newGS \u003c b.getGenerationStamp()) {\n      throw new IOException(\"The new generation stamp \" + newGS + \n          \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n    }\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n    DataNode.LOG.info(\"Appending to replica \" + replicaInfo);\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n    }\n    if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaInfo.getNumBytes() + \n          \" expected length is \" + expectedBlockLen);\n    }\n\n    return append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n        b.getNumBytes());\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,28 @@\n+  public synchronized ReplicaInPipelineInterface append(ExtendedBlock b,\n+      long newGS, long expectedBlockLen) throws IOException {\n+    // If the block was successfully finalized because all packets\n+    // were successfully processed at the Datanode but the ack for\n+    // some of the packets were not received by the client. The client \n+    // re-opens the connection and retries sending those packets.\n+    // The other reason is that an \"append\" is occurring to this block.\n+    \n+    // check the validity of the parameter\n+    if (newGS \u003c b.getGenerationStamp()) {\n+      throw new IOException(\"The new generation stamp \" + newGS + \n+          \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n+    }\n+    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n+    DataNode.LOG.info(\"Appending to replica \" + replicaInfo);\n+    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n+      throw new ReplicaNotFoundException(\n+          ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n+    }\n+    if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n+      throw new IOException(\"Corrupted replica \" + replicaInfo + \n+          \" with a length of \" + replicaInfo.getNumBytes() + \n+          \" expected length is \" + expectedBlockLen);\n+    }\n+\n+    return append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n+        b.getNumBytes());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ReplicaInPipelineInterface append(ExtendedBlock b,\n      long newGS, long expectedBlockLen) throws IOException {\n    // If the block was successfully finalized because all packets\n    // were successfully processed at the Datanode but the ack for\n    // some of the packets were not received by the client. The client \n    // re-opens the connection and retries sending those packets.\n    // The other reason is that an \"append\" is occurring to this block.\n    \n    // check the validity of the parameter\n    if (newGS \u003c b.getGenerationStamp()) {\n      throw new IOException(\"The new generation stamp \" + newGS + \n          \" should be greater than the replica \" + b + \"\u0027s generation stamp\");\n    }\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n    DataNode.LOG.info(\"Appending to replica \" + replicaInfo);\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_REPLICA + b);\n    }\n    if (replicaInfo.getNumBytes() !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaInfo.getNumBytes() + \n          \" expected length is \" + expectedBlockLen);\n    }\n\n    return append(b.getBlockPoolId(), (FinalizedReplica)replicaInfo, newGS,\n        b.getNumBytes());\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
    }
  }
}