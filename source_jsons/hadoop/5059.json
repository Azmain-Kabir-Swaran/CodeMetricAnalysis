{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DirectoryWithSnapshotFeature.java",
  "functionName": "removeChild",
  "functionId": "removeChild___parent-INodeDirectory__child-INode__latestSnapshotId-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
  "functionStartLine": 545,
  "functionEndLine": 570,
  "numCommitsSeen": 39,
  "timeTaken": 2845,
  "changeHistory": [
    "ba0da2785d251745969f88a50d33ce61876d91aa",
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823"
  ],
  "changeHistoryShort": {
    "ba0da2785d251745969f88a50d33ce61876d91aa": "Ybodychange",
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e": "Yexceptionschange",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": "Ymultichange(Yparameterchange,Ybodychange)",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ba0da2785d251745969f88a50d33ce61876d91aa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13252. Code refactoring: Remove Diff.ListType.\n",
      "commitDate": "09/03/18 3:50 PM",
      "commitName": "ba0da2785d251745969f88a50d33ce61876d91aa",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "06/03/18 1:35 PM",
      "commitNameOld": "346caa209571dedf1331b2658d5702b45dd40bfe",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 3.09,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   public boolean removeChild(INodeDirectory parent, INode child,\n       int latestSnapshotId) {\n     // For a directory that is not a renamed node, if isInLatestSnapshot returns\n     // false, the directory is not in the latest snapshot, thus we do not need\n     // to record the removed child in any snapshot.\n     // For a directory that was moved/renamed, note that if the directory is in\n     // any of the previous snapshots, we will create a reference node for the\n     // directory while rename, and isInLatestSnapshot will return true in that\n     // scenario (if all previous snapshots have been deleted, isInLatestSnapshot\n     // still returns false). Thus if isInLatestSnapshot returns false, the\n     // directory node cannot be in any snapshot (not in current tree, nor in\n     // previous src tree). Thus we do not need to record the removed child in\n     // any snapshot.\n     ChildrenDiff diff \u003d diffs.checkAndAddLatestSnapshotDiff(latestSnapshotId,\n         parent).diff;\n-    UndoInfo\u003cINode\u003e undoInfo \u003d diff.delete(child);\n-\n-    final boolean removed \u003d parent.removeChild(child);\n-    if (!removed \u0026\u0026 undoInfo !\u003d null) {\n-      // remove failed, undo\n-      diff.undoDelete(child, undoInfo);\n+    final UndoInfo\u003cINode\u003e undoInfo \u003d diff.delete(child);\n+    boolean removed \u003d false;\n+    try {\n+      removed \u003d parent.removeChild(child);\n+    } finally {\n+      if (!removed) {\n+        diff.undoDelete(child, undoInfo);\n+      }\n     }\n     return removed;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean removeChild(INodeDirectory parent, INode child,\n      int latestSnapshotId) {\n    // For a directory that is not a renamed node, if isInLatestSnapshot returns\n    // false, the directory is not in the latest snapshot, thus we do not need\n    // to record the removed child in any snapshot.\n    // For a directory that was moved/renamed, note that if the directory is in\n    // any of the previous snapshots, we will create a reference node for the\n    // directory while rename, and isInLatestSnapshot will return true in that\n    // scenario (if all previous snapshots have been deleted, isInLatestSnapshot\n    // still returns false). Thus if isInLatestSnapshot returns false, the\n    // directory node cannot be in any snapshot (not in current tree, nor in\n    // previous src tree). Thus we do not need to record the removed child in\n    // any snapshot.\n    ChildrenDiff diff \u003d diffs.checkAndAddLatestSnapshotDiff(latestSnapshotId,\n        parent).diff;\n    final UndoInfo\u003cINode\u003e undoInfo \u003d diff.delete(child);\n    boolean removed \u003d false;\n    try {\n      removed \u003d parent.removeChild(child);\n    } finally {\n      if (!removed) {\n        diff.undoDelete(child, undoInfo);\n      }\n    }\n    return removed;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
      "extendedDetails": {}
    },
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e": {
      "type": "Yexceptionschange",
      "commitMessage": "HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.\n",
      "commitDate": "02/02/15 4:32 PM",
      "commitName": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "22/12/14 11:05 PM",
      "commitNameOld": "50ae1a6664a92619aa683d2a864d0da9fb4af026",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 41.73,
      "commitsBetweenForRepo": 229,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public boolean removeChild(INodeDirectory parent, INode child,\n-      int latestSnapshotId) throws QuotaExceededException {\n+      int latestSnapshotId) {\n     // For a directory that is not a renamed node, if isInLatestSnapshot returns\n     // false, the directory is not in the latest snapshot, thus we do not need\n     // to record the removed child in any snapshot.\n     // For a directory that was moved/renamed, note that if the directory is in\n     // any of the previous snapshots, we will create a reference node for the\n     // directory while rename, and isInLatestSnapshot will return true in that\n     // scenario (if all previous snapshots have been deleted, isInLatestSnapshot\n     // still returns false). Thus if isInLatestSnapshot returns false, the\n     // directory node cannot be in any snapshot (not in current tree, nor in\n     // previous src tree). Thus we do not need to record the removed child in\n     // any snapshot.\n     ChildrenDiff diff \u003d diffs.checkAndAddLatestSnapshotDiff(latestSnapshotId,\n         parent).diff;\n     UndoInfo\u003cINode\u003e undoInfo \u003d diff.delete(child);\n \n     final boolean removed \u003d parent.removeChild(child);\n     if (!removed \u0026\u0026 undoInfo !\u003d null) {\n       // remove failed, undo\n       diff.undoDelete(child, undoInfo);\n     }\n     return removed;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean removeChild(INodeDirectory parent, INode child,\n      int latestSnapshotId) {\n    // For a directory that is not a renamed node, if isInLatestSnapshot returns\n    // false, the directory is not in the latest snapshot, thus we do not need\n    // to record the removed child in any snapshot.\n    // For a directory that was moved/renamed, note that if the directory is in\n    // any of the previous snapshots, we will create a reference node for the\n    // directory while rename, and isInLatestSnapshot will return true in that\n    // scenario (if all previous snapshots have been deleted, isInLatestSnapshot\n    // still returns false). Thus if isInLatestSnapshot returns false, the\n    // directory node cannot be in any snapshot (not in current tree, nor in\n    // previous src tree). Thus we do not need to record the removed child in\n    // any snapshot.\n    ChildrenDiff diff \u003d diffs.checkAndAddLatestSnapshotDiff(latestSnapshotId,\n        parent).diff;\n    UndoInfo\u003cINode\u003e undoInfo \u003d diff.delete(child);\n\n    final boolean removed \u003d parent.removeChild(child);\n    if (!removed \u0026\u0026 undoInfo !\u003d null) {\n      // remove failed, undo\n      diff.undoDelete(child, undoInfo);\n    }\n    return removed;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
      "extendedDetails": {
        "oldValue": "[QuotaExceededException]",
        "newValue": "[]"
      }
    },
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 12:52 PM",
      "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/01/14 12:52 PM",
          "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "14/12/13 2:13 AM",
          "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 24.44,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n   public boolean removeChild(INodeDirectory parent, INode child,\n-      Snapshot latest) throws QuotaExceededException {\n+      int latestSnapshotId) throws QuotaExceededException {\n     // For a directory that is not a renamed node, if isInLatestSnapshot returns\n     // false, the directory is not in the latest snapshot, thus we do not need\n     // to record the removed child in any snapshot.\n     // For a directory that was moved/renamed, note that if the directory is in\n     // any of the previous snapshots, we will create a reference node for the\n     // directory while rename, and isInLatestSnapshot will return true in that\n     // scenario (if all previous snapshots have been deleted, isInLatestSnapshot\n     // still returns false). Thus if isInLatestSnapshot returns false, the\n     // directory node cannot be in any snapshot (not in current tree, nor in\n     // previous src tree). Thus we do not need to record the removed child in\n     // any snapshot.\n-    ChildrenDiff diff \u003d diffs.checkAndAddLatestSnapshotDiff(latest, parent).diff;\n+    ChildrenDiff diff \u003d diffs.checkAndAddLatestSnapshotDiff(latestSnapshotId,\n+        parent).diff;\n     UndoInfo\u003cINode\u003e undoInfo \u003d diff.delete(child);\n \n     final boolean removed \u003d parent.removeChild(child);\n     if (!removed \u0026\u0026 undoInfo !\u003d null) {\n       // remove failed, undo\n       diff.undoDelete(child, undoInfo);\n     }\n     return removed;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean removeChild(INodeDirectory parent, INode child,\n      int latestSnapshotId) throws QuotaExceededException {\n    // For a directory that is not a renamed node, if isInLatestSnapshot returns\n    // false, the directory is not in the latest snapshot, thus we do not need\n    // to record the removed child in any snapshot.\n    // For a directory that was moved/renamed, note that if the directory is in\n    // any of the previous snapshots, we will create a reference node for the\n    // directory while rename, and isInLatestSnapshot will return true in that\n    // scenario (if all previous snapshots have been deleted, isInLatestSnapshot\n    // still returns false). Thus if isInLatestSnapshot returns false, the\n    // directory node cannot be in any snapshot (not in current tree, nor in\n    // previous src tree). Thus we do not need to record the removed child in\n    // any snapshot.\n    ChildrenDiff diff \u003d diffs.checkAndAddLatestSnapshotDiff(latestSnapshotId,\n        parent).diff;\n    UndoInfo\u003cINode\u003e undoInfo \u003d diff.delete(child);\n\n    final boolean removed \u003d parent.removeChild(child);\n    if (!removed \u0026\u0026 undoInfo !\u003d null) {\n      // remove failed, undo\n      diff.undoDelete(child, undoInfo);\n    }\n    return removed;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "[parent-INodeDirectory, child-INode, latest-Snapshot]",
            "newValue": "[parent-INodeDirectory, child-INode, latestSnapshotId-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/01/14 12:52 PM",
          "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "14/12/13 2:13 AM",
          "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 24.44,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n   public boolean removeChild(INodeDirectory parent, INode child,\n-      Snapshot latest) throws QuotaExceededException {\n+      int latestSnapshotId) throws QuotaExceededException {\n     // For a directory that is not a renamed node, if isInLatestSnapshot returns\n     // false, the directory is not in the latest snapshot, thus we do not need\n     // to record the removed child in any snapshot.\n     // For a directory that was moved/renamed, note that if the directory is in\n     // any of the previous snapshots, we will create a reference node for the\n     // directory while rename, and isInLatestSnapshot will return true in that\n     // scenario (if all previous snapshots have been deleted, isInLatestSnapshot\n     // still returns false). Thus if isInLatestSnapshot returns false, the\n     // directory node cannot be in any snapshot (not in current tree, nor in\n     // previous src tree). Thus we do not need to record the removed child in\n     // any snapshot.\n-    ChildrenDiff diff \u003d diffs.checkAndAddLatestSnapshotDiff(latest, parent).diff;\n+    ChildrenDiff diff \u003d diffs.checkAndAddLatestSnapshotDiff(latestSnapshotId,\n+        parent).diff;\n     UndoInfo\u003cINode\u003e undoInfo \u003d diff.delete(child);\n \n     final boolean removed \u003d parent.removeChild(child);\n     if (!removed \u0026\u0026 undoInfo !\u003d null) {\n       // remove failed, undo\n       diff.undoDelete(child, undoInfo);\n     }\n     return removed;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean removeChild(INodeDirectory parent, INode child,\n      int latestSnapshotId) throws QuotaExceededException {\n    // For a directory that is not a renamed node, if isInLatestSnapshot returns\n    // false, the directory is not in the latest snapshot, thus we do not need\n    // to record the removed child in any snapshot.\n    // For a directory that was moved/renamed, note that if the directory is in\n    // any of the previous snapshots, we will create a reference node for the\n    // directory while rename, and isInLatestSnapshot will return true in that\n    // scenario (if all previous snapshots have been deleted, isInLatestSnapshot\n    // still returns false). Thus if isInLatestSnapshot returns false, the\n    // directory node cannot be in any snapshot (not in current tree, nor in\n    // previous src tree). Thus we do not need to record the removed child in\n    // any snapshot.\n    ChildrenDiff diff \u003d diffs.checkAndAddLatestSnapshotDiff(latestSnapshotId,\n        parent).diff;\n    UndoInfo\u003cINode\u003e undoInfo \u003d diff.delete(child);\n\n    final boolean removed \u003d parent.removeChild(child);\n    if (!removed \u0026\u0026 undoInfo !\u003d null) {\n      // remove failed, undo\n      diff.undoDelete(child, undoInfo);\n    }\n    return removed;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/13 2:13 AM",
      "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,23 @@\n+  public boolean removeChild(INodeDirectory parent, INode child,\n+      Snapshot latest) throws QuotaExceededException {\n+    // For a directory that is not a renamed node, if isInLatestSnapshot returns\n+    // false, the directory is not in the latest snapshot, thus we do not need\n+    // to record the removed child in any snapshot.\n+    // For a directory that was moved/renamed, note that if the directory is in\n+    // any of the previous snapshots, we will create a reference node for the\n+    // directory while rename, and isInLatestSnapshot will return true in that\n+    // scenario (if all previous snapshots have been deleted, isInLatestSnapshot\n+    // still returns false). Thus if isInLatestSnapshot returns false, the\n+    // directory node cannot be in any snapshot (not in current tree, nor in\n+    // previous src tree). Thus we do not need to record the removed child in\n+    // any snapshot.\n+    ChildrenDiff diff \u003d diffs.checkAndAddLatestSnapshotDiff(latest, parent).diff;\n+    UndoInfo\u003cINode\u003e undoInfo \u003d diff.delete(child);\n+\n+    final boolean removed \u003d parent.removeChild(child);\n+    if (!removed \u0026\u0026 undoInfo !\u003d null) {\n+      // remove failed, undo\n+      diff.undoDelete(child, undoInfo);\n+    }\n+    return removed;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean removeChild(INodeDirectory parent, INode child,\n      Snapshot latest) throws QuotaExceededException {\n    // For a directory that is not a renamed node, if isInLatestSnapshot returns\n    // false, the directory is not in the latest snapshot, thus we do not need\n    // to record the removed child in any snapshot.\n    // For a directory that was moved/renamed, note that if the directory is in\n    // any of the previous snapshots, we will create a reference node for the\n    // directory while rename, and isInLatestSnapshot will return true in that\n    // scenario (if all previous snapshots have been deleted, isInLatestSnapshot\n    // still returns false). Thus if isInLatestSnapshot returns false, the\n    // directory node cannot be in any snapshot (not in current tree, nor in\n    // previous src tree). Thus we do not need to record the removed child in\n    // any snapshot.\n    ChildrenDiff diff \u003d diffs.checkAndAddLatestSnapshotDiff(latest, parent).diff;\n    UndoInfo\u003cINode\u003e undoInfo \u003d diff.delete(child);\n\n    final boolean removed \u003d parent.removeChild(child);\n    if (!removed \u0026\u0026 undoInfo !\u003d null) {\n      // remove failed, undo\n      diff.undoDelete(child, undoInfo);\n    }\n    return removed;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java"
    }
  }
}