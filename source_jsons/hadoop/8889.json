{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AclStorage.java",
  "functionName": "readINodeLogicalAcl",
  "functionId": "readINodeLogicalAcl___inode-INode",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java",
  "functionStartLine": 209,
  "functionEndLine": 257,
  "numCommitsSeen": 17,
  "timeTaken": 2383,
  "changeHistory": [
    "0653918dad855b394e8e3b8b3f512f474d872ee9",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
    "fc14360b0340a33c0e1eb34967d4dcd772533418",
    "14f1f76bf609704d36a1699c05fa85750cefe917",
    "5300294fbe9e235ce42253d6bcd69d8154d8f198"
  ],
  "changeHistoryShort": {
    "0653918dad855b394e8e3b8b3f512f474d872ee9": "Ybodychange",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": "Ybodychange",
    "fc14360b0340a33c0e1eb34967d4dcd772533418": "Ybodychange",
    "14f1f76bf609704d36a1699c05fa85750cefe917": "Ymultichange(Yparameterchange,Ybodychange)",
    "5300294fbe9e235ce42253d6bcd69d8154d8f198": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0653918dad855b394e8e3b8b3f512f474d872ee9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7454. Reduce memory footprint for AclEntries in NameNode. Contributed by Vinayakumar B.\n",
      "commitDate": "04/12/14 8:49 PM",
      "commitName": "0653918dad855b394e8e3b8b3f512f474d872ee9",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/05/14 3:56 PM",
      "commitNameOld": "39f3d135d0dd5ab64d6fa3b7ee71396d12a801c6",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 189.24,
      "commitsBetweenForRepo": 1663,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public static List\u003cAclEntry\u003e readINodeLogicalAcl(INode inode) {\n     FsPermission perm \u003d inode.getFsPermission();\n     AclFeature f \u003d inode.getAclFeature();\n     if (f \u003d\u003d null) {\n       return AclUtil.getMinimalAcl(perm);\n     }\n \n     final List\u003cAclEntry\u003e existingAcl;\n     // Split ACL entries stored in the feature into access vs. default.\n-    List\u003cAclEntry\u003e featureEntries \u003d f.getEntries();\n+    List\u003cAclEntry\u003e featureEntries \u003d getEntriesFromAclFeature(f);\n     ScopedAclEntries scoped \u003d new ScopedAclEntries(featureEntries);\n     List\u003cAclEntry\u003e accessEntries \u003d scoped.getAccessEntries();\n     List\u003cAclEntry\u003e defaultEntries \u003d scoped.getDefaultEntries();\n \n     // Pre-allocate list size for the explicit entries stored in the feature\n     // plus the 3 implicit entries (owner, group and other) from the permission\n     // bits.\n     existingAcl \u003d Lists.newArrayListWithCapacity(featureEntries.size() + 3);\n \n     if (!accessEntries.isEmpty()) {\n       // Add owner entry implied from user permission bits.\n       existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n           .setType(AclEntryType.USER).setPermission(perm.getUserAction())\n           .build());\n \n       // Next add all named user and group entries taken from the feature.\n       existingAcl.addAll(accessEntries);\n \n       // Add mask entry implied from group permission bits.\n       existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n           .setType(AclEntryType.MASK).setPermission(perm.getGroupAction())\n           .build());\n \n       // Add other entry implied from other permission bits.\n       existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n           .setType(AclEntryType.OTHER).setPermission(perm.getOtherAction())\n           .build());\n     } else {\n       // It\u0027s possible that there is a default ACL but no access ACL. In this\n       // case, add the minimal access ACL implied by the permission bits.\n       existingAcl.addAll(AclUtil.getMinimalAcl(perm));\n     }\n \n     // Add all default entries after the access entries.\n     existingAcl.addAll(defaultEntries);\n \n     // The above adds entries in the correct order, so no need to sort here.\n     return existingAcl;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cAclEntry\u003e readINodeLogicalAcl(INode inode) {\n    FsPermission perm \u003d inode.getFsPermission();\n    AclFeature f \u003d inode.getAclFeature();\n    if (f \u003d\u003d null) {\n      return AclUtil.getMinimalAcl(perm);\n    }\n\n    final List\u003cAclEntry\u003e existingAcl;\n    // Split ACL entries stored in the feature into access vs. default.\n    List\u003cAclEntry\u003e featureEntries \u003d getEntriesFromAclFeature(f);\n    ScopedAclEntries scoped \u003d new ScopedAclEntries(featureEntries);\n    List\u003cAclEntry\u003e accessEntries \u003d scoped.getAccessEntries();\n    List\u003cAclEntry\u003e defaultEntries \u003d scoped.getDefaultEntries();\n\n    // Pre-allocate list size for the explicit entries stored in the feature\n    // plus the 3 implicit entries (owner, group and other) from the permission\n    // bits.\n    existingAcl \u003d Lists.newArrayListWithCapacity(featureEntries.size() + 3);\n\n    if (!accessEntries.isEmpty()) {\n      // Add owner entry implied from user permission bits.\n      existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.USER).setPermission(perm.getUserAction())\n          .build());\n\n      // Next add all named user and group entries taken from the feature.\n      existingAcl.addAll(accessEntries);\n\n      // Add mask entry implied from group permission bits.\n      existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.MASK).setPermission(perm.getGroupAction())\n          .build());\n\n      // Add other entry implied from other permission bits.\n      existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.OTHER).setPermission(perm.getOtherAction())\n          .build());\n    } else {\n      // It\u0027s possible that there is a default ACL but no access ACL. In this\n      // case, add the minimal access ACL implied by the permission bits.\n      existingAcl.addAll(AclUtil.getMinimalAcl(perm));\n    }\n\n    // Add all default entries after the access entries.\n    existingAcl.addAll(defaultEntries);\n\n    // The above adds entries in the correct order, so no need to sort here.\n    return existingAcl;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java",
      "extendedDetails": {}
    },
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5809. Enhance distcp to support preserving HDFS ACLs. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/14 11:25 AM",
      "commitName": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "26/02/14 8:22 AM",
      "commitNameOld": "7be2c002b350594e9bfbd256c8abc2cad42d49ea",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 79.09,
      "commitsBetweenForRepo": 557,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public static List\u003cAclEntry\u003e readINodeLogicalAcl(INode inode) {\n     FsPermission perm \u003d inode.getFsPermission();\n     AclFeature f \u003d inode.getAclFeature();\n     if (f \u003d\u003d null) {\n-      return getMinimalAcl(perm);\n+      return AclUtil.getMinimalAcl(perm);\n     }\n \n     final List\u003cAclEntry\u003e existingAcl;\n     // Split ACL entries stored in the feature into access vs. default.\n     List\u003cAclEntry\u003e featureEntries \u003d f.getEntries();\n     ScopedAclEntries scoped \u003d new ScopedAclEntries(featureEntries);\n     List\u003cAclEntry\u003e accessEntries \u003d scoped.getAccessEntries();\n     List\u003cAclEntry\u003e defaultEntries \u003d scoped.getDefaultEntries();\n \n     // Pre-allocate list size for the explicit entries stored in the feature\n     // plus the 3 implicit entries (owner, group and other) from the permission\n     // bits.\n     existingAcl \u003d Lists.newArrayListWithCapacity(featureEntries.size() + 3);\n \n     if (!accessEntries.isEmpty()) {\n       // Add owner entry implied from user permission bits.\n       existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n           .setType(AclEntryType.USER).setPermission(perm.getUserAction())\n           .build());\n \n       // Next add all named user and group entries taken from the feature.\n       existingAcl.addAll(accessEntries);\n \n       // Add mask entry implied from group permission bits.\n       existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n           .setType(AclEntryType.MASK).setPermission(perm.getGroupAction())\n           .build());\n \n       // Add other entry implied from other permission bits.\n       existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n           .setType(AclEntryType.OTHER).setPermission(perm.getOtherAction())\n           .build());\n     } else {\n       // It\u0027s possible that there is a default ACL but no access ACL. In this\n       // case, add the minimal access ACL implied by the permission bits.\n-      existingAcl.addAll(getMinimalAcl(perm));\n+      existingAcl.addAll(AclUtil.getMinimalAcl(perm));\n     }\n \n     // Add all default entries after the access entries.\n     existingAcl.addAll(defaultEntries);\n \n     // The above adds entries in the correct order, so no need to sort here.\n     return existingAcl;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cAclEntry\u003e readINodeLogicalAcl(INode inode) {\n    FsPermission perm \u003d inode.getFsPermission();\n    AclFeature f \u003d inode.getAclFeature();\n    if (f \u003d\u003d null) {\n      return AclUtil.getMinimalAcl(perm);\n    }\n\n    final List\u003cAclEntry\u003e existingAcl;\n    // Split ACL entries stored in the feature into access vs. default.\n    List\u003cAclEntry\u003e featureEntries \u003d f.getEntries();\n    ScopedAclEntries scoped \u003d new ScopedAclEntries(featureEntries);\n    List\u003cAclEntry\u003e accessEntries \u003d scoped.getAccessEntries();\n    List\u003cAclEntry\u003e defaultEntries \u003d scoped.getDefaultEntries();\n\n    // Pre-allocate list size for the explicit entries stored in the feature\n    // plus the 3 implicit entries (owner, group and other) from the permission\n    // bits.\n    existingAcl \u003d Lists.newArrayListWithCapacity(featureEntries.size() + 3);\n\n    if (!accessEntries.isEmpty()) {\n      // Add owner entry implied from user permission bits.\n      existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.USER).setPermission(perm.getUserAction())\n          .build());\n\n      // Next add all named user and group entries taken from the feature.\n      existingAcl.addAll(accessEntries);\n\n      // Add mask entry implied from group permission bits.\n      existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.MASK).setPermission(perm.getGroupAction())\n          .build());\n\n      // Add other entry implied from other permission bits.\n      existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.OTHER).setPermission(perm.getOtherAction())\n          .build());\n    } else {\n      // It\u0027s possible that there is a default ACL but no access ACL. In this\n      // case, add the minimal access ACL implied by the permission bits.\n      existingAcl.addAll(AclUtil.getMinimalAcl(perm));\n    }\n\n    // Add all default entries after the access entries.\n    existingAcl.addAll(defaultEntries);\n\n    // The above adds entries in the correct order, so no need to sort here.\n    return existingAcl;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java",
      "extendedDetails": {}
    },
    "fc14360b0340a33c0e1eb34967d4dcd772533418": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5923. Do not persist the ACL bit in the FsPermission. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1567784 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 2:54 PM",
      "commitName": "fc14360b0340a33c0e1eb34967d4dcd772533418",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "07/02/14 3:11 PM",
      "commitNameOld": "c89c516b95f45e04af55d9030043a42e2d07b02b",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 4.99,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,49 @@\n   public static List\u003cAclEntry\u003e readINodeLogicalAcl(INode inode) {\n-    final List\u003cAclEntry\u003e existingAcl;\n     FsPermission perm \u003d inode.getFsPermission();\n-    if (perm.getAclBit()) {\n-      // Split ACL entries stored in the feature into access vs. default.\n-      List\u003cAclEntry\u003e featureEntries \u003d inode.getAclFeature().getEntries();\n-      ScopedAclEntries scoped \u003d new ScopedAclEntries(featureEntries);\n-      List\u003cAclEntry\u003e accessEntries \u003d scoped.getAccessEntries();\n-      List\u003cAclEntry\u003e defaultEntries \u003d scoped.getDefaultEntries();\n-\n-      // Pre-allocate list size for the explicit entries stored in the feature\n-      // plus the 3 implicit entries (owner, group and other) from the permission\n-      // bits.\n-      existingAcl \u003d Lists.newArrayListWithCapacity(featureEntries.size() + 3);\n-\n-      if (!accessEntries.isEmpty()) {\n-        // Add owner entry implied from user permission bits.\n-        existingAcl.add(new AclEntry.Builder()\n-          .setScope(AclEntryScope.ACCESS)\n-          .setType(AclEntryType.USER)\n-          .setPermission(perm.getUserAction())\n-          .build());\n-\n-        // Next add all named user and group entries taken from the feature.\n-        existingAcl.addAll(accessEntries);\n-\n-        // Add mask entry implied from group permission bits.\n-        existingAcl.add(new AclEntry.Builder()\n-          .setScope(AclEntryScope.ACCESS)\n-          .setType(AclEntryType.MASK)\n-          .setPermission(perm.getGroupAction())\n-          .build());\n-\n-        // Add other entry implied from other permission bits.\n-        existingAcl.add(new AclEntry.Builder()\n-          .setScope(AclEntryScope.ACCESS)\n-          .setType(AclEntryType.OTHER)\n-          .setPermission(perm.getOtherAction())\n-          .build());\n-      } else {\n-        // It\u0027s possible that there is a default ACL but no access ACL.  In this\n-        // case, add the minimal access ACL implied by the permission bits.\n-        existingAcl.addAll(getMinimalAcl(perm));\n-      }\n-\n-      // Add all default entries after the access entries.\n-      existingAcl.addAll(defaultEntries);\n-    } else {\n-      // If the inode doesn\u0027t have an extended ACL, then return a minimal ACL.\n-      existingAcl \u003d getMinimalAcl(perm);\n+    AclFeature f \u003d inode.getAclFeature();\n+    if (f \u003d\u003d null) {\n+      return getMinimalAcl(perm);\n     }\n \n+    final List\u003cAclEntry\u003e existingAcl;\n+    // Split ACL entries stored in the feature into access vs. default.\n+    List\u003cAclEntry\u003e featureEntries \u003d f.getEntries();\n+    ScopedAclEntries scoped \u003d new ScopedAclEntries(featureEntries);\n+    List\u003cAclEntry\u003e accessEntries \u003d scoped.getAccessEntries();\n+    List\u003cAclEntry\u003e defaultEntries \u003d scoped.getDefaultEntries();\n+\n+    // Pre-allocate list size for the explicit entries stored in the feature\n+    // plus the 3 implicit entries (owner, group and other) from the permission\n+    // bits.\n+    existingAcl \u003d Lists.newArrayListWithCapacity(featureEntries.size() + 3);\n+\n+    if (!accessEntries.isEmpty()) {\n+      // Add owner entry implied from user permission bits.\n+      existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n+          .setType(AclEntryType.USER).setPermission(perm.getUserAction())\n+          .build());\n+\n+      // Next add all named user and group entries taken from the feature.\n+      existingAcl.addAll(accessEntries);\n+\n+      // Add mask entry implied from group permission bits.\n+      existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n+          .setType(AclEntryType.MASK).setPermission(perm.getGroupAction())\n+          .build());\n+\n+      // Add other entry implied from other permission bits.\n+      existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n+          .setType(AclEntryType.OTHER).setPermission(perm.getOtherAction())\n+          .build());\n+    } else {\n+      // It\u0027s possible that there is a default ACL but no access ACL. In this\n+      // case, add the minimal access ACL implied by the permission bits.\n+      existingAcl.addAll(getMinimalAcl(perm));\n+    }\n+\n+    // Add all default entries after the access entries.\n+    existingAcl.addAll(defaultEntries);\n+\n     // The above adds entries in the correct order, so no need to sort here.\n     return existingAcl;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cAclEntry\u003e readINodeLogicalAcl(INode inode) {\n    FsPermission perm \u003d inode.getFsPermission();\n    AclFeature f \u003d inode.getAclFeature();\n    if (f \u003d\u003d null) {\n      return getMinimalAcl(perm);\n    }\n\n    final List\u003cAclEntry\u003e existingAcl;\n    // Split ACL entries stored in the feature into access vs. default.\n    List\u003cAclEntry\u003e featureEntries \u003d f.getEntries();\n    ScopedAclEntries scoped \u003d new ScopedAclEntries(featureEntries);\n    List\u003cAclEntry\u003e accessEntries \u003d scoped.getAccessEntries();\n    List\u003cAclEntry\u003e defaultEntries \u003d scoped.getDefaultEntries();\n\n    // Pre-allocate list size for the explicit entries stored in the feature\n    // plus the 3 implicit entries (owner, group and other) from the permission\n    // bits.\n    existingAcl \u003d Lists.newArrayListWithCapacity(featureEntries.size() + 3);\n\n    if (!accessEntries.isEmpty()) {\n      // Add owner entry implied from user permission bits.\n      existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.USER).setPermission(perm.getUserAction())\n          .build());\n\n      // Next add all named user and group entries taken from the feature.\n      existingAcl.addAll(accessEntries);\n\n      // Add mask entry implied from group permission bits.\n      existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.MASK).setPermission(perm.getGroupAction())\n          .build());\n\n      // Add other entry implied from other permission bits.\n      existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.OTHER).setPermission(perm.getOtherAction())\n          .build());\n    } else {\n      // It\u0027s possible that there is a default ACL but no access ACL. In this\n      // case, add the minimal access ACL implied by the permission bits.\n      existingAcl.addAll(getMinimalAcl(perm));\n    }\n\n    // Add all default entries after the access entries.\n    existingAcl.addAll(defaultEntries);\n\n    // The above adds entries in the correct order, so no need to sort here.\n    return existingAcl;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java",
      "extendedDetails": {}
    },
    "14f1f76bf609704d36a1699c05fa85750cefe917": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5614. NameNode: implement handling of ACLs in combination with snapshots. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1563304 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/01/14 2:21 PM",
      "commitName": "14f1f76bf609704d36a1699c05fa85750cefe917",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5614. NameNode: implement handling of ACLs in combination with snapshots. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1563304 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "31/01/14 2:21 PM",
          "commitName": "14f1f76bf609704d36a1699c05fa85750cefe917",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "31/01/14 10:33 AM",
          "commitNameOld": "c654c2e8b9af0a26deeb5a755710fd9ebe8cbf6d",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,55 @@\n-  public static List\u003cAclEntry\u003e readINodeLogicalAcl(\n-      INodeWithAdditionalFields inode, int snapshotId) {\n+  public static List\u003cAclEntry\u003e readINodeLogicalAcl(INode inode) {\n     final List\u003cAclEntry\u003e existingAcl;\n-    FsPermission perm \u003d inode.getPermissionStatus(snapshotId).getPermission();\n+    FsPermission perm \u003d inode.getFsPermission();\n     if (perm.getAclBit()) {\n       // Split ACL entries stored in the feature into access vs. default.\n       List\u003cAclEntry\u003e featureEntries \u003d inode.getAclFeature().getEntries();\n       ScopedAclEntries scoped \u003d new ScopedAclEntries(featureEntries);\n       List\u003cAclEntry\u003e accessEntries \u003d scoped.getAccessEntries();\n       List\u003cAclEntry\u003e defaultEntries \u003d scoped.getDefaultEntries();\n \n       // Pre-allocate list size for the explicit entries stored in the feature\n       // plus the 3 implicit entries (owner, group and other) from the permission\n       // bits.\n       existingAcl \u003d Lists.newArrayListWithCapacity(featureEntries.size() + 3);\n \n       if (!accessEntries.isEmpty()) {\n         // Add owner entry implied from user permission bits.\n         existingAcl.add(new AclEntry.Builder()\n           .setScope(AclEntryScope.ACCESS)\n           .setType(AclEntryType.USER)\n           .setPermission(perm.getUserAction())\n           .build());\n \n         // Next add all named user and group entries taken from the feature.\n         existingAcl.addAll(accessEntries);\n \n         // Add mask entry implied from group permission bits.\n         existingAcl.add(new AclEntry.Builder()\n           .setScope(AclEntryScope.ACCESS)\n           .setType(AclEntryType.MASK)\n           .setPermission(perm.getGroupAction())\n           .build());\n \n         // Add other entry implied from other permission bits.\n         existingAcl.add(new AclEntry.Builder()\n           .setScope(AclEntryScope.ACCESS)\n           .setType(AclEntryType.OTHER)\n           .setPermission(perm.getOtherAction())\n           .build());\n       } else {\n         // It\u0027s possible that there is a default ACL but no access ACL.  In this\n         // case, add the minimal access ACL implied by the permission bits.\n         existingAcl.addAll(getMinimalAcl(perm));\n       }\n \n       // Add all default entries after the access entries.\n       existingAcl.addAll(defaultEntries);\n     } else {\n       // If the inode doesn\u0027t have an extended ACL, then return a minimal ACL.\n       existingAcl \u003d getMinimalAcl(perm);\n     }\n \n     // The above adds entries in the correct order, so no need to sort here.\n     return existingAcl;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cAclEntry\u003e readINodeLogicalAcl(INode inode) {\n    final List\u003cAclEntry\u003e existingAcl;\n    FsPermission perm \u003d inode.getFsPermission();\n    if (perm.getAclBit()) {\n      // Split ACL entries stored in the feature into access vs. default.\n      List\u003cAclEntry\u003e featureEntries \u003d inode.getAclFeature().getEntries();\n      ScopedAclEntries scoped \u003d new ScopedAclEntries(featureEntries);\n      List\u003cAclEntry\u003e accessEntries \u003d scoped.getAccessEntries();\n      List\u003cAclEntry\u003e defaultEntries \u003d scoped.getDefaultEntries();\n\n      // Pre-allocate list size for the explicit entries stored in the feature\n      // plus the 3 implicit entries (owner, group and other) from the permission\n      // bits.\n      existingAcl \u003d Lists.newArrayListWithCapacity(featureEntries.size() + 3);\n\n      if (!accessEntries.isEmpty()) {\n        // Add owner entry implied from user permission bits.\n        existingAcl.add(new AclEntry.Builder()\n          .setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.USER)\n          .setPermission(perm.getUserAction())\n          .build());\n\n        // Next add all named user and group entries taken from the feature.\n        existingAcl.addAll(accessEntries);\n\n        // Add mask entry implied from group permission bits.\n        existingAcl.add(new AclEntry.Builder()\n          .setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.MASK)\n          .setPermission(perm.getGroupAction())\n          .build());\n\n        // Add other entry implied from other permission bits.\n        existingAcl.add(new AclEntry.Builder()\n          .setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.OTHER)\n          .setPermission(perm.getOtherAction())\n          .build());\n      } else {\n        // It\u0027s possible that there is a default ACL but no access ACL.  In this\n        // case, add the minimal access ACL implied by the permission bits.\n        existingAcl.addAll(getMinimalAcl(perm));\n      }\n\n      // Add all default entries after the access entries.\n      existingAcl.addAll(defaultEntries);\n    } else {\n      // If the inode doesn\u0027t have an extended ACL, then return a minimal ACL.\n      existingAcl \u003d getMinimalAcl(perm);\n    }\n\n    // The above adds entries in the correct order, so no need to sort here.\n    return existingAcl;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java",
          "extendedDetails": {
            "oldValue": "[inode-INodeWithAdditionalFields, snapshotId-int]",
            "newValue": "[inode-INode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5614. NameNode: implement handling of ACLs in combination with snapshots. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1563304 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "31/01/14 2:21 PM",
          "commitName": "14f1f76bf609704d36a1699c05fa85750cefe917",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "31/01/14 10:33 AM",
          "commitNameOld": "c654c2e8b9af0a26deeb5a755710fd9ebe8cbf6d",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,55 @@\n-  public static List\u003cAclEntry\u003e readINodeLogicalAcl(\n-      INodeWithAdditionalFields inode, int snapshotId) {\n+  public static List\u003cAclEntry\u003e readINodeLogicalAcl(INode inode) {\n     final List\u003cAclEntry\u003e existingAcl;\n-    FsPermission perm \u003d inode.getPermissionStatus(snapshotId).getPermission();\n+    FsPermission perm \u003d inode.getFsPermission();\n     if (perm.getAclBit()) {\n       // Split ACL entries stored in the feature into access vs. default.\n       List\u003cAclEntry\u003e featureEntries \u003d inode.getAclFeature().getEntries();\n       ScopedAclEntries scoped \u003d new ScopedAclEntries(featureEntries);\n       List\u003cAclEntry\u003e accessEntries \u003d scoped.getAccessEntries();\n       List\u003cAclEntry\u003e defaultEntries \u003d scoped.getDefaultEntries();\n \n       // Pre-allocate list size for the explicit entries stored in the feature\n       // plus the 3 implicit entries (owner, group and other) from the permission\n       // bits.\n       existingAcl \u003d Lists.newArrayListWithCapacity(featureEntries.size() + 3);\n \n       if (!accessEntries.isEmpty()) {\n         // Add owner entry implied from user permission bits.\n         existingAcl.add(new AclEntry.Builder()\n           .setScope(AclEntryScope.ACCESS)\n           .setType(AclEntryType.USER)\n           .setPermission(perm.getUserAction())\n           .build());\n \n         // Next add all named user and group entries taken from the feature.\n         existingAcl.addAll(accessEntries);\n \n         // Add mask entry implied from group permission bits.\n         existingAcl.add(new AclEntry.Builder()\n           .setScope(AclEntryScope.ACCESS)\n           .setType(AclEntryType.MASK)\n           .setPermission(perm.getGroupAction())\n           .build());\n \n         // Add other entry implied from other permission bits.\n         existingAcl.add(new AclEntry.Builder()\n           .setScope(AclEntryScope.ACCESS)\n           .setType(AclEntryType.OTHER)\n           .setPermission(perm.getOtherAction())\n           .build());\n       } else {\n         // It\u0027s possible that there is a default ACL but no access ACL.  In this\n         // case, add the minimal access ACL implied by the permission bits.\n         existingAcl.addAll(getMinimalAcl(perm));\n       }\n \n       // Add all default entries after the access entries.\n       existingAcl.addAll(defaultEntries);\n     } else {\n       // If the inode doesn\u0027t have an extended ACL, then return a minimal ACL.\n       existingAcl \u003d getMinimalAcl(perm);\n     }\n \n     // The above adds entries in the correct order, so no need to sort here.\n     return existingAcl;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cAclEntry\u003e readINodeLogicalAcl(INode inode) {\n    final List\u003cAclEntry\u003e existingAcl;\n    FsPermission perm \u003d inode.getFsPermission();\n    if (perm.getAclBit()) {\n      // Split ACL entries stored in the feature into access vs. default.\n      List\u003cAclEntry\u003e featureEntries \u003d inode.getAclFeature().getEntries();\n      ScopedAclEntries scoped \u003d new ScopedAclEntries(featureEntries);\n      List\u003cAclEntry\u003e accessEntries \u003d scoped.getAccessEntries();\n      List\u003cAclEntry\u003e defaultEntries \u003d scoped.getDefaultEntries();\n\n      // Pre-allocate list size for the explicit entries stored in the feature\n      // plus the 3 implicit entries (owner, group and other) from the permission\n      // bits.\n      existingAcl \u003d Lists.newArrayListWithCapacity(featureEntries.size() + 3);\n\n      if (!accessEntries.isEmpty()) {\n        // Add owner entry implied from user permission bits.\n        existingAcl.add(new AclEntry.Builder()\n          .setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.USER)\n          .setPermission(perm.getUserAction())\n          .build());\n\n        // Next add all named user and group entries taken from the feature.\n        existingAcl.addAll(accessEntries);\n\n        // Add mask entry implied from group permission bits.\n        existingAcl.add(new AclEntry.Builder()\n          .setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.MASK)\n          .setPermission(perm.getGroupAction())\n          .build());\n\n        // Add other entry implied from other permission bits.\n        existingAcl.add(new AclEntry.Builder()\n          .setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.OTHER)\n          .setPermission(perm.getOtherAction())\n          .build());\n      } else {\n        // It\u0027s possible that there is a default ACL but no access ACL.  In this\n        // case, add the minimal access ACL implied by the permission bits.\n        existingAcl.addAll(getMinimalAcl(perm));\n      }\n\n      // Add all default entries after the access entries.\n      existingAcl.addAll(defaultEntries);\n    } else {\n      // If the inode doesn\u0027t have an extended ACL, then return a minimal ACL.\n      existingAcl \u003d getMinimalAcl(perm);\n    }\n\n    // The above adds entries in the correct order, so no need to sort here.\n    return existingAcl;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "5300294fbe9e235ce42253d6bcd69d8154d8f198": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5758. NameNode: complete implementation of inode modifications for ACLs. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1559267 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/01/14 2:05 PM",
      "commitName": "5300294fbe9e235ce42253d6bcd69d8154d8f198",
      "commitAuthor": "Haohui Mai",
      "diff": "@@ -0,0 +1,56 @@\n+  public static List\u003cAclEntry\u003e readINodeLogicalAcl(\n+      INodeWithAdditionalFields inode, int snapshotId) {\n+    final List\u003cAclEntry\u003e existingAcl;\n+    FsPermission perm \u003d inode.getPermissionStatus(snapshotId).getPermission();\n+    if (perm.getAclBit()) {\n+      // Split ACL entries stored in the feature into access vs. default.\n+      List\u003cAclEntry\u003e featureEntries \u003d inode.getAclFeature().getEntries();\n+      ScopedAclEntries scoped \u003d new ScopedAclEntries(featureEntries);\n+      List\u003cAclEntry\u003e accessEntries \u003d scoped.getAccessEntries();\n+      List\u003cAclEntry\u003e defaultEntries \u003d scoped.getDefaultEntries();\n+\n+      // Pre-allocate list size for the explicit entries stored in the feature\n+      // plus the 3 implicit entries (owner, group and other) from the permission\n+      // bits.\n+      existingAcl \u003d Lists.newArrayListWithCapacity(featureEntries.size() + 3);\n+\n+      if (!accessEntries.isEmpty()) {\n+        // Add owner entry implied from user permission bits.\n+        existingAcl.add(new AclEntry.Builder()\n+          .setScope(AclEntryScope.ACCESS)\n+          .setType(AclEntryType.USER)\n+          .setPermission(perm.getUserAction())\n+          .build());\n+\n+        // Next add all named user and group entries taken from the feature.\n+        existingAcl.addAll(accessEntries);\n+\n+        // Add mask entry implied from group permission bits.\n+        existingAcl.add(new AclEntry.Builder()\n+          .setScope(AclEntryScope.ACCESS)\n+          .setType(AclEntryType.MASK)\n+          .setPermission(perm.getGroupAction())\n+          .build());\n+\n+        // Add other entry implied from other permission bits.\n+        existingAcl.add(new AclEntry.Builder()\n+          .setScope(AclEntryScope.ACCESS)\n+          .setType(AclEntryType.OTHER)\n+          .setPermission(perm.getOtherAction())\n+          .build());\n+      } else {\n+        // It\u0027s possible that there is a default ACL but no access ACL.  In this\n+        // case, add the minimal access ACL implied by the permission bits.\n+        existingAcl.addAll(getMinimalAcl(perm));\n+      }\n+\n+      // Add all default entries after the access entries.\n+      existingAcl.addAll(defaultEntries);\n+    } else {\n+      // If the inode doesn\u0027t have an extended ACL, then return a minimal ACL.\n+      existingAcl \u003d getMinimalAcl(perm);\n+    }\n+\n+    // The above adds entries in the correct order, so no need to sort here.\n+    return existingAcl;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cAclEntry\u003e readINodeLogicalAcl(\n      INodeWithAdditionalFields inode, int snapshotId) {\n    final List\u003cAclEntry\u003e existingAcl;\n    FsPermission perm \u003d inode.getPermissionStatus(snapshotId).getPermission();\n    if (perm.getAclBit()) {\n      // Split ACL entries stored in the feature into access vs. default.\n      List\u003cAclEntry\u003e featureEntries \u003d inode.getAclFeature().getEntries();\n      ScopedAclEntries scoped \u003d new ScopedAclEntries(featureEntries);\n      List\u003cAclEntry\u003e accessEntries \u003d scoped.getAccessEntries();\n      List\u003cAclEntry\u003e defaultEntries \u003d scoped.getDefaultEntries();\n\n      // Pre-allocate list size for the explicit entries stored in the feature\n      // plus the 3 implicit entries (owner, group and other) from the permission\n      // bits.\n      existingAcl \u003d Lists.newArrayListWithCapacity(featureEntries.size() + 3);\n\n      if (!accessEntries.isEmpty()) {\n        // Add owner entry implied from user permission bits.\n        existingAcl.add(new AclEntry.Builder()\n          .setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.USER)\n          .setPermission(perm.getUserAction())\n          .build());\n\n        // Next add all named user and group entries taken from the feature.\n        existingAcl.addAll(accessEntries);\n\n        // Add mask entry implied from group permission bits.\n        existingAcl.add(new AclEntry.Builder()\n          .setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.MASK)\n          .setPermission(perm.getGroupAction())\n          .build());\n\n        // Add other entry implied from other permission bits.\n        existingAcl.add(new AclEntry.Builder()\n          .setScope(AclEntryScope.ACCESS)\n          .setType(AclEntryType.OTHER)\n          .setPermission(perm.getOtherAction())\n          .build());\n      } else {\n        // It\u0027s possible that there is a default ACL but no access ACL.  In this\n        // case, add the minimal access ACL implied by the permission bits.\n        existingAcl.addAll(getMinimalAcl(perm));\n      }\n\n      // Add all default entries after the access entries.\n      existingAcl.addAll(defaultEntries);\n    } else {\n      // If the inode doesn\u0027t have an extended ACL, then return a minimal ACL.\n      existingAcl \u003d getMinimalAcl(perm);\n    }\n\n    // The above adds entries in the correct order, so no need to sort here.\n    return existingAcl;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java"
    }
  }
}