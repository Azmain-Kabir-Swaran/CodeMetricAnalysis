{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeTimelineCollectorManager.java",
  "functionName": "renewToken",
  "functionId": "renewToken___appCollector-AppLevelTimelineCollector",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java",
  "functionStartLine": 415,
  "functionEndLine": 435,
  "numCommitsSeen": 15,
  "timeTaken": 473,
  "changeHistory": [
    "7fd6ae24798cd3fdd77dbb00089a922407026e02"
  ],
  "changeHistoryShort": {
    "7fd6ae24798cd3fdd77dbb00089a922407026e02": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7fd6ae24798cd3fdd77dbb00089a922407026e02": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6134. [ATSv2 Security] Regenerate delegation token for app just before token expires if app collector is active. Contributed by Varun Saxena\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "7fd6ae24798cd3fdd77dbb00089a922407026e02",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,21 @@\n+    private void renewToken(AppLevelTimelineCollector appCollector)\n+        throws IOException {\n+      long newExpirationTime \u003d renewTokenForAppCollector(appCollector);\n+      // Set renewal or regeneration timer based on delay.\n+      long renewalDelay \u003d 0;\n+      if (newExpirationTime \u003e 0) {\n+        LOG.info(\"Renewed token for \" + appId + \" with new expiration \" +\n+            \"timestamp \u003d \" + newExpirationTime);\n+        renewalDelay \u003d getRenewalDelay(newExpirationTime - Time.now());\n+      }\n+      long regenerationDelay \u003d\n+          getRegenerationDelay(appCollector.getAppDelegationTokenMaxDate());\n+      if (renewalDelay \u003e 0 || regenerationDelay \u003e 0) {\n+        this.timerForRenewal \u003d renewalDelay \u003c regenerationDelay;\n+        Future\u003c?\u003e renewalOrRegenerationFuture \u003d tokenRenewalExecutor.schedule(\n+            this, timerForRenewal ? renewalDelay : regenerationDelay,\n+            TimeUnit.MILLISECONDS);\n+        appCollector.setRenewalOrRegenerationFutureForApp(\n+            renewalOrRegenerationFuture);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void renewToken(AppLevelTimelineCollector appCollector)\n        throws IOException {\n      long newExpirationTime \u003d renewTokenForAppCollector(appCollector);\n      // Set renewal or regeneration timer based on delay.\n      long renewalDelay \u003d 0;\n      if (newExpirationTime \u003e 0) {\n        LOG.info(\"Renewed token for \" + appId + \" with new expiration \" +\n            \"timestamp \u003d \" + newExpirationTime);\n        renewalDelay \u003d getRenewalDelay(newExpirationTime - Time.now());\n      }\n      long regenerationDelay \u003d\n          getRegenerationDelay(appCollector.getAppDelegationTokenMaxDate());\n      if (renewalDelay \u003e 0 || regenerationDelay \u003e 0) {\n        this.timerForRenewal \u003d renewalDelay \u003c regenerationDelay;\n        Future\u003c?\u003e renewalOrRegenerationFuture \u003d tokenRenewalExecutor.schedule(\n            this, timerForRenewal ? renewalDelay : regenerationDelay,\n            TimeUnit.MILLISECONDS);\n        appCollector.setRenewalOrRegenerationFutureForApp(\n            renewalOrRegenerationFuture);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/NodeTimelineCollectorManager.java"
    }
  }
}