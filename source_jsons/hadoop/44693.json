{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationCLI.java",
  "functionName": "executeUpgradeCommand",
  "functionId": "executeUpgradeCommand___cliParser-CommandLine__title-String__opts-Options",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
  "functionStartLine": 1391,
  "functionEndLine": 1456,
  "numCommitsSeen": 72,
  "timeTaken": 1292,
  "changeHistory": [
    "206e6339469ca6d362382efbb488089ece830e98"
  ],
  "changeHistoryShort": {
    "206e6339469ca6d362382efbb488089ece830e98": "Yintroduced"
  },
  "changeHistoryDetails": {
    "206e6339469ca6d362382efbb488089ece830e98": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9453. Clean up code long if-else chain in ApplicationCLI#run. Contributed by Wanqiang Ji.\n",
      "commitDate": "13/05/19 11:11 AM",
      "commitName": "206e6339469ca6d362382efbb488089ece830e98",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "diff": "@@ -0,0 +1,66 @@\n+  private int executeUpgradeCommand(CommandLine cliParser, String title,\n+      Options opts) throws Exception {\n+    int exitCode \u003d -1;\n+    if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD, UPGRADE_EXPRESS,\n+        UPGRADE_INITIATE, UPGRADE_AUTO_FINALIZE, UPGRADE_FINALIZE,\n+        UPGRADE_CANCEL, COMPONENT_INSTS, COMPONENTS, APP_TYPE_CMD)) {\n+      printUsage(title, opts);\n+      return exitCode;\n+    }\n+    String appType \u003d getSingleAppTypeFromCLI(cliParser);\n+    AppAdminClient client \u003d  AppAdminClient.createAppAdminClient(appType,\n+        getConf());\n+    String appName \u003d cliParser.getOptionValue(UPGRADE_CMD);\n+    if (cliParser.hasOption(UPGRADE_EXPRESS)) {\n+      File file \u003d new File(cliParser.getOptionValue(UPGRADE_EXPRESS));\n+      if (!file.exists()) {\n+        System.err.println(file.getAbsolutePath() + \" does not exist.\");\n+        return exitCode;\n+      }\n+      return client.actionUpgradeExpress(appName, file);\n+    } else if (cliParser.hasOption(UPGRADE_INITIATE)) {\n+      if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD,\n+          UPGRADE_INITIATE, UPGRADE_AUTO_FINALIZE, APP_TYPE_CMD)) {\n+        printUsage(title, opts);\n+        return exitCode;\n+      }\n+      String fileName \u003d cliParser.getOptionValue(UPGRADE_INITIATE);\n+      if (cliParser.hasOption(UPGRADE_AUTO_FINALIZE)) {\n+        return client.initiateUpgrade(appName, fileName, true);\n+      } else {\n+        return client.initiateUpgrade(appName, fileName, false);\n+      }\n+    } else if (cliParser.hasOption(COMPONENT_INSTS)) {\n+      if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD,\n+          COMPONENT_INSTS, APP_TYPE_CMD)) {\n+        printUsage(title, opts);\n+        return exitCode;\n+      }\n+      String[] instances \u003d cliParser.getOptionValues(COMPONENT_INSTS);\n+      return client.actionUpgradeInstances(appName, Arrays.asList(instances));\n+    } else if (cliParser.hasOption(COMPONENTS)) {\n+      if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD,\n+          COMPONENTS, APP_TYPE_CMD)) {\n+        printUsage(title, opts);\n+        return exitCode;\n+      }\n+      String[] components \u003d cliParser.getOptionValues(COMPONENTS);\n+      return client.actionUpgradeComponents(appName,\n+          Arrays.asList(components));\n+    } else if (cliParser.hasOption(UPGRADE_FINALIZE)) {\n+      if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD,\n+          UPGRADE_FINALIZE, APP_TYPE_CMD)) {\n+        printUsage(title, opts);\n+        return exitCode;\n+      }\n+      return client.actionStart(appName);\n+    } else if (cliParser.hasOption(UPGRADE_CANCEL)) {\n+      if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD,\n+          UPGRADE_CANCEL, APP_TYPE_CMD)) {\n+        printUsage(title, opts);\n+        return exitCode;\n+      }\n+      return client.actionCancelUpgrade(appName);\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int executeUpgradeCommand(CommandLine cliParser, String title,\n      Options opts) throws Exception {\n    int exitCode \u003d -1;\n    if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD, UPGRADE_EXPRESS,\n        UPGRADE_INITIATE, UPGRADE_AUTO_FINALIZE, UPGRADE_FINALIZE,\n        UPGRADE_CANCEL, COMPONENT_INSTS, COMPONENTS, APP_TYPE_CMD)) {\n      printUsage(title, opts);\n      return exitCode;\n    }\n    String appType \u003d getSingleAppTypeFromCLI(cliParser);\n    AppAdminClient client \u003d  AppAdminClient.createAppAdminClient(appType,\n        getConf());\n    String appName \u003d cliParser.getOptionValue(UPGRADE_CMD);\n    if (cliParser.hasOption(UPGRADE_EXPRESS)) {\n      File file \u003d new File(cliParser.getOptionValue(UPGRADE_EXPRESS));\n      if (!file.exists()) {\n        System.err.println(file.getAbsolutePath() + \" does not exist.\");\n        return exitCode;\n      }\n      return client.actionUpgradeExpress(appName, file);\n    } else if (cliParser.hasOption(UPGRADE_INITIATE)) {\n      if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD,\n          UPGRADE_INITIATE, UPGRADE_AUTO_FINALIZE, APP_TYPE_CMD)) {\n        printUsage(title, opts);\n        return exitCode;\n      }\n      String fileName \u003d cliParser.getOptionValue(UPGRADE_INITIATE);\n      if (cliParser.hasOption(UPGRADE_AUTO_FINALIZE)) {\n        return client.initiateUpgrade(appName, fileName, true);\n      } else {\n        return client.initiateUpgrade(appName, fileName, false);\n      }\n    } else if (cliParser.hasOption(COMPONENT_INSTS)) {\n      if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD,\n          COMPONENT_INSTS, APP_TYPE_CMD)) {\n        printUsage(title, opts);\n        return exitCode;\n      }\n      String[] instances \u003d cliParser.getOptionValues(COMPONENT_INSTS);\n      return client.actionUpgradeInstances(appName, Arrays.asList(instances));\n    } else if (cliParser.hasOption(COMPONENTS)) {\n      if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD,\n          COMPONENTS, APP_TYPE_CMD)) {\n        printUsage(title, opts);\n        return exitCode;\n      }\n      String[] components \u003d cliParser.getOptionValues(COMPONENTS);\n      return client.actionUpgradeComponents(appName,\n          Arrays.asList(components));\n    } else if (cliParser.hasOption(UPGRADE_FINALIZE)) {\n      if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD,\n          UPGRADE_FINALIZE, APP_TYPE_CMD)) {\n        printUsage(title, opts);\n        return exitCode;\n      }\n      return client.actionStart(appName);\n    } else if (cliParser.hasOption(UPGRADE_CANCEL)) {\n      if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD,\n          UPGRADE_CANCEL, APP_TYPE_CMD)) {\n        printUsage(title, opts);\n        return exitCode;\n      }\n      return client.actionCancelUpgrade(appName);\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java"
    }
  }
}