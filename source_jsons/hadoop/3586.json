{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSInputStream.java",
  "functionName": "getBlockRange",
  "functionId": "getBlockRange___offset-long__length-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
  "functionStartLine": 579,
  "functionEndLine": 608,
  "numCommitsSeen": 143,
  "timeTaken": 7446,
  "changeHistory": [
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "6ec9b178c664796b44eab6c41f7216577d380f7c",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "6ec9b178c664796b44eab6c41f7216577d380f7c": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/09/15 8:39 AM",
      "commitNameOld": "6c17d315287020368689fa078a40a1eaedf89d5b",
      "commitAuthorOld": "",
      "daysBetweenCommits": 3.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private List\u003cLocatedBlock\u003e getBlockRange(long offset,\n       long length)  throws IOException {\n     // getFileLength(): returns total file length\n     // locatedBlocks.getFileLength(): returns length of completed blocks\n     if (offset \u003e\u003d getFileLength()) {\n       throw new IOException(\"Offset: \" + offset +\n         \" exceeds file length: \" + getFileLength());\n     }\n     synchronized(infoLock) {\n       final List\u003cLocatedBlock\u003e blocks;\n       final long lengthOfCompleteBlk \u003d locatedBlocks.getFileLength();\n       final boolean readOffsetWithinCompleteBlk \u003d offset \u003c lengthOfCompleteBlk;\n       final boolean readLengthPastCompleteBlk \u003d offset + length \u003e lengthOfCompleteBlk;\n \n       if (readOffsetWithinCompleteBlk) {\n         //get the blocks of finalized (completed) block range\n         blocks \u003d getFinalizedBlockRange(offset,\n           Math.min(length, lengthOfCompleteBlk - offset));\n       } else {\n-        blocks \u003d new ArrayList\u003cLocatedBlock\u003e(1);\n+        blocks \u003d new ArrayList\u003c\u003e(1);\n       }\n \n       // get the blocks from incomplete block range\n       if (readLengthPastCompleteBlk) {\n-         blocks.add(locatedBlocks.getLastLocatedBlock());\n+        blocks.add(locatedBlocks.getLastLocatedBlock());\n       }\n \n       return blocks;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cLocatedBlock\u003e getBlockRange(long offset,\n      long length)  throws IOException {\n    // getFileLength(): returns total file length\n    // locatedBlocks.getFileLength(): returns length of completed blocks\n    if (offset \u003e\u003d getFileLength()) {\n      throw new IOException(\"Offset: \" + offset +\n        \" exceeds file length: \" + getFileLength());\n    }\n    synchronized(infoLock) {\n      final List\u003cLocatedBlock\u003e blocks;\n      final long lengthOfCompleteBlk \u003d locatedBlocks.getFileLength();\n      final boolean readOffsetWithinCompleteBlk \u003d offset \u003c lengthOfCompleteBlk;\n      final boolean readLengthPastCompleteBlk \u003d offset + length \u003e lengthOfCompleteBlk;\n\n      if (readOffsetWithinCompleteBlk) {\n        //get the blocks of finalized (completed) block range\n        blocks \u003d getFinalizedBlockRange(offset,\n          Math.min(length, lengthOfCompleteBlk - offset));\n      } else {\n        blocks \u003d new ArrayList\u003c\u003e(1);\n      }\n\n      // get the blocks from incomplete block range\n      if (readLengthPastCompleteBlk) {\n        blocks.add(locatedBlocks.getLastLocatedBlock());\n      }\n\n      return blocks;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private List\u003cLocatedBlock\u003e getBlockRange(long offset,\n      long length)  throws IOException {\n    // getFileLength(): returns total file length\n    // locatedBlocks.getFileLength(): returns length of completed blocks\n    if (offset \u003e\u003d getFileLength()) {\n      throw new IOException(\"Offset: \" + offset +\n        \" exceeds file length: \" + getFileLength());\n    }\n    synchronized(infoLock) {\n      final List\u003cLocatedBlock\u003e blocks;\n      final long lengthOfCompleteBlk \u003d locatedBlocks.getFileLength();\n      final boolean readOffsetWithinCompleteBlk \u003d offset \u003c lengthOfCompleteBlk;\n      final boolean readLengthPastCompleteBlk \u003d offset + length \u003e lengthOfCompleteBlk;\n\n      if (readOffsetWithinCompleteBlk) {\n        //get the blocks of finalized (completed) block range\n        blocks \u003d getFinalizedBlockRange(offset,\n          Math.min(length, lengthOfCompleteBlk - offset));\n      } else {\n        blocks \u003d new ArrayList\u003cLocatedBlock\u003e(1);\n      }\n\n      // get the blocks from incomplete block range\n      if (readLengthPastCompleteBlk) {\n         blocks.add(locatedBlocks.getLastLocatedBlock());\n      }\n\n      return blocks;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-6735. A minor optimization to avoid pread() be blocked by read() inside the same DFSInputStream (Lars Hofhansl via stack)\n",
      "commitDate": "02/12/14 8:57 PM",
      "commitName": "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f",
      "commitAuthor": "stack",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-6735. A minor optimization to avoid pread() be blocked by read() inside the same DFSInputStream (Lars Hofhansl via stack)\n",
          "commitDate": "02/12/14 8:57 PM",
          "commitName": "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f",
          "commitAuthor": "stack",
          "commitDateOld": "05/11/14 9:00 PM",
          "commitNameOld": "80d7d183cd4052d6e6d412ff6588d26471c85d6d",
          "commitAuthorOld": "Milan Desai",
          "daysBetweenCommits": 27.0,
          "commitsBetweenForRepo": 189,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,30 @@\n-  private synchronized List\u003cLocatedBlock\u003e getBlockRange(long offset,\n+  private List\u003cLocatedBlock\u003e getBlockRange(long offset,\n       long length)  throws IOException {\n     // getFileLength(): returns total file length\n     // locatedBlocks.getFileLength(): returns length of completed blocks\n     if (offset \u003e\u003d getFileLength()) {\n       throw new IOException(\"Offset: \" + offset +\n         \" exceeds file length: \" + getFileLength());\n     }\n+    synchronized(infoLock) {\n+      final List\u003cLocatedBlock\u003e blocks;\n+      final long lengthOfCompleteBlk \u003d locatedBlocks.getFileLength();\n+      final boolean readOffsetWithinCompleteBlk \u003d offset \u003c lengthOfCompleteBlk;\n+      final boolean readLengthPastCompleteBlk \u003d offset + length \u003e lengthOfCompleteBlk;\n \n-    final List\u003cLocatedBlock\u003e blocks;\n-    final long lengthOfCompleteBlk \u003d locatedBlocks.getFileLength();\n-    final boolean readOffsetWithinCompleteBlk \u003d offset \u003c lengthOfCompleteBlk;\n-    final boolean readLengthPastCompleteBlk \u003d offset + length \u003e lengthOfCompleteBlk;\n+      if (readOffsetWithinCompleteBlk) {\n+        //get the blocks of finalized (completed) block range\n+        blocks \u003d getFinalizedBlockRange(offset,\n+          Math.min(length, lengthOfCompleteBlk - offset));\n+      } else {\n+        blocks \u003d new ArrayList\u003cLocatedBlock\u003e(1);\n+      }\n \n-    if (readOffsetWithinCompleteBlk) {\n-      //get the blocks of finalized (completed) block range\n-      blocks \u003d getFinalizedBlockRange(offset, \n-        Math.min(length, lengthOfCompleteBlk - offset));\n-    } else {\n-      blocks \u003d new ArrayList\u003cLocatedBlock\u003e(1);\n+      // get the blocks from incomplete block range\n+      if (readLengthPastCompleteBlk) {\n+         blocks.add(locatedBlocks.getLastLocatedBlock());\n+      }\n+\n+      return blocks;\n     }\n-\n-    // get the blocks from incomplete block range\n-    if (readLengthPastCompleteBlk) {\n-       blocks.add(locatedBlocks.getLastLocatedBlock());\n-    }\n-\n-    return blocks;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cLocatedBlock\u003e getBlockRange(long offset,\n      long length)  throws IOException {\n    // getFileLength(): returns total file length\n    // locatedBlocks.getFileLength(): returns length of completed blocks\n    if (offset \u003e\u003d getFileLength()) {\n      throw new IOException(\"Offset: \" + offset +\n        \" exceeds file length: \" + getFileLength());\n    }\n    synchronized(infoLock) {\n      final List\u003cLocatedBlock\u003e blocks;\n      final long lengthOfCompleteBlk \u003d locatedBlocks.getFileLength();\n      final boolean readOffsetWithinCompleteBlk \u003d offset \u003c lengthOfCompleteBlk;\n      final boolean readLengthPastCompleteBlk \u003d offset + length \u003e lengthOfCompleteBlk;\n\n      if (readOffsetWithinCompleteBlk) {\n        //get the blocks of finalized (completed) block range\n        blocks \u003d getFinalizedBlockRange(offset,\n          Math.min(length, lengthOfCompleteBlk - offset));\n      } else {\n        blocks \u003d new ArrayList\u003cLocatedBlock\u003e(1);\n      }\n\n      // get the blocks from incomplete block range\n      if (readLengthPastCompleteBlk) {\n         blocks.add(locatedBlocks.getLastLocatedBlock());\n      }\n\n      return blocks;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6735. A minor optimization to avoid pread() be blocked by read() inside the same DFSInputStream (Lars Hofhansl via stack)\n",
          "commitDate": "02/12/14 8:57 PM",
          "commitName": "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f",
          "commitAuthor": "stack",
          "commitDateOld": "05/11/14 9:00 PM",
          "commitNameOld": "80d7d183cd4052d6e6d412ff6588d26471c85d6d",
          "commitAuthorOld": "Milan Desai",
          "daysBetweenCommits": 27.0,
          "commitsBetweenForRepo": 189,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,30 @@\n-  private synchronized List\u003cLocatedBlock\u003e getBlockRange(long offset,\n+  private List\u003cLocatedBlock\u003e getBlockRange(long offset,\n       long length)  throws IOException {\n     // getFileLength(): returns total file length\n     // locatedBlocks.getFileLength(): returns length of completed blocks\n     if (offset \u003e\u003d getFileLength()) {\n       throw new IOException(\"Offset: \" + offset +\n         \" exceeds file length: \" + getFileLength());\n     }\n+    synchronized(infoLock) {\n+      final List\u003cLocatedBlock\u003e blocks;\n+      final long lengthOfCompleteBlk \u003d locatedBlocks.getFileLength();\n+      final boolean readOffsetWithinCompleteBlk \u003d offset \u003c lengthOfCompleteBlk;\n+      final boolean readLengthPastCompleteBlk \u003d offset + length \u003e lengthOfCompleteBlk;\n \n-    final List\u003cLocatedBlock\u003e blocks;\n-    final long lengthOfCompleteBlk \u003d locatedBlocks.getFileLength();\n-    final boolean readOffsetWithinCompleteBlk \u003d offset \u003c lengthOfCompleteBlk;\n-    final boolean readLengthPastCompleteBlk \u003d offset + length \u003e lengthOfCompleteBlk;\n+      if (readOffsetWithinCompleteBlk) {\n+        //get the blocks of finalized (completed) block range\n+        blocks \u003d getFinalizedBlockRange(offset,\n+          Math.min(length, lengthOfCompleteBlk - offset));\n+      } else {\n+        blocks \u003d new ArrayList\u003cLocatedBlock\u003e(1);\n+      }\n \n-    if (readOffsetWithinCompleteBlk) {\n-      //get the blocks of finalized (completed) block range\n-      blocks \u003d getFinalizedBlockRange(offset, \n-        Math.min(length, lengthOfCompleteBlk - offset));\n-    } else {\n-      blocks \u003d new ArrayList\u003cLocatedBlock\u003e(1);\n+      // get the blocks from incomplete block range\n+      if (readLengthPastCompleteBlk) {\n+         blocks.add(locatedBlocks.getLastLocatedBlock());\n+      }\n+\n+      return blocks;\n     }\n-\n-    // get the blocks from incomplete block range\n-    if (readLengthPastCompleteBlk) {\n-       blocks.add(locatedBlocks.getLastLocatedBlock());\n-    }\n-\n-    return blocks;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cLocatedBlock\u003e getBlockRange(long offset,\n      long length)  throws IOException {\n    // getFileLength(): returns total file length\n    // locatedBlocks.getFileLength(): returns length of completed blocks\n    if (offset \u003e\u003d getFileLength()) {\n      throw new IOException(\"Offset: \" + offset +\n        \" exceeds file length: \" + getFileLength());\n    }\n    synchronized(infoLock) {\n      final List\u003cLocatedBlock\u003e blocks;\n      final long lengthOfCompleteBlk \u003d locatedBlocks.getFileLength();\n      final boolean readOffsetWithinCompleteBlk \u003d offset \u003c lengthOfCompleteBlk;\n      final boolean readLengthPastCompleteBlk \u003d offset + length \u003e lengthOfCompleteBlk;\n\n      if (readOffsetWithinCompleteBlk) {\n        //get the blocks of finalized (completed) block range\n        blocks \u003d getFinalizedBlockRange(offset,\n          Math.min(length, lengthOfCompleteBlk - offset));\n      } else {\n        blocks \u003d new ArrayList\u003cLocatedBlock\u003e(1);\n      }\n\n      // get the blocks from incomplete block range\n      if (readLengthPastCompleteBlk) {\n         blocks.add(locatedBlocks.getLastLocatedBlock());\n      }\n\n      return blocks;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized List\u003cLocatedBlock\u003e getBlockRange(long offset, \n                                                        long length) \n                                                      throws IOException {\n    // getFileLength(): returns total file length\n    // locatedBlocks.getFileLength(): returns length of completed blocks\n    if (offset \u003e\u003d getFileLength()) {\n      throw new IOException(\"Offset: \" + offset +\n        \" exceeds file length: \" + getFileLength());\n    }\n\n    final List\u003cLocatedBlock\u003e blocks;\n    final long lengthOfCompleteBlk \u003d locatedBlocks.getFileLength();\n    final boolean readOffsetWithinCompleteBlk \u003d offset \u003c lengthOfCompleteBlk;\n    final boolean readLengthPastCompleteBlk \u003d offset + length \u003e lengthOfCompleteBlk;\n\n    if (readOffsetWithinCompleteBlk) {\n      //get the blocks of finalized (completed) block range\n      blocks \u003d getFinalizedBlockRange(offset, \n        Math.min(length, lengthOfCompleteBlk - offset));\n    } else {\n      blocks \u003d new ArrayList\u003cLocatedBlock\u003e(1);\n    }\n\n    // get the blocks from incomplete block range\n    if (readLengthPastCompleteBlk) {\n       blocks.add(locatedBlocks.getLastLocatedBlock());\n    }\n\n    return blocks;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized List\u003cLocatedBlock\u003e getBlockRange(long offset, \n                                                        long length) \n                                                      throws IOException {\n    // getFileLength(): returns total file length\n    // locatedBlocks.getFileLength(): returns length of completed blocks\n    if (offset \u003e\u003d getFileLength()) {\n      throw new IOException(\"Offset: \" + offset +\n        \" exceeds file length: \" + getFileLength());\n    }\n\n    final List\u003cLocatedBlock\u003e blocks;\n    final long lengthOfCompleteBlk \u003d locatedBlocks.getFileLength();\n    final boolean readOffsetWithinCompleteBlk \u003d offset \u003c lengthOfCompleteBlk;\n    final boolean readLengthPastCompleteBlk \u003d offset + length \u003e lengthOfCompleteBlk;\n\n    if (readOffsetWithinCompleteBlk) {\n      //get the blocks of finalized (completed) block range\n      blocks \u003d getFinalizedBlockRange(offset, \n        Math.min(length, lengthOfCompleteBlk - offset));\n    } else {\n      blocks \u003d new ArrayList\u003cLocatedBlock\u003e(1);\n    }\n\n    // get the blocks from incomplete block range\n    if (readLengthPastCompleteBlk) {\n       blocks.add(locatedBlocks.getLastLocatedBlock());\n    }\n\n    return blocks;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "6ec9b178c664796b44eab6c41f7216577d380f7c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2034. Length in DFSInputStream.getBlockRange(..) becomes -ve when reading only from a currently being written block. Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1144480 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/07/11 1:13 PM",
      "commitName": "6ec9b178c664796b44eab6c41f7216577d380f7c",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "23/06/11 3:24 PM",
      "commitNameOld": "fd9997989c1f1c6f806c57a806e7225ca599fc0c",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 14.91,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,30 @@\n   private synchronized List\u003cLocatedBlock\u003e getBlockRange(long offset, \n                                                         long length) \n                                                       throws IOException {\n-    final List\u003cLocatedBlock\u003e blocks;\n-    if (locatedBlocks.isLastBlockComplete()) {\n-      blocks \u003d getFinalizedBlockRange(offset, length);\n+    // getFileLength(): returns total file length\n+    // locatedBlocks.getFileLength(): returns length of completed blocks\n+    if (offset \u003e\u003d getFileLength()) {\n+      throw new IOException(\"Offset: \" + offset +\n+        \" exceeds file length: \" + getFileLength());\n     }\n-    else {\n-      final boolean readPastEnd \u003d offset + length \u003e locatedBlocks.getFileLength();\n-      /* if requested length is greater than current file length\n-       * then, it could possibly be from the current block being\n-       * written to. First get the finalized block range and then\n-       * if necessary, get the length of last block being written\n-       * to.\n-       */\n-      if (readPastEnd)\n-        length \u003d locatedBlocks.getFileLength() - offset;\n \n-      blocks \u003d getFinalizedBlockRange(offset, length);\n-      /* requested length is greater than what finalized blocks \n-       * have.\n-       */\n-      if (readPastEnd)\n-        blocks.add(locatedBlocks.getLastLocatedBlock());\n+    final List\u003cLocatedBlock\u003e blocks;\n+    final long lengthOfCompleteBlk \u003d locatedBlocks.getFileLength();\n+    final boolean readOffsetWithinCompleteBlk \u003d offset \u003c lengthOfCompleteBlk;\n+    final boolean readLengthPastCompleteBlk \u003d offset + length \u003e lengthOfCompleteBlk;\n+\n+    if (readOffsetWithinCompleteBlk) {\n+      //get the blocks of finalized (completed) block range\n+      blocks \u003d getFinalizedBlockRange(offset, \n+        Math.min(length, lengthOfCompleteBlk - offset));\n+    } else {\n+      blocks \u003d new ArrayList\u003cLocatedBlock\u003e(1);\n     }\n+\n+    // get the blocks from incomplete block range\n+    if (readLengthPastCompleteBlk) {\n+       blocks.add(locatedBlocks.getLastLocatedBlock());\n+    }\n+\n     return blocks;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized List\u003cLocatedBlock\u003e getBlockRange(long offset, \n                                                        long length) \n                                                      throws IOException {\n    // getFileLength(): returns total file length\n    // locatedBlocks.getFileLength(): returns length of completed blocks\n    if (offset \u003e\u003d getFileLength()) {\n      throw new IOException(\"Offset: \" + offset +\n        \" exceeds file length: \" + getFileLength());\n    }\n\n    final List\u003cLocatedBlock\u003e blocks;\n    final long lengthOfCompleteBlk \u003d locatedBlocks.getFileLength();\n    final boolean readOffsetWithinCompleteBlk \u003d offset \u003c lengthOfCompleteBlk;\n    final boolean readLengthPastCompleteBlk \u003d offset + length \u003e lengthOfCompleteBlk;\n\n    if (readOffsetWithinCompleteBlk) {\n      //get the blocks of finalized (completed) block range\n      blocks \u003d getFinalizedBlockRange(offset, \n        Math.min(length, lengthOfCompleteBlk - offset));\n    } else {\n      blocks \u003d new ArrayList\u003cLocatedBlock\u003e(1);\n    }\n\n    // get the blocks from incomplete block range\n    if (readLengthPastCompleteBlk) {\n       blocks.add(locatedBlocks.getLastLocatedBlock());\n    }\n\n    return blocks;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,27 @@\n+  private synchronized List\u003cLocatedBlock\u003e getBlockRange(long offset, \n+                                                        long length) \n+                                                      throws IOException {\n+    final List\u003cLocatedBlock\u003e blocks;\n+    if (locatedBlocks.isLastBlockComplete()) {\n+      blocks \u003d getFinalizedBlockRange(offset, length);\n+    }\n+    else {\n+      final boolean readPastEnd \u003d offset + length \u003e locatedBlocks.getFileLength();\n+      /* if requested length is greater than current file length\n+       * then, it could possibly be from the current block being\n+       * written to. First get the finalized block range and then\n+       * if necessary, get the length of last block being written\n+       * to.\n+       */\n+      if (readPastEnd)\n+        length \u003d locatedBlocks.getFileLength() - offset;\n+\n+      blocks \u003d getFinalizedBlockRange(offset, length);\n+      /* requested length is greater than what finalized blocks \n+       * have.\n+       */\n+      if (readPastEnd)\n+        blocks.add(locatedBlocks.getLastLocatedBlock());\n+    }\n+    return blocks;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized List\u003cLocatedBlock\u003e getBlockRange(long offset, \n                                                        long length) \n                                                      throws IOException {\n    final List\u003cLocatedBlock\u003e blocks;\n    if (locatedBlocks.isLastBlockComplete()) {\n      blocks \u003d getFinalizedBlockRange(offset, length);\n    }\n    else {\n      final boolean readPastEnd \u003d offset + length \u003e locatedBlocks.getFileLength();\n      /* if requested length is greater than current file length\n       * then, it could possibly be from the current block being\n       * written to. First get the finalized block range and then\n       * if necessary, get the length of last block being written\n       * to.\n       */\n      if (readPastEnd)\n        length \u003d locatedBlocks.getFileLength() - offset;\n\n      blocks \u003d getFinalizedBlockRange(offset, length);\n      /* requested length is greater than what finalized blocks \n       * have.\n       */\n      if (readPastEnd)\n        blocks.add(locatedBlocks.getLastLocatedBlock());\n    }\n    return blocks;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSInputStream.java"
    }
  }
}