{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StreamXmlRecordReader.java",
  "functionName": "fastReadUntilMatch",
  "functionId": "fastReadUntilMatch___textPat-String__includePat-boolean__outBufOrNull-DataOutputBuffer",
  "sourceFilePath": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/mapreduce/StreamXmlRecordReader.java",
  "functionStartLine": 247,
  "functionEndLine": 285,
  "numCommitsSeen": 1,
  "timeTaken": 442,
  "changeHistory": [
    "9c87911c4ab35faead3e4729951b2855fb20e3b0"
  ],
  "changeHistoryShort": {
    "9c87911c4ab35faead3e4729951b2855fb20e3b0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9c87911c4ab35faead3e4729951b2855fb20e3b0": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8521. Port StreamInputFormat to new Map Reduce API (madhukara phatak via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360238 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/12 8:44 AM",
      "commitName": "9c87911c4ab35faead3e4729951b2855fb20e3b0",
      "commitAuthor": "Robert Joseph Evans",
      "diff": "@@ -0,0 +1,39 @@\n+  boolean fastReadUntilMatch(String textPat, boolean includePat,\n+      DataOutputBuffer outBufOrNull) throws IOException {\n+    byte[] cpat \u003d textPat.getBytes(\"UTF-8\");\n+    int m \u003d 0;\n+    boolean match \u003d false;\n+    int msup \u003d cpat.length;\n+    int LL \u003d 120000 * 10;\n+\n+    bin_.mark(LL); // large number to invalidate mark\n+    while (true) {\n+      int b \u003d bin_.read();\n+      if (b \u003d\u003d -1)\n+        break;\n+\n+      byte c \u003d (byte) b; // this assumes eight-bit matching. OK with UTF-8\n+      if (c \u003d\u003d cpat[m]) {\n+        m++;\n+        if (m \u003d\u003d msup) {\n+          match \u003d true;\n+          break;\n+        }\n+      } else {\n+        bin_.mark(LL); // rest mark so we could jump back if we found a match\n+        if (outBufOrNull !\u003d null) {\n+          outBufOrNull.write(cpat, 0, m);\n+          outBufOrNull.write(c);\n+        }\n+        pos_ +\u003d m + 1; // skip m chars, +1 for \u0027c\u0027\n+        m \u003d 0;\n+      }\n+    }\n+    if (!includePat \u0026\u0026 match) {\n+      bin_.reset();\n+    } else if (outBufOrNull !\u003d null) {\n+      outBufOrNull.write(cpat);\n+      pos_ +\u003d msup;\n+    }\n+    return match;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  boolean fastReadUntilMatch(String textPat, boolean includePat,\n      DataOutputBuffer outBufOrNull) throws IOException {\n    byte[] cpat \u003d textPat.getBytes(\"UTF-8\");\n    int m \u003d 0;\n    boolean match \u003d false;\n    int msup \u003d cpat.length;\n    int LL \u003d 120000 * 10;\n\n    bin_.mark(LL); // large number to invalidate mark\n    while (true) {\n      int b \u003d bin_.read();\n      if (b \u003d\u003d -1)\n        break;\n\n      byte c \u003d (byte) b; // this assumes eight-bit matching. OK with UTF-8\n      if (c \u003d\u003d cpat[m]) {\n        m++;\n        if (m \u003d\u003d msup) {\n          match \u003d true;\n          break;\n        }\n      } else {\n        bin_.mark(LL); // rest mark so we could jump back if we found a match\n        if (outBufOrNull !\u003d null) {\n          outBufOrNull.write(cpat, 0, m);\n          outBufOrNull.write(c);\n        }\n        pos_ +\u003d m + 1; // skip m chars, +1 for \u0027c\u0027\n        m \u003d 0;\n      }\n    }\n    if (!includePat \u0026\u0026 match) {\n      bin_.reset();\n    } else if (outBufOrNull !\u003d null) {\n      outBufOrNull.write(cpat);\n      pos_ +\u003d msup;\n    }\n    return match;\n  }",
      "path": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/mapreduce/StreamXmlRecordReader.java"
    }
  }
}