{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Mkdir.java",
  "functionName": "processNonexistentPath",
  "functionId": "processNonexistentPath___item-PathData",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Mkdir.java",
  "functionStartLine": 70,
  "functionEndLine": 90,
  "numCommitsSeen": 26,
  "timeTaken": 3354,
  "changeHistory": [
    "587a8eeec8145a8831a36e66b3c45fbff1e3c4c9",
    "aa664d72595ddfcb1a1bf082381bb222e59db354",
    "be150a17b15d15f5de6d4839d5e805e8d6c57850",
    "f3796224bfdfd88e2428cc8a9915bdfdc62b48f3",
    "0bfa7d79d0fc5f127fd785e8ba3bc83dab8df991",
    "4c51dacd521b774a1f7c9220d755933c50639225",
    "52c8271bf1b5da57c0fc33a9bf2f6f1a2b50065b",
    "483ca92d9b0a8c590089f5704db987b0977d7c8b",
    "c7feccd7edb0a4f7051befcdafbafbdf7c221f74",
    "889a863da13bdc493036671f8db14095a5ca484e",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "a5290c9eca69027cff2448d05fee6983cbb54cd7",
    "369a20391555f9c0ca9bd5384435be12770942aa",
    "99ebad8e757e90f6e036fc213d99f82dec7b80d7",
    "a65753ddac34a114c51cb0010ee39a9af48b4f9e"
  ],
  "changeHistoryShort": {
    "587a8eeec8145a8831a36e66b3c45fbff1e3c4c9": "Ybodychange",
    "aa664d72595ddfcb1a1bf082381bb222e59db354": "Ybodychange",
    "be150a17b15d15f5de6d4839d5e805e8d6c57850": "Ybodychange",
    "f3796224bfdfd88e2428cc8a9915bdfdc62b48f3": "Ybodychange",
    "0bfa7d79d0fc5f127fd785e8ba3bc83dab8df991": "Ybodychange",
    "4c51dacd521b774a1f7c9220d755933c50639225": "Ybodychange",
    "52c8271bf1b5da57c0fc33a9bf2f6f1a2b50065b": "Ybodychange",
    "483ca92d9b0a8c590089f5704db987b0977d7c8b": "Ybodychange",
    "c7feccd7edb0a4f7051befcdafbafbdf7c221f74": "Ybodychange",
    "889a863da13bdc493036671f8db14095a5ca484e": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "a5290c9eca69027cff2448d05fee6983cbb54cd7": "Ybodychange",
    "369a20391555f9c0ca9bd5384435be12770942aa": "Ymultichange(Ymovefromfile,Ybodychange,Yrename)",
    "99ebad8e757e90f6e036fc213d99f82dec7b80d7": "Ybodychange",
    "a65753ddac34a114c51cb0010ee39a9af48b4f9e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "587a8eeec8145a8831a36e66b3c45fbff1e3c4c9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14874. Fix TestHDFSCLI and TestDFSShell test break because of logging change in mkdir (#1522). Contributed by Gabor Bota.\n\n",
      "commitDate": "25/09/19 9:45 PM",
      "commitName": "587a8eeec8145a8831a36e66b3c45fbff1e3c4c9",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "23/09/19 4:29 AM",
      "commitNameOld": "aa664d72595ddfcb1a1bf082381bb222e59db354",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 2.72,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,21 @@\n   protected void processNonexistentPath(PathData item) throws IOException {\n     if (!createParents) {\n       // check if parent exists. this is complicated because getParent(a/b/c/) returns a/b/c, but\n       // we want a/b\n       final Path itemPath \u003d new Path(item.path.toString());\n       final Path itemParentPath \u003d itemPath.getParent();\n \n       if(itemParentPath \u003d\u003d null) {\n         throw new PathNotFoundException(String.format(\n             \"Item: %s parent\u0027s path is null. This can happen if mkdir is \" +\n                 \"called on root, so there\u0027s no parent.\", itemPath.toString()));\n       }\n \n       if (!item.fs.exists(itemParentPath)) {\n-        throw new PathNotFoundException(String.format(\n-            \"mkdir failed for path: %s. Item parent path not found: %s.\",\n-        itemPath.toString(), itemParentPath.toString()));\n+        throw new PathNotFoundException(itemParentPath.toString());\n       }\n     }\n     if (!item.fs.mkdirs(item.path)) {\n       throw new PathIOException(item.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    if (!createParents) {\n      // check if parent exists. this is complicated because getParent(a/b/c/) returns a/b/c, but\n      // we want a/b\n      final Path itemPath \u003d new Path(item.path.toString());\n      final Path itemParentPath \u003d itemPath.getParent();\n\n      if(itemParentPath \u003d\u003d null) {\n        throw new PathNotFoundException(String.format(\n            \"Item: %s parent\u0027s path is null. This can happen if mkdir is \" +\n                \"called on root, so there\u0027s no parent.\", itemPath.toString()));\n      }\n\n      if (!item.fs.exists(itemParentPath)) {\n        throw new PathNotFoundException(itemParentPath.toString());\n      }\n    }\n    if (!item.fs.mkdirs(item.path)) {\n      throw new PathIOException(item.toString());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Mkdir.java",
      "extendedDetails": {}
    },
    "aa664d72595ddfcb1a1bf082381bb222e59db354": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16138. hadoop fs mkdir / of nonexistent abfs container raises NPE (#1302). Contributed by Gabor Bota.\n\nChange-Id: I2f637865c871e400b95fe7ddaa24bf99fa192023\r\n",
      "commitDate": "23/09/19 4:29 AM",
      "commitName": "aa664d72595ddfcb1a1bf082381bb222e59db354",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "26/07/18 10:24 AM",
      "commitNameOld": "be150a17b15d15f5de6d4839d5e805e8d6c57850",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 423.75,
      "commitsBetweenForRepo": 3341,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,23 @@\n   protected void processNonexistentPath(PathData item) throws IOException {\n     if (!createParents) {\n       // check if parent exists. this is complicated because getParent(a/b/c/) returns a/b/c, but\n       // we want a/b\n       final Path itemPath \u003d new Path(item.path.toString());\n       final Path itemParentPath \u003d itemPath.getParent();\n+\n+      if(itemParentPath \u003d\u003d null) {\n+        throw new PathNotFoundException(String.format(\n+            \"Item: %s parent\u0027s path is null. This can happen if mkdir is \" +\n+                \"called on root, so there\u0027s no parent.\", itemPath.toString()));\n+      }\n+\n       if (!item.fs.exists(itemParentPath)) {\n-        throw new PathNotFoundException(itemParentPath.toString());\n+        throw new PathNotFoundException(String.format(\n+            \"mkdir failed for path: %s. Item parent path not found: %s.\",\n+        itemPath.toString(), itemParentPath.toString()));\n       }\n     }\n     if (!item.fs.mkdirs(item.path)) {\n       throw new PathIOException(item.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    if (!createParents) {\n      // check if parent exists. this is complicated because getParent(a/b/c/) returns a/b/c, but\n      // we want a/b\n      final Path itemPath \u003d new Path(item.path.toString());\n      final Path itemParentPath \u003d itemPath.getParent();\n\n      if(itemParentPath \u003d\u003d null) {\n        throw new PathNotFoundException(String.format(\n            \"Item: %s parent\u0027s path is null. This can happen if mkdir is \" +\n                \"called on root, so there\u0027s no parent.\", itemPath.toString()));\n      }\n\n      if (!item.fs.exists(itemParentPath)) {\n        throw new PathNotFoundException(String.format(\n            \"mkdir failed for path: %s. Item parent path not found: %s.\",\n        itemPath.toString(), itemParentPath.toString()));\n      }\n    }\n    if (!item.fs.mkdirs(item.path)) {\n      throw new PathIOException(item.toString());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Mkdir.java",
      "extendedDetails": {}
    },
    "be150a17b15d15f5de6d4839d5e805e8d6c57850": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13622. mkdir should print the parent directory in the error message when parent directories do not exist. Contributed by Shweta.\n",
      "commitDate": "26/07/18 10:24 AM",
      "commitName": "be150a17b15d15f5de6d4839d5e805e8d6c57850",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "01/07/15 7:47 PM",
      "commitNameOld": "f3796224bfdfd88e2428cc8a9915bdfdc62b48f3",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 1120.61,
      "commitsBetweenForRepo": 8138,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,14 @@\n   protected void processNonexistentPath(PathData item) throws IOException {\n-    // check if parent exists. this is complicated because getParent(a/b/c/) returns a/b/c, but\n-    // we want a/b\n-    if (!createParents \u0026\u0026\n-        !item.fs.exists(new Path(item.path.toString()).getParent())) {\n-      throw new PathNotFoundException(item.toString());\n+    if (!createParents) {\n+      // check if parent exists. this is complicated because getParent(a/b/c/) returns a/b/c, but\n+      // we want a/b\n+      final Path itemPath \u003d new Path(item.path.toString());\n+      final Path itemParentPath \u003d itemPath.getParent();\n+      if (!item.fs.exists(itemParentPath)) {\n+        throw new PathNotFoundException(itemParentPath.toString());\n+      }\n     }\n     if (!item.fs.mkdirs(item.path)) {\n       throw new PathIOException(item.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    if (!createParents) {\n      // check if parent exists. this is complicated because getParent(a/b/c/) returns a/b/c, but\n      // we want a/b\n      final Path itemPath \u003d new Path(item.path.toString());\n      final Path itemParentPath \u003d itemPath.getParent();\n      if (!item.fs.exists(itemParentPath)) {\n        throw new PathNotFoundException(itemParentPath.toString());\n      }\n    }\n    if (!item.fs.mkdirs(item.path)) {\n      throw new PathIOException(item.toString());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Mkdir.java",
      "extendedDetails": {}
    },
    "f3796224bfdfd88e2428cc8a9915bdfdc62b48f3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12172. FsShell mkdir -p makes an unnecessary check for the existence of the parent. Contributed by Chris Nauroth.\n",
      "commitDate": "01/07/15 7:47 PM",
      "commitName": "f3796224bfdfd88e2428cc8a9915bdfdc62b48f3",
      "commitAuthor": "cnauroth",
      "commitDateOld": "12/06/14 11:39 PM",
      "commitNameOld": "be3fdd1c40140e24df1a5414cf91537862b66e82",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 383.84,
      "commitsBetweenForRepo": 3312,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,11 @@\n   protected void processNonexistentPath(PathData item) throws IOException {\n     // check if parent exists. this is complicated because getParent(a/b/c/) returns a/b/c, but\n     // we want a/b\n-    if (!item.fs.exists(new Path(item.path.toString()).getParent()) \u0026\u0026 !createParents) {\n+    if (!createParents \u0026\u0026\n+        !item.fs.exists(new Path(item.path.toString()).getParent())) {\n       throw new PathNotFoundException(item.toString());\n     }\n     if (!item.fs.mkdirs(item.path)) {\n       throw new PathIOException(item.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    // check if parent exists. this is complicated because getParent(a/b/c/) returns a/b/c, but\n    // we want a/b\n    if (!createParents \u0026\u0026\n        !item.fs.exists(new Path(item.path.toString()).getParent())) {\n      throw new PathNotFoundException(item.toString());\n    }\n    if (!item.fs.mkdirs(item.path)) {\n      throw new PathIOException(item.toString());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Mkdir.java",
      "extendedDetails": {}
    },
    "0bfa7d79d0fc5f127fd785e8ba3bc83dab8df991": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8551. fs -mkdir creates parent directories without the -p option (John George via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1365588 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/12 6:56 AM",
      "commitName": "0bfa7d79d0fc5f127fd785e8ba3bc83dab8df991",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "19/07/12 2:15 PM",
      "commitNameOld": "4c51dacd521b774a1f7c9220d755933c50639225",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 5.69,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,10 @@\n   protected void processNonexistentPath(PathData item) throws IOException {\n-    // TODO: should use createParents to control intermediate dir creation \n+    // check if parent exists. this is complicated because getParent(a/b/c/) returns a/b/c, but\n+    // we want a/b\n+    if (!item.fs.exists(new Path(item.path.toString()).getParent()) \u0026\u0026 !createParents) {\n+      throw new PathNotFoundException(item.toString());\n+    }\n     if (!item.fs.mkdirs(item.path)) {\n       throw new PathIOException(item.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    // check if parent exists. this is complicated because getParent(a/b/c/) returns a/b/c, but\n    // we want a/b\n    if (!item.fs.exists(new Path(item.path.toString()).getParent()) \u0026\u0026 !createParents) {\n      throw new PathNotFoundException(item.toString());\n    }\n    if (!item.fs.mkdirs(item.path)) {\n      throw new PathIOException(item.toString());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Mkdir.java",
      "extendedDetails": {}
    },
    "4c51dacd521b774a1f7c9220d755933c50639225": {
      "type": "Ybodychange",
      "commitMessage": "Reverting HADOOP-8551. fs -mkdir creates parent directories without the -p option \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1363547 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 2:15 PM",
      "commitName": "4c51dacd521b774a1f7c9220d755933c50639225",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "19/07/12 10:46 AM",
      "commitNameOld": "52c8271bf1b5da57c0fc33a9bf2f6f1a2b50065b",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,6 @@\n   protected void processNonexistentPath(PathData item) throws IOException {\n-    if (!item.parentExists() \u0026\u0026 !createParents) {\n-      throw new PathNotFoundException(item.toString());\n-    }\n+    // TODO: should use createParents to control intermediate dir creation \n     if (!item.fs.mkdirs(item.path)) {\n       throw new PathIOException(item.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    // TODO: should use createParents to control intermediate dir creation \n    if (!item.fs.mkdirs(item.path)) {\n      throw new PathIOException(item.toString());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Mkdir.java",
      "extendedDetails": {}
    },
    "52c8271bf1b5da57c0fc33a9bf2f6f1a2b50065b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8551. fs -mkdir creates parent directories without the -p option (Daryn Sharp and John George via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1363435 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 10:46 AM",
      "commitName": "52c8271bf1b5da57c0fc33a9bf2f6f1a2b50065b",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "15/03/12 6:28 PM",
      "commitNameOld": "483ca92d9b0a8c590089f5704db987b0977d7c8b",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 125.68,
      "commitsBetweenForRepo": 791,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,8 @@\n   protected void processNonexistentPath(PathData item) throws IOException {\n-    // TODO: should use createParents to control intermediate dir creation \n+    if (!item.parentExists() \u0026\u0026 !createParents) {\n+      throw new PathNotFoundException(item.toString());\n+    }\n     if (!item.fs.mkdirs(item.path)) {\n       throw new PathIOException(item.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    if (!item.parentExists() \u0026\u0026 !createParents) {\n      throw new PathNotFoundException(item.toString());\n    }\n    if (!item.fs.mkdirs(item.path)) {\n      throw new PathIOException(item.toString());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Mkdir.java",
      "extendedDetails": {}
    },
    "483ca92d9b0a8c590089f5704db987b0977d7c8b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8175. Add -p option to mkdir in FsShell.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1301303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/03/12 6:28 PM",
      "commitName": "483ca92d9b0a8c590089f5704db987b0977d7c8b",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "15/03/12 4:53 PM",
      "commitNameOld": "c7feccd7edb0a4f7051befcdafbafbdf7c221f74",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,6 @@\n   protected void processNonexistentPath(PathData item) throws IOException {\n+    // TODO: should use createParents to control intermediate dir creation \n     if (!item.fs.mkdirs(item.path)) {\n       throw new PathIOException(item.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    // TODO: should use createParents to control intermediate dir creation \n    if (!item.fs.mkdirs(item.path)) {\n      throw new PathIOException(item.toString());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Mkdir.java",
      "extendedDetails": {}
    },
    "c7feccd7edb0a4f7051befcdafbafbdf7c221f74": {
      "type": "Ybodychange",
      "commitMessage": "Revert previous commit r1301273 for HADOOP-8175.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1301282 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/03/12 4:53 PM",
      "commitName": "c7feccd7edb0a4f7051befcdafbafbdf7c221f74",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "15/03/12 4:42 PM",
      "commitNameOld": "889a863da13bdc493036671f8db14095a5ca484e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,5 @@\n   protected void processNonexistentPath(PathData item) throws IOException {\n-    // TODO: should use createParents to control intermediate dir creation \n     if (!item.fs.mkdirs(item.path)) {\n       throw new PathIOException(item.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    if (!item.fs.mkdirs(item.path)) {\n      throw new PathIOException(item.toString());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Mkdir.java",
      "extendedDetails": {}
    },
    "889a863da13bdc493036671f8db14095a5ca484e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8175. FsShell: Add -p option to mkdir.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1301273 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/03/12 4:42 PM",
      "commitName": "889a863da13bdc493036671f8db14095a5ca484e",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 203.98,
      "commitsBetweenForRepo": 1447,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,6 @@\n   protected void processNonexistentPath(PathData item) throws IOException {\n+    // TODO: should use createParents to control intermediate dir creation \n     if (!item.fs.mkdirs(item.path)) {\n       throw new PathIOException(item.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    // TODO: should use createParents to control intermediate dir creation \n    if (!item.fs.mkdirs(item.path)) {\n      throw new PathIOException(item.toString());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Mkdir.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    if (!item.fs.mkdirs(item.path)) {\n      throw new PathIOException(item.toString());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Mkdir.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Mkdir.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Mkdir.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    if (!item.fs.mkdirs(item.path)) {\n      throw new PathIOException(item.toString());\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Mkdir.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/shell/Mkdir.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Mkdir.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    if (!item.fs.mkdirs(item.path)) {\n      throw new PathIOException(item.toString());\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/shell/Mkdir.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/shell/Mkdir.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/shell/Mkdir.java"
      }
    },
    "a5290c9eca69027cff2448d05fee6983cbb54cd7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7271. Standardize shell command error messages.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1101653 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/05/11 2:29 PM",
      "commitName": "a5290c9eca69027cff2448d05fee6983cbb54cd7",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "04/05/11 2:34 PM",
      "commitNameOld": "369a20391555f9c0ca9bd5384435be12770942aa",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 6.0,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,5 @@\n   protected void processNonexistentPath(PathData item) throws IOException {\n     if (!item.fs.mkdirs(item.path)) {\n-      throw new IOException(\"failed to create \" + item);\n+      throw new PathIOException(item.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    if (!item.fs.mkdirs(item.path)) {\n      throw new PathIOException(item.toString());\n    }\n  }",
      "path": "src/java/org/apache/hadoop/fs/shell/Mkdir.java",
      "extendedDetails": {}
    },
    "369a20391555f9c0ca9bd5384435be12770942aa": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yrename)",
      "commitMessage": "HADOOP-7236. Refactor the mkdir command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099612 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/11 2:34 PM",
      "commitName": "369a20391555f9c0ca9bd5384435be12770942aa",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-7236. Refactor the mkdir command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099612 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/11 2:34 PM",
          "commitName": "369a20391555f9c0ca9bd5384435be12770942aa",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "03/05/11 3:16 PM",
          "commitNameOld": "78a7b9768dcde23face399d9924f6168e4b1c1a8",
          "commitAuthorOld": "Jitendra Nath Pandey",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,5 @@\n-  protected void processNonexistentPathArgument(PathData item)\n-  throws IOException {\n-    // TODO: this should be more posix-like: ex. \"No such file or directory\"\n-    throw new FileNotFoundException(getFnfText(item.path));\n+  protected void processNonexistentPath(PathData item) throws IOException {\n+    if (!item.fs.mkdirs(item.path)) {\n+      throw new IOException(\"failed to create \" + item);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    if (!item.fs.mkdirs(item.path)) {\n      throw new IOException(\"failed to create \" + item);\n    }\n  }",
          "path": "src/java/org/apache/hadoop/fs/shell/Mkdir.java",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/hadoop/fs/shell/Command.java",
            "newPath": "src/java/org/apache/hadoop/fs/shell/Mkdir.java",
            "oldMethodName": "processNonexistentPathArgument",
            "newMethodName": "processNonexistentPath"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-7236. Refactor the mkdir command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099612 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/11 2:34 PM",
          "commitName": "369a20391555f9c0ca9bd5384435be12770942aa",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "03/05/11 3:16 PM",
          "commitNameOld": "78a7b9768dcde23face399d9924f6168e4b1c1a8",
          "commitAuthorOld": "Jitendra Nath Pandey",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,5 @@\n-  protected void processNonexistentPathArgument(PathData item)\n-  throws IOException {\n-    // TODO: this should be more posix-like: ex. \"No such file or directory\"\n-    throw new FileNotFoundException(getFnfText(item.path));\n+  protected void processNonexistentPath(PathData item) throws IOException {\n+    if (!item.fs.mkdirs(item.path)) {\n+      throw new IOException(\"failed to create \" + item);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    if (!item.fs.mkdirs(item.path)) {\n      throw new IOException(\"failed to create \" + item);\n    }\n  }",
          "path": "src/java/org/apache/hadoop/fs/shell/Mkdir.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-7236. Refactor the mkdir command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099612 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/11 2:34 PM",
          "commitName": "369a20391555f9c0ca9bd5384435be12770942aa",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "03/05/11 3:16 PM",
          "commitNameOld": "78a7b9768dcde23face399d9924f6168e4b1c1a8",
          "commitAuthorOld": "Jitendra Nath Pandey",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,5 @@\n-  protected void processNonexistentPathArgument(PathData item)\n-  throws IOException {\n-    // TODO: this should be more posix-like: ex. \"No such file or directory\"\n-    throw new FileNotFoundException(getFnfText(item.path));\n+  protected void processNonexistentPath(PathData item) throws IOException {\n+    if (!item.fs.mkdirs(item.path)) {\n+      throw new IOException(\"failed to create \" + item);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void processNonexistentPath(PathData item) throws IOException {\n    if (!item.fs.mkdirs(item.path)) {\n      throw new IOException(\"failed to create \" + item);\n    }\n  }",
          "path": "src/java/org/apache/hadoop/fs/shell/Mkdir.java",
          "extendedDetails": {
            "oldValue": "processNonexistentPathArgument",
            "newValue": "processNonexistentPath"
          }
        }
      ]
    },
    "99ebad8e757e90f6e036fc213d99f82dec7b80d7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7233. Refactor ls to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1095761 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/04/11 9:05 AM",
      "commitName": "99ebad8e757e90f6e036fc213d99f82dec7b80d7",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "13/04/11 1:23 PM",
      "commitNameOld": "d358eb75b79b17f85ae9fd831a0bd065b87bf924",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 7.82,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,5 @@\n   protected void processNonexistentPathArgument(PathData item)\n   throws IOException {\n     // TODO: this should be more posix-like: ex. \"No such file or directory\"\n-    throw new FileNotFoundException(\"Can not find listing for \" + item);\n+    throw new FileNotFoundException(getFnfText(item.path));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processNonexistentPathArgument(PathData item)\n  throws IOException {\n    // TODO: this should be more posix-like: ex. \"No such file or directory\"\n    throw new FileNotFoundException(getFnfText(item.path));\n  }",
      "path": "src/java/org/apache/hadoop/fs/shell/Command.java",
      "extendedDetails": {}
    },
    "a65753ddac34a114c51cb0010ee39a9af48b4f9e": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7202. Improve shell Command base class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1090039 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/04/11 2:59 PM",
      "commitName": "a65753ddac34a114c51cb0010ee39a9af48b4f9e",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,5 @@\n+  protected void processNonexistentPathArgument(PathData item)\n+  throws IOException {\n+    // TODO: this should be more posix-like: ex. \"No such file or directory\"\n+    throw new FileNotFoundException(\"Can not find listing for \" + item);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processNonexistentPathArgument(PathData item)\n  throws IOException {\n    // TODO: this should be more posix-like: ex. \"No such file or directory\"\n    throw new FileNotFoundException(\"Can not find listing for \" + item);\n  }",
      "path": "src/java/org/apache/hadoop/fs/shell/Command.java"
    }
  }
}