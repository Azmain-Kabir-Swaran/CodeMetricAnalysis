{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IterativePlanner.java",
  "functionName": "initialize",
  "functionId": "initialize___plan-Plan__reservationId-ReservationId__reservation-ReservationDefinition",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java",
  "functionStartLine": 202,
  "functionEndLine": 230,
  "numCommitsSeen": 9,
  "timeTaken": 3576,
  "changeHistory": [
    "e6e614e380ed1d746973b50f666a9c40d272073e",
    "a3a615eeab8c14ccdc548311097e62a916963dc5",
    "5cf5c41a895f5ab8bf6270089f8cfdea50573a97",
    "da1016365aba1cee9c06771ab142d077379f27af",
    "156f24ead00436faad5d4aeef327a546392cd265"
  ],
  "changeHistoryShort": {
    "e6e614e380ed1d746973b50f666a9c40d272073e": "Ybodychange",
    "a3a615eeab8c14ccdc548311097e62a916963dc5": "Ybodychange",
    "5cf5c41a895f5ab8bf6270089f8cfdea50573a97": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "da1016365aba1cee9c06771ab142d077379f27af": "Ybodychange",
    "156f24ead00436faad5d4aeef327a546392cd265": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e6e614e380ed1d746973b50f666a9c40d272073e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5329. Placement Agent enhancements required to support recurring reservations in ReservationSystem. (Carlo Curino via Subru).\n",
      "commitDate": "04/10/17 7:28 PM",
      "commitName": "e6e614e380ed1d746973b50f666a9c40d272073e",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/05/17 4:01 PM",
      "commitNameOld": "a3a615eeab8c14ccdc548311097e62a916963dc5",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 156.14,
      "commitsBetweenForRepo": 1057,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   protected void initialize(Plan plan, ReservationId reservationId,\n       ReservationDefinition reservation) throws PlanningException {\n \n     // Get plan step \u0026 capacity\n     capacity \u003d plan.getTotalCapacity();\n     step \u003d plan.getStep();\n \n     // Get job parameters (type, arrival time \u0026 deadline)\n     jobType \u003d reservation.getReservationRequests().getInterpreter();\n     jobArrival \u003d stepRoundUp(reservation.getArrival(), step);\n     jobDeadline \u003d stepRoundDown(reservation.getDeadline(), step);\n \n     // Initialize the plan modifications\n     planModifications \u003d\n         new RLESparseResourceAllocation(plan.getResourceCalculator());\n \n     // Dirty read of plan load\n \n     // planLoads are not used by other StageAllocators... and don\u0027t deal\n     // well with huge reservation ranges\n     planLoads \u003d plan.getCumulativeLoadOverTime(jobArrival, jobDeadline);\n     ReservationAllocation oldRes \u003d plan.getReservationById(reservationId);\n     if (oldRes !\u003d null) {\n-      planLoads \u003d\n-          RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n-              plan.getTotalCapacity(), planLoads,\n-              oldRes.getResourcesOverTime(), RLEOperator.subtract, jobArrival,\n-              jobDeadline);\n+      planLoads \u003d RLESparseResourceAllocation.merge(\n+          plan.getResourceCalculator(), plan.getTotalCapacity(), planLoads,\n+          oldRes.getResourcesOverTime(jobArrival, jobDeadline),\n+          RLEOperator.subtract, jobArrival, jobDeadline);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initialize(Plan plan, ReservationId reservationId,\n      ReservationDefinition reservation) throws PlanningException {\n\n    // Get plan step \u0026 capacity\n    capacity \u003d plan.getTotalCapacity();\n    step \u003d plan.getStep();\n\n    // Get job parameters (type, arrival time \u0026 deadline)\n    jobType \u003d reservation.getReservationRequests().getInterpreter();\n    jobArrival \u003d stepRoundUp(reservation.getArrival(), step);\n    jobDeadline \u003d stepRoundDown(reservation.getDeadline(), step);\n\n    // Initialize the plan modifications\n    planModifications \u003d\n        new RLESparseResourceAllocation(plan.getResourceCalculator());\n\n    // Dirty read of plan load\n\n    // planLoads are not used by other StageAllocators... and don\u0027t deal\n    // well with huge reservation ranges\n    planLoads \u003d plan.getCumulativeLoadOverTime(jobArrival, jobDeadline);\n    ReservationAllocation oldRes \u003d plan.getReservationById(reservationId);\n    if (oldRes !\u003d null) {\n      planLoads \u003d RLESparseResourceAllocation.merge(\n          plan.getResourceCalculator(), plan.getTotalCapacity(), planLoads,\n          oldRes.getResourcesOverTime(jobArrival, jobDeadline),\n          RLEOperator.subtract, jobArrival, jobDeadline);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java",
      "extendedDetails": {}
    },
    "a3a615eeab8c14ccdc548311097e62a916963dc5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
      "commitDate": "01/05/17 4:01 PM",
      "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "10/02/16 9:11 AM",
      "commitNameOld": "5cf5c41a895f5ab8bf6270089f8cfdea50573a97",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 446.24,
      "commitsBetweenForRepo": 2940,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,30 @@\n   protected void initialize(Plan plan, ReservationId reservationId,\n       ReservationDefinition reservation) throws PlanningException {\n \n     // Get plan step \u0026 capacity\n     capacity \u003d plan.getTotalCapacity();\n     step \u003d plan.getStep();\n \n     // Get job parameters (type, arrival time \u0026 deadline)\n     jobType \u003d reservation.getReservationRequests().getInterpreter();\n     jobArrival \u003d stepRoundUp(reservation.getArrival(), step);\n     jobDeadline \u003d stepRoundDown(reservation.getDeadline(), step);\n \n     // Initialize the plan modifications\n     planModifications \u003d\n         new RLESparseResourceAllocation(plan.getResourceCalculator());\n \n     // Dirty read of plan load\n \n     // planLoads are not used by other StageAllocators... and don\u0027t deal\n     // well with huge reservation ranges\n-    if (this.algStageAllocator instanceof StageAllocatorLowCostAligned) {\n-      planLoads \u003d getAllLoadsInInterval(plan, jobArrival, jobDeadline);\n-      ReservationAllocation oldRes \u003d plan.getReservationById(reservationId);\n-      if (oldRes !\u003d null) {\n-        planModifications \u003d\n-            RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n-                plan.getTotalCapacity(), planModifications,\n-                oldRes.getResourcesOverTime(), RLEOperator.subtract,\n-                jobArrival, jobDeadline);\n-      }\n+    planLoads \u003d plan.getCumulativeLoadOverTime(jobArrival, jobDeadline);\n+    ReservationAllocation oldRes \u003d plan.getReservationById(reservationId);\n+    if (oldRes !\u003d null) {\n+      planLoads \u003d\n+          RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n+              plan.getTotalCapacity(), planLoads,\n+              oldRes.getResourcesOverTime(), RLEOperator.subtract, jobArrival,\n+              jobDeadline);\n     }\n-\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initialize(Plan plan, ReservationId reservationId,\n      ReservationDefinition reservation) throws PlanningException {\n\n    // Get plan step \u0026 capacity\n    capacity \u003d plan.getTotalCapacity();\n    step \u003d plan.getStep();\n\n    // Get job parameters (type, arrival time \u0026 deadline)\n    jobType \u003d reservation.getReservationRequests().getInterpreter();\n    jobArrival \u003d stepRoundUp(reservation.getArrival(), step);\n    jobDeadline \u003d stepRoundDown(reservation.getDeadline(), step);\n\n    // Initialize the plan modifications\n    planModifications \u003d\n        new RLESparseResourceAllocation(plan.getResourceCalculator());\n\n    // Dirty read of plan load\n\n    // planLoads are not used by other StageAllocators... and don\u0027t deal\n    // well with huge reservation ranges\n    planLoads \u003d plan.getCumulativeLoadOverTime(jobArrival, jobDeadline);\n    ReservationAllocation oldRes \u003d plan.getReservationById(reservationId);\n    if (oldRes !\u003d null) {\n      planLoads \u003d\n          RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n              plan.getTotalCapacity(), planLoads,\n              oldRes.getResourcesOverTime(), RLEOperator.subtract, jobArrival,\n              jobDeadline);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java",
      "extendedDetails": {}
    },
    "5cf5c41a895f5ab8bf6270089f8cfdea50573a97": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-4360. Improve GreedyReservationAgent to support \"early\" allocations, and performance improvements (curino via asuresh)\n",
      "commitDate": "10/02/16 9:11 AM",
      "commitName": "5cf5c41a895f5ab8bf6270089f8cfdea50573a97",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4360. Improve GreedyReservationAgent to support \"early\" allocations, and performance improvements (curino via asuresh)\n",
          "commitDate": "10/02/16 9:11 AM",
          "commitName": "5cf5c41a895f5ab8bf6270089f8cfdea50573a97",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/12/15 9:26 PM",
          "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 66.49,
          "commitsBetweenForRepo": 408,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,33 @@\n-  protected void initialize(Plan plan, ReservationDefinition reservation) {\n+  protected void initialize(Plan plan, ReservationId reservationId,\n+      ReservationDefinition reservation) throws PlanningException {\n \n     // Get plan step \u0026 capacity\n     capacity \u003d plan.getTotalCapacity();\n     step \u003d plan.getStep();\n \n     // Get job parameters (type, arrival time \u0026 deadline)\n     jobType \u003d reservation.getReservationRequests().getInterpreter();\n     jobArrival \u003d stepRoundUp(reservation.getArrival(), step);\n     jobDeadline \u003d stepRoundDown(reservation.getDeadline(), step);\n \n-    // Dirty read of plan load\n-    planLoads \u003d getAllLoadsInInterval(plan, jobArrival, jobDeadline);\n-\n     // Initialize the plan modifications\n     planModifications \u003d\n         new RLESparseResourceAllocation(plan.getResourceCalculator());\n \n+    // Dirty read of plan load\n+\n+    // planLoads are not used by other StageAllocators... and don\u0027t deal\n+    // well with huge reservation ranges\n+    if (this.algStageAllocator instanceof StageAllocatorLowCostAligned) {\n+      planLoads \u003d getAllLoadsInInterval(plan, jobArrival, jobDeadline);\n+      ReservationAllocation oldRes \u003d plan.getReservationById(reservationId);\n+      if (oldRes !\u003d null) {\n+        planModifications \u003d\n+            RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n+                plan.getTotalCapacity(), planModifications,\n+                oldRes.getResourcesOverTime(), RLEOperator.subtract,\n+                jobArrival, jobDeadline);\n+      }\n+    }\n+\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void initialize(Plan plan, ReservationId reservationId,\n      ReservationDefinition reservation) throws PlanningException {\n\n    // Get plan step \u0026 capacity\n    capacity \u003d plan.getTotalCapacity();\n    step \u003d plan.getStep();\n\n    // Get job parameters (type, arrival time \u0026 deadline)\n    jobType \u003d reservation.getReservationRequests().getInterpreter();\n    jobArrival \u003d stepRoundUp(reservation.getArrival(), step);\n    jobDeadline \u003d stepRoundDown(reservation.getDeadline(), step);\n\n    // Initialize the plan modifications\n    planModifications \u003d\n        new RLESparseResourceAllocation(plan.getResourceCalculator());\n\n    // Dirty read of plan load\n\n    // planLoads are not used by other StageAllocators... and don\u0027t deal\n    // well with huge reservation ranges\n    if (this.algStageAllocator instanceof StageAllocatorLowCostAligned) {\n      planLoads \u003d getAllLoadsInInterval(plan, jobArrival, jobDeadline);\n      ReservationAllocation oldRes \u003d plan.getReservationById(reservationId);\n      if (oldRes !\u003d null) {\n        planModifications \u003d\n            RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n                plan.getTotalCapacity(), planModifications,\n                oldRes.getResourcesOverTime(), RLEOperator.subtract,\n                jobArrival, jobDeadline);\n      }\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java",
          "extendedDetails": {
            "oldValue": "[plan-Plan, reservation-ReservationDefinition]",
            "newValue": "[plan-Plan, reservationId-ReservationId, reservation-ReservationDefinition]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-4360. Improve GreedyReservationAgent to support \"early\" allocations, and performance improvements (curino via asuresh)\n",
          "commitDate": "10/02/16 9:11 AM",
          "commitName": "5cf5c41a895f5ab8bf6270089f8cfdea50573a97",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/12/15 9:26 PM",
          "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 66.49,
          "commitsBetweenForRepo": 408,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,33 @@\n-  protected void initialize(Plan plan, ReservationDefinition reservation) {\n+  protected void initialize(Plan plan, ReservationId reservationId,\n+      ReservationDefinition reservation) throws PlanningException {\n \n     // Get plan step \u0026 capacity\n     capacity \u003d plan.getTotalCapacity();\n     step \u003d plan.getStep();\n \n     // Get job parameters (type, arrival time \u0026 deadline)\n     jobType \u003d reservation.getReservationRequests().getInterpreter();\n     jobArrival \u003d stepRoundUp(reservation.getArrival(), step);\n     jobDeadline \u003d stepRoundDown(reservation.getDeadline(), step);\n \n-    // Dirty read of plan load\n-    planLoads \u003d getAllLoadsInInterval(plan, jobArrival, jobDeadline);\n-\n     // Initialize the plan modifications\n     planModifications \u003d\n         new RLESparseResourceAllocation(plan.getResourceCalculator());\n \n+    // Dirty read of plan load\n+\n+    // planLoads are not used by other StageAllocators... and don\u0027t deal\n+    // well with huge reservation ranges\n+    if (this.algStageAllocator instanceof StageAllocatorLowCostAligned) {\n+      planLoads \u003d getAllLoadsInInterval(plan, jobArrival, jobDeadline);\n+      ReservationAllocation oldRes \u003d plan.getReservationById(reservationId);\n+      if (oldRes !\u003d null) {\n+        planModifications \u003d\n+            RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n+                plan.getTotalCapacity(), planModifications,\n+                oldRes.getResourcesOverTime(), RLEOperator.subtract,\n+                jobArrival, jobDeadline);\n+      }\n+    }\n+\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void initialize(Plan plan, ReservationId reservationId,\n      ReservationDefinition reservation) throws PlanningException {\n\n    // Get plan step \u0026 capacity\n    capacity \u003d plan.getTotalCapacity();\n    step \u003d plan.getStep();\n\n    // Get job parameters (type, arrival time \u0026 deadline)\n    jobType \u003d reservation.getReservationRequests().getInterpreter();\n    jobArrival \u003d stepRoundUp(reservation.getArrival(), step);\n    jobDeadline \u003d stepRoundDown(reservation.getDeadline(), step);\n\n    // Initialize the plan modifications\n    planModifications \u003d\n        new RLESparseResourceAllocation(plan.getResourceCalculator());\n\n    // Dirty read of plan load\n\n    // planLoads are not used by other StageAllocators... and don\u0027t deal\n    // well with huge reservation ranges\n    if (this.algStageAllocator instanceof StageAllocatorLowCostAligned) {\n      planLoads \u003d getAllLoadsInInterval(plan, jobArrival, jobDeadline);\n      ReservationAllocation oldRes \u003d plan.getReservationById(reservationId);\n      if (oldRes !\u003d null) {\n        planModifications \u003d\n            RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n                plan.getTotalCapacity(), planModifications,\n                oldRes.getResourcesOverTime(), RLEOperator.subtract,\n                jobArrival, jobDeadline);\n      }\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[PlanningException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4360. Improve GreedyReservationAgent to support \"early\" allocations, and performance improvements (curino via asuresh)\n",
          "commitDate": "10/02/16 9:11 AM",
          "commitName": "5cf5c41a895f5ab8bf6270089f8cfdea50573a97",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/12/15 9:26 PM",
          "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 66.49,
          "commitsBetweenForRepo": 408,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,33 @@\n-  protected void initialize(Plan plan, ReservationDefinition reservation) {\n+  protected void initialize(Plan plan, ReservationId reservationId,\n+      ReservationDefinition reservation) throws PlanningException {\n \n     // Get plan step \u0026 capacity\n     capacity \u003d plan.getTotalCapacity();\n     step \u003d plan.getStep();\n \n     // Get job parameters (type, arrival time \u0026 deadline)\n     jobType \u003d reservation.getReservationRequests().getInterpreter();\n     jobArrival \u003d stepRoundUp(reservation.getArrival(), step);\n     jobDeadline \u003d stepRoundDown(reservation.getDeadline(), step);\n \n-    // Dirty read of plan load\n-    planLoads \u003d getAllLoadsInInterval(plan, jobArrival, jobDeadline);\n-\n     // Initialize the plan modifications\n     planModifications \u003d\n         new RLESparseResourceAllocation(plan.getResourceCalculator());\n \n+    // Dirty read of plan load\n+\n+    // planLoads are not used by other StageAllocators... and don\u0027t deal\n+    // well with huge reservation ranges\n+    if (this.algStageAllocator instanceof StageAllocatorLowCostAligned) {\n+      planLoads \u003d getAllLoadsInInterval(plan, jobArrival, jobDeadline);\n+      ReservationAllocation oldRes \u003d plan.getReservationById(reservationId);\n+      if (oldRes !\u003d null) {\n+        planModifications \u003d\n+            RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n+                plan.getTotalCapacity(), planModifications,\n+                oldRes.getResourcesOverTime(), RLEOperator.subtract,\n+                jobArrival, jobDeadline);\n+      }\n+    }\n+\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void initialize(Plan plan, ReservationId reservationId,\n      ReservationDefinition reservation) throws PlanningException {\n\n    // Get plan step \u0026 capacity\n    capacity \u003d plan.getTotalCapacity();\n    step \u003d plan.getStep();\n\n    // Get job parameters (type, arrival time \u0026 deadline)\n    jobType \u003d reservation.getReservationRequests().getInterpreter();\n    jobArrival \u003d stepRoundUp(reservation.getArrival(), step);\n    jobDeadline \u003d stepRoundDown(reservation.getDeadline(), step);\n\n    // Initialize the plan modifications\n    planModifications \u003d\n        new RLESparseResourceAllocation(plan.getResourceCalculator());\n\n    // Dirty read of plan load\n\n    // planLoads are not used by other StageAllocators... and don\u0027t deal\n    // well with huge reservation ranges\n    if (this.algStageAllocator instanceof StageAllocatorLowCostAligned) {\n      planLoads \u003d getAllLoadsInInterval(plan, jobArrival, jobDeadline);\n      ReservationAllocation oldRes \u003d plan.getReservationById(reservationId);\n      if (oldRes !\u003d null) {\n        planModifications \u003d\n            RLESparseResourceAllocation.merge(plan.getResourceCalculator(),\n                plan.getTotalCapacity(), planModifications,\n                oldRes.getResourcesOverTime(), RLEOperator.subtract,\n                jobArrival, jobDeadline);\n      }\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java",
          "extendedDetails": {}
        }
      ]
    },
    "da1016365aba1cee9c06771ab142d077379f27af": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3454. Add efficient merge operation to RLESparseResourceAllocation (Carlo Curino via asuresh)\n",
      "commitDate": "21/11/15 9:59 AM",
      "commitName": "da1016365aba1cee9c06771ab142d077379f27af",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "25/07/15 7:39 AM",
      "commitNameOld": "156f24ead00436faad5d4aeef327a546392cd265",
      "commitAuthorOld": "ccurino",
      "daysBetweenCommits": 119.14,
      "commitsBetweenForRepo": 803,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,19 @@\n   protected void initialize(Plan plan, ReservationDefinition reservation) {\n \n     // Get plan step \u0026 capacity\n     capacity \u003d plan.getTotalCapacity();\n     step \u003d plan.getStep();\n \n     // Get job parameters (type, arrival time \u0026 deadline)\n     jobType \u003d reservation.getReservationRequests().getInterpreter();\n     jobArrival \u003d stepRoundUp(reservation.getArrival(), step);\n     jobDeadline \u003d stepRoundDown(reservation.getDeadline(), step);\n \n     // Dirty read of plan load\n     planLoads \u003d getAllLoadsInInterval(plan, jobArrival, jobDeadline);\n \n     // Initialize the plan modifications\n     planModifications \u003d\n-        new RLESparseResourceAllocation(plan.getResourceCalculator(),\n-            plan.getMinimumAllocation());\n+        new RLESparseResourceAllocation(plan.getResourceCalculator());\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initialize(Plan plan, ReservationDefinition reservation) {\n\n    // Get plan step \u0026 capacity\n    capacity \u003d plan.getTotalCapacity();\n    step \u003d plan.getStep();\n\n    // Get job parameters (type, arrival time \u0026 deadline)\n    jobType \u003d reservation.getReservationRequests().getInterpreter();\n    jobArrival \u003d stepRoundUp(reservation.getArrival(), step);\n    jobDeadline \u003d stepRoundDown(reservation.getDeadline(), step);\n\n    // Dirty read of plan load\n    planLoads \u003d getAllLoadsInInterval(plan, jobArrival, jobDeadline);\n\n    // Initialize the plan modifications\n    planModifications \u003d\n        new RLESparseResourceAllocation(plan.getResourceCalculator());\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java",
      "extendedDetails": {}
    },
    "156f24ead00436faad5d4aeef327a546392cd265": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3656. LowCost: A Cost-Based Placement Agent for YARN Reservations. (Jonathan Yaniv and Ishai Menache via curino)\n",
      "commitDate": "25/07/15 7:39 AM",
      "commitName": "156f24ead00436faad5d4aeef327a546392cd265",
      "commitAuthor": "ccurino",
      "diff": "@@ -0,0 +1,20 @@\n+  protected void initialize(Plan plan, ReservationDefinition reservation) {\n+\n+    // Get plan step \u0026 capacity\n+    capacity \u003d plan.getTotalCapacity();\n+    step \u003d plan.getStep();\n+\n+    // Get job parameters (type, arrival time \u0026 deadline)\n+    jobType \u003d reservation.getReservationRequests().getInterpreter();\n+    jobArrival \u003d stepRoundUp(reservation.getArrival(), step);\n+    jobDeadline \u003d stepRoundDown(reservation.getDeadline(), step);\n+\n+    // Dirty read of plan load\n+    planLoads \u003d getAllLoadsInInterval(plan, jobArrival, jobDeadline);\n+\n+    // Initialize the plan modifications\n+    planModifications \u003d\n+        new RLESparseResourceAllocation(plan.getResourceCalculator(),\n+            plan.getMinimumAllocation());\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initialize(Plan plan, ReservationDefinition reservation) {\n\n    // Get plan step \u0026 capacity\n    capacity \u003d plan.getTotalCapacity();\n    step \u003d plan.getStep();\n\n    // Get job parameters (type, arrival time \u0026 deadline)\n    jobType \u003d reservation.getReservationRequests().getInterpreter();\n    jobArrival \u003d stepRoundUp(reservation.getArrival(), step);\n    jobDeadline \u003d stepRoundDown(reservation.getDeadline(), step);\n\n    // Dirty read of plan load\n    planLoads \u003d getAllLoadsInInterval(plan, jobArrival, jobDeadline);\n\n    // Initialize the plan modifications\n    planModifications \u003d\n        new RLESparseResourceAllocation(plan.getResourceCalculator(),\n            plan.getMinimumAllocation());\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java"
    }
  }
}