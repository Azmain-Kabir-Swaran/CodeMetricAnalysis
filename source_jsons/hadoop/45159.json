{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "YarnClientImpl.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
  "functionStartLine": 182,
  "functionEndLine": 233,
  "numCommitsSeen": 88,
  "timeTaken": 6187,
  "changeHistory": [
    "ee3355be3cd1cd956296a1b79b264177ff139ce6",
    "d09058b2fd18803d12f0835fdf78aef5e0b99c90",
    "36e158ae98ef8b72a7a9f63102b714e025cafcc5",
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
    "37b4acf7cee1f05599a84bbb1ebf07979a71f82f",
    "09520cb439f8b002e3f2f3d8f5080ffc34f4bd5c",
    "26de4f0de789f58736d1dc383125cffb54debdd0",
    "6f10434a5ad965d50352602ce31a9fce353cb90c",
    "71fbb474f531f60c5d908cf724f18f90dfd5fa9f",
    "af8b09af75b252aa75b86ca42323c5b21eb41ee2",
    "e167e585e9dd5c86ae763c257d62fdcc83260200",
    "3f79e4962483b371a139607aee7525c64a14876e",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
    "ca125153b319a8f5d75585d25cb0f37ae717be01",
    "b774d7b3de81cda4165a0e86bc2267fda8546cb5",
    "33b5a81509ed08e88bb692682e75fb779f8e2e19",
    "7ef54faad4bee4346da082a3f8cc5d6ea405d74a",
    "0928502029ef141759008997335ea2cd836a7154",
    "a1ee2145cf4769ffb4d47f775b64e4a91f29d73f",
    "dd8fc7e499200476f44a3d1d38127f5c47c9eefb",
    "87c5d243db050ac9ce0c53e0905930573132221e",
    "10e704c50ba1fa601329d0fee099993e8c3725a6"
  ],
  "changeHistoryShort": {
    "ee3355be3cd1cd956296a1b79b264177ff139ce6": "Ybodychange",
    "d09058b2fd18803d12f0835fdf78aef5e0b99c90": "Ybodychange",
    "36e158ae98ef8b72a7a9f63102b714e025cafcc5": "Ybodychange",
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": "Ybodychange",
    "37b4acf7cee1f05599a84bbb1ebf07979a71f82f": "Ybodychange",
    "09520cb439f8b002e3f2f3d8f5080ffc34f4bd5c": "Ybodychange",
    "26de4f0de789f58736d1dc383125cffb54debdd0": "Ybodychange",
    "6f10434a5ad965d50352602ce31a9fce353cb90c": "Ybodychange",
    "71fbb474f531f60c5d908cf724f18f90dfd5fa9f": "Ybodychange",
    "af8b09af75b252aa75b86ca42323c5b21eb41ee2": "Ybodychange",
    "e167e585e9dd5c86ae763c257d62fdcc83260200": "Ybodychange",
    "3f79e4962483b371a139607aee7525c64a14876e": "Ybodychange",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": "Ybodychange",
    "ca125153b319a8f5d75585d25cb0f37ae717be01": "Ybodychange",
    "b774d7b3de81cda4165a0e86bc2267fda8546cb5": "Ybodychange",
    "33b5a81509ed08e88bb692682e75fb779f8e2e19": "Ybodychange",
    "7ef54faad4bee4346da082a3f8cc5d6ea405d74a": "Yfilerename",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "a1ee2145cf4769ffb4d47f775b64e4a91f29d73f": "Ybodychange",
    "dd8fc7e499200476f44a3d1d38127f5c47c9eefb": "Ybodychange",
    "87c5d243db050ac9ce0c53e0905930573132221e": "Yfilerename",
    "10e704c50ba1fa601329d0fee099993e8c3725a6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ee3355be3cd1cd956296a1b79b264177ff139ce6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8303. YarnClient should contact TimelineReader for application/attempt/container report.\n",
      "commitDate": "16/11/18 4:28 AM",
      "commitName": "ee3355be3cd1cd956296a1b79b264177ff139ce6",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "8cf6a9a2bde9d4ccad95a514885634792889ec7f",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 65.08,
      "commitsBetweenForRepo": 633,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,52 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     asyncApiPollIntervalMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     asyncApiPollTimeoutMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n             YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n     submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n     if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n         !\u003d null) {\n       submitPollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     }\n \n     if (YarnConfiguration.timelineServiceV1Enabled(conf)) {\n       timelineV1ServiceEnabled \u003d true;\n       timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n       timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n     }\n \n+    if (YarnConfiguration.timelineServiceV2Enabled(conf)) {\n+      timelineV2ServiceEnabled \u003d true;\n+    }\n+\n     // The AHSClientService is enabled by default when we start the\n     // TimelineServer which means we are able to get history information\n     // for applications/applicationAttempts/containers by using ahsClient\n     // when the TimelineServer is running.\n     if (timelineV1ServiceEnabled || conf.getBoolean(\n         YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n         YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       historyServiceEnabled \u003d true;\n       historyClient \u003d AHSClient.createAHSClient();\n       historyClient.init(conf);\n     }\n \n+    if (timelineV2ServiceEnabled) {\n+      ahsV2Client \u003d AHSClient.createAHSv2Client();\n+      ahsV2Client.init(conf);\n+    }\n+\n     timelineServiceBestEffort \u003d conf.getBoolean(\n         YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\n \n     loadResourceTypesFromServer \u003d conf.getBoolean(\n         YarnConfiguration.YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    asyncApiPollIntervalMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    asyncApiPollTimeoutMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n            YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n    submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n        !\u003d null) {\n      submitPollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    }\n\n    if (YarnConfiguration.timelineServiceV1Enabled(conf)) {\n      timelineV1ServiceEnabled \u003d true;\n      timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n      timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n    }\n\n    if (YarnConfiguration.timelineServiceV2Enabled(conf)) {\n      timelineV2ServiceEnabled \u003d true;\n    }\n\n    // The AHSClientService is enabled by default when we start the\n    // TimelineServer which means we are able to get history information\n    // for applications/applicationAttempts/containers by using ahsClient\n    // when the TimelineServer is running.\n    if (timelineV1ServiceEnabled || conf.getBoolean(\n        YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n        YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      historyServiceEnabled \u003d true;\n      historyClient \u003d AHSClient.createAHSClient();\n      historyClient.init(conf);\n    }\n\n    if (timelineV2ServiceEnabled) {\n      ahsV2Client \u003d AHSClient.createAHSv2Client();\n      ahsV2Client.init(conf);\n    }\n\n    timelineServiceBestEffort \u003d conf.getBoolean(\n        YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\n\n    loadResourceTypesFromServer \u003d conf.getBoolean(\n        YarnConfiguration.YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "d09058b2fd18803d12f0835fdf78aef5e0b99c90": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6736. Consider writing to both ats v1 \u0026 v2 from RM for smoother upgrades. Contributed by Aaron Gresch.\n",
      "commitDate": "15/01/18 6:28 PM",
      "commitName": "d09058b2fd18803d12f0835fdf78aef5e0b99c90",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "31/10/17 1:09 AM",
      "commitNameOld": "c02d2ba50db8a355ea03081c3984b2ea0c375a3f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 76.76,
      "commitsBetweenForRepo": 513,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,43 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     asyncApiPollIntervalMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     asyncApiPollTimeoutMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n             YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n     submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n     if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n         !\u003d null) {\n       submitPollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     }\n \n-    float timelineServiceVersion \u003d\n-        conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n-            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n-    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n-        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)\n-        \u0026\u0026 ((Float.compare(timelineServiceVersion, 1.0f) \u003d\u003d 0)\n-            || (Float.compare(timelineServiceVersion, 1.5f) \u003d\u003d 0))) {\n+    if (YarnConfiguration.timelineServiceV1Enabled(conf)) {\n       timelineV1ServiceEnabled \u003d true;\n       timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n       timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n     }\n \n     // The AHSClientService is enabled by default when we start the\n     // TimelineServer which means we are able to get history information\n     // for applications/applicationAttempts/containers by using ahsClient\n     // when the TimelineServer is running.\n     if (timelineV1ServiceEnabled || conf.getBoolean(\n         YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n         YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       historyServiceEnabled \u003d true;\n       historyClient \u003d AHSClient.createAHSClient();\n       historyClient.init(conf);\n     }\n \n     timelineServiceBestEffort \u003d conf.getBoolean(\n         YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\n \n     loadResourceTypesFromServer \u003d conf.getBoolean(\n         YarnConfiguration.YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER);\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    asyncApiPollIntervalMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    asyncApiPollTimeoutMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n            YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n    submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n        !\u003d null) {\n      submitPollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    }\n\n    if (YarnConfiguration.timelineServiceV1Enabled(conf)) {\n      timelineV1ServiceEnabled \u003d true;\n      timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n      timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n    }\n\n    // The AHSClientService is enabled by default when we start the\n    // TimelineServer which means we are able to get history information\n    // for applications/applicationAttempts/containers by using ahsClient\n    // when the TimelineServer is running.\n    if (timelineV1ServiceEnabled || conf.getBoolean(\n        YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n        YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      historyServiceEnabled \u003d true;\n      historyClient \u003d AHSClient.createAHSClient();\n      historyClient.init(conf);\n    }\n\n    timelineServiceBestEffort \u003d conf.getBoolean(\n        YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\n\n    loadResourceTypesFromServer \u003d conf.getBoolean(\n        YarnConfiguration.YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "36e158ae98ef8b72a7a9f63102b714e025cafcc5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7307. Allow client/AM update supported resource types via YARN APIs. (Sunil G via wangda)\n\nChange-Id: I14c5ea7252b7c17e86ab38f692b5f9d43196dbe0\n",
      "commitDate": "26/10/17 8:15 PM",
      "commitName": "36e158ae98ef8b72a7a9f63102b714e025cafcc5",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "df3855541af98a3805958f2b5b9db6be705d52ab",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 44.46,
      "commitsBetweenForRepo": 363,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,49 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     asyncApiPollIntervalMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     asyncApiPollTimeoutMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n             YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n     submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n     if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n         !\u003d null) {\n       submitPollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     }\n \n     float timelineServiceVersion \u003d\n         conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n             YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n     if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)\n         \u0026\u0026 ((Float.compare(timelineServiceVersion, 1.0f) \u003d\u003d 0)\n             || (Float.compare(timelineServiceVersion, 1.5f) \u003d\u003d 0))) {\n       timelineV1ServiceEnabled \u003d true;\n       timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n       timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n     }\n \n     // The AHSClientService is enabled by default when we start the\n     // TimelineServer which means we are able to get history information\n     // for applications/applicationAttempts/containers by using ahsClient\n     // when the TimelineServer is running.\n     if (timelineV1ServiceEnabled || conf.getBoolean(\n         YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n         YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       historyServiceEnabled \u003d true;\n       historyClient \u003d AHSClient.createAHSClient();\n       historyClient.init(conf);\n     }\n \n     timelineServiceBestEffort \u003d conf.getBoolean(\n         YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\n+\n+    loadResourceTypesFromServer \u003d conf.getBoolean(\n+        YarnConfiguration.YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER,\n+        YarnConfiguration.DEFAULT_YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER);\n+\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    asyncApiPollIntervalMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    asyncApiPollTimeoutMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n            YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n    submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n        !\u003d null) {\n      submitPollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    }\n\n    float timelineServiceVersion \u003d\n        conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)\n        \u0026\u0026 ((Float.compare(timelineServiceVersion, 1.0f) \u003d\u003d 0)\n            || (Float.compare(timelineServiceVersion, 1.5f) \u003d\u003d 0))) {\n      timelineV1ServiceEnabled \u003d true;\n      timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n      timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n    }\n\n    // The AHSClientService is enabled by default when we start the\n    // TimelineServer which means we are able to get history information\n    // for applications/applicationAttempts/containers by using ahsClient\n    // when the TimelineServer is running.\n    if (timelineV1ServiceEnabled || conf.getBoolean(\n        YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n        YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      historyServiceEnabled \u003d true;\n      historyClient \u003d AHSClient.createAHSClient();\n      historyClient.init(conf);\n    }\n\n    timelineServiceBestEffort \u003d conf.getBoolean(\n        YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\n\n    loadResourceTypesFromServer \u003d conf.getBoolean(\n        YarnConfiguration.YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER);\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4675. Reorganize TimelineClient and TimelineClientImpl into separate classes for ATSv1.x and ATSv2. Contributed by Naganarasimha G R.\n",
      "commitDate": "16/02/17 11:41 AM",
      "commitName": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "08/02/17 12:59 PM",
      "commitNameOld": "37b4acf7cee1f05599a84bbb1ebf07979a71f82f",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 7.95,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,44 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     asyncApiPollIntervalMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     asyncApiPollTimeoutMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n             YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n     submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n     if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n         !\u003d null) {\n       submitPollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     }\n \n+    float timelineServiceVersion \u003d\n+        conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n+            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n     if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n-        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n-      timelineServiceEnabled \u003d true;\n+        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)\n+        \u0026\u0026 ((Float.compare(timelineServiceVersion, 1.0f) \u003d\u003d 0)\n+            || (Float.compare(timelineServiceVersion, 1.5f) \u003d\u003d 0))) {\n+      timelineV1ServiceEnabled \u003d true;\n       timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n       timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n     }\n \n     // The AHSClientService is enabled by default when we start the\n     // TimelineServer which means we are able to get history information\n     // for applications/applicationAttempts/containers by using ahsClient\n     // when the TimelineServer is running.\n-    if (timelineServiceEnabled || conf.getBoolean(\n+    if (timelineV1ServiceEnabled || conf.getBoolean(\n         YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n         YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       historyServiceEnabled \u003d true;\n       historyClient \u003d AHSClient.createAHSClient();\n       historyClient.init(conf);\n     }\n \n     timelineServiceBestEffort \u003d conf.getBoolean(\n         YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    asyncApiPollIntervalMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    asyncApiPollTimeoutMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n            YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n    submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n        !\u003d null) {\n      submitPollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    }\n\n    float timelineServiceVersion \u003d\n        conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)\n        \u0026\u0026 ((Float.compare(timelineServiceVersion, 1.0f) \u003d\u003d 0)\n            || (Float.compare(timelineServiceVersion, 1.5f) \u003d\u003d 0))) {\n      timelineV1ServiceEnabled \u003d true;\n      timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n      timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n    }\n\n    // The AHSClientService is enabled by default when we start the\n    // TimelineServer which means we are able to get history information\n    // for applications/applicationAttempts/containers by using ahsClient\n    // when the TimelineServer is running.\n    if (timelineV1ServiceEnabled || conf.getBoolean(\n        YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n        YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      historyServiceEnabled \u003d true;\n      historyClient \u003d AHSClient.createAHSClient();\n      historyClient.init(conf);\n    }\n\n    timelineServiceBestEffort \u003d conf.getBoolean(\n        YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "37b4acf7cee1f05599a84bbb1ebf07979a71f82f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6137. Yarn client implicitly invoke ATS client which accesses HDFS. Contributed by Li Lu\n",
      "commitDate": "08/02/17 12:59 PM",
      "commitName": "37b4acf7cee1f05599a84bbb1ebf07979a71f82f",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "05/12/16 11:39 AM",
      "commitNameOld": "43ebff2e354142bddcb42755766a965ae8a503a6",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 65.06,
      "commitsBetweenForRepo": 310,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,39 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     asyncApiPollIntervalMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     asyncApiPollTimeoutMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n             YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n     submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n     if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n         !\u003d null) {\n       submitPollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     }\n \n     if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n-      try {\n-        timelineServiceEnabled \u003d true;\n-        timelineClient \u003d createTimelineClient();\n-        timelineClient.init(conf);\n-        timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n-        timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n-      } catch (NoClassDefFoundError error) {\n-        // When attempt to initiate the timeline client with\n-        // different set of dependencies, it may fail with\n-        // NoClassDefFoundError. When some of them are not compatible\n-        // with timeline server. This is not necessarily a fatal error\n-        // to the client.\n-        LOG.warn(\"Timeline client could not be initialized \"\n-            + \"because dependency missing or incompatible,\"\n-            + \" disabling timeline client.\",\n-            error);\n-        timelineServiceEnabled \u003d false;\n-      }\n+      timelineServiceEnabled \u003d true;\n+      timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n+      timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n     }\n \n     // The AHSClientService is enabled by default when we start the\n     // TimelineServer which means we are able to get history information\n     // for applications/applicationAttempts/containers by using ahsClient\n     // when the TimelineServer is running.\n     if (timelineServiceEnabled || conf.getBoolean(\n         YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n         YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       historyServiceEnabled \u003d true;\n       historyClient \u003d AHSClient.createAHSClient();\n       historyClient.init(conf);\n     }\n \n     timelineServiceBestEffort \u003d conf.getBoolean(\n         YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    asyncApiPollIntervalMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    asyncApiPollTimeoutMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n            YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n    submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n        !\u003d null) {\n      submitPollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    }\n\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n      timelineServiceEnabled \u003d true;\n      timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n      timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n    }\n\n    // The AHSClientService is enabled by default when we start the\n    // TimelineServer which means we are able to get history information\n    // for applications/applicationAttempts/containers by using ahsClient\n    // when the TimelineServer is running.\n    if (timelineServiceEnabled || conf.getBoolean(\n        YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n        YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      historyServiceEnabled \u003d true;\n      historyClient \u003d AHSClient.createAHSClient();\n      historyClient.init(conf);\n    }\n\n    timelineServiceBestEffort \u003d conf.getBoolean(\n        YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "09520cb439f8b002e3f2f3d8f5080ffc34f4bd5c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5271. ATS client doesn\u0027t work with Jersey 2 on the classpath.  Contributed by Weiwei Yang.\n",
      "commitDate": "17/11/16 8:17 PM",
      "commitName": "09520cb439f8b002e3f2f3d8f5080ffc34f4bd5c",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "16/11/16 7:18 PM",
      "commitNameOld": "ce2847e79441881eeca888b581c7be2cc3ac74f4",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,54 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     asyncApiPollIntervalMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     asyncApiPollTimeoutMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n             YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n     submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n     if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n         !\u003d null) {\n       submitPollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     }\n \n     if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n-      timelineServiceEnabled \u003d true;\n-      timelineClient \u003d createTimelineClient();\n-      timelineClient.init(conf);\n-      timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n-      timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n+      try {\n+        timelineServiceEnabled \u003d true;\n+        timelineClient \u003d createTimelineClient();\n+        timelineClient.init(conf);\n+        timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n+        timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n+      } catch (NoClassDefFoundError error) {\n+        // When attempt to initiate the timeline client with\n+        // different set of dependencies, it may fail with\n+        // NoClassDefFoundError. When some of them are not compatible\n+        // with timeline server. This is not necessarily a fatal error\n+        // to the client.\n+        LOG.warn(\"Timeline client could not be initialized \"\n+            + \"because dependency missing or incompatible,\"\n+            + \" disabling timeline client.\",\n+            error);\n+        timelineServiceEnabled \u003d false;\n+      }\n     }\n \n     // The AHSClientService is enabled by default when we start the\n     // TimelineServer which means we are able to get history information\n     // for applications/applicationAttempts/containers by using ahsClient\n     // when the TimelineServer is running.\n     if (timelineServiceEnabled || conf.getBoolean(\n         YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n         YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       historyServiceEnabled \u003d true;\n       historyClient \u003d AHSClient.createAHSClient();\n       historyClient.init(conf);\n     }\n \n     timelineServiceBestEffort \u003d conf.getBoolean(\n         YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    asyncApiPollIntervalMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    asyncApiPollTimeoutMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n            YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n    submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n        !\u003d null) {\n      submitPollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    }\n\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n      try {\n        timelineServiceEnabled \u003d true;\n        timelineClient \u003d createTimelineClient();\n        timelineClient.init(conf);\n        timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n        timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n      } catch (NoClassDefFoundError error) {\n        // When attempt to initiate the timeline client with\n        // different set of dependencies, it may fail with\n        // NoClassDefFoundError. When some of them are not compatible\n        // with timeline server. This is not necessarily a fatal error\n        // to the client.\n        LOG.warn(\"Timeline client could not be initialized \"\n            + \"because dependency missing or incompatible,\"\n            + \" disabling timeline client.\",\n            error);\n        timelineServiceEnabled \u003d false;\n      }\n    }\n\n    // The AHSClientService is enabled by default when we start the\n    // TimelineServer which means we are able to get history information\n    // for applications/applicationAttempts/containers by using ahsClient\n    // when the TimelineServer is running.\n    if (timelineServiceEnabled || conf.getBoolean(\n        YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n        YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      historyServiceEnabled \u003d true;\n      historyClient \u003d AHSClient.createAHSClient();\n      historyClient.init(conf);\n    }\n\n    timelineServiceBestEffort \u003d conf.getBoolean(\n        YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "26de4f0de789f58736d1dc383125cffb54debdd0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5440. Use AHSClient in YarnClient when TimelineServer is running. (Xuan Gong via gtcarrera9)\n",
      "commitDate": "28/07/16 10:23 AM",
      "commitName": "26de4f0de789f58736d1dc383125cffb54debdd0",
      "commitAuthor": "Li Lu",
      "commitDateOld": "06/06/16 2:30 PM",
      "commitNameOld": "4a1cedc010d3fa1d8ef3f2773ca12acadfee5ba5",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 51.83,
      "commitsBetweenForRepo": 465,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,41 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     asyncApiPollIntervalMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     asyncApiPollTimeoutMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n             YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n     submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n     if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n         !\u003d null) {\n       submitPollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     }\n \n-    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n-      YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n-      historyServiceEnabled \u003d true;\n-      historyClient \u003d AHSClient.createAHSClient();\n-      historyClient.init(conf);\n-    }\n-\n     if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n       timelineServiceEnabled \u003d true;\n       timelineClient \u003d createTimelineClient();\n       timelineClient.init(conf);\n       timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n       timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n     }\n \n+    // The AHSClientService is enabled by default when we start the\n+    // TimelineServer which means we are able to get history information\n+    // for applications/applicationAttempts/containers by using ahsClient\n+    // when the TimelineServer is running.\n+    if (timelineServiceEnabled || conf.getBoolean(\n+        YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n+        YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n+      historyServiceEnabled \u003d true;\n+      historyClient \u003d AHSClient.createAHSClient();\n+      historyClient.init(conf);\n+    }\n+\n     timelineServiceBestEffort \u003d conf.getBoolean(\n         YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    asyncApiPollIntervalMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    asyncApiPollTimeoutMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n            YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n    submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n        !\u003d null) {\n      submitPollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    }\n\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n      timelineServiceEnabled \u003d true;\n      timelineClient \u003d createTimelineClient();\n      timelineClient.init(conf);\n      timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n      timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n    }\n\n    // The AHSClientService is enabled by default when we start the\n    // TimelineServer which means we are able to get history information\n    // for applications/applicationAttempts/containers by using ahsClient\n    // when the TimelineServer is running.\n    if (timelineServiceEnabled || conf.getBoolean(\n        YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n        YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      historyServiceEnabled \u003d true;\n      historyClient \u003d AHSClient.createAHSClient();\n      historyClient.init(conf);\n    }\n\n    timelineServiceBestEffort \u003d conf.getBoolean(\n        YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "6f10434a5ad965d50352602ce31a9fce353cb90c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3144. Configuration for making delegation token failures to timeline server not-fatal. Contributed by Jonathan Eagles\n",
      "commitDate": "06/02/15 12:55 PM",
      "commitName": "6f10434a5ad965d50352602ce31a9fce353cb90c",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "04/02/15 4:02 PM",
      "commitNameOld": "30510cff75d3bf4c030c215318b5611600a5b4ee",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 1.87,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,36 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     asyncApiPollIntervalMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     asyncApiPollTimeoutMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n             YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n     submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n     if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n         !\u003d null) {\n       submitPollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     }\n \n     if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n       YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       historyServiceEnabled \u003d true;\n       historyClient \u003d AHSClient.createAHSClient();\n       historyClient.init(conf);\n     }\n \n     if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n       timelineServiceEnabled \u003d true;\n-      timelineClient \u003d TimelineClient.createTimelineClient();\n+      timelineClient \u003d createTimelineClient();\n       timelineClient.init(conf);\n       timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n       timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n     }\n+\n+    timelineServiceBestEffort \u003d conf.getBoolean(\n+        YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,\n+        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    asyncApiPollIntervalMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    asyncApiPollTimeoutMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n            YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n    submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n        !\u003d null) {\n      submitPollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    }\n\n    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n      YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      historyServiceEnabled \u003d true;\n      historyClient \u003d AHSClient.createAHSClient();\n      historyClient.init(conf);\n    }\n\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n      timelineServiceEnabled \u003d true;\n      timelineClient \u003d createTimelineClient();\n      timelineClient.init(conf);\n      timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n      timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n    }\n\n    timelineServiceBestEffort \u003d conf.getBoolean(\n        YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "71fbb474f531f60c5d908cf724f18f90dfd5fa9f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2798. Fixed YarnClient to populate the renewer correctly for Timeline delegation tokens. Contributed by Zhijie Shen.\n",
      "commitDate": "03/11/14 12:49 PM",
      "commitName": "71fbb474f531f60c5d908cf724f18f90dfd5fa9f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/10/14 1:16 PM",
      "commitNameOld": "1b4be918664b09272b120bc42de3e5fc02d79047",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 3.02,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     asyncApiPollIntervalMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     asyncApiPollTimeoutMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n             YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n     submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n     if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n         !\u003d null) {\n       submitPollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     }\n \n     if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n       YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       historyServiceEnabled \u003d true;\n       historyClient \u003d AHSClient.createAHSClient();\n       historyClient.init(conf);\n     }\n \n     if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n       timelineServiceEnabled \u003d true;\n       timelineClient \u003d TimelineClient.createTimelineClient();\n       timelineClient.init(conf);\n+      timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n       timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    asyncApiPollIntervalMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    asyncApiPollTimeoutMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n            YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n    submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n        !\u003d null) {\n      submitPollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    }\n\n    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n      YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      historyServiceEnabled \u003d true;\n      historyClient \u003d AHSClient.createAHSClient();\n      historyClient.init(conf);\n    }\n\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n      timelineServiceEnabled \u003d true;\n      timelineClient \u003d TimelineClient.createTimelineClient();\n      timelineClient.init(conf);\n      timelineDTRenewer \u003d getTimelineDelegationTokenRenewer(conf);\n      timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "af8b09af75b252aa75b86ca42323c5b21eb41ee2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1936. Added security support for the Timeline Client. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1597153 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 11:47 AM",
      "commitName": "af8b09af75b252aa75b86ca42323c5b21eb41ee2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/03/14 12:42 AM",
      "commitNameOld": "6af044bb75fe3ddf184841483cce5e222ad1853a",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 71.46,
      "commitsBetweenForRepo": 453,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,31 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     asyncApiPollIntervalMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     asyncApiPollTimeoutMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n             YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n     submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n     if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n         !\u003d null) {\n       submitPollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     }\n \n     if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n       YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       historyServiceEnabled \u003d true;\n-      historyClient \u003d AHSClientImpl.createAHSClient();\n-      historyClient.init(getConfig());\n+      historyClient \u003d AHSClient.createAHSClient();\n+      historyClient.init(conf);\n     }\n \n+    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n+        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n+      timelineServiceEnabled \u003d true;\n+      timelineClient \u003d TimelineClient.createTimelineClient();\n+      timelineClient.init(conf);\n+      timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n+    }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    asyncApiPollIntervalMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    asyncApiPollTimeoutMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n            YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n    submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n        !\u003d null) {\n      submitPollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    }\n\n    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n      YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      historyServiceEnabled \u003d true;\n      historyClient \u003d AHSClient.createAHSClient();\n      historyClient.init(conf);\n    }\n\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n      timelineServiceEnabled \u003d true;\n      timelineClient \u003d TimelineClient.createTimelineClient();\n      timelineClient.init(conf);\n      timelineService \u003d TimelineUtils.buildTimelineTokenService(conf);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "e167e585e9dd5c86ae763c257d62fdcc83260200": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1749. Updated application-history related configs to reflect the latest reality and to be consistently named. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570948 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/02/14 6:04 PM",
      "commitName": "e167e585e9dd5c86ae763c257d62fdcc83260200",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/02/14 10:35 AM",
      "commitNameOld": "c79cc3a3140e390eb40eb4b3ba89fff5d4ecd5ee",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 15.31,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     asyncApiPollIntervalMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     asyncApiPollTimeoutMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n             YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n     submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n     if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n         !\u003d null) {\n       submitPollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     }\n \n-    if (conf.getBoolean(YarnConfiguration.YARN_HISTORY_SERVICE_ENABLED,\n-      YarnConfiguration.DEFAULT_YARN_HISTORY_SERVICE_ENABLED)) {\n+    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n+      YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       historyServiceEnabled \u003d true;\n       historyClient \u003d AHSClientImpl.createAHSClient();\n       historyClient.init(getConfig());\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    asyncApiPollIntervalMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    asyncApiPollTimeoutMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n            YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n    submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n        !\u003d null) {\n      submitPollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    }\n\n    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n      YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      historyServiceEnabled \u003d true;\n      historyClient \u003d AHSClientImpl.createAHSClient();\n      historyClient.init(getConfig());\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "3f79e4962483b371a139607aee7525c64a14876e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1630. Introduce timeout for async polling operations in YarnClientImpl (Aditya Acharya via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1562289 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/01/14 2:27 PM",
      "commitName": "3f79e4962483b371a139607aee7525c64a14876e",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "25/01/14 8:51 PM",
      "commitNameOld": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.73,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,24 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     asyncApiPollIntervalMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n+    asyncApiPollTimeoutMillis \u003d\n+        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n+            YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n     submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n     if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n         !\u003d null) {\n       submitPollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     }\n \n     if (conf.getBoolean(YarnConfiguration.YARN_HISTORY_SERVICE_ENABLED,\n       YarnConfiguration.DEFAULT_YARN_HISTORY_SERVICE_ENABLED)) {\n       historyServiceEnabled \u003d true;\n       historyClient \u003d AHSClientImpl.createAHSClient();\n       historyClient.init(getConfig());\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    asyncApiPollIntervalMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    asyncApiPollTimeoutMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS,\n            YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\n    submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n        !\u003d null) {\n      submitPollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    }\n\n    if (conf.getBoolean(YarnConfiguration.YARN_HISTORY_SERVICE_ENABLED,\n      YarnConfiguration.DEFAULT_YARN_HISTORY_SERVICE_ENABLED)) {\n      historyServiceEnabled \u003d true;\n      historyClient \u003d AHSClientImpl.createAHSClient();\n      historyClient.init(getConfig());\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-321. Merging YARN-321 branch to trunk.\nsvn merge ../branches/YARN-321\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561452 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 8:51 PM",
      "commitName": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/12/13 2:32 PM",
      "commitNameOld": "ca125153b319a8f5d75585d25cb0f37ae717be01",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 39.26,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,21 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     asyncApiPollIntervalMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n     if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n         !\u003d null) {\n       submitPollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     }\n+\n+    if (conf.getBoolean(YarnConfiguration.YARN_HISTORY_SERVICE_ENABLED,\n+      YarnConfiguration.DEFAULT_YARN_HISTORY_SERVICE_ENABLED)) {\n+      historyServiceEnabled \u003d true;\n+      historyClient \u003d AHSClientImpl.createAHSClient();\n+      historyClient.init(getConfig());\n+    }\n+\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    asyncApiPollIntervalMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n        !\u003d null) {\n      submitPollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    }\n\n    if (conf.getBoolean(YarnConfiguration.YARN_HISTORY_SERVICE_ENABLED,\n      YarnConfiguration.DEFAULT_YARN_HISTORY_SERVICE_ENABLED)) {\n      historyServiceEnabled \u003d true;\n      historyClient \u003d AHSClientImpl.createAHSClient();\n      historyClient.init(getConfig());\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "ca125153b319a8f5d75585d25cb0f37ae717be01": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1028. Added FailoverProxyProvider capability to ResourceManager to help with RM failover. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551739 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/13 2:32 PM",
      "commitName": "ca125153b319a8f5d75585d25cb0f37ae717be01",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/12/13 6:16 PM",
      "commitNameOld": "b774d7b3de81cda4165a0e86bc2267fda8546cb5",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.84,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,13 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n-    this.rmAddress \u003d getRmAddress(conf);\n     asyncApiPollIntervalMillis \u003d\n         conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n           YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n     if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n         !\u003d null) {\n       submitPollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n     }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    asyncApiPollIntervalMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n        !\u003d null) {\n      submitPollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "b774d7b3de81cda4165a0e86bc2267fda8546cb5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1446. Changed client API to retry killing application till RM acknowledges so as to account for RM crashes/failover. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551444 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/12/13 6:16 PM",
      "commitName": "b774d7b3de81cda4165a0e86bc2267fda8546cb5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/08/13 2:16 PM",
      "commitNameOld": "962da4dcc74d23c7ce78164dcde38ea5aaf3dd68",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 114.21,
      "commitsBetweenForRepo": 737,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,14 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.rmAddress \u003d getRmAddress(conf);\n-    statePollIntervalMillis \u003d conf.getLong(\n+    asyncApiPollIntervalMillis \u003d\n+        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n+          YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n+    submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n+    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n+        !\u003d null) {\n+      submitPollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n-        YarnConfiguration.DEFAULT_YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS);\n+        YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n+    }\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.rmAddress \u003d getRmAddress(conf);\n    asyncApiPollIntervalMillis \u003d\n        conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    submitPollIntervalMillis \u003d asyncApiPollIntervalMillis;\n    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS)\n        !\u003d null) {\n      submitPollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\n    }\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "33b5a81509ed08e88bb692682e75fb779f8e2e19": {
      "type": "Ybodychange",
      "commitMessage": "YARN-513. Create common proxy client for communicating with RM (Xuan Gong \u0026 Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503933 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 3:47 PM",
      "commitName": "33b5a81509ed08e88bb692682e75fb779f8e2e19",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "09/07/13 4:01 PM",
      "commitNameOld": "e2cce7bd26cb943225a0d4ffb6f674e1b8ee39ae",
      "commitAuthorOld": "Hitesh Shah",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,7 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n-    if (this.rmAddress \u003d\u003d null) {\n-      this.rmAddress \u003d getRmAddress(conf);\n-    }\n+    this.rmAddress \u003d getRmAddress(conf);\n     statePollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.rmAddress \u003d getRmAddress(conf);\n    statePollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "7ef54faad4bee4346da082a3f8cc5d6ea405d74a": {
      "type": "Yfilerename",
      "commitMessage": "YARN-834. Fixed annotations for yarn-client module, reorganized packages and clearly differentiated *Async apis. Contributed by Arun C Murthy and Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494017 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 9:02 PM",
      "commitName": "7ef54faad4bee4346da082a3f8cc5d6ea405d74a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/06/13 8:10 PM",
      "commitNameOld": "2b14656ab5050dd75935b64681cdc25fb49db94f",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    if (this.rmAddress \u003d\u003d null) {\n      this.rmAddress \u003d getRmAddress(conf);\n    }\n    statePollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/YarnClientImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java"
      }
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,9 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     if (this.rmAddress \u003d\u003d null) {\n       this.rmAddress \u003d getRmAddress(conf);\n     }\n     statePollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS);\n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    if (this.rmAddress \u003d\u003d null) {\n      this.rmAddress \u003d getRmAddress(conf);\n    }\n    statePollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS);\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/YarnClientImpl.java",
          "extendedDetails": {
            "oldValue": "init",
            "newValue": "serviceInit"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,9 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     if (this.rmAddress \u003d\u003d null) {\n       this.rmAddress \u003d getRmAddress(conf);\n     }\n     statePollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS);\n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    if (this.rmAddress \u003d\u003d null) {\n      this.rmAddress \u003d getRmAddress(conf);\n    }\n    statePollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS);\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/YarnClientImpl.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,9 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     if (this.rmAddress \u003d\u003d null) {\n       this.rmAddress \u003d getRmAddress(conf);\n     }\n     statePollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS);\n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    if (this.rmAddress \u003d\u003d null) {\n      this.rmAddress \u003d getRmAddress(conf);\n    }\n    statePollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS);\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/YarnClientImpl.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,9 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     if (this.rmAddress \u003d\u003d null) {\n       this.rmAddress \u003d getRmAddress(conf);\n     }\n     statePollIntervalMillis \u003d conf.getLong(\n         YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS);\n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    if (this.rmAddress \u003d\u003d null) {\n      this.rmAddress \u003d getRmAddress(conf);\n    }\n    statePollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS);\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/YarnClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "a1ee2145cf4769ffb4d47f775b64e4a91f29d73f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-549. YarnClient.submitApplication should wait for application to be accepted by the RM (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1470797 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/04/13 8:06 PM",
      "commitName": "a1ee2145cf4769ffb4d47f775b64e4a91f29d73f",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "06/02/13 11:03 AM",
      "commitNameOld": "ab16a375720f1b5fa8400498d6a727007275e1d8",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 75.34,
      "commitsBetweenForRepo": 364,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,9 @@\n   public synchronized void init(Configuration conf) {\n     if (this.rmAddress \u003d\u003d null) {\n       this.rmAddress \u003d getRmAddress(conf);\n     }\n+    statePollIntervalMillis \u003d conf.getLong(\n+        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n+        YarnConfiguration.DEFAULT_YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    if (this.rmAddress \u003d\u003d null) {\n      this.rmAddress \u003d getRmAddress(conf);\n    }\n    statePollIntervalMillis \u003d conf.getLong(\n        YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS);\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "dd8fc7e499200476f44a3d1d38127f5c47c9eefb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-50. Implement renewal / cancellation of Delegation Tokens(Siddharth Seth via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1429085 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/01/13 12:15 PM",
      "commitName": "dd8fc7e499200476f44a3d1d38127f5c47c9eefb",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "05/09/12 10:54 AM",
      "commitNameOld": "87c5d243db050ac9ce0c53e0905930573132221e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 121.1,
      "commitsBetweenForRepo": 599,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,6 @@\n   public synchronized void init(Configuration conf) {\n-    this.rmAddress \u003d getRmAddress(conf);\n+    if (this.rmAddress \u003d\u003d null) {\n+      this.rmAddress \u003d getRmAddress(conf);\n+    }\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    if (this.rmAddress \u003d\u003d null) {\n      this.rmAddress \u003d getRmAddress(conf);\n    }\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "87c5d243db050ac9ce0c53e0905930573132221e": {
      "type": "Yfilerename",
      "commitMessage": "YARN-83. Change package of YarnClient to org.apache.hadoop. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1381273 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/09/12 10:54 AM",
      "commitName": "87c5d243db050ac9ce0c53e0905930573132221e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/09/12 9:53 PM",
      "commitNameOld": "31142aa8927568b7901eb48d80ba04d3e0080f60",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.54,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.rmAddress \u003d getRmAddress(conf);\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/YarnClientImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/hadoop/yarn/client/YarnClientImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/YarnClientImpl.java"
      }
    },
    "10e704c50ba1fa601329d0fee099993e8c3725a6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-29. Add a yarn-client module. (Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/08/12 11:27 AM",
      "commitName": "10e704c50ba1fa601329d0fee099993e8c3725a6",
      "commitAuthor": "Siddharth Seth",
      "diff": "@@ -0,0 +1,4 @@\n+  public synchronized void init(Configuration conf) {\n+    this.rmAddress \u003d getRmAddress(conf);\n+    super.init(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.rmAddress \u003d getRmAddress(conf);\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/hadoop/yarn/client/YarnClientImpl.java"
    }
  }
}