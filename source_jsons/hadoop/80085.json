{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PermissionParser.java",
  "functionName": "applyNormalPattern",
  "functionId": "applyNormalPattern___modeStr-String__matcher-Matcher",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/PermissionParser.java",
  "functionStartLine": 64,
  "functionEndLine": 150,
  "numCommitsSeen": 8,
  "timeTaken": 1155,
  "changeHistory": [
    "a3d0cba81071977ffc22a42f60b2ca07da25ae15",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "27a9fce10dbf9ff85ed8bf90b3b7625c6e69d75a",
    "cdbb724edbe093a02d4e2c24523001dcdff0ffd5",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "a3d0cba81071977ffc22a42f60b2ca07da25ae15": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "27a9fce10dbf9ff85ed8bf90b3b7625c6e69d75a": "Ybodychange",
    "cdbb724edbe093a02d4e2c24523001dcdff0ffd5": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange)",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a3d0cba81071977ffc22a42f60b2ca07da25ae15": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10689.  Hdfs dfs chmod should reset sticky bit permission when the bit is omitted in the octal mode. (Manoj Govindassamy via Lei Xu)\n",
      "commitDate": "28/07/16 1:52 PM",
      "commitName": "a3d0cba81071977ffc22a42f60b2ca07da25ae15",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1799.86,
      "commitsBetweenForRepo": 12716,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,87 @@\n   private void applyNormalPattern(String modeStr, Matcher matcher) {\n     // Are there multiple permissions stored in one chmod?\n-    boolean commaSeperated \u003d false;\n+    boolean commaSeparated \u003d false;\n \n     for (int i \u003d 0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n-      if (i \u003e 0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n+      if (i \u003e 0 \u0026\u0026 (!commaSeparated || !matcher.find())) {\n         throw new IllegalArgumentException(modeStr);\n       }\n \n       /*\n        * groups : 1 : [ugoa]* 2 : [+-\u003d] 3 : [rwxXt]+ 4 : [,\\s]*\n        */\n \n       String str \u003d matcher.group(2);\n       char type \u003d str.charAt(str.length() - 1);\n \n       boolean user, group, others, stickyBit;\n       user \u003d group \u003d others \u003d stickyBit \u003d false;\n \n       for (char c : matcher.group(1).toCharArray()) {\n         switch (c) {\n         case \u0027u\u0027:\n           user \u003d true;\n           break;\n         case \u0027g\u0027:\n           group \u003d true;\n           break;\n         case \u0027o\u0027:\n           others \u003d true;\n           break;\n         case \u0027a\u0027:\n           break;\n         default:\n           throw new RuntimeException(\"Unexpected\");\n         }\n       }\n \n       if (!(user || group || others)) { // same as specifying \u0027a\u0027\n         user \u003d group \u003d others \u003d true;\n       }\n \n       short mode \u003d 0;\n \n       for (char c : matcher.group(3).toCharArray()) {\n         switch (c) {\n         case \u0027r\u0027:\n           mode |\u003d 4;\n           break;\n         case \u0027w\u0027:\n           mode |\u003d 2;\n           break;\n         case \u0027x\u0027:\n           mode |\u003d 1;\n           break;\n         case \u0027X\u0027:\n           mode |\u003d 8;\n           break;\n         case \u0027t\u0027:\n           stickyBit \u003d true;\n           break;\n         default:\n           throw new RuntimeException(\"Unexpected\");\n         }\n       }\n \n       if (user) {\n         userMode \u003d mode;\n         userType \u003d type;\n       }\n \n       if (group) {\n         groupMode \u003d mode;\n         groupType \u003d type;\n       }\n \n       if (others) {\n         othersMode \u003d mode;\n         othersType \u003d type;\n \n         stickyMode \u003d (short) (stickyBit ? 1 : 0);\n         stickyBitType \u003d type;\n       }\n \n-      commaSeperated \u003d matcher.group(4).contains(\",\");\n+      commaSeparated \u003d matcher.group(4).contains(\",\");\n     }\n     symbolic \u003d true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void applyNormalPattern(String modeStr, Matcher matcher) {\n    // Are there multiple permissions stored in one chmod?\n    boolean commaSeparated \u003d false;\n\n    for (int i \u003d 0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n      if (i \u003e 0 \u0026\u0026 (!commaSeparated || !matcher.find())) {\n        throw new IllegalArgumentException(modeStr);\n      }\n\n      /*\n       * groups : 1 : [ugoa]* 2 : [+-\u003d] 3 : [rwxXt]+ 4 : [,\\s]*\n       */\n\n      String str \u003d matcher.group(2);\n      char type \u003d str.charAt(str.length() - 1);\n\n      boolean user, group, others, stickyBit;\n      user \u003d group \u003d others \u003d stickyBit \u003d false;\n\n      for (char c : matcher.group(1).toCharArray()) {\n        switch (c) {\n        case \u0027u\u0027:\n          user \u003d true;\n          break;\n        case \u0027g\u0027:\n          group \u003d true;\n          break;\n        case \u0027o\u0027:\n          others \u003d true;\n          break;\n        case \u0027a\u0027:\n          break;\n        default:\n          throw new RuntimeException(\"Unexpected\");\n        }\n      }\n\n      if (!(user || group || others)) { // same as specifying \u0027a\u0027\n        user \u003d group \u003d others \u003d true;\n      }\n\n      short mode \u003d 0;\n\n      for (char c : matcher.group(3).toCharArray()) {\n        switch (c) {\n        case \u0027r\u0027:\n          mode |\u003d 4;\n          break;\n        case \u0027w\u0027:\n          mode |\u003d 2;\n          break;\n        case \u0027x\u0027:\n          mode |\u003d 1;\n          break;\n        case \u0027X\u0027:\n          mode |\u003d 8;\n          break;\n        case \u0027t\u0027:\n          stickyBit \u003d true;\n          break;\n        default:\n          throw new RuntimeException(\"Unexpected\");\n        }\n      }\n\n      if (user) {\n        userMode \u003d mode;\n        userType \u003d type;\n      }\n\n      if (group) {\n        groupMode \u003d mode;\n        groupType \u003d type;\n      }\n\n      if (others) {\n        othersMode \u003d mode;\n        othersType \u003d type;\n\n        stickyMode \u003d (short) (stickyBit ? 1 : 0);\n        stickyBitType \u003d type;\n      }\n\n      commaSeparated \u003d matcher.group(4).contains(\",\");\n    }\n    symbolic \u003d true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/PermissionParser.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void applyNormalPattern(String modeStr, Matcher matcher) {\n    // Are there multiple permissions stored in one chmod?\n    boolean commaSeperated \u003d false;\n\n    for (int i \u003d 0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n      if (i \u003e 0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n        throw new IllegalArgumentException(modeStr);\n      }\n\n      /*\n       * groups : 1 : [ugoa]* 2 : [+-\u003d] 3 : [rwxXt]+ 4 : [,\\s]*\n       */\n\n      String str \u003d matcher.group(2);\n      char type \u003d str.charAt(str.length() - 1);\n\n      boolean user, group, others, stickyBit;\n      user \u003d group \u003d others \u003d stickyBit \u003d false;\n\n      for (char c : matcher.group(1).toCharArray()) {\n        switch (c) {\n        case \u0027u\u0027:\n          user \u003d true;\n          break;\n        case \u0027g\u0027:\n          group \u003d true;\n          break;\n        case \u0027o\u0027:\n          others \u003d true;\n          break;\n        case \u0027a\u0027:\n          break;\n        default:\n          throw new RuntimeException(\"Unexpected\");\n        }\n      }\n\n      if (!(user || group || others)) { // same as specifying \u0027a\u0027\n        user \u003d group \u003d others \u003d true;\n      }\n\n      short mode \u003d 0;\n\n      for (char c : matcher.group(3).toCharArray()) {\n        switch (c) {\n        case \u0027r\u0027:\n          mode |\u003d 4;\n          break;\n        case \u0027w\u0027:\n          mode |\u003d 2;\n          break;\n        case \u0027x\u0027:\n          mode |\u003d 1;\n          break;\n        case \u0027X\u0027:\n          mode |\u003d 8;\n          break;\n        case \u0027t\u0027:\n          stickyBit \u003d true;\n          break;\n        default:\n          throw new RuntimeException(\"Unexpected\");\n        }\n      }\n\n      if (user) {\n        userMode \u003d mode;\n        userType \u003d type;\n      }\n\n      if (group) {\n        groupMode \u003d mode;\n        groupType \u003d type;\n      }\n\n      if (others) {\n        othersMode \u003d mode;\n        othersType \u003d type;\n\n        stickyMode \u003d (short) (stickyBit ? 1 : 0);\n        stickyBitType \u003d type;\n      }\n\n      commaSeperated \u003d matcher.group(4).contains(\",\");\n    }\n    symbolic \u003d true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/PermissionParser.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/permission/PermissionParser.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/PermissionParser.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void applyNormalPattern(String modeStr, Matcher matcher) {\n    // Are there multiple permissions stored in one chmod?\n    boolean commaSeperated \u003d false;\n\n    for (int i \u003d 0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n      if (i \u003e 0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n        throw new IllegalArgumentException(modeStr);\n      }\n\n      /*\n       * groups : 1 : [ugoa]* 2 : [+-\u003d] 3 : [rwxXt]+ 4 : [,\\s]*\n       */\n\n      String str \u003d matcher.group(2);\n      char type \u003d str.charAt(str.length() - 1);\n\n      boolean user, group, others, stickyBit;\n      user \u003d group \u003d others \u003d stickyBit \u003d false;\n\n      for (char c : matcher.group(1).toCharArray()) {\n        switch (c) {\n        case \u0027u\u0027:\n          user \u003d true;\n          break;\n        case \u0027g\u0027:\n          group \u003d true;\n          break;\n        case \u0027o\u0027:\n          others \u003d true;\n          break;\n        case \u0027a\u0027:\n          break;\n        default:\n          throw new RuntimeException(\"Unexpected\");\n        }\n      }\n\n      if (!(user || group || others)) { // same as specifying \u0027a\u0027\n        user \u003d group \u003d others \u003d true;\n      }\n\n      short mode \u003d 0;\n\n      for (char c : matcher.group(3).toCharArray()) {\n        switch (c) {\n        case \u0027r\u0027:\n          mode |\u003d 4;\n          break;\n        case \u0027w\u0027:\n          mode |\u003d 2;\n          break;\n        case \u0027x\u0027:\n          mode |\u003d 1;\n          break;\n        case \u0027X\u0027:\n          mode |\u003d 8;\n          break;\n        case \u0027t\u0027:\n          stickyBit \u003d true;\n          break;\n        default:\n          throw new RuntimeException(\"Unexpected\");\n        }\n      }\n\n      if (user) {\n        userMode \u003d mode;\n        userType \u003d type;\n      }\n\n      if (group) {\n        groupMode \u003d mode;\n        groupType \u003d type;\n      }\n\n      if (others) {\n        othersMode \u003d mode;\n        othersType \u003d type;\n\n        stickyMode \u003d (short) (stickyBit ? 1 : 0);\n        stickyBitType \u003d type;\n      }\n\n      commaSeperated \u003d matcher.group(4).contains(\",\");\n    }\n    symbolic \u003d true;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/permission/PermissionParser.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/permission/PermissionParser.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/permission/PermissionParser.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void applyNormalPattern(String modeStr, Matcher matcher) {\n    // Are there multiple permissions stored in one chmod?\n    boolean commaSeperated \u003d false;\n\n    for (int i \u003d 0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n      if (i \u003e 0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n        throw new IllegalArgumentException(modeStr);\n      }\n\n      /*\n       * groups : 1 : [ugoa]* 2 : [+-\u003d] 3 : [rwxXt]+ 4 : [,\\s]*\n       */\n\n      String str \u003d matcher.group(2);\n      char type \u003d str.charAt(str.length() - 1);\n\n      boolean user, group, others, stickyBit;\n      user \u003d group \u003d others \u003d stickyBit \u003d false;\n\n      for (char c : matcher.group(1).toCharArray()) {\n        switch (c) {\n        case \u0027u\u0027:\n          user \u003d true;\n          break;\n        case \u0027g\u0027:\n          group \u003d true;\n          break;\n        case \u0027o\u0027:\n          others \u003d true;\n          break;\n        case \u0027a\u0027:\n          break;\n        default:\n          throw new RuntimeException(\"Unexpected\");\n        }\n      }\n\n      if (!(user || group || others)) { // same as specifying \u0027a\u0027\n        user \u003d group \u003d others \u003d true;\n      }\n\n      short mode \u003d 0;\n\n      for (char c : matcher.group(3).toCharArray()) {\n        switch (c) {\n        case \u0027r\u0027:\n          mode |\u003d 4;\n          break;\n        case \u0027w\u0027:\n          mode |\u003d 2;\n          break;\n        case \u0027x\u0027:\n          mode |\u003d 1;\n          break;\n        case \u0027X\u0027:\n          mode |\u003d 8;\n          break;\n        case \u0027t\u0027:\n          stickyBit \u003d true;\n          break;\n        default:\n          throw new RuntimeException(\"Unexpected\");\n        }\n      }\n\n      if (user) {\n        userMode \u003d mode;\n        userType \u003d type;\n      }\n\n      if (group) {\n        groupMode \u003d mode;\n        groupType \u003d type;\n      }\n\n      if (others) {\n        othersMode \u003d mode;\n        othersType \u003d type;\n\n        stickyMode \u003d (short) (stickyBit ? 1 : 0);\n        stickyBitType \u003d type;\n      }\n\n      commaSeperated \u003d matcher.group(4).contains(\",\");\n    }\n    symbolic \u003d true;\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/permission/PermissionParser.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/permission/PermissionParser.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/permission/PermissionParser.java"
      }
    },
    "27a9fce10dbf9ff85ed8bf90b3b7625c6e69d75a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6710. Symbolic umask for file creation is not conformant with posix.  Contributed by Suresh Srinivas.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@937577 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/10 7:04 PM",
      "commitName": "27a9fce10dbf9ff85ed8bf90b3b7625c6e69d75a",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "08/09/09 12:08 PM",
      "commitNameOld": "cdbb724edbe093a02d4e2c24523001dcdff0ffd5",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 227.29,
      "commitsBetweenForRepo": 203,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,87 @@\n   private void applyNormalPattern(String modeStr, Matcher matcher) {\n     // Are there multiple permissions stored in one chmod?\n     boolean commaSeperated \u003d false;\n \n     for (int i \u003d 0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n       if (i \u003e 0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n         throw new IllegalArgumentException(modeStr);\n       }\n \n       /*\n        * groups : 1 : [ugoa]* 2 : [+-\u003d] 3 : [rwxXt]+ 4 : [,\\s]*\n        */\n \n       String str \u003d matcher.group(2);\n       char type \u003d str.charAt(str.length() - 1);\n \n       boolean user, group, others, stickyBit;\n       user \u003d group \u003d others \u003d stickyBit \u003d false;\n \n       for (char c : matcher.group(1).toCharArray()) {\n         switch (c) {\n         case \u0027u\u0027:\n           user \u003d true;\n           break;\n         case \u0027g\u0027:\n           group \u003d true;\n           break;\n         case \u0027o\u0027:\n           others \u003d true;\n           break;\n         case \u0027a\u0027:\n           break;\n         default:\n           throw new RuntimeException(\"Unexpected\");\n         }\n       }\n \n       if (!(user || group || others)) { // same as specifying \u0027a\u0027\n         user \u003d group \u003d others \u003d true;\n       }\n \n       short mode \u003d 0;\n \n       for (char c : matcher.group(3).toCharArray()) {\n         switch (c) {\n         case \u0027r\u0027:\n           mode |\u003d 4;\n           break;\n         case \u0027w\u0027:\n           mode |\u003d 2;\n           break;\n         case \u0027x\u0027:\n           mode |\u003d 1;\n           break;\n         case \u0027X\u0027:\n           mode |\u003d 8;\n           break;\n         case \u0027t\u0027:\n           stickyBit \u003d true;\n           break;\n         default:\n           throw new RuntimeException(\"Unexpected\");\n         }\n       }\n \n       if (user) {\n         userMode \u003d mode;\n         userType \u003d type;\n       }\n \n       if (group) {\n         groupMode \u003d mode;\n         groupType \u003d type;\n       }\n \n       if (others) {\n         othersMode \u003d mode;\n         othersType \u003d type;\n \n         stickyMode \u003d (short) (stickyBit ? 1 : 0);\n         stickyBitType \u003d type;\n       }\n \n       commaSeperated \u003d matcher.group(4).contains(\",\");\n     }\n+    symbolic \u003d true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void applyNormalPattern(String modeStr, Matcher matcher) {\n    // Are there multiple permissions stored in one chmod?\n    boolean commaSeperated \u003d false;\n\n    for (int i \u003d 0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n      if (i \u003e 0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n        throw new IllegalArgumentException(modeStr);\n      }\n\n      /*\n       * groups : 1 : [ugoa]* 2 : [+-\u003d] 3 : [rwxXt]+ 4 : [,\\s]*\n       */\n\n      String str \u003d matcher.group(2);\n      char type \u003d str.charAt(str.length() - 1);\n\n      boolean user, group, others, stickyBit;\n      user \u003d group \u003d others \u003d stickyBit \u003d false;\n\n      for (char c : matcher.group(1).toCharArray()) {\n        switch (c) {\n        case \u0027u\u0027:\n          user \u003d true;\n          break;\n        case \u0027g\u0027:\n          group \u003d true;\n          break;\n        case \u0027o\u0027:\n          others \u003d true;\n          break;\n        case \u0027a\u0027:\n          break;\n        default:\n          throw new RuntimeException(\"Unexpected\");\n        }\n      }\n\n      if (!(user || group || others)) { // same as specifying \u0027a\u0027\n        user \u003d group \u003d others \u003d true;\n      }\n\n      short mode \u003d 0;\n\n      for (char c : matcher.group(3).toCharArray()) {\n        switch (c) {\n        case \u0027r\u0027:\n          mode |\u003d 4;\n          break;\n        case \u0027w\u0027:\n          mode |\u003d 2;\n          break;\n        case \u0027x\u0027:\n          mode |\u003d 1;\n          break;\n        case \u0027X\u0027:\n          mode |\u003d 8;\n          break;\n        case \u0027t\u0027:\n          stickyBit \u003d true;\n          break;\n        default:\n          throw new RuntimeException(\"Unexpected\");\n        }\n      }\n\n      if (user) {\n        userMode \u003d mode;\n        userType \u003d type;\n      }\n\n      if (group) {\n        groupMode \u003d mode;\n        groupType \u003d type;\n      }\n\n      if (others) {\n        othersMode \u003d mode;\n        othersType \u003d type;\n\n        stickyMode \u003d (short) (stickyBit ? 1 : 0);\n        stickyBitType \u003d type;\n      }\n\n      commaSeperated \u003d matcher.group(4).contains(\",\");\n    }\n    symbolic \u003d true;\n  }",
      "path": "src/java/org/apache/hadoop/fs/permission/PermissionParser.java",
      "extendedDetails": {}
    },
    "cdbb724edbe093a02d4e2c24523001dcdff0ffd5": {
      "type": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-6234. Add new option dfs.umaskmode to set umask in configuration to use octal or symbolic instead of decimal. Contributed by Jakob Homan.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@812652 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/09 12:08 PM",
      "commitName": "cdbb724edbe093a02d4e2c24523001dcdff0ffd5",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-6234. Add new option dfs.umaskmode to set umask in configuration to use octal or symbolic instead of decimal. Contributed by Jakob Homan.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@812652 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/09/09 12:08 PM",
          "commitName": "cdbb724edbe093a02d4e2c24523001dcdff0ffd5",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "08/09/09 10:54 AM",
          "commitNameOld": "3f384b42d2272ffed8e71409505f391cdbf1ec64",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,86 @@\n-    private void applyNormalPattern(String modeStr, Matcher matcher)\n-                                    throws IOException {\n-      // Are there multiple permissions stored in one chmod?\n-      boolean commaSeperated \u003d false;\n+  private void applyNormalPattern(String modeStr, Matcher matcher) {\n+    // Are there multiple permissions stored in one chmod?\n+    boolean commaSeperated \u003d false;\n \n-      for(int i\u003d0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n-        if (i\u003e0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n-          patternError(modeStr);\n-        }\n-\n-        /* groups : 1 : [ugoa]*\n-         *          2 : [+-\u003d]\n-         *          3 : [rwxXt]+\n-         *          4 : [,\\s]*\n-         */\n-\n-        String str \u003d matcher.group(2);\n-        char type \u003d str.charAt(str.length() - 1);\n-\n-        boolean user, group, others, stickyBit;\n-        user \u003d group \u003d others \u003d stickyBit \u003d false;\n-\n-        for(char c : matcher.group(1).toCharArray()) {\n-          switch (c) {\n-          case \u0027u\u0027 : user \u003d true; break;\n-          case \u0027g\u0027 : group \u003d true; break;\n-          case \u0027o\u0027 : others \u003d true; break;\n-          case \u0027a\u0027 : break;\n-          default  : throw new RuntimeException(\"Unexpected\");          \n-          }\n-        }\n-\n-        if (!(user || group || others)) { // same as specifying \u0027a\u0027\n-          user \u003d group \u003d others \u003d true;\n-        }\n-\n-        short mode \u003d 0;\n-\n-        for(char c : matcher.group(3).toCharArray()) {\n-          switch (c) {\n-          case \u0027r\u0027 : mode |\u003d 4; break;\n-          case \u0027w\u0027 : mode |\u003d 2; break;\n-          case \u0027x\u0027 : mode |\u003d 1; break;\n-          case \u0027X\u0027 : mode |\u003d 8; break;\n-          case \u0027t\u0027 : stickyBit \u003d true; break;\n-          default  : throw new RuntimeException(\"Unexpected\");\n-          }\n-        }\n-\n-        if ( user ) {\n-          userMode \u003d mode;\n-          userType \u003d type;\n-        }\n-\n-        if ( group ) {\n-          groupMode \u003d mode;\n-          groupType \u003d type;\n-        }\n-\n-        if ( others ) {\n-          othersMode \u003d mode;\n-          othersType \u003d type;\n-          \n-          stickyMode \u003d (short) (stickyBit ? 1 : 0);\n-          stickyBitType \u003d type;\n-        }\n-\n-        commaSeperated \u003d matcher.group(4).contains(\",\");\n+    for (int i \u003d 0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n+      if (i \u003e 0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n+        throw new IllegalArgumentException(modeStr);\n       }\n-    }\n\\ No newline at end of file\n+\n+      /*\n+       * groups : 1 : [ugoa]* 2 : [+-\u003d] 3 : [rwxXt]+ 4 : [,\\s]*\n+       */\n+\n+      String str \u003d matcher.group(2);\n+      char type \u003d str.charAt(str.length() - 1);\n+\n+      boolean user, group, others, stickyBit;\n+      user \u003d group \u003d others \u003d stickyBit \u003d false;\n+\n+      for (char c : matcher.group(1).toCharArray()) {\n+        switch (c) {\n+        case \u0027u\u0027:\n+          user \u003d true;\n+          break;\n+        case \u0027g\u0027:\n+          group \u003d true;\n+          break;\n+        case \u0027o\u0027:\n+          others \u003d true;\n+          break;\n+        case \u0027a\u0027:\n+          break;\n+        default:\n+          throw new RuntimeException(\"Unexpected\");\n+        }\n+      }\n+\n+      if (!(user || group || others)) { // same as specifying \u0027a\u0027\n+        user \u003d group \u003d others \u003d true;\n+      }\n+\n+      short mode \u003d 0;\n+\n+      for (char c : matcher.group(3).toCharArray()) {\n+        switch (c) {\n+        case \u0027r\u0027:\n+          mode |\u003d 4;\n+          break;\n+        case \u0027w\u0027:\n+          mode |\u003d 2;\n+          break;\n+        case \u0027x\u0027:\n+          mode |\u003d 1;\n+          break;\n+        case \u0027X\u0027:\n+          mode |\u003d 8;\n+          break;\n+        case \u0027t\u0027:\n+          stickyBit \u003d true;\n+          break;\n+        default:\n+          throw new RuntimeException(\"Unexpected\");\n+        }\n+      }\n+\n+      if (user) {\n+        userMode \u003d mode;\n+        userType \u003d type;\n+      }\n+\n+      if (group) {\n+        groupMode \u003d mode;\n+        groupType \u003d type;\n+      }\n+\n+      if (others) {\n+        othersMode \u003d mode;\n+        othersType \u003d type;\n+\n+        stickyMode \u003d (short) (stickyBit ? 1 : 0);\n+        stickyBitType \u003d type;\n+      }\n+\n+      commaSeperated \u003d matcher.group(4).contains(\",\");\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private void applyNormalPattern(String modeStr, Matcher matcher) {\n    // Are there multiple permissions stored in one chmod?\n    boolean commaSeperated \u003d false;\n\n    for (int i \u003d 0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n      if (i \u003e 0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n        throw new IllegalArgumentException(modeStr);\n      }\n\n      /*\n       * groups : 1 : [ugoa]* 2 : [+-\u003d] 3 : [rwxXt]+ 4 : [,\\s]*\n       */\n\n      String str \u003d matcher.group(2);\n      char type \u003d str.charAt(str.length() - 1);\n\n      boolean user, group, others, stickyBit;\n      user \u003d group \u003d others \u003d stickyBit \u003d false;\n\n      for (char c : matcher.group(1).toCharArray()) {\n        switch (c) {\n        case \u0027u\u0027:\n          user \u003d true;\n          break;\n        case \u0027g\u0027:\n          group \u003d true;\n          break;\n        case \u0027o\u0027:\n          others \u003d true;\n          break;\n        case \u0027a\u0027:\n          break;\n        default:\n          throw new RuntimeException(\"Unexpected\");\n        }\n      }\n\n      if (!(user || group || others)) { // same as specifying \u0027a\u0027\n        user \u003d group \u003d others \u003d true;\n      }\n\n      short mode \u003d 0;\n\n      for (char c : matcher.group(3).toCharArray()) {\n        switch (c) {\n        case \u0027r\u0027:\n          mode |\u003d 4;\n          break;\n        case \u0027w\u0027:\n          mode |\u003d 2;\n          break;\n        case \u0027x\u0027:\n          mode |\u003d 1;\n          break;\n        case \u0027X\u0027:\n          mode |\u003d 8;\n          break;\n        case \u0027t\u0027:\n          stickyBit \u003d true;\n          break;\n        default:\n          throw new RuntimeException(\"Unexpected\");\n        }\n      }\n\n      if (user) {\n        userMode \u003d mode;\n        userType \u003d type;\n      }\n\n      if (group) {\n        groupMode \u003d mode;\n        groupType \u003d type;\n      }\n\n      if (others) {\n        othersMode \u003d mode;\n        othersType \u003d type;\n\n        stickyMode \u003d (short) (stickyBit ? 1 : 0);\n        stickyBitType \u003d type;\n      }\n\n      commaSeperated \u003d matcher.group(4).contains(\",\");\n    }\n  }",
          "path": "src/java/org/apache/hadoop/fs/permission/PermissionParser.java",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/hadoop/fs/FsShellPermissions.java",
            "newPath": "src/java/org/apache/hadoop/fs/permission/PermissionParser.java",
            "oldMethodName": "applyNormalPattern",
            "newMethodName": "applyNormalPattern"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-6234. Add new option dfs.umaskmode to set umask in configuration to use octal or symbolic instead of decimal. Contributed by Jakob Homan.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@812652 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/09/09 12:08 PM",
          "commitName": "cdbb724edbe093a02d4e2c24523001dcdff0ffd5",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "08/09/09 10:54 AM",
          "commitNameOld": "3f384b42d2272ffed8e71409505f391cdbf1ec64",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,86 @@\n-    private void applyNormalPattern(String modeStr, Matcher matcher)\n-                                    throws IOException {\n-      // Are there multiple permissions stored in one chmod?\n-      boolean commaSeperated \u003d false;\n+  private void applyNormalPattern(String modeStr, Matcher matcher) {\n+    // Are there multiple permissions stored in one chmod?\n+    boolean commaSeperated \u003d false;\n \n-      for(int i\u003d0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n-        if (i\u003e0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n-          patternError(modeStr);\n-        }\n-\n-        /* groups : 1 : [ugoa]*\n-         *          2 : [+-\u003d]\n-         *          3 : [rwxXt]+\n-         *          4 : [,\\s]*\n-         */\n-\n-        String str \u003d matcher.group(2);\n-        char type \u003d str.charAt(str.length() - 1);\n-\n-        boolean user, group, others, stickyBit;\n-        user \u003d group \u003d others \u003d stickyBit \u003d false;\n-\n-        for(char c : matcher.group(1).toCharArray()) {\n-          switch (c) {\n-          case \u0027u\u0027 : user \u003d true; break;\n-          case \u0027g\u0027 : group \u003d true; break;\n-          case \u0027o\u0027 : others \u003d true; break;\n-          case \u0027a\u0027 : break;\n-          default  : throw new RuntimeException(\"Unexpected\");          \n-          }\n-        }\n-\n-        if (!(user || group || others)) { // same as specifying \u0027a\u0027\n-          user \u003d group \u003d others \u003d true;\n-        }\n-\n-        short mode \u003d 0;\n-\n-        for(char c : matcher.group(3).toCharArray()) {\n-          switch (c) {\n-          case \u0027r\u0027 : mode |\u003d 4; break;\n-          case \u0027w\u0027 : mode |\u003d 2; break;\n-          case \u0027x\u0027 : mode |\u003d 1; break;\n-          case \u0027X\u0027 : mode |\u003d 8; break;\n-          case \u0027t\u0027 : stickyBit \u003d true; break;\n-          default  : throw new RuntimeException(\"Unexpected\");\n-          }\n-        }\n-\n-        if ( user ) {\n-          userMode \u003d mode;\n-          userType \u003d type;\n-        }\n-\n-        if ( group ) {\n-          groupMode \u003d mode;\n-          groupType \u003d type;\n-        }\n-\n-        if ( others ) {\n-          othersMode \u003d mode;\n-          othersType \u003d type;\n-          \n-          stickyMode \u003d (short) (stickyBit ? 1 : 0);\n-          stickyBitType \u003d type;\n-        }\n-\n-        commaSeperated \u003d matcher.group(4).contains(\",\");\n+    for (int i \u003d 0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n+      if (i \u003e 0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n+        throw new IllegalArgumentException(modeStr);\n       }\n-    }\n\\ No newline at end of file\n+\n+      /*\n+       * groups : 1 : [ugoa]* 2 : [+-\u003d] 3 : [rwxXt]+ 4 : [,\\s]*\n+       */\n+\n+      String str \u003d matcher.group(2);\n+      char type \u003d str.charAt(str.length() - 1);\n+\n+      boolean user, group, others, stickyBit;\n+      user \u003d group \u003d others \u003d stickyBit \u003d false;\n+\n+      for (char c : matcher.group(1).toCharArray()) {\n+        switch (c) {\n+        case \u0027u\u0027:\n+          user \u003d true;\n+          break;\n+        case \u0027g\u0027:\n+          group \u003d true;\n+          break;\n+        case \u0027o\u0027:\n+          others \u003d true;\n+          break;\n+        case \u0027a\u0027:\n+          break;\n+        default:\n+          throw new RuntimeException(\"Unexpected\");\n+        }\n+      }\n+\n+      if (!(user || group || others)) { // same as specifying \u0027a\u0027\n+        user \u003d group \u003d others \u003d true;\n+      }\n+\n+      short mode \u003d 0;\n+\n+      for (char c : matcher.group(3).toCharArray()) {\n+        switch (c) {\n+        case \u0027r\u0027:\n+          mode |\u003d 4;\n+          break;\n+        case \u0027w\u0027:\n+          mode |\u003d 2;\n+          break;\n+        case \u0027x\u0027:\n+          mode |\u003d 1;\n+          break;\n+        case \u0027X\u0027:\n+          mode |\u003d 8;\n+          break;\n+        case \u0027t\u0027:\n+          stickyBit \u003d true;\n+          break;\n+        default:\n+          throw new RuntimeException(\"Unexpected\");\n+        }\n+      }\n+\n+      if (user) {\n+        userMode \u003d mode;\n+        userType \u003d type;\n+      }\n+\n+      if (group) {\n+        groupMode \u003d mode;\n+        groupType \u003d type;\n+      }\n+\n+      if (others) {\n+        othersMode \u003d mode;\n+        othersType \u003d type;\n+\n+        stickyMode \u003d (short) (stickyBit ? 1 : 0);\n+        stickyBitType \u003d type;\n+      }\n+\n+      commaSeperated \u003d matcher.group(4).contains(\",\");\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private void applyNormalPattern(String modeStr, Matcher matcher) {\n    // Are there multiple permissions stored in one chmod?\n    boolean commaSeperated \u003d false;\n\n    for (int i \u003d 0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n      if (i \u003e 0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n        throw new IllegalArgumentException(modeStr);\n      }\n\n      /*\n       * groups : 1 : [ugoa]* 2 : [+-\u003d] 3 : [rwxXt]+ 4 : [,\\s]*\n       */\n\n      String str \u003d matcher.group(2);\n      char type \u003d str.charAt(str.length() - 1);\n\n      boolean user, group, others, stickyBit;\n      user \u003d group \u003d others \u003d stickyBit \u003d false;\n\n      for (char c : matcher.group(1).toCharArray()) {\n        switch (c) {\n        case \u0027u\u0027:\n          user \u003d true;\n          break;\n        case \u0027g\u0027:\n          group \u003d true;\n          break;\n        case \u0027o\u0027:\n          others \u003d true;\n          break;\n        case \u0027a\u0027:\n          break;\n        default:\n          throw new RuntimeException(\"Unexpected\");\n        }\n      }\n\n      if (!(user || group || others)) { // same as specifying \u0027a\u0027\n        user \u003d group \u003d others \u003d true;\n      }\n\n      short mode \u003d 0;\n\n      for (char c : matcher.group(3).toCharArray()) {\n        switch (c) {\n        case \u0027r\u0027:\n          mode |\u003d 4;\n          break;\n        case \u0027w\u0027:\n          mode |\u003d 2;\n          break;\n        case \u0027x\u0027:\n          mode |\u003d 1;\n          break;\n        case \u0027X\u0027:\n          mode |\u003d 8;\n          break;\n        case \u0027t\u0027:\n          stickyBit \u003d true;\n          break;\n        default:\n          throw new RuntimeException(\"Unexpected\");\n        }\n      }\n\n      if (user) {\n        userMode \u003d mode;\n        userType \u003d type;\n      }\n\n      if (group) {\n        groupMode \u003d mode;\n        groupType \u003d type;\n      }\n\n      if (others) {\n        othersMode \u003d mode;\n        othersType \u003d type;\n\n        stickyMode \u003d (short) (stickyBit ? 1 : 0);\n        stickyBitType \u003d type;\n      }\n\n      commaSeperated \u003d matcher.group(4).contains(\",\");\n    }\n  }",
          "path": "src/java/org/apache/hadoop/fs/permission/PermissionParser.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-6234. Add new option dfs.umaskmode to set umask in configuration to use octal or symbolic instead of decimal. Contributed by Jakob Homan.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@812652 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/09/09 12:08 PM",
          "commitName": "cdbb724edbe093a02d4e2c24523001dcdff0ffd5",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "08/09/09 10:54 AM",
          "commitNameOld": "3f384b42d2272ffed8e71409505f391cdbf1ec64",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,86 @@\n-    private void applyNormalPattern(String modeStr, Matcher matcher)\n-                                    throws IOException {\n-      // Are there multiple permissions stored in one chmod?\n-      boolean commaSeperated \u003d false;\n+  private void applyNormalPattern(String modeStr, Matcher matcher) {\n+    // Are there multiple permissions stored in one chmod?\n+    boolean commaSeperated \u003d false;\n \n-      for(int i\u003d0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n-        if (i\u003e0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n-          patternError(modeStr);\n-        }\n-\n-        /* groups : 1 : [ugoa]*\n-         *          2 : [+-\u003d]\n-         *          3 : [rwxXt]+\n-         *          4 : [,\\s]*\n-         */\n-\n-        String str \u003d matcher.group(2);\n-        char type \u003d str.charAt(str.length() - 1);\n-\n-        boolean user, group, others, stickyBit;\n-        user \u003d group \u003d others \u003d stickyBit \u003d false;\n-\n-        for(char c : matcher.group(1).toCharArray()) {\n-          switch (c) {\n-          case \u0027u\u0027 : user \u003d true; break;\n-          case \u0027g\u0027 : group \u003d true; break;\n-          case \u0027o\u0027 : others \u003d true; break;\n-          case \u0027a\u0027 : break;\n-          default  : throw new RuntimeException(\"Unexpected\");          \n-          }\n-        }\n-\n-        if (!(user || group || others)) { // same as specifying \u0027a\u0027\n-          user \u003d group \u003d others \u003d true;\n-        }\n-\n-        short mode \u003d 0;\n-\n-        for(char c : matcher.group(3).toCharArray()) {\n-          switch (c) {\n-          case \u0027r\u0027 : mode |\u003d 4; break;\n-          case \u0027w\u0027 : mode |\u003d 2; break;\n-          case \u0027x\u0027 : mode |\u003d 1; break;\n-          case \u0027X\u0027 : mode |\u003d 8; break;\n-          case \u0027t\u0027 : stickyBit \u003d true; break;\n-          default  : throw new RuntimeException(\"Unexpected\");\n-          }\n-        }\n-\n-        if ( user ) {\n-          userMode \u003d mode;\n-          userType \u003d type;\n-        }\n-\n-        if ( group ) {\n-          groupMode \u003d mode;\n-          groupType \u003d type;\n-        }\n-\n-        if ( others ) {\n-          othersMode \u003d mode;\n-          othersType \u003d type;\n-          \n-          stickyMode \u003d (short) (stickyBit ? 1 : 0);\n-          stickyBitType \u003d type;\n-        }\n-\n-        commaSeperated \u003d matcher.group(4).contains(\",\");\n+    for (int i \u003d 0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n+      if (i \u003e 0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n+        throw new IllegalArgumentException(modeStr);\n       }\n-    }\n\\ No newline at end of file\n+\n+      /*\n+       * groups : 1 : [ugoa]* 2 : [+-\u003d] 3 : [rwxXt]+ 4 : [,\\s]*\n+       */\n+\n+      String str \u003d matcher.group(2);\n+      char type \u003d str.charAt(str.length() - 1);\n+\n+      boolean user, group, others, stickyBit;\n+      user \u003d group \u003d others \u003d stickyBit \u003d false;\n+\n+      for (char c : matcher.group(1).toCharArray()) {\n+        switch (c) {\n+        case \u0027u\u0027:\n+          user \u003d true;\n+          break;\n+        case \u0027g\u0027:\n+          group \u003d true;\n+          break;\n+        case \u0027o\u0027:\n+          others \u003d true;\n+          break;\n+        case \u0027a\u0027:\n+          break;\n+        default:\n+          throw new RuntimeException(\"Unexpected\");\n+        }\n+      }\n+\n+      if (!(user || group || others)) { // same as specifying \u0027a\u0027\n+        user \u003d group \u003d others \u003d true;\n+      }\n+\n+      short mode \u003d 0;\n+\n+      for (char c : matcher.group(3).toCharArray()) {\n+        switch (c) {\n+        case \u0027r\u0027:\n+          mode |\u003d 4;\n+          break;\n+        case \u0027w\u0027:\n+          mode |\u003d 2;\n+          break;\n+        case \u0027x\u0027:\n+          mode |\u003d 1;\n+          break;\n+        case \u0027X\u0027:\n+          mode |\u003d 8;\n+          break;\n+        case \u0027t\u0027:\n+          stickyBit \u003d true;\n+          break;\n+        default:\n+          throw new RuntimeException(\"Unexpected\");\n+        }\n+      }\n+\n+      if (user) {\n+        userMode \u003d mode;\n+        userType \u003d type;\n+      }\n+\n+      if (group) {\n+        groupMode \u003d mode;\n+        groupType \u003d type;\n+      }\n+\n+      if (others) {\n+        othersMode \u003d mode;\n+        othersType \u003d type;\n+\n+        stickyMode \u003d (short) (stickyBit ? 1 : 0);\n+        stickyBitType \u003d type;\n+      }\n+\n+      commaSeperated \u003d matcher.group(4).contains(\",\");\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private void applyNormalPattern(String modeStr, Matcher matcher) {\n    // Are there multiple permissions stored in one chmod?\n    boolean commaSeperated \u003d false;\n\n    for (int i \u003d 0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n      if (i \u003e 0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n        throw new IllegalArgumentException(modeStr);\n      }\n\n      /*\n       * groups : 1 : [ugoa]* 2 : [+-\u003d] 3 : [rwxXt]+ 4 : [,\\s]*\n       */\n\n      String str \u003d matcher.group(2);\n      char type \u003d str.charAt(str.length() - 1);\n\n      boolean user, group, others, stickyBit;\n      user \u003d group \u003d others \u003d stickyBit \u003d false;\n\n      for (char c : matcher.group(1).toCharArray()) {\n        switch (c) {\n        case \u0027u\u0027:\n          user \u003d true;\n          break;\n        case \u0027g\u0027:\n          group \u003d true;\n          break;\n        case \u0027o\u0027:\n          others \u003d true;\n          break;\n        case \u0027a\u0027:\n          break;\n        default:\n          throw new RuntimeException(\"Unexpected\");\n        }\n      }\n\n      if (!(user || group || others)) { // same as specifying \u0027a\u0027\n        user \u003d group \u003d others \u003d true;\n      }\n\n      short mode \u003d 0;\n\n      for (char c : matcher.group(3).toCharArray()) {\n        switch (c) {\n        case \u0027r\u0027:\n          mode |\u003d 4;\n          break;\n        case \u0027w\u0027:\n          mode |\u003d 2;\n          break;\n        case \u0027x\u0027:\n          mode |\u003d 1;\n          break;\n        case \u0027X\u0027:\n          mode |\u003d 8;\n          break;\n        case \u0027t\u0027:\n          stickyBit \u003d true;\n          break;\n        default:\n          throw new RuntimeException(\"Unexpected\");\n        }\n      }\n\n      if (user) {\n        userMode \u003d mode;\n        userType \u003d type;\n      }\n\n      if (group) {\n        groupMode \u003d mode;\n        groupType \u003d type;\n      }\n\n      if (others) {\n        othersMode \u003d mode;\n        othersType \u003d type;\n\n        stickyMode \u003d (short) (stickyBit ? 1 : 0);\n        stickyBitType \u003d type;\n      }\n\n      commaSeperated \u003d matcher.group(4).contains(\",\");\n    }\n  }",
          "path": "src/java/org/apache/hadoop/fs/permission/PermissionParser.java",
          "extendedDetails": {}
        }
      ]
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,70 @@\n+    private void applyNormalPattern(String modeStr, Matcher matcher)\n+                                    throws IOException {\n+      // Are there multiple permissions stored in one chmod?\n+      boolean commaSeperated \u003d false;\n+\n+      for(int i\u003d0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n+        if (i\u003e0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n+          patternError(modeStr);\n+        }\n+\n+        /* groups : 1 : [ugoa]*\n+         *          2 : [+-\u003d]\n+         *          3 : [rwxXt]+\n+         *          4 : [,\\s]*\n+         */\n+\n+        String str \u003d matcher.group(2);\n+        char type \u003d str.charAt(str.length() - 1);\n+\n+        boolean user, group, others, stickyBit;\n+        user \u003d group \u003d others \u003d stickyBit \u003d false;\n+\n+        for(char c : matcher.group(1).toCharArray()) {\n+          switch (c) {\n+          case \u0027u\u0027 : user \u003d true; break;\n+          case \u0027g\u0027 : group \u003d true; break;\n+          case \u0027o\u0027 : others \u003d true; break;\n+          case \u0027a\u0027 : break;\n+          default  : throw new RuntimeException(\"Unexpected\");          \n+          }\n+        }\n+\n+        if (!(user || group || others)) { // same as specifying \u0027a\u0027\n+          user \u003d group \u003d others \u003d true;\n+        }\n+\n+        short mode \u003d 0;\n+\n+        for(char c : matcher.group(3).toCharArray()) {\n+          switch (c) {\n+          case \u0027r\u0027 : mode |\u003d 4; break;\n+          case \u0027w\u0027 : mode |\u003d 2; break;\n+          case \u0027x\u0027 : mode |\u003d 1; break;\n+          case \u0027X\u0027 : mode |\u003d 8; break;\n+          case \u0027t\u0027 : stickyBit \u003d true; break;\n+          default  : throw new RuntimeException(\"Unexpected\");\n+          }\n+        }\n+\n+        if ( user ) {\n+          userMode \u003d mode;\n+          userType \u003d type;\n+        }\n+\n+        if ( group ) {\n+          groupMode \u003d mode;\n+          groupType \u003d type;\n+        }\n+\n+        if ( others ) {\n+          othersMode \u003d mode;\n+          othersType \u003d type;\n+          \n+          stickyMode \u003d (short) (stickyBit ? 1 : 0);\n+          stickyBitType \u003d type;\n+        }\n+\n+        commaSeperated \u003d matcher.group(4).contains(\",\");\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void applyNormalPattern(String modeStr, Matcher matcher)\n                                    throws IOException {\n      // Are there multiple permissions stored in one chmod?\n      boolean commaSeperated \u003d false;\n\n      for(int i\u003d0; i \u003c 1 || matcher.end() \u003c modeStr.length(); i++) {\n        if (i\u003e0 \u0026\u0026 (!commaSeperated || !matcher.find())) {\n          patternError(modeStr);\n        }\n\n        /* groups : 1 : [ugoa]*\n         *          2 : [+-\u003d]\n         *          3 : [rwxXt]+\n         *          4 : [,\\s]*\n         */\n\n        String str \u003d matcher.group(2);\n        char type \u003d str.charAt(str.length() - 1);\n\n        boolean user, group, others, stickyBit;\n        user \u003d group \u003d others \u003d stickyBit \u003d false;\n\n        for(char c : matcher.group(1).toCharArray()) {\n          switch (c) {\n          case \u0027u\u0027 : user \u003d true; break;\n          case \u0027g\u0027 : group \u003d true; break;\n          case \u0027o\u0027 : others \u003d true; break;\n          case \u0027a\u0027 : break;\n          default  : throw new RuntimeException(\"Unexpected\");          \n          }\n        }\n\n        if (!(user || group || others)) { // same as specifying \u0027a\u0027\n          user \u003d group \u003d others \u003d true;\n        }\n\n        short mode \u003d 0;\n\n        for(char c : matcher.group(3).toCharArray()) {\n          switch (c) {\n          case \u0027r\u0027 : mode |\u003d 4; break;\n          case \u0027w\u0027 : mode |\u003d 2; break;\n          case \u0027x\u0027 : mode |\u003d 1; break;\n          case \u0027X\u0027 : mode |\u003d 8; break;\n          case \u0027t\u0027 : stickyBit \u003d true; break;\n          default  : throw new RuntimeException(\"Unexpected\");\n          }\n        }\n\n        if ( user ) {\n          userMode \u003d mode;\n          userType \u003d type;\n        }\n\n        if ( group ) {\n          groupMode \u003d mode;\n          groupType \u003d type;\n        }\n\n        if ( others ) {\n          othersMode \u003d mode;\n          othersType \u003d type;\n          \n          stickyMode \u003d (short) (stickyBit ? 1 : 0);\n          stickyBitType \u003d type;\n        }\n\n        commaSeperated \u003d matcher.group(4).contains(\",\");\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/FsShellPermissions.java"
    }
  }
}