{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApiServer.java",
  "functionName": "updateComponent",
  "functionId": "updateComponent___request-HttpServletRequest(annotations-@Context)__appName-String(annotations-@PathParam(SERVICE_NAME))__componentName-String(annotations-@PathParam(COMPONENT_NAME))__component-Component",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
  "functionStartLine": 353,
  "functionEndLine": 418,
  "numCommitsSeen": 55,
  "timeTaken": 8389,
  "changeHistory": [
    "efc4d91cbeab8a13f6d61cb0e56443adb2d77559",
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
    "8d3b39de89809f5eed06f85f00ab223e2f75e49c",
    "190969006d4a7f9ef86d67bba472f7dc5642668a",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
    "7dd4490a44442bd2b682a5f1a8605e6f6c053037",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "1888318c89776f0bf354c1b13e3ee169e14ff638",
    "384ee13eeccef6994b5f5b2ea8de4513e52c2124",
    "c31cd981ebabc0747cabcc07a8c8797619ed2c53"
  ],
  "changeHistoryShort": {
    "efc4d91cbeab8a13f6d61cb0e56443adb2d77559": "Ybodychange",
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": "Yfilerename",
    "8d3b39de89809f5eed06f85f00ab223e2f75e49c": "Ybodychange",
    "190969006d4a7f9ef86d67bba472f7dc5642668a": "Ybodychange",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": "Ymultichange(Yparameterchange,Ybodychange)",
    "7dd4490a44442bd2b682a5f1a8605e6f6c053037": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange,Yparametermetachange)",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ymultichange(Ymovefromfile,Ybodychange,Yparametermetachange)",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Ybodychange",
    "384ee13eeccef6994b5f5b2ea8de4513e52c2124": "Ybodychange",
    "c31cd981ebabc0747cabcc07a8c8797619ed2c53": "Yintroduced"
  },
  "changeHistoryDetails": {
    "efc4d91cbeab8a13f6d61cb0e56443adb2d77559": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9067. YARN Resource Manager is running OOM because of leak of Configuration Object. Contributed by Eric Yang.\n",
      "commitDate": "28/11/18 5:34 PM",
      "commitName": "efc4d91cbeab8a13f6d61cb0e56443adb2d77559",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "12/11/18 4:53 PM",
      "commitNameOld": "4c465f5535054dad2ef0b18128fb115129f6939e",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 16.03,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,66 @@\n   public Response updateComponent(@Context HttpServletRequest request,\n       @PathParam(SERVICE_NAME) String appName,\n       @PathParam(COMPONENT_NAME) String componentName, Component component) {\n \n     try {\n       if (component \u003d\u003d null) {\n         throw new YarnException(\"No component data provided\");\n       }\n       if (component.getName() !\u003d null\n           \u0026\u0026 !component.getName().equals(componentName)) {\n         String msg \u003d \"Component name in the request object (\"\n             + component.getName() + \") does not match that in the URI path (\"\n             + componentName + \")\";\n         throw new YarnException(msg);\n       }\n       UserGroupInformation ugi \u003d getProxyUser(request);\n       if (component.getState() !\u003d null \u0026\u0026\n           component.getState().equals(ComponentState.UPGRADING)) {\n         LOG.info(\"PUT: upgrade component {} for service {} \" +\n             \"user \u003d {}\", component.getName(), appName, ugi);\n         return processComponentsUpgrade(ugi, appName,\n             Sets.newHashSet(componentName));\n       }\n \n       if (component.getNumberOfContainers() \u003d\u003d null) {\n         throw new YarnException(\"No container count provided\");\n       }\n       if (component.getNumberOfContainers() \u003c 0) {\n         String message \u003d \"Invalid number of containers specified \"\n             + component.getNumberOfContainers();\n         throw new YarnException(message);\n       }\n       Map\u003cString, Long\u003e original \u003d ugi\n           .doAs(new PrivilegedExceptionAction\u003cMap\u003cString, Long\u003e\u003e() {\n             @Override\n             public Map\u003cString, Long\u003e run() throws YarnException, IOException {\n               ServiceClient sc \u003d new ServiceClient();\n-              sc.init(YARN_CONFIG);\n-              sc.start();\n-              Map\u003cString, Long\u003e original \u003d sc.flexByRestService(appName,\n-                  Collections.singletonMap(componentName,\n-                      component.getNumberOfContainers()));\n-              sc.close();\n-              return original;\n+              try {\n+                sc.init(YARN_CONFIG);\n+                sc.start();\n+                Map\u003cString, Long\u003e original \u003d sc.flexByRestService(appName,\n+                    Collections.singletonMap(componentName,\n+                        component.getNumberOfContainers()));\n+                return original;\n+              } finally {\n+                sc.close();\n+              }\n             }\n           });\n       ServiceStatus status \u003d new ServiceStatus();\n       status.setDiagnostics(\n           \"Updating component (\" + componentName + \") size from \" + original\n               .get(componentName) + \" to \" + component.getNumberOfContainers());\n       return formatResponse(Status.OK, status);\n     } catch (AccessControlException e) {\n       return formatResponse(Status.FORBIDDEN, e.getMessage());\n     } catch (YarnException e) {\n       return formatResponse(Status.BAD_REQUEST, e.getMessage());\n     } catch (IOException | InterruptedException e) {\n       return formatResponse(Status.INTERNAL_SERVER_ERROR,\n           e.getMessage());\n     } catch (UndeclaredThrowableException e) {\n       return formatResponse(Status.INTERNAL_SERVER_ERROR,\n           e.getCause().getMessage());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateComponent(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String appName,\n      @PathParam(COMPONENT_NAME) String componentName, Component component) {\n\n    try {\n      if (component \u003d\u003d null) {\n        throw new YarnException(\"No component data provided\");\n      }\n      if (component.getName() !\u003d null\n          \u0026\u0026 !component.getName().equals(componentName)) {\n        String msg \u003d \"Component name in the request object (\"\n            + component.getName() + \") does not match that in the URI path (\"\n            + componentName + \")\";\n        throw new YarnException(msg);\n      }\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      if (component.getState() !\u003d null \u0026\u0026\n          component.getState().equals(ComponentState.UPGRADING)) {\n        LOG.info(\"PUT: upgrade component {} for service {} \" +\n            \"user \u003d {}\", component.getName(), appName, ugi);\n        return processComponentsUpgrade(ugi, appName,\n            Sets.newHashSet(componentName));\n      }\n\n      if (component.getNumberOfContainers() \u003d\u003d null) {\n        throw new YarnException(\"No container count provided\");\n      }\n      if (component.getNumberOfContainers() \u003c 0) {\n        String message \u003d \"Invalid number of containers specified \"\n            + component.getNumberOfContainers();\n        throw new YarnException(message);\n      }\n      Map\u003cString, Long\u003e original \u003d ugi\n          .doAs(new PrivilegedExceptionAction\u003cMap\u003cString, Long\u003e\u003e() {\n            @Override\n            public Map\u003cString, Long\u003e run() throws YarnException, IOException {\n              ServiceClient sc \u003d new ServiceClient();\n              try {\n                sc.init(YARN_CONFIG);\n                sc.start();\n                Map\u003cString, Long\u003e original \u003d sc.flexByRestService(appName,\n                    Collections.singletonMap(componentName,\n                        component.getNumberOfContainers()));\n                return original;\n              } finally {\n                sc.close();\n              }\n            }\n          });\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(\n          \"Updating component (\" + componentName + \") size from \" + original\n              .get(componentName) + \" to \" + component.getNumberOfContainers());\n      return formatResponse(Status.OK, status);\n    } catch (AccessControlException e) {\n      return formatResponse(Status.FORBIDDEN, e.getMessage());\n    } catch (YarnException e) {\n      return formatResponse(Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7530.  Refactored YARN service API project location.\n            Contributed by Chandni Singh\n",
      "commitDate": "18/05/18 2:29 PM",
      "commitName": "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/05/18 11:29 AM",
      "commitNameOld": "89f59113927dd886f09d8fe2c05ff2cd5d1390c1",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Response updateComponent(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String appName,\n      @PathParam(COMPONENT_NAME) String componentName, Component component) {\n\n    try {\n      if (component \u003d\u003d null) {\n        throw new YarnException(\"No component data provided\");\n      }\n      if (component.getName() !\u003d null\n          \u0026\u0026 !component.getName().equals(componentName)) {\n        String msg \u003d \"Component name in the request object (\"\n            + component.getName() + \") does not match that in the URI path (\"\n            + componentName + \")\";\n        throw new YarnException(msg);\n      }\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      if (component.getState() !\u003d null \u0026\u0026\n          component.getState().equals(ComponentState.UPGRADING)) {\n        LOG.info(\"PUT: upgrade component {} for service {} \" +\n            \"user \u003d {}\", component.getName(), appName, ugi);\n        return processComponentsUpgrade(ugi, appName,\n            Sets.newHashSet(componentName));\n      }\n\n      if (component.getNumberOfContainers() \u003d\u003d null) {\n        throw new YarnException(\"No container count provided\");\n      }\n      if (component.getNumberOfContainers() \u003c 0) {\n        String message \u003d \"Invalid number of containers specified \"\n            + component.getNumberOfContainers();\n        throw new YarnException(message);\n      }\n      Map\u003cString, Long\u003e original \u003d ugi\n          .doAs(new PrivilegedExceptionAction\u003cMap\u003cString, Long\u003e\u003e() {\n            @Override\n            public Map\u003cString, Long\u003e run() throws YarnException, IOException {\n              ServiceClient sc \u003d new ServiceClient();\n              sc.init(YARN_CONFIG);\n              sc.start();\n              Map\u003cString, Long\u003e original \u003d sc.flexByRestService(appName,\n                  Collections.singletonMap(componentName,\n                      component.getNumberOfContainers()));\n              sc.close();\n              return original;\n            }\n          });\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(\n          \"Updating component (\" + componentName + \") size from \" + original\n              .get(componentName) + \" to \" + component.getNumberOfContainers());\n      return formatResponse(Status.OK, status);\n    } catch (AccessControlException e) {\n      return formatResponse(Status.FORBIDDEN, e.getMessage());\n    } catch (YarnException e) {\n      return formatResponse(Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
      }
    },
    "8d3b39de89809f5eed06f85f00ab223e2f75e49c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8081.  Add support to upgrade a component.\n            Contributed by Chandni Singh\n",
      "commitDate": "15/05/18 5:40 PM",
      "commitName": "8d3b39de89809f5eed06f85f00ab223e2f75e49c",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "03/05/18 10:27 AM",
      "commitNameOld": "7fe3214d4bb810c0da18dd936875b4e2588ba518",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 12.3,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,63 @@\n   public Response updateComponent(@Context HttpServletRequest request,\n       @PathParam(SERVICE_NAME) String appName,\n       @PathParam(COMPONENT_NAME) String componentName, Component component) {\n \n     try {\n       if (component \u003d\u003d null) {\n         throw new YarnException(\"No component data provided\");\n       }\n       if (component.getName() !\u003d null\n           \u0026\u0026 !component.getName().equals(componentName)) {\n         String msg \u003d \"Component name in the request object (\"\n             + component.getName() + \") does not match that in the URI path (\"\n             + componentName + \")\";\n         throw new YarnException(msg);\n       }\n+      UserGroupInformation ugi \u003d getProxyUser(request);\n+      if (component.getState() !\u003d null \u0026\u0026\n+          component.getState().equals(ComponentState.UPGRADING)) {\n+        LOG.info(\"PUT: upgrade component {} for service {} \" +\n+            \"user \u003d {}\", component.getName(), appName, ugi);\n+        return processComponentsUpgrade(ugi, appName,\n+            Sets.newHashSet(componentName));\n+      }\n+\n       if (component.getNumberOfContainers() \u003d\u003d null) {\n         throw new YarnException(\"No container count provided\");\n       }\n       if (component.getNumberOfContainers() \u003c 0) {\n         String message \u003d \"Invalid number of containers specified \"\n             + component.getNumberOfContainers();\n         throw new YarnException(message);\n       }\n-      UserGroupInformation ugi \u003d getProxyUser(request);\n       Map\u003cString, Long\u003e original \u003d ugi\n           .doAs(new PrivilegedExceptionAction\u003cMap\u003cString, Long\u003e\u003e() {\n             @Override\n             public Map\u003cString, Long\u003e run() throws YarnException, IOException {\n               ServiceClient sc \u003d new ServiceClient();\n               sc.init(YARN_CONFIG);\n               sc.start();\n               Map\u003cString, Long\u003e original \u003d sc.flexByRestService(appName,\n                   Collections.singletonMap(componentName,\n                       component.getNumberOfContainers()));\n               sc.close();\n               return original;\n             }\n           });\n       ServiceStatus status \u003d new ServiceStatus();\n       status.setDiagnostics(\n           \"Updating component (\" + componentName + \") size from \" + original\n               .get(componentName) + \" to \" + component.getNumberOfContainers());\n       return formatResponse(Status.OK, status);\n     } catch (AccessControlException e) {\n       return formatResponse(Status.FORBIDDEN, e.getMessage());\n     } catch (YarnException e) {\n       return formatResponse(Status.BAD_REQUEST, e.getMessage());\n     } catch (IOException | InterruptedException e) {\n       return formatResponse(Status.INTERNAL_SERVER_ERROR,\n           e.getMessage());\n     } catch (UndeclaredThrowableException e) {\n       return formatResponse(Status.INTERNAL_SERVER_ERROR,\n           e.getCause().getMessage());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateComponent(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String appName,\n      @PathParam(COMPONENT_NAME) String componentName, Component component) {\n\n    try {\n      if (component \u003d\u003d null) {\n        throw new YarnException(\"No component data provided\");\n      }\n      if (component.getName() !\u003d null\n          \u0026\u0026 !component.getName().equals(componentName)) {\n        String msg \u003d \"Component name in the request object (\"\n            + component.getName() + \") does not match that in the URI path (\"\n            + componentName + \")\";\n        throw new YarnException(msg);\n      }\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      if (component.getState() !\u003d null \u0026\u0026\n          component.getState().equals(ComponentState.UPGRADING)) {\n        LOG.info(\"PUT: upgrade component {} for service {} \" +\n            \"user \u003d {}\", component.getName(), appName, ugi);\n        return processComponentsUpgrade(ugi, appName,\n            Sets.newHashSet(componentName));\n      }\n\n      if (component.getNumberOfContainers() \u003d\u003d null) {\n        throw new YarnException(\"No container count provided\");\n      }\n      if (component.getNumberOfContainers() \u003c 0) {\n        String message \u003d \"Invalid number of containers specified \"\n            + component.getNumberOfContainers();\n        throw new YarnException(message);\n      }\n      Map\u003cString, Long\u003e original \u003d ugi\n          .doAs(new PrivilegedExceptionAction\u003cMap\u003cString, Long\u003e\u003e() {\n            @Override\n            public Map\u003cString, Long\u003e run() throws YarnException, IOException {\n              ServiceClient sc \u003d new ServiceClient();\n              sc.init(YARN_CONFIG);\n              sc.start();\n              Map\u003cString, Long\u003e original \u003d sc.flexByRestService(appName,\n                  Collections.singletonMap(componentName,\n                      component.getNumberOfContainers()));\n              sc.close();\n              return original;\n            }\n          });\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(\n          \"Updating component (\" + componentName + \") size from \" + original\n              .get(componentName) + \" to \" + component.getNumberOfContainers());\n      return formatResponse(Status.OK, status);\n    } catch (AccessControlException e) {\n      return formatResponse(Status.FORBIDDEN, e.getMessage());\n    } catch (YarnException e) {\n      return formatResponse(Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "190969006d4a7f9ef86d67bba472f7dc5642668a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7836.  Added error check for updating service components.\n            (Contributed by Gour Saha)\n",
      "commitDate": "22/02/18 1:08 PM",
      "commitName": "190969006d4a7f9ef86d67bba472f7dc5642668a",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "09/02/18 5:01 PM",
      "commitNameOld": "c97d5bceb2305e02f9e8b6c2c10a2aba7fdc652b",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 12.84,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,55 @@\n   public Response updateComponent(@Context HttpServletRequest request,\n       @PathParam(SERVICE_NAME) String appName,\n       @PathParam(COMPONENT_NAME) String componentName, Component component) {\n \n     try {\n-      UserGroupInformation ugi \u003d getProxyUser(request);\n+      if (component \u003d\u003d null) {\n+        throw new YarnException(\"No component data provided\");\n+      }\n+      if (component.getName() !\u003d null\n+          \u0026\u0026 !component.getName().equals(componentName)) {\n+        String msg \u003d \"Component name in the request object (\"\n+            + component.getName() + \") does not match that in the URI path (\"\n+            + componentName + \")\";\n+        throw new YarnException(msg);\n+      }\n+      if (component.getNumberOfContainers() \u003d\u003d null) {\n+        throw new YarnException(\"No container count provided\");\n+      }\n       if (component.getNumberOfContainers() \u003c 0) {\n-        String message \u003d\n-            \"Service \u003d \" + appName + \", Component \u003d \" + component.getName()\n-                + \": Invalid number of containers specified \" + component\n-                .getNumberOfContainers();\n+        String message \u003d \"Invalid number of containers specified \"\n+            + component.getNumberOfContainers();\n         throw new YarnException(message);\n       }\n+      UserGroupInformation ugi \u003d getProxyUser(request);\n       Map\u003cString, Long\u003e original \u003d ugi\n           .doAs(new PrivilegedExceptionAction\u003cMap\u003cString, Long\u003e\u003e() {\n             @Override\n             public Map\u003cString, Long\u003e run() throws YarnException, IOException {\n               ServiceClient sc \u003d new ServiceClient();\n               sc.init(YARN_CONFIG);\n               sc.start();\n               Map\u003cString, Long\u003e original \u003d sc.flexByRestService(appName,\n-                  Collections.singletonMap(component.getName(),\n+                  Collections.singletonMap(componentName,\n                       component.getNumberOfContainers()));\n               sc.close();\n               return original;\n             }\n           });\n       ServiceStatus status \u003d new ServiceStatus();\n       status.setDiagnostics(\n           \"Updating component (\" + componentName + \") size from \" + original\n               .get(componentName) + \" to \" + component.getNumberOfContainers());\n       return formatResponse(Status.OK, status);\n     } catch (AccessControlException e) {\n       return formatResponse(Status.FORBIDDEN, e.getMessage());\n     } catch (YarnException e) {\n       return formatResponse(Status.BAD_REQUEST, e.getMessage());\n     } catch (IOException | InterruptedException e) {\n       return formatResponse(Status.INTERNAL_SERVER_ERROR,\n           e.getMessage());\n     } catch (UndeclaredThrowableException e) {\n       return formatResponse(Status.INTERNAL_SERVER_ERROR,\n           e.getCause().getMessage());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateComponent(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String appName,\n      @PathParam(COMPONENT_NAME) String componentName, Component component) {\n\n    try {\n      if (component \u003d\u003d null) {\n        throw new YarnException(\"No component data provided\");\n      }\n      if (component.getName() !\u003d null\n          \u0026\u0026 !component.getName().equals(componentName)) {\n        String msg \u003d \"Component name in the request object (\"\n            + component.getName() + \") does not match that in the URI path (\"\n            + componentName + \")\";\n        throw new YarnException(msg);\n      }\n      if (component.getNumberOfContainers() \u003d\u003d null) {\n        throw new YarnException(\"No container count provided\");\n      }\n      if (component.getNumberOfContainers() \u003c 0) {\n        String message \u003d \"Invalid number of containers specified \"\n            + component.getNumberOfContainers();\n        throw new YarnException(message);\n      }\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      Map\u003cString, Long\u003e original \u003d ugi\n          .doAs(new PrivilegedExceptionAction\u003cMap\u003cString, Long\u003e\u003e() {\n            @Override\n            public Map\u003cString, Long\u003e run() throws YarnException, IOException {\n              ServiceClient sc \u003d new ServiceClient();\n              sc.init(YARN_CONFIG);\n              sc.start();\n              Map\u003cString, Long\u003e original \u003d sc.flexByRestService(appName,\n                  Collections.singletonMap(componentName,\n                      component.getNumberOfContainers()));\n              sc.close();\n              return original;\n            }\n          });\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(\n          \"Updating component (\" + componentName + \") size from \" + original\n              .get(componentName) + \" to \" + component.getNumberOfContainers());\n      return formatResponse(Status.OK, status);\n    } catch (AccessControlException e) {\n      return formatResponse(Status.FORBIDDEN, e.getMessage());\n    } catch (YarnException e) {\n      return formatResponse(Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
      "commitDate": "23/01/18 5:54 PM",
      "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
          "commitDate": "23/01/18 5:54 PM",
          "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "05/01/18 6:25 PM",
          "commitNameOld": "836e3c45e8232fc4c8c795c0f93d2f3d7353f392",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,44 @@\n-  public Response updateComponent(@PathParam(SERVICE_NAME) String appName,\n+  public Response updateComponent(@Context HttpServletRequest request,\n+      @PathParam(SERVICE_NAME) String appName,\n       @PathParam(COMPONENT_NAME) String componentName, Component component) {\n \n-    if (component.getNumberOfContainers() \u003c 0) {\n-      return Response.status(Status.BAD_REQUEST).entity(\n-          \"Service \u003d \" + appName + \", Component \u003d \" + component.getName()\n-              + \": Invalid number of containers specified \" + component\n-              .getNumberOfContainers()).build();\n-    }\n-    ServiceStatus status \u003d new ServiceStatus();\n     try {\n-      Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n-          Collections.singletonMap(component.getName(),\n-              component.getNumberOfContainers()));\n+      UserGroupInformation ugi \u003d getProxyUser(request);\n+      if (component.getNumberOfContainers() \u003c 0) {\n+        String message \u003d\n+            \"Service \u003d \" + appName + \", Component \u003d \" + component.getName()\n+                + \": Invalid number of containers specified \" + component\n+                .getNumberOfContainers();\n+        throw new YarnException(message);\n+      }\n+      Map\u003cString, Long\u003e original \u003d ugi\n+          .doAs(new PrivilegedExceptionAction\u003cMap\u003cString, Long\u003e\u003e() {\n+            @Override\n+            public Map\u003cString, Long\u003e run() throws YarnException, IOException {\n+              ServiceClient sc \u003d new ServiceClient();\n+              sc.init(YARN_CONFIG);\n+              sc.start();\n+              Map\u003cString, Long\u003e original \u003d sc.flexByRestService(appName,\n+                  Collections.singletonMap(component.getName(),\n+                      component.getNumberOfContainers()));\n+              sc.close();\n+              return original;\n+            }\n+          });\n+      ServiceStatus status \u003d new ServiceStatus();\n       status.setDiagnostics(\n           \"Updating component (\" + componentName + \") size from \" + original\n               .get(componentName) + \" to \" + component.getNumberOfContainers());\n-      return Response.ok().entity(status).build();\n-    } catch (YarnException | IOException e) {\n-      status.setDiagnostics(e.getMessage());\n-      return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n-          .build();\n+      return formatResponse(Status.OK, status);\n+    } catch (AccessControlException e) {\n+      return formatResponse(Status.FORBIDDEN, e.getMessage());\n+    } catch (YarnException e) {\n+      return formatResponse(Status.BAD_REQUEST, e.getMessage());\n+    } catch (IOException | InterruptedException e) {\n+      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n+          e.getMessage());\n+    } catch (UndeclaredThrowableException e) {\n+      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n+          e.getCause().getMessage());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response updateComponent(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String appName,\n      @PathParam(COMPONENT_NAME) String componentName, Component component) {\n\n    try {\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      if (component.getNumberOfContainers() \u003c 0) {\n        String message \u003d\n            \"Service \u003d \" + appName + \", Component \u003d \" + component.getName()\n                + \": Invalid number of containers specified \" + component\n                .getNumberOfContainers();\n        throw new YarnException(message);\n      }\n      Map\u003cString, Long\u003e original \u003d ugi\n          .doAs(new PrivilegedExceptionAction\u003cMap\u003cString, Long\u003e\u003e() {\n            @Override\n            public Map\u003cString, Long\u003e run() throws YarnException, IOException {\n              ServiceClient sc \u003d new ServiceClient();\n              sc.init(YARN_CONFIG);\n              sc.start();\n              Map\u003cString, Long\u003e original \u003d sc.flexByRestService(appName,\n                  Collections.singletonMap(component.getName(),\n                      component.getNumberOfContainers()));\n              sc.close();\n              return original;\n            }\n          });\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(\n          \"Updating component (\" + componentName + \") size from \" + original\n              .get(componentName) + \" to \" + component.getNumberOfContainers());\n      return formatResponse(Status.OK, status);\n    } catch (AccessControlException e) {\n      return formatResponse(Status.FORBIDDEN, e.getMessage());\n    } catch (YarnException e) {\n      return formatResponse(Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {
            "oldValue": "[appName-String(annotations-@PathParam(SERVICE_NAME)), componentName-String(annotations-@PathParam(COMPONENT_NAME)), component-Component]",
            "newValue": "[request-HttpServletRequest(annotations-@Context), appName-String(annotations-@PathParam(SERVICE_NAME)), componentName-String(annotations-@PathParam(COMPONENT_NAME)), component-Component]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
          "commitDate": "23/01/18 5:54 PM",
          "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "05/01/18 6:25 PM",
          "commitNameOld": "836e3c45e8232fc4c8c795c0f93d2f3d7353f392",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,44 @@\n-  public Response updateComponent(@PathParam(SERVICE_NAME) String appName,\n+  public Response updateComponent(@Context HttpServletRequest request,\n+      @PathParam(SERVICE_NAME) String appName,\n       @PathParam(COMPONENT_NAME) String componentName, Component component) {\n \n-    if (component.getNumberOfContainers() \u003c 0) {\n-      return Response.status(Status.BAD_REQUEST).entity(\n-          \"Service \u003d \" + appName + \", Component \u003d \" + component.getName()\n-              + \": Invalid number of containers specified \" + component\n-              .getNumberOfContainers()).build();\n-    }\n-    ServiceStatus status \u003d new ServiceStatus();\n     try {\n-      Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n-          Collections.singletonMap(component.getName(),\n-              component.getNumberOfContainers()));\n+      UserGroupInformation ugi \u003d getProxyUser(request);\n+      if (component.getNumberOfContainers() \u003c 0) {\n+        String message \u003d\n+            \"Service \u003d \" + appName + \", Component \u003d \" + component.getName()\n+                + \": Invalid number of containers specified \" + component\n+                .getNumberOfContainers();\n+        throw new YarnException(message);\n+      }\n+      Map\u003cString, Long\u003e original \u003d ugi\n+          .doAs(new PrivilegedExceptionAction\u003cMap\u003cString, Long\u003e\u003e() {\n+            @Override\n+            public Map\u003cString, Long\u003e run() throws YarnException, IOException {\n+              ServiceClient sc \u003d new ServiceClient();\n+              sc.init(YARN_CONFIG);\n+              sc.start();\n+              Map\u003cString, Long\u003e original \u003d sc.flexByRestService(appName,\n+                  Collections.singletonMap(component.getName(),\n+                      component.getNumberOfContainers()));\n+              sc.close();\n+              return original;\n+            }\n+          });\n+      ServiceStatus status \u003d new ServiceStatus();\n       status.setDiagnostics(\n           \"Updating component (\" + componentName + \") size from \" + original\n               .get(componentName) + \" to \" + component.getNumberOfContainers());\n-      return Response.ok().entity(status).build();\n-    } catch (YarnException | IOException e) {\n-      status.setDiagnostics(e.getMessage());\n-      return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n-          .build();\n+      return formatResponse(Status.OK, status);\n+    } catch (AccessControlException e) {\n+      return formatResponse(Status.FORBIDDEN, e.getMessage());\n+    } catch (YarnException e) {\n+      return formatResponse(Status.BAD_REQUEST, e.getMessage());\n+    } catch (IOException | InterruptedException e) {\n+      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n+          e.getMessage());\n+    } catch (UndeclaredThrowableException e) {\n+      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n+          e.getCause().getMessage());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response updateComponent(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String appName,\n      @PathParam(COMPONENT_NAME) String componentName, Component component) {\n\n    try {\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      if (component.getNumberOfContainers() \u003c 0) {\n        String message \u003d\n            \"Service \u003d \" + appName + \", Component \u003d \" + component.getName()\n                + \": Invalid number of containers specified \" + component\n                .getNumberOfContainers();\n        throw new YarnException(message);\n      }\n      Map\u003cString, Long\u003e original \u003d ugi\n          .doAs(new PrivilegedExceptionAction\u003cMap\u003cString, Long\u003e\u003e() {\n            @Override\n            public Map\u003cString, Long\u003e run() throws YarnException, IOException {\n              ServiceClient sc \u003d new ServiceClient();\n              sc.init(YARN_CONFIG);\n              sc.start();\n              Map\u003cString, Long\u003e original \u003d sc.flexByRestService(appName,\n                  Collections.singletonMap(component.getName(),\n                      component.getNumberOfContainers()));\n              sc.close();\n              return original;\n            }\n          });\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(\n          \"Updating component (\" + componentName + \") size from \" + original\n              .get(componentName) + \" to \" + component.getNumberOfContainers());\n      return formatResponse(Status.OK, status);\n    } catch (AccessControlException e) {\n      return formatResponse(Status.FORBIDDEN, e.getMessage());\n    } catch (YarnException e) {\n      return formatResponse(Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "7dd4490a44442bd2b682a5f1a8605e6f6c053037": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7073. Yarn native services rest API documentation. Contributed by Gour Saha\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "7dd4490a44442bd2b682a5f1a8605e6f6c053037",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public Response updateComponent(@PathParam(SERVICE_NAME) String appName,\n       @PathParam(COMPONENT_NAME) String componentName, Component component) {\n \n     if (component.getNumberOfContainers() \u003c 0) {\n       return Response.status(Status.BAD_REQUEST).entity(\n           \"Service \u003d \" + appName + \", Component \u003d \" + component.getName()\n               + \": Invalid number of containers specified \" + component\n               .getNumberOfContainers()).build();\n     }\n+    ServiceStatus status \u003d new ServiceStatus();\n     try {\n       Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n           Collections.singletonMap(component.getName(),\n               component.getNumberOfContainers()));\n-      return Response.ok().entity(\n-          \"Updating component \" + componentName + \" size from \" + original\n-              .get(componentName) + \" to \" + component.getNumberOfContainers())\n-          .build();\n+      status.setDiagnostics(\n+          \"Updating component (\" + componentName + \") size from \" + original\n+              .get(componentName) + \" to \" + component.getNumberOfContainers());\n+      return Response.ok().entity(status).build();\n     } catch (YarnException | IOException e) {\n-      ServiceStatus status \u003d new ServiceStatus();\n       status.setDiagnostics(e.getMessage());\n       return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n           .build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateComponent(@PathParam(SERVICE_NAME) String appName,\n      @PathParam(COMPONENT_NAME) String componentName, Component component) {\n\n    if (component.getNumberOfContainers() \u003c 0) {\n      return Response.status(Status.BAD_REQUEST).entity(\n          \"Service \u003d \" + appName + \", Component \u003d \" + component.getName()\n              + \": Invalid number of containers specified \" + component\n              .getNumberOfContainers()).build();\n    }\n    ServiceStatus status \u003d new ServiceStatus();\n    try {\n      Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n          Collections.singletonMap(component.getName(),\n              component.getNumberOfContainers()));\n      status.setDiagnostics(\n          \"Updating component (\" + componentName + \") size from \" + original\n              .get(componentName) + \" to \" + component.getNumberOfContainers());\n      return Response.ok().entity(status).build();\n    } catch (YarnException | IOException e) {\n      status.setDiagnostics(e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n          .build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparametermetachange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,24 @@\n-  public Response updateComponent(@PathParam(APP_NAME) String appName,\n+  public Response updateComponent(@PathParam(SERVICE_NAME) String appName,\n       @PathParam(COMPONENT_NAME) String componentName, Component component) {\n \n     if (component.getNumberOfContainers() \u003c 0) {\n       return Response.status(Status.BAD_REQUEST).entity(\n-          \"Application \u003d \" + appName + \", Component \u003d \" + component.getName()\n+          \"Service \u003d \" + appName + \", Component \u003d \" + component.getName()\n               + \": Invalid number of containers specified \" + component\n               .getNumberOfContainers()).build();\n     }\n     try {\n       Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n           Collections.singletonMap(component.getName(),\n               component.getNumberOfContainers()));\n       return Response.ok().entity(\n           \"Updating component \" + componentName + \" size from \" + original\n               .get(componentName) + \" to \" + component.getNumberOfContainers())\n           .build();\n     } catch (YarnException | IOException e) {\n-      ApplicationStatus status \u003d new ApplicationStatus();\n+      ServiceStatus status \u003d new ServiceStatus();\n       status.setDiagnostics(e.getMessage());\n       return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n           .build();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response updateComponent(@PathParam(SERVICE_NAME) String appName,\n      @PathParam(COMPONENT_NAME) String componentName, Component component) {\n\n    if (component.getNumberOfContainers() \u003c 0) {\n      return Response.status(Status.BAD_REQUEST).entity(\n          \"Service \u003d \" + appName + \", Component \u003d \" + component.getName()\n              + \": Invalid number of containers specified \" + component\n              .getNumberOfContainers()).build();\n    }\n    try {\n      Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n          Collections.singletonMap(component.getName(),\n              component.getNumberOfContainers()));\n      return Response.ok().entity(\n          \"Updating component \" + componentName + \" size from \" + original\n              .get(componentName) + \" to \" + component.getNumberOfContainers())\n          .build();\n    } catch (YarnException | IOException e) {\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n          .build();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApplicationApiService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,24 @@\n-  public Response updateComponent(@PathParam(APP_NAME) String appName,\n+  public Response updateComponent(@PathParam(SERVICE_NAME) String appName,\n       @PathParam(COMPONENT_NAME) String componentName, Component component) {\n \n     if (component.getNumberOfContainers() \u003c 0) {\n       return Response.status(Status.BAD_REQUEST).entity(\n-          \"Application \u003d \" + appName + \", Component \u003d \" + component.getName()\n+          \"Service \u003d \" + appName + \", Component \u003d \" + component.getName()\n               + \": Invalid number of containers specified \" + component\n               .getNumberOfContainers()).build();\n     }\n     try {\n       Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n           Collections.singletonMap(component.getName(),\n               component.getNumberOfContainers()));\n       return Response.ok().entity(\n           \"Updating component \" + componentName + \" size from \" + original\n               .get(componentName) + \" to \" + component.getNumberOfContainers())\n           .build();\n     } catch (YarnException | IOException e) {\n-      ApplicationStatus status \u003d new ApplicationStatus();\n+      ServiceStatus status \u003d new ServiceStatus();\n       status.setDiagnostics(e.getMessage());\n       return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n           .build();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response updateComponent(@PathParam(SERVICE_NAME) String appName,\n      @PathParam(COMPONENT_NAME) String componentName, Component component) {\n\n    if (component.getNumberOfContainers() \u003c 0) {\n      return Response.status(Status.BAD_REQUEST).entity(\n          \"Service \u003d \" + appName + \", Component \u003d \" + component.getName()\n              + \": Invalid number of containers specified \" + component\n              .getNumberOfContainers()).build();\n    }\n    try {\n      Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n          Collections.singletonMap(component.getName(),\n              component.getNumberOfContainers()));\n      return Response.ok().entity(\n          \"Updating component \" + componentName + \" size from \" + original\n              .get(componentName) + \" to \" + component.getNumberOfContainers())\n          .build();\n    } catch (YarnException | IOException e) {\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n          .build();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,24 @@\n-  public Response updateComponent(@PathParam(APP_NAME) String appName,\n+  public Response updateComponent(@PathParam(SERVICE_NAME) String appName,\n       @PathParam(COMPONENT_NAME) String componentName, Component component) {\n \n     if (component.getNumberOfContainers() \u003c 0) {\n       return Response.status(Status.BAD_REQUEST).entity(\n-          \"Application \u003d \" + appName + \", Component \u003d \" + component.getName()\n+          \"Service \u003d \" + appName + \", Component \u003d \" + component.getName()\n               + \": Invalid number of containers specified \" + component\n               .getNumberOfContainers()).build();\n     }\n     try {\n       Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n           Collections.singletonMap(component.getName(),\n               component.getNumberOfContainers()));\n       return Response.ok().entity(\n           \"Updating component \" + componentName + \" size from \" + original\n               .get(componentName) + \" to \" + component.getNumberOfContainers())\n           .build();\n     } catch (YarnException | IOException e) {\n-      ApplicationStatus status \u003d new ApplicationStatus();\n+      ServiceStatus status \u003d new ServiceStatus();\n       status.setDiagnostics(e.getMessage());\n       return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n           .build();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response updateComponent(@PathParam(SERVICE_NAME) String appName,\n      @PathParam(COMPONENT_NAME) String componentName, Component component) {\n\n    if (component.getNumberOfContainers() \u003c 0) {\n      return Response.status(Status.BAD_REQUEST).entity(\n          \"Service \u003d \" + appName + \", Component \u003d \" + component.getName()\n              + \": Invalid number of containers specified \" + component\n              .getNumberOfContainers()).build();\n    }\n    try {\n      Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n          Collections.singletonMap(component.getName(),\n              component.getNumberOfContainers()));\n      return Response.ok().entity(\n          \"Updating component \" + componentName + \" size from \" + original\n              .get(componentName) + \" to \" + component.getNumberOfContainers())\n          .build();\n    } catch (YarnException | IOException e) {\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n          .build();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {
            "oldValue": "[appName-String(annotations-@PathParam(APP_NAME)), componentName-String(annotations-@PathParam(COMPONENT_NAME)), component-Component]",
            "newValue": "[appName-String(annotations-@PathParam(SERVICE_NAME)), componentName-String(annotations-@PathParam(COMPONENT_NAME)), component-Component]"
          }
        }
      ]
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparametermetachange)",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  public Response updateComponent(@PathParam(\"app_name\") String appName,\n-      @PathParam(\"component_name\") String componentName, Component component) {\n+  public Response updateComponent(@PathParam(APP_NAME) String appName,\n+      @PathParam(COMPONENT_NAME) String componentName, Component component) {\n \n     if (component.getNumberOfContainers() \u003c 0) {\n       return Response.status(Status.BAD_REQUEST).entity(\n           \"Application \u003d \" + appName + \", Component \u003d \" + component.getName()\n               + \": Invalid number of containers specified \" + component\n               .getNumberOfContainers()).build();\n     }\n     try {\n       Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n           Collections.singletonMap(component.getName(),\n               component.getNumberOfContainers()));\n-      return Response.ok().entity(\"Updating \" + componentName + \" size from \"\n-          + original.get(componentName) + \" to \"\n-          + component.getNumberOfContainers()).build();\n+      return Response.ok().entity(\n+          \"Updating component \" + componentName + \" size from \" + original\n+              .get(componentName) + \" to \" + component.getNumberOfContainers())\n+          .build();\n     } catch (YarnException | IOException e) {\n       ApplicationStatus status \u003d new ApplicationStatus();\n       status.setDiagnostics(e.getMessage());\n       return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n           .build();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response updateComponent(@PathParam(APP_NAME) String appName,\n      @PathParam(COMPONENT_NAME) String componentName, Component component) {\n\n    if (component.getNumberOfContainers() \u003c 0) {\n      return Response.status(Status.BAD_REQUEST).entity(\n          \"Application \u003d \" + appName + \", Component \u003d \" + component.getName()\n              + \": Invalid number of containers specified \" + component\n              .getNumberOfContainers()).build();\n    }\n    try {\n      Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n          Collections.singletonMap(component.getName(),\n              component.getNumberOfContainers()));\n      return Response.ok().entity(\n          \"Updating component \" + componentName + \" size from \" + original\n              .get(componentName) + \" to \" + component.getNumberOfContainers())\n          .build();\n    } catch (YarnException | IOException e) {\n      ApplicationStatus status \u003d new ApplicationStatus();\n      status.setDiagnostics(e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n          .build();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApplicationApiService.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/services/api/impl/ApplicationApiService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApplicationApiService.java",
            "oldMethodName": "updateComponent",
            "newMethodName": "updateComponent"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  public Response updateComponent(@PathParam(\"app_name\") String appName,\n-      @PathParam(\"component_name\") String componentName, Component component) {\n+  public Response updateComponent(@PathParam(APP_NAME) String appName,\n+      @PathParam(COMPONENT_NAME) String componentName, Component component) {\n \n     if (component.getNumberOfContainers() \u003c 0) {\n       return Response.status(Status.BAD_REQUEST).entity(\n           \"Application \u003d \" + appName + \", Component \u003d \" + component.getName()\n               + \": Invalid number of containers specified \" + component\n               .getNumberOfContainers()).build();\n     }\n     try {\n       Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n           Collections.singletonMap(component.getName(),\n               component.getNumberOfContainers()));\n-      return Response.ok().entity(\"Updating \" + componentName + \" size from \"\n-          + original.get(componentName) + \" to \"\n-          + component.getNumberOfContainers()).build();\n+      return Response.ok().entity(\n+          \"Updating component \" + componentName + \" size from \" + original\n+              .get(componentName) + \" to \" + component.getNumberOfContainers())\n+          .build();\n     } catch (YarnException | IOException e) {\n       ApplicationStatus status \u003d new ApplicationStatus();\n       status.setDiagnostics(e.getMessage());\n       return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n           .build();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response updateComponent(@PathParam(APP_NAME) String appName,\n      @PathParam(COMPONENT_NAME) String componentName, Component component) {\n\n    if (component.getNumberOfContainers() \u003c 0) {\n      return Response.status(Status.BAD_REQUEST).entity(\n          \"Application \u003d \" + appName + \", Component \u003d \" + component.getName()\n              + \": Invalid number of containers specified \" + component\n              .getNumberOfContainers()).build();\n    }\n    try {\n      Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n          Collections.singletonMap(component.getName(),\n              component.getNumberOfContainers()));\n      return Response.ok().entity(\n          \"Updating component \" + componentName + \" size from \" + original\n              .get(componentName) + \" to \" + component.getNumberOfContainers())\n          .build();\n    } catch (YarnException | IOException e) {\n      ApplicationStatus status \u003d new ApplicationStatus();\n      status.setDiagnostics(e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n          .build();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApplicationApiService.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  public Response updateComponent(@PathParam(\"app_name\") String appName,\n-      @PathParam(\"component_name\") String componentName, Component component) {\n+  public Response updateComponent(@PathParam(APP_NAME) String appName,\n+      @PathParam(COMPONENT_NAME) String componentName, Component component) {\n \n     if (component.getNumberOfContainers() \u003c 0) {\n       return Response.status(Status.BAD_REQUEST).entity(\n           \"Application \u003d \" + appName + \", Component \u003d \" + component.getName()\n               + \": Invalid number of containers specified \" + component\n               .getNumberOfContainers()).build();\n     }\n     try {\n       Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n           Collections.singletonMap(component.getName(),\n               component.getNumberOfContainers()));\n-      return Response.ok().entity(\"Updating \" + componentName + \" size from \"\n-          + original.get(componentName) + \" to \"\n-          + component.getNumberOfContainers()).build();\n+      return Response.ok().entity(\n+          \"Updating component \" + componentName + \" size from \" + original\n+              .get(componentName) + \" to \" + component.getNumberOfContainers())\n+          .build();\n     } catch (YarnException | IOException e) {\n       ApplicationStatus status \u003d new ApplicationStatus();\n       status.setDiagnostics(e.getMessage());\n       return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n           .build();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response updateComponent(@PathParam(APP_NAME) String appName,\n      @PathParam(COMPONENT_NAME) String componentName, Component component) {\n\n    if (component.getNumberOfContainers() \u003c 0) {\n      return Response.status(Status.BAD_REQUEST).entity(\n          \"Application \u003d \" + appName + \", Component \u003d \" + component.getName()\n              + \": Invalid number of containers specified \" + component\n              .getNumberOfContainers()).build();\n    }\n    try {\n      Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n          Collections.singletonMap(component.getName(),\n              component.getNumberOfContainers()));\n      return Response.ok().entity(\n          \"Updating component \" + componentName + \" size from \" + original\n              .get(componentName) + \" to \" + component.getNumberOfContainers())\n          .build();\n    } catch (YarnException | IOException e) {\n      ApplicationStatus status \u003d new ApplicationStatus();\n      status.setDiagnostics(e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n          .build();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApplicationApiService.java",
          "extendedDetails": {
            "oldValue": "[appName-String(annotations-@PathParam(\"app_name\")), componentName-String(annotations-@PathParam(\"component_name\")), component-Component]",
            "newValue": "[appName-String(annotations-@PathParam(APP_NAME)), componentName-String(annotations-@PathParam(COMPONENT_NAME)), component-Component]"
          }
        }
      ]
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:28 PM",
      "commitNameOld": "384ee13eeccef6994b5f5b2ea8de4513e52c2124",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public Response updateComponent(@PathParam(\"app_name\") String appName,\n       @PathParam(\"component_name\") String componentName, Component component) {\n \n     if (component.getNumberOfContainers() \u003c 0) {\n       return Response.status(Status.BAD_REQUEST).entity(\n           \"Application \u003d \" + appName + \", Component \u003d \" + component.getName()\n               + \": Invalid number of containers specified \" + component\n               .getNumberOfContainers()).build();\n     }\n     try {\n-      Map\u003cString, Long\u003e original \u003d SLIDER_CLIENT.flex(appName, Collections\n-          .singletonMap(component.getName(),\n+      Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n+          Collections.singletonMap(component.getName(),\n               component.getNumberOfContainers()));\n       return Response.ok().entity(\"Updating \" + componentName + \" size from \"\n           + original.get(componentName) + \" to \"\n           + component.getNumberOfContainers()).build();\n     } catch (YarnException | IOException e) {\n       ApplicationStatus status \u003d new ApplicationStatus();\n       status.setDiagnostics(e.getMessage());\n       return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n           .build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateComponent(@PathParam(\"app_name\") String appName,\n      @PathParam(\"component_name\") String componentName, Component component) {\n\n    if (component.getNumberOfContainers() \u003c 0) {\n      return Response.status(Status.BAD_REQUEST).entity(\n          \"Application \u003d \" + appName + \", Component \u003d \" + component.getName()\n              + \": Invalid number of containers specified \" + component\n              .getNumberOfContainers()).build();\n    }\n    try {\n      Map\u003cString, Long\u003e original \u003d SERVICE_CLIENT.flexByRestService(appName,\n          Collections.singletonMap(component.getName(),\n              component.getNumberOfContainers()));\n      return Response.ok().entity(\"Updating \" + componentName + \" size from \"\n          + original.get(componentName) + \" to \"\n          + component.getNumberOfContainers()).build();\n    } catch (YarnException | IOException e) {\n      ApplicationStatus status \u003d new ApplicationStatus();\n      status.setDiagnostics(e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n          .build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/services/api/impl/ApplicationApiService.java",
      "extendedDetails": {}
    },
    "384ee13eeccef6994b5f5b2ea8de4513e52c2124": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6335. Port slider\u0027s groovy unit tests to yarn native services. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "384ee13eeccef6994b5f5b2ea8de4513e52c2124",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:28 PM",
      "commitNameOld": "c31cd981ebabc0747cabcc07a8c8797619ed2c53",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,23 @@\n   public Response updateComponent(@PathParam(\"app_name\") String appName,\n       @PathParam(\"component_name\") String componentName, Component component) {\n \n     if (component.getNumberOfContainers() \u003c 0) {\n       return Response.status(Status.BAD_REQUEST).entity(\n           \"Application \u003d \" + appName + \", Component \u003d \" + component.getName()\n               + \": Invalid number of containers specified \" + component\n               .getNumberOfContainers()).build();\n     }\n     try {\n-      long original \u003d SLIDER_CLIENT.flex(appName, component);\n-      return Response.ok().entity(\n-          \"Updating \" + componentName + \" size from \" + original + \" to \"\n-              + component.getNumberOfContainers()).build();\n+      Map\u003cString, Long\u003e original \u003d SLIDER_CLIENT.flex(appName, Collections\n+          .singletonMap(component.getName(),\n+              component.getNumberOfContainers()));\n+      return Response.ok().entity(\"Updating \" + componentName + \" size from \"\n+          + original.get(componentName) + \" to \"\n+          + component.getNumberOfContainers()).build();\n     } catch (YarnException | IOException e) {\n       ApplicationStatus status \u003d new ApplicationStatus();\n       status.setDiagnostics(e.getMessage());\n       return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n           .build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateComponent(@PathParam(\"app_name\") String appName,\n      @PathParam(\"component_name\") String componentName, Component component) {\n\n    if (component.getNumberOfContainers() \u003c 0) {\n      return Response.status(Status.BAD_REQUEST).entity(\n          \"Application \u003d \" + appName + \", Component \u003d \" + component.getName()\n              + \": Invalid number of containers specified \" + component\n              .getNumberOfContainers()).build();\n    }\n    try {\n      Map\u003cString, Long\u003e original \u003d SLIDER_CLIENT.flex(appName, Collections\n          .singletonMap(component.getName(),\n              component.getNumberOfContainers()));\n      return Response.ok().entity(\"Updating \" + componentName + \" size from \"\n          + original.get(componentName) + \" to \"\n          + component.getNumberOfContainers()).build();\n    } catch (YarnException | IOException e) {\n      ApplicationStatus status \u003d new ApplicationStatus();\n      status.setDiagnostics(e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n          .build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/services/api/impl/ApplicationApiService.java",
      "extendedDetails": {}
    },
    "c31cd981ebabc0747cabcc07a8c8797619ed2c53": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6255. Refactor yarn-native-services framework. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "c31cd981ebabc0747cabcc07a8c8797619ed2c53",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,21 @@\n+  public Response updateComponent(@PathParam(\"app_name\") String appName,\n+      @PathParam(\"component_name\") String componentName, Component component) {\n+\n+    if (component.getNumberOfContainers() \u003c 0) {\n+      return Response.status(Status.BAD_REQUEST).entity(\n+          \"Application \u003d \" + appName + \", Component \u003d \" + component.getName()\n+              + \": Invalid number of containers specified \" + component\n+              .getNumberOfContainers()).build();\n+    }\n+    try {\n+      long original \u003d SLIDER_CLIENT.flex(appName, component);\n+      return Response.ok().entity(\n+          \"Updating \" + componentName + \" size from \" + original + \" to \"\n+              + component.getNumberOfContainers()).build();\n+    } catch (YarnException | IOException e) {\n+      ApplicationStatus status \u003d new ApplicationStatus();\n+      status.setDiagnostics(e.getMessage());\n+      return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n+          .build();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateComponent(@PathParam(\"app_name\") String appName,\n      @PathParam(\"component_name\") String componentName, Component component) {\n\n    if (component.getNumberOfContainers() \u003c 0) {\n      return Response.status(Status.BAD_REQUEST).entity(\n          \"Application \u003d \" + appName + \", Component \u003d \" + component.getName()\n              + \": Invalid number of containers specified \" + component\n              .getNumberOfContainers()).build();\n    }\n    try {\n      long original \u003d SLIDER_CLIENT.flex(appName, component);\n      return Response.ok().entity(\n          \"Updating \" + componentName + \" size from \" + original + \" to \"\n              + component.getNumberOfContainers()).build();\n    } catch (YarnException | IOException e) {\n      ApplicationStatus status \u003d new ApplicationStatus();\n      status.setDiagnostics(e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR).entity(status)\n          .build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/services/api/impl/ApplicationApiService.java"
    }
  }
}