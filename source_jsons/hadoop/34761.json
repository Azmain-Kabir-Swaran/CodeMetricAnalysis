{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMRMProxyService.java",
  "functionName": "createRequestInterceptorChain",
  "functionId": "createRequestInterceptorChain",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyService.java",
  "functionStartLine": 675,
  "functionEndLine": 715,
  "numCommitsSeen": 17,
  "timeTaken": 927,
  "changeHistory": [
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02"
  ],
  "changeHistoryShort": {
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2884. Added a proxy service in NM to proxy the the communication between AM and RM. Contributed by Kishore Chaliparambil\n",
      "commitDate": "07/09/15 6:35 PM",
      "commitName": "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,41 @@\n+  protected RequestInterceptor createRequestInterceptorChain() {\n+    Configuration conf \u003d getConfig();\n+\n+    List\u003cString\u003e interceptorClassNames \u003d getInterceptorClassNames(conf);\n+\n+    RequestInterceptor pipeline \u003d null;\n+    RequestInterceptor current \u003d null;\n+    for (String interceptorClassName : interceptorClassNames) {\n+      try {\n+        Class\u003c?\u003e interceptorClass \u003d\n+            conf.getClassByName(interceptorClassName);\n+        if (RequestInterceptor.class.isAssignableFrom(interceptorClass)) {\n+          RequestInterceptor interceptorInstance \u003d\n+              (RequestInterceptor) ReflectionUtils.newInstance(\n+                  interceptorClass, conf);\n+          if (pipeline \u003d\u003d null) {\n+            pipeline \u003d interceptorInstance;\n+            current \u003d interceptorInstance;\n+            continue;\n+          } else {\n+            current.setNextInterceptor(interceptorInstance);\n+            current \u003d interceptorInstance;\n+          }\n+        } else {\n+          throw new YarnRuntimeException(\"Class: \" + interceptorClassName\n+              + \" not instance of \"\n+              + RequestInterceptor.class.getCanonicalName());\n+        }\n+      } catch (ClassNotFoundException e) {\n+        throw new YarnRuntimeException(\n+            \"Could not instantiate ApplicationMasterRequestInterceptor: \"\n+                + interceptorClassName, e);\n+      }\n+    }\n+\n+    if (pipeline \u003d\u003d null) {\n+      throw new YarnRuntimeException(\n+          \"RequestInterceptor pipeline is not configured in the system\");\n+    }\n+    return pipeline;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected RequestInterceptor createRequestInterceptorChain() {\n    Configuration conf \u003d getConfig();\n\n    List\u003cString\u003e interceptorClassNames \u003d getInterceptorClassNames(conf);\n\n    RequestInterceptor pipeline \u003d null;\n    RequestInterceptor current \u003d null;\n    for (String interceptorClassName : interceptorClassNames) {\n      try {\n        Class\u003c?\u003e interceptorClass \u003d\n            conf.getClassByName(interceptorClassName);\n        if (RequestInterceptor.class.isAssignableFrom(interceptorClass)) {\n          RequestInterceptor interceptorInstance \u003d\n              (RequestInterceptor) ReflectionUtils.newInstance(\n                  interceptorClass, conf);\n          if (pipeline \u003d\u003d null) {\n            pipeline \u003d interceptorInstance;\n            current \u003d interceptorInstance;\n            continue;\n          } else {\n            current.setNextInterceptor(interceptorInstance);\n            current \u003d interceptorInstance;\n          }\n        } else {\n          throw new YarnRuntimeException(\"Class: \" + interceptorClassName\n              + \" not instance of \"\n              + RequestInterceptor.class.getCanonicalName());\n        }\n      } catch (ClassNotFoundException e) {\n        throw new YarnRuntimeException(\n            \"Could not instantiate ApplicationMasterRequestInterceptor: \"\n                + interceptorClassName, e);\n      }\n    }\n\n    if (pipeline \u003d\u003d null) {\n      throw new YarnRuntimeException(\n          \"RequestInterceptor pipeline is not configured in the system\");\n    }\n    return pipeline;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyService.java"
    }
  }
}