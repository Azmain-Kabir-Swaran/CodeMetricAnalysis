{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HttpFSUtils.java",
  "functionName": "createURL",
  "functionId": "createURL___path-Path__params-Map__String,String____multiValuedParams-Map__String,List__String____",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSUtils.java",
  "functionStartLine": 82,
  "functionEndLine": 119,
  "numCommitsSeen": 9,
  "timeTaken": 980,
  "changeHistory": [
    "46162a213f60f915df76c60b0412f45a021e1e7e"
  ],
  "changeHistoryShort": {
    "46162a213f60f915df76c60b0412f45a021e1e7e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "46162a213f60f915df76c60b0412f45a021e1e7e": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6430. HTTPFS - Implement XAttr support. (Yi Liu via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605118 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 8:59 AM",
      "commitName": "46162a213f60f915df76c60b0412f45a021e1e7e",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,38 @@\n+  static URL createURL(Path path, Map\u003cString, String\u003e params, Map\u003cString, \n+      List\u003cString\u003e\u003e multiValuedParams) throws IOException {\n+    URI uri \u003d path.toUri();\n+    String realScheme;\n+    if (uri.getScheme().equalsIgnoreCase(HttpFSFileSystem.SCHEME)) {\n+      realScheme \u003d \"http\";\n+    } else if (uri.getScheme().equalsIgnoreCase(HttpsFSFileSystem.SCHEME)) {\n+      realScheme \u003d \"https\";\n+\n+    } else {\n+      throw new IllegalArgumentException(MessageFormat.format(\n+        \"Invalid scheme [{0}] it should be \u0027\" + HttpFSFileSystem.SCHEME + \"\u0027 \" +\n+            \"or \u0027\" + HttpsFSFileSystem.SCHEME + \"\u0027\", uri));\n+    }\n+    StringBuilder sb \u003d new StringBuilder();\n+    sb.append(realScheme).append(\"://\").append(uri.getAuthority()).\n+      append(SERVICE_PATH).append(uri.getPath());\n+\n+    String separator \u003d \"?\";\n+    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n+      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n+        append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n+      separator \u003d \"\u0026\";\n+    }\n+    if (multiValuedParams !\u003d null) {\n+      for (Map.Entry\u003cString, List\u003cString\u003e\u003e multiValuedEntry : \n+        multiValuedParams.entrySet()) {\n+        String name \u003d URLEncoder.encode(multiValuedEntry.getKey(), \"UTF8\");\n+        List\u003cString\u003e values \u003d multiValuedEntry.getValue();\n+        for (String value : values) {\n+          sb.append(separator).append(name).append(\"\u003d\").\n+            append(URLEncoder.encode(value, \"UTF8\"));\n+          separator \u003d \"\u0026\";\n+        }\n+      }\n+    }\n+    return new URL(sb.toString());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static URL createURL(Path path, Map\u003cString, String\u003e params, Map\u003cString, \n      List\u003cString\u003e\u003e multiValuedParams) throws IOException {\n    URI uri \u003d path.toUri();\n    String realScheme;\n    if (uri.getScheme().equalsIgnoreCase(HttpFSFileSystem.SCHEME)) {\n      realScheme \u003d \"http\";\n    } else if (uri.getScheme().equalsIgnoreCase(HttpsFSFileSystem.SCHEME)) {\n      realScheme \u003d \"https\";\n\n    } else {\n      throw new IllegalArgumentException(MessageFormat.format(\n        \"Invalid scheme [{0}] it should be \u0027\" + HttpFSFileSystem.SCHEME + \"\u0027 \" +\n            \"or \u0027\" + HttpsFSFileSystem.SCHEME + \"\u0027\", uri));\n    }\n    StringBuilder sb \u003d new StringBuilder();\n    sb.append(realScheme).append(\"://\").append(uri.getAuthority()).\n      append(SERVICE_PATH).append(uri.getPath());\n\n    String separator \u003d \"?\";\n    for (Map.Entry\u003cString, String\u003e entry : params.entrySet()) {\n      sb.append(separator).append(entry.getKey()).append(\"\u003d\").\n        append(URLEncoder.encode(entry.getValue(), \"UTF8\"));\n      separator \u003d \"\u0026\";\n    }\n    if (multiValuedParams !\u003d null) {\n      for (Map.Entry\u003cString, List\u003cString\u003e\u003e multiValuedEntry : \n        multiValuedParams.entrySet()) {\n        String name \u003d URLEncoder.encode(multiValuedEntry.getKey(), \"UTF8\");\n        List\u003cString\u003e values \u003d multiValuedEntry.getValue();\n        for (String value : values) {\n          sb.append(separator).append(name).append(\"\u003d\").\n            append(URLEncoder.encode(value, \"UTF8\"));\n          separator \u003d \"\u0026\";\n        }\n      }\n    }\n    return new URL(sb.toString());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSUtils.java"
    }
  }
}