{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerApplicationAttempt.java",
  "functionName": "updateAMContainerDiagnostics",
  "functionId": "updateAMContainerDiagnostics___state-AMState__diagnosticMessage-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
  "functionStartLine": 1373,
  "functionEndLine": 1403,
  "numCommitsSeen": 105,
  "timeTaken": 3167,
  "changeHistory": [
    "95372657fc25c02399b01793833021ccf88dada2",
    "6cb0af3c39a5d49cb2f7911ee21363a9542ca2d7"
  ],
  "changeHistoryShort": {
    "95372657fc25c02399b01793833021ccf88dada2": "Ybodychange",
    "6cb0af3c39a5d49cb2f7911ee21363a9542ca2d7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "95372657fc25c02399b01793833021ccf88dada2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9287. Consecutive StringBuilder append should be reuse. Contributed by Ayush Saxena.\n",
      "commitDate": "25/02/19 11:45 AM",
      "commitName": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "31/07/18 3:01 PM",
      "commitNameOld": "c7ebcd76bf3dd14127336951f2be3de772e7826a",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 208.91,
      "commitsBetweenForRepo": 1679,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public void updateAMContainerDiagnostics(AMState state,\n       String diagnosticMessage) {\n     if (!isWaitingForAMContainer()) {\n       return;\n     }\n     StringBuilder diagnosticMessageBldr \u003d new StringBuilder();\n-    diagnosticMessageBldr.append(\"[\");\n-    diagnosticMessageBldr.append(fdf.format(System.currentTimeMillis()));\n-    diagnosticMessageBldr.append(\"] \");\n+    diagnosticMessageBldr.append(\"[\")\n+        .append(fdf.format(System.currentTimeMillis()))\n+        .append(\"] \");\n     switch (state) {\n     case INACTIVATED:\n       diagnosticMessageBldr.append(state.diagnosticMessage);\n       if (diagnosticMessage !\u003d null) {\n         diagnosticMessageBldr.append(diagnosticMessage);\n       }\n       getPendingAppDiagnosticMessage(diagnosticMessageBldr);\n       break;\n     case ACTIVATED:\n       diagnosticMessageBldr.append(state.diagnosticMessage);\n       if (diagnosticMessage !\u003d null) {\n         diagnosticMessageBldr.append(diagnosticMessage);\n       }\n       getActivedAppDiagnosticMessage(diagnosticMessageBldr);\n       break;\n     default:\n       // UNMANAGED , ASSIGNED\n       diagnosticMessageBldr.append(state.diagnosticMessage);\n       break;\n     }\n     appAttempt.updateAMLaunchDiagnostics(diagnosticMessageBldr.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateAMContainerDiagnostics(AMState state,\n      String diagnosticMessage) {\n    if (!isWaitingForAMContainer()) {\n      return;\n    }\n    StringBuilder diagnosticMessageBldr \u003d new StringBuilder();\n    diagnosticMessageBldr.append(\"[\")\n        .append(fdf.format(System.currentTimeMillis()))\n        .append(\"] \");\n    switch (state) {\n    case INACTIVATED:\n      diagnosticMessageBldr.append(state.diagnosticMessage);\n      if (diagnosticMessage !\u003d null) {\n        diagnosticMessageBldr.append(diagnosticMessage);\n      }\n      getPendingAppDiagnosticMessage(diagnosticMessageBldr);\n      break;\n    case ACTIVATED:\n      diagnosticMessageBldr.append(state.diagnosticMessage);\n      if (diagnosticMessage !\u003d null) {\n        diagnosticMessageBldr.append(diagnosticMessage);\n      }\n      getActivedAppDiagnosticMessage(diagnosticMessageBldr);\n      break;\n    default:\n      // UNMANAGED , ASSIGNED\n      diagnosticMessageBldr.append(state.diagnosticMessage);\n      break;\n    }\n    appAttempt.updateAMLaunchDiagnostics(diagnosticMessageBldr.toString());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "6cb0af3c39a5d49cb2f7911ee21363a9542ca2d7": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3946. Update exact reason as to why a submitted app is in ACCEPTED state to app\u0027s diagnostic message. (Naganarasimha G R via wangda)\n",
      "commitDate": "14/12/15 10:52 AM",
      "commitName": "6cb0af3c39a5d49cb2f7911ee21363a9542ca2d7",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,31 @@\n+  public void updateAMContainerDiagnostics(AMState state,\n+      String diagnosticMessage) {\n+    if (!isWaitingForAMContainer()) {\n+      return;\n+    }\n+    StringBuilder diagnosticMessageBldr \u003d new StringBuilder();\n+    diagnosticMessageBldr.append(\"[\");\n+    diagnosticMessageBldr.append(fdf.format(System.currentTimeMillis()));\n+    diagnosticMessageBldr.append(\"] \");\n+    switch (state) {\n+    case INACTIVATED:\n+      diagnosticMessageBldr.append(state.diagnosticMessage);\n+      if (diagnosticMessage !\u003d null) {\n+        diagnosticMessageBldr.append(diagnosticMessage);\n+      }\n+      getPendingAppDiagnosticMessage(diagnosticMessageBldr);\n+      break;\n+    case ACTIVATED:\n+      diagnosticMessageBldr.append(state.diagnosticMessage);\n+      if (diagnosticMessage !\u003d null) {\n+        diagnosticMessageBldr.append(diagnosticMessage);\n+      }\n+      getActivedAppDiagnosticMessage(diagnosticMessageBldr);\n+      break;\n+    default:\n+      // UNMANAGED , ASSIGNED\n+      diagnosticMessageBldr.append(state.diagnosticMessage);\n+      break;\n+    }\n+    appAttempt.updateAMLaunchDiagnostics(diagnosticMessageBldr.toString());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateAMContainerDiagnostics(AMState state,\n      String diagnosticMessage) {\n    if (!isWaitingForAMContainer()) {\n      return;\n    }\n    StringBuilder diagnosticMessageBldr \u003d new StringBuilder();\n    diagnosticMessageBldr.append(\"[\");\n    diagnosticMessageBldr.append(fdf.format(System.currentTimeMillis()));\n    diagnosticMessageBldr.append(\"] \");\n    switch (state) {\n    case INACTIVATED:\n      diagnosticMessageBldr.append(state.diagnosticMessage);\n      if (diagnosticMessage !\u003d null) {\n        diagnosticMessageBldr.append(diagnosticMessage);\n      }\n      getPendingAppDiagnosticMessage(diagnosticMessageBldr);\n      break;\n    case ACTIVATED:\n      diagnosticMessageBldr.append(state.diagnosticMessage);\n      if (diagnosticMessage !\u003d null) {\n        diagnosticMessageBldr.append(diagnosticMessage);\n      }\n      getActivedAppDiagnosticMessage(diagnosticMessageBldr);\n      break;\n    default:\n      // UNMANAGED , ASSIGNED\n      diagnosticMessageBldr.append(state.diagnosticMessage);\n      break;\n    }\n    appAttempt.updateAMLaunchDiagnostics(diagnosticMessageBldr.toString());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java"
    }
  }
}