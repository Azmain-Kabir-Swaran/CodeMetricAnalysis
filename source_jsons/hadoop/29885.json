{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EntityGroupFSTimelineStore.java",
  "functionName": "loadPlugIns",
  "functionId": "loadPlugIns___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
  "functionStartLine": 212,
  "functionEndLine": 260,
  "numCommitsSeen": 17,
  "timeTaken": 1822,
  "changeHistory": [
    "673e5e02feba9171498a518c06ae70639c5f8854",
    "8a9d293dd60f6d51e1574e412d40746ba8175fe1",
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
    "02f597c5db36ded385413958bdee793ad7eda40e"
  ],
  "changeHistoryShort": {
    "673e5e02feba9171498a518c06ae70639c5f8854": "Ybodychange",
    "8a9d293dd60f6d51e1574e412d40746ba8175fe1": "Ybodychange",
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": "Ybodychange",
    "02f597c5db36ded385413958bdee793ad7eda40e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "673e5e02feba9171498a518c06ae70639c5f8854": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5314. Fixed a ConcurrentModificationException in ATS v1.5 EntityGroupFSTimelineStore. Contributed by Li Lu.\n",
      "commitDate": "07/07/16 10:37 PM",
      "commitName": "673e5e02feba9171498a518c06ae70639c5f8854",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/07/16 4:44 PM",
      "commitNameOld": "8a9d293dd60f6d51e1574e412d40746ba8175fe1",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.24,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,49 @@\n   private List\u003cTimelineEntityGroupPlugin\u003e loadPlugIns(Configuration conf)\n       throws RuntimeException {\n     Collection\u003cString\u003e pluginNames \u003d conf.getTrimmedStringCollection(\n         YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES);\n \n     String pluginClasspath \u003d conf.getTrimmed(\n         YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSPATH);\n     String[] systemClasses \u003d conf.getTrimmedStrings(\n         YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_SYSTEM_CLASSES);\n \n     List\u003cTimelineEntityGroupPlugin\u003e pluginList\n         \u003d new LinkedList\u003cTimelineEntityGroupPlugin\u003e();\n-    Exception caught \u003d null;\n     ClassLoader customClassLoader \u003d null;\n     if (pluginClasspath !\u003d null \u0026\u0026 pluginClasspath.length() \u003e 0) {\n       try {\n         customClassLoader \u003d createPluginClassLoader(pluginClasspath,\n             systemClasses);\n       } catch (IOException ioe) {\n         LOG.warn(\"Error loading classloader\", ioe);\n       }\n     }\n     for (final String name : pluginNames) {\n       LOG.debug(\"Trying to load plugin class {}\", name);\n       TimelineEntityGroupPlugin cacheIdPlugin \u003d null;\n \n       try {\n         if (customClassLoader !\u003d null) {\n           LOG.debug(\"Load plugin {} with classpath: {}\", name, pluginClasspath);\n           Class\u003c?\u003e clazz \u003d Class.forName(name, true, customClassLoader);\n           Class\u003c? extends TimelineEntityGroupPlugin\u003e sClass \u003d clazz.asSubclass(\n               TimelineEntityGroupPlugin.class);\n           cacheIdPlugin \u003d ReflectionUtils.newInstance(sClass, conf);\n         } else {\n           LOG.debug(\"Load plugin class with system classpath\");\n           Class\u003c?\u003e clazz \u003d conf.getClassByName(name);\n           cacheIdPlugin \u003d\n               (TimelineEntityGroupPlugin) ReflectionUtils.newInstance(\n                   clazz, conf);\n         }\n       } catch (Exception e) {\n         LOG.warn(\"Error loading plugin \" + name, e);\n         throw new RuntimeException(\"No class defined for \" + name, e);\n       }\n \n       LOG.info(\"Load plugin class {}\", cacheIdPlugin.getClass().getName());\n       pluginList.add(cacheIdPlugin);\n     }\n     return pluginList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cTimelineEntityGroupPlugin\u003e loadPlugIns(Configuration conf)\n      throws RuntimeException {\n    Collection\u003cString\u003e pluginNames \u003d conf.getTrimmedStringCollection(\n        YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES);\n\n    String pluginClasspath \u003d conf.getTrimmed(\n        YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSPATH);\n    String[] systemClasses \u003d conf.getTrimmedStrings(\n        YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_SYSTEM_CLASSES);\n\n    List\u003cTimelineEntityGroupPlugin\u003e pluginList\n        \u003d new LinkedList\u003cTimelineEntityGroupPlugin\u003e();\n    ClassLoader customClassLoader \u003d null;\n    if (pluginClasspath !\u003d null \u0026\u0026 pluginClasspath.length() \u003e 0) {\n      try {\n        customClassLoader \u003d createPluginClassLoader(pluginClasspath,\n            systemClasses);\n      } catch (IOException ioe) {\n        LOG.warn(\"Error loading classloader\", ioe);\n      }\n    }\n    for (final String name : pluginNames) {\n      LOG.debug(\"Trying to load plugin class {}\", name);\n      TimelineEntityGroupPlugin cacheIdPlugin \u003d null;\n\n      try {\n        if (customClassLoader !\u003d null) {\n          LOG.debug(\"Load plugin {} with classpath: {}\", name, pluginClasspath);\n          Class\u003c?\u003e clazz \u003d Class.forName(name, true, customClassLoader);\n          Class\u003c? extends TimelineEntityGroupPlugin\u003e sClass \u003d clazz.asSubclass(\n              TimelineEntityGroupPlugin.class);\n          cacheIdPlugin \u003d ReflectionUtils.newInstance(sClass, conf);\n        } else {\n          LOG.debug(\"Load plugin class with system classpath\");\n          Class\u003c?\u003e clazz \u003d conf.getClassByName(name);\n          cacheIdPlugin \u003d\n              (TimelineEntityGroupPlugin) ReflectionUtils.newInstance(\n                  clazz, conf);\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Error loading plugin \" + name, e);\n        throw new RuntimeException(\"No class defined for \" + name, e);\n      }\n\n      LOG.info(\"Load plugin class {}\", cacheIdPlugin.getClass().getName());\n      pluginList.add(cacheIdPlugin);\n    }\n    return pluginList;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "8a9d293dd60f6d51e1574e412d40746ba8175fe1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5233. Support for specifying a path for ATS plugin jars. Contributed by Li Lu\n",
      "commitDate": "06/07/16 4:44 PM",
      "commitName": "8a9d293dd60f6d51e1574e412d40746ba8175fe1",
      "commitAuthor": "Jian He",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 22.07,
      "commitsBetweenForRepo": 157,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,50 @@\n   private List\u003cTimelineEntityGroupPlugin\u003e loadPlugIns(Configuration conf)\n       throws RuntimeException {\n     Collection\u003cString\u003e pluginNames \u003d conf.getTrimmedStringCollection(\n         YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES);\n+\n+    String pluginClasspath \u003d conf.getTrimmed(\n+        YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSPATH);\n+    String[] systemClasses \u003d conf.getTrimmedStrings(\n+        YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_SYSTEM_CLASSES);\n+\n     List\u003cTimelineEntityGroupPlugin\u003e pluginList\n         \u003d new LinkedList\u003cTimelineEntityGroupPlugin\u003e();\n     Exception caught \u003d null;\n+    ClassLoader customClassLoader \u003d null;\n+    if (pluginClasspath !\u003d null \u0026\u0026 pluginClasspath.length() \u003e 0) {\n+      try {\n+        customClassLoader \u003d createPluginClassLoader(pluginClasspath,\n+            systemClasses);\n+      } catch (IOException ioe) {\n+        LOG.warn(\"Error loading classloader\", ioe);\n+      }\n+    }\n     for (final String name : pluginNames) {\n       LOG.debug(\"Trying to load plugin class {}\", name);\n       TimelineEntityGroupPlugin cacheIdPlugin \u003d null;\n+\n       try {\n-        Class\u003c?\u003e clazz \u003d conf.getClassByName(name);\n-        cacheIdPlugin \u003d\n-            (TimelineEntityGroupPlugin) ReflectionUtils.newInstance(\n-                clazz, conf);\n+        if (customClassLoader !\u003d null) {\n+          LOG.debug(\"Load plugin {} with classpath: {}\", name, pluginClasspath);\n+          Class\u003c?\u003e clazz \u003d Class.forName(name, true, customClassLoader);\n+          Class\u003c? extends TimelineEntityGroupPlugin\u003e sClass \u003d clazz.asSubclass(\n+              TimelineEntityGroupPlugin.class);\n+          cacheIdPlugin \u003d ReflectionUtils.newInstance(sClass, conf);\n+        } else {\n+          LOG.debug(\"Load plugin class with system classpath\");\n+          Class\u003c?\u003e clazz \u003d conf.getClassByName(name);\n+          cacheIdPlugin \u003d\n+              (TimelineEntityGroupPlugin) ReflectionUtils.newInstance(\n+                  clazz, conf);\n+        }\n       } catch (Exception e) {\n         LOG.warn(\"Error loading plugin \" + name, e);\n-        caught \u003d e;\n+        throw new RuntimeException(\"No class defined for \" + name, e);\n       }\n \n-      if (cacheIdPlugin \u003d\u003d null) {\n-        throw new RuntimeException(\"No class defined for \" + name, caught);\n-      }\n       LOG.info(\"Load plugin class {}\", cacheIdPlugin.getClass().getName());\n       pluginList.add(cacheIdPlugin);\n     }\n     return pluginList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cTimelineEntityGroupPlugin\u003e loadPlugIns(Configuration conf)\n      throws RuntimeException {\n    Collection\u003cString\u003e pluginNames \u003d conf.getTrimmedStringCollection(\n        YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES);\n\n    String pluginClasspath \u003d conf.getTrimmed(\n        YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSPATH);\n    String[] systemClasses \u003d conf.getTrimmedStrings(\n        YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_SYSTEM_CLASSES);\n\n    List\u003cTimelineEntityGroupPlugin\u003e pluginList\n        \u003d new LinkedList\u003cTimelineEntityGroupPlugin\u003e();\n    Exception caught \u003d null;\n    ClassLoader customClassLoader \u003d null;\n    if (pluginClasspath !\u003d null \u0026\u0026 pluginClasspath.length() \u003e 0) {\n      try {\n        customClassLoader \u003d createPluginClassLoader(pluginClasspath,\n            systemClasses);\n      } catch (IOException ioe) {\n        LOG.warn(\"Error loading classloader\", ioe);\n      }\n    }\n    for (final String name : pluginNames) {\n      LOG.debug(\"Trying to load plugin class {}\", name);\n      TimelineEntityGroupPlugin cacheIdPlugin \u003d null;\n\n      try {\n        if (customClassLoader !\u003d null) {\n          LOG.debug(\"Load plugin {} with classpath: {}\", name, pluginClasspath);\n          Class\u003c?\u003e clazz \u003d Class.forName(name, true, customClassLoader);\n          Class\u003c? extends TimelineEntityGroupPlugin\u003e sClass \u003d clazz.asSubclass(\n              TimelineEntityGroupPlugin.class);\n          cacheIdPlugin \u003d ReflectionUtils.newInstance(sClass, conf);\n        } else {\n          LOG.debug(\"Load plugin class with system classpath\");\n          Class\u003c?\u003e clazz \u003d conf.getClassByName(name);\n          cacheIdPlugin \u003d\n              (TimelineEntityGroupPlugin) ReflectionUtils.newInstance(\n                  clazz, conf);\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Error loading plugin \" + name, e);\n        throw new RuntimeException(\"No class defined for \" + name, e);\n      }\n\n      LOG.info(\"Load plugin class {}\", cacheIdPlugin.getClass().getName());\n      pluginList.add(cacheIdPlugin);\n    }\n    return pluginList;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4696. Improving EntityGroupFSTimelineStore on exception handling, test setup, and concurrency. (Steve Loughran via gtcarrera9)\n",
      "commitDate": "10/03/16 10:51 AM",
      "commitName": "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
      "commitAuthor": "Li Lu",
      "commitDateOld": "17/01/16 5:37 PM",
      "commitNameOld": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 52.72,
      "commitsBetweenForRepo": 371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,28 @@\n   private List\u003cTimelineEntityGroupPlugin\u003e loadPlugIns(Configuration conf)\n       throws RuntimeException {\n-    Collection\u003cString\u003e pluginNames \u003d conf.getStringCollection(\n+    Collection\u003cString\u003e pluginNames \u003d conf.getTrimmedStringCollection(\n         YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES);\n     List\u003cTimelineEntityGroupPlugin\u003e pluginList\n         \u003d new LinkedList\u003cTimelineEntityGroupPlugin\u003e();\n+    Exception caught \u003d null;\n     for (final String name : pluginNames) {\n       LOG.debug(\"Trying to load plugin class {}\", name);\n       TimelineEntityGroupPlugin cacheIdPlugin \u003d null;\n       try {\n         Class\u003c?\u003e clazz \u003d conf.getClassByName(name);\n         cacheIdPlugin \u003d\n             (TimelineEntityGroupPlugin) ReflectionUtils.newInstance(\n                 clazz, conf);\n       } catch (Exception e) {\n         LOG.warn(\"Error loading plugin \" + name, e);\n+        caught \u003d e;\n       }\n \n       if (cacheIdPlugin \u003d\u003d null) {\n-        throw new RuntimeException(\"No class defined for \" + name);\n+        throw new RuntimeException(\"No class defined for \" + name, caught);\n       }\n       LOG.info(\"Load plugin class {}\", cacheIdPlugin.getClass().getName());\n       pluginList.add(cacheIdPlugin);\n     }\n     return pluginList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cTimelineEntityGroupPlugin\u003e loadPlugIns(Configuration conf)\n      throws RuntimeException {\n    Collection\u003cString\u003e pluginNames \u003d conf.getTrimmedStringCollection(\n        YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES);\n    List\u003cTimelineEntityGroupPlugin\u003e pluginList\n        \u003d new LinkedList\u003cTimelineEntityGroupPlugin\u003e();\n    Exception caught \u003d null;\n    for (final String name : pluginNames) {\n      LOG.debug(\"Trying to load plugin class {}\", name);\n      TimelineEntityGroupPlugin cacheIdPlugin \u003d null;\n      try {\n        Class\u003c?\u003e clazz \u003d conf.getClassByName(name);\n        cacheIdPlugin \u003d\n            (TimelineEntityGroupPlugin) ReflectionUtils.newInstance(\n                clazz, conf);\n      } catch (Exception e) {\n        LOG.warn(\"Error loading plugin \" + name, e);\n        caught \u003d e;\n      }\n\n      if (cacheIdPlugin \u003d\u003d null) {\n        throw new RuntimeException(\"No class defined for \" + name, caught);\n      }\n      LOG.info(\"Load plugin class {}\", cacheIdPlugin.getClass().getName());\n      pluginList.add(cacheIdPlugin);\n    }\n    return pluginList;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "02f597c5db36ded385413958bdee793ad7eda40e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4265. Provide new timeline plugin storage to support fine-grained entity caching. Contributed by Li Lu and Jason Lowe\n",
      "commitDate": "17/01/16 5:37 PM",
      "commitName": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,26 @@\n+  private List\u003cTimelineEntityGroupPlugin\u003e loadPlugIns(Configuration conf)\n+      throws RuntimeException {\n+    Collection\u003cString\u003e pluginNames \u003d conf.getStringCollection(\n+        YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES);\n+    List\u003cTimelineEntityGroupPlugin\u003e pluginList\n+        \u003d new LinkedList\u003cTimelineEntityGroupPlugin\u003e();\n+    for (final String name : pluginNames) {\n+      LOG.debug(\"Trying to load plugin class {}\", name);\n+      TimelineEntityGroupPlugin cacheIdPlugin \u003d null;\n+      try {\n+        Class\u003c?\u003e clazz \u003d conf.getClassByName(name);\n+        cacheIdPlugin \u003d\n+            (TimelineEntityGroupPlugin) ReflectionUtils.newInstance(\n+                clazz, conf);\n+      } catch (Exception e) {\n+        LOG.warn(\"Error loading plugin \" + name, e);\n+      }\n+\n+      if (cacheIdPlugin \u003d\u003d null) {\n+        throw new RuntimeException(\"No class defined for \" + name);\n+      }\n+      LOG.info(\"Load plugin class {}\", cacheIdPlugin.getClass().getName());\n+      pluginList.add(cacheIdPlugin);\n+    }\n+    return pluginList;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cTimelineEntityGroupPlugin\u003e loadPlugIns(Configuration conf)\n      throws RuntimeException {\n    Collection\u003cString\u003e pluginNames \u003d conf.getStringCollection(\n        YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES);\n    List\u003cTimelineEntityGroupPlugin\u003e pluginList\n        \u003d new LinkedList\u003cTimelineEntityGroupPlugin\u003e();\n    for (final String name : pluginNames) {\n      LOG.debug(\"Trying to load plugin class {}\", name);\n      TimelineEntityGroupPlugin cacheIdPlugin \u003d null;\n      try {\n        Class\u003c?\u003e clazz \u003d conf.getClassByName(name);\n        cacheIdPlugin \u003d\n            (TimelineEntityGroupPlugin) ReflectionUtils.newInstance(\n                clazz, conf);\n      } catch (Exception e) {\n        LOG.warn(\"Error loading plugin \" + name, e);\n      }\n\n      if (cacheIdPlugin \u003d\u003d null) {\n        throw new RuntimeException(\"No class defined for \" + name);\n      }\n      LOG.info(\"Load plugin class {}\", cacheIdPlugin.getClass().getName());\n      pluginList.add(cacheIdPlugin);\n    }\n    return pluginList;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java"
    }
  }
}