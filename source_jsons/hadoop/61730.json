{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StringHelper.java",
  "functionName": "getResourceSecondsString",
  "functionId": "getResourceSecondsString___targetMap-Map__String,Long__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/StringHelper.java",
  "functionStartLine": 184,
  "functionEndLine": 212,
  "numCommitsSeen": 7,
  "timeTaken": 3168,
  "changeHistory": [
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845"
  ],
  "changeHistoryShort": {
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6232. Update resource usage and preempted resource calculations to take into account all resource types. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,29 @@\n+  public static String getResourceSecondsString(Map\u003cString, Long\u003e targetMap) {\n+    List\u003cString\u003e strings \u003d new ArrayList\u003c\u003e(targetMap.size());\n+    //completed app report in the timeline server doesn\u0027t have usage report\n+    Long memorySeconds \u003d 0L;\n+    Long vcoreSeconds \u003d 0L;\n+    if (targetMap.containsKey(ResourceInformation.MEMORY_MB.getName())) {\n+      memorySeconds \u003d targetMap.get(ResourceInformation.MEMORY_MB.getName());\n+    }\n+    if (targetMap.containsKey(ResourceInformation.VCORES.getName())) {\n+      vcoreSeconds \u003d targetMap.get(ResourceInformation.VCORES.getName());\n+    }\n+    strings.add(memorySeconds + \" MB-seconds\");\n+    strings.add(vcoreSeconds + \" vcore-seconds\");\n+    Map\u003cString, ResourceInformation\u003e tmp \u003d ResourceUtils.getResourceTypes();\n+    if (targetMap.size() \u003e 2) {\n+      for (Map.Entry\u003cString, Long\u003e entry : targetMap.entrySet()) {\n+        if (!entry.getKey().equals(ResourceInformation.MEMORY_MB.getName())\n+            \u0026\u0026 !entry.getKey().equals(ResourceInformation.VCORES.getName())) {\n+          String units \u003d \"\";\n+          if (tmp.containsKey(entry.getKey())) {\n+            units \u003d tmp.get(entry.getKey()).getUnits();\n+          }\n+          strings.add(entry.getValue() + \" \" + entry.getKey() + \"-\" + units\n+              + \"seconds\");\n+        }\n+      }\n+    }\n+    return String.join(\", \", strings);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getResourceSecondsString(Map\u003cString, Long\u003e targetMap) {\n    List\u003cString\u003e strings \u003d new ArrayList\u003c\u003e(targetMap.size());\n    //completed app report in the timeline server doesn\u0027t have usage report\n    Long memorySeconds \u003d 0L;\n    Long vcoreSeconds \u003d 0L;\n    if (targetMap.containsKey(ResourceInformation.MEMORY_MB.getName())) {\n      memorySeconds \u003d targetMap.get(ResourceInformation.MEMORY_MB.getName());\n    }\n    if (targetMap.containsKey(ResourceInformation.VCORES.getName())) {\n      vcoreSeconds \u003d targetMap.get(ResourceInformation.VCORES.getName());\n    }\n    strings.add(memorySeconds + \" MB-seconds\");\n    strings.add(vcoreSeconds + \" vcore-seconds\");\n    Map\u003cString, ResourceInformation\u003e tmp \u003d ResourceUtils.getResourceTypes();\n    if (targetMap.size() \u003e 2) {\n      for (Map.Entry\u003cString, Long\u003e entry : targetMap.entrySet()) {\n        if (!entry.getKey().equals(ResourceInformation.MEMORY_MB.getName())\n            \u0026\u0026 !entry.getKey().equals(ResourceInformation.VCORES.getName())) {\n          String units \u003d \"\";\n          if (tmp.containsKey(entry.getKey())) {\n            units \u003d tmp.get(entry.getKey()).getUnits();\n          }\n          strings.add(entry.getValue() + \" \" + entry.getKey() + \"-\" + units\n              + \"seconds\");\n        }\n      }\n    }\n    return String.join(\", \", strings);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/StringHelper.java"
    }
  }
}