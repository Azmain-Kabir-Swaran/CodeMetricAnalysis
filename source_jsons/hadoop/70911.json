{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AliyunOSSFileSystem.java",
  "functionName": "delete",
  "functionId": "delete___path-Path__recursive-boolean",
  "sourceFilePath": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
  "functionStartLine": 169,
  "functionEndLine": 176,
  "numCommitsSeen": 22,
  "timeTaken": 1085,
  "changeHistory": [
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
    "a5d5342228050a778b20e95adf7885bdba39985d"
  ],
  "changeHistoryShort": {
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff": "Ybodychange",
    "a5d5342228050a778b20e95adf7885bdba39985d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13529. Do some code refactoring. Contributed by Genmao Yu.\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
      "commitAuthor": "Mingfei",
      "commitDateOld": "06/09/16 8:15 PM",
      "commitNameOld": "cdb77110e77b70ed0c1125b2a6a422a8c7c28ec7",
      "commitAuthorOld": "Mingfei",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,8 @@\n   public boolean delete(Path path, boolean recursive) throws IOException {\n-    FileStatus status;\n     try {\n-      status \u003d getFileStatus(path);\n+      return innerDelete(getFileStatus(path), recursive);\n     } catch (FileNotFoundException e) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Couldn\u0027t delete \" + path + \": Does not exist!\");\n-      }\n+      LOG.debug(\"Couldn\u0027t delete {} - does not exist\", path);\n       return false;\n     }\n-\n-    String key \u003d pathToKey(status.getPath());\n-    if (status.isDirectory()) {\n-      if (!key.endsWith(\"/\")) {\n-        key +\u003d \"/\";\n-      }\n-      if (!recursive) {\n-        FileStatus[] statuses \u003d listStatus(status.getPath());\n-        // Check whether it is an empty directory or not\n-        if (statuses.length \u003e 0) {\n-          throw new IOException(\"Cannot remove directory\" + path +\n-              \": It is not empty!\");\n-        } else {\n-          // Delete empty directory without \u0027-r\u0027\n-          ossClient.deleteObject(bucketName, key);\n-          statistics.incrementWriteOps(1);\n-        }\n-      } else {\n-        ListObjectsRequest listRequest \u003d new ListObjectsRequest(bucketName);\n-        listRequest.setPrefix(key);\n-        listRequest.setMaxKeys(maxKeys);\n-\n-        while (true) {\n-          ObjectListing objects \u003d ossClient.listObjects(listRequest);\n-          statistics.incrementReadOps(1);\n-          List\u003cString\u003e keysToDelete \u003d new ArrayList\u003cString\u003e();\n-          for (OSSObjectSummary objectSummary : objects.getObjectSummaries()) {\n-            keysToDelete.add(objectSummary.getKey());\n-          }\n-          DeleteObjectsRequest deleteRequest \u003d\n-              new DeleteObjectsRequest(bucketName);\n-          deleteRequest.setKeys(keysToDelete);\n-          ossClient.deleteObjects(deleteRequest);\n-          statistics.incrementWriteOps(1);\n-          if (objects.isTruncated()) {\n-            listRequest.setMarker(objects.getNextMarker());\n-          } else {\n-            break;\n-          }\n-        }\n-      }\n-    } else {\n-      ossClient.deleteObject(bucketName, key);\n-      statistics.incrementWriteOps(1);\n-    }\n-    //TODO: optimize logic here\n-    try {\n-      Path pPath \u003d status.getPath().getParent();\n-      FileStatus pStatus \u003d getFileStatus(pPath);\n-      if (pStatus.isDirectory()) {\n-        return true;\n-      } else {\n-        throw new IOException(\"Path \" + pPath +\n-            \" is assumed to be a directory!\");\n-      }\n-    } catch (FileNotFoundException fnfe) {\n-      // Make sure the parent directory exists\n-      return mkdir(bucketName, pathToKey(status.getPath().getParent()));\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean delete(Path path, boolean recursive) throws IOException {\n    try {\n      return innerDelete(getFileStatus(path), recursive);\n    } catch (FileNotFoundException e) {\n      LOG.debug(\"Couldn\u0027t delete {} - does not exist\", path);\n      return false;\n    }\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "a5d5342228050a778b20e95adf7885bdba39985d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12756. Incorporate Aliyun OSS file system implementation. Contributed by Mingfei Shi and Lin Zhou\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "a5d5342228050a778b20e95adf7885bdba39985d",
      "commitAuthor": "Kai Zheng",
      "diff": "@@ -0,0 +1,70 @@\n+  public boolean delete(Path path, boolean recursive) throws IOException {\n+    FileStatus status;\n+    try {\n+      status \u003d getFileStatus(path);\n+    } catch (FileNotFoundException e) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Couldn\u0027t delete \" + path + \": Does not exist!\");\n+      }\n+      return false;\n+    }\n+\n+    String key \u003d pathToKey(status.getPath());\n+    if (status.isDirectory()) {\n+      if (!key.endsWith(\"/\")) {\n+        key +\u003d \"/\";\n+      }\n+      if (!recursive) {\n+        FileStatus[] statuses \u003d listStatus(status.getPath());\n+        // Check whether it is an empty directory or not\n+        if (statuses.length \u003e 0) {\n+          throw new IOException(\"Cannot remove directory\" + path +\n+              \": It is not empty!\");\n+        } else {\n+          // Delete empty directory without \u0027-r\u0027\n+          ossClient.deleteObject(bucketName, key);\n+          statistics.incrementWriteOps(1);\n+        }\n+      } else {\n+        ListObjectsRequest listRequest \u003d new ListObjectsRequest(bucketName);\n+        listRequest.setPrefix(key);\n+        listRequest.setMaxKeys(maxKeys);\n+\n+        while (true) {\n+          ObjectListing objects \u003d ossClient.listObjects(listRequest);\n+          statistics.incrementReadOps(1);\n+          List\u003cString\u003e keysToDelete \u003d new ArrayList\u003cString\u003e();\n+          for (OSSObjectSummary objectSummary : objects.getObjectSummaries()) {\n+            keysToDelete.add(objectSummary.getKey());\n+          }\n+          DeleteObjectsRequest deleteRequest \u003d\n+              new DeleteObjectsRequest(bucketName);\n+          deleteRequest.setKeys(keysToDelete);\n+          ossClient.deleteObjects(deleteRequest);\n+          statistics.incrementWriteOps(1);\n+          if (objects.isTruncated()) {\n+            listRequest.setMarker(objects.getNextMarker());\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+    } else {\n+      ossClient.deleteObject(bucketName, key);\n+      statistics.incrementWriteOps(1);\n+    }\n+    //TODO: optimize logic here\n+    try {\n+      Path pPath \u003d status.getPath().getParent();\n+      FileStatus pStatus \u003d getFileStatus(pPath);\n+      if (pStatus.isDirectory()) {\n+        return true;\n+      } else {\n+        throw new IOException(\"Path \" + pPath +\n+            \" is assumed to be a directory!\");\n+      }\n+    } catch (FileNotFoundException fnfe) {\n+      // Make sure the parent directory exists\n+      return mkdir(bucketName, pathToKey(status.getPath().getParent()));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean delete(Path path, boolean recursive) throws IOException {\n    FileStatus status;\n    try {\n      status \u003d getFileStatus(path);\n    } catch (FileNotFoundException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Couldn\u0027t delete \" + path + \": Does not exist!\");\n      }\n      return false;\n    }\n\n    String key \u003d pathToKey(status.getPath());\n    if (status.isDirectory()) {\n      if (!key.endsWith(\"/\")) {\n        key +\u003d \"/\";\n      }\n      if (!recursive) {\n        FileStatus[] statuses \u003d listStatus(status.getPath());\n        // Check whether it is an empty directory or not\n        if (statuses.length \u003e 0) {\n          throw new IOException(\"Cannot remove directory\" + path +\n              \": It is not empty!\");\n        } else {\n          // Delete empty directory without \u0027-r\u0027\n          ossClient.deleteObject(bucketName, key);\n          statistics.incrementWriteOps(1);\n        }\n      } else {\n        ListObjectsRequest listRequest \u003d new ListObjectsRequest(bucketName);\n        listRequest.setPrefix(key);\n        listRequest.setMaxKeys(maxKeys);\n\n        while (true) {\n          ObjectListing objects \u003d ossClient.listObjects(listRequest);\n          statistics.incrementReadOps(1);\n          List\u003cString\u003e keysToDelete \u003d new ArrayList\u003cString\u003e();\n          for (OSSObjectSummary objectSummary : objects.getObjectSummaries()) {\n            keysToDelete.add(objectSummary.getKey());\n          }\n          DeleteObjectsRequest deleteRequest \u003d\n              new DeleteObjectsRequest(bucketName);\n          deleteRequest.setKeys(keysToDelete);\n          ossClient.deleteObjects(deleteRequest);\n          statistics.incrementWriteOps(1);\n          if (objects.isTruncated()) {\n            listRequest.setMarker(objects.getNextMarker());\n          } else {\n            break;\n          }\n        }\n      }\n    } else {\n      ossClient.deleteObject(bucketName, key);\n      statistics.incrementWriteOps(1);\n    }\n    //TODO: optimize logic here\n    try {\n      Path pPath \u003d status.getPath().getParent();\n      FileStatus pStatus \u003d getFileStatus(pPath);\n      if (pStatus.isDirectory()) {\n        return true;\n      } else {\n        throw new IOException(\"Path \" + pPath +\n            \" is assumed to be a directory!\");\n      }\n    } catch (FileNotFoundException fnfe) {\n      // Make sure the parent directory exists\n      return mkdir(bucketName, pathToKey(status.getPath().getParent()));\n    }\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java"
    }
  }
}