{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RLESparseResourceAllocation.java",
  "functionName": "negate",
  "functionId": "negate___operator-RLEOperator__a-NavigableMap__Long,Resource__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java",
  "functionStartLine": 402,
  "functionEndLine": 420,
  "numCommitsSeen": 11,
  "timeTaken": 1452,
  "changeHistory": [
    "da1016365aba1cee9c06771ab142d077379f27af"
  ],
  "changeHistoryShort": {
    "da1016365aba1cee9c06771ab142d077379f27af": "Yintroduced"
  },
  "changeHistoryDetails": {
    "da1016365aba1cee9c06771ab142d077379f27af": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3454. Add efficient merge operation to RLESparseResourceAllocation (Carlo Curino via asuresh)\n",
      "commitDate": "21/11/15 9:59 AM",
      "commitName": "da1016365aba1cee9c06771ab142d077379f27af",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,19 @@\n+  private static NavigableMap\u003cLong, Resource\u003e negate(RLEOperator operator,\n+      NavigableMap\u003cLong, Resource\u003e a) throws PlanningException {\n+\n+    TreeMap\u003cLong, Resource\u003e out \u003d new TreeMap\u003cLong, Resource\u003e();\n+    for (Entry\u003cLong, Resource\u003e e : a.entrySet()) {\n+      Resource val \u003d Resources.negate(e.getValue());\n+      // test for negative value and throws\n+      if (operator \u003d\u003d RLEOperator.subtractTestNonNegative\n+          \u0026\u0026 (Resources.fitsIn(val, ZERO_RESOURCE) \u0026\u0026\n+              !Resources.equals(val, ZERO_RESOURCE))) {\n+        throw new PlanningException(\n+            \"RLESparseResourceAllocation: merge failed as the \"\n+                + \"resulting RLESparseResourceAllocation would be negative\");\n+      }\n+      out.put(e.getKey(), val);\n+    }\n+\n+    return out;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static NavigableMap\u003cLong, Resource\u003e negate(RLEOperator operator,\n      NavigableMap\u003cLong, Resource\u003e a) throws PlanningException {\n\n    TreeMap\u003cLong, Resource\u003e out \u003d new TreeMap\u003cLong, Resource\u003e();\n    for (Entry\u003cLong, Resource\u003e e : a.entrySet()) {\n      Resource val \u003d Resources.negate(e.getValue());\n      // test for negative value and throws\n      if (operator \u003d\u003d RLEOperator.subtractTestNonNegative\n          \u0026\u0026 (Resources.fitsIn(val, ZERO_RESOURCE) \u0026\u0026\n              !Resources.equals(val, ZERO_RESOURCE))) {\n        throw new PlanningException(\n            \"RLESparseResourceAllocation: merge failed as the \"\n                + \"resulting RLESparseResourceAllocation would be negative\");\n      }\n      out.put(e.getKey(), val);\n    }\n\n    return out;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java"
    }
  }
}