{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImageFormatProtobuf.java",
  "functionName": "saveNameSystemSection",
  "functionId": "saveNameSystemSection___summary-FileSummary.Builder",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatProtobuf.java",
  "functionStartLine": 932,
  "functionEndLine": 958,
  "numCommitsSeen": 38,
  "timeTaken": 3884,
  "changeHistory": [
    "ec25c7f9c7e60c077d8c4143253c20445fcdaecf",
    "3a9571308e99cc374681bbc451a517d41a150aa0",
    "8a91109d16394310f2568717f103e6fff7cbddb0",
    "c304890c8c7782d835896859f5b7f60b96c306c0",
    "1e1e93040748231dc913190aec1e031c379d8271",
    "571e9c623241106dad5521a870fb8daef3f2b00a",
    "bc962d6df470e3de18df3a4fd9f8a9853953bda1",
    "a2edb11b68ae01a44092cb14ac2717a6aad93305"
  ],
  "changeHistoryShort": {
    "ec25c7f9c7e60c077d8c4143253c20445fcdaecf": "Ybodychange",
    "3a9571308e99cc374681bbc451a517d41a150aa0": "Ybodychange",
    "8a91109d16394310f2568717f103e6fff7cbddb0": "Ybodychange",
    "c304890c8c7782d835896859f5b7f60b96c306c0": "Ybodychange",
    "1e1e93040748231dc913190aec1e031c379d8271": "Ybodychange",
    "571e9c623241106dad5521a870fb8daef3f2b00a": "Ybodychange",
    "bc962d6df470e3de18df3a4fd9f8a9853953bda1": "Ybodychange",
    "a2edb11b68ae01a44092cb14ac2717a6aad93305": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ec25c7f9c7e60c077d8c4143253c20445fcdaecf": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9677. Rename generationStampV1/generationStampV2 to legacyGenerationStamp/generationStamp. Contributed by Mingliang Liu.\n",
      "commitDate": "27/01/16 4:34 PM",
      "commitName": "ec25c7f9c7e60c077d8c4143253c20445fcdaecf",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "27/01/16 4:31 PM",
      "commitNameOld": "3a9571308e99cc374681bbc451a517d41a150aa0",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     private void saveNameSystemSection(FileSummary.Builder summary)\n         throws IOException {\n       final FSNamesystem fsn \u003d context.getSourceNamesystem();\n       OutputStream out \u003d sectionOutputStream;\n       BlockIdManager blockIdManager \u003d fsn.getBlockManager().getBlockIdManager();\n       NameSystemSection.Builder b \u003d NameSystemSection.newBuilder()\n-          .setGenstampV1(blockIdManager.getGenerationStampV1())\n-          .setGenstampV1Limit(blockIdManager.getGenerationStampV1Limit())\n-          .setGenstampV2(blockIdManager.getGenerationStampV2())\n+          .setGenstampV1(blockIdManager.getLegacyGenerationStamp())\n+          .setGenstampV1Limit(blockIdManager.getLegacyGenerationStampLimit())\n+          .setGenstampV2(blockIdManager.getGenerationStamp())\n           .setLastAllocatedBlockId(blockIdManager.getLastAllocatedContiguousBlockId())\n           .setLastAllocatedStripedBlockId(blockIdManager.getLastAllocatedStripedBlockId())\n           .setTransactionId(context.getTxId());\n \n       // We use the non-locked version of getNamespaceInfo here since\n       // the coordinating thread of saveNamespace already has read-locked\n       // the namespace for us. If we attempt to take another readlock\n       // from the actual saver thread, there\u0027s a potential of a\n       // fairness-related deadlock. See the comments on HDFS-2223.\n       b.setNamespaceId(fsn.unprotectedGetNamespaceInfo().getNamespaceID());\n       if (fsn.isRollingUpgrade()) {\n         b.setRollingUpgradeStartTime(fsn.getRollingUpgradeInfo().getStartTime());\n       }\n       NameSystemSection s \u003d b.build();\n       s.writeDelimitedTo(out);\n \n       commitSection(summary, SectionName.NS_INFO);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void saveNameSystemSection(FileSummary.Builder summary)\n        throws IOException {\n      final FSNamesystem fsn \u003d context.getSourceNamesystem();\n      OutputStream out \u003d sectionOutputStream;\n      BlockIdManager blockIdManager \u003d fsn.getBlockManager().getBlockIdManager();\n      NameSystemSection.Builder b \u003d NameSystemSection.newBuilder()\n          .setGenstampV1(blockIdManager.getLegacyGenerationStamp())\n          .setGenstampV1Limit(blockIdManager.getLegacyGenerationStampLimit())\n          .setGenstampV2(blockIdManager.getGenerationStamp())\n          .setLastAllocatedBlockId(blockIdManager.getLastAllocatedContiguousBlockId())\n          .setLastAllocatedStripedBlockId(blockIdManager.getLastAllocatedStripedBlockId())\n          .setTransactionId(context.getTxId());\n\n      // We use the non-locked version of getNamespaceInfo here since\n      // the coordinating thread of saveNamespace already has read-locked\n      // the namespace for us. If we attempt to take another readlock\n      // from the actual saver thread, there\u0027s a potential of a\n      // fairness-related deadlock. See the comments on HDFS-2223.\n      b.setNamespaceId(fsn.unprotectedGetNamespaceInfo().getNamespaceID());\n      if (fsn.isRollingUpgrade()) {\n        b.setRollingUpgradeStartTime(fsn.getRollingUpgradeInfo().getStartTime());\n      }\n      NameSystemSection s \u003d b.build();\n      s.writeDelimitedTo(out);\n\n      commitSection(summary, SectionName.NS_INFO);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatProtobuf.java",
      "extendedDetails": {}
    },
    "3a9571308e99cc374681bbc451a517d41a150aa0": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9677. Rename generationStampV1/generationStampV2 to legacyGenerationStamp/generationStamp. Contributed by Mingliang Liu.\"\n\nThis reverts commit 8a91109d16394310f2568717f103e6fff7cbddb0.\n",
      "commitDate": "27/01/16 4:31 PM",
      "commitName": "3a9571308e99cc374681bbc451a517d41a150aa0",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "27/01/16 3:48 PM",
      "commitNameOld": "8a91109d16394310f2568717f103e6fff7cbddb0",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     private void saveNameSystemSection(FileSummary.Builder summary)\n         throws IOException {\n       final FSNamesystem fsn \u003d context.getSourceNamesystem();\n       OutputStream out \u003d sectionOutputStream;\n       BlockIdManager blockIdManager \u003d fsn.getBlockManager().getBlockIdManager();\n       NameSystemSection.Builder b \u003d NameSystemSection.newBuilder()\n-          .setGenstampV1(blockIdManager.getLegacyGenerationStamp())\n-          .setGenstampV1Limit(blockIdManager.getLegacyGenerationStampLimit())\n-          .setGenstampV2(blockIdManager.getGenerationStamp())\n+          .setGenstampV1(blockIdManager.getGenerationStampV1())\n+          .setGenstampV1Limit(blockIdManager.getGenerationStampV1Limit())\n+          .setGenstampV2(blockIdManager.getGenerationStampV2())\n           .setLastAllocatedBlockId(blockIdManager.getLastAllocatedContiguousBlockId())\n           .setLastAllocatedStripedBlockId(blockIdManager.getLastAllocatedStripedBlockId())\n           .setTransactionId(context.getTxId());\n \n       // We use the non-locked version of getNamespaceInfo here since\n       // the coordinating thread of saveNamespace already has read-locked\n       // the namespace for us. If we attempt to take another readlock\n       // from the actual saver thread, there\u0027s a potential of a\n       // fairness-related deadlock. See the comments on HDFS-2223.\n       b.setNamespaceId(fsn.unprotectedGetNamespaceInfo().getNamespaceID());\n       if (fsn.isRollingUpgrade()) {\n         b.setRollingUpgradeStartTime(fsn.getRollingUpgradeInfo().getStartTime());\n       }\n       NameSystemSection s \u003d b.build();\n       s.writeDelimitedTo(out);\n \n       commitSection(summary, SectionName.NS_INFO);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void saveNameSystemSection(FileSummary.Builder summary)\n        throws IOException {\n      final FSNamesystem fsn \u003d context.getSourceNamesystem();\n      OutputStream out \u003d sectionOutputStream;\n      BlockIdManager blockIdManager \u003d fsn.getBlockManager().getBlockIdManager();\n      NameSystemSection.Builder b \u003d NameSystemSection.newBuilder()\n          .setGenstampV1(blockIdManager.getGenerationStampV1())\n          .setGenstampV1Limit(blockIdManager.getGenerationStampV1Limit())\n          .setGenstampV2(blockIdManager.getGenerationStampV2())\n          .setLastAllocatedBlockId(blockIdManager.getLastAllocatedContiguousBlockId())\n          .setLastAllocatedStripedBlockId(blockIdManager.getLastAllocatedStripedBlockId())\n          .setTransactionId(context.getTxId());\n\n      // We use the non-locked version of getNamespaceInfo here since\n      // the coordinating thread of saveNamespace already has read-locked\n      // the namespace for us. If we attempt to take another readlock\n      // from the actual saver thread, there\u0027s a potential of a\n      // fairness-related deadlock. See the comments on HDFS-2223.\n      b.setNamespaceId(fsn.unprotectedGetNamespaceInfo().getNamespaceID());\n      if (fsn.isRollingUpgrade()) {\n        b.setRollingUpgradeStartTime(fsn.getRollingUpgradeInfo().getStartTime());\n      }\n      NameSystemSection s \u003d b.build();\n      s.writeDelimitedTo(out);\n\n      commitSection(summary, SectionName.NS_INFO);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatProtobuf.java",
      "extendedDetails": {}
    },
    "8a91109d16394310f2568717f103e6fff7cbddb0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9677. Rename generationStampV1/generationStampV2 to legacyGenerationStamp/generationStamp. Contributed by Mingliang Liu.\n",
      "commitDate": "27/01/16 3:48 PM",
      "commitName": "8a91109d16394310f2568717f103e6fff7cbddb0",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "21/01/16 11:13 AM",
      "commitNameOld": "c304890c8c7782d835896859f5b7f60b96c306c0",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 6.19,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     private void saveNameSystemSection(FileSummary.Builder summary)\n         throws IOException {\n       final FSNamesystem fsn \u003d context.getSourceNamesystem();\n       OutputStream out \u003d sectionOutputStream;\n       BlockIdManager blockIdManager \u003d fsn.getBlockManager().getBlockIdManager();\n       NameSystemSection.Builder b \u003d NameSystemSection.newBuilder()\n-          .setGenstampV1(blockIdManager.getGenerationStampV1())\n-          .setGenstampV1Limit(blockIdManager.getGenerationStampV1Limit())\n-          .setGenstampV2(blockIdManager.getGenerationStampV2())\n+          .setGenstampV1(blockIdManager.getLegacyGenerationStamp())\n+          .setGenstampV1Limit(blockIdManager.getLegacyGenerationStampLimit())\n+          .setGenstampV2(blockIdManager.getGenerationStamp())\n           .setLastAllocatedBlockId(blockIdManager.getLastAllocatedContiguousBlockId())\n           .setLastAllocatedStripedBlockId(blockIdManager.getLastAllocatedStripedBlockId())\n           .setTransactionId(context.getTxId());\n \n       // We use the non-locked version of getNamespaceInfo here since\n       // the coordinating thread of saveNamespace already has read-locked\n       // the namespace for us. If we attempt to take another readlock\n       // from the actual saver thread, there\u0027s a potential of a\n       // fairness-related deadlock. See the comments on HDFS-2223.\n       b.setNamespaceId(fsn.unprotectedGetNamespaceInfo().getNamespaceID());\n       if (fsn.isRollingUpgrade()) {\n         b.setRollingUpgradeStartTime(fsn.getRollingUpgradeInfo().getStartTime());\n       }\n       NameSystemSection s \u003d b.build();\n       s.writeDelimitedTo(out);\n \n       commitSection(summary, SectionName.NS_INFO);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void saveNameSystemSection(FileSummary.Builder summary)\n        throws IOException {\n      final FSNamesystem fsn \u003d context.getSourceNamesystem();\n      OutputStream out \u003d sectionOutputStream;\n      BlockIdManager blockIdManager \u003d fsn.getBlockManager().getBlockIdManager();\n      NameSystemSection.Builder b \u003d NameSystemSection.newBuilder()\n          .setGenstampV1(blockIdManager.getLegacyGenerationStamp())\n          .setGenstampV1Limit(blockIdManager.getLegacyGenerationStampLimit())\n          .setGenstampV2(blockIdManager.getGenerationStamp())\n          .setLastAllocatedBlockId(blockIdManager.getLastAllocatedContiguousBlockId())\n          .setLastAllocatedStripedBlockId(blockIdManager.getLastAllocatedStripedBlockId())\n          .setTransactionId(context.getTxId());\n\n      // We use the non-locked version of getNamespaceInfo here since\n      // the coordinating thread of saveNamespace already has read-locked\n      // the namespace for us. If we attempt to take another readlock\n      // from the actual saver thread, there\u0027s a potential of a\n      // fairness-related deadlock. See the comments on HDFS-2223.\n      b.setNamespaceId(fsn.unprotectedGetNamespaceInfo().getNamespaceID());\n      if (fsn.isRollingUpgrade()) {\n        b.setRollingUpgradeStartTime(fsn.getRollingUpgradeInfo().getStartTime());\n      }\n      NameSystemSection s \u003d b.build();\n      s.writeDelimitedTo(out);\n\n      commitSection(summary, SectionName.NS_INFO);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatProtobuf.java",
      "extendedDetails": {}
    },
    "c304890c8c7782d835896859f5b7f60b96c306c0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9542. Move BlockIdManager from FSNamesystem to BlockManager. Contributed by Jing Zhao.\n",
      "commitDate": "21/01/16 11:13 AM",
      "commitName": "c304890c8c7782d835896859f5b7f60b96c306c0",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "24/08/15 12:59 PM",
      "commitNameOld": "6b6a63bbbda920315d3d24b61ed3344a78a981b6",
      "commitAuthorOld": "",
      "daysBetweenCommits": 149.97,
      "commitsBetweenForRepo": 1029,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     private void saveNameSystemSection(FileSummary.Builder summary)\n         throws IOException {\n       final FSNamesystem fsn \u003d context.getSourceNamesystem();\n       OutputStream out \u003d sectionOutputStream;\n-      BlockIdManager blockIdManager \u003d fsn.getBlockIdManager();\n+      BlockIdManager blockIdManager \u003d fsn.getBlockManager().getBlockIdManager();\n       NameSystemSection.Builder b \u003d NameSystemSection.newBuilder()\n           .setGenstampV1(blockIdManager.getGenerationStampV1())\n           .setGenstampV1Limit(blockIdManager.getGenerationStampV1Limit())\n           .setGenstampV2(blockIdManager.getGenerationStampV2())\n           .setLastAllocatedBlockId(blockIdManager.getLastAllocatedContiguousBlockId())\n           .setLastAllocatedStripedBlockId(blockIdManager.getLastAllocatedStripedBlockId())\n           .setTransactionId(context.getTxId());\n \n       // We use the non-locked version of getNamespaceInfo here since\n       // the coordinating thread of saveNamespace already has read-locked\n       // the namespace for us. If we attempt to take another readlock\n       // from the actual saver thread, there\u0027s a potential of a\n       // fairness-related deadlock. See the comments on HDFS-2223.\n       b.setNamespaceId(fsn.unprotectedGetNamespaceInfo().getNamespaceID());\n       if (fsn.isRollingUpgrade()) {\n         b.setRollingUpgradeStartTime(fsn.getRollingUpgradeInfo().getStartTime());\n       }\n       NameSystemSection s \u003d b.build();\n       s.writeDelimitedTo(out);\n \n       commitSection(summary, SectionName.NS_INFO);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void saveNameSystemSection(FileSummary.Builder summary)\n        throws IOException {\n      final FSNamesystem fsn \u003d context.getSourceNamesystem();\n      OutputStream out \u003d sectionOutputStream;\n      BlockIdManager blockIdManager \u003d fsn.getBlockManager().getBlockIdManager();\n      NameSystemSection.Builder b \u003d NameSystemSection.newBuilder()\n          .setGenstampV1(blockIdManager.getGenerationStampV1())\n          .setGenstampV1Limit(blockIdManager.getGenerationStampV1Limit())\n          .setGenstampV2(blockIdManager.getGenerationStampV2())\n          .setLastAllocatedBlockId(blockIdManager.getLastAllocatedContiguousBlockId())\n          .setLastAllocatedStripedBlockId(blockIdManager.getLastAllocatedStripedBlockId())\n          .setTransactionId(context.getTxId());\n\n      // We use the non-locked version of getNamespaceInfo here since\n      // the coordinating thread of saveNamespace already has read-locked\n      // the namespace for us. If we attempt to take another readlock\n      // from the actual saver thread, there\u0027s a potential of a\n      // fairness-related deadlock. See the comments on HDFS-2223.\n      b.setNamespaceId(fsn.unprotectedGetNamespaceInfo().getNamespaceID());\n      if (fsn.isRollingUpgrade()) {\n        b.setRollingUpgradeStartTime(fsn.getRollingUpgradeInfo().getStartTime());\n      }\n      NameSystemSection s \u003d b.build();\n      s.writeDelimitedTo(out);\n\n      commitSection(summary, SectionName.NS_INFO);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatProtobuf.java",
      "extendedDetails": {}
    },
    "1e1e93040748231dc913190aec1e031c379d8271": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7837. Erasure Coding: allocate and persist striped blocks in NameNode. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:32 AM",
      "commitName": "1e1e93040748231dc913190aec1e031c379d8271",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "02/05/15 10:03 AM",
      "commitNameOld": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 24.06,
      "commitsBetweenForRepo": 275,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n     private void saveNameSystemSection(FileSummary.Builder summary)\n         throws IOException {\n       final FSNamesystem fsn \u003d context.getSourceNamesystem();\n       OutputStream out \u003d sectionOutputStream;\n       BlockIdManager blockIdManager \u003d fsn.getBlockIdManager();\n       NameSystemSection.Builder b \u003d NameSystemSection.newBuilder()\n           .setGenstampV1(blockIdManager.getGenerationStampV1())\n           .setGenstampV1Limit(blockIdManager.getGenerationStampV1Limit())\n           .setGenstampV2(blockIdManager.getGenerationStampV2())\n-          .setLastAllocatedBlockId(blockIdManager.getLastAllocatedBlockId())\n+          .setLastAllocatedBlockId(blockIdManager.getLastAllocatedContiguousBlockId())\n+          .setLastAllocatedStripedBlockId(blockIdManager.getLastAllocatedStripedBlockId())\n           .setTransactionId(context.getTxId());\n \n       // We use the non-locked version of getNamespaceInfo here since\n       // the coordinating thread of saveNamespace already has read-locked\n       // the namespace for us. If we attempt to take another readlock\n       // from the actual saver thread, there\u0027s a potential of a\n       // fairness-related deadlock. See the comments on HDFS-2223.\n       b.setNamespaceId(fsn.unprotectedGetNamespaceInfo().getNamespaceID());\n       if (fsn.isRollingUpgrade()) {\n         b.setRollingUpgradeStartTime(fsn.getRollingUpgradeInfo().getStartTime());\n       }\n       NameSystemSection s \u003d b.build();\n       s.writeDelimitedTo(out);\n \n       commitSection(summary, SectionName.NS_INFO);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void saveNameSystemSection(FileSummary.Builder summary)\n        throws IOException {\n      final FSNamesystem fsn \u003d context.getSourceNamesystem();\n      OutputStream out \u003d sectionOutputStream;\n      BlockIdManager blockIdManager \u003d fsn.getBlockIdManager();\n      NameSystemSection.Builder b \u003d NameSystemSection.newBuilder()\n          .setGenstampV1(blockIdManager.getGenerationStampV1())\n          .setGenstampV1Limit(blockIdManager.getGenerationStampV1Limit())\n          .setGenstampV2(blockIdManager.getGenerationStampV2())\n          .setLastAllocatedBlockId(blockIdManager.getLastAllocatedContiguousBlockId())\n          .setLastAllocatedStripedBlockId(blockIdManager.getLastAllocatedStripedBlockId())\n          .setTransactionId(context.getTxId());\n\n      // We use the non-locked version of getNamespaceInfo here since\n      // the coordinating thread of saveNamespace already has read-locked\n      // the namespace for us. If we attempt to take another readlock\n      // from the actual saver thread, there\u0027s a potential of a\n      // fairness-related deadlock. See the comments on HDFS-2223.\n      b.setNamespaceId(fsn.unprotectedGetNamespaceInfo().getNamespaceID());\n      if (fsn.isRollingUpgrade()) {\n        b.setRollingUpgradeStartTime(fsn.getRollingUpgradeInfo().getStartTime());\n      }\n      NameSystemSection s \u003d b.build();\n      s.writeDelimitedTo(out);\n\n      commitSection(summary, SectionName.NS_INFO);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatProtobuf.java",
      "extendedDetails": {}
    },
    "571e9c623241106dad5521a870fb8daef3f2b00a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7381. Decouple the management of block id and gen stamps from FSNamesystem. Contributed by Haohui Mai.\n",
      "commitDate": "11/11/14 12:42 PM",
      "commitName": "571e9c623241106dad5521a870fb8daef3f2b00a",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "08/11/14 3:39 PM",
      "commitNameOld": "6caa8100d5d2547e34356dc279fd5e65b81a925a",
      "commitAuthorOld": "Arun C. Murthy",
      "daysBetweenCommits": 2.88,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n     private void saveNameSystemSection(FileSummary.Builder summary)\n         throws IOException {\n       final FSNamesystem fsn \u003d context.getSourceNamesystem();\n       OutputStream out \u003d sectionOutputStream;\n+      BlockIdManager blockIdManager \u003d fsn.getBlockIdManager();\n       NameSystemSection.Builder b \u003d NameSystemSection.newBuilder()\n-          .setGenstampV1(fsn.getGenerationStampV1())\n-          .setGenstampV1Limit(fsn.getGenerationStampV1Limit())\n-          .setGenstampV2(fsn.getGenerationStampV2())\n-          .setLastAllocatedBlockId(fsn.getLastAllocatedBlockId())\n+          .setGenstampV1(blockIdManager.getGenerationStampV1())\n+          .setGenstampV1Limit(blockIdManager.getGenerationStampV1Limit())\n+          .setGenstampV2(blockIdManager.getGenerationStampV2())\n+          .setLastAllocatedBlockId(blockIdManager.getLastAllocatedBlockId())\n           .setTransactionId(context.getTxId());\n \n       // We use the non-locked version of getNamespaceInfo here since\n       // the coordinating thread of saveNamespace already has read-locked\n       // the namespace for us. If we attempt to take another readlock\n       // from the actual saver thread, there\u0027s a potential of a\n       // fairness-related deadlock. See the comments on HDFS-2223.\n       b.setNamespaceId(fsn.unprotectedGetNamespaceInfo().getNamespaceID());\n       if (fsn.isRollingUpgrade()) {\n         b.setRollingUpgradeStartTime(fsn.getRollingUpgradeInfo().getStartTime());\n       }\n       NameSystemSection s \u003d b.build();\n       s.writeDelimitedTo(out);\n \n       commitSection(summary, SectionName.NS_INFO);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void saveNameSystemSection(FileSummary.Builder summary)\n        throws IOException {\n      final FSNamesystem fsn \u003d context.getSourceNamesystem();\n      OutputStream out \u003d sectionOutputStream;\n      BlockIdManager blockIdManager \u003d fsn.getBlockIdManager();\n      NameSystemSection.Builder b \u003d NameSystemSection.newBuilder()\n          .setGenstampV1(blockIdManager.getGenerationStampV1())\n          .setGenstampV1Limit(blockIdManager.getGenerationStampV1Limit())\n          .setGenstampV2(blockIdManager.getGenerationStampV2())\n          .setLastAllocatedBlockId(blockIdManager.getLastAllocatedBlockId())\n          .setTransactionId(context.getTxId());\n\n      // We use the non-locked version of getNamespaceInfo here since\n      // the coordinating thread of saveNamespace already has read-locked\n      // the namespace for us. If we attempt to take another readlock\n      // from the actual saver thread, there\u0027s a potential of a\n      // fairness-related deadlock. See the comments on HDFS-2223.\n      b.setNamespaceId(fsn.unprotectedGetNamespaceInfo().getNamespaceID());\n      if (fsn.isRollingUpgrade()) {\n        b.setRollingUpgradeStartTime(fsn.getRollingUpgradeInfo().getStartTime());\n      }\n      NameSystemSection s \u003d b.build();\n      s.writeDelimitedTo(out);\n\n      commitSection(summary, SectionName.NS_INFO);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatProtobuf.java",
      "extendedDetails": {}
    },
    "bc962d6df470e3de18df3a4fd9f8a9853953bda1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5945. Add rolling upgrade information to fsimage; and disallow upgrade and rolling upgrade to be started simultaneously.  Contributed by szetszwo \u0026 jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1569515 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/02/14 12:12 PM",
      "commitName": "bc962d6df470e3de18df3a4fd9f8a9853953bda1",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "14/02/14 12:56 PM",
      "commitNameOld": "a795bc42d012bf75872ae412cb2644c2d80177e3",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 3.97,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,25 @@\n     private void saveNameSystemSection(FileSummary.Builder summary)\n         throws IOException {\n       final FSNamesystem fsn \u003d context.getSourceNamesystem();\n       OutputStream out \u003d sectionOutputStream;\n       NameSystemSection.Builder b \u003d NameSystemSection.newBuilder()\n           .setGenstampV1(fsn.getGenerationStampV1())\n           .setGenstampV1Limit(fsn.getGenerationStampV1Limit())\n           .setGenstampV2(fsn.getGenerationStampV2())\n           .setLastAllocatedBlockId(fsn.getLastAllocatedBlockId())\n           .setTransactionId(context.getTxId());\n \n       // We use the non-locked version of getNamespaceInfo here since\n       // the coordinating thread of saveNamespace already has read-locked\n       // the namespace for us. If we attempt to take another readlock\n       // from the actual saver thread, there\u0027s a potential of a\n       // fairness-related deadlock. See the comments on HDFS-2223.\n       b.setNamespaceId(fsn.unprotectedGetNamespaceInfo().getNamespaceID());\n+      if (fsn.isRollingUpgrade()) {\n+        b.setRollingUpgradeStartTime(fsn.getRollingUpgradeInfo().getStartTime());\n+      }\n       NameSystemSection s \u003d b.build();\n       s.writeDelimitedTo(out);\n \n       commitSection(summary, SectionName.NS_INFO);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void saveNameSystemSection(FileSummary.Builder summary)\n        throws IOException {\n      final FSNamesystem fsn \u003d context.getSourceNamesystem();\n      OutputStream out \u003d sectionOutputStream;\n      NameSystemSection.Builder b \u003d NameSystemSection.newBuilder()\n          .setGenstampV1(fsn.getGenerationStampV1())\n          .setGenstampV1Limit(fsn.getGenerationStampV1Limit())\n          .setGenstampV2(fsn.getGenerationStampV2())\n          .setLastAllocatedBlockId(fsn.getLastAllocatedBlockId())\n          .setTransactionId(context.getTxId());\n\n      // We use the non-locked version of getNamespaceInfo here since\n      // the coordinating thread of saveNamespace already has read-locked\n      // the namespace for us. If we attempt to take another readlock\n      // from the actual saver thread, there\u0027s a potential of a\n      // fairness-related deadlock. See the comments on HDFS-2223.\n      b.setNamespaceId(fsn.unprotectedGetNamespaceInfo().getNamespaceID());\n      if (fsn.isRollingUpgrade()) {\n        b.setRollingUpgradeStartTime(fsn.getRollingUpgradeInfo().getStartTime());\n      }\n      NameSystemSection s \u003d b.build();\n      s.writeDelimitedTo(out);\n\n      commitSection(summary, SectionName.NS_INFO);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatProtobuf.java",
      "extendedDetails": {}
    },
    "a2edb11b68ae01a44092cb14ac2717a6aad93305": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5698. Use protobuf to serialize / deserialize FSImage. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566359 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/02/14 11:18 AM",
      "commitName": "a2edb11b68ae01a44092cb14ac2717a6aad93305",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,22 @@\n+    private void saveNameSystemSection(FileSummary.Builder summary)\n+        throws IOException {\n+      final FSNamesystem fsn \u003d context.getSourceNamesystem();\n+      OutputStream out \u003d sectionOutputStream;\n+      NameSystemSection.Builder b \u003d NameSystemSection.newBuilder()\n+          .setGenstampV1(fsn.getGenerationStampV1())\n+          .setGenstampV1Limit(fsn.getGenerationStampV1Limit())\n+          .setGenstampV2(fsn.getGenerationStampV2())\n+          .setLastAllocatedBlockId(fsn.getLastAllocatedBlockId())\n+          .setTransactionId(context.getTxId());\n+\n+      // We use the non-locked version of getNamespaceInfo here since\n+      // the coordinating thread of saveNamespace already has read-locked\n+      // the namespace for us. If we attempt to take another readlock\n+      // from the actual saver thread, there\u0027s a potential of a\n+      // fairness-related deadlock. See the comments on HDFS-2223.\n+      b.setNamespaceId(fsn.unprotectedGetNamespaceInfo().getNamespaceID());\n+      NameSystemSection s \u003d b.build();\n+      s.writeDelimitedTo(out);\n+\n+      commitSection(summary, SectionName.NS_INFO);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void saveNameSystemSection(FileSummary.Builder summary)\n        throws IOException {\n      final FSNamesystem fsn \u003d context.getSourceNamesystem();\n      OutputStream out \u003d sectionOutputStream;\n      NameSystemSection.Builder b \u003d NameSystemSection.newBuilder()\n          .setGenstampV1(fsn.getGenerationStampV1())\n          .setGenstampV1Limit(fsn.getGenerationStampV1Limit())\n          .setGenstampV2(fsn.getGenerationStampV2())\n          .setLastAllocatedBlockId(fsn.getLastAllocatedBlockId())\n          .setTransactionId(context.getTxId());\n\n      // We use the non-locked version of getNamespaceInfo here since\n      // the coordinating thread of saveNamespace already has read-locked\n      // the namespace for us. If we attempt to take another readlock\n      // from the actual saver thread, there\u0027s a potential of a\n      // fairness-related deadlock. See the comments on HDFS-2223.\n      b.setNamespaceId(fsn.unprotectedGetNamespaceInfo().getNamespaceID());\n      NameSystemSection s \u003d b.build();\n      s.writeDelimitedTo(out);\n\n      commitSection(summary, SectionName.NS_INFO);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatProtobuf.java"
    }
  }
}