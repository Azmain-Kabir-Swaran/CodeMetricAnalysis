{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirectory.java",
  "functionName": "constructRemainingPath",
  "functionId": "constructRemainingPath___components-byte[][]__extraComponents-byte[][]__startAt-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
  "functionStartLine": 1742,
  "functionEndLine": 1756,
  "numCommitsSeen": 600,
  "timeTaken": 5371,
  "changeHistory": [
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2"
  ],
  "changeHistoryShort": {
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-10744. Internally optimize path component resolution. Contributed by Daryn Sharp.\n",
      "commitDate": "15/08/16 2:45 PM",
      "commitName": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10744. Internally optimize path component resolution. Contributed by Daryn Sharp.\n",
          "commitDate": "15/08/16 2:45 PM",
          "commitName": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "12/08/16 5:58 AM",
          "commitNameOld": "9019606b69bfb7019c8642b6cbcbb93645cc19e3",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 3.37,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,15 @@\n-  private static String constructRemainingPath(String pathPrefix,\n-      byte[][] pathComponents, int startAt) {\n-\n-    StringBuilder path \u003d new StringBuilder(pathPrefix);\n-    for (int i \u003d startAt; i \u003c pathComponents.length; i++) {\n-      path.append(Path.SEPARATOR).append(\n-          DFSUtil.bytes2String(pathComponents[i]));\n+  private static byte[][] constructRemainingPath(byte[][] components,\n+      byte[][] extraComponents, int startAt) {\n+    int remainder \u003d extraComponents.length - startAt;\n+    if (remainder \u003e 0) {\n+      // grow the array and copy in the remaining components\n+      int pos \u003d components.length;\n+      components \u003d Arrays.copyOf(components, pos + remainder);\n+      System.arraycopy(extraComponents, startAt, components, pos, remainder);\n     }\n     if (NameNode.LOG.isDebugEnabled()) {\n-      NameNode.LOG.debug(\"Resolved path is \" + path);\n+      NameNode.LOG.debug(\n+          \"Resolved path is \" + DFSUtil.byteArray2PathString(components));\n     }\n-    return path.toString();\n+    return components;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static byte[][] constructRemainingPath(byte[][] components,\n      byte[][] extraComponents, int startAt) {\n    int remainder \u003d extraComponents.length - startAt;\n    if (remainder \u003e 0) {\n      // grow the array and copy in the remaining components\n      int pos \u003d components.length;\n      components \u003d Arrays.copyOf(components, pos + remainder);\n      System.arraycopy(extraComponents, startAt, components, pos, remainder);\n    }\n    if (NameNode.LOG.isDebugEnabled()) {\n      NameNode.LOG.debug(\n          \"Resolved path is \" + DFSUtil.byteArray2PathString(components));\n    }\n    return components;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[pathPrefix-String, pathComponents-byte[][], startAt-int]",
            "newValue": "[components-byte[][], extraComponents-byte[][], startAt-int]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-10744. Internally optimize path component resolution. Contributed by Daryn Sharp.\n",
          "commitDate": "15/08/16 2:45 PM",
          "commitName": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "12/08/16 5:58 AM",
          "commitNameOld": "9019606b69bfb7019c8642b6cbcbb93645cc19e3",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 3.37,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,15 @@\n-  private static String constructRemainingPath(String pathPrefix,\n-      byte[][] pathComponents, int startAt) {\n-\n-    StringBuilder path \u003d new StringBuilder(pathPrefix);\n-    for (int i \u003d startAt; i \u003c pathComponents.length; i++) {\n-      path.append(Path.SEPARATOR).append(\n-          DFSUtil.bytes2String(pathComponents[i]));\n+  private static byte[][] constructRemainingPath(byte[][] components,\n+      byte[][] extraComponents, int startAt) {\n+    int remainder \u003d extraComponents.length - startAt;\n+    if (remainder \u003e 0) {\n+      // grow the array and copy in the remaining components\n+      int pos \u003d components.length;\n+      components \u003d Arrays.copyOf(components, pos + remainder);\n+      System.arraycopy(extraComponents, startAt, components, pos, remainder);\n     }\n     if (NameNode.LOG.isDebugEnabled()) {\n-      NameNode.LOG.debug(\"Resolved path is \" + path);\n+      NameNode.LOG.debug(\n+          \"Resolved path is \" + DFSUtil.byteArray2PathString(components));\n     }\n-    return path.toString();\n+    return components;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static byte[][] constructRemainingPath(byte[][] components,\n      byte[][] extraComponents, int startAt) {\n    int remainder \u003d extraComponents.length - startAt;\n    if (remainder \u003e 0) {\n      // grow the array and copy in the remaining components\n      int pos \u003d components.length;\n      components \u003d Arrays.copyOf(components, pos + remainder);\n      System.arraycopy(extraComponents, startAt, components, pos, remainder);\n    }\n    if (NameNode.LOG.isDebugEnabled()) {\n      NameNode.LOG.debug(\n          \"Resolved path is \" + DFSUtil.byteArray2PathString(components));\n    }\n    return components;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "String",
            "newValue": "byte[][]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10744. Internally optimize path component resolution. Contributed by Daryn Sharp.\n",
          "commitDate": "15/08/16 2:45 PM",
          "commitName": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "12/08/16 5:58 AM",
          "commitNameOld": "9019606b69bfb7019c8642b6cbcbb93645cc19e3",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 3.37,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,15 @@\n-  private static String constructRemainingPath(String pathPrefix,\n-      byte[][] pathComponents, int startAt) {\n-\n-    StringBuilder path \u003d new StringBuilder(pathPrefix);\n-    for (int i \u003d startAt; i \u003c pathComponents.length; i++) {\n-      path.append(Path.SEPARATOR).append(\n-          DFSUtil.bytes2String(pathComponents[i]));\n+  private static byte[][] constructRemainingPath(byte[][] components,\n+      byte[][] extraComponents, int startAt) {\n+    int remainder \u003d extraComponents.length - startAt;\n+    if (remainder \u003e 0) {\n+      // grow the array and copy in the remaining components\n+      int pos \u003d components.length;\n+      components \u003d Arrays.copyOf(components, pos + remainder);\n+      System.arraycopy(extraComponents, startAt, components, pos, remainder);\n     }\n     if (NameNode.LOG.isDebugEnabled()) {\n-      NameNode.LOG.debug(\"Resolved path is \" + path);\n+      NameNode.LOG.debug(\n+          \"Resolved path is \" + DFSUtil.byteArray2PathString(components));\n     }\n-    return path.toString();\n+    return components;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static byte[][] constructRemainingPath(byte[][] components,\n      byte[][] extraComponents, int startAt) {\n    int remainder \u003d extraComponents.length - startAt;\n    if (remainder \u003e 0) {\n      // grow the array and copy in the remaining components\n      int pos \u003d components.length;\n      components \u003d Arrays.copyOf(components, pos + remainder);\n      System.arraycopy(extraComponents, startAt, components, pos, remainder);\n    }\n    if (NameNode.LOG.isDebugEnabled()) {\n      NameNode.LOG.debug(\n          \"Resolved path is \" + DFSUtil.byteArray2PathString(components));\n    }\n    return components;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}