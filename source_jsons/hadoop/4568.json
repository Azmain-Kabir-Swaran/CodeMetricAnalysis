{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AliasMapProtocolServerSideTranslatorPB.java",
  "functionName": "list",
  "functionId": "list___controller-RpcController__request-ListRequestProto",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/AliasMapProtocolServerSideTranslatorPB.java",
  "functionStartLine": 96,
  "functionEndLine": 123,
  "numCommitsSeen": 4,
  "timeTaken": 764,
  "changeHistory": [
    "352f994b6484524cdcfcda021046c59905b62f31"
  ],
  "changeHistoryShort": {
    "352f994b6484524cdcfcda021046c59905b62f31": "Yintroduced"
  },
  "changeHistoryDetails": {
    "352f994b6484524cdcfcda021046c59905b62f31": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12665. [AliasMap] Create a version of the AliasMap that runs in memory in the Namenode (leveldb). Contributed by Ewan Higgs.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "352f994b6484524cdcfcda021046c59905b62f31",
      "commitAuthor": "Virajith Jalaparti",
      "diff": "@@ -0,0 +1,28 @@\n+  public ListResponseProto list(RpcController controller,\n+      ListRequestProto request) throws ServiceException {\n+    try {\n+      BlockProto marker \u003d request.getMarker();\n+      IterationResult iterationResult;\n+      if (marker.isInitialized()) {\n+        iterationResult \u003d\n+            aliasMap.list(Optional.of(PBHelperClient.convert(marker)));\n+      } else {\n+        iterationResult \u003d aliasMap.list(Optional.empty());\n+      }\n+      ListResponseProto.Builder responseBuilder \u003d\n+          ListResponseProto.newBuilder();\n+      List\u003cFileRegion\u003e fileRegions \u003d iterationResult.getFileRegions();\n+\n+      List\u003cKeyValueProto\u003e keyValueProtos \u003d fileRegions.stream()\n+          .map(PBHelper::convert).collect(Collectors.toList());\n+      responseBuilder.addAllFileRegions(keyValueProtos);\n+      Optional\u003cBlock\u003e nextMarker \u003d iterationResult.getNextBlock();\n+      nextMarker\n+          .map(m -\u003e responseBuilder.setNextMarker(PBHelperClient.convert(m)));\n+\n+      return responseBuilder.build();\n+\n+    } catch (IOException e) {\n+      throw new ServiceException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ListResponseProto list(RpcController controller,\n      ListRequestProto request) throws ServiceException {\n    try {\n      BlockProto marker \u003d request.getMarker();\n      IterationResult iterationResult;\n      if (marker.isInitialized()) {\n        iterationResult \u003d\n            aliasMap.list(Optional.of(PBHelperClient.convert(marker)));\n      } else {\n        iterationResult \u003d aliasMap.list(Optional.empty());\n      }\n      ListResponseProto.Builder responseBuilder \u003d\n          ListResponseProto.newBuilder();\n      List\u003cFileRegion\u003e fileRegions \u003d iterationResult.getFileRegions();\n\n      List\u003cKeyValueProto\u003e keyValueProtos \u003d fileRegions.stream()\n          .map(PBHelper::convert).collect(Collectors.toList());\n      responseBuilder.addAllFileRegions(keyValueProtos);\n      Optional\u003cBlock\u003e nextMarker \u003d iterationResult.getNextBlock();\n      nextMarker\n          .map(m -\u003e responseBuilder.setNextMarker(PBHelperClient.convert(m)));\n\n      return responseBuilder.build();\n\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/AliasMapProtocolServerSideTranslatorPB.java"
    }
  }
}