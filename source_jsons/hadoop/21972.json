{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CryptoUtils.java",
  "functionName": "wrapIfNecessary",
  "functionId": "wrapIfNecessary___conf-Configuration__in-InputStream__length-long",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/CryptoUtils.java",
  "functionStartLine": 166,
  "functionEndLine": 190,
  "numCommitsSeen": 7,
  "timeTaken": 1200,
  "changeHistory": [
    "6b710a42e00acca405e085724c89cda016cf7442",
    "95986dd2fb4527c43fa4c088c61fb7b4bd794d23"
  ],
  "changeHistoryShort": {
    "6b710a42e00acca405e085724c89cda016cf7442": "Ybodychange",
    "95986dd2fb4527c43fa4c088c61fb7b4bd794d23": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b710a42e00acca405e085724c89cda016cf7442": {
      "type": "Ybodychange",
      "commitMessage": "Fixing MR intermediate spills. Contributed by Arun Suresh.\n",
      "commitDate": "14/05/15 4:07 PM",
      "commitName": "6b710a42e00acca405e085724c89cda016cf7442",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/03/15 1:06 AM",
      "commitNameOld": "9ae7f9eb7baeb244e1b95aabc93ad8124870b9a9",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 72.58,
      "commitsBetweenForRepo": 717,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public static InputStream wrapIfNecessary(Configuration conf, InputStream in,\n       long length) throws IOException {\n-    if (isShuffleEncrypted(conf)) {\n+    if (isEncryptedSpillEnabled(conf)) {\n       int bufferSize \u003d getBufferSize(conf);\n       if (length \u003e -1) {\n         in \u003d new LimitInputStream(in, length);\n       }\n       byte[] offsetArray \u003d new byte[8];\n       IOUtils.readFully(in, offsetArray, 0, 8);\n       long offset \u003d ByteBuffer.wrap(offsetArray).getLong();\n       CryptoCodec cryptoCodec \u003d CryptoCodec.getInstance(conf);\n       byte[] iv \u003d \n           new byte[cryptoCodec.getCipherSuite().getAlgorithmBlockSize()];\n       IOUtils.readFully(in, iv, 0, \n           cryptoCodec.getCipherSuite().getAlgorithmBlockSize());\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"IV read from [\"\n             + Base64.encodeBase64URLSafeString(iv) + \"]\");\n       }\n       return new CryptoInputStream(in, cryptoCodec, bufferSize,\n           getEncryptionKey(), iv, offset + cryptoPadding(conf));\n     } else {\n       return in;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static InputStream wrapIfNecessary(Configuration conf, InputStream in,\n      long length) throws IOException {\n    if (isEncryptedSpillEnabled(conf)) {\n      int bufferSize \u003d getBufferSize(conf);\n      if (length \u003e -1) {\n        in \u003d new LimitInputStream(in, length);\n      }\n      byte[] offsetArray \u003d new byte[8];\n      IOUtils.readFully(in, offsetArray, 0, 8);\n      long offset \u003d ByteBuffer.wrap(offsetArray).getLong();\n      CryptoCodec cryptoCodec \u003d CryptoCodec.getInstance(conf);\n      byte[] iv \u003d \n          new byte[cryptoCodec.getCipherSuite().getAlgorithmBlockSize()];\n      IOUtils.readFully(in, iv, 0, \n          cryptoCodec.getCipherSuite().getAlgorithmBlockSize());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"IV read from [\"\n            + Base64.encodeBase64URLSafeString(iv) + \"]\");\n      }\n      return new CryptoInputStream(in, cryptoCodec, bufferSize,\n          getEncryptionKey(), iv, offset + cryptoPadding(conf));\n    } else {\n      return in;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/CryptoUtils.java",
      "extendedDetails": {}
    },
    "95986dd2fb4527c43fa4c088c61fb7b4bd794d23": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5890. Support for encrypting Intermediate data and spills in local filesystem. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1609597 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/14 5:43 PM",
      "commitName": "95986dd2fb4527c43fa4c088c61fb7b4bd794d23",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,25 @@\n+  public static InputStream wrapIfNecessary(Configuration conf, InputStream in,\n+      long length) throws IOException {\n+    if (isShuffleEncrypted(conf)) {\n+      int bufferSize \u003d getBufferSize(conf);\n+      if (length \u003e -1) {\n+        in \u003d new LimitInputStream(in, length);\n+      }\n+      byte[] offsetArray \u003d new byte[8];\n+      IOUtils.readFully(in, offsetArray, 0, 8);\n+      long offset \u003d ByteBuffer.wrap(offsetArray).getLong();\n+      CryptoCodec cryptoCodec \u003d CryptoCodec.getInstance(conf);\n+      byte[] iv \u003d \n+          new byte[cryptoCodec.getCipherSuite().getAlgorithmBlockSize()];\n+      IOUtils.readFully(in, iv, 0, \n+          cryptoCodec.getCipherSuite().getAlgorithmBlockSize());\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"IV read from [\"\n+            + Base64.encodeBase64URLSafeString(iv) + \"]\");\n+      }\n+      return new CryptoInputStream(in, cryptoCodec, bufferSize,\n+          getEncryptionKey(), iv, offset + cryptoPadding(conf));\n+    } else {\n+      return in;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static InputStream wrapIfNecessary(Configuration conf, InputStream in,\n      long length) throws IOException {\n    if (isShuffleEncrypted(conf)) {\n      int bufferSize \u003d getBufferSize(conf);\n      if (length \u003e -1) {\n        in \u003d new LimitInputStream(in, length);\n      }\n      byte[] offsetArray \u003d new byte[8];\n      IOUtils.readFully(in, offsetArray, 0, 8);\n      long offset \u003d ByteBuffer.wrap(offsetArray).getLong();\n      CryptoCodec cryptoCodec \u003d CryptoCodec.getInstance(conf);\n      byte[] iv \u003d \n          new byte[cryptoCodec.getCipherSuite().getAlgorithmBlockSize()];\n      IOUtils.readFully(in, iv, 0, \n          cryptoCodec.getCipherSuite().getAlgorithmBlockSize());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"IV read from [\"\n            + Base64.encodeBase64URLSafeString(iv) + \"]\");\n      }\n      return new CryptoInputStream(in, cryptoCodec, bufferSize,\n          getEncryptionKey(), iv, offset + cryptoPadding(conf));\n    } else {\n      return in;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/CryptoUtils.java"
    }
  }
}