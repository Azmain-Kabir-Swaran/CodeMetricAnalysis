{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AppsBlock.java",
  "functionName": "fetchData",
  "functionId": "fetchData",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppsBlock.java",
  "functionStartLine": 70,
  "functionEndLine": 126,
  "numCommitsSeen": 18,
  "timeTaken": 2339,
  "changeHistory": [
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
    "722ee841948db1f246f0056acec9a1ac464fe1f9",
    "8d0ef3163287d811381e94cc0101dbc9847ee2db",
    "54504133f41e36eaea6bb06c7b9ddb249468ecd7",
    "4728bdfa15809db4b8b235faa286c65de4a48cf6"
  ],
  "changeHistoryShort": {
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f": "Ybodychange",
    "722ee841948db1f246f0056acec9a1ac464fe1f9": "Ybodychange",
    "8d0ef3163287d811381e94cc0101dbc9847ee2db": "Ybodychange",
    "54504133f41e36eaea6bb06c7b9ddb249468ecd7": "Ybodychange",
    "4728bdfa15809db4b8b235faa286c65de4a48cf6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8363. Upgrade commons-lang version to 3.7 in hadoop-yarn-project. Contributed by Takanobu Asanuma.\n",
      "commitDate": "12/06/18 8:35 AM",
      "commitName": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "17/04/18 11:15 AM",
      "commitNameOld": "bb92bfb4ef96baa234966b60e464d1773fbf3f22",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 55.89,
      "commitsBetweenForRepo": 937,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   protected void fetchData() throws YarnException, IOException,\n       InterruptedException {\n     reqAppStates \u003d EnumSet.noneOf(YarnApplicationState.class);\n     String reqStateString \u003d $(APP_STATE);\n     if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n       String[] appStateStrings \u003d reqStateString.split(\",\");\n       for (String stateString : appStateStrings) {\n         reqAppStates.add(YarnApplicationState.valueOf(stateString.trim()));\n       }\n     }\n     callerUGI \u003d getCallerUGI();\n     final GetApplicationsRequest request \u003d\n         GetApplicationsRequest.newInstance(reqAppStates);\n     String appsNumStr \u003d $(APPS_NUM);\n     if (appsNumStr !\u003d null \u0026\u0026 !appsNumStr.isEmpty()) {\n       long appsNum \u003d Long.parseLong(appsNumStr);\n       request.setLimit(appsNum);\n     }\n \n     String appStartedTimeBegainStr \u003d $(APP_START_TIME_BEGIN);\n     long appStartedTimeBegain \u003d 0;\n     if (appStartedTimeBegainStr !\u003d null \u0026\u0026 !appStartedTimeBegainStr.isEmpty()) {\n       appStartedTimeBegain \u003d Long.parseLong(appStartedTimeBegainStr);\n       if (appStartedTimeBegain \u003c 0) {\n         throw new BadRequestException(\n           \"app.started-time.begin must be greater than 0\");\n       }\n     }\n     String appStartedTimeEndStr \u003d $(APP_START_TIME_END);\n     long appStartedTimeEnd \u003d Long.MAX_VALUE;\n     if (appStartedTimeEndStr !\u003d null \u0026\u0026 !appStartedTimeEndStr.isEmpty()) {\n       appStartedTimeEnd \u003d Long.parseLong(appStartedTimeEndStr);\n       if (appStartedTimeEnd \u003c 0) {\n         throw new BadRequestException(\n           \"app.started-time.end must be greater than 0\");\n       }\n     }\n     if (appStartedTimeBegain \u003e appStartedTimeEnd) {\n       throw new BadRequestException(\n         \"app.started-time.end must be greater than app.started-time.begin\");\n     }\n     request.setStartRange(\n-        new LongRange(appStartedTimeBegain, appStartedTimeEnd));\n+        Range.between(appStartedTimeBegain, appStartedTimeEnd));\n \n     if (callerUGI \u003d\u003d null) {\n       appReports \u003d getApplicationReport(request);\n     } else {\n       appReports \u003d\n           callerUGI\n             .doAs(new PrivilegedExceptionAction\u003cCollection\u003cApplicationReport\u003e\u003e() {\n               @Override\n               public Collection\u003cApplicationReport\u003e run() throws Exception {\n                 return getApplicationReport(request);\n               }\n             });\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void fetchData() throws YarnException, IOException,\n      InterruptedException {\n    reqAppStates \u003d EnumSet.noneOf(YarnApplicationState.class);\n    String reqStateString \u003d $(APP_STATE);\n    if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n      String[] appStateStrings \u003d reqStateString.split(\",\");\n      for (String stateString : appStateStrings) {\n        reqAppStates.add(YarnApplicationState.valueOf(stateString.trim()));\n      }\n    }\n    callerUGI \u003d getCallerUGI();\n    final GetApplicationsRequest request \u003d\n        GetApplicationsRequest.newInstance(reqAppStates);\n    String appsNumStr \u003d $(APPS_NUM);\n    if (appsNumStr !\u003d null \u0026\u0026 !appsNumStr.isEmpty()) {\n      long appsNum \u003d Long.parseLong(appsNumStr);\n      request.setLimit(appsNum);\n    }\n\n    String appStartedTimeBegainStr \u003d $(APP_START_TIME_BEGIN);\n    long appStartedTimeBegain \u003d 0;\n    if (appStartedTimeBegainStr !\u003d null \u0026\u0026 !appStartedTimeBegainStr.isEmpty()) {\n      appStartedTimeBegain \u003d Long.parseLong(appStartedTimeBegainStr);\n      if (appStartedTimeBegain \u003c 0) {\n        throw new BadRequestException(\n          \"app.started-time.begin must be greater than 0\");\n      }\n    }\n    String appStartedTimeEndStr \u003d $(APP_START_TIME_END);\n    long appStartedTimeEnd \u003d Long.MAX_VALUE;\n    if (appStartedTimeEndStr !\u003d null \u0026\u0026 !appStartedTimeEndStr.isEmpty()) {\n      appStartedTimeEnd \u003d Long.parseLong(appStartedTimeEndStr);\n      if (appStartedTimeEnd \u003c 0) {\n        throw new BadRequestException(\n          \"app.started-time.end must be greater than 0\");\n      }\n    }\n    if (appStartedTimeBegain \u003e appStartedTimeEnd) {\n      throw new BadRequestException(\n        \"app.started-time.end must be greater than app.started-time.begin\");\n    }\n    request.setStartRange(\n        Range.between(appStartedTimeBegain, appStartedTimeEnd));\n\n    if (callerUGI \u003d\u003d null) {\n      appReports \u003d getApplicationReport(request);\n    } else {\n      appReports \u003d\n          callerUGI\n            .doAs(new PrivilegedExceptionAction\u003cCollection\u003cApplicationReport\u003e\u003e() {\n              @Override\n              public Collection\u003cApplicationReport\u003e run() throws Exception {\n                return getApplicationReport(request);\n              }\n            });\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppsBlock.java",
      "extendedDetails": {}
    },
    "722ee841948db1f246f0056acec9a1ac464fe1f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7163. RMContext need not to be injected to webapp and other Always Running services. Contributed by Rohith Sharma K S.\n",
      "commitDate": "10/09/17 9:58 PM",
      "commitName": "722ee841948db1f246f0056acec9a1ac464fe1f9",
      "commitAuthor": "Sunil G",
      "commitDateOld": "27/07/17 5:10 PM",
      "commitNameOld": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 45.2,
      "commitsBetweenForRepo": 399,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,57 @@\n   protected void fetchData() throws YarnException, IOException,\n       InterruptedException {\n     reqAppStates \u003d EnumSet.noneOf(YarnApplicationState.class);\n     String reqStateString \u003d $(APP_STATE);\n     if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n       String[] appStateStrings \u003d reqStateString.split(\",\");\n       for (String stateString : appStateStrings) {\n         reqAppStates.add(YarnApplicationState.valueOf(stateString.trim()));\n       }\n     }\n     callerUGI \u003d getCallerUGI();\n     final GetApplicationsRequest request \u003d\n         GetApplicationsRequest.newInstance(reqAppStates);\n     String appsNumStr \u003d $(APPS_NUM);\n     if (appsNumStr !\u003d null \u0026\u0026 !appsNumStr.isEmpty()) {\n       long appsNum \u003d Long.parseLong(appsNumStr);\n       request.setLimit(appsNum);\n     }\n \n     String appStartedTimeBegainStr \u003d $(APP_START_TIME_BEGIN);\n     long appStartedTimeBegain \u003d 0;\n     if (appStartedTimeBegainStr !\u003d null \u0026\u0026 !appStartedTimeBegainStr.isEmpty()) {\n       appStartedTimeBegain \u003d Long.parseLong(appStartedTimeBegainStr);\n       if (appStartedTimeBegain \u003c 0) {\n         throw new BadRequestException(\n           \"app.started-time.begin must be greater than 0\");\n       }\n     }\n     String appStartedTimeEndStr \u003d $(APP_START_TIME_END);\n     long appStartedTimeEnd \u003d Long.MAX_VALUE;\n     if (appStartedTimeEndStr !\u003d null \u0026\u0026 !appStartedTimeEndStr.isEmpty()) {\n       appStartedTimeEnd \u003d Long.parseLong(appStartedTimeEndStr);\n       if (appStartedTimeEnd \u003c 0) {\n         throw new BadRequestException(\n           \"app.started-time.end must be greater than 0\");\n       }\n     }\n     if (appStartedTimeBegain \u003e appStartedTimeEnd) {\n       throw new BadRequestException(\n         \"app.started-time.end must be greater than app.started-time.begin\");\n     }\n     request.setStartRange(\n         new LongRange(appStartedTimeBegain, appStartedTimeEnd));\n \n     if (callerUGI \u003d\u003d null) {\n-      appReports \u003d appBaseProt.getApplications(request).getApplicationList();\n+      appReports \u003d getApplicationReport(request);\n     } else {\n       appReports \u003d\n           callerUGI\n             .doAs(new PrivilegedExceptionAction\u003cCollection\u003cApplicationReport\u003e\u003e() {\n               @Override\n               public Collection\u003cApplicationReport\u003e run() throws Exception {\n-                return appBaseProt.getApplications(request)\n-                  .getApplicationList();\n+                return getApplicationReport(request);\n               }\n             });\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void fetchData() throws YarnException, IOException,\n      InterruptedException {\n    reqAppStates \u003d EnumSet.noneOf(YarnApplicationState.class);\n    String reqStateString \u003d $(APP_STATE);\n    if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n      String[] appStateStrings \u003d reqStateString.split(\",\");\n      for (String stateString : appStateStrings) {\n        reqAppStates.add(YarnApplicationState.valueOf(stateString.trim()));\n      }\n    }\n    callerUGI \u003d getCallerUGI();\n    final GetApplicationsRequest request \u003d\n        GetApplicationsRequest.newInstance(reqAppStates);\n    String appsNumStr \u003d $(APPS_NUM);\n    if (appsNumStr !\u003d null \u0026\u0026 !appsNumStr.isEmpty()) {\n      long appsNum \u003d Long.parseLong(appsNumStr);\n      request.setLimit(appsNum);\n    }\n\n    String appStartedTimeBegainStr \u003d $(APP_START_TIME_BEGIN);\n    long appStartedTimeBegain \u003d 0;\n    if (appStartedTimeBegainStr !\u003d null \u0026\u0026 !appStartedTimeBegainStr.isEmpty()) {\n      appStartedTimeBegain \u003d Long.parseLong(appStartedTimeBegainStr);\n      if (appStartedTimeBegain \u003c 0) {\n        throw new BadRequestException(\n          \"app.started-time.begin must be greater than 0\");\n      }\n    }\n    String appStartedTimeEndStr \u003d $(APP_START_TIME_END);\n    long appStartedTimeEnd \u003d Long.MAX_VALUE;\n    if (appStartedTimeEndStr !\u003d null \u0026\u0026 !appStartedTimeEndStr.isEmpty()) {\n      appStartedTimeEnd \u003d Long.parseLong(appStartedTimeEndStr);\n      if (appStartedTimeEnd \u003c 0) {\n        throw new BadRequestException(\n          \"app.started-time.end must be greater than 0\");\n      }\n    }\n    if (appStartedTimeBegain \u003e appStartedTimeEnd) {\n      throw new BadRequestException(\n        \"app.started-time.end must be greater than app.started-time.begin\");\n    }\n    request.setStartRange(\n        new LongRange(appStartedTimeBegain, appStartedTimeEnd));\n\n    if (callerUGI \u003d\u003d null) {\n      appReports \u003d getApplicationReport(request);\n    } else {\n      appReports \u003d\n          callerUGI\n            .doAs(new PrivilegedExceptionAction\u003cCollection\u003cApplicationReport\u003e\u003e() {\n              @Override\n              public Collection\u003cApplicationReport\u003e run() throws Exception {\n                return getApplicationReport(request);\n              }\n            });\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppsBlock.java",
      "extendedDetails": {}
    },
    "8d0ef3163287d811381e94cc0101dbc9847ee2db": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3787. Allowed generic history service to load a number of applications whose started time is within the given range. Contributed by Xuan Gong.\n",
      "commitDate": "08/06/15 11:14 PM",
      "commitName": "8d0ef3163287d811381e94cc0101dbc9847ee2db",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "27/05/15 4:52 PM",
      "commitNameOld": "54504133f41e36eaea6bb06c7b9ddb249468ecd7",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 12.27,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,58 @@\n   protected void fetchData() throws YarnException, IOException,\n       InterruptedException {\n     reqAppStates \u003d EnumSet.noneOf(YarnApplicationState.class);\n     String reqStateString \u003d $(APP_STATE);\n     if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n       String[] appStateStrings \u003d reqStateString.split(\",\");\n       for (String stateString : appStateStrings) {\n         reqAppStates.add(YarnApplicationState.valueOf(stateString.trim()));\n       }\n     }\n     callerUGI \u003d getCallerUGI();\n     final GetApplicationsRequest request \u003d\n         GetApplicationsRequest.newInstance(reqAppStates);\n     String appsNumStr \u003d $(APPS_NUM);\n     if (appsNumStr !\u003d null \u0026\u0026 !appsNumStr.isEmpty()) {\n       long appsNum \u003d Long.parseLong(appsNumStr);\n       request.setLimit(appsNum);\n     }\n+\n+    String appStartedTimeBegainStr \u003d $(APP_START_TIME_BEGIN);\n+    long appStartedTimeBegain \u003d 0;\n+    if (appStartedTimeBegainStr !\u003d null \u0026\u0026 !appStartedTimeBegainStr.isEmpty()) {\n+      appStartedTimeBegain \u003d Long.parseLong(appStartedTimeBegainStr);\n+      if (appStartedTimeBegain \u003c 0) {\n+        throw new BadRequestException(\n+          \"app.started-time.begin must be greater than 0\");\n+      }\n+    }\n+    String appStartedTimeEndStr \u003d $(APP_START_TIME_END);\n+    long appStartedTimeEnd \u003d Long.MAX_VALUE;\n+    if (appStartedTimeEndStr !\u003d null \u0026\u0026 !appStartedTimeEndStr.isEmpty()) {\n+      appStartedTimeEnd \u003d Long.parseLong(appStartedTimeEndStr);\n+      if (appStartedTimeEnd \u003c 0) {\n+        throw new BadRequestException(\n+          \"app.started-time.end must be greater than 0\");\n+      }\n+    }\n+    if (appStartedTimeBegain \u003e appStartedTimeEnd) {\n+      throw new BadRequestException(\n+        \"app.started-time.end must be greater than app.started-time.begin\");\n+    }\n+    request.setStartRange(\n+        new LongRange(appStartedTimeBegain, appStartedTimeEnd));\n+\n     if (callerUGI \u003d\u003d null) {\n       appReports \u003d appBaseProt.getApplications(request).getApplicationList();\n     } else {\n       appReports \u003d\n           callerUGI\n             .doAs(new PrivilegedExceptionAction\u003cCollection\u003cApplicationReport\u003e\u003e() {\n               @Override\n               public Collection\u003cApplicationReport\u003e run() throws Exception {\n                 return appBaseProt.getApplications(request)\n                   .getApplicationList();\n               }\n             });\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void fetchData() throws YarnException, IOException,\n      InterruptedException {\n    reqAppStates \u003d EnumSet.noneOf(YarnApplicationState.class);\n    String reqStateString \u003d $(APP_STATE);\n    if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n      String[] appStateStrings \u003d reqStateString.split(\",\");\n      for (String stateString : appStateStrings) {\n        reqAppStates.add(YarnApplicationState.valueOf(stateString.trim()));\n      }\n    }\n    callerUGI \u003d getCallerUGI();\n    final GetApplicationsRequest request \u003d\n        GetApplicationsRequest.newInstance(reqAppStates);\n    String appsNumStr \u003d $(APPS_NUM);\n    if (appsNumStr !\u003d null \u0026\u0026 !appsNumStr.isEmpty()) {\n      long appsNum \u003d Long.parseLong(appsNumStr);\n      request.setLimit(appsNum);\n    }\n\n    String appStartedTimeBegainStr \u003d $(APP_START_TIME_BEGIN);\n    long appStartedTimeBegain \u003d 0;\n    if (appStartedTimeBegainStr !\u003d null \u0026\u0026 !appStartedTimeBegainStr.isEmpty()) {\n      appStartedTimeBegain \u003d Long.parseLong(appStartedTimeBegainStr);\n      if (appStartedTimeBegain \u003c 0) {\n        throw new BadRequestException(\n          \"app.started-time.begin must be greater than 0\");\n      }\n    }\n    String appStartedTimeEndStr \u003d $(APP_START_TIME_END);\n    long appStartedTimeEnd \u003d Long.MAX_VALUE;\n    if (appStartedTimeEndStr !\u003d null \u0026\u0026 !appStartedTimeEndStr.isEmpty()) {\n      appStartedTimeEnd \u003d Long.parseLong(appStartedTimeEndStr);\n      if (appStartedTimeEnd \u003c 0) {\n        throw new BadRequestException(\n          \"app.started-time.end must be greater than 0\");\n      }\n    }\n    if (appStartedTimeBegain \u003e appStartedTimeEnd) {\n      throw new BadRequestException(\n        \"app.started-time.end must be greater than app.started-time.begin\");\n    }\n    request.setStartRange(\n        new LongRange(appStartedTimeBegain, appStartedTimeEnd));\n\n    if (callerUGI \u003d\u003d null) {\n      appReports \u003d appBaseProt.getApplications(request).getApplicationList();\n    } else {\n      appReports \u003d\n          callerUGI\n            .doAs(new PrivilegedExceptionAction\u003cCollection\u003cApplicationReport\u003e\u003e() {\n              @Override\n              public Collection\u003cApplicationReport\u003e run() throws Exception {\n                return appBaseProt.getApplications(request)\n                  .getApplicationList();\n              }\n            });\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppsBlock.java",
      "extendedDetails": {}
    },
    "54504133f41e36eaea6bb06c7b9ddb249468ecd7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3700. Made generic history service load a number of latest applications according to the parameter or the configuration. Contributed by Xuan Gong.\n",
      "commitDate": "27/05/15 4:52 PM",
      "commitName": "54504133f41e36eaea6bb06c7b9ddb249468ecd7",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "05/05/15 10:40 AM",
      "commitNameOld": "b7dd3a4f04f712b7594c4e6e7ce50fd314f7c342",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 22.26,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,32 @@\n   protected void fetchData() throws YarnException, IOException,\n       InterruptedException {\n     reqAppStates \u003d EnumSet.noneOf(YarnApplicationState.class);\n     String reqStateString \u003d $(APP_STATE);\n     if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n       String[] appStateStrings \u003d reqStateString.split(\",\");\n       for (String stateString : appStateStrings) {\n         reqAppStates.add(YarnApplicationState.valueOf(stateString.trim()));\n       }\n     }\n-\n     callerUGI \u003d getCallerUGI();\n     final GetApplicationsRequest request \u003d\n         GetApplicationsRequest.newInstance(reqAppStates);\n+    String appsNumStr \u003d $(APPS_NUM);\n+    if (appsNumStr !\u003d null \u0026\u0026 !appsNumStr.isEmpty()) {\n+      long appsNum \u003d Long.parseLong(appsNumStr);\n+      request.setLimit(appsNum);\n+    }\n     if (callerUGI \u003d\u003d null) {\n       appReports \u003d appBaseProt.getApplications(request).getApplicationList();\n     } else {\n       appReports \u003d\n           callerUGI\n             .doAs(new PrivilegedExceptionAction\u003cCollection\u003cApplicationReport\u003e\u003e() {\n               @Override\n               public Collection\u003cApplicationReport\u003e run() throws Exception {\n                 return appBaseProt.getApplications(request)\n                   .getApplicationList();\n               }\n             });\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void fetchData() throws YarnException, IOException,\n      InterruptedException {\n    reqAppStates \u003d EnumSet.noneOf(YarnApplicationState.class);\n    String reqStateString \u003d $(APP_STATE);\n    if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n      String[] appStateStrings \u003d reqStateString.split(\",\");\n      for (String stateString : appStateStrings) {\n        reqAppStates.add(YarnApplicationState.valueOf(stateString.trim()));\n      }\n    }\n    callerUGI \u003d getCallerUGI();\n    final GetApplicationsRequest request \u003d\n        GetApplicationsRequest.newInstance(reqAppStates);\n    String appsNumStr \u003d $(APPS_NUM);\n    if (appsNumStr !\u003d null \u0026\u0026 !appsNumStr.isEmpty()) {\n      long appsNum \u003d Long.parseLong(appsNumStr);\n      request.setLimit(appsNum);\n    }\n    if (callerUGI \u003d\u003d null) {\n      appReports \u003d appBaseProt.getApplications(request).getApplicationList();\n    } else {\n      appReports \u003d\n          callerUGI\n            .doAs(new PrivilegedExceptionAction\u003cCollection\u003cApplicationReport\u003e\u003e() {\n              @Override\n              public Collection\u003cApplicationReport\u003e run() throws Exception {\n                return appBaseProt.getApplications(request)\n                  .getApplicationList();\n              }\n            });\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppsBlock.java",
      "extendedDetails": {}
    },
    "4728bdfa15809db4b8b235faa286c65de4a48cf6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3248. Display count of nodes blacklisted by apps in the web UI.\nContributed by Varun Vasudev\n",
      "commitDate": "01/04/15 4:19 AM",
      "commitName": "4728bdfa15809db4b8b235faa286c65de4a48cf6",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,28 @@\n+  protected void fetchData() throws YarnException, IOException,\n+      InterruptedException {\n+    reqAppStates \u003d EnumSet.noneOf(YarnApplicationState.class);\n+    String reqStateString \u003d $(APP_STATE);\n+    if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n+      String[] appStateStrings \u003d reqStateString.split(\",\");\n+      for (String stateString : appStateStrings) {\n+        reqAppStates.add(YarnApplicationState.valueOf(stateString.trim()));\n+      }\n+    }\n+\n+    callerUGI \u003d getCallerUGI();\n+    final GetApplicationsRequest request \u003d\n+        GetApplicationsRequest.newInstance(reqAppStates);\n+    if (callerUGI \u003d\u003d null) {\n+      appReports \u003d appBaseProt.getApplications(request).getApplicationList();\n+    } else {\n+      appReports \u003d\n+          callerUGI\n+            .doAs(new PrivilegedExceptionAction\u003cCollection\u003cApplicationReport\u003e\u003e() {\n+              @Override\n+              public Collection\u003cApplicationReport\u003e run() throws Exception {\n+                return appBaseProt.getApplications(request)\n+                  .getApplicationList();\n+              }\n+            });\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void fetchData() throws YarnException, IOException,\n      InterruptedException {\n    reqAppStates \u003d EnumSet.noneOf(YarnApplicationState.class);\n    String reqStateString \u003d $(APP_STATE);\n    if (reqStateString !\u003d null \u0026\u0026 !reqStateString.isEmpty()) {\n      String[] appStateStrings \u003d reqStateString.split(\",\");\n      for (String stateString : appStateStrings) {\n        reqAppStates.add(YarnApplicationState.valueOf(stateString.trim()));\n      }\n    }\n\n    callerUGI \u003d getCallerUGI();\n    final GetApplicationsRequest request \u003d\n        GetApplicationsRequest.newInstance(reqAppStates);\n    if (callerUGI \u003d\u003d null) {\n      appReports \u003d appBaseProt.getApplications(request).getApplicationList();\n    } else {\n      appReports \u003d\n          callerUGI\n            .doAs(new PrivilegedExceptionAction\u003cCollection\u003cApplicationReport\u003e\u003e() {\n              @Override\n              public Collection\u003cApplicationReport\u003e run() throws Exception {\n                return appBaseProt.getApplications(request)\n                  .getApplicationList();\n              }\n            });\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/AppsBlock.java"
    }
  }
}