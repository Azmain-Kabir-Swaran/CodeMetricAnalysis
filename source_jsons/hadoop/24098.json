{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalDistributedCacheManager.java",
  "functionName": "close",
  "functionId": "close",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalDistributedCacheManager.java",
  "functionStartLine": 247,
  "functionEndLine": 277,
  "numCommitsSeen": 14,
  "timeTaken": 1547,
  "changeHistory": [
    "a2cdffb95acbcb3625ee72ebc8aeb8bf17fa4bc7",
    "13ad75679642adf120a36199bf9e8df673b9b38f",
    "cfb6a9883d2bf02c99f258e9f19ffcd83805d077"
  ],
  "changeHistoryShort": {
    "a2cdffb95acbcb3625ee72ebc8aeb8bf17fa4bc7": "Ymultichange(Ymodifierchange,Ybodychange)",
    "13ad75679642adf120a36199bf9e8df673b9b38f": "Ybodychange",
    "cfb6a9883d2bf02c99f258e9f19ffcd83805d077": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a2cdffb95acbcb3625ee72ebc8aeb8bf17fa4bc7": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-7094. LocalDistributedCacheManager leaves classloaders open, which leaks FDs. Contributed by Adam Szita.\n",
      "commitDate": "17/05/18 11:16 AM",
      "commitName": "a2cdffb95acbcb3625ee72ebc8aeb8bf17fa4bc7",
      "commitAuthor": "Miklos Szegedi",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-7094. LocalDistributedCacheManager leaves classloaders open, which leaks FDs. Contributed by Adam Szita.\n",
          "commitDate": "17/05/18 11:16 AM",
          "commitName": "a2cdffb95acbcb3625ee72ebc8aeb8bf17fa4bc7",
          "commitAuthor": "Miklos Szegedi",
          "commitDateOld": "26/03/18 2:55 PM",
          "commitNameOld": "edb202e4934be750e43103c047752b97c5eafc94",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 51.85,
          "commitsBetweenForRepo": 861,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,31 @@\n-  public void close() throws IOException {\n+  public synchronized void close() throws IOException {\n+    if(classLoaderCreated !\u003d null) {\n+      AccessController.doPrivileged(new PrivilegedAction\u003cVoid\u003e() {\n+        @Override\n+        public Void run() {\n+          try {\n+            classLoaderCreated.close();\n+            classLoaderCreated \u003d null;\n+          } catch (IOException e) {\n+            LOG.warn(\"Failed to close classloader created \" +\n+                \"by LocalDistributedCacheManager\");\n+          }\n+          return null;\n+        }\n+      });\n+    }\n+\n     for (File symlink : symlinksCreated) {\n       if (!symlink.delete()) {\n         LOG.warn(\"Failed to delete symlink created by the local job runner: \" +\n             symlink);\n       }\n     }\n     FileContext localFSFileContext \u003d FileContext.getLocalFSFileContext();\n     for (String archive : localArchives) {\n       localFSFileContext.delete(new Path(archive), true);\n     }\n     for (String file : localFiles) {\n       localFSFileContext.delete(new Path(file), true);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void close() throws IOException {\n    if(classLoaderCreated !\u003d null) {\n      AccessController.doPrivileged(new PrivilegedAction\u003cVoid\u003e() {\n        @Override\n        public Void run() {\n          try {\n            classLoaderCreated.close();\n            classLoaderCreated \u003d null;\n          } catch (IOException e) {\n            LOG.warn(\"Failed to close classloader created \" +\n                \"by LocalDistributedCacheManager\");\n          }\n          return null;\n        }\n      });\n    }\n\n    for (File symlink : symlinksCreated) {\n      if (!symlink.delete()) {\n        LOG.warn(\"Failed to delete symlink created by the local job runner: \" +\n            symlink);\n      }\n    }\n    FileContext localFSFileContext \u003d FileContext.getLocalFSFileContext();\n    for (String archive : localArchives) {\n      localFSFileContext.delete(new Path(archive), true);\n    }\n    for (String file : localFiles) {\n      localFSFileContext.delete(new Path(file), true);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalDistributedCacheManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-7094. LocalDistributedCacheManager leaves classloaders open, which leaks FDs. Contributed by Adam Szita.\n",
          "commitDate": "17/05/18 11:16 AM",
          "commitName": "a2cdffb95acbcb3625ee72ebc8aeb8bf17fa4bc7",
          "commitAuthor": "Miklos Szegedi",
          "commitDateOld": "26/03/18 2:55 PM",
          "commitNameOld": "edb202e4934be750e43103c047752b97c5eafc94",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 51.85,
          "commitsBetweenForRepo": 861,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,31 @@\n-  public void close() throws IOException {\n+  public synchronized void close() throws IOException {\n+    if(classLoaderCreated !\u003d null) {\n+      AccessController.doPrivileged(new PrivilegedAction\u003cVoid\u003e() {\n+        @Override\n+        public Void run() {\n+          try {\n+            classLoaderCreated.close();\n+            classLoaderCreated \u003d null;\n+          } catch (IOException e) {\n+            LOG.warn(\"Failed to close classloader created \" +\n+                \"by LocalDistributedCacheManager\");\n+          }\n+          return null;\n+        }\n+      });\n+    }\n+\n     for (File symlink : symlinksCreated) {\n       if (!symlink.delete()) {\n         LOG.warn(\"Failed to delete symlink created by the local job runner: \" +\n             symlink);\n       }\n     }\n     FileContext localFSFileContext \u003d FileContext.getLocalFSFileContext();\n     for (String archive : localArchives) {\n       localFSFileContext.delete(new Path(archive), true);\n     }\n     for (String file : localFiles) {\n       localFSFileContext.delete(new Path(file), true);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void close() throws IOException {\n    if(classLoaderCreated !\u003d null) {\n      AccessController.doPrivileged(new PrivilegedAction\u003cVoid\u003e() {\n        @Override\n        public Void run() {\n          try {\n            classLoaderCreated.close();\n            classLoaderCreated \u003d null;\n          } catch (IOException e) {\n            LOG.warn(\"Failed to close classloader created \" +\n                \"by LocalDistributedCacheManager\");\n          }\n          return null;\n        }\n      });\n    }\n\n    for (File symlink : symlinksCreated) {\n      if (!symlink.delete()) {\n        LOG.warn(\"Failed to delete symlink created by the local job runner: \" +\n            symlink);\n      }\n    }\n    FileContext localFSFileContext \u003d FileContext.getLocalFSFileContext();\n    for (String archive : localArchives) {\n      localFSFileContext.delete(new Path(archive), true);\n    }\n    for (String file : localFiles) {\n      localFSFileContext.delete(new Path(file), true);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalDistributedCacheManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "13ad75679642adf120a36199bf9e8df673b9b38f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3871. Allow symlinking in LocalJobRunner DistributedCache.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1348997 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/12 1:37 PM",
      "commitName": "13ad75679642adf120a36199bf9e8df673b9b38f",
      "commitAuthor": "Thomas White",
      "commitDateOld": "18/01/12 10:20 AM",
      "commitNameOld": "8b2f6909ec7df5cffb5ef417f5c9cffdee43e38a",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 145.1,
      "commitsBetweenForRepo": 1040,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,15 @@\n   public void close() throws IOException {\n+    for (File symlink : symlinksCreated) {\n+      if (!symlink.delete()) {\n+        LOG.warn(\"Failed to delete symlink created by the local job runner: \" +\n+            symlink);\n+      }\n+    }\n     FileContext localFSFileContext \u003d FileContext.getLocalFSFileContext();\n     for (String archive : localArchives) {\n       localFSFileContext.delete(new Path(archive), true);\n     }\n     for (String file : localFiles) {\n       localFSFileContext.delete(new Path(file), true);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void close() throws IOException {\n    for (File symlink : symlinksCreated) {\n      if (!symlink.delete()) {\n        LOG.warn(\"Failed to delete symlink created by the local job runner: \" +\n            symlink);\n      }\n    }\n    FileContext localFSFileContext \u003d FileContext.getLocalFSFileContext();\n    for (String archive : localArchives) {\n      localFSFileContext.delete(new Path(archive), true);\n    }\n    for (String file : localFiles) {\n      localFSFileContext.delete(new Path(file), true);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalDistributedCacheManager.java",
      "extendedDetails": {}
    },
    "cfb6a9883d2bf02c99f258e9f19ffcd83805d077": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3237. Move LocalJobRunner to hadoop-mapreduce-client-core. Contributed by Tom White.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195792 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/11 8:16 PM",
      "commitName": "cfb6a9883d2bf02c99f258e9f19ffcd83805d077",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,9 @@\n+  public void close() throws IOException {\n+    FileContext localFSFileContext \u003d FileContext.getLocalFSFileContext();\n+    for (String archive : localArchives) {\n+      localFSFileContext.delete(new Path(archive), true);\n+    }\n+    for (String file : localFiles) {\n+      localFSFileContext.delete(new Path(file), true);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void close() throws IOException {\n    FileContext localFSFileContext \u003d FileContext.getLocalFSFileContext();\n    for (String archive : localArchives) {\n      localFSFileContext.delete(new Path(archive), true);\n    }\n    for (String file : localFiles) {\n      localFSFileContext.delete(new Path(file), true);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalDistributedCacheManager.java"
    }
  }
}