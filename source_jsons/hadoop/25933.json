{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLauncherImpl.java",
  "functionName": "launch",
  "functionId": "launch___event-ContainerRemoteLaunchEvent",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
  "functionStartLine": 134,
  "functionEndLine": 196,
  "numCommitsSeen": 45,
  "timeTaken": 1722,
  "changeHistory": [
    "3ca3137179ef093e42cde06587c9ea785b10f32c",
    "243bcd367ff3130d74676280233041f88aca62a5",
    "f4d80e91ae314d316100baa7770b9d73ea853d9c",
    "77e134d13fb87cd098f2e9c23212affe0a7be1be",
    "f3f7a11336d225488576ecdf22f9a719a9745180",
    "8e1c2823fc014a5a045c86760c61111d0bb59d2f",
    "cb78a65a152a4f576a3255df3676c3b788c84eb5",
    "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
    "0a80f82a304fc8bb3d9cf5ec016e12e6415270fc",
    "2b5c36b6952e16232f352b47c62d9e28ee2b30c9",
    "849c68c7b5f80064de3692d766444c2f8864f47a"
  ],
  "changeHistoryShort": {
    "3ca3137179ef093e42cde06587c9ea785b10f32c": "Ybodychange",
    "243bcd367ff3130d74676280233041f88aca62a5": "Ybodychange",
    "f4d80e91ae314d316100baa7770b9d73ea853d9c": "Ybodychange",
    "77e134d13fb87cd098f2e9c23212affe0a7be1be": "Ybodychange",
    "f3f7a11336d225488576ecdf22f9a719a9745180": "Ybodychange",
    "8e1c2823fc014a5a045c86760c61111d0bb59d2f": "Ybodychange",
    "cb78a65a152a4f576a3255df3676c3b788c84eb5": "Ybodychange",
    "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c": "Ybodychange",
    "0a80f82a304fc8bb3d9cf5ec016e12e6415270fc": "Ybodychange",
    "2b5c36b6952e16232f352b47c62d9e28ee2b30c9": "Ybodychange",
    "849c68c7b5f80064de3692d766444c2f8864f47a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3ca3137179ef093e42cde06587c9ea785b10f32c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/07/13 8:41 PM",
      "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "20/06/13 5:08 PM",
      "commitNameOld": "1a06175440eec7994d6b63b0e5ac8b6532870fb3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 33.15,
      "commitsBetweenForRepo": 159,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,63 @@\n     public synchronized void launch(ContainerRemoteLaunchEvent event) {\n       LOG.info(\"Launching \" + taskAttemptID);\n       if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n         state \u003d ContainerState.DONE;\n         sendContainerLaunchFailedMsg(taskAttemptID, \n             \"Container was killed before it was launched\");\n         return;\n       }\n       \n       ContainerManagementProtocolProxyData proxy \u003d null;\n       try {\n \n         proxy \u003d getCMProxy(containerMgrAddress, containerID);\n \n         // Construct the actual Container\n         ContainerLaunchContext containerLaunchContext \u003d\n           event.getContainerLaunchContext();\n \n         // Now launch the actual container\n-        StartContainerRequest startRequest \u003d Records\n-          .newRecord(StartContainerRequest.class);\n-        startRequest.setContainerLaunchContext(containerLaunchContext);\n-        startRequest.setContainerToken(event.getContainerToken());\n-        StartContainerResponse response \u003d\n-            proxy.getContainerManagementProtocol().startContainer(startRequest);\n-\n+        StartContainerRequest startRequest \u003d\n+            StartContainerRequest.newInstance(containerLaunchContext,\n+              event.getContainerToken());\n+        List\u003cStartContainerRequest\u003e list \u003d new ArrayList\u003cStartContainerRequest\u003e();\n+        list.add(startRequest);\n+        StartContainersRequest requestList \u003d StartContainersRequest.newInstance(list);\n+        StartContainersResponse response \u003d\n+            proxy.getContainerManagementProtocol().startContainers(requestList);\n+        if (response.getFailedRequests() !\u003d null\n+            \u0026\u0026 response.getFailedRequests().containsKey(containerID)) {\n+          throw response.getFailedRequests().get(containerID).deSerialize();\n+        }\n         ByteBuffer portInfo \u003d\n             response.getAllServicesMetaData().get(\n                 ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n         int port \u003d -1;\n         if(portInfo !\u003d null) {\n           port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n         }\n         LOG.info(\"Shuffle port returned by ContainerManager for \"\n             + taskAttemptID + \" : \" + port);\n \n         if(port \u003c 0) {\n           this.state \u003d ContainerState.FAILED;\n           throw new IllegalStateException(\"Invalid shuffle port number \"\n               + port + \" returned for \" + taskAttemptID);\n         }\n \n         // after launching, send launched event to task attempt to move\n         // it from ASSIGNED to RUNNING state\n         context.getEventHandler().handle(\n             new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n         this.state \u003d ContainerState.RUNNING;\n       } catch (Throwable t) {\n         String message \u003d \"Container launch failed for \" + containerID + \" : \"\n             + StringUtils.stringifyException(t);\n         this.state \u003d ContainerState.FAILED;\n         sendContainerLaunchFailedMsg(taskAttemptID, message);\n       } finally {\n         if (proxy !\u003d null) {\n           cmProxy.mayBeCloseProxy(proxy);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized void launch(ContainerRemoteLaunchEvent event) {\n      LOG.info(\"Launching \" + taskAttemptID);\n      if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n        state \u003d ContainerState.DONE;\n        sendContainerLaunchFailedMsg(taskAttemptID, \n            \"Container was killed before it was launched\");\n        return;\n      }\n      \n      ContainerManagementProtocolProxyData proxy \u003d null;\n      try {\n\n        proxy \u003d getCMProxy(containerMgrAddress, containerID);\n\n        // Construct the actual Container\n        ContainerLaunchContext containerLaunchContext \u003d\n          event.getContainerLaunchContext();\n\n        // Now launch the actual container\n        StartContainerRequest startRequest \u003d\n            StartContainerRequest.newInstance(containerLaunchContext,\n              event.getContainerToken());\n        List\u003cStartContainerRequest\u003e list \u003d new ArrayList\u003cStartContainerRequest\u003e();\n        list.add(startRequest);\n        StartContainersRequest requestList \u003d StartContainersRequest.newInstance(list);\n        StartContainersResponse response \u003d\n            proxy.getContainerManagementProtocol().startContainers(requestList);\n        if (response.getFailedRequests() !\u003d null\n            \u0026\u0026 response.getFailedRequests().containsKey(containerID)) {\n          throw response.getFailedRequests().get(containerID).deSerialize();\n        }\n        ByteBuffer portInfo \u003d\n            response.getAllServicesMetaData().get(\n                ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n        int port \u003d -1;\n        if(portInfo !\u003d null) {\n          port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n        }\n        LOG.info(\"Shuffle port returned by ContainerManager for \"\n            + taskAttemptID + \" : \" + port);\n\n        if(port \u003c 0) {\n          this.state \u003d ContainerState.FAILED;\n          throw new IllegalStateException(\"Invalid shuffle port number \"\n              + port + \" returned for \" + taskAttemptID);\n        }\n\n        // after launching, send launched event to task attempt to move\n        // it from ASSIGNED to RUNNING state\n        context.getEventHandler().handle(\n            new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n        this.state \u003d ContainerState.RUNNING;\n      } catch (Throwable t) {\n        String message \u003d \"Container launch failed for \" + containerID + \" : \"\n            + StringUtils.stringifyException(t);\n        this.state \u003d ContainerState.FAILED;\n        sendContainerLaunchFailedMsg(taskAttemptID, message);\n      } finally {\n        if (proxy !\u003d null) {\n          cmProxy.mayBeCloseProxy(proxy);\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {}
    },
    "243bcd367ff3130d74676280233041f88aca62a5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/13 4:19 PM",
      "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/06/13 11:20 PM",
      "commitNameOld": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n     public synchronized void launch(ContainerRemoteLaunchEvent event) {\n       LOG.info(\"Launching \" + taskAttemptID);\n       if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n         state \u003d ContainerState.DONE;\n         sendContainerLaunchFailedMsg(taskAttemptID, \n             \"Container was killed before it was launched\");\n         return;\n       }\n       \n-      ContainerManagementProtocol proxy \u003d null;\n+      ContainerManagementProtocolProxyData proxy \u003d null;\n       try {\n \n-        proxy \u003d getCMProxy(containerID, containerMgrAddress,\n-            containerToken);\n+        proxy \u003d getCMProxy(containerMgrAddress, containerID);\n \n         // Construct the actual Container\n         ContainerLaunchContext containerLaunchContext \u003d\n           event.getContainerLaunchContext();\n \n         // Now launch the actual container\n         StartContainerRequest startRequest \u003d Records\n           .newRecord(StartContainerRequest.class);\n         startRequest.setContainerLaunchContext(containerLaunchContext);\n         startRequest.setContainerToken(event.getContainerToken());\n-        StartContainerResponse response \u003d proxy.startContainer(startRequest);\n+        StartContainerResponse response \u003d\n+            proxy.getContainerManagementProtocol().startContainer(startRequest);\n \n         ByteBuffer portInfo \u003d\n             response.getAllServicesMetaData().get(\n                 ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n         int port \u003d -1;\n         if(portInfo !\u003d null) {\n           port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n         }\n         LOG.info(\"Shuffle port returned by ContainerManager for \"\n             + taskAttemptID + \" : \" + port);\n \n         if(port \u003c 0) {\n           this.state \u003d ContainerState.FAILED;\n           throw new IllegalStateException(\"Invalid shuffle port number \"\n               + port + \" returned for \" + taskAttemptID);\n         }\n \n         // after launching, send launched event to task attempt to move\n         // it from ASSIGNED to RUNNING state\n         context.getEventHandler().handle(\n             new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n         this.state \u003d ContainerState.RUNNING;\n       } catch (Throwable t) {\n         String message \u003d \"Container launch failed for \" + containerID + \" : \"\n             + StringUtils.stringifyException(t);\n         this.state \u003d ContainerState.FAILED;\n         sendContainerLaunchFailedMsg(taskAttemptID, message);\n       } finally {\n         if (proxy !\u003d null) {\n-          ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n+          cmProxy.mayBeCloseProxy(proxy);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized void launch(ContainerRemoteLaunchEvent event) {\n      LOG.info(\"Launching \" + taskAttemptID);\n      if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n        state \u003d ContainerState.DONE;\n        sendContainerLaunchFailedMsg(taskAttemptID, \n            \"Container was killed before it was launched\");\n        return;\n      }\n      \n      ContainerManagementProtocolProxyData proxy \u003d null;\n      try {\n\n        proxy \u003d getCMProxy(containerMgrAddress, containerID);\n\n        // Construct the actual Container\n        ContainerLaunchContext containerLaunchContext \u003d\n          event.getContainerLaunchContext();\n\n        // Now launch the actual container\n        StartContainerRequest startRequest \u003d Records\n          .newRecord(StartContainerRequest.class);\n        startRequest.setContainerLaunchContext(containerLaunchContext);\n        startRequest.setContainerToken(event.getContainerToken());\n        StartContainerResponse response \u003d\n            proxy.getContainerManagementProtocol().startContainer(startRequest);\n\n        ByteBuffer portInfo \u003d\n            response.getAllServicesMetaData().get(\n                ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n        int port \u003d -1;\n        if(portInfo !\u003d null) {\n          port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n        }\n        LOG.info(\"Shuffle port returned by ContainerManager for \"\n            + taskAttemptID + \" : \" + port);\n\n        if(port \u003c 0) {\n          this.state \u003d ContainerState.FAILED;\n          throw new IllegalStateException(\"Invalid shuffle port number \"\n              + port + \" returned for \" + taskAttemptID);\n        }\n\n        // after launching, send launched event to task attempt to move\n        // it from ASSIGNED to RUNNING state\n        context.getEventHandler().handle(\n            new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n        this.state \u003d ContainerState.RUNNING;\n      } catch (Throwable t) {\n        String message \u003d \"Container launch failed for \" + containerID + \" : \"\n            + StringUtils.stringifyException(t);\n        this.state \u003d ContainerState.FAILED;\n        sendContainerLaunchFailedMsg(taskAttemptID, message);\n      } finally {\n        if (proxy !\u003d null) {\n          cmProxy.mayBeCloseProxy(proxy);\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {}
    },
    "f4d80e91ae314d316100baa7770b9d73ea853d9c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-841. Move Auxiliary service to yarn-api, annotate and document it. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494031 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 11:20 PM",
      "commitName": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/06/13 10:47 PM",
      "commitNameOld": "acc0d3eb521e3c1d1b2f4be9b46c685ee921504b",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n     public synchronized void launch(ContainerRemoteLaunchEvent event) {\n       LOG.info(\"Launching \" + taskAttemptID);\n       if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n         state \u003d ContainerState.DONE;\n         sendContainerLaunchFailedMsg(taskAttemptID, \n             \"Container was killed before it was launched\");\n         return;\n       }\n       \n       ContainerManagementProtocol proxy \u003d null;\n       try {\n \n         proxy \u003d getCMProxy(containerID, containerMgrAddress,\n             containerToken);\n \n         // Construct the actual Container\n         ContainerLaunchContext containerLaunchContext \u003d\n           event.getContainerLaunchContext();\n \n         // Now launch the actual container\n         StartContainerRequest startRequest \u003d Records\n           .newRecord(StartContainerRequest.class);\n         startRequest.setContainerLaunchContext(containerLaunchContext);\n         startRequest.setContainerToken(event.getContainerToken());\n         StartContainerResponse response \u003d proxy.startContainer(startRequest);\n \n         ByteBuffer portInfo \u003d\n-            response.getAllServiceResponse().get(\n+            response.getAllServicesMetaData().get(\n                 ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n         int port \u003d -1;\n         if(portInfo !\u003d null) {\n           port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n         }\n         LOG.info(\"Shuffle port returned by ContainerManager for \"\n             + taskAttemptID + \" : \" + port);\n \n         if(port \u003c 0) {\n           this.state \u003d ContainerState.FAILED;\n           throw new IllegalStateException(\"Invalid shuffle port number \"\n               + port + \" returned for \" + taskAttemptID);\n         }\n \n         // after launching, send launched event to task attempt to move\n         // it from ASSIGNED to RUNNING state\n         context.getEventHandler().handle(\n             new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n         this.state \u003d ContainerState.RUNNING;\n       } catch (Throwable t) {\n         String message \u003d \"Container launch failed for \" + containerID + \" : \"\n             + StringUtils.stringifyException(t);\n         this.state \u003d ContainerState.FAILED;\n         sendContainerLaunchFailedMsg(taskAttemptID, message);\n       } finally {\n         if (proxy !\u003d null) {\n           ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized void launch(ContainerRemoteLaunchEvent event) {\n      LOG.info(\"Launching \" + taskAttemptID);\n      if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n        state \u003d ContainerState.DONE;\n        sendContainerLaunchFailedMsg(taskAttemptID, \n            \"Container was killed before it was launched\");\n        return;\n      }\n      \n      ContainerManagementProtocol proxy \u003d null;\n      try {\n\n        proxy \u003d getCMProxy(containerID, containerMgrAddress,\n            containerToken);\n\n        // Construct the actual Container\n        ContainerLaunchContext containerLaunchContext \u003d\n          event.getContainerLaunchContext();\n\n        // Now launch the actual container\n        StartContainerRequest startRequest \u003d Records\n          .newRecord(StartContainerRequest.class);\n        startRequest.setContainerLaunchContext(containerLaunchContext);\n        startRequest.setContainerToken(event.getContainerToken());\n        StartContainerResponse response \u003d proxy.startContainer(startRequest);\n\n        ByteBuffer portInfo \u003d\n            response.getAllServicesMetaData().get(\n                ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n        int port \u003d -1;\n        if(portInfo !\u003d null) {\n          port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n        }\n        LOG.info(\"Shuffle port returned by ContainerManager for \"\n            + taskAttemptID + \" : \" + port);\n\n        if(port \u003c 0) {\n          this.state \u003d ContainerState.FAILED;\n          throw new IllegalStateException(\"Invalid shuffle port number \"\n              + port + \" returned for \" + taskAttemptID);\n        }\n\n        // after launching, send launched event to task attempt to move\n        // it from ASSIGNED to RUNNING state\n        context.getEventHandler().handle(\n            new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n        this.state \u003d ContainerState.RUNNING;\n      } catch (Throwable t) {\n        String message \u003d \"Container launch failed for \" + containerID + \" : \"\n            + StringUtils.stringifyException(t);\n        this.state \u003d ContainerState.FAILED;\n        sendContainerLaunchFailedMsg(taskAttemptID, message);\n      } finally {\n        if (proxy !\u003d null) {\n          ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {}
    },
    "77e134d13fb87cd098f2e9c23212affe0a7be1be": {
      "type": "Ybodychange",
      "commitMessage": "YARN-387. Renamed YARN protocols for consistency. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493623 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/06/13 7:27 PM",
      "commitName": "77e134d13fb87cd098f2e9c23212affe0a7be1be",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "13/06/13 4:25 PM",
      "commitNameOld": "c0cd68d8fbf5c8cafa6d563c7d0401e7a87a2d9e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.13,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n     public synchronized void launch(ContainerRemoteLaunchEvent event) {\n       LOG.info(\"Launching \" + taskAttemptID);\n       if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n         state \u003d ContainerState.DONE;\n         sendContainerLaunchFailedMsg(taskAttemptID, \n             \"Container was killed before it was launched\");\n         return;\n       }\n       \n-      ContainerManager proxy \u003d null;\n+      ContainerManagementProtocol proxy \u003d null;\n       try {\n \n         proxy \u003d getCMProxy(containerID, containerMgrAddress,\n             containerToken);\n \n         // Construct the actual Container\n         ContainerLaunchContext containerLaunchContext \u003d\n           event.getContainerLaunchContext();\n \n         // Now launch the actual container\n         StartContainerRequest startRequest \u003d Records\n           .newRecord(StartContainerRequest.class);\n         startRequest.setContainerLaunchContext(containerLaunchContext);\n         startRequest.setContainerToken(event.getContainerToken());\n         StartContainerResponse response \u003d proxy.startContainer(startRequest);\n \n         ByteBuffer portInfo \u003d\n             response.getAllServiceResponse().get(\n                 ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n         int port \u003d -1;\n         if(portInfo !\u003d null) {\n           port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n         }\n         LOG.info(\"Shuffle port returned by ContainerManager for \"\n             + taskAttemptID + \" : \" + port);\n \n         if(port \u003c 0) {\n           this.state \u003d ContainerState.FAILED;\n           throw new IllegalStateException(\"Invalid shuffle port number \"\n               + port + \" returned for \" + taskAttemptID);\n         }\n \n         // after launching, send launched event to task attempt to move\n         // it from ASSIGNED to RUNNING state\n         context.getEventHandler().handle(\n             new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n         this.state \u003d ContainerState.RUNNING;\n       } catch (Throwable t) {\n         String message \u003d \"Container launch failed for \" + containerID + \" : \"\n             + StringUtils.stringifyException(t);\n         this.state \u003d ContainerState.FAILED;\n         sendContainerLaunchFailedMsg(taskAttemptID, message);\n       } finally {\n         if (proxy !\u003d null) {\n           ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized void launch(ContainerRemoteLaunchEvent event) {\n      LOG.info(\"Launching \" + taskAttemptID);\n      if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n        state \u003d ContainerState.DONE;\n        sendContainerLaunchFailedMsg(taskAttemptID, \n            \"Container was killed before it was launched\");\n        return;\n      }\n      \n      ContainerManagementProtocol proxy \u003d null;\n      try {\n\n        proxy \u003d getCMProxy(containerID, containerMgrAddress,\n            containerToken);\n\n        // Construct the actual Container\n        ContainerLaunchContext containerLaunchContext \u003d\n          event.getContainerLaunchContext();\n\n        // Now launch the actual container\n        StartContainerRequest startRequest \u003d Records\n          .newRecord(StartContainerRequest.class);\n        startRequest.setContainerLaunchContext(containerLaunchContext);\n        startRequest.setContainerToken(event.getContainerToken());\n        StartContainerResponse response \u003d proxy.startContainer(startRequest);\n\n        ByteBuffer portInfo \u003d\n            response.getAllServiceResponse().get(\n                ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n        int port \u003d -1;\n        if(portInfo !\u003d null) {\n          port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n        }\n        LOG.info(\"Shuffle port returned by ContainerManager for \"\n            + taskAttemptID + \" : \" + port);\n\n        if(port \u003c 0) {\n          this.state \u003d ContainerState.FAILED;\n          throw new IllegalStateException(\"Invalid shuffle port number \"\n              + port + \" returned for \" + taskAttemptID);\n        }\n\n        // after launching, send launched event to task attempt to move\n        // it from ASSIGNED to RUNNING state\n        context.getEventHandler().handle(\n            new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n        this.state \u003d ContainerState.RUNNING;\n      } catch (Throwable t) {\n        String message \u003d \"Container launch failed for \" + containerID + \" : \"\n            + StringUtils.stringifyException(t);\n        this.state \u003d ContainerState.FAILED;\n        sendContainerLaunchFailedMsg(taskAttemptID, message);\n      } finally {\n        if (proxy !\u003d null) {\n          ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {}
    },
    "f3f7a11336d225488576ecdf22f9a719a9745180": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5286. Change MapReduce to use ContainerTokenIdentifier instead of the entire Container in the startContainer call - YARN-684. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488087 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/13 9:17 PM",
      "commitName": "f3f7a11336d225488576ecdf22f9a719a9745180",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "16/05/13 11:36 PM",
      "commitNameOld": "ca8024673178fa1c80224b390dfba932921693d9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 13.9,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n     public synchronized void launch(ContainerRemoteLaunchEvent event) {\n       LOG.info(\"Launching \" + taskAttemptID);\n       if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n         state \u003d ContainerState.DONE;\n         sendContainerLaunchFailedMsg(taskAttemptID, \n             \"Container was killed before it was launched\");\n         return;\n       }\n       \n       ContainerManager proxy \u003d null;\n       try {\n \n         proxy \u003d getCMProxy(containerID, containerMgrAddress,\n             containerToken);\n \n         // Construct the actual Container\n         ContainerLaunchContext containerLaunchContext \u003d\n           event.getContainerLaunchContext();\n \n         // Now launch the actual container\n         StartContainerRequest startRequest \u003d Records\n           .newRecord(StartContainerRequest.class);\n         startRequest.setContainerLaunchContext(containerLaunchContext);\n-        startRequest.setContainer(event.getAllocatedContainer());\n+        startRequest.setContainerToken(event.getContainerToken());\n         StartContainerResponse response \u003d proxy.startContainer(startRequest);\n \n         ByteBuffer portInfo \u003d\n             response.getAllServiceResponse().get(\n                 ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n         int port \u003d -1;\n         if(portInfo !\u003d null) {\n           port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n         }\n         LOG.info(\"Shuffle port returned by ContainerManager for \"\n             + taskAttemptID + \" : \" + port);\n \n         if(port \u003c 0) {\n           this.state \u003d ContainerState.FAILED;\n           throw new IllegalStateException(\"Invalid shuffle port number \"\n               + port + \" returned for \" + taskAttemptID);\n         }\n \n         // after launching, send launched event to task attempt to move\n         // it from ASSIGNED to RUNNING state\n         context.getEventHandler().handle(\n             new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n         this.state \u003d ContainerState.RUNNING;\n       } catch (Throwable t) {\n         String message \u003d \"Container launch failed for \" + containerID + \" : \"\n             + StringUtils.stringifyException(t);\n         this.state \u003d ContainerState.FAILED;\n         sendContainerLaunchFailedMsg(taskAttemptID, message);\n       } finally {\n         if (proxy !\u003d null) {\n           ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized void launch(ContainerRemoteLaunchEvent event) {\n      LOG.info(\"Launching \" + taskAttemptID);\n      if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n        state \u003d ContainerState.DONE;\n        sendContainerLaunchFailedMsg(taskAttemptID, \n            \"Container was killed before it was launched\");\n        return;\n      }\n      \n      ContainerManager proxy \u003d null;\n      try {\n\n        proxy \u003d getCMProxy(containerID, containerMgrAddress,\n            containerToken);\n\n        // Construct the actual Container\n        ContainerLaunchContext containerLaunchContext \u003d\n          event.getContainerLaunchContext();\n\n        // Now launch the actual container\n        StartContainerRequest startRequest \u003d Records\n          .newRecord(StartContainerRequest.class);\n        startRequest.setContainerLaunchContext(containerLaunchContext);\n        startRequest.setContainerToken(event.getContainerToken());\n        StartContainerResponse response \u003d proxy.startContainer(startRequest);\n\n        ByteBuffer portInfo \u003d\n            response.getAllServiceResponse().get(\n                ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n        int port \u003d -1;\n        if(portInfo !\u003d null) {\n          port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n        }\n        LOG.info(\"Shuffle port returned by ContainerManager for \"\n            + taskAttemptID + \" : \" + port);\n\n        if(port \u003c 0) {\n          this.state \u003d ContainerState.FAILED;\n          throw new IllegalStateException(\"Invalid shuffle port number \"\n              + port + \" returned for \" + taskAttemptID);\n        }\n\n        // after launching, send launched event to task attempt to move\n        // it from ASSIGNED to RUNNING state\n        context.getEventHandler().handle(\n            new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n        this.state \u003d ContainerState.RUNNING;\n      } catch (Throwable t) {\n        String message \u003d \"Container launch failed for \" + containerID + \" : \"\n            + StringUtils.stringifyException(t);\n        this.state \u003d ContainerState.FAILED;\n        sendContainerLaunchFailedMsg(taskAttemptID, message);\n      } finally {\n        if (proxy !\u003d null) {\n          ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {}
    },
    "8e1c2823fc014a5a045c86760c61111d0bb59d2f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-441. Removed unused utility methods for collections from two API records. Contributed by Xuan Gong.\nMAPREDUCE-5163. Update MR App to not use API utility methods for collections after YARN-441. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469657 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/13 6:33 PM",
      "commitName": "8e1c2823fc014a5a045c86760c61111d0bb59d2f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/04/13 1:13 PM",
      "commitNameOld": "cb78a65a152a4f576a3255df3676c3b788c84eb5",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.22,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n     public synchronized void launch(ContainerRemoteLaunchEvent event) {\n       LOG.info(\"Launching \" + taskAttemptID);\n       if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n         state \u003d ContainerState.DONE;\n         sendContainerLaunchFailedMsg(taskAttemptID, \n             \"Container was killed before it was launched\");\n         return;\n       }\n       \n       ContainerManager proxy \u003d null;\n       try {\n \n         proxy \u003d getCMProxy(containerID, containerMgrAddress,\n             containerToken);\n \n         // Construct the actual Container\n         ContainerLaunchContext containerLaunchContext \u003d\n           event.getContainerLaunchContext();\n \n         // Now launch the actual container\n         StartContainerRequest startRequest \u003d Records\n           .newRecord(StartContainerRequest.class);\n         startRequest.setContainerLaunchContext(containerLaunchContext);\n         startRequest.setContainer(event.getAllocatedContainer());\n         StartContainerResponse response \u003d proxy.startContainer(startRequest);\n \n-        ByteBuffer portInfo \u003d response\n-          .getServiceResponse(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n+        ByteBuffer portInfo \u003d\n+            response.getAllServiceResponse().get(\n+                ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n         int port \u003d -1;\n         if(portInfo !\u003d null) {\n           port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n         }\n         LOG.info(\"Shuffle port returned by ContainerManager for \"\n             + taskAttemptID + \" : \" + port);\n \n         if(port \u003c 0) {\n           this.state \u003d ContainerState.FAILED;\n           throw new IllegalStateException(\"Invalid shuffle port number \"\n               + port + \" returned for \" + taskAttemptID);\n         }\n \n         // after launching, send launched event to task attempt to move\n         // it from ASSIGNED to RUNNING state\n         context.getEventHandler().handle(\n             new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n         this.state \u003d ContainerState.RUNNING;\n       } catch (Throwable t) {\n         String message \u003d \"Container launch failed for \" + containerID + \" : \"\n             + StringUtils.stringifyException(t);\n         this.state \u003d ContainerState.FAILED;\n         sendContainerLaunchFailedMsg(taskAttemptID, message);\n       } finally {\n         if (proxy !\u003d null) {\n           ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized void launch(ContainerRemoteLaunchEvent event) {\n      LOG.info(\"Launching \" + taskAttemptID);\n      if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n        state \u003d ContainerState.DONE;\n        sendContainerLaunchFailedMsg(taskAttemptID, \n            \"Container was killed before it was launched\");\n        return;\n      }\n      \n      ContainerManager proxy \u003d null;\n      try {\n\n        proxy \u003d getCMProxy(containerID, containerMgrAddress,\n            containerToken);\n\n        // Construct the actual Container\n        ContainerLaunchContext containerLaunchContext \u003d\n          event.getContainerLaunchContext();\n\n        // Now launch the actual container\n        StartContainerRequest startRequest \u003d Records\n          .newRecord(StartContainerRequest.class);\n        startRequest.setContainerLaunchContext(containerLaunchContext);\n        startRequest.setContainer(event.getAllocatedContainer());\n        StartContainerResponse response \u003d proxy.startContainer(startRequest);\n\n        ByteBuffer portInfo \u003d\n            response.getAllServiceResponse().get(\n                ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n        int port \u003d -1;\n        if(portInfo !\u003d null) {\n          port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n        }\n        LOG.info(\"Shuffle port returned by ContainerManager for \"\n            + taskAttemptID + \" : \" + port);\n\n        if(port \u003c 0) {\n          this.state \u003d ContainerState.FAILED;\n          throw new IllegalStateException(\"Invalid shuffle port number \"\n              + port + \" returned for \" + taskAttemptID);\n        }\n\n        // after launching, send launched event to task attempt to move\n        // it from ASSIGNED to RUNNING state\n        context.getEventHandler().handle(\n            new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n        this.state \u003d ContainerState.RUNNING;\n      } catch (Throwable t) {\n        String message \u003d \"Container launch failed for \" + containerID + \" : \"\n            + StringUtils.stringifyException(t);\n        this.state \u003d ContainerState.FAILED;\n        sendContainerLaunchFailedMsg(taskAttemptID, message);\n      } finally {\n        if (proxy !\u003d null) {\n          ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {}
    },
    "cb78a65a152a4f576a3255df3676c3b788c84eb5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5152. Make MR App to simply pass through the container from RM instead of extracting and populating information itself to start any container. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469544 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/13 1:13 PM",
      "commitName": "cb78a65a152a4f576a3255df3676c3b788c84eb5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "11/04/13 12:28 PM",
      "commitNameOld": "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.03,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,57 @@\n     public synchronized void launch(ContainerRemoteLaunchEvent event) {\n       LOG.info(\"Launching \" + taskAttemptID);\n       if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n         state \u003d ContainerState.DONE;\n         sendContainerLaunchFailedMsg(taskAttemptID, \n             \"Container was killed before it was launched\");\n         return;\n       }\n       \n       ContainerManager proxy \u003d null;\n       try {\n \n         proxy \u003d getCMProxy(containerID, containerMgrAddress,\n             containerToken);\n \n         // Construct the actual Container\n         ContainerLaunchContext containerLaunchContext \u003d\n-          event.getContainer();\n+          event.getContainerLaunchContext();\n \n-        org.apache.hadoop.yarn.api.records.Container container \u003d\n-            BuilderUtils.newContainer(containerID, null, null,\n-                event.getResource(), null, containerToken);\n         // Now launch the actual container\n         StartContainerRequest startRequest \u003d Records\n           .newRecord(StartContainerRequest.class);\n         startRequest.setContainerLaunchContext(containerLaunchContext);\n-        startRequest.setContainer(container);\n+        startRequest.setContainer(event.getAllocatedContainer());\n         StartContainerResponse response \u003d proxy.startContainer(startRequest);\n \n         ByteBuffer portInfo \u003d response\n           .getServiceResponse(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n         int port \u003d -1;\n         if(portInfo !\u003d null) {\n           port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n         }\n         LOG.info(\"Shuffle port returned by ContainerManager for \"\n             + taskAttemptID + \" : \" + port);\n \n         if(port \u003c 0) {\n           this.state \u003d ContainerState.FAILED;\n           throw new IllegalStateException(\"Invalid shuffle port number \"\n               + port + \" returned for \" + taskAttemptID);\n         }\n \n         // after launching, send launched event to task attempt to move\n         // it from ASSIGNED to RUNNING state\n         context.getEventHandler().handle(\n             new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n         this.state \u003d ContainerState.RUNNING;\n       } catch (Throwable t) {\n         String message \u003d \"Container launch failed for \" + containerID + \" : \"\n             + StringUtils.stringifyException(t);\n         this.state \u003d ContainerState.FAILED;\n         sendContainerLaunchFailedMsg(taskAttemptID, message);\n       } finally {\n         if (proxy !\u003d null) {\n           ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized void launch(ContainerRemoteLaunchEvent event) {\n      LOG.info(\"Launching \" + taskAttemptID);\n      if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n        state \u003d ContainerState.DONE;\n        sendContainerLaunchFailedMsg(taskAttemptID, \n            \"Container was killed before it was launched\");\n        return;\n      }\n      \n      ContainerManager proxy \u003d null;\n      try {\n\n        proxy \u003d getCMProxy(containerID, containerMgrAddress,\n            containerToken);\n\n        // Construct the actual Container\n        ContainerLaunchContext containerLaunchContext \u003d\n          event.getContainerLaunchContext();\n\n        // Now launch the actual container\n        StartContainerRequest startRequest \u003d Records\n          .newRecord(StartContainerRequest.class);\n        startRequest.setContainerLaunchContext(containerLaunchContext);\n        startRequest.setContainer(event.getAllocatedContainer());\n        StartContainerResponse response \u003d proxy.startContainer(startRequest);\n\n        ByteBuffer portInfo \u003d response\n          .getServiceResponse(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n        int port \u003d -1;\n        if(portInfo !\u003d null) {\n          port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n        }\n        LOG.info(\"Shuffle port returned by ContainerManager for \"\n            + taskAttemptID + \" : \" + port);\n\n        if(port \u003c 0) {\n          this.state \u003d ContainerState.FAILED;\n          throw new IllegalStateException(\"Invalid shuffle port number \"\n              + port + \" returned for \" + taskAttemptID);\n        }\n\n        // after launching, send launched event to task attempt to move\n        // it from ASSIGNED to RUNNING state\n        context.getEventHandler().handle(\n            new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n        this.state \u003d ContainerState.RUNNING;\n      } catch (Throwable t) {\n        String message \u003d \"Container launch failed for \" + containerID + \" : \"\n            + StringUtils.stringifyException(t);\n        this.state \u003d ContainerState.FAILED;\n        sendContainerLaunchFailedMsg(taskAttemptID, message);\n      } finally {\n        if (proxy !\u003d null) {\n          ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {}
    },
    "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-486. Changed NM\u0027s startContainer API to accept Container record given by RM as a direct parameter instead of as part of the ContainerLaunchContext record. Contributed by Xuan Gong.\nMAPREDUCE-5139. Update MR AM to use the modified startContainer API after YARN-486. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1467063 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/04/13 12:28 PM",
      "commitName": "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/03/13 2:55 PM",
      "commitNameOld": "cd2c5fab8b3542483337e6384e4de67b4a2e3507",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 20.9,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,60 @@\n     public synchronized void launch(ContainerRemoteLaunchEvent event) {\n       LOG.info(\"Launching \" + taskAttemptID);\n       if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n         state \u003d ContainerState.DONE;\n         sendContainerLaunchFailedMsg(taskAttemptID, \n             \"Container was killed before it was launched\");\n         return;\n       }\n       \n       ContainerManager proxy \u003d null;\n       try {\n \n         proxy \u003d getCMProxy(containerID, containerMgrAddress,\n             containerToken);\n \n         // Construct the actual Container\n         ContainerLaunchContext containerLaunchContext \u003d\n           event.getContainer();\n \n+        org.apache.hadoop.yarn.api.records.Container container \u003d\n+            BuilderUtils.newContainer(containerID, null, null,\n+                event.getResource(), null, containerToken);\n         // Now launch the actual container\n         StartContainerRequest startRequest \u003d Records\n           .newRecord(StartContainerRequest.class);\n         startRequest.setContainerLaunchContext(containerLaunchContext);\n+        startRequest.setContainer(container);\n         StartContainerResponse response \u003d proxy.startContainer(startRequest);\n \n         ByteBuffer portInfo \u003d response\n           .getServiceResponse(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n         int port \u003d -1;\n         if(portInfo !\u003d null) {\n           port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n         }\n         LOG.info(\"Shuffle port returned by ContainerManager for \"\n             + taskAttemptID + \" : \" + port);\n \n         if(port \u003c 0) {\n           this.state \u003d ContainerState.FAILED;\n           throw new IllegalStateException(\"Invalid shuffle port number \"\n               + port + \" returned for \" + taskAttemptID);\n         }\n \n         // after launching, send launched event to task attempt to move\n         // it from ASSIGNED to RUNNING state\n         context.getEventHandler().handle(\n             new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n         this.state \u003d ContainerState.RUNNING;\n       } catch (Throwable t) {\n         String message \u003d \"Container launch failed for \" + containerID + \" : \"\n             + StringUtils.stringifyException(t);\n         this.state \u003d ContainerState.FAILED;\n         sendContainerLaunchFailedMsg(taskAttemptID, message);\n       } finally {\n         if (proxy !\u003d null) {\n           ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized void launch(ContainerRemoteLaunchEvent event) {\n      LOG.info(\"Launching \" + taskAttemptID);\n      if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n        state \u003d ContainerState.DONE;\n        sendContainerLaunchFailedMsg(taskAttemptID, \n            \"Container was killed before it was launched\");\n        return;\n      }\n      \n      ContainerManager proxy \u003d null;\n      try {\n\n        proxy \u003d getCMProxy(containerID, containerMgrAddress,\n            containerToken);\n\n        // Construct the actual Container\n        ContainerLaunchContext containerLaunchContext \u003d\n          event.getContainer();\n\n        org.apache.hadoop.yarn.api.records.Container container \u003d\n            BuilderUtils.newContainer(containerID, null, null,\n                event.getResource(), null, containerToken);\n        // Now launch the actual container\n        StartContainerRequest startRequest \u003d Records\n          .newRecord(StartContainerRequest.class);\n        startRequest.setContainerLaunchContext(containerLaunchContext);\n        startRequest.setContainer(container);\n        StartContainerResponse response \u003d proxy.startContainer(startRequest);\n\n        ByteBuffer portInfo \u003d response\n          .getServiceResponse(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n        int port \u003d -1;\n        if(portInfo !\u003d null) {\n          port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n        }\n        LOG.info(\"Shuffle port returned by ContainerManager for \"\n            + taskAttemptID + \" : \" + port);\n\n        if(port \u003c 0) {\n          this.state \u003d ContainerState.FAILED;\n          throw new IllegalStateException(\"Invalid shuffle port number \"\n              + port + \" returned for \" + taskAttemptID);\n        }\n\n        // after launching, send launched event to task attempt to move\n        // it from ASSIGNED to RUNNING state\n        context.getEventHandler().handle(\n            new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n        this.state \u003d ContainerState.RUNNING;\n      } catch (Throwable t) {\n        String message \u003d \"Container launch failed for \" + containerID + \" : \"\n            + StringUtils.stringifyException(t);\n        this.state \u003d ContainerState.FAILED;\n        sendContainerLaunchFailedMsg(taskAttemptID, message);\n      } finally {\n        if (proxy !\u003d null) {\n          ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {}
    },
    "0a80f82a304fc8bb3d9cf5ec016e12e6415270fc": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4152. map task left hanging after AM dies trying to connect to RM (Tom Graves via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1344283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/12 7:48 AM",
      "commitName": "0a80f82a304fc8bb3d9cf5ec016e12e6415270fc",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "08/05/12 8:07 AM",
      "commitNameOld": "aa60da6c2ec049cc70897afee6c368cb70493773",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 21.99,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,56 @@\n     public synchronized void launch(ContainerRemoteLaunchEvent event) {\n-      TaskAttemptId taskAttemptID \u003d event.getTaskAttemptID();\n       LOG.info(\"Launching \" + taskAttemptID);\n       if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n         state \u003d ContainerState.DONE;\n         sendContainerLaunchFailedMsg(taskAttemptID, \n             \"Container was killed before it was launched\");\n         return;\n       }\n       \n-\n-      final String containerManagerBindAddr \u003d event.getContainerMgrAddress();\n-      ContainerId containerID \u003d event.getContainerID();\n-      ContainerToken containerToken \u003d event.getContainerToken();\n-\n       ContainerManager proxy \u003d null;\n       try {\n \n-        proxy \u003d getCMProxy(containerID, containerManagerBindAddr,\n+        proxy \u003d getCMProxy(containerID, containerMgrAddress,\n             containerToken);\n \n         // Construct the actual Container\n         ContainerLaunchContext containerLaunchContext \u003d\n           event.getContainer();\n \n         // Now launch the actual container\n         StartContainerRequest startRequest \u003d Records\n           .newRecord(StartContainerRequest.class);\n         startRequest.setContainerLaunchContext(containerLaunchContext);\n         StartContainerResponse response \u003d proxy.startContainer(startRequest);\n \n         ByteBuffer portInfo \u003d response\n           .getServiceResponse(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n         int port \u003d -1;\n         if(portInfo !\u003d null) {\n           port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n         }\n         LOG.info(\"Shuffle port returned by ContainerManager for \"\n             + taskAttemptID + \" : \" + port);\n \n         if(port \u003c 0) {\n           this.state \u003d ContainerState.FAILED;\n           throw new IllegalStateException(\"Invalid shuffle port number \"\n               + port + \" returned for \" + taskAttemptID);\n         }\n \n         // after launching, send launched event to task attempt to move\n         // it from ASSIGNED to RUNNING state\n         context.getEventHandler().handle(\n             new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n         this.state \u003d ContainerState.RUNNING;\n       } catch (Throwable t) {\n         String message \u003d \"Container launch failed for \" + containerID + \" : \"\n             + StringUtils.stringifyException(t);\n         this.state \u003d ContainerState.FAILED;\n         sendContainerLaunchFailedMsg(taskAttemptID, message);\n       } finally {\n         if (proxy !\u003d null) {\n           ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized void launch(ContainerRemoteLaunchEvent event) {\n      LOG.info(\"Launching \" + taskAttemptID);\n      if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n        state \u003d ContainerState.DONE;\n        sendContainerLaunchFailedMsg(taskAttemptID, \n            \"Container was killed before it was launched\");\n        return;\n      }\n      \n      ContainerManager proxy \u003d null;\n      try {\n\n        proxy \u003d getCMProxy(containerID, containerMgrAddress,\n            containerToken);\n\n        // Construct the actual Container\n        ContainerLaunchContext containerLaunchContext \u003d\n          event.getContainer();\n\n        // Now launch the actual container\n        StartContainerRequest startRequest \u003d Records\n          .newRecord(StartContainerRequest.class);\n        startRequest.setContainerLaunchContext(containerLaunchContext);\n        StartContainerResponse response \u003d proxy.startContainer(startRequest);\n\n        ByteBuffer portInfo \u003d response\n          .getServiceResponse(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n        int port \u003d -1;\n        if(portInfo !\u003d null) {\n          port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n        }\n        LOG.info(\"Shuffle port returned by ContainerManager for \"\n            + taskAttemptID + \" : \" + port);\n\n        if(port \u003c 0) {\n          this.state \u003d ContainerState.FAILED;\n          throw new IllegalStateException(\"Invalid shuffle port number \"\n              + port + \" returned for \" + taskAttemptID);\n        }\n\n        // after launching, send launched event to task attempt to move\n        // it from ASSIGNED to RUNNING state\n        context.getEventHandler().handle(\n            new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n        this.state \u003d ContainerState.RUNNING;\n      } catch (Throwable t) {\n        String message \u003d \"Container launch failed for \" + containerID + \" : \"\n            + StringUtils.stringifyException(t);\n        this.state \u003d ContainerState.FAILED;\n        sendContainerLaunchFailedMsg(taskAttemptID, message);\n      } finally {\n        if (proxy !\u003d null) {\n          ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {}
    },
    "2b5c36b6952e16232f352b47c62d9e28ee2b30c9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4062. AM Launcher thread can hang forever (tgraves via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1309037 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/04/12 9:59 AM",
      "commitName": "2b5c36b6952e16232f352b47c62d9e28ee2b30c9",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "20/02/12 9:08 PM",
      "commitNameOld": "5ee495e6f34faff231ad87ec890188eb63617393",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 42.49,
      "commitsBetweenForRepo": 291,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,93 +1,62 @@\n     public synchronized void launch(ContainerRemoteLaunchEvent event) {\n       TaskAttemptId taskAttemptID \u003d event.getTaskAttemptID();\n       LOG.info(\"Launching \" + taskAttemptID);\n       if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n         state \u003d ContainerState.DONE;\n         sendContainerLaunchFailedMsg(taskAttemptID, \n             \"Container was killed before it was launched\");\n         return;\n       }\n-      CommandTimerTask timerTask \u003d new CommandTimerTask(Thread\n-          .currentThread(), event);\n       \n+\n       final String containerManagerBindAddr \u003d event.getContainerMgrAddress();\n       ContainerId containerID \u003d event.getContainerID();\n       ContainerToken containerToken \u003d event.getContainerToken();\n \n       ContainerManager proxy \u003d null;\n       try {\n-        commandTimer.schedule(timerTask, nmTimeOut);\n \n         proxy \u003d getCMProxy(containerID, containerManagerBindAddr,\n             containerToken);\n \n-        // Interrupted during getProxy, but that didn\u0027t throw exception\n-        if (Thread.interrupted()) {\n-          // The timer canceled the command in the mean while.\n-          String message \u003d \"Container launch failed for \" + containerID\n-              + \" : Start-container for \" + event.getContainerID()\n-              + \" got interrupted. Returning.\";\n-          this.state \u003d ContainerState.FAILED;\n-          sendContainerLaunchFailedMsg(taskAttemptID, message);\n-          return;\n-        }\n         // Construct the actual Container\n         ContainerLaunchContext containerLaunchContext \u003d\n           event.getContainer();\n \n         // Now launch the actual container\n         StartContainerRequest startRequest \u003d Records\n           .newRecord(StartContainerRequest.class);\n         startRequest.setContainerLaunchContext(containerLaunchContext);\n         StartContainerResponse response \u003d proxy.startContainer(startRequest);\n \n-        // container started properly. Stop the timer\n-        timerTask.cancel();\n-        if (Thread.interrupted()) {\n-          // The timer canceled the command in the mean while, but\n-          // startContainer didn\u0027t throw exception\n-          String message \u003d \"Container launch failed for \" + containerID\n-              + \" : Start-container for \" + event.getContainerID()\n-              + \" got interrupted. Returning.\";\n-          this.state \u003d ContainerState.FAILED;\n-          sendContainerLaunchFailedMsg(taskAttemptID, message);\n-          return;\n-        }\n-\n         ByteBuffer portInfo \u003d response\n           .getServiceResponse(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n         int port \u003d -1;\n         if(portInfo !\u003d null) {\n           port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n         }\n         LOG.info(\"Shuffle port returned by ContainerManager for \"\n             + taskAttemptID + \" : \" + port);\n \n         if(port \u003c 0) {\n           this.state \u003d ContainerState.FAILED;\n           throw new IllegalStateException(\"Invalid shuffle port number \"\n               + port + \" returned for \" + taskAttemptID);\n         }\n \n         // after launching, send launched event to task attempt to move\n         // it from ASSIGNED to RUNNING state\n         context.getEventHandler().handle(\n             new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n         this.state \u003d ContainerState.RUNNING;\n       } catch (Throwable t) {\n-        if (Thread.interrupted()) {\n-          // The timer canceled the command in the mean while.\n-          LOG.info(\"Start-container for \" + event.getContainerID()\n-              + \" got interrupted.\");\n-        }\n         String message \u003d \"Container launch failed for \" + containerID + \" : \"\n             + StringUtils.stringifyException(t);\n         this.state \u003d ContainerState.FAILED;\n         sendContainerLaunchFailedMsg(taskAttemptID, message);\n       } finally {\n-        timerTask.cancel();\n         if (proxy !\u003d null) {\n           ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized void launch(ContainerRemoteLaunchEvent event) {\n      TaskAttemptId taskAttemptID \u003d event.getTaskAttemptID();\n      LOG.info(\"Launching \" + taskAttemptID);\n      if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n        state \u003d ContainerState.DONE;\n        sendContainerLaunchFailedMsg(taskAttemptID, \n            \"Container was killed before it was launched\");\n        return;\n      }\n      \n\n      final String containerManagerBindAddr \u003d event.getContainerMgrAddress();\n      ContainerId containerID \u003d event.getContainerID();\n      ContainerToken containerToken \u003d event.getContainerToken();\n\n      ContainerManager proxy \u003d null;\n      try {\n\n        proxy \u003d getCMProxy(containerID, containerManagerBindAddr,\n            containerToken);\n\n        // Construct the actual Container\n        ContainerLaunchContext containerLaunchContext \u003d\n          event.getContainer();\n\n        // Now launch the actual container\n        StartContainerRequest startRequest \u003d Records\n          .newRecord(StartContainerRequest.class);\n        startRequest.setContainerLaunchContext(containerLaunchContext);\n        StartContainerResponse response \u003d proxy.startContainer(startRequest);\n\n        ByteBuffer portInfo \u003d response\n          .getServiceResponse(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n        int port \u003d -1;\n        if(portInfo !\u003d null) {\n          port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n        }\n        LOG.info(\"Shuffle port returned by ContainerManager for \"\n            + taskAttemptID + \" : \" + port);\n\n        if(port \u003c 0) {\n          this.state \u003d ContainerState.FAILED;\n          throw new IllegalStateException(\"Invalid shuffle port number \"\n              + port + \" returned for \" + taskAttemptID);\n        }\n\n        // after launching, send launched event to task attempt to move\n        // it from ASSIGNED to RUNNING state\n        context.getEventHandler().handle(\n            new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n        this.state \u003d ContainerState.RUNNING;\n      } catch (Throwable t) {\n        String message \u003d \"Container launch failed for \" + containerID + \" : \"\n            + StringUtils.stringifyException(t);\n        this.state \u003d ContainerState.FAILED;\n        sendContainerLaunchFailedMsg(taskAttemptID, message);\n      } finally {\n        if (proxy !\u003d null) {\n          ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {}
    },
    "849c68c7b5f80064de3692d766444c2f8864f47a": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3312. Modified MR AM to not send a stop-container request for a container that isn\u0027t launched at all. Contributed by Robert Joseph Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1229451 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/12 6:15 PM",
      "commitName": "849c68c7b5f80064de3692d766444c2f8864f47a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,93 @@\n+    public synchronized void launch(ContainerRemoteLaunchEvent event) {\n+      TaskAttemptId taskAttemptID \u003d event.getTaskAttemptID();\n+      LOG.info(\"Launching \" + taskAttemptID);\n+      if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n+        state \u003d ContainerState.DONE;\n+        sendContainerLaunchFailedMsg(taskAttemptID, \n+            \"Container was killed before it was launched\");\n+        return;\n+      }\n+      CommandTimerTask timerTask \u003d new CommandTimerTask(Thread\n+          .currentThread(), event);\n+      \n+      final String containerManagerBindAddr \u003d event.getContainerMgrAddress();\n+      ContainerId containerID \u003d event.getContainerID();\n+      ContainerToken containerToken \u003d event.getContainerToken();\n+\n+      ContainerManager proxy \u003d null;\n+      try {\n+        commandTimer.schedule(timerTask, nmTimeOut);\n+\n+        proxy \u003d getCMProxy(containerID, containerManagerBindAddr,\n+            containerToken);\n+\n+        // Interrupted during getProxy, but that didn\u0027t throw exception\n+        if (Thread.interrupted()) {\n+          // The timer canceled the command in the mean while.\n+          String message \u003d \"Container launch failed for \" + containerID\n+              + \" : Start-container for \" + event.getContainerID()\n+              + \" got interrupted. Returning.\";\n+          this.state \u003d ContainerState.FAILED;\n+          sendContainerLaunchFailedMsg(taskAttemptID, message);\n+          return;\n+        }\n+        // Construct the actual Container\n+        ContainerLaunchContext containerLaunchContext \u003d\n+          event.getContainer();\n+\n+        // Now launch the actual container\n+        StartContainerRequest startRequest \u003d Records\n+          .newRecord(StartContainerRequest.class);\n+        startRequest.setContainerLaunchContext(containerLaunchContext);\n+        StartContainerResponse response \u003d proxy.startContainer(startRequest);\n+\n+        // container started properly. Stop the timer\n+        timerTask.cancel();\n+        if (Thread.interrupted()) {\n+          // The timer canceled the command in the mean while, but\n+          // startContainer didn\u0027t throw exception\n+          String message \u003d \"Container launch failed for \" + containerID\n+              + \" : Start-container for \" + event.getContainerID()\n+              + \" got interrupted. Returning.\";\n+          this.state \u003d ContainerState.FAILED;\n+          sendContainerLaunchFailedMsg(taskAttemptID, message);\n+          return;\n+        }\n+\n+        ByteBuffer portInfo \u003d response\n+          .getServiceResponse(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n+        int port \u003d -1;\n+        if(portInfo !\u003d null) {\n+          port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n+        }\n+        LOG.info(\"Shuffle port returned by ContainerManager for \"\n+            + taskAttemptID + \" : \" + port);\n+\n+        if(port \u003c 0) {\n+          this.state \u003d ContainerState.FAILED;\n+          throw new IllegalStateException(\"Invalid shuffle port number \"\n+              + port + \" returned for \" + taskAttemptID);\n+        }\n+\n+        // after launching, send launched event to task attempt to move\n+        // it from ASSIGNED to RUNNING state\n+        context.getEventHandler().handle(\n+            new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n+        this.state \u003d ContainerState.RUNNING;\n+      } catch (Throwable t) {\n+        if (Thread.interrupted()) {\n+          // The timer canceled the command in the mean while.\n+          LOG.info(\"Start-container for \" + event.getContainerID()\n+              + \" got interrupted.\");\n+        }\n+        String message \u003d \"Container launch failed for \" + containerID + \" : \"\n+            + StringUtils.stringifyException(t);\n+        this.state \u003d ContainerState.FAILED;\n+        sendContainerLaunchFailedMsg(taskAttemptID, message);\n+      } finally {\n+        timerTask.cancel();\n+        if (proxy !\u003d null) {\n+          ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized void launch(ContainerRemoteLaunchEvent event) {\n      TaskAttemptId taskAttemptID \u003d event.getTaskAttemptID();\n      LOG.info(\"Launching \" + taskAttemptID);\n      if(this.state \u003d\u003d ContainerState.KILLED_BEFORE_LAUNCH) {\n        state \u003d ContainerState.DONE;\n        sendContainerLaunchFailedMsg(taskAttemptID, \n            \"Container was killed before it was launched\");\n        return;\n      }\n      CommandTimerTask timerTask \u003d new CommandTimerTask(Thread\n          .currentThread(), event);\n      \n      final String containerManagerBindAddr \u003d event.getContainerMgrAddress();\n      ContainerId containerID \u003d event.getContainerID();\n      ContainerToken containerToken \u003d event.getContainerToken();\n\n      ContainerManager proxy \u003d null;\n      try {\n        commandTimer.schedule(timerTask, nmTimeOut);\n\n        proxy \u003d getCMProxy(containerID, containerManagerBindAddr,\n            containerToken);\n\n        // Interrupted during getProxy, but that didn\u0027t throw exception\n        if (Thread.interrupted()) {\n          // The timer canceled the command in the mean while.\n          String message \u003d \"Container launch failed for \" + containerID\n              + \" : Start-container for \" + event.getContainerID()\n              + \" got interrupted. Returning.\";\n          this.state \u003d ContainerState.FAILED;\n          sendContainerLaunchFailedMsg(taskAttemptID, message);\n          return;\n        }\n        // Construct the actual Container\n        ContainerLaunchContext containerLaunchContext \u003d\n          event.getContainer();\n\n        // Now launch the actual container\n        StartContainerRequest startRequest \u003d Records\n          .newRecord(StartContainerRequest.class);\n        startRequest.setContainerLaunchContext(containerLaunchContext);\n        StartContainerResponse response \u003d proxy.startContainer(startRequest);\n\n        // container started properly. Stop the timer\n        timerTask.cancel();\n        if (Thread.interrupted()) {\n          // The timer canceled the command in the mean while, but\n          // startContainer didn\u0027t throw exception\n          String message \u003d \"Container launch failed for \" + containerID\n              + \" : Start-container for \" + event.getContainerID()\n              + \" got interrupted. Returning.\";\n          this.state \u003d ContainerState.FAILED;\n          sendContainerLaunchFailedMsg(taskAttemptID, message);\n          return;\n        }\n\n        ByteBuffer portInfo \u003d response\n          .getServiceResponse(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);\n        int port \u003d -1;\n        if(portInfo !\u003d null) {\n          port \u003d ShuffleHandler.deserializeMetaData(portInfo);\n        }\n        LOG.info(\"Shuffle port returned by ContainerManager for \"\n            + taskAttemptID + \" : \" + port);\n\n        if(port \u003c 0) {\n          this.state \u003d ContainerState.FAILED;\n          throw new IllegalStateException(\"Invalid shuffle port number \"\n              + port + \" returned for \" + taskAttemptID);\n        }\n\n        // after launching, send launched event to task attempt to move\n        // it from ASSIGNED to RUNNING state\n        context.getEventHandler().handle(\n            new TaskAttemptContainerLaunchedEvent(taskAttemptID, port));\n        this.state \u003d ContainerState.RUNNING;\n      } catch (Throwable t) {\n        if (Thread.interrupted()) {\n          // The timer canceled the command in the mean while.\n          LOG.info(\"Start-container for \" + event.getContainerID()\n              + \" got interrupted.\");\n        }\n        String message \u003d \"Container launch failed for \" + containerID + \" : \"\n            + StringUtils.stringifyException(t);\n        this.state \u003d ContainerState.FAILED;\n        sendContainerLaunchFailedMsg(taskAttemptID, message);\n      } finally {\n        timerTask.cancel();\n        if (proxy !\u003d null) {\n          ContainerLauncherImpl.this.rpc.stopProxy(proxy, getConfig());\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java"
    }
  }
}