{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairScheduler.java",
  "functionName": "validateConf",
  "functionId": "validateConf___config-FairSchedulerConfiguration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
  "functionStartLine": 242,
  "functionEndLine": 296,
  "numCommitsSeen": 386,
  "timeTaken": 5535,
  "changeHistory": [
    "25f9872be63423ada6a18481eaad2888e731fdac",
    "3ef5500783f043ff206458d8c10ed3d5405a8b0c",
    "334de8d21189109dcd2423d13fab56477980872b"
  ],
  "changeHistoryShort": {
    "25f9872be63423ada6a18481eaad2888e731fdac": "Ymultichange(Yparameterchange,Ybodychange)",
    "3ef5500783f043ff206458d8c10ed3d5405a8b0c": "Ybodychange",
    "334de8d21189109dcd2423d13fab56477980872b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "25f9872be63423ada6a18481eaad2888e731fdac": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5774. MR Job stuck in ACCEPTED status without any progress in Fair Scheduler\nif set yarn.scheduler.minimum-allocation-mb to 0. (Contributed by Yufei Gu via Daniel Templeton)\n",
      "commitDate": "29/11/16 9:40 AM",
      "commitName": "25f9872be63423ada6a18481eaad2888e731fdac",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5774. MR Job stuck in ACCEPTED status without any progress in Fair Scheduler\nif set yarn.scheduler.minimum-allocation-mb to 0. (Contributed by Yufei Gu via Daniel Templeton)\n",
          "commitDate": "29/11/16 9:40 AM",
          "commitName": "25f9872be63423ada6a18481eaad2888e731fdac",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "23/11/16 9:48 PM",
          "commitNameOld": "10468529a9b858bd945e7ecb063c9c1438efa474",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 5.49,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,55 @@\n-  private void validateConf(Configuration conf) {\n+  private void validateConf(FairSchedulerConfiguration config) {\n     // validate scheduler memory allocation setting\n-    int minMem \u003d conf.getInt(\n+    int minMem \u003d config.getInt(\n       YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n       YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n-    int maxMem \u003d conf.getInt(\n+    int maxMem \u003d config.getInt(\n       YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n       YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);\n \n     if (minMem \u003c 0 || minMem \u003e maxMem) {\n       throw new YarnRuntimeException(\"Invalid resource scheduler memory\"\n         + \" allocation configuration: \"\n         + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB\n         + \"\u003d\" + minMem\n         + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB\n         + \"\u003d\" + maxMem + \".  Both values must be greater than or equal to 0\"\n         + \"and the maximum allocation value must be greater than or equal to\"\n         + \"the minimum allocation value.\");\n     }\n \n+    long incrementMem \u003d config.getIncrementAllocation().getMemorySize();\n+    if (incrementMem \u003c\u003d 0) {\n+      throw new YarnRuntimeException(\"Invalid resource scheduler memory\"\n+          + \" allocation configuration: \"\n+          + FairSchedulerConfiguration.RM_SCHEDULER_INCREMENT_ALLOCATION_MB\n+          + \"\u003d\" + incrementMem + \". Values must be greater than 0.\");\n+    }\n+\n     // validate scheduler vcores allocation setting\n-    int minVcores \u003d conf.getInt(\n+    int minVcores \u003d config.getInt(\n       YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n       YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n-    int maxVcores \u003d conf.getInt(\n+    int maxVcores \u003d config.getInt(\n       YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n       YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);\n \n     if (minVcores \u003c 0 || minVcores \u003e maxVcores) {\n       throw new YarnRuntimeException(\"Invalid resource scheduler vcores\"\n         + \" allocation configuration: \"\n         + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES\n         + \"\u003d\" + minVcores\n         + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES\n         + \"\u003d\" + maxVcores + \".  Both values must be greater than or equal to 0\"\n           + \"and the maximum allocation value must be greater than or equal to\"\n           + \"the minimum allocation value.\");\n     }\n+\n+    int incrementVcore \u003d config.getIncrementAllocation().getVirtualCores();\n+    if (incrementVcore \u003c\u003d 0) {\n+      throw new YarnRuntimeException(\"Invalid resource scheduler vcores\"\n+          + \" allocation configuration: \"\n+          + FairSchedulerConfiguration.RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES\n+          + \"\u003d\" + incrementVcore + \". Values must be greater than 0.\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void validateConf(FairSchedulerConfiguration config) {\n    // validate scheduler memory allocation setting\n    int minMem \u003d config.getInt(\n      YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    int maxMem \u003d config.getInt(\n      YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);\n\n    if (minMem \u003c 0 || minMem \u003e maxMem) {\n      throw new YarnRuntimeException(\"Invalid resource scheduler memory\"\n        + \" allocation configuration: \"\n        + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB\n        + \"\u003d\" + minMem\n        + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB\n        + \"\u003d\" + maxMem + \".  Both values must be greater than or equal to 0\"\n        + \"and the maximum allocation value must be greater than or equal to\"\n        + \"the minimum allocation value.\");\n    }\n\n    long incrementMem \u003d config.getIncrementAllocation().getMemorySize();\n    if (incrementMem \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid resource scheduler memory\"\n          + \" allocation configuration: \"\n          + FairSchedulerConfiguration.RM_SCHEDULER_INCREMENT_ALLOCATION_MB\n          + \"\u003d\" + incrementMem + \". Values must be greater than 0.\");\n    }\n\n    // validate scheduler vcores allocation setting\n    int minVcores \u003d config.getInt(\n      YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n    int maxVcores \u003d config.getInt(\n      YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);\n\n    if (minVcores \u003c 0 || minVcores \u003e maxVcores) {\n      throw new YarnRuntimeException(\"Invalid resource scheduler vcores\"\n        + \" allocation configuration: \"\n        + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES\n        + \"\u003d\" + minVcores\n        + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES\n        + \"\u003d\" + maxVcores + \".  Both values must be greater than or equal to 0\"\n          + \"and the maximum allocation value must be greater than or equal to\"\n          + \"the minimum allocation value.\");\n    }\n\n    int incrementVcore \u003d config.getIncrementAllocation().getVirtualCores();\n    if (incrementVcore \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid resource scheduler vcores\"\n          + \" allocation configuration: \"\n          + FairSchedulerConfiguration.RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES\n          + \"\u003d\" + incrementVcore + \". Values must be greater than 0.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[config-FairSchedulerConfiguration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5774. MR Job stuck in ACCEPTED status without any progress in Fair Scheduler\nif set yarn.scheduler.minimum-allocation-mb to 0. (Contributed by Yufei Gu via Daniel Templeton)\n",
          "commitDate": "29/11/16 9:40 AM",
          "commitName": "25f9872be63423ada6a18481eaad2888e731fdac",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "23/11/16 9:48 PM",
          "commitNameOld": "10468529a9b858bd945e7ecb063c9c1438efa474",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 5.49,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,55 @@\n-  private void validateConf(Configuration conf) {\n+  private void validateConf(FairSchedulerConfiguration config) {\n     // validate scheduler memory allocation setting\n-    int minMem \u003d conf.getInt(\n+    int minMem \u003d config.getInt(\n       YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n       YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n-    int maxMem \u003d conf.getInt(\n+    int maxMem \u003d config.getInt(\n       YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n       YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);\n \n     if (minMem \u003c 0 || minMem \u003e maxMem) {\n       throw new YarnRuntimeException(\"Invalid resource scheduler memory\"\n         + \" allocation configuration: \"\n         + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB\n         + \"\u003d\" + minMem\n         + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB\n         + \"\u003d\" + maxMem + \".  Both values must be greater than or equal to 0\"\n         + \"and the maximum allocation value must be greater than or equal to\"\n         + \"the minimum allocation value.\");\n     }\n \n+    long incrementMem \u003d config.getIncrementAllocation().getMemorySize();\n+    if (incrementMem \u003c\u003d 0) {\n+      throw new YarnRuntimeException(\"Invalid resource scheduler memory\"\n+          + \" allocation configuration: \"\n+          + FairSchedulerConfiguration.RM_SCHEDULER_INCREMENT_ALLOCATION_MB\n+          + \"\u003d\" + incrementMem + \". Values must be greater than 0.\");\n+    }\n+\n     // validate scheduler vcores allocation setting\n-    int minVcores \u003d conf.getInt(\n+    int minVcores \u003d config.getInt(\n       YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n       YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n-    int maxVcores \u003d conf.getInt(\n+    int maxVcores \u003d config.getInt(\n       YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n       YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);\n \n     if (minVcores \u003c 0 || minVcores \u003e maxVcores) {\n       throw new YarnRuntimeException(\"Invalid resource scheduler vcores\"\n         + \" allocation configuration: \"\n         + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES\n         + \"\u003d\" + minVcores\n         + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES\n         + \"\u003d\" + maxVcores + \".  Both values must be greater than or equal to 0\"\n           + \"and the maximum allocation value must be greater than or equal to\"\n           + \"the minimum allocation value.\");\n     }\n+\n+    int incrementVcore \u003d config.getIncrementAllocation().getVirtualCores();\n+    if (incrementVcore \u003c\u003d 0) {\n+      throw new YarnRuntimeException(\"Invalid resource scheduler vcores\"\n+          + \" allocation configuration: \"\n+          + FairSchedulerConfiguration.RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES\n+          + \"\u003d\" + incrementVcore + \". Values must be greater than 0.\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void validateConf(FairSchedulerConfiguration config) {\n    // validate scheduler memory allocation setting\n    int minMem \u003d config.getInt(\n      YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    int maxMem \u003d config.getInt(\n      YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);\n\n    if (minMem \u003c 0 || minMem \u003e maxMem) {\n      throw new YarnRuntimeException(\"Invalid resource scheduler memory\"\n        + \" allocation configuration: \"\n        + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB\n        + \"\u003d\" + minMem\n        + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB\n        + \"\u003d\" + maxMem + \".  Both values must be greater than or equal to 0\"\n        + \"and the maximum allocation value must be greater than or equal to\"\n        + \"the minimum allocation value.\");\n    }\n\n    long incrementMem \u003d config.getIncrementAllocation().getMemorySize();\n    if (incrementMem \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid resource scheduler memory\"\n          + \" allocation configuration: \"\n          + FairSchedulerConfiguration.RM_SCHEDULER_INCREMENT_ALLOCATION_MB\n          + \"\u003d\" + incrementMem + \". Values must be greater than 0.\");\n    }\n\n    // validate scheduler vcores allocation setting\n    int minVcores \u003d config.getInt(\n      YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n    int maxVcores \u003d config.getInt(\n      YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);\n\n    if (minVcores \u003c 0 || minVcores \u003e maxVcores) {\n      throw new YarnRuntimeException(\"Invalid resource scheduler vcores\"\n        + \" allocation configuration: \"\n        + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES\n        + \"\u003d\" + minVcores\n        + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES\n        + \"\u003d\" + maxVcores + \".  Both values must be greater than or equal to 0\"\n          + \"and the maximum allocation value must be greater than or equal to\"\n          + \"the minimum allocation value.\");\n    }\n\n    int incrementVcore \u003d config.getIncrementAllocation().getVirtualCores();\n    if (incrementVcore \u003c\u003d 0) {\n      throw new YarnRuntimeException(\"Invalid resource scheduler vcores\"\n          + \" allocation configuration: \"\n          + FairSchedulerConfiguration.RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES\n          + \"\u003d\" + incrementVcore + \". Values must be greater than 0.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "3ef5500783f043ff206458d8c10ed3d5405a8b0c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4560. Make scheduler error checking message more user friendly. (Ray Chiang via kasha)\n",
      "commitDate": "15/03/16 11:45 PM",
      "commitName": "3ef5500783f043ff206458d8c10ed3d5405a8b0c",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "14/03/16 2:19 PM",
      "commitNameOld": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 1.39,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,39 @@\n   private void validateConf(Configuration conf) {\n     // validate scheduler memory allocation setting\n     int minMem \u003d conf.getInt(\n       YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n       YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     int maxMem \u003d conf.getInt(\n       YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n       YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);\n \n     if (minMem \u003c 0 || minMem \u003e maxMem) {\n       throw new YarnRuntimeException(\"Invalid resource scheduler memory\"\n-        + \" allocation configuration\"\n-        + \", \" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB\n+        + \" allocation configuration: \"\n+        + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB\n         + \"\u003d\" + minMem\n         + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB\n-        + \"\u003d\" + maxMem + \", min should equal greater than 0\"\n-        + \", max should be no smaller than min.\");\n+        + \"\u003d\" + maxMem + \".  Both values must be greater than or equal to 0\"\n+        + \"and the maximum allocation value must be greater than or equal to\"\n+        + \"the minimum allocation value.\");\n     }\n \n     // validate scheduler vcores allocation setting\n     int minVcores \u003d conf.getInt(\n       YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n       YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n     int maxVcores \u003d conf.getInt(\n       YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n       YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);\n \n     if (minVcores \u003c 0 || minVcores \u003e maxVcores) {\n       throw new YarnRuntimeException(\"Invalid resource scheduler vcores\"\n-        + \" allocation configuration\"\n-        + \", \" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES\n+        + \" allocation configuration: \"\n+        + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES\n         + \"\u003d\" + minVcores\n         + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES\n-        + \"\u003d\" + maxVcores + \", min should equal greater than 0\"\n-        + \", max should be no smaller than min.\");\n+        + \"\u003d\" + maxVcores + \".  Both values must be greater than or equal to 0\"\n+          + \"and the maximum allocation value must be greater than or equal to\"\n+          + \"the minimum allocation value.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void validateConf(Configuration conf) {\n    // validate scheduler memory allocation setting\n    int minMem \u003d conf.getInt(\n      YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    int maxMem \u003d conf.getInt(\n      YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);\n\n    if (minMem \u003c 0 || minMem \u003e maxMem) {\n      throw new YarnRuntimeException(\"Invalid resource scheduler memory\"\n        + \" allocation configuration: \"\n        + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB\n        + \"\u003d\" + minMem\n        + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB\n        + \"\u003d\" + maxMem + \".  Both values must be greater than or equal to 0\"\n        + \"and the maximum allocation value must be greater than or equal to\"\n        + \"the minimum allocation value.\");\n    }\n\n    // validate scheduler vcores allocation setting\n    int minVcores \u003d conf.getInt(\n      YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n    int maxVcores \u003d conf.getInt(\n      YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);\n\n    if (minVcores \u003c 0 || minVcores \u003e maxVcores) {\n      throw new YarnRuntimeException(\"Invalid resource scheduler vcores\"\n        + \" allocation configuration: \"\n        + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES\n        + \"\u003d\" + minVcores\n        + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES\n        + \"\u003d\" + maxVcores + \".  Both values must be greater than or equal to 0\"\n          + \"and the maximum allocation value must be greater than or equal to\"\n          + \"the minimum allocation value.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "334de8d21189109dcd2423d13fab56477980872b": {
      "type": "Yintroduced",
      "commitMessage": " ARN-803. factor out scheduler config validation from the ResourceManager to each scheduler implementation. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493160 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/06/13 10:07 AM",
      "commitName": "334de8d21189109dcd2423d13fab56477980872b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,37 @@\n+  private void validateConf(Configuration conf) {\n+    // validate scheduler memory allocation setting\n+    int minMem \u003d conf.getInt(\n+      YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n+      YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n+    int maxMem \u003d conf.getInt(\n+      YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n+      YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);\n+\n+    if (minMem \u003c 0 || minMem \u003e maxMem) {\n+      throw new YarnRuntimeException(\"Invalid resource scheduler memory\"\n+        + \" allocation configuration\"\n+        + \", \" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB\n+        + \"\u003d\" + minMem\n+        + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB\n+        + \"\u003d\" + maxMem + \", min should equal greater than 0\"\n+        + \", max should be no smaller than min.\");\n+    }\n+\n+    // validate scheduler vcores allocation setting\n+    int minVcores \u003d conf.getInt(\n+      YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n+      YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n+    int maxVcores \u003d conf.getInt(\n+      YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n+      YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);\n+\n+    if (minVcores \u003c 0 || minVcores \u003e maxVcores) {\n+      throw new YarnRuntimeException(\"Invalid resource scheduler vcores\"\n+        + \" allocation configuration\"\n+        + \", \" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES\n+        + \"\u003d\" + minVcores\n+        + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES\n+        + \"\u003d\" + maxVcores + \", min should equal greater than 0\"\n+        + \", max should be no smaller than min.\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void validateConf(Configuration conf) {\n    // validate scheduler memory allocation setting\n    int minMem \u003d conf.getInt(\n      YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    int maxMem \u003d conf.getInt(\n      YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);\n\n    if (minMem \u003c 0 || minMem \u003e maxMem) {\n      throw new YarnRuntimeException(\"Invalid resource scheduler memory\"\n        + \" allocation configuration\"\n        + \", \" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB\n        + \"\u003d\" + minMem\n        + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB\n        + \"\u003d\" + maxMem + \", min should equal greater than 0\"\n        + \", max should be no smaller than min.\");\n    }\n\n    // validate scheduler vcores allocation setting\n    int minVcores \u003d conf.getInt(\n      YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);\n    int maxVcores \u003d conf.getInt(\n      YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);\n\n    if (minVcores \u003c 0 || minVcores \u003e maxVcores) {\n      throw new YarnRuntimeException(\"Invalid resource scheduler vcores\"\n        + \" allocation configuration\"\n        + \", \" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES\n        + \"\u003d\" + minVcores\n        + \", \" + YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES\n        + \"\u003d\" + maxVcores + \", min should equal greater than 0\"\n        + \", max should be no smaller than min.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java"
    }
  }
}