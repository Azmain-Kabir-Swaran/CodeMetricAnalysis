{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CombineFileInputFormat.java",
  "functionName": "populateBlockInfo",
  "functionId": "populateBlockInfo___blocks-OneBlockInfo[]__rackToBlocks-Map__String,List__OneBlockInfo______blockToNodes-Map__OneBlockInfo,String[]____nodeToBlocks-Map__String,Set__OneBlockInfo______rackToNodes-Map__String,Set__String____",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/CombineFileInputFormat.java",
  "functionStartLine": 655,
  "functionEndLine": 699,
  "numCommitsSeen": 21,
  "timeTaken": 1541,
  "changeHistory": [
    "381a4c42135916245c8992daa3d03f38e282108d",
    "0b9ed2364a0690d62a0d51d636027acb984e3e91"
  ],
  "changeHistoryShort": {
    "381a4c42135916245c8992daa3d03f38e282108d": "Ymultichange(Yparameterchange,Ybodychange)",
    "0b9ed2364a0690d62a0d51d636027acb984e3e91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "381a4c42135916245c8992daa3d03f38e282108d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-5352. Optimize node local splits generated by CombineFileInputFormat. (sseth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1509345 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/13 10:42 AM",
      "commitName": "381a4c42135916245c8992daa3d03f38e282108d",
      "commitAuthor": "Siddharth Seth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-5352. Optimize node local splits generated by CombineFileInputFormat. (sseth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1509345 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/13 10:42 AM",
          "commitName": "381a4c42135916245c8992daa3d03f38e282108d",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "26/07/13 11:16 AM",
          "commitNameOld": "ec18984252731089ab5af12b3603dcfc3d4f4593",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 5.98,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n     static void populateBlockInfo(OneBlockInfo[] blocks,\n-                          HashMap\u003cString, List\u003cOneBlockInfo\u003e\u003e rackToBlocks,\n-                          HashMap\u003cOneBlockInfo, String[]\u003e blockToNodes,\n-                          HashMap\u003cString, List\u003cOneBlockInfo\u003e\u003e nodeToBlocks,\n-                          HashMap\u003cString, Set\u003cString\u003e\u003e rackToNodes) {\n+                          Map\u003cString, List\u003cOneBlockInfo\u003e\u003e rackToBlocks,\n+                          Map\u003cOneBlockInfo, String[]\u003e blockToNodes,\n+                          Map\u003cString, Set\u003cOneBlockInfo\u003e\u003e nodeToBlocks,\n+                          Map\u003cString, Set\u003cString\u003e\u003e rackToNodes) {\n       for (OneBlockInfo oneblock : blocks) {\n         // add this block to the block --\u003e node locations map\n         blockToNodes.put(oneblock, oneblock.hosts);\n \n         // For blocks that do not have host/rack information,\n         // assign to default  rack.\n         String[] racks \u003d null;\n         if (oneblock.hosts.length \u003d\u003d 0) {\n           racks \u003d new String[]{NetworkTopology.DEFAULT_RACK};\n         } else {\n           racks \u003d oneblock.racks;\n         }\n \n         // add this block to the rack --\u003e block map\n         for (int j \u003d 0; j \u003c racks.length; j++) {\n           String rack \u003d racks[j];\n           List\u003cOneBlockInfo\u003e blklist \u003d rackToBlocks.get(rack);\n           if (blklist \u003d\u003d null) {\n             blklist \u003d new ArrayList\u003cOneBlockInfo\u003e();\n             rackToBlocks.put(rack, blklist);\n           }\n           blklist.add(oneblock);\n           if (!racks[j].equals(NetworkTopology.DEFAULT_RACK)) {\n             // Add this host to rackToNodes map\n             addHostToRack(rackToNodes, racks[j], oneblock.hosts[j]);\n           }\n         }\n \n         // add this block to the node --\u003e block map\n         for (int j \u003d 0; j \u003c oneblock.hosts.length; j++) {\n           String node \u003d oneblock.hosts[j];\n-          List\u003cOneBlockInfo\u003e blklist \u003d nodeToBlocks.get(node);\n+          Set\u003cOneBlockInfo\u003e blklist \u003d nodeToBlocks.get(node);\n           if (blklist \u003d\u003d null) {\n-            blklist \u003d new ArrayList\u003cOneBlockInfo\u003e();\n+            blklist \u003d new LinkedHashSet\u003cOneBlockInfo\u003e();\n             nodeToBlocks.put(node, blklist);\n           }\n           blklist.add(oneblock);\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    static void populateBlockInfo(OneBlockInfo[] blocks,\n                          Map\u003cString, List\u003cOneBlockInfo\u003e\u003e rackToBlocks,\n                          Map\u003cOneBlockInfo, String[]\u003e blockToNodes,\n                          Map\u003cString, Set\u003cOneBlockInfo\u003e\u003e nodeToBlocks,\n                          Map\u003cString, Set\u003cString\u003e\u003e rackToNodes) {\n      for (OneBlockInfo oneblock : blocks) {\n        // add this block to the block --\u003e node locations map\n        blockToNodes.put(oneblock, oneblock.hosts);\n\n        // For blocks that do not have host/rack information,\n        // assign to default  rack.\n        String[] racks \u003d null;\n        if (oneblock.hosts.length \u003d\u003d 0) {\n          racks \u003d new String[]{NetworkTopology.DEFAULT_RACK};\n        } else {\n          racks \u003d oneblock.racks;\n        }\n\n        // add this block to the rack --\u003e block map\n        for (int j \u003d 0; j \u003c racks.length; j++) {\n          String rack \u003d racks[j];\n          List\u003cOneBlockInfo\u003e blklist \u003d rackToBlocks.get(rack);\n          if (blklist \u003d\u003d null) {\n            blklist \u003d new ArrayList\u003cOneBlockInfo\u003e();\n            rackToBlocks.put(rack, blklist);\n          }\n          blklist.add(oneblock);\n          if (!racks[j].equals(NetworkTopology.DEFAULT_RACK)) {\n            // Add this host to rackToNodes map\n            addHostToRack(rackToNodes, racks[j], oneblock.hosts[j]);\n          }\n        }\n\n        // add this block to the node --\u003e block map\n        for (int j \u003d 0; j \u003c oneblock.hosts.length; j++) {\n          String node \u003d oneblock.hosts[j];\n          Set\u003cOneBlockInfo\u003e blklist \u003d nodeToBlocks.get(node);\n          if (blklist \u003d\u003d null) {\n            blklist \u003d new LinkedHashSet\u003cOneBlockInfo\u003e();\n            nodeToBlocks.put(node, blklist);\n          }\n          blklist.add(oneblock);\n        }\n      }\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/CombineFileInputFormat.java",
          "extendedDetails": {
            "oldValue": "[blocks-OneBlockInfo[], rackToBlocks-HashMap\u003cString,List\u003cOneBlockInfo\u003e\u003e, blockToNodes-HashMap\u003cOneBlockInfo,String[]\u003e, nodeToBlocks-HashMap\u003cString,List\u003cOneBlockInfo\u003e\u003e, rackToNodes-HashMap\u003cString,Set\u003cString\u003e\u003e]",
            "newValue": "[blocks-OneBlockInfo[], rackToBlocks-Map\u003cString,List\u003cOneBlockInfo\u003e\u003e, blockToNodes-Map\u003cOneBlockInfo,String[]\u003e, nodeToBlocks-Map\u003cString,Set\u003cOneBlockInfo\u003e\u003e, rackToNodes-Map\u003cString,Set\u003cString\u003e\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-5352. Optimize node local splits generated by CombineFileInputFormat. (sseth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1509345 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/13 10:42 AM",
          "commitName": "381a4c42135916245c8992daa3d03f38e282108d",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "26/07/13 11:16 AM",
          "commitNameOld": "ec18984252731089ab5af12b3603dcfc3d4f4593",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 5.98,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n     static void populateBlockInfo(OneBlockInfo[] blocks,\n-                          HashMap\u003cString, List\u003cOneBlockInfo\u003e\u003e rackToBlocks,\n-                          HashMap\u003cOneBlockInfo, String[]\u003e blockToNodes,\n-                          HashMap\u003cString, List\u003cOneBlockInfo\u003e\u003e nodeToBlocks,\n-                          HashMap\u003cString, Set\u003cString\u003e\u003e rackToNodes) {\n+                          Map\u003cString, List\u003cOneBlockInfo\u003e\u003e rackToBlocks,\n+                          Map\u003cOneBlockInfo, String[]\u003e blockToNodes,\n+                          Map\u003cString, Set\u003cOneBlockInfo\u003e\u003e nodeToBlocks,\n+                          Map\u003cString, Set\u003cString\u003e\u003e rackToNodes) {\n       for (OneBlockInfo oneblock : blocks) {\n         // add this block to the block --\u003e node locations map\n         blockToNodes.put(oneblock, oneblock.hosts);\n \n         // For blocks that do not have host/rack information,\n         // assign to default  rack.\n         String[] racks \u003d null;\n         if (oneblock.hosts.length \u003d\u003d 0) {\n           racks \u003d new String[]{NetworkTopology.DEFAULT_RACK};\n         } else {\n           racks \u003d oneblock.racks;\n         }\n \n         // add this block to the rack --\u003e block map\n         for (int j \u003d 0; j \u003c racks.length; j++) {\n           String rack \u003d racks[j];\n           List\u003cOneBlockInfo\u003e blklist \u003d rackToBlocks.get(rack);\n           if (blklist \u003d\u003d null) {\n             blklist \u003d new ArrayList\u003cOneBlockInfo\u003e();\n             rackToBlocks.put(rack, blklist);\n           }\n           blklist.add(oneblock);\n           if (!racks[j].equals(NetworkTopology.DEFAULT_RACK)) {\n             // Add this host to rackToNodes map\n             addHostToRack(rackToNodes, racks[j], oneblock.hosts[j]);\n           }\n         }\n \n         // add this block to the node --\u003e block map\n         for (int j \u003d 0; j \u003c oneblock.hosts.length; j++) {\n           String node \u003d oneblock.hosts[j];\n-          List\u003cOneBlockInfo\u003e blklist \u003d nodeToBlocks.get(node);\n+          Set\u003cOneBlockInfo\u003e blklist \u003d nodeToBlocks.get(node);\n           if (blklist \u003d\u003d null) {\n-            blklist \u003d new ArrayList\u003cOneBlockInfo\u003e();\n+            blklist \u003d new LinkedHashSet\u003cOneBlockInfo\u003e();\n             nodeToBlocks.put(node, blklist);\n           }\n           blklist.add(oneblock);\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    static void populateBlockInfo(OneBlockInfo[] blocks,\n                          Map\u003cString, List\u003cOneBlockInfo\u003e\u003e rackToBlocks,\n                          Map\u003cOneBlockInfo, String[]\u003e blockToNodes,\n                          Map\u003cString, Set\u003cOneBlockInfo\u003e\u003e nodeToBlocks,\n                          Map\u003cString, Set\u003cString\u003e\u003e rackToNodes) {\n      for (OneBlockInfo oneblock : blocks) {\n        // add this block to the block --\u003e node locations map\n        blockToNodes.put(oneblock, oneblock.hosts);\n\n        // For blocks that do not have host/rack information,\n        // assign to default  rack.\n        String[] racks \u003d null;\n        if (oneblock.hosts.length \u003d\u003d 0) {\n          racks \u003d new String[]{NetworkTopology.DEFAULT_RACK};\n        } else {\n          racks \u003d oneblock.racks;\n        }\n\n        // add this block to the rack --\u003e block map\n        for (int j \u003d 0; j \u003c racks.length; j++) {\n          String rack \u003d racks[j];\n          List\u003cOneBlockInfo\u003e blklist \u003d rackToBlocks.get(rack);\n          if (blklist \u003d\u003d null) {\n            blklist \u003d new ArrayList\u003cOneBlockInfo\u003e();\n            rackToBlocks.put(rack, blklist);\n          }\n          blklist.add(oneblock);\n          if (!racks[j].equals(NetworkTopology.DEFAULT_RACK)) {\n            // Add this host to rackToNodes map\n            addHostToRack(rackToNodes, racks[j], oneblock.hosts[j]);\n          }\n        }\n\n        // add this block to the node --\u003e block map\n        for (int j \u003d 0; j \u003c oneblock.hosts.length; j++) {\n          String node \u003d oneblock.hosts[j];\n          Set\u003cOneBlockInfo\u003e blklist \u003d nodeToBlocks.get(node);\n          if (blklist \u003d\u003d null) {\n            blklist \u003d new LinkedHashSet\u003cOneBlockInfo\u003e();\n            nodeToBlocks.put(node, blklist);\n          }\n          blklist.add(oneblock);\n        }\n      }\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/CombineFileInputFormat.java",
          "extendedDetails": {}
        }
      ]
    },
    "0b9ed2364a0690d62a0d51d636027acb984e3e91": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-4892. Modify CombineFileInputFormat to not skew input slits\u0027 allocation on small clusters. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1450912 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/02/13 10:49 AM",
      "commitName": "0b9ed2364a0690d62a0d51d636027acb984e3e91",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,45 @@\n+    static void populateBlockInfo(OneBlockInfo[] blocks,\n+                          HashMap\u003cString, List\u003cOneBlockInfo\u003e\u003e rackToBlocks,\n+                          HashMap\u003cOneBlockInfo, String[]\u003e blockToNodes,\n+                          HashMap\u003cString, List\u003cOneBlockInfo\u003e\u003e nodeToBlocks,\n+                          HashMap\u003cString, Set\u003cString\u003e\u003e rackToNodes) {\n+      for (OneBlockInfo oneblock : blocks) {\n+        // add this block to the block --\u003e node locations map\n+        blockToNodes.put(oneblock, oneblock.hosts);\n+\n+        // For blocks that do not have host/rack information,\n+        // assign to default  rack.\n+        String[] racks \u003d null;\n+        if (oneblock.hosts.length \u003d\u003d 0) {\n+          racks \u003d new String[]{NetworkTopology.DEFAULT_RACK};\n+        } else {\n+          racks \u003d oneblock.racks;\n+        }\n+\n+        // add this block to the rack --\u003e block map\n+        for (int j \u003d 0; j \u003c racks.length; j++) {\n+          String rack \u003d racks[j];\n+          List\u003cOneBlockInfo\u003e blklist \u003d rackToBlocks.get(rack);\n+          if (blklist \u003d\u003d null) {\n+            blklist \u003d new ArrayList\u003cOneBlockInfo\u003e();\n+            rackToBlocks.put(rack, blklist);\n+          }\n+          blklist.add(oneblock);\n+          if (!racks[j].equals(NetworkTopology.DEFAULT_RACK)) {\n+            // Add this host to rackToNodes map\n+            addHostToRack(rackToNodes, racks[j], oneblock.hosts[j]);\n+          }\n+        }\n+\n+        // add this block to the node --\u003e block map\n+        for (int j \u003d 0; j \u003c oneblock.hosts.length; j++) {\n+          String node \u003d oneblock.hosts[j];\n+          List\u003cOneBlockInfo\u003e blklist \u003d nodeToBlocks.get(node);\n+          if (blklist \u003d\u003d null) {\n+            blklist \u003d new ArrayList\u003cOneBlockInfo\u003e();\n+            nodeToBlocks.put(node, blklist);\n+          }\n+          blklist.add(oneblock);\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    static void populateBlockInfo(OneBlockInfo[] blocks,\n                          HashMap\u003cString, List\u003cOneBlockInfo\u003e\u003e rackToBlocks,\n                          HashMap\u003cOneBlockInfo, String[]\u003e blockToNodes,\n                          HashMap\u003cString, List\u003cOneBlockInfo\u003e\u003e nodeToBlocks,\n                          HashMap\u003cString, Set\u003cString\u003e\u003e rackToNodes) {\n      for (OneBlockInfo oneblock : blocks) {\n        // add this block to the block --\u003e node locations map\n        blockToNodes.put(oneblock, oneblock.hosts);\n\n        // For blocks that do not have host/rack information,\n        // assign to default  rack.\n        String[] racks \u003d null;\n        if (oneblock.hosts.length \u003d\u003d 0) {\n          racks \u003d new String[]{NetworkTopology.DEFAULT_RACK};\n        } else {\n          racks \u003d oneblock.racks;\n        }\n\n        // add this block to the rack --\u003e block map\n        for (int j \u003d 0; j \u003c racks.length; j++) {\n          String rack \u003d racks[j];\n          List\u003cOneBlockInfo\u003e blklist \u003d rackToBlocks.get(rack);\n          if (blklist \u003d\u003d null) {\n            blklist \u003d new ArrayList\u003cOneBlockInfo\u003e();\n            rackToBlocks.put(rack, blklist);\n          }\n          blklist.add(oneblock);\n          if (!racks[j].equals(NetworkTopology.DEFAULT_RACK)) {\n            // Add this host to rackToNodes map\n            addHostToRack(rackToNodes, racks[j], oneblock.hosts[j]);\n          }\n        }\n\n        // add this block to the node --\u003e block map\n        for (int j \u003d 0; j \u003c oneblock.hosts.length; j++) {\n          String node \u003d oneblock.hosts[j];\n          List\u003cOneBlockInfo\u003e blklist \u003d nodeToBlocks.get(node);\n          if (blklist \u003d\u003d null) {\n            blklist \u003d new ArrayList\u003cOneBlockInfo\u003e();\n            nodeToBlocks.put(node, blklist);\n          }\n          blklist.add(oneblock);\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/CombineFileInputFormat.java"
    }
  }
}