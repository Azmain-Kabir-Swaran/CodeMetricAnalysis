{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSck.java",
  "functionName": "getCurrentNamenodeAddress",
  "functionId": "getCurrentNamenodeAddress___target-Path",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
  "functionStartLine": 260,
  "functionEndLine": 273,
  "numCommitsSeen": 58,
  "timeTaken": 7105,
  "changeHistory": [
    "cbb492578ef09300821b7199de54c6508f9d7fe8",
    "7fe0f25ad21f006eb41b832a181eb2a812a6f7b7",
    "045dc880e13271737b3cf316296e92fb95806663",
    "5dbbe0e0a5d31689d3425e490865f95057dc051c",
    "ce1a7ec9755f17527c29b0db713d7e01750e10c9",
    "ec6961b39c6e05a1ed0016e815c2e17c052d2462",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cbb492578ef09300821b7199de54c6508f9d7fe8": "Ybodychange",
    "7fe0f25ad21f006eb41b832a181eb2a812a6f7b7": "Ymultichange(Yparameterchange,Ybodychange)",
    "045dc880e13271737b3cf316296e92fb95806663": "Ymultichange(Yreturntypechange,Ybodychange)",
    "5dbbe0e0a5d31689d3425e490865f95057dc051c": "Ybodychange",
    "ce1a7ec9755f17527c29b0db713d7e01750e10c9": "Ybodychange",
    "ec6961b39c6e05a1ed0016e815c2e17c052d2462": "Ymultichange(Yexceptionschange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cbb492578ef09300821b7199de54c6508f9d7fe8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7789. DFSck should resolve the path to support cross-FS symlinks. (gera)\n",
      "commitDate": "02/03/15 12:55 AM",
      "commitName": "cbb492578ef09300821b7199de54c6508f9d7fe8",
      "commitAuthor": "Gera Shegalov",
      "commitDateOld": "25/02/15 4:19 PM",
      "commitNameOld": "d140d76a43c88e326b9c2818578f22bd3563b969",
      "commitAuthorOld": "Benoy Antony",
      "daysBetweenCommits": 4.36,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,14 @@\n   private URI getCurrentNamenodeAddress(Path target) throws IOException {\n     //String nnAddress \u003d null;\n     Configuration conf \u003d getConf();\n \n     //get the filesystem object to verify it is an HDFS system\n-    final FileSystem fs;\n-    try {\n-      fs \u003d target.getFileSystem(conf);\n-    } catch (IOException ioe) {\n-      System.err.println(\"FileSystem is inaccessible due to:\\n\"\n-          + StringUtils.stringifyException(ioe));\n-      return null;\n-    }\n+    final FileSystem fs \u003d target.getFileSystem(conf);\n     if (!(fs instanceof DistributedFileSystem)) {\n       System.err.println(\"FileSystem is \" + fs.getUri());\n       return null;\n     }\n-    \n+\n     return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf,\n         DFSUtil.getHttpClientScheme(conf));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI getCurrentNamenodeAddress(Path target) throws IOException {\n    //String nnAddress \u003d null;\n    Configuration conf \u003d getConf();\n\n    //get the filesystem object to verify it is an HDFS system\n    final FileSystem fs \u003d target.getFileSystem(conf);\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return null;\n    }\n\n    return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf,\n        DFSUtil.getHttpClientScheme(conf));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
      "extendedDetails": {}
    },
    "7fe0f25ad21f006eb41b832a181eb2a812a6f7b7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-2219. Change fsck to support fully qualified paths so that a particular namenode in a federated cluster with multiple namenodes can be specified in the path parameter.\n",
      "commitDate": "14/01/15 11:31 AM",
      "commitName": "7fe0f25ad21f006eb41b832a181eb2a812a6f7b7",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2219. Change fsck to support fully qualified paths so that a particular namenode in a federated cluster with multiple namenodes can be specified in the path parameter.\n",
          "commitDate": "14/01/15 11:31 AM",
          "commitName": "7fe0f25ad21f006eb41b832a181eb2a812a6f7b7",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "28/10/14 12:26 PM",
          "commitNameOld": "371a3b87ed346732ed58a4faab0c6c1db57c86ed",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 78.0,
          "commitsBetweenForRepo": 541,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-  private URI getCurrentNamenodeAddress() throws IOException {\n+  private URI getCurrentNamenodeAddress(Path target) throws IOException {\n     //String nnAddress \u003d null;\n     Configuration conf \u003d getConf();\n \n     //get the filesystem object to verify it is an HDFS system\n-    FileSystem fs;\n+    final FileSystem fs;\n     try {\n-      fs \u003d FileSystem.get(conf);\n+      fs \u003d target.getFileSystem(conf);\n     } catch (IOException ioe) {\n       System.err.println(\"FileSystem is inaccessible due to:\\n\"\n           + StringUtils.stringifyException(ioe));\n       return null;\n     }\n     if (!(fs instanceof DistributedFileSystem)) {\n       System.err.println(\"FileSystem is \" + fs.getUri());\n       return null;\n     }\n     \n     return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf,\n         DFSUtil.getHttpClientScheme(conf));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private URI getCurrentNamenodeAddress(Path target) throws IOException {\n    //String nnAddress \u003d null;\n    Configuration conf \u003d getConf();\n\n    //get the filesystem object to verify it is an HDFS system\n    final FileSystem fs;\n    try {\n      fs \u003d target.getFileSystem(conf);\n    } catch (IOException ioe) {\n      System.err.println(\"FileSystem is inaccessible due to:\\n\"\n          + StringUtils.stringifyException(ioe));\n      return null;\n    }\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return null;\n    }\n    \n    return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf,\n        DFSUtil.getHttpClientScheme(conf));\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[target-Path]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2219. Change fsck to support fully qualified paths so that a particular namenode in a federated cluster with multiple namenodes can be specified in the path parameter.\n",
          "commitDate": "14/01/15 11:31 AM",
          "commitName": "7fe0f25ad21f006eb41b832a181eb2a812a6f7b7",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "28/10/14 12:26 PM",
          "commitNameOld": "371a3b87ed346732ed58a4faab0c6c1db57c86ed",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 78.0,
          "commitsBetweenForRepo": 541,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-  private URI getCurrentNamenodeAddress() throws IOException {\n+  private URI getCurrentNamenodeAddress(Path target) throws IOException {\n     //String nnAddress \u003d null;\n     Configuration conf \u003d getConf();\n \n     //get the filesystem object to verify it is an HDFS system\n-    FileSystem fs;\n+    final FileSystem fs;\n     try {\n-      fs \u003d FileSystem.get(conf);\n+      fs \u003d target.getFileSystem(conf);\n     } catch (IOException ioe) {\n       System.err.println(\"FileSystem is inaccessible due to:\\n\"\n           + StringUtils.stringifyException(ioe));\n       return null;\n     }\n     if (!(fs instanceof DistributedFileSystem)) {\n       System.err.println(\"FileSystem is \" + fs.getUri());\n       return null;\n     }\n     \n     return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf,\n         DFSUtil.getHttpClientScheme(conf));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private URI getCurrentNamenodeAddress(Path target) throws IOException {\n    //String nnAddress \u003d null;\n    Configuration conf \u003d getConf();\n\n    //get the filesystem object to verify it is an HDFS system\n    final FileSystem fs;\n    try {\n      fs \u003d target.getFileSystem(conf);\n    } catch (IOException ioe) {\n      System.err.println(\"FileSystem is inaccessible due to:\\n\"\n          + StringUtils.stringifyException(ioe));\n      return null;\n    }\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return null;\n    }\n    \n    return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf,\n        DFSUtil.getHttpClientScheme(conf));\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
          "extendedDetails": {}
        }
      ]
    },
    "045dc880e13271737b3cf316296e92fb95806663": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-5312. Generate HTTP/HTTPS URL in DFSUtil#getInfoServer() based on the configured http policy. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/12/13 10:01 AM",
      "commitName": "045dc880e13271737b3cf316296e92fb95806663",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5312. Generate HTTP/HTTPS URL in DFSUtil#getInfoServer() based on the configured http policy. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548629 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/12/13 10:01 AM",
          "commitName": "045dc880e13271737b3cf316296e92fb95806663",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "27/11/13 2:59 AM",
          "commitNameOld": "b6d483b1221296be408df66bc56b37765ce196de",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 9.29,
          "commitsBetweenForRepo": 54,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,21 @@\n-  private String getCurrentNamenodeAddress() throws IOException {\n+  private URI getCurrentNamenodeAddress() throws IOException {\n     //String nnAddress \u003d null;\n     Configuration conf \u003d getConf();\n \n     //get the filesystem object to verify it is an HDFS system\n     FileSystem fs;\n     try {\n       fs \u003d FileSystem.get(conf);\n     } catch (IOException ioe) {\n       System.err.println(\"FileSystem is inaccessible due to:\\n\"\n           + StringUtils.stringifyException(ioe));\n       return null;\n     }\n     if (!(fs instanceof DistributedFileSystem)) {\n       System.err.println(\"FileSystem is \" + fs.getUri());\n       return null;\n     }\n     \n-    return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf, false);\n+    return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf,\n+        DFSUtil.getHttpClientScheme(conf));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private URI getCurrentNamenodeAddress() throws IOException {\n    //String nnAddress \u003d null;\n    Configuration conf \u003d getConf();\n\n    //get the filesystem object to verify it is an HDFS system\n    FileSystem fs;\n    try {\n      fs \u003d FileSystem.get(conf);\n    } catch (IOException ioe) {\n      System.err.println(\"FileSystem is inaccessible due to:\\n\"\n          + StringUtils.stringifyException(ioe));\n      return null;\n    }\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return null;\n    }\n    \n    return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf,\n        DFSUtil.getHttpClientScheme(conf));\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
          "extendedDetails": {
            "oldValue": "String",
            "newValue": "URI"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5312. Generate HTTP/HTTPS URL in DFSUtil#getInfoServer() based on the configured http policy. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548629 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/12/13 10:01 AM",
          "commitName": "045dc880e13271737b3cf316296e92fb95806663",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "27/11/13 2:59 AM",
          "commitNameOld": "b6d483b1221296be408df66bc56b37765ce196de",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 9.29,
          "commitsBetweenForRepo": 54,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,21 @@\n-  private String getCurrentNamenodeAddress() throws IOException {\n+  private URI getCurrentNamenodeAddress() throws IOException {\n     //String nnAddress \u003d null;\n     Configuration conf \u003d getConf();\n \n     //get the filesystem object to verify it is an HDFS system\n     FileSystem fs;\n     try {\n       fs \u003d FileSystem.get(conf);\n     } catch (IOException ioe) {\n       System.err.println(\"FileSystem is inaccessible due to:\\n\"\n           + StringUtils.stringifyException(ioe));\n       return null;\n     }\n     if (!(fs instanceof DistributedFileSystem)) {\n       System.err.println(\"FileSystem is \" + fs.getUri());\n       return null;\n     }\n     \n-    return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf, false);\n+    return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf,\n+        DFSUtil.getHttpClientScheme(conf));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private URI getCurrentNamenodeAddress() throws IOException {\n    //String nnAddress \u003d null;\n    Configuration conf \u003d getConf();\n\n    //get the filesystem object to verify it is an HDFS system\n    FileSystem fs;\n    try {\n      fs \u003d FileSystem.get(conf);\n    } catch (IOException ioe) {\n      System.err.println(\"FileSystem is inaccessible due to:\\n\"\n          + StringUtils.stringifyException(ioe));\n      return null;\n    }\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return null;\n    }\n    \n    return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf,\n        DFSUtil.getHttpClientScheme(conf));\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
          "extendedDetails": {}
        }
      ]
    },
    "5dbbe0e0a5d31689d3425e490865f95057dc051c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2617. Replaced Kerberized SSL for image transfer and fsck with SPNEGO-based solution. Contributed by Jakob Homan, Alejandro Abdelnur, and Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1334216 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/12 2:58 PM",
      "commitName": "5dbbe0e0a5d31689d3425e490865f95057dc051c",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "26/03/12 10:02 AM",
      "commitNameOld": "ce1a7ec9755f17527c29b0db713d7e01750e10c9",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 39.21,
      "commitsBetweenForRepo": 316,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   private String getCurrentNamenodeAddress() throws IOException {\n     //String nnAddress \u003d null;\n     Configuration conf \u003d getConf();\n \n     //get the filesystem object to verify it is an HDFS system\n     FileSystem fs;\n     try {\n       fs \u003d FileSystem.get(conf);\n     } catch (IOException ioe) {\n       System.err.println(\"FileSystem is inaccessible due to:\\n\"\n           + StringUtils.stringifyException(ioe));\n       return null;\n     }\n     if (!(fs instanceof DistributedFileSystem)) {\n       System.err.println(\"FileSystem is \" + fs.getUri());\n       return null;\n     }\n     \n-    return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf, true);\n+    return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf, false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String getCurrentNamenodeAddress() throws IOException {\n    //String nnAddress \u003d null;\n    Configuration conf \u003d getConf();\n\n    //get the filesystem object to verify it is an HDFS system\n    FileSystem fs;\n    try {\n      fs \u003d FileSystem.get(conf);\n    } catch (IOException ioe) {\n      System.err.println(\"FileSystem is inaccessible due to:\\n\"\n          + StringUtils.stringifyException(ioe));\n      return null;\n    }\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return null;\n    }\n    \n    return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf, false);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
      "extendedDetails": {}
    },
    "ce1a7ec9755f17527c29b0db713d7e01750e10c9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2941. Add an administrative command to download a copy of the fsimage from the NN. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305447 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/12 10:02 AM",
      "commitName": "ce1a7ec9755f17527c29b0db713d7e01750e10c9",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "12/03/12 12:41 PM",
      "commitNameOld": "1a75ec82885e45baf4d5cd56d6c738d8e68d8bc7",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 13.89,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,20 @@\n   private String getCurrentNamenodeAddress() throws IOException {\n     //String nnAddress \u003d null;\n     Configuration conf \u003d getConf();\n \n     //get the filesystem object to verify it is an HDFS system\n     FileSystem fs;\n     try {\n       fs \u003d FileSystem.get(conf);\n     } catch (IOException ioe) {\n       System.err.println(\"FileSystem is inaccessible due to:\\n\"\n           + StringUtils.stringifyException(ioe));\n       return null;\n     }\n     if (!(fs instanceof DistributedFileSystem)) {\n       System.err.println(\"FileSystem is \" + fs.getUri());\n       return null;\n     }\n     \n-    // force client address resolution.\n-    fs.exists(new Path(\"/\"));\n-    \n-    // Derive the nameservice ID from the filesystem connection. The URI may\n-    // have been provided by a human, the server name may be aliased, or there\n-    // may be multiple possible actual addresses (e.g. in an HA setup) so\n-    // compare InetSocketAddresses instead of URI strings, and test against both\n-    // possible configurations of RPC address (DFS_NAMENODE_RPC_ADDRESS_KEY and\n-    // DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY).\n-    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n-    DFSClient dfsClient \u003d dfs.getClient();\n-    InetSocketAddress addr \u003d RPC.getServerAddress(dfsClient.getNamenode());\n-    \n-    return DFSUtil.getInfoServer(addr, conf, true);\n+    return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf, true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String getCurrentNamenodeAddress() throws IOException {\n    //String nnAddress \u003d null;\n    Configuration conf \u003d getConf();\n\n    //get the filesystem object to verify it is an HDFS system\n    FileSystem fs;\n    try {\n      fs \u003d FileSystem.get(conf);\n    } catch (IOException ioe) {\n      System.err.println(\"FileSystem is inaccessible due to:\\n\"\n          + StringUtils.stringifyException(ioe));\n      return null;\n    }\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return null;\n    }\n    \n    return DFSUtil.getInfoServer(HAUtil.getAddressOfActive(fs), conf, true);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
      "extendedDetails": {}
    },
    "ec6961b39c6e05a1ed0016e815c2e17c052d2462": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-2792. Make fsck work. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1240449 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/02/12 7:10 PM",
      "commitName": "ec6961b39c6e05a1ed0016e815c2e17c052d2462",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-2792. Make fsck work. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1240449 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/02/12 7:10 PM",
          "commitName": "ec6961b39c6e05a1ed0016e815c2e17c052d2462",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "19/11/11 7:58 PM",
          "commitNameOld": "b2313021fd03d9803a04b120d97bfd91fcbd4d36",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 75.97,
          "commitsBetweenForRepo": 460,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,33 @@\n-  private String getCurrentNamenodeAddress() {\n+  private String getCurrentNamenodeAddress() throws IOException {\n     //String nnAddress \u003d null;\n     Configuration conf \u003d getConf();\n \n     //get the filesystem object to verify it is an HDFS system\n     FileSystem fs;\n     try {\n       fs \u003d FileSystem.get(conf);\n     } catch (IOException ioe) {\n       System.err.println(\"FileSystem is inaccessible due to:\\n\"\n           + StringUtils.stringifyException(ioe));\n       return null;\n     }\n     if (!(fs instanceof DistributedFileSystem)) {\n       System.err.println(\"FileSystem is \" + fs.getUri());\n       return null;\n     }\n-    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n-\n-    // Derive the nameservice ID from the filesystem URI.\n-    // The URI may have been provided by a human, and the server name may be\n-    // aliased, so compare InetSocketAddresses instead of URI strings, and\n-    // test against both possible variants of RPC address.\n-    InetSocketAddress namenode \u003d \n-      NameNode.getAddress(dfs.getUri().getAuthority());\n     \n-    return DFSUtil.getInfoServer(namenode, conf, true);\n+    // force client address resolution.\n+    fs.exists(new Path(\"/\"));\n+    \n+    // Derive the nameservice ID from the filesystem connection. The URI may\n+    // have been provided by a human, the server name may be aliased, or there\n+    // may be multiple possible actual addresses (e.g. in an HA setup) so\n+    // compare InetSocketAddresses instead of URI strings, and test against both\n+    // possible configurations of RPC address (DFS_NAMENODE_RPC_ADDRESS_KEY and\n+    // DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY).\n+    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n+    DFSClient dfsClient \u003d dfs.getClient();\n+    InetSocketAddress addr \u003d RPC.getServerAddress(dfsClient.getNamenode());\n+    \n+    return DFSUtil.getInfoServer(addr, conf, true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String getCurrentNamenodeAddress() throws IOException {\n    //String nnAddress \u003d null;\n    Configuration conf \u003d getConf();\n\n    //get the filesystem object to verify it is an HDFS system\n    FileSystem fs;\n    try {\n      fs \u003d FileSystem.get(conf);\n    } catch (IOException ioe) {\n      System.err.println(\"FileSystem is inaccessible due to:\\n\"\n          + StringUtils.stringifyException(ioe));\n      return null;\n    }\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return null;\n    }\n    \n    // force client address resolution.\n    fs.exists(new Path(\"/\"));\n    \n    // Derive the nameservice ID from the filesystem connection. The URI may\n    // have been provided by a human, the server name may be aliased, or there\n    // may be multiple possible actual addresses (e.g. in an HA setup) so\n    // compare InetSocketAddresses instead of URI strings, and test against both\n    // possible configurations of RPC address (DFS_NAMENODE_RPC_ADDRESS_KEY and\n    // DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY).\n    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n    DFSClient dfsClient \u003d dfs.getClient();\n    InetSocketAddress addr \u003d RPC.getServerAddress(dfsClient.getNamenode());\n    \n    return DFSUtil.getInfoServer(addr, conf, true);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2792. Make fsck work. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1240449 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/02/12 7:10 PM",
          "commitName": "ec6961b39c6e05a1ed0016e815c2e17c052d2462",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "19/11/11 7:58 PM",
          "commitNameOld": "b2313021fd03d9803a04b120d97bfd91fcbd4d36",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 75.97,
          "commitsBetweenForRepo": 460,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,33 @@\n-  private String getCurrentNamenodeAddress() {\n+  private String getCurrentNamenodeAddress() throws IOException {\n     //String nnAddress \u003d null;\n     Configuration conf \u003d getConf();\n \n     //get the filesystem object to verify it is an HDFS system\n     FileSystem fs;\n     try {\n       fs \u003d FileSystem.get(conf);\n     } catch (IOException ioe) {\n       System.err.println(\"FileSystem is inaccessible due to:\\n\"\n           + StringUtils.stringifyException(ioe));\n       return null;\n     }\n     if (!(fs instanceof DistributedFileSystem)) {\n       System.err.println(\"FileSystem is \" + fs.getUri());\n       return null;\n     }\n-    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n-\n-    // Derive the nameservice ID from the filesystem URI.\n-    // The URI may have been provided by a human, and the server name may be\n-    // aliased, so compare InetSocketAddresses instead of URI strings, and\n-    // test against both possible variants of RPC address.\n-    InetSocketAddress namenode \u003d \n-      NameNode.getAddress(dfs.getUri().getAuthority());\n     \n-    return DFSUtil.getInfoServer(namenode, conf, true);\n+    // force client address resolution.\n+    fs.exists(new Path(\"/\"));\n+    \n+    // Derive the nameservice ID from the filesystem connection. The URI may\n+    // have been provided by a human, the server name may be aliased, or there\n+    // may be multiple possible actual addresses (e.g. in an HA setup) so\n+    // compare InetSocketAddresses instead of URI strings, and test against both\n+    // possible configurations of RPC address (DFS_NAMENODE_RPC_ADDRESS_KEY and\n+    // DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY).\n+    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n+    DFSClient dfsClient \u003d dfs.getClient();\n+    InetSocketAddress addr \u003d RPC.getServerAddress(dfsClient.getNamenode());\n+    \n+    return DFSUtil.getInfoServer(addr, conf, true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String getCurrentNamenodeAddress() throws IOException {\n    //String nnAddress \u003d null;\n    Configuration conf \u003d getConf();\n\n    //get the filesystem object to verify it is an HDFS system\n    FileSystem fs;\n    try {\n      fs \u003d FileSystem.get(conf);\n    } catch (IOException ioe) {\n      System.err.println(\"FileSystem is inaccessible due to:\\n\"\n          + StringUtils.stringifyException(ioe));\n      return null;\n    }\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return null;\n    }\n    \n    // force client address resolution.\n    fs.exists(new Path(\"/\"));\n    \n    // Derive the nameservice ID from the filesystem connection. The URI may\n    // have been provided by a human, the server name may be aliased, or there\n    // may be multiple possible actual addresses (e.g. in an HA setup) so\n    // compare InetSocketAddresses instead of URI strings, and test against both\n    // possible configurations of RPC address (DFS_NAMENODE_RPC_ADDRESS_KEY and\n    // DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY).\n    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n    DFSClient dfsClient \u003d dfs.getClient();\n    InetSocketAddress addr \u003d RPC.getServerAddress(dfsClient.getNamenode());\n    \n    return DFSUtil.getInfoServer(addr, conf, true);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private String getCurrentNamenodeAddress() {\n    //String nnAddress \u003d null;\n    Configuration conf \u003d getConf();\n\n    //get the filesystem object to verify it is an HDFS system\n    FileSystem fs;\n    try {\n      fs \u003d FileSystem.get(conf);\n    } catch (IOException ioe) {\n      System.err.println(\"FileSystem is inaccessible due to:\\n\"\n          + StringUtils.stringifyException(ioe));\n      return null;\n    }\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return null;\n    }\n    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n\n    // Derive the nameservice ID from the filesystem URI.\n    // The URI may have been provided by a human, and the server name may be\n    // aliased, so compare InetSocketAddresses instead of URI strings, and\n    // test against both possible variants of RPC address.\n    InetSocketAddress namenode \u003d \n      NameNode.getAddress(dfs.getUri().getAuthority());\n    \n    return DFSUtil.getInfoServer(namenode, conf, true);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private String getCurrentNamenodeAddress() {\n    //String nnAddress \u003d null;\n    Configuration conf \u003d getConf();\n\n    //get the filesystem object to verify it is an HDFS system\n    FileSystem fs;\n    try {\n      fs \u003d FileSystem.get(conf);\n    } catch (IOException ioe) {\n      System.err.println(\"FileSystem is inaccessible due to:\\n\"\n          + StringUtils.stringifyException(ioe));\n      return null;\n    }\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return null;\n    }\n    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n\n    // Derive the nameservice ID from the filesystem URI.\n    // The URI may have been provided by a human, and the server name may be\n    // aliased, so compare InetSocketAddresses instead of URI strings, and\n    // test against both possible variants of RPC address.\n    InetSocketAddress namenode \u003d \n      NameNode.getAddress(dfs.getUri().getAuthority());\n    \n    return DFSUtil.getInfoServer(namenode, conf, true);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/tools/DFSck.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,28 @@\n+  private String getCurrentNamenodeAddress() {\n+    //String nnAddress \u003d null;\n+    Configuration conf \u003d getConf();\n+\n+    //get the filesystem object to verify it is an HDFS system\n+    FileSystem fs;\n+    try {\n+      fs \u003d FileSystem.get(conf);\n+    } catch (IOException ioe) {\n+      System.err.println(\"FileSystem is inaccessible due to:\\n\"\n+          + StringUtils.stringifyException(ioe));\n+      return null;\n+    }\n+    if (!(fs instanceof DistributedFileSystem)) {\n+      System.err.println(\"FileSystem is \" + fs.getUri());\n+      return null;\n+    }\n+    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n+\n+    // Derive the nameservice ID from the filesystem URI.\n+    // The URI may have been provided by a human, and the server name may be\n+    // aliased, so compare InetSocketAddresses instead of URI strings, and\n+    // test against both possible variants of RPC address.\n+    InetSocketAddress namenode \u003d \n+      NameNode.getAddress(dfs.getUri().getAuthority());\n+    \n+    return DFSUtil.getInfoServer(namenode, conf, true);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String getCurrentNamenodeAddress() {\n    //String nnAddress \u003d null;\n    Configuration conf \u003d getConf();\n\n    //get the filesystem object to verify it is an HDFS system\n    FileSystem fs;\n    try {\n      fs \u003d FileSystem.get(conf);\n    } catch (IOException ioe) {\n      System.err.println(\"FileSystem is inaccessible due to:\\n\"\n          + StringUtils.stringifyException(ioe));\n      return null;\n    }\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return null;\n    }\n    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n\n    // Derive the nameservice ID from the filesystem URI.\n    // The URI may have been provided by a human, and the server name may be\n    // aliased, so compare InetSocketAddresses instead of URI strings, and\n    // test against both possible variants of RPC address.\n    InetSocketAddress namenode \u003d \n      NameNode.getAddress(dfs.getUri().getAuthority());\n    \n    return DFSUtil.getInfoServer(namenode, conf, true);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/tools/DFSck.java"
    }
  }
}