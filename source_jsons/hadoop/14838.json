{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSck.java",
  "functionName": "listCorruptFileBlocks",
  "functionId": "listCorruptFileBlocks___dir-String__baseUrl-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
  "functionStartLine": 176,
  "functionEndLine": 244,
  "numCommitsSeen": 39,
  "timeTaken": 6092,
  "changeHistory": [
    "4023eeba05aefe48384e870da3c95bb3af474514",
    "d8a23834614581a292aad214dddcbcc4bbe86d27",
    "5dbbe0e0a5d31689d3425e490865f95057dc051c",
    "9a3f147fdd5421460889b266ead3a2300323cda2",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "4023eeba05aefe48384e870da3c95bb3af474514": "Ybodychange",
    "d8a23834614581a292aad214dddcbcc4bbe86d27": "Ybodychange",
    "5dbbe0e0a5d31689d3425e490865f95057dc051c": "Ybodychange",
    "9a3f147fdd5421460889b266ead3a2300323cda2": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4023eeba05aefe48384e870da3c95bb3af474514": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13738. fsck -list-corruptfileblocks has infinite loop if user is not privileged. Contributed by Yuen-Kuei Hsueh.\n",
      "commitDate": "13/08/18 5:36 PM",
      "commitName": "4023eeba05aefe48384e870da3c95bb3af474514",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "12/04/18 1:47 AM",
      "commitNameOld": "113af12cfb240ea9a7189bb2701693466eb8e993",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 123.66,
      "commitsBetweenForRepo": 1431,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,69 @@\n   private Integer listCorruptFileBlocks(String dir, String baseUrl)\n       throws IOException {\n     int errCode \u003d -1;\n     int numCorrupt \u003d 0;\n     int cookie \u003d 0;\n     final String noCorruptLine \u003d \"has no CORRUPT files\";\n     final String noMoreCorruptLine \u003d \"has no more CORRUPT files\";\n     final String cookiePrefix \u003d \"Cookie:\";\n     boolean allDone \u003d false;\n     while (!allDone) {\n       final StringBuffer url \u003d new StringBuffer(baseUrl);\n       if (cookie \u003e 0) {\n         url.append(\"\u0026startblockafter\u003d\").append(String.valueOf(cookie));\n       }\n       URL path \u003d new URL(url.toString());\n       URLConnection connection;\n       try {\n         connection \u003d connectionFactory.openConnection(path, isSpnegoEnabled);\n       } catch (AuthenticationException e) {\n         throw new IOException(e);\n       }\n       InputStream stream \u003d connection.getInputStream();\n       BufferedReader input \u003d new BufferedReader(new InputStreamReader(\n           stream, \"UTF-8\"));\n       try {\n         String line \u003d null;\n         while ((line \u003d input.readLine()) !\u003d null) {\n           if (line.startsWith(cookiePrefix)){\n             try{\n               cookie \u003d Integer.parseInt(line.split(\"\\t\")[1]);\n             } catch (Exception e){\n               allDone \u003d true;\n               break;\n             }\n             continue;\n           }\n           if ((line.endsWith(noCorruptLine)) ||\n               (line.endsWith(noMoreCorruptLine)) ||\n               (line.endsWith(NamenodeFsck.NONEXISTENT_STATUS))) {\n             allDone \u003d true;\n             break;\n           }\n+          if (line.startsWith(\"Access denied for user\")) {\n+            out.println(\"Failed to open path \u0027\" + dir + \"\u0027: Permission denied\");\n+            errCode \u003d -1;\n+            return errCode;\n+          }\n           if ((line.isEmpty())\n               || (line.startsWith(\"FSCK started by\"))\n+              || (line.startsWith(\"FSCK ended at\"))\n               || (line.startsWith(\"The filesystem under path\")))\n             continue;\n           numCorrupt++;\n           if (numCorrupt \u003d\u003d 1) {\n             out.println(\"The list of corrupt files under path \u0027\"\n                 + dir + \"\u0027 are:\");\n           }\n           out.println(line);\n         }\n       } finally {\n         input.close();\n       }\n     }\n     out.println(\"The filesystem under path \u0027\" + dir + \"\u0027 has \" \n         + numCorrupt + \" CORRUPT files\");\n     if (numCorrupt \u003d\u003d 0)\n       errCode \u003d 0;\n     return errCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Integer listCorruptFileBlocks(String dir, String baseUrl)\n      throws IOException {\n    int errCode \u003d -1;\n    int numCorrupt \u003d 0;\n    int cookie \u003d 0;\n    final String noCorruptLine \u003d \"has no CORRUPT files\";\n    final String noMoreCorruptLine \u003d \"has no more CORRUPT files\";\n    final String cookiePrefix \u003d \"Cookie:\";\n    boolean allDone \u003d false;\n    while (!allDone) {\n      final StringBuffer url \u003d new StringBuffer(baseUrl);\n      if (cookie \u003e 0) {\n        url.append(\"\u0026startblockafter\u003d\").append(String.valueOf(cookie));\n      }\n      URL path \u003d new URL(url.toString());\n      URLConnection connection;\n      try {\n        connection \u003d connectionFactory.openConnection(path, isSpnegoEnabled);\n      } catch (AuthenticationException e) {\n        throw new IOException(e);\n      }\n      InputStream stream \u003d connection.getInputStream();\n      BufferedReader input \u003d new BufferedReader(new InputStreamReader(\n          stream, \"UTF-8\"));\n      try {\n        String line \u003d null;\n        while ((line \u003d input.readLine()) !\u003d null) {\n          if (line.startsWith(cookiePrefix)){\n            try{\n              cookie \u003d Integer.parseInt(line.split(\"\\t\")[1]);\n            } catch (Exception e){\n              allDone \u003d true;\n              break;\n            }\n            continue;\n          }\n          if ((line.endsWith(noCorruptLine)) ||\n              (line.endsWith(noMoreCorruptLine)) ||\n              (line.endsWith(NamenodeFsck.NONEXISTENT_STATUS))) {\n            allDone \u003d true;\n            break;\n          }\n          if (line.startsWith(\"Access denied for user\")) {\n            out.println(\"Failed to open path \u0027\" + dir + \"\u0027: Permission denied\");\n            errCode \u003d -1;\n            return errCode;\n          }\n          if ((line.isEmpty())\n              || (line.startsWith(\"FSCK started by\"))\n              || (line.startsWith(\"FSCK ended at\"))\n              || (line.startsWith(\"The filesystem under path\")))\n            continue;\n          numCorrupt++;\n          if (numCorrupt \u003d\u003d 1) {\n            out.println(\"The list of corrupt files under path \u0027\"\n                + dir + \"\u0027 are:\");\n          }\n          out.println(line);\n        }\n      } finally {\n        input.close();\n      }\n    }\n    out.println(\"The filesystem under path \u0027\" + dir + \"\u0027 has \" \n        + numCorrupt + \" CORRUPT files\");\n    if (numCorrupt \u003d\u003d 0)\n      errCode \u003d 0;\n    return errCode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
      "extendedDetails": {}
    },
    "d8a23834614581a292aad214dddcbcc4bbe86d27": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5538. URLConnectionFactory should pick up the SSL related configuration by default. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1545491 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/11/13 5:16 PM",
      "commitName": "d8a23834614581a292aad214dddcbcc4bbe86d27",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "14/08/12 5:28 PM",
      "commitNameOld": "28e87740c5797e87a9038d7f151c8b21a5b04592",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 468.03,
      "commitsBetweenForRepo": 2787,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,63 @@\n   private Integer listCorruptFileBlocks(String dir, String baseUrl)\n       throws IOException {\n     int errCode \u003d -1;\n     int numCorrupt \u003d 0;\n     int cookie \u003d 0;\n     final String noCorruptLine \u003d \"has no CORRUPT files\";\n     final String noMoreCorruptLine \u003d \"has no more CORRUPT files\";\n     final String cookiePrefix \u003d \"Cookie:\";\n     boolean allDone \u003d false;\n     while (!allDone) {\n       final StringBuffer url \u003d new StringBuffer(baseUrl);\n       if (cookie \u003e 0) {\n         url.append(\"\u0026startblockafter\u003d\").append(String.valueOf(cookie));\n       }\n       URL path \u003d new URL(url.toString());\n-      URLConnection connection \u003d SecurityUtil.openSecureHttpConnection(path);\n+      URLConnection connection;\n+      try {\n+        connection \u003d connectionFactory.openConnection(path, isSpnegoEnabled);\n+      } catch (AuthenticationException e) {\n+        throw new IOException(e);\n+      }\n       InputStream stream \u003d connection.getInputStream();\n       BufferedReader input \u003d new BufferedReader(new InputStreamReader(\n           stream, \"UTF-8\"));\n       try {\n         String line \u003d null;\n         while ((line \u003d input.readLine()) !\u003d null) {\n           if (line.startsWith(cookiePrefix)){\n             try{\n               cookie \u003d Integer.parseInt(line.split(\"\\t\")[1]);\n             } catch (Exception e){\n               allDone \u003d true;\n               break;\n             }\n             continue;\n           }\n           if ((line.endsWith(noCorruptLine)) ||\n               (line.endsWith(noMoreCorruptLine)) ||\n               (line.endsWith(NamenodeFsck.NONEXISTENT_STATUS))) {\n             allDone \u003d true;\n             break;\n           }\n           if ((line.isEmpty())\n               || (line.startsWith(\"FSCK started by\"))\n               || (line.startsWith(\"The filesystem under path\")))\n             continue;\n           numCorrupt++;\n           if (numCorrupt \u003d\u003d 1) {\n             out.println(\"The list of corrupt files under path \u0027\"\n                 + dir + \"\u0027 are:\");\n           }\n           out.println(line);\n         }\n       } finally {\n         input.close();\n       }\n     }\n     out.println(\"The filesystem under path \u0027\" + dir + \"\u0027 has \" \n         + numCorrupt + \" CORRUPT files\");\n     if (numCorrupt \u003d\u003d 0)\n       errCode \u003d 0;\n     return errCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Integer listCorruptFileBlocks(String dir, String baseUrl)\n      throws IOException {\n    int errCode \u003d -1;\n    int numCorrupt \u003d 0;\n    int cookie \u003d 0;\n    final String noCorruptLine \u003d \"has no CORRUPT files\";\n    final String noMoreCorruptLine \u003d \"has no more CORRUPT files\";\n    final String cookiePrefix \u003d \"Cookie:\";\n    boolean allDone \u003d false;\n    while (!allDone) {\n      final StringBuffer url \u003d new StringBuffer(baseUrl);\n      if (cookie \u003e 0) {\n        url.append(\"\u0026startblockafter\u003d\").append(String.valueOf(cookie));\n      }\n      URL path \u003d new URL(url.toString());\n      URLConnection connection;\n      try {\n        connection \u003d connectionFactory.openConnection(path, isSpnegoEnabled);\n      } catch (AuthenticationException e) {\n        throw new IOException(e);\n      }\n      InputStream stream \u003d connection.getInputStream();\n      BufferedReader input \u003d new BufferedReader(new InputStreamReader(\n          stream, \"UTF-8\"));\n      try {\n        String line \u003d null;\n        while ((line \u003d input.readLine()) !\u003d null) {\n          if (line.startsWith(cookiePrefix)){\n            try{\n              cookie \u003d Integer.parseInt(line.split(\"\\t\")[1]);\n            } catch (Exception e){\n              allDone \u003d true;\n              break;\n            }\n            continue;\n          }\n          if ((line.endsWith(noCorruptLine)) ||\n              (line.endsWith(noMoreCorruptLine)) ||\n              (line.endsWith(NamenodeFsck.NONEXISTENT_STATUS))) {\n            allDone \u003d true;\n            break;\n          }\n          if ((line.isEmpty())\n              || (line.startsWith(\"FSCK started by\"))\n              || (line.startsWith(\"The filesystem under path\")))\n            continue;\n          numCorrupt++;\n          if (numCorrupt \u003d\u003d 1) {\n            out.println(\"The list of corrupt files under path \u0027\"\n                + dir + \"\u0027 are:\");\n          }\n          out.println(line);\n        }\n      } finally {\n        input.close();\n      }\n    }\n    out.println(\"The filesystem under path \u0027\" + dir + \"\u0027 has \" \n        + numCorrupt + \" CORRUPT files\");\n    if (numCorrupt \u003d\u003d 0)\n      errCode \u003d 0;\n    return errCode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
      "extendedDetails": {}
    },
    "5dbbe0e0a5d31689d3425e490865f95057dc051c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2617. Replaced Kerberized SSL for image transfer and fsck with SPNEGO-based solution. Contributed by Jakob Homan, Alejandro Abdelnur, and Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1334216 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/12 2:58 PM",
      "commitName": "5dbbe0e0a5d31689d3425e490865f95057dc051c",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "26/03/12 10:02 AM",
      "commitNameOld": "ce1a7ec9755f17527c29b0db713d7e01750e10c9",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 39.21,
      "commitsBetweenForRepo": 316,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,58 @@\n   private Integer listCorruptFileBlocks(String dir, String baseUrl)\n       throws IOException {\n     int errCode \u003d -1;\n     int numCorrupt \u003d 0;\n     int cookie \u003d 0;\n     final String noCorruptLine \u003d \"has no CORRUPT files\";\n     final String noMoreCorruptLine \u003d \"has no more CORRUPT files\";\n     final String cookiePrefix \u003d \"Cookie:\";\n     boolean allDone \u003d false;\n     while (!allDone) {\n       final StringBuffer url \u003d new StringBuffer(baseUrl);\n       if (cookie \u003e 0) {\n         url.append(\"\u0026startblockafter\u003d\").append(String.valueOf(cookie));\n       }\n       URL path \u003d new URL(url.toString());\n-      SecurityUtil.fetchServiceTicket(path);\n-      URLConnection connection \u003d path.openConnection();\n+      URLConnection connection \u003d SecurityUtil.openSecureHttpConnection(path);\n       InputStream stream \u003d connection.getInputStream();\n       BufferedReader input \u003d new BufferedReader(new InputStreamReader(\n           stream, \"UTF-8\"));\n       try {\n         String line \u003d null;\n         while ((line \u003d input.readLine()) !\u003d null) {\n           if (line.startsWith(cookiePrefix)){\n             try{\n               cookie \u003d Integer.parseInt(line.split(\"\\t\")[1]);\n             } catch (Exception e){\n               allDone \u003d true;\n               break;\n             }\n             continue;\n           }\n           if ((line.endsWith(noCorruptLine)) ||\n               (line.endsWith(noMoreCorruptLine)) ||\n               (line.endsWith(NamenodeFsck.NONEXISTENT_STATUS))) {\n             allDone \u003d true;\n             break;\n           }\n           if ((line.isEmpty())\n               || (line.startsWith(\"FSCK started by\"))\n               || (line.startsWith(\"The filesystem under path\")))\n             continue;\n           numCorrupt++;\n           if (numCorrupt \u003d\u003d 1) {\n             out.println(\"The list of corrupt files under path \u0027\"\n                 + dir + \"\u0027 are:\");\n           }\n           out.println(line);\n         }\n       } finally {\n         input.close();\n       }\n     }\n     out.println(\"The filesystem under path \u0027\" + dir + \"\u0027 has \" \n         + numCorrupt + \" CORRUPT files\");\n     if (numCorrupt \u003d\u003d 0)\n       errCode \u003d 0;\n     return errCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Integer listCorruptFileBlocks(String dir, String baseUrl)\n      throws IOException {\n    int errCode \u003d -1;\n    int numCorrupt \u003d 0;\n    int cookie \u003d 0;\n    final String noCorruptLine \u003d \"has no CORRUPT files\";\n    final String noMoreCorruptLine \u003d \"has no more CORRUPT files\";\n    final String cookiePrefix \u003d \"Cookie:\";\n    boolean allDone \u003d false;\n    while (!allDone) {\n      final StringBuffer url \u003d new StringBuffer(baseUrl);\n      if (cookie \u003e 0) {\n        url.append(\"\u0026startblockafter\u003d\").append(String.valueOf(cookie));\n      }\n      URL path \u003d new URL(url.toString());\n      URLConnection connection \u003d SecurityUtil.openSecureHttpConnection(path);\n      InputStream stream \u003d connection.getInputStream();\n      BufferedReader input \u003d new BufferedReader(new InputStreamReader(\n          stream, \"UTF-8\"));\n      try {\n        String line \u003d null;\n        while ((line \u003d input.readLine()) !\u003d null) {\n          if (line.startsWith(cookiePrefix)){\n            try{\n              cookie \u003d Integer.parseInt(line.split(\"\\t\")[1]);\n            } catch (Exception e){\n              allDone \u003d true;\n              break;\n            }\n            continue;\n          }\n          if ((line.endsWith(noCorruptLine)) ||\n              (line.endsWith(noMoreCorruptLine)) ||\n              (line.endsWith(NamenodeFsck.NONEXISTENT_STATUS))) {\n            allDone \u003d true;\n            break;\n          }\n          if ((line.isEmpty())\n              || (line.startsWith(\"FSCK started by\"))\n              || (line.startsWith(\"The filesystem under path\")))\n            continue;\n          numCorrupt++;\n          if (numCorrupt \u003d\u003d 1) {\n            out.println(\"The list of corrupt files under path \u0027\"\n                + dir + \"\u0027 are:\");\n          }\n          out.println(line);\n        }\n      } finally {\n        input.close();\n      }\n    }\n    out.println(\"The filesystem under path \u0027\" + dir + \"\u0027 has \" \n        + numCorrupt + \" CORRUPT files\");\n    if (numCorrupt \u003d\u003d 0)\n      errCode \u003d 0;\n    return errCode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
      "extendedDetails": {}
    },
    "9a3f147fdd5421460889b266ead3a2300323cda2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2476. More CPU efficient data structure for under-replicated, over-replicated, and invalidated blocks. Contributed by Tomasz Nykiel.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1201991 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/11 5:13 PM",
      "commitName": "9a3f147fdd5421460889b266ead3a2300323cda2",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 82.04,
      "commitsBetweenForRepo": 586,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,59 @@\n   private Integer listCorruptFileBlocks(String dir, String baseUrl)\n       throws IOException {\n     int errCode \u003d -1;\n     int numCorrupt \u003d 0;\n-    String lastBlock \u003d null;\n+    int cookie \u003d 0;\n     final String noCorruptLine \u003d \"has no CORRUPT files\";\n     final String noMoreCorruptLine \u003d \"has no more CORRUPT files\";\n+    final String cookiePrefix \u003d \"Cookie:\";\n     boolean allDone \u003d false;\n     while (!allDone) {\n       final StringBuffer url \u003d new StringBuffer(baseUrl);\n-      if (lastBlock !\u003d null) {\n-        url.append(\"\u0026startblockafter\u003d\").append(lastBlock);\n+      if (cookie \u003e 0) {\n+        url.append(\"\u0026startblockafter\u003d\").append(String.valueOf(cookie));\n       }\n       URL path \u003d new URL(url.toString());\n       SecurityUtil.fetchServiceTicket(path);\n       URLConnection connection \u003d path.openConnection();\n       InputStream stream \u003d connection.getInputStream();\n       BufferedReader input \u003d new BufferedReader(new InputStreamReader(\n           stream, \"UTF-8\"));\n       try {\n         String line \u003d null;\n         while ((line \u003d input.readLine()) !\u003d null) {\n-          if ((line.endsWith(noCorruptLine)) || \n+          if (line.startsWith(cookiePrefix)){\n+            try{\n+              cookie \u003d Integer.parseInt(line.split(\"\\t\")[1]);\n+            } catch (Exception e){\n+              allDone \u003d true;\n+              break;\n+            }\n+            continue;\n+          }\n+          if ((line.endsWith(noCorruptLine)) ||\n               (line.endsWith(noMoreCorruptLine)) ||\n               (line.endsWith(NamenodeFsck.NONEXISTENT_STATUS))) {\n             allDone \u003d true;\n             break;\n           }\n           if ((line.isEmpty())\n-              || (line.startsWith(\"FSCK started by\")) \n+              || (line.startsWith(\"FSCK started by\"))\n               || (line.startsWith(\"The filesystem under path\")))\n             continue;\n           numCorrupt++;\n           if (numCorrupt \u003d\u003d 1) {\n-            out.println(\"The list of corrupt files under path \u0027\" \n+            out.println(\"The list of corrupt files under path \u0027\"\n                 + dir + \"\u0027 are:\");\n           }\n           out.println(line);\n-          try {\n-            // Get the block # that we need to send in next call\n-            lastBlock \u003d line.split(\"\\t\")[0];\n-          } catch (Exception e) {\n-            allDone \u003d true;\n-            break;\n-          }\n         }\n       } finally {\n         input.close();\n       }\n     }\n     out.println(\"The filesystem under path \u0027\" + dir + \"\u0027 has \" \n         + numCorrupt + \" CORRUPT files\");\n     if (numCorrupt \u003d\u003d 0)\n       errCode \u003d 0;\n     return errCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Integer listCorruptFileBlocks(String dir, String baseUrl)\n      throws IOException {\n    int errCode \u003d -1;\n    int numCorrupt \u003d 0;\n    int cookie \u003d 0;\n    final String noCorruptLine \u003d \"has no CORRUPT files\";\n    final String noMoreCorruptLine \u003d \"has no more CORRUPT files\";\n    final String cookiePrefix \u003d \"Cookie:\";\n    boolean allDone \u003d false;\n    while (!allDone) {\n      final StringBuffer url \u003d new StringBuffer(baseUrl);\n      if (cookie \u003e 0) {\n        url.append(\"\u0026startblockafter\u003d\").append(String.valueOf(cookie));\n      }\n      URL path \u003d new URL(url.toString());\n      SecurityUtil.fetchServiceTicket(path);\n      URLConnection connection \u003d path.openConnection();\n      InputStream stream \u003d connection.getInputStream();\n      BufferedReader input \u003d new BufferedReader(new InputStreamReader(\n          stream, \"UTF-8\"));\n      try {\n        String line \u003d null;\n        while ((line \u003d input.readLine()) !\u003d null) {\n          if (line.startsWith(cookiePrefix)){\n            try{\n              cookie \u003d Integer.parseInt(line.split(\"\\t\")[1]);\n            } catch (Exception e){\n              allDone \u003d true;\n              break;\n            }\n            continue;\n          }\n          if ((line.endsWith(noCorruptLine)) ||\n              (line.endsWith(noMoreCorruptLine)) ||\n              (line.endsWith(NamenodeFsck.NONEXISTENT_STATUS))) {\n            allDone \u003d true;\n            break;\n          }\n          if ((line.isEmpty())\n              || (line.startsWith(\"FSCK started by\"))\n              || (line.startsWith(\"The filesystem under path\")))\n            continue;\n          numCorrupt++;\n          if (numCorrupt \u003d\u003d 1) {\n            out.println(\"The list of corrupt files under path \u0027\"\n                + dir + \"\u0027 are:\");\n          }\n          out.println(line);\n        }\n      } finally {\n        input.close();\n      }\n    }\n    out.println(\"The filesystem under path \u0027\" + dir + \"\u0027 has \" \n        + numCorrupt + \" CORRUPT files\");\n    if (numCorrupt \u003d\u003d 0)\n      errCode \u003d 0;\n    return errCode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Integer listCorruptFileBlocks(String dir, String baseUrl)\n      throws IOException {\n    int errCode \u003d -1;\n    int numCorrupt \u003d 0;\n    String lastBlock \u003d null;\n    final String noCorruptLine \u003d \"has no CORRUPT files\";\n    final String noMoreCorruptLine \u003d \"has no more CORRUPT files\";\n    boolean allDone \u003d false;\n    while (!allDone) {\n      final StringBuffer url \u003d new StringBuffer(baseUrl);\n      if (lastBlock !\u003d null) {\n        url.append(\"\u0026startblockafter\u003d\").append(lastBlock);\n      }\n      URL path \u003d new URL(url.toString());\n      SecurityUtil.fetchServiceTicket(path);\n      URLConnection connection \u003d path.openConnection();\n      InputStream stream \u003d connection.getInputStream();\n      BufferedReader input \u003d new BufferedReader(new InputStreamReader(\n          stream, \"UTF-8\"));\n      try {\n        String line \u003d null;\n        while ((line \u003d input.readLine()) !\u003d null) {\n          if ((line.endsWith(noCorruptLine)) || \n              (line.endsWith(noMoreCorruptLine)) ||\n              (line.endsWith(NamenodeFsck.NONEXISTENT_STATUS))) {\n            allDone \u003d true;\n            break;\n          }\n          if ((line.isEmpty())\n              || (line.startsWith(\"FSCK started by\")) \n              || (line.startsWith(\"The filesystem under path\")))\n            continue;\n          numCorrupt++;\n          if (numCorrupt \u003d\u003d 1) {\n            out.println(\"The list of corrupt files under path \u0027\" \n                + dir + \"\u0027 are:\");\n          }\n          out.println(line);\n          try {\n            // Get the block # that we need to send in next call\n            lastBlock \u003d line.split(\"\\t\")[0];\n          } catch (Exception e) {\n            allDone \u003d true;\n            break;\n          }\n        }\n      } finally {\n        input.close();\n      }\n    }\n    out.println(\"The filesystem under path \u0027\" + dir + \"\u0027 has \" \n        + numCorrupt + \" CORRUPT files\");\n    if (numCorrupt \u003d\u003d 0)\n      errCode \u003d 0;\n    return errCode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Integer listCorruptFileBlocks(String dir, String baseUrl)\n      throws IOException {\n    int errCode \u003d -1;\n    int numCorrupt \u003d 0;\n    String lastBlock \u003d null;\n    final String noCorruptLine \u003d \"has no CORRUPT files\";\n    final String noMoreCorruptLine \u003d \"has no more CORRUPT files\";\n    boolean allDone \u003d false;\n    while (!allDone) {\n      final StringBuffer url \u003d new StringBuffer(baseUrl);\n      if (lastBlock !\u003d null) {\n        url.append(\"\u0026startblockafter\u003d\").append(lastBlock);\n      }\n      URL path \u003d new URL(url.toString());\n      SecurityUtil.fetchServiceTicket(path);\n      URLConnection connection \u003d path.openConnection();\n      InputStream stream \u003d connection.getInputStream();\n      BufferedReader input \u003d new BufferedReader(new InputStreamReader(\n          stream, \"UTF-8\"));\n      try {\n        String line \u003d null;\n        while ((line \u003d input.readLine()) !\u003d null) {\n          if ((line.endsWith(noCorruptLine)) || \n              (line.endsWith(noMoreCorruptLine)) ||\n              (line.endsWith(NamenodeFsck.NONEXISTENT_STATUS))) {\n            allDone \u003d true;\n            break;\n          }\n          if ((line.isEmpty())\n              || (line.startsWith(\"FSCK started by\")) \n              || (line.startsWith(\"The filesystem under path\")))\n            continue;\n          numCorrupt++;\n          if (numCorrupt \u003d\u003d 1) {\n            out.println(\"The list of corrupt files under path \u0027\" \n                + dir + \"\u0027 are:\");\n          }\n          out.println(line);\n          try {\n            // Get the block # that we need to send in next call\n            lastBlock \u003d line.split(\"\\t\")[0];\n          } catch (Exception e) {\n            allDone \u003d true;\n            break;\n          }\n        }\n      } finally {\n        input.close();\n      }\n    }\n    out.println(\"The filesystem under path \u0027\" + dir + \"\u0027 has \" \n        + numCorrupt + \" CORRUPT files\");\n    if (numCorrupt \u003d\u003d 0)\n      errCode \u003d 0;\n    return errCode;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/tools/DFSck.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSck.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,56 @@\n+  private Integer listCorruptFileBlocks(String dir, String baseUrl)\n+      throws IOException {\n+    int errCode \u003d -1;\n+    int numCorrupt \u003d 0;\n+    String lastBlock \u003d null;\n+    final String noCorruptLine \u003d \"has no CORRUPT files\";\n+    final String noMoreCorruptLine \u003d \"has no more CORRUPT files\";\n+    boolean allDone \u003d false;\n+    while (!allDone) {\n+      final StringBuffer url \u003d new StringBuffer(baseUrl);\n+      if (lastBlock !\u003d null) {\n+        url.append(\"\u0026startblockafter\u003d\").append(lastBlock);\n+      }\n+      URL path \u003d new URL(url.toString());\n+      SecurityUtil.fetchServiceTicket(path);\n+      URLConnection connection \u003d path.openConnection();\n+      InputStream stream \u003d connection.getInputStream();\n+      BufferedReader input \u003d new BufferedReader(new InputStreamReader(\n+          stream, \"UTF-8\"));\n+      try {\n+        String line \u003d null;\n+        while ((line \u003d input.readLine()) !\u003d null) {\n+          if ((line.endsWith(noCorruptLine)) || \n+              (line.endsWith(noMoreCorruptLine)) ||\n+              (line.endsWith(NamenodeFsck.NONEXISTENT_STATUS))) {\n+            allDone \u003d true;\n+            break;\n+          }\n+          if ((line.isEmpty())\n+              || (line.startsWith(\"FSCK started by\")) \n+              || (line.startsWith(\"The filesystem under path\")))\n+            continue;\n+          numCorrupt++;\n+          if (numCorrupt \u003d\u003d 1) {\n+            out.println(\"The list of corrupt files under path \u0027\" \n+                + dir + \"\u0027 are:\");\n+          }\n+          out.println(line);\n+          try {\n+            // Get the block # that we need to send in next call\n+            lastBlock \u003d line.split(\"\\t\")[0];\n+          } catch (Exception e) {\n+            allDone \u003d true;\n+            break;\n+          }\n+        }\n+      } finally {\n+        input.close();\n+      }\n+    }\n+    out.println(\"The filesystem under path \u0027\" + dir + \"\u0027 has \" \n+        + numCorrupt + \" CORRUPT files\");\n+    if (numCorrupt \u003d\u003d 0)\n+      errCode \u003d 0;\n+    return errCode;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Integer listCorruptFileBlocks(String dir, String baseUrl)\n      throws IOException {\n    int errCode \u003d -1;\n    int numCorrupt \u003d 0;\n    String lastBlock \u003d null;\n    final String noCorruptLine \u003d \"has no CORRUPT files\";\n    final String noMoreCorruptLine \u003d \"has no more CORRUPT files\";\n    boolean allDone \u003d false;\n    while (!allDone) {\n      final StringBuffer url \u003d new StringBuffer(baseUrl);\n      if (lastBlock !\u003d null) {\n        url.append(\"\u0026startblockafter\u003d\").append(lastBlock);\n      }\n      URL path \u003d new URL(url.toString());\n      SecurityUtil.fetchServiceTicket(path);\n      URLConnection connection \u003d path.openConnection();\n      InputStream stream \u003d connection.getInputStream();\n      BufferedReader input \u003d new BufferedReader(new InputStreamReader(\n          stream, \"UTF-8\"));\n      try {\n        String line \u003d null;\n        while ((line \u003d input.readLine()) !\u003d null) {\n          if ((line.endsWith(noCorruptLine)) || \n              (line.endsWith(noMoreCorruptLine)) ||\n              (line.endsWith(NamenodeFsck.NONEXISTENT_STATUS))) {\n            allDone \u003d true;\n            break;\n          }\n          if ((line.isEmpty())\n              || (line.startsWith(\"FSCK started by\")) \n              || (line.startsWith(\"The filesystem under path\")))\n            continue;\n          numCorrupt++;\n          if (numCorrupt \u003d\u003d 1) {\n            out.println(\"The list of corrupt files under path \u0027\" \n                + dir + \"\u0027 are:\");\n          }\n          out.println(line);\n          try {\n            // Get the block # that we need to send in next call\n            lastBlock \u003d line.split(\"\\t\")[0];\n          } catch (Exception e) {\n            allDone \u003d true;\n            break;\n          }\n        }\n      } finally {\n        input.close();\n      }\n    }\n    out.println(\"The filesystem under path \u0027\" + dir + \"\u0027 has \" \n        + numCorrupt + \" CORRUPT files\");\n    if (numCorrupt \u003d\u003d 0)\n      errCode \u003d 0;\n    return errCode;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/tools/DFSck.java"
    }
  }
}