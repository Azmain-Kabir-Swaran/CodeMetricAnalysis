{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSRunner.java",
  "functionName": "run",
  "functionId": "run___argv-String[](modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
  "functionStartLine": 947,
  "functionEndLine": 1032,
  "numCommitsSeen": 40,
  "timeTaken": 1480,
  "changeHistory": [
    "de69d6e81128470dd5d2fd865d4b3a79188f740b"
  ],
  "changeHistoryShort": {
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
      "commitDate": "20/04/17 9:54 PM",
      "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,86 @@\n+  public int run(final String[] argv) throws IOException, InterruptedException,\n+      ParseException, ClassNotFoundException, YarnException {\n+\n+    Options options \u003d new Options();\n+\n+    // Left for compatibility\n+    options.addOption(\"inputrumen\", true, \"input rumen files\");\n+    options.addOption(\"inputsls\", true, \"input sls files\");\n+\n+    // New more general format\n+    options.addOption(\"tracetype\", true, \"the type of trace\");\n+    options.addOption(\"tracelocation\", true, \"input trace files\");\n+\n+    options.addOption(\"nodes\", true, \"input topology\");\n+    options.addOption(\"output\", true, \"output directory\");\n+    options.addOption(\"trackjobs\", true,\n+        \"jobs to be tracked during simulating\");\n+    options.addOption(\"printsimulation\", false,\n+        \"print out simulation information\");\n+\n+    CommandLineParser parser \u003d new GnuParser();\n+    CommandLine cmd \u003d parser.parse(options, argv);\n+\n+    String traceType \u003d null;\n+    String traceLocation \u003d null;\n+\n+    // compatibility with old commandline\n+    if (cmd.hasOption(\"inputrumen\")) {\n+      traceType \u003d \"RUMEN\";\n+      traceLocation \u003d cmd.getOptionValue(\"inputrumen\");\n+    }\n+    if (cmd.hasOption(\"inputsls\")) {\n+      traceType \u003d \"SLS\";\n+      traceLocation \u003d cmd.getOptionValue(\"inputsls\");\n+    }\n+\n+    if (cmd.hasOption(\"tracetype\")) {\n+      traceType \u003d cmd.getOptionValue(\"tracetype\");\n+      traceLocation \u003d cmd.getOptionValue(\"tracelocation\");\n+    }\n+\n+    String output \u003d cmd.getOptionValue(\"output\");\n+\n+    File outputFile \u003d new File(output);\n+    if (!outputFile.exists() \u0026\u0026 !outputFile.mkdirs()) {\n+      System.err.println(\"ERROR: Cannot create output directory \"\n+          + outputFile.getAbsolutePath());\n+      throw new YarnException(\"Cannot create output directory\");\n+    }\n+\n+    Set\u003cString\u003e trackedJobSet \u003d new HashSet\u003cString\u003e();\n+    if (cmd.hasOption(\"trackjobs\")) {\n+      String trackjobs \u003d cmd.getOptionValue(\"trackjobs\");\n+      String jobIds[] \u003d trackjobs.split(\",\");\n+      trackedJobSet.addAll(Arrays.asList(jobIds));\n+    }\n+\n+    String tempNodeFile \u003d\n+        cmd.hasOption(\"nodes\") ? cmd.getOptionValue(\"nodes\") : \"\";\n+\n+    TraceType tempTraceType \u003d TraceType.SLS;\n+    switch (traceType) {\n+    case \"SLS\":\n+      tempTraceType \u003d TraceType.SLS;\n+      break;\n+    case \"RUMEN\":\n+      tempTraceType \u003d TraceType.RUMEN;\n+      break;\n+\n+    case \"SYNTH\":\n+      tempTraceType \u003d TraceType.SYNTH;\n+      break;\n+    default:\n+      printUsage();\n+      throw new YarnException(\"Misconfigured input\");\n+    }\n+\n+    String[] inputFiles \u003d traceLocation.split(\",\");\n+\n+    setSimulationParams(tempTraceType, inputFiles, tempNodeFile, output,\n+        trackedJobSet, cmd.hasOption(\"printsimulation\"));\n+\n+    start();\n+\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(final String[] argv) throws IOException, InterruptedException,\n      ParseException, ClassNotFoundException, YarnException {\n\n    Options options \u003d new Options();\n\n    // Left for compatibility\n    options.addOption(\"inputrumen\", true, \"input rumen files\");\n    options.addOption(\"inputsls\", true, \"input sls files\");\n\n    // New more general format\n    options.addOption(\"tracetype\", true, \"the type of trace\");\n    options.addOption(\"tracelocation\", true, \"input trace files\");\n\n    options.addOption(\"nodes\", true, \"input topology\");\n    options.addOption(\"output\", true, \"output directory\");\n    options.addOption(\"trackjobs\", true,\n        \"jobs to be tracked during simulating\");\n    options.addOption(\"printsimulation\", false,\n        \"print out simulation information\");\n\n    CommandLineParser parser \u003d new GnuParser();\n    CommandLine cmd \u003d parser.parse(options, argv);\n\n    String traceType \u003d null;\n    String traceLocation \u003d null;\n\n    // compatibility with old commandline\n    if (cmd.hasOption(\"inputrumen\")) {\n      traceType \u003d \"RUMEN\";\n      traceLocation \u003d cmd.getOptionValue(\"inputrumen\");\n    }\n    if (cmd.hasOption(\"inputsls\")) {\n      traceType \u003d \"SLS\";\n      traceLocation \u003d cmd.getOptionValue(\"inputsls\");\n    }\n\n    if (cmd.hasOption(\"tracetype\")) {\n      traceType \u003d cmd.getOptionValue(\"tracetype\");\n      traceLocation \u003d cmd.getOptionValue(\"tracelocation\");\n    }\n\n    String output \u003d cmd.getOptionValue(\"output\");\n\n    File outputFile \u003d new File(output);\n    if (!outputFile.exists() \u0026\u0026 !outputFile.mkdirs()) {\n      System.err.println(\"ERROR: Cannot create output directory \"\n          + outputFile.getAbsolutePath());\n      throw new YarnException(\"Cannot create output directory\");\n    }\n\n    Set\u003cString\u003e trackedJobSet \u003d new HashSet\u003cString\u003e();\n    if (cmd.hasOption(\"trackjobs\")) {\n      String trackjobs \u003d cmd.getOptionValue(\"trackjobs\");\n      String jobIds[] \u003d trackjobs.split(\",\");\n      trackedJobSet.addAll(Arrays.asList(jobIds));\n    }\n\n    String tempNodeFile \u003d\n        cmd.hasOption(\"nodes\") ? cmd.getOptionValue(\"nodes\") : \"\";\n\n    TraceType tempTraceType \u003d TraceType.SLS;\n    switch (traceType) {\n    case \"SLS\":\n      tempTraceType \u003d TraceType.SLS;\n      break;\n    case \"RUMEN\":\n      tempTraceType \u003d TraceType.RUMEN;\n      break;\n\n    case \"SYNTH\":\n      tempTraceType \u003d TraceType.SYNTH;\n      break;\n    default:\n      printUsage();\n      throw new YarnException(\"Misconfigured input\");\n    }\n\n    String[] inputFiles \u003d traceLocation.split(\",\");\n\n    setSimulationParams(tempTraceType, inputFiles, tempNodeFile, output,\n        trackedJobSet, cmd.hasOption(\"printsimulation\"));\n\n    start();\n\n    return 0;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java"
    }
  }
}