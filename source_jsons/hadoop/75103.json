{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UserGroupInformation.java",
  "functionName": "initialize",
  "functionId": "initialize___conf-Configuration__overrideNameRules-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
  "functionStartLine": 310,
  "functionEndLine": 355,
  "numCommitsSeen": 181,
  "timeTaken": 5253,
  "changeHistory": [
    "bfb9adc2b9e6e97f1036bcf8ea4cee6893a782b2",
    "59cf7588779145ad5850ad63426743dfe03d8347",
    "4c26c241ad2b907dc02cecefa9846cbe2b0465ba",
    "2a1ecd00dadb1577da9e02822469e8194f1d3cee",
    "7eb7b3b723c524ece8ef2247943eb631fefcfe41",
    "66fce20802653ebed492024b01441644e028036a",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5c8d9aecf720c1f1d926093693722b1056a739d1",
    "eb10b152fe69fb0c769e6dbbd08f435033c19c7a",
    "f07af5859978f00ce6366bcc8112c52c41d0070f",
    "f786508cd3e54d4f5df2e93843571dde8961e5a5",
    "0c5734e4aca873f405fbf994e5fe7061e31731c8"
  ],
  "changeHistoryShort": {
    "bfb9adc2b9e6e97f1036bcf8ea4cee6893a782b2": "Ybodychange",
    "59cf7588779145ad5850ad63426743dfe03d8347": "Ybodychange",
    "4c26c241ad2b907dc02cecefa9846cbe2b0465ba": "Ybodychange",
    "2a1ecd00dadb1577da9e02822469e8194f1d3cee": "Ybodychange",
    "7eb7b3b723c524ece8ef2247943eb631fefcfe41": "Ymultichange(Yparameterchange,Ybodychange)",
    "66fce20802653ebed492024b01441644e028036a": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af": "Ybodychange",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5c8d9aecf720c1f1d926093693722b1056a739d1": "Ybodychange",
    "eb10b152fe69fb0c769e6dbbd08f435033c19c7a": "Ybodychange",
    "f07af5859978f00ce6366bcc8112c52c41d0070f": "Ybodychange",
    "f786508cd3e54d4f5df2e93843571dde8961e5a5": "Ybodychange",
    "0c5734e4aca873f405fbf994e5fe7061e31731c8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bfb9adc2b9e6e97f1036bcf8ea4cee6893a782b2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9567. Provide auto-renewal for keytab based logins. Contributed by Hrishikesh Gadre, Gary Helmling  and Harsh J.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "27/10/18 8:59 AM",
      "commitName": "bfb9adc2b9e6e97f1036bcf8ea4cee6893a782b2",
      "commitAuthor": "Hrishikesh Gadre",
      "commitDateOld": "11/10/18 3:35 PM",
      "commitNameOld": "d91d47bc739f23ca22a7e44fc83d449db57ab130",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 15.73,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,46 @@\n   private static synchronized void initialize(Configuration conf,\n                                               boolean overrideNameRules) {\n     authenticationMethod \u003d SecurityUtil.getAuthenticationMethod(conf);\n     if (overrideNameRules || !HadoopKerberosName.hasRulesBeenSet()) {\n       try {\n         HadoopKerberosName.setConfiguration(conf);\n       } catch (IOException ioe) {\n         throw new RuntimeException(\n             \"Problem with Kerberos auth_to_local name configuration\", ioe);\n       }\n     }\n     try {\n         kerberosMinSecondsBeforeRelogin \u003d 1000L * conf.getLong(\n                 HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN,\n                 HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN_DEFAULT);\n     }\n     catch(NumberFormatException nfe) {\n         throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                 HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN + \" of \" +\n                 conf.get(HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN));\n     }\n+\n+    kerberosKeyTabLoginRenewalEnabled \u003d conf.getBoolean(\n+            HADOOP_KERBEROS_KEYTAB_LOGIN_AUTORENEWAL_ENABLED,\n+            HADOOP_KERBEROS_KEYTAB_LOGIN_AUTORENEWAL_ENABLED_DEFAULT);\n+\n     // If we haven\u0027t set up testing groups, use the configuration to find it\n     if (!(groups instanceof TestingGroups)) {\n       groups \u003d Groups.getUserToGroupsMappingService(conf);\n     }\n     UserGroupInformation.conf \u003d conf;\n \n     if (metrics.getGroupsQuantiles \u003d\u003d null) {\n       int[] intervals \u003d conf.getInts(HADOOP_USER_GROUP_METRICS_PERCENTILES_INTERVALS);\n       if (intervals !\u003d null \u0026\u0026 intervals.length \u003e 0) {\n         final int length \u003d intervals.length;\n         MutableQuantiles[] getGroupsQuantiles \u003d new MutableQuantiles[length];\n         for (int i \u003d 0; i \u003c length; i++) {\n           getGroupsQuantiles[i] \u003d metrics.registry.newQuantiles(\n             \"getGroups\" + intervals[i] + \"s\",\n             \"Get groups\", \"ops\", \"latency\", intervals[i]);\n         }\n         metrics.getGroupsQuantiles \u003d getGroupsQuantiles;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static synchronized void initialize(Configuration conf,\n                                              boolean overrideNameRules) {\n    authenticationMethod \u003d SecurityUtil.getAuthenticationMethod(conf);\n    if (overrideNameRules || !HadoopKerberosName.hasRulesBeenSet()) {\n      try {\n        HadoopKerberosName.setConfiguration(conf);\n      } catch (IOException ioe) {\n        throw new RuntimeException(\n            \"Problem with Kerberos auth_to_local name configuration\", ioe);\n      }\n    }\n    try {\n        kerberosMinSecondsBeforeRelogin \u003d 1000L * conf.getLong(\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN,\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN_DEFAULT);\n    }\n    catch(NumberFormatException nfe) {\n        throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN + \" of \" +\n                conf.get(HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN));\n    }\n\n    kerberosKeyTabLoginRenewalEnabled \u003d conf.getBoolean(\n            HADOOP_KERBEROS_KEYTAB_LOGIN_AUTORENEWAL_ENABLED,\n            HADOOP_KERBEROS_KEYTAB_LOGIN_AUTORENEWAL_ENABLED_DEFAULT);\n\n    // If we haven\u0027t set up testing groups, use the configuration to find it\n    if (!(groups instanceof TestingGroups)) {\n      groups \u003d Groups.getUserToGroupsMappingService(conf);\n    }\n    UserGroupInformation.conf \u003d conf;\n\n    if (metrics.getGroupsQuantiles \u003d\u003d null) {\n      int[] intervals \u003d conf.getInts(HADOOP_USER_GROUP_METRICS_PERCENTILES_INTERVALS);\n      if (intervals !\u003d null \u0026\u0026 intervals.length \u003e 0) {\n        final int length \u003d intervals.length;\n        MutableQuantiles[] getGroupsQuantiles \u003d new MutableQuantiles[length];\n        for (int i \u003d 0; i \u003c length; i++) {\n          getGroupsQuantiles[i] \u003d metrics.registry.newQuantiles(\n            \"getGroups\" + intervals[i] + \"s\",\n            \"Get groups\", \"ops\", \"latency\", intervals[i]);\n        }\n        metrics.getGroupsQuantiles \u003d getGroupsQuantiles;\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "59cf7588779145ad5850ad63426743dfe03d8347": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9747. Reduce unnecessary UGI synchronization. Contributed by Daryn Sharp.\n",
      "commitDate": "23/02/18 11:10 AM",
      "commitName": "59cf7588779145ad5850ad63426743dfe03d8347",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "27/12/17 11:17 PM",
      "commitNameOld": "d31c9d8c495794a803fb20729b5ed6b374e23eb4",
      "commitAuthorOld": "Jitendra Pandey",
      "daysBetweenCommits": 57.5,
      "commitsBetweenForRepo": 327,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,41 @@\n   private static synchronized void initialize(Configuration conf,\n                                               boolean overrideNameRules) {\n     authenticationMethod \u003d SecurityUtil.getAuthenticationMethod(conf);\n     if (overrideNameRules || !HadoopKerberosName.hasRulesBeenSet()) {\n       try {\n         HadoopKerberosName.setConfiguration(conf);\n       } catch (IOException ioe) {\n         throw new RuntimeException(\n             \"Problem with Kerberos auth_to_local name configuration\", ioe);\n       }\n     }\n     try {\n         kerberosMinSecondsBeforeRelogin \u003d 1000L * conf.getLong(\n                 HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN,\n                 HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN_DEFAULT);\n     }\n     catch(NumberFormatException nfe) {\n         throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                 HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN + \" of \" +\n                 conf.get(HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN));\n     }\n     // If we haven\u0027t set up testing groups, use the configuration to find it\n     if (!(groups instanceof TestingGroups)) {\n       groups \u003d Groups.getUserToGroupsMappingService(conf);\n     }\n     UserGroupInformation.conf \u003d conf;\n \n     if (metrics.getGroupsQuantiles \u003d\u003d null) {\n       int[] intervals \u003d conf.getInts(HADOOP_USER_GROUP_METRICS_PERCENTILES_INTERVALS);\n       if (intervals !\u003d null \u0026\u0026 intervals.length \u003e 0) {\n         final int length \u003d intervals.length;\n         MutableQuantiles[] getGroupsQuantiles \u003d new MutableQuantiles[length];\n         for (int i \u003d 0; i \u003c length; i++) {\n           getGroupsQuantiles[i] \u003d metrics.registry.newQuantiles(\n             \"getGroups\" + intervals[i] + \"s\",\n             \"Get groups\", \"ops\", \"latency\", intervals[i]);\n         }\n         metrics.getGroupsQuantiles \u003d getGroupsQuantiles;\n       }\n     }\n-\n-    treatSubjectExternal \u003d conf.getBoolean(HADOOP_TREAT_SUBJECT_EXTERNAL_KEY,\n-        HADOOP_TREAT_SUBJECT_EXTERNAL_DEFAULT);\n-    if (treatSubjectExternal) {\n-      LOG.info(\"Config \" + HADOOP_TREAT_SUBJECT_EXTERNAL_KEY + \" is set to \"\n-          + \"true, the owner of the subject passed to \"\n-          + \" UserGroupInformation(Subject) is supposed to renew the \"\n-          + \"credential.\");\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static synchronized void initialize(Configuration conf,\n                                              boolean overrideNameRules) {\n    authenticationMethod \u003d SecurityUtil.getAuthenticationMethod(conf);\n    if (overrideNameRules || !HadoopKerberosName.hasRulesBeenSet()) {\n      try {\n        HadoopKerberosName.setConfiguration(conf);\n      } catch (IOException ioe) {\n        throw new RuntimeException(\n            \"Problem with Kerberos auth_to_local name configuration\", ioe);\n      }\n    }\n    try {\n        kerberosMinSecondsBeforeRelogin \u003d 1000L * conf.getLong(\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN,\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN_DEFAULT);\n    }\n    catch(NumberFormatException nfe) {\n        throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN + \" of \" +\n                conf.get(HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN));\n    }\n    // If we haven\u0027t set up testing groups, use the configuration to find it\n    if (!(groups instanceof TestingGroups)) {\n      groups \u003d Groups.getUserToGroupsMappingService(conf);\n    }\n    UserGroupInformation.conf \u003d conf;\n\n    if (metrics.getGroupsQuantiles \u003d\u003d null) {\n      int[] intervals \u003d conf.getInts(HADOOP_USER_GROUP_METRICS_PERCENTILES_INTERVALS);\n      if (intervals !\u003d null \u0026\u0026 intervals.length \u003e 0) {\n        final int length \u003d intervals.length;\n        MutableQuantiles[] getGroupsQuantiles \u003d new MutableQuantiles[length];\n        for (int i \u003d 0; i \u003c length; i++) {\n          getGroupsQuantiles[i] \u003d metrics.registry.newQuantiles(\n            \"getGroups\" + intervals[i] + \"s\",\n            \"Get groups\", \"ops\", \"latency\", intervals[i]);\n        }\n        metrics.getGroupsQuantiles \u003d getGroupsQuantiles;\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "4c26c241ad2b907dc02cecefa9846cbe2b0465ba": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13805. UGI.getCurrentUser() fails if user does not have a keytab associated. Contributed by Xiao Chen, Wei-Chiu Chuang, Yongjun Zhang.\n",
      "commitDate": "17/02/17 9:18 AM",
      "commitName": "4c26c241ad2b907dc02cecefa9846cbe2b0465ba",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "25/01/17 1:29 PM",
      "commitNameOld": "7fc3e68a876132563aa2321519fc6941e37b2cae",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 22.83,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,50 @@\n   private static synchronized void initialize(Configuration conf,\n                                               boolean overrideNameRules) {\n     authenticationMethod \u003d SecurityUtil.getAuthenticationMethod(conf);\n     if (overrideNameRules || !HadoopKerberosName.hasRulesBeenSet()) {\n       try {\n         HadoopKerberosName.setConfiguration(conf);\n       } catch (IOException ioe) {\n         throw new RuntimeException(\n             \"Problem with Kerberos auth_to_local name configuration\", ioe);\n       }\n     }\n     try {\n         kerberosMinSecondsBeforeRelogin \u003d 1000L * conf.getLong(\n                 HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN,\n                 HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN_DEFAULT);\n     }\n     catch(NumberFormatException nfe) {\n         throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                 HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN + \" of \" +\n                 conf.get(HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN));\n     }\n     // If we haven\u0027t set up testing groups, use the configuration to find it\n     if (!(groups instanceof TestingGroups)) {\n       groups \u003d Groups.getUserToGroupsMappingService(conf);\n     }\n     UserGroupInformation.conf \u003d conf;\n \n     if (metrics.getGroupsQuantiles \u003d\u003d null) {\n       int[] intervals \u003d conf.getInts(HADOOP_USER_GROUP_METRICS_PERCENTILES_INTERVALS);\n       if (intervals !\u003d null \u0026\u0026 intervals.length \u003e 0) {\n         final int length \u003d intervals.length;\n         MutableQuantiles[] getGroupsQuantiles \u003d new MutableQuantiles[length];\n         for (int i \u003d 0; i \u003c length; i++) {\n           getGroupsQuantiles[i] \u003d metrics.registry.newQuantiles(\n             \"getGroups\" + intervals[i] + \"s\",\n             \"Get groups\", \"ops\", \"latency\", intervals[i]);\n         }\n         metrics.getGroupsQuantiles \u003d getGroupsQuantiles;\n       }\n     }\n+\n+    treatSubjectExternal \u003d conf.getBoolean(HADOOP_TREAT_SUBJECT_EXTERNAL_KEY,\n+        HADOOP_TREAT_SUBJECT_EXTERNAL_DEFAULT);\n+    if (treatSubjectExternal) {\n+      LOG.info(\"Config \" + HADOOP_TREAT_SUBJECT_EXTERNAL_KEY + \" is set to \"\n+          + \"true, the owner of the subject passed to \"\n+          + \" UserGroupInformation(Subject) is supposed to renew the \"\n+          + \"credential.\");\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static synchronized void initialize(Configuration conf,\n                                              boolean overrideNameRules) {\n    authenticationMethod \u003d SecurityUtil.getAuthenticationMethod(conf);\n    if (overrideNameRules || !HadoopKerberosName.hasRulesBeenSet()) {\n      try {\n        HadoopKerberosName.setConfiguration(conf);\n      } catch (IOException ioe) {\n        throw new RuntimeException(\n            \"Problem with Kerberos auth_to_local name configuration\", ioe);\n      }\n    }\n    try {\n        kerberosMinSecondsBeforeRelogin \u003d 1000L * conf.getLong(\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN,\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN_DEFAULT);\n    }\n    catch(NumberFormatException nfe) {\n        throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN + \" of \" +\n                conf.get(HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN));\n    }\n    // If we haven\u0027t set up testing groups, use the configuration to find it\n    if (!(groups instanceof TestingGroups)) {\n      groups \u003d Groups.getUserToGroupsMappingService(conf);\n    }\n    UserGroupInformation.conf \u003d conf;\n\n    if (metrics.getGroupsQuantiles \u003d\u003d null) {\n      int[] intervals \u003d conf.getInts(HADOOP_USER_GROUP_METRICS_PERCENTILES_INTERVALS);\n      if (intervals !\u003d null \u0026\u0026 intervals.length \u003e 0) {\n        final int length \u003d intervals.length;\n        MutableQuantiles[] getGroupsQuantiles \u003d new MutableQuantiles[length];\n        for (int i \u003d 0; i \u003c length; i++) {\n          getGroupsQuantiles[i] \u003d metrics.registry.newQuantiles(\n            \"getGroups\" + intervals[i] + \"s\",\n            \"Get groups\", \"ops\", \"latency\", intervals[i]);\n        }\n        metrics.getGroupsQuantiles \u003d getGroupsQuantiles;\n      }\n    }\n\n    treatSubjectExternal \u003d conf.getBoolean(HADOOP_TREAT_SUBJECT_EXTERNAL_KEY,\n        HADOOP_TREAT_SUBJECT_EXTERNAL_DEFAULT);\n    if (treatSubjectExternal) {\n      LOG.info(\"Config \" + HADOOP_TREAT_SUBJECT_EXTERNAL_KEY + \" is set to \"\n          + \"true, the owner of the subject passed to \"\n          + \" UserGroupInformation(Subject) is supposed to renew the \"\n          + \"credential.\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "2a1ecd00dadb1577da9e02822469e8194f1d3cee": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5220. Expose group resolution time as metric (jxiang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1555976 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/01/14 10:59 AM",
      "commitName": "2a1ecd00dadb1577da9e02822469e8194f1d3cee",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "18/12/13 1:20 PM",
      "commitNameOld": "c9d74139bc63a9144a5aab8909be5ebf47445269",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 18.9,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,41 @@\n   private static synchronized void initialize(Configuration conf,\n                                               boolean overrideNameRules) {\n     authenticationMethod \u003d SecurityUtil.getAuthenticationMethod(conf);\n     if (overrideNameRules || !HadoopKerberosName.hasRulesBeenSet()) {\n       try {\n         HadoopKerberosName.setConfiguration(conf);\n       } catch (IOException ioe) {\n         throw new RuntimeException(\n             \"Problem with Kerberos auth_to_local name configuration\", ioe);\n       }\n     }\n     try {\n         kerberosMinSecondsBeforeRelogin \u003d 1000L * conf.getLong(\n                 HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN,\n                 HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN_DEFAULT);\n     }\n     catch(NumberFormatException nfe) {\n         throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                 HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN + \" of \" +\n                 conf.get(HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN));\n     }\n     // If we haven\u0027t set up testing groups, use the configuration to find it\n     if (!(groups instanceof TestingGroups)) {\n       groups \u003d Groups.getUserToGroupsMappingService(conf);\n     }\n     UserGroupInformation.conf \u003d conf;\n+\n+    if (metrics.getGroupsQuantiles \u003d\u003d null) {\n+      int[] intervals \u003d conf.getInts(HADOOP_USER_GROUP_METRICS_PERCENTILES_INTERVALS);\n+      if (intervals !\u003d null \u0026\u0026 intervals.length \u003e 0) {\n+        final int length \u003d intervals.length;\n+        MutableQuantiles[] getGroupsQuantiles \u003d new MutableQuantiles[length];\n+        for (int i \u003d 0; i \u003c length; i++) {\n+          getGroupsQuantiles[i] \u003d metrics.registry.newQuantiles(\n+            \"getGroups\" + intervals[i] + \"s\",\n+            \"Get groups\", \"ops\", \"latency\", intervals[i]);\n+        }\n+        metrics.getGroupsQuantiles \u003d getGroupsQuantiles;\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static synchronized void initialize(Configuration conf,\n                                              boolean overrideNameRules) {\n    authenticationMethod \u003d SecurityUtil.getAuthenticationMethod(conf);\n    if (overrideNameRules || !HadoopKerberosName.hasRulesBeenSet()) {\n      try {\n        HadoopKerberosName.setConfiguration(conf);\n      } catch (IOException ioe) {\n        throw new RuntimeException(\n            \"Problem with Kerberos auth_to_local name configuration\", ioe);\n      }\n    }\n    try {\n        kerberosMinSecondsBeforeRelogin \u003d 1000L * conf.getLong(\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN,\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN_DEFAULT);\n    }\n    catch(NumberFormatException nfe) {\n        throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN + \" of \" +\n                conf.get(HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN));\n    }\n    // If we haven\u0027t set up testing groups, use the configuration to find it\n    if (!(groups instanceof TestingGroups)) {\n      groups \u003d Groups.getUserToGroupsMappingService(conf);\n    }\n    UserGroupInformation.conf \u003d conf;\n\n    if (metrics.getGroupsQuantiles \u003d\u003d null) {\n      int[] intervals \u003d conf.getInts(HADOOP_USER_GROUP_METRICS_PERCENTILES_INTERVALS);\n      if (intervals !\u003d null \u0026\u0026 intervals.length \u003e 0) {\n        final int length \u003d intervals.length;\n        MutableQuantiles[] getGroupsQuantiles \u003d new MutableQuantiles[length];\n        for (int i \u003d 0; i \u003c length; i++) {\n          getGroupsQuantiles[i] \u003d metrics.registry.newQuantiles(\n            \"getGroups\" + intervals[i] + \"s\",\n            \"Get groups\", \"ops\", \"latency\", intervals[i]);\n        }\n        metrics.getGroupsQuantiles \u003d getGroupsQuantiles;\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "7eb7b3b723c524ece8ef2247943eb631fefcfe41": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-9299.  kerberos name resolution is kicking in even when kerberos is not configured (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1457763 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/03/13 6:46 AM",
      "commitName": "7eb7b3b723c524ece8ef2247943eb631fefcfe41",
      "commitAuthor": "Daryn Sharp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-9299.  kerberos name resolution is kicking in even when kerberos is not configured (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1457763 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/03/13 6:46 AM",
          "commitName": "7eb7b3b723c524ece8ef2247943eb631fefcfe41",
          "commitAuthor": "Daryn Sharp",
          "commitDateOld": "05/03/13 9:56 AM",
          "commitNameOld": "52703c2d0d9e2ad89d0ffca079e37eee339b89b7",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 12.83,
          "commitsBetweenForRepo": 76,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,27 @@\n-  private static synchronized void initialize(Configuration conf, boolean skipRulesSetting) {\n-    initUGI(conf);\n-    // give the configuration on how to translate Kerberos names\n-    try {\n-      if (!skipRulesSetting) {\n+  private static synchronized void initialize(Configuration conf,\n+                                              boolean overrideNameRules) {\n+    authenticationMethod \u003d SecurityUtil.getAuthenticationMethod(conf);\n+    if (overrideNameRules || !HadoopKerberosName.hasRulesBeenSet()) {\n+      try {\n         HadoopKerberosName.setConfiguration(conf);\n+      } catch (IOException ioe) {\n+        throw new RuntimeException(\n+            \"Problem with Kerberos auth_to_local name configuration\", ioe);\n       }\n-    } catch (IOException ioe) {\n-      throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n-          \"configuration\", ioe);\n     }\n+    try {\n+        kerberosMinSecondsBeforeRelogin \u003d 1000L * conf.getLong(\n+                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN,\n+                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN_DEFAULT);\n+    }\n+    catch(NumberFormatException nfe) {\n+        throw new IllegalArgumentException(\"Invalid attribute value for \" +\n+                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN + \" of \" +\n+                conf.get(HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN));\n+    }\n+    // If we haven\u0027t set up testing groups, use the configuration to find it\n+    if (!(groups instanceof TestingGroups)) {\n+      groups \u003d Groups.getUserToGroupsMappingService(conf);\n+    }\n+    UserGroupInformation.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static synchronized void initialize(Configuration conf,\n                                              boolean overrideNameRules) {\n    authenticationMethod \u003d SecurityUtil.getAuthenticationMethod(conf);\n    if (overrideNameRules || !HadoopKerberosName.hasRulesBeenSet()) {\n      try {\n        HadoopKerberosName.setConfiguration(conf);\n      } catch (IOException ioe) {\n        throw new RuntimeException(\n            \"Problem with Kerberos auth_to_local name configuration\", ioe);\n      }\n    }\n    try {\n        kerberosMinSecondsBeforeRelogin \u003d 1000L * conf.getLong(\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN,\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN_DEFAULT);\n    }\n    catch(NumberFormatException nfe) {\n        throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN + \" of \" +\n                conf.get(HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN));\n    }\n    // If we haven\u0027t set up testing groups, use the configuration to find it\n    if (!(groups instanceof TestingGroups)) {\n      groups \u003d Groups.getUserToGroupsMappingService(conf);\n    }\n    UserGroupInformation.conf \u003d conf;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, skipRulesSetting-boolean]",
            "newValue": "[conf-Configuration, overrideNameRules-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9299.  kerberos name resolution is kicking in even when kerberos is not configured (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1457763 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/03/13 6:46 AM",
          "commitName": "7eb7b3b723c524ece8ef2247943eb631fefcfe41",
          "commitAuthor": "Daryn Sharp",
          "commitDateOld": "05/03/13 9:56 AM",
          "commitNameOld": "52703c2d0d9e2ad89d0ffca079e37eee339b89b7",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 12.83,
          "commitsBetweenForRepo": 76,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,27 @@\n-  private static synchronized void initialize(Configuration conf, boolean skipRulesSetting) {\n-    initUGI(conf);\n-    // give the configuration on how to translate Kerberos names\n-    try {\n-      if (!skipRulesSetting) {\n+  private static synchronized void initialize(Configuration conf,\n+                                              boolean overrideNameRules) {\n+    authenticationMethod \u003d SecurityUtil.getAuthenticationMethod(conf);\n+    if (overrideNameRules || !HadoopKerberosName.hasRulesBeenSet()) {\n+      try {\n         HadoopKerberosName.setConfiguration(conf);\n+      } catch (IOException ioe) {\n+        throw new RuntimeException(\n+            \"Problem with Kerberos auth_to_local name configuration\", ioe);\n       }\n-    } catch (IOException ioe) {\n-      throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n-          \"configuration\", ioe);\n     }\n+    try {\n+        kerberosMinSecondsBeforeRelogin \u003d 1000L * conf.getLong(\n+                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN,\n+                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN_DEFAULT);\n+    }\n+    catch(NumberFormatException nfe) {\n+        throw new IllegalArgumentException(\"Invalid attribute value for \" +\n+                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN + \" of \" +\n+                conf.get(HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN));\n+    }\n+    // If we haven\u0027t set up testing groups, use the configuration to find it\n+    if (!(groups instanceof TestingGroups)) {\n+      groups \u003d Groups.getUserToGroupsMappingService(conf);\n+    }\n+    UserGroupInformation.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static synchronized void initialize(Configuration conf,\n                                              boolean overrideNameRules) {\n    authenticationMethod \u003d SecurityUtil.getAuthenticationMethod(conf);\n    if (overrideNameRules || !HadoopKerberosName.hasRulesBeenSet()) {\n      try {\n        HadoopKerberosName.setConfiguration(conf);\n      } catch (IOException ioe) {\n        throw new RuntimeException(\n            \"Problem with Kerberos auth_to_local name configuration\", ioe);\n      }\n    }\n    try {\n        kerberosMinSecondsBeforeRelogin \u003d 1000L * conf.getLong(\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN,\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN_DEFAULT);\n    }\n    catch(NumberFormatException nfe) {\n        throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN + \" of \" +\n                conf.get(HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN));\n    }\n    // If we haven\u0027t set up testing groups, use the configuration to find it\n    if (!(groups instanceof TestingGroups)) {\n      groups \u003d Groups.getUserToGroupsMappingService(conf);\n    }\n    UserGroupInformation.conf \u003d conf;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
          "extendedDetails": {}
        }
      ]
    },
    "66fce20802653ebed492024b01441644e028036a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-7902. skipping name rules setting (if already set) should be done on UGI initialization only. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212591 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/12/11 11:28 AM",
      "commitName": "66fce20802653ebed492024b01441644e028036a",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-7902. skipping name rules setting (if already set) should be done on UGI initialization only. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212591 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/12/11 11:28 AM",
          "commitName": "66fce20802653ebed492024b01441644e028036a",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "30/11/11 5:13 PM",
          "commitNameOld": "efc83da2a0d8d881904250fb896d45b383a3adf6",
          "commitAuthorOld": "Jitendra Nath Pandey",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,12 @@\n-  private static synchronized void initialize(Configuration conf) {\n+  private static synchronized void initialize(Configuration conf, boolean skipRulesSetting) {\n     initUGI(conf);\n     // give the configuration on how to translate Kerberos names\n     try {\n-      HadoopKerberosName.setConfiguration(conf);\n+      if (!skipRulesSetting) {\n+        HadoopKerberosName.setConfiguration(conf);\n+      }\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n           \"configuration\", ioe);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static synchronized void initialize(Configuration conf, boolean skipRulesSetting) {\n    initUGI(conf);\n    // give the configuration on how to translate Kerberos names\n    try {\n      if (!skipRulesSetting) {\n        HadoopKerberosName.setConfiguration(conf);\n      }\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n          \"configuration\", ioe);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[conf-Configuration, skipRulesSetting-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-7902. skipping name rules setting (if already set) should be done on UGI initialization only. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212591 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/12/11 11:28 AM",
          "commitName": "66fce20802653ebed492024b01441644e028036a",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "30/11/11 5:13 PM",
          "commitNameOld": "efc83da2a0d8d881904250fb896d45b383a3adf6",
          "commitAuthorOld": "Jitendra Nath Pandey",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,12 @@\n-  private static synchronized void initialize(Configuration conf) {\n+  private static synchronized void initialize(Configuration conf, boolean skipRulesSetting) {\n     initUGI(conf);\n     // give the configuration on how to translate Kerberos names\n     try {\n-      HadoopKerberosName.setConfiguration(conf);\n+      if (!skipRulesSetting) {\n+        HadoopKerberosName.setConfiguration(conf);\n+      }\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n           \"configuration\", ioe);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static synchronized void initialize(Configuration conf, boolean skipRulesSetting) {\n    initUGI(conf);\n    // give the configuration on how to translate Kerberos names\n    try {\n      if (!skipRulesSetting) {\n        HadoopKerberosName.setConfiguration(conf);\n      }\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n          \"configuration\", ioe);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static synchronized void initialize(Configuration conf) {\n    initUGI(conf);\n    // give the configuration on how to translate Kerberos names\n    try {\n      HadoopKerberosName.setConfiguration(conf);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n          \"configuration\", ioe);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java"
      }
    },
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7119. add Kerberos HTTP SPNEGO authentication support to Hadoop JT/NN/DN/TT web-consoles. (Alejandro Abdelnur via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 3:31 PM",
      "commitName": "a0f120ce68dddb0cb31b64c89f3224313f3cb5af",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "02/08/11 9:37 AM",
      "commitNameOld": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 17.25,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n   private static synchronized void initialize(Configuration conf) {\n     initUGI(conf);\n     // give the configuration on how to translate Kerberos names\n     try {\n-      KerberosName.setConfiguration(conf);\n+      HadoopKerberosName.setConfiguration(conf);\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n           \"configuration\", ioe);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static synchronized void initialize(Configuration conf) {\n    initUGI(conf);\n    // give the configuration on how to translate Kerberos names\n    try {\n      HadoopKerberosName.setConfiguration(conf);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n          \"configuration\", ioe);\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static synchronized void initialize(Configuration conf) {\n    initUGI(conf);\n    // give the configuration on how to translate Kerberos names\n    try {\n      KerberosName.setConfiguration(conf);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n          \"configuration\", ioe);\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/security/UserGroupInformation.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static synchronized void initialize(Configuration conf) {\n    initUGI(conf);\n    // give the configuration on how to translate Kerberos names\n    try {\n      KerberosName.setConfiguration(conf);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n          \"configuration\", ioe);\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
        "newPath": "common/src/java/org/apache/hadoop/security/UserGroupInformation.java"
      }
    },
    "5c8d9aecf720c1f1d926093693722b1056a739d1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6913. Circular initialization between UserGroupInformation and KerberosName\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@991038 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/08/10 5:10 PM",
      "commitName": "5c8d9aecf720c1f1d926093693722b1056a739d1",
      "commitAuthor": "Boris Shkolnik",
      "commitDateOld": "28/08/10 3:44 PM",
      "commitNameOld": "7efb9640be26aabe3878310e82248a1b6b767a9a",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 2.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,10 @@\n   private static synchronized void initialize(Configuration conf) {\n-    String value \u003d conf.get(HADOOP_SECURITY_AUTHENTICATION);\n-    if (value \u003d\u003d null || \"simple\".equals(value)) {\n-      useKerberos \u003d false;\n-    } else if (\"kerberos\".equals(value)) {\n-      useKerberos \u003d true;\n-    } else {\n-      throw new IllegalArgumentException(\"Invalid attribute value for \" +\n-                                         HADOOP_SECURITY_AUTHENTICATION + \n-                                         \" of \" + value);\n-    }\n-    // If we haven\u0027t set up testing groups, use the configuration to find it\n-    if (!(groups instanceof TestingGroups)) {\n-      groups \u003d Groups.getUserToGroupsMappingService(conf);\n-    }\n-    // Set the configuration for JAAS to be the Hadoop configuration. \n-    // This is done here rather than a static initializer to avoid a\n-    // circular dependence.\n-    javax.security.auth.login.Configuration.setConfiguration\n-        (new HadoopConfiguration());\n-    \n+    initUGI(conf);\n     // give the configuration on how to translate Kerberos names\n     try {\n       KerberosName.setConfiguration(conf);\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n           \"configuration\", ioe);\n     }\n-    isInitialized \u003d true;\n-    UserGroupInformation.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static synchronized void initialize(Configuration conf) {\n    initUGI(conf);\n    // give the configuration on how to translate Kerberos names\n    try {\n      KerberosName.setConfiguration(conf);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n          \"configuration\", ioe);\n    }\n  }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "eb10b152fe69fb0c769e6dbbd08f435033c19c7a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6861. Adds new non-static methods in Credentials to read and write token storage file. Contributed by Jitendra Pandey \u0026 Owen O\u0027Malley.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@966911 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/10 5:05 PM",
      "commitName": "eb10b152fe69fb0c769e6dbbd08f435033c19c7a",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "19/07/10 5:46 PM",
      "commitNameOld": "fa3a3bf5d8f3167f9725a3f91a0f4ae0481f24ea",
      "commitAuthorOld": "Devaraj Das",
      "daysBetweenCommits": 2.97,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   private static synchronized void initialize(Configuration conf) {\n     String value \u003d conf.get(HADOOP_SECURITY_AUTHENTICATION);\n     if (value \u003d\u003d null || \"simple\".equals(value)) {\n       useKerberos \u003d false;\n     } else if (\"kerberos\".equals(value)) {\n       useKerberos \u003d true;\n     } else {\n       throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                                          HADOOP_SECURITY_AUTHENTICATION + \n                                          \" of \" + value);\n     }\n     // If we haven\u0027t set up testing groups, use the configuration to find it\n     if (!(groups instanceof TestingGroups)) {\n       groups \u003d Groups.getUserToGroupsMappingService(conf);\n     }\n     // Set the configuration for JAAS to be the Hadoop configuration. \n     // This is done here rather than a static initializer to avoid a\n     // circular dependence.\n     javax.security.auth.login.Configuration.setConfiguration\n         (new HadoopConfiguration());\n     \n     // give the configuration on how to translate Kerberos names\n     try {\n       KerberosName.setConfiguration(conf);\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n           \"configuration\", ioe);\n     }\n     isInitialized \u003d true;\n+    UserGroupInformation.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static synchronized void initialize(Configuration conf) {\n    String value \u003d conf.get(HADOOP_SECURITY_AUTHENTICATION);\n    if (value \u003d\u003d null || \"simple\".equals(value)) {\n      useKerberos \u003d false;\n    } else if (\"kerberos\".equals(value)) {\n      useKerberos \u003d true;\n    } else {\n      throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                                         HADOOP_SECURITY_AUTHENTICATION + \n                                         \" of \" + value);\n    }\n    // If we haven\u0027t set up testing groups, use the configuration to find it\n    if (!(groups instanceof TestingGroups)) {\n      groups \u003d Groups.getUserToGroupsMappingService(conf);\n    }\n    // Set the configuration for JAAS to be the Hadoop configuration. \n    // This is done here rather than a static initializer to avoid a\n    // circular dependence.\n    javax.security.auth.login.Configuration.setConfiguration\n        (new HadoopConfiguration());\n    \n    // give the configuration on how to translate Kerberos names\n    try {\n      KerberosName.setConfiguration(conf);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n          \"configuration\", ioe);\n    }\n    isInitialized \u003d true;\n    UserGroupInformation.conf \u003d conf;\n  }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "f07af5859978f00ce6366bcc8112c52c41d0070f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6526. Need mapping from long principal names to local OS user names\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@953388 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/10 9:54 AM",
      "commitName": "f07af5859978f00ce6366bcc8112c52c41d0070f",
      "commitAuthor": "Boris Shkolnik",
      "commitDateOld": "07/06/10 2:50 PM",
      "commitNameOld": "42a38a4b587c3f7ffd8f098120c958a100e070b6",
      "commitAuthorOld": "Boris Shkolnik",
      "daysBetweenCommits": 2.79,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,30 @@\n   private static synchronized void initialize(Configuration conf) {\n     String value \u003d conf.get(HADOOP_SECURITY_AUTHENTICATION);\n     if (value \u003d\u003d null || \"simple\".equals(value)) {\n       useKerberos \u003d false;\n     } else if (\"kerberos\".equals(value)) {\n       useKerberos \u003d true;\n     } else {\n       throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                                          HADOOP_SECURITY_AUTHENTICATION + \n                                          \" of \" + value);\n     }\n     // If we haven\u0027t set up testing groups, use the configuration to find it\n     if (!(groups instanceof TestingGroups)) {\n       groups \u003d Groups.getUserToGroupsMappingService(conf);\n     }\n     // Set the configuration for JAAS to be the Hadoop configuration. \n     // This is done here rather than a static initializer to avoid a\n     // circular dependence.\n     javax.security.auth.login.Configuration.setConfiguration\n         (new HadoopConfiguration());\n+    \n+    // give the configuration on how to translate Kerberos names\n+    try {\n+      KerberosName.setConfiguration(conf);\n+    } catch (IOException ioe) {\n+      throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n+          \"configuration\", ioe);\n+    }\n     isInitialized \u003d true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static synchronized void initialize(Configuration conf) {\n    String value \u003d conf.get(HADOOP_SECURITY_AUTHENTICATION);\n    if (value \u003d\u003d null || \"simple\".equals(value)) {\n      useKerberos \u003d false;\n    } else if (\"kerberos\".equals(value)) {\n      useKerberos \u003d true;\n    } else {\n      throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                                         HADOOP_SECURITY_AUTHENTICATION + \n                                         \" of \" + value);\n    }\n    // If we haven\u0027t set up testing groups, use the configuration to find it\n    if (!(groups instanceof TestingGroups)) {\n      groups \u003d Groups.getUserToGroupsMappingService(conf);\n    }\n    // Set the configuration for JAAS to be the Hadoop configuration. \n    // This is done here rather than a static initializer to avoid a\n    // circular dependence.\n    javax.security.auth.login.Configuration.setConfiguration\n        (new HadoopConfiguration());\n    \n    // give the configuration on how to translate Kerberos names\n    try {\n      KerberosName.setConfiguration(conf);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Problem with Kerberos auth_to_local name \" +\n          \"configuration\", ioe);\n    }\n    isInitialized \u003d true;\n  }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "f786508cd3e54d4f5df2e93843571dde8961e5a5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6538. Sets hadoop.security.authentication to simple by default. Contributed by Devaraj Das.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@906388 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/02/10 11:46 PM",
      "commitName": "f786508cd3e54d4f5df2e93843571dde8961e5a5",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "30/01/10 8:04 PM",
      "commitNameOld": "fe0ddc03e115df0e3c17b0c0f9b9376abb817688",
      "commitAuthorOld": "Devaraj Das",
      "daysBetweenCommits": 4.15,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   private static synchronized void initialize(Configuration conf) {\n     String value \u003d conf.get(HADOOP_SECURITY_AUTHENTICATION);\n-    if (\"simple\".equals(value)) {\n+    if (value \u003d\u003d null || \"simple\".equals(value)) {\n       useKerberos \u003d false;\n-    } else if (value \u003d\u003d null || \"kerberos\".equals(value)) {\n+    } else if (\"kerberos\".equals(value)) {\n       useKerberos \u003d true;\n     } else {\n       throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                                          HADOOP_SECURITY_AUTHENTICATION + \n                                          \" of \" + value);\n     }\n     // If we haven\u0027t set up testing groups, use the configuration to find it\n     if (!(groups instanceof TestingGroups)) {\n       groups \u003d Groups.getUserToGroupsMappingService(conf);\n     }\n     // Set the configuration for JAAS to be the Hadoop configuration. \n     // This is done here rather than a static initializer to avoid a\n     // circular dependence.\n     javax.security.auth.login.Configuration.setConfiguration\n         (new HadoopConfiguration());\n     isInitialized \u003d true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static synchronized void initialize(Configuration conf) {\n    String value \u003d conf.get(HADOOP_SECURITY_AUTHENTICATION);\n    if (value \u003d\u003d null || \"simple\".equals(value)) {\n      useKerberos \u003d false;\n    } else if (\"kerberos\".equals(value)) {\n      useKerberos \u003d true;\n    } else {\n      throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                                         HADOOP_SECURITY_AUTHENTICATION + \n                                         \" of \" + value);\n    }\n    // If we haven\u0027t set up testing groups, use the configuration to find it\n    if (!(groups instanceof TestingGroups)) {\n      groups \u003d Groups.getUserToGroupsMappingService(conf);\n    }\n    // Set the configuration for JAAS to be the Hadoop configuration. \n    // This is done here rather than a static initializer to avoid a\n    // circular dependence.\n    javax.security.auth.login.Configuration.setConfiguration\n        (new HadoopConfiguration());\n    isInitialized \u003d true;\n  }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "0c5734e4aca873f405fbf994e5fe7061e31731c8": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6299. Reimplement the UserGroupInformation to use the OS\nspecific and Kerberos JAAS login. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@903560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/10 12:08 AM",
      "commitName": "0c5734e4aca873f405fbf994e5fe7061e31731c8",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,22 @@\n+  private static synchronized void initialize(Configuration conf) {\n+    String value \u003d conf.get(HADOOP_SECURITY_AUTHENTICATION);\n+    if (\"simple\".equals(value)) {\n+      useKerberos \u003d false;\n+    } else if (value \u003d\u003d null || \"kerberos\".equals(value)) {\n+      useKerberos \u003d true;\n+    } else {\n+      throw new IllegalArgumentException(\"Invalid attribute value for \" +\n+                                         HADOOP_SECURITY_AUTHENTICATION + \n+                                         \" of \" + value);\n+    }\n+    // If we haven\u0027t set up testing groups, use the configuration to find it\n+    if (!(groups instanceof TestingGroups)) {\n+      groups \u003d Groups.getUserToGroupsMappingService(conf);\n+    }\n+    // Set the configuration for JAAS to be the Hadoop configuration. \n+    // This is done here rather than a static initializer to avoid a\n+    // circular dependence.\n+    javax.security.auth.login.Configuration.setConfiguration\n+        (new HadoopConfiguration());\n+    isInitialized \u003d true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static synchronized void initialize(Configuration conf) {\n    String value \u003d conf.get(HADOOP_SECURITY_AUTHENTICATION);\n    if (\"simple\".equals(value)) {\n      useKerberos \u003d false;\n    } else if (value \u003d\u003d null || \"kerberos\".equals(value)) {\n      useKerberos \u003d true;\n    } else {\n      throw new IllegalArgumentException(\"Invalid attribute value for \" +\n                                         HADOOP_SECURITY_AUTHENTICATION + \n                                         \" of \" + value);\n    }\n    // If we haven\u0027t set up testing groups, use the configuration to find it\n    if (!(groups instanceof TestingGroups)) {\n      groups \u003d Groups.getUserToGroupsMappingService(conf);\n    }\n    // Set the configuration for JAAS to be the Hadoop configuration. \n    // This is done here rather than a static initializer to avoid a\n    // circular dependence.\n    javax.security.auth.login.Configuration.setConfiguration\n        (new HadoopConfiguration());\n    isInitialized \u003d true;\n  }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java"
    }
  }
}