{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebHdfsFileSystem.java",
  "functionName": "runWithRetry",
  "functionId": "runWithRetry",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
  "functionStartLine": 783,
  "functionEndLine": 836,
  "numCommitsSeen": 253,
  "timeTaken": 6638,
  "changeHistory": [
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
    "4908a8970eaf500642a9d8427e322032c1ec047a",
    "6fcde2e38da04cae3aad6b13cf442af211f71506",
    "3616c7b855962014750a3259a64c6e2a147da884",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
    "0c5128969522cf754010c32cdcbfcfa5ebe5b3b0",
    "e4ee1d111be15ae6cca2f79be7ca73c204288d2b",
    "004d0854b7964d4f748f6e91b2d54a84928843f7",
    "7a2443e9f8b95816c7df61530cda29e8b040b12e",
    "cb787968c5deac3dd5d10291aae39c36656a1487"
  ],
  "changeHistoryShort": {
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73": "Ybodychange",
    "4908a8970eaf500642a9d8427e322032c1ec047a": "Ybodychange",
    "6fcde2e38da04cae3aad6b13cf442af211f71506": "Ybodychange",
    "3616c7b855962014750a3259a64c6e2a147da884": "Ybodychange",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": "Yfilerename",
    "0c5128969522cf754010c32cdcbfcfa5ebe5b3b0": "Ybodychange",
    "e4ee1d111be15ae6cca2f79be7ca73c204288d2b": "Ymultichange(Yreturntypechange,Ybodychange)",
    "004d0854b7964d4f748f6e91b2d54a84928843f7": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
    "7a2443e9f8b95816c7df61530cda29e8b040b12e": "Ymultichange(Yreturntypechange,Ybodychange)",
    "cb787968c5deac3dd5d10291aae39c36656a1487": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12574. Add CryptoInputStream to WebHdfsFileSystem read call. Contributed by Rushabh S Shah\n",
      "commitDate": "29/01/18 3:23 PM",
      "commitName": "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "04/12/17 10:40 AM",
      "commitNameOld": "404eab4dc0582e0384b93664ea6ee77ccd5eeebc",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 56.2,
      "commitsBetweenForRepo": 316,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,54 @@\n     private T runWithRetry() throws IOException {\n       /**\n        * Do the real work.\n        *\n        * There are three cases that the code inside the loop can throw an\n        * IOException:\n        *\n        * \u003cul\u003e\n        * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n        * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n        * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n        * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n        * \u003c/ul\u003e\n        *\n        * The call to shouldRetry() will conduct the retry policy. The policy\n        * examines the exception and swallows it if it decides to rerun the work.\n        */\n       for(int retry \u003d 0; ; retry++) {\n         checkRetry \u003d !redirected;\n         final URL url \u003d getUrl();\n         try {\n           final HttpURLConnection conn \u003d connect(url);\n-          // output streams will validate on close\n-          if (!op.getDoOutput()) {\n-            validateResponse(op, conn, false);\n-          }\n           return getResponse(conn);\n         } catch (AccessControlException ace) {\n           // no retries for auth failures\n           throw ace;\n         } catch (InvalidToken it) {\n           // try to replace the expired token with a new one.  the attempt\n           // to acquire a new token must be outside this operation\u0027s retry\n           // so if it fails after its own retries, this operation fails too.\n           if (op.getRequireAuth() || !replaceExpiredDelegationToken()) {\n             throw it;\n           }\n         } catch (IOException ioe) {\n           // Attempt to include the redirected node in the exception. If the\n           // attempt to recreate the exception fails, just use the original.\n           String node \u003d redirectHost;\n           if (node \u003d\u003d null) {\n             node \u003d url.getAuthority();\n           }\n           try {\n             IOException newIoe \u003d ioe.getClass().getConstructor(String.class)\n                 .newInstance(node + \": \" + ioe.getMessage());\n             newIoe.initCause(ioe.getCause());\n             newIoe.setStackTrace(ioe.getStackTrace());\n             ioe \u003d newIoe;\n           } catch (NoSuchMethodException | SecurityException \n                    | InstantiationException | IllegalAccessException\n                    | IllegalArgumentException | InvocationTargetException e) {\n           }\n           shouldRetry(ioe, retry);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private T runWithRetry() throws IOException {\n      /**\n       * Do the real work.\n       *\n       * There are three cases that the code inside the loop can throw an\n       * IOException:\n       *\n       * \u003cul\u003e\n       * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n       * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n       * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n       * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n       * \u003c/ul\u003e\n       *\n       * The call to shouldRetry() will conduct the retry policy. The policy\n       * examines the exception and swallows it if it decides to rerun the work.\n       */\n      for(int retry \u003d 0; ; retry++) {\n        checkRetry \u003d !redirected;\n        final URL url \u003d getUrl();\n        try {\n          final HttpURLConnection conn \u003d connect(url);\n          return getResponse(conn);\n        } catch (AccessControlException ace) {\n          // no retries for auth failures\n          throw ace;\n        } catch (InvalidToken it) {\n          // try to replace the expired token with a new one.  the attempt\n          // to acquire a new token must be outside this operation\u0027s retry\n          // so if it fails after its own retries, this operation fails too.\n          if (op.getRequireAuth() || !replaceExpiredDelegationToken()) {\n            throw it;\n          }\n        } catch (IOException ioe) {\n          // Attempt to include the redirected node in the exception. If the\n          // attempt to recreate the exception fails, just use the original.\n          String node \u003d redirectHost;\n          if (node \u003d\u003d null) {\n            node \u003d url.getAuthority();\n          }\n          try {\n            IOException newIoe \u003d ioe.getClass().getConstructor(String.class)\n                .newInstance(node + \": \" + ioe.getMessage());\n            newIoe.initCause(ioe.getCause());\n            newIoe.setStackTrace(ioe.getStackTrace());\n            ioe \u003d newIoe;\n          } catch (NoSuchMethodException | SecurityException \n                   | InstantiationException | IllegalAccessException\n                   | IllegalArgumentException | InvocationTargetException e) {\n          }\n          shouldRetry(ioe, retry);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "4908a8970eaf500642a9d8427e322032c1ec047a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12705. WebHdfsFileSystem exceptions should retain the caused by exception. Contributed by Hanisha Koneru.\n",
      "commitDate": "13/11/17 11:30 AM",
      "commitName": "4908a8970eaf500642a9d8427e322032c1ec047a",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "27/10/17 7:43 AM",
      "commitNameOld": "cd2a1dd0630e99e6696a9f0e8dc972604d38046a",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 17.2,
      "commitsBetweenForRepo": 209,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n     private T runWithRetry() throws IOException {\n       /**\n        * Do the real work.\n        *\n        * There are three cases that the code inside the loop can throw an\n        * IOException:\n        *\n        * \u003cul\u003e\n        * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n        * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n        * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n        * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n        * \u003c/ul\u003e\n        *\n        * The call to shouldRetry() will conduct the retry policy. The policy\n        * examines the exception and swallows it if it decides to rerun the work.\n        */\n       for(int retry \u003d 0; ; retry++) {\n         checkRetry \u003d !redirected;\n         final URL url \u003d getUrl();\n         try {\n           final HttpURLConnection conn \u003d connect(url);\n           // output streams will validate on close\n           if (!op.getDoOutput()) {\n             validateResponse(op, conn, false);\n           }\n           return getResponse(conn);\n         } catch (AccessControlException ace) {\n           // no retries for auth failures\n           throw ace;\n         } catch (InvalidToken it) {\n           // try to replace the expired token with a new one.  the attempt\n           // to acquire a new token must be outside this operation\u0027s retry\n           // so if it fails after its own retries, this operation fails too.\n           if (op.getRequireAuth() || !replaceExpiredDelegationToken()) {\n             throw it;\n           }\n         } catch (IOException ioe) {\n           // Attempt to include the redirected node in the exception. If the\n           // attempt to recreate the exception fails, just use the original.\n           String node \u003d redirectHost;\n           if (node \u003d\u003d null) {\n             node \u003d url.getAuthority();\n           }\n           try {\n             IOException newIoe \u003d ioe.getClass().getConstructor(String.class)\n                 .newInstance(node + \": \" + ioe.getMessage());\n+            newIoe.initCause(ioe.getCause());\n             newIoe.setStackTrace(ioe.getStackTrace());\n             ioe \u003d newIoe;\n           } catch (NoSuchMethodException | SecurityException \n                    | InstantiationException | IllegalAccessException\n                    | IllegalArgumentException | InvocationTargetException e) {\n           }\n           shouldRetry(ioe, retry);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private T runWithRetry() throws IOException {\n      /**\n       * Do the real work.\n       *\n       * There are three cases that the code inside the loop can throw an\n       * IOException:\n       *\n       * \u003cul\u003e\n       * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n       * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n       * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n       * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n       * \u003c/ul\u003e\n       *\n       * The call to shouldRetry() will conduct the retry policy. The policy\n       * examines the exception and swallows it if it decides to rerun the work.\n       */\n      for(int retry \u003d 0; ; retry++) {\n        checkRetry \u003d !redirected;\n        final URL url \u003d getUrl();\n        try {\n          final HttpURLConnection conn \u003d connect(url);\n          // output streams will validate on close\n          if (!op.getDoOutput()) {\n            validateResponse(op, conn, false);\n          }\n          return getResponse(conn);\n        } catch (AccessControlException ace) {\n          // no retries for auth failures\n          throw ace;\n        } catch (InvalidToken it) {\n          // try to replace the expired token with a new one.  the attempt\n          // to acquire a new token must be outside this operation\u0027s retry\n          // so if it fails after its own retries, this operation fails too.\n          if (op.getRequireAuth() || !replaceExpiredDelegationToken()) {\n            throw it;\n          }\n        } catch (IOException ioe) {\n          // Attempt to include the redirected node in the exception. If the\n          // attempt to recreate the exception fails, just use the original.\n          String node \u003d redirectHost;\n          if (node \u003d\u003d null) {\n            node \u003d url.getAuthority();\n          }\n          try {\n            IOException newIoe \u003d ioe.getClass().getConstructor(String.class)\n                .newInstance(node + \": \" + ioe.getMessage());\n            newIoe.initCause(ioe.getCause());\n            newIoe.setStackTrace(ioe.getStackTrace());\n            ioe \u003d newIoe;\n          } catch (NoSuchMethodException | SecurityException \n                   | InstantiationException | IllegalAccessException\n                   | IllegalArgumentException | InvocationTargetException e) {\n          }\n          shouldRetry(ioe, retry);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "6fcde2e38da04cae3aad6b13cf442af211f71506": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9905. WebHdfsFileSystem#runWithRetry should display original stack trace on error. (Wei-Chiu Chuang via iwasakims)\n",
      "commitDate": "23/04/16 7:37 AM",
      "commitName": "6fcde2e38da04cae3aad6b13cf442af211f71506",
      "commitAuthor": "Masatake Iwasaki",
      "commitDateOld": "18/02/16 10:07 AM",
      "commitNameOld": "5d1889a66d91608d34ca9411fb6e9161e637e9d3",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 64.85,
      "commitsBetweenForRepo": 404,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,57 @@\n     private T runWithRetry() throws IOException {\n       /**\n        * Do the real work.\n        *\n        * There are three cases that the code inside the loop can throw an\n        * IOException:\n        *\n        * \u003cul\u003e\n        * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n        * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n        * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n        * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n        * \u003c/ul\u003e\n        *\n        * The call to shouldRetry() will conduct the retry policy. The policy\n        * examines the exception and swallows it if it decides to rerun the work.\n        */\n       for(int retry \u003d 0; ; retry++) {\n         checkRetry \u003d !redirected;\n         final URL url \u003d getUrl();\n         try {\n           final HttpURLConnection conn \u003d connect(url);\n           // output streams will validate on close\n           if (!op.getDoOutput()) {\n             validateResponse(op, conn, false);\n           }\n           return getResponse(conn);\n         } catch (AccessControlException ace) {\n           // no retries for auth failures\n           throw ace;\n         } catch (InvalidToken it) {\n           // try to replace the expired token with a new one.  the attempt\n           // to acquire a new token must be outside this operation\u0027s retry\n           // so if it fails after its own retries, this operation fails too.\n           if (op.getRequireAuth() || !replaceExpiredDelegationToken()) {\n             throw it;\n           }\n         } catch (IOException ioe) {\n           // Attempt to include the redirected node in the exception. If the\n           // attempt to recreate the exception fails, just use the original.\n           String node \u003d redirectHost;\n           if (node \u003d\u003d null) {\n             node \u003d url.getAuthority();\n           }\n           try {\n-              ioe \u003d ioe.getClass().getConstructor(String.class)\n-                    .newInstance(node + \": \" + ioe.getMessage());\n+            IOException newIoe \u003d ioe.getClass().getConstructor(String.class)\n+                .newInstance(node + \": \" + ioe.getMessage());\n+            newIoe.setStackTrace(ioe.getStackTrace());\n+            ioe \u003d newIoe;\n           } catch (NoSuchMethodException | SecurityException \n                    | InstantiationException | IllegalAccessException\n                    | IllegalArgumentException | InvocationTargetException e) {\n           }\n           shouldRetry(ioe, retry);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private T runWithRetry() throws IOException {\n      /**\n       * Do the real work.\n       *\n       * There are three cases that the code inside the loop can throw an\n       * IOException:\n       *\n       * \u003cul\u003e\n       * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n       * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n       * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n       * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n       * \u003c/ul\u003e\n       *\n       * The call to shouldRetry() will conduct the retry policy. The policy\n       * examines the exception and swallows it if it decides to rerun the work.\n       */\n      for(int retry \u003d 0; ; retry++) {\n        checkRetry \u003d !redirected;\n        final URL url \u003d getUrl();\n        try {\n          final HttpURLConnection conn \u003d connect(url);\n          // output streams will validate on close\n          if (!op.getDoOutput()) {\n            validateResponse(op, conn, false);\n          }\n          return getResponse(conn);\n        } catch (AccessControlException ace) {\n          // no retries for auth failures\n          throw ace;\n        } catch (InvalidToken it) {\n          // try to replace the expired token with a new one.  the attempt\n          // to acquire a new token must be outside this operation\u0027s retry\n          // so if it fails after its own retries, this operation fails too.\n          if (op.getRequireAuth() || !replaceExpiredDelegationToken()) {\n            throw it;\n          }\n        } catch (IOException ioe) {\n          // Attempt to include the redirected node in the exception. If the\n          // attempt to recreate the exception fails, just use the original.\n          String node \u003d redirectHost;\n          if (node \u003d\u003d null) {\n            node \u003d url.getAuthority();\n          }\n          try {\n            IOException newIoe \u003d ioe.getClass().getConstructor(String.class)\n                .newInstance(node + \": \" + ioe.getMessage());\n            newIoe.setStackTrace(ioe.getStackTrace());\n            ioe \u003d newIoe;\n          } catch (NoSuchMethodException | SecurityException \n                   | InstantiationException | IllegalAccessException\n                   | IllegalArgumentException | InvocationTargetException e) {\n          }\n          shouldRetry(ioe, retry);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "3616c7b855962014750a3259a64c6e2a147da884": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9634. webhdfs client side exceptions don\u0027t provide enough details. Contributed by Eric Payne.\n",
      "commitDate": "21/01/16 7:32 AM",
      "commitName": "3616c7b855962014750a3259a64c6e2a147da884",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "22/12/15 12:08 PM",
      "commitNameOld": "867048c3e4b20ece0039a876def129fa5eb9234f",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 29.81,
      "commitsBetweenForRepo": 153,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,55 @@\n     private T runWithRetry() throws IOException {\n       /**\n        * Do the real work.\n        *\n        * There are three cases that the code inside the loop can throw an\n        * IOException:\n        *\n        * \u003cul\u003e\n        * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n        * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n        * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n        * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n        * \u003c/ul\u003e\n        *\n        * The call to shouldRetry() will conduct the retry policy. The policy\n        * examines the exception and swallows it if it decides to rerun the work.\n        */\n       for(int retry \u003d 0; ; retry++) {\n         checkRetry \u003d !redirected;\n         final URL url \u003d getUrl();\n         try {\n           final HttpURLConnection conn \u003d connect(url);\n           // output streams will validate on close\n           if (!op.getDoOutput()) {\n             validateResponse(op, conn, false);\n           }\n           return getResponse(conn);\n         } catch (AccessControlException ace) {\n           // no retries for auth failures\n           throw ace;\n         } catch (InvalidToken it) {\n           // try to replace the expired token with a new one.  the attempt\n           // to acquire a new token must be outside this operation\u0027s retry\n           // so if it fails after its own retries, this operation fails too.\n           if (op.getRequireAuth() || !replaceExpiredDelegationToken()) {\n             throw it;\n           }\n         } catch (IOException ioe) {\n+          // Attempt to include the redirected node in the exception. If the\n+          // attempt to recreate the exception fails, just use the original.\n+          String node \u003d redirectHost;\n+          if (node \u003d\u003d null) {\n+            node \u003d url.getAuthority();\n+          }\n+          try {\n+              ioe \u003d ioe.getClass().getConstructor(String.class)\n+                    .newInstance(node + \": \" + ioe.getMessage());\n+          } catch (NoSuchMethodException | SecurityException \n+                   | InstantiationException | IllegalAccessException\n+                   | IllegalArgumentException | InvocationTargetException e) {\n+          }\n           shouldRetry(ioe, retry);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private T runWithRetry() throws IOException {\n      /**\n       * Do the real work.\n       *\n       * There are three cases that the code inside the loop can throw an\n       * IOException:\n       *\n       * \u003cul\u003e\n       * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n       * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n       * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n       * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n       * \u003c/ul\u003e\n       *\n       * The call to shouldRetry() will conduct the retry policy. The policy\n       * examines the exception and swallows it if it decides to rerun the work.\n       */\n      for(int retry \u003d 0; ; retry++) {\n        checkRetry \u003d !redirected;\n        final URL url \u003d getUrl();\n        try {\n          final HttpURLConnection conn \u003d connect(url);\n          // output streams will validate on close\n          if (!op.getDoOutput()) {\n            validateResponse(op, conn, false);\n          }\n          return getResponse(conn);\n        } catch (AccessControlException ace) {\n          // no retries for auth failures\n          throw ace;\n        } catch (InvalidToken it) {\n          // try to replace the expired token with a new one.  the attempt\n          // to acquire a new token must be outside this operation\u0027s retry\n          // so if it fails after its own retries, this operation fails too.\n          if (op.getRequireAuth() || !replaceExpiredDelegationToken()) {\n            throw it;\n          }\n        } catch (IOException ioe) {\n          // Attempt to include the redirected node in the exception. If the\n          // attempt to recreate the exception fails, just use the original.\n          String node \u003d redirectHost;\n          if (node \u003d\u003d null) {\n            node \u003d url.getAuthority();\n          }\n          try {\n              ioe \u003d ioe.getClass().getConstructor(String.class)\n                    .newInstance(node + \": \" + ioe.getMessage());\n          } catch (NoSuchMethodException | SecurityException \n                   | InstantiationException | IllegalAccessException\n                   | IllegalArgumentException | InvocationTargetException e) {\n          }\n          shouldRetry(ioe, retry);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8052. Move WebHdfsFileSystem into hadoop-hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "23/04/15 5:33 PM",
      "commitName": "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "23/04/15 4:40 PM",
      "commitNameOld": "0b3f8957a87ada1a275c9904b211fdbdcefafb02",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private T runWithRetry() throws IOException {\n      /**\n       * Do the real work.\n       *\n       * There are three cases that the code inside the loop can throw an\n       * IOException:\n       *\n       * \u003cul\u003e\n       * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n       * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n       * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n       * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n       * \u003c/ul\u003e\n       *\n       * The call to shouldRetry() will conduct the retry policy. The policy\n       * examines the exception and swallows it if it decides to rerun the work.\n       */\n      for(int retry \u003d 0; ; retry++) {\n        checkRetry \u003d !redirected;\n        final URL url \u003d getUrl();\n        try {\n          final HttpURLConnection conn \u003d connect(url);\n          // output streams will validate on close\n          if (!op.getDoOutput()) {\n            validateResponse(op, conn, false);\n          }\n          return getResponse(conn);\n        } catch (AccessControlException ace) {\n          // no retries for auth failures\n          throw ace;\n        } catch (InvalidToken it) {\n          // try to replace the expired token with a new one.  the attempt\n          // to acquire a new token must be outside this operation\u0027s retry\n          // so if it fails after its own retries, this operation fails too.\n          if (op.getRequireAuth() || !replaceExpiredDelegationToken()) {\n            throw it;\n          }\n        } catch (IOException ioe) {\n          shouldRetry(ioe, retry);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java"
      }
    },
    "0c5128969522cf754010c32cdcbfcfa5ebe5b3b0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6222. Remove background token renewer from webhdfs. Contributed by Rushabh Shah and Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604300 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/06/14 4:58 PM",
      "commitName": "0c5128969522cf754010c32cdcbfcfa5ebe5b3b0",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "19/06/14 4:06 PM",
      "commitNameOld": "46dc32e12568c5e254a3a2f2664095dc9de8bd55",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,42 @@\n     private T runWithRetry() throws IOException {\n       /**\n        * Do the real work.\n        *\n        * There are three cases that the code inside the loop can throw an\n        * IOException:\n        *\n        * \u003cul\u003e\n        * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n        * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n        * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n        * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n        * \u003c/ul\u003e\n        *\n        * The call to shouldRetry() will conduct the retry policy. The policy\n        * examines the exception and swallows it if it decides to rerun the work.\n        */\n       for(int retry \u003d 0; ; retry++) {\n         checkRetry \u003d !redirected;\n         final URL url \u003d getUrl();\n         try {\n           final HttpURLConnection conn \u003d connect(url);\n           // output streams will validate on close\n           if (!op.getDoOutput()) {\n             validateResponse(op, conn, false);\n           }\n           return getResponse(conn);\n-        } catch (IOException ioe) {\n-          Throwable cause \u003d ioe.getCause();\n-          if (cause !\u003d null \u0026\u0026 cause instanceof AuthenticationException) {\n-            throw ioe; // no retries for auth failures\n+        } catch (AccessControlException ace) {\n+          // no retries for auth failures\n+          throw ace;\n+        } catch (InvalidToken it) {\n+          // try to replace the expired token with a new one.  the attempt\n+          // to acquire a new token must be outside this operation\u0027s retry\n+          // so if it fails after its own retries, this operation fails too.\n+          if (op.getRequireAuth() || !replaceExpiredDelegationToken()) {\n+            throw it;\n           }\n+        } catch (IOException ioe) {\n           shouldRetry(ioe, retry);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private T runWithRetry() throws IOException {\n      /**\n       * Do the real work.\n       *\n       * There are three cases that the code inside the loop can throw an\n       * IOException:\n       *\n       * \u003cul\u003e\n       * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n       * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n       * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n       * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n       * \u003c/ul\u003e\n       *\n       * The call to shouldRetry() will conduct the retry policy. The policy\n       * examines the exception and swallows it if it decides to rerun the work.\n       */\n      for(int retry \u003d 0; ; retry++) {\n        checkRetry \u003d !redirected;\n        final URL url \u003d getUrl();\n        try {\n          final HttpURLConnection conn \u003d connect(url);\n          // output streams will validate on close\n          if (!op.getDoOutput()) {\n            validateResponse(op, conn, false);\n          }\n          return getResponse(conn);\n        } catch (AccessControlException ace) {\n          // no retries for auth failures\n          throw ace;\n        } catch (InvalidToken it) {\n          // try to replace the expired token with a new one.  the attempt\n          // to acquire a new token must be outside this operation\u0027s retry\n          // so if it fails after its own retries, this operation fails too.\n          if (op.getRequireAuth() || !replaceExpiredDelegationToken()) {\n            throw it;\n          }\n        } catch (IOException ioe) {\n          shouldRetry(ioe, retry);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "e4ee1d111be15ae6cca2f79be7ca73c204288d2b": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-6305. WebHdfs response decoding may throw RuntimeExceptions (Daryn Sharp via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594273 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/14 9:40 AM",
      "commitName": "e4ee1d111be15ae6cca2f79be7ca73c204288d2b",
      "commitAuthor": "Jonathan Turner Eagles",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-6305. WebHdfs response decoding may throw RuntimeExceptions (Daryn Sharp via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594273 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/05/14 9:40 AM",
          "commitName": "e4ee1d111be15ae6cca2f79be7ca73c204288d2b",
          "commitAuthor": "Jonathan Turner Eagles",
          "commitDateOld": "13/05/14 9:19 AM",
          "commitNameOld": "33ade356b35223654a077103ed7fbed89f3f2321",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,36 @@\n-    private AbstractRunner runWithRetry() throws IOException {\n+    private T runWithRetry() throws IOException {\n       /**\n        * Do the real work.\n        *\n        * There are three cases that the code inside the loop can throw an\n        * IOException:\n        *\n        * \u003cul\u003e\n        * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n        * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n        * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n        * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n        * \u003c/ul\u003e\n        *\n        * The call to shouldRetry() will conduct the retry policy. The policy\n        * examines the exception and swallows it if it decides to rerun the work.\n        */\n       for(int retry \u003d 0; ; retry++) {\n+        checkRetry \u003d !redirected;\n+        final URL url \u003d getUrl();\n         try {\n-          init();\n-          if (op.getDoOutput()) {\n-            twoStepWrite();\n-          } else {\n-            getResponse(op !\u003d GetOpParam.Op.OPEN);\n+          final HttpURLConnection conn \u003d connect(url);\n+          // output streams will validate on close\n+          if (!op.getDoOutput()) {\n+            validateResponse(op, conn, false);\n           }\n-          return this;\n-        } catch(IOException ioe) {\n+          return getResponse(conn);\n+        } catch (IOException ioe) {\n           Throwable cause \u003d ioe.getCause();\n           if (cause !\u003d null \u0026\u0026 cause instanceof AuthenticationException) {\n             throw ioe; // no retries for auth failures\n           }\n           shouldRetry(ioe, retry);\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private T runWithRetry() throws IOException {\n      /**\n       * Do the real work.\n       *\n       * There are three cases that the code inside the loop can throw an\n       * IOException:\n       *\n       * \u003cul\u003e\n       * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n       * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n       * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n       * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n       * \u003c/ul\u003e\n       *\n       * The call to shouldRetry() will conduct the retry policy. The policy\n       * examines the exception and swallows it if it decides to rerun the work.\n       */\n      for(int retry \u003d 0; ; retry++) {\n        checkRetry \u003d !redirected;\n        final URL url \u003d getUrl();\n        try {\n          final HttpURLConnection conn \u003d connect(url);\n          // output streams will validate on close\n          if (!op.getDoOutput()) {\n            validateResponse(op, conn, false);\n          }\n          return getResponse(conn);\n        } catch (IOException ioe) {\n          Throwable cause \u003d ioe.getCause();\n          if (cause !\u003d null \u0026\u0026 cause instanceof AuthenticationException) {\n            throw ioe; // no retries for auth failures\n          }\n          shouldRetry(ioe, retry);\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {
            "oldValue": "AbstractRunner",
            "newValue": "T"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6305. WebHdfs response decoding may throw RuntimeExceptions (Daryn Sharp via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594273 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/05/14 9:40 AM",
          "commitName": "e4ee1d111be15ae6cca2f79be7ca73c204288d2b",
          "commitAuthor": "Jonathan Turner Eagles",
          "commitDateOld": "13/05/14 9:19 AM",
          "commitNameOld": "33ade356b35223654a077103ed7fbed89f3f2321",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,36 @@\n-    private AbstractRunner runWithRetry() throws IOException {\n+    private T runWithRetry() throws IOException {\n       /**\n        * Do the real work.\n        *\n        * There are three cases that the code inside the loop can throw an\n        * IOException:\n        *\n        * \u003cul\u003e\n        * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n        * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n        * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n        * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n        * \u003c/ul\u003e\n        *\n        * The call to shouldRetry() will conduct the retry policy. The policy\n        * examines the exception and swallows it if it decides to rerun the work.\n        */\n       for(int retry \u003d 0; ; retry++) {\n+        checkRetry \u003d !redirected;\n+        final URL url \u003d getUrl();\n         try {\n-          init();\n-          if (op.getDoOutput()) {\n-            twoStepWrite();\n-          } else {\n-            getResponse(op !\u003d GetOpParam.Op.OPEN);\n+          final HttpURLConnection conn \u003d connect(url);\n+          // output streams will validate on close\n+          if (!op.getDoOutput()) {\n+            validateResponse(op, conn, false);\n           }\n-          return this;\n-        } catch(IOException ioe) {\n+          return getResponse(conn);\n+        } catch (IOException ioe) {\n           Throwable cause \u003d ioe.getCause();\n           if (cause !\u003d null \u0026\u0026 cause instanceof AuthenticationException) {\n             throw ioe; // no retries for auth failures\n           }\n           shouldRetry(ioe, retry);\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private T runWithRetry() throws IOException {\n      /**\n       * Do the real work.\n       *\n       * There are three cases that the code inside the loop can throw an\n       * IOException:\n       *\n       * \u003cul\u003e\n       * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n       * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n       * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n       * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n       * \u003c/ul\u003e\n       *\n       * The call to shouldRetry() will conduct the retry policy. The policy\n       * examines the exception and swallows it if it decides to rerun the work.\n       */\n      for(int retry \u003d 0; ; retry++) {\n        checkRetry \u003d !redirected;\n        final URL url \u003d getUrl();\n        try {\n          final HttpURLConnection conn \u003d connect(url);\n          // output streams will validate on close\n          if (!op.getDoOutput()) {\n            validateResponse(op, conn, false);\n          }\n          return getResponse(conn);\n        } catch (IOException ioe) {\n          Throwable cause \u003d ioe.getCause();\n          if (cause !\u003d null \u0026\u0026 cause instanceof AuthenticationException) {\n            throw ioe; // no retries for auth failures\n          }\n          shouldRetry(ioe, retry);\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "004d0854b7964d4f748f6e91b2d54a84928843f7": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-4564. Ensure webhdfs returns correct HTTP response codes for denied operations. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583241 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/03/14 12:25 AM",
      "commitName": "004d0854b7964d4f748f6e91b2d54a84928843f7",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-4564. Ensure webhdfs returns correct HTTP response codes for denied operations. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583241 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "31/03/14 12:25 AM",
          "commitName": "004d0854b7964d4f748f6e91b2d54a84928843f7",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "10/03/14 1:48 PM",
          "commitNameOld": "b674dfd480ab8bfdaab390778b283dbf86ae8575",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 20.44,
          "commitsBetweenForRepo": 165,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,35 @@\n-    AbstractRunner run() throws IOException {\n+    private AbstractRunner runWithRetry() throws IOException {\n       /**\n        * Do the real work.\n        *\n        * There are three cases that the code inside the loop can throw an\n        * IOException:\n        *\n        * \u003cul\u003e\n        * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n        * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n        * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n        * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n        * \u003c/ul\u003e\n        *\n        * The call to shouldRetry() will conduct the retry policy. The policy\n        * examines the exception and swallows it if it decides to rerun the work.\n        */\n       for(int retry \u003d 0; ; retry++) {\n         try {\n           init();\n           if (op.getDoOutput()) {\n             twoStepWrite();\n           } else {\n             getResponse(op !\u003d GetOpParam.Op.OPEN);\n           }\n           return this;\n         } catch(IOException ioe) {\n+          Throwable cause \u003d ioe.getCause();\n+          if (cause !\u003d null \u0026\u0026 cause instanceof AuthenticationException) {\n+            throw ioe; // no retries for auth failures\n+          }\n           shouldRetry(ioe, retry);\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private AbstractRunner runWithRetry() throws IOException {\n      /**\n       * Do the real work.\n       *\n       * There are three cases that the code inside the loop can throw an\n       * IOException:\n       *\n       * \u003cul\u003e\n       * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n       * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n       * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n       * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n       * \u003c/ul\u003e\n       *\n       * The call to shouldRetry() will conduct the retry policy. The policy\n       * examines the exception and swallows it if it decides to rerun the work.\n       */\n      for(int retry \u003d 0; ; retry++) {\n        try {\n          init();\n          if (op.getDoOutput()) {\n            twoStepWrite();\n          } else {\n            getResponse(op !\u003d GetOpParam.Op.OPEN);\n          }\n          return this;\n        } catch(IOException ioe) {\n          Throwable cause \u003d ioe.getCause();\n          if (cause !\u003d null \u0026\u0026 cause instanceof AuthenticationException) {\n            throw ioe; // no retries for auth failures\n          }\n          shouldRetry(ioe, retry);\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {
            "oldValue": "run",
            "newValue": "runWithRetry"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-4564. Ensure webhdfs returns correct HTTP response codes for denied operations. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583241 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "31/03/14 12:25 AM",
          "commitName": "004d0854b7964d4f748f6e91b2d54a84928843f7",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "10/03/14 1:48 PM",
          "commitNameOld": "b674dfd480ab8bfdaab390778b283dbf86ae8575",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 20.44,
          "commitsBetweenForRepo": 165,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,35 @@\n-    AbstractRunner run() throws IOException {\n+    private AbstractRunner runWithRetry() throws IOException {\n       /**\n        * Do the real work.\n        *\n        * There are three cases that the code inside the loop can throw an\n        * IOException:\n        *\n        * \u003cul\u003e\n        * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n        * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n        * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n        * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n        * \u003c/ul\u003e\n        *\n        * The call to shouldRetry() will conduct the retry policy. The policy\n        * examines the exception and swallows it if it decides to rerun the work.\n        */\n       for(int retry \u003d 0; ; retry++) {\n         try {\n           init();\n           if (op.getDoOutput()) {\n             twoStepWrite();\n           } else {\n             getResponse(op !\u003d GetOpParam.Op.OPEN);\n           }\n           return this;\n         } catch(IOException ioe) {\n+          Throwable cause \u003d ioe.getCause();\n+          if (cause !\u003d null \u0026\u0026 cause instanceof AuthenticationException) {\n+            throw ioe; // no retries for auth failures\n+          }\n           shouldRetry(ioe, retry);\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private AbstractRunner runWithRetry() throws IOException {\n      /**\n       * Do the real work.\n       *\n       * There are three cases that the code inside the loop can throw an\n       * IOException:\n       *\n       * \u003cul\u003e\n       * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n       * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n       * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n       * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n       * \u003c/ul\u003e\n       *\n       * The call to shouldRetry() will conduct the retry policy. The policy\n       * examines the exception and swallows it if it decides to rerun the work.\n       */\n      for(int retry \u003d 0; ; retry++) {\n        try {\n          init();\n          if (op.getDoOutput()) {\n            twoStepWrite();\n          } else {\n            getResponse(op !\u003d GetOpParam.Op.OPEN);\n          }\n          return this;\n        } catch(IOException ioe) {\n          Throwable cause \u003d ioe.getCause();\n          if (cause !\u003d null \u0026\u0026 cause instanceof AuthenticationException) {\n            throw ioe; // no retries for auth failures\n          }\n          shouldRetry(ioe, retry);\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4564. Ensure webhdfs returns correct HTTP response codes for denied operations. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583241 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "31/03/14 12:25 AM",
          "commitName": "004d0854b7964d4f748f6e91b2d54a84928843f7",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "10/03/14 1:48 PM",
          "commitNameOld": "b674dfd480ab8bfdaab390778b283dbf86ae8575",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 20.44,
          "commitsBetweenForRepo": 165,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,35 @@\n-    AbstractRunner run() throws IOException {\n+    private AbstractRunner runWithRetry() throws IOException {\n       /**\n        * Do the real work.\n        *\n        * There are three cases that the code inside the loop can throw an\n        * IOException:\n        *\n        * \u003cul\u003e\n        * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n        * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n        * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n        * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n        * \u003c/ul\u003e\n        *\n        * The call to shouldRetry() will conduct the retry policy. The policy\n        * examines the exception and swallows it if it decides to rerun the work.\n        */\n       for(int retry \u003d 0; ; retry++) {\n         try {\n           init();\n           if (op.getDoOutput()) {\n             twoStepWrite();\n           } else {\n             getResponse(op !\u003d GetOpParam.Op.OPEN);\n           }\n           return this;\n         } catch(IOException ioe) {\n+          Throwable cause \u003d ioe.getCause();\n+          if (cause !\u003d null \u0026\u0026 cause instanceof AuthenticationException) {\n+            throw ioe; // no retries for auth failures\n+          }\n           shouldRetry(ioe, retry);\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private AbstractRunner runWithRetry() throws IOException {\n      /**\n       * Do the real work.\n       *\n       * There are three cases that the code inside the loop can throw an\n       * IOException:\n       *\n       * \u003cul\u003e\n       * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n       * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n       * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n       * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n       * \u003c/ul\u003e\n       *\n       * The call to shouldRetry() will conduct the retry policy. The policy\n       * examines the exception and swallows it if it decides to rerun the work.\n       */\n      for(int retry \u003d 0; ; retry++) {\n        try {\n          init();\n          if (op.getDoOutput()) {\n            twoStepWrite();\n          } else {\n            getResponse(op !\u003d GetOpParam.Op.OPEN);\n          }\n          return this;\n        } catch(IOException ioe) {\n          Throwable cause \u003d ioe.getCause();\n          if (cause !\u003d null \u0026\u0026 cause instanceof AuthenticationException) {\n            throw ioe; // no retries for auth failures\n          }\n          shouldRetry(ioe, retry);\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "7a2443e9f8b95816c7df61530cda29e8b040b12e": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-5122. Support failover and retry in WebHdfsFileSystem for NN HA. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1524562 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/09/13 1:47 PM",
      "commitName": "7a2443e9f8b95816c7df61530cda29e8b040b12e",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5122. Support failover and retry in WebHdfsFileSystem for NN HA. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1524562 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/13 1:47 PM",
          "commitName": "7a2443e9f8b95816c7df61530cda29e8b040b12e",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "18/09/13 10:29 AM",
          "commitNameOld": "f278a491dcec249a2ec22e14b645d8f890278be5",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,31 @@\n-    Runner run() throws IOException {\n+    AbstractRunner run() throws IOException {\n+      /**\n+       * Do the real work.\n+       *\n+       * There are three cases that the code inside the loop can throw an\n+       * IOException:\n+       *\n+       * \u003cul\u003e\n+       * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n+       * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n+       * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n+       * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n+       * \u003c/ul\u003e\n+       *\n+       * The call to shouldRetry() will conduct the retry policy. The policy\n+       * examines the exception and swallows it if it decides to rerun the work.\n+       */\n       for(int retry \u003d 0; ; retry++) {\n         try {\n           init();\n           if (op.getDoOutput()) {\n             twoStepWrite();\n           } else {\n             getResponse(op !\u003d GetOpParam.Op.OPEN);\n           }\n           return this;\n         } catch(IOException ioe) {\n           shouldRetry(ioe, retry);\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    AbstractRunner run() throws IOException {\n      /**\n       * Do the real work.\n       *\n       * There are three cases that the code inside the loop can throw an\n       * IOException:\n       *\n       * \u003cul\u003e\n       * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n       * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n       * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n       * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n       * \u003c/ul\u003e\n       *\n       * The call to shouldRetry() will conduct the retry policy. The policy\n       * examines the exception and swallows it if it decides to rerun the work.\n       */\n      for(int retry \u003d 0; ; retry++) {\n        try {\n          init();\n          if (op.getDoOutput()) {\n            twoStepWrite();\n          } else {\n            getResponse(op !\u003d GetOpParam.Op.OPEN);\n          }\n          return this;\n        } catch(IOException ioe) {\n          shouldRetry(ioe, retry);\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {
            "oldValue": "Runner",
            "newValue": "AbstractRunner"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5122. Support failover and retry in WebHdfsFileSystem for NN HA. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1524562 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/13 1:47 PM",
          "commitName": "7a2443e9f8b95816c7df61530cda29e8b040b12e",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "18/09/13 10:29 AM",
          "commitNameOld": "f278a491dcec249a2ec22e14b645d8f890278be5",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,31 @@\n-    Runner run() throws IOException {\n+    AbstractRunner run() throws IOException {\n+      /**\n+       * Do the real work.\n+       *\n+       * There are three cases that the code inside the loop can throw an\n+       * IOException:\n+       *\n+       * \u003cul\u003e\n+       * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n+       * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n+       * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n+       * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n+       * \u003c/ul\u003e\n+       *\n+       * The call to shouldRetry() will conduct the retry policy. The policy\n+       * examines the exception and swallows it if it decides to rerun the work.\n+       */\n       for(int retry \u003d 0; ; retry++) {\n         try {\n           init();\n           if (op.getDoOutput()) {\n             twoStepWrite();\n           } else {\n             getResponse(op !\u003d GetOpParam.Op.OPEN);\n           }\n           return this;\n         } catch(IOException ioe) {\n           shouldRetry(ioe, retry);\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    AbstractRunner run() throws IOException {\n      /**\n       * Do the real work.\n       *\n       * There are three cases that the code inside the loop can throw an\n       * IOException:\n       *\n       * \u003cul\u003e\n       * \u003cli\u003eThe connection has failed (e.g., ConnectException,\n       * @see FailoverOnNetworkExceptionRetry for more details)\u003c/li\u003e\n       * \u003cli\u003eThe namenode enters the standby state (i.e., StandbyException).\u003c/li\u003e\n       * \u003cli\u003eThe server returns errors for the command (i.e., RemoteException)\u003c/li\u003e\n       * \u003c/ul\u003e\n       *\n       * The call to shouldRetry() will conduct the retry policy. The policy\n       * examines the exception and swallows it if it decides to rerun the work.\n       */\n      for(int retry \u003d 0; ; retry++) {\n        try {\n          init();\n          if (op.getDoOutput()) {\n            twoStepWrite();\n          } else {\n            getResponse(op !\u003d GetOpParam.Op.OPEN);\n          }\n          return this;\n        } catch(IOException ioe) {\n          shouldRetry(ioe, retry);\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "cb787968c5deac3dd5d10291aae39c36656a1487": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3667.  Add retry support to WebHdfsFileSystem.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1367841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/12 6:41 PM",
      "commitName": "cb787968c5deac3dd5d10291aae39c36656a1487",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,15 @@\n+    Runner run() throws IOException {\n+      for(int retry \u003d 0; ; retry++) {\n+        try {\n+          init();\n+          if (op.getDoOutput()) {\n+            twoStepWrite();\n+          } else {\n+            getResponse(op !\u003d GetOpParam.Op.OPEN);\n+          }\n+          return this;\n+        } catch(IOException ioe) {\n+          shouldRetry(ioe, retry);\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    Runner run() throws IOException {\n      for(int retry \u003d 0; ; retry++) {\n        try {\n          init();\n          if (op.getDoOutput()) {\n            twoStepWrite();\n          } else {\n            getResponse(op !\u003d GetOpParam.Op.OPEN);\n          }\n          return this;\n        } catch(IOException ioe) {\n          shouldRetry(ioe, retry);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java"
    }
  }
}