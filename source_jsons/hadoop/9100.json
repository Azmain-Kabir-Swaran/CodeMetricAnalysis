{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "clearCorruptLazyPersistFiles",
  "functionId": "clearCorruptLazyPersistFiles",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 4495,
  "functionEndLine": 4537,
  "numCommitsSeen": 873,
  "timeTaken": 30175,
  "changeHistory": [
    "c36d69a7b30927eaea16335e06cfcc247accde35",
    "303c8dc9b6c853c0939ea9ba14388897cc258071",
    "ff0b99eafeda035ebe0dc82cfe689808047a8893",
    "3565c9af17ab05bf9e7f68b71b6c6850df772bb9",
    "132478e805ba0f955345217b8ad87c2d17cccb2d",
    "4cbbfa2220e884e91bf18ad1cc2f3b11f895f8c9",
    "6e3fcffe291faec40fa9214f4880a35a952836c4",
    "4928f5473394981829e5ffd4b16ea0801baf5c45",
    "a38a37c63417a3b19dcdf98251af196c9d7b8c31",
    "9f2f583f401189c3f4a2687795a9e3e0b288322b",
    "ba9371492036983a9899398907ab41fe548f29b3",
    "c79e7f7d997596e0c38ae4cddff2bd0910581c16",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
    "24315e7d374a1ddd4329b64350cf96fc9ab6f59c",
    "bb84f1fccb18c6c7373851e05d2451d55e908242"
  ],
  "changeHistoryShort": {
    "c36d69a7b30927eaea16335e06cfcc247accde35": "Ybodychange",
    "303c8dc9b6c853c0939ea9ba14388897cc258071": "Ybodychange",
    "ff0b99eafeda035ebe0dc82cfe689808047a8893": "Ybodychange",
    "3565c9af17ab05bf9e7f68b71b6c6850df772bb9": "Ybodychange",
    "132478e805ba0f955345217b8ad87c2d17cccb2d": "Ybodychange",
    "4cbbfa2220e884e91bf18ad1cc2f3b11f895f8c9": "Ybodychange",
    "6e3fcffe291faec40fa9214f4880a35a952836c4": "Ybodychange",
    "4928f5473394981829e5ffd4b16ea0801baf5c45": "Ybodychange",
    "a38a37c63417a3b19dcdf98251af196c9d7b8c31": "Ybodychange",
    "9f2f583f401189c3f4a2687795a9e3e0b288322b": "Ybodychange",
    "ba9371492036983a9899398907ab41fe548f29b3": "Ybodychange",
    "c79e7f7d997596e0c38ae4cddff2bd0910581c16": "Ymultichange(Yexceptionschange,Ybodychange)",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": "Ybodychange",
    "24315e7d374a1ddd4329b64350cf96fc9ab6f59c": "Ybodychange",
    "bb84f1fccb18c6c7373851e05d2451d55e908242": "Ybodychange"
  },
  "changeHistoryDetails": {
    "c36d69a7b30927eaea16335e06cfcc247accde35": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13027. Handle possible NPEs due to deleted blocks in race condition. Contributed by Vinayakumar B.\n\n(cherry picked from commit 65977e5d8124be2bc208af25beed934933f170b3)\n",
      "commitDate": "30/08/18 9:45 AM",
      "commitName": "c36d69a7b30927eaea16335e06cfcc247accde35",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "26/08/18 11:55 PM",
      "commitNameOld": "b9b964d25335943fb15cdfcf369d123bbd7e454a",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 3.41,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n     private void clearCorruptLazyPersistFiles()\n         throws IOException {\n \n       BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n \n       List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n       boolean changed \u003d false;\n       writeLock();\n       try {\n         final Iterator\u003cBlockInfo\u003e it \u003d\n             blockManager.getCorruptReplicaBlockIterator();\n \n         while (it.hasNext()) {\n           Block b \u003d it.next();\n           BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n-          if (blockInfo \u003d\u003d null) {\n+          if (blockInfo \u003d\u003d null || blockInfo.isDeleted()) {\n             LOG.info(\"Cannot find block info for block \" + b);\n           } else {\n             BlockCollection bc \u003d getBlockCollection(blockInfo);\n             if (bc.getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n               filesToDelete.add(bc);\n             }\n           }\n         }\n \n         for (BlockCollection bc : filesToDelete) {\n           LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n           BlocksMapUpdateInfo toRemoveBlocks \u003d\n               FSDirDeleteOp.deleteInternal(\n                   FSNamesystem.this,\n                   INodesInPath.fromINode((INodeFile) bc), false);\n           changed |\u003d toRemoveBlocks !\u003d null;\n           if (toRemoveBlocks !\u003d null) {\n             removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n           }\n         }\n       } finally {\n         writeUnlock(\"clearCorruptLazyPersistFiles\");\n       }\n       if (changed) {\n         getEditLog().logSync();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void clearCorruptLazyPersistFiles()\n        throws IOException {\n\n      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n      boolean changed \u003d false;\n      writeLock();\n      try {\n        final Iterator\u003cBlockInfo\u003e it \u003d\n            blockManager.getCorruptReplicaBlockIterator();\n\n        while (it.hasNext()) {\n          Block b \u003d it.next();\n          BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n          if (blockInfo \u003d\u003d null || blockInfo.isDeleted()) {\n            LOG.info(\"Cannot find block info for block \" + b);\n          } else {\n            BlockCollection bc \u003d getBlockCollection(blockInfo);\n            if (bc.getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n              filesToDelete.add(bc);\n            }\n          }\n        }\n\n        for (BlockCollection bc : filesToDelete) {\n          LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n          BlocksMapUpdateInfo toRemoveBlocks \u003d\n              FSDirDeleteOp.deleteInternal(\n                  FSNamesystem.this,\n                  INodesInPath.fromINode((INodeFile) bc), false);\n          changed |\u003d toRemoveBlocks !\u003d null;\n          if (toRemoveBlocks !\u003d null) {\n            removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n          }\n        }\n      } finally {\n        writeUnlock(\"clearCorruptLazyPersistFiles\");\n      }\n      if (changed) {\n        getEditLog().logSync();\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "303c8dc9b6c853c0939ea9ba14388897cc258071": {
      "type": "Ybodychange",
      "commitMessage": "Fix NPE in LazyPersistFileScrubber. Contributed by Inigo Goiri.",
      "commitDate": "26/05/17 1:16 PM",
      "commitName": "303c8dc9b6c853c0939ea9ba14388897cc258071",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "25/05/17 3:17 PM",
      "commitNameOld": "2b5ad48762587abbcd8bdb50d0ae98f8080d926c",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.92,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,43 @@\n     private void clearCorruptLazyPersistFiles()\n         throws IOException {\n \n       BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n \n       List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n       boolean changed \u003d false;\n       writeLock();\n       try {\n         final Iterator\u003cBlockInfo\u003e it \u003d\n             blockManager.getCorruptReplicaBlockIterator();\n \n         while (it.hasNext()) {\n           Block b \u003d it.next();\n           BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n-          BlockCollection bc \u003d getBlockCollection(blockInfo);\n-          if (bc.getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n-            filesToDelete.add(bc);\n+          if (blockInfo \u003d\u003d null) {\n+            LOG.info(\"Cannot find block info for block \" + b);\n+          } else {\n+            BlockCollection bc \u003d getBlockCollection(blockInfo);\n+            if (bc.getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n+              filesToDelete.add(bc);\n+            }\n           }\n         }\n \n         for (BlockCollection bc : filesToDelete) {\n           LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n           BlocksMapUpdateInfo toRemoveBlocks \u003d\n               FSDirDeleteOp.deleteInternal(\n                   FSNamesystem.this,\n                   INodesInPath.fromINode((INodeFile) bc), false);\n           changed |\u003d toRemoveBlocks !\u003d null;\n           if (toRemoveBlocks !\u003d null) {\n             removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n           }\n         }\n       } finally {\n         writeUnlock(\"clearCorruptLazyPersistFiles\");\n       }\n       if (changed) {\n         getEditLog().logSync();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void clearCorruptLazyPersistFiles()\n        throws IOException {\n\n      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n      boolean changed \u003d false;\n      writeLock();\n      try {\n        final Iterator\u003cBlockInfo\u003e it \u003d\n            blockManager.getCorruptReplicaBlockIterator();\n\n        while (it.hasNext()) {\n          Block b \u003d it.next();\n          BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n          if (blockInfo \u003d\u003d null) {\n            LOG.info(\"Cannot find block info for block \" + b);\n          } else {\n            BlockCollection bc \u003d getBlockCollection(blockInfo);\n            if (bc.getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n              filesToDelete.add(bc);\n            }\n          }\n        }\n\n        for (BlockCollection bc : filesToDelete) {\n          LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n          BlocksMapUpdateInfo toRemoveBlocks \u003d\n              FSDirDeleteOp.deleteInternal(\n                  FSNamesystem.this,\n                  INodesInPath.fromINode((INodeFile) bc), false);\n          changed |\u003d toRemoveBlocks !\u003d null;\n          if (toRemoveBlocks !\u003d null) {\n            removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n          }\n        }\n      } finally {\n        writeUnlock(\"clearCorruptLazyPersistFiles\");\n      }\n      if (changed) {\n        getEditLog().logSync();\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "ff0b99eafeda035ebe0dc82cfe689808047a8893": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10872. Add MutableRate metrics for FSNamesystemLock operations. Contributed by Erik Krogen.\n",
      "commitDate": "14/11/16 11:05 AM",
      "commitName": "ff0b99eafeda035ebe0dc82cfe689808047a8893",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "08/11/16 6:17 PM",
      "commitNameOld": "ed0bebabaaf27cd730f7f8eb002d92c9c7db327d",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 5.7,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     private void clearCorruptLazyPersistFiles()\n         throws IOException {\n \n       BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n \n       List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n       boolean changed \u003d false;\n       writeLock();\n       try {\n         final Iterator\u003cBlockInfo\u003e it \u003d\n             blockManager.getCorruptReplicaBlockIterator();\n \n         while (it.hasNext()) {\n           Block b \u003d it.next();\n           BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n           BlockCollection bc \u003d getBlockCollection(blockInfo);\n           if (bc.getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n             filesToDelete.add(bc);\n           }\n         }\n \n         for (BlockCollection bc : filesToDelete) {\n           LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n           BlocksMapUpdateInfo toRemoveBlocks \u003d\n               FSDirDeleteOp.deleteInternal(\n                   FSNamesystem.this,\n                   INodesInPath.fromINode((INodeFile) bc), false);\n           changed |\u003d toRemoveBlocks !\u003d null;\n           if (toRemoveBlocks !\u003d null) {\n             removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n           }\n         }\n       } finally {\n-        writeUnlock();\n+        writeUnlock(\"clearCorruptLazyPersistFiles\");\n       }\n       if (changed) {\n         getEditLog().logSync();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void clearCorruptLazyPersistFiles()\n        throws IOException {\n\n      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n      boolean changed \u003d false;\n      writeLock();\n      try {\n        final Iterator\u003cBlockInfo\u003e it \u003d\n            blockManager.getCorruptReplicaBlockIterator();\n\n        while (it.hasNext()) {\n          Block b \u003d it.next();\n          BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n          BlockCollection bc \u003d getBlockCollection(blockInfo);\n          if (bc.getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n            filesToDelete.add(bc);\n          }\n        }\n\n        for (BlockCollection bc : filesToDelete) {\n          LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n          BlocksMapUpdateInfo toRemoveBlocks \u003d\n              FSDirDeleteOp.deleteInternal(\n                  FSNamesystem.this,\n                  INodesInPath.fromINode((INodeFile) bc), false);\n          changed |\u003d toRemoveBlocks !\u003d null;\n          if (toRemoveBlocks !\u003d null) {\n            removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n          }\n        }\n      } finally {\n        writeUnlock(\"clearCorruptLazyPersistFiles\");\n      }\n      if (changed) {\n        getEditLog().logSync();\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "3565c9af17ab05bf9e7f68b71b6c6850df772bb9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10979. Pass IIP for FSDirDeleteOp methods. Contributed by Daryn Sharp.\n",
      "commitDate": "07/10/16 12:15 PM",
      "commitName": "3565c9af17ab05bf9e7f68b71b6c6850df772bb9",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "06/10/16 2:33 PM",
      "commitNameOld": "48b9d5fd2a96728b1118be217ca597c4098e99ca",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.9,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     private void clearCorruptLazyPersistFiles()\n         throws IOException {\n \n       BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n \n       List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n       boolean changed \u003d false;\n       writeLock();\n       try {\n         final Iterator\u003cBlockInfo\u003e it \u003d\n             blockManager.getCorruptReplicaBlockIterator();\n \n         while (it.hasNext()) {\n           Block b \u003d it.next();\n           BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n           BlockCollection bc \u003d getBlockCollection(blockInfo);\n           if (bc.getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n             filesToDelete.add(bc);\n           }\n         }\n \n         for (BlockCollection bc : filesToDelete) {\n           LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n           BlocksMapUpdateInfo toRemoveBlocks \u003d\n               FSDirDeleteOp.deleteInternal(\n-                  FSNamesystem.this, bc.getName(),\n+                  FSNamesystem.this,\n                   INodesInPath.fromINode((INodeFile) bc), false);\n           changed |\u003d toRemoveBlocks !\u003d null;\n           if (toRemoveBlocks !\u003d null) {\n             removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n           }\n         }\n       } finally {\n         writeUnlock();\n       }\n       if (changed) {\n         getEditLog().logSync();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void clearCorruptLazyPersistFiles()\n        throws IOException {\n\n      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n      boolean changed \u003d false;\n      writeLock();\n      try {\n        final Iterator\u003cBlockInfo\u003e it \u003d\n            blockManager.getCorruptReplicaBlockIterator();\n\n        while (it.hasNext()) {\n          Block b \u003d it.next();\n          BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n          BlockCollection bc \u003d getBlockCollection(blockInfo);\n          if (bc.getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n            filesToDelete.add(bc);\n          }\n        }\n\n        for (BlockCollection bc : filesToDelete) {\n          LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n          BlocksMapUpdateInfo toRemoveBlocks \u003d\n              FSDirDeleteOp.deleteInternal(\n                  FSNamesystem.this,\n                  INodesInPath.fromINode((INodeFile) bc), false);\n          changed |\u003d toRemoveBlocks !\u003d null;\n          if (toRemoveBlocks !\u003d null) {\n            removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n          }\n        }\n      } finally {\n        writeUnlock();\n      }\n      if (changed) {\n        getEditLog().logSync();\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "132478e805ba0f955345217b8ad87c2d17cccb2d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9527. The return type of FSNamesystem.getBlockCollection should be changed to INodeFile.\n",
      "commitDate": "09/12/15 5:55 PM",
      "commitName": "132478e805ba0f955345217b8ad87c2d17cccb2d",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "04/12/15 9:47 AM",
      "commitNameOld": "3fa33b5c2c289ceaced30c6c5451f3569110459d",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 5.34,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,39 @@\n     private void clearCorruptLazyPersistFiles()\n         throws IOException {\n \n       BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n \n       List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n       boolean changed \u003d false;\n       writeLock();\n       try {\n         final Iterator\u003cBlockInfo\u003e it \u003d\n             blockManager.getCorruptReplicaBlockIterator();\n \n         while (it.hasNext()) {\n           Block b \u003d it.next();\n           BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n-          BlockCollection bc \u003d getBlockCollection(\n-              blockInfo.getBlockCollectionId());\n+          BlockCollection bc \u003d getBlockCollection(blockInfo);\n           if (bc.getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n             filesToDelete.add(bc);\n           }\n         }\n \n         for (BlockCollection bc : filesToDelete) {\n           LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n           BlocksMapUpdateInfo toRemoveBlocks \u003d\n               FSDirDeleteOp.deleteInternal(\n                   FSNamesystem.this, bc.getName(),\n                   INodesInPath.fromINode((INodeFile) bc), false);\n           changed |\u003d toRemoveBlocks !\u003d null;\n           if (toRemoveBlocks !\u003d null) {\n             removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n           }\n         }\n       } finally {\n         writeUnlock();\n       }\n       if (changed) {\n         getEditLog().logSync();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void clearCorruptLazyPersistFiles()\n        throws IOException {\n\n      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n      boolean changed \u003d false;\n      writeLock();\n      try {\n        final Iterator\u003cBlockInfo\u003e it \u003d\n            blockManager.getCorruptReplicaBlockIterator();\n\n        while (it.hasNext()) {\n          Block b \u003d it.next();\n          BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n          BlockCollection bc \u003d getBlockCollection(blockInfo);\n          if (bc.getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n            filesToDelete.add(bc);\n          }\n        }\n\n        for (BlockCollection bc : filesToDelete) {\n          LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n          BlocksMapUpdateInfo toRemoveBlocks \u003d\n              FSDirDeleteOp.deleteInternal(\n                  FSNamesystem.this, bc.getName(),\n                  INodesInPath.fromINode((INodeFile) bc), false);\n          changed |\u003d toRemoveBlocks !\u003d null;\n          if (toRemoveBlocks !\u003d null) {\n            removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n          }\n        }\n      } finally {\n        writeUnlock();\n      }\n      if (changed) {\n        getEditLog().logSync();\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "4cbbfa2220e884e91bf18ad1cc2f3b11f895f8c9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8248. Store INodeId instead of the INodeFile object in BlockInfoContiguous. Contributed by Haohui Mai.\n",
      "commitDate": "26/08/15 6:14 PM",
      "commitName": "4cbbfa2220e884e91bf18ad1cc2f3b11f895f8c9",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "24/08/15 4:56 PM",
      "commitNameOld": "3b00eaea256d252be3361a7d9106b88756fcb9ba",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 2.05,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n     private void clearCorruptLazyPersistFiles()\n         throws IOException {\n \n       BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n \n       List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n       boolean changed \u003d false;\n       writeLock();\n       try {\n         final Iterator\u003cBlockInfo\u003e it \u003d\n             blockManager.getCorruptReplicaBlockIterator();\n \n         while (it.hasNext()) {\n           Block b \u003d it.next();\n           BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n-          if (blockInfo.getBlockCollection().getStoragePolicyID()\n-              \u003d\u003d lpPolicy.getId()) {\n-            filesToDelete.add(blockInfo.getBlockCollection());\n+          BlockCollection bc \u003d getBlockCollection(\n+              blockInfo.getBlockCollectionId());\n+          if (bc.getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n+            filesToDelete.add(bc);\n           }\n         }\n \n         for (BlockCollection bc : filesToDelete) {\n           LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n           BlocksMapUpdateInfo toRemoveBlocks \u003d\n               FSDirDeleteOp.deleteInternal(\n                   FSNamesystem.this, bc.getName(),\n                   INodesInPath.fromINode((INodeFile) bc), false);\n           changed |\u003d toRemoveBlocks !\u003d null;\n           if (toRemoveBlocks !\u003d null) {\n             removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n           }\n         }\n       } finally {\n         writeUnlock();\n       }\n       if (changed) {\n         getEditLog().logSync();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void clearCorruptLazyPersistFiles()\n        throws IOException {\n\n      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n      boolean changed \u003d false;\n      writeLock();\n      try {\n        final Iterator\u003cBlockInfo\u003e it \u003d\n            blockManager.getCorruptReplicaBlockIterator();\n\n        while (it.hasNext()) {\n          Block b \u003d it.next();\n          BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n          BlockCollection bc \u003d getBlockCollection(\n              blockInfo.getBlockCollectionId());\n          if (bc.getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n            filesToDelete.add(bc);\n          }\n        }\n\n        for (BlockCollection bc : filesToDelete) {\n          LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n          BlocksMapUpdateInfo toRemoveBlocks \u003d\n              FSDirDeleteOp.deleteInternal(\n                  FSNamesystem.this, bc.getName(),\n                  INodesInPath.fromINode((INodeFile) bc), false);\n          changed |\u003d toRemoveBlocks !\u003d null;\n          if (toRemoveBlocks !\u003d null) {\n            removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n          }\n        }\n      } finally {\n        writeUnlock();\n      }\n      if (changed) {\n        getEditLog().logSync();\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "6e3fcffe291faec40fa9214f4880a35a952836c4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8608. Merge HDFS-7912 to trunk and branch-2 (track BlockInfo instead of Block in UnderReplicatedBlocks and PendingReplicationBlocks). Contributed by Zhe Zhang.\n",
      "commitDate": "17/06/15 8:05 AM",
      "commitName": "6e3fcffe291faec40fa9214f4880a35a952836c4",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "15/06/15 10:07 PM",
      "commitNameOld": "32e39d8a29fdea2647b4372d4422246c9521beb7",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.42,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n     private void clearCorruptLazyPersistFiles()\n         throws IOException {\n \n       BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n \n       List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n       boolean changed \u003d false;\n       writeLock();\n       try {\n-        final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n+        final Iterator\u003cBlockInfo\u003e it \u003d\n+            blockManager.getCorruptReplicaBlockIterator();\n \n         while (it.hasNext()) {\n           Block b \u003d it.next();\n           BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n           if (blockInfo.getBlockCollection().getStoragePolicyID()\n               \u003d\u003d lpPolicy.getId()) {\n             filesToDelete.add(blockInfo.getBlockCollection());\n           }\n         }\n \n         for (BlockCollection bc : filesToDelete) {\n           LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n           BlocksMapUpdateInfo toRemoveBlocks \u003d\n               FSDirDeleteOp.deleteInternal(\n                   FSNamesystem.this, bc.getName(),\n                   INodesInPath.fromINode((INodeFile) bc), false);\n           changed |\u003d toRemoveBlocks !\u003d null;\n           if (toRemoveBlocks !\u003d null) {\n             removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n           }\n         }\n       } finally {\n         writeUnlock();\n       }\n       if (changed) {\n         getEditLog().logSync();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void clearCorruptLazyPersistFiles()\n        throws IOException {\n\n      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n      boolean changed \u003d false;\n      writeLock();\n      try {\n        final Iterator\u003cBlockInfo\u003e it \u003d\n            blockManager.getCorruptReplicaBlockIterator();\n\n        while (it.hasNext()) {\n          Block b \u003d it.next();\n          BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n          if (blockInfo.getBlockCollection().getStoragePolicyID()\n              \u003d\u003d lpPolicy.getId()) {\n            filesToDelete.add(blockInfo.getBlockCollection());\n          }\n        }\n\n        for (BlockCollection bc : filesToDelete) {\n          LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n          BlocksMapUpdateInfo toRemoveBlocks \u003d\n              FSDirDeleteOp.deleteInternal(\n                  FSNamesystem.this, bc.getName(),\n                  INodesInPath.fromINode((INodeFile) bc), false);\n          changed |\u003d toRemoveBlocks !\u003d null;\n          if (toRemoveBlocks !\u003d null) {\n            removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n          }\n        }\n      } finally {\n        writeUnlock();\n      }\n      if (changed) {\n        getEditLog().logSync();\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "4928f5473394981829e5ffd4b16ea0801baf5c45": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8482. Rename BlockInfoContiguous to BlockInfo. Contributed by Zhe Zhang.\n",
      "commitDate": "27/05/15 3:42 PM",
      "commitName": "4928f5473394981829e5ffd4b16ea0801baf5c45",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "21/05/15 8:08 AM",
      "commitNameOld": "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 6.32,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     private void clearCorruptLazyPersistFiles()\n         throws IOException {\n \n       BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n \n       List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n       boolean changed \u003d false;\n       writeLock();\n       try {\n         final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n \n         while (it.hasNext()) {\n           Block b \u003d it.next();\n-          BlockInfoContiguous blockInfo \u003d blockManager.getStoredBlock(b);\n+          BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n           if (blockInfo.getBlockCollection().getStoragePolicyID()\n               \u003d\u003d lpPolicy.getId()) {\n             filesToDelete.add(blockInfo.getBlockCollection());\n           }\n         }\n \n         for (BlockCollection bc : filesToDelete) {\n           LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n           BlocksMapUpdateInfo toRemoveBlocks \u003d\n               FSDirDeleteOp.deleteInternal(\n                   FSNamesystem.this, bc.getName(),\n                   INodesInPath.fromINode((INodeFile) bc), false);\n           changed |\u003d toRemoveBlocks !\u003d null;\n           if (toRemoveBlocks !\u003d null) {\n             removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n           }\n         }\n       } finally {\n         writeUnlock();\n       }\n       if (changed) {\n         getEditLog().logSync();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void clearCorruptLazyPersistFiles()\n        throws IOException {\n\n      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n      boolean changed \u003d false;\n      writeLock();\n      try {\n        final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n\n        while (it.hasNext()) {\n          Block b \u003d it.next();\n          BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n          if (blockInfo.getBlockCollection().getStoragePolicyID()\n              \u003d\u003d lpPolicy.getId()) {\n            filesToDelete.add(blockInfo.getBlockCollection());\n          }\n        }\n\n        for (BlockCollection bc : filesToDelete) {\n          LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n          BlocksMapUpdateInfo toRemoveBlocks \u003d\n              FSDirDeleteOp.deleteInternal(\n                  FSNamesystem.this, bc.getName(),\n                  INodesInPath.fromINode((INodeFile) bc), false);\n          changed |\u003d toRemoveBlocks !\u003d null;\n          if (toRemoveBlocks !\u003d null) {\n            removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n          }\n        }\n      } finally {\n        writeUnlock();\n      }\n      if (changed) {\n        getEditLog().logSync();\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "a38a37c63417a3b19dcdf98251af196c9d7b8c31": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7912. Erasure Coding: track BlockInfo instead of Block in UnderReplicatedBlocks and PendingReplicationBlocks. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:41 AM",
      "commitName": "a38a37c63417a3b19dcdf98251af196c9d7b8c31",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 11:32 AM",
      "commitNameOld": "11585883a9eb30ba080b9aa49dba42cb0a797d75",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n     private void clearCorruptLazyPersistFiles()\n         throws IOException {\n \n       BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n \n       List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n       boolean changed \u003d false;\n       writeLock();\n       try {\n-        final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n+        final Iterator\u003cBlockInfo\u003e it \u003d\n+            blockManager.getCorruptReplicaBlockIterator();\n \n         while (it.hasNext()) {\n           Block b \u003d it.next();\n           BlockInfo blockInfo \u003d getStoredBlock(b);\n           if (blockInfo.getBlockCollection().getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n             filesToDelete.add(blockInfo.getBlockCollection());\n           }\n         }\n \n         for (BlockCollection bc : filesToDelete) {\n           LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n           BlocksMapUpdateInfo toRemoveBlocks \u003d\n               FSDirDeleteOp.deleteInternal(\n                   FSNamesystem.this, bc.getName(),\n                   INodesInPath.fromINode((INodeFile) bc), false);\n           changed |\u003d toRemoveBlocks !\u003d null;\n           if (toRemoveBlocks !\u003d null) {\n             removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n           }\n         }\n       } finally {\n         writeUnlock();\n       }\n       if (changed) {\n         getEditLog().logSync();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void clearCorruptLazyPersistFiles()\n        throws IOException {\n\n      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n      boolean changed \u003d false;\n      writeLock();\n      try {\n        final Iterator\u003cBlockInfo\u003e it \u003d\n            blockManager.getCorruptReplicaBlockIterator();\n\n        while (it.hasNext()) {\n          Block b \u003d it.next();\n          BlockInfo blockInfo \u003d getStoredBlock(b);\n          if (blockInfo.getBlockCollection().getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n            filesToDelete.add(blockInfo.getBlockCollection());\n          }\n        }\n\n        for (BlockCollection bc : filesToDelete) {\n          LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n          BlocksMapUpdateInfo toRemoveBlocks \u003d\n              FSDirDeleteOp.deleteInternal(\n                  FSNamesystem.this, bc.getName(),\n                  INodesInPath.fromINode((INodeFile) bc), false);\n          changed |\u003d toRemoveBlocks !\u003d null;\n          if (toRemoveBlocks !\u003d null) {\n            removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n          }\n        }\n      } finally {\n        writeUnlock();\n      }\n      if (changed) {\n        getEditLog().logSync();\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "9f2f583f401189c3f4a2687795a9e3e0b288322b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7749. Erasure Coding: Add striped block support in INodeFile. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:07 AM",
      "commitName": "9f2f583f401189c3f4a2687795a9e3e0b288322b",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 11:07 AM",
      "commitNameOld": "ba9371492036983a9899398907ab41fe548f29b3",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private void clearCorruptLazyPersistFiles()\n         throws IOException {\n \n       BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n \n       List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n       boolean changed \u003d false;\n       writeLock();\n       try {\n         final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n \n         while (it.hasNext()) {\n           Block b \u003d it.next();\n-          BlockInfoContiguous blockInfo \u003d getStoredBlock(b);\n+          BlockInfo blockInfo \u003d getStoredBlock(b);\n           if (blockInfo.getBlockCollection().getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n             filesToDelete.add(blockInfo.getBlockCollection());\n           }\n         }\n \n         for (BlockCollection bc : filesToDelete) {\n           LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n           BlocksMapUpdateInfo toRemoveBlocks \u003d\n               FSDirDeleteOp.deleteInternal(\n                   FSNamesystem.this, bc.getName(),\n                   INodesInPath.fromINode((INodeFile) bc), false);\n           changed |\u003d toRemoveBlocks !\u003d null;\n           if (toRemoveBlocks !\u003d null) {\n             removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n           }\n         }\n       } finally {\n         writeUnlock();\n       }\n       if (changed) {\n         getEditLog().logSync();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void clearCorruptLazyPersistFiles()\n        throws IOException {\n\n      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n      boolean changed \u003d false;\n      writeLock();\n      try {\n        final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n\n        while (it.hasNext()) {\n          Block b \u003d it.next();\n          BlockInfo blockInfo \u003d getStoredBlock(b);\n          if (blockInfo.getBlockCollection().getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n            filesToDelete.add(blockInfo.getBlockCollection());\n          }\n        }\n\n        for (BlockCollection bc : filesToDelete) {\n          LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n          BlocksMapUpdateInfo toRemoveBlocks \u003d\n              FSDirDeleteOp.deleteInternal(\n                  FSNamesystem.this, bc.getName(),\n                  INodesInPath.fromINode((INodeFile) bc), false);\n          changed |\u003d toRemoveBlocks !\u003d null;\n          if (toRemoveBlocks !\u003d null) {\n            removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n          }\n        }\n      } finally {\n        writeUnlock();\n      }\n      if (changed) {\n        getEditLog().logSync();\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "ba9371492036983a9899398907ab41fe548f29b3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7716. Erasure Coding: extend BlockInfo to handle EC info. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:07 AM",
      "commitName": "ba9371492036983a9899398907ab41fe548f29b3",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 11:03 AM",
      "commitNameOld": "bc2833b1c91e107d090619d755c584f6eae82327",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,37 @@\n     private void clearCorruptLazyPersistFiles()\n         throws IOException {\n \n       BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n \n       List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n       boolean changed \u003d false;\n       writeLock();\n       try {\n         final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n \n         while (it.hasNext()) {\n           Block b \u003d it.next();\n-          BlockInfoContiguous blockInfo \u003d blockManager.getStoredBlock(b);\n-          if (blockInfo.getBlockCollection().getStoragePolicyID()\n-              \u003d\u003d lpPolicy.getId()) {\n+          BlockInfoContiguous blockInfo \u003d getStoredBlock(b);\n+          if (blockInfo.getBlockCollection().getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n             filesToDelete.add(blockInfo.getBlockCollection());\n           }\n         }\n \n         for (BlockCollection bc : filesToDelete) {\n           LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n           BlocksMapUpdateInfo toRemoveBlocks \u003d\n               FSDirDeleteOp.deleteInternal(\n                   FSNamesystem.this, bc.getName(),\n                   INodesInPath.fromINode((INodeFile) bc), false);\n           changed |\u003d toRemoveBlocks !\u003d null;\n           if (toRemoveBlocks !\u003d null) {\n             removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n           }\n         }\n       } finally {\n         writeUnlock();\n       }\n       if (changed) {\n         getEditLog().logSync();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void clearCorruptLazyPersistFiles()\n        throws IOException {\n\n      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n      boolean changed \u003d false;\n      writeLock();\n      try {\n        final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n\n        while (it.hasNext()) {\n          Block b \u003d it.next();\n          BlockInfoContiguous blockInfo \u003d getStoredBlock(b);\n          if (blockInfo.getBlockCollection().getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n            filesToDelete.add(blockInfo.getBlockCollection());\n          }\n        }\n\n        for (BlockCollection bc : filesToDelete) {\n          LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n          BlocksMapUpdateInfo toRemoveBlocks \u003d\n              FSDirDeleteOp.deleteInternal(\n                  FSNamesystem.this, bc.getName(),\n                  INodesInPath.fromINode((INodeFile) bc), false);\n          changed |\u003d toRemoveBlocks !\u003d null;\n          if (toRemoveBlocks !\u003d null) {\n            removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n          }\n        }\n      } finally {\n        writeUnlock();\n      }\n      if (changed) {\n        getEditLog().logSync();\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "c79e7f7d997596e0c38ae4cddff2bd0910581c16": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-8273. FSNamesystem#Delete() should not call logSync() when holding the lock. Contributed by Haohui Mai.\n",
      "commitDate": "28/04/15 6:05 PM",
      "commitName": "c79e7f7d997596e0c38ae4cddff2bd0910581c16",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-8273. FSNamesystem#Delete() should not call logSync() when holding the lock. Contributed by Haohui Mai.\n",
          "commitDate": "28/04/15 6:05 PM",
          "commitName": "c79e7f7d997596e0c38ae4cddff2bd0910581c16",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/04/15 10:23 AM",
          "commitNameOld": "cf6c8a1b4ee70dd45c2e42ac61999e61a05db035",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 4.32,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,38 @@\n     private void clearCorruptLazyPersistFiles()\n-        throws SafeModeException, AccessControlException,\n-        UnresolvedLinkException, IOException {\n+        throws IOException {\n \n       BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n \n-      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003cBlockCollection\u003e();\n-\n+      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n+      boolean changed \u003d false;\n       writeLock();\n-\n       try {\n         final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n \n         while (it.hasNext()) {\n           Block b \u003d it.next();\n           BlockInfoContiguous blockInfo \u003d blockManager.getStoredBlock(b);\n-          if (blockInfo.getBlockCollection().getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n+          if (blockInfo.getBlockCollection().getStoragePolicyID()\n+              \u003d\u003d lpPolicy.getId()) {\n             filesToDelete.add(blockInfo.getBlockCollection());\n           }\n         }\n \n         for (BlockCollection bc : filesToDelete) {\n           LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n           BlocksMapUpdateInfo toRemoveBlocks \u003d\n-          FSDirDeleteOp.deleteInternal(\n-              FSNamesystem.this, bc.getName(),\n-              INodesInPath.fromINode((INodeFile) bc), false);\n+              FSDirDeleteOp.deleteInternal(\n+                  FSNamesystem.this, bc.getName(),\n+                  INodesInPath.fromINode((INodeFile) bc), false);\n+          changed |\u003d toRemoveBlocks !\u003d null;\n           if (toRemoveBlocks !\u003d null) {\n             removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n           }\n         }\n       } finally {\n         writeUnlock();\n       }\n+      if (changed) {\n+        getEditLog().logSync();\n+      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void clearCorruptLazyPersistFiles()\n        throws IOException {\n\n      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n      boolean changed \u003d false;\n      writeLock();\n      try {\n        final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n\n        while (it.hasNext()) {\n          Block b \u003d it.next();\n          BlockInfoContiguous blockInfo \u003d blockManager.getStoredBlock(b);\n          if (blockInfo.getBlockCollection().getStoragePolicyID()\n              \u003d\u003d lpPolicy.getId()) {\n            filesToDelete.add(blockInfo.getBlockCollection());\n          }\n        }\n\n        for (BlockCollection bc : filesToDelete) {\n          LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n          BlocksMapUpdateInfo toRemoveBlocks \u003d\n              FSDirDeleteOp.deleteInternal(\n                  FSNamesystem.this, bc.getName(),\n                  INodesInPath.fromINode((INodeFile) bc), false);\n          changed |\u003d toRemoveBlocks !\u003d null;\n          if (toRemoveBlocks !\u003d null) {\n            removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n          }\n        }\n      } finally {\n        writeUnlock();\n      }\n      if (changed) {\n        getEditLog().logSync();\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[SafeModeException, AccessControlException, UnresolvedLinkException, IOException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8273. FSNamesystem#Delete() should not call logSync() when holding the lock. Contributed by Haohui Mai.\n",
          "commitDate": "28/04/15 6:05 PM",
          "commitName": "c79e7f7d997596e0c38ae4cddff2bd0910581c16",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/04/15 10:23 AM",
          "commitNameOld": "cf6c8a1b4ee70dd45c2e42ac61999e61a05db035",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 4.32,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,38 @@\n     private void clearCorruptLazyPersistFiles()\n-        throws SafeModeException, AccessControlException,\n-        UnresolvedLinkException, IOException {\n+        throws IOException {\n \n       BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n \n-      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003cBlockCollection\u003e();\n-\n+      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n+      boolean changed \u003d false;\n       writeLock();\n-\n       try {\n         final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n \n         while (it.hasNext()) {\n           Block b \u003d it.next();\n           BlockInfoContiguous blockInfo \u003d blockManager.getStoredBlock(b);\n-          if (blockInfo.getBlockCollection().getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n+          if (blockInfo.getBlockCollection().getStoragePolicyID()\n+              \u003d\u003d lpPolicy.getId()) {\n             filesToDelete.add(blockInfo.getBlockCollection());\n           }\n         }\n \n         for (BlockCollection bc : filesToDelete) {\n           LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n           BlocksMapUpdateInfo toRemoveBlocks \u003d\n-          FSDirDeleteOp.deleteInternal(\n-              FSNamesystem.this, bc.getName(),\n-              INodesInPath.fromINode((INodeFile) bc), false);\n+              FSDirDeleteOp.deleteInternal(\n+                  FSNamesystem.this, bc.getName(),\n+                  INodesInPath.fromINode((INodeFile) bc), false);\n+          changed |\u003d toRemoveBlocks !\u003d null;\n           if (toRemoveBlocks !\u003d null) {\n             removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n           }\n         }\n       } finally {\n         writeUnlock();\n       }\n+      if (changed) {\n+        getEditLog().logSync();\n+      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void clearCorruptLazyPersistFiles()\n        throws IOException {\n\n      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003c\u003e();\n      boolean changed \u003d false;\n      writeLock();\n      try {\n        final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n\n        while (it.hasNext()) {\n          Block b \u003d it.next();\n          BlockInfoContiguous blockInfo \u003d blockManager.getStoredBlock(b);\n          if (blockInfo.getBlockCollection().getStoragePolicyID()\n              \u003d\u003d lpPolicy.getId()) {\n            filesToDelete.add(blockInfo.getBlockCollection());\n          }\n        }\n\n        for (BlockCollection bc : filesToDelete) {\n          LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n          BlocksMapUpdateInfo toRemoveBlocks \u003d\n              FSDirDeleteOp.deleteInternal(\n                  FSNamesystem.this, bc.getName(),\n                  INodesInPath.fromINode((INodeFile) bc), false);\n          changed |\u003d toRemoveBlocks !\u003d null;\n          if (toRemoveBlocks !\u003d null) {\n            removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n          }\n        }\n      } finally {\n        writeUnlock();\n      }\n      if (changed) {\n        getEditLog().logSync();\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7743. Code cleanup of BlockInfo and rename BlockInfo to BlockInfoContiguous. Contributed by Jing Zhao.\n",
      "commitDate": "08/02/15 11:51 AM",
      "commitName": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "07/02/15 3:21 PM",
      "commitNameOld": "8f7d4bb09f760780dd193c97796ebf4d22cfd2d7",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private void clearCorruptLazyPersistFiles()\n         throws SafeModeException, AccessControlException,\n         UnresolvedLinkException, IOException {\n \n       BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n \n       List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003cBlockCollection\u003e();\n \n       writeLock();\n \n       try {\n         final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n \n         while (it.hasNext()) {\n           Block b \u003d it.next();\n-          BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n+          BlockInfoContiguous blockInfo \u003d blockManager.getStoredBlock(b);\n           if (blockInfo.getBlockCollection().getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n             filesToDelete.add(blockInfo.getBlockCollection());\n           }\n         }\n \n         for (BlockCollection bc : filesToDelete) {\n           LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n           BlocksMapUpdateInfo toRemoveBlocks \u003d\n           FSDirDeleteOp.deleteInternal(\n               FSNamesystem.this, bc.getName(),\n               INodesInPath.fromINode((INodeFile) bc), false);\n           if (toRemoveBlocks !\u003d null) {\n             removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n           }\n         }\n       } finally {\n         writeUnlock();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void clearCorruptLazyPersistFiles()\n        throws SafeModeException, AccessControlException,\n        UnresolvedLinkException, IOException {\n\n      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003cBlockCollection\u003e();\n\n      writeLock();\n\n      try {\n        final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n\n        while (it.hasNext()) {\n          Block b \u003d it.next();\n          BlockInfoContiguous blockInfo \u003d blockManager.getStoredBlock(b);\n          if (blockInfo.getBlockCollection().getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n            filesToDelete.add(blockInfo.getBlockCollection());\n          }\n        }\n\n        for (BlockCollection bc : filesToDelete) {\n          LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n          BlocksMapUpdateInfo toRemoveBlocks \u003d\n          FSDirDeleteOp.deleteInternal(\n              FSNamesystem.this, bc.getName(),\n              INodesInPath.fromINode((INodeFile) bc), false);\n          if (toRemoveBlocks !\u003d null) {\n            removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n          }\n        }\n      } finally {\n        writeUnlock();\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "24315e7d374a1ddd4329b64350cf96fc9ab6f59c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7573. Consolidate the implementation of delete() into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "17/01/15 12:56 PM",
      "commitName": "24315e7d374a1ddd4329b64350cf96fc9ab6f59c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "15/01/15 2:39 PM",
      "commitNameOld": "44eed6cbc97649c15177f9b36f6b119cc1900f7a",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.93,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,35 @@\n     private void clearCorruptLazyPersistFiles()\n         throws SafeModeException, AccessControlException,\n         UnresolvedLinkException, IOException {\n \n       BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n \n       List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003cBlockCollection\u003e();\n \n       writeLock();\n \n       try {\n         final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n \n         while (it.hasNext()) {\n           Block b \u003d it.next();\n           BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n           if (blockInfo.getBlockCollection().getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n             filesToDelete.add(blockInfo.getBlockCollection());\n           }\n         }\n \n         for (BlockCollection bc : filesToDelete) {\n           LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n-          deleteInternal(bc.getName(), false, false, false);\n+          BlocksMapUpdateInfo toRemoveBlocks \u003d\n+          FSDirDeleteOp.deleteInternal(\n+              FSNamesystem.this, bc.getName(),\n+              INodesInPath.fromINode((INodeFile) bc), false);\n+          if (toRemoveBlocks !\u003d null) {\n+            removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n+          }\n         }\n       } finally {\n         writeUnlock();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void clearCorruptLazyPersistFiles()\n        throws SafeModeException, AccessControlException,\n        UnresolvedLinkException, IOException {\n\n      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003cBlockCollection\u003e();\n\n      writeLock();\n\n      try {\n        final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n\n        while (it.hasNext()) {\n          Block b \u003d it.next();\n          BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n          if (blockInfo.getBlockCollection().getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n            filesToDelete.add(blockInfo.getBlockCollection());\n          }\n        }\n\n        for (BlockCollection bc : filesToDelete) {\n          LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n          BlocksMapUpdateInfo toRemoveBlocks \u003d\n          FSDirDeleteOp.deleteInternal(\n              FSNamesystem.this, bc.getName(),\n              INodesInPath.fromINode((INodeFile) bc), false);\n          if (toRemoveBlocks !\u003d null) {\n            removeBlocks(toRemoveBlocks); // Incremental deletion of blocks\n          }\n        }\n      } finally {\n        writeUnlock();\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "bb84f1fccb18c6c7373851e05d2451d55e908242": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7159. Use block storage policy to set lazy persist preference. (Arpit Agarwal)\n",
      "commitDate": "29/09/14 10:27 PM",
      "commitName": "bb84f1fccb18c6c7373851e05d2451d55e908242",
      "commitAuthor": "arp",
      "commitDateOld": "29/09/14 12:36 PM",
      "commitNameOld": "d45e7c7e856c7103752888c0395fa94985cd7670",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 0.41,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n     private void clearCorruptLazyPersistFiles()\n         throws SafeModeException, AccessControlException,\n         UnresolvedLinkException, IOException {\n \n+      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n+\n       List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003cBlockCollection\u003e();\n \n       writeLock();\n \n       try {\n         final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n \n         while (it.hasNext()) {\n           Block b \u003d it.next();\n           BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n-          if (blockInfo.getBlockCollection().getLazyPersistFlag()) {\n+          if (blockInfo.getBlockCollection().getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n             filesToDelete.add(blockInfo.getBlockCollection());\n           }\n         }\n \n         for (BlockCollection bc : filesToDelete) {\n           LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n           deleteInternal(bc.getName(), false, false, false);\n         }\n       } finally {\n         writeUnlock();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void clearCorruptLazyPersistFiles()\n        throws SafeModeException, AccessControlException,\n        UnresolvedLinkException, IOException {\n\n      BlockStoragePolicy lpPolicy \u003d blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      List\u003cBlockCollection\u003e filesToDelete \u003d new ArrayList\u003cBlockCollection\u003e();\n\n      writeLock();\n\n      try {\n        final Iterator\u003cBlock\u003e it \u003d blockManager.getCorruptReplicaBlockIterator();\n\n        while (it.hasNext()) {\n          Block b \u003d it.next();\n          BlockInfo blockInfo \u003d blockManager.getStoredBlock(b);\n          if (blockInfo.getBlockCollection().getStoragePolicyID() \u003d\u003d lpPolicy.getId()) {\n            filesToDelete.add(blockInfo.getBlockCollection());\n          }\n        }\n\n        for (BlockCollection bc : filesToDelete) {\n          LOG.warn(\"Removing lazyPersist file \" + bc.getName() + \" with no replicas.\");\n          deleteInternal(bc.getName(), false, false, false);\n        }\n      } finally {\n        writeUnlock();\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    }
  }
}