{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GetJournalEditServlet.java",
  "functionName": "checkStorageInfoOrSendError",
  "functionId": "checkStorageInfoOrSendError___storage-JNStorage__request-HttpServletRequest__response-HttpServletResponse",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java",
  "functionStartLine": 155,
  "functionEndLine": 180,
  "numCommitsSeen": 16,
  "timeTaken": 1752,
  "changeHistory": [
    "fba9d7cd746cd7b659d2fd9d2bfa23266be9009b",
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
    "96f28d878ee4d768ec487957535e6c585d521b9c",
    "b17018e4b821ec860144d8bd38bc1fcb0d7eeaa5",
    "74d4573a23db5586c6e47ff2277aa7c35237da34"
  ],
  "changeHistoryShort": {
    "fba9d7cd746cd7b659d2fd9d2bfa23266be9009b": "Ybodychange",
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de": "Ybodychange",
    "96f28d878ee4d768ec487957535e6c585d521b9c": "Ybodychange",
    "b17018e4b821ec860144d8bd38bc1fcb0d7eeaa5": "Ybodychange",
    "74d4573a23db5586c6e47ff2277aa7c35237da34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fba9d7cd746cd7b659d2fd9d2bfa23266be9009b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13621. Upgrade commons-lang version to 3.7 in hadoop-hdfs-project. Contributed by Takanobu Asanuma.\n",
      "commitDate": "18/06/18 10:17 AM",
      "commitName": "fba9d7cd746cd7b659d2fd9d2bfa23266be9009b",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "24/05/17 4:09 PM",
      "commitNameOld": "0e83ed5e7372c801c9fee01df91b6b56de467ab1",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 389.76,
      "commitsBetweenForRepo": 3354,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   private boolean checkStorageInfoOrSendError(JNStorage storage,\n       HttpServletRequest request, HttpServletResponse response)\n       throws IOException {\n     int myNsId \u003d storage.getNamespaceID();\n     String myClusterId \u003d storage.getClusterID();\n     \n-    String theirStorageInfoString \u003d StringEscapeUtils.escapeHtml(\n+    String theirStorageInfoString \u003d StringEscapeUtils.escapeHtml4(\n         request.getParameter(STORAGEINFO_PARAM));\n \n     if (theirStorageInfoString !\u003d null) {\n       int theirNsId \u003d StorageInfo.getNsIdFromColonSeparatedString(\n           theirStorageInfoString);\n       String theirClusterId \u003d StorageInfo.getClusterIdFromColonSeparatedString(\n           theirStorageInfoString);\n       if (myNsId !\u003d theirNsId || !myClusterId.equals(theirClusterId)) {\n         String msg \u003d \"This node has namespaceId \u0027\" + myNsId + \" and clusterId \u0027\"\n             + myClusterId + \"\u0027 but the requesting node expected \u0027\" + theirNsId\n             + \"\u0027 and \u0027\" + theirClusterId + \"\u0027\";\n         response.sendError(HttpServletResponse.SC_FORBIDDEN, msg);\n         LOG.warn(\"Received an invalid request file transfer request from \" +\n             request.getRemoteAddr() + \": \" + msg);\n         return false;\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean checkStorageInfoOrSendError(JNStorage storage,\n      HttpServletRequest request, HttpServletResponse response)\n      throws IOException {\n    int myNsId \u003d storage.getNamespaceID();\n    String myClusterId \u003d storage.getClusterID();\n    \n    String theirStorageInfoString \u003d StringEscapeUtils.escapeHtml4(\n        request.getParameter(STORAGEINFO_PARAM));\n\n    if (theirStorageInfoString !\u003d null) {\n      int theirNsId \u003d StorageInfo.getNsIdFromColonSeparatedString(\n          theirStorageInfoString);\n      String theirClusterId \u003d StorageInfo.getClusterIdFromColonSeparatedString(\n          theirStorageInfoString);\n      if (myNsId !\u003d theirNsId || !myClusterId.equals(theirClusterId)) {\n        String msg \u003d \"This node has namespaceId \u0027\" + myNsId + \" and clusterId \u0027\"\n            + myClusterId + \"\u0027 but the requesting node expected \u0027\" + theirNsId\n            + \"\u0027 and \u0027\" + theirClusterId + \"\u0027\";\n        response.sendError(HttpServletResponse.SC_FORBIDDEN, msg);\n        LOG.warn(\"Received an invalid request file transfer request from \" +\n            request.getRemoteAddr() + \": \" + msg);\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java",
      "extendedDetails": {}
    },
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5138. Support HDFS upgrade in HA. Contributed by Aaron T. Myers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561381 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 12:01 PM",
      "commitName": "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "15/11/12 12:37 PM",
      "commitNameOld": "96f28d878ee4d768ec487957535e6c585d521b9c",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 435.97,
      "commitsBetweenForRepo": 2508,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,26 @@\n   private boolean checkStorageInfoOrSendError(JNStorage storage,\n       HttpServletRequest request, HttpServletResponse response)\n       throws IOException {\n-    String myStorageInfoString \u003d storage.toColonSeparatedString();\n+    int myNsId \u003d storage.getNamespaceID();\n+    String myClusterId \u003d storage.getClusterID();\n+    \n     String theirStorageInfoString \u003d StringEscapeUtils.escapeHtml(\n         request.getParameter(STORAGEINFO_PARAM));\n \n-    if (theirStorageInfoString !\u003d null\n-        \u0026\u0026 !myStorageInfoString.equals(theirStorageInfoString)) {\n-      String msg \u003d \"This node has storage info \u0027\" + myStorageInfoString\n-          + \"\u0027 but the requesting node expected \u0027\"\n-          + theirStorageInfoString + \"\u0027\";\n-      \n-      response.sendError(HttpServletResponse.SC_FORBIDDEN, msg);\n-      LOG.warn(\"Received an invalid request file transfer request from \" +\n-          request.getRemoteAddr() + \": \" + msg);\n-      return false;\n+    if (theirStorageInfoString !\u003d null) {\n+      int theirNsId \u003d StorageInfo.getNsIdFromColonSeparatedString(\n+          theirStorageInfoString);\n+      String theirClusterId \u003d StorageInfo.getClusterIdFromColonSeparatedString(\n+          theirStorageInfoString);\n+      if (myNsId !\u003d theirNsId || !myClusterId.equals(theirClusterId)) {\n+        String msg \u003d \"This node has namespaceId \u0027\" + myNsId + \" and clusterId \u0027\"\n+            + myClusterId + \"\u0027 but the requesting node expected \u0027\" + theirNsId\n+            + \"\u0027 and \u0027\" + theirClusterId + \"\u0027\";\n+        response.sendError(HttpServletResponse.SC_FORBIDDEN, msg);\n+        LOG.warn(\"Received an invalid request file transfer request from \" +\n+            request.getRemoteAddr() + \": \" + msg);\n+        return false;\n+      }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean checkStorageInfoOrSendError(JNStorage storage,\n      HttpServletRequest request, HttpServletResponse response)\n      throws IOException {\n    int myNsId \u003d storage.getNamespaceID();\n    String myClusterId \u003d storage.getClusterID();\n    \n    String theirStorageInfoString \u003d StringEscapeUtils.escapeHtml(\n        request.getParameter(STORAGEINFO_PARAM));\n\n    if (theirStorageInfoString !\u003d null) {\n      int theirNsId \u003d StorageInfo.getNsIdFromColonSeparatedString(\n          theirStorageInfoString);\n      String theirClusterId \u003d StorageInfo.getClusterIdFromColonSeparatedString(\n          theirStorageInfoString);\n      if (myNsId !\u003d theirNsId || !myClusterId.equals(theirClusterId)) {\n        String msg \u003d \"This node has namespaceId \u0027\" + myNsId + \" and clusterId \u0027\"\n            + myClusterId + \"\u0027 but the requesting node expected \u0027\" + theirNsId\n            + \"\u0027 and \u0027\" + theirClusterId + \"\u0027\";\n        response.sendError(HttpServletResponse.SC_FORBIDDEN, msg);\n        LOG.warn(\"Received an invalid request file transfer request from \" +\n            request.getRemoteAddr() + \": \" + msg);\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java",
      "extendedDetails": {}
    },
    "96f28d878ee4d768ec487957535e6c585d521b9c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4100. Fix all findbug security warings. Contributed by Liang Xie\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1409995 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/11/12 12:37 PM",
      "commitName": "96f28d878ee4d768ec487957535e6c585d521b9c",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "08/10/12 12:11 PM",
      "commitNameOld": "70fc5cf01c9274c2afddac51f4999166d81d4e11",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 38.06,
      "commitsBetweenForRepo": 238,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n   private boolean checkStorageInfoOrSendError(JNStorage storage,\n       HttpServletRequest request, HttpServletResponse response)\n       throws IOException {\n     String myStorageInfoString \u003d storage.toColonSeparatedString();\n-    String theirStorageInfoString \u003d request.getParameter(STORAGEINFO_PARAM);\n-    \n+    String theirStorageInfoString \u003d StringEscapeUtils.escapeHtml(\n+        request.getParameter(STORAGEINFO_PARAM));\n+\n     if (theirStorageInfoString !\u003d null\n         \u0026\u0026 !myStorageInfoString.equals(theirStorageInfoString)) {\n       String msg \u003d \"This node has storage info \u0027\" + myStorageInfoString\n           + \"\u0027 but the requesting node expected \u0027\"\n           + theirStorageInfoString + \"\u0027\";\n       \n       response.sendError(HttpServletResponse.SC_FORBIDDEN, msg);\n       LOG.warn(\"Received an invalid request file transfer request from \" +\n           request.getRemoteAddr() + \": \" + msg);\n       return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean checkStorageInfoOrSendError(JNStorage storage,\n      HttpServletRequest request, HttpServletResponse response)\n      throws IOException {\n    String myStorageInfoString \u003d storage.toColonSeparatedString();\n    String theirStorageInfoString \u003d StringEscapeUtils.escapeHtml(\n        request.getParameter(STORAGEINFO_PARAM));\n\n    if (theirStorageInfoString !\u003d null\n        \u0026\u0026 !myStorageInfoString.equals(theirStorageInfoString)) {\n      String msg \u003d \"This node has storage info \u0027\" + myStorageInfoString\n          + \"\u0027 but the requesting node expected \u0027\"\n          + theirStorageInfoString + \"\u0027\";\n      \n      response.sendError(HttpServletResponse.SC_FORBIDDEN, msg);\n      LOG.warn(\"Received an invalid request file transfer request from \" +\n          request.getRemoteAddr() + \": \" + msg);\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java",
      "extendedDetails": {}
    },
    "b17018e4b821ec860144d8bd38bc1fcb0d7eeaa5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3693. JNStorage should read its storage info even before a writer becomes active. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1365794 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/12 2:47 PM",
      "commitName": "b17018e4b821ec860144d8bd38bc1fcb0d7eeaa5",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "19/07/12 5:25 PM",
      "commitNameOld": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 5.89,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,19 @@\n   private boolean checkStorageInfoOrSendError(JNStorage storage,\n       HttpServletRequest request, HttpServletResponse response)\n       throws IOException {\n     String myStorageInfoString \u003d storage.toColonSeparatedString();\n     String theirStorageInfoString \u003d request.getParameter(STORAGEINFO_PARAM);\n     \n     if (theirStorageInfoString !\u003d null\n         \u0026\u0026 !myStorageInfoString.equals(theirStorageInfoString)) {\n-      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n-              \"This node has storage info \" + myStorageInfoString\n-                  + \" but the requesting node expected \"\n-                  + theirStorageInfoString);\n-      LOG.warn(\"Received an invalid request file transfer request \"\n-          + \" with storage info \" + theirStorageInfoString);\n+      String msg \u003d \"This node has storage info \u0027\" + myStorageInfoString\n+          + \"\u0027 but the requesting node expected \u0027\"\n+          + theirStorageInfoString + \"\u0027\";\n+      \n+      response.sendError(HttpServletResponse.SC_FORBIDDEN, msg);\n+      LOG.warn(\"Received an invalid request file transfer request from \" +\n+          request.getRemoteAddr() + \": \" + msg);\n       return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean checkStorageInfoOrSendError(JNStorage storage,\n      HttpServletRequest request, HttpServletResponse response)\n      throws IOException {\n    String myStorageInfoString \u003d storage.toColonSeparatedString();\n    String theirStorageInfoString \u003d request.getParameter(STORAGEINFO_PARAM);\n    \n    if (theirStorageInfoString !\u003d null\n        \u0026\u0026 !myStorageInfoString.equals(theirStorageInfoString)) {\n      String msg \u003d \"This node has storage info \u0027\" + myStorageInfoString\n          + \"\u0027 but the requesting node expected \u0027\"\n          + theirStorageInfoString + \"\u0027\";\n      \n      response.sendError(HttpServletResponse.SC_FORBIDDEN, msg);\n      LOG.warn(\"Received an invalid request file transfer request from \" +\n          request.getRemoteAddr() + \": \" + msg);\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java",
      "extendedDetails": {}
    },
    "74d4573a23db5586c6e47ff2277aa7c35237da34": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3077. Quorum-based protocol for reading and writing edit logs. Contributed by Todd Lipcon based on initial work from Brandon Li and Hari Mankude.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1363596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 5:25 PM",
      "commitName": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,18 @@\n+  private boolean checkStorageInfoOrSendError(JNStorage storage,\n+      HttpServletRequest request, HttpServletResponse response)\n+      throws IOException {\n+    String myStorageInfoString \u003d storage.toColonSeparatedString();\n+    String theirStorageInfoString \u003d request.getParameter(STORAGEINFO_PARAM);\n+    \n+    if (theirStorageInfoString !\u003d null\n+        \u0026\u0026 !myStorageInfoString.equals(theirStorageInfoString)) {\n+      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n+              \"This node has storage info \" + myStorageInfoString\n+                  + \" but the requesting node expected \"\n+                  + theirStorageInfoString);\n+      LOG.warn(\"Received an invalid request file transfer request \"\n+          + \" with storage info \" + theirStorageInfoString);\n+      return false;\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean checkStorageInfoOrSendError(JNStorage storage,\n      HttpServletRequest request, HttpServletResponse response)\n      throws IOException {\n    String myStorageInfoString \u003d storage.toColonSeparatedString();\n    String theirStorageInfoString \u003d request.getParameter(STORAGEINFO_PARAM);\n    \n    if (theirStorageInfoString !\u003d null\n        \u0026\u0026 !myStorageInfoString.equals(theirStorageInfoString)) {\n      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n              \"This node has storage info \" + myStorageInfoString\n                  + \" but the requesting node expected \"\n                  + theirStorageInfoString);\n      LOG.warn(\"Received an invalid request file transfer request \"\n          + \" with storage info \" + theirStorageInfoString);\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/GetJournalEditServlet.java"
    }
  }
}