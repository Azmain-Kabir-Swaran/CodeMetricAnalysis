{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationCLI.java",
  "functionName": "printApplicationReport",
  "functionId": "printApplicationReport___applicationId-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
  "functionStartLine": 599,
  "functionEndLine": 682,
  "numCommitsSeen": 72,
  "timeTaken": 7182,
  "changeHistory": [
    "d125d3910843eeaa25dd09fae493c6fd258757e5",
    "53f2768926700d2a27ce6223f1ccbfd3be49fc29",
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
    "ab923a53fcf55d4d75aa027d46e3c4a659015325",
    "eb0a483ed07399c7a06ed9db4bfbec382de470da",
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "ae5308fe1d08479da0f3929cc6a57816411e9121",
    "b6265d39c5d0fda21dfe55273f193d8a6a20c6a8",
    "0306d902f53582320aa5895ca9f5c31f64aaaff6",
    "1db355a875c3ecc40a244045c6812e00c8d36ef1",
    "d468c9aaf15e977f12e6214b47996412c907e069",
    "856b46cf47d3d17d3db2ca23106cb472aa8dd488",
    "ca3381de61ff53604d9389694049a1a4dedc7571",
    "fae3e8614f4f9a42904e39c51ca68b0d1e67469f",
    "a0ad975ea1e70f9532cf6cb6c1d9d92736ca0ebc",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "43876770d91a374563bf3379a5ffab5c2bac2264",
    "448df186467c64d992d6d8c9b35b645dbd48898c",
    "37eed0a3e1c1a826ce1505325cc54201b3b105f7",
    "10e1e314acc9d4d08765eb81906db7d636bc9609",
    "331b1123fbb892524ecb58e551c20befd26c9ea9"
  ],
  "changeHistoryShort": {
    "d125d3910843eeaa25dd09fae493c6fd258757e5": "Ybodychange",
    "53f2768926700d2a27ce6223f1ccbfd3be49fc29": "Ymultichange(Yreturntypechange,Ybodychange)",
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca": "Ymultichange(Yreturntypechange,Ybodychange)",
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": "Ybodychange",
    "ab923a53fcf55d4d75aa027d46e3c4a659015325": "Ybodychange",
    "eb0a483ed07399c7a06ed9db4bfbec382de470da": "Ybodychange",
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "ae5308fe1d08479da0f3929cc6a57816411e9121": "Ybodychange",
    "b6265d39c5d0fda21dfe55273f193d8a6a20c6a8": "Ybodychange",
    "0306d902f53582320aa5895ca9f5c31f64aaaff6": "Ybodychange",
    "1db355a875c3ecc40a244045c6812e00c8d36ef1": "Ybodychange",
    "d468c9aaf15e977f12e6214b47996412c907e069": "Ybodychange",
    "856b46cf47d3d17d3db2ca23106cb472aa8dd488": "Ybodychange",
    "ca3381de61ff53604d9389694049a1a4dedc7571": "Ybodychange",
    "fae3e8614f4f9a42904e39c51ca68b0d1e67469f": "Ymultichange(Yreturntypechange,Ybodychange)",
    "a0ad975ea1e70f9532cf6cb6c1d9d92736ca0ebc": "Ybodychange",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Yexceptionschange",
    "43876770d91a374563bf3379a5ffab5c2bac2264": "Ybodychange",
    "448df186467c64d992d6d8c9b35b645dbd48898c": "Ybodychange",
    "37eed0a3e1c1a826ce1505325cc54201b3b105f7": "Ybodychange",
    "10e1e314acc9d4d08765eb81906db7d636bc9609": "Ymultichange(Yexceptionschange,Ybodychange)",
    "331b1123fbb892524ecb58e551c20befd26c9ea9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d125d3910843eeaa25dd09fae493c6fd258757e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6973. Adding RM Cluster Id in ApplicationReport. Contributed by Bilwa S T.\n",
      "commitDate": "29/04/20 11:23 AM",
      "commitName": "d125d3910843eeaa25dd09fae493c6fd258757e5",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "22/01/20 7:25 AM",
      "commitNameOld": "9520b2ad790bd8527033a03e7ee50da71a85df1d",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 98.12,
      "commitsBetweenForRepo": 318,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,84 @@\n   private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n       appReport \u003d client.getApplicationReport(\n           ApplicationId.fromString(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tApplication Priority : \");\n       appReportStr.println(appReport.getPriority());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       printResourceUsage(appReportStr, usageReport);\n       appReportStr.print(\"\\tLog Aggregation Status : \");\n       appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n           : appReport.getLogAggregationStatus());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.println(appReport.getDiagnostics());\n       appReportStr.print(\"\\tUnmanaged Application : \");\n       appReportStr.println(appReport.isUnmanagedApp());\n       appReportStr.print(\"\\tApplication Node Label Expression : \");\n       appReportStr.println(appReport.getAppNodeLabelExpression());\n       appReportStr.print(\"\\tAM container Node Label Expression : \");\n       appReportStr.println(appReport.getAmNodeLabelExpression());\n       for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()\n           .values()) {\n         appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\n         appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\n         appReportStr.println(\n             \"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\n       }\n+      String rmClusterId \u003d appReport.getRMClusterId();\n+      if (rmClusterId !\u003d null) {\n+        appReportStr.print(\"\\tRMClusterId : \");\n+        appReportStr.println(rmClusterId);\n+      }\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(\n          ApplicationId.fromString(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tApplication Priority : \");\n      appReportStr.println(appReport.getPriority());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      printResourceUsage(appReportStr, usageReport);\n      appReportStr.print(\"\\tLog Aggregation Status : \");\n      appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n          : appReport.getLogAggregationStatus());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.println(appReport.getDiagnostics());\n      appReportStr.print(\"\\tUnmanaged Application : \");\n      appReportStr.println(appReport.isUnmanagedApp());\n      appReportStr.print(\"\\tApplication Node Label Expression : \");\n      appReportStr.println(appReport.getAppNodeLabelExpression());\n      appReportStr.print(\"\\tAM container Node Label Expression : \");\n      appReportStr.println(appReport.getAmNodeLabelExpression());\n      for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()\n          .values()) {\n        appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\n        appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\n        appReportStr.println(\n            \"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\n      }\n      String rmClusterId \u003d appReport.getRMClusterId();\n      if (rmClusterId !\u003d null) {\n        appReportStr.print(\"\\tRMClusterId : \");\n        appReportStr.println(rmClusterId);\n      }\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "53f2768926700d2a27ce6223f1ccbfd3be49fc29": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-7724. yarn application status should support application name. Contributed by Jian He\n",
      "commitDate": "12/01/18 3:33 PM",
      "commitName": "53f2768926700d2a27ce6223f1ccbfd3be49fc29",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-7724. yarn application status should support application name. Contributed by Jian He\n",
          "commitDate": "12/01/18 3:33 PM",
          "commitName": "53f2768926700d2a27ce6223f1ccbfd3be49fc29",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 67.09,
          "commitsBetweenForRepo": 364,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,79 +1,79 @@\n-  private ApplicationReport printApplicationReport(String applicationId)\n+  private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n       appReport \u003d client.getApplicationReport(\n           ApplicationId.fromString(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n-      return null;\n+      return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tApplication Priority : \");\n       appReportStr.println(appReport.getPriority());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       printResourceUsage(appReportStr, usageReport);\n       appReportStr.print(\"\\tLog Aggregation Status : \");\n       appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n           : appReport.getLogAggregationStatus());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.println(appReport.getDiagnostics());\n       appReportStr.print(\"\\tUnmanaged Application : \");\n       appReportStr.println(appReport.isUnmanagedApp());\n       appReportStr.print(\"\\tApplication Node Label Expression : \");\n       appReportStr.println(appReport.getAppNodeLabelExpression());\n       appReportStr.print(\"\\tAM container Node Label Expression : \");\n       appReportStr.println(appReport.getAmNodeLabelExpression());\n       for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()\n           .values()) {\n         appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\n         appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\n         appReportStr.println(\n             \"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\n       }\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n-      return null;\n+      return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n-    return appReport;\n+    return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(\n          ApplicationId.fromString(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tApplication Priority : \");\n      appReportStr.println(appReport.getPriority());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      printResourceUsage(appReportStr, usageReport);\n      appReportStr.print(\"\\tLog Aggregation Status : \");\n      appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n          : appReport.getLogAggregationStatus());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.println(appReport.getDiagnostics());\n      appReportStr.print(\"\\tUnmanaged Application : \");\n      appReportStr.println(appReport.isUnmanagedApp());\n      appReportStr.print(\"\\tApplication Node Label Expression : \");\n      appReportStr.println(appReport.getAppNodeLabelExpression());\n      appReportStr.print(\"\\tAM container Node Label Expression : \");\n      appReportStr.println(appReport.getAmNodeLabelExpression());\n      for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()\n          .values()) {\n        appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\n        appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\n        appReportStr.println(\n            \"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\n      }\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
          "extendedDetails": {
            "oldValue": "ApplicationReport",
            "newValue": "int"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7724. yarn application status should support application name. Contributed by Jian He\n",
          "commitDate": "12/01/18 3:33 PM",
          "commitName": "53f2768926700d2a27ce6223f1ccbfd3be49fc29",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 67.09,
          "commitsBetweenForRepo": 364,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,79 +1,79 @@\n-  private ApplicationReport printApplicationReport(String applicationId)\n+  private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n       appReport \u003d client.getApplicationReport(\n           ApplicationId.fromString(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n-      return null;\n+      return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tApplication Priority : \");\n       appReportStr.println(appReport.getPriority());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       printResourceUsage(appReportStr, usageReport);\n       appReportStr.print(\"\\tLog Aggregation Status : \");\n       appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n           : appReport.getLogAggregationStatus());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.println(appReport.getDiagnostics());\n       appReportStr.print(\"\\tUnmanaged Application : \");\n       appReportStr.println(appReport.isUnmanagedApp());\n       appReportStr.print(\"\\tApplication Node Label Expression : \");\n       appReportStr.println(appReport.getAppNodeLabelExpression());\n       appReportStr.print(\"\\tAM container Node Label Expression : \");\n       appReportStr.println(appReport.getAmNodeLabelExpression());\n       for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()\n           .values()) {\n         appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\n         appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\n         appReportStr.println(\n             \"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\n       }\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n-      return null;\n+      return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n-    return appReport;\n+    return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(\n          ApplicationId.fromString(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tApplication Priority : \");\n      appReportStr.println(appReport.getPriority());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      printResourceUsage(appReportStr, usageReport);\n      appReportStr.print(\"\\tLog Aggregation Status : \");\n      appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n          : appReport.getLogAggregationStatus());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.println(appReport.getDiagnostics());\n      appReportStr.print(\"\\tUnmanaged Application : \");\n      appReportStr.println(appReport.isUnmanagedApp());\n      appReportStr.print(\"\\tApplication Node Label Expression : \");\n      appReportStr.println(appReport.getAppNodeLabelExpression());\n      appReportStr.print(\"\\tAM container Node Label Expression : \");\n      appReportStr.println(appReport.getAmNodeLabelExpression());\n      for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()\n          .values()) {\n        appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\n        appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\n        appReportStr.println(\n            \"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\n      }\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
          "commitAuthor": "Jian He",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 55.22,
          "commitsBetweenForRepo": 540,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,79 +1,79 @@\n-  private int printApplicationReport(String applicationId)\n+  private ApplicationReport printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n       appReport \u003d client.getApplicationReport(\n           ApplicationId.fromString(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n-      return -1;\n+      return null;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tApplication Priority : \");\n       appReportStr.println(appReport.getPriority());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       printResourceUsage(appReportStr, usageReport);\n       appReportStr.print(\"\\tLog Aggregation Status : \");\n       appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n           : appReport.getLogAggregationStatus());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.println(appReport.getDiagnostics());\n       appReportStr.print(\"\\tUnmanaged Application : \");\n       appReportStr.println(appReport.isUnmanagedApp());\n       appReportStr.print(\"\\tApplication Node Label Expression : \");\n       appReportStr.println(appReport.getAppNodeLabelExpression());\n       appReportStr.print(\"\\tAM container Node Label Expression : \");\n       appReportStr.println(appReport.getAmNodeLabelExpression());\n       for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()\n           .values()) {\n         appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\n         appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\n         appReportStr.println(\n             \"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\n       }\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n-      return -1;\n+      return null;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n-    return 0;\n+    return appReport;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ApplicationReport printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(\n          ApplicationId.fromString(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return null;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tApplication Priority : \");\n      appReportStr.println(appReport.getPriority());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      printResourceUsage(appReportStr, usageReport);\n      appReportStr.print(\"\\tLog Aggregation Status : \");\n      appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n          : appReport.getLogAggregationStatus());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.println(appReport.getDiagnostics());\n      appReportStr.print(\"\\tUnmanaged Application : \");\n      appReportStr.println(appReport.isUnmanagedApp());\n      appReportStr.print(\"\\tApplication Node Label Expression : \");\n      appReportStr.println(appReport.getAppNodeLabelExpression());\n      appReportStr.print(\"\\tAM container Node Label Expression : \");\n      appReportStr.println(appReport.getAmNodeLabelExpression());\n      for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()\n          .values()) {\n        appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\n        appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\n        appReportStr.println(\n            \"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\n      }\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return null;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return appReport;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
          "extendedDetails": {
            "oldValue": "int",
            "newValue": "ApplicationReport"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
          "commitAuthor": "Jian He",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 55.22,
          "commitsBetweenForRepo": 540,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,79 +1,79 @@\n-  private int printApplicationReport(String applicationId)\n+  private ApplicationReport printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n       appReport \u003d client.getApplicationReport(\n           ApplicationId.fromString(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n-      return -1;\n+      return null;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tApplication Priority : \");\n       appReportStr.println(appReport.getPriority());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       printResourceUsage(appReportStr, usageReport);\n       appReportStr.print(\"\\tLog Aggregation Status : \");\n       appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n           : appReport.getLogAggregationStatus());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.println(appReport.getDiagnostics());\n       appReportStr.print(\"\\tUnmanaged Application : \");\n       appReportStr.println(appReport.isUnmanagedApp());\n       appReportStr.print(\"\\tApplication Node Label Expression : \");\n       appReportStr.println(appReport.getAppNodeLabelExpression());\n       appReportStr.print(\"\\tAM container Node Label Expression : \");\n       appReportStr.println(appReport.getAmNodeLabelExpression());\n       for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()\n           .values()) {\n         appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\n         appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\n         appReportStr.println(\n             \"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\n       }\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n-      return -1;\n+      return null;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n-    return 0;\n+    return appReport;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ApplicationReport printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(\n          ApplicationId.fromString(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return null;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tApplication Priority : \");\n      appReportStr.println(appReport.getPriority());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      printResourceUsage(appReportStr, usageReport);\n      appReportStr.print(\"\\tLog Aggregation Status : \");\n      appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n          : appReport.getLogAggregationStatus());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.println(appReport.getDiagnostics());\n      appReportStr.print(\"\\tUnmanaged Application : \");\n      appReportStr.println(appReport.isUnmanagedApp());\n      appReportStr.print(\"\\tApplication Node Label Expression : \");\n      appReportStr.println(appReport.getAppNodeLabelExpression());\n      appReportStr.print(\"\\tAM container Node Label Expression : \");\n      appReportStr.println(appReport.getAmNodeLabelExpression());\n      for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()\n          .values()) {\n        appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\n        appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\n        appReportStr.println(\n            \"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\n      }\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return null;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return appReport;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6232. Update resource usage and preempted resource calculations to take into account all resource types. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
      "commitAuthor": "Sunil G",
      "commitDateOld": "07/09/17 6:45 PM",
      "commitNameOld": "56d93d2e39ead89bb79c4f4096554820dc77e84b",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 4.61,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,79 @@\n   private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n       appReport \u003d client.getApplicationReport(\n           ApplicationId.fromString(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tApplication Priority : \");\n       appReportStr.println(appReport.getPriority());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n-      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n-\n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n-      if (usageReport !\u003d null) {\n-        //completed app report in the timeline server doesn\u0027t have usage report\n-        appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n-        appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n-        appReportStr.print(\"\\tAggregate Resource Preempted : \");\n-        appReportStr.print(usageReport.getPreemptedMemorySeconds() +\n-            \" MB-seconds, \");\n-        appReportStr.println(usageReport.getPreemptedVcoreSeconds() +\n-            \" vcore-seconds\");\n-      } else {\n-        appReportStr.println(\"N/A\");\n-        appReportStr.print(\"\\tAggregate Resource Preempted : \");\n-        appReportStr.println(\"N/A\");\n-      }\n+      printResourceUsage(appReportStr, usageReport);\n       appReportStr.print(\"\\tLog Aggregation Status : \");\n       appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n           : appReport.getLogAggregationStatus());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.println(appReport.getDiagnostics());\n       appReportStr.print(\"\\tUnmanaged Application : \");\n       appReportStr.println(appReport.isUnmanagedApp());\n       appReportStr.print(\"\\tApplication Node Label Expression : \");\n       appReportStr.println(appReport.getAppNodeLabelExpression());\n       appReportStr.print(\"\\tAM container Node Label Expression : \");\n       appReportStr.println(appReport.getAmNodeLabelExpression());\n       for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()\n           .values()) {\n         appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\n         appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\n         appReportStr.println(\n             \"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\n       }\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(\n          ApplicationId.fromString(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tApplication Priority : \");\n      appReportStr.println(appReport.getPriority());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      printResourceUsage(appReportStr, usageReport);\n      appReportStr.print(\"\\tLog Aggregation Status : \");\n      appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n          : appReport.getLogAggregationStatus());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.println(appReport.getDiagnostics());\n      appReportStr.print(\"\\tUnmanaged Application : \");\n      appReportStr.println(appReport.isUnmanagedApp());\n      appReportStr.print(\"\\tApplication Node Label Expression : \");\n      appReportStr.println(appReport.getAppNodeLabelExpression());\n      appReportStr.print(\"\\tAM container Node Label Expression : \");\n      appReportStr.println(appReport.getAmNodeLabelExpression());\n      for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()\n          .values()) {\n        appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\n        appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\n        appReportStr.println(\n            \"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\n      }\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "ab923a53fcf55d4d75aa027d46e3c4a659015325": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5965. Retrospect ApplicationReport#getApplicationTimeouts. Contributed by Rohith Sharma K S\n",
      "commitDate": "07/12/16 10:57 AM",
      "commitName": "ab923a53fcf55d4d75aa027d46e3c4a659015325",
      "commitAuthor": "Sunil",
      "commitDateOld": "24/11/16 4:48 AM",
      "commitNameOld": "eb0a483ed07399c7a06ed9db4bfbec382de470da",
      "commitAuthorOld": "Sunil",
      "daysBetweenCommits": 13.26,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,93 +1,94 @@\n   private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n       appReport \u003d client.getApplicationReport(\n           ApplicationId.fromString(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tApplication Priority : \");\n       appReportStr.println(appReport.getPriority());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tAggregate Resource Allocation : \");\n \n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       if (usageReport !\u003d null) {\n         //completed app report in the timeline server doesn\u0027t have usage report\n         appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n         appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n         appReportStr.print(\"\\tAggregate Resource Preempted : \");\n         appReportStr.print(usageReport.getPreemptedMemorySeconds() +\n             \" MB-seconds, \");\n         appReportStr.println(usageReport.getPreemptedVcoreSeconds() +\n             \" vcore-seconds\");\n       } else {\n         appReportStr.println(\"N/A\");\n         appReportStr.print(\"\\tAggregate Resource Preempted : \");\n         appReportStr.println(\"N/A\");\n       }\n       appReportStr.print(\"\\tLog Aggregation Status : \");\n       appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n           : appReport.getLogAggregationStatus());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.println(appReport.getDiagnostics());\n       appReportStr.print(\"\\tUnmanaged Application : \");\n       appReportStr.println(appReport.isUnmanagedApp());\n       appReportStr.print(\"\\tApplication Node Label Expression : \");\n       appReportStr.println(appReport.getAppNodeLabelExpression());\n       appReportStr.print(\"\\tAM container Node Label Expression : \");\n       appReportStr.println(appReport.getAmNodeLabelExpression());\n-      for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()) {\n+      for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()\n+          .values()) {\n         appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\n         appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\n         appReportStr.println(\n             \"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\n       }\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(\n          ApplicationId.fromString(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tApplication Priority : \");\n      appReportStr.println(appReport.getPriority());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      if (usageReport !\u003d null) {\n        //completed app report in the timeline server doesn\u0027t have usage report\n        appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n        appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n        appReportStr.print(\"\\tAggregate Resource Preempted : \");\n        appReportStr.print(usageReport.getPreemptedMemorySeconds() +\n            \" MB-seconds, \");\n        appReportStr.println(usageReport.getPreemptedVcoreSeconds() +\n            \" vcore-seconds\");\n      } else {\n        appReportStr.println(\"N/A\");\n        appReportStr.print(\"\\tAggregate Resource Preempted : \");\n        appReportStr.println(\"N/A\");\n      }\n      appReportStr.print(\"\\tLog Aggregation Status : \");\n      appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n          : appReport.getLogAggregationStatus());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.println(appReport.getDiagnostics());\n      appReportStr.print(\"\\tUnmanaged Application : \");\n      appReportStr.println(appReport.isUnmanagedApp());\n      appReportStr.print(\"\\tApplication Node Label Expression : \");\n      appReportStr.println(appReport.getAppNodeLabelExpression());\n      appReportStr.print(\"\\tAM container Node Label Expression : \");\n      appReportStr.println(appReport.getAmNodeLabelExpression());\n      for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()\n          .values()) {\n        appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\n        appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\n        appReportStr.println(\n            \"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\n      }\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "eb0a483ed07399c7a06ed9db4bfbec382de470da": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4206. Add Application timeouts in Application report and CLI. Contributed by Rohith Sharma K S.\n",
      "commitDate": "24/11/16 4:48 AM",
      "commitName": "eb0a483ed07399c7a06ed9db4bfbec382de470da",
      "commitAuthor": "Sunil",
      "commitDateOld": "10/11/16 2:35 PM",
      "commitNameOld": "93eeb13164707d0e3556c2bf737bd2ee09a335c6",
      "commitAuthorOld": "Eric Payne",
      "daysBetweenCommits": 13.59,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,93 @@\n   private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n       appReport \u003d client.getApplicationReport(\n           ApplicationId.fromString(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tApplication Priority : \");\n       appReportStr.println(appReport.getPriority());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tAggregate Resource Allocation : \");\n \n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       if (usageReport !\u003d null) {\n         //completed app report in the timeline server doesn\u0027t have usage report\n         appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n         appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n         appReportStr.print(\"\\tAggregate Resource Preempted : \");\n         appReportStr.print(usageReport.getPreemptedMemorySeconds() +\n             \" MB-seconds, \");\n         appReportStr.println(usageReport.getPreemptedVcoreSeconds() +\n             \" vcore-seconds\");\n       } else {\n         appReportStr.println(\"N/A\");\n         appReportStr.print(\"\\tAggregate Resource Preempted : \");\n         appReportStr.println(\"N/A\");\n       }\n       appReportStr.print(\"\\tLog Aggregation Status : \");\n       appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n           : appReport.getLogAggregationStatus());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.println(appReport.getDiagnostics());\n       appReportStr.print(\"\\tUnmanaged Application : \");\n       appReportStr.println(appReport.isUnmanagedApp());\n       appReportStr.print(\"\\tApplication Node Label Expression : \");\n       appReportStr.println(appReport.getAppNodeLabelExpression());\n       appReportStr.print(\"\\tAM container Node Label Expression : \");\n-      appReportStr.print(appReport.getAmNodeLabelExpression());\n+      appReportStr.println(appReport.getAmNodeLabelExpression());\n+      for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()) {\n+        appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\n+        appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\n+        appReportStr.println(\n+            \"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\n+      }\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(\n          ApplicationId.fromString(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tApplication Priority : \");\n      appReportStr.println(appReport.getPriority());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      if (usageReport !\u003d null) {\n        //completed app report in the timeline server doesn\u0027t have usage report\n        appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n        appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n        appReportStr.print(\"\\tAggregate Resource Preempted : \");\n        appReportStr.print(usageReport.getPreemptedMemorySeconds() +\n            \" MB-seconds, \");\n        appReportStr.println(usageReport.getPreemptedVcoreSeconds() +\n            \" vcore-seconds\");\n      } else {\n        appReportStr.println(\"N/A\");\n        appReportStr.print(\"\\tAggregate Resource Preempted : \");\n        appReportStr.println(\"N/A\");\n      }\n      appReportStr.print(\"\\tLog Aggregation Status : \");\n      appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n          : appReport.getLogAggregationStatus());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.println(appReport.getDiagnostics());\n      appReportStr.print(\"\\tUnmanaged Application : \");\n      appReportStr.println(appReport.isUnmanagedApp());\n      appReportStr.print(\"\\tApplication Node Label Expression : \");\n      appReportStr.println(appReport.getAppNodeLabelExpression());\n      appReportStr.print(\"\\tAM container Node Label Expression : \");\n      appReportStr.println(appReport.getAmNodeLabelExpression());\n      for (ApplicationTimeout timeout : appReport.getApplicationTimeouts()) {\n        appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\n        appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\n        appReportStr.println(\n            \"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\n      }\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4218. Metric for resource*time that was preempted. Contributed by Chang Li.\n",
      "commitDate": "10/11/16 2:35 PM",
      "commitName": "93eeb13164707d0e3556c2bf737bd2ee09a335c6",
      "commitAuthor": "Eric Payne",
      "commitDateOld": "29/08/16 2:46 PM",
      "commitNameOld": "ed6ff5cd789cab621fbfb88c8e8de4f215cd2961",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 73.03,
      "commitsBetweenForRepo": 567,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,87 @@\n   private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n       appReport \u003d client.getApplicationReport(\n           ApplicationId.fromString(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tApplication Priority : \");\n       appReportStr.println(appReport.getPriority());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tAggregate Resource Allocation : \");\n \n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       if (usageReport !\u003d null) {\n         //completed app report in the timeline server doesn\u0027t have usage report\n         appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n         appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n+        appReportStr.print(\"\\tAggregate Resource Preempted : \");\n+        appReportStr.print(usageReport.getPreemptedMemorySeconds() +\n+            \" MB-seconds, \");\n+        appReportStr.println(usageReport.getPreemptedVcoreSeconds() +\n+            \" vcore-seconds\");\n       } else {\n         appReportStr.println(\"N/A\");\n+        appReportStr.print(\"\\tAggregate Resource Preempted : \");\n+        appReportStr.println(\"N/A\");\n       }\n       appReportStr.print(\"\\tLog Aggregation Status : \");\n       appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n           : appReport.getLogAggregationStatus());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.println(appReport.getDiagnostics());\n       appReportStr.print(\"\\tUnmanaged Application : \");\n       appReportStr.println(appReport.isUnmanagedApp());\n       appReportStr.print(\"\\tApplication Node Label Expression : \");\n       appReportStr.println(appReport.getAppNodeLabelExpression());\n       appReportStr.print(\"\\tAM container Node Label Expression : \");\n       appReportStr.print(appReport.getAmNodeLabelExpression());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(\n          ApplicationId.fromString(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tApplication Priority : \");\n      appReportStr.println(appReport.getPriority());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      if (usageReport !\u003d null) {\n        //completed app report in the timeline server doesn\u0027t have usage report\n        appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n        appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n        appReportStr.print(\"\\tAggregate Resource Preempted : \");\n        appReportStr.print(usageReport.getPreemptedMemorySeconds() +\n            \" MB-seconds, \");\n        appReportStr.println(usageReport.getPreemptedVcoreSeconds() +\n            \" vcore-seconds\");\n      } else {\n        appReportStr.println(\"N/A\");\n        appReportStr.print(\"\\tAggregate Resource Preempted : \");\n        appReportStr.println(\"N/A\");\n      }\n      appReportStr.print(\"\\tLog Aggregation Status : \");\n      appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n          : appReport.getLogAggregationStatus());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.println(appReport.getDiagnostics());\n      appReportStr.print(\"\\tUnmanaged Application : \");\n      appReportStr.println(appReport.isUnmanagedApp());\n      appReportStr.print(\"\\tApplication Node Label Expression : \");\n      appReportStr.println(appReport.getAppNodeLabelExpression());\n      appReportStr.print(\"\\tAM container Node Label Expression : \");\n      appReportStr.print(appReport.getAmNodeLabelExpression());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "06/06/16 2:30 PM",
      "commitNameOld": "4a1cedc010d3fa1d8ef3f2773ca12acadfee5ba5",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 8.02,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,80 @@\n   private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n-      appReport \u003d client.getApplicationReport(ConverterUtils\n-          .toApplicationId(applicationId));\n+      appReport \u003d client.getApplicationReport(\n+          ApplicationId.fromString(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tApplication Priority : \");\n       appReportStr.println(appReport.getPriority());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tAggregate Resource Allocation : \");\n \n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       if (usageReport !\u003d null) {\n         //completed app report in the timeline server doesn\u0027t have usage report\n         appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n         appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n       } else {\n         appReportStr.println(\"N/A\");\n       }\n       appReportStr.print(\"\\tLog Aggregation Status : \");\n       appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n           : appReport.getLogAggregationStatus());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.println(appReport.getDiagnostics());\n       appReportStr.print(\"\\tUnmanaged Application : \");\n       appReportStr.println(appReport.isUnmanagedApp());\n       appReportStr.print(\"\\tApplication Node Label Expression : \");\n       appReportStr.println(appReport.getAppNodeLabelExpression());\n       appReportStr.print(\"\\tAM container Node Label Expression : \");\n       appReportStr.print(appReport.getAmNodeLabelExpression());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(\n          ApplicationId.fromString(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tApplication Priority : \");\n      appReportStr.println(appReport.getPriority());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      if (usageReport !\u003d null) {\n        //completed app report in the timeline server doesn\u0027t have usage report\n        appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n        appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n      } else {\n        appReportStr.println(\"N/A\");\n      }\n      appReportStr.print(\"\\tLog Aggregation Status : \");\n      appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n          : appReport.getLogAggregationStatus());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.println(appReport.getDiagnostics());\n      appReportStr.print(\"\\tUnmanaged Application : \");\n      appReportStr.println(appReport.isUnmanagedApp());\n      appReportStr.print(\"\\tApplication Node Label Expression : \");\n      appReportStr.println(appReport.getAppNodeLabelExpression());\n      appReportStr.print(\"\\tAM container Node Label Expression : \");\n      appReportStr.print(appReport.getAmNodeLabelExpression());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "ae5308fe1d08479da0f3929cc6a57816411e9121": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3717. Expose app/am/queue\u0027s node-label-expression to RM web UI / CLI / REST-API. (Naganarasimha G R via wangda)\n",
      "commitDate": "15/09/15 11:40 AM",
      "commitName": "ae5308fe1d08479da0f3929cc6a57816411e9121",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "03/09/15 4:10 AM",
      "commitNameOld": "b469ac531af1bdda01a04ae0b8d39218ca292163",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 12.31,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,80 @@\n   private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n       appReport \u003d client.getApplicationReport(ConverterUtils\n           .toApplicationId(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tApplication Priority : \");\n       appReportStr.println(appReport.getPriority());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tAggregate Resource Allocation : \");\n \n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       if (usageReport !\u003d null) {\n         //completed app report in the timeline server doesn\u0027t have usage report\n         appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n         appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n       } else {\n         appReportStr.println(\"N/A\");\n       }\n       appReportStr.print(\"\\tLog Aggregation Status : \");\n       appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n           : appReport.getLogAggregationStatus());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.println(appReport.getDiagnostics());\n       appReportStr.print(\"\\tUnmanaged Application : \");\n-      appReportStr.print(appReport.isUnmanagedApp());\n+      appReportStr.println(appReport.isUnmanagedApp());\n+      appReportStr.print(\"\\tApplication Node Label Expression : \");\n+      appReportStr.println(appReport.getAppNodeLabelExpression());\n+      appReportStr.print(\"\\tAM container Node Label Expression : \");\n+      appReportStr.print(appReport.getAmNodeLabelExpression());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(ConverterUtils\n          .toApplicationId(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tApplication Priority : \");\n      appReportStr.println(appReport.getPriority());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      if (usageReport !\u003d null) {\n        //completed app report in the timeline server doesn\u0027t have usage report\n        appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n        appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n      } else {\n        appReportStr.println(\"N/A\");\n      }\n      appReportStr.print(\"\\tLog Aggregation Status : \");\n      appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n          : appReport.getLogAggregationStatus());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.println(appReport.getDiagnostics());\n      appReportStr.print(\"\\tUnmanaged Application : \");\n      appReportStr.println(appReport.isUnmanagedApp());\n      appReportStr.print(\"\\tApplication Node Label Expression : \");\n      appReportStr.println(appReport.getAppNodeLabelExpression());\n      appReportStr.print(\"\\tAM container Node Label Expression : \");\n      appReportStr.print(appReport.getAmNodeLabelExpression());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "b6265d39c5d0fda21dfe55273f193d8a6a20c6a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3948. Display Application Priority in RM Web UI.(Sunil G via rohithsharmaks)\n",
      "commitDate": "06/08/15 10:13 PM",
      "commitName": "b6265d39c5d0fda21dfe55273f193d8a6a20c6a8",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "03/08/15 3:46 PM",
      "commitNameOld": "0306d902f53582320aa5895ca9f5c31f64aaaff6",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 3.27,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,76 @@\n   private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n       appReport \u003d client.getApplicationReport(ConverterUtils\n           .toApplicationId(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n+      appReportStr.print(\"\\tApplication Priority : \");\n+      appReportStr.println(appReport.getPriority());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tAggregate Resource Allocation : \");\n \n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       if (usageReport !\u003d null) {\n         //completed app report in the timeline server doesn\u0027t have usage report\n         appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n         appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n       } else {\n         appReportStr.println(\"N/A\");\n       }\n       appReportStr.print(\"\\tLog Aggregation Status : \");\n       appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n           : appReport.getLogAggregationStatus());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.println(appReport.getDiagnostics());\n       appReportStr.print(\"\\tUnmanaged Application : \");\n       appReportStr.print(appReport.isUnmanagedApp());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(ConverterUtils\n          .toApplicationId(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tApplication Priority : \");\n      appReportStr.println(appReport.getPriority());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      if (usageReport !\u003d null) {\n        //completed app report in the timeline server doesn\u0027t have usage report\n        appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n        appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n      } else {\n        appReportStr.println(\"N/A\");\n      }\n      appReportStr.print(\"\\tLog Aggregation Status : \");\n      appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n          : appReport.getLogAggregationStatus());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.println(appReport.getDiagnostics());\n      appReportStr.print(\"\\tUnmanaged Application : \");\n      appReportStr.print(appReport.isUnmanagedApp());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "0306d902f53582320aa5895ca9f5c31f64aaaff6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3543. ApplicationReport should be able to tell whether the\nApplication is AM managed or not. Contributed by Rohith Sharma K S\n",
      "commitDate": "03/08/15 3:46 PM",
      "commitName": "0306d902f53582320aa5895ca9f5c31f64aaaff6",
      "commitAuthor": "Xuan",
      "commitDateOld": "17/04/15 1:18 PM",
      "commitNameOld": "1db355a875c3ecc40a244045c6812e00c8d36ef1",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 108.1,
      "commitsBetweenForRepo": 854,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,74 @@\n   private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n       appReport \u003d client.getApplicationReport(ConverterUtils\n           .toApplicationId(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tAggregate Resource Allocation : \");\n \n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       if (usageReport !\u003d null) {\n         //completed app report in the timeline server doesn\u0027t have usage report\n         appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n         appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n       } else {\n         appReportStr.println(\"N/A\");\n       }\n       appReportStr.print(\"\\tLog Aggregation Status : \");\n       appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n           : appReport.getLogAggregationStatus());\n       appReportStr.print(\"\\tDiagnostics : \");\n-      appReportStr.print(appReport.getDiagnostics());\n+      appReportStr.println(appReport.getDiagnostics());\n+      appReportStr.print(\"\\tUnmanaged Application : \");\n+      appReportStr.print(appReport.isUnmanagedApp());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(ConverterUtils\n          .toApplicationId(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      if (usageReport !\u003d null) {\n        //completed app report in the timeline server doesn\u0027t have usage report\n        appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n        appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n      } else {\n        appReportStr.println(\"N/A\");\n      }\n      appReportStr.print(\"\\tLog Aggregation Status : \");\n      appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n          : appReport.getLogAggregationStatus());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.println(appReport.getDiagnostics());\n      appReportStr.print(\"\\tUnmanaged Application : \");\n      appReportStr.print(appReport.isUnmanagedApp());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "1db355a875c3ecc40a244045c6812e00c8d36ef1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1402. Update related Web UI and CLI with exposing client API to check log aggregation status. Contributed by Xuan Gong.\n",
      "commitDate": "17/04/15 1:18 PM",
      "commitName": "1db355a875c3ecc40a244045c6812e00c8d36ef1",
      "commitAuthor": "Junping Du",
      "commitDateOld": "11/03/15 7:35 PM",
      "commitNameOld": "85f6d67fa78511f255fcfa810afc9a156a7b483b",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 36.74,
      "commitsBetweenForRepo": 328,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,72 @@\n   private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n       appReport \u003d client.getApplicationReport(ConverterUtils\n           .toApplicationId(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(\n         new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tAggregate Resource Allocation : \");\n \n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       if (usageReport !\u003d null) {\n         //completed app report in the timeline server doesn\u0027t have usage report\n         appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n         appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n       } else {\n         appReportStr.println(\"N/A\");\n       }\n+      appReportStr.print(\"\\tLog Aggregation Status : \");\n+      appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n+          : appReport.getLogAggregationStatus());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.print(appReport.getDiagnostics());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(ConverterUtils\n          .toApplicationId(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      if (usageReport !\u003d null) {\n        //completed app report in the timeline server doesn\u0027t have usage report\n        appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n        appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n      } else {\n        appReportStr.println(\"N/A\");\n      }\n      appReportStr.print(\"\\tLog Aggregation Status : \");\n      appReportStr.println(appReport.getLogAggregationStatus() \u003d\u003d null ? \"N/A\"\n          : appReport.getLogAggregationStatus());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.print(appReport.getDiagnostics());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "d468c9aaf15e977f12e6214b47996412c907e069": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2940. Fix new findbugs warnings in rest of the hadoop-yarn components. (Contributed by Li Lu)\n",
      "commitDate": "23/12/14 8:04 PM",
      "commitName": "d468c9aaf15e977f12e6214b47996412c907e069",
      "commitAuthor": "Junping Du",
      "commitDateOld": "23/12/14 8:02 PM",
      "commitNameOld": "856b46cf47d3d17d3db2ca23106cb472aa8dd488",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,69 @@\n   private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n       appReport \u003d client.getApplicationReport(ConverterUtils\n           .toApplicationId(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n-    PrintWriter appReportStr \u003d new PrintWriter(baos);\n+    PrintWriter appReportStr \u003d new PrintWriter(\n+        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tAggregate Resource Allocation : \");\n \n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       if (usageReport !\u003d null) {\n         //completed app report in the timeline server doesn\u0027t have usage report\n         appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n         appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n       } else {\n         appReportStr.println(\"N/A\");\n       }\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.print(appReport.getDiagnostics());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(ConverterUtils\n          .toApplicationId(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      if (usageReport !\u003d null) {\n        //completed app report in the timeline server doesn\u0027t have usage report\n        appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n        appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n      } else {\n        appReportStr.println(\"N/A\");\n      }\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.print(appReport.getDiagnostics());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "856b46cf47d3d17d3db2ca23106cb472aa8dd488": {
      "type": "Ybodychange",
      "commitMessage": "Revert ca3381de61ff53604d9389694049a1a4dedc7571 and 20674255ad891bb693ecb2faa5bdb37477073dac as missing JIRA number in commit message\n",
      "commitDate": "23/12/14 8:02 PM",
      "commitName": "856b46cf47d3d17d3db2ca23106cb472aa8dd488",
      "commitAuthor": "Junping Du",
      "commitDateOld": "23/12/14 6:57 PM",
      "commitNameOld": "ca3381de61ff53604d9389694049a1a4dedc7571",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,68 @@\n   private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n       appReport \u003d client.getApplicationReport(ConverterUtils\n           .toApplicationId(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n-    PrintWriter appReportStr \u003d new PrintWriter(\n-        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n+    PrintWriter appReportStr \u003d new PrintWriter(baos);\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tAggregate Resource Allocation : \");\n \n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       if (usageReport !\u003d null) {\n         //completed app report in the timeline server doesn\u0027t have usage report\n         appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n         appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n       } else {\n         appReportStr.println(\"N/A\");\n       }\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.print(appReport.getDiagnostics());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(ConverterUtils\n          .toApplicationId(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(baos);\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      if (usageReport !\u003d null) {\n        //completed app report in the timeline server doesn\u0027t have usage report\n        appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n        appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n      } else {\n        appReportStr.println(\"N/A\");\n      }\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.print(appReport.getDiagnostics());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "ca3381de61ff53604d9389694049a1a4dedc7571": {
      "type": "Ybodychange",
      "commitMessage": "Fix new findbugs warnings in rest of the hadoop-yarn components. (Contributed by Li Lu)\n",
      "commitDate": "23/12/14 6:57 PM",
      "commitName": "ca3381de61ff53604d9389694049a1a4dedc7571",
      "commitAuthor": "Junping Du",
      "commitDateOld": "15/12/14 1:13 AM",
      "commitNameOld": "fae3e8614f4f9a42904e39c51ca68b0d1e67469f",
      "commitAuthorOld": "Devaraj K",
      "daysBetweenCommits": 8.74,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,69 @@\n   private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d null;\n     try {\n       appReport \u003d client.getApplicationReport(ConverterUtils\n           .toApplicationId(applicationId));\n     } catch (ApplicationNotFoundException e) {\n       sysout.println(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n       return -1;\n     }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n-    PrintWriter appReportStr \u003d new PrintWriter(baos);\n+    PrintWriter appReportStr \u003d new PrintWriter(\n+        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tAggregate Resource Allocation : \");\n \n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       if (usageReport !\u003d null) {\n         //completed app report in the timeline server doesn\u0027t have usage report\n         appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n         appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n       } else {\n         appReportStr.println(\"N/A\");\n       }\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.print(appReport.getDiagnostics());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n       appReportStr.close();\n       sysout.println(baos.toString(\"UTF-8\"));\n       return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(ConverterUtils\n          .toApplicationId(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(\n        new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      if (usageReport !\u003d null) {\n        //completed app report in the timeline server doesn\u0027t have usage report\n        appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n        appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n      } else {\n        appReportStr.println(\"N/A\");\n      }\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.print(appReport.getDiagnostics());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "fae3e8614f4f9a42904e39c51ca68b0d1e67469f": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-2356. yarn status command for non-existent application/application\nattempt/container is too verbose. Contributed by Sunil G.\n",
      "commitDate": "15/12/14 1:13 AM",
      "commitName": "fae3e8614f4f9a42904e39c51ca68b0d1e67469f",
      "commitAuthor": "Devaraj K",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-2356. yarn status command for non-existent application/application\nattempt/container is too verbose. Contributed by Sunil G.\n",
          "commitDate": "15/12/14 1:13 AM",
          "commitName": "fae3e8614f4f9a42904e39c51ca68b0d1e67469f",
          "commitAuthor": "Devaraj K",
          "commitDateOld": "04/12/14 12:53 PM",
          "commitNameOld": "258623ff8bb1a1057ae3501d4f20982d5a59ea34",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 10.51,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,68 @@\n-  private void printApplicationReport(String applicationId)\n+  private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n-    ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n-        .toApplicationId(applicationId));\n+    ApplicationReport appReport \u003d null;\n+    try {\n+      appReport \u003d client.getApplicationReport(ConverterUtils\n+          .toApplicationId(applicationId));\n+    } catch (ApplicationNotFoundException e) {\n+      sysout.println(\"Application with id \u0027\" + applicationId\n+          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n+      return -1;\n+    }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(baos);\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tAggregate Resource Allocation : \");\n \n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       if (usageReport !\u003d null) {\n         //completed app report in the timeline server doesn\u0027t have usage report\n         appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n         appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n       } else {\n         appReportStr.println(\"N/A\");\n       }\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.print(appReport.getDiagnostics());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n+      appReportStr.close();\n+      sysout.println(baos.toString(\"UTF-8\"));\n+      return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n+    return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(ConverterUtils\n          .toApplicationId(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(baos);\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      if (usageReport !\u003d null) {\n        //completed app report in the timeline server doesn\u0027t have usage report\n        appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n        appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n      } else {\n        appReportStr.println(\"N/A\");\n      }\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.print(appReport.getDiagnostics());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "int"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2356. yarn status command for non-existent application/application\nattempt/container is too verbose. Contributed by Sunil G.\n",
          "commitDate": "15/12/14 1:13 AM",
          "commitName": "fae3e8614f4f9a42904e39c51ca68b0d1e67469f",
          "commitAuthor": "Devaraj K",
          "commitDateOld": "04/12/14 12:53 PM",
          "commitNameOld": "258623ff8bb1a1057ae3501d4f20982d5a59ea34",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 10.51,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,68 @@\n-  private void printApplicationReport(String applicationId)\n+  private int printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n-    ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n-        .toApplicationId(applicationId));\n+    ApplicationReport appReport \u003d null;\n+    try {\n+      appReport \u003d client.getApplicationReport(ConverterUtils\n+          .toApplicationId(applicationId));\n+    } catch (ApplicationNotFoundException e) {\n+      sysout.println(\"Application with id \u0027\" + applicationId\n+          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n+      return -1;\n+    }\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(baos);\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tAggregate Resource Allocation : \");\n \n       ApplicationResourceUsageReport usageReport \u003d\n           appReport.getApplicationResourceUsageReport();\n       if (usageReport !\u003d null) {\n         //completed app report in the timeline server doesn\u0027t have usage report\n         appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n         appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n       } else {\n         appReportStr.println(\"N/A\");\n       }\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.print(appReport.getDiagnostics());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n+      appReportStr.close();\n+      sysout.println(baos.toString(\"UTF-8\"));\n+      return -1;\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n+    return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d client.getApplicationReport(ConverterUtils\n          .toApplicationId(applicationId));\n    } catch (ApplicationNotFoundException e) {\n      sysout.println(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n      return -1;\n    }\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(baos);\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      if (usageReport !\u003d null) {\n        //completed app report in the timeline server doesn\u0027t have usage report\n        appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n        appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n      } else {\n        appReportStr.println(\"N/A\");\n      }\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.print(appReport.getDiagnostics());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n      appReportStr.close();\n      sysout.println(baos.toString(\"UTF-8\"));\n      return -1;\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "a0ad975ea1e70f9532cf6cb6c1d9d92736ca0ebc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2542. Fixed NPE when retrieving ApplicationReport from TimeLineServer. Contributed by Zhijie Shen\n",
      "commitDate": "12/09/14 3:27 PM",
      "commitName": "a0ad975ea1e70f9532cf6cb6c1d9d92736ca0ebc",
      "commitAuthor": "Jian He",
      "commitDateOld": "10/09/14 6:20 PM",
      "commitNameOld": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.88,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,57 @@\n   private void printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n         .toApplicationId(applicationId));\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(baos);\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tAggregate Resource Allocation : \");\n \n-      ApplicationResourceUsageReport usageReport \u003d appReport.getApplicationResourceUsageReport();\n-      appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n-      appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n+      ApplicationResourceUsageReport usageReport \u003d\n+          appReport.getApplicationResourceUsageReport();\n+      if (usageReport !\u003d null) {\n+        //completed app report in the timeline server doesn\u0027t have usage report\n+        appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n+        appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n+      } else {\n+        appReportStr.println(\"N/A\");\n+      }\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.print(appReport.getDiagnostics());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n        .toApplicationId(applicationId));\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(baos);\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n\n      ApplicationResourceUsageReport usageReport \u003d\n          appReport.getApplicationResourceUsageReport();\n      if (usageReport !\u003d null) {\n        //completed app report in the timeline server doesn\u0027t have usage report\n        appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n        appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n      } else {\n        appReportStr.println(\"N/A\");\n      }\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.print(appReport.getDiagnostics());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-415. Capture aggregate memory allocation at the app-level for chargeback. Contributed by Eric Payne \u0026 Andrey Klochkov\n",
      "commitDate": "10/09/14 6:20 PM",
      "commitName": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
      "commitAuthor": "Jian He",
      "commitDateOld": "24/06/14 2:43 PM",
      "commitNameOld": "e285b98f0fe8637b574c52498035f7f11fb4e962",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 78.15,
      "commitsBetweenForRepo": 616,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,51 @@\n   private void printApplicationReport(String applicationId)\n       throws YarnException, IOException {\n     ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n         .toApplicationId(applicationId));\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(baos);\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n+      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n+\n+      ApplicationResourceUsageReport usageReport \u003d appReport.getApplicationResourceUsageReport();\n+      appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n+      appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.print(appReport.getDiagnostics());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n        .toApplicationId(applicationId));\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(baos);\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tAggregate Resource Allocation : \");\n\n      ApplicationResourceUsageReport usageReport \u003d appReport.getApplicationResourceUsageReport();\n      appReportStr.print(usageReport.getMemorySeconds() + \" MB-seconds, \");\n      appReportStr.println(usageReport.getVcoreSeconds() + \" vcore-seconds\");\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.print(appReport.getDiagnostics());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "23/05/13 11:02 AM",
      "commitNameOld": "43876770d91a374563bf3379a5ffab5c2bac2264",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 11.42,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private void printApplicationReport(String applicationId)\n-      throws YarnRemoteException, IOException {\n+      throws YarnException, IOException {\n     ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n         .toApplicationId(applicationId));\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(baos);\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tApplication-Type : \");\n       appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.print(appReport.getDiagnostics());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printApplicationReport(String applicationId)\n      throws YarnException, IOException {\n    ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n        .toApplicationId(applicationId));\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(baos);\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.print(appReport.getDiagnostics());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException, IOException]",
        "newValue": "[YarnException, IOException]"
      }
    },
    "43876770d91a374563bf3379a5ffab5c2bac2264": {
      "type": "Ybodychange",
      "commitMessage": "YARN-563. Add the concept of an application-type for each application. Contributed by Mayank Bansal.\nMAPREDUCE-5246. Specify application-type at the time of job submission after YARN-563. Contributed by Mayank Bansal.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485790 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/13 11:02 AM",
      "commitName": "43876770d91a374563bf3379a5ffab5c2bac2264",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "08/05/13 3:53 PM",
      "commitNameOld": "0727ecaf50481fa7a529398bc2a12ce18c9a6b43",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 14.8,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,46 @@\n   private void printApplicationReport(String applicationId)\n       throws YarnRemoteException, IOException {\n     ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n         .toApplicationId(applicationId));\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(baos);\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n+      appReportStr.print(\"\\tApplication-Type : \");\n+      appReportStr.println(appReport.getApplicationType());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tProgress : \");\n       DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n       String progress \u003d formatter.format(appReport.getProgress());\n       appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.print(appReport.getDiagnostics());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printApplicationReport(String applicationId)\n      throws YarnRemoteException, IOException {\n    ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n        .toApplicationId(applicationId));\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(baos);\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tApplication-Type : \");\n      appReportStr.println(appReport.getApplicationType());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.print(appReport.getDiagnostics());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "448df186467c64d992d6d8c9b35b645dbd48898c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-577. Add application-progress also to ApplicationReport. Contributed by Hitesh Shah.\nMAPREDUCE-5178. Update MR App to set progress in ApplicationReport after YARN-577. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1475636 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/13 10:42 PM",
      "commitName": "448df186467c64d992d6d8c9b35b645dbd48898c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/03/13 4:48 PM",
      "commitNameOld": "37eed0a3e1c1a826ce1505325cc54201b3b105f7",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 37.25,
      "commitsBetweenForRepo": 205,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,44 @@\n   private void printApplicationReport(String applicationId)\n       throws YarnRemoteException, IOException {\n     ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n         .toApplicationId(applicationId));\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(baos);\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n+      appReportStr.print(\"\\tProgress : \");\n+      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n+      String progress \u003d formatter.format(appReport.getProgress());\n+      appReportStr.println(progress);\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n       appReportStr.print(\"\\tRPC Port : \");\n       appReportStr.println(appReport.getRpcPort());\n       appReportStr.print(\"\\tAM Host : \");\n       appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.print(appReport.getDiagnostics());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printApplicationReport(String applicationId)\n      throws YarnRemoteException, IOException {\n    ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n        .toApplicationId(applicationId));\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(baos);\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tProgress : \");\n      DecimalFormat formatter \u003d new DecimalFormat(\"###.##%\");\n      String progress \u003d formatter.format(appReport.getProgress());\n      appReportStr.println(progress);\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.print(appReport.getDiagnostics());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "37eed0a3e1c1a826ce1505325cc54201b3b105f7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-481. Add AM Host and RPC Port to ApplicationCLI Status Output (Chris Riccomini via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1458065 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/03/13 4:48 PM",
      "commitName": "37eed0a3e1c1a826ce1505325cc54201b3b105f7",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "25/02/13 4:26 PM",
      "commitNameOld": "10e1e314acc9d4d08765eb81906db7d636bc9609",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 20.97,
      "commitsBetweenForRepo": 117,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,40 @@\n   private void printApplicationReport(String applicationId)\n       throws YarnRemoteException, IOException {\n     ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n         .toApplicationId(applicationId));\n     // Use PrintWriter.println, which uses correct platform line ending.\n     ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n     PrintWriter appReportStr \u003d new PrintWriter(baos);\n     if (appReport !\u003d null) {\n       appReportStr.println(\"Application Report : \");\n       appReportStr.print(\"\\tApplication-Id : \");\n       appReportStr.println(appReport.getApplicationId());\n       appReportStr.print(\"\\tApplication-Name : \");\n       appReportStr.println(appReport.getName());\n       appReportStr.print(\"\\tUser : \");\n       appReportStr.println(appReport.getUser());\n       appReportStr.print(\"\\tQueue : \");\n       appReportStr.println(appReport.getQueue());\n       appReportStr.print(\"\\tStart-Time : \");\n       appReportStr.println(appReport.getStartTime());\n       appReportStr.print(\"\\tFinish-Time : \");\n       appReportStr.println(appReport.getFinishTime());\n       appReportStr.print(\"\\tState : \");\n       appReportStr.println(appReport.getYarnApplicationState());\n       appReportStr.print(\"\\tFinal-State : \");\n       appReportStr.println(appReport.getFinalApplicationStatus());\n       appReportStr.print(\"\\tTracking-URL : \");\n       appReportStr.println(appReport.getOriginalTrackingUrl());\n+      appReportStr.print(\"\\tRPC Port : \");\n+      appReportStr.println(appReport.getRpcPort());\n+      appReportStr.print(\"\\tAM Host : \");\n+      appReportStr.println(appReport.getHost());\n       appReportStr.print(\"\\tDiagnostics : \");\n       appReportStr.print(appReport.getDiagnostics());\n     } else {\n       appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n     appReportStr.close();\n     sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void printApplicationReport(String applicationId)\n      throws YarnRemoteException, IOException {\n    ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n        .toApplicationId(applicationId));\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(baos);\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tRPC Port : \");\n      appReportStr.println(appReport.getRpcPort());\n      appReportStr.print(\"\\tAM Host : \");\n      appReportStr.println(appReport.getHost());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.print(appReport.getDiagnostics());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
      "extendedDetails": {}
    },
    "10e1e314acc9d4d08765eb81906db7d636bc9609": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-390. ApplicationCLI and NodeCLI hard-coded platform-specific line separator causes test failures on Windows. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1449980 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/02/13 4:26 PM",
      "commitName": "10e1e314acc9d4d08765eb81906db7d636bc9609",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-390. ApplicationCLI and NodeCLI hard-coded platform-specific line separator causes test failures on Windows. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1449980 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/02/13 4:26 PM",
          "commitName": "10e1e314acc9d4d08765eb81906db7d636bc9609",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "08/10/12 3:18 PM",
          "commitNameOld": "331b1123fbb892524ecb58e551c20befd26c9ea9",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 140.09,
          "commitsBetweenForRepo": 634,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n   private void printApplicationReport(String applicationId)\n-      throws YarnRemoteException {\n+      throws YarnRemoteException, IOException {\n     ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n         .toApplicationId(applicationId));\n-    StringBuffer appReportStr \u003d new StringBuffer();\n+    // Use PrintWriter.println, which uses correct platform line ending.\n+    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n+    PrintWriter appReportStr \u003d new PrintWriter(baos);\n     if (appReport !\u003d null) {\n-      appReportStr.append(\"Application Report : \");\n-      appReportStr.append(\"\\n\\tApplication-Id : \");\n-      appReportStr.append(appReport.getApplicationId());\n-      appReportStr.append(\"\\n\\tApplication-Name : \");\n-      appReportStr.append(appReport.getName());\n-      appReportStr.append(\"\\n\\tUser : \");\n-      appReportStr.append(appReport.getUser());\n-      appReportStr.append(\"\\n\\tQueue : \");\n-      appReportStr.append(appReport.getQueue());\n-      appReportStr.append(\"\\n\\tStart-Time : \");\n-      appReportStr.append(appReport.getStartTime());\n-      appReportStr.append(\"\\n\\tFinish-Time : \");\n-      appReportStr.append(appReport.getFinishTime());\n-      appReportStr.append(\"\\n\\tState : \");\n-      appReportStr.append(appReport.getYarnApplicationState());\n-      appReportStr.append(\"\\n\\tFinal-State : \");\n-      appReportStr.append(appReport.getFinalApplicationStatus());\n-      appReportStr.append(\"\\n\\tTracking-URL : \");\n-      appReportStr.append(appReport.getOriginalTrackingUrl());\n-      appReportStr.append(\"\\n\\tDiagnostics : \");\n-      appReportStr.append(appReport.getDiagnostics());\n+      appReportStr.println(\"Application Report : \");\n+      appReportStr.print(\"\\tApplication-Id : \");\n+      appReportStr.println(appReport.getApplicationId());\n+      appReportStr.print(\"\\tApplication-Name : \");\n+      appReportStr.println(appReport.getName());\n+      appReportStr.print(\"\\tUser : \");\n+      appReportStr.println(appReport.getUser());\n+      appReportStr.print(\"\\tQueue : \");\n+      appReportStr.println(appReport.getQueue());\n+      appReportStr.print(\"\\tStart-Time : \");\n+      appReportStr.println(appReport.getStartTime());\n+      appReportStr.print(\"\\tFinish-Time : \");\n+      appReportStr.println(appReport.getFinishTime());\n+      appReportStr.print(\"\\tState : \");\n+      appReportStr.println(appReport.getYarnApplicationState());\n+      appReportStr.print(\"\\tFinal-State : \");\n+      appReportStr.println(appReport.getFinalApplicationStatus());\n+      appReportStr.print(\"\\tTracking-URL : \");\n+      appReportStr.println(appReport.getOriginalTrackingUrl());\n+      appReportStr.print(\"\\tDiagnostics : \");\n+      appReportStr.print(appReport.getDiagnostics());\n     } else {\n-      appReportStr.append(\"Application with id \u0027\" + applicationId\n+      appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n-    sysout.println(appReportStr.toString());\n+    appReportStr.close();\n+    sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void printApplicationReport(String applicationId)\n      throws YarnRemoteException, IOException {\n    ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n        .toApplicationId(applicationId));\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(baos);\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.print(appReport.getDiagnostics());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
          "extendedDetails": {
            "oldValue": "[YarnRemoteException]",
            "newValue": "[YarnRemoteException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-390. ApplicationCLI and NodeCLI hard-coded platform-specific line separator causes test failures on Windows. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1449980 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/02/13 4:26 PM",
          "commitName": "10e1e314acc9d4d08765eb81906db7d636bc9609",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "08/10/12 3:18 PM",
          "commitNameOld": "331b1123fbb892524ecb58e551c20befd26c9ea9",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 140.09,
          "commitsBetweenForRepo": 634,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n   private void printApplicationReport(String applicationId)\n-      throws YarnRemoteException {\n+      throws YarnRemoteException, IOException {\n     ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n         .toApplicationId(applicationId));\n-    StringBuffer appReportStr \u003d new StringBuffer();\n+    // Use PrintWriter.println, which uses correct platform line ending.\n+    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n+    PrintWriter appReportStr \u003d new PrintWriter(baos);\n     if (appReport !\u003d null) {\n-      appReportStr.append(\"Application Report : \");\n-      appReportStr.append(\"\\n\\tApplication-Id : \");\n-      appReportStr.append(appReport.getApplicationId());\n-      appReportStr.append(\"\\n\\tApplication-Name : \");\n-      appReportStr.append(appReport.getName());\n-      appReportStr.append(\"\\n\\tUser : \");\n-      appReportStr.append(appReport.getUser());\n-      appReportStr.append(\"\\n\\tQueue : \");\n-      appReportStr.append(appReport.getQueue());\n-      appReportStr.append(\"\\n\\tStart-Time : \");\n-      appReportStr.append(appReport.getStartTime());\n-      appReportStr.append(\"\\n\\tFinish-Time : \");\n-      appReportStr.append(appReport.getFinishTime());\n-      appReportStr.append(\"\\n\\tState : \");\n-      appReportStr.append(appReport.getYarnApplicationState());\n-      appReportStr.append(\"\\n\\tFinal-State : \");\n-      appReportStr.append(appReport.getFinalApplicationStatus());\n-      appReportStr.append(\"\\n\\tTracking-URL : \");\n-      appReportStr.append(appReport.getOriginalTrackingUrl());\n-      appReportStr.append(\"\\n\\tDiagnostics : \");\n-      appReportStr.append(appReport.getDiagnostics());\n+      appReportStr.println(\"Application Report : \");\n+      appReportStr.print(\"\\tApplication-Id : \");\n+      appReportStr.println(appReport.getApplicationId());\n+      appReportStr.print(\"\\tApplication-Name : \");\n+      appReportStr.println(appReport.getName());\n+      appReportStr.print(\"\\tUser : \");\n+      appReportStr.println(appReport.getUser());\n+      appReportStr.print(\"\\tQueue : \");\n+      appReportStr.println(appReport.getQueue());\n+      appReportStr.print(\"\\tStart-Time : \");\n+      appReportStr.println(appReport.getStartTime());\n+      appReportStr.print(\"\\tFinish-Time : \");\n+      appReportStr.println(appReport.getFinishTime());\n+      appReportStr.print(\"\\tState : \");\n+      appReportStr.println(appReport.getYarnApplicationState());\n+      appReportStr.print(\"\\tFinal-State : \");\n+      appReportStr.println(appReport.getFinalApplicationStatus());\n+      appReportStr.print(\"\\tTracking-URL : \");\n+      appReportStr.println(appReport.getOriginalTrackingUrl());\n+      appReportStr.print(\"\\tDiagnostics : \");\n+      appReportStr.print(appReport.getDiagnostics());\n     } else {\n-      appReportStr.append(\"Application with id \u0027\" + applicationId\n+      appReportStr.print(\"Application with id \u0027\" + applicationId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n-    sysout.println(appReportStr.toString());\n+    appReportStr.close();\n+    sysout.println(baos.toString(\"UTF-8\"));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void printApplicationReport(String applicationId)\n      throws YarnRemoteException, IOException {\n    ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n        .toApplicationId(applicationId));\n    // Use PrintWriter.println, which uses correct platform line ending.\n    ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n    PrintWriter appReportStr \u003d new PrintWriter(baos);\n    if (appReport !\u003d null) {\n      appReportStr.println(\"Application Report : \");\n      appReportStr.print(\"\\tApplication-Id : \");\n      appReportStr.println(appReport.getApplicationId());\n      appReportStr.print(\"\\tApplication-Name : \");\n      appReportStr.println(appReport.getName());\n      appReportStr.print(\"\\tUser : \");\n      appReportStr.println(appReport.getUser());\n      appReportStr.print(\"\\tQueue : \");\n      appReportStr.println(appReport.getQueue());\n      appReportStr.print(\"\\tStart-Time : \");\n      appReportStr.println(appReport.getStartTime());\n      appReportStr.print(\"\\tFinish-Time : \");\n      appReportStr.println(appReport.getFinishTime());\n      appReportStr.print(\"\\tState : \");\n      appReportStr.println(appReport.getYarnApplicationState());\n      appReportStr.print(\"\\tFinal-State : \");\n      appReportStr.println(appReport.getFinalApplicationStatus());\n      appReportStr.print(\"\\tTracking-URL : \");\n      appReportStr.println(appReport.getOriginalTrackingUrl());\n      appReportStr.print(\"\\tDiagnostics : \");\n      appReportStr.print(appReport.getDiagnostics());\n    } else {\n      appReportStr.print(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n    appReportStr.close();\n    sysout.println(baos.toString(\"UTF-8\"));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "331b1123fbb892524ecb58e551c20befd26c9ea9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-40. Provided support for missing YARN commands Contributed by Devaraj K and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1395793 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/10/12 3:18 PM",
      "commitName": "331b1123fbb892524ecb58e551c20befd26c9ea9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,33 @@\n+  private void printApplicationReport(String applicationId)\n+      throws YarnRemoteException {\n+    ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n+        .toApplicationId(applicationId));\n+    StringBuffer appReportStr \u003d new StringBuffer();\n+    if (appReport !\u003d null) {\n+      appReportStr.append(\"Application Report : \");\n+      appReportStr.append(\"\\n\\tApplication-Id : \");\n+      appReportStr.append(appReport.getApplicationId());\n+      appReportStr.append(\"\\n\\tApplication-Name : \");\n+      appReportStr.append(appReport.getName());\n+      appReportStr.append(\"\\n\\tUser : \");\n+      appReportStr.append(appReport.getUser());\n+      appReportStr.append(\"\\n\\tQueue : \");\n+      appReportStr.append(appReport.getQueue());\n+      appReportStr.append(\"\\n\\tStart-Time : \");\n+      appReportStr.append(appReport.getStartTime());\n+      appReportStr.append(\"\\n\\tFinish-Time : \");\n+      appReportStr.append(appReport.getFinishTime());\n+      appReportStr.append(\"\\n\\tState : \");\n+      appReportStr.append(appReport.getYarnApplicationState());\n+      appReportStr.append(\"\\n\\tFinal-State : \");\n+      appReportStr.append(appReport.getFinalApplicationStatus());\n+      appReportStr.append(\"\\n\\tTracking-URL : \");\n+      appReportStr.append(appReport.getOriginalTrackingUrl());\n+      appReportStr.append(\"\\n\\tDiagnostics : \");\n+      appReportStr.append(appReport.getDiagnostics());\n+    } else {\n+      appReportStr.append(\"Application with id \u0027\" + applicationId\n+          + \"\u0027 doesn\u0027t exist in RM.\");\n+    }\n+    sysout.println(appReportStr.toString());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void printApplicationReport(String applicationId)\n      throws YarnRemoteException {\n    ApplicationReport appReport \u003d client.getApplicationReport(ConverterUtils\n        .toApplicationId(applicationId));\n    StringBuffer appReportStr \u003d new StringBuffer();\n    if (appReport !\u003d null) {\n      appReportStr.append(\"Application Report : \");\n      appReportStr.append(\"\\n\\tApplication-Id : \");\n      appReportStr.append(appReport.getApplicationId());\n      appReportStr.append(\"\\n\\tApplication-Name : \");\n      appReportStr.append(appReport.getName());\n      appReportStr.append(\"\\n\\tUser : \");\n      appReportStr.append(appReport.getUser());\n      appReportStr.append(\"\\n\\tQueue : \");\n      appReportStr.append(appReport.getQueue());\n      appReportStr.append(\"\\n\\tStart-Time : \");\n      appReportStr.append(appReport.getStartTime());\n      appReportStr.append(\"\\n\\tFinish-Time : \");\n      appReportStr.append(appReport.getFinishTime());\n      appReportStr.append(\"\\n\\tState : \");\n      appReportStr.append(appReport.getYarnApplicationState());\n      appReportStr.append(\"\\n\\tFinal-State : \");\n      appReportStr.append(appReport.getFinalApplicationStatus());\n      appReportStr.append(\"\\n\\tTracking-URL : \");\n      appReportStr.append(appReport.getOriginalTrackingUrl());\n      appReportStr.append(\"\\n\\tDiagnostics : \");\n      appReportStr.append(appReport.getDiagnostics());\n    } else {\n      appReportStr.append(\"Application with id \u0027\" + applicationId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n    sysout.println(appReportStr.toString());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java"
    }
  }
}