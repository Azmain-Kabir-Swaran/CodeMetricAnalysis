{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbfsConfiguration.java",
  "functionName": "getStorageAccountKey",
  "functionId": "getStorageAccountKey",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
  "functionStartLine": 446,
  "functionEndLine": 477,
  "numCommitsSeen": 41,
  "timeTaken": 3988,
  "changeHistory": [
    "e5593cbd8323399359b3e8da46bd58e8364cbf22",
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1",
    "b54b0c1b676c616aef9574e4e88ea30c314c79dc",
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
    "f044deedbbfee0812316d587139cb828f27172e9"
  ],
  "changeHistoryShort": {
    "e5593cbd8323399359b3e8da46bd58e8364cbf22": "Ymultichange(Yparameterchange,Ybodychange)",
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1": "Ybodychange",
    "b54b0c1b676c616aef9574e4e88ea30c314c79dc": "Ymultichange(Yfilerename,Yexceptionschange,Ybodychange)",
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462": "Yfilerename",
    "f044deedbbfee0812316d587139cb828f27172e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e5593cbd8323399359b3e8da46bd58e8364cbf22": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-15694. ABFS: Allow OAuth credentials to not be tied to accounts.\nContributed by Sean Mackrory.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "e5593cbd8323399359b3e8da46bd58e8364cbf22",
      "commitAuthor": "Thomas Marquardt",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-15694. ABFS: Allow OAuth credentials to not be tied to accounts.\nContributed by Sean Mackrory.\n",
          "commitDate": "17/09/18 12:54 PM",
          "commitName": "e5593cbd8323399359b3e8da46bd58e8364cbf22",
          "commitAuthor": "Thomas Marquardt",
          "commitDateOld": "17/09/18 12:54 PM",
          "commitNameOld": "97f06b3fc70ad509e601076c015bc244daa1243f",
          "commitAuthorOld": "Thomas Marquardt",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,32 @@\n-  public String getStorageAccountKey(final String accountName) throws AzureBlobFileSystemException {\n+  public String getStorageAccountKey() throws AzureBlobFileSystemException {\n     String key;\n-    String keyProviderClass \u003d\n-            configuration.get(AZURE_KEY_ACCOUNT_KEYPROVIDER_PREFIX + accountName);\n+    String keyProviderClass \u003d get(AZURE_KEY_ACCOUNT_KEYPROVIDER);\n     KeyProvider keyProvider;\n \n     if (keyProviderClass \u003d\u003d null) {\n       // No key provider was provided so use the provided key as is.\n       keyProvider \u003d new SimpleKeyProvider();\n     } else {\n       // create an instance of the key provider class and verify it\n       // implements KeyProvider\n       Object keyProviderObject;\n       try {\n-        Class\u003c?\u003e clazz \u003d configuration.getClassByName(keyProviderClass);\n+        Class\u003c?\u003e clazz \u003d rawConfig.getClassByName(keyProviderClass);\n         keyProviderObject \u003d clazz.newInstance();\n       } catch (Exception e) {\n         throw new KeyProviderException(\"Unable to load key provider class.\", e);\n       }\n       if (!(keyProviderObject instanceof KeyProvider)) {\n         throw new KeyProviderException(keyProviderClass\n                 + \" specified in config is not a valid KeyProvider class.\");\n       }\n       keyProvider \u003d (KeyProvider) keyProviderObject;\n     }\n-    key \u003d keyProvider.getStorageAccountKey(accountName, configuration);\n+    key \u003d keyProvider.getStorageAccountKey(accountName, rawConfig);\n \n     if (key \u003d\u003d null) {\n       throw new ConfigurationPropertyNotFoundException(accountName);\n     }\n \n     return key;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String getStorageAccountKey() throws AzureBlobFileSystemException {\n    String key;\n    String keyProviderClass \u003d get(AZURE_KEY_ACCOUNT_KEYPROVIDER);\n    KeyProvider keyProvider;\n\n    if (keyProviderClass \u003d\u003d null) {\n      // No key provider was provided so use the provided key as is.\n      keyProvider \u003d new SimpleKeyProvider();\n    } else {\n      // create an instance of the key provider class and verify it\n      // implements KeyProvider\n      Object keyProviderObject;\n      try {\n        Class\u003c?\u003e clazz \u003d rawConfig.getClassByName(keyProviderClass);\n        keyProviderObject \u003d clazz.newInstance();\n      } catch (Exception e) {\n        throw new KeyProviderException(\"Unable to load key provider class.\", e);\n      }\n      if (!(keyProviderObject instanceof KeyProvider)) {\n        throw new KeyProviderException(keyProviderClass\n                + \" specified in config is not a valid KeyProvider class.\");\n      }\n      keyProvider \u003d (KeyProvider) keyProviderObject;\n    }\n    key \u003d keyProvider.getStorageAccountKey(accountName, rawConfig);\n\n    if (key \u003d\u003d null) {\n      throw new ConfigurationPropertyNotFoundException(accountName);\n    }\n\n    return key;\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
          "extendedDetails": {
            "oldValue": "[accountName-String(modifiers-final)]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15694. ABFS: Allow OAuth credentials to not be tied to accounts.\nContributed by Sean Mackrory.\n",
          "commitDate": "17/09/18 12:54 PM",
          "commitName": "e5593cbd8323399359b3e8da46bd58e8364cbf22",
          "commitAuthor": "Thomas Marquardt",
          "commitDateOld": "17/09/18 12:54 PM",
          "commitNameOld": "97f06b3fc70ad509e601076c015bc244daa1243f",
          "commitAuthorOld": "Thomas Marquardt",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,32 @@\n-  public String getStorageAccountKey(final String accountName) throws AzureBlobFileSystemException {\n+  public String getStorageAccountKey() throws AzureBlobFileSystemException {\n     String key;\n-    String keyProviderClass \u003d\n-            configuration.get(AZURE_KEY_ACCOUNT_KEYPROVIDER_PREFIX + accountName);\n+    String keyProviderClass \u003d get(AZURE_KEY_ACCOUNT_KEYPROVIDER);\n     KeyProvider keyProvider;\n \n     if (keyProviderClass \u003d\u003d null) {\n       // No key provider was provided so use the provided key as is.\n       keyProvider \u003d new SimpleKeyProvider();\n     } else {\n       // create an instance of the key provider class and verify it\n       // implements KeyProvider\n       Object keyProviderObject;\n       try {\n-        Class\u003c?\u003e clazz \u003d configuration.getClassByName(keyProviderClass);\n+        Class\u003c?\u003e clazz \u003d rawConfig.getClassByName(keyProviderClass);\n         keyProviderObject \u003d clazz.newInstance();\n       } catch (Exception e) {\n         throw new KeyProviderException(\"Unable to load key provider class.\", e);\n       }\n       if (!(keyProviderObject instanceof KeyProvider)) {\n         throw new KeyProviderException(keyProviderClass\n                 + \" specified in config is not a valid KeyProvider class.\");\n       }\n       keyProvider \u003d (KeyProvider) keyProviderObject;\n     }\n-    key \u003d keyProvider.getStorageAccountKey(accountName, configuration);\n+    key \u003d keyProvider.getStorageAccountKey(accountName, rawConfig);\n \n     if (key \u003d\u003d null) {\n       throw new ConfigurationPropertyNotFoundException(accountName);\n     }\n \n     return key;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String getStorageAccountKey() throws AzureBlobFileSystemException {\n    String key;\n    String keyProviderClass \u003d get(AZURE_KEY_ACCOUNT_KEYPROVIDER);\n    KeyProvider keyProvider;\n\n    if (keyProviderClass \u003d\u003d null) {\n      // No key provider was provided so use the provided key as is.\n      keyProvider \u003d new SimpleKeyProvider();\n    } else {\n      // create an instance of the key provider class and verify it\n      // implements KeyProvider\n      Object keyProviderObject;\n      try {\n        Class\u003c?\u003e clazz \u003d rawConfig.getClassByName(keyProviderClass);\n        keyProviderObject \u003d clazz.newInstance();\n      } catch (Exception e) {\n        throw new KeyProviderException(\"Unable to load key provider class.\", e);\n      }\n      if (!(keyProviderObject instanceof KeyProvider)) {\n        throw new KeyProviderException(keyProviderClass\n                + \" specified in config is not a valid KeyProvider class.\");\n      }\n      keyProvider \u003d (KeyProvider) keyProviderObject;\n    }\n    key \u003d keyProvider.getStorageAccountKey(accountName, rawConfig);\n\n    if (key \u003d\u003d null) {\n      throw new ConfigurationPropertyNotFoundException(accountName);\n    }\n\n    return key;\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
          "extendedDetails": {}
        }
      ]
    },
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15660. ABFS: Add support for OAuth\nContributed by Da Zhou, Rajeev Bansal, and Junhua Gu.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "9149b9703e3ab09abdc087db129e82ad3f4cefa1",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "d6a4f39bd5f192e5e3377630887a6998d4d400c2",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public String getStorageAccountKey(final String accountName) throws AzureBlobFileSystemException {\n     String key;\n     String keyProviderClass \u003d\n-            configuration.get(ConfigurationKeys.AZURE_KEY_ACCOUNT_KEYPROVIDER_PREFIX + accountName);\n+            configuration.get(AZURE_KEY_ACCOUNT_KEYPROVIDER_PREFIX + accountName);\n     KeyProvider keyProvider;\n \n     if (keyProviderClass \u003d\u003d null) {\n       // No key provider was provided so use the provided key as is.\n       keyProvider \u003d new SimpleKeyProvider();\n     } else {\n       // create an instance of the key provider class and verify it\n       // implements KeyProvider\n       Object keyProviderObject;\n       try {\n         Class\u003c?\u003e clazz \u003d configuration.getClassByName(keyProviderClass);\n         keyProviderObject \u003d clazz.newInstance();\n       } catch (Exception e) {\n         throw new KeyProviderException(\"Unable to load key provider class.\", e);\n       }\n       if (!(keyProviderObject instanceof KeyProvider)) {\n         throw new KeyProviderException(keyProviderClass\n                 + \" specified in config is not a valid KeyProvider class.\");\n       }\n       keyProvider \u003d (KeyProvider) keyProviderObject;\n     }\n     key \u003d keyProvider.getStorageAccountKey(accountName, configuration);\n \n     if (key \u003d\u003d null) {\n       throw new ConfigurationPropertyNotFoundException(accountName);\n     }\n \n     return key;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getStorageAccountKey(final String accountName) throws AzureBlobFileSystemException {\n    String key;\n    String keyProviderClass \u003d\n            configuration.get(AZURE_KEY_ACCOUNT_KEYPROVIDER_PREFIX + accountName);\n    KeyProvider keyProvider;\n\n    if (keyProviderClass \u003d\u003d null) {\n      // No key provider was provided so use the provided key as is.\n      keyProvider \u003d new SimpleKeyProvider();\n    } else {\n      // create an instance of the key provider class and verify it\n      // implements KeyProvider\n      Object keyProviderObject;\n      try {\n        Class\u003c?\u003e clazz \u003d configuration.getClassByName(keyProviderClass);\n        keyProviderObject \u003d clazz.newInstance();\n      } catch (Exception e) {\n        throw new KeyProviderException(\"Unable to load key provider class.\", e);\n      }\n      if (!(keyProviderObject instanceof KeyProvider)) {\n        throw new KeyProviderException(keyProviderClass\n                + \" specified in config is not a valid KeyProvider class.\");\n      }\n      keyProvider \u003d (KeyProvider) keyProviderObject;\n    }\n    key \u003d keyProvider.getStorageAccountKey(accountName, configuration);\n\n    if (key \u003d\u003d null) {\n      throw new ConfigurationPropertyNotFoundException(accountName);\n    }\n\n    return key;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
      "extendedDetails": {}
    },
    "b54b0c1b676c616aef9574e4e88ea30c314c79dc": {
      "type": "Ymultichange(Yfilerename,Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-15659. Code changes for bug fix and new tests.\nContributed by Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "b54b0c1b676c616aef9574e4e88ea30c314c79dc",
      "commitAuthor": "Thomas Marquardt",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HADOOP-15659. Code changes for bug fix and new tests.\nContributed by Da Zhou.\n",
          "commitDate": "17/09/18 12:54 PM",
          "commitName": "b54b0c1b676c616aef9574e4e88ea30c314c79dc",
          "commitAuthor": "Thomas Marquardt",
          "commitDateOld": "17/09/18 12:54 PM",
          "commitNameOld": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
          "commitAuthorOld": "Thomas Marquardt",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,8 +1,33 @@\n-  public String getStorageAccountKey(final String accountName) throws ConfigurationPropertyNotFoundException {\n-    String accountKey \u003d this.storageAccountKeys.get(ConfigurationKeys.FS_AZURE_ACCOUNT_KEY_PROPERTY_NAME + accountName);\n-    if (accountKey \u003d\u003d null) {\n+  public String getStorageAccountKey(final String accountName) throws AzureBlobFileSystemException {\n+    String key;\n+    String keyProviderClass \u003d\n+            configuration.get(ConfigurationKeys.AZURE_KEY_ACCOUNT_KEYPROVIDER_PREFIX + accountName);\n+    KeyProvider keyProvider;\n+\n+    if (keyProviderClass \u003d\u003d null) {\n+      // No key provider was provided so use the provided key as is.\n+      keyProvider \u003d new SimpleKeyProvider();\n+    } else {\n+      // create an instance of the key provider class and verify it\n+      // implements KeyProvider\n+      Object keyProviderObject;\n+      try {\n+        Class\u003c?\u003e clazz \u003d configuration.getClassByName(keyProviderClass);\n+        keyProviderObject \u003d clazz.newInstance();\n+      } catch (Exception e) {\n+        throw new KeyProviderException(\"Unable to load key provider class.\", e);\n+      }\n+      if (!(keyProviderObject instanceof KeyProvider)) {\n+        throw new KeyProviderException(keyProviderClass\n+                + \" specified in config is not a valid KeyProvider class.\");\n+      }\n+      keyProvider \u003d (KeyProvider) keyProviderObject;\n+    }\n+    key \u003d keyProvider.getStorageAccountKey(accountName, configuration);\n+\n+    if (key \u003d\u003d null) {\n       throw new ConfigurationPropertyNotFoundException(accountName);\n     }\n \n-    return accountKey;\n+    return key;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String getStorageAccountKey(final String accountName) throws AzureBlobFileSystemException {\n    String key;\n    String keyProviderClass \u003d\n            configuration.get(ConfigurationKeys.AZURE_KEY_ACCOUNT_KEYPROVIDER_PREFIX + accountName);\n    KeyProvider keyProvider;\n\n    if (keyProviderClass \u003d\u003d null) {\n      // No key provider was provided so use the provided key as is.\n      keyProvider \u003d new SimpleKeyProvider();\n    } else {\n      // create an instance of the key provider class and verify it\n      // implements KeyProvider\n      Object keyProviderObject;\n      try {\n        Class\u003c?\u003e clazz \u003d configuration.getClassByName(keyProviderClass);\n        keyProviderObject \u003d clazz.newInstance();\n      } catch (Exception e) {\n        throw new KeyProviderException(\"Unable to load key provider class.\", e);\n      }\n      if (!(keyProviderObject instanceof KeyProvider)) {\n        throw new KeyProviderException(keyProviderClass\n                + \" specified in config is not a valid KeyProvider class.\");\n      }\n      keyProvider \u003d (KeyProvider) keyProviderObject;\n    }\n    key \u003d keyProvider.getStorageAccountKey(accountName, configuration);\n\n    if (key \u003d\u003d null) {\n      throw new ConfigurationPropertyNotFoundException(accountName);\n    }\n\n    return key;\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsConfiguration.java",
            "newPath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-15659. Code changes for bug fix and new tests.\nContributed by Da Zhou.\n",
          "commitDate": "17/09/18 12:54 PM",
          "commitName": "b54b0c1b676c616aef9574e4e88ea30c314c79dc",
          "commitAuthor": "Thomas Marquardt",
          "commitDateOld": "17/09/18 12:54 PM",
          "commitNameOld": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
          "commitAuthorOld": "Thomas Marquardt",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,8 +1,33 @@\n-  public String getStorageAccountKey(final String accountName) throws ConfigurationPropertyNotFoundException {\n-    String accountKey \u003d this.storageAccountKeys.get(ConfigurationKeys.FS_AZURE_ACCOUNT_KEY_PROPERTY_NAME + accountName);\n-    if (accountKey \u003d\u003d null) {\n+  public String getStorageAccountKey(final String accountName) throws AzureBlobFileSystemException {\n+    String key;\n+    String keyProviderClass \u003d\n+            configuration.get(ConfigurationKeys.AZURE_KEY_ACCOUNT_KEYPROVIDER_PREFIX + accountName);\n+    KeyProvider keyProvider;\n+\n+    if (keyProviderClass \u003d\u003d null) {\n+      // No key provider was provided so use the provided key as is.\n+      keyProvider \u003d new SimpleKeyProvider();\n+    } else {\n+      // create an instance of the key provider class and verify it\n+      // implements KeyProvider\n+      Object keyProviderObject;\n+      try {\n+        Class\u003c?\u003e clazz \u003d configuration.getClassByName(keyProviderClass);\n+        keyProviderObject \u003d clazz.newInstance();\n+      } catch (Exception e) {\n+        throw new KeyProviderException(\"Unable to load key provider class.\", e);\n+      }\n+      if (!(keyProviderObject instanceof KeyProvider)) {\n+        throw new KeyProviderException(keyProviderClass\n+                + \" specified in config is not a valid KeyProvider class.\");\n+      }\n+      keyProvider \u003d (KeyProvider) keyProviderObject;\n+    }\n+    key \u003d keyProvider.getStorageAccountKey(accountName, configuration);\n+\n+    if (key \u003d\u003d null) {\n       throw new ConfigurationPropertyNotFoundException(accountName);\n     }\n \n-    return accountKey;\n+    return key;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String getStorageAccountKey(final String accountName) throws AzureBlobFileSystemException {\n    String key;\n    String keyProviderClass \u003d\n            configuration.get(ConfigurationKeys.AZURE_KEY_ACCOUNT_KEYPROVIDER_PREFIX + accountName);\n    KeyProvider keyProvider;\n\n    if (keyProviderClass \u003d\u003d null) {\n      // No key provider was provided so use the provided key as is.\n      keyProvider \u003d new SimpleKeyProvider();\n    } else {\n      // create an instance of the key provider class and verify it\n      // implements KeyProvider\n      Object keyProviderObject;\n      try {\n        Class\u003c?\u003e clazz \u003d configuration.getClassByName(keyProviderClass);\n        keyProviderObject \u003d clazz.newInstance();\n      } catch (Exception e) {\n        throw new KeyProviderException(\"Unable to load key provider class.\", e);\n      }\n      if (!(keyProviderObject instanceof KeyProvider)) {\n        throw new KeyProviderException(keyProviderClass\n                + \" specified in config is not a valid KeyProvider class.\");\n      }\n      keyProvider \u003d (KeyProvider) keyProviderObject;\n    }\n    key \u003d keyProvider.getStorageAccountKey(accountName, configuration);\n\n    if (key \u003d\u003d null) {\n      throw new ConfigurationPropertyNotFoundException(accountName);\n    }\n\n    return key;\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
          "extendedDetails": {
            "oldValue": "[ConfigurationPropertyNotFoundException]",
            "newValue": "[AzureBlobFileSystemException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15659. Code changes for bug fix and new tests.\nContributed by Da Zhou.\n",
          "commitDate": "17/09/18 12:54 PM",
          "commitName": "b54b0c1b676c616aef9574e4e88ea30c314c79dc",
          "commitAuthor": "Thomas Marquardt",
          "commitDateOld": "17/09/18 12:54 PM",
          "commitNameOld": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
          "commitAuthorOld": "Thomas Marquardt",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,8 +1,33 @@\n-  public String getStorageAccountKey(final String accountName) throws ConfigurationPropertyNotFoundException {\n-    String accountKey \u003d this.storageAccountKeys.get(ConfigurationKeys.FS_AZURE_ACCOUNT_KEY_PROPERTY_NAME + accountName);\n-    if (accountKey \u003d\u003d null) {\n+  public String getStorageAccountKey(final String accountName) throws AzureBlobFileSystemException {\n+    String key;\n+    String keyProviderClass \u003d\n+            configuration.get(ConfigurationKeys.AZURE_KEY_ACCOUNT_KEYPROVIDER_PREFIX + accountName);\n+    KeyProvider keyProvider;\n+\n+    if (keyProviderClass \u003d\u003d null) {\n+      // No key provider was provided so use the provided key as is.\n+      keyProvider \u003d new SimpleKeyProvider();\n+    } else {\n+      // create an instance of the key provider class and verify it\n+      // implements KeyProvider\n+      Object keyProviderObject;\n+      try {\n+        Class\u003c?\u003e clazz \u003d configuration.getClassByName(keyProviderClass);\n+        keyProviderObject \u003d clazz.newInstance();\n+      } catch (Exception e) {\n+        throw new KeyProviderException(\"Unable to load key provider class.\", e);\n+      }\n+      if (!(keyProviderObject instanceof KeyProvider)) {\n+        throw new KeyProviderException(keyProviderClass\n+                + \" specified in config is not a valid KeyProvider class.\");\n+      }\n+      keyProvider \u003d (KeyProvider) keyProviderObject;\n+    }\n+    key \u003d keyProvider.getStorageAccountKey(accountName, configuration);\n+\n+    if (key \u003d\u003d null) {\n       throw new ConfigurationPropertyNotFoundException(accountName);\n     }\n \n-    return accountKey;\n+    return key;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String getStorageAccountKey(final String accountName) throws AzureBlobFileSystemException {\n    String key;\n    String keyProviderClass \u003d\n            configuration.get(ConfigurationKeys.AZURE_KEY_ACCOUNT_KEYPROVIDER_PREFIX + accountName);\n    KeyProvider keyProvider;\n\n    if (keyProviderClass \u003d\u003d null) {\n      // No key provider was provided so use the provided key as is.\n      keyProvider \u003d new SimpleKeyProvider();\n    } else {\n      // create an instance of the key provider class and verify it\n      // implements KeyProvider\n      Object keyProviderObject;\n      try {\n        Class\u003c?\u003e clazz \u003d configuration.getClassByName(keyProviderClass);\n        keyProviderObject \u003d clazz.newInstance();\n      } catch (Exception e) {\n        throw new KeyProviderException(\"Unable to load key provider class.\", e);\n      }\n      if (!(keyProviderObject instanceof KeyProvider)) {\n        throw new KeyProviderException(keyProviderClass\n                + \" specified in config is not a valid KeyProvider class.\");\n      }\n      keyProvider \u003d (KeyProvider) keyProviderObject;\n    }\n    key \u003d keyProvider.getStorageAccountKey(accountName, configuration);\n\n    if (key \u003d\u003d null) {\n      throw new ConfigurationPropertyNotFoundException(accountName);\n    }\n\n    return key;\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
          "extendedDetails": {}
        }
      ]
    },
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15560. ABFS: removed dependency injection and unnecessary dependencies.\nContributed by Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String getStorageAccountKey(final String accountName) throws ConfigurationPropertyNotFoundException {\n    String accountKey \u003d this.storageAccountKeys.get(ConfigurationKeys.FS_AZURE_ACCOUNT_KEY_PROPERTY_NAME + accountName);\n    if (accountKey \u003d\u003d null) {\n      throw new ConfigurationPropertyNotFoundException(accountName);\n    }\n\n    return accountKey;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsConfiguration.java",
      "extendedDetails": {
        "oldPath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ConfigurationServiceImpl.java",
        "newPath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsConfiguration.java"
      }
    },
    "f044deedbbfee0812316d587139cb828f27172e9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15407. HADOOP-15540. Support Windows Azure Storage - Blob file system \"ABFS\" in Hadoop: Core Commit.\n\nContributed by Shane Mainali, Thomas Marquardt, Zichen Sun, Georgi Chalakov, Esfandiar Manii, Amit Singh, Dana Kaban, Da Zhou, Junhua Gu, Saher Ahwal, Saurabh Pant, James Baker, Shaoyu Zhang, Lawrence Chen, Kevin Chen and Steve Loughran\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,8 @@\n+  public String getStorageAccountKey(final String accountName) throws ConfigurationPropertyNotFoundException {\n+    String accountKey \u003d this.storageAccountKeys.get(ConfigurationKeys.FS_AZURE_ACCOUNT_KEY_PROPERTY_NAME + accountName);\n+    if (accountKey \u003d\u003d null) {\n+      throw new ConfigurationPropertyNotFoundException(accountName);\n+    }\n+\n+    return accountKey;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String getStorageAccountKey(final String accountName) throws ConfigurationPropertyNotFoundException {\n    String accountKey \u003d this.storageAccountKeys.get(ConfigurationKeys.FS_AZURE_ACCOUNT_KEY_PROPERTY_NAME + accountName);\n    if (accountKey \u003d\u003d null) {\n      throw new ConfigurationPropertyNotFoundException(accountName);\n    }\n\n    return accountKey;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/ConfigurationServiceImpl.java"
    }
  }
}