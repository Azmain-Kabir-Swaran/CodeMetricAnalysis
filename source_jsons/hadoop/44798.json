{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedConfCLI.java",
  "functionName": "run",
  "functionId": "run___args-String[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/SchedConfCLI.java",
  "functionStartLine": 101,
  "functionEndLine": 186,
  "numCommitsSeen": 8,
  "timeTaken": 3002,
  "changeHistory": [
    "c71befaf8fec1e5a962359c9cc131fb47adfd9d1",
    "137546a78a45adbfb5ef338c1c2984a97b3cecc2",
    "cb9bc6e64c590622ae04aea2c81962be59037f7a",
    "e30938af1270e079587e7bc06b755f9e93e660a5",
    "09c5dfe937f0570cd9494b34d210df2d5f0737a7",
    "916bdbd6bedbc75000bb74e16c1e2ee692a4912c"
  ],
  "changeHistoryShort": {
    "c71befaf8fec1e5a962359c9cc131fb47adfd9d1": "Ybodychange",
    "137546a78a45adbfb5ef338c1c2984a97b3cecc2": "Ybodychange",
    "cb9bc6e64c590622ae04aea2c81962be59037f7a": "Ybodychange",
    "e30938af1270e079587e7bc06b755f9e93e660a5": "Ybodychange",
    "09c5dfe937f0570cd9494b34d210df2d5f0737a7": "Ybodychange",
    "916bdbd6bedbc75000bb74e16c1e2ee692a4912c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c71befaf8fec1e5a962359c9cc131fb47adfd9d1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9781. SchedConfCli to get current stored scheduler configuration. Contributed by Prabhu Joseph\n",
      "commitDate": "05/12/19 11:31 AM",
      "commitName": "c71befaf8fec1e5a962359c9cc131fb47adfd9d1",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "01/10/19 7:36 AM",
      "commitNameOld": "99cd7572f113cbbb8f5ef89af60af3734fe8cfa7",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 65.2,
      "commitsBetweenForRepo": 300,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,86 @@\n   public int run(String[] args) throws Exception {\n     Options opts \u003d new Options();\n \n     opts.addOption(\"add\", ADD_QUEUES_OPTION, true,\n         \"Add queues with configurations\");\n     opts.addOption(\"remove\", REMOVE_QUEUES_OPTION, true,\n         \"Remove queues\");\n     opts.addOption(\"update\", UPDATE_QUEUES_OPTION, true,\n         \"Update queue configurations\");\n     opts.addOption(\"global\", GLOBAL_OPTIONS, true,\n         \"Update global scheduler configurations\");\n+    opts.addOption(\"getconf\", GET_SCHEDULER_CONF, false,\n+        \"Get current scheduler configurations\");\n     opts.addOption(\"format\", FORMAT_CONF, false,\n         \"Format Scheduler Configuration and reload from\" +\n         \" capacity-scheduler.xml\");\n     opts.addOption(\"h\", HELP_CMD, false, \"Displays help for all commands.\");\n \n     int exitCode \u003d -1;\n     CommandLine parsedCli \u003d null;\n     try {\n       parsedCli \u003d new GnuParser().parse(opts, args);\n     } catch (MissingArgumentException ex) {\n       System.err.println(\"Missing argument for options\");\n       printUsage();\n       return exitCode;\n     }\n \n     if (parsedCli.hasOption(HELP_CMD)) {\n       printUsage();\n       return 0;\n     }\n \n     boolean hasOption \u003d false;\n     boolean format \u003d false;\n+    boolean getConf \u003d false;\n     SchedConfUpdateInfo updateInfo \u003d new SchedConfUpdateInfo();\n     try {\n       if (parsedCli.hasOption(ADD_QUEUES_OPTION)) {\n         hasOption \u003d true;\n         addQueues(parsedCli.getOptionValue(ADD_QUEUES_OPTION), updateInfo);\n       }\n       if (parsedCli.hasOption(REMOVE_QUEUES_OPTION)) {\n         hasOption \u003d true;\n         removeQueues(parsedCli.getOptionValue(REMOVE_QUEUES_OPTION),\n             updateInfo);\n       }\n       if (parsedCli.hasOption(UPDATE_QUEUES_OPTION)) {\n         hasOption \u003d true;\n         updateQueues(parsedCli.getOptionValue(UPDATE_QUEUES_OPTION),\n             updateInfo);\n       }\n       if (parsedCli.hasOption(GLOBAL_OPTIONS)) {\n         hasOption \u003d true;\n         globalUpdates(parsedCli.getOptionValue(GLOBAL_OPTIONS), updateInfo);\n       }\n       if (parsedCli.hasOption((FORMAT_CONF))) {\n         hasOption \u003d true;\n         format \u003d true;\n       }\n+      if (parsedCli.hasOption(GET_SCHEDULER_CONF)) {\n+        hasOption \u003d true;\n+        getConf \u003d true;\n+      }\n \n     } catch (IllegalArgumentException e) {\n       System.err.println(e.getMessage());\n       return -1;\n     }\n \n     if (!hasOption) {\n       System.err.println(\"Invalid Command Usage: \");\n       printUsage();\n       return -1;\n     }\n \n     Configuration conf \u003d getConf();\n     if (format) {\n       return WebAppUtils.execOnActiveRM(conf, this::formatSchedulerConf, null);\n+    } else if (getConf) {\n+      return WebAppUtils.execOnActiveRM(conf, this::getSchedulerConf, null);\n     } else {\n       return WebAppUtils.execOnActiveRM(conf,\n           this::updateSchedulerConfOnRMNode, updateInfo);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Options opts \u003d new Options();\n\n    opts.addOption(\"add\", ADD_QUEUES_OPTION, true,\n        \"Add queues with configurations\");\n    opts.addOption(\"remove\", REMOVE_QUEUES_OPTION, true,\n        \"Remove queues\");\n    opts.addOption(\"update\", UPDATE_QUEUES_OPTION, true,\n        \"Update queue configurations\");\n    opts.addOption(\"global\", GLOBAL_OPTIONS, true,\n        \"Update global scheduler configurations\");\n    opts.addOption(\"getconf\", GET_SCHEDULER_CONF, false,\n        \"Get current scheduler configurations\");\n    opts.addOption(\"format\", FORMAT_CONF, false,\n        \"Format Scheduler Configuration and reload from\" +\n        \" capacity-scheduler.xml\");\n    opts.addOption(\"h\", HELP_CMD, false, \"Displays help for all commands.\");\n\n    int exitCode \u003d -1;\n    CommandLine parsedCli \u003d null;\n    try {\n      parsedCli \u003d new GnuParser().parse(opts, args);\n    } catch (MissingArgumentException ex) {\n      System.err.println(\"Missing argument for options\");\n      printUsage();\n      return exitCode;\n    }\n\n    if (parsedCli.hasOption(HELP_CMD)) {\n      printUsage();\n      return 0;\n    }\n\n    boolean hasOption \u003d false;\n    boolean format \u003d false;\n    boolean getConf \u003d false;\n    SchedConfUpdateInfo updateInfo \u003d new SchedConfUpdateInfo();\n    try {\n      if (parsedCli.hasOption(ADD_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        addQueues(parsedCli.getOptionValue(ADD_QUEUES_OPTION), updateInfo);\n      }\n      if (parsedCli.hasOption(REMOVE_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        removeQueues(parsedCli.getOptionValue(REMOVE_QUEUES_OPTION),\n            updateInfo);\n      }\n      if (parsedCli.hasOption(UPDATE_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        updateQueues(parsedCli.getOptionValue(UPDATE_QUEUES_OPTION),\n            updateInfo);\n      }\n      if (parsedCli.hasOption(GLOBAL_OPTIONS)) {\n        hasOption \u003d true;\n        globalUpdates(parsedCli.getOptionValue(GLOBAL_OPTIONS), updateInfo);\n      }\n      if (parsedCli.hasOption((FORMAT_CONF))) {\n        hasOption \u003d true;\n        format \u003d true;\n      }\n      if (parsedCli.hasOption(GET_SCHEDULER_CONF)) {\n        hasOption \u003d true;\n        getConf \u003d true;\n      }\n\n    } catch (IllegalArgumentException e) {\n      System.err.println(e.getMessage());\n      return -1;\n    }\n\n    if (!hasOption) {\n      System.err.println(\"Invalid Command Usage: \");\n      printUsage();\n      return -1;\n    }\n\n    Configuration conf \u003d getConf();\n    if (format) {\n      return WebAppUtils.execOnActiveRM(conf, this::formatSchedulerConf, null);\n    } else if (getConf) {\n      return WebAppUtils.execOnActiveRM(conf, this::getSchedulerConf, null);\n    } else {\n      return WebAppUtils.execOnActiveRM(conf,\n          this::updateSchedulerConfOnRMNode, updateInfo);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/SchedConfCLI.java",
      "extendedDetails": {}
    },
    "137546a78a45adbfb5ef338c1c2984a97b3cecc2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9864. Format CS Configuration present in Configuration Store. Contributeed by Prabhu Joseph\n",
      "commitDate": "30/09/19 8:38 PM",
      "commitName": "137546a78a45adbfb5ef338c1c2984a97b3cecc2",
      "commitAuthor": "Sunil G",
      "commitDateOld": "06/06/19 1:41 PM",
      "commitNameOld": "cb9bc6e64c590622ae04aea2c81962be59037f7a",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 116.29,
      "commitsBetweenForRepo": 996,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,77 @@\n   public int run(String[] args) throws Exception {\n     Options opts \u003d new Options();\n \n     opts.addOption(\"add\", ADD_QUEUES_OPTION, true,\n         \"Add queues with configurations\");\n     opts.addOption(\"remove\", REMOVE_QUEUES_OPTION, true,\n         \"Remove queues\");\n     opts.addOption(\"update\", UPDATE_QUEUES_OPTION, true,\n         \"Update queue configurations\");\n     opts.addOption(\"global\", GLOBAL_OPTIONS, true,\n         \"Update global scheduler configurations\");\n+    opts.addOption(\"format\", FORMAT_CONF, false,\n+        \"Format Scheduler Configuration and reload from\" +\n+        \" capacity-scheduler.xml\");\n     opts.addOption(\"h\", HELP_CMD, false, \"Displays help for all commands.\");\n \n     int exitCode \u003d -1;\n     CommandLine parsedCli \u003d null;\n     try {\n       parsedCli \u003d new GnuParser().parse(opts, args);\n     } catch (MissingArgumentException ex) {\n       System.err.println(\"Missing argument for options\");\n       printUsage();\n       return exitCode;\n     }\n \n     if (parsedCli.hasOption(HELP_CMD)) {\n       printUsage();\n       return 0;\n     }\n \n     boolean hasOption \u003d false;\n+    boolean format \u003d false;\n     SchedConfUpdateInfo updateInfo \u003d new SchedConfUpdateInfo();\n     try {\n       if (parsedCli.hasOption(ADD_QUEUES_OPTION)) {\n         hasOption \u003d true;\n         addQueues(parsedCli.getOptionValue(ADD_QUEUES_OPTION), updateInfo);\n       }\n       if (parsedCli.hasOption(REMOVE_QUEUES_OPTION)) {\n         hasOption \u003d true;\n         removeQueues(parsedCli.getOptionValue(REMOVE_QUEUES_OPTION),\n             updateInfo);\n       }\n       if (parsedCli.hasOption(UPDATE_QUEUES_OPTION)) {\n         hasOption \u003d true;\n         updateQueues(parsedCli.getOptionValue(UPDATE_QUEUES_OPTION),\n             updateInfo);\n       }\n       if (parsedCli.hasOption(GLOBAL_OPTIONS)) {\n         hasOption \u003d true;\n         globalUpdates(parsedCli.getOptionValue(GLOBAL_OPTIONS), updateInfo);\n       }\n+      if (parsedCli.hasOption((FORMAT_CONF))) {\n+        hasOption \u003d true;\n+        format \u003d true;\n+      }\n+\n     } catch (IllegalArgumentException e) {\n       System.err.println(e.getMessage());\n       return -1;\n     }\n \n     if (!hasOption) {\n       System.err.println(\"Invalid Command Usage: \");\n       printUsage();\n       return -1;\n     }\n \n     Configuration conf \u003d getConf();\n-    return WebAppUtils.execOnActiveRM(conf,\n-        this::updateSchedulerConfOnRMNode, updateInfo);\n+    if (format) {\n+      return WebAppUtils.execOnActiveRM(conf, this::formatSchedulerConf, null);\n+    } else {\n+      return WebAppUtils.execOnActiveRM(conf,\n+          this::updateSchedulerConfOnRMNode, updateInfo);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Options opts \u003d new Options();\n\n    opts.addOption(\"add\", ADD_QUEUES_OPTION, true,\n        \"Add queues with configurations\");\n    opts.addOption(\"remove\", REMOVE_QUEUES_OPTION, true,\n        \"Remove queues\");\n    opts.addOption(\"update\", UPDATE_QUEUES_OPTION, true,\n        \"Update queue configurations\");\n    opts.addOption(\"global\", GLOBAL_OPTIONS, true,\n        \"Update global scheduler configurations\");\n    opts.addOption(\"format\", FORMAT_CONF, false,\n        \"Format Scheduler Configuration and reload from\" +\n        \" capacity-scheduler.xml\");\n    opts.addOption(\"h\", HELP_CMD, false, \"Displays help for all commands.\");\n\n    int exitCode \u003d -1;\n    CommandLine parsedCli \u003d null;\n    try {\n      parsedCli \u003d new GnuParser().parse(opts, args);\n    } catch (MissingArgumentException ex) {\n      System.err.println(\"Missing argument for options\");\n      printUsage();\n      return exitCode;\n    }\n\n    if (parsedCli.hasOption(HELP_CMD)) {\n      printUsage();\n      return 0;\n    }\n\n    boolean hasOption \u003d false;\n    boolean format \u003d false;\n    SchedConfUpdateInfo updateInfo \u003d new SchedConfUpdateInfo();\n    try {\n      if (parsedCli.hasOption(ADD_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        addQueues(parsedCli.getOptionValue(ADD_QUEUES_OPTION), updateInfo);\n      }\n      if (parsedCli.hasOption(REMOVE_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        removeQueues(parsedCli.getOptionValue(REMOVE_QUEUES_OPTION),\n            updateInfo);\n      }\n      if (parsedCli.hasOption(UPDATE_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        updateQueues(parsedCli.getOptionValue(UPDATE_QUEUES_OPTION),\n            updateInfo);\n      }\n      if (parsedCli.hasOption(GLOBAL_OPTIONS)) {\n        hasOption \u003d true;\n        globalUpdates(parsedCli.getOptionValue(GLOBAL_OPTIONS), updateInfo);\n      }\n      if (parsedCli.hasOption((FORMAT_CONF))) {\n        hasOption \u003d true;\n        format \u003d true;\n      }\n\n    } catch (IllegalArgumentException e) {\n      System.err.println(e.getMessage());\n      return -1;\n    }\n\n    if (!hasOption) {\n      System.err.println(\"Invalid Command Usage: \");\n      printUsage();\n      return -1;\n    }\n\n    Configuration conf \u003d getConf();\n    if (format) {\n      return WebAppUtils.execOnActiveRM(conf, this::formatSchedulerConf, null);\n    } else {\n      return WebAppUtils.execOnActiveRM(conf,\n          this::updateSchedulerConfOnRMNode, updateInfo);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/SchedConfCLI.java",
      "extendedDetails": {}
    },
    "cb9bc6e64c590622ae04aea2c81962be59037f7a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9581.  Fixed yarn logs cli to access RM2.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "06/06/19 1:41 PM",
      "commitName": "cb9bc6e64c590622ae04aea2c81962be59037f7a",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "23/05/18 11:55 AM",
      "commitNameOld": "e30938af1270e079587e7bc06b755f9e93e660a5",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 379.07,
      "commitsBetweenForRepo": 2838,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,64 @@\n   public int run(String[] args) throws Exception {\n     Options opts \u003d new Options();\n \n     opts.addOption(\"add\", ADD_QUEUES_OPTION, true,\n         \"Add queues with configurations\");\n     opts.addOption(\"remove\", REMOVE_QUEUES_OPTION, true,\n         \"Remove queues\");\n     opts.addOption(\"update\", UPDATE_QUEUES_OPTION, true,\n         \"Update queue configurations\");\n     opts.addOption(\"global\", GLOBAL_OPTIONS, true,\n         \"Update global scheduler configurations\");\n     opts.addOption(\"h\", HELP_CMD, false, \"Displays help for all commands.\");\n \n     int exitCode \u003d -1;\n     CommandLine parsedCli \u003d null;\n     try {\n       parsedCli \u003d new GnuParser().parse(opts, args);\n     } catch (MissingArgumentException ex) {\n       System.err.println(\"Missing argument for options\");\n       printUsage();\n       return exitCode;\n     }\n \n     if (parsedCli.hasOption(HELP_CMD)) {\n       printUsage();\n       return 0;\n     }\n \n     boolean hasOption \u003d false;\n     SchedConfUpdateInfo updateInfo \u003d new SchedConfUpdateInfo();\n     try {\n       if (parsedCli.hasOption(ADD_QUEUES_OPTION)) {\n         hasOption \u003d true;\n         addQueues(parsedCli.getOptionValue(ADD_QUEUES_OPTION), updateInfo);\n       }\n       if (parsedCli.hasOption(REMOVE_QUEUES_OPTION)) {\n         hasOption \u003d true;\n         removeQueues(parsedCli.getOptionValue(REMOVE_QUEUES_OPTION),\n             updateInfo);\n       }\n       if (parsedCli.hasOption(UPDATE_QUEUES_OPTION)) {\n         hasOption \u003d true;\n         updateQueues(parsedCli.getOptionValue(UPDATE_QUEUES_OPTION),\n             updateInfo);\n       }\n       if (parsedCli.hasOption(GLOBAL_OPTIONS)) {\n         hasOption \u003d true;\n         globalUpdates(parsedCli.getOptionValue(GLOBAL_OPTIONS), updateInfo);\n       }\n     } catch (IllegalArgumentException e) {\n       System.err.println(e.getMessage());\n       return -1;\n     }\n \n     if (!hasOption) {\n       System.err.println(\"Invalid Command Usage: \");\n       printUsage();\n       return -1;\n     }\n \n-    Client webServiceClient \u003d Client.create();\n-    WebResource webResource \u003d webServiceClient\n-        .resource(WebAppUtils.getRMWebAppURLWithScheme(getConf()));\n-    ClientResponse response \u003d null;\n-\n-    try {\n-      response \u003d\n-          webResource.path(\"ws\").path(\"v1\").path(\"cluster\")\n-              .path(\"scheduler-conf\").accept(MediaType.APPLICATION_JSON)\n-              .entity(YarnWebServiceUtils.toJson(updateInfo,\n-                  SchedConfUpdateInfo.class), MediaType.APPLICATION_JSON)\n-              .put(ClientResponse.class);\n-      if (response !\u003d null) {\n-        if (response.getStatus() \u003d\u003d Status.OK.getStatusCode()) {\n-          System.out.println(\"Configuration changed successfully.\");\n-          return 0;\n-        } else {\n-          System.err.println(\"Configuration change unsuccessful: \"\n-              + response.getEntity(String.class));\n-        }\n-      } else {\n-        System.err.println(\"Configuration change unsuccessful: null response\");\n-      }\n-      return -1;\n-    } finally {\n-      if (response !\u003d null) {\n-        response.close();\n-      }\n-      webServiceClient.destroy();\n-    }\n+    Configuration conf \u003d getConf();\n+    return WebAppUtils.execOnActiveRM(conf,\n+        this::updateSchedulerConfOnRMNode, updateInfo);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Options opts \u003d new Options();\n\n    opts.addOption(\"add\", ADD_QUEUES_OPTION, true,\n        \"Add queues with configurations\");\n    opts.addOption(\"remove\", REMOVE_QUEUES_OPTION, true,\n        \"Remove queues\");\n    opts.addOption(\"update\", UPDATE_QUEUES_OPTION, true,\n        \"Update queue configurations\");\n    opts.addOption(\"global\", GLOBAL_OPTIONS, true,\n        \"Update global scheduler configurations\");\n    opts.addOption(\"h\", HELP_CMD, false, \"Displays help for all commands.\");\n\n    int exitCode \u003d -1;\n    CommandLine parsedCli \u003d null;\n    try {\n      parsedCli \u003d new GnuParser().parse(opts, args);\n    } catch (MissingArgumentException ex) {\n      System.err.println(\"Missing argument for options\");\n      printUsage();\n      return exitCode;\n    }\n\n    if (parsedCli.hasOption(HELP_CMD)) {\n      printUsage();\n      return 0;\n    }\n\n    boolean hasOption \u003d false;\n    SchedConfUpdateInfo updateInfo \u003d new SchedConfUpdateInfo();\n    try {\n      if (parsedCli.hasOption(ADD_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        addQueues(parsedCli.getOptionValue(ADD_QUEUES_OPTION), updateInfo);\n      }\n      if (parsedCli.hasOption(REMOVE_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        removeQueues(parsedCli.getOptionValue(REMOVE_QUEUES_OPTION),\n            updateInfo);\n      }\n      if (parsedCli.hasOption(UPDATE_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        updateQueues(parsedCli.getOptionValue(UPDATE_QUEUES_OPTION),\n            updateInfo);\n      }\n      if (parsedCli.hasOption(GLOBAL_OPTIONS)) {\n        hasOption \u003d true;\n        globalUpdates(parsedCli.getOptionValue(GLOBAL_OPTIONS), updateInfo);\n      }\n    } catch (IllegalArgumentException e) {\n      System.err.println(e.getMessage());\n      return -1;\n    }\n\n    if (!hasOption) {\n      System.err.println(\"Invalid Command Usage: \");\n      printUsage();\n      return -1;\n    }\n\n    Configuration conf \u003d getConf();\n    return WebAppUtils.execOnActiveRM(conf,\n        this::updateSchedulerConfOnRMNode, updateInfo);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/SchedConfCLI.java",
      "extendedDetails": {}
    },
    "e30938af1270e079587e7bc06b755f9e93e660a5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8336. Fix potential connection leak in SchedConfCLI and YarnWebServiceUtils. Contributed by Giovanni Matteo Fumarola.\n",
      "commitDate": "23/05/18 11:55 AM",
      "commitName": "e30938af1270e079587e7bc06b755f9e93e660a5",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "09c5dfe937f0570cd9494b34d210df2d5f0737a7",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 226.03,
      "commitsBetweenForRepo": 2168,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,91 @@\n   public int run(String[] args) throws Exception {\n     Options opts \u003d new Options();\n \n     opts.addOption(\"add\", ADD_QUEUES_OPTION, true,\n         \"Add queues with configurations\");\n     opts.addOption(\"remove\", REMOVE_QUEUES_OPTION, true,\n         \"Remove queues\");\n     opts.addOption(\"update\", UPDATE_QUEUES_OPTION, true,\n         \"Update queue configurations\");\n     opts.addOption(\"global\", GLOBAL_OPTIONS, true,\n         \"Update global scheduler configurations\");\n     opts.addOption(\"h\", HELP_CMD, false, \"Displays help for all commands.\");\n \n     int exitCode \u003d -1;\n     CommandLine parsedCli \u003d null;\n     try {\n       parsedCli \u003d new GnuParser().parse(opts, args);\n     } catch (MissingArgumentException ex) {\n       System.err.println(\"Missing argument for options\");\n       printUsage();\n       return exitCode;\n     }\n \n     if (parsedCli.hasOption(HELP_CMD)) {\n       printUsage();\n       return 0;\n     }\n \n     boolean hasOption \u003d false;\n     SchedConfUpdateInfo updateInfo \u003d new SchedConfUpdateInfo();\n     try {\n       if (parsedCli.hasOption(ADD_QUEUES_OPTION)) {\n         hasOption \u003d true;\n         addQueues(parsedCli.getOptionValue(ADD_QUEUES_OPTION), updateInfo);\n       }\n       if (parsedCli.hasOption(REMOVE_QUEUES_OPTION)) {\n         hasOption \u003d true;\n         removeQueues(parsedCli.getOptionValue(REMOVE_QUEUES_OPTION),\n             updateInfo);\n       }\n       if (parsedCli.hasOption(UPDATE_QUEUES_OPTION)) {\n         hasOption \u003d true;\n         updateQueues(parsedCli.getOptionValue(UPDATE_QUEUES_OPTION),\n             updateInfo);\n       }\n       if (parsedCli.hasOption(GLOBAL_OPTIONS)) {\n         hasOption \u003d true;\n         globalUpdates(parsedCli.getOptionValue(GLOBAL_OPTIONS), updateInfo);\n       }\n     } catch (IllegalArgumentException e) {\n       System.err.println(e.getMessage());\n       return -1;\n     }\n \n     if (!hasOption) {\n       System.err.println(\"Invalid Command Usage: \");\n       printUsage();\n       return -1;\n     }\n \n     Client webServiceClient \u003d Client.create();\n-    WebResource webResource \u003d webServiceClient.resource(WebAppUtils.\n-        getRMWebAppURLWithScheme(getConf()));\n-    ClientResponse response \u003d webResource.path(\"ws\").path(\"v1\").path(\"cluster\")\n-        .path(\"scheduler-conf\").accept(MediaType.APPLICATION_JSON)\n-        .entity(YarnWebServiceUtils.toJson(updateInfo,\n-            SchedConfUpdateInfo.class), MediaType.APPLICATION_JSON)\n-        .put(ClientResponse.class);\n-    if (response !\u003d null) {\n-      if (response.getStatus() \u003d\u003d Status.OK.getStatusCode()) {\n-        System.out.println(\"Configuration changed successfully.\");\n-        return 0;\n+    WebResource webResource \u003d webServiceClient\n+        .resource(WebAppUtils.getRMWebAppURLWithScheme(getConf()));\n+    ClientResponse response \u003d null;\n+\n+    try {\n+      response \u003d\n+          webResource.path(\"ws\").path(\"v1\").path(\"cluster\")\n+              .path(\"scheduler-conf\").accept(MediaType.APPLICATION_JSON)\n+              .entity(YarnWebServiceUtils.toJson(updateInfo,\n+                  SchedConfUpdateInfo.class), MediaType.APPLICATION_JSON)\n+              .put(ClientResponse.class);\n+      if (response !\u003d null) {\n+        if (response.getStatus() \u003d\u003d Status.OK.getStatusCode()) {\n+          System.out.println(\"Configuration changed successfully.\");\n+          return 0;\n+        } else {\n+          System.err.println(\"Configuration change unsuccessful: \"\n+              + response.getEntity(String.class));\n+        }\n       } else {\n-        System.err.println(\"Configuration change unsuccessful: \"\n-            + response.getEntity(String.class));\n+        System.err.println(\"Configuration change unsuccessful: null response\");\n       }\n-    } else {\n-      System.err.println(\"Configuration change unsuccessful: null response\");\n+      return -1;\n+    } finally {\n+      if (response !\u003d null) {\n+        response.close();\n+      }\n+      webServiceClient.destroy();\n     }\n-    return -1;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Options opts \u003d new Options();\n\n    opts.addOption(\"add\", ADD_QUEUES_OPTION, true,\n        \"Add queues with configurations\");\n    opts.addOption(\"remove\", REMOVE_QUEUES_OPTION, true,\n        \"Remove queues\");\n    opts.addOption(\"update\", UPDATE_QUEUES_OPTION, true,\n        \"Update queue configurations\");\n    opts.addOption(\"global\", GLOBAL_OPTIONS, true,\n        \"Update global scheduler configurations\");\n    opts.addOption(\"h\", HELP_CMD, false, \"Displays help for all commands.\");\n\n    int exitCode \u003d -1;\n    CommandLine parsedCli \u003d null;\n    try {\n      parsedCli \u003d new GnuParser().parse(opts, args);\n    } catch (MissingArgumentException ex) {\n      System.err.println(\"Missing argument for options\");\n      printUsage();\n      return exitCode;\n    }\n\n    if (parsedCli.hasOption(HELP_CMD)) {\n      printUsage();\n      return 0;\n    }\n\n    boolean hasOption \u003d false;\n    SchedConfUpdateInfo updateInfo \u003d new SchedConfUpdateInfo();\n    try {\n      if (parsedCli.hasOption(ADD_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        addQueues(parsedCli.getOptionValue(ADD_QUEUES_OPTION), updateInfo);\n      }\n      if (parsedCli.hasOption(REMOVE_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        removeQueues(parsedCli.getOptionValue(REMOVE_QUEUES_OPTION),\n            updateInfo);\n      }\n      if (parsedCli.hasOption(UPDATE_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        updateQueues(parsedCli.getOptionValue(UPDATE_QUEUES_OPTION),\n            updateInfo);\n      }\n      if (parsedCli.hasOption(GLOBAL_OPTIONS)) {\n        hasOption \u003d true;\n        globalUpdates(parsedCli.getOptionValue(GLOBAL_OPTIONS), updateInfo);\n      }\n    } catch (IllegalArgumentException e) {\n      System.err.println(e.getMessage());\n      return -1;\n    }\n\n    if (!hasOption) {\n      System.err.println(\"Invalid Command Usage: \");\n      printUsage();\n      return -1;\n    }\n\n    Client webServiceClient \u003d Client.create();\n    WebResource webResource \u003d webServiceClient\n        .resource(WebAppUtils.getRMWebAppURLWithScheme(getConf()));\n    ClientResponse response \u003d null;\n\n    try {\n      response \u003d\n          webResource.path(\"ws\").path(\"v1\").path(\"cluster\")\n              .path(\"scheduler-conf\").accept(MediaType.APPLICATION_JSON)\n              .entity(YarnWebServiceUtils.toJson(updateInfo,\n                  SchedConfUpdateInfo.class), MediaType.APPLICATION_JSON)\n              .put(ClientResponse.class);\n      if (response !\u003d null) {\n        if (response.getStatus() \u003d\u003d Status.OK.getStatusCode()) {\n          System.out.println(\"Configuration changed successfully.\");\n          return 0;\n        } else {\n          System.err.println(\"Configuration change unsuccessful: \"\n              + response.getEntity(String.class));\n        }\n      } else {\n        System.err.println(\"Configuration change unsuccessful: null response\");\n      }\n      return -1;\n    } finally {\n      if (response !\u003d null) {\n        response.close();\n      }\n      webServiceClient.destroy();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/SchedConfCLI.java",
      "extendedDetails": {}
    },
    "09c5dfe937f0570cd9494b34d210df2d5f0737a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7251. Misc changes to YARN-5734\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "09c5dfe937f0570cd9494b34d210df2d5f0737a7",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "916bdbd6bedbc75000bb74e16c1e2ee692a4912c",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,81 @@\n   public int run(String[] args) throws Exception {\n     Options opts \u003d new Options();\n \n     opts.addOption(\"add\", ADD_QUEUES_OPTION, true,\n         \"Add queues with configurations\");\n     opts.addOption(\"remove\", REMOVE_QUEUES_OPTION, true,\n         \"Remove queues\");\n     opts.addOption(\"update\", UPDATE_QUEUES_OPTION, true,\n         \"Update queue configurations\");\n     opts.addOption(\"global\", GLOBAL_OPTIONS, true,\n         \"Update global scheduler configurations\");\n     opts.addOption(\"h\", HELP_CMD, false, \"Displays help for all commands.\");\n \n     int exitCode \u003d -1;\n     CommandLine parsedCli \u003d null;\n     try {\n       parsedCli \u003d new GnuParser().parse(opts, args);\n     } catch (MissingArgumentException ex) {\n       System.err.println(\"Missing argument for options\");\n       printUsage();\n       return exitCode;\n     }\n \n     if (parsedCli.hasOption(HELP_CMD)) {\n       printUsage();\n       return 0;\n     }\n \n     boolean hasOption \u003d false;\n     SchedConfUpdateInfo updateInfo \u003d new SchedConfUpdateInfo();\n     try {\n       if (parsedCli.hasOption(ADD_QUEUES_OPTION)) {\n         hasOption \u003d true;\n         addQueues(parsedCli.getOptionValue(ADD_QUEUES_OPTION), updateInfo);\n       }\n       if (parsedCli.hasOption(REMOVE_QUEUES_OPTION)) {\n         hasOption \u003d true;\n         removeQueues(parsedCli.getOptionValue(REMOVE_QUEUES_OPTION),\n             updateInfo);\n       }\n       if (parsedCli.hasOption(UPDATE_QUEUES_OPTION)) {\n         hasOption \u003d true;\n         updateQueues(parsedCli.getOptionValue(UPDATE_QUEUES_OPTION),\n             updateInfo);\n       }\n       if (parsedCli.hasOption(GLOBAL_OPTIONS)) {\n         hasOption \u003d true;\n         globalUpdates(parsedCli.getOptionValue(GLOBAL_OPTIONS), updateInfo);\n       }\n     } catch (IllegalArgumentException e) {\n       System.err.println(e.getMessage());\n       return -1;\n     }\n \n     if (!hasOption) {\n       System.err.println(\"Invalid Command Usage: \");\n       printUsage();\n       return -1;\n     }\n \n     Client webServiceClient \u003d Client.create();\n     WebResource webResource \u003d webServiceClient.resource(WebAppUtils.\n         getRMWebAppURLWithScheme(getConf()));\n     ClientResponse response \u003d webResource.path(\"ws\").path(\"v1\").path(\"cluster\")\n-        .path(\"sched-conf\").accept(MediaType.APPLICATION_JSON)\n+        .path(\"scheduler-conf\").accept(MediaType.APPLICATION_JSON)\n         .entity(YarnWebServiceUtils.toJson(updateInfo,\n             SchedConfUpdateInfo.class), MediaType.APPLICATION_JSON)\n         .put(ClientResponse.class);\n     if (response !\u003d null) {\n       if (response.getStatus() \u003d\u003d Status.OK.getStatusCode()) {\n         System.out.println(\"Configuration changed successfully.\");\n         return 0;\n       } else {\n         System.err.println(\"Configuration change unsuccessful: \"\n             + response.getEntity(String.class));\n       }\n     } else {\n       System.err.println(\"Configuration change unsuccessful: null response\");\n     }\n     return -1;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Options opts \u003d new Options();\n\n    opts.addOption(\"add\", ADD_QUEUES_OPTION, true,\n        \"Add queues with configurations\");\n    opts.addOption(\"remove\", REMOVE_QUEUES_OPTION, true,\n        \"Remove queues\");\n    opts.addOption(\"update\", UPDATE_QUEUES_OPTION, true,\n        \"Update queue configurations\");\n    opts.addOption(\"global\", GLOBAL_OPTIONS, true,\n        \"Update global scheduler configurations\");\n    opts.addOption(\"h\", HELP_CMD, false, \"Displays help for all commands.\");\n\n    int exitCode \u003d -1;\n    CommandLine parsedCli \u003d null;\n    try {\n      parsedCli \u003d new GnuParser().parse(opts, args);\n    } catch (MissingArgumentException ex) {\n      System.err.println(\"Missing argument for options\");\n      printUsage();\n      return exitCode;\n    }\n\n    if (parsedCli.hasOption(HELP_CMD)) {\n      printUsage();\n      return 0;\n    }\n\n    boolean hasOption \u003d false;\n    SchedConfUpdateInfo updateInfo \u003d new SchedConfUpdateInfo();\n    try {\n      if (parsedCli.hasOption(ADD_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        addQueues(parsedCli.getOptionValue(ADD_QUEUES_OPTION), updateInfo);\n      }\n      if (parsedCli.hasOption(REMOVE_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        removeQueues(parsedCli.getOptionValue(REMOVE_QUEUES_OPTION),\n            updateInfo);\n      }\n      if (parsedCli.hasOption(UPDATE_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        updateQueues(parsedCli.getOptionValue(UPDATE_QUEUES_OPTION),\n            updateInfo);\n      }\n      if (parsedCli.hasOption(GLOBAL_OPTIONS)) {\n        hasOption \u003d true;\n        globalUpdates(parsedCli.getOptionValue(GLOBAL_OPTIONS), updateInfo);\n      }\n    } catch (IllegalArgumentException e) {\n      System.err.println(e.getMessage());\n      return -1;\n    }\n\n    if (!hasOption) {\n      System.err.println(\"Invalid Command Usage: \");\n      printUsage();\n      return -1;\n    }\n\n    Client webServiceClient \u003d Client.create();\n    WebResource webResource \u003d webServiceClient.resource(WebAppUtils.\n        getRMWebAppURLWithScheme(getConf()));\n    ClientResponse response \u003d webResource.path(\"ws\").path(\"v1\").path(\"cluster\")\n        .path(\"scheduler-conf\").accept(MediaType.APPLICATION_JSON)\n        .entity(YarnWebServiceUtils.toJson(updateInfo,\n            SchedConfUpdateInfo.class), MediaType.APPLICATION_JSON)\n        .put(ClientResponse.class);\n    if (response !\u003d null) {\n      if (response.getStatus() \u003d\u003d Status.OK.getStatusCode()) {\n        System.out.println(\"Configuration changed successfully.\");\n        return 0;\n      } else {\n        System.err.println(\"Configuration change unsuccessful: \"\n            + response.getEntity(String.class));\n      }\n    } else {\n      System.err.println(\"Configuration change unsuccessful: null response\");\n    }\n    return -1;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/SchedConfCLI.java",
      "extendedDetails": {}
    },
    "916bdbd6bedbc75000bb74e16c1e2ee692a4912c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5953:Create CLI for changing YARN configurations. (Jonathan Hung via xgong)\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "916bdbd6bedbc75000bb74e16c1e2ee692a4912c",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,81 @@\n+  public int run(String[] args) throws Exception {\n+    Options opts \u003d new Options();\n+\n+    opts.addOption(\"add\", ADD_QUEUES_OPTION, true,\n+        \"Add queues with configurations\");\n+    opts.addOption(\"remove\", REMOVE_QUEUES_OPTION, true,\n+        \"Remove queues\");\n+    opts.addOption(\"update\", UPDATE_QUEUES_OPTION, true,\n+        \"Update queue configurations\");\n+    opts.addOption(\"global\", GLOBAL_OPTIONS, true,\n+        \"Update global scheduler configurations\");\n+    opts.addOption(\"h\", HELP_CMD, false, \"Displays help for all commands.\");\n+\n+    int exitCode \u003d -1;\n+    CommandLine parsedCli \u003d null;\n+    try {\n+      parsedCli \u003d new GnuParser().parse(opts, args);\n+    } catch (MissingArgumentException ex) {\n+      System.err.println(\"Missing argument for options\");\n+      printUsage();\n+      return exitCode;\n+    }\n+\n+    if (parsedCli.hasOption(HELP_CMD)) {\n+      printUsage();\n+      return 0;\n+    }\n+\n+    boolean hasOption \u003d false;\n+    SchedConfUpdateInfo updateInfo \u003d new SchedConfUpdateInfo();\n+    try {\n+      if (parsedCli.hasOption(ADD_QUEUES_OPTION)) {\n+        hasOption \u003d true;\n+        addQueues(parsedCli.getOptionValue(ADD_QUEUES_OPTION), updateInfo);\n+      }\n+      if (parsedCli.hasOption(REMOVE_QUEUES_OPTION)) {\n+        hasOption \u003d true;\n+        removeQueues(parsedCli.getOptionValue(REMOVE_QUEUES_OPTION),\n+            updateInfo);\n+      }\n+      if (parsedCli.hasOption(UPDATE_QUEUES_OPTION)) {\n+        hasOption \u003d true;\n+        updateQueues(parsedCli.getOptionValue(UPDATE_QUEUES_OPTION),\n+            updateInfo);\n+      }\n+      if (parsedCli.hasOption(GLOBAL_OPTIONS)) {\n+        hasOption \u003d true;\n+        globalUpdates(parsedCli.getOptionValue(GLOBAL_OPTIONS), updateInfo);\n+      }\n+    } catch (IllegalArgumentException e) {\n+      System.err.println(e.getMessage());\n+      return -1;\n+    }\n+\n+    if (!hasOption) {\n+      System.err.println(\"Invalid Command Usage: \");\n+      printUsage();\n+      return -1;\n+    }\n+\n+    Client webServiceClient \u003d Client.create();\n+    WebResource webResource \u003d webServiceClient.resource(WebAppUtils.\n+        getRMWebAppURLWithScheme(getConf()));\n+    ClientResponse response \u003d webResource.path(\"ws\").path(\"v1\").path(\"cluster\")\n+        .path(\"sched-conf\").accept(MediaType.APPLICATION_JSON)\n+        .entity(YarnWebServiceUtils.toJson(updateInfo,\n+            SchedConfUpdateInfo.class), MediaType.APPLICATION_JSON)\n+        .put(ClientResponse.class);\n+    if (response !\u003d null) {\n+      if (response.getStatus() \u003d\u003d Status.OK.getStatusCode()) {\n+        System.out.println(\"Configuration changed successfully.\");\n+        return 0;\n+      } else {\n+        System.err.println(\"Configuration change unsuccessful: \"\n+            + response.getEntity(String.class));\n+      }\n+    } else {\n+      System.err.println(\"Configuration change unsuccessful: null response\");\n+    }\n+    return -1;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Options opts \u003d new Options();\n\n    opts.addOption(\"add\", ADD_QUEUES_OPTION, true,\n        \"Add queues with configurations\");\n    opts.addOption(\"remove\", REMOVE_QUEUES_OPTION, true,\n        \"Remove queues\");\n    opts.addOption(\"update\", UPDATE_QUEUES_OPTION, true,\n        \"Update queue configurations\");\n    opts.addOption(\"global\", GLOBAL_OPTIONS, true,\n        \"Update global scheduler configurations\");\n    opts.addOption(\"h\", HELP_CMD, false, \"Displays help for all commands.\");\n\n    int exitCode \u003d -1;\n    CommandLine parsedCli \u003d null;\n    try {\n      parsedCli \u003d new GnuParser().parse(opts, args);\n    } catch (MissingArgumentException ex) {\n      System.err.println(\"Missing argument for options\");\n      printUsage();\n      return exitCode;\n    }\n\n    if (parsedCli.hasOption(HELP_CMD)) {\n      printUsage();\n      return 0;\n    }\n\n    boolean hasOption \u003d false;\n    SchedConfUpdateInfo updateInfo \u003d new SchedConfUpdateInfo();\n    try {\n      if (parsedCli.hasOption(ADD_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        addQueues(parsedCli.getOptionValue(ADD_QUEUES_OPTION), updateInfo);\n      }\n      if (parsedCli.hasOption(REMOVE_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        removeQueues(parsedCli.getOptionValue(REMOVE_QUEUES_OPTION),\n            updateInfo);\n      }\n      if (parsedCli.hasOption(UPDATE_QUEUES_OPTION)) {\n        hasOption \u003d true;\n        updateQueues(parsedCli.getOptionValue(UPDATE_QUEUES_OPTION),\n            updateInfo);\n      }\n      if (parsedCli.hasOption(GLOBAL_OPTIONS)) {\n        hasOption \u003d true;\n        globalUpdates(parsedCli.getOptionValue(GLOBAL_OPTIONS), updateInfo);\n      }\n    } catch (IllegalArgumentException e) {\n      System.err.println(e.getMessage());\n      return -1;\n    }\n\n    if (!hasOption) {\n      System.err.println(\"Invalid Command Usage: \");\n      printUsage();\n      return -1;\n    }\n\n    Client webServiceClient \u003d Client.create();\n    WebResource webResource \u003d webServiceClient.resource(WebAppUtils.\n        getRMWebAppURLWithScheme(getConf()));\n    ClientResponse response \u003d webResource.path(\"ws\").path(\"v1\").path(\"cluster\")\n        .path(\"sched-conf\").accept(MediaType.APPLICATION_JSON)\n        .entity(YarnWebServiceUtils.toJson(updateInfo,\n            SchedConfUpdateInfo.class), MediaType.APPLICATION_JSON)\n        .put(ClientResponse.class);\n    if (response !\u003d null) {\n      if (response.getStatus() \u003d\u003d Status.OK.getStatusCode()) {\n        System.out.println(\"Configuration changed successfully.\");\n        return 0;\n      } else {\n        System.err.println(\"Configuration change unsuccessful: \"\n            + response.getEntity(String.class));\n      }\n    } else {\n      System.err.println(\"Configuration change unsuccessful: null response\");\n    }\n    return -1;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/SchedConfCLI.java"
    }
  }
}