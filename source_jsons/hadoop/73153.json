{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JMXJsonServlet.java",
  "functionName": "listBeans",
  "functionId": "listBeans___jg-JsonGenerator__qry-ObjectName__attribute-String__response-HttpServletResponse",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
  "functionStartLine": 229,
  "functionEndLine": 322,
  "numCommitsSeen": 22,
  "timeTaken": 1046,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "9c83d16c81df608d8fa1075906a7a0b989faef80",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "babd19de331c875a1dffee908617c07c3e1eb31b"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "9c83d16c81df608d8fa1075906a7a0b989faef80": "Ymultichange(Yparameterchange,Ybodychange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "babd19de331c875a1dffee908617c07c3e1eb31b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, \n      HttpServletResponse response) \n  throws IOException {\n    LOG.debug(\"Listing beans for \"+qry);\n    Set\u003cObjectName\u003e names \u003d null;\n    names \u003d mBeanServer.queryNames(qry, null);\n\n    jg.writeArrayFieldStart(\"beans\");\n    Iterator\u003cObjectName\u003e it \u003d names.iterator();\n    while (it.hasNext()) {\n      ObjectName oname \u003d it.next();\n      MBeanInfo minfo;\n      String code \u003d \"\";\n      Object attributeinfo \u003d null;\n      try {\n        minfo \u003d mBeanServer.getMBeanInfo(oname);\n        code \u003d minfo.getClassName();\n        String prs \u003d \"\";\n        try {\n          if (\"org.apache.commons.modeler.BaseModelMBean\".equals(code)) {\n            prs \u003d \"modelerType\";\n            code \u003d (String) mBeanServer.getAttribute(oname, prs);\n          }\n          if (attribute!\u003dnull) {\n            prs \u003d attribute;\n            attributeinfo \u003d mBeanServer.getAttribute(oname, prs);\n          }\n        } catch (AttributeNotFoundException e) {\n          // If the modelerType attribute was not found, the class name is used\n          // instead.\n          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n              + \" threw an exception\", e);\n        } catch (MBeanException e) {\n          // The code inside the attribute getter threw an exception so log it,\n          // and fall back on the class name\n          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n              + \" threw an exception\", e);\n        } catch (RuntimeException e) {\n          // For some reason even with an MBeanException available to them\n          // Runtime exceptionscan still find their way through, so treat them\n          // the same as MBeanException\n          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n              + \" threw an exception\", e);\n        } catch ( ReflectionException e ) {\n          // This happens when the code inside the JMX bean (setter?? from the\n          // java docs) threw an exception, so log it and fall back on the \n          // class name\n          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n              + \" threw an exception\", e);\n        }\n      } catch (InstanceNotFoundException e) {\n        //Ignored for some reason the bean was not found so don\u0027t output it\n        continue;\n      } catch ( IntrospectionException e ) {\n        // This is an internal error, something odd happened with reflection so\n        // log it and don\u0027t output the bean.\n        LOG.error(\"Problem while trying to process JMX query: \" + qry\n            + \" with MBean \" + oname, e);\n        continue;\n      } catch ( ReflectionException e ) {\n        // This happens when the code inside the JMX bean threw an exception, so\n        // log it and don\u0027t output the bean.\n        LOG.error(\"Problem while trying to process JMX query: \" + qry\n            + \" with MBean \" + oname, e);\n        continue;\n      }\n\n      jg.writeStartObject();\n      jg.writeStringField(\"name\", oname.toString());\n      \n      jg.writeStringField(\"modelerType\", code);\n      if ((attribute !\u003d null) \u0026\u0026 (attributeinfo \u003d\u003d null)) {\n        jg.writeStringField(\"result\", \"ERROR\");\n        jg.writeStringField(\"message\", \"No attribute with name \" + attribute\n            + \" was found.\");\n        jg.writeEndObject();\n        jg.writeEndArray();\n        jg.close();\n        response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        return;\n      }\n      \n      if (attribute !\u003d null) {\n        writeAttribute(jg, attribute, attributeinfo);\n      } else {\n        MBeanAttributeInfo attrs[] \u003d minfo.getAttributes();\n        for (int i \u003d 0; i \u003c attrs.length; i++) {\n          writeAttribute(jg, oname, attrs[i]);\n        }\n      }\n      jg.writeEndObject();\n    }\n    jg.writeEndArray();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, \n      HttpServletResponse response) \n  throws IOException {\n    LOG.debug(\"Listing beans for \"+qry);\n    Set\u003cObjectName\u003e names \u003d null;\n    names \u003d mBeanServer.queryNames(qry, null);\n\n    jg.writeArrayFieldStart(\"beans\");\n    Iterator\u003cObjectName\u003e it \u003d names.iterator();\n    while (it.hasNext()) {\n      ObjectName oname \u003d it.next();\n      MBeanInfo minfo;\n      String code \u003d \"\";\n      Object attributeinfo \u003d null;\n      try {\n        minfo \u003d mBeanServer.getMBeanInfo(oname);\n        code \u003d minfo.getClassName();\n        String prs \u003d \"\";\n        try {\n          if (\"org.apache.commons.modeler.BaseModelMBean\".equals(code)) {\n            prs \u003d \"modelerType\";\n            code \u003d (String) mBeanServer.getAttribute(oname, prs);\n          }\n          if (attribute!\u003dnull) {\n            prs \u003d attribute;\n            attributeinfo \u003d mBeanServer.getAttribute(oname, prs);\n          }\n        } catch (AttributeNotFoundException e) {\n          // If the modelerType attribute was not found, the class name is used\n          // instead.\n          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n              + \" threw an exception\", e);\n        } catch (MBeanException e) {\n          // The code inside the attribute getter threw an exception so log it,\n          // and fall back on the class name\n          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n              + \" threw an exception\", e);\n        } catch (RuntimeException e) {\n          // For some reason even with an MBeanException available to them\n          // Runtime exceptionscan still find their way through, so treat them\n          // the same as MBeanException\n          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n              + \" threw an exception\", e);\n        } catch ( ReflectionException e ) {\n          // This happens when the code inside the JMX bean (setter?? from the\n          // java docs) threw an exception, so log it and fall back on the \n          // class name\n          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n              + \" threw an exception\", e);\n        }\n      } catch (InstanceNotFoundException e) {\n        //Ignored for some reason the bean was not found so don\u0027t output it\n        continue;\n      } catch ( IntrospectionException e ) {\n        // This is an internal error, something odd happened with reflection so\n        // log it and don\u0027t output the bean.\n        LOG.error(\"Problem while trying to process JMX query: \" + qry\n            + \" with MBean \" + oname, e);\n        continue;\n      } catch ( ReflectionException e ) {\n        // This happens when the code inside the JMX bean threw an exception, so\n        // log it and don\u0027t output the bean.\n        LOG.error(\"Problem while trying to process JMX query: \" + qry\n            + \" with MBean \" + oname, e);\n        continue;\n      }\n\n      jg.writeStartObject();\n      jg.writeStringField(\"name\", oname.toString());\n      \n      jg.writeStringField(\"modelerType\", code);\n      if ((attribute !\u003d null) \u0026\u0026 (attributeinfo \u003d\u003d null)) {\n        jg.writeStringField(\"result\", \"ERROR\");\n        jg.writeStringField(\"message\", \"No attribute with name \" + attribute\n            + \" was found.\");\n        jg.writeEndObject();\n        jg.writeEndArray();\n        jg.close();\n        response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        return;\n      }\n      \n      if (attribute !\u003d null) {\n        writeAttribute(jg, attribute, attributeinfo);\n      } else {\n        MBeanAttributeInfo attrs[] \u003d minfo.getAttributes();\n        for (int i \u003d 0; i \u003c attrs.length; i++) {\n          writeAttribute(jg, oname, attrs[i]);\n        }\n      }\n      jg.writeEndObject();\n    }\n    jg.writeEndArray();\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java"
      }
    },
    "9c83d16c81df608d8fa1075906a7a0b989faef80": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-7329. Add the capability of getting invividual attribute of a mbean using JMXProxyServlet. (tanping)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1139947 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/06/11 2:52 PM",
      "commitName": "9c83d16c81df608d8fa1075906a7a0b989faef80",
      "commitAuthor": "Tanping Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-7329. Add the capability of getting invividual attribute of a mbean using JMXProxyServlet. (tanping)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1139947 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/06/11 2:52 PM",
          "commitName": "9c83d16c81df608d8fa1075906a7a0b989faef80",
          "commitAuthor": "Tanping Wang",
          "commitDateOld": "12/06/11 3:00 PM",
          "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 13.99,
          "commitsBetweenForRepo": 46,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,65 +1,94 @@\n-  private void listBeans(JsonGenerator jg, ObjectName qry) throws IOException {\n+  private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, \n+      HttpServletResponse response) \n+  throws IOException {\n     LOG.debug(\"Listing beans for \"+qry);\n     Set\u003cObjectName\u003e names \u003d null;\n     names \u003d mBeanServer.queryNames(qry, null);\n \n     jg.writeArrayFieldStart(\"beans\");\n     Iterator\u003cObjectName\u003e it \u003d names.iterator();\n     while (it.hasNext()) {\n       ObjectName oname \u003d it.next();\n       MBeanInfo minfo;\n-      String code;\n+      String code \u003d \"\";\n+      Object attributeinfo \u003d null;\n       try {\n         minfo \u003d mBeanServer.getMBeanInfo(oname);\n         code \u003d minfo.getClassName();\n+        String prs \u003d \"\";\n         try {\n           if (\"org.apache.commons.modeler.BaseModelMBean\".equals(code)) {\n-            code \u003d (String) mBeanServer.getAttribute(oname, \"modelerType\");\n+            prs \u003d \"modelerType\";\n+            code \u003d (String) mBeanServer.getAttribute(oname, prs);\n+          }\n+          if (attribute!\u003dnull) {\n+            prs \u003d attribute;\n+            attributeinfo \u003d mBeanServer.getAttribute(oname, prs);\n           }\n         } catch (AttributeNotFoundException e) {\n-          //Ignored the modelerType attribute was not found, so use the class name instead.\n+          // If the modelerType attribute was not found, the class name is used\n+          // instead.\n+          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n+              + \" threw an exception\", e);\n         } catch (MBeanException e) {\n-          //The code inside the attribute getter threw an exception so log it, and\n-          // fall back on the class name\n-          LOG.error(\"getting attribute modelerType of \"+oname+\" threw an exception\", e);\n+          // The code inside the attribute getter threw an exception so log it,\n+          // and fall back on the class name\n+          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n+              + \" threw an exception\", e);\n         } catch (RuntimeException e) {\n-          //For some reason even with an MBeanException available to them Runtime exceptions\n-          //can still find their way through, so treat them the same as MBeanException\n-          LOG.error(\"getting attribute modelerType of \"+oname+\" threw an exception\", e);\n-        } catch (ReflectionException e) {\n-          //This happens when the code inside the JMX bean (setter?? from the java docs)\n-          //threw an exception, so log it and fall back on the class name\n-          LOG.error(\"getting attribute modelerType of \"+oname+\" threw an exception\", e);\n+          // For some reason even with an MBeanException available to them\n+          // Runtime exceptionscan still find their way through, so treat them\n+          // the same as MBeanException\n+          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n+              + \" threw an exception\", e);\n+        } catch ( ReflectionException e ) {\n+          // This happens when the code inside the JMX bean (setter?? from the\n+          // java docs) threw an exception, so log it and fall back on the \n+          // class name\n+          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n+              + \" threw an exception\", e);\n         }\n       } catch (InstanceNotFoundException e) {\n         //Ignored for some reason the bean was not found so don\u0027t output it\n         continue;\n-      } catch (IntrospectionException e) {\n-        //This is an internal error, something odd happened with reflection so log it and\n-        //don\u0027t output the bean.\n-        LOG.error(\"Problem while trying to process JMX query: \"+qry+\" with MBean \"+oname, e); \n+      } catch ( IntrospectionException e ) {\n+        // This is an internal error, something odd happened with reflection so\n+        // log it and don\u0027t output the bean.\n+        LOG.error(\"Problem while trying to process JMX query: \" + qry\n+            + \" with MBean \" + oname, e);\n         continue;\n-      } catch (ReflectionException e) {\n-        //This happens when the code inside the JMX bean threw an exception, so log it and\n-        //don\u0027t output the bean.\n-        LOG.error(\"Problem while trying to process JMX query: \"+qry+\" with MBean \"+oname, e);\n+      } catch ( ReflectionException e ) {\n+        // This happens when the code inside the JMX bean threw an exception, so\n+        // log it and don\u0027t output the bean.\n+        LOG.error(\"Problem while trying to process JMX query: \" + qry\n+            + \" with MBean \" + oname, e);\n         continue;\n       }\n \n       jg.writeStartObject();\n       jg.writeStringField(\"name\", oname.toString());\n-      // can\u0027t be null - I think\n-\n+      \n       jg.writeStringField(\"modelerType\", code);\n-\n-      MBeanAttributeInfo attrs[] \u003d minfo.getAttributes();\n-      for (int i \u003d 0; i \u003c attrs.length; i++) {\n-        writeAttribute(jg, oname, attrs[i]);\n+      if ((attribute !\u003d null) \u0026\u0026 (attributeinfo \u003d\u003d null)) {\n+        jg.writeStringField(\"result\", \"ERROR\");\n+        jg.writeStringField(\"message\", \"No attribute with name \" + attribute\n+            + \" was found.\");\n+        jg.writeEndObject();\n+        jg.writeEndArray();\n+        jg.close();\n+        response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n+        return;\n       }\n-      //  LOG.error(\"Caught Error writing value \",t);\n-      //  ExceptionUtils.handleThrowable(t);\n-      //}\n+      \n+      if (attribute !\u003d null) {\n+        writeAttribute(jg, attribute, attributeinfo);\n+      } else {\n+        MBeanAttributeInfo attrs[] \u003d minfo.getAttributes();\n+        for (int i \u003d 0; i \u003c attrs.length; i++) {\n+          writeAttribute(jg, oname, attrs[i]);\n+        }\n+      }\n       jg.writeEndObject();\n     }\n     jg.writeEndArray();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, \n      HttpServletResponse response) \n  throws IOException {\n    LOG.debug(\"Listing beans for \"+qry);\n    Set\u003cObjectName\u003e names \u003d null;\n    names \u003d mBeanServer.queryNames(qry, null);\n\n    jg.writeArrayFieldStart(\"beans\");\n    Iterator\u003cObjectName\u003e it \u003d names.iterator();\n    while (it.hasNext()) {\n      ObjectName oname \u003d it.next();\n      MBeanInfo minfo;\n      String code \u003d \"\";\n      Object attributeinfo \u003d null;\n      try {\n        minfo \u003d mBeanServer.getMBeanInfo(oname);\n        code \u003d minfo.getClassName();\n        String prs \u003d \"\";\n        try {\n          if (\"org.apache.commons.modeler.BaseModelMBean\".equals(code)) {\n            prs \u003d \"modelerType\";\n            code \u003d (String) mBeanServer.getAttribute(oname, prs);\n          }\n          if (attribute!\u003dnull) {\n            prs \u003d attribute;\n            attributeinfo \u003d mBeanServer.getAttribute(oname, prs);\n          }\n        } catch (AttributeNotFoundException e) {\n          // If the modelerType attribute was not found, the class name is used\n          // instead.\n          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n              + \" threw an exception\", e);\n        } catch (MBeanException e) {\n          // The code inside the attribute getter threw an exception so log it,\n          // and fall back on the class name\n          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n              + \" threw an exception\", e);\n        } catch (RuntimeException e) {\n          // For some reason even with an MBeanException available to them\n          // Runtime exceptionscan still find their way through, so treat them\n          // the same as MBeanException\n          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n              + \" threw an exception\", e);\n        } catch ( ReflectionException e ) {\n          // This happens when the code inside the JMX bean (setter?? from the\n          // java docs) threw an exception, so log it and fall back on the \n          // class name\n          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n              + \" threw an exception\", e);\n        }\n      } catch (InstanceNotFoundException e) {\n        //Ignored for some reason the bean was not found so don\u0027t output it\n        continue;\n      } catch ( IntrospectionException e ) {\n        // This is an internal error, something odd happened with reflection so\n        // log it and don\u0027t output the bean.\n        LOG.error(\"Problem while trying to process JMX query: \" + qry\n            + \" with MBean \" + oname, e);\n        continue;\n      } catch ( ReflectionException e ) {\n        // This happens when the code inside the JMX bean threw an exception, so\n        // log it and don\u0027t output the bean.\n        LOG.error(\"Problem while trying to process JMX query: \" + qry\n            + \" with MBean \" + oname, e);\n        continue;\n      }\n\n      jg.writeStartObject();\n      jg.writeStringField(\"name\", oname.toString());\n      \n      jg.writeStringField(\"modelerType\", code);\n      if ((attribute !\u003d null) \u0026\u0026 (attributeinfo \u003d\u003d null)) {\n        jg.writeStringField(\"result\", \"ERROR\");\n        jg.writeStringField(\"message\", \"No attribute with name \" + attribute\n            + \" was found.\");\n        jg.writeEndObject();\n        jg.writeEndArray();\n        jg.close();\n        response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        return;\n      }\n      \n      if (attribute !\u003d null) {\n        writeAttribute(jg, attribute, attributeinfo);\n      } else {\n        MBeanAttributeInfo attrs[] \u003d minfo.getAttributes();\n        for (int i \u003d 0; i \u003c attrs.length; i++) {\n          writeAttribute(jg, oname, attrs[i]);\n        }\n      }\n      jg.writeEndObject();\n    }\n    jg.writeEndArray();\n  }",
          "path": "common/src/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
          "extendedDetails": {
            "oldValue": "[jg-JsonGenerator, qry-ObjectName]",
            "newValue": "[jg-JsonGenerator, qry-ObjectName, attribute-String, response-HttpServletResponse]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-7329. Add the capability of getting invividual attribute of a mbean using JMXProxyServlet. (tanping)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1139947 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/06/11 2:52 PM",
          "commitName": "9c83d16c81df608d8fa1075906a7a0b989faef80",
          "commitAuthor": "Tanping Wang",
          "commitDateOld": "12/06/11 3:00 PM",
          "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 13.99,
          "commitsBetweenForRepo": 46,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,65 +1,94 @@\n-  private void listBeans(JsonGenerator jg, ObjectName qry) throws IOException {\n+  private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, \n+      HttpServletResponse response) \n+  throws IOException {\n     LOG.debug(\"Listing beans for \"+qry);\n     Set\u003cObjectName\u003e names \u003d null;\n     names \u003d mBeanServer.queryNames(qry, null);\n \n     jg.writeArrayFieldStart(\"beans\");\n     Iterator\u003cObjectName\u003e it \u003d names.iterator();\n     while (it.hasNext()) {\n       ObjectName oname \u003d it.next();\n       MBeanInfo minfo;\n-      String code;\n+      String code \u003d \"\";\n+      Object attributeinfo \u003d null;\n       try {\n         minfo \u003d mBeanServer.getMBeanInfo(oname);\n         code \u003d minfo.getClassName();\n+        String prs \u003d \"\";\n         try {\n           if (\"org.apache.commons.modeler.BaseModelMBean\".equals(code)) {\n-            code \u003d (String) mBeanServer.getAttribute(oname, \"modelerType\");\n+            prs \u003d \"modelerType\";\n+            code \u003d (String) mBeanServer.getAttribute(oname, prs);\n+          }\n+          if (attribute!\u003dnull) {\n+            prs \u003d attribute;\n+            attributeinfo \u003d mBeanServer.getAttribute(oname, prs);\n           }\n         } catch (AttributeNotFoundException e) {\n-          //Ignored the modelerType attribute was not found, so use the class name instead.\n+          // If the modelerType attribute was not found, the class name is used\n+          // instead.\n+          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n+              + \" threw an exception\", e);\n         } catch (MBeanException e) {\n-          //The code inside the attribute getter threw an exception so log it, and\n-          // fall back on the class name\n-          LOG.error(\"getting attribute modelerType of \"+oname+\" threw an exception\", e);\n+          // The code inside the attribute getter threw an exception so log it,\n+          // and fall back on the class name\n+          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n+              + \" threw an exception\", e);\n         } catch (RuntimeException e) {\n-          //For some reason even with an MBeanException available to them Runtime exceptions\n-          //can still find their way through, so treat them the same as MBeanException\n-          LOG.error(\"getting attribute modelerType of \"+oname+\" threw an exception\", e);\n-        } catch (ReflectionException e) {\n-          //This happens when the code inside the JMX bean (setter?? from the java docs)\n-          //threw an exception, so log it and fall back on the class name\n-          LOG.error(\"getting attribute modelerType of \"+oname+\" threw an exception\", e);\n+          // For some reason even with an MBeanException available to them\n+          // Runtime exceptionscan still find their way through, so treat them\n+          // the same as MBeanException\n+          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n+              + \" threw an exception\", e);\n+        } catch ( ReflectionException e ) {\n+          // This happens when the code inside the JMX bean (setter?? from the\n+          // java docs) threw an exception, so log it and fall back on the \n+          // class name\n+          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n+              + \" threw an exception\", e);\n         }\n       } catch (InstanceNotFoundException e) {\n         //Ignored for some reason the bean was not found so don\u0027t output it\n         continue;\n-      } catch (IntrospectionException e) {\n-        //This is an internal error, something odd happened with reflection so log it and\n-        //don\u0027t output the bean.\n-        LOG.error(\"Problem while trying to process JMX query: \"+qry+\" with MBean \"+oname, e); \n+      } catch ( IntrospectionException e ) {\n+        // This is an internal error, something odd happened with reflection so\n+        // log it and don\u0027t output the bean.\n+        LOG.error(\"Problem while trying to process JMX query: \" + qry\n+            + \" with MBean \" + oname, e);\n         continue;\n-      } catch (ReflectionException e) {\n-        //This happens when the code inside the JMX bean threw an exception, so log it and\n-        //don\u0027t output the bean.\n-        LOG.error(\"Problem while trying to process JMX query: \"+qry+\" with MBean \"+oname, e);\n+      } catch ( ReflectionException e ) {\n+        // This happens when the code inside the JMX bean threw an exception, so\n+        // log it and don\u0027t output the bean.\n+        LOG.error(\"Problem while trying to process JMX query: \" + qry\n+            + \" with MBean \" + oname, e);\n         continue;\n       }\n \n       jg.writeStartObject();\n       jg.writeStringField(\"name\", oname.toString());\n-      // can\u0027t be null - I think\n-\n+      \n       jg.writeStringField(\"modelerType\", code);\n-\n-      MBeanAttributeInfo attrs[] \u003d minfo.getAttributes();\n-      for (int i \u003d 0; i \u003c attrs.length; i++) {\n-        writeAttribute(jg, oname, attrs[i]);\n+      if ((attribute !\u003d null) \u0026\u0026 (attributeinfo \u003d\u003d null)) {\n+        jg.writeStringField(\"result\", \"ERROR\");\n+        jg.writeStringField(\"message\", \"No attribute with name \" + attribute\n+            + \" was found.\");\n+        jg.writeEndObject();\n+        jg.writeEndArray();\n+        jg.close();\n+        response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n+        return;\n       }\n-      //  LOG.error(\"Caught Error writing value \",t);\n-      //  ExceptionUtils.handleThrowable(t);\n-      //}\n+      \n+      if (attribute !\u003d null) {\n+        writeAttribute(jg, attribute, attributeinfo);\n+      } else {\n+        MBeanAttributeInfo attrs[] \u003d minfo.getAttributes();\n+        for (int i \u003d 0; i \u003c attrs.length; i++) {\n+          writeAttribute(jg, oname, attrs[i]);\n+        }\n+      }\n       jg.writeEndObject();\n     }\n     jg.writeEndArray();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void listBeans(JsonGenerator jg, ObjectName qry, String attribute, \n      HttpServletResponse response) \n  throws IOException {\n    LOG.debug(\"Listing beans for \"+qry);\n    Set\u003cObjectName\u003e names \u003d null;\n    names \u003d mBeanServer.queryNames(qry, null);\n\n    jg.writeArrayFieldStart(\"beans\");\n    Iterator\u003cObjectName\u003e it \u003d names.iterator();\n    while (it.hasNext()) {\n      ObjectName oname \u003d it.next();\n      MBeanInfo minfo;\n      String code \u003d \"\";\n      Object attributeinfo \u003d null;\n      try {\n        minfo \u003d mBeanServer.getMBeanInfo(oname);\n        code \u003d minfo.getClassName();\n        String prs \u003d \"\";\n        try {\n          if (\"org.apache.commons.modeler.BaseModelMBean\".equals(code)) {\n            prs \u003d \"modelerType\";\n            code \u003d (String) mBeanServer.getAttribute(oname, prs);\n          }\n          if (attribute!\u003dnull) {\n            prs \u003d attribute;\n            attributeinfo \u003d mBeanServer.getAttribute(oname, prs);\n          }\n        } catch (AttributeNotFoundException e) {\n          // If the modelerType attribute was not found, the class name is used\n          // instead.\n          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n              + \" threw an exception\", e);\n        } catch (MBeanException e) {\n          // The code inside the attribute getter threw an exception so log it,\n          // and fall back on the class name\n          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n              + \" threw an exception\", e);\n        } catch (RuntimeException e) {\n          // For some reason even with an MBeanException available to them\n          // Runtime exceptionscan still find their way through, so treat them\n          // the same as MBeanException\n          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n              + \" threw an exception\", e);\n        } catch ( ReflectionException e ) {\n          // This happens when the code inside the JMX bean (setter?? from the\n          // java docs) threw an exception, so log it and fall back on the \n          // class name\n          LOG.error(\"getting attribute \" + prs + \" of \" + oname\n              + \" threw an exception\", e);\n        }\n      } catch (InstanceNotFoundException e) {\n        //Ignored for some reason the bean was not found so don\u0027t output it\n        continue;\n      } catch ( IntrospectionException e ) {\n        // This is an internal error, something odd happened with reflection so\n        // log it and don\u0027t output the bean.\n        LOG.error(\"Problem while trying to process JMX query: \" + qry\n            + \" with MBean \" + oname, e);\n        continue;\n      } catch ( ReflectionException e ) {\n        // This happens when the code inside the JMX bean threw an exception, so\n        // log it and don\u0027t output the bean.\n        LOG.error(\"Problem while trying to process JMX query: \" + qry\n            + \" with MBean \" + oname, e);\n        continue;\n      }\n\n      jg.writeStartObject();\n      jg.writeStringField(\"name\", oname.toString());\n      \n      jg.writeStringField(\"modelerType\", code);\n      if ((attribute !\u003d null) \u0026\u0026 (attributeinfo \u003d\u003d null)) {\n        jg.writeStringField(\"result\", \"ERROR\");\n        jg.writeStringField(\"message\", \"No attribute with name \" + attribute\n            + \" was found.\");\n        jg.writeEndObject();\n        jg.writeEndArray();\n        jg.close();\n        response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        return;\n      }\n      \n      if (attribute !\u003d null) {\n        writeAttribute(jg, attribute, attributeinfo);\n      } else {\n        MBeanAttributeInfo attrs[] \u003d minfo.getAttributes();\n        for (int i \u003d 0; i \u003c attrs.length; i++) {\n          writeAttribute(jg, oname, attrs[i]);\n        }\n      }\n      jg.writeEndObject();\n    }\n    jg.writeEndArray();\n  }",
          "path": "common/src/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
          "extendedDetails": {}
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void listBeans(JsonGenerator jg, ObjectName qry) throws IOException {\n    LOG.debug(\"Listing beans for \"+qry);\n    Set\u003cObjectName\u003e names \u003d null;\n    names \u003d mBeanServer.queryNames(qry, null);\n\n    jg.writeArrayFieldStart(\"beans\");\n    Iterator\u003cObjectName\u003e it \u003d names.iterator();\n    while (it.hasNext()) {\n      ObjectName oname \u003d it.next();\n      MBeanInfo minfo;\n      String code;\n      try {\n        minfo \u003d mBeanServer.getMBeanInfo(oname);\n        code \u003d minfo.getClassName();\n        try {\n          if (\"org.apache.commons.modeler.BaseModelMBean\".equals(code)) {\n            code \u003d (String) mBeanServer.getAttribute(oname, \"modelerType\");\n          }\n        } catch (AttributeNotFoundException e) {\n          //Ignored the modelerType attribute was not found, so use the class name instead.\n        } catch (MBeanException e) {\n          //The code inside the attribute getter threw an exception so log it, and\n          // fall back on the class name\n          LOG.error(\"getting attribute modelerType of \"+oname+\" threw an exception\", e);\n        } catch (RuntimeException e) {\n          //For some reason even with an MBeanException available to them Runtime exceptions\n          //can still find their way through, so treat them the same as MBeanException\n          LOG.error(\"getting attribute modelerType of \"+oname+\" threw an exception\", e);\n        } catch (ReflectionException e) {\n          //This happens when the code inside the JMX bean (setter?? from the java docs)\n          //threw an exception, so log it and fall back on the class name\n          LOG.error(\"getting attribute modelerType of \"+oname+\" threw an exception\", e);\n        }\n      } catch (InstanceNotFoundException e) {\n        //Ignored for some reason the bean was not found so don\u0027t output it\n        continue;\n      } catch (IntrospectionException e) {\n        //This is an internal error, something odd happened with reflection so log it and\n        //don\u0027t output the bean.\n        LOG.error(\"Problem while trying to process JMX query: \"+qry+\" with MBean \"+oname, e); \n        continue;\n      } catch (ReflectionException e) {\n        //This happens when the code inside the JMX bean threw an exception, so log it and\n        //don\u0027t output the bean.\n        LOG.error(\"Problem while trying to process JMX query: \"+qry+\" with MBean \"+oname, e);\n        continue;\n      }\n\n      jg.writeStartObject();\n      jg.writeStringField(\"name\", oname.toString());\n      // can\u0027t be null - I think\n\n      jg.writeStringField(\"modelerType\", code);\n\n      MBeanAttributeInfo attrs[] \u003d minfo.getAttributes();\n      for (int i \u003d 0; i \u003c attrs.length; i++) {\n        writeAttribute(jg, oname, attrs[i]);\n      }\n      //  LOG.error(\"Caught Error writing value \",t);\n      //  ExceptionUtils.handleThrowable(t);\n      //}\n      jg.writeEndObject();\n    }\n    jg.writeEndArray();\n  }",
      "path": "common/src/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
        "newPath": "common/src/java/org/apache/hadoop/jmx/JMXJsonServlet.java"
      }
    },
    "babd19de331c875a1dffee908617c07c3e1eb31b": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7144. Expose JMX metrics via JSON servlet.\nContributed by Robert Joseph Evans\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1131289 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/11 4:40 PM",
      "commitName": "babd19de331c875a1dffee908617c07c3e1eb31b",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,65 @@\n+  private void listBeans(JsonGenerator jg, ObjectName qry) throws IOException {\n+    LOG.debug(\"Listing beans for \"+qry);\n+    Set\u003cObjectName\u003e names \u003d null;\n+    names \u003d mBeanServer.queryNames(qry, null);\n+\n+    jg.writeArrayFieldStart(\"beans\");\n+    Iterator\u003cObjectName\u003e it \u003d names.iterator();\n+    while (it.hasNext()) {\n+      ObjectName oname \u003d it.next();\n+      MBeanInfo minfo;\n+      String code;\n+      try {\n+        minfo \u003d mBeanServer.getMBeanInfo(oname);\n+        code \u003d minfo.getClassName();\n+        try {\n+          if (\"org.apache.commons.modeler.BaseModelMBean\".equals(code)) {\n+            code \u003d (String) mBeanServer.getAttribute(oname, \"modelerType\");\n+          }\n+        } catch (AttributeNotFoundException e) {\n+          //Ignored the modelerType attribute was not found, so use the class name instead.\n+        } catch (MBeanException e) {\n+          //The code inside the attribute getter threw an exception so log it, and\n+          // fall back on the class name\n+          LOG.error(\"getting attribute modelerType of \"+oname+\" threw an exception\", e);\n+        } catch (RuntimeException e) {\n+          //For some reason even with an MBeanException available to them Runtime exceptions\n+          //can still find their way through, so treat them the same as MBeanException\n+          LOG.error(\"getting attribute modelerType of \"+oname+\" threw an exception\", e);\n+        } catch (ReflectionException e) {\n+          //This happens when the code inside the JMX bean (setter?? from the java docs)\n+          //threw an exception, so log it and fall back on the class name\n+          LOG.error(\"getting attribute modelerType of \"+oname+\" threw an exception\", e);\n+        }\n+      } catch (InstanceNotFoundException e) {\n+        //Ignored for some reason the bean was not found so don\u0027t output it\n+        continue;\n+      } catch (IntrospectionException e) {\n+        //This is an internal error, something odd happened with reflection so log it and\n+        //don\u0027t output the bean.\n+        LOG.error(\"Problem while trying to process JMX query: \"+qry+\" with MBean \"+oname, e); \n+        continue;\n+      } catch (ReflectionException e) {\n+        //This happens when the code inside the JMX bean threw an exception, so log it and\n+        //don\u0027t output the bean.\n+        LOG.error(\"Problem while trying to process JMX query: \"+qry+\" with MBean \"+oname, e);\n+        continue;\n+      }\n+\n+      jg.writeStartObject();\n+      jg.writeStringField(\"name\", oname.toString());\n+      // can\u0027t be null - I think\n+\n+      jg.writeStringField(\"modelerType\", code);\n+\n+      MBeanAttributeInfo attrs[] \u003d minfo.getAttributes();\n+      for (int i \u003d 0; i \u003c attrs.length; i++) {\n+        writeAttribute(jg, oname, attrs[i]);\n+      }\n+      //  LOG.error(\"Caught Error writing value \",t);\n+      //  ExceptionUtils.handleThrowable(t);\n+      //}\n+      jg.writeEndObject();\n+    }\n+    jg.writeEndArray();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void listBeans(JsonGenerator jg, ObjectName qry) throws IOException {\n    LOG.debug(\"Listing beans for \"+qry);\n    Set\u003cObjectName\u003e names \u003d null;\n    names \u003d mBeanServer.queryNames(qry, null);\n\n    jg.writeArrayFieldStart(\"beans\");\n    Iterator\u003cObjectName\u003e it \u003d names.iterator();\n    while (it.hasNext()) {\n      ObjectName oname \u003d it.next();\n      MBeanInfo minfo;\n      String code;\n      try {\n        minfo \u003d mBeanServer.getMBeanInfo(oname);\n        code \u003d minfo.getClassName();\n        try {\n          if (\"org.apache.commons.modeler.BaseModelMBean\".equals(code)) {\n            code \u003d (String) mBeanServer.getAttribute(oname, \"modelerType\");\n          }\n        } catch (AttributeNotFoundException e) {\n          //Ignored the modelerType attribute was not found, so use the class name instead.\n        } catch (MBeanException e) {\n          //The code inside the attribute getter threw an exception so log it, and\n          // fall back on the class name\n          LOG.error(\"getting attribute modelerType of \"+oname+\" threw an exception\", e);\n        } catch (RuntimeException e) {\n          //For some reason even with an MBeanException available to them Runtime exceptions\n          //can still find their way through, so treat them the same as MBeanException\n          LOG.error(\"getting attribute modelerType of \"+oname+\" threw an exception\", e);\n        } catch (ReflectionException e) {\n          //This happens when the code inside the JMX bean (setter?? from the java docs)\n          //threw an exception, so log it and fall back on the class name\n          LOG.error(\"getting attribute modelerType of \"+oname+\" threw an exception\", e);\n        }\n      } catch (InstanceNotFoundException e) {\n        //Ignored for some reason the bean was not found so don\u0027t output it\n        continue;\n      } catch (IntrospectionException e) {\n        //This is an internal error, something odd happened with reflection so log it and\n        //don\u0027t output the bean.\n        LOG.error(\"Problem while trying to process JMX query: \"+qry+\" with MBean \"+oname, e); \n        continue;\n      } catch (ReflectionException e) {\n        //This happens when the code inside the JMX bean threw an exception, so log it and\n        //don\u0027t output the bean.\n        LOG.error(\"Problem while trying to process JMX query: \"+qry+\" with MBean \"+oname, e);\n        continue;\n      }\n\n      jg.writeStartObject();\n      jg.writeStringField(\"name\", oname.toString());\n      // can\u0027t be null - I think\n\n      jg.writeStringField(\"modelerType\", code);\n\n      MBeanAttributeInfo attrs[] \u003d minfo.getAttributes();\n      for (int i \u003d 0; i \u003c attrs.length; i++) {\n        writeAttribute(jg, oname, attrs[i]);\n      }\n      //  LOG.error(\"Caught Error writing value \",t);\n      //  ExceptionUtils.handleThrowable(t);\n      //}\n      jg.writeEndObject();\n    }\n    jg.writeEndArray();\n  }",
      "path": "src/java/org/apache/hadoop/jmx/JMXJsonServlet.java"
    }
  }
}