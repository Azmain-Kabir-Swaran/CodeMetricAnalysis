{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceProfilesManagerImpl.java",
  "functionName": "loadProfiles",
  "functionId": "loadProfiles",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/resource/ResourceProfilesManagerImpl.java",
  "functionStartLine": 86,
  "functionEndLine": 156,
  "numCommitsSeen": 12,
  "timeTaken": 2430,
  "changeHistory": [
    "5cfbad68c0ef6e70d248d4989f9889576d5fcf7e",
    "39240b61a163b127eec385decd30ffd96e694c28",
    "5c4ab4c291fdbd5e60eec060ae0fb2531b50e0da",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
    "a9b4426302e3ac1f20db44a03648597900a92330"
  ],
  "changeHistoryShort": {
    "5cfbad68c0ef6e70d248d4989f9889576d5fcf7e": "Ybodychange",
    "39240b61a163b127eec385decd30ffd96e694c28": "Ybodychange",
    "5c4ab4c291fdbd5e60eec060ae0fb2531b50e0da": "Ybodychange",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": "Ybodychange",
    "a9b4426302e3ac1f20db44a03648597900a92330": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5cfbad68c0ef6e70d248d4989f9889576d5fcf7e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7237. Cleanup usages of ResourceProfiles. (Wangda Tan)\n\nChange-Id: I959c8531bd48231956068cb7d2312f3235549f9c\n(cherry picked from commit 8536db5a7549fa44d9f9e444b41bd5978b5c6ae1)\n",
      "commitDate": "09/10/17 8:36 PM",
      "commitName": "5cfbad68c0ef6e70d248d4989f9889576d5fcf7e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "e490602e9b306d5b8a543b93fb15a7395bb9a03d",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 27.47,
      "commitsBetweenForRepo": 254,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,71 @@\n   private void loadProfiles() throws IOException {\n     profileEnabled \u003d\n         conf.getBoolean(YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n             YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED);\n     if (!profileEnabled) {\n       return;\n     }\n     String sourceFile \u003d\n         conf.get(YarnConfiguration.RM_RESOURCE_PROFILES_SOURCE_FILE,\n             YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_SOURCE_FILE);\n     String resourcesFile \u003d sourceFile;\n     ClassLoader classLoader \u003d Thread.currentThread().getContextClassLoader();\n     if (classLoader \u003d\u003d null) {\n       classLoader \u003d ResourceProfilesManagerImpl.class.getClassLoader();\n     }\n     if (classLoader !\u003d null) {\n       URL tmp \u003d classLoader.getResource(sourceFile);\n       if (tmp !\u003d null) {\n         resourcesFile \u003d tmp.getPath();\n       }\n     }\n     ObjectMapper mapper \u003d new ObjectMapper();\n     Map data \u003d mapper.readValue(new File(resourcesFile), Map.class);\n     Iterator iterator \u003d data.entrySet().iterator();\n     while (iterator.hasNext()) {\n       Map.Entry entry \u003d (Map.Entry) iterator.next();\n       String profileName \u003d entry.getKey().toString();\n       if (profileName.isEmpty()) {\n         throw new IOException(\n             \"Name of resource profile cannot be an empty string\");\n       }\n+\n+      if (profileName.equals(MINIMUM_PROFILE) || profileName.equals(\n+          MAXIMUM_PROFILE)) {\n+        throw new IOException(String.format(\n+            \"profile\u003d{%s, %s} is should not be specified \"\n+                + \"inside %s, they will be loaded from resource-types.xml\",\n+            MINIMUM_PROFILE, MAXIMUM_PROFILE, sourceFile));\n+      }\n       if (entry.getValue() instanceof Map) {\n         Map profileInfo \u003d (Map) entry.getValue();\n         // ensure memory and vcores are specified\n         if (!profileInfo.containsKey(MEMORY)\n             || !profileInfo.containsKey(VCORES)) {\n           throw new IOException(\n               \"Illegal resource profile definition; profile \u0027\" + profileName\n                   + \"\u0027 must contain \u0027\" + MEMORY + \"\u0027 and \u0027\" + VCORES + \"\u0027\");\n         }\n         Resource resource \u003d parseResource(profileInfo);\n         profiles.put(profileName, resource);\n         LOG.info(\n             \"Added profile \u0027\" + profileName + \"\u0027 with resources: \" + resource);\n       }\n     }\n+\n+    // add minimum/maximum profile\n+    profiles.put(MINIMUM_PROFILE,\n+        ResourceUtils.getResourceTypesMinimumAllocation());\n+    profiles.put(MAXIMUM_PROFILE,\n+        ResourceUtils.getResourceTypesMaximumAllocation());\n+\n     // check to make sure mandatory profiles are present\n     for (String profile : MANDATORY_PROFILES) {\n       if (!profiles.containsKey(profile)) {\n         throw new IOException(\n             \"Mandatory profile missing \u0027\" + profile + \"\u0027 missing. \"\n                 + Arrays.toString(MANDATORY_PROFILES) + \" must be present\");\n       }\n     }\n     LOG.info(\"Loaded profiles: \" + profiles.keySet());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadProfiles() throws IOException {\n    profileEnabled \u003d\n        conf.getBoolean(YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n            YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED);\n    if (!profileEnabled) {\n      return;\n    }\n    String sourceFile \u003d\n        conf.get(YarnConfiguration.RM_RESOURCE_PROFILES_SOURCE_FILE,\n            YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_SOURCE_FILE);\n    String resourcesFile \u003d sourceFile;\n    ClassLoader classLoader \u003d Thread.currentThread().getContextClassLoader();\n    if (classLoader \u003d\u003d null) {\n      classLoader \u003d ResourceProfilesManagerImpl.class.getClassLoader();\n    }\n    if (classLoader !\u003d null) {\n      URL tmp \u003d classLoader.getResource(sourceFile);\n      if (tmp !\u003d null) {\n        resourcesFile \u003d tmp.getPath();\n      }\n    }\n    ObjectMapper mapper \u003d new ObjectMapper();\n    Map data \u003d mapper.readValue(new File(resourcesFile), Map.class);\n    Iterator iterator \u003d data.entrySet().iterator();\n    while (iterator.hasNext()) {\n      Map.Entry entry \u003d (Map.Entry) iterator.next();\n      String profileName \u003d entry.getKey().toString();\n      if (profileName.isEmpty()) {\n        throw new IOException(\n            \"Name of resource profile cannot be an empty string\");\n      }\n\n      if (profileName.equals(MINIMUM_PROFILE) || profileName.equals(\n          MAXIMUM_PROFILE)) {\n        throw new IOException(String.format(\n            \"profile\u003d{%s, %s} is should not be specified \"\n                + \"inside %s, they will be loaded from resource-types.xml\",\n            MINIMUM_PROFILE, MAXIMUM_PROFILE, sourceFile));\n      }\n      if (entry.getValue() instanceof Map) {\n        Map profileInfo \u003d (Map) entry.getValue();\n        // ensure memory and vcores are specified\n        if (!profileInfo.containsKey(MEMORY)\n            || !profileInfo.containsKey(VCORES)) {\n          throw new IOException(\n              \"Illegal resource profile definition; profile \u0027\" + profileName\n                  + \"\u0027 must contain \u0027\" + MEMORY + \"\u0027 and \u0027\" + VCORES + \"\u0027\");\n        }\n        Resource resource \u003d parseResource(profileInfo);\n        profiles.put(profileName, resource);\n        LOG.info(\n            \"Added profile \u0027\" + profileName + \"\u0027 with resources: \" + resource);\n      }\n    }\n\n    // add minimum/maximum profile\n    profiles.put(MINIMUM_PROFILE,\n        ResourceUtils.getResourceTypesMinimumAllocation());\n    profiles.put(MAXIMUM_PROFILE,\n        ResourceUtils.getResourceTypesMaximumAllocation());\n\n    // check to make sure mandatory profiles are present\n    for (String profile : MANDATORY_PROFILES) {\n      if (!profiles.containsKey(profile)) {\n        throw new IOException(\n            \"Mandatory profile missing \u0027\" + profile + \"\u0027 missing. \"\n                + Arrays.toString(MANDATORY_PROFILES) + \" must be present\");\n      }\n    }\n    LOG.info(\"Loaded profiles: \" + profiles.keySet());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/resource/ResourceProfilesManagerImpl.java",
      "extendedDetails": {}
    },
    "39240b61a163b127eec385decd30ffd96e694c28": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7043. Cleanup ResourceProfileManager. (wangda)\n\nChange-Id: I463356f37bf1f6a3f1fc3c594c79916e8c0ab913\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "39240b61a163b127eec385decd30ffd96e694c28",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "df3855541af98a3805958f2b5b9db6be705d52ab",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,56 @@\n   private void loadProfiles() throws IOException {\n-    boolean profilesEnabled \u003d\n+    profileEnabled \u003d\n         conf.getBoolean(YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n             YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED);\n-    if (!profilesEnabled) {\n+    if (!profileEnabled) {\n       return;\n     }\n     String sourceFile \u003d\n         conf.get(YarnConfiguration.RM_RESOURCE_PROFILES_SOURCE_FILE,\n             YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_SOURCE_FILE);\n     String resourcesFile \u003d sourceFile;\n     ClassLoader classLoader \u003d Thread.currentThread().getContextClassLoader();\n     if (classLoader \u003d\u003d null) {\n       classLoader \u003d ResourceProfilesManagerImpl.class.getClassLoader();\n     }\n     if (classLoader !\u003d null) {\n       URL tmp \u003d classLoader.getResource(sourceFile);\n       if (tmp !\u003d null) {\n         resourcesFile \u003d tmp.getPath();\n       }\n     }\n     ObjectMapper mapper \u003d new ObjectMapper();\n     Map data \u003d mapper.readValue(new File(resourcesFile), Map.class);\n     Iterator iterator \u003d data.entrySet().iterator();\n     while (iterator.hasNext()) {\n       Map.Entry entry \u003d (Map.Entry) iterator.next();\n       String profileName \u003d entry.getKey().toString();\n       if (profileName.isEmpty()) {\n         throw new IOException(\n             \"Name of resource profile cannot be an empty string\");\n       }\n       if (entry.getValue() instanceof Map) {\n         Map profileInfo \u003d (Map) entry.getValue();\n         // ensure memory and vcores are specified\n-        if (!profileInfo.containsKey(MEMORY) || !profileInfo.containsKey(VCORES)) {\n+        if (!profileInfo.containsKey(MEMORY)\n+            || !profileInfo.containsKey(VCORES)) {\n           throw new IOException(\n               \"Illegal resource profile definition; profile \u0027\" + profileName\n                   + \"\u0027 must contain \u0027\" + MEMORY + \"\u0027 and \u0027\" + VCORES + \"\u0027\");\n         }\n         Resource resource \u003d parseResource(profileInfo);\n         profiles.put(profileName, resource);\n-        LOG.info(\"Added profile \u0027\" + profileName + \"\u0027 with resources \" + resource);\n+        LOG.info(\n+            \"Added profile \u0027\" + profileName + \"\u0027 with resources: \" + resource);\n       }\n     }\n     // check to make sure mandatory profiles are present\n     for (String profile : MANDATORY_PROFILES) {\n       if (!profiles.containsKey(profile)) {\n         throw new IOException(\n             \"Mandatory profile missing \u0027\" + profile + \"\u0027 missing. \"\n                 + Arrays.toString(MANDATORY_PROFILES) + \" must be present\");\n       }\n     }\n-    LOG.info(\"Loaded profiles \" + profiles.keySet());\n+    LOG.info(\"Loaded profiles: \" + profiles.keySet());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadProfiles() throws IOException {\n    profileEnabled \u003d\n        conf.getBoolean(YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n            YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED);\n    if (!profileEnabled) {\n      return;\n    }\n    String sourceFile \u003d\n        conf.get(YarnConfiguration.RM_RESOURCE_PROFILES_SOURCE_FILE,\n            YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_SOURCE_FILE);\n    String resourcesFile \u003d sourceFile;\n    ClassLoader classLoader \u003d Thread.currentThread().getContextClassLoader();\n    if (classLoader \u003d\u003d null) {\n      classLoader \u003d ResourceProfilesManagerImpl.class.getClassLoader();\n    }\n    if (classLoader !\u003d null) {\n      URL tmp \u003d classLoader.getResource(sourceFile);\n      if (tmp !\u003d null) {\n        resourcesFile \u003d tmp.getPath();\n      }\n    }\n    ObjectMapper mapper \u003d new ObjectMapper();\n    Map data \u003d mapper.readValue(new File(resourcesFile), Map.class);\n    Iterator iterator \u003d data.entrySet().iterator();\n    while (iterator.hasNext()) {\n      Map.Entry entry \u003d (Map.Entry) iterator.next();\n      String profileName \u003d entry.getKey().toString();\n      if (profileName.isEmpty()) {\n        throw new IOException(\n            \"Name of resource profile cannot be an empty string\");\n      }\n      if (entry.getValue() instanceof Map) {\n        Map profileInfo \u003d (Map) entry.getValue();\n        // ensure memory and vcores are specified\n        if (!profileInfo.containsKey(MEMORY)\n            || !profileInfo.containsKey(VCORES)) {\n          throw new IOException(\n              \"Illegal resource profile definition; profile \u0027\" + profileName\n                  + \"\u0027 must contain \u0027\" + MEMORY + \"\u0027 and \u0027\" + VCORES + \"\u0027\");\n        }\n        Resource resource \u003d parseResource(profileInfo);\n        profiles.put(profileName, resource);\n        LOG.info(\n            \"Added profile \u0027\" + profileName + \"\u0027 with resources: \" + resource);\n      }\n    }\n    // check to make sure mandatory profiles are present\n    for (String profile : MANDATORY_PROFILES) {\n      if (!profiles.containsKey(profile)) {\n        throw new IOException(\n            \"Mandatory profile missing \u0027\" + profile + \"\u0027 missing. \"\n                + Arrays.toString(MANDATORY_PROFILES) + \" must be present\");\n      }\n    }\n    LOG.info(\"Loaded profiles: \" + profiles.keySet());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/resource/ResourceProfilesManagerImpl.java",
      "extendedDetails": {}
    },
    "5c4ab4c291fdbd5e60eec060ae0fb2531b50e0da": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6935. [YARN-3926] ResourceProfilesManagerImpl.parseResource() has no need of the key parameter\n(Contributed by Manikandan R via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "5c4ab4c291fdbd5e60eec060ae0fb2531b50e0da",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   private void loadProfiles() throws IOException {\n     boolean profilesEnabled \u003d\n         conf.getBoolean(YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n             YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED);\n     if (!profilesEnabled) {\n       return;\n     }\n     String sourceFile \u003d\n         conf.get(YarnConfiguration.RM_RESOURCE_PROFILES_SOURCE_FILE,\n             YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_SOURCE_FILE);\n     String resourcesFile \u003d sourceFile;\n     ClassLoader classLoader \u003d Thread.currentThread().getContextClassLoader();\n     if (classLoader \u003d\u003d null) {\n       classLoader \u003d ResourceProfilesManagerImpl.class.getClassLoader();\n     }\n     if (classLoader !\u003d null) {\n       URL tmp \u003d classLoader.getResource(sourceFile);\n       if (tmp !\u003d null) {\n         resourcesFile \u003d tmp.getPath();\n       }\n     }\n     ObjectMapper mapper \u003d new ObjectMapper();\n     Map data \u003d mapper.readValue(new File(resourcesFile), Map.class);\n     Iterator iterator \u003d data.entrySet().iterator();\n     while (iterator.hasNext()) {\n       Map.Entry entry \u003d (Map.Entry) iterator.next();\n-      String key \u003d entry.getKey().toString();\n-      if (key.isEmpty()) {\n+      String profileName \u003d entry.getKey().toString();\n+      if (profileName.isEmpty()) {\n         throw new IOException(\n             \"Name of resource profile cannot be an empty string\");\n       }\n       if (entry.getValue() instanceof Map) {\n-        Map value \u003d (Map) entry.getValue();\n+        Map profileInfo \u003d (Map) entry.getValue();\n         // ensure memory and vcores are specified\n-        if (!value.containsKey(MEMORY) || !value.containsKey(VCORES)) {\n+        if (!profileInfo.containsKey(MEMORY) || !profileInfo.containsKey(VCORES)) {\n           throw new IOException(\n-              \"Illegal resource profile definition; profile \u0027\" + key\n+              \"Illegal resource profile definition; profile \u0027\" + profileName\n                   + \"\u0027 must contain \u0027\" + MEMORY + \"\u0027 and \u0027\" + VCORES + \"\u0027\");\n         }\n-        Resource resource \u003d parseResource(key, value);\n-        profiles.put(key, resource);\n-        LOG.info(\"Added profile \u0027\" + key + \"\u0027 with resources \" + resource);\n+        Resource resource \u003d parseResource(profileInfo);\n+        profiles.put(profileName, resource);\n+        LOG.info(\"Added profile \u0027\" + profileName + \"\u0027 with resources \" + resource);\n       }\n     }\n     // check to make sure mandatory profiles are present\n     for (String profile : MANDATORY_PROFILES) {\n       if (!profiles.containsKey(profile)) {\n         throw new IOException(\n             \"Mandatory profile missing \u0027\" + profile + \"\u0027 missing. \"\n                 + Arrays.toString(MANDATORY_PROFILES) + \" must be present\");\n       }\n     }\n     LOG.info(\"Loaded profiles \" + profiles.keySet());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadProfiles() throws IOException {\n    boolean profilesEnabled \u003d\n        conf.getBoolean(YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n            YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED);\n    if (!profilesEnabled) {\n      return;\n    }\n    String sourceFile \u003d\n        conf.get(YarnConfiguration.RM_RESOURCE_PROFILES_SOURCE_FILE,\n            YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_SOURCE_FILE);\n    String resourcesFile \u003d sourceFile;\n    ClassLoader classLoader \u003d Thread.currentThread().getContextClassLoader();\n    if (classLoader \u003d\u003d null) {\n      classLoader \u003d ResourceProfilesManagerImpl.class.getClassLoader();\n    }\n    if (classLoader !\u003d null) {\n      URL tmp \u003d classLoader.getResource(sourceFile);\n      if (tmp !\u003d null) {\n        resourcesFile \u003d tmp.getPath();\n      }\n    }\n    ObjectMapper mapper \u003d new ObjectMapper();\n    Map data \u003d mapper.readValue(new File(resourcesFile), Map.class);\n    Iterator iterator \u003d data.entrySet().iterator();\n    while (iterator.hasNext()) {\n      Map.Entry entry \u003d (Map.Entry) iterator.next();\n      String profileName \u003d entry.getKey().toString();\n      if (profileName.isEmpty()) {\n        throw new IOException(\n            \"Name of resource profile cannot be an empty string\");\n      }\n      if (entry.getValue() instanceof Map) {\n        Map profileInfo \u003d (Map) entry.getValue();\n        // ensure memory and vcores are specified\n        if (!profileInfo.containsKey(MEMORY) || !profileInfo.containsKey(VCORES)) {\n          throw new IOException(\n              \"Illegal resource profile definition; profile \u0027\" + profileName\n                  + \"\u0027 must contain \u0027\" + MEMORY + \"\u0027 and \u0027\" + VCORES + \"\u0027\");\n        }\n        Resource resource \u003d parseResource(profileInfo);\n        profiles.put(profileName, resource);\n        LOG.info(\"Added profile \u0027\" + profileName + \"\u0027 with resources \" + resource);\n      }\n    }\n    // check to make sure mandatory profiles are present\n    for (String profile : MANDATORY_PROFILES) {\n      if (!profiles.containsKey(profile)) {\n        throw new IOException(\n            \"Mandatory profile missing \u0027\" + profile + \"\u0027 missing. \"\n                + Arrays.toString(MANDATORY_PROFILES) + \" must be present\");\n      }\n    }\n    LOG.info(\"Loaded profiles \" + profiles.keySet());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/resource/ResourceProfilesManagerImpl.java",
      "extendedDetails": {}
    },
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5587. Add support for resource profiles. (vvasudev via asuresh)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "a9b4426302e3ac1f20db44a03648597900a92330",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,54 @@\n   private void loadProfiles() throws IOException {\n     boolean profilesEnabled \u003d\n         conf.getBoolean(YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n             YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED);\n     if (!profilesEnabled) {\n       return;\n     }\n     String sourceFile \u003d\n         conf.get(YarnConfiguration.RM_RESOURCE_PROFILES_SOURCE_FILE,\n             YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_SOURCE_FILE);\n     String resourcesFile \u003d sourceFile;\n     ClassLoader classLoader \u003d Thread.currentThread().getContextClassLoader();\n     if (classLoader \u003d\u003d null) {\n       classLoader \u003d ResourceProfilesManagerImpl.class.getClassLoader();\n     }\n     if (classLoader !\u003d null) {\n       URL tmp \u003d classLoader.getResource(sourceFile);\n       if (tmp !\u003d null) {\n         resourcesFile \u003d tmp.getPath();\n       }\n     }\n     ObjectMapper mapper \u003d new ObjectMapper();\n     Map data \u003d mapper.readValue(new File(resourcesFile), Map.class);\n     Iterator iterator \u003d data.entrySet().iterator();\n     while (iterator.hasNext()) {\n       Map.Entry entry \u003d (Map.Entry) iterator.next();\n       String key \u003d entry.getKey().toString();\n+      if (key.isEmpty()) {\n+        throw new IOException(\n+            \"Name of resource profile cannot be an empty string\");\n+      }\n       if (entry.getValue() instanceof Map) {\n         Map value \u003d (Map) entry.getValue();\n         // ensure memory and vcores are specified\n         if (!value.containsKey(MEMORY) || !value.containsKey(VCORES)) {\n           throw new IOException(\n               \"Illegal resource profile definition; profile \u0027\" + key\n                   + \"\u0027 must contain \u0027\" + MEMORY + \"\u0027 and \u0027\" + VCORES + \"\u0027\");\n         }\n         Resource resource \u003d parseResource(key, value);\n         profiles.put(key, resource);\n         LOG.info(\"Added profile \u0027\" + key + \"\u0027 with resources \" + resource);\n       }\n     }\n     // check to make sure mandatory profiles are present\n     for (String profile : MANDATORY_PROFILES) {\n       if (!profiles.containsKey(profile)) {\n         throw new IOException(\n             \"Mandatory profile missing \u0027\" + profile + \"\u0027 missing. \"\n                 + Arrays.toString(MANDATORY_PROFILES) + \" must be present\");\n       }\n     }\n     LOG.info(\"Loaded profiles \" + profiles.keySet());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadProfiles() throws IOException {\n    boolean profilesEnabled \u003d\n        conf.getBoolean(YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n            YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED);\n    if (!profilesEnabled) {\n      return;\n    }\n    String sourceFile \u003d\n        conf.get(YarnConfiguration.RM_RESOURCE_PROFILES_SOURCE_FILE,\n            YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_SOURCE_FILE);\n    String resourcesFile \u003d sourceFile;\n    ClassLoader classLoader \u003d Thread.currentThread().getContextClassLoader();\n    if (classLoader \u003d\u003d null) {\n      classLoader \u003d ResourceProfilesManagerImpl.class.getClassLoader();\n    }\n    if (classLoader !\u003d null) {\n      URL tmp \u003d classLoader.getResource(sourceFile);\n      if (tmp !\u003d null) {\n        resourcesFile \u003d tmp.getPath();\n      }\n    }\n    ObjectMapper mapper \u003d new ObjectMapper();\n    Map data \u003d mapper.readValue(new File(resourcesFile), Map.class);\n    Iterator iterator \u003d data.entrySet().iterator();\n    while (iterator.hasNext()) {\n      Map.Entry entry \u003d (Map.Entry) iterator.next();\n      String key \u003d entry.getKey().toString();\n      if (key.isEmpty()) {\n        throw new IOException(\n            \"Name of resource profile cannot be an empty string\");\n      }\n      if (entry.getValue() instanceof Map) {\n        Map value \u003d (Map) entry.getValue();\n        // ensure memory and vcores are specified\n        if (!value.containsKey(MEMORY) || !value.containsKey(VCORES)) {\n          throw new IOException(\n              \"Illegal resource profile definition; profile \u0027\" + key\n                  + \"\u0027 must contain \u0027\" + MEMORY + \"\u0027 and \u0027\" + VCORES + \"\u0027\");\n        }\n        Resource resource \u003d parseResource(key, value);\n        profiles.put(key, resource);\n        LOG.info(\"Added profile \u0027\" + key + \"\u0027 with resources \" + resource);\n      }\n    }\n    // check to make sure mandatory profiles are present\n    for (String profile : MANDATORY_PROFILES) {\n      if (!profiles.containsKey(profile)) {\n        throw new IOException(\n            \"Mandatory profile missing \u0027\" + profile + \"\u0027 missing. \"\n                + Arrays.toString(MANDATORY_PROFILES) + \" must be present\");\n      }\n    }\n    LOG.info(\"Loaded profiles \" + profiles.keySet());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/resource/ResourceProfilesManagerImpl.java",
      "extendedDetails": {}
    },
    "a9b4426302e3ac1f20db44a03648597900a92330": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5707. Add manager class for resource profiles. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "a9b4426302e3ac1f20db44a03648597900a92330",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,50 @@\n+  private void loadProfiles() throws IOException {\n+    boolean profilesEnabled \u003d\n+        conf.getBoolean(YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n+            YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED);\n+    if (!profilesEnabled) {\n+      return;\n+    }\n+    String sourceFile \u003d\n+        conf.get(YarnConfiguration.RM_RESOURCE_PROFILES_SOURCE_FILE,\n+            YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_SOURCE_FILE);\n+    String resourcesFile \u003d sourceFile;\n+    ClassLoader classLoader \u003d Thread.currentThread().getContextClassLoader();\n+    if (classLoader \u003d\u003d null) {\n+      classLoader \u003d ResourceProfilesManagerImpl.class.getClassLoader();\n+    }\n+    if (classLoader !\u003d null) {\n+      URL tmp \u003d classLoader.getResource(sourceFile);\n+      if (tmp !\u003d null) {\n+        resourcesFile \u003d tmp.getPath();\n+      }\n+    }\n+    ObjectMapper mapper \u003d new ObjectMapper();\n+    Map data \u003d mapper.readValue(new File(resourcesFile), Map.class);\n+    Iterator iterator \u003d data.entrySet().iterator();\n+    while (iterator.hasNext()) {\n+      Map.Entry entry \u003d (Map.Entry) iterator.next();\n+      String key \u003d entry.getKey().toString();\n+      if (entry.getValue() instanceof Map) {\n+        Map value \u003d (Map) entry.getValue();\n+        // ensure memory and vcores are specified\n+        if (!value.containsKey(MEMORY) || !value.containsKey(VCORES)) {\n+          throw new IOException(\n+              \"Illegal resource profile definition; profile \u0027\" + key\n+                  + \"\u0027 must contain \u0027\" + MEMORY + \"\u0027 and \u0027\" + VCORES + \"\u0027\");\n+        }\n+        Resource resource \u003d parseResource(key, value);\n+        profiles.put(key, resource);\n+        LOG.info(\"Added profile \u0027\" + key + \"\u0027 with resources \" + resource);\n+      }\n+    }\n+    // check to make sure mandatory profiles are present\n+    for (String profile : MANDATORY_PROFILES) {\n+      if (!profiles.containsKey(profile)) {\n+        throw new IOException(\n+            \"Mandatory profile missing \u0027\" + profile + \"\u0027 missing. \"\n+                + Arrays.toString(MANDATORY_PROFILES) + \" must be present\");\n+      }\n+    }\n+    LOG.info(\"Loaded profiles \" + profiles.keySet());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadProfiles() throws IOException {\n    boolean profilesEnabled \u003d\n        conf.getBoolean(YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n            YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED);\n    if (!profilesEnabled) {\n      return;\n    }\n    String sourceFile \u003d\n        conf.get(YarnConfiguration.RM_RESOURCE_PROFILES_SOURCE_FILE,\n            YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_SOURCE_FILE);\n    String resourcesFile \u003d sourceFile;\n    ClassLoader classLoader \u003d Thread.currentThread().getContextClassLoader();\n    if (classLoader \u003d\u003d null) {\n      classLoader \u003d ResourceProfilesManagerImpl.class.getClassLoader();\n    }\n    if (classLoader !\u003d null) {\n      URL tmp \u003d classLoader.getResource(sourceFile);\n      if (tmp !\u003d null) {\n        resourcesFile \u003d tmp.getPath();\n      }\n    }\n    ObjectMapper mapper \u003d new ObjectMapper();\n    Map data \u003d mapper.readValue(new File(resourcesFile), Map.class);\n    Iterator iterator \u003d data.entrySet().iterator();\n    while (iterator.hasNext()) {\n      Map.Entry entry \u003d (Map.Entry) iterator.next();\n      String key \u003d entry.getKey().toString();\n      if (entry.getValue() instanceof Map) {\n        Map value \u003d (Map) entry.getValue();\n        // ensure memory and vcores are specified\n        if (!value.containsKey(MEMORY) || !value.containsKey(VCORES)) {\n          throw new IOException(\n              \"Illegal resource profile definition; profile \u0027\" + key\n                  + \"\u0027 must contain \u0027\" + MEMORY + \"\u0027 and \u0027\" + VCORES + \"\u0027\");\n        }\n        Resource resource \u003d parseResource(key, value);\n        profiles.put(key, resource);\n        LOG.info(\"Added profile \u0027\" + key + \"\u0027 with resources \" + resource);\n      }\n    }\n    // check to make sure mandatory profiles are present\n    for (String profile : MANDATORY_PROFILES) {\n      if (!profiles.containsKey(profile)) {\n        throw new IOException(\n            \"Mandatory profile missing \u0027\" + profile + \"\u0027 missing. \"\n                + Arrays.toString(MANDATORY_PROFILES) + \" must be present\");\n      }\n    }\n    LOG.info(\"Loaded profiles \" + profiles.keySet());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/resource/ResourceProfilesManagerImpl.java"
    }
  }
}