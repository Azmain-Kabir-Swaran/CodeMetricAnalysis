{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceMaster.java",
  "functionName": "recordTokensForContainers",
  "functionId": "recordTokensForContainers",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
  "functionStartLine": 149,
  "functionEndLine": 168,
  "numCommitsSeen": 11,
  "timeTaken": 1393,
  "changeHistory": [
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
    "d30d57828fddaa8667de49af879cde999907c7f6"
  ],
  "changeHistoryShort": {
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1": "Ymultichange(Ymodifierchange,Ybodychange)",
    "d30d57828fddaa8667de49af879cde999907c7f6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-7996. Allow user supplied Docker client configurations with YARN native services. Contributed by Shane Kumpf\n",
      "commitDate": "17/04/18 6:57 AM",
      "commitName": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-7996. Allow user supplied Docker client configurations with YARN native services. Contributed by Shane Kumpf\n",
          "commitDate": "17/04/18 6:57 AM",
          "commitName": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "19/12/17 4:14 PM",
          "commitNameOld": "41b581012a83a17db785343362c718363e13e8f5",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 118.57,
          "commitsBetweenForRepo": 826,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-  private ByteBuffer recordTokensForContainers() throws IOException {\n+  protected ByteBuffer recordTokensForContainers() throws IOException {\n     Credentials copy \u003d new Credentials(UserGroupInformation.getCurrentUser()\n         .getCredentials());\n-    DataOutputBuffer dob \u003d new DataOutputBuffer();\n-    try {\n-      copy.writeTokenStorageToStream(dob);\n-    } finally {\n-      dob.close();\n-    }\n     // Now remove the AM-\u003eRM token so that task containers cannot access it.\n     Iterator\u003cToken\u003c?\u003e\u003e iter \u003d copy.getAllTokens().iterator();\n     while (iter.hasNext()) {\n       Token\u003c?\u003e token \u003d iter.next();\n       LOG.info(token.toString());\n       if (token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {\n         iter.remove();\n       }\n     }\n+    DataOutputBuffer dob \u003d new DataOutputBuffer();\n+    try {\n+      copy.writeTokenStorageToStream(dob);\n+    } finally {\n+      dob.close();\n+    }\n     return ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected ByteBuffer recordTokensForContainers() throws IOException {\n    Credentials copy \u003d new Credentials(UserGroupInformation.getCurrentUser()\n        .getCredentials());\n    // Now remove the AM-\u003eRM token so that task containers cannot access it.\n    Iterator\u003cToken\u003c?\u003e\u003e iter \u003d copy.getAllTokens().iterator();\n    while (iter.hasNext()) {\n      Token\u003c?\u003e token \u003d iter.next();\n      LOG.info(token.toString());\n      if (token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {\n        iter.remove();\n      }\n    }\n    DataOutputBuffer dob \u003d new DataOutputBuffer();\n    try {\n      copy.writeTokenStorageToStream(dob);\n    } finally {\n      dob.close();\n    }\n    return ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7996. Allow user supplied Docker client configurations with YARN native services. Contributed by Shane Kumpf\n",
          "commitDate": "17/04/18 6:57 AM",
          "commitName": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "19/12/17 4:14 PM",
          "commitNameOld": "41b581012a83a17db785343362c718363e13e8f5",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 118.57,
          "commitsBetweenForRepo": 826,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-  private ByteBuffer recordTokensForContainers() throws IOException {\n+  protected ByteBuffer recordTokensForContainers() throws IOException {\n     Credentials copy \u003d new Credentials(UserGroupInformation.getCurrentUser()\n         .getCredentials());\n-    DataOutputBuffer dob \u003d new DataOutputBuffer();\n-    try {\n-      copy.writeTokenStorageToStream(dob);\n-    } finally {\n-      dob.close();\n-    }\n     // Now remove the AM-\u003eRM token so that task containers cannot access it.\n     Iterator\u003cToken\u003c?\u003e\u003e iter \u003d copy.getAllTokens().iterator();\n     while (iter.hasNext()) {\n       Token\u003c?\u003e token \u003d iter.next();\n       LOG.info(token.toString());\n       if (token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {\n         iter.remove();\n       }\n     }\n+    DataOutputBuffer dob \u003d new DataOutputBuffer();\n+    try {\n+      copy.writeTokenStorageToStream(dob);\n+    } finally {\n+      dob.close();\n+    }\n     return ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected ByteBuffer recordTokensForContainers() throws IOException {\n    Credentials copy \u003d new Credentials(UserGroupInformation.getCurrentUser()\n        .getCredentials());\n    // Now remove the AM-\u003eRM token so that task containers cannot access it.\n    Iterator\u003cToken\u003c?\u003e\u003e iter \u003d copy.getAllTokens().iterator();\n    while (iter.hasNext()) {\n      Token\u003c?\u003e token \u003d iter.next();\n      LOG.info(token.toString());\n      if (token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {\n        iter.remove();\n      }\n    }\n    DataOutputBuffer dob \u003d new DataOutputBuffer();\n    try {\n      copy.writeTokenStorageToStream(dob);\n    } finally {\n      dob.close();\n    }\n    return ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
          "extendedDetails": {}
        }
      ]
    },
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,20 @@\n+  private ByteBuffer recordTokensForContainers() throws IOException {\n+    Credentials copy \u003d new Credentials(UserGroupInformation.getCurrentUser()\n+        .getCredentials());\n+    DataOutputBuffer dob \u003d new DataOutputBuffer();\n+    try {\n+      copy.writeTokenStorageToStream(dob);\n+    } finally {\n+      dob.close();\n+    }\n+    // Now remove the AM-\u003eRM token so that task containers cannot access it.\n+    Iterator\u003cToken\u003c?\u003e\u003e iter \u003d copy.getAllTokens().iterator();\n+    while (iter.hasNext()) {\n+      Token\u003c?\u003e token \u003d iter.next();\n+      LOG.info(token.toString());\n+      if (token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {\n+        iter.remove();\n+      }\n+    }\n+    return ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ByteBuffer recordTokensForContainers() throws IOException {\n    Credentials copy \u003d new Credentials(UserGroupInformation.getCurrentUser()\n        .getCredentials());\n    DataOutputBuffer dob \u003d new DataOutputBuffer();\n    try {\n      copy.writeTokenStorageToStream(dob);\n    } finally {\n      dob.close();\n    }\n    // Now remove the AM-\u003eRM token so that task containers cannot access it.\n    Iterator\u003cToken\u003c?\u003e\u003e iter \u003d copy.getAllTokens().iterator();\n    while (iter.hasNext()) {\n      Token\u003c?\u003e token \u003d iter.next();\n      LOG.info(token.toString());\n      if (token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {\n        iter.remove();\n      }\n    }\n    return ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java"
    }
  }
}