{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceManager.java",
  "functionName": "createApplicationMasterService",
  "functionId": "createApplicationMasterService",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
  "functionStartLine": 1442,
  "functionEndLine": 1461,
  "numCommitsSeen": 227,
  "timeTaken": 11680,
  "changeHistory": [
    "a48a0cc7fd8e7ac1c07b260e6078077824f27c35",
    "10be45986cdf86a89055065b752959bd6369d54f",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
    "f0ac18d001d97914a9ee810b1fab56c5cebff830",
    "341888a0aa23f24458b4e6e34868794b9735c06a",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "fe7711df98b9dd16259f6534e8461a29f24caadc",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "a48a0cc7fd8e7ac1c07b260e6078077824f27c35": "Ybodychange",
    "10be45986cdf86a89055065b752959bd6369d54f": "Ybodychange",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": "Ybodychange",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": "Ybodychange",
    "f0ac18d001d97914a9ee810b1fab56c5cebff830": "Ybodychange",
    "341888a0aa23f24458b4e6e34868794b9735c06a": "Ybodychange",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "fe7711df98b9dd16259f6534e8461a29f24caadc": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a48a0cc7fd8e7ac1c07b260e6078077824f27c35": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8606. Opportunistic scheduling does not work post RM failover. Contributed by Bibin A Chundatt.\n",
      "commitDate": "31/07/18 11:47 PM",
      "commitName": "a48a0cc7fd8e7ac1c07b260e6078077824f27c35",
      "commitAuthor": "Sunil G",
      "commitDateOld": "26/06/18 2:34 PM",
      "commitNameOld": "b69ba0f3307a90500aeb0c5db9e582fcda60b501",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 35.38,
      "commitsBetweenForRepo": 229,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,20 @@\n   protected ApplicationMasterService createApplicationMasterService() {\n     Configuration config \u003d this.rmContext.getYarnConfiguration();\n-    if (YarnConfiguration.isOpportunisticContainerAllocationEnabled(config)\n-        || YarnConfiguration.isDistSchedulingEnabled(config)) {\n+    if (isOpportunisticSchedulingEnabled(conf)) {\n       if (YarnConfiguration.isDistSchedulingEnabled(config) \u0026\u0026\n           !YarnConfiguration\n               .isOpportunisticContainerAllocationEnabled(config)) {\n         throw new YarnRuntimeException(\n             \"Invalid parameters: opportunistic container allocation has to \" +\n                 \"be enabled when distributed scheduling is enabled.\");\n       }\n       OpportunisticContainerAllocatorAMService\n           oppContainerAllocatingAMService \u003d\n           new OpportunisticContainerAllocatorAMService(this.rmContext,\n               scheduler);\n-      EventDispatcher oppContainerAllocEventDispatcher \u003d\n-          new EventDispatcher(oppContainerAllocatingAMService,\n-              OpportunisticContainerAllocatorAMService.class.getName());\n-      // Add an event dispatcher for the\n-      // OpportunisticContainerAllocatorAMService to handle node\n-      // additions, updates and removals. Since the SchedulerEvent is currently\n-      // a super set of theses, we register interest for it.\n-      addService(oppContainerAllocEventDispatcher);\n-      rmDispatcher.register(SchedulerEventType.class,\n-          oppContainerAllocEventDispatcher);\n       this.rmContext.setContainerQueueLimitCalculator(\n           oppContainerAllocatingAMService.getNodeManagerQueueLimitCalculator());\n       return oppContainerAllocatingAMService;\n     }\n     return new ApplicationMasterService(this.rmContext, scheduler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ApplicationMasterService createApplicationMasterService() {\n    Configuration config \u003d this.rmContext.getYarnConfiguration();\n    if (isOpportunisticSchedulingEnabled(conf)) {\n      if (YarnConfiguration.isDistSchedulingEnabled(config) \u0026\u0026\n          !YarnConfiguration\n              .isOpportunisticContainerAllocationEnabled(config)) {\n        throw new YarnRuntimeException(\n            \"Invalid parameters: opportunistic container allocation has to \" +\n                \"be enabled when distributed scheduling is enabled.\");\n      }\n      OpportunisticContainerAllocatorAMService\n          oppContainerAllocatingAMService \u003d\n          new OpportunisticContainerAllocatorAMService(this.rmContext,\n              scheduler);\n      this.rmContext.setContainerQueueLimitCalculator(\n          oppContainerAllocatingAMService.getNodeManagerQueueLimitCalculator());\n      return oppContainerAllocatingAMService;\n    }\n    return new ApplicationMasterService(this.rmContext, scheduler);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "10be45986cdf86a89055065b752959bd6369d54f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5486. Update OpportunisticContainerAllocatorAMService::allocate method to handle OPPORTUNISTIC container requests. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "29/09/16 3:11 PM",
      "commitName": "10be45986cdf86a89055065b752959bd6369d54f",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "29/09/16 7:00 AM",
      "commitNameOld": "2ae5a3a5bf5ea355370469a53eeccff0b5220081",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,31 @@\n   protected ApplicationMasterService createApplicationMasterService() {\n     Configuration config \u003d this.rmContext.getYarnConfiguration();\n     if (YarnConfiguration.isOpportunisticContainerAllocationEnabled(config)\n         || YarnConfiguration.isDistSchedulingEnabled(config)) {\n+      if (YarnConfiguration.isDistSchedulingEnabled(config) \u0026\u0026\n+          !YarnConfiguration\n+              .isOpportunisticContainerAllocationEnabled(config)) {\n+        throw new YarnRuntimeException(\n+            \"Invalid parameters: opportunistic container allocation has to \" +\n+                \"be enabled when distributed scheduling is enabled.\");\n+      }\n       OpportunisticContainerAllocatorAMService\n           oppContainerAllocatingAMService \u003d\n           new OpportunisticContainerAllocatorAMService(this.rmContext,\n               scheduler);\n       EventDispatcher oppContainerAllocEventDispatcher \u003d\n           new EventDispatcher(oppContainerAllocatingAMService,\n               OpportunisticContainerAllocatorAMService.class.getName());\n       // Add an event dispatcher for the\n       // OpportunisticContainerAllocatorAMService to handle node\n-      // updates/additions and removals.\n-      // Since the SchedulerEvent is currently a super set of theses,\n-      // we register interest for it..\n+      // additions, updates and removals. Since the SchedulerEvent is currently\n+      // a super set of theses, we register interest for it.\n       addService(oppContainerAllocEventDispatcher);\n       rmDispatcher.register(SchedulerEventType.class,\n           oppContainerAllocEventDispatcher);\n       this.rmContext.setContainerQueueLimitCalculator(\n           oppContainerAllocatingAMService.getNodeManagerQueueLimitCalculator());\n       return oppContainerAllocatingAMService;\n     }\n     return new ApplicationMasterService(this.rmContext, scheduler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ApplicationMasterService createApplicationMasterService() {\n    Configuration config \u003d this.rmContext.getYarnConfiguration();\n    if (YarnConfiguration.isOpportunisticContainerAllocationEnabled(config)\n        || YarnConfiguration.isDistSchedulingEnabled(config)) {\n      if (YarnConfiguration.isDistSchedulingEnabled(config) \u0026\u0026\n          !YarnConfiguration\n              .isOpportunisticContainerAllocationEnabled(config)) {\n        throw new YarnRuntimeException(\n            \"Invalid parameters: opportunistic container allocation has to \" +\n                \"be enabled when distributed scheduling is enabled.\");\n      }\n      OpportunisticContainerAllocatorAMService\n          oppContainerAllocatingAMService \u003d\n          new OpportunisticContainerAllocatorAMService(this.rmContext,\n              scheduler);\n      EventDispatcher oppContainerAllocEventDispatcher \u003d\n          new EventDispatcher(oppContainerAllocatingAMService,\n              OpportunisticContainerAllocatorAMService.class.getName());\n      // Add an event dispatcher for the\n      // OpportunisticContainerAllocatorAMService to handle node\n      // additions, updates and removals. Since the SchedulerEvent is currently\n      // a super set of theses, we register interest for it.\n      addService(oppContainerAllocEventDispatcher);\n      rmDispatcher.register(SchedulerEventType.class,\n          oppContainerAllocEventDispatcher);\n      this.rmContext.setContainerQueueLimitCalculator(\n          oppContainerAllocatingAMService.getNodeManagerQueueLimitCalculator());\n      return oppContainerAllocatingAMService;\n    }\n    return new ApplicationMasterService(this.rmContext, scheduler);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
      "commitDate": "09/08/16 12:42 AM",
      "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "31/07/16 11:48 AM",
      "commitNameOld": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 8.54,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,25 @@\n   protected ApplicationMasterService createApplicationMasterService() {\n-    if (this.rmContext.getYarnConfiguration().getBoolean(\n-        YarnConfiguration.DIST_SCHEDULING_ENABLED,\n-        YarnConfiguration.DIST_SCHEDULING_ENABLED_DEFAULT)) {\n-      DistributedSchedulingAMService distributedSchedulingService \u003d new\n-          DistributedSchedulingAMService(this.rmContext, scheduler);\n-      EventDispatcher distSchedulerEventDispatcher \u003d\n-          new EventDispatcher(distributedSchedulingService,\n-              DistributedSchedulingAMService.class.getName());\n-      // Add an event dispatcher for the DistributedSchedulingAMService\n-      // to handle node updates/additions and removals.\n+    Configuration config \u003d this.rmContext.getYarnConfiguration();\n+    if (YarnConfiguration.isOpportunisticContainerAllocationEnabled(config)\n+        || YarnConfiguration.isDistSchedulingEnabled(config)) {\n+      OpportunisticContainerAllocatorAMService\n+          oppContainerAllocatingAMService \u003d\n+          new OpportunisticContainerAllocatorAMService(this.rmContext,\n+              scheduler);\n+      EventDispatcher oppContainerAllocEventDispatcher \u003d\n+          new EventDispatcher(oppContainerAllocatingAMService,\n+              OpportunisticContainerAllocatorAMService.class.getName());\n+      // Add an event dispatcher for the\n+      // OpportunisticContainerAllocatorAMService to handle node\n+      // updates/additions and removals.\n       // Since the SchedulerEvent is currently a super set of theses,\n       // we register interest for it..\n-      addService(distSchedulerEventDispatcher);\n+      addService(oppContainerAllocEventDispatcher);\n       rmDispatcher.register(SchedulerEventType.class,\n-          distSchedulerEventDispatcher);\n+          oppContainerAllocEventDispatcher);\n       this.rmContext.setContainerQueueLimitCalculator(\n-          distributedSchedulingService.getNodeManagerQueueLimitCalculator());\n-      return distributedSchedulingService;\n+          oppContainerAllocatingAMService.getNodeManagerQueueLimitCalculator());\n+      return oppContainerAllocatingAMService;\n     }\n     return new ApplicationMasterService(this.rmContext, scheduler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ApplicationMasterService createApplicationMasterService() {\n    Configuration config \u003d this.rmContext.getYarnConfiguration();\n    if (YarnConfiguration.isOpportunisticContainerAllocationEnabled(config)\n        || YarnConfiguration.isDistSchedulingEnabled(config)) {\n      OpportunisticContainerAllocatorAMService\n          oppContainerAllocatingAMService \u003d\n          new OpportunisticContainerAllocatorAMService(this.rmContext,\n              scheduler);\n      EventDispatcher oppContainerAllocEventDispatcher \u003d\n          new EventDispatcher(oppContainerAllocatingAMService,\n              OpportunisticContainerAllocatorAMService.class.getName());\n      // Add an event dispatcher for the\n      // OpportunisticContainerAllocatorAMService to handle node\n      // updates/additions and removals.\n      // Since the SchedulerEvent is currently a super set of theses,\n      // we register interest for it..\n      addService(oppContainerAllocEventDispatcher);\n      rmDispatcher.register(SchedulerEventType.class,\n          oppContainerAllocEventDispatcher);\n      this.rmContext.setContainerQueueLimitCalculator(\n          oppContainerAllocatingAMService.getNodeManagerQueueLimitCalculator());\n      return oppContainerAllocatingAMService;\n    }\n    return new ApplicationMasterService(this.rmContext, scheduler);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "31/07/16 11:48 AM",
      "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "1ff6833bbacf5c4eeaff5e70553ac083a691bb21",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 21.13,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   protected ApplicationMasterService createApplicationMasterService() {\n     if (this.rmContext.getYarnConfiguration().getBoolean(\n         YarnConfiguration.DIST_SCHEDULING_ENABLED,\n         YarnConfiguration.DIST_SCHEDULING_ENABLED_DEFAULT)) {\n-      DistributedSchedulingService distributedSchedulingService \u003d new\n-          DistributedSchedulingService(this.rmContext, scheduler);\n+      DistributedSchedulingAMService distributedSchedulingService \u003d new\n+          DistributedSchedulingAMService(this.rmContext, scheduler);\n       EventDispatcher distSchedulerEventDispatcher \u003d\n           new EventDispatcher(distributedSchedulingService,\n-              DistributedSchedulingService.class.getName());\n-      // Add an event dispoatcher for the DistributedSchedulingService\n+              DistributedSchedulingAMService.class.getName());\n+      // Add an event dispatcher for the DistributedSchedulingAMService\n       // to handle node updates/additions and removals.\n       // Since the SchedulerEvent is currently a super set of theses,\n       // we register interest for it..\n       addService(distSchedulerEventDispatcher);\n       rmDispatcher.register(SchedulerEventType.class,\n           distSchedulerEventDispatcher);\n       this.rmContext.setContainerQueueLimitCalculator(\n           distributedSchedulingService.getNodeManagerQueueLimitCalculator());\n       return distributedSchedulingService;\n     }\n     return new ApplicationMasterService(this.rmContext, scheduler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ApplicationMasterService createApplicationMasterService() {\n    if (this.rmContext.getYarnConfiguration().getBoolean(\n        YarnConfiguration.DIST_SCHEDULING_ENABLED,\n        YarnConfiguration.DIST_SCHEDULING_ENABLED_DEFAULT)) {\n      DistributedSchedulingAMService distributedSchedulingService \u003d new\n          DistributedSchedulingAMService(this.rmContext, scheduler);\n      EventDispatcher distSchedulerEventDispatcher \u003d\n          new EventDispatcher(distributedSchedulingService,\n              DistributedSchedulingAMService.class.getName());\n      // Add an event dispatcher for the DistributedSchedulingAMService\n      // to handle node updates/additions and removals.\n      // Since the SchedulerEvent is currently a super set of theses,\n      // we register interest for it..\n      addService(distSchedulerEventDispatcher);\n      rmDispatcher.register(SchedulerEventType.class,\n          distSchedulerEventDispatcher);\n      this.rmContext.setContainerQueueLimitCalculator(\n          distributedSchedulingService.getNodeManagerQueueLimitCalculator());\n      return distributedSchedulingService;\n    }\n    return new ApplicationMasterService(this.rmContext, scheduler);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "f0ac18d001d97914a9ee810b1fab56c5cebff830": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2888. Corrective mechanisms for rebalancing NM container queues. (asuresh)\n",
      "commitDate": "13/05/16 1:38 PM",
      "commitName": "f0ac18d001d97914a9ee810b1fab56c5cebff830",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "26/04/16 9:00 PM",
      "commitNameOld": "4beff013546dbc29c004a1bad1b019dc9d2b751f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 16.69,
      "commitsBetweenForRepo": 105,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,22 @@\n   protected ApplicationMasterService createApplicationMasterService() {\n     if (this.rmContext.getYarnConfiguration().getBoolean(\n         YarnConfiguration.DIST_SCHEDULING_ENABLED,\n         YarnConfiguration.DIST_SCHEDULING_ENABLED_DEFAULT)) {\n       DistributedSchedulingService distributedSchedulingService \u003d new\n           DistributedSchedulingService(this.rmContext, scheduler);\n       EventDispatcher distSchedulerEventDispatcher \u003d\n           new EventDispatcher(distributedSchedulingService,\n               DistributedSchedulingService.class.getName());\n       // Add an event dispoatcher for the DistributedSchedulingService\n       // to handle node updates/additions and removals.\n       // Since the SchedulerEvent is currently a super set of theses,\n       // we register interest for it..\n       addService(distSchedulerEventDispatcher);\n       rmDispatcher.register(SchedulerEventType.class,\n           distSchedulerEventDispatcher);\n+      this.rmContext.setContainerQueueLimitCalculator(\n+          distributedSchedulingService.getNodeManagerQueueLimitCalculator());\n       return distributedSchedulingService;\n     }\n     return new ApplicationMasterService(this.rmContext, scheduler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ApplicationMasterService createApplicationMasterService() {\n    if (this.rmContext.getYarnConfiguration().getBoolean(\n        YarnConfiguration.DIST_SCHEDULING_ENABLED,\n        YarnConfiguration.DIST_SCHEDULING_ENABLED_DEFAULT)) {\n      DistributedSchedulingService distributedSchedulingService \u003d new\n          DistributedSchedulingService(this.rmContext, scheduler);\n      EventDispatcher distSchedulerEventDispatcher \u003d\n          new EventDispatcher(distributedSchedulingService,\n              DistributedSchedulingService.class.getName());\n      // Add an event dispoatcher for the DistributedSchedulingService\n      // to handle node updates/additions and removals.\n      // Since the SchedulerEvent is currently a super set of theses,\n      // we register interest for it..\n      addService(distSchedulerEventDispatcher);\n      rmDispatcher.register(SchedulerEventType.class,\n          distSchedulerEventDispatcher);\n      this.rmContext.setContainerQueueLimitCalculator(\n          distributedSchedulingService.getNodeManagerQueueLimitCalculator());\n      return distributedSchedulingService;\n    }\n    return new ApplicationMasterService(this.rmContext, scheduler);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "341888a0aa23f24458b4e6e34868794b9735c06a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4412. Create ClusterMonitor to compute ordered list of preferred NMs for OPPORTUNITIC containers. (asuresh)\n",
      "commitDate": "26/04/16 8:12 PM",
      "commitName": "341888a0aa23f24458b4e6e34868794b9735c06a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "24/04/16 10:38 PM",
      "commitNameOld": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 1.9,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,20 @@\n   protected ApplicationMasterService createApplicationMasterService() {\n     if (this.rmContext.getYarnConfiguration().getBoolean(\n         YarnConfiguration.DIST_SCHEDULING_ENABLED,\n         YarnConfiguration.DIST_SCHEDULING_ENABLED_DEFAULT)) {\n-      return new DistributedSchedulingService(this.rmContext, scheduler);\n+      DistributedSchedulingService distributedSchedulingService \u003d new\n+          DistributedSchedulingService(this.rmContext, scheduler);\n+      EventDispatcher distSchedulerEventDispatcher \u003d\n+          new EventDispatcher(distributedSchedulingService,\n+              DistributedSchedulingService.class.getName());\n+      // Add an event dispoatcher for the DistributedSchedulingService\n+      // to handle node updates/additions and removals.\n+      // Since the SchedulerEvent is currently a super set of theses,\n+      // we register interest for it..\n+      addService(distSchedulerEventDispatcher);\n+      rmDispatcher.register(SchedulerEventType.class,\n+          distSchedulerEventDispatcher);\n+      return distributedSchedulingService;\n     }\n     return new ApplicationMasterService(this.rmContext, scheduler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ApplicationMasterService createApplicationMasterService() {\n    if (this.rmContext.getYarnConfiguration().getBoolean(\n        YarnConfiguration.DIST_SCHEDULING_ENABLED,\n        YarnConfiguration.DIST_SCHEDULING_ENABLED_DEFAULT)) {\n      DistributedSchedulingService distributedSchedulingService \u003d new\n          DistributedSchedulingService(this.rmContext, scheduler);\n      EventDispatcher distSchedulerEventDispatcher \u003d\n          new EventDispatcher(distributedSchedulingService,\n              DistributedSchedulingService.class.getName());\n      // Add an event dispoatcher for the DistributedSchedulingService\n      // to handle node updates/additions and removals.\n      // Since the SchedulerEvent is currently a super set of theses,\n      // we register interest for it..\n      addService(distSchedulerEventDispatcher);\n      rmDispatcher.register(SchedulerEventType.class,\n          distSchedulerEventDispatcher);\n      return distributedSchedulingService;\n    }\n    return new ApplicationMasterService(this.rmContext, scheduler);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "07/03/16 1:56 AM",
      "commitNameOld": "e51a8c10560e5db5cf01fd530af48825cb51c9ea",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 48.82,
      "commitsBetweenForRepo": 289,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,3 +1,8 @@\n   protected ApplicationMasterService createApplicationMasterService() {\n+    if (this.rmContext.getYarnConfiguration().getBoolean(\n+        YarnConfiguration.DIST_SCHEDULING_ENABLED,\n+        YarnConfiguration.DIST_SCHEDULING_ENABLED_DEFAULT)) {\n+      return new DistributedSchedulingService(this.rmContext, scheduler);\n+    }\n     return new ApplicationMasterService(this.rmContext, scheduler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ApplicationMasterService createApplicationMasterService() {\n    if (this.rmContext.getYarnConfiguration().getBoolean(\n        YarnConfiguration.DIST_SCHEDULING_ENABLED,\n        YarnConfiguration.DIST_SCHEDULING_ENABLED_DEFAULT)) {\n      return new DistributedSchedulingService(this.rmContext, scheduler);\n    }\n    return new ApplicationMasterService(this.rmContext, scheduler);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected ApplicationMasterService createApplicationMasterService() {\n    return new ApplicationMasterService(this.rmContext, scheduler);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
      }
    },
    "fe7711df98b9dd16259f6534e8461a29f24caadc": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3942. Randomize master key generation for ApplicationTokenSecretManager and roll it every so often. (Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327220 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/12 11:48 AM",
      "commitName": "fe7711df98b9dd16259f6534e8461a29f24caadc",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "25/03/12 10:45 PM",
      "commitNameOld": "606114d6029758f2be130960b8fc3102457406ba",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 22.54,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,3 @@\n   protected ApplicationMasterService createApplicationMasterService() {\n-    return new ApplicationMasterService(this.rmContext,\n-        this.appTokenSecretManager, scheduler);\n+    return new ApplicationMasterService(this.rmContext, scheduler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ApplicationMasterService createApplicationMasterService() {\n    return new ApplicationMasterService(this.rmContext, scheduler);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected ApplicationMasterService createApplicationMasterService() {\n    return new ApplicationMasterService(this.rmContext,\n        this.appTokenSecretManager, scheduler);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,4 @@\n+  protected ApplicationMasterService createApplicationMasterService() {\n+    return new ApplicationMasterService(this.rmContext,\n+        this.appTokenSecretManager, scheduler);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected ApplicationMasterService createApplicationMasterService() {\n    return new ApplicationMasterService(this.rmContext,\n        this.appTokenSecretManager, scheduler);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
    }
  }
}