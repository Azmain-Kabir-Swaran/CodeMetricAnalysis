{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "chooseProtocolVersion",
  "functionId": "chooseProtocolVersion___zone-EncryptionZone__supportedVersions-CryptoProtocolVersion[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 2564,
  "functionEndLine": 2589,
  "numCommitsSeen": 873,
  "timeTaken": 27879,
  "changeHistory": [
    "e9b859f749103dc15fb4b4fc677f5586fceb20b3",
    "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad"
  ],
  "changeHistoryShort": {
    "e9b859f749103dc15fb4b4fc677f5586fceb20b3": "Ybodychange",
    "2b6bcfdafa91223a4116e3e9304579f5f91dccac": "Ymodifierchange",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e9b859f749103dc15fb4b4fc677f5586fceb20b3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14371. Improve Logging in FSNamesystem by adding parameterized logging. Contributed by Shweta.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "05/04/19 4:09 PM",
      "commitName": "e9b859f749103dc15fb4b4fc677f5586fceb20b3",
      "commitAuthor": "Shweta",
      "commitDateOld": "05/03/19 5:39 PM",
      "commitNameOld": "945b504c256d196c50634f61f3efe65a3b9a13a5",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 30.9,
      "commitsBetweenForRepo": 246,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,26 @@\n   CryptoProtocolVersion chooseProtocolVersion(\n       EncryptionZone zone, CryptoProtocolVersion[] supportedVersions)\n       throws UnknownCryptoProtocolVersionException, UnresolvedLinkException,\n         SnapshotAccessControlException {\n     Preconditions.checkNotNull(zone);\n     Preconditions.checkNotNull(supportedVersions);\n     // Right now, we only support a single protocol version,\n     // so simply look for it in the list of provided options\n     final CryptoProtocolVersion required \u003d zone.getVersion();\n \n     for (CryptoProtocolVersion c : supportedVersions) {\n       if (c.equals(CryptoProtocolVersion.UNKNOWN)) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Ignoring unknown CryptoProtocolVersion provided by \" +\n-              \"client: \" + c.getUnknownValue());\n-        }\n+        LOG.debug(\"Ignoring unknown CryptoProtocolVersion provided by \" +\n+            \"client: {}\", c.getUnknownValue());\n         continue;\n       }\n       if (c.equals(required)) {\n         return c;\n       }\n     }\n     throw new UnknownCryptoProtocolVersionException(\n         \"No crypto protocol versions provided by the client are supported.\"\n             + \" Client provided: \" + Arrays.toString(supportedVersions)\n             + \" NameNode supports: \" + Arrays.toString(CryptoProtocolVersion\n             .values()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  CryptoProtocolVersion chooseProtocolVersion(\n      EncryptionZone zone, CryptoProtocolVersion[] supportedVersions)\n      throws UnknownCryptoProtocolVersionException, UnresolvedLinkException,\n        SnapshotAccessControlException {\n    Preconditions.checkNotNull(zone);\n    Preconditions.checkNotNull(supportedVersions);\n    // Right now, we only support a single protocol version,\n    // so simply look for it in the list of provided options\n    final CryptoProtocolVersion required \u003d zone.getVersion();\n\n    for (CryptoProtocolVersion c : supportedVersions) {\n      if (c.equals(CryptoProtocolVersion.UNKNOWN)) {\n        LOG.debug(\"Ignoring unknown CryptoProtocolVersion provided by \" +\n            \"client: {}\", c.getUnknownValue());\n        continue;\n      }\n      if (c.equals(required)) {\n        return c;\n      }\n    }\n    throw new UnknownCryptoProtocolVersionException(\n        \"No crypto protocol versions provided by the client are supported.\"\n            + \" Client provided: \" + Arrays.toString(supportedVersions)\n            + \" NameNode supports: \" + Arrays.toString(CryptoProtocolVersion\n            .values()));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "2b6bcfdafa91223a4116e3e9304579f5f91dccac": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-8421. Move startFile() and related functions into FSDirWriteFileOp. Contributed by Haohui Mai.\n",
      "commitDate": "21/05/15 8:08 AM",
      "commitName": "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "18/05/15 12:37 PM",
      "commitNameOld": "cdfae446ad285db979a79bf55665363fd943702c",
      "commitAuthorOld": "Ravi Prakash",
      "daysBetweenCommits": 2.81,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n-  private CryptoProtocolVersion chooseProtocolVersion(EncryptionZone zone,\n-      CryptoProtocolVersion[] supportedVersions)\n+  CryptoProtocolVersion chooseProtocolVersion(\n+      EncryptionZone zone, CryptoProtocolVersion[] supportedVersions)\n       throws UnknownCryptoProtocolVersionException, UnresolvedLinkException,\n         SnapshotAccessControlException {\n     Preconditions.checkNotNull(zone);\n     Preconditions.checkNotNull(supportedVersions);\n     // Right now, we only support a single protocol version,\n     // so simply look for it in the list of provided options\n     final CryptoProtocolVersion required \u003d zone.getVersion();\n \n     for (CryptoProtocolVersion c : supportedVersions) {\n       if (c.equals(CryptoProtocolVersion.UNKNOWN)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Ignoring unknown CryptoProtocolVersion provided by \" +\n               \"client: \" + c.getUnknownValue());\n         }\n         continue;\n       }\n       if (c.equals(required)) {\n         return c;\n       }\n     }\n     throw new UnknownCryptoProtocolVersionException(\n         \"No crypto protocol versions provided by the client are supported.\"\n             + \" Client provided: \" + Arrays.toString(supportedVersions)\n             + \" NameNode supports: \" + Arrays.toString(CryptoProtocolVersion\n             .values()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  CryptoProtocolVersion chooseProtocolVersion(\n      EncryptionZone zone, CryptoProtocolVersion[] supportedVersions)\n      throws UnknownCryptoProtocolVersionException, UnresolvedLinkException,\n        SnapshotAccessControlException {\n    Preconditions.checkNotNull(zone);\n    Preconditions.checkNotNull(supportedVersions);\n    // Right now, we only support a single protocol version,\n    // so simply look for it in the list of provided options\n    final CryptoProtocolVersion required \u003d zone.getVersion();\n\n    for (CryptoProtocolVersion c : supportedVersions) {\n      if (c.equals(CryptoProtocolVersion.UNKNOWN)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Ignoring unknown CryptoProtocolVersion provided by \" +\n              \"client: \" + c.getUnknownValue());\n        }\n        continue;\n      }\n      if (c.equals(required)) {\n        return c;\n      }\n    }\n    throw new UnknownCryptoProtocolVersionException(\n        \"No crypto protocol versions provided by the client are supported.\"\n            + \" Client provided: \" + Arrays.toString(supportedVersions)\n            + \" NameNode supports: \" + Arrays.toString(CryptoProtocolVersion\n            .values()));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[]"
      }
    },
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7077. Separate CipherSuite from crypto protocol version. (wang)\n",
      "commitDate": "25/09/14 6:40 PM",
      "commitName": "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,28 @@\n+  private CryptoProtocolVersion chooseProtocolVersion(EncryptionZone zone,\n+      CryptoProtocolVersion[] supportedVersions)\n+      throws UnknownCryptoProtocolVersionException, UnresolvedLinkException,\n+        SnapshotAccessControlException {\n+    Preconditions.checkNotNull(zone);\n+    Preconditions.checkNotNull(supportedVersions);\n+    // Right now, we only support a single protocol version,\n+    // so simply look for it in the list of provided options\n+    final CryptoProtocolVersion required \u003d zone.getVersion();\n+\n+    for (CryptoProtocolVersion c : supportedVersions) {\n+      if (c.equals(CryptoProtocolVersion.UNKNOWN)) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Ignoring unknown CryptoProtocolVersion provided by \" +\n+              \"client: \" + c.getUnknownValue());\n+        }\n+        continue;\n+      }\n+      if (c.equals(required)) {\n+        return c;\n+      }\n+    }\n+    throw new UnknownCryptoProtocolVersionException(\n+        \"No crypto protocol versions provided by the client are supported.\"\n+            + \" Client provided: \" + Arrays.toString(supportedVersions)\n+            + \" NameNode supports: \" + Arrays.toString(CryptoProtocolVersion\n+            .values()));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private CryptoProtocolVersion chooseProtocolVersion(EncryptionZone zone,\n      CryptoProtocolVersion[] supportedVersions)\n      throws UnknownCryptoProtocolVersionException, UnresolvedLinkException,\n        SnapshotAccessControlException {\n    Preconditions.checkNotNull(zone);\n    Preconditions.checkNotNull(supportedVersions);\n    // Right now, we only support a single protocol version,\n    // so simply look for it in the list of provided options\n    final CryptoProtocolVersion required \u003d zone.getVersion();\n\n    for (CryptoProtocolVersion c : supportedVersions) {\n      if (c.equals(CryptoProtocolVersion.UNKNOWN)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Ignoring unknown CryptoProtocolVersion provided by \" +\n              \"client: \" + c.getUnknownValue());\n        }\n        continue;\n      }\n      if (c.equals(required)) {\n        return c;\n      }\n    }\n    throw new UnknownCryptoProtocolVersionException(\n        \"No crypto protocol versions provided by the client are supported.\"\n            + \" Client provided: \" + Arrays.toString(supportedVersions)\n            + \" NameNode supports: \" + Arrays.toString(CryptoProtocolVersion\n            .values()));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
    }
  }
}