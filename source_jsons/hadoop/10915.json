{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StripedReader.java",
  "functionName": "scheduleNewRead",
  "functionId": "scheduleNewRead___used-BitSet__reconstructLength-int__corruptedBlocks-CorruptedBlocks",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedReader.java",
  "functionStartLine": 364,
  "functionEndLine": 423,
  "numCommitsSeen": 106,
  "timeTaken": 7064,
  "changeHistory": [
    "08bb6c49a5aec32b7d9f29238560f947420405d6",
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
    "8808779db351fe444388d4acb3094766b5980718",
    "6546d9e7ff73d2c81a803f2c61a1376a8c426987",
    "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17",
    "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
    "a31eada33a598ebf9f78e48a3ab1ed031b9bbd27",
    "6616de24cb14f1c2d0d6568fd4382062618834bd"
  ],
  "changeHistoryShort": {
    "08bb6c49a5aec32b7d9f29238560f947420405d6": "Ybodychange",
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "8808779db351fe444388d4acb3094766b5980718": "Ymultichange(Yparameterchange,Ybodychange)",
    "6546d9e7ff73d2c81a803f2c61a1376a8c426987": "Ybodychange",
    "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17": "Ymultichange(Yparameterchange,Ybodychange)",
    "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932": "Ymultichange(Yparameterchange,Ybodychange)",
    "a31eada33a598ebf9f78e48a3ab1ed031b9bbd27": "Ymultichange(Yreturntypechange,Ybodychange)",
    "6616de24cb14f1c2d0d6568fd4382062618834bd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "08bb6c49a5aec32b7d9f29238560f947420405d6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13926. ThreadLocal aggregations for FileSystem.Statistics are incorrect with striped reads.\nContributed by Xiao Chen, Hrishikesh Gadre.\n\nSigned-off-by: Xiao Chen \u003cxiao@apache.org\u003e\n",
      "commitDate": "08/10/18 8:31 PM",
      "commitName": "08bb6c49a5aec32b7d9f29238560f947420405d6",
      "commitAuthor": "Hrishikesh Gadre",
      "commitDateOld": "28/07/17 10:50 AM",
      "commitNameOld": "77791e4c36ddc9305306c83806bf486d4d32575d",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 437.4,
      "commitsBetweenForRepo": 3926,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   private int scheduleNewRead(BitSet used, int reconstructLength,\n                               CorruptedBlocks corruptedBlocks) {\n     StripedBlockReader reader \u003d null;\n     // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n     // number of StripedBlockReader, and there may be some source DNs we never\n     // read before, so will try to create StripedBlockReader for one new source\n     // DN and try to read from it. If found, go to step 3.\n     int m \u003d readers.size();\n     int toRead \u003d 0;\n     while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n       reader \u003d createReader(m, reconstructor.getPositionInBlock());\n       readers.add(reader);\n       toRead \u003d getReadLength(liveIndices[m], reconstructLength);\n       if (toRead \u003e 0) {\n         if (reader.getBlockReader() \u003d\u003d null) {\n           reader \u003d null;\n           m++;\n         }\n       } else {\n         used.set(m);\n         return m;\n       }\n     }\n \n     // step2: if there is no new source DN we can use, try to find a source\n     // DN we ever read from but because some reason, e.g., slow, it\n     // is not in the success DN list at the begin of this iteration, so\n     // we have not tried it in this iteration. Now we have a chance to\n     // revisit it again.\n     for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c readers.size(); i++) {\n       if (!used.get(i)) {\n         StripedBlockReader stripedReader \u003d readers.get(i);\n         toRead \u003d getReadLength(liveIndices[i], reconstructLength);\n         if (toRead \u003e 0) {\n           stripedReader.closeBlockReader();\n           stripedReader.resetBlockReader(reconstructor.getPositionInBlock());\n           if (stripedReader.getBlockReader() !\u003d null) {\n             stripedReader.getReadBuffer().position(0);\n             m \u003d i;\n             reader \u003d stripedReader;\n           }\n         } else {\n           used.set(i);\n           stripedReader.getReadBuffer().position(0);\n           return i;\n         }\n       }\n     }\n \n     // step3: schedule if find a correct source DN and need to do real read.\n     if (reader !\u003d null) {\n-      Callable\u003cVoid\u003e readCallable \u003d\n+      Callable\u003cBlockReadStats\u003e readCallable \u003d\n           reader.readFromBlock(toRead, corruptedBlocks);\n-      Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n+      Future\u003cBlockReadStats\u003e f \u003d readService.submit(readCallable);\n       futures.put(f, m);\n       used.set(m);\n     }\n \n     return -1;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int scheduleNewRead(BitSet used, int reconstructLength,\n                              CorruptedBlocks corruptedBlocks) {\n    StripedBlockReader reader \u003d null;\n    // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n    // number of StripedBlockReader, and there may be some source DNs we never\n    // read before, so will try to create StripedBlockReader for one new source\n    // DN and try to read from it. If found, go to step 3.\n    int m \u003d readers.size();\n    int toRead \u003d 0;\n    while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n      reader \u003d createReader(m, reconstructor.getPositionInBlock());\n      readers.add(reader);\n      toRead \u003d getReadLength(liveIndices[m], reconstructLength);\n      if (toRead \u003e 0) {\n        if (reader.getBlockReader() \u003d\u003d null) {\n          reader \u003d null;\n          m++;\n        }\n      } else {\n        used.set(m);\n        return m;\n      }\n    }\n\n    // step2: if there is no new source DN we can use, try to find a source\n    // DN we ever read from but because some reason, e.g., slow, it\n    // is not in the success DN list at the begin of this iteration, so\n    // we have not tried it in this iteration. Now we have a chance to\n    // revisit it again.\n    for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c readers.size(); i++) {\n      if (!used.get(i)) {\n        StripedBlockReader stripedReader \u003d readers.get(i);\n        toRead \u003d getReadLength(liveIndices[i], reconstructLength);\n        if (toRead \u003e 0) {\n          stripedReader.closeBlockReader();\n          stripedReader.resetBlockReader(reconstructor.getPositionInBlock());\n          if (stripedReader.getBlockReader() !\u003d null) {\n            stripedReader.getReadBuffer().position(0);\n            m \u003d i;\n            reader \u003d stripedReader;\n          }\n        } else {\n          used.set(i);\n          stripedReader.getReadBuffer().position(0);\n          return i;\n        }\n      }\n    }\n\n    // step3: schedule if find a correct source DN and need to do real read.\n    if (reader !\u003d null) {\n      Callable\u003cBlockReadStats\u003e readCallable \u003d\n          reader.readFromBlock(toRead, corruptedBlocks);\n      Future\u003cBlockReadStats\u003e f \u003d readService.submit(readCallable);\n      futures.put(f, m);\n      used.set(m);\n    }\n\n    return -1;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedReader.java",
      "extendedDetails": {}
    },
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
      "commitDate": "06/04/16 10:50 PM",
      "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
      "commitAuthor": "Uma Maheswara Rao G",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,60 @@\n-    private int scheduleNewRead(BitSet used, int reconstructLen,\n-                                CorruptedBlocks corruptedBlocks) {\n-      StripedReader reader \u003d null;\n-      // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n-      // number of StripedReader, and there may be some source DNs we never \n-      // read before, so will try to create StripedReader for one new source DN\n-      // and try to read from it. If found, go to step 3.\n-      int m \u003d stripedReaders.size();\n-      int toRead \u003d 0;\n-      while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n-        reader \u003d addStripedReader(m, positionInBlock);\n-        toRead \u003d getReadLength(liveIndices[m], reconstructLen);\n+  private int scheduleNewRead(BitSet used, int reconstructLength,\n+                              CorruptedBlocks corruptedBlocks) {\n+    StripedBlockReader reader \u003d null;\n+    // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n+    // number of StripedBlockReader, and there may be some source DNs we never\n+    // read before, so will try to create StripedBlockReader for one new source\n+    // DN and try to read from it. If found, go to step 3.\n+    int m \u003d readers.size();\n+    int toRead \u003d 0;\n+    while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n+      reader \u003d createReader(m, reconstructor.getPositionInBlock());\n+      readers.add(reader);\n+      toRead \u003d getReadLength(liveIndices[m], reconstructLength);\n+      if (toRead \u003e 0) {\n+        if (reader.getBlockReader() \u003d\u003d null) {\n+          reader \u003d null;\n+          m++;\n+        }\n+      } else {\n+        used.set(m);\n+        return m;\n+      }\n+    }\n+\n+    // step2: if there is no new source DN we can use, try to find a source\n+    // DN we ever read from but because some reason, e.g., slow, it\n+    // is not in the success DN list at the begin of this iteration, so\n+    // we have not tried it in this iteration. Now we have a chance to\n+    // revisit it again.\n+    for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c readers.size(); i++) {\n+      if (!used.get(i)) {\n+        StripedBlockReader stripedReader \u003d readers.get(i);\n+        toRead \u003d getReadLength(liveIndices[i], reconstructLength);\n         if (toRead \u003e 0) {\n-          if (reader.blockReader \u003d\u003d null) {\n-            reader \u003d null;\n-            m++;\n+          stripedReader.closeBlockReader();\n+          stripedReader.resetBlockReader(reconstructor.getPositionInBlock());\n+          if (stripedReader.getBlockReader() !\u003d null) {\n+            stripedReader.getReadBuffer().position(0);\n+            m \u003d i;\n+            reader \u003d stripedReader;\n           }\n         } else {\n-          used.set(m);\n-          return m;\n+          used.set(i);\n+          stripedReader.getReadBuffer().position(0);\n+          return i;\n         }\n       }\n+    }\n \n-      // step2: if there is no new source DN we can use, try to find a source \n-      // DN we ever read from but because some reason, e.g., slow, it\n-      // is not in the success DN list at the begin of this iteration, so \n-      // we have not tried it in this iteration. Now we have a chance to \n-      // revisit it again.\n-      for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n-        if (!used.get(i)) {\n-          StripedReader r \u003d stripedReaders.get(i);\n-          toRead \u003d getReadLength(liveIndices[i], reconstructLen);\n-          if (toRead \u003e 0) {\n-            IOUtils.closeStream(r.blockReader);\n-            r.blockReader \u003d newBlockReader(\n-                getBlock(blockGroup, liveIndices[i]), positionInBlock,\n-                sources[i]);\n-            if (r.blockReader !\u003d null) {\n-              r.buffer.position(0);\n-              m \u003d i;\n-              reader \u003d r;\n-            }\n-          } else {\n-            used.set(i);\n-            r.buffer.position(0);\n-            return i;\n-          }\n-        }\n-      }\n+    // step3: schedule if find a correct source DN and need to do real read.\n+    if (reader !\u003d null) {\n+      Callable\u003cVoid\u003e readCallable \u003d\n+          reader.readFromBlock(toRead, corruptedBlocks);\n+      Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n+      futures.put(f, m);\n+      used.set(m);\n+    }\n \n-      // step3: schedule if find a correct source DN and need to do real read.\n-      if (reader !\u003d null) {\n-        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n-            toRead, corruptedBlocks);\n-        Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n-        futures.put(f, m);\n-        used.set(m);\n-      }\n-\n-      return -1;\n-    }\n\\ No newline at end of file\n+    return -1;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private int scheduleNewRead(BitSet used, int reconstructLength,\n                              CorruptedBlocks corruptedBlocks) {\n    StripedBlockReader reader \u003d null;\n    // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n    // number of StripedBlockReader, and there may be some source DNs we never\n    // read before, so will try to create StripedBlockReader for one new source\n    // DN and try to read from it. If found, go to step 3.\n    int m \u003d readers.size();\n    int toRead \u003d 0;\n    while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n      reader \u003d createReader(m, reconstructor.getPositionInBlock());\n      readers.add(reader);\n      toRead \u003d getReadLength(liveIndices[m], reconstructLength);\n      if (toRead \u003e 0) {\n        if (reader.getBlockReader() \u003d\u003d null) {\n          reader \u003d null;\n          m++;\n        }\n      } else {\n        used.set(m);\n        return m;\n      }\n    }\n\n    // step2: if there is no new source DN we can use, try to find a source\n    // DN we ever read from but because some reason, e.g., slow, it\n    // is not in the success DN list at the begin of this iteration, so\n    // we have not tried it in this iteration. Now we have a chance to\n    // revisit it again.\n    for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c readers.size(); i++) {\n      if (!used.get(i)) {\n        StripedBlockReader stripedReader \u003d readers.get(i);\n        toRead \u003d getReadLength(liveIndices[i], reconstructLength);\n        if (toRead \u003e 0) {\n          stripedReader.closeBlockReader();\n          stripedReader.resetBlockReader(reconstructor.getPositionInBlock());\n          if (stripedReader.getBlockReader() !\u003d null) {\n            stripedReader.getReadBuffer().position(0);\n            m \u003d i;\n            reader \u003d stripedReader;\n          }\n        } else {\n          used.set(i);\n          stripedReader.getReadBuffer().position(0);\n          return i;\n        }\n      }\n    }\n\n    // step3: schedule if find a correct source DN and need to do real read.\n    if (reader !\u003d null) {\n      Callable\u003cVoid\u003e readCallable \u003d\n          reader.readFromBlock(toRead, corruptedBlocks);\n      Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n      futures.put(f, m);\n      used.set(m);\n    }\n\n    return -1;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedReader.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedReader.java",
            "oldMethodName": "scheduleNewRead",
            "newMethodName": "scheduleNewRead"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,60 @@\n-    private int scheduleNewRead(BitSet used, int reconstructLen,\n-                                CorruptedBlocks corruptedBlocks) {\n-      StripedReader reader \u003d null;\n-      // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n-      // number of StripedReader, and there may be some source DNs we never \n-      // read before, so will try to create StripedReader for one new source DN\n-      // and try to read from it. If found, go to step 3.\n-      int m \u003d stripedReaders.size();\n-      int toRead \u003d 0;\n-      while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n-        reader \u003d addStripedReader(m, positionInBlock);\n-        toRead \u003d getReadLength(liveIndices[m], reconstructLen);\n+  private int scheduleNewRead(BitSet used, int reconstructLength,\n+                              CorruptedBlocks corruptedBlocks) {\n+    StripedBlockReader reader \u003d null;\n+    // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n+    // number of StripedBlockReader, and there may be some source DNs we never\n+    // read before, so will try to create StripedBlockReader for one new source\n+    // DN and try to read from it. If found, go to step 3.\n+    int m \u003d readers.size();\n+    int toRead \u003d 0;\n+    while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n+      reader \u003d createReader(m, reconstructor.getPositionInBlock());\n+      readers.add(reader);\n+      toRead \u003d getReadLength(liveIndices[m], reconstructLength);\n+      if (toRead \u003e 0) {\n+        if (reader.getBlockReader() \u003d\u003d null) {\n+          reader \u003d null;\n+          m++;\n+        }\n+      } else {\n+        used.set(m);\n+        return m;\n+      }\n+    }\n+\n+    // step2: if there is no new source DN we can use, try to find a source\n+    // DN we ever read from but because some reason, e.g., slow, it\n+    // is not in the success DN list at the begin of this iteration, so\n+    // we have not tried it in this iteration. Now we have a chance to\n+    // revisit it again.\n+    for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c readers.size(); i++) {\n+      if (!used.get(i)) {\n+        StripedBlockReader stripedReader \u003d readers.get(i);\n+        toRead \u003d getReadLength(liveIndices[i], reconstructLength);\n         if (toRead \u003e 0) {\n-          if (reader.blockReader \u003d\u003d null) {\n-            reader \u003d null;\n-            m++;\n+          stripedReader.closeBlockReader();\n+          stripedReader.resetBlockReader(reconstructor.getPositionInBlock());\n+          if (stripedReader.getBlockReader() !\u003d null) {\n+            stripedReader.getReadBuffer().position(0);\n+            m \u003d i;\n+            reader \u003d stripedReader;\n           }\n         } else {\n-          used.set(m);\n-          return m;\n+          used.set(i);\n+          stripedReader.getReadBuffer().position(0);\n+          return i;\n         }\n       }\n+    }\n \n-      // step2: if there is no new source DN we can use, try to find a source \n-      // DN we ever read from but because some reason, e.g., slow, it\n-      // is not in the success DN list at the begin of this iteration, so \n-      // we have not tried it in this iteration. Now we have a chance to \n-      // revisit it again.\n-      for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n-        if (!used.get(i)) {\n-          StripedReader r \u003d stripedReaders.get(i);\n-          toRead \u003d getReadLength(liveIndices[i], reconstructLen);\n-          if (toRead \u003e 0) {\n-            IOUtils.closeStream(r.blockReader);\n-            r.blockReader \u003d newBlockReader(\n-                getBlock(blockGroup, liveIndices[i]), positionInBlock,\n-                sources[i]);\n-            if (r.blockReader !\u003d null) {\n-              r.buffer.position(0);\n-              m \u003d i;\n-              reader \u003d r;\n-            }\n-          } else {\n-            used.set(i);\n-            r.buffer.position(0);\n-            return i;\n-          }\n-        }\n-      }\n+    // step3: schedule if find a correct source DN and need to do real read.\n+    if (reader !\u003d null) {\n+      Callable\u003cVoid\u003e readCallable \u003d\n+          reader.readFromBlock(toRead, corruptedBlocks);\n+      Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n+      futures.put(f, m);\n+      used.set(m);\n+    }\n \n-      // step3: schedule if find a correct source DN and need to do real read.\n-      if (reader !\u003d null) {\n-        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n-            toRead, corruptedBlocks);\n-        Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n-        futures.put(f, m);\n-        used.set(m);\n-      }\n-\n-      return -1;\n-    }\n\\ No newline at end of file\n+    return -1;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private int scheduleNewRead(BitSet used, int reconstructLength,\n                              CorruptedBlocks corruptedBlocks) {\n    StripedBlockReader reader \u003d null;\n    // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n    // number of StripedBlockReader, and there may be some source DNs we never\n    // read before, so will try to create StripedBlockReader for one new source\n    // DN and try to read from it. If found, go to step 3.\n    int m \u003d readers.size();\n    int toRead \u003d 0;\n    while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n      reader \u003d createReader(m, reconstructor.getPositionInBlock());\n      readers.add(reader);\n      toRead \u003d getReadLength(liveIndices[m], reconstructLength);\n      if (toRead \u003e 0) {\n        if (reader.getBlockReader() \u003d\u003d null) {\n          reader \u003d null;\n          m++;\n        }\n      } else {\n        used.set(m);\n        return m;\n      }\n    }\n\n    // step2: if there is no new source DN we can use, try to find a source\n    // DN we ever read from but because some reason, e.g., slow, it\n    // is not in the success DN list at the begin of this iteration, so\n    // we have not tried it in this iteration. Now we have a chance to\n    // revisit it again.\n    for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c readers.size(); i++) {\n      if (!used.get(i)) {\n        StripedBlockReader stripedReader \u003d readers.get(i);\n        toRead \u003d getReadLength(liveIndices[i], reconstructLength);\n        if (toRead \u003e 0) {\n          stripedReader.closeBlockReader();\n          stripedReader.resetBlockReader(reconstructor.getPositionInBlock());\n          if (stripedReader.getBlockReader() !\u003d null) {\n            stripedReader.getReadBuffer().position(0);\n            m \u003d i;\n            reader \u003d stripedReader;\n          }\n        } else {\n          used.set(i);\n          stripedReader.getReadBuffer().position(0);\n          return i;\n        }\n      }\n    }\n\n    // step3: schedule if find a correct source DN and need to do real read.\n    if (reader !\u003d null) {\n      Callable\u003cVoid\u003e readCallable \u003d\n          reader.readFromBlock(toRead, corruptedBlocks);\n      Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n      futures.put(f, m);\n      used.set(m);\n    }\n\n    return -1;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedReader.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,60 @@\n-    private int scheduleNewRead(BitSet used, int reconstructLen,\n-                                CorruptedBlocks corruptedBlocks) {\n-      StripedReader reader \u003d null;\n-      // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n-      // number of StripedReader, and there may be some source DNs we never \n-      // read before, so will try to create StripedReader for one new source DN\n-      // and try to read from it. If found, go to step 3.\n-      int m \u003d stripedReaders.size();\n-      int toRead \u003d 0;\n-      while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n-        reader \u003d addStripedReader(m, positionInBlock);\n-        toRead \u003d getReadLength(liveIndices[m], reconstructLen);\n+  private int scheduleNewRead(BitSet used, int reconstructLength,\n+                              CorruptedBlocks corruptedBlocks) {\n+    StripedBlockReader reader \u003d null;\n+    // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n+    // number of StripedBlockReader, and there may be some source DNs we never\n+    // read before, so will try to create StripedBlockReader for one new source\n+    // DN and try to read from it. If found, go to step 3.\n+    int m \u003d readers.size();\n+    int toRead \u003d 0;\n+    while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n+      reader \u003d createReader(m, reconstructor.getPositionInBlock());\n+      readers.add(reader);\n+      toRead \u003d getReadLength(liveIndices[m], reconstructLength);\n+      if (toRead \u003e 0) {\n+        if (reader.getBlockReader() \u003d\u003d null) {\n+          reader \u003d null;\n+          m++;\n+        }\n+      } else {\n+        used.set(m);\n+        return m;\n+      }\n+    }\n+\n+    // step2: if there is no new source DN we can use, try to find a source\n+    // DN we ever read from but because some reason, e.g., slow, it\n+    // is not in the success DN list at the begin of this iteration, so\n+    // we have not tried it in this iteration. Now we have a chance to\n+    // revisit it again.\n+    for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c readers.size(); i++) {\n+      if (!used.get(i)) {\n+        StripedBlockReader stripedReader \u003d readers.get(i);\n+        toRead \u003d getReadLength(liveIndices[i], reconstructLength);\n         if (toRead \u003e 0) {\n-          if (reader.blockReader \u003d\u003d null) {\n-            reader \u003d null;\n-            m++;\n+          stripedReader.closeBlockReader();\n+          stripedReader.resetBlockReader(reconstructor.getPositionInBlock());\n+          if (stripedReader.getBlockReader() !\u003d null) {\n+            stripedReader.getReadBuffer().position(0);\n+            m \u003d i;\n+            reader \u003d stripedReader;\n           }\n         } else {\n-          used.set(m);\n-          return m;\n+          used.set(i);\n+          stripedReader.getReadBuffer().position(0);\n+          return i;\n         }\n       }\n+    }\n \n-      // step2: if there is no new source DN we can use, try to find a source \n-      // DN we ever read from but because some reason, e.g., slow, it\n-      // is not in the success DN list at the begin of this iteration, so \n-      // we have not tried it in this iteration. Now we have a chance to \n-      // revisit it again.\n-      for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n-        if (!used.get(i)) {\n-          StripedReader r \u003d stripedReaders.get(i);\n-          toRead \u003d getReadLength(liveIndices[i], reconstructLen);\n-          if (toRead \u003e 0) {\n-            IOUtils.closeStream(r.blockReader);\n-            r.blockReader \u003d newBlockReader(\n-                getBlock(blockGroup, liveIndices[i]), positionInBlock,\n-                sources[i]);\n-            if (r.blockReader !\u003d null) {\n-              r.buffer.position(0);\n-              m \u003d i;\n-              reader \u003d r;\n-            }\n-          } else {\n-            used.set(i);\n-            r.buffer.position(0);\n-            return i;\n-          }\n-        }\n-      }\n+    // step3: schedule if find a correct source DN and need to do real read.\n+    if (reader !\u003d null) {\n+      Callable\u003cVoid\u003e readCallable \u003d\n+          reader.readFromBlock(toRead, corruptedBlocks);\n+      Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n+      futures.put(f, m);\n+      used.set(m);\n+    }\n \n-      // step3: schedule if find a correct source DN and need to do real read.\n-      if (reader !\u003d null) {\n-        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n-            toRead, corruptedBlocks);\n-        Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n-        futures.put(f, m);\n-        used.set(m);\n-      }\n-\n-      return -1;\n-    }\n\\ No newline at end of file\n+    return -1;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private int scheduleNewRead(BitSet used, int reconstructLength,\n                              CorruptedBlocks corruptedBlocks) {\n    StripedBlockReader reader \u003d null;\n    // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n    // number of StripedBlockReader, and there may be some source DNs we never\n    // read before, so will try to create StripedBlockReader for one new source\n    // DN and try to read from it. If found, go to step 3.\n    int m \u003d readers.size();\n    int toRead \u003d 0;\n    while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n      reader \u003d createReader(m, reconstructor.getPositionInBlock());\n      readers.add(reader);\n      toRead \u003d getReadLength(liveIndices[m], reconstructLength);\n      if (toRead \u003e 0) {\n        if (reader.getBlockReader() \u003d\u003d null) {\n          reader \u003d null;\n          m++;\n        }\n      } else {\n        used.set(m);\n        return m;\n      }\n    }\n\n    // step2: if there is no new source DN we can use, try to find a source\n    // DN we ever read from but because some reason, e.g., slow, it\n    // is not in the success DN list at the begin of this iteration, so\n    // we have not tried it in this iteration. Now we have a chance to\n    // revisit it again.\n    for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c readers.size(); i++) {\n      if (!used.get(i)) {\n        StripedBlockReader stripedReader \u003d readers.get(i);\n        toRead \u003d getReadLength(liveIndices[i], reconstructLength);\n        if (toRead \u003e 0) {\n          stripedReader.closeBlockReader();\n          stripedReader.resetBlockReader(reconstructor.getPositionInBlock());\n          if (stripedReader.getBlockReader() !\u003d null) {\n            stripedReader.getReadBuffer().position(0);\n            m \u003d i;\n            reader \u003d stripedReader;\n          }\n        } else {\n          used.set(i);\n          stripedReader.getReadBuffer().position(0);\n          return i;\n        }\n      }\n    }\n\n    // step3: schedule if find a correct source DN and need to do real read.\n    if (reader !\u003d null) {\n      Callable\u003cVoid\u003e readCallable \u003d\n          reader.readFromBlock(toRead, corruptedBlocks);\n      Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n      futures.put(f, m);\n      used.set(m);\n    }\n\n    return -1;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedReader.java",
          "extendedDetails": {
            "oldValue": "[used-BitSet, reconstructLen-int, corruptedBlocks-CorruptedBlocks]",
            "newValue": "[used-BitSet, reconstructLength-int, corruptedBlocks-CorruptedBlocks]"
          }
        }
      ]
    },
    "8808779db351fe444388d4acb3094766b5980718": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9734. Refactoring of checksum failure report related codes. Contributed by Kai Zheng.\n\nChange-Id: Ie69a77e3498a360959f8e213c51fb2b17c28b64a\n",
      "commitDate": "25/02/16 9:55 AM",
      "commitName": "8808779db351fe444388d4acb3094766b5980718",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9734. Refactoring of checksum failure report related codes. Contributed by Kai Zheng.\n\nChange-Id: Ie69a77e3498a360959f8e213c51fb2b17c28b64a\n",
          "commitDate": "25/02/16 9:55 AM",
          "commitName": "8808779db351fe444388d4acb3094766b5980718",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "19/02/16 7:02 PM",
          "commitNameOld": "e54cc2931262bf49682a8323da9811976218c03b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 5.62,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,61 @@\n     private int scheduleNewRead(BitSet used, int reconstructLen,\n-        Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n+                                CorruptedBlocks corruptedBlocks) {\n       StripedReader reader \u003d null;\n       // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n       // number of StripedReader, and there may be some source DNs we never \n       // read before, so will try to create StripedReader for one new source DN\n       // and try to read from it. If found, go to step 3.\n       int m \u003d stripedReaders.size();\n       int toRead \u003d 0;\n       while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n         reader \u003d addStripedReader(m, positionInBlock);\n         toRead \u003d getReadLength(liveIndices[m], reconstructLen);\n         if (toRead \u003e 0) {\n           if (reader.blockReader \u003d\u003d null) {\n             reader \u003d null;\n             m++;\n           }\n         } else {\n           used.set(m);\n           return m;\n         }\n       }\n \n       // step2: if there is no new source DN we can use, try to find a source \n       // DN we ever read from but because some reason, e.g., slow, it\n       // is not in the success DN list at the begin of this iteration, so \n       // we have not tried it in this iteration. Now we have a chance to \n       // revisit it again.\n       for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n         if (!used.get(i)) {\n           StripedReader r \u003d stripedReaders.get(i);\n           toRead \u003d getReadLength(liveIndices[i], reconstructLen);\n           if (toRead \u003e 0) {\n             IOUtils.closeStream(r.blockReader);\n             r.blockReader \u003d newBlockReader(\n                 getBlock(blockGroup, liveIndices[i]), positionInBlock,\n                 sources[i]);\n             if (r.blockReader !\u003d null) {\n               r.buffer.position(0);\n               m \u003d i;\n               reader \u003d r;\n             }\n           } else {\n             used.set(i);\n             r.buffer.position(0);\n             return i;\n           }\n         }\n       }\n \n       // step3: schedule if find a correct source DN and need to do real read.\n       if (reader !\u003d null) {\n         Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n-            toRead, corruptionMap);\n+            toRead, corruptedBlocks);\n         Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n         futures.put(f, m);\n         used.set(m);\n       }\n \n       return -1;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private int scheduleNewRead(BitSet used, int reconstructLen,\n                                CorruptedBlocks corruptedBlocks) {\n      StripedReader reader \u003d null;\n      // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n      // number of StripedReader, and there may be some source DNs we never \n      // read before, so will try to create StripedReader for one new source DN\n      // and try to read from it. If found, go to step 3.\n      int m \u003d stripedReaders.size();\n      int toRead \u003d 0;\n      while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n        reader \u003d addStripedReader(m, positionInBlock);\n        toRead \u003d getReadLength(liveIndices[m], reconstructLen);\n        if (toRead \u003e 0) {\n          if (reader.blockReader \u003d\u003d null) {\n            reader \u003d null;\n            m++;\n          }\n        } else {\n          used.set(m);\n          return m;\n        }\n      }\n\n      // step2: if there is no new source DN we can use, try to find a source \n      // DN we ever read from but because some reason, e.g., slow, it\n      // is not in the success DN list at the begin of this iteration, so \n      // we have not tried it in this iteration. Now we have a chance to \n      // revisit it again.\n      for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n        if (!used.get(i)) {\n          StripedReader r \u003d stripedReaders.get(i);\n          toRead \u003d getReadLength(liveIndices[i], reconstructLen);\n          if (toRead \u003e 0) {\n            IOUtils.closeStream(r.blockReader);\n            r.blockReader \u003d newBlockReader(\n                getBlock(blockGroup, liveIndices[i]), positionInBlock,\n                sources[i]);\n            if (r.blockReader !\u003d null) {\n              r.buffer.position(0);\n              m \u003d i;\n              reader \u003d r;\n            }\n          } else {\n            used.set(i);\n            r.buffer.position(0);\n            return i;\n          }\n        }\n      }\n\n      // step3: schedule if find a correct source DN and need to do real read.\n      if (reader !\u003d null) {\n        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n            toRead, corruptedBlocks);\n        Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n        futures.put(f, m);\n        used.set(m);\n      }\n\n      return -1;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {
            "oldValue": "[used-BitSet, reconstructLen-int, corruptionMap-Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e]",
            "newValue": "[used-BitSet, reconstructLen-int, corruptedBlocks-CorruptedBlocks]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9734. Refactoring of checksum failure report related codes. Contributed by Kai Zheng.\n\nChange-Id: Ie69a77e3498a360959f8e213c51fb2b17c28b64a\n",
          "commitDate": "25/02/16 9:55 AM",
          "commitName": "8808779db351fe444388d4acb3094766b5980718",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "19/02/16 7:02 PM",
          "commitNameOld": "e54cc2931262bf49682a8323da9811976218c03b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 5.62,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,61 @@\n     private int scheduleNewRead(BitSet used, int reconstructLen,\n-        Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n+                                CorruptedBlocks corruptedBlocks) {\n       StripedReader reader \u003d null;\n       // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n       // number of StripedReader, and there may be some source DNs we never \n       // read before, so will try to create StripedReader for one new source DN\n       // and try to read from it. If found, go to step 3.\n       int m \u003d stripedReaders.size();\n       int toRead \u003d 0;\n       while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n         reader \u003d addStripedReader(m, positionInBlock);\n         toRead \u003d getReadLength(liveIndices[m], reconstructLen);\n         if (toRead \u003e 0) {\n           if (reader.blockReader \u003d\u003d null) {\n             reader \u003d null;\n             m++;\n           }\n         } else {\n           used.set(m);\n           return m;\n         }\n       }\n \n       // step2: if there is no new source DN we can use, try to find a source \n       // DN we ever read from but because some reason, e.g., slow, it\n       // is not in the success DN list at the begin of this iteration, so \n       // we have not tried it in this iteration. Now we have a chance to \n       // revisit it again.\n       for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n         if (!used.get(i)) {\n           StripedReader r \u003d stripedReaders.get(i);\n           toRead \u003d getReadLength(liveIndices[i], reconstructLen);\n           if (toRead \u003e 0) {\n             IOUtils.closeStream(r.blockReader);\n             r.blockReader \u003d newBlockReader(\n                 getBlock(blockGroup, liveIndices[i]), positionInBlock,\n                 sources[i]);\n             if (r.blockReader !\u003d null) {\n               r.buffer.position(0);\n               m \u003d i;\n               reader \u003d r;\n             }\n           } else {\n             used.set(i);\n             r.buffer.position(0);\n             return i;\n           }\n         }\n       }\n \n       // step3: schedule if find a correct source DN and need to do real read.\n       if (reader !\u003d null) {\n         Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n-            toRead, corruptionMap);\n+            toRead, corruptedBlocks);\n         Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n         futures.put(f, m);\n         used.set(m);\n       }\n \n       return -1;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private int scheduleNewRead(BitSet used, int reconstructLen,\n                                CorruptedBlocks corruptedBlocks) {\n      StripedReader reader \u003d null;\n      // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n      // number of StripedReader, and there may be some source DNs we never \n      // read before, so will try to create StripedReader for one new source DN\n      // and try to read from it. If found, go to step 3.\n      int m \u003d stripedReaders.size();\n      int toRead \u003d 0;\n      while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n        reader \u003d addStripedReader(m, positionInBlock);\n        toRead \u003d getReadLength(liveIndices[m], reconstructLen);\n        if (toRead \u003e 0) {\n          if (reader.blockReader \u003d\u003d null) {\n            reader \u003d null;\n            m++;\n          }\n        } else {\n          used.set(m);\n          return m;\n        }\n      }\n\n      // step2: if there is no new source DN we can use, try to find a source \n      // DN we ever read from but because some reason, e.g., slow, it\n      // is not in the success DN list at the begin of this iteration, so \n      // we have not tried it in this iteration. Now we have a chance to \n      // revisit it again.\n      for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n        if (!used.get(i)) {\n          StripedReader r \u003d stripedReaders.get(i);\n          toRead \u003d getReadLength(liveIndices[i], reconstructLen);\n          if (toRead \u003e 0) {\n            IOUtils.closeStream(r.blockReader);\n            r.blockReader \u003d newBlockReader(\n                getBlock(blockGroup, liveIndices[i]), positionInBlock,\n                sources[i]);\n            if (r.blockReader !\u003d null) {\n              r.buffer.position(0);\n              m \u003d i;\n              reader \u003d r;\n            }\n          } else {\n            used.set(i);\n            r.buffer.position(0);\n            return i;\n          }\n        }\n      }\n\n      // step3: schedule if find a correct source DN and need to do real read.\n      if (reader !\u003d null) {\n        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n            toRead, corruptedBlocks);\n        Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n        futures.put(f, m);\n        used.set(m);\n      }\n\n      return -1;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {}
        }
      ]
    },
    "6546d9e7ff73d2c81a803f2c61a1376a8c426987": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9829. Erasure Coding: Improve few exception handling logic of ErasureCodingWorker. Contributed by Rakesh R.\n",
      "commitDate": "19/02/16 10:40 AM",
      "commitName": "6546d9e7ff73d2c81a803f2c61a1376a8c426987",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "02/02/16 12:32 PM",
      "commitNameOld": "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17",
      "commitAuthorOld": "zhezhang",
      "daysBetweenCommits": 16.92,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n     private int scheduleNewRead(BitSet used, int reconstructLen,\n         Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n       StripedReader reader \u003d null;\n       // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n       // number of StripedReader, and there may be some source DNs we never \n       // read before, so will try to create StripedReader for one new source DN\n       // and try to read from it. If found, go to step 3.\n       int m \u003d stripedReaders.size();\n       int toRead \u003d 0;\n       while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n         reader \u003d addStripedReader(m, positionInBlock);\n         toRead \u003d getReadLength(liveIndices[m], reconstructLen);\n         if (toRead \u003e 0) {\n           if (reader.blockReader \u003d\u003d null) {\n             reader \u003d null;\n             m++;\n           }\n         } else {\n           used.set(m);\n           return m;\n         }\n       }\n \n       // step2: if there is no new source DN we can use, try to find a source \n       // DN we ever read from but because some reason, e.g., slow, it\n       // is not in the success DN list at the begin of this iteration, so \n       // we have not tried it in this iteration. Now we have a chance to \n       // revisit it again.\n       for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n         if (!used.get(i)) {\n           StripedReader r \u003d stripedReaders.get(i);\n           toRead \u003d getReadLength(liveIndices[i], reconstructLen);\n           if (toRead \u003e 0) {\n-            closeBlockReader(r.blockReader);\n+            IOUtils.closeStream(r.blockReader);\n             r.blockReader \u003d newBlockReader(\n                 getBlock(blockGroup, liveIndices[i]), positionInBlock,\n                 sources[i]);\n             if (r.blockReader !\u003d null) {\n               r.buffer.position(0);\n               m \u003d i;\n               reader \u003d r;\n             }\n           } else {\n             used.set(i);\n             r.buffer.position(0);\n             return i;\n           }\n         }\n       }\n \n       // step3: schedule if find a correct source DN and need to do real read.\n       if (reader !\u003d null) {\n         Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n             toRead, corruptionMap);\n         Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n         futures.put(f, m);\n         used.set(m);\n       }\n \n       return -1;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private int scheduleNewRead(BitSet used, int reconstructLen,\n        Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n      StripedReader reader \u003d null;\n      // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n      // number of StripedReader, and there may be some source DNs we never \n      // read before, so will try to create StripedReader for one new source DN\n      // and try to read from it. If found, go to step 3.\n      int m \u003d stripedReaders.size();\n      int toRead \u003d 0;\n      while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n        reader \u003d addStripedReader(m, positionInBlock);\n        toRead \u003d getReadLength(liveIndices[m], reconstructLen);\n        if (toRead \u003e 0) {\n          if (reader.blockReader \u003d\u003d null) {\n            reader \u003d null;\n            m++;\n          }\n        } else {\n          used.set(m);\n          return m;\n        }\n      }\n\n      // step2: if there is no new source DN we can use, try to find a source \n      // DN we ever read from but because some reason, e.g., slow, it\n      // is not in the success DN list at the begin of this iteration, so \n      // we have not tried it in this iteration. Now we have a chance to \n      // revisit it again.\n      for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n        if (!used.get(i)) {\n          StripedReader r \u003d stripedReaders.get(i);\n          toRead \u003d getReadLength(liveIndices[i], reconstructLen);\n          if (toRead \u003e 0) {\n            IOUtils.closeStream(r.blockReader);\n            r.blockReader \u003d newBlockReader(\n                getBlock(blockGroup, liveIndices[i]), positionInBlock,\n                sources[i]);\n            if (r.blockReader !\u003d null) {\n              r.buffer.position(0);\n              m \u003d i;\n              reader \u003d r;\n            }\n          } else {\n            used.set(i);\n            r.buffer.position(0);\n            return i;\n          }\n        }\n      }\n\n      // step3: schedule if find a correct source DN and need to do real read.\n      if (reader !\u003d null) {\n        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n            toRead, corruptionMap);\n        Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n        futures.put(f, m);\n        used.set(m);\n      }\n\n      return -1;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
      "extendedDetails": {}
    },
    "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9731. Erasure Coding: Rename BlockECRecoveryCommand to BlockECReconstructionCommand. Contributed by Rakesh R.\n\nChange-Id: I405365a8395770e494b92bfe9651f4f0366d8f28\n",
      "commitDate": "02/02/16 12:32 PM",
      "commitName": "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17",
      "commitAuthor": "zhezhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9731. Erasure Coding: Rename BlockECRecoveryCommand to BlockECReconstructionCommand. Contributed by Rakesh R.\n\nChange-Id: I405365a8395770e494b92bfe9651f4f0366d8f28\n",
          "commitDate": "02/02/16 12:32 PM",
          "commitName": "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17",
          "commitAuthor": "zhezhang",
          "commitDateOld": "22/01/16 9:46 AM",
          "commitNameOld": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 11.12,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,61 @@\n-    private int scheduleNewRead(BitSet used, int recoverLength,\n+    private int scheduleNewRead(BitSet used, int reconstructLen,\n         Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n       StripedReader reader \u003d null;\n       // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n       // number of StripedReader, and there may be some source DNs we never \n       // read before, so will try to create StripedReader for one new source DN\n       // and try to read from it. If found, go to step 3.\n       int m \u003d stripedReaders.size();\n       int toRead \u003d 0;\n       while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n         reader \u003d addStripedReader(m, positionInBlock);\n-        toRead \u003d getReadLength(liveIndices[m], recoverLength);\n+        toRead \u003d getReadLength(liveIndices[m], reconstructLen);\n         if (toRead \u003e 0) {\n           if (reader.blockReader \u003d\u003d null) {\n             reader \u003d null;\n             m++;\n           }\n         } else {\n           used.set(m);\n           return m;\n         }\n       }\n \n       // step2: if there is no new source DN we can use, try to find a source \n       // DN we ever read from but because some reason, e.g., slow, it\n       // is not in the success DN list at the begin of this iteration, so \n       // we have not tried it in this iteration. Now we have a chance to \n       // revisit it again.\n       for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n         if (!used.get(i)) {\n           StripedReader r \u003d stripedReaders.get(i);\n-          toRead \u003d getReadLength(liveIndices[i], recoverLength);\n+          toRead \u003d getReadLength(liveIndices[i], reconstructLen);\n           if (toRead \u003e 0) {\n             closeBlockReader(r.blockReader);\n             r.blockReader \u003d newBlockReader(\n                 getBlock(blockGroup, liveIndices[i]), positionInBlock,\n                 sources[i]);\n             if (r.blockReader !\u003d null) {\n               r.buffer.position(0);\n               m \u003d i;\n               reader \u003d r;\n             }\n           } else {\n             used.set(i);\n             r.buffer.position(0);\n             return i;\n           }\n         }\n       }\n \n       // step3: schedule if find a correct source DN and need to do real read.\n       if (reader !\u003d null) {\n         Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n             toRead, corruptionMap);\n         Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n         futures.put(f, m);\n         used.set(m);\n       }\n \n       return -1;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private int scheduleNewRead(BitSet used, int reconstructLen,\n        Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n      StripedReader reader \u003d null;\n      // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n      // number of StripedReader, and there may be some source DNs we never \n      // read before, so will try to create StripedReader for one new source DN\n      // and try to read from it. If found, go to step 3.\n      int m \u003d stripedReaders.size();\n      int toRead \u003d 0;\n      while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n        reader \u003d addStripedReader(m, positionInBlock);\n        toRead \u003d getReadLength(liveIndices[m], reconstructLen);\n        if (toRead \u003e 0) {\n          if (reader.blockReader \u003d\u003d null) {\n            reader \u003d null;\n            m++;\n          }\n        } else {\n          used.set(m);\n          return m;\n        }\n      }\n\n      // step2: if there is no new source DN we can use, try to find a source \n      // DN we ever read from but because some reason, e.g., slow, it\n      // is not in the success DN list at the begin of this iteration, so \n      // we have not tried it in this iteration. Now we have a chance to \n      // revisit it again.\n      for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n        if (!used.get(i)) {\n          StripedReader r \u003d stripedReaders.get(i);\n          toRead \u003d getReadLength(liveIndices[i], reconstructLen);\n          if (toRead \u003e 0) {\n            closeBlockReader(r.blockReader);\n            r.blockReader \u003d newBlockReader(\n                getBlock(blockGroup, liveIndices[i]), positionInBlock,\n                sources[i]);\n            if (r.blockReader !\u003d null) {\n              r.buffer.position(0);\n              m \u003d i;\n              reader \u003d r;\n            }\n          } else {\n            used.set(i);\n            r.buffer.position(0);\n            return i;\n          }\n        }\n      }\n\n      // step3: schedule if find a correct source DN and need to do real read.\n      if (reader !\u003d null) {\n        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n            toRead, corruptionMap);\n        Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n        futures.put(f, m);\n        used.set(m);\n      }\n\n      return -1;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {
            "oldValue": "[used-BitSet, recoverLength-int, corruptionMap-Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e]",
            "newValue": "[used-BitSet, reconstructLen-int, corruptionMap-Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9731. Erasure Coding: Rename BlockECRecoveryCommand to BlockECReconstructionCommand. Contributed by Rakesh R.\n\nChange-Id: I405365a8395770e494b92bfe9651f4f0366d8f28\n",
          "commitDate": "02/02/16 12:32 PM",
          "commitName": "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17",
          "commitAuthor": "zhezhang",
          "commitDateOld": "22/01/16 9:46 AM",
          "commitNameOld": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 11.12,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,61 @@\n-    private int scheduleNewRead(BitSet used, int recoverLength,\n+    private int scheduleNewRead(BitSet used, int reconstructLen,\n         Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n       StripedReader reader \u003d null;\n       // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n       // number of StripedReader, and there may be some source DNs we never \n       // read before, so will try to create StripedReader for one new source DN\n       // and try to read from it. If found, go to step 3.\n       int m \u003d stripedReaders.size();\n       int toRead \u003d 0;\n       while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n         reader \u003d addStripedReader(m, positionInBlock);\n-        toRead \u003d getReadLength(liveIndices[m], recoverLength);\n+        toRead \u003d getReadLength(liveIndices[m], reconstructLen);\n         if (toRead \u003e 0) {\n           if (reader.blockReader \u003d\u003d null) {\n             reader \u003d null;\n             m++;\n           }\n         } else {\n           used.set(m);\n           return m;\n         }\n       }\n \n       // step2: if there is no new source DN we can use, try to find a source \n       // DN we ever read from but because some reason, e.g., slow, it\n       // is not in the success DN list at the begin of this iteration, so \n       // we have not tried it in this iteration. Now we have a chance to \n       // revisit it again.\n       for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n         if (!used.get(i)) {\n           StripedReader r \u003d stripedReaders.get(i);\n-          toRead \u003d getReadLength(liveIndices[i], recoverLength);\n+          toRead \u003d getReadLength(liveIndices[i], reconstructLen);\n           if (toRead \u003e 0) {\n             closeBlockReader(r.blockReader);\n             r.blockReader \u003d newBlockReader(\n                 getBlock(blockGroup, liveIndices[i]), positionInBlock,\n                 sources[i]);\n             if (r.blockReader !\u003d null) {\n               r.buffer.position(0);\n               m \u003d i;\n               reader \u003d r;\n             }\n           } else {\n             used.set(i);\n             r.buffer.position(0);\n             return i;\n           }\n         }\n       }\n \n       // step3: schedule if find a correct source DN and need to do real read.\n       if (reader !\u003d null) {\n         Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n             toRead, corruptionMap);\n         Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n         futures.put(f, m);\n         used.set(m);\n       }\n \n       return -1;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private int scheduleNewRead(BitSet used, int reconstructLen,\n        Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n      StripedReader reader \u003d null;\n      // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n      // number of StripedReader, and there may be some source DNs we never \n      // read before, so will try to create StripedReader for one new source DN\n      // and try to read from it. If found, go to step 3.\n      int m \u003d stripedReaders.size();\n      int toRead \u003d 0;\n      while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n        reader \u003d addStripedReader(m, positionInBlock);\n        toRead \u003d getReadLength(liveIndices[m], reconstructLen);\n        if (toRead \u003e 0) {\n          if (reader.blockReader \u003d\u003d null) {\n            reader \u003d null;\n            m++;\n          }\n        } else {\n          used.set(m);\n          return m;\n        }\n      }\n\n      // step2: if there is no new source DN we can use, try to find a source \n      // DN we ever read from but because some reason, e.g., slow, it\n      // is not in the success DN list at the begin of this iteration, so \n      // we have not tried it in this iteration. Now we have a chance to \n      // revisit it again.\n      for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n        if (!used.get(i)) {\n          StripedReader r \u003d stripedReaders.get(i);\n          toRead \u003d getReadLength(liveIndices[i], reconstructLen);\n          if (toRead \u003e 0) {\n            closeBlockReader(r.blockReader);\n            r.blockReader \u003d newBlockReader(\n                getBlock(blockGroup, liveIndices[i]), positionInBlock,\n                sources[i]);\n            if (r.blockReader !\u003d null) {\n              r.buffer.position(0);\n              m \u003d i;\n              reader \u003d r;\n            }\n          } else {\n            used.set(i);\n            r.buffer.position(0);\n            return i;\n          }\n        }\n      }\n\n      // step3: schedule if find a correct source DN and need to do real read.\n      if (reader !\u003d null) {\n        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n            toRead, corruptionMap);\n        Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n        futures.put(f, m);\n        used.set(m);\n      }\n\n      return -1;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {}
        }
      ]
    },
    "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9646. ErasureCodingWorker may fail when recovering data blocks with length less than the first internal block. Contributed by Jing Zhao.\n",
      "commitDate": "22/01/16 9:46 AM",
      "commitName": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9646. ErasureCodingWorker may fail when recovering data blocks with length less than the first internal block. Contributed by Jing Zhao.\n",
          "commitDate": "22/01/16 9:46 AM",
          "commitName": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "21/12/15 10:47 PM",
          "commitNameOld": "70d6f201260086a3f12beaa317fede2a99639fef",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 31.46,
          "commitsBetweenForRepo": 179,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,61 @@\n-    private int scheduleNewRead(BitSet used) {\n+    private int scheduleNewRead(BitSet used, int recoverLength,\n+        Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n       StripedReader reader \u003d null;\n       // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n       // number of StripedReader, and there may be some source DNs we never \n       // read before, so will try to create StripedReader for one new source DN\n       // and try to read from it. If found, go to step 3.\n       int m \u003d stripedReaders.size();\n+      int toRead \u003d 0;\n       while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n         reader \u003d addStripedReader(m, positionInBlock);\n-        if (getReadLength(liveIndices[m]) \u003e 0) {\n+        toRead \u003d getReadLength(liveIndices[m], recoverLength);\n+        if (toRead \u003e 0) {\n           if (reader.blockReader \u003d\u003d null) {\n             reader \u003d null;\n             m++;\n           }\n         } else {\n           used.set(m);\n           return m;\n         }\n       }\n \n       // step2: if there is no new source DN we can use, try to find a source \n       // DN we ever read from but because some reason, e.g., slow, it\n       // is not in the success DN list at the begin of this iteration, so \n       // we have not tried it in this iteration. Now we have a chance to \n       // revisit it again.\n       for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n         if (!used.get(i)) {\n           StripedReader r \u003d stripedReaders.get(i);\n-          if (getReadLength(liveIndices[i]) \u003e 0) {\n+          toRead \u003d getReadLength(liveIndices[i], recoverLength);\n+          if (toRead \u003e 0) {\n             closeBlockReader(r.blockReader);\n             r.blockReader \u003d newBlockReader(\n                 getBlock(blockGroup, liveIndices[i]), positionInBlock,\n                 sources[i]);\n             if (r.blockReader !\u003d null) {\n+              r.buffer.position(0);\n               m \u003d i;\n               reader \u003d r;\n             }\n           } else {\n             used.set(i);\n             r.buffer.position(0);\n             return i;\n           }\n         }\n       }\n \n       // step3: schedule if find a correct source DN and need to do real read.\n       if (reader !\u003d null) {\n-        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(\n-            reader.blockReader, reader.buffer);\n+        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n+            toRead, corruptionMap);\n         Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n         futures.put(f, m);\n         used.set(m);\n       }\n \n       return -1;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private int scheduleNewRead(BitSet used, int recoverLength,\n        Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n      StripedReader reader \u003d null;\n      // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n      // number of StripedReader, and there may be some source DNs we never \n      // read before, so will try to create StripedReader for one new source DN\n      // and try to read from it. If found, go to step 3.\n      int m \u003d stripedReaders.size();\n      int toRead \u003d 0;\n      while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n        reader \u003d addStripedReader(m, positionInBlock);\n        toRead \u003d getReadLength(liveIndices[m], recoverLength);\n        if (toRead \u003e 0) {\n          if (reader.blockReader \u003d\u003d null) {\n            reader \u003d null;\n            m++;\n          }\n        } else {\n          used.set(m);\n          return m;\n        }\n      }\n\n      // step2: if there is no new source DN we can use, try to find a source \n      // DN we ever read from but because some reason, e.g., slow, it\n      // is not in the success DN list at the begin of this iteration, so \n      // we have not tried it in this iteration. Now we have a chance to \n      // revisit it again.\n      for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n        if (!used.get(i)) {\n          StripedReader r \u003d stripedReaders.get(i);\n          toRead \u003d getReadLength(liveIndices[i], recoverLength);\n          if (toRead \u003e 0) {\n            closeBlockReader(r.blockReader);\n            r.blockReader \u003d newBlockReader(\n                getBlock(blockGroup, liveIndices[i]), positionInBlock,\n                sources[i]);\n            if (r.blockReader !\u003d null) {\n              r.buffer.position(0);\n              m \u003d i;\n              reader \u003d r;\n            }\n          } else {\n            used.set(i);\n            r.buffer.position(0);\n            return i;\n          }\n        }\n      }\n\n      // step3: schedule if find a correct source DN and need to do real read.\n      if (reader !\u003d null) {\n        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n            toRead, corruptionMap);\n        Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n        futures.put(f, m);\n        used.set(m);\n      }\n\n      return -1;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {
            "oldValue": "[used-BitSet]",
            "newValue": "[used-BitSet, recoverLength-int, corruptionMap-Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9646. ErasureCodingWorker may fail when recovering data blocks with length less than the first internal block. Contributed by Jing Zhao.\n",
          "commitDate": "22/01/16 9:46 AM",
          "commitName": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "21/12/15 10:47 PM",
          "commitNameOld": "70d6f201260086a3f12beaa317fede2a99639fef",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 31.46,
          "commitsBetweenForRepo": 179,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,61 @@\n-    private int scheduleNewRead(BitSet used) {\n+    private int scheduleNewRead(BitSet used, int recoverLength,\n+        Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n       StripedReader reader \u003d null;\n       // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n       // number of StripedReader, and there may be some source DNs we never \n       // read before, so will try to create StripedReader for one new source DN\n       // and try to read from it. If found, go to step 3.\n       int m \u003d stripedReaders.size();\n+      int toRead \u003d 0;\n       while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n         reader \u003d addStripedReader(m, positionInBlock);\n-        if (getReadLength(liveIndices[m]) \u003e 0) {\n+        toRead \u003d getReadLength(liveIndices[m], recoverLength);\n+        if (toRead \u003e 0) {\n           if (reader.blockReader \u003d\u003d null) {\n             reader \u003d null;\n             m++;\n           }\n         } else {\n           used.set(m);\n           return m;\n         }\n       }\n \n       // step2: if there is no new source DN we can use, try to find a source \n       // DN we ever read from but because some reason, e.g., slow, it\n       // is not in the success DN list at the begin of this iteration, so \n       // we have not tried it in this iteration. Now we have a chance to \n       // revisit it again.\n       for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n         if (!used.get(i)) {\n           StripedReader r \u003d stripedReaders.get(i);\n-          if (getReadLength(liveIndices[i]) \u003e 0) {\n+          toRead \u003d getReadLength(liveIndices[i], recoverLength);\n+          if (toRead \u003e 0) {\n             closeBlockReader(r.blockReader);\n             r.blockReader \u003d newBlockReader(\n                 getBlock(blockGroup, liveIndices[i]), positionInBlock,\n                 sources[i]);\n             if (r.blockReader !\u003d null) {\n+              r.buffer.position(0);\n               m \u003d i;\n               reader \u003d r;\n             }\n           } else {\n             used.set(i);\n             r.buffer.position(0);\n             return i;\n           }\n         }\n       }\n \n       // step3: schedule if find a correct source DN and need to do real read.\n       if (reader !\u003d null) {\n-        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(\n-            reader.blockReader, reader.buffer);\n+        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n+            toRead, corruptionMap);\n         Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n         futures.put(f, m);\n         used.set(m);\n       }\n \n       return -1;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private int scheduleNewRead(BitSet used, int recoverLength,\n        Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptionMap) {\n      StripedReader reader \u003d null;\n      // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n      // number of StripedReader, and there may be some source DNs we never \n      // read before, so will try to create StripedReader for one new source DN\n      // and try to read from it. If found, go to step 3.\n      int m \u003d stripedReaders.size();\n      int toRead \u003d 0;\n      while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n        reader \u003d addStripedReader(m, positionInBlock);\n        toRead \u003d getReadLength(liveIndices[m], recoverLength);\n        if (toRead \u003e 0) {\n          if (reader.blockReader \u003d\u003d null) {\n            reader \u003d null;\n            m++;\n          }\n        } else {\n          used.set(m);\n          return m;\n        }\n      }\n\n      // step2: if there is no new source DN we can use, try to find a source \n      // DN we ever read from but because some reason, e.g., slow, it\n      // is not in the success DN list at the begin of this iteration, so \n      // we have not tried it in this iteration. Now we have a chance to \n      // revisit it again.\n      for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n        if (!used.get(i)) {\n          StripedReader r \u003d stripedReaders.get(i);\n          toRead \u003d getReadLength(liveIndices[i], recoverLength);\n          if (toRead \u003e 0) {\n            closeBlockReader(r.blockReader);\n            r.blockReader \u003d newBlockReader(\n                getBlock(blockGroup, liveIndices[i]), positionInBlock,\n                sources[i]);\n            if (r.blockReader !\u003d null) {\n              r.buffer.position(0);\n              m \u003d i;\n              reader \u003d r;\n            }\n          } else {\n            used.set(i);\n            r.buffer.position(0);\n            return i;\n          }\n        }\n      }\n\n      // step3: schedule if find a correct source DN and need to do real read.\n      if (reader !\u003d null) {\n        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(reader, reader.buffer,\n            toRead, corruptionMap);\n        Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n        futures.put(f, m);\n        used.set(m);\n      }\n\n      return -1;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {}
        }
      ]
    },
    "a31eada33a598ebf9f78e48a3ab1ed031b9bbd27": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-8328. Follow-on to update decode for DataNode striped blocks reconstruction. (yliu)\n",
      "commitDate": "03/06/15 11:41 PM",
      "commitName": "a31eada33a598ebf9f78e48a3ab1ed031b9bbd27",
      "commitAuthor": "yliu",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-8328. Follow-on to update decode for DataNode striped blocks reconstruction. (yliu)\n",
          "commitDate": "03/06/15 11:41 PM",
          "commitName": "a31eada33a598ebf9f78e48a3ab1ed031b9bbd27",
          "commitAuthor": "yliu",
          "commitDateOld": "26/05/15 12:07 PM",
          "commitNameOld": "b30e96bfb4b8ce5537671c97f0c9c56cd195bfdc",
          "commitAuthorOld": "Kai Zheng",
          "daysBetweenCommits": 8.48,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,56 @@\n-    private void scheduleNewRead(BitSet used) {\n+    private int scheduleNewRead(BitSet used) {\n       StripedReader reader \u003d null;\n+      // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n+      // number of StripedReader, and there may be some source DNs we never \n+      // read before, so will try to create StripedReader for one new source DN\n+      // and try to read from it. If found, go to step 3.\n       int m \u003d stripedReaders.size();\n-      while (m \u003c sources.length \u0026\u0026 reader \u003d\u003d null) {\n-        reader \u003d new StripedReader(liveIndices[m]);\n-        BlockReader blockReader \u003d newBlockReader(\n-            getBlock(blockGroup, liveIndices[m]), positionInBlock, sources[m]);\n-        stripedReaders.add(reader);\n-        if (blockReader !\u003d null) {\n-          assert blockReader.getDataChecksum().equals(checksum);\n-          reader.blockReader \u003d blockReader;\n-          reader.buffer \u003d ByteBuffer.allocate(bufferSize);\n+      while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n+        reader \u003d addStripedReader(m, positionInBlock);\n+        if (getReadLength(liveIndices[m]) \u003e 0) {\n+          if (reader.blockReader \u003d\u003d null) {\n+            reader \u003d null;\n+            m++;\n+          }\n         } else {\n-          m++;\n-          reader \u003d null;\n+          used.set(m);\n+          return m;\n         }\n       }\n \n+      // step2: if there is no new source DN we can use, try to find a source \n+      // DN we ever read from but because some reason, e.g., slow, it\n+      // is not in the success DN list at the begin of this iteration, so \n+      // we have not tried it in this iteration. Now we have a chance to \n+      // revisit it again.\n       for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n-        StripedReader r \u003d stripedReaders.get(i);\n-        if (r.blockReader !\u003d null \u0026\u0026 !used.get(i)) {\n-          closeBlockReader(r.blockReader);\n-          r.blockReader \u003d newBlockReader(\n-              getBlock(blockGroup, liveIndices[i]), positionInBlock,\n-              sources[i]);\n-          if (r.blockReader !\u003d null) {\n-            m \u003d i;\n-            reader \u003d r;\n+        if (!used.get(i)) {\n+          StripedReader r \u003d stripedReaders.get(i);\n+          if (getReadLength(liveIndices[i]) \u003e 0) {\n+            closeBlockReader(r.blockReader);\n+            r.blockReader \u003d newBlockReader(\n+                getBlock(blockGroup, liveIndices[i]), positionInBlock,\n+                sources[i]);\n+            if (r.blockReader !\u003d null) {\n+              m \u003d i;\n+              reader \u003d r;\n+            }\n+          } else {\n+            used.set(i);\n+            r.buffer.position(0);\n+            return i;\n           }\n         }\n       }\n \n+      // step3: schedule if find a correct source DN and need to do real read.\n       if (reader !\u003d null) {\n         Callable\u003cVoid\u003e readCallable \u003d readFromBlock(\n             reader.blockReader, reader.buffer);\n         Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n         futures.put(f, m);\n         used.set(m);\n       }\n+\n+      return -1;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private int scheduleNewRead(BitSet used) {\n      StripedReader reader \u003d null;\n      // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n      // number of StripedReader, and there may be some source DNs we never \n      // read before, so will try to create StripedReader for one new source DN\n      // and try to read from it. If found, go to step 3.\n      int m \u003d stripedReaders.size();\n      while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n        reader \u003d addStripedReader(m, positionInBlock);\n        if (getReadLength(liveIndices[m]) \u003e 0) {\n          if (reader.blockReader \u003d\u003d null) {\n            reader \u003d null;\n            m++;\n          }\n        } else {\n          used.set(m);\n          return m;\n        }\n      }\n\n      // step2: if there is no new source DN we can use, try to find a source \n      // DN we ever read from but because some reason, e.g., slow, it\n      // is not in the success DN list at the begin of this iteration, so \n      // we have not tried it in this iteration. Now we have a chance to \n      // revisit it again.\n      for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n        if (!used.get(i)) {\n          StripedReader r \u003d stripedReaders.get(i);\n          if (getReadLength(liveIndices[i]) \u003e 0) {\n            closeBlockReader(r.blockReader);\n            r.blockReader \u003d newBlockReader(\n                getBlock(blockGroup, liveIndices[i]), positionInBlock,\n                sources[i]);\n            if (r.blockReader !\u003d null) {\n              m \u003d i;\n              reader \u003d r;\n            }\n          } else {\n            used.set(i);\n            r.buffer.position(0);\n            return i;\n          }\n        }\n      }\n\n      // step3: schedule if find a correct source DN and need to do real read.\n      if (reader !\u003d null) {\n        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(\n            reader.blockReader, reader.buffer);\n        Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n        futures.put(f, m);\n        used.set(m);\n      }\n\n      return -1;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "int"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8328. Follow-on to update decode for DataNode striped blocks reconstruction. (yliu)\n",
          "commitDate": "03/06/15 11:41 PM",
          "commitName": "a31eada33a598ebf9f78e48a3ab1ed031b9bbd27",
          "commitAuthor": "yliu",
          "commitDateOld": "26/05/15 12:07 PM",
          "commitNameOld": "b30e96bfb4b8ce5537671c97f0c9c56cd195bfdc",
          "commitAuthorOld": "Kai Zheng",
          "daysBetweenCommits": 8.48,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,56 @@\n-    private void scheduleNewRead(BitSet used) {\n+    private int scheduleNewRead(BitSet used) {\n       StripedReader reader \u003d null;\n+      // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n+      // number of StripedReader, and there may be some source DNs we never \n+      // read before, so will try to create StripedReader for one new source DN\n+      // and try to read from it. If found, go to step 3.\n       int m \u003d stripedReaders.size();\n-      while (m \u003c sources.length \u0026\u0026 reader \u003d\u003d null) {\n-        reader \u003d new StripedReader(liveIndices[m]);\n-        BlockReader blockReader \u003d newBlockReader(\n-            getBlock(blockGroup, liveIndices[m]), positionInBlock, sources[m]);\n-        stripedReaders.add(reader);\n-        if (blockReader !\u003d null) {\n-          assert blockReader.getDataChecksum().equals(checksum);\n-          reader.blockReader \u003d blockReader;\n-          reader.buffer \u003d ByteBuffer.allocate(bufferSize);\n+      while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n+        reader \u003d addStripedReader(m, positionInBlock);\n+        if (getReadLength(liveIndices[m]) \u003e 0) {\n+          if (reader.blockReader \u003d\u003d null) {\n+            reader \u003d null;\n+            m++;\n+          }\n         } else {\n-          m++;\n-          reader \u003d null;\n+          used.set(m);\n+          return m;\n         }\n       }\n \n+      // step2: if there is no new source DN we can use, try to find a source \n+      // DN we ever read from but because some reason, e.g., slow, it\n+      // is not in the success DN list at the begin of this iteration, so \n+      // we have not tried it in this iteration. Now we have a chance to \n+      // revisit it again.\n       for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n-        StripedReader r \u003d stripedReaders.get(i);\n-        if (r.blockReader !\u003d null \u0026\u0026 !used.get(i)) {\n-          closeBlockReader(r.blockReader);\n-          r.blockReader \u003d newBlockReader(\n-              getBlock(blockGroup, liveIndices[i]), positionInBlock,\n-              sources[i]);\n-          if (r.blockReader !\u003d null) {\n-            m \u003d i;\n-            reader \u003d r;\n+        if (!used.get(i)) {\n+          StripedReader r \u003d stripedReaders.get(i);\n+          if (getReadLength(liveIndices[i]) \u003e 0) {\n+            closeBlockReader(r.blockReader);\n+            r.blockReader \u003d newBlockReader(\n+                getBlock(blockGroup, liveIndices[i]), positionInBlock,\n+                sources[i]);\n+            if (r.blockReader !\u003d null) {\n+              m \u003d i;\n+              reader \u003d r;\n+            }\n+          } else {\n+            used.set(i);\n+            r.buffer.position(0);\n+            return i;\n           }\n         }\n       }\n \n+      // step3: schedule if find a correct source DN and need to do real read.\n       if (reader !\u003d null) {\n         Callable\u003cVoid\u003e readCallable \u003d readFromBlock(\n             reader.blockReader, reader.buffer);\n         Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n         futures.put(f, m);\n         used.set(m);\n       }\n+\n+      return -1;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private int scheduleNewRead(BitSet used) {\n      StripedReader reader \u003d null;\n      // step1: initially we may only have \u003ccode\u003eminRequiredSources\u003c/code\u003e\n      // number of StripedReader, and there may be some source DNs we never \n      // read before, so will try to create StripedReader for one new source DN\n      // and try to read from it. If found, go to step 3.\n      int m \u003d stripedReaders.size();\n      while (reader \u003d\u003d null \u0026\u0026 m \u003c sources.length) {\n        reader \u003d addStripedReader(m, positionInBlock);\n        if (getReadLength(liveIndices[m]) \u003e 0) {\n          if (reader.blockReader \u003d\u003d null) {\n            reader \u003d null;\n            m++;\n          }\n        } else {\n          used.set(m);\n          return m;\n        }\n      }\n\n      // step2: if there is no new source DN we can use, try to find a source \n      // DN we ever read from but because some reason, e.g., slow, it\n      // is not in the success DN list at the begin of this iteration, so \n      // we have not tried it in this iteration. Now we have a chance to \n      // revisit it again.\n      for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n        if (!used.get(i)) {\n          StripedReader r \u003d stripedReaders.get(i);\n          if (getReadLength(liveIndices[i]) \u003e 0) {\n            closeBlockReader(r.blockReader);\n            r.blockReader \u003d newBlockReader(\n                getBlock(blockGroup, liveIndices[i]), positionInBlock,\n                sources[i]);\n            if (r.blockReader !\u003d null) {\n              m \u003d i;\n              reader \u003d r;\n            }\n          } else {\n            used.set(i);\n            r.buffer.position(0);\n            return i;\n          }\n        }\n      }\n\n      // step3: schedule if find a correct source DN and need to do real read.\n      if (reader !\u003d null) {\n        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(\n            reader.blockReader, reader.buffer);\n        Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n        futures.put(f, m);\n        used.set(m);\n      }\n\n      return -1;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {}
        }
      ]
    },
    "6616de24cb14f1c2d0d6568fd4382062618834bd": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7348. Erasure Coding: DataNode reconstruct striped blocks. Contributed by Yi Liu.\n",
      "commitDate": "26/05/15 12:01 PM",
      "commitName": "6616de24cb14f1c2d0d6568fd4382062618834bd",
      "commitAuthor": "Zhe Zhang",
      "diff": "@@ -0,0 +1,40 @@\n+    private void scheduleNewRead(BitSet used) {\n+      StripedReader reader \u003d null;\n+      int m \u003d stripedReaders.size();\n+      while (m \u003c sources.length \u0026\u0026 reader \u003d\u003d null) {\n+        reader \u003d new StripedReader(liveIndices[m]);\n+        BlockReader blockReader \u003d newBlockReader(\n+            getBlock(blockGroup, liveIndices[m]), positionInBlock, sources[m]);\n+        stripedReaders.add(reader);\n+        if (blockReader !\u003d null) {\n+          assert blockReader.getDataChecksum().equals(checksum);\n+          reader.blockReader \u003d blockReader;\n+          reader.buffer \u003d ByteBuffer.allocate(bufferSize);\n+        } else {\n+          m++;\n+          reader \u003d null;\n+        }\n+      }\n+\n+      for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n+        StripedReader r \u003d stripedReaders.get(i);\n+        if (r.blockReader !\u003d null \u0026\u0026 !used.get(i)) {\n+          closeBlockReader(r.blockReader);\n+          r.blockReader \u003d newBlockReader(\n+              getBlock(blockGroup, liveIndices[i]), positionInBlock,\n+              sources[i]);\n+          if (r.blockReader !\u003d null) {\n+            m \u003d i;\n+            reader \u003d r;\n+          }\n+        }\n+      }\n+\n+      if (reader !\u003d null) {\n+        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(\n+            reader.blockReader, reader.buffer);\n+        Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n+        futures.put(f, m);\n+        used.set(m);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void scheduleNewRead(BitSet used) {\n      StripedReader reader \u003d null;\n      int m \u003d stripedReaders.size();\n      while (m \u003c sources.length \u0026\u0026 reader \u003d\u003d null) {\n        reader \u003d new StripedReader(liveIndices[m]);\n        BlockReader blockReader \u003d newBlockReader(\n            getBlock(blockGroup, liveIndices[m]), positionInBlock, sources[m]);\n        stripedReaders.add(reader);\n        if (blockReader !\u003d null) {\n          assert blockReader.getDataChecksum().equals(checksum);\n          reader.blockReader \u003d blockReader;\n          reader.buffer \u003d ByteBuffer.allocate(bufferSize);\n        } else {\n          m++;\n          reader \u003d null;\n        }\n      }\n\n      for (int i \u003d 0; reader \u003d\u003d null \u0026\u0026 i \u003c stripedReaders.size(); i++) {\n        StripedReader r \u003d stripedReaders.get(i);\n        if (r.blockReader !\u003d null \u0026\u0026 !used.get(i)) {\n          closeBlockReader(r.blockReader);\n          r.blockReader \u003d newBlockReader(\n              getBlock(blockGroup, liveIndices[i]), positionInBlock,\n              sources[i]);\n          if (r.blockReader !\u003d null) {\n            m \u003d i;\n            reader \u003d r;\n          }\n        }\n      }\n\n      if (reader !\u003d null) {\n        Callable\u003cVoid\u003e readCallable \u003d readFromBlock(\n            reader.blockReader, reader.buffer);\n        Future\u003cVoid\u003e f \u003d readService.submit(readCallable);\n        futures.put(f, m);\n        used.set(m);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java"
    }
  }
}