{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ObjectWritable.java",
  "functionName": "tryInstantiateProtobuf",
  "functionId": "tryInstantiateProtobuf___protoClass-Class__?____dataIn-DataInput",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java",
  "functionStartLine": 312,
  "functionEndLine": 350,
  "numCommitsSeen": 6,
  "timeTaken": 873,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "7728f03f0861b99070a3774e95960925a3105b20"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "7728f03f0861b99070a3774e95960925a3105b20": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static Message tryInstantiateProtobuf(\n      Class\u003c?\u003e protoClass,\n      DataInput dataIn) throws IOException {\n\n    try {\n      if (dataIn instanceof InputStream) {\n        // We can use the built-in parseDelimitedFrom and not have to re-copy\n        // the data\n        Method parseMethod \u003d getStaticProtobufMethod(protoClass,\n            \"parseDelimitedFrom\", InputStream.class);\n        return (Message)parseMethod.invoke(null, (InputStream)dataIn);\n      } else {\n        // Have to read it into a buffer first, since protobuf doesn\u0027t deal\n        // with the DataInput interface directly.\n        \n        // Read the size delimiter that writeDelimitedTo writes\n        int size \u003d ProtoUtil.readRawVarint32(dataIn);\n        if (size \u003c 0) {\n          throw new IOException(\"Invalid size: \" + size);\n        }\n      \n        byte[] data \u003d new byte[size];\n        dataIn.readFully(data);\n        Method parseMethod \u003d getStaticProtobufMethod(protoClass,\n            \"parseFrom\", byte[].class);\n        return (Message)parseMethod.invoke(null, data);\n      }\n    } catch (InvocationTargetException e) {\n      \n      if (e.getCause() instanceof IOException) {\n        throw (IOException)e.getCause();\n      } else {\n        throw new IOException(e.getCause());\n      }\n    } catch (IllegalAccessException iae) {\n      throw new AssertionError(\"Could not access parse method in \" +\n          protoClass);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static Message tryInstantiateProtobuf(\n      Class\u003c?\u003e protoClass,\n      DataInput dataIn) throws IOException {\n\n    try {\n      if (dataIn instanceof InputStream) {\n        // We can use the built-in parseDelimitedFrom and not have to re-copy\n        // the data\n        Method parseMethod \u003d getStaticProtobufMethod(protoClass,\n            \"parseDelimitedFrom\", InputStream.class);\n        return (Message)parseMethod.invoke(null, (InputStream)dataIn);\n      } else {\n        // Have to read it into a buffer first, since protobuf doesn\u0027t deal\n        // with the DataInput interface directly.\n        \n        // Read the size delimiter that writeDelimitedTo writes\n        int size \u003d ProtoUtil.readRawVarint32(dataIn);\n        if (size \u003c 0) {\n          throw new IOException(\"Invalid size: \" + size);\n        }\n      \n        byte[] data \u003d new byte[size];\n        dataIn.readFully(data);\n        Method parseMethod \u003d getStaticProtobufMethod(protoClass,\n            \"parseFrom\", byte[].class);\n        return (Message)parseMethod.invoke(null, data);\n      }\n    } catch (InvocationTargetException e) {\n      \n      if (e.getCause() instanceof IOException) {\n        throw (IOException)e.getCause();\n      } else {\n        throw new IOException(e.getCause());\n      }\n    } catch (IllegalAccessException iae) {\n      throw new AssertionError(\"Could not access parse method in \" +\n          protoClass);\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/ObjectWritable.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/ObjectWritable.java"
      }
    },
    "7728f03f0861b99070a3774e95960925a3105b20": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7379. Add the ability to serialize and deserialize protocol buffers in ObjectWritable. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1136222 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/06/11 3:21 PM",
      "commitName": "7728f03f0861b99070a3774e95960925a3105b20",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,39 @@\n+  private static Message tryInstantiateProtobuf(\n+      Class\u003c?\u003e protoClass,\n+      DataInput dataIn) throws IOException {\n+\n+    try {\n+      if (dataIn instanceof InputStream) {\n+        // We can use the built-in parseDelimitedFrom and not have to re-copy\n+        // the data\n+        Method parseMethod \u003d getStaticProtobufMethod(protoClass,\n+            \"parseDelimitedFrom\", InputStream.class);\n+        return (Message)parseMethod.invoke(null, (InputStream)dataIn);\n+      } else {\n+        // Have to read it into a buffer first, since protobuf doesn\u0027t deal\n+        // with the DataInput interface directly.\n+        \n+        // Read the size delimiter that writeDelimitedTo writes\n+        int size \u003d ProtoUtil.readRawVarint32(dataIn);\n+        if (size \u003c 0) {\n+          throw new IOException(\"Invalid size: \" + size);\n+        }\n+      \n+        byte[] data \u003d new byte[size];\n+        dataIn.readFully(data);\n+        Method parseMethod \u003d getStaticProtobufMethod(protoClass,\n+            \"parseFrom\", byte[].class);\n+        return (Message)parseMethod.invoke(null, data);\n+      }\n+    } catch (InvocationTargetException e) {\n+      \n+      if (e.getCause() instanceof IOException) {\n+        throw (IOException)e.getCause();\n+      } else {\n+        throw new IOException(e.getCause());\n+      }\n+    } catch (IllegalAccessException iae) {\n+      throw new AssertionError(\"Could not access parse method in \" +\n+          protoClass);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static Message tryInstantiateProtobuf(\n      Class\u003c?\u003e protoClass,\n      DataInput dataIn) throws IOException {\n\n    try {\n      if (dataIn instanceof InputStream) {\n        // We can use the built-in parseDelimitedFrom and not have to re-copy\n        // the data\n        Method parseMethod \u003d getStaticProtobufMethod(protoClass,\n            \"parseDelimitedFrom\", InputStream.class);\n        return (Message)parseMethod.invoke(null, (InputStream)dataIn);\n      } else {\n        // Have to read it into a buffer first, since protobuf doesn\u0027t deal\n        // with the DataInput interface directly.\n        \n        // Read the size delimiter that writeDelimitedTo writes\n        int size \u003d ProtoUtil.readRawVarint32(dataIn);\n        if (size \u003c 0) {\n          throw new IOException(\"Invalid size: \" + size);\n        }\n      \n        byte[] data \u003d new byte[size];\n        dataIn.readFully(data);\n        Method parseMethod \u003d getStaticProtobufMethod(protoClass,\n            \"parseFrom\", byte[].class);\n        return (Message)parseMethod.invoke(null, data);\n      }\n    } catch (InvocationTargetException e) {\n      \n      if (e.getCause() instanceof IOException) {\n        throw (IOException)e.getCause();\n      } else {\n        throw new IOException(e.getCause());\n      }\n    } catch (IllegalAccessException iae) {\n      throw new AssertionError(\"Could not access parse method in \" +\n          protoClass);\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/io/ObjectWritable.java"
    }
  }
}