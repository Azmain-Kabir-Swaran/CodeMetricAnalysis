{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RLESparseResourceAllocation.java",
  "functionName": "getRangeOverlapping",
  "functionId": "getRangeOverlapping___start-long__end-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java",
  "functionStartLine": 489,
  "functionEndLine": 509,
  "numCommitsSeen": 11,
  "timeTaken": 1699,
  "changeHistory": [
    "3a154f75ed85d864b3ffd35818992418f2b6aa59",
    "da1016365aba1cee9c06771ab142d077379f27af"
  ],
  "changeHistoryShort": {
    "3a154f75ed85d864b3ffd35818992418f2b6aa59": "Ybodychange",
    "da1016365aba1cee9c06771ab142d077379f27af": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3a154f75ed85d864b3ffd35818992418f2b6aa59": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4525. Fix bug in RLESparseResourceAllocation.getRangeOverlapping(). (Ishai Menache and Carlo Curino via asuresh)\n",
      "commitDate": "06/06/16 9:18 PM",
      "commitName": "3a154f75ed85d864b3ffd35818992418f2b6aa59",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "21/11/15 9:59 AM",
      "commitNameOld": "da1016365aba1cee9c06771ab142d077379f27af",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 198.43,
      "commitsBetweenForRepo": 1272,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,25 @@\n   public RLESparseResourceAllocation getRangeOverlapping(long start, long end) {\n     readLock.lock();\n     try {\n       NavigableMap\u003cLong, Resource\u003e a \u003d this.getCumulative();\n \n       if (a !\u003d null \u0026\u0026 !a.isEmpty()) {\n         // include the portion of previous entry that overlaps start\n         if (start \u003e a.firstKey()) {\n           long previous \u003d a.floorKey(start);\n           a \u003d a.tailMap(previous, true);\n         }\n-        a \u003d a.headMap(end, true);\n+\n+        if (end \u003c a.lastKey()) {\n+          a \u003d a.headMap(end, true);\n+        }\n+\n       }\n       RLESparseResourceAllocation ret \u003d\n           new RLESparseResourceAllocation(a, resourceCalculator);\n       return ret;\n     } finally {\n       readLock.unlock();\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RLESparseResourceAllocation getRangeOverlapping(long start, long end) {\n    readLock.lock();\n    try {\n      NavigableMap\u003cLong, Resource\u003e a \u003d this.getCumulative();\n\n      if (a !\u003d null \u0026\u0026 !a.isEmpty()) {\n        // include the portion of previous entry that overlaps start\n        if (start \u003e a.firstKey()) {\n          long previous \u003d a.floorKey(start);\n          a \u003d a.tailMap(previous, true);\n        }\n\n        if (end \u003c a.lastKey()) {\n          a \u003d a.headMap(end, true);\n        }\n\n      }\n      RLESparseResourceAllocation ret \u003d\n          new RLESparseResourceAllocation(a, resourceCalculator);\n      return ret;\n    } finally {\n      readLock.unlock();\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java",
      "extendedDetails": {}
    },
    "da1016365aba1cee9c06771ab142d077379f27af": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3454. Add efficient merge operation to RLESparseResourceAllocation (Carlo Curino via asuresh)\n",
      "commitDate": "21/11/15 9:59 AM",
      "commitName": "da1016365aba1cee9c06771ab142d077379f27af",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,21 @@\n+  public RLESparseResourceAllocation getRangeOverlapping(long start, long end) {\n+    readLock.lock();\n+    try {\n+      NavigableMap\u003cLong, Resource\u003e a \u003d this.getCumulative();\n+\n+      if (a !\u003d null \u0026\u0026 !a.isEmpty()) {\n+        // include the portion of previous entry that overlaps start\n+        if (start \u003e a.firstKey()) {\n+          long previous \u003d a.floorKey(start);\n+          a \u003d a.tailMap(previous, true);\n+        }\n+        a \u003d a.headMap(end, true);\n+      }\n+      RLESparseResourceAllocation ret \u003d\n+          new RLESparseResourceAllocation(a, resourceCalculator);\n+      return ret;\n+    } finally {\n+      readLock.unlock();\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RLESparseResourceAllocation getRangeOverlapping(long start, long end) {\n    readLock.lock();\n    try {\n      NavigableMap\u003cLong, Resource\u003e a \u003d this.getCumulative();\n\n      if (a !\u003d null \u0026\u0026 !a.isEmpty()) {\n        // include the portion of previous entry that overlaps start\n        if (start \u003e a.firstKey()) {\n          long previous \u003d a.floorKey(start);\n          a \u003d a.tailMap(previous, true);\n        }\n        a \u003d a.headMap(end, true);\n      }\n      RLESparseResourceAllocation ret \u003d\n          new RLESparseResourceAllocation(a, resourceCalculator);\n      return ret;\n    } finally {\n      readLock.unlock();\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java"
    }
  }
}