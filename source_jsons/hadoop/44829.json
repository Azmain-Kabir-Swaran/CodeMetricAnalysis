{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeCLI.java",
  "functionName": "listDetailedClusterNodes",
  "functionId": "listDetailedClusterNodes___nodeStates-Set__NodeState__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
  "functionStartLine": 202,
  "functionEndLine": 253,
  "numCommitsSeen": 28,
  "timeTaken": 864,
  "changeHistory": [
    "a0de7028515eebe1c526cc42808cdbc8ed6b4e2a"
  ],
  "changeHistoryShort": {
    "a0de7028515eebe1c526cc42808cdbc8ed6b4e2a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a0de7028515eebe1c526cc42808cdbc8ed6b4e2a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4290. Add -showDetails option to YARN Nodes CLI to print all nodes reports information. (Sunil G via wangda)\n",
      "commitDate": "21/12/15 11:36 AM",
      "commitName": "a0de7028515eebe1c526cc42808cdbc8ed6b4e2a",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,52 @@\n+  private void listDetailedClusterNodes(Set\u003cNodeState\u003e nodeStates)\n+      throws YarnException, IOException {\n+    PrintWriter writer \u003d new PrintWriter(new OutputStreamWriter(sysout,\n+        Charset.forName(\"UTF-8\")));\n+    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports(nodeStates\n+        .toArray(new NodeState[0]));\n+    writer.println(\"Total Nodes:\" + nodesReport.size());\n+    writer.printf(NODES_PATTERN, \"Node-Id\", \"Node-State\", \"Node-Http-Address\",\n+        \"Number-of-Running-Containers\");\n+    for (NodeReport nodeReport : nodesReport) {\n+      writer.printf(NODES_PATTERN, nodeReport.getNodeId(),\n+          nodeReport.getNodeState(), nodeReport.getHttpAddress(),\n+          nodeReport.getNumContainers());\n+      writer.println(\"Detailed Node Information :\");\n+      writer.print(\"\\tConfigured Resources : \");\n+      writer.println(nodeReport.getCapability());\n+      writer.print(\"\\tAllocated Resources : \");\n+      if (nodeReport.getUsed() !\u003d null) {\n+        writer.print(nodeReport.getUsed());\n+      }\n+      writer.println();\n+\n+      writer.print(\"\\tResource Utilization by Node : \");\n+      if (nodeReport.getNodeUtilization() !\u003d null) {\n+        writer.print(\"PMem:\"\n+            + nodeReport.getNodeUtilization().getPhysicalMemory()\n+            + \" MB, VMem:\" + nodeReport.getNodeUtilization().getVirtualMemory()\n+            + \" MB, VCores:\" + nodeReport.getNodeUtilization().getCPU());\n+      }\n+      writer.println();\n+\n+      writer.print(\"\\tResource Utilization by Containers : \");\n+      if (nodeReport.getAggregatedContainersUtilization() !\u003d null) {\n+        writer.print(\"PMem:\"\n+            + nodeReport.getAggregatedContainersUtilization()\n+                .getPhysicalMemory()\n+            + \" MB, VMem:\"\n+            + nodeReport.getAggregatedContainersUtilization()\n+                .getVirtualMemory() + \" MB, VCores:\"\n+            + nodeReport.getAggregatedContainersUtilization().getCPU());\n+      }\n+      writer.println();\n+\n+      writer.print(\"\\tNode-Labels : \");\n+      // Create a List for node labels since we need it get sorted\n+      List\u003cString\u003e nodeLabelsList \u003d new ArrayList\u003cString\u003e(\n+          nodeReport.getNodeLabels());\n+      Collections.sort(nodeLabelsList);\n+      writer.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n+    }\n+    writer.flush();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void listDetailedClusterNodes(Set\u003cNodeState\u003e nodeStates)\n      throws YarnException, IOException {\n    PrintWriter writer \u003d new PrintWriter(new OutputStreamWriter(sysout,\n        Charset.forName(\"UTF-8\")));\n    List\u003cNodeReport\u003e nodesReport \u003d client.getNodeReports(nodeStates\n        .toArray(new NodeState[0]));\n    writer.println(\"Total Nodes:\" + nodesReport.size());\n    writer.printf(NODES_PATTERN, \"Node-Id\", \"Node-State\", \"Node-Http-Address\",\n        \"Number-of-Running-Containers\");\n    for (NodeReport nodeReport : nodesReport) {\n      writer.printf(NODES_PATTERN, nodeReport.getNodeId(),\n          nodeReport.getNodeState(), nodeReport.getHttpAddress(),\n          nodeReport.getNumContainers());\n      writer.println(\"Detailed Node Information :\");\n      writer.print(\"\\tConfigured Resources : \");\n      writer.println(nodeReport.getCapability());\n      writer.print(\"\\tAllocated Resources : \");\n      if (nodeReport.getUsed() !\u003d null) {\n        writer.print(nodeReport.getUsed());\n      }\n      writer.println();\n\n      writer.print(\"\\tResource Utilization by Node : \");\n      if (nodeReport.getNodeUtilization() !\u003d null) {\n        writer.print(\"PMem:\"\n            + nodeReport.getNodeUtilization().getPhysicalMemory()\n            + \" MB, VMem:\" + nodeReport.getNodeUtilization().getVirtualMemory()\n            + \" MB, VCores:\" + nodeReport.getNodeUtilization().getCPU());\n      }\n      writer.println();\n\n      writer.print(\"\\tResource Utilization by Containers : \");\n      if (nodeReport.getAggregatedContainersUtilization() !\u003d null) {\n        writer.print(\"PMem:\"\n            + nodeReport.getAggregatedContainersUtilization()\n                .getPhysicalMemory()\n            + \" MB, VMem:\"\n            + nodeReport.getAggregatedContainersUtilization()\n                .getVirtualMemory() + \" MB, VCores:\"\n            + nodeReport.getAggregatedContainersUtilization().getCPU());\n      }\n      writer.println();\n\n      writer.print(\"\\tNode-Labels : \");\n      // Create a List for node labels since we need it get sorted\n      List\u003cString\u003e nodeLabelsList \u003d new ArrayList\u003cString\u003e(\n          nodeReport.getNodeLabels());\n      Collections.sort(nodeLabelsList);\n      writer.println(StringUtils.join(nodeLabelsList.iterator(), \u0027,\u0027));\n    }\n    writer.flush();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java"
    }
  }
}