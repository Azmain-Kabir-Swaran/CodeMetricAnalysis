{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Component.java",
  "functionName": "checkAndUpdateComponentState",
  "functionId": "checkAndUpdateComponentState___component-Component__isIncrement-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
  "functionStartLine": 534,
  "functionEndLine": 574,
  "numCommitsSeen": 33,
  "timeTaken": 1892,
  "changeHistory": [
    "913f87dada27776c539dfb352400ecf8d40e7943",
    "7f083ed8699a720d3fb82e4ec310356902a6ac30",
    "ca612e353fc3e3766868ec0816de035e48b1f5b4",
    "4a7369b09547a78f532af66c763c6994a38b5d68",
    "41b581012a83a17db785343362c718363e13e8f5"
  ],
  "changeHistoryShort": {
    "913f87dada27776c539dfb352400ecf8d40e7943": "Ybodychange",
    "7f083ed8699a720d3fb82e4ec310356902a6ac30": "Ymultichange(Ymodifierchange,Ybodychange)",
    "ca612e353fc3e3766868ec0816de035e48b1f5b4": "Ybodychange",
    "4a7369b09547a78f532af66c763c6994a38b5d68": "Ybodychange",
    "41b581012a83a17db785343362c718363e13e8f5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "913f87dada27776c539dfb352400ecf8d40e7943": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8665.  Added Yarn service cancel upgrade option.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/09/18 11:51 AM",
      "commitName": "913f87dada27776c539dfb352400ecf8d40e7943",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "21/08/18 4:49 PM",
      "commitNameOld": "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 35.79,
      "commitsBetweenForRepo": 332,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,41 @@\n   private static synchronized void checkAndUpdateComponentState(\n       Component component, boolean isIncrement) {\n-    org.apache.hadoop.yarn.service.api.records.ComponentState curState \u003d\n-        component.componentSpec.getState();\n \n     if (component.getRestartPolicyHandler().isLongLived()) {\n       if (isIncrement) {\n         // check if all containers are in READY state\n-        if (component.numContainersThatNeedUpgrade.get() \u003d\u003d 0\n-            \u0026\u0026 component.componentMetrics.containersReady.value()\n-            \u003d\u003d component.componentMetrics.containersDesired.value()) {\n-          component.componentSpec.setState(\n+        if (!component.upgradeStatus.areContainersUpgrading() \u0026\u0026\n+            !component.cancelUpgradeStatus.areContainersUpgrading() \u0026\u0026\n+            component.componentMetrics.containersReady.value() \u003d\u003d\n+                component.componentMetrics.containersDesired.value()) {\n+          component.setComponentState(\n               org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n-          if (curState !\u003d component.componentSpec.getState()) {\n-            LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n-                component.componentSpec.getName(), curState,\n-                component.componentSpec.getState());\n-          }\n           // component state change will trigger re-check of service state\n           component.context.getServiceManager().checkAndUpdateServiceState();\n         }\n       } else{\n         // container moving out of READY state could be because of FLEX down so\n         // still need to verify the count before changing the component state\n         if (component.componentMetrics.containersReady.value()\n             \u003c component.componentMetrics.containersDesired.value()) {\n-          component.componentSpec.setState(\n+          component.setComponentState(\n               org.apache.hadoop.yarn.service.api.records.ComponentState\n                   .FLEXING);\n         } else if (component.componentMetrics.containersReady.value()\n             \u003d\u003d component.componentMetrics.containersDesired.value()) {\n-          component.componentSpec.setState(\n+          component.setComponentState(\n               org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n         }\n-        if (curState !\u003d component.componentSpec.getState()) {\n-          LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n-              component.componentSpec.getName(), curState,\n-              component.componentSpec.getState());\n-        }\n         // component state change will trigger re-check of service state\n         component.context.getServiceManager().checkAndUpdateServiceState();\n       }\n     } else {\n       // component state change will trigger re-check of service state\n       component.context.getServiceManager().checkAndUpdateServiceState();\n     }\n-    // when the service is stable then the state of component needs to\n-    // transition to stable\n+    // triggers the state machine in component to reach appropriate state\n+    // once the state in spec is changed.\n     component.dispatcher.getEventHandler().handle(\n         new ComponentEvent(component.getName(),\n             ComponentEventType.CHECK_STABLE));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static synchronized void checkAndUpdateComponentState(\n      Component component, boolean isIncrement) {\n\n    if (component.getRestartPolicyHandler().isLongLived()) {\n      if (isIncrement) {\n        // check if all containers are in READY state\n        if (!component.upgradeStatus.areContainersUpgrading() \u0026\u0026\n            !component.cancelUpgradeStatus.areContainersUpgrading() \u0026\u0026\n            component.componentMetrics.containersReady.value() \u003d\u003d\n                component.componentMetrics.containersDesired.value()) {\n          component.setComponentState(\n              org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n          // component state change will trigger re-check of service state\n          component.context.getServiceManager().checkAndUpdateServiceState();\n        }\n      } else{\n        // container moving out of READY state could be because of FLEX down so\n        // still need to verify the count before changing the component state\n        if (component.componentMetrics.containersReady.value()\n            \u003c component.componentMetrics.containersDesired.value()) {\n          component.setComponentState(\n              org.apache.hadoop.yarn.service.api.records.ComponentState\n                  .FLEXING);\n        } else if (component.componentMetrics.containersReady.value()\n            \u003d\u003d component.componentMetrics.containersDesired.value()) {\n          component.setComponentState(\n              org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n        }\n        // component state change will trigger re-check of service state\n        component.context.getServiceManager().checkAndUpdateServiceState();\n      }\n    } else {\n      // component state change will trigger re-check of service state\n      component.context.getServiceManager().checkAndUpdateServiceState();\n    }\n    // triggers the state machine in component to reach appropriate state\n    // once the state in spec is changed.\n    component.dispatcher.getEventHandler().handle(\n        new ComponentEvent(component.getName(),\n            ComponentEventType.CHECK_STABLE));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
      "extendedDetails": {}
    },
    "7f083ed8699a720d3fb82e4ec310356902a6ac30": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-8080.  Add restart policy for YARN services.\n            Contributed by Suma Shivaprasad\n",
      "commitDate": "17/05/18 2:16 PM",
      "commitName": "7f083ed8699a720d3fb82e4ec310356902a6ac30",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-8080.  Add restart policy for YARN services.\n            Contributed by Suma Shivaprasad\n",
          "commitDate": "17/05/18 2:16 PM",
          "commitName": "7f083ed8699a720d3fb82e4ec310356902a6ac30",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "11/05/18 12:49 PM",
          "commitNameOld": "ca612e353fc3e3766868ec0816de035e48b1f5b4",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 6.06,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,52 @@\n-  public static synchronized void checkAndUpdateComponentState(\n+  private static synchronized void checkAndUpdateComponentState(\n       Component component, boolean isIncrement) {\n     org.apache.hadoop.yarn.service.api.records.ComponentState curState \u003d\n         component.componentSpec.getState();\n-    if (isIncrement) {\n-      // check if all containers are in READY state\n-      if (component.numContainersThatNeedUpgrade.get() \u003d\u003d 0 \u0026\u0026\n-          component.componentMetrics.containersReady.value() \u003d\u003d\n-              component.componentMetrics.containersDesired.value()) {\n-        component.componentSpec.setState(\n-            org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n+\n+    if (component.getRestartPolicyHandler().isLongLived()) {\n+      if (isIncrement) {\n+        // check if all containers are in READY state\n+        if (component.numContainersThatNeedUpgrade.get() \u003d\u003d 0\n+            \u0026\u0026 component.componentMetrics.containersReady.value()\n+            \u003d\u003d component.componentMetrics.containersDesired.value()) {\n+          component.componentSpec.setState(\n+              org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n+          if (curState !\u003d component.componentSpec.getState()) {\n+            LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n+                component.componentSpec.getName(), curState,\n+                component.componentSpec.getState());\n+          }\n+          // component state change will trigger re-check of service state\n+          component.context.getServiceManager().checkAndUpdateServiceState();\n+        }\n+      } else{\n+        // container moving out of READY state could be because of FLEX down so\n+        // still need to verify the count before changing the component state\n+        if (component.componentMetrics.containersReady.value()\n+            \u003c component.componentMetrics.containersDesired.value()) {\n+          component.componentSpec.setState(\n+              org.apache.hadoop.yarn.service.api.records.ComponentState\n+                  .FLEXING);\n+        } else if (component.componentMetrics.containersReady.value()\n+            \u003d\u003d component.componentMetrics.containersDesired.value()) {\n+          component.componentSpec.setState(\n+              org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n+        }\n         if (curState !\u003d component.componentSpec.getState()) {\n           LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n               component.componentSpec.getName(), curState,\n               component.componentSpec.getState());\n         }\n         // component state change will trigger re-check of service state\n         component.context.getServiceManager().checkAndUpdateServiceState();\n       }\n     } else {\n-      // container moving out of READY state could be because of FLEX down so\n-      // still need to verify the count before changing the component state\n-      if (component.componentMetrics.containersReady\n-          .value() \u003c component.componentMetrics.containersDesired.value()) {\n-        component.componentSpec.setState(\n-            org.apache.hadoop.yarn.service.api.records.ComponentState.FLEXING);\n-      } else if (component.componentMetrics.containersReady\n-          .value() \u003d\u003d component.componentMetrics.containersDesired.value()) {\n-        component.componentSpec.setState(\n-            org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n-      }\n-      if (curState !\u003d component.componentSpec.getState()) {\n-        LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n-            component.componentSpec.getName(), curState,\n-            component.componentSpec.getState());\n-      }\n       // component state change will trigger re-check of service state\n       component.context.getServiceManager().checkAndUpdateServiceState();\n     }\n     // when the service is stable then the state of component needs to\n     // transition to stable\n-    component.dispatcher.getEventHandler().handle(new ComponentEvent(\n-        component.getName(), ComponentEventType.CHECK_STABLE));\n+    component.dispatcher.getEventHandler().handle(\n+        new ComponentEvent(component.getName(),\n+            ComponentEventType.CHECK_STABLE));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static synchronized void checkAndUpdateComponentState(\n      Component component, boolean isIncrement) {\n    org.apache.hadoop.yarn.service.api.records.ComponentState curState \u003d\n        component.componentSpec.getState();\n\n    if (component.getRestartPolicyHandler().isLongLived()) {\n      if (isIncrement) {\n        // check if all containers are in READY state\n        if (component.numContainersThatNeedUpgrade.get() \u003d\u003d 0\n            \u0026\u0026 component.componentMetrics.containersReady.value()\n            \u003d\u003d component.componentMetrics.containersDesired.value()) {\n          component.componentSpec.setState(\n              org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n          if (curState !\u003d component.componentSpec.getState()) {\n            LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n                component.componentSpec.getName(), curState,\n                component.componentSpec.getState());\n          }\n          // component state change will trigger re-check of service state\n          component.context.getServiceManager().checkAndUpdateServiceState();\n        }\n      } else{\n        // container moving out of READY state could be because of FLEX down so\n        // still need to verify the count before changing the component state\n        if (component.componentMetrics.containersReady.value()\n            \u003c component.componentMetrics.containersDesired.value()) {\n          component.componentSpec.setState(\n              org.apache.hadoop.yarn.service.api.records.ComponentState\n                  .FLEXING);\n        } else if (component.componentMetrics.containersReady.value()\n            \u003d\u003d component.componentMetrics.containersDesired.value()) {\n          component.componentSpec.setState(\n              org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n        }\n        if (curState !\u003d component.componentSpec.getState()) {\n          LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n              component.componentSpec.getName(), curState,\n              component.componentSpec.getState());\n        }\n        // component state change will trigger re-check of service state\n        component.context.getServiceManager().checkAndUpdateServiceState();\n      }\n    } else {\n      // component state change will trigger re-check of service state\n      component.context.getServiceManager().checkAndUpdateServiceState();\n    }\n    // when the service is stable then the state of component needs to\n    // transition to stable\n    component.dispatcher.getEventHandler().handle(\n        new ComponentEvent(component.getName(),\n            ComponentEventType.CHECK_STABLE));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
          "extendedDetails": {
            "oldValue": "[public, static, synchronized]",
            "newValue": "[private, static, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8080.  Add restart policy for YARN services.\n            Contributed by Suma Shivaprasad\n",
          "commitDate": "17/05/18 2:16 PM",
          "commitName": "7f083ed8699a720d3fb82e4ec310356902a6ac30",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "11/05/18 12:49 PM",
          "commitNameOld": "ca612e353fc3e3766868ec0816de035e48b1f5b4",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 6.06,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,52 @@\n-  public static synchronized void checkAndUpdateComponentState(\n+  private static synchronized void checkAndUpdateComponentState(\n       Component component, boolean isIncrement) {\n     org.apache.hadoop.yarn.service.api.records.ComponentState curState \u003d\n         component.componentSpec.getState();\n-    if (isIncrement) {\n-      // check if all containers are in READY state\n-      if (component.numContainersThatNeedUpgrade.get() \u003d\u003d 0 \u0026\u0026\n-          component.componentMetrics.containersReady.value() \u003d\u003d\n-              component.componentMetrics.containersDesired.value()) {\n-        component.componentSpec.setState(\n-            org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n+\n+    if (component.getRestartPolicyHandler().isLongLived()) {\n+      if (isIncrement) {\n+        // check if all containers are in READY state\n+        if (component.numContainersThatNeedUpgrade.get() \u003d\u003d 0\n+            \u0026\u0026 component.componentMetrics.containersReady.value()\n+            \u003d\u003d component.componentMetrics.containersDesired.value()) {\n+          component.componentSpec.setState(\n+              org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n+          if (curState !\u003d component.componentSpec.getState()) {\n+            LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n+                component.componentSpec.getName(), curState,\n+                component.componentSpec.getState());\n+          }\n+          // component state change will trigger re-check of service state\n+          component.context.getServiceManager().checkAndUpdateServiceState();\n+        }\n+      } else{\n+        // container moving out of READY state could be because of FLEX down so\n+        // still need to verify the count before changing the component state\n+        if (component.componentMetrics.containersReady.value()\n+            \u003c component.componentMetrics.containersDesired.value()) {\n+          component.componentSpec.setState(\n+              org.apache.hadoop.yarn.service.api.records.ComponentState\n+                  .FLEXING);\n+        } else if (component.componentMetrics.containersReady.value()\n+            \u003d\u003d component.componentMetrics.containersDesired.value()) {\n+          component.componentSpec.setState(\n+              org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n+        }\n         if (curState !\u003d component.componentSpec.getState()) {\n           LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n               component.componentSpec.getName(), curState,\n               component.componentSpec.getState());\n         }\n         // component state change will trigger re-check of service state\n         component.context.getServiceManager().checkAndUpdateServiceState();\n       }\n     } else {\n-      // container moving out of READY state could be because of FLEX down so\n-      // still need to verify the count before changing the component state\n-      if (component.componentMetrics.containersReady\n-          .value() \u003c component.componentMetrics.containersDesired.value()) {\n-        component.componentSpec.setState(\n-            org.apache.hadoop.yarn.service.api.records.ComponentState.FLEXING);\n-      } else if (component.componentMetrics.containersReady\n-          .value() \u003d\u003d component.componentMetrics.containersDesired.value()) {\n-        component.componentSpec.setState(\n-            org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n-      }\n-      if (curState !\u003d component.componentSpec.getState()) {\n-        LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n-            component.componentSpec.getName(), curState,\n-            component.componentSpec.getState());\n-      }\n       // component state change will trigger re-check of service state\n       component.context.getServiceManager().checkAndUpdateServiceState();\n     }\n     // when the service is stable then the state of component needs to\n     // transition to stable\n-    component.dispatcher.getEventHandler().handle(new ComponentEvent(\n-        component.getName(), ComponentEventType.CHECK_STABLE));\n+    component.dispatcher.getEventHandler().handle(\n+        new ComponentEvent(component.getName(),\n+            ComponentEventType.CHECK_STABLE));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static synchronized void checkAndUpdateComponentState(\n      Component component, boolean isIncrement) {\n    org.apache.hadoop.yarn.service.api.records.ComponentState curState \u003d\n        component.componentSpec.getState();\n\n    if (component.getRestartPolicyHandler().isLongLived()) {\n      if (isIncrement) {\n        // check if all containers are in READY state\n        if (component.numContainersThatNeedUpgrade.get() \u003d\u003d 0\n            \u0026\u0026 component.componentMetrics.containersReady.value()\n            \u003d\u003d component.componentMetrics.containersDesired.value()) {\n          component.componentSpec.setState(\n              org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n          if (curState !\u003d component.componentSpec.getState()) {\n            LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n                component.componentSpec.getName(), curState,\n                component.componentSpec.getState());\n          }\n          // component state change will trigger re-check of service state\n          component.context.getServiceManager().checkAndUpdateServiceState();\n        }\n      } else{\n        // container moving out of READY state could be because of FLEX down so\n        // still need to verify the count before changing the component state\n        if (component.componentMetrics.containersReady.value()\n            \u003c component.componentMetrics.containersDesired.value()) {\n          component.componentSpec.setState(\n              org.apache.hadoop.yarn.service.api.records.ComponentState\n                  .FLEXING);\n        } else if (component.componentMetrics.containersReady.value()\n            \u003d\u003d component.componentMetrics.containersDesired.value()) {\n          component.componentSpec.setState(\n              org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n        }\n        if (curState !\u003d component.componentSpec.getState()) {\n          LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n              component.componentSpec.getName(), curState,\n              component.componentSpec.getState());\n        }\n        // component state change will trigger re-check of service state\n        component.context.getServiceManager().checkAndUpdateServiceState();\n      }\n    } else {\n      // component state change will trigger re-check of service state\n      component.context.getServiceManager().checkAndUpdateServiceState();\n    }\n    // when the service is stable then the state of component needs to\n    // transition to stable\n    component.dispatcher.getEventHandler().handle(\n        new ComponentEvent(component.getName(),\n            ComponentEventType.CHECK_STABLE));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
          "extendedDetails": {}
        }
      ]
    },
    "ca612e353fc3e3766868ec0816de035e48b1f5b4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8243. Flex down should remove instance with largest component instance ID first. Contributed by Gour Saha\n",
      "commitDate": "11/05/18 12:49 PM",
      "commitName": "ca612e353fc3e3766868ec0816de035e48b1f5b4",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "26/04/18 4:17 PM",
      "commitNameOld": "93979db8400186d6e557c46a2a1e2622821013c1",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 14.86,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,44 @@\n   public static synchronized void checkAndUpdateComponentState(\n       Component component, boolean isIncrement) {\n     org.apache.hadoop.yarn.service.api.records.ComponentState curState \u003d\n         component.componentSpec.getState();\n     if (isIncrement) {\n       // check if all containers are in READY state\n       if (component.numContainersThatNeedUpgrade.get() \u003d\u003d 0 \u0026\u0026\n           component.componentMetrics.containersReady.value() \u003d\u003d\n               component.componentMetrics.containersDesired.value()) {\n         component.componentSpec.setState(\n             org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n         if (curState !\u003d component.componentSpec.getState()) {\n           LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n               component.componentSpec.getName(), curState,\n               component.componentSpec.getState());\n         }\n         // component state change will trigger re-check of service state\n-        component.context.getServiceManager().checkAndUpdateServiceState(true);\n+        component.context.getServiceManager().checkAndUpdateServiceState();\n       }\n     } else {\n       // container moving out of READY state could be because of FLEX down so\n       // still need to verify the count before changing the component state\n       if (component.componentMetrics.containersReady\n           .value() \u003c component.componentMetrics.containersDesired.value()) {\n         component.componentSpec.setState(\n             org.apache.hadoop.yarn.service.api.records.ComponentState.FLEXING);\n-        if (curState !\u003d component.componentSpec.getState()) {\n-          LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n-              component.componentSpec.getName(), curState,\n-              component.componentSpec.getState());\n-        }\n-        // component state change will trigger re-check of service state\n-        component.context.getServiceManager().checkAndUpdateServiceState(false);\n+      } else if (component.componentMetrics.containersReady\n+          .value() \u003d\u003d component.componentMetrics.containersDesired.value()) {\n+        component.componentSpec.setState(\n+            org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n       }\n+      if (curState !\u003d component.componentSpec.getState()) {\n+        LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n+            component.componentSpec.getName(), curState,\n+            component.componentSpec.getState());\n+      }\n+      // component state change will trigger re-check of service state\n+      component.context.getServiceManager().checkAndUpdateServiceState();\n     }\n     // when the service is stable then the state of component needs to\n     // transition to stable\n     component.dispatcher.getEventHandler().handle(new ComponentEvent(\n         component.getName(), ComponentEventType.CHECK_STABLE));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void checkAndUpdateComponentState(\n      Component component, boolean isIncrement) {\n    org.apache.hadoop.yarn.service.api.records.ComponentState curState \u003d\n        component.componentSpec.getState();\n    if (isIncrement) {\n      // check if all containers are in READY state\n      if (component.numContainersThatNeedUpgrade.get() \u003d\u003d 0 \u0026\u0026\n          component.componentMetrics.containersReady.value() \u003d\u003d\n              component.componentMetrics.containersDesired.value()) {\n        component.componentSpec.setState(\n            org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n        if (curState !\u003d component.componentSpec.getState()) {\n          LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n              component.componentSpec.getName(), curState,\n              component.componentSpec.getState());\n        }\n        // component state change will trigger re-check of service state\n        component.context.getServiceManager().checkAndUpdateServiceState();\n      }\n    } else {\n      // container moving out of READY state could be because of FLEX down so\n      // still need to verify the count before changing the component state\n      if (component.componentMetrics.containersReady\n          .value() \u003c component.componentMetrics.containersDesired.value()) {\n        component.componentSpec.setState(\n            org.apache.hadoop.yarn.service.api.records.ComponentState.FLEXING);\n      } else if (component.componentMetrics.containersReady\n          .value() \u003d\u003d component.componentMetrics.containersDesired.value()) {\n        component.componentSpec.setState(\n            org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n      }\n      if (curState !\u003d component.componentSpec.getState()) {\n        LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n            component.componentSpec.getName(), curState,\n            component.componentSpec.getState());\n      }\n      // component state change will trigger re-check of service state\n      component.context.getServiceManager().checkAndUpdateServiceState();\n    }\n    // when the service is stable then the state of component needs to\n    // transition to stable\n    component.dispatcher.getEventHandler().handle(new ComponentEvent(\n        component.getName(), ComponentEventType.CHECK_STABLE));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
      "extendedDetails": {}
    },
    "4a7369b09547a78f532af66c763c6994a38b5d68": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/04/18 1:54 PM",
      "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "20/04/18 12:24 PM",
      "commitNameOld": "28e2244390c990877dc2ee2733cf9b8d2c75128e",
      "commitAuthorOld": "Konstantinos Karanasos",
      "daysBetweenCommits": 6.06,
      "commitsBetweenForRepo": 538,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n   public static synchronized void checkAndUpdateComponentState(\n       Component component, boolean isIncrement) {\n     org.apache.hadoop.yarn.service.api.records.ComponentState curState \u003d\n         component.componentSpec.getState();\n     if (isIncrement) {\n       // check if all containers are in READY state\n-      if (component.componentMetrics.containersReady\n-          .value() \u003d\u003d component.componentMetrics.containersDesired.value()) {\n+      if (component.numContainersThatNeedUpgrade.get() \u003d\u003d 0 \u0026\u0026\n+          component.componentMetrics.containersReady.value() \u003d\u003d\n+              component.componentMetrics.containersDesired.value()) {\n         component.componentSpec.setState(\n             org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n         if (curState !\u003d component.componentSpec.getState()) {\n           LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n               component.componentSpec.getName(), curState,\n               component.componentSpec.getState());\n         }\n         // component state change will trigger re-check of service state\n-        ServiceMaster.checkAndUpdateServiceState(component.scheduler,\n-            isIncrement);\n+        component.context.getServiceManager().checkAndUpdateServiceState(true);\n       }\n     } else {\n       // container moving out of READY state could be because of FLEX down so\n       // still need to verify the count before changing the component state\n       if (component.componentMetrics.containersReady\n           .value() \u003c component.componentMetrics.containersDesired.value()) {\n         component.componentSpec.setState(\n             org.apache.hadoop.yarn.service.api.records.ComponentState.FLEXING);\n         if (curState !\u003d component.componentSpec.getState()) {\n           LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n               component.componentSpec.getName(), curState,\n               component.componentSpec.getState());\n         }\n         // component state change will trigger re-check of service state\n-        ServiceMaster.checkAndUpdateServiceState(component.scheduler,\n-            isIncrement);\n+        component.context.getServiceManager().checkAndUpdateServiceState(false);\n       }\n     }\n+    // when the service is stable then the state of component needs to\n+    // transition to stable\n+    component.dispatcher.getEventHandler().handle(new ComponentEvent(\n+        component.getName(), ComponentEventType.CHECK_STABLE));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void checkAndUpdateComponentState(\n      Component component, boolean isIncrement) {\n    org.apache.hadoop.yarn.service.api.records.ComponentState curState \u003d\n        component.componentSpec.getState();\n    if (isIncrement) {\n      // check if all containers are in READY state\n      if (component.numContainersThatNeedUpgrade.get() \u003d\u003d 0 \u0026\u0026\n          component.componentMetrics.containersReady.value() \u003d\u003d\n              component.componentMetrics.containersDesired.value()) {\n        component.componentSpec.setState(\n            org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n        if (curState !\u003d component.componentSpec.getState()) {\n          LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n              component.componentSpec.getName(), curState,\n              component.componentSpec.getState());\n        }\n        // component state change will trigger re-check of service state\n        component.context.getServiceManager().checkAndUpdateServiceState(true);\n      }\n    } else {\n      // container moving out of READY state could be because of FLEX down so\n      // still need to verify the count before changing the component state\n      if (component.componentMetrics.containersReady\n          .value() \u003c component.componentMetrics.containersDesired.value()) {\n        component.componentSpec.setState(\n            org.apache.hadoop.yarn.service.api.records.ComponentState.FLEXING);\n        if (curState !\u003d component.componentSpec.getState()) {\n          LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n              component.componentSpec.getName(), curState,\n              component.componentSpec.getState());\n        }\n        // component state change will trigger re-check of service state\n        component.context.getServiceManager().checkAndUpdateServiceState(false);\n      }\n    }\n    // when the service is stable then the state of component needs to\n    // transition to stable\n    component.dispatcher.getEventHandler().handle(new ComponentEvent(\n        component.getName(), ComponentEventType.CHECK_STABLE));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java",
      "extendedDetails": {}
    },
    "41b581012a83a17db785343362c718363e13e8f5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7616. Map YARN application status to Service Status more accurately.  (Contributed by Gour Saha)\n",
      "commitDate": "19/12/17 4:14 PM",
      "commitName": "41b581012a83a17db785343362c718363e13e8f5",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,37 @@\n+  public static synchronized void checkAndUpdateComponentState(\n+      Component component, boolean isIncrement) {\n+    org.apache.hadoop.yarn.service.api.records.ComponentState curState \u003d\n+        component.componentSpec.getState();\n+    if (isIncrement) {\n+      // check if all containers are in READY state\n+      if (component.componentMetrics.containersReady\n+          .value() \u003d\u003d component.componentMetrics.containersDesired.value()) {\n+        component.componentSpec.setState(\n+            org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n+        if (curState !\u003d component.componentSpec.getState()) {\n+          LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n+              component.componentSpec.getName(), curState,\n+              component.componentSpec.getState());\n+        }\n+        // component state change will trigger re-check of service state\n+        ServiceMaster.checkAndUpdateServiceState(component.scheduler,\n+            isIncrement);\n+      }\n+    } else {\n+      // container moving out of READY state could be because of FLEX down so\n+      // still need to verify the count before changing the component state\n+      if (component.componentMetrics.containersReady\n+          .value() \u003c component.componentMetrics.containersDesired.value()) {\n+        component.componentSpec.setState(\n+            org.apache.hadoop.yarn.service.api.records.ComponentState.FLEXING);\n+        if (curState !\u003d component.componentSpec.getState()) {\n+          LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n+              component.componentSpec.getName(), curState,\n+              component.componentSpec.getState());\n+        }\n+        // component state change will trigger re-check of service state\n+        ServiceMaster.checkAndUpdateServiceState(component.scheduler,\n+            isIncrement);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void checkAndUpdateComponentState(\n      Component component, boolean isIncrement) {\n    org.apache.hadoop.yarn.service.api.records.ComponentState curState \u003d\n        component.componentSpec.getState();\n    if (isIncrement) {\n      // check if all containers are in READY state\n      if (component.componentMetrics.containersReady\n          .value() \u003d\u003d component.componentMetrics.containersDesired.value()) {\n        component.componentSpec.setState(\n            org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\n        if (curState !\u003d component.componentSpec.getState()) {\n          LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n              component.componentSpec.getName(), curState,\n              component.componentSpec.getState());\n        }\n        // component state change will trigger re-check of service state\n        ServiceMaster.checkAndUpdateServiceState(component.scheduler,\n            isIncrement);\n      }\n    } else {\n      // container moving out of READY state could be because of FLEX down so\n      // still need to verify the count before changing the component state\n      if (component.componentMetrics.containersReady\n          .value() \u003c component.componentMetrics.containersDesired.value()) {\n        component.componentSpec.setState(\n            org.apache.hadoop.yarn.service.api.records.ComponentState.FLEXING);\n        if (curState !\u003d component.componentSpec.getState()) {\n          LOG.info(\"[COMPONENT {}] state changed from {} -\u003e {}\",\n              component.componentSpec.getName(), curState,\n              component.componentSpec.getState());\n        }\n        // component state change will trigger re-check of service state\n        ServiceMaster.checkAndUpdateServiceState(component.scheduler,\n            isIncrement);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/Component.java"
    }
  }
}