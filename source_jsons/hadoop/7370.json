{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirXAttrOp.java",
  "functionName": "setXAttr",
  "functionId": "setXAttr___fsd-FSDirectory__pc-FSPermissionChecker__src-String__xAttr-XAttr__flag-EnumSet__XAttrSetFlag____logRetryCache-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
  "functionStartLine": 72,
  "functionEndLine": 94,
  "numCommitsSeen": 529,
  "timeTaken": 12085,
  "changeHistory": [
    "84a1321f6aa0af6895564a7c47f8f264656f0294",
    "9b90e52f1ec22c18cd535af2a569defcef65b093",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
    "869393643de23dcb010cc33091c8eb398de0fd6c",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
    "65f2a4ee600dfffa5203450261da3c1989de25a9",
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
    "6a5596e3b4443462fc86f800b3c2eb839d44c3bd",
    "c95b878abf313507666ea018f9e6033c4c166e10"
  ],
  "changeHistoryShort": {
    "84a1321f6aa0af6895564a7c47f8f264656f0294": "Ymultichange(Yparameterchange,Ybodychange)",
    "9b90e52f1ec22c18cd535af2a569defcef65b093": "Yreturntypechange",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": "Ybodychange",
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65": "Ybodychange",
    "869393643de23dcb010cc33091c8eb398de0fd6c": "Ybodychange",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": "Ybodychange",
    "65f2a4ee600dfffa5203450261da3c1989de25a9": "Ybodychange",
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2": "Ybodychange",
    "6a5596e3b4443462fc86f800b3c2eb839d44c3bd": "Ybodychange",
    "c95b878abf313507666ea018f9e6033c4c166e10": "Ybodychange"
  },
  "changeHistoryDetails": {
    "84a1321f6aa0af6895564a7c47f8f264656f0294": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
      "commitDate": "22/02/18 11:32 AM",
      "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
      "commitAuthor": "Xiaoyu Yao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
          "commitDate": "22/02/18 11:32 AM",
          "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "15/02/18 9:11 AM",
          "commitNameOld": "da59acd8ca9ab5b49b988ffca64e8cce91c5f741",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 7.1,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n   static FileStatus setXAttr(\n-      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n-      boolean logRetryCache)\n+      FSDirectory fsd, FSPermissionChecker pc, String src, XAttr xAttr,\n+      EnumSet\u003cXAttrSetFlag\u003e flag, boolean logRetryCache)\n       throws IOException {\n     checkXAttrsConfigFlag(fsd);\n     checkXAttrSize(fsd, xAttr);\n-    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     XAttrPermissionFilter.checkPermissionForApi(\n         pc, xAttr, FSDirectory.isReservedRawName(src));\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n     xAttrs.add(xAttr);\n     INodesInPath iip;\n     fsd.writeLock();\n     try {\n       iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE);\n       src \u003d iip.getPath();\n       checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n       unprotectedSetXAttrs(fsd, iip, xAttrs, flag);\n     } finally {\n       fsd.writeUnlock();\n     }\n     fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static FileStatus setXAttr(\n      FSDirectory fsd, FSPermissionChecker pc, String src, XAttr xAttr,\n      EnumSet\u003cXAttrSetFlag\u003e flag, boolean logRetryCache)\n      throws IOException {\n    checkXAttrsConfigFlag(fsd);\n    checkXAttrSize(fsd, xAttr);\n    XAttrPermissionFilter.checkPermissionForApi(\n        pc, xAttr, FSDirectory.isReservedRawName(src));\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    xAttrs.add(xAttr);\n    INodesInPath iip;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE);\n      src \u003d iip.getPath();\n      checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n      unprotectedSetXAttrs(fsd, iip, xAttrs, flag);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, src-String, xAttr-XAttr, flag-EnumSet\u003cXAttrSetFlag\u003e, logRetryCache-boolean]",
            "newValue": "[fsd-FSDirectory, pc-FSPermissionChecker, src-String, xAttr-XAttr, flag-EnumSet\u003cXAttrSetFlag\u003e, logRetryCache-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
          "commitDate": "22/02/18 11:32 AM",
          "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "15/02/18 9:11 AM",
          "commitNameOld": "da59acd8ca9ab5b49b988ffca64e8cce91c5f741",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 7.1,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n   static FileStatus setXAttr(\n-      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n-      boolean logRetryCache)\n+      FSDirectory fsd, FSPermissionChecker pc, String src, XAttr xAttr,\n+      EnumSet\u003cXAttrSetFlag\u003e flag, boolean logRetryCache)\n       throws IOException {\n     checkXAttrsConfigFlag(fsd);\n     checkXAttrSize(fsd, xAttr);\n-    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     XAttrPermissionFilter.checkPermissionForApi(\n         pc, xAttr, FSDirectory.isReservedRawName(src));\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n     xAttrs.add(xAttr);\n     INodesInPath iip;\n     fsd.writeLock();\n     try {\n       iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE);\n       src \u003d iip.getPath();\n       checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n       unprotectedSetXAttrs(fsd, iip, xAttrs, flag);\n     } finally {\n       fsd.writeUnlock();\n     }\n     fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static FileStatus setXAttr(\n      FSDirectory fsd, FSPermissionChecker pc, String src, XAttr xAttr,\n      EnumSet\u003cXAttrSetFlag\u003e flag, boolean logRetryCache)\n      throws IOException {\n    checkXAttrsConfigFlag(fsd);\n    checkXAttrSize(fsd, xAttr);\n    XAttrPermissionFilter.checkPermissionForApi(\n        pc, xAttr, FSDirectory.isReservedRawName(src));\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    xAttrs.add(xAttr);\n    INodesInPath iip;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE);\n      src \u003d iip.getPath();\n      checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n      unprotectedSetXAttrs(fsd, iip, xAttrs, flag);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "9b90e52f1ec22c18cd535af2a569defcef65b093": {
      "type": "Yreturntypechange",
      "commitMessage": "HDFS-11641. Reduce cost of audit logging by using FileStatus instead of HdfsFileStatus. Contributed by Daryn Sharp.\n",
      "commitDate": "16/05/17 9:28 AM",
      "commitName": "9b90e52f1ec22c18cd535af2a569defcef65b093",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "24/10/16 3:14 PM",
      "commitNameOld": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 203.76,
      "commitsBetweenForRepo": 1218,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n-  static HdfsFileStatus setXAttr(\n+  static FileStatus setXAttr(\n       FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n       boolean logRetryCache)\n       throws IOException {\n     checkXAttrsConfigFlag(fsd);\n     checkXAttrSize(fsd, xAttr);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     XAttrPermissionFilter.checkPermissionForApi(\n         pc, xAttr, FSDirectory.isReservedRawName(src));\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n     xAttrs.add(xAttr);\n     INodesInPath iip;\n     fsd.writeLock();\n     try {\n       iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE);\n       src \u003d iip.getPath();\n       checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n       unprotectedSetXAttrs(fsd, iip, xAttrs, flag);\n     } finally {\n       fsd.writeUnlock();\n     }\n     fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static FileStatus setXAttr(\n      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n      boolean logRetryCache)\n      throws IOException {\n    checkXAttrsConfigFlag(fsd);\n    checkXAttrSize(fsd, xAttr);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    XAttrPermissionFilter.checkPermissionForApi(\n        pc, xAttr, FSDirectory.isReservedRawName(src));\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    xAttrs.add(xAttr);\n    INodesInPath iip;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE);\n      src \u003d iip.getPath();\n      checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n      unprotectedSetXAttrs(fsd, iip, xAttrs, flag);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {
        "oldValue": "HdfsFileStatus",
        "newValue": "FileStatus"
      }
    },
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.\n",
      "commitDate": "24/10/16 3:14 PM",
      "commitName": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "06/10/16 1:11 PM",
      "commitNameOld": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 18.09,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   static HdfsFileStatus setXAttr(\n       FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n       boolean logRetryCache)\n       throws IOException {\n     checkXAttrsConfigFlag(fsd);\n     checkXAttrSize(fsd, xAttr);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     XAttrPermissionFilter.checkPermissionForApi(\n         pc, xAttr, FSDirectory.isReservedRawName(src));\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n     xAttrs.add(xAttr);\n     INodesInPath iip;\n     fsd.writeLock();\n     try {\n-      iip \u003d fsd.resolvePathForWrite(pc, src);\n+      iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE);\n       src \u003d iip.getPath();\n       checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n       unprotectedSetXAttrs(fsd, iip, xAttrs, flag);\n     } finally {\n       fsd.writeUnlock();\n     }\n     fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static HdfsFileStatus setXAttr(\n      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n      boolean logRetryCache)\n      throws IOException {\n    checkXAttrsConfigFlag(fsd);\n    checkXAttrSize(fsd, xAttr);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    XAttrPermissionFilter.checkPermissionForApi(\n        pc, xAttr, FSDirectory.isReservedRawName(src));\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    xAttrs.add(xAttr);\n    INodesInPath iip;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE);\n      src \u003d iip.getPath();\n      checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n      unprotectedSetXAttrs(fsd, iip, xAttrs, flag);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
      "commitDate": "06/10/16 1:11 PM",
      "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "30/09/16 11:03 AM",
      "commitNameOld": "a0730aa5ced7666a8c92f9fb830b615f5f9f477a",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.09,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   static HdfsFileStatus setXAttr(\n       FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n       boolean logRetryCache)\n       throws IOException {\n     checkXAttrsConfigFlag(fsd);\n     checkXAttrSize(fsd, xAttr);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     XAttrPermissionFilter.checkPermissionForApi(\n         pc, xAttr, FSDirectory.isReservedRawName(src));\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n     xAttrs.add(xAttr);\n     INodesInPath iip;\n     fsd.writeLock();\n     try {\n       iip \u003d fsd.resolvePathForWrite(pc, src);\n       src \u003d iip.getPath();\n       checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n-      unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n+      unprotectedSetXAttrs(fsd, iip, xAttrs, flag);\n     } finally {\n       fsd.writeUnlock();\n     }\n     fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static HdfsFileStatus setXAttr(\n      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n      boolean logRetryCache)\n      throws IOException {\n    checkXAttrsConfigFlag(fsd);\n    checkXAttrSize(fsd, xAttr);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    XAttrPermissionFilter.checkPermissionForApi(\n        pc, xAttr, FSDirectory.isReservedRawName(src));\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    xAttrs.add(xAttr);\n    INodesInPath iip;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePathForWrite(pc, src);\n      src \u003d iip.getPath();\n      checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n      unprotectedSetXAttrs(fsd, iip, xAttrs, flag);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "869393643de23dcb010cc33091c8eb398de0fd6c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.\n",
      "commitDate": "17/08/16 1:53 PM",
      "commitName": "869393643de23dcb010cc33091c8eb398de0fd6c",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "15/08/16 2:45 PM",
      "commitNameOld": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   static HdfsFileStatus setXAttr(\n       FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n       boolean logRetryCache)\n       throws IOException {\n     checkXAttrsConfigFlag(fsd);\n     checkXAttrSize(fsd, xAttr);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     XAttrPermissionFilter.checkPermissionForApi(\n         pc, xAttr, FSDirectory.isReservedRawName(src));\n-    src \u003d fsd.resolvePath(pc, src);\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n     xAttrs.add(xAttr);\n     INodesInPath iip;\n     fsd.writeLock();\n     try {\n-      iip \u003d fsd.getINodesInPath4Write(src);\n+      iip \u003d fsd.resolvePathForWrite(pc, src);\n+      src \u003d iip.getPath();\n       checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n       unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n     } finally {\n       fsd.writeUnlock();\n     }\n     fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static HdfsFileStatus setXAttr(\n      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n      boolean logRetryCache)\n      throws IOException {\n    checkXAttrsConfigFlag(fsd);\n    checkXAttrSize(fsd, xAttr);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    XAttrPermissionFilter.checkPermissionForApi(\n        pc, xAttr, FSDirectory.isReservedRawName(src));\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    xAttrs.add(xAttr);\n    INodesInPath iip;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePathForWrite(pc, src);\n      src \u003d iip.getPath();\n      checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n      unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10744. Internally optimize path component resolution. Contributed by Daryn Sharp.\n",
      "commitDate": "15/08/16 2:45 PM",
      "commitName": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "04/08/16 7:07 AM",
      "commitNameOld": "6ae39199dac6ac7be6802b31452552c76da16e24",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 11.32,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n   static HdfsFileStatus setXAttr(\n       FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n       boolean logRetryCache)\n       throws IOException {\n     checkXAttrsConfigFlag(fsd);\n     checkXAttrSize(fsd, xAttr);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     XAttrPermissionFilter.checkPermissionForApi(\n         pc, xAttr, FSDirectory.isReservedRawName(src));\n-    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    src \u003d fsd.resolvePath(pc, src, pathComponents);\n+    src \u003d fsd.resolvePath(pc, src);\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n     xAttrs.add(xAttr);\n     INodesInPath iip;\n     fsd.writeLock();\n     try {\n       iip \u003d fsd.getINodesInPath4Write(src);\n       checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n       unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n     } finally {\n       fsd.writeUnlock();\n     }\n     fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static HdfsFileStatus setXAttr(\n      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n      boolean logRetryCache)\n      throws IOException {\n    checkXAttrsConfigFlag(fsd);\n    checkXAttrSize(fsd, xAttr);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    XAttrPermissionFilter.checkPermissionForApi(\n        pc, xAttr, FSDirectory.isReservedRawName(src));\n    src \u003d fsd.resolvePath(pc, src);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    xAttrs.add(xAttr);\n    INodesInPath iip;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.getINodesInPath4Write(src);\n      checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n      unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "65f2a4ee600dfffa5203450261da3c1989de25a9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7543. Avoid path resolution when getting FileStatus for audit logs. Contributed by Haohui Mai.\n",
      "commitDate": "18/12/14 11:25 AM",
      "commitName": "65f2a4ee600dfffa5203450261da3c1989de25a9",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "12/12/14 3:13 PM",
      "commitNameOld": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 5.84,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   static HdfsFileStatus setXAttr(\n       FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n       boolean logRetryCache)\n       throws IOException {\n     checkXAttrsConfigFlag(fsd);\n     checkXAttrSize(fsd, xAttr);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     XAttrPermissionFilter.checkPermissionForApi(\n         pc, xAttr, FSDirectory.isReservedRawName(src));\n-    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(\n-        src);\n+    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     src \u003d fsd.resolvePath(pc, src, pathComponents);\n-    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n-    checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n     List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n     xAttrs.add(xAttr);\n+    INodesInPath iip;\n     fsd.writeLock();\n     try {\n+      iip \u003d fsd.getINodesInPath4Write(src);\n+      checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n       unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n     } finally {\n       fsd.writeUnlock();\n     }\n     fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n-    return fsd.getAuditFileInfo(src, false);\n+    return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static HdfsFileStatus setXAttr(\n      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n      boolean logRetryCache)\n      throws IOException {\n    checkXAttrsConfigFlag(fsd);\n    checkXAttrSize(fsd, xAttr);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    XAttrPermissionFilter.checkPermissionForApi(\n        pc, xAttr, FSDirectory.isReservedRawName(src));\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    xAttrs.add(xAttr);\n    INodesInPath iip;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.getINodesInPath4Write(src);\n      checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n      unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "08/12/14 11:52 AM",
      "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,25 @@\n-  private void setXAttrInt(final String srcArg, XAttr xAttr,\n-      EnumSet\u003cXAttrSetFlag\u003e flag, boolean logRetryCache) throws IOException {\n-    String src \u003d srcArg;\n-    checkXAttrsConfigFlag();\n-    checkXAttrSize(xAttr);\n-    HdfsFileStatus resultingStat \u003d null;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    XAttrPermissionFilter.checkPermissionForApi(pc, xAttr,\n-        FSDirectory.isReservedRawName(src));\n-    checkOperation(OperationCategory.WRITE);\n-    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    writeLock();\n+  static HdfsFileStatus setXAttr(\n+      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n+      boolean logRetryCache)\n+      throws IOException {\n+    checkXAttrsConfigFlag(fsd);\n+    checkXAttrSize(fsd, xAttr);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+    XAttrPermissionFilter.checkPermissionForApi(\n+        pc, xAttr, FSDirectory.isReservedRawName(src));\n+    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(\n+        src);\n+    src \u003d fsd.resolvePath(pc, src, pathComponents);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n+    checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n+    xAttrs.add(xAttr);\n+    fsd.writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot set XAttr on \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n-      checkXAttrChangeAccess(iip, xAttr, pc);\n-      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n-      xAttrs.add(xAttr);\n-      dir.setXAttrs(src, xAttrs, flag);\n-      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n-      resultingStat \u003d getAuditFileInfo(src, false);\n+      unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"setXAttr\", srcArg, null, resultingStat);\n+    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n+    return fsd.getAuditFileInfo(src, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus setXAttr(\n      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n      boolean logRetryCache)\n      throws IOException {\n    checkXAttrsConfigFlag(fsd);\n    checkXAttrSize(fsd, xAttr);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    XAttrPermissionFilter.checkPermissionForApi(\n        pc, xAttr, FSDirectory.isReservedRawName(src));\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(\n        src);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n    checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    xAttrs.add(xAttr);\n    fsd.writeLock();\n    try {\n      unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(src, false);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
            "oldMethodName": "setXAttrInt",
            "newMethodName": "setXAttr"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,25 @@\n-  private void setXAttrInt(final String srcArg, XAttr xAttr,\n-      EnumSet\u003cXAttrSetFlag\u003e flag, boolean logRetryCache) throws IOException {\n-    String src \u003d srcArg;\n-    checkXAttrsConfigFlag();\n-    checkXAttrSize(xAttr);\n-    HdfsFileStatus resultingStat \u003d null;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    XAttrPermissionFilter.checkPermissionForApi(pc, xAttr,\n-        FSDirectory.isReservedRawName(src));\n-    checkOperation(OperationCategory.WRITE);\n-    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    writeLock();\n+  static HdfsFileStatus setXAttr(\n+      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n+      boolean logRetryCache)\n+      throws IOException {\n+    checkXAttrsConfigFlag(fsd);\n+    checkXAttrSize(fsd, xAttr);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+    XAttrPermissionFilter.checkPermissionForApi(\n+        pc, xAttr, FSDirectory.isReservedRawName(src));\n+    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(\n+        src);\n+    src \u003d fsd.resolvePath(pc, src, pathComponents);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n+    checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n+    xAttrs.add(xAttr);\n+    fsd.writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot set XAttr on \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n-      checkXAttrChangeAccess(iip, xAttr, pc);\n-      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n-      xAttrs.add(xAttr);\n-      dir.setXAttrs(src, xAttrs, flag);\n-      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n-      resultingStat \u003d getAuditFileInfo(src, false);\n+      unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"setXAttr\", srcArg, null, resultingStat);\n+    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n+    return fsd.getAuditFileInfo(src, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus setXAttr(\n      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n      boolean logRetryCache)\n      throws IOException {\n    checkXAttrsConfigFlag(fsd);\n    checkXAttrSize(fsd, xAttr);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    XAttrPermissionFilter.checkPermissionForApi(\n        pc, xAttr, FSDirectory.isReservedRawName(src));\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(\n        src);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n    checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    xAttrs.add(xAttr);\n    fsd.writeLock();\n    try {\n      unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(src, false);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "HdfsFileStatus"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,25 @@\n-  private void setXAttrInt(final String srcArg, XAttr xAttr,\n-      EnumSet\u003cXAttrSetFlag\u003e flag, boolean logRetryCache) throws IOException {\n-    String src \u003d srcArg;\n-    checkXAttrsConfigFlag();\n-    checkXAttrSize(xAttr);\n-    HdfsFileStatus resultingStat \u003d null;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    XAttrPermissionFilter.checkPermissionForApi(pc, xAttr,\n-        FSDirectory.isReservedRawName(src));\n-    checkOperation(OperationCategory.WRITE);\n-    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    writeLock();\n+  static HdfsFileStatus setXAttr(\n+      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n+      boolean logRetryCache)\n+      throws IOException {\n+    checkXAttrsConfigFlag(fsd);\n+    checkXAttrSize(fsd, xAttr);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+    XAttrPermissionFilter.checkPermissionForApi(\n+        pc, xAttr, FSDirectory.isReservedRawName(src));\n+    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(\n+        src);\n+    src \u003d fsd.resolvePath(pc, src, pathComponents);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n+    checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n+    xAttrs.add(xAttr);\n+    fsd.writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot set XAttr on \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n-      checkXAttrChangeAccess(iip, xAttr, pc);\n-      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n-      xAttrs.add(xAttr);\n-      dir.setXAttrs(src, xAttrs, flag);\n-      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n-      resultingStat \u003d getAuditFileInfo(src, false);\n+      unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"setXAttr\", srcArg, null, resultingStat);\n+    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n+    return fsd.getAuditFileInfo(src, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus setXAttr(\n      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n      boolean logRetryCache)\n      throws IOException {\n    checkXAttrsConfigFlag(fsd);\n    checkXAttrSize(fsd, xAttr);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    XAttrPermissionFilter.checkPermissionForApi(\n        pc, xAttr, FSDirectory.isReservedRawName(src));\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(\n        src);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n    checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    xAttrs.add(xAttr);\n    fsd.writeLock();\n    try {\n      unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(src, false);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,25 @@\n-  private void setXAttrInt(final String srcArg, XAttr xAttr,\n-      EnumSet\u003cXAttrSetFlag\u003e flag, boolean logRetryCache) throws IOException {\n-    String src \u003d srcArg;\n-    checkXAttrsConfigFlag();\n-    checkXAttrSize(xAttr);\n-    HdfsFileStatus resultingStat \u003d null;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    XAttrPermissionFilter.checkPermissionForApi(pc, xAttr,\n-        FSDirectory.isReservedRawName(src));\n-    checkOperation(OperationCategory.WRITE);\n-    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    writeLock();\n+  static HdfsFileStatus setXAttr(\n+      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n+      boolean logRetryCache)\n+      throws IOException {\n+    checkXAttrsConfigFlag(fsd);\n+    checkXAttrSize(fsd, xAttr);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+    XAttrPermissionFilter.checkPermissionForApi(\n+        pc, xAttr, FSDirectory.isReservedRawName(src));\n+    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(\n+        src);\n+    src \u003d fsd.resolvePath(pc, src, pathComponents);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n+    checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n+    xAttrs.add(xAttr);\n+    fsd.writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot set XAttr on \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n-      checkXAttrChangeAccess(iip, xAttr, pc);\n-      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n-      xAttrs.add(xAttr);\n-      dir.setXAttrs(src, xAttrs, flag);\n-      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n-      resultingStat \u003d getAuditFileInfo(src, false);\n+      unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"setXAttr\", srcArg, null, resultingStat);\n+    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n+    return fsd.getAuditFileInfo(src, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus setXAttr(\n      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n      boolean logRetryCache)\n      throws IOException {\n    checkXAttrsConfigFlag(fsd);\n    checkXAttrSize(fsd, xAttr);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    XAttrPermissionFilter.checkPermissionForApi(\n        pc, xAttr, FSDirectory.isReservedRawName(src));\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(\n        src);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n    checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    xAttrs.add(xAttr);\n    fsd.writeLock();\n    try {\n      unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(src, false);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,25 @@\n-  private void setXAttrInt(final String srcArg, XAttr xAttr,\n-      EnumSet\u003cXAttrSetFlag\u003e flag, boolean logRetryCache) throws IOException {\n-    String src \u003d srcArg;\n-    checkXAttrsConfigFlag();\n-    checkXAttrSize(xAttr);\n-    HdfsFileStatus resultingStat \u003d null;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    XAttrPermissionFilter.checkPermissionForApi(pc, xAttr,\n-        FSDirectory.isReservedRawName(src));\n-    checkOperation(OperationCategory.WRITE);\n-    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    writeLock();\n+  static HdfsFileStatus setXAttr(\n+      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n+      boolean logRetryCache)\n+      throws IOException {\n+    checkXAttrsConfigFlag(fsd);\n+    checkXAttrSize(fsd, xAttr);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+    XAttrPermissionFilter.checkPermissionForApi(\n+        pc, xAttr, FSDirectory.isReservedRawName(src));\n+    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(\n+        src);\n+    src \u003d fsd.resolvePath(pc, src, pathComponents);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n+    checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n+    xAttrs.add(xAttr);\n+    fsd.writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot set XAttr on \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n-      checkXAttrChangeAccess(iip, xAttr, pc);\n-      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n-      xAttrs.add(xAttr);\n-      dir.setXAttrs(src, xAttrs, flag);\n-      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n-      resultingStat \u003d getAuditFileInfo(src, false);\n+      unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"setXAttr\", srcArg, null, resultingStat);\n+    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n+    return fsd.getAuditFileInfo(src, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus setXAttr(\n      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n      boolean logRetryCache)\n      throws IOException {\n    checkXAttrsConfigFlag(fsd);\n    checkXAttrSize(fsd, xAttr);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    XAttrPermissionFilter.checkPermissionForApi(\n        pc, xAttr, FSDirectory.isReservedRawName(src));\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(\n        src);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n    checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    xAttrs.add(xAttr);\n    fsd.writeLock();\n    try {\n      unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(src, false);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldValue": "setXAttrInt",
            "newValue": "setXAttr"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,25 @@\n-  private void setXAttrInt(final String srcArg, XAttr xAttr,\n-      EnumSet\u003cXAttrSetFlag\u003e flag, boolean logRetryCache) throws IOException {\n-    String src \u003d srcArg;\n-    checkXAttrsConfigFlag();\n-    checkXAttrSize(xAttr);\n-    HdfsFileStatus resultingStat \u003d null;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    XAttrPermissionFilter.checkPermissionForApi(pc, xAttr,\n-        FSDirectory.isReservedRawName(src));\n-    checkOperation(OperationCategory.WRITE);\n-    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    writeLock();\n+  static HdfsFileStatus setXAttr(\n+      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n+      boolean logRetryCache)\n+      throws IOException {\n+    checkXAttrsConfigFlag(fsd);\n+    checkXAttrSize(fsd, xAttr);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+    XAttrPermissionFilter.checkPermissionForApi(\n+        pc, xAttr, FSDirectory.isReservedRawName(src));\n+    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(\n+        src);\n+    src \u003d fsd.resolvePath(pc, src, pathComponents);\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n+    checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n+    xAttrs.add(xAttr);\n+    fsd.writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot set XAttr on \" + src);\n-      src \u003d dir.resolvePath(pc, src, pathComponents);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n-      checkXAttrChangeAccess(iip, xAttr, pc);\n-      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n-      xAttrs.add(xAttr);\n-      dir.setXAttrs(src, xAttrs, flag);\n-      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n-      resultingStat \u003d getAuditFileInfo(src, false);\n+      unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"setXAttr\", srcArg, null, resultingStat);\n+    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n+    return fsd.getAuditFileInfo(src, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus setXAttr(\n      FSDirectory fsd, String src, XAttr xAttr, EnumSet\u003cXAttrSetFlag\u003e flag,\n      boolean logRetryCache)\n      throws IOException {\n    checkXAttrsConfigFlag(fsd);\n    checkXAttrSize(fsd, xAttr);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    XAttrPermissionFilter.checkPermissionForApi(\n        pc, xAttr, FSDirectory.isReservedRawName(src));\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(\n        src);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(src);\n    checkXAttrChangeAccess(fsd, iip, xAttr, pc);\n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    xAttrs.add(xAttr);\n    fsd.writeLock();\n    try {\n      unprotectedSetXAttrs(fsd, src, xAttrs, flag);\n    } finally {\n      fsd.writeUnlock();\n    }\n    fsd.getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n    return fsd.getAuditFileInfo(src, false);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldValue": "[srcArg-String(modifiers-final), xAttr-XAttr, flag-EnumSet\u003cXAttrSetFlag\u003e, logRetryCache-boolean]",
            "newValue": "[fsd-FSDirectory, src-String, xAttr-XAttr, flag-EnumSet\u003cXAttrSetFlag\u003e, logRetryCache-boolean]"
          }
        }
      ]
    },
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7474. Avoid resolving path in FSPermissionChecker. Contributed by Jing Zhao.\n",
      "commitDate": "05/12/14 2:17 PM",
      "commitName": "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "05/12/14 10:55 AM",
      "commitNameOld": "6a5596e3b4443462fc86f800b3c2eb839d44c3bd",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   private void setXAttrInt(final String srcArg, XAttr xAttr,\n       EnumSet\u003cXAttrSetFlag\u003e flag, boolean logRetryCache) throws IOException {\n     String src \u003d srcArg;\n     checkXAttrsConfigFlag();\n     checkXAttrSize(xAttr);\n     HdfsFileStatus resultingStat \u003d null;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     XAttrPermissionFilter.checkPermissionForApi(pc, xAttr,\n         FSDirectory.isReservedRawName(src));\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot set XAttr on \" + src);\n       src \u003d dir.resolvePath(pc, src, pathComponents);\n-      checkXAttrChangeAccess(src, xAttr, pc);\n+      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n+      checkXAttrChangeAccess(iip, xAttr, pc);\n       List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n       xAttrs.add(xAttr);\n       dir.setXAttrs(src, xAttrs, flag);\n       getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n       resultingStat \u003d getAuditFileInfo(src, false);\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, \"setXAttr\", srcArg, null, resultingStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setXAttrInt(final String srcArg, XAttr xAttr,\n      EnumSet\u003cXAttrSetFlag\u003e flag, boolean logRetryCache) throws IOException {\n    String src \u003d srcArg;\n    checkXAttrsConfigFlag();\n    checkXAttrSize(xAttr);\n    HdfsFileStatus resultingStat \u003d null;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    XAttrPermissionFilter.checkPermissionForApi(pc, xAttr,\n        FSDirectory.isReservedRawName(src));\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot set XAttr on \" + src);\n      src \u003d dir.resolvePath(pc, src, pathComponents);\n      final INodesInPath iip \u003d dir.getINodesInPath4Write(src);\n      checkXAttrChangeAccess(iip, xAttr, pc);\n      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n      xAttrs.add(xAttr);\n      dir.setXAttrs(src, xAttrs, flag);\n      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n      resultingStat \u003d getAuditFileInfo(src, false);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, \"setXAttr\", srcArg, null, resultingStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "6a5596e3b4443462fc86f800b3c2eb839d44c3bd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7478. Move org.apache.hadoop.hdfs.server.namenode.NNConf to FSNamesystem. Contributed by Li Lu.\n",
      "commitDate": "05/12/14 10:55 AM",
      "commitName": "6a5596e3b4443462fc86f800b3c2eb839d44c3bd",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "02/12/14 2:53 PM",
      "commitNameOld": "185e0c7b4c056b88f606362c71e4a22aae7076e0",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 2.83,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   private void setXAttrInt(final String srcArg, XAttr xAttr,\n       EnumSet\u003cXAttrSetFlag\u003e flag, boolean logRetryCache) throws IOException {\n     String src \u003d srcArg;\n-    nnConf.checkXAttrsConfigFlag();\n+    checkXAttrsConfigFlag();\n     checkXAttrSize(xAttr);\n     HdfsFileStatus resultingStat \u003d null;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     XAttrPermissionFilter.checkPermissionForApi(pc, xAttr,\n         FSDirectory.isReservedRawName(src));\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot set XAttr on \" + src);\n       src \u003d dir.resolvePath(pc, src, pathComponents);\n       checkXAttrChangeAccess(src, xAttr, pc);\n       List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n       xAttrs.add(xAttr);\n       dir.setXAttrs(src, xAttrs, flag);\n       getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n       resultingStat \u003d getAuditFileInfo(src, false);\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, \"setXAttr\", srcArg, null, resultingStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setXAttrInt(final String srcArg, XAttr xAttr,\n      EnumSet\u003cXAttrSetFlag\u003e flag, boolean logRetryCache) throws IOException {\n    String src \u003d srcArg;\n    checkXAttrsConfigFlag();\n    checkXAttrSize(xAttr);\n    HdfsFileStatus resultingStat \u003d null;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    XAttrPermissionFilter.checkPermissionForApi(pc, xAttr,\n        FSDirectory.isReservedRawName(src));\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot set XAttr on \" + src);\n      src \u003d dir.resolvePath(pc, src, pathComponents);\n      checkXAttrChangeAccess(src, xAttr, pc);\n      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n      xAttrs.add(xAttr);\n      dir.setXAttrs(src, xAttrs, flag);\n      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n      resultingStat \u003d getAuditFileInfo(src, false);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, \"setXAttr\", srcArg, null, resultingStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "c95b878abf313507666ea018f9e6033c4c166e10": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7415. Move FSNameSystem.resolvePath() to FSDirectory. Contributed by Haohui Mai.\n",
      "commitDate": "20/11/14 7:23 PM",
      "commitName": "c95b878abf313507666ea018f9e6033c4c166e10",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/11/14 5:33 PM",
      "commitNameOld": "dcb8e24427b02e2f3ff9a12d2eb1eb878e3443bb",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.08,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   private void setXAttrInt(final String srcArg, XAttr xAttr,\n       EnumSet\u003cXAttrSetFlag\u003e flag, boolean logRetryCache) throws IOException {\n     String src \u003d srcArg;\n     nnConf.checkXAttrsConfigFlag();\n     checkXAttrSize(xAttr);\n     HdfsFileStatus resultingStat \u003d null;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     XAttrPermissionFilter.checkPermissionForApi(pc, xAttr,\n         FSDirectory.isReservedRawName(src));\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot set XAttr on \" + src);\n-      src \u003d resolvePath(src, pathComponents);\n+      src \u003d dir.resolvePath(pc, src, pathComponents);\n       checkXAttrChangeAccess(src, xAttr, pc);\n       List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n       xAttrs.add(xAttr);\n       dir.setXAttrs(src, xAttrs, flag);\n       getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n       resultingStat \u003d getAuditFileInfo(src, false);\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, \"setXAttr\", srcArg, null, resultingStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setXAttrInt(final String srcArg, XAttr xAttr,\n      EnumSet\u003cXAttrSetFlag\u003e flag, boolean logRetryCache) throws IOException {\n    String src \u003d srcArg;\n    nnConf.checkXAttrsConfigFlag();\n    checkXAttrSize(xAttr);\n    HdfsFileStatus resultingStat \u003d null;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    XAttrPermissionFilter.checkPermissionForApi(pc, xAttr,\n        FSDirectory.isReservedRawName(src));\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot set XAttr on \" + src);\n      src \u003d dir.resolvePath(pc, src, pathComponents);\n      checkXAttrChangeAccess(src, xAttr, pc);\n      List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n      xAttrs.add(xAttr);\n      dir.setXAttrs(src, xAttrs, flag);\n      getEditLog().logSetXAttrs(src, xAttrs, logRetryCache);\n      resultingStat \u003d getAuditFileInfo(src, false);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, \"setXAttr\", srcArg, null, resultingStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    }
  }
}