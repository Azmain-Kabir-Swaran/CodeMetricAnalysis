{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HAUtilClient.java",
  "functionName": "cloneDelegationTokenForLogicalUri",
  "functionId": "cloneDelegationTokenForLogicalUri___ugi-UserGroupInformation__haUri-URI__nnAddrs-Collection__InetSocketAddress__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/HAUtilClient.java",
  "functionStartLine": 118,
  "functionEndLine": 149,
  "numCommitsSeen": 51,
  "timeTaken": 3577,
  "changeHistory": [
    "9e0e430f18d45cfe125dda8d85916edddf79e8d6",
    "c5ca2169151a5eec57152775789b6f53664e102c",
    "6f8003dc7bc9e8be7b0512c514d370c303faf003",
    "ed72daa5df97669906234e8ac9a406d78136b206",
    "7ba5913797c49d5001ad95558eadd119c3361060",
    "703838c59841952757d941df4414aa77d57fe492",
    "c80dbe5e09ab1eb3c1b0277055f28717895d6dd9",
    "481f84597bf842df45b068cc24c328112e8bcf40"
  ],
  "changeHistoryShort": {
    "9e0e430f18d45cfe125dda8d85916edddf79e8d6": "Ymovefromfile",
    "c5ca2169151a5eec57152775789b6f53664e102c": "Ybodychange",
    "6f8003dc7bc9e8be7b0512c514d370c303faf003": "Ybodychange",
    "ed72daa5df97669906234e8ac9a406d78136b206": "Ybodychange",
    "7ba5913797c49d5001ad95558eadd119c3361060": "Ybodychange",
    "703838c59841952757d941df4414aa77d57fe492": "Ybodychange",
    "c80dbe5e09ab1eb3c1b0277055f28717895d6dd9": "Ymultichange(Yparameterchange,Ybodychange)",
    "481f84597bf842df45b068cc24c328112e8bcf40": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9e0e430f18d45cfe125dda8d85916edddf79e8d6": {
      "type": "Ymovefromfile",
      "commitMessage": "HDFS-11538. Move ClientProtocol HA proxies into hadoop-hdfs-client. Contributed by Huafeng Wang.\n",
      "commitDate": "04/04/17 11:05 PM",
      "commitName": "9e0e430f18d45cfe125dda8d85916edddf79e8d6",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "04/04/17 9:08 PM",
      "commitNameOld": "19b89c4c7be0236aafded560b7bcad7e39d1c4ed",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public static void cloneDelegationTokenForLogicalUri(\n       UserGroupInformation ugi, URI haUri,\n       Collection\u003cInetSocketAddress\u003e nnAddrs) {\n     // this cloning logic is only used by hdfs\n     Text haService \u003d HAUtilClient.buildTokenServiceForLogicalUri(haUri,\n-                                                                 HdfsConstants.HDFS_URI_SCHEME);\n+        HdfsConstants.HDFS_URI_SCHEME);\n     Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n         tokenSelector.selectToken(haService, ugi.getTokens());\n     if (haToken !\u003d null) {\n       for (InetSocketAddress singleNNAddr : nnAddrs) {\n         // this is a minor hack to prevent physical HA tokens from being\n         // exposed to the user via UGI.getCredentials(), otherwise these\n         // cloned tokens may be inadvertently propagated to jobs\n         Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n             haToken.privateClone(buildTokenService(singleNNAddr));\n         Text alias \u003d new Text(\n             HAUtilClient.buildTokenServicePrefixForLogicalUri(\n                 HdfsConstants.HDFS_URI_SCHEME)\n                 + \"//\" + specificToken.getService());\n         ugi.addToken(alias, specificToken);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n               haUri + \" to namenode \" + singleNNAddr);\n         }\n       }\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"No HA service delegation token found for logical URI \" +\n             haUri);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void cloneDelegationTokenForLogicalUri(\n      UserGroupInformation ugi, URI haUri,\n      Collection\u003cInetSocketAddress\u003e nnAddrs) {\n    // this cloning logic is only used by hdfs\n    Text haService \u003d HAUtilClient.buildTokenServiceForLogicalUri(haUri,\n        HdfsConstants.HDFS_URI_SCHEME);\n    Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n        tokenSelector.selectToken(haService, ugi.getTokens());\n    if (haToken !\u003d null) {\n      for (InetSocketAddress singleNNAddr : nnAddrs) {\n        // this is a minor hack to prevent physical HA tokens from being\n        // exposed to the user via UGI.getCredentials(), otherwise these\n        // cloned tokens may be inadvertently propagated to jobs\n        Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n            haToken.privateClone(buildTokenService(singleNNAddr));\n        Text alias \u003d new Text(\n            HAUtilClient.buildTokenServicePrefixForLogicalUri(\n                HdfsConstants.HDFS_URI_SCHEME)\n                + \"//\" + specificToken.getService());\n        ugi.addToken(alias, specificToken);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n              haUri + \" to namenode \" + singleNNAddr);\n        }\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"No HA service delegation token found for logical URI \" +\n            haUri);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/HAUtilClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/HAUtilClient.java",
        "oldMethodName": "cloneDelegationTokenForLogicalUri",
        "newMethodName": "cloneDelegationTokenForLogicalUri"
      }
    },
    "c5ca2169151a5eec57152775789b6f53664e102c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10683. Make class Token$PrivateToken private. Contributed by John Zhuge.\n",
      "commitDate": "05/10/16 5:36 PM",
      "commitName": "c5ca2169151a5eec57152775789b6f53664e102c",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "01/02/16 11:21 PM",
      "commitNameOld": "4d7055e0c8d1936d6c87cec14dbbfdff77b837f3",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 246.72,
      "commitsBetweenForRepo": 1717,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n   public static void cloneDelegationTokenForLogicalUri(\n       UserGroupInformation ugi, URI haUri,\n       Collection\u003cInetSocketAddress\u003e nnAddrs) {\n     // this cloning logic is only used by hdfs\n     Text haService \u003d HAUtilClient.buildTokenServiceForLogicalUri(haUri,\n                                                                  HdfsConstants.HDFS_URI_SCHEME);\n     Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n         tokenSelector.selectToken(haService, ugi.getTokens());\n     if (haToken !\u003d null) {\n       for (InetSocketAddress singleNNAddr : nnAddrs) {\n         // this is a minor hack to prevent physical HA tokens from being\n         // exposed to the user via UGI.getCredentials(), otherwise these\n         // cloned tokens may be inadvertently propagated to jobs\n         Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n-            new Token.PrivateToken\u003cDelegationTokenIdentifier\u003e(haToken);\n-        SecurityUtil.setTokenService(specificToken, singleNNAddr);\n+            haToken.privateClone(buildTokenService(singleNNAddr));\n         Text alias \u003d new Text(\n             HAUtilClient.buildTokenServicePrefixForLogicalUri(\n                 HdfsConstants.HDFS_URI_SCHEME)\n                 + \"//\" + specificToken.getService());\n         ugi.addToken(alias, specificToken);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n               haUri + \" to namenode \" + singleNNAddr);\n         }\n       }\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"No HA service delegation token found for logical URI \" +\n             haUri);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void cloneDelegationTokenForLogicalUri(\n      UserGroupInformation ugi, URI haUri,\n      Collection\u003cInetSocketAddress\u003e nnAddrs) {\n    // this cloning logic is only used by hdfs\n    Text haService \u003d HAUtilClient.buildTokenServiceForLogicalUri(haUri,\n                                                                 HdfsConstants.HDFS_URI_SCHEME);\n    Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n        tokenSelector.selectToken(haService, ugi.getTokens());\n    if (haToken !\u003d null) {\n      for (InetSocketAddress singleNNAddr : nnAddrs) {\n        // this is a minor hack to prevent physical HA tokens from being\n        // exposed to the user via UGI.getCredentials(), otherwise these\n        // cloned tokens may be inadvertently propagated to jobs\n        Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n            haToken.privateClone(buildTokenService(singleNNAddr));\n        Text alias \u003d new Text(\n            HAUtilClient.buildTokenServicePrefixForLogicalUri(\n                HdfsConstants.HDFS_URI_SCHEME)\n                + \"//\" + specificToken.getService());\n        ugi.addToken(alias, specificToken);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n              haUri + \" to namenode \" + singleNNAddr);\n        }\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"No HA service delegation token found for logical URI \" +\n            haUri);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
      "extendedDetails": {}
    },
    "6f8003dc7bc9e8be7b0512c514d370c303faf003": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8185. Separate client related routines in HAUtil into a new class. Contributed by Haohui Mai.\n",
      "commitDate": "21/04/15 9:59 PM",
      "commitName": "6f8003dc7bc9e8be7b0512c514d370c303faf003",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "10/04/15 7:38 PM",
      "commitNameOld": "60da0e49e7316892d63e9c7cdc3214057e68009a",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 11.1,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   public static void cloneDelegationTokenForLogicalUri(\n       UserGroupInformation ugi, URI haUri,\n       Collection\u003cInetSocketAddress\u003e nnAddrs) {\n     // this cloning logic is only used by hdfs\n-    Text haService \u003d HAUtil.buildTokenServiceForLogicalUri(haUri,\n-        HdfsConstants.HDFS_URI_SCHEME);\n+    Text haService \u003d HAUtilClient.buildTokenServiceForLogicalUri(haUri,\n+                                                                 HdfsConstants.HDFS_URI_SCHEME);\n     Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n         tokenSelector.selectToken(haService, ugi.getTokens());\n     if (haToken !\u003d null) {\n       for (InetSocketAddress singleNNAddr : nnAddrs) {\n         // this is a minor hack to prevent physical HA tokens from being\n         // exposed to the user via UGI.getCredentials(), otherwise these\n         // cloned tokens may be inadvertently propagated to jobs\n         Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n             new Token.PrivateToken\u003cDelegationTokenIdentifier\u003e(haToken);\n         SecurityUtil.setTokenService(specificToken, singleNNAddr);\n         Text alias \u003d new Text(\n-            buildTokenServicePrefixForLogicalUri(HdfsConstants.HDFS_URI_SCHEME)\n+            HAUtilClient.buildTokenServicePrefixForLogicalUri(\n+                HdfsConstants.HDFS_URI_SCHEME)\n                 + \"//\" + specificToken.getService());\n         ugi.addToken(alias, specificToken);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n               haUri + \" to namenode \" + singleNNAddr);\n         }\n       }\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"No HA service delegation token found for logical URI \" +\n             haUri);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void cloneDelegationTokenForLogicalUri(\n      UserGroupInformation ugi, URI haUri,\n      Collection\u003cInetSocketAddress\u003e nnAddrs) {\n    // this cloning logic is only used by hdfs\n    Text haService \u003d HAUtilClient.buildTokenServiceForLogicalUri(haUri,\n                                                                 HdfsConstants.HDFS_URI_SCHEME);\n    Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n        tokenSelector.selectToken(haService, ugi.getTokens());\n    if (haToken !\u003d null) {\n      for (InetSocketAddress singleNNAddr : nnAddrs) {\n        // this is a minor hack to prevent physical HA tokens from being\n        // exposed to the user via UGI.getCredentials(), otherwise these\n        // cloned tokens may be inadvertently propagated to jobs\n        Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n            new Token.PrivateToken\u003cDelegationTokenIdentifier\u003e(haToken);\n        SecurityUtil.setTokenService(specificToken, singleNNAddr);\n        Text alias \u003d new Text(\n            HAUtilClient.buildTokenServicePrefixForLogicalUri(\n                HdfsConstants.HDFS_URI_SCHEME)\n                + \"//\" + specificToken.getService());\n        ugi.addToken(alias, specificToken);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n              haUri + \" to namenode \" + singleNNAddr);\n        }\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"No HA service delegation token found for logical URI \" +\n            haUri);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
      "extendedDetails": {}
    },
    "ed72daa5df97669906234e8ac9a406d78136b206": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7978. Add LOG.isDebugEnabled() guard for some LOG.debug(..). Contributed by Walter Su.\n",
      "commitDate": "01/04/15 12:54 PM",
      "commitName": "ed72daa5df97669906234e8ac9a406d78136b206",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "19/09/14 9:23 PM",
      "commitNameOld": "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 193.65,
      "commitsBetweenForRepo": 1607,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,32 @@\n   public static void cloneDelegationTokenForLogicalUri(\n       UserGroupInformation ugi, URI haUri,\n       Collection\u003cInetSocketAddress\u003e nnAddrs) {\n     // this cloning logic is only used by hdfs\n     Text haService \u003d HAUtil.buildTokenServiceForLogicalUri(haUri,\n         HdfsConstants.HDFS_URI_SCHEME);\n     Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n         tokenSelector.selectToken(haService, ugi.getTokens());\n     if (haToken !\u003d null) {\n       for (InetSocketAddress singleNNAddr : nnAddrs) {\n         // this is a minor hack to prevent physical HA tokens from being\n         // exposed to the user via UGI.getCredentials(), otherwise these\n         // cloned tokens may be inadvertently propagated to jobs\n         Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n             new Token.PrivateToken\u003cDelegationTokenIdentifier\u003e(haToken);\n         SecurityUtil.setTokenService(specificToken, singleNNAddr);\n         Text alias \u003d new Text(\n             buildTokenServicePrefixForLogicalUri(HdfsConstants.HDFS_URI_SCHEME)\n                 + \"//\" + specificToken.getService());\n         ugi.addToken(alias, specificToken);\n-        LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n-            haUri + \" to namenode \" + singleNNAddr);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n+              haUri + \" to namenode \" + singleNNAddr);\n+        }\n       }\n     } else {\n-      LOG.debug(\"No HA service delegation token found for logical URI \" +\n-          haUri);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"No HA service delegation token found for logical URI \" +\n+            haUri);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void cloneDelegationTokenForLogicalUri(\n      UserGroupInformation ugi, URI haUri,\n      Collection\u003cInetSocketAddress\u003e nnAddrs) {\n    // this cloning logic is only used by hdfs\n    Text haService \u003d HAUtil.buildTokenServiceForLogicalUri(haUri,\n        HdfsConstants.HDFS_URI_SCHEME);\n    Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n        tokenSelector.selectToken(haService, ugi.getTokens());\n    if (haToken !\u003d null) {\n      for (InetSocketAddress singleNNAddr : nnAddrs) {\n        // this is a minor hack to prevent physical HA tokens from being\n        // exposed to the user via UGI.getCredentials(), otherwise these\n        // cloned tokens may be inadvertently propagated to jobs\n        Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n            new Token.PrivateToken\u003cDelegationTokenIdentifier\u003e(haToken);\n        SecurityUtil.setTokenService(specificToken, singleNNAddr);\n        Text alias \u003d new Text(\n            buildTokenServicePrefixForLogicalUri(HdfsConstants.HDFS_URI_SCHEME)\n                + \"//\" + specificToken.getService());\n        ugi.addToken(alias, specificToken);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n              haUri + \" to namenode \" + singleNNAddr);\n        }\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"No HA service delegation token found for logical URI \" +\n            haUri);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
      "extendedDetails": {}
    },
    "7ba5913797c49d5001ad95558eadd119c3361060": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6667. In HDFS HA mode, Distcp/SLive with webhdfs on secure cluster fails with Client cannot authenticate via:[TOKEN, KERBEROS] error. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611508 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/14 4:11 PM",
      "commitName": "7ba5913797c49d5001ad95558eadd119c3361060",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "22/06/14 10:16 PM",
      "commitNameOld": "e8ca6480050e38d2fe4859baf4f9a8d22e7f9b85",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 24.75,
      "commitsBetweenForRepo": 171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,28 @@\n   public static void cloneDelegationTokenForLogicalUri(\n       UserGroupInformation ugi, URI haUri,\n       Collection\u003cInetSocketAddress\u003e nnAddrs) {\n-    Text haService \u003d HAUtil.buildTokenServiceForLogicalUri(haUri);\n+    // this cloning logic is only used by hdfs\n+    Text haService \u003d HAUtil.buildTokenServiceForLogicalUri(haUri,\n+        HdfsConstants.HDFS_URI_SCHEME);\n     Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n         tokenSelector.selectToken(haService, ugi.getTokens());\n     if (haToken !\u003d null) {\n       for (InetSocketAddress singleNNAddr : nnAddrs) {\n         // this is a minor hack to prevent physical HA tokens from being\n         // exposed to the user via UGI.getCredentials(), otherwise these\n         // cloned tokens may be inadvertently propagated to jobs\n         Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n             new Token.PrivateToken\u003cDelegationTokenIdentifier\u003e(haToken);\n         SecurityUtil.setTokenService(specificToken, singleNNAddr);\n-        Text alias \u003d\n-            new Text(HA_DT_SERVICE_PREFIX + \"//\" + specificToken.getService());\n+        Text alias \u003d new Text(\n+            buildTokenServicePrefixForLogicalUri(HdfsConstants.HDFS_URI_SCHEME)\n+                + \"//\" + specificToken.getService());\n         ugi.addToken(alias, specificToken);\n         LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n             haUri + \" to namenode \" + singleNNAddr);\n       }\n     } else {\n       LOG.debug(\"No HA service delegation token found for logical URI \" +\n           haUri);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void cloneDelegationTokenForLogicalUri(\n      UserGroupInformation ugi, URI haUri,\n      Collection\u003cInetSocketAddress\u003e nnAddrs) {\n    // this cloning logic is only used by hdfs\n    Text haService \u003d HAUtil.buildTokenServiceForLogicalUri(haUri,\n        HdfsConstants.HDFS_URI_SCHEME);\n    Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n        tokenSelector.selectToken(haService, ugi.getTokens());\n    if (haToken !\u003d null) {\n      for (InetSocketAddress singleNNAddr : nnAddrs) {\n        // this is a minor hack to prevent physical HA tokens from being\n        // exposed to the user via UGI.getCredentials(), otherwise these\n        // cloned tokens may be inadvertently propagated to jobs\n        Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n            new Token.PrivateToken\u003cDelegationTokenIdentifier\u003e(haToken);\n        SecurityUtil.setTokenService(specificToken, singleNNAddr);\n        Text alias \u003d new Text(\n            buildTokenServicePrefixForLogicalUri(HdfsConstants.HDFS_URI_SCHEME)\n                + \"//\" + specificToken.getService());\n        ugi.addToken(alias, specificToken);\n        LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n            haUri + \" to namenode \" + singleNNAddr);\n      }\n    } else {\n      LOG.debug(\"No HA service delegation token found for logical URI \" +\n          haUri);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
      "extendedDetails": {}
    },
    "703838c59841952757d941df4414aa77d57fe492": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10012. Secure Oozie jobs fail with delegation token renewal exception in Namenode HA setup. Contributed by Daryn Sharp and Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528301 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/10/13 9:00 PM",
      "commitName": "703838c59841952757d941df4414aa77d57fe492",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "06/07/12 11:59 AM",
      "commitNameOld": "fb95fce24056c0b0aa5b77683c684fe1b68c4f76",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 452.38,
      "commitsBetweenForRepo": 2633,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,25 @@\n   public static void cloneDelegationTokenForLogicalUri(\n       UserGroupInformation ugi, URI haUri,\n       Collection\u003cInetSocketAddress\u003e nnAddrs) {\n     Text haService \u003d HAUtil.buildTokenServiceForLogicalUri(haUri);\n     Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n         tokenSelector.selectToken(haService, ugi.getTokens());\n     if (haToken !\u003d null) {\n       for (InetSocketAddress singleNNAddr : nnAddrs) {\n+        // this is a minor hack to prevent physical HA tokens from being\n+        // exposed to the user via UGI.getCredentials(), otherwise these\n+        // cloned tokens may be inadvertently propagated to jobs\n         Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n-            new Token\u003cDelegationTokenIdentifier\u003e(haToken);\n+            new Token.PrivateToken\u003cDelegationTokenIdentifier\u003e(haToken);\n         SecurityUtil.setTokenService(specificToken, singleNNAddr);\n-        ugi.addToken(specificToken);\n+        Text alias \u003d\n+            new Text(HA_DT_SERVICE_PREFIX + \"//\" + specificToken.getService());\n+        ugi.addToken(alias, specificToken);\n         LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n             haUri + \" to namenode \" + singleNNAddr);\n       }\n     } else {\n       LOG.debug(\"No HA service delegation token found for logical URI \" +\n           haUri);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void cloneDelegationTokenForLogicalUri(\n      UserGroupInformation ugi, URI haUri,\n      Collection\u003cInetSocketAddress\u003e nnAddrs) {\n    Text haService \u003d HAUtil.buildTokenServiceForLogicalUri(haUri);\n    Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n        tokenSelector.selectToken(haService, ugi.getTokens());\n    if (haToken !\u003d null) {\n      for (InetSocketAddress singleNNAddr : nnAddrs) {\n        // this is a minor hack to prevent physical HA tokens from being\n        // exposed to the user via UGI.getCredentials(), otherwise these\n        // cloned tokens may be inadvertently propagated to jobs\n        Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n            new Token.PrivateToken\u003cDelegationTokenIdentifier\u003e(haToken);\n        SecurityUtil.setTokenService(specificToken, singleNNAddr);\n        Text alias \u003d\n            new Text(HA_DT_SERVICE_PREFIX + \"//\" + specificToken.getService());\n        ugi.addToken(alias, specificToken);\n        LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n            haUri + \" to namenode \" + singleNNAddr);\n      }\n    } else {\n      LOG.debug(\"No HA service delegation token found for logical URI \" +\n          haUri);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
      "extendedDetails": {}
    },
    "c80dbe5e09ab1eb3c1b0277055f28717895d6dd9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-2652. Add support for host-based delegation tokens.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327309 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/12 3:21 PM",
      "commitName": "c80dbe5e09ab1eb3c1b0277055f28717895d6dd9",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2652. Add support for host-based delegation tokens.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327309 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/04/12 3:21 PM",
          "commitName": "c80dbe5e09ab1eb3c1b0277055f28717895d6dd9",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "26/03/12 10:02 AM",
          "commitNameOld": "ce1a7ec9755f17527c29b0db713d7e01750e10c9",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 22.22,
          "commitsBetweenForRepo": 200,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,20 @@\n   public static void cloneDelegationTokenForLogicalUri(\n       UserGroupInformation ugi, URI haUri,\n-      InetSocketAddress singleNNAddr) {\n-    Text haService \u003d buildTokenServiceForLogicalUri(haUri);\n+      Collection\u003cInetSocketAddress\u003e nnAddrs) {\n+    Text haService \u003d HAUtil.buildTokenServiceForLogicalUri(haUri);\n     Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n-        DelegationTokenSelector.selectHdfsDelegationToken(haService, ugi);\n-    if (haToken \u003d\u003d null) {\n-      // no token\n-      return;\n+        tokenSelector.selectToken(haService, ugi.getTokens());\n+    if (haToken !\u003d null) {\n+      for (InetSocketAddress singleNNAddr : nnAddrs) {\n+        Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n+            new Token\u003cDelegationTokenIdentifier\u003e(haToken);\n+        SecurityUtil.setTokenService(specificToken, singleNNAddr);\n+        ugi.addToken(specificToken);\n+        LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n+            haUri + \" to namenode \" + singleNNAddr);\n+      }\n+    } else {\n+      LOG.debug(\"No HA service delegation token found for logical URI \" +\n+          haUri);\n     }\n-    Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n-        new Token\u003cDelegationTokenIdentifier\u003e(haToken);\n-    specificToken.setService(SecurityUtil.buildTokenService(singleNNAddr));\n-    ugi.addToken(specificToken);\n-    LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n-        haUri + \" to namenode \" + singleNNAddr);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void cloneDelegationTokenForLogicalUri(\n      UserGroupInformation ugi, URI haUri,\n      Collection\u003cInetSocketAddress\u003e nnAddrs) {\n    Text haService \u003d HAUtil.buildTokenServiceForLogicalUri(haUri);\n    Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n        tokenSelector.selectToken(haService, ugi.getTokens());\n    if (haToken !\u003d null) {\n      for (InetSocketAddress singleNNAddr : nnAddrs) {\n        Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n            new Token\u003cDelegationTokenIdentifier\u003e(haToken);\n        SecurityUtil.setTokenService(specificToken, singleNNAddr);\n        ugi.addToken(specificToken);\n        LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n            haUri + \" to namenode \" + singleNNAddr);\n      }\n    } else {\n      LOG.debug(\"No HA service delegation token found for logical URI \" +\n          haUri);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation, haUri-URI, singleNNAddr-InetSocketAddress]",
            "newValue": "[ugi-UserGroupInformation, haUri-URI, nnAddrs-Collection\u003cInetSocketAddress\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2652. Add support for host-based delegation tokens.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327309 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/04/12 3:21 PM",
          "commitName": "c80dbe5e09ab1eb3c1b0277055f28717895d6dd9",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "26/03/12 10:02 AM",
          "commitNameOld": "ce1a7ec9755f17527c29b0db713d7e01750e10c9",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 22.22,
          "commitsBetweenForRepo": 200,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,20 @@\n   public static void cloneDelegationTokenForLogicalUri(\n       UserGroupInformation ugi, URI haUri,\n-      InetSocketAddress singleNNAddr) {\n-    Text haService \u003d buildTokenServiceForLogicalUri(haUri);\n+      Collection\u003cInetSocketAddress\u003e nnAddrs) {\n+    Text haService \u003d HAUtil.buildTokenServiceForLogicalUri(haUri);\n     Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n-        DelegationTokenSelector.selectHdfsDelegationToken(haService, ugi);\n-    if (haToken \u003d\u003d null) {\n-      // no token\n-      return;\n+        tokenSelector.selectToken(haService, ugi.getTokens());\n+    if (haToken !\u003d null) {\n+      for (InetSocketAddress singleNNAddr : nnAddrs) {\n+        Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n+            new Token\u003cDelegationTokenIdentifier\u003e(haToken);\n+        SecurityUtil.setTokenService(specificToken, singleNNAddr);\n+        ugi.addToken(specificToken);\n+        LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n+            haUri + \" to namenode \" + singleNNAddr);\n+      }\n+    } else {\n+      LOG.debug(\"No HA service delegation token found for logical URI \" +\n+          haUri);\n     }\n-    Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n-        new Token\u003cDelegationTokenIdentifier\u003e(haToken);\n-    specificToken.setService(SecurityUtil.buildTokenService(singleNNAddr));\n-    ugi.addToken(specificToken);\n-    LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n-        haUri + \" to namenode \" + singleNNAddr);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void cloneDelegationTokenForLogicalUri(\n      UserGroupInformation ugi, URI haUri,\n      Collection\u003cInetSocketAddress\u003e nnAddrs) {\n    Text haService \u003d HAUtil.buildTokenServiceForLogicalUri(haUri);\n    Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n        tokenSelector.selectToken(haService, ugi.getTokens());\n    if (haToken !\u003d null) {\n      for (InetSocketAddress singleNNAddr : nnAddrs) {\n        Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n            new Token\u003cDelegationTokenIdentifier\u003e(haToken);\n        SecurityUtil.setTokenService(specificToken, singleNNAddr);\n        ugi.addToken(specificToken);\n        LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n            haUri + \" to namenode \" + singleNNAddr);\n      }\n    } else {\n      LOG.debug(\"No HA service delegation token found for logical URI \" +\n          haUri);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "481f84597bf842df45b068cc24c328112e8bcf40": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2904. Client support for getting delegation tokens. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1293486 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/02/12 4:03 PM",
      "commitName": "481f84597bf842df45b068cc24c328112e8bcf40",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,17 @@\n+  public static void cloneDelegationTokenForLogicalUri(\n+      UserGroupInformation ugi, URI haUri,\n+      InetSocketAddress singleNNAddr) {\n+    Text haService \u003d buildTokenServiceForLogicalUri(haUri);\n+    Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n+        DelegationTokenSelector.selectHdfsDelegationToken(haService, ugi);\n+    if (haToken \u003d\u003d null) {\n+      // no token\n+      return;\n+    }\n+    Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n+        new Token\u003cDelegationTokenIdentifier\u003e(haToken);\n+    specificToken.setService(SecurityUtil.buildTokenService(singleNNAddr));\n+    ugi.addToken(specificToken);\n+    LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n+        haUri + \" to namenode \" + singleNNAddr);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void cloneDelegationTokenForLogicalUri(\n      UserGroupInformation ugi, URI haUri,\n      InetSocketAddress singleNNAddr) {\n    Text haService \u003d buildTokenServiceForLogicalUri(haUri);\n    Token\u003cDelegationTokenIdentifier\u003e haToken \u003d\n        DelegationTokenSelector.selectHdfsDelegationToken(haService, ugi);\n    if (haToken \u003d\u003d null) {\n      // no token\n      return;\n    }\n    Token\u003cDelegationTokenIdentifier\u003e specificToken \u003d\n        new Token\u003cDelegationTokenIdentifier\u003e(haToken);\n    specificToken.setService(SecurityUtil.buildTokenService(singleNNAddr));\n    ugi.addToken(specificToken);\n    LOG.debug(\"Mapped HA service delegation token for logical URI \" +\n        haUri + \" to namenode \" + singleNNAddr);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java"
    }
  }
}