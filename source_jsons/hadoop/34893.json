{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMRMProxyTokenSecretManager.java",
  "functionName": "init",
  "functionId": "init___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyTokenSecretManager.java",
  "functionStartLine": 84,
  "functionEndLine": 103,
  "numCommitsSeen": 4,
  "timeTaken": 2143,
  "changeHistory": [
    "49aa60e50d20f8c18ed6f00fa8966244536fe7da"
  ],
  "changeHistoryShort": {
    "49aa60e50d20f8c18ed6f00fa8966244536fe7da": "Yintroduced"
  },
  "changeHistoryDetails": {
    "49aa60e50d20f8c18ed6f00fa8966244536fe7da": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6127. Add support for work preserving NM restart when AMRMProxy is enabled. (Botong Huang via asuresh).\n",
      "commitDate": "22/06/17 11:27 AM",
      "commitName": "49aa60e50d20f8c18ed6f00fa8966244536fe7da",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,20 @@\n+  public void init(Configuration conf) {\n+    this.rollingInterval \u003d\n+        conf.getLong(\n+            YarnConfiguration.RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS,\n+            YarnConfiguration.DEFAULT_RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS) * 1000;\n+    // Adding delay \u003d 1.5 * expiry interval makes sure that all active AMs get\n+    // the updated shared-key.\n+    this.activationDelay \u003d\n+        (long) (conf.getLong(YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS,\n+            YarnConfiguration.DEFAULT_RM_AM_EXPIRY_INTERVAL_MS) * 1.5);\n+    LOG.info(\"AMRMTokenKeyRollingInterval: \" + this.rollingInterval\n+        + \"ms and AMRMTokenKeyActivationDelay: \" + this.activationDelay\n+        + \" ms\");\n+    if (rollingInterval \u003c\u003d activationDelay * 2) {\n+      throw new IllegalArgumentException(\n+          YarnConfiguration.RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS\n+              + \" should be more than 3 X \"\n+              + YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.rollingInterval \u003d\n        conf.getLong(\n            YarnConfiguration.RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS,\n            YarnConfiguration.DEFAULT_RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS) * 1000;\n    // Adding delay \u003d 1.5 * expiry interval makes sure that all active AMs get\n    // the updated shared-key.\n    this.activationDelay \u003d\n        (long) (conf.getLong(YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_AM_EXPIRY_INTERVAL_MS) * 1.5);\n    LOG.info(\"AMRMTokenKeyRollingInterval: \" + this.rollingInterval\n        + \"ms and AMRMTokenKeyActivationDelay: \" + this.activationDelay\n        + \" ms\");\n    if (rollingInterval \u003c\u003d activationDelay * 2) {\n      throw new IllegalArgumentException(\n          YarnConfiguration.RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS\n              + \" should be more than 3 X \"\n              + YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyTokenSecretManager.java"
    }
  }
}