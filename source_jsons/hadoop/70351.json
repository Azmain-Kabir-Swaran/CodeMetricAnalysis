{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeAzureFileSystem.java",
  "functionName": "append",
  "functionId": "append___f-Path__bufferSize-int__progress-Progressable",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
  "functionStartLine": 1590,
  "functionEndLine": 1650,
  "numCommitsSeen": 66,
  "timeTaken": 4430,
  "changeHistory": [
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1",
    "b415c6fe743242acf1d1d3eb7ea7091d90d2c0d4",
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5",
    "686823529be09bea2a6cecb3503ef722017475bc",
    "52d7d5aa1a303cf70519a61487641211f4267c6f",
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1": "Ybodychange",
    "b415c6fe743242acf1d1d3eb7ea7091d90d2c0d4": "Ybodychange",
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5": "Ybodychange",
    "686823529be09bea2a6cecb3503ef722017475bc": "Ybodychange",
    "52d7d5aa1a303cf70519a61487641211f4267c6f": "Ybodychange",
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f": "Ybodychange",
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9": "Ybodychange",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15547/ WASB: improve listStatus performance.\nContributed by Thomas Marquardt.\n\n(cherry picked from commit 749fff577ed9afb4ef8a54b8948f74be083cc620)\n",
      "commitDate": "19/07/18 12:31 PM",
      "commitName": "45d9568aaaf532a6da11bd7c1844ff81bf66bab1",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/06/18 10:37 PM",
      "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 21.58,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n   public FSDataOutputStream append(Path f, int bufferSize, Progressable progress)\n       throws IOException {\n \n     if (!appendSupportEnabled) {\n       throw new UnsupportedOperationException(\"Append Support not enabled\");\n     }\n \n     LOG.debug(\"Opening file: {} for append\", f);\n \n     Path absolutePath \u003d makeAbsolute(f);\n \n     performAuthCheck(absolutePath, WasbAuthorizationOperations.WRITE, \"append\", absolutePath);\n \n     String key \u003d pathToKey(absolutePath);\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       } else {\n         throw ex;\n       }\n     }\n \n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n \n-    if (meta.isDir()) {\n+    if (meta.isDirectory()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n     if (store.isPageBlobKey(key)) {\n       throw new IOException(\"Append not supported for Page Blobs\");\n     }\n \n     DataOutputStream appendStream \u003d null;\n \n     try {\n       appendStream \u003d store.retrieveAppendStream(key, bufferSize);\n     } catch (Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       } else {\n         throw ex;\n       }\n     }\n \n     return new FSDataOutputStream(appendStream, statistics);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream append(Path f, int bufferSize, Progressable progress)\n      throws IOException {\n\n    if (!appendSupportEnabled) {\n      throw new UnsupportedOperationException(\"Append Support not enabled\");\n    }\n\n    LOG.debug(\"Opening file: {} for append\", f);\n\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath, WasbAuthorizationOperations.WRITE, \"append\", absolutePath);\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      } else {\n        throw ex;\n      }\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n\n    if (meta.isDirectory()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    if (store.isPageBlobKey(key)) {\n      throw new IOException(\"Append not supported for Page Blobs\");\n    }\n\n    DataOutputStream appendStream \u003d null;\n\n    try {\n      appendStream \u003d store.retrieveAppendStream(key, bufferSize);\n    } catch (Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      } else {\n        throw ex;\n      }\n    }\n\n    return new FSDataOutputStream(appendStream, statistics);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "b415c6fe743242acf1d1d3eb7ea7091d90d2c0d4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14416. Path starting with \u0027wasb:///\u0027 not resolved correctly while authorizing with WASB-Ranger. Contributed by Sivaguru Sankaridurg\n",
      "commitDate": "16/05/17 11:22 AM",
      "commitName": "b415c6fe743242acf1d1d3eb7ea7091d90d2c0d4",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "10/05/17 3:05 PM",
      "commitNameOld": "eed731496f63537350206274af09d2118b116a17",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 5.85,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n   public FSDataOutputStream append(Path f, int bufferSize, Progressable progress)\n       throws IOException {\n \n     if (!appendSupportEnabled) {\n       throw new UnsupportedOperationException(\"Append Support not enabled\");\n     }\n \n     LOG.debug(\"Opening file: {} for append\", f);\n \n     Path absolutePath \u003d makeAbsolute(f);\n \n-    performAuthCheck(absolutePath.toString(), WasbAuthorizationOperations.WRITE, \"append\", absolutePath.toString());\n+    performAuthCheck(absolutePath, WasbAuthorizationOperations.WRITE, \"append\", absolutePath);\n \n     String key \u003d pathToKey(absolutePath);\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       } else {\n         throw ex;\n       }\n     }\n \n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n \n     if (meta.isDir()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n     if (store.isPageBlobKey(key)) {\n       throw new IOException(\"Append not supported for Page Blobs\");\n     }\n \n     DataOutputStream appendStream \u003d null;\n \n     try {\n       appendStream \u003d store.retrieveAppendStream(key, bufferSize);\n     } catch (Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       } else {\n         throw ex;\n       }\n     }\n \n     return new FSDataOutputStream(appendStream, statistics);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream append(Path f, int bufferSize, Progressable progress)\n      throws IOException {\n\n    if (!appendSupportEnabled) {\n      throw new UnsupportedOperationException(\"Append Support not enabled\");\n    }\n\n    LOG.debug(\"Opening file: {} for append\", f);\n\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath, WasbAuthorizationOperations.WRITE, \"append\", absolutePath);\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      } else {\n        throw ex;\n      }\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    if (store.isPageBlobKey(key)) {\n      throw new IOException(\"Append not supported for Page Blobs\");\n    }\n\n    DataOutputStream appendStream \u003d null;\n\n    try {\n      appendStream \u003d store.retrieveAppendStream(key, bufferSize);\n    } catch (Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      } else {\n        throw ex;\n      }\n    }\n\n    return new FSDataOutputStream(appendStream, statistics);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14274. Azure: Simplify Ranger-WASB policy model. Contributed by Sivaguru Sankaridurg\n",
      "commitDate": "12/04/17 4:07 PM",
      "commitName": "0cab57223e3f54be17a5f27cefdb6d1da1b073e5",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "04/04/17 11:10 AM",
      "commitNameOld": "56ab02eed9b61e1c80605104dfc4c87fc6abac96",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 8.21,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,61 @@\n   public FSDataOutputStream append(Path f, int bufferSize, Progressable progress)\n       throws IOException {\n \n     if (!appendSupportEnabled) {\n       throw new UnsupportedOperationException(\"Append Support not enabled\");\n     }\n \n     LOG.debug(\"Opening file: {} for append\", f);\n \n     Path absolutePath \u003d makeAbsolute(f);\n \n-    performAuthCheck(absolutePath.toString(),\n-        WasbAuthorizationOperations.WRITE.toString(), \"append\");\n+    performAuthCheck(absolutePath.toString(), WasbAuthorizationOperations.WRITE, \"append\", absolutePath.toString());\n \n     String key \u003d pathToKey(absolutePath);\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       } else {\n         throw ex;\n       }\n     }\n \n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n \n     if (meta.isDir()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n     if (store.isPageBlobKey(key)) {\n       throw new IOException(\"Append not supported for Page Blobs\");\n     }\n \n     DataOutputStream appendStream \u003d null;\n \n     try {\n       appendStream \u003d store.retrieveAppendStream(key, bufferSize);\n     } catch (Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       } else {\n         throw ex;\n       }\n     }\n \n     return new FSDataOutputStream(appendStream, statistics);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream append(Path f, int bufferSize, Progressable progress)\n      throws IOException {\n\n    if (!appendSupportEnabled) {\n      throw new UnsupportedOperationException(\"Append Support not enabled\");\n    }\n\n    LOG.debug(\"Opening file: {} for append\", f);\n\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath.toString(), WasbAuthorizationOperations.WRITE, \"append\", absolutePath.toString());\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      } else {\n        throw ex;\n      }\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    if (store.isPageBlobKey(key)) {\n      throw new IOException(\"Append not supported for Page Blobs\");\n    }\n\n    DataOutputStream appendStream \u003d null;\n\n    try {\n      appendStream \u003d store.retrieveAppendStream(key, bufferSize);\n    } catch (Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      } else {\n        throw ex;\n      }\n    }\n\n    return new FSDataOutputStream(appendStream, statistics);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "686823529be09bea2a6cecb3503ef722017475bc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\n",
      "commitDate": "06/03/17 5:16 PM",
      "commitName": "686823529be09bea2a6cecb3503ef722017475bc",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "06/03/17 5:10 PM",
      "commitNameOld": "52d7d5aa1a303cf70519a61487641211f4267c6f",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,62 @@\n   public FSDataOutputStream append(Path f, int bufferSize, Progressable progress)\n       throws IOException {\n \n     if (!appendSupportEnabled) {\n       throw new UnsupportedOperationException(\"Append Support not enabled\");\n     }\n \n     LOG.debug(\"Opening file: {} for append\", f);\n \n     Path absolutePath \u003d makeAbsolute(f);\n+\n+    performAuthCheck(absolutePath.toString(),\n+        WasbAuthorizationOperations.WRITE.toString(), \"append\");\n+\n     String key \u003d pathToKey(absolutePath);\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       } else {\n         throw ex;\n       }\n     }\n \n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n \n     if (meta.isDir()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n     if (store.isPageBlobKey(key)) {\n       throw new IOException(\"Append not supported for Page Blobs\");\n     }\n \n     DataOutputStream appendStream \u003d null;\n \n     try {\n       appendStream \u003d store.retrieveAppendStream(key, bufferSize);\n     } catch (Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       } else {\n         throw ex;\n       }\n     }\n \n     return new FSDataOutputStream(appendStream, statistics);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream append(Path f, int bufferSize, Progressable progress)\n      throws IOException {\n\n    if (!appendSupportEnabled) {\n      throw new UnsupportedOperationException(\"Append Support not enabled\");\n    }\n\n    LOG.debug(\"Opening file: {} for append\", f);\n\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath.toString(),\n        WasbAuthorizationOperations.WRITE.toString(), \"append\");\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      } else {\n        throw ex;\n      }\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    if (store.isPageBlobKey(key)) {\n      throw new IOException(\"Append not supported for Page Blobs\");\n    }\n\n    DataOutputStream appendStream \u003d null;\n\n    try {\n      appendStream \u003d store.retrieveAppendStream(key, bufferSize);\n    } catch (Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      } else {\n        throw ex;\n      }\n    }\n\n    return new FSDataOutputStream(appendStream, statistics);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "52d7d5aa1a303cf70519a61487641211f4267c6f": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\"\n\nThis reverts commit 6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f.\n",
      "commitDate": "06/03/17 5:10 PM",
      "commitName": "52d7d5aa1a303cf70519a61487641211f4267c6f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "06/03/17 5:00 PM",
      "commitNameOld": "c571cda5c7d929477961dfff4176d7de4944d874",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,58 @@\n   public FSDataOutputStream append(Path f, int bufferSize, Progressable progress)\n       throws IOException {\n \n     if (!appendSupportEnabled) {\n       throw new UnsupportedOperationException(\"Append Support not enabled\");\n     }\n \n     LOG.debug(\"Opening file: {} for append\", f);\n \n     Path absolutePath \u003d makeAbsolute(f);\n-\n-    performAuthCheck(absolutePath.toString(),\n-        WasbAuthorizationOperations.WRITE.toString(), \"append\");\n-\n     String key \u003d pathToKey(absolutePath);\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       } else {\n         throw ex;\n       }\n     }\n \n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n \n     if (meta.isDir()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n     if (store.isPageBlobKey(key)) {\n       throw new IOException(\"Append not supported for Page Blobs\");\n     }\n \n     DataOutputStream appendStream \u003d null;\n \n     try {\n       appendStream \u003d store.retrieveAppendStream(key, bufferSize);\n     } catch (Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       } else {\n         throw ex;\n       }\n     }\n \n     return new FSDataOutputStream(appendStream, statistics);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream append(Path f, int bufferSize, Progressable progress)\n      throws IOException {\n\n    if (!appendSupportEnabled) {\n      throw new UnsupportedOperationException(\"Append Support not enabled\");\n    }\n\n    LOG.debug(\"Opening file: {} for append\", f);\n\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      } else {\n        throw ex;\n      }\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    if (store.isPageBlobKey(key)) {\n      throw new IOException(\"Append not supported for Page Blobs\");\n    }\n\n    DataOutputStream appendStream \u003d null;\n\n    try {\n      appendStream \u003d store.retrieveAppendStream(key, bufferSize);\n    } catch (Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      } else {\n        throw ex;\n      }\n    }\n\n    return new FSDataOutputStream(appendStream, statistics);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\n",
      "commitDate": "03/03/17 5:09 PM",
      "commitName": "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "29/12/16 4:24 PM",
      "commitNameOld": "c6a5b689db573046819f0e9193cb042e6c7298f4",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 64.03,
      "commitsBetweenForRepo": 324,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,62 @@\n   public FSDataOutputStream append(Path f, int bufferSize, Progressable progress)\n       throws IOException {\n \n     if (!appendSupportEnabled) {\n       throw new UnsupportedOperationException(\"Append Support not enabled\");\n     }\n \n     LOG.debug(\"Opening file: {} for append\", f);\n \n     Path absolutePath \u003d makeAbsolute(f);\n+\n+    performAuthCheck(absolutePath.toString(),\n+        WasbAuthorizationOperations.WRITE.toString(), \"append\");\n+\n     String key \u003d pathToKey(absolutePath);\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       } else {\n         throw ex;\n       }\n     }\n \n     if (meta \u003d\u003d null) {\n       throw new FileNotFoundException(f.toString());\n     }\n \n     if (meta.isDir()) {\n       throw new FileNotFoundException(f.toString()\n           + \" is a directory not a file.\");\n     }\n \n     if (store.isPageBlobKey(key)) {\n       throw new IOException(\"Append not supported for Page Blobs\");\n     }\n \n     DataOutputStream appendStream \u003d null;\n \n     try {\n       appendStream \u003d store.retrieveAppendStream(key, bufferSize);\n     } catch (Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n         throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       } else {\n         throw ex;\n       }\n     }\n \n     return new FSDataOutputStream(appendStream, statistics);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream append(Path f, int bufferSize, Progressable progress)\n      throws IOException {\n\n    if (!appendSupportEnabled) {\n      throw new UnsupportedOperationException(\"Append Support not enabled\");\n    }\n\n    LOG.debug(\"Opening file: {} for append\", f);\n\n    Path absolutePath \u003d makeAbsolute(f);\n\n    performAuthCheck(absolutePath.toString(),\n        WasbAuthorizationOperations.WRITE.toString(), \"append\");\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      } else {\n        throw ex;\n      }\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    if (store.isPageBlobKey(key)) {\n      throw new IOException(\"Append not supported for Page Blobs\");\n    }\n\n    DataOutputStream appendStream \u003d null;\n\n    try {\n      appendStream \u003d store.retrieveAppendStream(key, bufferSize);\n    } catch (Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      } else {\n        throw ex;\n      }\n    }\n\n    return new FSDataOutputStream(appendStream, statistics);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12635. Adding Append API support for WASB. Contributed by Dushyanth.\n",
      "commitDate": "18/01/16 9:08 AM",
      "commitName": "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9",
      "commitAuthor": "cnauroth",
      "commitDateOld": "09/01/16 10:18 PM",
      "commitNameOld": "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 8.45,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,58 @@\n   public FSDataOutputStream append(Path f, int bufferSize, Progressable progress)\n       throws IOException {\n-    throw new IOException(\"Not supported\");\n+\n+    if (!appendSupportEnabled) {\n+      throw new UnsupportedOperationException(\"Append Support not enabled\");\n+    }\n+\n+    LOG.debug(\"Opening file: {} for append\", f);\n+\n+    Path absolutePath \u003d makeAbsolute(f);\n+    String key \u003d pathToKey(absolutePath);\n+    FileMetadata meta \u003d null;\n+    try {\n+      meta \u003d store.retrieveMetadata(key);\n+    } catch(Exception ex) {\n+\n+      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n+\n+      if (innerException instanceof StorageException\n+          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n+\n+        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n+      } else {\n+        throw ex;\n+      }\n+    }\n+\n+    if (meta \u003d\u003d null) {\n+      throw new FileNotFoundException(f.toString());\n+    }\n+\n+    if (meta.isDir()) {\n+      throw new FileNotFoundException(f.toString()\n+          + \" is a directory not a file.\");\n+    }\n+\n+    if (store.isPageBlobKey(key)) {\n+      throw new IOException(\"Append not supported for Page Blobs\");\n+    }\n+\n+    DataOutputStream appendStream \u003d null;\n+\n+    try {\n+      appendStream \u003d store.retrieveAppendStream(key, bufferSize);\n+    } catch (Exception ex) {\n+\n+      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n+\n+      if (innerException instanceof StorageException\n+          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n+        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n+      } else {\n+        throw ex;\n+      }\n+    }\n+\n+    return new FSDataOutputStream(appendStream, statistics);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream append(Path f, int bufferSize, Progressable progress)\n      throws IOException {\n\n    if (!appendSupportEnabled) {\n      throw new UnsupportedOperationException(\"Append Support not enabled\");\n    }\n\n    LOG.debug(\"Opening file: {} for append\", f);\n\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      } else {\n        throw ex;\n      }\n    }\n\n    if (meta \u003d\u003d null) {\n      throw new FileNotFoundException(f.toString());\n    }\n\n    if (meta.isDir()) {\n      throw new FileNotFoundException(f.toString()\n          + \" is a directory not a file.\");\n    }\n\n    if (store.isPageBlobKey(key)) {\n      throw new IOException(\"Append not supported for Page Blobs\");\n    }\n\n    DataOutputStream appendStream \u003d null;\n\n    try {\n      appendStream \u003d store.retrieveAppendStream(key, bufferSize);\n    } catch (Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n        throw new FileNotFoundException(String.format(\"%s is not found\", key));\n      } else {\n        throw ex;\n      }\n    }\n\n    return new FSDataOutputStream(appendStream, statistics);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,4 @@\n+  public FSDataOutputStream append(Path f, int bufferSize, Progressable progress)\n+      throws IOException {\n+    throw new IOException(\"Not supported\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream append(Path f, int bufferSize, Progressable progress)\n      throws IOException {\n    throw new IOException(\"Not supported\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java"
    }
  }
}