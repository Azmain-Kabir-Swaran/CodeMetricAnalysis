{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobResourceUploader.java",
  "functionName": "copyRemoteFiles",
  "functionId": "copyRemoteFiles___parentDir-Path__originalPath-Path__conf-Configuration__replication-short",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
  "functionStartLine": 666,
  "functionEndLine": 707,
  "numCommitsSeen": 45,
  "timeTaken": 6324,
  "changeHistory": [
    "a7371a779c591893700df1df279330589474960c",
    "fc0885da294490c3984c2231a4d35f89b3b520d4",
    "3a72bfd08281fd271bef4f41289125d39c41928c",
    "c66c3ac6bf9f63177279feec3f2917e4b882e2bc",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "a7371a779c591893700df1df279330589474960c": "Ybodychange",
    "fc0885da294490c3984c2231a4d35f89b3b520d4": "Ymultichange(Ymodifierchange,Ybodychange)",
    "3a72bfd08281fd271bef4f41289125d39c41928c": "Ybodychange",
    "c66c3ac6bf9f63177279feec3f2917e4b882e2bc": "Ymovefromfile",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a7371a779c591893700df1df279330589474960c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7225: Fix broken current folder expansion during MR job start. Contributed by Peter Bacsko.\n",
      "commitDate": "01/08/19 4:01 AM",
      "commitName": "a7371a779c591893700df1df279330589474960c",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "24/09/18 1:52 PM",
      "commitNameOld": "230d90c5b9cc0d6e74bf16b1cf6685a163a24d48",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 310.59,
      "commitsBetweenForRepo": 2305,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,42 @@\n   Path copyRemoteFiles(Path parentDir, Path originalPath,\n       Configuration conf, short replication) throws IOException {\n     // check if we do not need to copy the files\n     // is jt using the same file system.\n     // just checking for uri strings... doing no dns lookups\n     // to see if the filesystems are the same. This is not optimal.\n     // but avoids name resolution.\n \n     FileSystem remoteFs \u003d null;\n     remoteFs \u003d originalPath.getFileSystem(conf);\n     if (FileUtil.compareFs(remoteFs, jtFs)) {\n       return originalPath;\n     }\n+\n+    boolean root \u003d false;\n+    if (ROOT_PATH.equals(originalPath.toUri().getPath())) {\n+      // \"/\" needs special treatment\n+      root \u003d true;\n+    } else {\n+      // If originalPath ends in a \"/\", then remove it so\n+      // that originalPath.getName() does not return an empty string\n+      String uriString \u003d originalPath.toUri().toString();\n+      if (uriString.endsWith(\"/\")) {\n+        try {\n+          URI strippedURI \u003d\n+              new URI(uriString.substring(0, uriString.length() - 1));\n+          originalPath \u003d new Path(strippedURI);\n+        } catch (URISyntaxException e) {\n+          throw new IllegalArgumentException(\"Error processing URI\", e);\n+        }\n+      }\n+    }\n+\n     // this might have name collisions. copy will throw an exception\n     // parse the original path to create new path\n-    Path newPath \u003d new Path(parentDir, originalPath.getName());\n+    Path newPath \u003d root ?\n+        parentDir : new Path(parentDir, originalPath.getName());\n     FileUtil.copy(remoteFs, originalPath, jtFs, newPath, false, conf);\n     jtFs.setReplication(newPath, replication);\n     jtFs.makeQualified(newPath);\n     return newPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Path copyRemoteFiles(Path parentDir, Path originalPath,\n      Configuration conf, short replication) throws IOException {\n    // check if we do not need to copy the files\n    // is jt using the same file system.\n    // just checking for uri strings... doing no dns lookups\n    // to see if the filesystems are the same. This is not optimal.\n    // but avoids name resolution.\n\n    FileSystem remoteFs \u003d null;\n    remoteFs \u003d originalPath.getFileSystem(conf);\n    if (FileUtil.compareFs(remoteFs, jtFs)) {\n      return originalPath;\n    }\n\n    boolean root \u003d false;\n    if (ROOT_PATH.equals(originalPath.toUri().getPath())) {\n      // \"/\" needs special treatment\n      root \u003d true;\n    } else {\n      // If originalPath ends in a \"/\", then remove it so\n      // that originalPath.getName() does not return an empty string\n      String uriString \u003d originalPath.toUri().toString();\n      if (uriString.endsWith(\"/\")) {\n        try {\n          URI strippedURI \u003d\n              new URI(uriString.substring(0, uriString.length() - 1));\n          originalPath \u003d new Path(strippedURI);\n        } catch (URISyntaxException e) {\n          throw new IllegalArgumentException(\"Error processing URI\", e);\n        }\n      }\n    }\n\n    // this might have name collisions. copy will throw an exception\n    // parse the original path to create new path\n    Path newPath \u003d root ?\n        parentDir : new Path(parentDir, originalPath.getName());\n    FileUtil.copy(remoteFs, originalPath, jtFs, newPath, false, conf);\n    jtFs.setReplication(newPath, replication);\n    jtFs.makeQualified(newPath);\n    return newPath;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
      "extendedDetails": {}
    },
    "fc0885da294490c3984c2231a4d35f89b3b520d4": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-6846. Fragments specified for libjar paths are not handled correctly\n(Contributed by Chris Trezzo via Daniel Templeton)\n",
      "commitDate": "05/04/17 5:25 PM",
      "commitName": "fc0885da294490c3984c2231a4d35f89b3b520d4",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-6846. Fragments specified for libjar paths are not handled correctly\n(Contributed by Chris Trezzo via Daniel Templeton)\n",
          "commitDate": "05/04/17 5:25 PM",
          "commitName": "fc0885da294490c3984c2231a4d35f89b3b520d4",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "29/03/17 5:41 PM",
          "commitNameOld": "ceab00ac62f8057a07b4b936799e6f04271e6e41",
          "commitAuthorOld": "Ming Ma",
          "daysBetweenCommits": 6.99,
          "commitsBetweenForRepo": 46,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,21 @@\n-  private Path copyRemoteFiles(Path parentDir, Path originalPath,\n+  Path copyRemoteFiles(Path parentDir, Path originalPath,\n       Configuration conf, short replication) throws IOException {\n     // check if we do not need to copy the files\n     // is jt using the same file system.\n     // just checking for uri strings... doing no dns lookups\n     // to see if the filesystems are the same. This is not optimal.\n     // but avoids name resolution.\n \n     FileSystem remoteFs \u003d null;\n     remoteFs \u003d originalPath.getFileSystem(conf);\n     if (FileUtil.compareFs(remoteFs, jtFs)) {\n       return originalPath;\n     }\n     // this might have name collisions. copy will throw an exception\n     // parse the original path to create new path\n     Path newPath \u003d new Path(parentDir, originalPath.getName());\n     FileUtil.copy(remoteFs, originalPath, jtFs, newPath, false, conf);\n     jtFs.setReplication(newPath, replication);\n+    jtFs.makeQualified(newPath);\n     return newPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Path copyRemoteFiles(Path parentDir, Path originalPath,\n      Configuration conf, short replication) throws IOException {\n    // check if we do not need to copy the files\n    // is jt using the same file system.\n    // just checking for uri strings... doing no dns lookups\n    // to see if the filesystems are the same. This is not optimal.\n    // but avoids name resolution.\n\n    FileSystem remoteFs \u003d null;\n    remoteFs \u003d originalPath.getFileSystem(conf);\n    if (FileUtil.compareFs(remoteFs, jtFs)) {\n      return originalPath;\n    }\n    // this might have name collisions. copy will throw an exception\n    // parse the original path to create new path\n    Path newPath \u003d new Path(parentDir, originalPath.getName());\n    FileUtil.copy(remoteFs, originalPath, jtFs, newPath, false, conf);\n    jtFs.setReplication(newPath, replication);\n    jtFs.makeQualified(newPath);\n    return newPath;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-6846. Fragments specified for libjar paths are not handled correctly\n(Contributed by Chris Trezzo via Daniel Templeton)\n",
          "commitDate": "05/04/17 5:25 PM",
          "commitName": "fc0885da294490c3984c2231a4d35f89b3b520d4",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "29/03/17 5:41 PM",
          "commitNameOld": "ceab00ac62f8057a07b4b936799e6f04271e6e41",
          "commitAuthorOld": "Ming Ma",
          "daysBetweenCommits": 6.99,
          "commitsBetweenForRepo": 46,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,21 @@\n-  private Path copyRemoteFiles(Path parentDir, Path originalPath,\n+  Path copyRemoteFiles(Path parentDir, Path originalPath,\n       Configuration conf, short replication) throws IOException {\n     // check if we do not need to copy the files\n     // is jt using the same file system.\n     // just checking for uri strings... doing no dns lookups\n     // to see if the filesystems are the same. This is not optimal.\n     // but avoids name resolution.\n \n     FileSystem remoteFs \u003d null;\n     remoteFs \u003d originalPath.getFileSystem(conf);\n     if (FileUtil.compareFs(remoteFs, jtFs)) {\n       return originalPath;\n     }\n     // this might have name collisions. copy will throw an exception\n     // parse the original path to create new path\n     Path newPath \u003d new Path(parentDir, originalPath.getName());\n     FileUtil.copy(remoteFs, originalPath, jtFs, newPath, false, conf);\n     jtFs.setReplication(newPath, replication);\n+    jtFs.makeQualified(newPath);\n     return newPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Path copyRemoteFiles(Path parentDir, Path originalPath,\n      Configuration conf, short replication) throws IOException {\n    // check if we do not need to copy the files\n    // is jt using the same file system.\n    // just checking for uri strings... doing no dns lookups\n    // to see if the filesystems are the same. This is not optimal.\n    // but avoids name resolution.\n\n    FileSystem remoteFs \u003d null;\n    remoteFs \u003d originalPath.getFileSystem(conf);\n    if (FileUtil.compareFs(remoteFs, jtFs)) {\n      return originalPath;\n    }\n    // this might have name collisions. copy will throw an exception\n    // parse the original path to create new path\n    Path newPath \u003d new Path(parentDir, originalPath.getName());\n    FileUtil.copy(remoteFs, originalPath, jtFs, newPath, false, conf);\n    jtFs.setReplication(newPath, replication);\n    jtFs.makeQualified(newPath);\n    return newPath;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
          "extendedDetails": {}
        }
      ]
    },
    "3a72bfd08281fd271bef4f41289125d39c41928c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6121. JobResourceUpdater#compareFs() doesn\u0027t handle HA namespaces (rchiang via rkanter)\n",
      "commitDate": "30/06/15 4:49 PM",
      "commitName": "3a72bfd08281fd271bef4f41289125d39c41928c",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "20/04/15 2:14 PM",
      "commitNameOld": "d50e8f09287deeb51012d08e326a2ed71a6da869",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 71.11,
      "commitsBetweenForRepo": 648,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   private Path copyRemoteFiles(Path parentDir, Path originalPath,\n       Configuration conf, short replication) throws IOException {\n     // check if we do not need to copy the files\n     // is jt using the same file system.\n     // just checking for uri strings... doing no dns lookups\n     // to see if the filesystems are the same. This is not optimal.\n     // but avoids name resolution.\n \n     FileSystem remoteFs \u003d null;\n     remoteFs \u003d originalPath.getFileSystem(conf);\n-    if (compareFs(remoteFs, jtFs)) {\n+    if (FileUtil.compareFs(remoteFs, jtFs)) {\n       return originalPath;\n     }\n     // this might have name collisions. copy will throw an exception\n     // parse the original path to create new path\n     Path newPath \u003d new Path(parentDir, originalPath.getName());\n     FileUtil.copy(remoteFs, originalPath, jtFs, newPath, false, conf);\n     jtFs.setReplication(newPath, replication);\n     return newPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Path copyRemoteFiles(Path parentDir, Path originalPath,\n      Configuration conf, short replication) throws IOException {\n    // check if we do not need to copy the files\n    // is jt using the same file system.\n    // just checking for uri strings... doing no dns lookups\n    // to see if the filesystems are the same. This is not optimal.\n    // but avoids name resolution.\n\n    FileSystem remoteFs \u003d null;\n    remoteFs \u003d originalPath.getFileSystem(conf);\n    if (FileUtil.compareFs(remoteFs, jtFs)) {\n      return originalPath;\n    }\n    // this might have name collisions. copy will throw an exception\n    // parse the original path to create new path\n    Path newPath \u003d new Path(parentDir, originalPath.getName());\n    FileUtil.copy(remoteFs, originalPath, jtFs, newPath, false, conf);\n    jtFs.setReplication(newPath, replication);\n    return newPath;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
      "extendedDetails": {}
    },
    "c66c3ac6bf9f63177279feec3f2917e4b882e2bc": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-6267. Refactor JobSubmitter#copyAndConfigureFiles into it\u0027s own class. (Chris Trezzo via kasha)\n",
      "commitDate": "04/03/15 2:42 PM",
      "commitName": "c66c3ac6bf9f63177279feec3f2917e4b882e2bc",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "04/03/15 10:30 AM",
      "commitNameOld": "ed70fa142cabdbc1065e4dbbc95e99c8850c4751",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,20 @@\n-  private Path copyRemoteFiles(Path parentDir,\n-      Path originalPath, Configuration conf, short replication) \n-      throws IOException {\n-    //check if we do not need to copy the files\n+  private Path copyRemoteFiles(Path parentDir, Path originalPath,\n+      Configuration conf, short replication) throws IOException {\n+    // check if we do not need to copy the files\n     // is jt using the same file system.\n-    // just checking for uri strings... doing no dns lookups \n+    // just checking for uri strings... doing no dns lookups\n     // to see if the filesystems are the same. This is not optimal.\n     // but avoids name resolution.\n-    \n+\n     FileSystem remoteFs \u003d null;\n     remoteFs \u003d originalPath.getFileSystem(conf);\n     if (compareFs(remoteFs, jtFs)) {\n       return originalPath;\n     }\n     // this might have name collisions. copy will throw an exception\n-    //parse the original path to create new path\n+    // parse the original path to create new path\n     Path newPath \u003d new Path(parentDir, originalPath.getName());\n     FileUtil.copy(remoteFs, originalPath, jtFs, newPath, false, conf);\n     jtFs.setReplication(newPath, replication);\n     return newPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Path copyRemoteFiles(Path parentDir, Path originalPath,\n      Configuration conf, short replication) throws IOException {\n    // check if we do not need to copy the files\n    // is jt using the same file system.\n    // just checking for uri strings... doing no dns lookups\n    // to see if the filesystems are the same. This is not optimal.\n    // but avoids name resolution.\n\n    FileSystem remoteFs \u003d null;\n    remoteFs \u003d originalPath.getFileSystem(conf);\n    if (compareFs(remoteFs, jtFs)) {\n      return originalPath;\n    }\n    // this might have name collisions. copy will throw an exception\n    // parse the original path to create new path\n    Path newPath \u003d new Path(parentDir, originalPath.getName());\n    FileUtil.copy(remoteFs, originalPath, jtFs, newPath, false, conf);\n    jtFs.setReplication(newPath, replication);\n    return newPath;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
        "oldMethodName": "copyRemoteFiles",
        "newMethodName": "copyRemoteFiles"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Path copyRemoteFiles(Path parentDir,\n      Path originalPath, Configuration conf, short replication) \n      throws IOException {\n    //check if we do not need to copy the files\n    // is jt using the same file system.\n    // just checking for uri strings... doing no dns lookups \n    // to see if the filesystems are the same. This is not optimal.\n    // but avoids name resolution.\n    \n    FileSystem remoteFs \u003d null;\n    remoteFs \u003d originalPath.getFileSystem(conf);\n    if (compareFs(remoteFs, jtFs)) {\n      return originalPath;\n    }\n    // this might have name collisions. copy will throw an exception\n    //parse the original path to create new path\n    Path newPath \u003d new Path(parentDir, originalPath.getName());\n    FileUtil.copy(remoteFs, originalPath, jtFs, newPath, false, conf);\n    jtFs.setReplication(newPath, replication);\n    return newPath;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Path copyRemoteFiles(Path parentDir,\n      Path originalPath, Configuration conf, short replication) \n      throws IOException {\n    //check if we do not need to copy the files\n    // is jt using the same file system.\n    // just checking for uri strings... doing no dns lookups \n    // to see if the filesystems are the same. This is not optimal.\n    // but avoids name resolution.\n    \n    FileSystem remoteFs \u003d null;\n    remoteFs \u003d originalPath.getFileSystem(conf);\n    if (compareFs(remoteFs, jtFs)) {\n      return originalPath;\n    }\n    // this might have name collisions. copy will throw an exception\n    //parse the original path to create new path\n    Path newPath \u003d new Path(parentDir, originalPath.getName());\n    FileUtil.copy(remoteFs, originalPath, jtFs, newPath, false, conf);\n    jtFs.setReplication(newPath, replication);\n    return newPath;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,21 @@\n+  private Path copyRemoteFiles(Path parentDir,\n+      Path originalPath, Configuration conf, short replication) \n+      throws IOException {\n+    //check if we do not need to copy the files\n+    // is jt using the same file system.\n+    // just checking for uri strings... doing no dns lookups \n+    // to see if the filesystems are the same. This is not optimal.\n+    // but avoids name resolution.\n+    \n+    FileSystem remoteFs \u003d null;\n+    remoteFs \u003d originalPath.getFileSystem(conf);\n+    if (compareFs(remoteFs, jtFs)) {\n+      return originalPath;\n+    }\n+    // this might have name collisions. copy will throw an exception\n+    //parse the original path to create new path\n+    Path newPath \u003d new Path(parentDir, originalPath.getName());\n+    FileUtil.copy(remoteFs, originalPath, jtFs, newPath, false, conf);\n+    jtFs.setReplication(newPath, replication);\n+    return newPath;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Path copyRemoteFiles(Path parentDir,\n      Path originalPath, Configuration conf, short replication) \n      throws IOException {\n    //check if we do not need to copy the files\n    // is jt using the same file system.\n    // just checking for uri strings... doing no dns lookups \n    // to see if the filesystems are the same. This is not optimal.\n    // but avoids name resolution.\n    \n    FileSystem remoteFs \u003d null;\n    remoteFs \u003d originalPath.getFileSystem(conf);\n    if (compareFs(remoteFs, jtFs)) {\n      return originalPath;\n    }\n    // this might have name collisions. copy will throw an exception\n    //parse the original path to create new path\n    Path newPath \u003d new Path(parentDir, originalPath.getName());\n    FileUtil.copy(remoteFs, originalPath, jtFs, newPath, false, conf);\n    jtFs.setReplication(newPath, replication);\n    return newPath;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/JobSubmitter.java"
    }
  }
}