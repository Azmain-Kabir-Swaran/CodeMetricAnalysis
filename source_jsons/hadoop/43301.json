{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProviderUtils.java",
  "functionName": "resolveHadoopXmlTemplateAndSaveOnHdfs",
  "functionId": "resolveHadoopXmlTemplateAndSaveOnHdfs___fs-FileSystem__tokensForSubstitution-Map__String,String____configFile-ConfigFile__remoteFile-Path__context-ServiceContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
  "functionStartLine": 412,
  "functionEndLine": 449,
  "numCommitsSeen": 41,
  "timeTaken": 4728,
  "changeHistory": [
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "1888318c89776f0bf354c1b13e3ee169e14ff638",
    "ce05c6e9811bca0bdc01152c2a82508a639480f5",
    "845764da146e98927e8ea5b2209f19f4fc3feda5"
  ],
  "changeHistoryShort": {
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yfilerename",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Ymultichange(Yfilerename,Ymodifierchange,Ybodychange,Yparameterchange)",
    "ce05c6e9811bca0bdc01152c2a82508a639480f5": "Ymultichange(Yparameterchange,Ybodychange)",
    "845764da146e98927e8ea5b2209f19f4fc3feda5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6394. Support specifying YARN related params in the service REST API. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "b8a7ef1b64392094562e7782e0fd092934724ad2",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   private static void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n       Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n       Path remoteFile, ServiceContext context) throws IOException {\n     Map\u003cString, String\u003e conf;\n     try {\n       conf \u003d (Map\u003cString, String\u003e) context.configCache.get(configFile);\n     } catch (ExecutionException e) {\n       log.info(\"Failed to load config file: \" + configFile, e);\n       return;\n     }\n     // make a copy for substitution\n     org.apache.hadoop.conf.Configuration confCopy \u003d\n         new org.apache.hadoop.conf.Configuration(false);\n     for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n       confCopy.set(entry.getKey(), entry.getValue());\n     }\n     // substitute properties\n-    for (Map.Entry\u003cString, String\u003e entry : configFile.getProps().entrySet()) {\n+    for (Map.Entry\u003cString, String\u003e entry : configFile.getProperties().entrySet()) {\n       confCopy.set(entry.getKey(), entry.getValue());\n     }\n     // substitute env variables\n     for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n       String val \u003d entry.getValue();\n       if (val !\u003d null) {\n         for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n             .entrySet()) {\n           val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n           confCopy.set(entry.getKey(), val);\n         }\n       }\n     }\n     // save on hdfs\n     try (OutputStream output \u003d fs.create(remoteFile)) {\n       confCopy.writeXml(output);\n       log.info(\"Reading config from: \" + configFile.getSrcFile()\n           + \", writing to: \" + remoteFile);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n      Path remoteFile, ServiceContext context) throws IOException {\n    Map\u003cString, String\u003e conf;\n    try {\n      conf \u003d (Map\u003cString, String\u003e) context.configCache.get(configFile);\n    } catch (ExecutionException e) {\n      log.info(\"Failed to load config file: \" + configFile, e);\n      return;\n    }\n    // make a copy for substitution\n    org.apache.hadoop.conf.Configuration confCopy \u003d\n        new org.apache.hadoop.conf.Configuration(false);\n    for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute properties\n    for (Map.Entry\u003cString, String\u003e entry : configFile.getProperties().entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute env variables\n    for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n      String val \u003d entry.getValue();\n      if (val !\u003d null) {\n        for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n            .entrySet()) {\n          val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n          confCopy.set(entry.getKey(), val);\n        }\n      }\n    }\n    // save on hdfs\n    try (OutputStream output \u003d fs.create(remoteFile)) {\n      confCopy.writeXml(output);\n      log.info(\"Reading config from: \" + configFile.getSrcFile()\n          + \", writing to: \" + remoteFile);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n      Path remoteFile, ServiceContext context) throws IOException {\n    Map\u003cString, String\u003e conf;\n    try {\n      conf \u003d (Map\u003cString, String\u003e) context.configCache.get(configFile);\n    } catch (ExecutionException e) {\n      log.info(\"Failed to load config file: \" + configFile, e);\n      return;\n    }\n    // make a copy for substitution\n    org.apache.hadoop.conf.Configuration confCopy \u003d\n        new org.apache.hadoop.conf.Configuration(false);\n    for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute properties\n    for (Map.Entry\u003cString, String\u003e entry : configFile.getProps().entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute env variables\n    for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n      String val \u003d entry.getValue();\n      if (val !\u003d null) {\n        for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n            .entrySet()) {\n          val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n          confCopy.set(entry.getKey(), val);\n        }\n      }\n    }\n    // save on hdfs\n    try (OutputStream output \u003d fs.create(remoteFile)) {\n      confCopy.writeXml(output);\n      log.info(\"Reading config from: \" + configFile.getSrcFile()\n          + \", writing to: \" + remoteFile);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java"
      }
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,38 @@\n-  private void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n+  private static void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n       Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n-      Path remoteFile, StateAccessForProviders appState) throws IOException {\n+      Path remoteFile, ServiceContext context) throws IOException {\n     Map\u003cString, String\u003e conf;\n     try {\n-      conf \u003d (Map\u003cString, String\u003e) appState.getConfigFileCache()\n-          .get(configFile);\n+      conf \u003d (Map\u003cString, String\u003e) context.configCache.get(configFile);\n     } catch (ExecutionException e) {\n       log.info(\"Failed to load config file: \" + configFile, e);\n       return;\n     }\n     // make a copy for substitution\n     org.apache.hadoop.conf.Configuration confCopy \u003d\n         new org.apache.hadoop.conf.Configuration(false);\n     for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n       confCopy.set(entry.getKey(), entry.getValue());\n     }\n     // substitute properties\n     for (Map.Entry\u003cString, String\u003e entry : configFile.getProps().entrySet()) {\n       confCopy.set(entry.getKey(), entry.getValue());\n     }\n     // substitute env variables\n     for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n       String val \u003d entry.getValue();\n       if (val !\u003d null) {\n         for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n             .entrySet()) {\n           val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n           confCopy.set(entry.getKey(), val);\n         }\n       }\n     }\n     // save on hdfs\n     try (OutputStream output \u003d fs.create(remoteFile)) {\n       confCopy.writeXml(output);\n       log.info(\"Reading config from: \" + configFile.getSrcFile()\n           + \", writing to: \" + remoteFile);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n      Path remoteFile, ServiceContext context) throws IOException {\n    Map\u003cString, String\u003e conf;\n    try {\n      conf \u003d (Map\u003cString, String\u003e) context.configCache.get(configFile);\n    } catch (ExecutionException e) {\n      log.info(\"Failed to load config file: \" + configFile, e);\n      return;\n    }\n    // make a copy for substitution\n    org.apache.hadoop.conf.Configuration confCopy \u003d\n        new org.apache.hadoop.conf.Configuration(false);\n    for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute properties\n    for (Map.Entry\u003cString, String\u003e entry : configFile.getProps().entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute env variables\n    for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n      String val \u003d entry.getValue();\n      if (val !\u003d null) {\n        for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n            .entrySet()) {\n          val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n          confCopy.set(entry.getKey(), val);\n        }\n      }\n    }\n    // save on hdfs\n    try (OutputStream output \u003d fs.create(remoteFile)) {\n      confCopy.writeXml(output);\n      log.info(\"Reading config from: \" + configFile.getSrcFile()\n          + \", writing to: \" + remoteFile);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,38 @@\n-  private void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n+  private static void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n       Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n-      Path remoteFile, StateAccessForProviders appState) throws IOException {\n+      Path remoteFile, ServiceContext context) throws IOException {\n     Map\u003cString, String\u003e conf;\n     try {\n-      conf \u003d (Map\u003cString, String\u003e) appState.getConfigFileCache()\n-          .get(configFile);\n+      conf \u003d (Map\u003cString, String\u003e) context.configCache.get(configFile);\n     } catch (ExecutionException e) {\n       log.info(\"Failed to load config file: \" + configFile, e);\n       return;\n     }\n     // make a copy for substitution\n     org.apache.hadoop.conf.Configuration confCopy \u003d\n         new org.apache.hadoop.conf.Configuration(false);\n     for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n       confCopy.set(entry.getKey(), entry.getValue());\n     }\n     // substitute properties\n     for (Map.Entry\u003cString, String\u003e entry : configFile.getProps().entrySet()) {\n       confCopy.set(entry.getKey(), entry.getValue());\n     }\n     // substitute env variables\n     for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n       String val \u003d entry.getValue();\n       if (val !\u003d null) {\n         for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n             .entrySet()) {\n           val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n           confCopy.set(entry.getKey(), val);\n         }\n       }\n     }\n     // save on hdfs\n     try (OutputStream output \u003d fs.create(remoteFile)) {\n       confCopy.writeXml(output);\n       log.info(\"Reading config from: \" + configFile.getSrcFile()\n           + \", writing to: \" + remoteFile);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n      Path remoteFile, ServiceContext context) throws IOException {\n    Map\u003cString, String\u003e conf;\n    try {\n      conf \u003d (Map\u003cString, String\u003e) context.configCache.get(configFile);\n    } catch (ExecutionException e) {\n      log.info(\"Failed to load config file: \" + configFile, e);\n      return;\n    }\n    // make a copy for substitution\n    org.apache.hadoop.conf.Configuration confCopy \u003d\n        new org.apache.hadoop.conf.Configuration(false);\n    for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute properties\n    for (Map.Entry\u003cString, String\u003e entry : configFile.getProps().entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute env variables\n    for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n      String val \u003d entry.getValue();\n      if (val !\u003d null) {\n        for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n            .entrySet()) {\n          val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n          confCopy.set(entry.getKey(), val);\n        }\n      }\n    }\n    // save on hdfs\n    try (OutputStream output \u003d fs.create(remoteFile)) {\n      confCopy.writeXml(output);\n      log.info(\"Reading config from: \" + configFile.getSrcFile()\n          + \", writing to: \" + remoteFile);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,38 @@\n-  private void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n+  private static void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n       Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n-      Path remoteFile, StateAccessForProviders appState) throws IOException {\n+      Path remoteFile, ServiceContext context) throws IOException {\n     Map\u003cString, String\u003e conf;\n     try {\n-      conf \u003d (Map\u003cString, String\u003e) appState.getConfigFileCache()\n-          .get(configFile);\n+      conf \u003d (Map\u003cString, String\u003e) context.configCache.get(configFile);\n     } catch (ExecutionException e) {\n       log.info(\"Failed to load config file: \" + configFile, e);\n       return;\n     }\n     // make a copy for substitution\n     org.apache.hadoop.conf.Configuration confCopy \u003d\n         new org.apache.hadoop.conf.Configuration(false);\n     for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n       confCopy.set(entry.getKey(), entry.getValue());\n     }\n     // substitute properties\n     for (Map.Entry\u003cString, String\u003e entry : configFile.getProps().entrySet()) {\n       confCopy.set(entry.getKey(), entry.getValue());\n     }\n     // substitute env variables\n     for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n       String val \u003d entry.getValue();\n       if (val !\u003d null) {\n         for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n             .entrySet()) {\n           val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n           confCopy.set(entry.getKey(), val);\n         }\n       }\n     }\n     // save on hdfs\n     try (OutputStream output \u003d fs.create(remoteFile)) {\n       confCopy.writeXml(output);\n       log.info(\"Reading config from: \" + configFile.getSrcFile()\n           + \", writing to: \" + remoteFile);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n      Path remoteFile, ServiceContext context) throws IOException {\n    Map\u003cString, String\u003e conf;\n    try {\n      conf \u003d (Map\u003cString, String\u003e) context.configCache.get(configFile);\n    } catch (ExecutionException e) {\n      log.info(\"Failed to load config file: \" + configFile, e);\n      return;\n    }\n    // make a copy for substitution\n    org.apache.hadoop.conf.Configuration confCopy \u003d\n        new org.apache.hadoop.conf.Configuration(false);\n    for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute properties\n    for (Map.Entry\u003cString, String\u003e entry : configFile.getProps().entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute env variables\n    for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n      String val \u003d entry.getValue();\n      if (val !\u003d null) {\n        for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n            .entrySet()) {\n          val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n          confCopy.set(entry.getKey(), val);\n        }\n      }\n    }\n    // save on hdfs\n    try (OutputStream output \u003d fs.create(remoteFile)) {\n      confCopy.writeXml(output);\n      log.info(\"Reading config from: \" + configFile.getSrcFile()\n          + \", writing to: \" + remoteFile);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,38 @@\n-  private void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n+  private static void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n       Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n-      Path remoteFile, StateAccessForProviders appState) throws IOException {\n+      Path remoteFile, ServiceContext context) throws IOException {\n     Map\u003cString, String\u003e conf;\n     try {\n-      conf \u003d (Map\u003cString, String\u003e) appState.getConfigFileCache()\n-          .get(configFile);\n+      conf \u003d (Map\u003cString, String\u003e) context.configCache.get(configFile);\n     } catch (ExecutionException e) {\n       log.info(\"Failed to load config file: \" + configFile, e);\n       return;\n     }\n     // make a copy for substitution\n     org.apache.hadoop.conf.Configuration confCopy \u003d\n         new org.apache.hadoop.conf.Configuration(false);\n     for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n       confCopy.set(entry.getKey(), entry.getValue());\n     }\n     // substitute properties\n     for (Map.Entry\u003cString, String\u003e entry : configFile.getProps().entrySet()) {\n       confCopy.set(entry.getKey(), entry.getValue());\n     }\n     // substitute env variables\n     for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n       String val \u003d entry.getValue();\n       if (val !\u003d null) {\n         for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n             .entrySet()) {\n           val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n           confCopy.set(entry.getKey(), val);\n         }\n       }\n     }\n     // save on hdfs\n     try (OutputStream output \u003d fs.create(remoteFile)) {\n       confCopy.writeXml(output);\n       log.info(\"Reading config from: \" + configFile.getSrcFile()\n           + \", writing to: \" + remoteFile);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n      Path remoteFile, ServiceContext context) throws IOException {\n    Map\u003cString, String\u003e conf;\n    try {\n      conf \u003d (Map\u003cString, String\u003e) context.configCache.get(configFile);\n    } catch (ExecutionException e) {\n      log.info(\"Failed to load config file: \" + configFile, e);\n      return;\n    }\n    // make a copy for substitution\n    org.apache.hadoop.conf.Configuration confCopy \u003d\n        new org.apache.hadoop.conf.Configuration(false);\n    for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute properties\n    for (Map.Entry\u003cString, String\u003e entry : configFile.getProps().entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute env variables\n    for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n      String val \u003d entry.getValue();\n      if (val !\u003d null) {\n        for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n            .entrySet()) {\n          val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n          confCopy.set(entry.getKey(), val);\n        }\n      }\n    }\n    // save on hdfs\n    try (OutputStream output \u003d fs.create(remoteFile)) {\n      confCopy.writeXml(output);\n      log.info(\"Reading config from: \" + configFile.getSrcFile()\n          + \", writing to: \" + remoteFile);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "[fs-FileSystem, tokensForSubstitution-Map\u003cString,String\u003e, configFile-ConfigFile, remoteFile-Path, appState-StateAccessForProviders]",
            "newValue": "[fs-FileSystem, tokensForSubstitution-Map\u003cString,String\u003e, configFile-ConfigFile, remoteFile-Path, context-ServiceContext]"
          }
        }
      ]
    },
    "ce05c6e9811bca0bdc01152c2a82508a639480f5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6545. Followup fix for YARN-6405. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "ce05c6e9811bca0bdc01152c2a82508a639480f5",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6545. Followup fix for YARN-6405. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ce05c6e9811bca0bdc01152c2a82508a639480f5",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:28 PM",
          "commitNameOld": "845764da146e98927e8ea5b2209f19f4fc3feda5",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,39 @@\n   private void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n       Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n-      Path remoteFile, RoleInstance roleInstance) throws IOException {\n+      Path remoteFile, StateAccessForProviders appState) throws IOException {\n     Map\u003cString, String\u003e conf;\n     try {\n-      conf \u003d (Map\u003cString, String\u003e) roleInstance.providerRole.\n-          appState.configFileCache.get(configFile);\n+      conf \u003d (Map\u003cString, String\u003e) appState.getConfigFileCache()\n+          .get(configFile);\n     } catch (ExecutionException e) {\n       log.info(\"Failed to load config file: \" + configFile, e);\n       return;\n     }\n     // make a copy for substitution\n     org.apache.hadoop.conf.Configuration confCopy \u003d\n         new org.apache.hadoop.conf.Configuration(false);\n     for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n       confCopy.set(entry.getKey(), entry.getValue());\n     }\n     // substitute properties\n     for (Map.Entry\u003cString, String\u003e entry : configFile.getProps().entrySet()) {\n       confCopy.set(entry.getKey(), entry.getValue());\n     }\n     // substitute env variables\n     for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n       String val \u003d entry.getValue();\n       if (val !\u003d null) {\n         for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n             .entrySet()) {\n           val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n           confCopy.set(entry.getKey(), val);\n         }\n       }\n     }\n     // save on hdfs\n     try (OutputStream output \u003d fs.create(remoteFile)) {\n       confCopy.writeXml(output);\n       log.info(\"Reading config from: \" + configFile.getSrcFile()\n           + \", writing to: \" + remoteFile);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n      Path remoteFile, StateAccessForProviders appState) throws IOException {\n    Map\u003cString, String\u003e conf;\n    try {\n      conf \u003d (Map\u003cString, String\u003e) appState.getConfigFileCache()\n          .get(configFile);\n    } catch (ExecutionException e) {\n      log.info(\"Failed to load config file: \" + configFile, e);\n      return;\n    }\n    // make a copy for substitution\n    org.apache.hadoop.conf.Configuration confCopy \u003d\n        new org.apache.hadoop.conf.Configuration(false);\n    for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute properties\n    for (Map.Entry\u003cString, String\u003e entry : configFile.getProps().entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute env variables\n    for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n      String val \u003d entry.getValue();\n      if (val !\u003d null) {\n        for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n            .entrySet()) {\n          val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n          confCopy.set(entry.getKey(), val);\n        }\n      }\n    }\n    // save on hdfs\n    try (OutputStream output \u003d fs.create(remoteFile)) {\n      confCopy.writeXml(output);\n      log.info(\"Reading config from: \" + configFile.getSrcFile()\n          + \", writing to: \" + remoteFile);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "[fs-FileSystem, tokensForSubstitution-Map\u003cString,String\u003e, configFile-ConfigFile, remoteFile-Path, roleInstance-RoleInstance]",
            "newValue": "[fs-FileSystem, tokensForSubstitution-Map\u003cString,String\u003e, configFile-ConfigFile, remoteFile-Path, appState-StateAccessForProviders]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6545. Followup fix for YARN-6405. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ce05c6e9811bca0bdc01152c2a82508a639480f5",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:28 PM",
          "commitNameOld": "845764da146e98927e8ea5b2209f19f4fc3feda5",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,39 @@\n   private void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n       Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n-      Path remoteFile, RoleInstance roleInstance) throws IOException {\n+      Path remoteFile, StateAccessForProviders appState) throws IOException {\n     Map\u003cString, String\u003e conf;\n     try {\n-      conf \u003d (Map\u003cString, String\u003e) roleInstance.providerRole.\n-          appState.configFileCache.get(configFile);\n+      conf \u003d (Map\u003cString, String\u003e) appState.getConfigFileCache()\n+          .get(configFile);\n     } catch (ExecutionException e) {\n       log.info(\"Failed to load config file: \" + configFile, e);\n       return;\n     }\n     // make a copy for substitution\n     org.apache.hadoop.conf.Configuration confCopy \u003d\n         new org.apache.hadoop.conf.Configuration(false);\n     for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n       confCopy.set(entry.getKey(), entry.getValue());\n     }\n     // substitute properties\n     for (Map.Entry\u003cString, String\u003e entry : configFile.getProps().entrySet()) {\n       confCopy.set(entry.getKey(), entry.getValue());\n     }\n     // substitute env variables\n     for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n       String val \u003d entry.getValue();\n       if (val !\u003d null) {\n         for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n             .entrySet()) {\n           val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n           confCopy.set(entry.getKey(), val);\n         }\n       }\n     }\n     // save on hdfs\n     try (OutputStream output \u003d fs.create(remoteFile)) {\n       confCopy.writeXml(output);\n       log.info(\"Reading config from: \" + configFile.getSrcFile()\n           + \", writing to: \" + remoteFile);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n      Path remoteFile, StateAccessForProviders appState) throws IOException {\n    Map\u003cString, String\u003e conf;\n    try {\n      conf \u003d (Map\u003cString, String\u003e) appState.getConfigFileCache()\n          .get(configFile);\n    } catch (ExecutionException e) {\n      log.info(\"Failed to load config file: \" + configFile, e);\n      return;\n    }\n    // make a copy for substitution\n    org.apache.hadoop.conf.Configuration confCopy \u003d\n        new org.apache.hadoop.conf.Configuration(false);\n    for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute properties\n    for (Map.Entry\u003cString, String\u003e entry : configFile.getProps().entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute env variables\n    for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n      String val \u003d entry.getValue();\n      if (val !\u003d null) {\n        for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n            .entrySet()) {\n          val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n          confCopy.set(entry.getKey(), val);\n        }\n      }\n    }\n    // save on hdfs\n    try (OutputStream output \u003d fs.create(remoteFile)) {\n      confCopy.writeXml(output);\n      log.info(\"Reading config from: \" + configFile.getSrcFile()\n          + \", writing to: \" + remoteFile);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "845764da146e98927e8ea5b2209f19f4fc3feda5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6405. Improve configuring services through REST API. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "845764da146e98927e8ea5b2209f19f4fc3feda5",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,39 @@\n+  private void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n+      Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n+      Path remoteFile, RoleInstance roleInstance) throws IOException {\n+    Map\u003cString, String\u003e conf;\n+    try {\n+      conf \u003d (Map\u003cString, String\u003e) roleInstance.providerRole.\n+          appState.configFileCache.get(configFile);\n+    } catch (ExecutionException e) {\n+      log.info(\"Failed to load config file: \" + configFile, e);\n+      return;\n+    }\n+    // make a copy for substitution\n+    org.apache.hadoop.conf.Configuration confCopy \u003d\n+        new org.apache.hadoop.conf.Configuration(false);\n+    for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n+      confCopy.set(entry.getKey(), entry.getValue());\n+    }\n+    // substitute properties\n+    for (Map.Entry\u003cString, String\u003e entry : configFile.getProps().entrySet()) {\n+      confCopy.set(entry.getKey(), entry.getValue());\n+    }\n+    // substitute env variables\n+    for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n+      String val \u003d entry.getValue();\n+      if (val !\u003d null) {\n+        for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n+            .entrySet()) {\n+          val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n+          confCopy.set(entry.getKey(), val);\n+        }\n+      }\n+    }\n+    // save on hdfs\n+    try (OutputStream output \u003d fs.create(remoteFile)) {\n+      confCopy.writeXml(output);\n+      log.info(\"Reading config from: \" + configFile.getSrcFile()\n+          + \", writing to: \" + remoteFile);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs,\n      Map\u003cString, String\u003e tokensForSubstitution, ConfigFile configFile,\n      Path remoteFile, RoleInstance roleInstance) throws IOException {\n    Map\u003cString, String\u003e conf;\n    try {\n      conf \u003d (Map\u003cString, String\u003e) roleInstance.providerRole.\n          appState.configFileCache.get(configFile);\n    } catch (ExecutionException e) {\n      log.info(\"Failed to load config file: \" + configFile, e);\n      return;\n    }\n    // make a copy for substitution\n    org.apache.hadoop.conf.Configuration confCopy \u003d\n        new org.apache.hadoop.conf.Configuration(false);\n    for (Map.Entry\u003cString, String\u003e entry : conf.entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute properties\n    for (Map.Entry\u003cString, String\u003e entry : configFile.getProps().entrySet()) {\n      confCopy.set(entry.getKey(), entry.getValue());\n    }\n    // substitute env variables\n    for (Map.Entry\u003cString, String\u003e entry : confCopy) {\n      String val \u003d entry.getValue();\n      if (val !\u003d null) {\n        for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution\n            .entrySet()) {\n          val \u003d val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\n          confCopy.set(entry.getKey(), val);\n        }\n      }\n    }\n    // save on hdfs\n    try (OutputStream output \u003d fs.create(remoteFile)) {\n      confCopy.writeXml(output);\n      log.info(\"Reading config from: \" + configFile.getSrcFile()\n          + \", writing to: \" + remoteFile);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java"
    }
  }
}