{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PlacementConstraintsUtil.java",
  "functionName": "canSatisfyNodeConstraintExpression",
  "functionId": "canSatisfyNodeConstraintExpression___sc-SingleConstraint__targetExpression-TargetExpression__schedulerNode-SchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
  "functionStartLine": 118,
  "functionEndLine": 147,
  "numCommitsSeen": 46,
  "timeTaken": 6187,
  "changeHistory": [
    "52194351e7df33b8438569c3a032f73d696c534d",
    "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
    "38af23796971193fa529c3d08ffde8fcd6e607b6"
  ],
  "changeHistoryShort": {
    "52194351e7df33b8438569c3a032f73d696c534d": "Ymultichange(Yrename,Ybodychange)",
    "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "38af23796971193fa529c3d08ffde8fcd6e607b6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "52194351e7df33b8438569c3a032f73d696c534d": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-8721. Relax NE node-attribute check when attribute doesn\u0027t exist on a node. Contributed by Sunil Govindan.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "52194351e7df33b8438569c3a032f73d696c534d",
      "commitAuthor": "Weiwei Yang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-8721. Relax NE node-attribute check when attribute doesn\u0027t exist on a node. Contributed by Sunil Govindan.\n",
          "commitDate": "12/09/18 3:31 AM",
          "commitName": "52194351e7df33b8438569c3a032f73d696c534d",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "12/09/18 3:31 AM",
          "commitNameOld": "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,30 @@\n-  private static boolean canSatisfyNodeConstraintExpresssion(\n+  private static boolean canSatisfyNodeConstraintExpression(\n       SingleConstraint sc, TargetExpression targetExpression,\n       SchedulerNode schedulerNode) {\n     Set\u003cString\u003e values \u003d targetExpression.getTargetValues();\n \n     if (targetExpression.getTargetKey().equals(NODE_PARTITION)) {\n       if (values \u003d\u003d null || values.isEmpty()) {\n         return schedulerNode.getPartition()\n             .equals(RMNodeLabelsManager.NO_LABEL);\n       } else {\n         String nodePartition \u003d values.iterator().next();\n         if (!nodePartition.equals(schedulerNode.getPartition())) {\n           return false;\n         }\n       }\n     } else {\n       NodeAttributeOpCode opCode \u003d sc.getNodeAttributeOpCode();\n       // compare attributes.\n       String inputAttribute \u003d values.iterator().next();\n       NodeAttribute requestAttribute \u003d getNodeConstraintFromRequest(\n           targetExpression.getTargetKey(), inputAttribute);\n       if (requestAttribute \u003d\u003d null) {\n         return true;\n       }\n \n-      if (schedulerNode.getNodeAttributes() \u003d\u003d null ||\n-          !schedulerNode.getNodeAttributes().contains(requestAttribute)) {\n-        if(LOG.isDebugEnabled()) {\n-          LOG.debug(\"Incoming requestAttribute:\" + requestAttribute\n-              + \"is not present in \" + schedulerNode.getNodeID());\n-        }\n-        return false;\n-      }\n-      boolean found \u003d false;\n-      for (Iterator\u003cNodeAttribute\u003e it \u003d schedulerNode.getNodeAttributes()\n-          .iterator(); it.hasNext();) {\n-        NodeAttribute nodeAttribute \u003d it.next();\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Starting to compare Incoming requestAttribute :\"\n-              + requestAttribute\n-              + \" with requestAttribute value\u003d \" + requestAttribute\n-              .getAttributeValue()\n-              + \", stored nodeAttribute value\u003d\" + nodeAttribute\n-              .getAttributeValue());\n-        }\n-        if (requestAttribute.equals(nodeAttribute)) {\n-          if (isOpCodeMatches(requestAttribute, nodeAttribute, opCode)) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\n-                  \"Incoming requestAttribute:\" + requestAttribute\n-                      + \" matches with node:\" + schedulerNode.getNodeID());\n-            }\n-            found \u003d true;\n-            return found;\n-          }\n-        }\n-      }\n-      if (!found) {\n-        if(LOG.isDebugEnabled()) {\n-          LOG.info(\"skip this node:\" + schedulerNode.getNodeID()\n-              + \" for requestAttribute:\" + requestAttribute);\n-        }\n-        return false;\n-      }\n+      return getNodeConstraintEvaluatedResult(schedulerNode, opCode,\n+          requestAttribute);\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean canSatisfyNodeConstraintExpression(\n      SingleConstraint sc, TargetExpression targetExpression,\n      SchedulerNode schedulerNode) {\n    Set\u003cString\u003e values \u003d targetExpression.getTargetValues();\n\n    if (targetExpression.getTargetKey().equals(NODE_PARTITION)) {\n      if (values \u003d\u003d null || values.isEmpty()) {\n        return schedulerNode.getPartition()\n            .equals(RMNodeLabelsManager.NO_LABEL);\n      } else {\n        String nodePartition \u003d values.iterator().next();\n        if (!nodePartition.equals(schedulerNode.getPartition())) {\n          return false;\n        }\n      }\n    } else {\n      NodeAttributeOpCode opCode \u003d sc.getNodeAttributeOpCode();\n      // compare attributes.\n      String inputAttribute \u003d values.iterator().next();\n      NodeAttribute requestAttribute \u003d getNodeConstraintFromRequest(\n          targetExpression.getTargetKey(), inputAttribute);\n      if (requestAttribute \u003d\u003d null) {\n        return true;\n      }\n\n      return getNodeConstraintEvaluatedResult(schedulerNode, opCode,\n          requestAttribute);\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
          "extendedDetails": {
            "oldValue": "canSatisfyNodeConstraintExpresssion",
            "newValue": "canSatisfyNodeConstraintExpression"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8721. Relax NE node-attribute check when attribute doesn\u0027t exist on a node. Contributed by Sunil Govindan.\n",
          "commitDate": "12/09/18 3:31 AM",
          "commitName": "52194351e7df33b8438569c3a032f73d696c534d",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "12/09/18 3:31 AM",
          "commitNameOld": "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,30 @@\n-  private static boolean canSatisfyNodeConstraintExpresssion(\n+  private static boolean canSatisfyNodeConstraintExpression(\n       SingleConstraint sc, TargetExpression targetExpression,\n       SchedulerNode schedulerNode) {\n     Set\u003cString\u003e values \u003d targetExpression.getTargetValues();\n \n     if (targetExpression.getTargetKey().equals(NODE_PARTITION)) {\n       if (values \u003d\u003d null || values.isEmpty()) {\n         return schedulerNode.getPartition()\n             .equals(RMNodeLabelsManager.NO_LABEL);\n       } else {\n         String nodePartition \u003d values.iterator().next();\n         if (!nodePartition.equals(schedulerNode.getPartition())) {\n           return false;\n         }\n       }\n     } else {\n       NodeAttributeOpCode opCode \u003d sc.getNodeAttributeOpCode();\n       // compare attributes.\n       String inputAttribute \u003d values.iterator().next();\n       NodeAttribute requestAttribute \u003d getNodeConstraintFromRequest(\n           targetExpression.getTargetKey(), inputAttribute);\n       if (requestAttribute \u003d\u003d null) {\n         return true;\n       }\n \n-      if (schedulerNode.getNodeAttributes() \u003d\u003d null ||\n-          !schedulerNode.getNodeAttributes().contains(requestAttribute)) {\n-        if(LOG.isDebugEnabled()) {\n-          LOG.debug(\"Incoming requestAttribute:\" + requestAttribute\n-              + \"is not present in \" + schedulerNode.getNodeID());\n-        }\n-        return false;\n-      }\n-      boolean found \u003d false;\n-      for (Iterator\u003cNodeAttribute\u003e it \u003d schedulerNode.getNodeAttributes()\n-          .iterator(); it.hasNext();) {\n-        NodeAttribute nodeAttribute \u003d it.next();\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Starting to compare Incoming requestAttribute :\"\n-              + requestAttribute\n-              + \" with requestAttribute value\u003d \" + requestAttribute\n-              .getAttributeValue()\n-              + \", stored nodeAttribute value\u003d\" + nodeAttribute\n-              .getAttributeValue());\n-        }\n-        if (requestAttribute.equals(nodeAttribute)) {\n-          if (isOpCodeMatches(requestAttribute, nodeAttribute, opCode)) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\n-                  \"Incoming requestAttribute:\" + requestAttribute\n-                      + \" matches with node:\" + schedulerNode.getNodeID());\n-            }\n-            found \u003d true;\n-            return found;\n-          }\n-        }\n-      }\n-      if (!found) {\n-        if(LOG.isDebugEnabled()) {\n-          LOG.info(\"skip this node:\" + schedulerNode.getNodeID()\n-              + \" for requestAttribute:\" + requestAttribute);\n-        }\n-        return false;\n-      }\n+      return getNodeConstraintEvaluatedResult(schedulerNode, opCode,\n+          requestAttribute);\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean canSatisfyNodeConstraintExpression(\n      SingleConstraint sc, TargetExpression targetExpression,\n      SchedulerNode schedulerNode) {\n    Set\u003cString\u003e values \u003d targetExpression.getTargetValues();\n\n    if (targetExpression.getTargetKey().equals(NODE_PARTITION)) {\n      if (values \u003d\u003d null || values.isEmpty()) {\n        return schedulerNode.getPartition()\n            .equals(RMNodeLabelsManager.NO_LABEL);\n      } else {\n        String nodePartition \u003d values.iterator().next();\n        if (!nodePartition.equals(schedulerNode.getPartition())) {\n          return false;\n        }\n      }\n    } else {\n      NodeAttributeOpCode opCode \u003d sc.getNodeAttributeOpCode();\n      // compare attributes.\n      String inputAttribute \u003d values.iterator().next();\n      NodeAttribute requestAttribute \u003d getNodeConstraintFromRequest(\n          targetExpression.getTargetKey(), inputAttribute);\n      if (requestAttribute \u003d\u003d null) {\n        return true;\n      }\n\n      return getNodeConstraintEvaluatedResult(schedulerNode, opCode,\n          requestAttribute);\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7863. Modify placement constraints to support node attributes. Contributed by Sunil Govindan.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
      "commitAuthor": "Naganarasimha",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-7863. Modify placement constraints to support node attributes. Contributed by Sunil Govindan.\n",
          "commitDate": "12/09/18 3:31 AM",
          "commitName": "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
          "commitAuthor": "Naganarasimha",
          "commitDateOld": "30/04/18 11:54 AM",
          "commitNameOld": "9b0955545174abe16fd81240db30f175145ee89b",
          "commitAuthorOld": "Konstantinos Karanasos",
          "daysBetweenCommits": 134.65,
          "commitsBetweenForRepo": 1013,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,67 @@\n-  private static boolean canSatisfyNodePartitionConstraintExpresssion(\n-      TargetExpression targetExpression, SchedulerNode schedulerNode) {\n+  private static boolean canSatisfyNodeConstraintExpresssion(\n+      SingleConstraint sc, TargetExpression targetExpression,\n+      SchedulerNode schedulerNode) {\n     Set\u003cString\u003e values \u003d targetExpression.getTargetValues();\n-    if (values \u003d\u003d null || values.isEmpty()) {\n-      return schedulerNode.getPartition().equals(\n-          RMNodeLabelsManager.NO_LABEL);\n-    } else{\n-      String nodePartition \u003d values.iterator().next();\n-      if (!nodePartition.equals(schedulerNode.getPartition())) {\n+\n+    if (targetExpression.getTargetKey().equals(NODE_PARTITION)) {\n+      if (values \u003d\u003d null || values.isEmpty()) {\n+        return schedulerNode.getPartition()\n+            .equals(RMNodeLabelsManager.NO_LABEL);\n+      } else {\n+        String nodePartition \u003d values.iterator().next();\n+        if (!nodePartition.equals(schedulerNode.getPartition())) {\n+          return false;\n+        }\n+      }\n+    } else {\n+      NodeAttributeOpCode opCode \u003d sc.getNodeAttributeOpCode();\n+      // compare attributes.\n+      String inputAttribute \u003d values.iterator().next();\n+      NodeAttribute requestAttribute \u003d getNodeConstraintFromRequest(\n+          targetExpression.getTargetKey(), inputAttribute);\n+      if (requestAttribute \u003d\u003d null) {\n+        return true;\n+      }\n+\n+      if (schedulerNode.getNodeAttributes() \u003d\u003d null ||\n+          !schedulerNode.getNodeAttributes().contains(requestAttribute)) {\n+        if(LOG.isDebugEnabled()) {\n+          LOG.debug(\"Incoming requestAttribute:\" + requestAttribute\n+              + \"is not present in \" + schedulerNode.getNodeID());\n+        }\n+        return false;\n+      }\n+      boolean found \u003d false;\n+      for (Iterator\u003cNodeAttribute\u003e it \u003d schedulerNode.getNodeAttributes()\n+          .iterator(); it.hasNext();) {\n+        NodeAttribute nodeAttribute \u003d it.next();\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Starting to compare Incoming requestAttribute :\"\n+              + requestAttribute\n+              + \" with requestAttribute value\u003d \" + requestAttribute\n+              .getAttributeValue()\n+              + \", stored nodeAttribute value\u003d\" + nodeAttribute\n+              .getAttributeValue());\n+        }\n+        if (requestAttribute.equals(nodeAttribute)) {\n+          if (isOpCodeMatches(requestAttribute, nodeAttribute, opCode)) {\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\n+                  \"Incoming requestAttribute:\" + requestAttribute\n+                      + \" matches with node:\" + schedulerNode.getNodeID());\n+            }\n+            found \u003d true;\n+            return found;\n+          }\n+        }\n+      }\n+      if (!found) {\n+        if(LOG.isDebugEnabled()) {\n+          LOG.info(\"skip this node:\" + schedulerNode.getNodeID()\n+              + \" for requestAttribute:\" + requestAttribute);\n+        }\n         return false;\n       }\n     }\n-\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean canSatisfyNodeConstraintExpresssion(\n      SingleConstraint sc, TargetExpression targetExpression,\n      SchedulerNode schedulerNode) {\n    Set\u003cString\u003e values \u003d targetExpression.getTargetValues();\n\n    if (targetExpression.getTargetKey().equals(NODE_PARTITION)) {\n      if (values \u003d\u003d null || values.isEmpty()) {\n        return schedulerNode.getPartition()\n            .equals(RMNodeLabelsManager.NO_LABEL);\n      } else {\n        String nodePartition \u003d values.iterator().next();\n        if (!nodePartition.equals(schedulerNode.getPartition())) {\n          return false;\n        }\n      }\n    } else {\n      NodeAttributeOpCode opCode \u003d sc.getNodeAttributeOpCode();\n      // compare attributes.\n      String inputAttribute \u003d values.iterator().next();\n      NodeAttribute requestAttribute \u003d getNodeConstraintFromRequest(\n          targetExpression.getTargetKey(), inputAttribute);\n      if (requestAttribute \u003d\u003d null) {\n        return true;\n      }\n\n      if (schedulerNode.getNodeAttributes() \u003d\u003d null ||\n          !schedulerNode.getNodeAttributes().contains(requestAttribute)) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"Incoming requestAttribute:\" + requestAttribute\n              + \"is not present in \" + schedulerNode.getNodeID());\n        }\n        return false;\n      }\n      boolean found \u003d false;\n      for (Iterator\u003cNodeAttribute\u003e it \u003d schedulerNode.getNodeAttributes()\n          .iterator(); it.hasNext();) {\n        NodeAttribute nodeAttribute \u003d it.next();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Starting to compare Incoming requestAttribute :\"\n              + requestAttribute\n              + \" with requestAttribute value\u003d \" + requestAttribute\n              .getAttributeValue()\n              + \", stored nodeAttribute value\u003d\" + nodeAttribute\n              .getAttributeValue());\n        }\n        if (requestAttribute.equals(nodeAttribute)) {\n          if (isOpCodeMatches(requestAttribute, nodeAttribute, opCode)) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\n                  \"Incoming requestAttribute:\" + requestAttribute\n                      + \" matches with node:\" + schedulerNode.getNodeID());\n            }\n            found \u003d true;\n            return found;\n          }\n        }\n      }\n      if (!found) {\n        if(LOG.isDebugEnabled()) {\n          LOG.info(\"skip this node:\" + schedulerNode.getNodeID()\n              + \" for requestAttribute:\" + requestAttribute);\n        }\n        return false;\n      }\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
          "extendedDetails": {
            "oldValue": "canSatisfyNodePartitionConstraintExpresssion",
            "newValue": "canSatisfyNodeConstraintExpresssion"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7863. Modify placement constraints to support node attributes. Contributed by Sunil Govindan.\n",
          "commitDate": "12/09/18 3:31 AM",
          "commitName": "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
          "commitAuthor": "Naganarasimha",
          "commitDateOld": "30/04/18 11:54 AM",
          "commitNameOld": "9b0955545174abe16fd81240db30f175145ee89b",
          "commitAuthorOld": "Konstantinos Karanasos",
          "daysBetweenCommits": 134.65,
          "commitsBetweenForRepo": 1013,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,67 @@\n-  private static boolean canSatisfyNodePartitionConstraintExpresssion(\n-      TargetExpression targetExpression, SchedulerNode schedulerNode) {\n+  private static boolean canSatisfyNodeConstraintExpresssion(\n+      SingleConstraint sc, TargetExpression targetExpression,\n+      SchedulerNode schedulerNode) {\n     Set\u003cString\u003e values \u003d targetExpression.getTargetValues();\n-    if (values \u003d\u003d null || values.isEmpty()) {\n-      return schedulerNode.getPartition().equals(\n-          RMNodeLabelsManager.NO_LABEL);\n-    } else{\n-      String nodePartition \u003d values.iterator().next();\n-      if (!nodePartition.equals(schedulerNode.getPartition())) {\n+\n+    if (targetExpression.getTargetKey().equals(NODE_PARTITION)) {\n+      if (values \u003d\u003d null || values.isEmpty()) {\n+        return schedulerNode.getPartition()\n+            .equals(RMNodeLabelsManager.NO_LABEL);\n+      } else {\n+        String nodePartition \u003d values.iterator().next();\n+        if (!nodePartition.equals(schedulerNode.getPartition())) {\n+          return false;\n+        }\n+      }\n+    } else {\n+      NodeAttributeOpCode opCode \u003d sc.getNodeAttributeOpCode();\n+      // compare attributes.\n+      String inputAttribute \u003d values.iterator().next();\n+      NodeAttribute requestAttribute \u003d getNodeConstraintFromRequest(\n+          targetExpression.getTargetKey(), inputAttribute);\n+      if (requestAttribute \u003d\u003d null) {\n+        return true;\n+      }\n+\n+      if (schedulerNode.getNodeAttributes() \u003d\u003d null ||\n+          !schedulerNode.getNodeAttributes().contains(requestAttribute)) {\n+        if(LOG.isDebugEnabled()) {\n+          LOG.debug(\"Incoming requestAttribute:\" + requestAttribute\n+              + \"is not present in \" + schedulerNode.getNodeID());\n+        }\n+        return false;\n+      }\n+      boolean found \u003d false;\n+      for (Iterator\u003cNodeAttribute\u003e it \u003d schedulerNode.getNodeAttributes()\n+          .iterator(); it.hasNext();) {\n+        NodeAttribute nodeAttribute \u003d it.next();\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Starting to compare Incoming requestAttribute :\"\n+              + requestAttribute\n+              + \" with requestAttribute value\u003d \" + requestAttribute\n+              .getAttributeValue()\n+              + \", stored nodeAttribute value\u003d\" + nodeAttribute\n+              .getAttributeValue());\n+        }\n+        if (requestAttribute.equals(nodeAttribute)) {\n+          if (isOpCodeMatches(requestAttribute, nodeAttribute, opCode)) {\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\n+                  \"Incoming requestAttribute:\" + requestAttribute\n+                      + \" matches with node:\" + schedulerNode.getNodeID());\n+            }\n+            found \u003d true;\n+            return found;\n+          }\n+        }\n+      }\n+      if (!found) {\n+        if(LOG.isDebugEnabled()) {\n+          LOG.info(\"skip this node:\" + schedulerNode.getNodeID()\n+              + \" for requestAttribute:\" + requestAttribute);\n+        }\n         return false;\n       }\n     }\n-\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean canSatisfyNodeConstraintExpresssion(\n      SingleConstraint sc, TargetExpression targetExpression,\n      SchedulerNode schedulerNode) {\n    Set\u003cString\u003e values \u003d targetExpression.getTargetValues();\n\n    if (targetExpression.getTargetKey().equals(NODE_PARTITION)) {\n      if (values \u003d\u003d null || values.isEmpty()) {\n        return schedulerNode.getPartition()\n            .equals(RMNodeLabelsManager.NO_LABEL);\n      } else {\n        String nodePartition \u003d values.iterator().next();\n        if (!nodePartition.equals(schedulerNode.getPartition())) {\n          return false;\n        }\n      }\n    } else {\n      NodeAttributeOpCode opCode \u003d sc.getNodeAttributeOpCode();\n      // compare attributes.\n      String inputAttribute \u003d values.iterator().next();\n      NodeAttribute requestAttribute \u003d getNodeConstraintFromRequest(\n          targetExpression.getTargetKey(), inputAttribute);\n      if (requestAttribute \u003d\u003d null) {\n        return true;\n      }\n\n      if (schedulerNode.getNodeAttributes() \u003d\u003d null ||\n          !schedulerNode.getNodeAttributes().contains(requestAttribute)) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"Incoming requestAttribute:\" + requestAttribute\n              + \"is not present in \" + schedulerNode.getNodeID());\n        }\n        return false;\n      }\n      boolean found \u003d false;\n      for (Iterator\u003cNodeAttribute\u003e it \u003d schedulerNode.getNodeAttributes()\n          .iterator(); it.hasNext();) {\n        NodeAttribute nodeAttribute \u003d it.next();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Starting to compare Incoming requestAttribute :\"\n              + requestAttribute\n              + \" with requestAttribute value\u003d \" + requestAttribute\n              .getAttributeValue()\n              + \", stored nodeAttribute value\u003d\" + nodeAttribute\n              .getAttributeValue());\n        }\n        if (requestAttribute.equals(nodeAttribute)) {\n          if (isOpCodeMatches(requestAttribute, nodeAttribute, opCode)) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\n                  \"Incoming requestAttribute:\" + requestAttribute\n                      + \" matches with node:\" + schedulerNode.getNodeID());\n            }\n            found \u003d true;\n            return found;\n          }\n        }\n      }\n      if (!found) {\n        if(LOG.isDebugEnabled()) {\n          LOG.info(\"skip this node:\" + schedulerNode.getNodeID()\n              + \" for requestAttribute:\" + requestAttribute);\n        }\n        return false;\n      }\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
          "extendedDetails": {
            "oldValue": "[targetExpression-TargetExpression, schedulerNode-SchedulerNode]",
            "newValue": "[sc-SingleConstraint, targetExpression-TargetExpression, schedulerNode-SchedulerNode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7863. Modify placement constraints to support node attributes. Contributed by Sunil Govindan.\n",
          "commitDate": "12/09/18 3:31 AM",
          "commitName": "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
          "commitAuthor": "Naganarasimha",
          "commitDateOld": "30/04/18 11:54 AM",
          "commitNameOld": "9b0955545174abe16fd81240db30f175145ee89b",
          "commitAuthorOld": "Konstantinos Karanasos",
          "daysBetweenCommits": 134.65,
          "commitsBetweenForRepo": 1013,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,67 @@\n-  private static boolean canSatisfyNodePartitionConstraintExpresssion(\n-      TargetExpression targetExpression, SchedulerNode schedulerNode) {\n+  private static boolean canSatisfyNodeConstraintExpresssion(\n+      SingleConstraint sc, TargetExpression targetExpression,\n+      SchedulerNode schedulerNode) {\n     Set\u003cString\u003e values \u003d targetExpression.getTargetValues();\n-    if (values \u003d\u003d null || values.isEmpty()) {\n-      return schedulerNode.getPartition().equals(\n-          RMNodeLabelsManager.NO_LABEL);\n-    } else{\n-      String nodePartition \u003d values.iterator().next();\n-      if (!nodePartition.equals(schedulerNode.getPartition())) {\n+\n+    if (targetExpression.getTargetKey().equals(NODE_PARTITION)) {\n+      if (values \u003d\u003d null || values.isEmpty()) {\n+        return schedulerNode.getPartition()\n+            .equals(RMNodeLabelsManager.NO_LABEL);\n+      } else {\n+        String nodePartition \u003d values.iterator().next();\n+        if (!nodePartition.equals(schedulerNode.getPartition())) {\n+          return false;\n+        }\n+      }\n+    } else {\n+      NodeAttributeOpCode opCode \u003d sc.getNodeAttributeOpCode();\n+      // compare attributes.\n+      String inputAttribute \u003d values.iterator().next();\n+      NodeAttribute requestAttribute \u003d getNodeConstraintFromRequest(\n+          targetExpression.getTargetKey(), inputAttribute);\n+      if (requestAttribute \u003d\u003d null) {\n+        return true;\n+      }\n+\n+      if (schedulerNode.getNodeAttributes() \u003d\u003d null ||\n+          !schedulerNode.getNodeAttributes().contains(requestAttribute)) {\n+        if(LOG.isDebugEnabled()) {\n+          LOG.debug(\"Incoming requestAttribute:\" + requestAttribute\n+              + \"is not present in \" + schedulerNode.getNodeID());\n+        }\n+        return false;\n+      }\n+      boolean found \u003d false;\n+      for (Iterator\u003cNodeAttribute\u003e it \u003d schedulerNode.getNodeAttributes()\n+          .iterator(); it.hasNext();) {\n+        NodeAttribute nodeAttribute \u003d it.next();\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Starting to compare Incoming requestAttribute :\"\n+              + requestAttribute\n+              + \" with requestAttribute value\u003d \" + requestAttribute\n+              .getAttributeValue()\n+              + \", stored nodeAttribute value\u003d\" + nodeAttribute\n+              .getAttributeValue());\n+        }\n+        if (requestAttribute.equals(nodeAttribute)) {\n+          if (isOpCodeMatches(requestAttribute, nodeAttribute, opCode)) {\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\n+                  \"Incoming requestAttribute:\" + requestAttribute\n+                      + \" matches with node:\" + schedulerNode.getNodeID());\n+            }\n+            found \u003d true;\n+            return found;\n+          }\n+        }\n+      }\n+      if (!found) {\n+        if(LOG.isDebugEnabled()) {\n+          LOG.info(\"skip this node:\" + schedulerNode.getNodeID()\n+              + \" for requestAttribute:\" + requestAttribute);\n+        }\n         return false;\n       }\n     }\n-\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean canSatisfyNodeConstraintExpresssion(\n      SingleConstraint sc, TargetExpression targetExpression,\n      SchedulerNode schedulerNode) {\n    Set\u003cString\u003e values \u003d targetExpression.getTargetValues();\n\n    if (targetExpression.getTargetKey().equals(NODE_PARTITION)) {\n      if (values \u003d\u003d null || values.isEmpty()) {\n        return schedulerNode.getPartition()\n            .equals(RMNodeLabelsManager.NO_LABEL);\n      } else {\n        String nodePartition \u003d values.iterator().next();\n        if (!nodePartition.equals(schedulerNode.getPartition())) {\n          return false;\n        }\n      }\n    } else {\n      NodeAttributeOpCode opCode \u003d sc.getNodeAttributeOpCode();\n      // compare attributes.\n      String inputAttribute \u003d values.iterator().next();\n      NodeAttribute requestAttribute \u003d getNodeConstraintFromRequest(\n          targetExpression.getTargetKey(), inputAttribute);\n      if (requestAttribute \u003d\u003d null) {\n        return true;\n      }\n\n      if (schedulerNode.getNodeAttributes() \u003d\u003d null ||\n          !schedulerNode.getNodeAttributes().contains(requestAttribute)) {\n        if(LOG.isDebugEnabled()) {\n          LOG.debug(\"Incoming requestAttribute:\" + requestAttribute\n              + \"is not present in \" + schedulerNode.getNodeID());\n        }\n        return false;\n      }\n      boolean found \u003d false;\n      for (Iterator\u003cNodeAttribute\u003e it \u003d schedulerNode.getNodeAttributes()\n          .iterator(); it.hasNext();) {\n        NodeAttribute nodeAttribute \u003d it.next();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Starting to compare Incoming requestAttribute :\"\n              + requestAttribute\n              + \" with requestAttribute value\u003d \" + requestAttribute\n              .getAttributeValue()\n              + \", stored nodeAttribute value\u003d\" + nodeAttribute\n              .getAttributeValue());\n        }\n        if (requestAttribute.equals(nodeAttribute)) {\n          if (isOpCodeMatches(requestAttribute, nodeAttribute, opCode)) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\n                  \"Incoming requestAttribute:\" + requestAttribute\n                      + \" matches with node:\" + schedulerNode.getNodeID());\n            }\n            found \u003d true;\n            return found;\n          }\n        }\n      }\n      if (!found) {\n        if(LOG.isDebugEnabled()) {\n          LOG.info(\"skip this node:\" + schedulerNode.getNodeID()\n              + \" for requestAttribute:\" + requestAttribute);\n        }\n        return false;\n      }\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "38af23796971193fa529c3d08ffde8fcd6e607b6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,15 @@\n+  private static boolean canSatisfyNodePartitionConstraintExpresssion(\n+      TargetExpression targetExpression, SchedulerNode schedulerNode) {\n+    Set\u003cString\u003e values \u003d targetExpression.getTargetValues();\n+    if (values \u003d\u003d null || values.isEmpty()) {\n+      return schedulerNode.getPartition().equals(\n+          RMNodeLabelsManager.NO_LABEL);\n+    } else{\n+      String nodePartition \u003d values.iterator().next();\n+      if (!nodePartition.equals(schedulerNode.getPartition())) {\n+        return false;\n+      }\n+    }\n+\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean canSatisfyNodePartitionConstraintExpresssion(\n      TargetExpression targetExpression, SchedulerNode schedulerNode) {\n    Set\u003cString\u003e values \u003d targetExpression.getTargetValues();\n    if (values \u003d\u003d null || values.isEmpty()) {\n      return schedulerNode.getPartition().equals(\n          RMNodeLabelsManager.NO_LABEL);\n    } else{\n      String nodePartition \u003d values.iterator().next();\n      if (!nodePartition.equals(schedulerNode.getPartition())) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java"
    }
  }
}