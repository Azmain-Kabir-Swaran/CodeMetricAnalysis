{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerScheduler.java",
  "functionName": "startContainer",
  "functionId": "startContainer___container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
  "functionStartLine": 540,
  "functionEndLine": 552,
  "numCommitsSeen": 25,
  "timeTaken": 3555,
  "changeHistory": [
    "226bedc0239ba23f3ca0c40dac6aab3777d3ada6",
    "5b007921cdf01ecc8ed97c164b7d327b8304c529",
    "b0aace21b1ef3436ba9d516186208fee9a9ceef2",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6"
  ],
  "changeHistoryShort": {
    "226bedc0239ba23f3ca0c40dac6aab3777d3ada6": "Ybodychange",
    "5b007921cdf01ecc8ed97c164b7d327b8304c529": "Yrename",
    "b0aace21b1ef3436ba9d516186208fee9a9ceef2": "Ybodychange",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "226bedc0239ba23f3ca0c40dac6aab3777d3ada6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8153. Guaranteed containers always stay in SCHEDULED on NM after restart. Contributed by Yang Wang.\n",
      "commitDate": "12/04/18 10:17 PM",
      "commitName": "226bedc0239ba23f3ca0c40dac6aab3777d3ada6",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "03/12/17 10:22 PM",
      "commitNameOld": "37ca4169508c3003dbe9044fefd37eb8cd8c0503",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 129.96,
      "commitsBetweenForRepo": 949,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,13 @@\n   private void startContainer(Container container) {\n     LOG.info(\"Starting container [\" + container.getContainerId()+ \"]\");\n-    runningContainers.put(container.getContainerId(), container);\n-    this.utilizationTracker.addContainerResources(container);\n+    // Skip to put into runningContainers and addUtilization when recover\n+    if (!runningContainers.containsKey(container.getContainerId())) {\n+      runningContainers.put(container.getContainerId(), container);\n+      this.utilizationTracker.addContainerResources(container);\n+    }\n     if (container.getContainerTokenIdentifier().getExecutionType() \u003d\u003d\n         ExecutionType.OPPORTUNISTIC) {\n       this.metrics.startOpportunisticContainer(container.getResource());\n     }\n     container.sendLaunchEvent();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startContainer(Container container) {\n    LOG.info(\"Starting container [\" + container.getContainerId()+ \"]\");\n    // Skip to put into runningContainers and addUtilization when recover\n    if (!runningContainers.containsKey(container.getContainerId())) {\n      runningContainers.put(container.getContainerId(), container);\n      this.utilizationTracker.addContainerResources(container);\n    }\n    if (container.getContainerTokenIdentifier().getExecutionType() \u003d\u003d\n        ExecutionType.OPPORTUNISTIC) {\n      this.metrics.startOpportunisticContainer(container.getResource());\n    }\n    container.sendLaunchEvent();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
      "extendedDetails": {}
    },
    "5b007921cdf01ecc8ed97c164b7d327b8304c529": {
      "type": "Yrename",
      "commitMessage": "YARN-6706. Refactor ContainerScheduler to make oversubscription change easier. (Haibo Chen via asuresh)\n",
      "commitDate": "17/07/17 2:11 PM",
      "commitName": "5b007921cdf01ecc8ed97c164b7d327b8304c529",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "16/12/16 8:14 AM",
      "commitNameOld": "2273a74c1f3895163046cca09ff5e983df301d22",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 213.21,
      "commitsBetweenForRepo": 1093,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n-  private void startAllocatedContainer(Container container) {\n+  private void startContainer(Container container) {\n     LOG.info(\"Starting container [\" + container.getContainerId()+ \"]\");\n     runningContainers.put(container.getContainerId(), container);\n     this.utilizationTracker.addContainerResources(container);\n     if (container.getContainerTokenIdentifier().getExecutionType() \u003d\u003d\n         ExecutionType.OPPORTUNISTIC) {\n       this.metrics.startOpportunisticContainer(container.getResource());\n     }\n     container.sendLaunchEvent();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startContainer(Container container) {\n    LOG.info(\"Starting container [\" + container.getContainerId()+ \"]\");\n    runningContainers.put(container.getContainerId(), container);\n    this.utilizationTracker.addContainerResources(container);\n    if (container.getContainerTokenIdentifier().getExecutionType() \u003d\u003d\n        ExecutionType.OPPORTUNISTIC) {\n      this.metrics.startOpportunisticContainer(container.getResource());\n    }\n    container.sendLaunchEvent();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
      "extendedDetails": {
        "oldValue": "startAllocatedContainer",
        "newValue": "startContainer"
      }
    },
    "b0aace21b1ef3436ba9d516186208fee9a9ceef2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5982. Simplify opportunistic container parameters and metrics. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "09/12/16 4:41 PM",
      "commitName": "b0aace21b1ef3436ba9d516186208fee9a9ceef2",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "15/11/16 7:56 AM",
      "commitNameOld": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 24.36,
      "commitsBetweenForRepo": 162,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n   private void startAllocatedContainer(Container container) {\n     LOG.info(\"Starting container [\" + container.getContainerId()+ \"]\");\n     runningContainers.put(container.getContainerId(), container);\n     this.utilizationTracker.addContainerResources(container);\n     if (container.getContainerTokenIdentifier().getExecutionType() \u003d\u003d\n         ExecutionType.OPPORTUNISTIC) {\n-      this.metrics.opportunisticContainerStarted(container);\n+      this.metrics.startOpportunisticContainer(container.getResource());\n     }\n     container.sendLaunchEvent();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startAllocatedContainer(Container container) {\n    LOG.info(\"Starting container [\" + container.getContainerId()+ \"]\");\n    runningContainers.put(container.getContainerId(), container);\n    this.utilizationTracker.addContainerResources(container);\n    if (container.getContainerTokenIdentifier().getExecutionType() \u003d\u003d\n        ExecutionType.OPPORTUNISTIC) {\n      this.metrics.startOpportunisticContainer(container.getResource());\n    }\n    container.sendLaunchEvent();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
      "extendedDetails": {}
    },
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
      "commitDate": "15/11/16 7:56 AM",
      "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,10 @@\n+  private void startAllocatedContainer(Container container) {\n+    LOG.info(\"Starting container [\" + container.getContainerId()+ \"]\");\n+    runningContainers.put(container.getContainerId(), container);\n+    this.utilizationTracker.addContainerResources(container);\n+    if (container.getContainerTokenIdentifier().getExecutionType() \u003d\u003d\n+        ExecutionType.OPPORTUNISTIC) {\n+      this.metrics.opportunisticContainerStarted(container);\n+    }\n+    container.sendLaunchEvent();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void startAllocatedContainer(Container container) {\n    LOG.info(\"Starting container [\" + container.getContainerId()+ \"]\");\n    runningContainers.put(container.getContainerId(), container);\n    this.utilizationTracker.addContainerResources(container);\n    if (container.getContainerTokenIdentifier().getExecutionType() \u003d\u003d\n        ExecutionType.OPPORTUNISTIC) {\n      this.metrics.opportunisticContainerStarted(container);\n    }\n    container.sendLaunchEvent();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java"
    }
  }
}