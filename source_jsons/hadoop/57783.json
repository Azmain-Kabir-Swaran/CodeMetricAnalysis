{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HamletGen.java",
  "functionName": "generate",
  "functionId": "generate___specClass-Class__?____implClass-Class__?____outputName-String__outputPkg-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/hamlet2/HamletGen.java",
  "functionStartLine": 79,
  "functionEndLine": 119,
  "numCommitsSeen": 1,
  "timeTaken": 1801,
  "changeHistory": [
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397"
  ],
  "changeHistoryShort": {
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Yintroduced"
  },
  "changeHistoryDetails": {
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "diff": "@@ -0,0 +1,41 @@\n+  public void generate(Class\u003c?\u003e specClass, Class\u003c?\u003e implClass,\n+                       String outputName, String outputPkg) throws IOException {\n+    LOG.info(\"Generating {} using {} and {}\", new Object[]{outputName,\n+             specClass, implClass});\n+    out \u003d new PrintWriter(outputName +\".java\", \"UTF-8\");\n+    hamlet \u003d basename(outputName);\n+    String pkg \u003d pkgName(outputPkg, implClass.getPackage().getName());\n+    puts(0, \"// Generated by HamletGen. Do NOT edit!\\n\",\n+         \"package \", pkg, \";\\n\",\n+         \"import java.io.PrintWriter;\\n\",\n+         \"import java.util.EnumSet;\\n\",\n+         \"import static java.util.EnumSet.*;\\n\",\n+         \"import static \", implClass.getName(), \".EOpt.*;\\n\",\n+         \"import org.apache.hadoop.yarn.webapp.SubView;\");\n+    String implClassName \u003d implClass.getSimpleName();\n+    if (!implClass.getPackage().getName().equals(pkg)) {\n+      puts(0, \"import \", implClass.getName(), \u0027;\u0027);\n+    }\n+    puts(0, \"\\n\",\n+         \"public class \", hamlet, \" extends \", implClassName,\n+         \" implements \", specClass.getSimpleName(), \"._Html {\\n\",\n+         \"  public \", hamlet, \"(PrintWriter out, int nestLevel,\",\n+         \" boolean wasInline) {\\n\",\n+         \"    super(out, nestLevel, wasInline);\\n\",\n+         \"  }\\n\\n\", // inline is context sensitive\n+         \"  static EnumSet\u003cEOpt\u003e opt(boolean endTag, boolean inline, \",\n+         \"boolean pre) {\\n\",\n+         \"    EnumSet\u003cEOpt\u003e opts \u003d of(ENDTAG);\\n\",\n+         \"    if (!endTag) opts.remove(ENDTAG);\\n\",\n+         \"    if (inline) opts.add(INLINE);\\n\",\n+         \"    if (pre) opts.add(PRE);\\n\",\n+         \"    return opts;\\n\",\n+         \"  }\");\n+    initLut(specClass);\n+    genImpl(specClass, implClassName, 1);\n+    LOG.info(\"Generating {} methods\", hamlet);\n+    genMethods(hamlet, top, 1);\n+    puts(0, \"}\");\n+    out.close();\n+    LOG.info(\"Wrote {} bytes to {}.java\", bytes, outputName);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void generate(Class\u003c?\u003e specClass, Class\u003c?\u003e implClass,\n                       String outputName, String outputPkg) throws IOException {\n    LOG.info(\"Generating {} using {} and {}\", new Object[]{outputName,\n             specClass, implClass});\n    out \u003d new PrintWriter(outputName +\".java\", \"UTF-8\");\n    hamlet \u003d basename(outputName);\n    String pkg \u003d pkgName(outputPkg, implClass.getPackage().getName());\n    puts(0, \"// Generated by HamletGen. Do NOT edit!\\n\",\n         \"package \", pkg, \";\\n\",\n         \"import java.io.PrintWriter;\\n\",\n         \"import java.util.EnumSet;\\n\",\n         \"import static java.util.EnumSet.*;\\n\",\n         \"import static \", implClass.getName(), \".EOpt.*;\\n\",\n         \"import org.apache.hadoop.yarn.webapp.SubView;\");\n    String implClassName \u003d implClass.getSimpleName();\n    if (!implClass.getPackage().getName().equals(pkg)) {\n      puts(0, \"import \", implClass.getName(), \u0027;\u0027);\n    }\n    puts(0, \"\\n\",\n         \"public class \", hamlet, \" extends \", implClassName,\n         \" implements \", specClass.getSimpleName(), \"._Html {\\n\",\n         \"  public \", hamlet, \"(PrintWriter out, int nestLevel,\",\n         \" boolean wasInline) {\\n\",\n         \"    super(out, nestLevel, wasInline);\\n\",\n         \"  }\\n\\n\", // inline is context sensitive\n         \"  static EnumSet\u003cEOpt\u003e opt(boolean endTag, boolean inline, \",\n         \"boolean pre) {\\n\",\n         \"    EnumSet\u003cEOpt\u003e opts \u003d of(ENDTAG);\\n\",\n         \"    if (!endTag) opts.remove(ENDTAG);\\n\",\n         \"    if (inline) opts.add(INLINE);\\n\",\n         \"    if (pre) opts.add(PRE);\\n\",\n         \"    return opts;\\n\",\n         \"  }\");\n    initLut(specClass);\n    genImpl(specClass, implClassName, 1);\n    LOG.info(\"Generating {} methods\", hamlet);\n    genMethods(hamlet, top, 1);\n    puts(0, \"}\");\n    out.close();\n    LOG.info(\"Wrote {} bytes to {}.java\", bytes, outputName);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/hamlet2/HamletGen.java"
    }
  }
}