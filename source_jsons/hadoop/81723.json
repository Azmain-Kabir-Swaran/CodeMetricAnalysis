{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SysInfoLinux.java",
  "functionName": "readProcNetInfoFile",
  "functionId": "readProcNetInfoFile",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/SysInfoLinux.java",
  "functionStartLine": 427,
  "functionEndLine": 477,
  "numCommitsSeen": 8,
  "timeTaken": 1287,
  "changeHistory": [
    "7a3188d054481b9bd563e337901e93476303ce7f",
    "1a0752d85a15499d120b4a79af9bd740fcd1f8e0"
  ],
  "changeHistoryShort": {
    "7a3188d054481b9bd563e337901e93476303ce7f": "Ybodychange",
    "1a0752d85a15499d120b4a79af9bd740fcd1f8e0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3188d054481b9bd563e337901e93476303ce7f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.\n",
      "commitDate": "02/05/19 12:58 PM",
      "commitName": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "22/06/18 10:15 AM",
      "commitNameOld": "6432128622d64f3f9dd638b9c254c77cdf5408aa",
      "commitAuthorOld": "Eric E Payne",
      "daysBetweenCommits": 314.11,
      "commitsBetweenForRepo": 2397,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n   private void readProcNetInfoFile() {\n \n     numNetBytesRead \u003d 0L;\n     numNetBytesWritten \u003d 0L;\n \n     // Read \"/proc/net/dev\" file\n     BufferedReader in;\n     InputStreamReader fReader;\n     try {\n       fReader \u003d new InputStreamReader(\n-          new FileInputStream(procfsNetFile), Charset.forName(\"UTF-8\"));\n+          Files.newInputStream(Paths.get(procfsNetFile)),\n+          Charset.forName(\"UTF-8\"));\n       in \u003d new BufferedReader(fReader);\n-    } catch (FileNotFoundException f) {\n+    } catch (IOException f) {\n       return;\n     }\n \n     Matcher mat;\n     try {\n       String str \u003d in.readLine();\n       while (str !\u003d null) {\n         mat \u003d PROCFS_NETFILE_FORMAT.matcher(str);\n         if (mat.find()) {\n           assert mat.groupCount() \u003e\u003d 16;\n \n           // ignore loopback interfaces\n           if (mat.group(1).equals(\"lo\")) {\n             str \u003d in.readLine();\n             continue;\n           }\n           numNetBytesRead +\u003d Long.parseLong(mat.group(2));\n           numNetBytesWritten +\u003d Long.parseLong(mat.group(10));\n         }\n         str \u003d in.readLine();\n       }\n     } catch (IOException io) {\n       LOG.warn(\"Error reading the stream \" + io);\n     } finally {\n       // Close the streams\n       try {\n         fReader.close();\n         try {\n           in.close();\n         } catch (IOException i) {\n           LOG.warn(\"Error closing the stream \" + in);\n         }\n       } catch (IOException i) {\n         LOG.warn(\"Error closing the stream \" + fReader);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void readProcNetInfoFile() {\n\n    numNetBytesRead \u003d 0L;\n    numNetBytesWritten \u003d 0L;\n\n    // Read \"/proc/net/dev\" file\n    BufferedReader in;\n    InputStreamReader fReader;\n    try {\n      fReader \u003d new InputStreamReader(\n          Files.newInputStream(Paths.get(procfsNetFile)),\n          Charset.forName(\"UTF-8\"));\n      in \u003d new BufferedReader(fReader);\n    } catch (IOException f) {\n      return;\n    }\n\n    Matcher mat;\n    try {\n      String str \u003d in.readLine();\n      while (str !\u003d null) {\n        mat \u003d PROCFS_NETFILE_FORMAT.matcher(str);\n        if (mat.find()) {\n          assert mat.groupCount() \u003e\u003d 16;\n\n          // ignore loopback interfaces\n          if (mat.group(1).equals(\"lo\")) {\n            str \u003d in.readLine();\n            continue;\n          }\n          numNetBytesRead +\u003d Long.parseLong(mat.group(2));\n          numNetBytesWritten +\u003d Long.parseLong(mat.group(10));\n        }\n        str \u003d in.readLine();\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/SysInfoLinux.java",
      "extendedDetails": {}
    },
    "1a0752d85a15499d120b4a79af9bd740fcd1f8e0": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12210. Collect network usage on the node. Contributed by Robert Grandl\n",
      "commitDate": "09/07/15 5:48 PM",
      "commitName": "1a0752d85a15499d120b4a79af9bd740fcd1f8e0",
      "commitAuthor": "Chris Douglas",
      "diff": "@@ -0,0 +1,50 @@\n+  private void readProcNetInfoFile() {\n+\n+    numNetBytesRead \u003d 0L;\n+    numNetBytesWritten \u003d 0L;\n+\n+    // Read \"/proc/net/dev\" file\n+    BufferedReader in;\n+    InputStreamReader fReader;\n+    try {\n+      fReader \u003d new InputStreamReader(\n+          new FileInputStream(procfsNetFile), Charset.forName(\"UTF-8\"));\n+      in \u003d new BufferedReader(fReader);\n+    } catch (FileNotFoundException f) {\n+      return;\n+    }\n+\n+    Matcher mat;\n+    try {\n+      String str \u003d in.readLine();\n+      while (str !\u003d null) {\n+        mat \u003d PROCFS_NETFILE_FORMAT.matcher(str);\n+        if (mat.find()) {\n+          assert mat.groupCount() \u003e\u003d 16;\n+\n+          // ignore loopback interfaces\n+          if (mat.group(1).equals(\"lo\")) {\n+            str \u003d in.readLine();\n+            continue;\n+          }\n+          numNetBytesRead +\u003d Long.parseLong(mat.group(2));\n+          numNetBytesWritten +\u003d Long.parseLong(mat.group(10));\n+        }\n+        str \u003d in.readLine();\n+      }\n+    } catch (IOException io) {\n+      LOG.warn(\"Error reading the stream \" + io);\n+    } finally {\n+      // Close the streams\n+      try {\n+        fReader.close();\n+        try {\n+          in.close();\n+        } catch (IOException i) {\n+          LOG.warn(\"Error closing the stream \" + in);\n+        }\n+      } catch (IOException i) {\n+        LOG.warn(\"Error closing the stream \" + fReader);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void readProcNetInfoFile() {\n\n    numNetBytesRead \u003d 0L;\n    numNetBytesWritten \u003d 0L;\n\n    // Read \"/proc/net/dev\" file\n    BufferedReader in;\n    InputStreamReader fReader;\n    try {\n      fReader \u003d new InputStreamReader(\n          new FileInputStream(procfsNetFile), Charset.forName(\"UTF-8\"));\n      in \u003d new BufferedReader(fReader);\n    } catch (FileNotFoundException f) {\n      return;\n    }\n\n    Matcher mat;\n    try {\n      String str \u003d in.readLine();\n      while (str !\u003d null) {\n        mat \u003d PROCFS_NETFILE_FORMAT.matcher(str);\n        if (mat.find()) {\n          assert mat.groupCount() \u003e\u003d 16;\n\n          // ignore loopback interfaces\n          if (mat.group(1).equals(\"lo\")) {\n            str \u003d in.readLine();\n            continue;\n          }\n          numNetBytesRead +\u003d Long.parseLong(mat.group(2));\n          numNetBytesWritten +\u003d Long.parseLong(mat.group(10));\n        }\n        str \u003d in.readLine();\n      }\n    } catch (IOException io) {\n      LOG.warn(\"Error reading the stream \" + io);\n    } finally {\n      // Close the streams\n      try {\n        fReader.close();\n        try {\n          in.close();\n        } catch (IOException i) {\n          LOG.warn(\"Error closing the stream \" + in);\n        }\n      } catch (IOException i) {\n        LOG.warn(\"Error closing the stream \" + fReader);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/SysInfoLinux.java"
    }
  }
}