{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerUtils.java",
  "functionName": "validateResourceRequestsAgainstQueueMaxResource",
  "functionId": "validateResourceRequestsAgainstQueueMaxResource___resReq-ResourceRequest__availableResource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
  "functionStartLine": 416,
  "functionEndLine": 440,
  "numCommitsSeen": 51,
  "timeTaken": 1905,
  "changeHistory": [
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
    "f48fec83d0f2d1a781a141ad7216463c5526321f"
  ],
  "changeHistoryShort": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": "Ybodychange",
    "f48fec83d0f2d1a781a141ad7216463c5526321f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9037. [CSI] Ignore volume resource in resource calculators based on tags. Contributed by Sunil Govindan.\n",
      "commitDate": "07/01/19 10:30 PM",
      "commitName": "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "03/01/19 7:56 AM",
      "commitNameOld": "cfe89e6f963ba25b5fff1ce48cad36d74b3c789c",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 4.61,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n       validateResourceRequestsAgainstQueueMaxResource(\n       ResourceRequest resReq, Resource availableResource)\n       throws SchedulerInvalidResoureRequestException {\n     final Resource reqResource \u003d resReq.getCapability();\n     Map\u003cString, ResourceInformation\u003e resourcesWithZeroAmount \u003d\n         getZeroResources(availableResource);\n \n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"Resources with zero amount: \"\n           + Arrays.toString(resourcesWithZeroAmount.entrySet().toArray()));\n     }\n \n     List\u003cResourceInformation\u003e invalidResources \u003d Lists.newArrayList();\n-    for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfKnownResourceTypes(); i++) {\n+    for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfCountableResourceTypes(); i++) {\n       final ResourceInformation requestedRI \u003d\n           reqResource.getResourceInformation(i);\n       final String reqResourceName \u003d requestedRI.getName();\n \n       if (resourcesWithZeroAmount.containsKey(reqResourceName)\n           \u0026\u0026 requestedRI.getValue() \u003e 0) {\n         invalidResources.add(requestedRI);\n       }\n     }\n     return new MaxResourceValidationResult(resReq, invalidResources);\n   }\n\\ No newline at end of file\n",
      "actualSource": "      validateResourceRequestsAgainstQueueMaxResource(\n      ResourceRequest resReq, Resource availableResource)\n      throws SchedulerInvalidResoureRequestException {\n    final Resource reqResource \u003d resReq.getCapability();\n    Map\u003cString, ResourceInformation\u003e resourcesWithZeroAmount \u003d\n        getZeroResources(availableResource);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"Resources with zero amount: \"\n          + Arrays.toString(resourcesWithZeroAmount.entrySet().toArray()));\n    }\n\n    List\u003cResourceInformation\u003e invalidResources \u003d Lists.newArrayList();\n    for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfCountableResourceTypes(); i++) {\n      final ResourceInformation requestedRI \u003d\n          reqResource.getResourceInformation(i);\n      final String reqResourceName \u003d requestedRI.getName();\n\n      if (resourcesWithZeroAmount.containsKey(reqResourceName)\n          \u0026\u0026 requestedRI.getValue() \u003e 0) {\n        invalidResources.add(requestedRI);\n      }\n    }\n    return new MaxResourceValidationResult(resReq, invalidResources);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
      "extendedDetails": {}
    },
    "f48fec83d0f2d1a781a141ad7216463c5526321f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8248. Job hangs when a job requests a resource that its queue does not have. (Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "21/05/18 8:10 AM",
      "commitName": "f48fec83d0f2d1a781a141ad7216463c5526321f",
      "commitAuthor": "Haibo Chen",
      "diff": "@@ -0,0 +1,25 @@\n+      validateResourceRequestsAgainstQueueMaxResource(\n+      ResourceRequest resReq, Resource availableResource)\n+      throws SchedulerInvalidResoureRequestException {\n+    final Resource reqResource \u003d resReq.getCapability();\n+    Map\u003cString, ResourceInformation\u003e resourcesWithZeroAmount \u003d\n+        getZeroResources(availableResource);\n+\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"Resources with zero amount: \"\n+          + Arrays.toString(resourcesWithZeroAmount.entrySet().toArray()));\n+    }\n+\n+    List\u003cResourceInformation\u003e invalidResources \u003d Lists.newArrayList();\n+    for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfKnownResourceTypes(); i++) {\n+      final ResourceInformation requestedRI \u003d\n+          reqResource.getResourceInformation(i);\n+      final String reqResourceName \u003d requestedRI.getName();\n+\n+      if (resourcesWithZeroAmount.containsKey(reqResourceName)\n+          \u0026\u0026 requestedRI.getValue() \u003e 0) {\n+        invalidResources.add(requestedRI);\n+      }\n+    }\n+    return new MaxResourceValidationResult(resReq, invalidResources);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      validateResourceRequestsAgainstQueueMaxResource(\n      ResourceRequest resReq, Resource availableResource)\n      throws SchedulerInvalidResoureRequestException {\n    final Resource reqResource \u003d resReq.getCapability();\n    Map\u003cString, ResourceInformation\u003e resourcesWithZeroAmount \u003d\n        getZeroResources(availableResource);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"Resources with zero amount: \"\n          + Arrays.toString(resourcesWithZeroAmount.entrySet().toArray()));\n    }\n\n    List\u003cResourceInformation\u003e invalidResources \u003d Lists.newArrayList();\n    for (int i \u003d 0; i \u003c ResourceUtils.getNumberOfKnownResourceTypes(); i++) {\n      final ResourceInformation requestedRI \u003d\n          reqResource.getResourceInformation(i);\n      final String reqResourceName \u003d requestedRI.getName();\n\n      if (resourcesWithZeroAmount.containsKey(reqResourceName)\n          \u0026\u0026 requestedRI.getValue() \u003e 0) {\n        invalidResources.add(requestedRI);\n      }\n    }\n    return new MaxResourceValidationResult(resReq, invalidResources);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java"
    }
  }
}