{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RpcProgramNfs3.java",
  "functionName": "commit",
  "functionId": "commit___xdr-XDR__channel-Channel__xid-int__securityHandler-SecurityHandler__remoteAddress-SocketAddress",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
  "functionStartLine": 2078,
  "functionEndLine": 2141,
  "numCommitsSeen": 66,
  "timeTaken": 3053,
  "changeHistory": [
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
    "d6602b5f39833611b4afa4581552f6c4c37e23a8",
    "f37849188b05a6251584de1aed5e66d5dfa7da4f",
    "5e5e35b1856293503124b77d5d4998a4d8e83082",
    "d71d40a63d198991077d5babd70be5e9787a53f1",
    "cd9182d8b5f60428f6c91b0eb0b2e61d52a07020",
    "c9aa74743773c61be938cc1a6ea811ae1404bca2"
  ],
  "changeHistoryShort": {
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": "Ybodychange",
    "d6602b5f39833611b4afa4581552f6c4c37e23a8": "Ybodychange",
    "f37849188b05a6251584de1aed5e66d5dfa7da4f": "Ybodychange",
    "5e5e35b1856293503124b77d5d4998a4d8e83082": "Ybodychange",
    "d71d40a63d198991077d5babd70be5e9787a53f1": "Ybodychange",
    "cd9182d8b5f60428f6c91b0eb0b2e61d52a07020": "Ybodychange",
    "c9aa74743773c61be938cc1a6ea811ae1404bca2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10571. Use Log.*(Object, Throwable) overload to log exceptions.\nContributed by Andras Bokor.\n",
      "commitDate": "14/02/18 8:20 AM",
      "commitName": "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "10/10/17 10:38 AM",
      "commitNameOld": "d6602b5f39833611b4afa4581552f6c4c37e23a8",
      "commitAuthorOld": "Jitendra Pandey",
      "daysBetweenCommits": 126.95,
      "commitsBetweenForRepo": 833,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,64 @@\n   COMMIT3Response commit(XDR xdr, Channel channel, int xid,\n       SecurityHandler securityHandler, SocketAddress remoteAddress) {\n     COMMIT3Response response \u003d new COMMIT3Response(Nfs3Status.NFS3_OK);\n \n     COMMIT3Request request;\n     try {\n       request \u003d COMMIT3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid COMMIT request\");\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     int namenodeId \u003d handle.getNamenodeId();\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"NFS COMMIT fileHandle: \" + handle.dumpFileHandle() + \" offset\u003d\"\n-          + request.getOffset() + \" count\u003d\" + request.getCount() + \" client: \"\n-          + remoteAddress);\n+      LOG.debug(\"NFS COMMIT fileHandle: {} offset\u003d{} count\u003d{} client: {}\",\n+          handle.dumpFileHandle(), request.getOffset(), request.getCount(),\n+          remoteAddress);\n     }\n-\n     DFSClient dfsClient \u003d\n         clientCache.getDfsClient(securityHandler.getUser(), namenodeId);\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     Nfs3FileAttributes preOpAttr \u003d null;\n     try {\n       preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       if (preOpAttr \u003d\u003d null) {\n-        LOG.info(\"Can\u0027t get path for fileId: \" + handle.getFileId());\n+        LOG.info(\"Can\u0027t get path for fileId: {}\", handle.getFileId());\n         return new COMMIT3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new COMMIT3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n             Nfs3Utils.getWccAttr(preOpAttr), preOpAttr),\n             Nfs3Constant.WRITE_COMMIT_VERF);\n       }\n \n       long commitOffset \u003d (request.getCount() \u003d\u003d 0) ? 0\n           : (request.getOffset() + request.getCount());\n \n       // Insert commit as an async request\n       writeManager.handleCommit(dfsClient, handle, commitOffset, channel, xid,\n           preOpAttr, namenodeId);\n       return null;\n     } catch (IOException e) {\n-      LOG.warn(\"Exception \", e);\n+      LOG.warn(\"Exception\", e);\n       Nfs3FileAttributes postOpAttr \u003d null;\n       try {\n         postOpAttr \u003d writeManager.getFileAttr(dfsClient, handle, iug);\n       } catch (IOException e1) {\n-        LOG.info(\"Can\u0027t get postOpAttr for fileId: \" + handle.getFileId(), e1);\n+        LOG.info(\"Can\u0027t get postOpAttr for fileId: {}\", handle.getFileId(), e1);\n       }\n \n       WccData fileWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpAttr), postOpAttr);\n       int status \u003d mapErrorStatus(e);\n       return new COMMIT3Response(status, fileWcc,\n           Nfs3Constant.WRITE_COMMIT_VERF);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  COMMIT3Response commit(XDR xdr, Channel channel, int xid,\n      SecurityHandler securityHandler, SocketAddress remoteAddress) {\n    COMMIT3Response response \u003d new COMMIT3Response(Nfs3Status.NFS3_OK);\n\n    COMMIT3Request request;\n    try {\n      request \u003d COMMIT3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid COMMIT request\");\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    int namenodeId \u003d handle.getNamenodeId();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS COMMIT fileHandle: {} offset\u003d{} count\u003d{} client: {}\",\n          handle.dumpFileHandle(), request.getOffset(), request.getCount(),\n          remoteAddress);\n    }\n    DFSClient dfsClient \u003d\n        clientCache.getDfsClient(securityHandler.getUser(), namenodeId);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    Nfs3FileAttributes preOpAttr \u003d null;\n    try {\n      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      if (preOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId: {}\", handle.getFileId());\n        return new COMMIT3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new COMMIT3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n            Nfs3Utils.getWccAttr(preOpAttr), preOpAttr),\n            Nfs3Constant.WRITE_COMMIT_VERF);\n      }\n\n      long commitOffset \u003d (request.getCount() \u003d\u003d 0) ? 0\n          : (request.getOffset() + request.getCount());\n\n      // Insert commit as an async request\n      writeManager.handleCommit(dfsClient, handle, commitOffset, channel, xid,\n          preOpAttr, namenodeId);\n      return null;\n    } catch (IOException e) {\n      LOG.warn(\"Exception\", e);\n      Nfs3FileAttributes postOpAttr \u003d null;\n      try {\n        postOpAttr \u003d writeManager.getFileAttr(dfsClient, handle, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpAttr for fileId: {}\", handle.getFileId(), e1);\n      }\n\n      WccData fileWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpAttr), postOpAttr);\n      int status \u003d mapErrorStatus(e);\n      return new COMMIT3Response(status, fileWcc,\n          Nfs3Constant.WRITE_COMMIT_VERF);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "d6602b5f39833611b4afa4581552f6c4c37e23a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11575. Supporting HDFS NFS gateway with Federated HDFS. Contributed by Mukul Kumar Singh.\n",
      "commitDate": "10/10/17 10:38 AM",
      "commitName": "d6602b5f39833611b4afa4581552f6c4c37e23a8",
      "commitAuthor": "Jitendra Pandey",
      "commitDateOld": "14/08/17 9:57 PM",
      "commitNameOld": "645a8f2a4d09acb5a21820f52ee78784d9e4cc8a",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 56.53,
      "commitsBetweenForRepo": 520,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,65 @@\n   COMMIT3Response commit(XDR xdr, Channel channel, int xid,\n       SecurityHandler securityHandler, SocketAddress remoteAddress) {\n     COMMIT3Response response \u003d new COMMIT3Response(Nfs3Status.NFS3_OK);\n-    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n-    if (dfsClient \u003d\u003d null) {\n-      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n-      return response;\n-    }\n \n     COMMIT3Request request;\n     try {\n       request \u003d COMMIT3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid COMMIT request\");\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     FileHandle handle \u003d request.getHandle();\n+    int namenodeId \u003d handle.getNamenodeId();\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"NFS COMMIT fileId: \" + handle.getFileId() + \" offset\u003d\"\n+      LOG.debug(\"NFS COMMIT fileHandle: \" + handle.dumpFileHandle() + \" offset\u003d\"\n           + request.getOffset() + \" count\u003d\" + request.getCount() + \" client: \"\n           + remoteAddress);\n     }\n \n+    DFSClient dfsClient \u003d\n+        clientCache.getDfsClient(securityHandler.getUser(), namenodeId);\n+    if (dfsClient \u003d\u003d null) {\n+      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n+      return response;\n+    }\n+\n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     Nfs3FileAttributes preOpAttr \u003d null;\n     try {\n       preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       if (preOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId: \" + handle.getFileId());\n         return new COMMIT3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new COMMIT3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n             Nfs3Utils.getWccAttr(preOpAttr), preOpAttr),\n             Nfs3Constant.WRITE_COMMIT_VERF);\n       }\n \n       long commitOffset \u003d (request.getCount() \u003d\u003d 0) ? 0\n           : (request.getOffset() + request.getCount());\n \n       // Insert commit as an async request\n       writeManager.handleCommit(dfsClient, handle, commitOffset, channel, xid,\n-          preOpAttr);\n+          preOpAttr, namenodeId);\n       return null;\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       Nfs3FileAttributes postOpAttr \u003d null;\n       try {\n         postOpAttr \u003d writeManager.getFileAttr(dfsClient, handle, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpAttr for fileId: \" + handle.getFileId(), e1);\n       }\n \n       WccData fileWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpAttr), postOpAttr);\n       int status \u003d mapErrorStatus(e);\n       return new COMMIT3Response(status, fileWcc,\n           Nfs3Constant.WRITE_COMMIT_VERF);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  COMMIT3Response commit(XDR xdr, Channel channel, int xid,\n      SecurityHandler securityHandler, SocketAddress remoteAddress) {\n    COMMIT3Response response \u003d new COMMIT3Response(Nfs3Status.NFS3_OK);\n\n    COMMIT3Request request;\n    try {\n      request \u003d COMMIT3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid COMMIT request\");\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    int namenodeId \u003d handle.getNamenodeId();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS COMMIT fileHandle: \" + handle.dumpFileHandle() + \" offset\u003d\"\n          + request.getOffset() + \" count\u003d\" + request.getCount() + \" client: \"\n          + remoteAddress);\n    }\n\n    DFSClient dfsClient \u003d\n        clientCache.getDfsClient(securityHandler.getUser(), namenodeId);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    Nfs3FileAttributes preOpAttr \u003d null;\n    try {\n      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      if (preOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId: \" + handle.getFileId());\n        return new COMMIT3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new COMMIT3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n            Nfs3Utils.getWccAttr(preOpAttr), preOpAttr),\n            Nfs3Constant.WRITE_COMMIT_VERF);\n      }\n\n      long commitOffset \u003d (request.getCount() \u003d\u003d 0) ? 0\n          : (request.getOffset() + request.getCount());\n\n      // Insert commit as an async request\n      writeManager.handleCommit(dfsClient, handle, commitOffset, channel, xid,\n          preOpAttr, namenodeId);\n      return null;\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      Nfs3FileAttributes postOpAttr \u003d null;\n      try {\n        postOpAttr \u003d writeManager.getFileAttr(dfsClient, handle, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpAttr for fileId: \" + handle.getFileId(), e1);\n      }\n\n      WccData fileWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpAttr), postOpAttr);\n      int status \u003d mapErrorStatus(e);\n      return new COMMIT3Response(status, fileWcc,\n          Nfs3Constant.WRITE_COMMIT_VERF);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "f37849188b05a6251584de1aed5e66d5dfa7da4f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7423. various typos and message formatting fixes in nfs daemon and doc. (Charles Lamb via yliu)\n",
      "commitDate": "28/01/15 12:56 PM",
      "commitName": "f37849188b05a6251584de1aed5e66d5dfa7da4f",
      "commitAuthor": "yliu",
      "commitDateOld": "19/01/15 5:29 PM",
      "commitNameOld": "5e5e35b1856293503124b77d5d4998a4d8e83082",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 8.81,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n   COMMIT3Response commit(XDR xdr, Channel channel, int xid,\n       SecurityHandler securityHandler, SocketAddress remoteAddress) {\n     COMMIT3Response response \u003d new COMMIT3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     COMMIT3Request request;\n     try {\n       request \u003d COMMIT3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid COMMIT request\");\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS COMMIT fileId: \" + handle.getFileId() + \" offset\u003d\"\n-          + request.getOffset() + \" count\u003d\" + request.getCount() + \" client:\"\n+          + request.getOffset() + \" count\u003d\" + request.getCount() + \" client: \"\n           + remoteAddress);\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     Nfs3FileAttributes preOpAttr \u003d null;\n     try {\n       preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       if (preOpAttr \u003d\u003d null) {\n-        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n+        LOG.info(\"Can\u0027t get path for fileId: \" + handle.getFileId());\n         return new COMMIT3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new COMMIT3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n             Nfs3Utils.getWccAttr(preOpAttr), preOpAttr),\n             Nfs3Constant.WRITE_COMMIT_VERF);\n       }\n \n       long commitOffset \u003d (request.getCount() \u003d\u003d 0) ? 0\n           : (request.getOffset() + request.getCount());\n \n       // Insert commit as an async request\n       writeManager.handleCommit(dfsClient, handle, commitOffset, channel, xid,\n           preOpAttr);\n       return null;\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       Nfs3FileAttributes postOpAttr \u003d null;\n       try {\n         postOpAttr \u003d writeManager.getFileAttr(dfsClient, handle, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpAttr for fileId: \" + handle.getFileId(), e1);\n       }\n \n       WccData fileWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpAttr), postOpAttr);\n       int status \u003d mapErrorStatus(e);\n       return new COMMIT3Response(status, fileWcc,\n           Nfs3Constant.WRITE_COMMIT_VERF);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  COMMIT3Response commit(XDR xdr, Channel channel, int xid,\n      SecurityHandler securityHandler, SocketAddress remoteAddress) {\n    COMMIT3Response response \u003d new COMMIT3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    COMMIT3Request request;\n    try {\n      request \u003d COMMIT3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid COMMIT request\");\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS COMMIT fileId: \" + handle.getFileId() + \" offset\u003d\"\n          + request.getOffset() + \" count\u003d\" + request.getCount() + \" client: \"\n          + remoteAddress);\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    Nfs3FileAttributes preOpAttr \u003d null;\n    try {\n      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      if (preOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId: \" + handle.getFileId());\n        return new COMMIT3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new COMMIT3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n            Nfs3Utils.getWccAttr(preOpAttr), preOpAttr),\n            Nfs3Constant.WRITE_COMMIT_VERF);\n      }\n\n      long commitOffset \u003d (request.getCount() \u003d\u003d 0) ? 0\n          : (request.getOffset() + request.getCount());\n\n      // Insert commit as an async request\n      writeManager.handleCommit(dfsClient, handle, commitOffset, channel, xid,\n          preOpAttr);\n      return null;\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      Nfs3FileAttributes postOpAttr \u003d null;\n      try {\n        postOpAttr \u003d writeManager.getFileAttr(dfsClient, handle, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpAttr for fileId: \" + handle.getFileId(), e1);\n      }\n\n      WccData fileWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpAttr), postOpAttr);\n      int status \u003d mapErrorStatus(e);\n      return new COMMIT3Response(status, fileWcc,\n          Nfs3Constant.WRITE_COMMIT_VERF);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "5e5e35b1856293503124b77d5d4998a4d8e83082": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7640. print NFS Client in the NFS log. Contributed by Brandon Li.\n",
      "commitDate": "19/01/15 5:29 PM",
      "commitName": "5e5e35b1856293503124b77d5d4998a4d8e83082",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "11/12/14 3:40 PM",
      "commitNameOld": "f6f2a3f1c73266bfedd802eacde60d8b19b81015",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 39.08,
      "commitsBetweenForRepo": 202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,62 @@\n   COMMIT3Response commit(XDR xdr, Channel channel, int xid,\n       SecurityHandler securityHandler, SocketAddress remoteAddress) {\n     COMMIT3Response response \u003d new COMMIT3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     COMMIT3Request request;\n     try {\n       request \u003d COMMIT3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid COMMIT request\");\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS COMMIT fileId: \" + handle.getFileId() + \" offset\u003d\"\n-          + request.getOffset() + \" count\u003d\" + request.getCount());\n+          + request.getOffset() + \" count\u003d\" + request.getCount() + \" client:\"\n+          + remoteAddress);\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     Nfs3FileAttributes preOpAttr \u003d null;\n     try {\n       preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       if (preOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         return new COMMIT3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new COMMIT3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n             Nfs3Utils.getWccAttr(preOpAttr), preOpAttr),\n             Nfs3Constant.WRITE_COMMIT_VERF);\n       }\n \n       long commitOffset \u003d (request.getCount() \u003d\u003d 0) ? 0\n           : (request.getOffset() + request.getCount());\n \n       // Insert commit as an async request\n       writeManager.handleCommit(dfsClient, handle, commitOffset, channel, xid,\n           preOpAttr);\n       return null;\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       Nfs3FileAttributes postOpAttr \u003d null;\n       try {\n         postOpAttr \u003d writeManager.getFileAttr(dfsClient, handle, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpAttr for fileId: \" + handle.getFileId(), e1);\n       }\n \n       WccData fileWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpAttr), postOpAttr);\n       int status \u003d mapErrorStatus(e);\n       return new COMMIT3Response(status, fileWcc,\n           Nfs3Constant.WRITE_COMMIT_VERF);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  COMMIT3Response commit(XDR xdr, Channel channel, int xid,\n      SecurityHandler securityHandler, SocketAddress remoteAddress) {\n    COMMIT3Response response \u003d new COMMIT3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    COMMIT3Request request;\n    try {\n      request \u003d COMMIT3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid COMMIT request\");\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS COMMIT fileId: \" + handle.getFileId() + \" offset\u003d\"\n          + request.getOffset() + \" count\u003d\" + request.getCount() + \" client:\"\n          + remoteAddress);\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    Nfs3FileAttributes preOpAttr \u003d null;\n    try {\n      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      if (preOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        return new COMMIT3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new COMMIT3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n            Nfs3Utils.getWccAttr(preOpAttr), preOpAttr),\n            Nfs3Constant.WRITE_COMMIT_VERF);\n      }\n\n      long commitOffset \u003d (request.getCount() \u003d\u003d 0) ? 0\n          : (request.getOffset() + request.getCount());\n\n      // Insert commit as an async request\n      writeManager.handleCommit(dfsClient, handle, commitOffset, channel, xid,\n          preOpAttr);\n      return null;\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      Nfs3FileAttributes postOpAttr \u003d null;\n      try {\n        postOpAttr \u003d writeManager.getFileAttr(dfsClient, handle, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpAttr for fileId: \" + handle.getFileId(), e1);\n      }\n\n      WccData fileWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpAttr), postOpAttr);\n      int status \u003d mapErrorStatus(e);\n      return new COMMIT3Response(status, fileWcc,\n          Nfs3Constant.WRITE_COMMIT_VERF);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "d71d40a63d198991077d5babd70be5e9787a53f1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7180. NFSv3 gateway frequently gets stuck due to GC. Contributed by Brandon Li\n",
      "commitDate": "22/10/14 9:27 PM",
      "commitName": "d71d40a63d198991077d5babd70be5e9787a53f1",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "21/10/14 11:49 AM",
      "commitNameOld": "4e134a02a4b6f30704b99dfb166dc361daf426ea",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 1.4,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n   COMMIT3Response commit(XDR xdr, Channel channel, int xid,\n       SecurityHandler securityHandler, SocketAddress remoteAddress) {\n     COMMIT3Response response \u003d new COMMIT3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n-    COMMIT3Request request \u003d null;\n+    COMMIT3Request request;\n     try {\n       request \u003d COMMIT3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid COMMIT request\");\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS COMMIT fileId: \" + handle.getFileId() + \" offset\u003d\"\n           + request.getOffset() + \" count\u003d\" + request.getCount());\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     Nfs3FileAttributes preOpAttr \u003d null;\n     try {\n       preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       if (preOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         return new COMMIT3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new COMMIT3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n             Nfs3Utils.getWccAttr(preOpAttr), preOpAttr),\n             Nfs3Constant.WRITE_COMMIT_VERF);\n       }\n \n       long commitOffset \u003d (request.getCount() \u003d\u003d 0) ? 0\n           : (request.getOffset() + request.getCount());\n \n       // Insert commit as an async request\n       writeManager.handleCommit(dfsClient, handle, commitOffset,\n           channel, xid, preOpAttr);\n       return null;\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       Nfs3FileAttributes postOpAttr \u003d null;\n       try {\n         postOpAttr \u003d writeManager.getFileAttr(dfsClient, handle, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpAttr for fileId: \" + handle.getFileId(), e1);\n       }\n \n       WccData fileWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpAttr), postOpAttr);\n       int status \u003d mapErrorStatus(e);\n       return new COMMIT3Response(status, fileWcc,\n           Nfs3Constant.WRITE_COMMIT_VERF);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  COMMIT3Response commit(XDR xdr, Channel channel, int xid,\n      SecurityHandler securityHandler, SocketAddress remoteAddress) {\n    COMMIT3Response response \u003d new COMMIT3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    COMMIT3Request request;\n    try {\n      request \u003d COMMIT3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid COMMIT request\");\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS COMMIT fileId: \" + handle.getFileId() + \" offset\u003d\"\n          + request.getOffset() + \" count\u003d\" + request.getCount());\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    Nfs3FileAttributes preOpAttr \u003d null;\n    try {\n      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      if (preOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        return new COMMIT3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new COMMIT3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n            Nfs3Utils.getWccAttr(preOpAttr), preOpAttr),\n            Nfs3Constant.WRITE_COMMIT_VERF);\n      }\n\n      long commitOffset \u003d (request.getCount() \u003d\u003d 0) ? 0\n          : (request.getOffset() + request.getCount());\n\n      // Insert commit as an async request\n      writeManager.handleCommit(dfsClient, handle, commitOffset,\n          channel, xid, preOpAttr);\n      return null;\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      Nfs3FileAttributes postOpAttr \u003d null;\n      try {\n        postOpAttr \u003d writeManager.getFileAttr(dfsClient, handle, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpAttr for fileId: \" + handle.getFileId(), e1);\n      }\n\n      WccData fileWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpAttr), postOpAttr);\n      int status \u003d mapErrorStatus(e);\n      return new COMMIT3Response(status, fileWcc,\n          Nfs3Constant.WRITE_COMMIT_VERF);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "cd9182d8b5f60428f6c91b0eb0b2e61d52a07020": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6892. Add XDR packaging method for each NFS request. Contributed by Brandon Li\n",
      "commitDate": "27/08/14 11:06 AM",
      "commitName": "cd9182d8b5f60428f6c91b0eb0b2e61d52a07020",
      "commitAuthor": "brandonli",
      "commitDateOld": "21/08/14 10:53 AM",
      "commitNameOld": "7b28f363b1b3f12cecc92d0bba8eb3021b67b48e",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 6.01,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n   COMMIT3Response commit(XDR xdr, Channel channel, int xid,\n       SecurityHandler securityHandler, SocketAddress remoteAddress) {\n     COMMIT3Response response \u003d new COMMIT3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     COMMIT3Request request \u003d null;\n     try {\n-      request \u003d new COMMIT3Request(xdr);\n+      request \u003d COMMIT3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid COMMIT request\");\n       response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n       return response;\n     }\n \n     FileHandle handle \u003d request.getHandle();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS COMMIT fileId: \" + handle.getFileId() + \" offset\u003d\"\n           + request.getOffset() + \" count\u003d\" + request.getCount());\n     }\n \n     String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n     Nfs3FileAttributes preOpAttr \u003d null;\n     try {\n       preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       if (preOpAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n         return new COMMIT3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new COMMIT3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n             Nfs3Utils.getWccAttr(preOpAttr), preOpAttr),\n             Nfs3Constant.WRITE_COMMIT_VERF);\n       }\n \n       long commitOffset \u003d (request.getCount() \u003d\u003d 0) ? 0\n           : (request.getOffset() + request.getCount());\n \n       // Insert commit as an async request\n       writeManager.handleCommit(dfsClient, handle, commitOffset,\n           channel, xid, preOpAttr);\n       return null;\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       Nfs3FileAttributes postOpAttr \u003d null;\n       try {\n         postOpAttr \u003d writeManager.getFileAttr(dfsClient, handle, iug);\n       } catch (IOException e1) {\n         LOG.info(\"Can\u0027t get postOpAttr for fileId: \" + handle.getFileId(), e1);\n       }\n \n       WccData fileWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpAttr), postOpAttr);\n       int status \u003d mapErrorStatus(e);\n       return new COMMIT3Response(status, fileWcc,\n         Nfs3Constant.WRITE_COMMIT_VERF);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  COMMIT3Response commit(XDR xdr, Channel channel, int xid,\n      SecurityHandler securityHandler, SocketAddress remoteAddress) {\n    COMMIT3Response response \u003d new COMMIT3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    COMMIT3Request request \u003d null;\n    try {\n      request \u003d COMMIT3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid COMMIT request\");\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS COMMIT fileId: \" + handle.getFileId() + \" offset\u003d\"\n          + request.getOffset() + \" count\u003d\" + request.getCount());\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    Nfs3FileAttributes preOpAttr \u003d null;\n    try {\n      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      if (preOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        return new COMMIT3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new COMMIT3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n            Nfs3Utils.getWccAttr(preOpAttr), preOpAttr),\n            Nfs3Constant.WRITE_COMMIT_VERF);\n      }\n\n      long commitOffset \u003d (request.getCount() \u003d\u003d 0) ? 0\n          : (request.getOffset() + request.getCount());\n\n      // Insert commit as an async request\n      writeManager.handleCommit(dfsClient, handle, commitOffset,\n          channel, xid, preOpAttr);\n      return null;\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      Nfs3FileAttributes postOpAttr \u003d null;\n      try {\n        postOpAttr \u003d writeManager.getFileAttr(dfsClient, handle, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpAttr for fileId: \" + handle.getFileId(), e1);\n      }\n\n      WccData fileWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpAttr), postOpAttr);\n      int status \u003d mapErrorStatus(e);\n      return new COMMIT3Response(status, fileWcc,\n        Nfs3Constant.WRITE_COMMIT_VERF);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "c9aa74743773c61be938cc1a6ea811ae1404bca2": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6451. NFS should not return NFS3ERR_IO for AccessControlException. Contributed by Abhiraj Butala\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/14 10:40 AM",
      "commitName": "c9aa74743773c61be938cc1a6ea811ae1404bca2",
      "commitAuthor": "Brandon Li",
      "diff": "@@ -0,0 +1,61 @@\n+  COMMIT3Response commit(XDR xdr, Channel channel, int xid,\n+      SecurityHandler securityHandler, SocketAddress remoteAddress) {\n+    COMMIT3Response response \u003d new COMMIT3Response(Nfs3Status.NFS3_OK);\n+    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n+    if (dfsClient \u003d\u003d null) {\n+      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n+      return response;\n+    }\n+\n+    COMMIT3Request request \u003d null;\n+    try {\n+      request \u003d new COMMIT3Request(xdr);\n+    } catch (IOException e) {\n+      LOG.error(\"Invalid COMMIT request\");\n+      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n+      return response;\n+    }\n+\n+    FileHandle handle \u003d request.getHandle();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"NFS COMMIT fileId: \" + handle.getFileId() + \" offset\u003d\"\n+          + request.getOffset() + \" count\u003d\" + request.getCount());\n+    }\n+\n+    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n+    Nfs3FileAttributes preOpAttr \u003d null;\n+    try {\n+      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n+      if (preOpAttr \u003d\u003d null) {\n+        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n+        return new COMMIT3Response(Nfs3Status.NFS3ERR_STALE);\n+      }\n+\n+      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n+        return new COMMIT3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n+            Nfs3Utils.getWccAttr(preOpAttr), preOpAttr),\n+            Nfs3Constant.WRITE_COMMIT_VERF);\n+      }\n+\n+      long commitOffset \u003d (request.getCount() \u003d\u003d 0) ? 0\n+          : (request.getOffset() + request.getCount());\n+\n+      // Insert commit as an async request\n+      writeManager.handleCommit(dfsClient, handle, commitOffset,\n+          channel, xid, preOpAttr);\n+      return null;\n+    } catch (IOException e) {\n+      LOG.warn(\"Exception \", e);\n+      Nfs3FileAttributes postOpAttr \u003d null;\n+      try {\n+        postOpAttr \u003d writeManager.getFileAttr(dfsClient, handle, iug);\n+      } catch (IOException e1) {\n+        LOG.info(\"Can\u0027t get postOpAttr for fileId: \" + handle.getFileId(), e1);\n+      }\n+\n+      WccData fileWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpAttr), postOpAttr);\n+      int status \u003d mapErrorStatus(e);\n+      return new COMMIT3Response(status, fileWcc,\n+        Nfs3Constant.WRITE_COMMIT_VERF);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  COMMIT3Response commit(XDR xdr, Channel channel, int xid,\n      SecurityHandler securityHandler, SocketAddress remoteAddress) {\n    COMMIT3Response response \u003d new COMMIT3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    COMMIT3Request request \u003d null;\n    try {\n      request \u003d new COMMIT3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid COMMIT request\");\n      response.setStatus(Nfs3Status.NFS3ERR_INVAL);\n      return response;\n    }\n\n    FileHandle handle \u003d request.getHandle();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS COMMIT fileId: \" + handle.getFileId() + \" offset\u003d\"\n          + request.getOffset() + \" count\u003d\" + request.getCount());\n    }\n\n    String fileIdPath \u003d Nfs3Utils.getFileIdPath(handle);\n    Nfs3FileAttributes preOpAttr \u003d null;\n    try {\n      preOpAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      if (preOpAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for fileId:\" + handle.getFileId());\n        return new COMMIT3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new COMMIT3Response(Nfs3Status.NFS3ERR_ACCES, new WccData(\n            Nfs3Utils.getWccAttr(preOpAttr), preOpAttr),\n            Nfs3Constant.WRITE_COMMIT_VERF);\n      }\n\n      long commitOffset \u003d (request.getCount() \u003d\u003d 0) ? 0\n          : (request.getOffset() + request.getCount());\n\n      // Insert commit as an async request\n      writeManager.handleCommit(dfsClient, handle, commitOffset,\n          channel, xid, preOpAttr);\n      return null;\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      Nfs3FileAttributes postOpAttr \u003d null;\n      try {\n        postOpAttr \u003d writeManager.getFileAttr(dfsClient, handle, iug);\n      } catch (IOException e1) {\n        LOG.info(\"Can\u0027t get postOpAttr for fileId: \" + handle.getFileId(), e1);\n      }\n\n      WccData fileWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpAttr), postOpAttr);\n      int status \u003d mapErrorStatus(e);\n      return new COMMIT3Response(status, fileWcc,\n        Nfs3Constant.WRITE_COMMIT_VERF);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java"
    }
  }
}