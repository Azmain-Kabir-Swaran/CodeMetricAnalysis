{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NECVEPlugin.java",
  "functionName": "parseOutput",
  "functionId": "parseOutput___output-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/com/nec/NECVEPlugin.java",
  "functionStartLine": 181,
  "functionEndLine": 221,
  "numCommitsSeen": 3,
  "timeTaken": 1101,
  "changeHistory": [
    "7fbaa7d66f3ff40b80b70d4563545035e91e44a6",
    "8a95ea61e12384389f2103df0fcba594469cc024"
  ],
  "changeHistoryShort": {
    "7fbaa7d66f3ff40b80b70d4563545035e91e44a6": "Ybodychange",
    "8a95ea61e12384389f2103df0fcba594469cc024": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7fbaa7d66f3ff40b80b70d4563545035e91e44a6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9476. [YARN-9473] Create unit tests for VE plugin. Contributed by Peter Bacsko.\n",
      "commitDate": "29/04/19 8:06 PM",
      "commitName": "7fbaa7d66f3ff40b80b70d4563545035e91e44a6",
      "commitAuthor": "Zhankun Tang",
      "commitDateOld": "23/04/19 2:33 AM",
      "commitNameOld": "8a95ea61e12384389f2103df0fcba594469cc024",
      "commitAuthorOld": "Zhankun Tang",
      "daysBetweenCommits": 6.73,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   private Set\u003cDevice\u003e parseOutput(String output) {\n     Set\u003cDevice\u003e devices \u003d new HashSet\u003c\u003e();\n \n     LOG.info(\"Parsing output: {}\", output);\n     String[] lines \u003d output.split(\"\\n\");\n+    outer:\n     for (String line : lines) {\n       Device.Builder builder \u003d Device.Builder.newInstance();\n \n       // map key --\u003e builder calls\n       Map\u003cString, Consumer\u003cString\u003e\u003e builderInvocations \u003d\n           getBuilderInvocationsMap(builder);\n \n       String[] keyValues \u003d line.trim().split(\",\");\n       for (String keyValue : keyValues) {\n         String[] tokens \u003d keyValue.trim().split(\"\u003d\");\n         if (tokens.length !\u003d 2) {\n           LOG.error(\"Unknown format of script output! Skipping this line\");\n-          continue;\n+          continue outer;\n         }\n \n         final String key \u003d tokens[0];\n         final String value \u003d tokens[1];\n \n         Consumer\u003cString\u003e builderInvocation \u003d builderInvocations.get(key);\n         if (builderInvocation !\u003d null) {\n           builderInvocation.accept(value);\n         } else {\n           LOG.warn(\"Unknown key {}, ignored\", key);\n         }\n       }// for key value pairs\n       Device device \u003d builder.build();\n       if (device.isHealthy()) {\n         devices.add(device);\n       } else {\n         LOG.warn(\"Skipping device {} because it\u0027s not healthy\", device);\n       }\n     }\n \n     return devices;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Set\u003cDevice\u003e parseOutput(String output) {\n    Set\u003cDevice\u003e devices \u003d new HashSet\u003c\u003e();\n\n    LOG.info(\"Parsing output: {}\", output);\n    String[] lines \u003d output.split(\"\\n\");\n    outer:\n    for (String line : lines) {\n      Device.Builder builder \u003d Device.Builder.newInstance();\n\n      // map key --\u003e builder calls\n      Map\u003cString, Consumer\u003cString\u003e\u003e builderInvocations \u003d\n          getBuilderInvocationsMap(builder);\n\n      String[] keyValues \u003d line.trim().split(\",\");\n      for (String keyValue : keyValues) {\n        String[] tokens \u003d keyValue.trim().split(\"\u003d\");\n        if (tokens.length !\u003d 2) {\n          LOG.error(\"Unknown format of script output! Skipping this line\");\n          continue outer;\n        }\n\n        final String key \u003d tokens[0];\n        final String value \u003d tokens[1];\n\n        Consumer\u003cString\u003e builderInvocation \u003d builderInvocations.get(key);\n        if (builderInvocation !\u003d null) {\n          builderInvocation.accept(value);\n        } else {\n          LOG.warn(\"Unknown key {}, ignored\", key);\n        }\n      }// for key value pairs\n      Device device \u003d builder.build();\n      if (device.isHealthy()) {\n        devices.add(device);\n      } else {\n        LOG.warn(\"Skipping device {} because it\u0027s not healthy\", device);\n      }\n    }\n\n    return devices;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/com/nec/NECVEPlugin.java",
      "extendedDetails": {}
    },
    "8a95ea61e12384389f2103df0fcba594469cc024": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9475. [YARN-9473] Create basic VE plugin. Contributed by Peter Bacsko.\n",
      "commitDate": "23/04/19 2:33 AM",
      "commitName": "8a95ea61e12384389f2103df0fcba594469cc024",
      "commitAuthor": "Zhankun Tang",
      "diff": "@@ -0,0 +1,40 @@\n+  private Set\u003cDevice\u003e parseOutput(String output) {\n+    Set\u003cDevice\u003e devices \u003d new HashSet\u003c\u003e();\n+\n+    LOG.info(\"Parsing output: {}\", output);\n+    String[] lines \u003d output.split(\"\\n\");\n+    for (String line : lines) {\n+      Device.Builder builder \u003d Device.Builder.newInstance();\n+\n+      // map key --\u003e builder calls\n+      Map\u003cString, Consumer\u003cString\u003e\u003e builderInvocations \u003d\n+          getBuilderInvocationsMap(builder);\n+\n+      String[] keyValues \u003d line.trim().split(\",\");\n+      for (String keyValue : keyValues) {\n+        String[] tokens \u003d keyValue.trim().split(\"\u003d\");\n+        if (tokens.length !\u003d 2) {\n+          LOG.error(\"Unknown format of script output! Skipping this line\");\n+          continue;\n+        }\n+\n+        final String key \u003d tokens[0];\n+        final String value \u003d tokens[1];\n+\n+        Consumer\u003cString\u003e builderInvocation \u003d builderInvocations.get(key);\n+        if (builderInvocation !\u003d null) {\n+          builderInvocation.accept(value);\n+        } else {\n+          LOG.warn(\"Unknown key {}, ignored\", key);\n+        }\n+      }// for key value pairs\n+      Device device \u003d builder.build();\n+      if (device.isHealthy()) {\n+        devices.add(device);\n+      } else {\n+        LOG.warn(\"Skipping device {} because it\u0027s not healthy\", device);\n+      }\n+    }\n+\n+    return devices;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Set\u003cDevice\u003e parseOutput(String output) {\n    Set\u003cDevice\u003e devices \u003d new HashSet\u003c\u003e();\n\n    LOG.info(\"Parsing output: {}\", output);\n    String[] lines \u003d output.split(\"\\n\");\n    for (String line : lines) {\n      Device.Builder builder \u003d Device.Builder.newInstance();\n\n      // map key --\u003e builder calls\n      Map\u003cString, Consumer\u003cString\u003e\u003e builderInvocations \u003d\n          getBuilderInvocationsMap(builder);\n\n      String[] keyValues \u003d line.trim().split(\",\");\n      for (String keyValue : keyValues) {\n        String[] tokens \u003d keyValue.trim().split(\"\u003d\");\n        if (tokens.length !\u003d 2) {\n          LOG.error(\"Unknown format of script output! Skipping this line\");\n          continue;\n        }\n\n        final String key \u003d tokens[0];\n        final String value \u003d tokens[1];\n\n        Consumer\u003cString\u003e builderInvocation \u003d builderInvocations.get(key);\n        if (builderInvocation !\u003d null) {\n          builderInvocation.accept(value);\n        } else {\n          LOG.warn(\"Unknown key {}, ignored\", key);\n        }\n      }// for key value pairs\n      Device device \u003d builder.build();\n      if (device.isHealthy()) {\n        devices.add(device);\n      } else {\n        LOG.warn(\"Skipping device {} because it\u0027s not healthy\", device);\n      }\n    }\n\n    return devices;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/com/nec/NECVEPlugin.java"
    }
  }
}