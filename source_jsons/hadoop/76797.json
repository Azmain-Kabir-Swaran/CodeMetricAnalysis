{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RSUtil.java",
  "functionName": "encodeData",
  "functionId": "encodeData___gfTables-byte[]__dataLen-int__inputs-byte[][]__inputOffsets-int[]__outputs-byte[][]__outputOffsets-int[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/RSUtil.java",
  "functionStartLine": 86,
  "functionEndLine": 132,
  "numCommitsSeen": 6,
  "timeTaken": 1225,
  "changeHistory": [
    "19e8f076919932b17f24ec4090df1926677651e7",
    "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e"
  ],
  "changeHistoryShort": {
    "19e8f076919932b17f24ec4090df1926677651e7": "Ymovefromfile",
    "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "19e8f076919932b17f24ec4090df1926677651e7": {
      "type": "Ymovefromfile",
      "commitMessage": "HADOOP-12826. Rename the new Java coder and make it default. Contributed by Rui Li.\n",
      "commitDate": "14/03/16 4:45 PM",
      "commitName": "19e8f076919932b17f24ec4090df1926677651e7",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "14/03/16 3:48 PM",
      "commitNameOld": "1898810cda83e6d273a2963b56ed499c0fb91118",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   public static void encodeData(byte[] gfTables, int dataLen, byte[][] inputs,\n-                                int[] inputOffsets, byte[][] outputs,\n-                                int[] outputOffsets) {\n+      int[] inputOffsets, byte[][] outputs,\n+      int[] outputOffsets) {\n     int numInputs \u003d inputs.length;\n     int numOutputs \u003d outputs.length;\n     int l, i, j, iPos, oPos;\n     byte[] input, output;\n     byte s;\n     final int times \u003d dataLen / 8;\n     final int extra \u003d dataLen - dataLen % 8;\n     byte[] tableLine;\n \n     for (l \u003d 0; l \u003c numOutputs; l++) {\n       output \u003d outputs[l];\n \n       for (j \u003d 0; j \u003c numInputs; j++) {\n         input \u003d inputs[j];\n         iPos \u003d inputOffsets[j];\n         oPos \u003d outputOffsets[l];\n \n         s \u003d gfTables[j * 32 + l * numInputs * 32 + 1];\n         tableLine \u003d GF256.gfMulTab()[s \u0026 0xff];\n \n         /**\n          * Purely for performance, assuming we can use 8 bytes in the SIMD\n          * instruction. Subject to be improved.\n          */\n         for (i \u003d 0; i \u003c times; i++, iPos +\u003d 8, oPos +\u003d 8) {\n           output[oPos + 0] ^\u003d tableLine[0xff \u0026 input[iPos + 0]];\n           output[oPos + 1] ^\u003d tableLine[0xff \u0026 input[iPos + 1]];\n           output[oPos + 2] ^\u003d tableLine[0xff \u0026 input[iPos + 2]];\n           output[oPos + 3] ^\u003d tableLine[0xff \u0026 input[iPos + 3]];\n           output[oPos + 4] ^\u003d tableLine[0xff \u0026 input[iPos + 4]];\n           output[oPos + 5] ^\u003d tableLine[0xff \u0026 input[iPos + 5]];\n           output[oPos + 6] ^\u003d tableLine[0xff \u0026 input[iPos + 6]];\n           output[oPos + 7] ^\u003d tableLine[0xff \u0026 input[iPos + 7]];\n         }\n \n         /**\n          * For the left bytes, do it one by one.\n          */\n         for (i \u003d extra; i \u003c dataLen; i++, iPos++, oPos++) {\n           output[oPos] ^\u003d tableLine[0xff \u0026 input[iPos]];\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void encodeData(byte[] gfTables, int dataLen, byte[][] inputs,\n      int[] inputOffsets, byte[][] outputs,\n      int[] outputOffsets) {\n    int numInputs \u003d inputs.length;\n    int numOutputs \u003d outputs.length;\n    int l, i, j, iPos, oPos;\n    byte[] input, output;\n    byte s;\n    final int times \u003d dataLen / 8;\n    final int extra \u003d dataLen - dataLen % 8;\n    byte[] tableLine;\n\n    for (l \u003d 0; l \u003c numOutputs; l++) {\n      output \u003d outputs[l];\n\n      for (j \u003d 0; j \u003c numInputs; j++) {\n        input \u003d inputs[j];\n        iPos \u003d inputOffsets[j];\n        oPos \u003d outputOffsets[l];\n\n        s \u003d gfTables[j * 32 + l * numInputs * 32 + 1];\n        tableLine \u003d GF256.gfMulTab()[s \u0026 0xff];\n\n        /**\n         * Purely for performance, assuming we can use 8 bytes in the SIMD\n         * instruction. Subject to be improved.\n         */\n        for (i \u003d 0; i \u003c times; i++, iPos +\u003d 8, oPos +\u003d 8) {\n          output[oPos + 0] ^\u003d tableLine[0xff \u0026 input[iPos + 0]];\n          output[oPos + 1] ^\u003d tableLine[0xff \u0026 input[iPos + 1]];\n          output[oPos + 2] ^\u003d tableLine[0xff \u0026 input[iPos + 2]];\n          output[oPos + 3] ^\u003d tableLine[0xff \u0026 input[iPos + 3]];\n          output[oPos + 4] ^\u003d tableLine[0xff \u0026 input[iPos + 4]];\n          output[oPos + 5] ^\u003d tableLine[0xff \u0026 input[iPos + 5]];\n          output[oPos + 6] ^\u003d tableLine[0xff \u0026 input[iPos + 6]];\n          output[oPos + 7] ^\u003d tableLine[0xff \u0026 input[iPos + 7]];\n        }\n\n        /**\n         * For the left bytes, do it one by one.\n         */\n        for (i \u003d extra; i \u003c dataLen; i++, iPos++, oPos++) {\n          output[oPos] ^\u003d tableLine[0xff \u0026 input[iPos]];\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/RSUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/RSUtil2.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/RSUtil.java",
        "oldMethodName": "encodeData",
        "newMethodName": "encodeData"
      }
    },
    "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12041. Implement another Reed-Solomon coder in pure Java. Contributed by Kai Zheng.\n\nChange-Id: I35ff2e498d4f988c9a064f74374f7c7258b7a6b7\n",
      "commitDate": "03/02/16 3:05 PM",
      "commitName": "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e",
      "commitAuthor": "zhezhang",
      "diff": "@@ -0,0 +1,47 @@\n+  public static void encodeData(byte[] gfTables, int dataLen, byte[][] inputs,\n+                                int[] inputOffsets, byte[][] outputs,\n+                                int[] outputOffsets) {\n+    int numInputs \u003d inputs.length;\n+    int numOutputs \u003d outputs.length;\n+    int l, i, j, iPos, oPos;\n+    byte[] input, output;\n+    byte s;\n+    final int times \u003d dataLen / 8;\n+    final int extra \u003d dataLen - dataLen % 8;\n+    byte[] tableLine;\n+\n+    for (l \u003d 0; l \u003c numOutputs; l++) {\n+      output \u003d outputs[l];\n+\n+      for (j \u003d 0; j \u003c numInputs; j++) {\n+        input \u003d inputs[j];\n+        iPos \u003d inputOffsets[j];\n+        oPos \u003d outputOffsets[l];\n+\n+        s \u003d gfTables[j * 32 + l * numInputs * 32 + 1];\n+        tableLine \u003d GF256.gfMulTab()[s \u0026 0xff];\n+\n+        /**\n+         * Purely for performance, assuming we can use 8 bytes in the SIMD\n+         * instruction. Subject to be improved.\n+         */\n+        for (i \u003d 0; i \u003c times; i++, iPos +\u003d 8, oPos +\u003d 8) {\n+          output[oPos + 0] ^\u003d tableLine[0xff \u0026 input[iPos + 0]];\n+          output[oPos + 1] ^\u003d tableLine[0xff \u0026 input[iPos + 1]];\n+          output[oPos + 2] ^\u003d tableLine[0xff \u0026 input[iPos + 2]];\n+          output[oPos + 3] ^\u003d tableLine[0xff \u0026 input[iPos + 3]];\n+          output[oPos + 4] ^\u003d tableLine[0xff \u0026 input[iPos + 4]];\n+          output[oPos + 5] ^\u003d tableLine[0xff \u0026 input[iPos + 5]];\n+          output[oPos + 6] ^\u003d tableLine[0xff \u0026 input[iPos + 6]];\n+          output[oPos + 7] ^\u003d tableLine[0xff \u0026 input[iPos + 7]];\n+        }\n+\n+        /**\n+         * For the left bytes, do it one by one.\n+         */\n+        for (i \u003d extra; i \u003c dataLen; i++, iPos++, oPos++) {\n+          output[oPos] ^\u003d tableLine[0xff \u0026 input[iPos]];\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void encodeData(byte[] gfTables, int dataLen, byte[][] inputs,\n                                int[] inputOffsets, byte[][] outputs,\n                                int[] outputOffsets) {\n    int numInputs \u003d inputs.length;\n    int numOutputs \u003d outputs.length;\n    int l, i, j, iPos, oPos;\n    byte[] input, output;\n    byte s;\n    final int times \u003d dataLen / 8;\n    final int extra \u003d dataLen - dataLen % 8;\n    byte[] tableLine;\n\n    for (l \u003d 0; l \u003c numOutputs; l++) {\n      output \u003d outputs[l];\n\n      for (j \u003d 0; j \u003c numInputs; j++) {\n        input \u003d inputs[j];\n        iPos \u003d inputOffsets[j];\n        oPos \u003d outputOffsets[l];\n\n        s \u003d gfTables[j * 32 + l * numInputs * 32 + 1];\n        tableLine \u003d GF256.gfMulTab()[s \u0026 0xff];\n\n        /**\n         * Purely for performance, assuming we can use 8 bytes in the SIMD\n         * instruction. Subject to be improved.\n         */\n        for (i \u003d 0; i \u003c times; i++, iPos +\u003d 8, oPos +\u003d 8) {\n          output[oPos + 0] ^\u003d tableLine[0xff \u0026 input[iPos + 0]];\n          output[oPos + 1] ^\u003d tableLine[0xff \u0026 input[iPos + 1]];\n          output[oPos + 2] ^\u003d tableLine[0xff \u0026 input[iPos + 2]];\n          output[oPos + 3] ^\u003d tableLine[0xff \u0026 input[iPos + 3]];\n          output[oPos + 4] ^\u003d tableLine[0xff \u0026 input[iPos + 4]];\n          output[oPos + 5] ^\u003d tableLine[0xff \u0026 input[iPos + 5]];\n          output[oPos + 6] ^\u003d tableLine[0xff \u0026 input[iPos + 6]];\n          output[oPos + 7] ^\u003d tableLine[0xff \u0026 input[iPos + 7]];\n        }\n\n        /**\n         * For the left bytes, do it one by one.\n         */\n        for (i \u003d extra; i \u003c dataLen; i++, iPos++, oPos++) {\n          output[oPos] ^\u003d tableLine[0xff \u0026 input[iPos]];\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/RSUtil2.java"
    }
  }
}