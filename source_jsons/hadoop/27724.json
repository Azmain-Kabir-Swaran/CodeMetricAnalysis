{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalityMulticastAMRMProxyPolicy.java",
  "functionName": "computeIntegerAssignment",
  "functionId": "computeIntegerAssignment___totalNum-int__weightsList-ArrayList__Float__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/amrmproxy/LocalityMulticastAMRMProxyPolicy.java",
  "functionStartLine": 389,
  "functionEndLine": 429,
  "numCommitsSeen": 11,
  "timeTaken": 1360,
  "changeHistory": [
    "13fcfb3d46ee7a0d606b4bb221d1cd66ef2a5a7c"
  ],
  "changeHistoryShort": {
    "13fcfb3d46ee7a0d606b4bb221d1cd66ef2a5a7c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "13fcfb3d46ee7a0d606b4bb221d1cd66ef2a5a7c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7317. Fix overallocation resulted from ceiling in LocalityMulticastAMRMProxyPolicy. (contributed by Botong Huang via curino)\n",
      "commitDate": "12/10/17 10:38 AM",
      "commitName": "13fcfb3d46ee7a0d606b4bb221d1cd66ef2a5a7c",
      "commitAuthor": "Carlo Curino",
      "diff": "@@ -0,0 +1,41 @@\n+  protected ArrayList\u003cInteger\u003e computeIntegerAssignment(int totalNum,\n+      ArrayList\u003cFloat\u003e weightsList) throws YarnException {\n+    int i, residue;\n+    ArrayList\u003cInteger\u003e ret \u003d new ArrayList\u003c\u003e();\n+    float totalWeight \u003d 0, totalNumFloat \u003d totalNum;\n+\n+    if (weightsList.size() \u003d\u003d 0) {\n+      return ret;\n+    }\n+    for (i \u003d 0; i \u003c weightsList.size(); i++) {\n+      ret.add(0);\n+      if (weightsList.get(i) \u003e 0) {\n+        totalWeight +\u003d weightsList.get(i);\n+      }\n+    }\n+    if (totalWeight \u003d\u003d 0) {\n+      StringBuilder sb \u003d new StringBuilder();\n+      for (Float weight : weightsList) {\n+        sb.append(weight + \", \");\n+      }\n+      throw new FederationPolicyException(\n+          \"No positive value found in weight array \" + sb.toString());\n+    }\n+\n+    // First pass, do flooring for all bins\n+    residue \u003d totalNum;\n+    for (i \u003d 0; i \u003c weightsList.size(); i++) {\n+      if (weightsList.get(i) \u003e 0) {\n+        int base \u003d (int) (totalNumFloat * weightsList.get(i) / totalWeight);\n+        ret.set(i, ret.get(i) + base);\n+        residue -\u003d base;\n+      }\n+    }\n+\n+    // By now residue \u003c weights.length, assign one a time\n+    for (i \u003d 0; i \u003c residue; i++) {\n+      int index \u003d FederationPolicyUtils.getWeightedRandom(weightsList);\n+      ret.set(index, ret.get(index) + 1);\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected ArrayList\u003cInteger\u003e computeIntegerAssignment(int totalNum,\n      ArrayList\u003cFloat\u003e weightsList) throws YarnException {\n    int i, residue;\n    ArrayList\u003cInteger\u003e ret \u003d new ArrayList\u003c\u003e();\n    float totalWeight \u003d 0, totalNumFloat \u003d totalNum;\n\n    if (weightsList.size() \u003d\u003d 0) {\n      return ret;\n    }\n    for (i \u003d 0; i \u003c weightsList.size(); i++) {\n      ret.add(0);\n      if (weightsList.get(i) \u003e 0) {\n        totalWeight +\u003d weightsList.get(i);\n      }\n    }\n    if (totalWeight \u003d\u003d 0) {\n      StringBuilder sb \u003d new StringBuilder();\n      for (Float weight : weightsList) {\n        sb.append(weight + \", \");\n      }\n      throw new FederationPolicyException(\n          \"No positive value found in weight array \" + sb.toString());\n    }\n\n    // First pass, do flooring for all bins\n    residue \u003d totalNum;\n    for (i \u003d 0; i \u003c weightsList.size(); i++) {\n      if (weightsList.get(i) \u003e 0) {\n        int base \u003d (int) (totalNumFloat * weightsList.get(i) / totalWeight);\n        ret.set(i, ret.get(i) + base);\n        residue -\u003d base;\n      }\n    }\n\n    // By now residue \u003c weights.length, assign one a time\n    for (i \u003d 0; i \u003c residue; i++) {\n      int index \u003d FederationPolicyUtils.getWeightedRandom(weightsList);\n      ret.set(index, ret.get(index) + 1);\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/amrmproxy/LocalityMulticastAMRMProxyPolicy.java"
    }
  }
}