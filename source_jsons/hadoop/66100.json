{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ChangeTracker.java",
  "functionName": "processResponse",
  "functionId": "processResponse___object-S3Object(modifiers-final)__operation-String(modifiers-final)__pos-long(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/impl/ChangeTracker.java",
  "functionStartLine": 172,
  "functionEndLine": 196,
  "numCommitsSeen": 4,
  "timeTaken": 1241,
  "changeHistory": [
    "a36274d69947648dbe82721220cc5240ec5d396d",
    "6fa229891e06eea62cb9634efde755f40247e816"
  ],
  "changeHistoryShort": {
    "a36274d69947648dbe82721220cc5240ec5d396d": "Ybodychange",
    "6fa229891e06eea62cb9634efde755f40247e816": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a36274d69947648dbe82721220cc5240ec5d396d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
      "commitDate": "19/05/19 2:29 PM",
      "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthor": "Ben Roling",
      "commitDateOld": "13/03/19 1:37 PM",
      "commitNameOld": "6fa229891e06eea62cb9634efde755f40247e816",
      "commitAuthorOld": "Ben Roling",
      "daysBetweenCommits": 67.04,
      "commitsBetweenForRepo": 400,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,25 @@\n   public void processResponse(final S3Object object,\n       final String operation,\n       final long pos) throws PathIOException {\n     if (object \u003d\u003d null) {\n       // no object returned. Either mismatch or something odd.\n       if (revisionId !\u003d null) {\n         // the requirements of the change detection policy wasn\u0027t met: the\n         // object was not returned.\n         versionMismatches.incrementAndGet();\n         throw new RemoteFileChangedException(uri, operation,\n-            String.format(\"%s change \"\n-                    + CHANGE_REPORTED_BY_S3\n-                    + \" while reading\"\n+            String.format(CHANGE_REPORTED_BY_S3\n+                    + \" during %s\"\n                     + \" at position %s.\"\n-                    + \" Version %s was unavailable\",\n-                getSource(),\n+                    + \" %s %s was unavailable\",\n+                operation,\n                 pos,\n+                getSource(),\n                 getRevisionId()));\n       } else {\n         throw new PathIOException(uri, \"No data returned from GET request\");\n       }\n     }\n \n-    final ObjectMetadata metadata \u003d object.getObjectMetadata();\n-    final String newRevisionId \u003d policy.getRevisionId(metadata, uri);\n-    if (newRevisionId \u003d\u003d null \u0026\u0026 policy.isRequireVersion()) {\n-      throw new NoVersionAttributeException(uri, String.format(\n-          \"Change detection policy requires %s\",\n-          policy.getSource()));\n-    }\n-    if (revisionId \u003d\u003d null) {\n-      // revisionId is null on first (re)open. Pin it so change can be detected\n-      // if object has been updated\n-      LOG.debug(\"Setting revision ID for object at {}: {}\",\n-          uri, newRevisionId);\n-      revisionId \u003d newRevisionId;\n-    } else if (!revisionId.equals(newRevisionId)) {\n-      LOG.debug(\"Revision ID changed from {} to {}\",\n-          revisionId, newRevisionId);\n-      ImmutablePair\u003cBoolean, RemoteFileChangedException\u003e pair \u003d\n-          policy.onChangeDetected(\n-              revisionId,\n-              newRevisionId,\n-              uri,\n-              pos,\n-              operation,\n-              versionMismatches.get());\n-      if (pair.left) {\n-        // an mismatch has occurred: note it.\n-        versionMismatches.incrementAndGet();\n-      }\n-      if (pair.right !\u003d null) {\n-        // there\u0027s an exception to raise: do it\n-        throw pair.right;\n-      }\n-    }\n+    processMetadata(object.getObjectMetadata(), operation);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void processResponse(final S3Object object,\n      final String operation,\n      final long pos) throws PathIOException {\n    if (object \u003d\u003d null) {\n      // no object returned. Either mismatch or something odd.\n      if (revisionId !\u003d null) {\n        // the requirements of the change detection policy wasn\u0027t met: the\n        // object was not returned.\n        versionMismatches.incrementAndGet();\n        throw new RemoteFileChangedException(uri, operation,\n            String.format(CHANGE_REPORTED_BY_S3\n                    + \" during %s\"\n                    + \" at position %s.\"\n                    + \" %s %s was unavailable\",\n                operation,\n                pos,\n                getSource(),\n                getRevisionId()));\n      } else {\n        throw new PathIOException(uri, \"No data returned from GET request\");\n      }\n    }\n\n    processMetadata(object.getObjectMetadata(), operation);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/impl/ChangeTracker.java",
      "extendedDetails": {}
    },
    "6fa229891e06eea62cb9634efde755f40247e816": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15625. S3A input stream to use etags/version number to detect changed source files.\n\nAuthor: Ben Roling \u003cben.roling@gmail.com\u003e\n\nInitial patch from Brahma Reddy Battula.\n",
      "commitDate": "13/03/19 1:37 PM",
      "commitName": "6fa229891e06eea62cb9634efde755f40247e816",
      "commitAuthor": "Ben Roling",
      "diff": "@@ -0,0 +1,57 @@\n+  public void processResponse(final S3Object object,\n+      final String operation,\n+      final long pos) throws PathIOException {\n+    if (object \u003d\u003d null) {\n+      // no object returned. Either mismatch or something odd.\n+      if (revisionId !\u003d null) {\n+        // the requirements of the change detection policy wasn\u0027t met: the\n+        // object was not returned.\n+        versionMismatches.incrementAndGet();\n+        throw new RemoteFileChangedException(uri, operation,\n+            String.format(\"%s change \"\n+                    + CHANGE_REPORTED_BY_S3\n+                    + \" while reading\"\n+                    + \" at position %s.\"\n+                    + \" Version %s was unavailable\",\n+                getSource(),\n+                pos,\n+                getRevisionId()));\n+      } else {\n+        throw new PathIOException(uri, \"No data returned from GET request\");\n+      }\n+    }\n+\n+    final ObjectMetadata metadata \u003d object.getObjectMetadata();\n+    final String newRevisionId \u003d policy.getRevisionId(metadata, uri);\n+    if (newRevisionId \u003d\u003d null \u0026\u0026 policy.isRequireVersion()) {\n+      throw new NoVersionAttributeException(uri, String.format(\n+          \"Change detection policy requires %s\",\n+          policy.getSource()));\n+    }\n+    if (revisionId \u003d\u003d null) {\n+      // revisionId is null on first (re)open. Pin it so change can be detected\n+      // if object has been updated\n+      LOG.debug(\"Setting revision ID for object at {}: {}\",\n+          uri, newRevisionId);\n+      revisionId \u003d newRevisionId;\n+    } else if (!revisionId.equals(newRevisionId)) {\n+      LOG.debug(\"Revision ID changed from {} to {}\",\n+          revisionId, newRevisionId);\n+      ImmutablePair\u003cBoolean, RemoteFileChangedException\u003e pair \u003d\n+          policy.onChangeDetected(\n+              revisionId,\n+              newRevisionId,\n+              uri,\n+              pos,\n+              operation,\n+              versionMismatches.get());\n+      if (pair.left) {\n+        // an mismatch has occurred: note it.\n+        versionMismatches.incrementAndGet();\n+      }\n+      if (pair.right !\u003d null) {\n+        // there\u0027s an exception to raise: do it\n+        throw pair.right;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void processResponse(final S3Object object,\n      final String operation,\n      final long pos) throws PathIOException {\n    if (object \u003d\u003d null) {\n      // no object returned. Either mismatch or something odd.\n      if (revisionId !\u003d null) {\n        // the requirements of the change detection policy wasn\u0027t met: the\n        // object was not returned.\n        versionMismatches.incrementAndGet();\n        throw new RemoteFileChangedException(uri, operation,\n            String.format(\"%s change \"\n                    + CHANGE_REPORTED_BY_S3\n                    + \" while reading\"\n                    + \" at position %s.\"\n                    + \" Version %s was unavailable\",\n                getSource(),\n                pos,\n                getRevisionId()));\n      } else {\n        throw new PathIOException(uri, \"No data returned from GET request\");\n      }\n    }\n\n    final ObjectMetadata metadata \u003d object.getObjectMetadata();\n    final String newRevisionId \u003d policy.getRevisionId(metadata, uri);\n    if (newRevisionId \u003d\u003d null \u0026\u0026 policy.isRequireVersion()) {\n      throw new NoVersionAttributeException(uri, String.format(\n          \"Change detection policy requires %s\",\n          policy.getSource()));\n    }\n    if (revisionId \u003d\u003d null) {\n      // revisionId is null on first (re)open. Pin it so change can be detected\n      // if object has been updated\n      LOG.debug(\"Setting revision ID for object at {}: {}\",\n          uri, newRevisionId);\n      revisionId \u003d newRevisionId;\n    } else if (!revisionId.equals(newRevisionId)) {\n      LOG.debug(\"Revision ID changed from {} to {}\",\n          revisionId, newRevisionId);\n      ImmutablePair\u003cBoolean, RemoteFileChangedException\u003e pair \u003d\n          policy.onChangeDetected(\n              revisionId,\n              newRevisionId,\n              uri,\n              pos,\n              operation,\n              versionMismatches.get());\n      if (pair.left) {\n        // an mismatch has occurred: note it.\n        versionMismatches.incrementAndGet();\n      }\n      if (pair.right !\u003d null) {\n        // there\u0027s an exception to raise: do it\n        throw pair.right;\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/impl/ChangeTracker.java"
    }
  }
}