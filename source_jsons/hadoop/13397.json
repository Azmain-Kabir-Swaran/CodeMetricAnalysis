{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ErasureCodingWork.java",
  "functionName": "addTaskToDatanode",
  "functionId": "addTaskToDatanode___numberReplicas-NumberReplicas",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/ErasureCodingWork.java",
  "functionStartLine": 128,
  "functionEndLine": 152,
  "numCommitsSeen": 18,
  "timeTaken": 1685,
  "changeHistory": [
    "b61fb267b92b2736920b4bd0c673d31e7632ebb9",
    "743a99f2dbc9a27e19f92ff3551937d90dba2e89",
    "408f2c807bbaaaa37ce1b69a5dfa9d76ed427d6e",
    "e54cc2931262bf49682a8323da9811976218c03b"
  ],
  "changeHistoryShort": {
    "b61fb267b92b2736920b4bd0c673d31e7632ebb9": "Ybodychange",
    "743a99f2dbc9a27e19f92ff3551937d90dba2e89": "Ymultichange(Yparameterchange,Ybodychange)",
    "408f2c807bbaaaa37ce1b69a5dfa9d76ed427d6e": "Ybodychange",
    "e54cc2931262bf49682a8323da9811976218c03b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b61fb267b92b2736920b4bd0c673d31e7632ebb9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9390. Block management for maintenance states.\n",
      "commitDate": "17/10/16 5:45 PM",
      "commitName": "b61fb267b92b2736920b4bd0c673d31e7632ebb9",
      "commitAuthor": "Ming Ma",
      "commitDateOld": "27/04/16 2:22 PM",
      "commitNameOld": "0a152103f19a3e8e1b7f33aeb9dd115ba231d7b7",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 173.14,
      "commitsBetweenForRepo": 1270,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n   void addTaskToDatanode(NumberReplicas numberReplicas) {\n     final DatanodeStorageInfo[] targets \u003d getTargets();\n     assert targets.length \u003e 0;\n     BlockInfoStriped stripedBlk \u003d (BlockInfoStriped) getBlock();\n \n     if (hasNotEnoughRack()) {\n       // if we already have all the internal blocks, but not enough racks,\n       // we only need to replicate one internal block to a new rack\n       int sourceIndex \u003d chooseSource4SimpleReplication();\n       createReplicationWork(sourceIndex, targets[0]);\n-    } else if (numberReplicas.decommissioning() \u003e 0 \u0026\u0026 hasAllInternalBlocks()) {\n-      List\u003cInteger\u003e decommissioningSources \u003d findDecommissioningSources();\n+    } else if ((numberReplicas.decommissioning() \u003e 0 ||\n+        numberReplicas.liveEnteringMaintenanceReplicas() \u003e 0) \u0026\u0026\n+        hasAllInternalBlocks()) {\n+      List\u003cInteger\u003e leavingServiceSources \u003d findLeavingServiceSources();\n       // decommissioningSources.size() should be \u003e\u003d targets.length\n-      final int num \u003d Math.min(decommissioningSources.size(), targets.length);\n+      final int num \u003d Math.min(leavingServiceSources.size(), targets.length);\n       for (int i \u003d 0; i \u003c num; i++) {\n-        createReplicationWork(decommissioningSources.get(i), targets[i]);\n+        createReplicationWork(leavingServiceSources.get(i), targets[i]);\n       }\n     } else {\n       targets[0].getDatanodeDescriptor().addBlockToBeErasureCoded(\n           new ExtendedBlock(blockPoolId, stripedBlk), getSrcNodes(), targets,\n           getLiveBlockIndicies(), stripedBlk.getErasureCodingPolicy());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void addTaskToDatanode(NumberReplicas numberReplicas) {\n    final DatanodeStorageInfo[] targets \u003d getTargets();\n    assert targets.length \u003e 0;\n    BlockInfoStriped stripedBlk \u003d (BlockInfoStriped) getBlock();\n\n    if (hasNotEnoughRack()) {\n      // if we already have all the internal blocks, but not enough racks,\n      // we only need to replicate one internal block to a new rack\n      int sourceIndex \u003d chooseSource4SimpleReplication();\n      createReplicationWork(sourceIndex, targets[0]);\n    } else if ((numberReplicas.decommissioning() \u003e 0 ||\n        numberReplicas.liveEnteringMaintenanceReplicas() \u003e 0) \u0026\u0026\n        hasAllInternalBlocks()) {\n      List\u003cInteger\u003e leavingServiceSources \u003d findLeavingServiceSources();\n      // decommissioningSources.size() should be \u003e\u003d targets.length\n      final int num \u003d Math.min(leavingServiceSources.size(), targets.length);\n      for (int i \u003d 0; i \u003c num; i++) {\n        createReplicationWork(leavingServiceSources.get(i), targets[i]);\n      }\n    } else {\n      targets[0].getDatanodeDescriptor().addBlockToBeErasureCoded(\n          new ExtendedBlock(blockPoolId, stripedBlk), getSrcNodes(), targets,\n          getLiveBlockIndicies(), stripedBlk.getErasureCodingPolicy());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/ErasureCodingWork.java",
      "extendedDetails": {}
    },
    "743a99f2dbc9a27e19f92ff3551937d90dba2e89": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8786. Erasure coding: use simple replication for internal blocks on decommissioning datanodes. Contributed by Rakesh R.\n",
      "commitDate": "08/03/16 10:24 AM",
      "commitName": "743a99f2dbc9a27e19f92ff3551937d90dba2e89",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8786. Erasure coding: use simple replication for internal blocks on decommissioning datanodes. Contributed by Rakesh R.\n",
          "commitDate": "08/03/16 10:24 AM",
          "commitName": "743a99f2dbc9a27e19f92ff3551937d90dba2e89",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "28/02/16 2:54 PM",
          "commitNameOld": "408f2c807bbaaaa37ce1b69a5dfa9d76ed427d6e",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 8.81,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,23 @@\n-  void addTaskToDatanode() {\n-    assert getTargets().length \u003e 0;\n+  void addTaskToDatanode(NumberReplicas numberReplicas) {\n+    final DatanodeStorageInfo[] targets \u003d getTargets();\n+    assert targets.length \u003e 0;\n     BlockInfoStriped stripedBlk \u003d (BlockInfoStriped) getBlock();\n \n-    // if we already have all the internal blocks, but not enough racks,\n-    // we only need to replicate one internal block to a new rack\n-    if (hasAllInternalBlocks()) {\n+    if (hasNotEnoughRack()) {\n+      // if we already have all the internal blocks, but not enough racks,\n+      // we only need to replicate one internal block to a new rack\n       int sourceIndex \u003d chooseSource4SimpleReplication();\n-      final byte blockIndex \u003d liveBlockIndicies[sourceIndex];\n-      final DatanodeDescriptor source \u003d getSrcNodes()[sourceIndex];\n-      final long internBlkLen \u003d StripedBlockUtil.getInternalBlockLength(\n-          stripedBlk.getNumBytes(), stripedBlk.getCellSize(),\n-          stripedBlk.getDataBlockNum(), blockIndex);\n-      final Block targetBlk \u003d new Block(\n-          stripedBlk.getBlockId() + blockIndex, internBlkLen,\n-          stripedBlk.getGenerationStamp());\n-      source.addBlockToBeReplicated(targetBlk, getTargets());\n-      if (BlockManager.LOG.isDebugEnabled()) {\n-        BlockManager.LOG.debug(\"Add replication task from source {} to \" +\n-            \"targets {} for EC block {}\", source, Arrays.toString(getTargets()),\n-            targetBlk);\n+      createReplicationWork(sourceIndex, targets[0]);\n+    } else if (numberReplicas.decommissioning() \u003e 0 \u0026\u0026 hasAllInternalBlocks()) {\n+      List\u003cInteger\u003e decommissioningSources \u003d findDecommissioningSources();\n+      // decommissioningSources.size() should be \u003e\u003d targets.length\n+      final int num \u003d Math.min(decommissioningSources.size(), targets.length);\n+      for (int i \u003d 0; i \u003c num; i++) {\n+        createReplicationWork(decommissioningSources.get(i), targets[i]);\n       }\n     } else {\n-      getTargets()[0].getDatanodeDescriptor().addBlockToBeErasureCoded(\n-          new ExtendedBlock(blockPoolId, stripedBlk),\n-          getSrcNodes(), getTargets(), getLiveBlockIndicies(),\n-          stripedBlk.getErasureCodingPolicy());\n+      targets[0].getDatanodeDescriptor().addBlockToBeErasureCoded(\n+          new ExtendedBlock(blockPoolId, stripedBlk), getSrcNodes(), targets,\n+          getLiveBlockIndicies(), stripedBlk.getErasureCodingPolicy());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addTaskToDatanode(NumberReplicas numberReplicas) {\n    final DatanodeStorageInfo[] targets \u003d getTargets();\n    assert targets.length \u003e 0;\n    BlockInfoStriped stripedBlk \u003d (BlockInfoStriped) getBlock();\n\n    if (hasNotEnoughRack()) {\n      // if we already have all the internal blocks, but not enough racks,\n      // we only need to replicate one internal block to a new rack\n      int sourceIndex \u003d chooseSource4SimpleReplication();\n      createReplicationWork(sourceIndex, targets[0]);\n    } else if (numberReplicas.decommissioning() \u003e 0 \u0026\u0026 hasAllInternalBlocks()) {\n      List\u003cInteger\u003e decommissioningSources \u003d findDecommissioningSources();\n      // decommissioningSources.size() should be \u003e\u003d targets.length\n      final int num \u003d Math.min(decommissioningSources.size(), targets.length);\n      for (int i \u003d 0; i \u003c num; i++) {\n        createReplicationWork(decommissioningSources.get(i), targets[i]);\n      }\n    } else {\n      targets[0].getDatanodeDescriptor().addBlockToBeErasureCoded(\n          new ExtendedBlock(blockPoolId, stripedBlk), getSrcNodes(), targets,\n          getLiveBlockIndicies(), stripedBlk.getErasureCodingPolicy());\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/ErasureCodingWork.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[numberReplicas-NumberReplicas]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8786. Erasure coding: use simple replication for internal blocks on decommissioning datanodes. Contributed by Rakesh R.\n",
          "commitDate": "08/03/16 10:24 AM",
          "commitName": "743a99f2dbc9a27e19f92ff3551937d90dba2e89",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "28/02/16 2:54 PM",
          "commitNameOld": "408f2c807bbaaaa37ce1b69a5dfa9d76ed427d6e",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 8.81,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,23 @@\n-  void addTaskToDatanode() {\n-    assert getTargets().length \u003e 0;\n+  void addTaskToDatanode(NumberReplicas numberReplicas) {\n+    final DatanodeStorageInfo[] targets \u003d getTargets();\n+    assert targets.length \u003e 0;\n     BlockInfoStriped stripedBlk \u003d (BlockInfoStriped) getBlock();\n \n-    // if we already have all the internal blocks, but not enough racks,\n-    // we only need to replicate one internal block to a new rack\n-    if (hasAllInternalBlocks()) {\n+    if (hasNotEnoughRack()) {\n+      // if we already have all the internal blocks, but not enough racks,\n+      // we only need to replicate one internal block to a new rack\n       int sourceIndex \u003d chooseSource4SimpleReplication();\n-      final byte blockIndex \u003d liveBlockIndicies[sourceIndex];\n-      final DatanodeDescriptor source \u003d getSrcNodes()[sourceIndex];\n-      final long internBlkLen \u003d StripedBlockUtil.getInternalBlockLength(\n-          stripedBlk.getNumBytes(), stripedBlk.getCellSize(),\n-          stripedBlk.getDataBlockNum(), blockIndex);\n-      final Block targetBlk \u003d new Block(\n-          stripedBlk.getBlockId() + blockIndex, internBlkLen,\n-          stripedBlk.getGenerationStamp());\n-      source.addBlockToBeReplicated(targetBlk, getTargets());\n-      if (BlockManager.LOG.isDebugEnabled()) {\n-        BlockManager.LOG.debug(\"Add replication task from source {} to \" +\n-            \"targets {} for EC block {}\", source, Arrays.toString(getTargets()),\n-            targetBlk);\n+      createReplicationWork(sourceIndex, targets[0]);\n+    } else if (numberReplicas.decommissioning() \u003e 0 \u0026\u0026 hasAllInternalBlocks()) {\n+      List\u003cInteger\u003e decommissioningSources \u003d findDecommissioningSources();\n+      // decommissioningSources.size() should be \u003e\u003d targets.length\n+      final int num \u003d Math.min(decommissioningSources.size(), targets.length);\n+      for (int i \u003d 0; i \u003c num; i++) {\n+        createReplicationWork(decommissioningSources.get(i), targets[i]);\n       }\n     } else {\n-      getTargets()[0].getDatanodeDescriptor().addBlockToBeErasureCoded(\n-          new ExtendedBlock(blockPoolId, stripedBlk),\n-          getSrcNodes(), getTargets(), getLiveBlockIndicies(),\n-          stripedBlk.getErasureCodingPolicy());\n+      targets[0].getDatanodeDescriptor().addBlockToBeErasureCoded(\n+          new ExtendedBlock(blockPoolId, stripedBlk), getSrcNodes(), targets,\n+          getLiveBlockIndicies(), stripedBlk.getErasureCodingPolicy());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addTaskToDatanode(NumberReplicas numberReplicas) {\n    final DatanodeStorageInfo[] targets \u003d getTargets();\n    assert targets.length \u003e 0;\n    BlockInfoStriped stripedBlk \u003d (BlockInfoStriped) getBlock();\n\n    if (hasNotEnoughRack()) {\n      // if we already have all the internal blocks, but not enough racks,\n      // we only need to replicate one internal block to a new rack\n      int sourceIndex \u003d chooseSource4SimpleReplication();\n      createReplicationWork(sourceIndex, targets[0]);\n    } else if (numberReplicas.decommissioning() \u003e 0 \u0026\u0026 hasAllInternalBlocks()) {\n      List\u003cInteger\u003e decommissioningSources \u003d findDecommissioningSources();\n      // decommissioningSources.size() should be \u003e\u003d targets.length\n      final int num \u003d Math.min(decommissioningSources.size(), targets.length);\n      for (int i \u003d 0; i \u003c num; i++) {\n        createReplicationWork(decommissioningSources.get(i), targets[i]);\n      }\n    } else {\n      targets[0].getDatanodeDescriptor().addBlockToBeErasureCoded(\n          new ExtendedBlock(blockPoolId, stripedBlk), getSrcNodes(), targets,\n          getLiveBlockIndicies(), stripedBlk.getErasureCodingPolicy());\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/ErasureCodingWork.java",
          "extendedDetails": {}
        }
      ]
    },
    "408f2c807bbaaaa37ce1b69a5dfa9d76ed427d6e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9866. BlockManager#chooseExcessReplicasStriped may weaken rack fault tolerance. Contributed by Jing Zhao.\n",
      "commitDate": "28/02/16 2:54 PM",
      "commitName": "408f2c807bbaaaa37ce1b69a5dfa9d76ed427d6e",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "19/02/16 7:02 PM",
      "commitNameOld": "e54cc2931262bf49682a8323da9811976218c03b",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 8.83,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,29 @@\n   void addTaskToDatanode() {\n     assert getTargets().length \u003e 0;\n     BlockInfoStriped stripedBlk \u003d (BlockInfoStriped) getBlock();\n \n     // if we already have all the internal blocks, but not enough racks,\n     // we only need to replicate one internal block to a new rack\n     if (hasAllInternalBlocks()) {\n       int sourceIndex \u003d chooseSource4SimpleReplication();\n       final byte blockIndex \u003d liveBlockIndicies[sourceIndex];\n       final DatanodeDescriptor source \u003d getSrcNodes()[sourceIndex];\n       final long internBlkLen \u003d StripedBlockUtil.getInternalBlockLength(\n           stripedBlk.getNumBytes(), stripedBlk.getCellSize(),\n           stripedBlk.getDataBlockNum(), blockIndex);\n       final Block targetBlk \u003d new Block(\n           stripedBlk.getBlockId() + blockIndex, internBlkLen,\n           stripedBlk.getGenerationStamp());\n       source.addBlockToBeReplicated(targetBlk, getTargets());\n+      if (BlockManager.LOG.isDebugEnabled()) {\n+        BlockManager.LOG.debug(\"Add replication task from source {} to \" +\n+            \"targets {} for EC block {}\", source, Arrays.toString(getTargets()),\n+            targetBlk);\n+      }\n     } else {\n       getTargets()[0].getDatanodeDescriptor().addBlockToBeErasureCoded(\n           new ExtendedBlock(blockPoolId, stripedBlk),\n           getSrcNodes(), getTargets(), getLiveBlockIndicies(),\n           stripedBlk.getErasureCodingPolicy());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void addTaskToDatanode() {\n    assert getTargets().length \u003e 0;\n    BlockInfoStriped stripedBlk \u003d (BlockInfoStriped) getBlock();\n\n    // if we already have all the internal blocks, but not enough racks,\n    // we only need to replicate one internal block to a new rack\n    if (hasAllInternalBlocks()) {\n      int sourceIndex \u003d chooseSource4SimpleReplication();\n      final byte blockIndex \u003d liveBlockIndicies[sourceIndex];\n      final DatanodeDescriptor source \u003d getSrcNodes()[sourceIndex];\n      final long internBlkLen \u003d StripedBlockUtil.getInternalBlockLength(\n          stripedBlk.getNumBytes(), stripedBlk.getCellSize(),\n          stripedBlk.getDataBlockNum(), blockIndex);\n      final Block targetBlk \u003d new Block(\n          stripedBlk.getBlockId() + blockIndex, internBlkLen,\n          stripedBlk.getGenerationStamp());\n      source.addBlockToBeReplicated(targetBlk, getTargets());\n      if (BlockManager.LOG.isDebugEnabled()) {\n        BlockManager.LOG.debug(\"Add replication task from source {} to \" +\n            \"targets {} for EC block {}\", source, Arrays.toString(getTargets()),\n            targetBlk);\n      }\n    } else {\n      getTargets()[0].getDatanodeDescriptor().addBlockToBeErasureCoded(\n          new ExtendedBlock(blockPoolId, stripedBlk),\n          getSrcNodes(), getTargets(), getLiveBlockIndicies(),\n          stripedBlk.getErasureCodingPolicy());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/ErasureCodingWork.java",
      "extendedDetails": {}
    },
    "e54cc2931262bf49682a8323da9811976218c03b": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9818. Correctly handle EC reconstruction work caused by not enough racks. Contributed by Jing Zhao.\n",
      "commitDate": "19/02/16 7:02 PM",
      "commitName": "e54cc2931262bf49682a8323da9811976218c03b",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,24 @@\n+  void addTaskToDatanode() {\n+    assert getTargets().length \u003e 0;\n+    BlockInfoStriped stripedBlk \u003d (BlockInfoStriped) getBlock();\n+\n+    // if we already have all the internal blocks, but not enough racks,\n+    // we only need to replicate one internal block to a new rack\n+    if (hasAllInternalBlocks()) {\n+      int sourceIndex \u003d chooseSource4SimpleReplication();\n+      final byte blockIndex \u003d liveBlockIndicies[sourceIndex];\n+      final DatanodeDescriptor source \u003d getSrcNodes()[sourceIndex];\n+      final long internBlkLen \u003d StripedBlockUtil.getInternalBlockLength(\n+          stripedBlk.getNumBytes(), stripedBlk.getCellSize(),\n+          stripedBlk.getDataBlockNum(), blockIndex);\n+      final Block targetBlk \u003d new Block(\n+          stripedBlk.getBlockId() + blockIndex, internBlkLen,\n+          stripedBlk.getGenerationStamp());\n+      source.addBlockToBeReplicated(targetBlk, getTargets());\n+    } else {\n+      getTargets()[0].getDatanodeDescriptor().addBlockToBeErasureCoded(\n+          new ExtendedBlock(blockPoolId, stripedBlk),\n+          getSrcNodes(), getTargets(), getLiveBlockIndicies(),\n+          stripedBlk.getErasureCodingPolicy());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void addTaskToDatanode() {\n    assert getTargets().length \u003e 0;\n    BlockInfoStriped stripedBlk \u003d (BlockInfoStriped) getBlock();\n\n    // if we already have all the internal blocks, but not enough racks,\n    // we only need to replicate one internal block to a new rack\n    if (hasAllInternalBlocks()) {\n      int sourceIndex \u003d chooseSource4SimpleReplication();\n      final byte blockIndex \u003d liveBlockIndicies[sourceIndex];\n      final DatanodeDescriptor source \u003d getSrcNodes()[sourceIndex];\n      final long internBlkLen \u003d StripedBlockUtil.getInternalBlockLength(\n          stripedBlk.getNumBytes(), stripedBlk.getCellSize(),\n          stripedBlk.getDataBlockNum(), blockIndex);\n      final Block targetBlk \u003d new Block(\n          stripedBlk.getBlockId() + blockIndex, internBlkLen,\n          stripedBlk.getGenerationStamp());\n      source.addBlockToBeReplicated(targetBlk, getTargets());\n    } else {\n      getTargets()[0].getDatanodeDescriptor().addBlockToBeErasureCoded(\n          new ExtendedBlock(blockPoolId, stripedBlk),\n          getSrcNodes(), getTargets(), getLiveBlockIndicies(),\n          stripedBlk.getErasureCodingPolicy());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/ErasureCodingWork.java"
    }
  }
}