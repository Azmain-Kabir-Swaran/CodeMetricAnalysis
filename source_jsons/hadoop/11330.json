{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AvailableSpaceVolumeChoosingPolicy.java",
  "functionName": "setConf",
  "functionId": "setConf___conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/AvailableSpaceVolumeChoosingPolicy.java",
  "functionStartLine": 78,
  "functionEndLine": 101,
  "numCommitsSeen": 12,
  "timeTaken": 1983,
  "changeHistory": [
    "88cce32551e6d52fd1c5a5bfd6c41499bf6ab1ab",
    "3a23dc683c058d3a5262ae9dca2d1c8c588a6a3e",
    "0cd0f64656dbfff74cc4389785f39baf8be1e653",
    "3ad40e9dadd6469cc3fcbae01680a7c64a4262f7",
    "a9d515aed870535ea80500c6dac7612720774cda"
  ],
  "changeHistoryShort": {
    "88cce32551e6d52fd1c5a5bfd6c41499bf6ab1ab": "Ybodychange",
    "3a23dc683c058d3a5262ae9dca2d1c8c588a6a3e": "Ymodifierchange",
    "0cd0f64656dbfff74cc4389785f39baf8be1e653": "Ybodychange",
    "3ad40e9dadd6469cc3fcbae01680a7c64a4262f7": "Ybodychange",
    "a9d515aed870535ea80500c6dac7612720774cda": "Yintroduced"
  },
  "changeHistoryDetails": {
    "88cce32551e6d52fd1c5a5bfd6c41499bf6ab1ab": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9872. HDFS bytes-default configurations should accept multiple size units. Contributed by Yiqun Lin.\n",
      "commitDate": "19/10/18 10:38 AM",
      "commitName": "88cce32551e6d52fd1c5a5bfd6c41499bf6ab1ab",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/09/18 2:48 PM",
      "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 42.83,
      "commitsBetweenForRepo": 484,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public void setConf(Configuration conf) {\n-    balancedSpaceThreshold \u003d conf.getLong(\n+    balancedSpaceThreshold \u003d conf.getLongBytes(\n         DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_KEY,\n         DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_DEFAULT);\n     balancedPreferencePercent \u003d conf.getFloat(\n         DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY,\n         DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_DEFAULT);\n     \n     LOG.info(\"Available space volume choosing policy initialized: \" +\n         DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_KEY +\n         \" \u003d \" + balancedSpaceThreshold + \", \" +\n         DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n         \" \u003d \" + balancedPreferencePercent);\n \n     if (balancedPreferencePercent \u003e 1.0) {\n       LOG.warn(\"The value of \" + DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n                \" is greater than 1.0 but should be in the range 0.0 - 1.0\");\n     }\n \n     if (balancedPreferencePercent \u003c 0.5) {\n       LOG.warn(\"The value of \" + DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n                \" is less than 0.5 so volumes with less available disk space will receive more block allocations\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setConf(Configuration conf) {\n    balancedSpaceThreshold \u003d conf.getLongBytes(\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_KEY,\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_DEFAULT);\n    balancedPreferencePercent \u003d conf.getFloat(\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY,\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_DEFAULT);\n    \n    LOG.info(\"Available space volume choosing policy initialized: \" +\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_KEY +\n        \" \u003d \" + balancedSpaceThreshold + \", \" +\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n        \" \u003d \" + balancedPreferencePercent);\n\n    if (balancedPreferencePercent \u003e 1.0) {\n      LOG.warn(\"The value of \" + DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n               \" is greater than 1.0 but should be in the range 0.0 - 1.0\");\n    }\n\n    if (balancedPreferencePercent \u003c 0.5) {\n      LOG.warn(\"The value of \" + DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n               \" is less than 0.5 so volumes with less available disk space will receive more block allocations\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/AvailableSpaceVolumeChoosingPolicy.java",
      "extendedDetails": {}
    },
    "3a23dc683c058d3a5262ae9dca2d1c8c588a6a3e": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-9608. Disk IO imbalance in HDFS with heterogeneous storages. Contributed by Wei Zhou.\n",
      "commitDate": "17/02/16 11:29 AM",
      "commitName": "3a23dc683c058d3a5262ae9dca2d1c8c588a6a3e",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "27/08/14 9:47 PM",
      "commitNameOld": "eb448e14399e17f11b9e523e4050de245b9b0408",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 538.61,
      "commitsBetweenForRepo": 4373,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n-  public synchronized void setConf(Configuration conf) {\n+  public void setConf(Configuration conf) {\n     balancedSpaceThreshold \u003d conf.getLong(\n         DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_KEY,\n         DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_DEFAULT);\n     balancedPreferencePercent \u003d conf.getFloat(\n         DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY,\n         DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_DEFAULT);\n     \n     LOG.info(\"Available space volume choosing policy initialized: \" +\n         DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_KEY +\n         \" \u003d \" + balancedSpaceThreshold + \", \" +\n         DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n         \" \u003d \" + balancedPreferencePercent);\n \n     if (balancedPreferencePercent \u003e 1.0) {\n       LOG.warn(\"The value of \" + DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n                \" is greater than 1.0 but should be in the range 0.0 - 1.0\");\n     }\n \n     if (balancedPreferencePercent \u003c 0.5) {\n       LOG.warn(\"The value of \" + DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n                \" is less than 0.5 so volumes with less available disk space will receive more block allocations\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setConf(Configuration conf) {\n    balancedSpaceThreshold \u003d conf.getLong(\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_KEY,\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_DEFAULT);\n    balancedPreferencePercent \u003d conf.getFloat(\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY,\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_DEFAULT);\n    \n    LOG.info(\"Available space volume choosing policy initialized: \" +\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_KEY +\n        \" \u003d \" + balancedSpaceThreshold + \", \" +\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n        \" \u003d \" + balancedPreferencePercent);\n\n    if (balancedPreferencePercent \u003e 1.0) {\n      LOG.warn(\"The value of \" + DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n               \" is greater than 1.0 but should be in the range 0.0 - 1.0\");\n    }\n\n    if (balancedPreferencePercent \u003c 0.5) {\n      LOG.warn(\"The value of \" + DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n               \" is less than 0.5 so volumes with less available disk space will receive more block allocations\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/AvailableSpaceVolumeChoosingPolicy.java",
      "extendedDetails": {
        "oldValue": "[public, synchronized]",
        "newValue": "[public]"
      }
    },
    "0cd0f64656dbfff74cc4389785f39baf8be1e653": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4830. Typo in config settings for AvailableSpaceVolumeChoosingPolicy in hdfs-default.xml. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1483603 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/13 4:21 PM",
      "commitName": "0cd0f64656dbfff74cc4389785f39baf8be1e653",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "07/05/13 2:40 PM",
      "commitNameOld": "3ad40e9dadd6469cc3fcbae01680a7c64a4262f7",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 9.07,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public synchronized void setConf(Configuration conf) {\n     balancedSpaceThreshold \u003d conf.getLong(\n-        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_THRESHOLD_KEY,\n-        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_THRESHOLD_DEFAULT);\n+        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_KEY,\n+        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_DEFAULT);\n     balancedPreferencePercent \u003d conf.getFloat(\n-        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_KEY,\n-        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_DEFAULT);\n+        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY,\n+        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_DEFAULT);\n     \n     LOG.info(\"Available space volume choosing policy initialized: \" +\n-        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_THRESHOLD_KEY +\n+        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_KEY +\n         \" \u003d \" + balancedSpaceThreshold + \", \" +\n-        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_KEY +\n+        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n         \" \u003d \" + balancedPreferencePercent);\n \n     if (balancedPreferencePercent \u003e 1.0) {\n-      LOG.warn(\"The value of \" + DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_KEY +\n+      LOG.warn(\"The value of \" + DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n                \" is greater than 1.0 but should be in the range 0.0 - 1.0\");\n     }\n \n     if (balancedPreferencePercent \u003c 0.5) {\n-      LOG.warn(\"The value of \" + DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_KEY +\n+      LOG.warn(\"The value of \" + DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n                \" is less than 0.5 so volumes with less available disk space will receive more block allocations\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    balancedSpaceThreshold \u003d conf.getLong(\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_KEY,\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_DEFAULT);\n    balancedPreferencePercent \u003d conf.getFloat(\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY,\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_DEFAULT);\n    \n    LOG.info(\"Available space volume choosing policy initialized: \" +\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_THRESHOLD_KEY +\n        \" \u003d \" + balancedSpaceThreshold + \", \" +\n        DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n        \" \u003d \" + balancedPreferencePercent);\n\n    if (balancedPreferencePercent \u003e 1.0) {\n      LOG.warn(\"The value of \" + DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n               \" is greater than 1.0 but should be in the range 0.0 - 1.0\");\n    }\n\n    if (balancedPreferencePercent \u003c 0.5) {\n      LOG.warn(\"The value of \" + DFS_DATANODE_AVAILABLE_SPACE_VOLUME_CHOOSING_POLICY_BALANCED_SPACE_PREFERENCE_FRACTION_KEY +\n               \" is less than 0.5 so volumes with less available disk space will receive more block allocations\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/AvailableSpaceVolumeChoosingPolicy.java",
      "extendedDetails": {}
    },
    "3ad40e9dadd6469cc3fcbae01680a7c64a4262f7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4804. WARN when users set the block balanced preference percent below 0.5 or above 1.0. Contributed by Stephen Chu.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480098 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/05/13 2:40 PM",
      "commitName": "3ad40e9dadd6469cc3fcbae01680a7c64a4262f7",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "05/04/13 9:08 PM",
      "commitNameOld": "a9d515aed870535ea80500c6dac7612720774cda",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 31.73,
      "commitsBetweenForRepo": 166,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,24 @@\n   public synchronized void setConf(Configuration conf) {\n     balancedSpaceThreshold \u003d conf.getLong(\n         DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_THRESHOLD_KEY,\n         DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_THRESHOLD_DEFAULT);\n     balancedPreferencePercent \u003d conf.getFloat(\n         DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_KEY,\n         DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_DEFAULT);\n     \n     LOG.info(\"Available space volume choosing policy initialized: \" +\n         DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_THRESHOLD_KEY +\n         \" \u003d \" + balancedSpaceThreshold + \", \" +\n         DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_KEY +\n         \" \u003d \" + balancedPreferencePercent);\n+\n+    if (balancedPreferencePercent \u003e 1.0) {\n+      LOG.warn(\"The value of \" + DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_KEY +\n+               \" is greater than 1.0 but should be in the range 0.0 - 1.0\");\n+    }\n+\n+    if (balancedPreferencePercent \u003c 0.5) {\n+      LOG.warn(\"The value of \" + DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_KEY +\n+               \" is less than 0.5 so volumes with less available disk space will receive more block allocations\");\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    balancedSpaceThreshold \u003d conf.getLong(\n        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_THRESHOLD_KEY,\n        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_THRESHOLD_DEFAULT);\n    balancedPreferencePercent \u003d conf.getFloat(\n        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_KEY,\n        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_DEFAULT);\n    \n    LOG.info(\"Available space volume choosing policy initialized: \" +\n        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_THRESHOLD_KEY +\n        \" \u003d \" + balancedSpaceThreshold + \", \" +\n        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_KEY +\n        \" \u003d \" + balancedPreferencePercent);\n\n    if (balancedPreferencePercent \u003e 1.0) {\n      LOG.warn(\"The value of \" + DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_KEY +\n               \" is greater than 1.0 but should be in the range 0.0 - 1.0\");\n    }\n\n    if (balancedPreferencePercent \u003c 0.5) {\n      LOG.warn(\"The value of \" + DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_KEY +\n               \" is less than 0.5 so volumes with less available disk space will receive more block allocations\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/AvailableSpaceVolumeChoosingPolicy.java",
      "extendedDetails": {}
    },
    "a9d515aed870535ea80500c6dac7612720774cda": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-1804. Add a new block-volume device choosing policy that looks at free space. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1465183 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/04/13 9:08 PM",
      "commitName": "a9d515aed870535ea80500c6dac7612720774cda",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,14 @@\n+  public synchronized void setConf(Configuration conf) {\n+    balancedSpaceThreshold \u003d conf.getLong(\n+        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_THRESHOLD_KEY,\n+        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_THRESHOLD_DEFAULT);\n+    balancedPreferencePercent \u003d conf.getFloat(\n+        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_KEY,\n+        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_DEFAULT);\n+    \n+    LOG.info(\"Available space volume choosing policy initialized: \" +\n+        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_THRESHOLD_KEY +\n+        \" \u003d \" + balancedSpaceThreshold + \", \" +\n+        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_KEY +\n+        \" \u003d \" + balancedPreferencePercent);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    balancedSpaceThreshold \u003d conf.getLong(\n        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_THRESHOLD_KEY,\n        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_THRESHOLD_DEFAULT);\n    balancedPreferencePercent \u003d conf.getFloat(\n        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_KEY,\n        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_DEFAULT);\n    \n    LOG.info(\"Available space volume choosing policy initialized: \" +\n        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_THRESHOLD_KEY +\n        \" \u003d \" + balancedSpaceThreshold + \", \" +\n        DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_BALANCED_SPACE_PREFERENCE_PERCENT_KEY +\n        \" \u003d \" + balancedPreferencePercent);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/AvailableSpaceVolumeChoosingPolicy.java"
    }
  }
}