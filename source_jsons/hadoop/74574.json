{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Groups.java",
  "functionName": "reload",
  "functionId": "reload___key-String(modifiers-final)__oldValue-List__String__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
  "functionStartLine": 348,
  "functionEndLine": 380,
  "numCommitsSeen": 18,
  "timeTaken": 2192,
  "changeHistory": [
    "d7979079ea8c6514858b77a78f0119cffc178086",
    "162228e8db937d4bdb9cf61d15ed555f1c96368f",
    "dcd21d083ab2a66fc3ca3bfda03887461698b7b1",
    "9683eab0e1ee42c159cf678254c464d97bc3ff57"
  ],
  "changeHistoryShort": {
    "d7979079ea8c6514858b77a78f0119cffc178086": "Ybodychange",
    "162228e8db937d4bdb9cf61d15ed555f1c96368f": "Ybodychange",
    "dcd21d083ab2a66fc3ca3bfda03887461698b7b1": "Ybodychange",
    "9683eab0e1ee42c159cf678254c464d97bc3ff57": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d7979079ea8c6514858b77a78f0119cffc178086": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16210. Update guava to 27.0-jre in hadoop-project trunk. Contributed by Gabor Bota.\n",
      "commitDate": "03/04/19 11:59 AM",
      "commitName": "d7979079ea8c6514858b77a78f0119cffc178086",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "11/07/18 10:02 AM",
      "commitNameOld": "162228e8db937d4bdb9cf61d15ed555f1c96368f",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 266.08,
      "commitsBetweenForRepo": 2105,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     public ListenableFuture\u003cList\u003cString\u003e\u003e reload(final String key,\n                                                  List\u003cString\u003e oldValue)\n         throws Exception {\n       LOG.debug(\"GroupCacheLoader - reload (async).\");\n       if (!reloadGroupsInBackground) {\n         return super.reload(key, oldValue);\n       }\n \n       backgroundRefreshQueued.incrementAndGet();\n       ListenableFuture\u003cList\u003cString\u003e\u003e listenableFuture \u003d\n           executorService.submit(new Callable\u003cList\u003cString\u003e\u003e() {\n             @Override\n             public List\u003cString\u003e call() throws Exception {\n               backgroundRefreshQueued.decrementAndGet();\n               backgroundRefreshRunning.incrementAndGet();\n               List\u003cString\u003e results \u003d load(key);\n               return results;\n             }\n           });\n       Futures.addCallback(listenableFuture, new FutureCallback\u003cList\u003cString\u003e\u003e() {\n         @Override\n         public void onSuccess(List\u003cString\u003e result) {\n           backgroundRefreshSuccess.incrementAndGet();\n           backgroundRefreshRunning.decrementAndGet();\n         }\n         @Override\n         public void onFailure(Throwable t) {\n           backgroundRefreshException.incrementAndGet();\n           backgroundRefreshRunning.decrementAndGet();\n         }\n-      });\n+      }, MoreExecutors.directExecutor());\n       return listenableFuture;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public ListenableFuture\u003cList\u003cString\u003e\u003e reload(final String key,\n                                                 List\u003cString\u003e oldValue)\n        throws Exception {\n      LOG.debug(\"GroupCacheLoader - reload (async).\");\n      if (!reloadGroupsInBackground) {\n        return super.reload(key, oldValue);\n      }\n\n      backgroundRefreshQueued.incrementAndGet();\n      ListenableFuture\u003cList\u003cString\u003e\u003e listenableFuture \u003d\n          executorService.submit(new Callable\u003cList\u003cString\u003e\u003e() {\n            @Override\n            public List\u003cString\u003e call() throws Exception {\n              backgroundRefreshQueued.decrementAndGet();\n              backgroundRefreshRunning.incrementAndGet();\n              List\u003cString\u003e results \u003d load(key);\n              return results;\n            }\n          });\n      Futures.addCallback(listenableFuture, new FutureCallback\u003cList\u003cString\u003e\u003e() {\n        @Override\n        public void onSuccess(List\u003cString\u003e result) {\n          backgroundRefreshSuccess.incrementAndGet();\n          backgroundRefreshRunning.decrementAndGet();\n        }\n        @Override\n        public void onFailure(Throwable t) {\n          backgroundRefreshException.incrementAndGet();\n          backgroundRefreshRunning.decrementAndGet();\n        }\n      }, MoreExecutors.directExecutor());\n      return listenableFuture;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "162228e8db937d4bdb9cf61d15ed555f1c96368f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13723. Occasional \"Should be different group\" error in TestRefreshUserMappings#testGroupMappingRefresh. Contributed by Siyao Meng.\n",
      "commitDate": "11/07/18 10:02 AM",
      "commitName": "162228e8db937d4bdb9cf61d15ed555f1c96368f",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 358.52,
      "commitsBetweenForRepo": 3240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n     public ListenableFuture\u003cList\u003cString\u003e\u003e reload(final String key,\n                                                  List\u003cString\u003e oldValue)\n         throws Exception {\n+      LOG.debug(\"GroupCacheLoader - reload (async).\");\n       if (!reloadGroupsInBackground) {\n         return super.reload(key, oldValue);\n       }\n \n       backgroundRefreshQueued.incrementAndGet();\n       ListenableFuture\u003cList\u003cString\u003e\u003e listenableFuture \u003d\n           executorService.submit(new Callable\u003cList\u003cString\u003e\u003e() {\n             @Override\n             public List\u003cString\u003e call() throws Exception {\n               backgroundRefreshQueued.decrementAndGet();\n               backgroundRefreshRunning.incrementAndGet();\n               List\u003cString\u003e results \u003d load(key);\n               return results;\n             }\n           });\n       Futures.addCallback(listenableFuture, new FutureCallback\u003cList\u003cString\u003e\u003e() {\n         @Override\n         public void onSuccess(List\u003cString\u003e result) {\n           backgroundRefreshSuccess.incrementAndGet();\n           backgroundRefreshRunning.decrementAndGet();\n         }\n         @Override\n         public void onFailure(Throwable t) {\n           backgroundRefreshException.incrementAndGet();\n           backgroundRefreshRunning.decrementAndGet();\n         }\n       });\n       return listenableFuture;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public ListenableFuture\u003cList\u003cString\u003e\u003e reload(final String key,\n                                                 List\u003cString\u003e oldValue)\n        throws Exception {\n      LOG.debug(\"GroupCacheLoader - reload (async).\");\n      if (!reloadGroupsInBackground) {\n        return super.reload(key, oldValue);\n      }\n\n      backgroundRefreshQueued.incrementAndGet();\n      ListenableFuture\u003cList\u003cString\u003e\u003e listenableFuture \u003d\n          executorService.submit(new Callable\u003cList\u003cString\u003e\u003e() {\n            @Override\n            public List\u003cString\u003e call() throws Exception {\n              backgroundRefreshQueued.decrementAndGet();\n              backgroundRefreshRunning.incrementAndGet();\n              List\u003cString\u003e results \u003d load(key);\n              return results;\n            }\n          });\n      Futures.addCallback(listenableFuture, new FutureCallback\u003cList\u003cString\u003e\u003e() {\n        @Override\n        public void onSuccess(List\u003cString\u003e result) {\n          backgroundRefreshSuccess.incrementAndGet();\n          backgroundRefreshRunning.decrementAndGet();\n        }\n        @Override\n        public void onFailure(Throwable t) {\n          backgroundRefreshException.incrementAndGet();\n          backgroundRefreshRunning.decrementAndGet();\n        }\n      });\n      return listenableFuture;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "dcd21d083ab2a66fc3ca3bfda03887461698b7b1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13375. o.a.h.security.TestGroupsCaching.testBackgroundRefreshCounters seems flaky. (Contributed by Weiwei Yang)\n",
      "commitDate": "01/09/16 11:03 AM",
      "commitName": "dcd21d083ab2a66fc3ca3bfda03887461698b7b1",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "04/08/16 8:45 AM",
      "commitNameOld": "94225152399e6e89fa7b4cff6d17d33e544329a3",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 28.1,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n     public ListenableFuture\u003cList\u003cString\u003e\u003e reload(final String key,\n                                                  List\u003cString\u003e oldValue)\n         throws Exception {\n       if (!reloadGroupsInBackground) {\n         return super.reload(key, oldValue);\n       }\n \n       backgroundRefreshQueued.incrementAndGet();\n       ListenableFuture\u003cList\u003cString\u003e\u003e listenableFuture \u003d\n           executorService.submit(new Callable\u003cList\u003cString\u003e\u003e() {\n             @Override\n             public List\u003cString\u003e call() throws Exception {\n-              boolean success \u003d false;\n-              try {\n-                backgroundRefreshQueued.decrementAndGet();\n-                backgroundRefreshRunning.incrementAndGet();\n-                List\u003cString\u003e results \u003d load(key);\n-                success \u003d true;\n-                return results;\n-              } finally {\n-                backgroundRefreshRunning.decrementAndGet();\n-                if (success) {\n-                  backgroundRefreshSuccess.incrementAndGet();\n-                } else {\n-                  backgroundRefreshException.incrementAndGet();\n-                }\n-              }\n+              backgroundRefreshQueued.decrementAndGet();\n+              backgroundRefreshRunning.incrementAndGet();\n+              List\u003cString\u003e results \u003d load(key);\n+              return results;\n             }\n           });\n+      Futures.addCallback(listenableFuture, new FutureCallback\u003cList\u003cString\u003e\u003e() {\n+        @Override\n+        public void onSuccess(List\u003cString\u003e result) {\n+          backgroundRefreshSuccess.incrementAndGet();\n+          backgroundRefreshRunning.decrementAndGet();\n+        }\n+        @Override\n+        public void onFailure(Throwable t) {\n+          backgroundRefreshException.incrementAndGet();\n+          backgroundRefreshRunning.decrementAndGet();\n+        }\n+      });\n       return listenableFuture;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public ListenableFuture\u003cList\u003cString\u003e\u003e reload(final String key,\n                                                 List\u003cString\u003e oldValue)\n        throws Exception {\n      if (!reloadGroupsInBackground) {\n        return super.reload(key, oldValue);\n      }\n\n      backgroundRefreshQueued.incrementAndGet();\n      ListenableFuture\u003cList\u003cString\u003e\u003e listenableFuture \u003d\n          executorService.submit(new Callable\u003cList\u003cString\u003e\u003e() {\n            @Override\n            public List\u003cString\u003e call() throws Exception {\n              backgroundRefreshQueued.decrementAndGet();\n              backgroundRefreshRunning.incrementAndGet();\n              List\u003cString\u003e results \u003d load(key);\n              return results;\n            }\n          });\n      Futures.addCallback(listenableFuture, new FutureCallback\u003cList\u003cString\u003e\u003e() {\n        @Override\n        public void onSuccess(List\u003cString\u003e result) {\n          backgroundRefreshSuccess.incrementAndGet();\n          backgroundRefreshRunning.decrementAndGet();\n        }\n        @Override\n        public void onFailure(Throwable t) {\n          backgroundRefreshException.incrementAndGet();\n          backgroundRefreshRunning.decrementAndGet();\n        }\n      });\n      return listenableFuture;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "9683eab0e1ee42c159cf678254c464d97bc3ff57": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13263. Reload cached groups in background after expiry. (Contributed bt Stephen O\u0027Donnell)\n",
      "commitDate": "27/06/16 9:36 AM",
      "commitName": "9683eab0e1ee42c159cf678254c464d97bc3ff57",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,31 @@\n+    public ListenableFuture\u003cList\u003cString\u003e\u003e reload(final String key,\n+                                                 List\u003cString\u003e oldValue)\n+        throws Exception {\n+      if (!reloadGroupsInBackground) {\n+        return super.reload(key, oldValue);\n+      }\n+\n+      backgroundRefreshQueued.incrementAndGet();\n+      ListenableFuture\u003cList\u003cString\u003e\u003e listenableFuture \u003d\n+          executorService.submit(new Callable\u003cList\u003cString\u003e\u003e() {\n+            @Override\n+            public List\u003cString\u003e call() throws Exception {\n+              boolean success \u003d false;\n+              try {\n+                backgroundRefreshQueued.decrementAndGet();\n+                backgroundRefreshRunning.incrementAndGet();\n+                List\u003cString\u003e results \u003d load(key);\n+                success \u003d true;\n+                return results;\n+              } finally {\n+                backgroundRefreshRunning.decrementAndGet();\n+                if (success) {\n+                  backgroundRefreshSuccess.incrementAndGet();\n+                } else {\n+                  backgroundRefreshException.incrementAndGet();\n+                }\n+              }\n+            }\n+          });\n+      return listenableFuture;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public ListenableFuture\u003cList\u003cString\u003e\u003e reload(final String key,\n                                                 List\u003cString\u003e oldValue)\n        throws Exception {\n      if (!reloadGroupsInBackground) {\n        return super.reload(key, oldValue);\n      }\n\n      backgroundRefreshQueued.incrementAndGet();\n      ListenableFuture\u003cList\u003cString\u003e\u003e listenableFuture \u003d\n          executorService.submit(new Callable\u003cList\u003cString\u003e\u003e() {\n            @Override\n            public List\u003cString\u003e call() throws Exception {\n              boolean success \u003d false;\n              try {\n                backgroundRefreshQueued.decrementAndGet();\n                backgroundRefreshRunning.incrementAndGet();\n                List\u003cString\u003e results \u003d load(key);\n                success \u003d true;\n                return results;\n              } finally {\n                backgroundRefreshRunning.decrementAndGet();\n                if (success) {\n                  backgroundRefreshSuccess.incrementAndGet();\n                } else {\n                  backgroundRefreshException.incrementAndGet();\n                }\n              }\n            }\n          });\n      return listenableFuture;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java"
    }
  }
}