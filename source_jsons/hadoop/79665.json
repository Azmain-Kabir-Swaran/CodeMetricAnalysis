{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FTPFileSystem.java",
  "functionName": "getTransferMode",
  "functionId": "getTransferMode___conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
  "functionStartLine": 189,
  "functionEndLine": 209,
  "numCommitsSeen": 18,
  "timeTaken": 1018,
  "changeHistory": [
    "0a212a40fcbd12a11294bff7a31e7433111733c9"
  ],
  "changeHistoryShort": {
    "0a212a40fcbd12a11294bff7a31e7433111733c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0a212a40fcbd12a11294bff7a31e7433111733c9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13953. Make FTPFileSystem\u0027s data connection mode and transfer mode configurable. Contributed by Xiao Chen.\n",
      "commitDate": "09/01/17 3:18 PM",
      "commitName": "0a212a40fcbd12a11294bff7a31e7433111733c9",
      "commitAuthor": "Wei-Chiu Chuang",
      "diff": "@@ -0,0 +1,21 @@\n+  int getTransferMode(Configuration conf) {\n+    final String mode \u003d conf.get(FS_FTP_TRANSFER_MODE);\n+    // FTP default is STREAM_TRANSFER_MODE, but Hadoop FTPFS\u0027s default is\n+    // FTP.BLOCK_TRANSFER_MODE historically.\n+    int ret \u003d FTP.BLOCK_TRANSFER_MODE;\n+    if (mode \u003d\u003d null) {\n+      return ret;\n+    }\n+    final String upper \u003d mode.toUpperCase();\n+    if (upper.equals(\"STREAM_TRANSFER_MODE\")) {\n+      ret \u003d FTP.STREAM_TRANSFER_MODE;\n+    } else if (upper.equals(\"COMPRESSED_TRANSFER_MODE\")) {\n+      ret \u003d FTP.COMPRESSED_TRANSFER_MODE;\n+    } else {\n+      if (!upper.equals(\"BLOCK_TRANSFER_MODE\")) {\n+        LOG.warn(\"Cannot parse the value for \" + FS_FTP_TRANSFER_MODE + \": \"\n+            + mode + \". Using default.\");\n+      }\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  int getTransferMode(Configuration conf) {\n    final String mode \u003d conf.get(FS_FTP_TRANSFER_MODE);\n    // FTP default is STREAM_TRANSFER_MODE, but Hadoop FTPFS\u0027s default is\n    // FTP.BLOCK_TRANSFER_MODE historically.\n    int ret \u003d FTP.BLOCK_TRANSFER_MODE;\n    if (mode \u003d\u003d null) {\n      return ret;\n    }\n    final String upper \u003d mode.toUpperCase();\n    if (upper.equals(\"STREAM_TRANSFER_MODE\")) {\n      ret \u003d FTP.STREAM_TRANSFER_MODE;\n    } else if (upper.equals(\"COMPRESSED_TRANSFER_MODE\")) {\n      ret \u003d FTP.COMPRESSED_TRANSFER_MODE;\n    } else {\n      if (!upper.equals(\"BLOCK_TRANSFER_MODE\")) {\n        LOG.warn(\"Cannot parse the value for \" + FS_FTP_TRANSFER_MODE + \": \"\n            + mode + \". Using default.\");\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java"
    }
  }
}