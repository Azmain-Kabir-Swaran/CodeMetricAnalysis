{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceTrackerService.java",
  "functionName": "setAppCollectorsMapToResponse",
  "functionId": "setAppCollectorsMapToResponse___runningApps-List__ApplicationId____response-NodeHeartbeatResponse",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
  "functionStartLine": 766,
  "functionEndLine": 786,
  "numCommitsSeen": 232,
  "timeTaken": 4970,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "660413165aa25815bbba66ac2195b0ae17184844",
    "78b7e070d8009c78665a2baa64fe888788f53e69",
    "829cceebc0b4bcde2ee0d45c8366aa9fd5cb39e4",
    "5712b8f9fd1859fe046b482889239bd164ed7dab",
    "2188a07e5bea1da26bf679ca0ece26ab596d3438",
    "9b5636408005676ae580f8d929f8e912c27828e7"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "660413165aa25815bbba66ac2195b0ae17184844": "Ybodychange",
    "78b7e070d8009c78665a2baa64fe888788f53e69": "Ybodychange",
    "829cceebc0b4bcde2ee0d45c8366aa9fd5cb39e4": "Ymultichange(Yparameterchange,Ybodychange)",
    "5712b8f9fd1859fe046b482889239bd164ed7dab": "Ybodychange",
    "2188a07e5bea1da26bf679ca0ece26ab596d3438": "Ymultichange(Yrename,Ybodychange)",
    "9b5636408005676ae580f8d929f8e912c27828e7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,21 @@\n   private void setAppCollectorsMapToResponse(\n       List\u003cApplicationId\u003e runningApps, NodeHeartbeatResponse response) {\n     Map\u003cApplicationId, AppCollectorData\u003e liveAppCollectorsMap \u003d new\n         HashMap\u003c\u003e();\n     Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n     // Set collectors for all running apps on this node.\n     for (ApplicationId appId : runningApps) {\n       RMApp app \u003d rmApps.get(appId);\n       if (app !\u003d null) {\n         AppCollectorData appCollectorData \u003d rmApps.get(appId)\n             .getCollectorData();\n         if (appCollectorData !\u003d null) {\n           liveAppCollectorsMap.put(appId, appCollectorData);\n         } else {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Collector for applicaton: \" + appId +\n-                \" hasn\u0027t registered yet!\");\n-          }\n+          LOG.debug(\"Collector for applicaton: {} hasn\u0027t registered yet!\",\n+              appId);\n         }\n       }\n     }\n     response.setAppCollectors(liveAppCollectorsMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setAppCollectorsMapToResponse(\n      List\u003cApplicationId\u003e runningApps, NodeHeartbeatResponse response) {\n    Map\u003cApplicationId, AppCollectorData\u003e liveAppCollectorsMap \u003d new\n        HashMap\u003c\u003e();\n    Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n    // Set collectors for all running apps on this node.\n    for (ApplicationId appId : runningApps) {\n      RMApp app \u003d rmApps.get(appId);\n      if (app !\u003d null) {\n        AppCollectorData appCollectorData \u003d rmApps.get(appId)\n            .getCollectorData();\n        if (appCollectorData !\u003d null) {\n          liveAppCollectorsMap.put(appId, appCollectorData);\n        } else {\n          LOG.debug(\"Collector for applicaton: {} hasn\u0027t registered yet!\",\n              appId);\n        }\n      }\n    }\n    response.setAppCollectors(liveAppCollectorsMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "660413165aa25815bbba66ac2195b0ae17184844": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6801. NPE in RM while setting collectors map in NodeHeartbeatResponse. Contributed by Vrushali C.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "660413165aa25815bbba66ac2195b0ae17184844",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "092fead5d9875fb3760206bcdd76cdafec5e9481",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,23 @@\n   private void setAppCollectorsMapToResponse(\n       List\u003cApplicationId\u003e runningApps, NodeHeartbeatResponse response) {\n     Map\u003cApplicationId, AppCollectorData\u003e liveAppCollectorsMap \u003d new\n         HashMap\u003c\u003e();\n     Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n     // Set collectors for all running apps on this node.\n     for (ApplicationId appId : runningApps) {\n-      AppCollectorData appCollectorData \u003d rmApps.get(appId).getCollectorData();\n-      if (appCollectorData !\u003d null) {\n-        liveAppCollectorsMap.put(appId, appCollectorData);\n-      } else {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Collector for applicaton: \" + appId +\n-              \" hasn\u0027t registered yet!\");\n+      RMApp app \u003d rmApps.get(appId);\n+      if (app !\u003d null) {\n+        AppCollectorData appCollectorData \u003d rmApps.get(appId)\n+            .getCollectorData();\n+        if (appCollectorData !\u003d null) {\n+          liveAppCollectorsMap.put(appId, appCollectorData);\n+        } else {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Collector for applicaton: \" + appId +\n+                \" hasn\u0027t registered yet!\");\n+          }\n         }\n       }\n     }\n     response.setAppCollectors(liveAppCollectorsMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setAppCollectorsMapToResponse(\n      List\u003cApplicationId\u003e runningApps, NodeHeartbeatResponse response) {\n    Map\u003cApplicationId, AppCollectorData\u003e liveAppCollectorsMap \u003d new\n        HashMap\u003c\u003e();\n    Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n    // Set collectors for all running apps on this node.\n    for (ApplicationId appId : runningApps) {\n      RMApp app \u003d rmApps.get(appId);\n      if (app !\u003d null) {\n        AppCollectorData appCollectorData \u003d rmApps.get(appId)\n            .getCollectorData();\n        if (appCollectorData !\u003d null) {\n          liveAppCollectorsMap.put(appId, appCollectorData);\n        } else {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Collector for applicaton: \" + appId +\n                \" hasn\u0027t registered yet!\");\n          }\n        }\n      }\n    }\n    response.setAppCollectors(liveAppCollectorsMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "78b7e070d8009c78665a2baa64fe888788f53e69": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5638. Introduce a collector timestamp to uniquely identify collectors creation order in collector discovery. Contributed by Li Lu.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "78b7e070d8009c78665a2baa64fe888788f53e69",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "20/08/17 7:54 AM",
      "commitNameOld": "8410d862d3a72740f461ef91dddb5325955e1ca5",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 9.63,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   private void setAppCollectorsMapToResponse(\n       List\u003cApplicationId\u003e runningApps, NodeHeartbeatResponse response) {\n-    Map\u003cApplicationId, String\u003e liveAppCollectorsMap \u003d new\n-        HashMap\u003cApplicationId, String\u003e();\n+    Map\u003cApplicationId, AppCollectorData\u003e liveAppCollectorsMap \u003d new\n+        HashMap\u003c\u003e();\n     Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n     // Set collectors for all running apps on this node.\n     for (ApplicationId appId : runningApps) {\n-      String appCollectorAddr \u003d rmApps.get(appId).getCollectorAddr();\n-      if (appCollectorAddr !\u003d null) {\n-        liveAppCollectorsMap.put(appId, appCollectorAddr);\n+      AppCollectorData appCollectorData \u003d rmApps.get(appId).getCollectorData();\n+      if (appCollectorData !\u003d null) {\n+        liveAppCollectorsMap.put(appId, appCollectorData);\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Collector for applicaton: \" + appId +\n               \" hasn\u0027t registered yet!\");\n         }\n       }\n     }\n-    response.setAppCollectorsMap(liveAppCollectorsMap);\n+    response.setAppCollectors(liveAppCollectorsMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setAppCollectorsMapToResponse(\n      List\u003cApplicationId\u003e runningApps, NodeHeartbeatResponse response) {\n    Map\u003cApplicationId, AppCollectorData\u003e liveAppCollectorsMap \u003d new\n        HashMap\u003c\u003e();\n    Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n    // Set collectors for all running apps on this node.\n    for (ApplicationId appId : runningApps) {\n      AppCollectorData appCollectorData \u003d rmApps.get(appId).getCollectorData();\n      if (appCollectorData !\u003d null) {\n        liveAppCollectorsMap.put(appId, appCollectorData);\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Collector for applicaton: \" + appId +\n              \" hasn\u0027t registered yet!\");\n        }\n      }\n    }\n    response.setAppCollectors(liveAppCollectorsMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "829cceebc0b4bcde2ee0d45c8366aa9fd5cb39e4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3586. RM to only get back addresses of Collectors that NM needs to know.\n(Junping Du via Varun Saxena).\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "829cceebc0b4bcde2ee0d45c8366aa9fd5cb39e4",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3586. RM to only get back addresses of Collectors that NM needs to know.\n(Junping Du via Varun Saxena).\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "829cceebc0b4bcde2ee0d45c8366aa9fd5cb39e4",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
          "commitAuthorOld": "Li Lu",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,19 @@\n   private void setAppCollectorsMapToResponse(\n-      List\u003cApplicationId\u003e liveApps, NodeHeartbeatResponse response) {\n+      List\u003cApplicationId\u003e runningApps, NodeHeartbeatResponse response) {\n     Map\u003cApplicationId, String\u003e liveAppCollectorsMap \u003d new\n-        ConcurrentHashMap\u003cApplicationId, String\u003e();\n+        HashMap\u003cApplicationId, String\u003e();\n     Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n-    // Set collectors for all apps now.\n-    // TODO set collectors for only active apps running on NM (liveApps cannot be\n-    // used for this case)\n-    for (Map.Entry\u003cApplicationId, RMApp\u003e rmApp : rmApps.entrySet()) {\n-      ApplicationId appId \u003d rmApp.getKey();\n-      String appCollectorAddr \u003d rmApp.getValue().getCollectorAddr();\n+    // Set collectors for all running apps on this node.\n+    for (ApplicationId appId : runningApps) {\n+      String appCollectorAddr \u003d rmApps.get(appId).getCollectorAddr();\n       if (appCollectorAddr !\u003d null) {\n         liveAppCollectorsMap.put(appId, appCollectorAddr);\n+      } else {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Collector for applicaton: \" + appId +\n+              \" hasn\u0027t registered yet!\");\n+        }\n       }\n     }\n     response.setAppCollectorsMap(liveAppCollectorsMap);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setAppCollectorsMapToResponse(\n      List\u003cApplicationId\u003e runningApps, NodeHeartbeatResponse response) {\n    Map\u003cApplicationId, String\u003e liveAppCollectorsMap \u003d new\n        HashMap\u003cApplicationId, String\u003e();\n    Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n    // Set collectors for all running apps on this node.\n    for (ApplicationId appId : runningApps) {\n      String appCollectorAddr \u003d rmApps.get(appId).getCollectorAddr();\n      if (appCollectorAddr !\u003d null) {\n        liveAppCollectorsMap.put(appId, appCollectorAddr);\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Collector for applicaton: \" + appId +\n              \" hasn\u0027t registered yet!\");\n        }\n      }\n    }\n    response.setAppCollectorsMap(liveAppCollectorsMap);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {
            "oldValue": "[liveApps-List\u003cApplicationId\u003e, response-NodeHeartbeatResponse]",
            "newValue": "[runningApps-List\u003cApplicationId\u003e, response-NodeHeartbeatResponse]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3586. RM to only get back addresses of Collectors that NM needs to know.\n(Junping Du via Varun Saxena).\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "829cceebc0b4bcde2ee0d45c8366aa9fd5cb39e4",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
          "commitAuthorOld": "Li Lu",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,19 @@\n   private void setAppCollectorsMapToResponse(\n-      List\u003cApplicationId\u003e liveApps, NodeHeartbeatResponse response) {\n+      List\u003cApplicationId\u003e runningApps, NodeHeartbeatResponse response) {\n     Map\u003cApplicationId, String\u003e liveAppCollectorsMap \u003d new\n-        ConcurrentHashMap\u003cApplicationId, String\u003e();\n+        HashMap\u003cApplicationId, String\u003e();\n     Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n-    // Set collectors for all apps now.\n-    // TODO set collectors for only active apps running on NM (liveApps cannot be\n-    // used for this case)\n-    for (Map.Entry\u003cApplicationId, RMApp\u003e rmApp : rmApps.entrySet()) {\n-      ApplicationId appId \u003d rmApp.getKey();\n-      String appCollectorAddr \u003d rmApp.getValue().getCollectorAddr();\n+    // Set collectors for all running apps on this node.\n+    for (ApplicationId appId : runningApps) {\n+      String appCollectorAddr \u003d rmApps.get(appId).getCollectorAddr();\n       if (appCollectorAddr !\u003d null) {\n         liveAppCollectorsMap.put(appId, appCollectorAddr);\n+      } else {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Collector for applicaton: \" + appId +\n+              \" hasn\u0027t registered yet!\");\n+        }\n       }\n     }\n     response.setAppCollectorsMap(liveAppCollectorsMap);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setAppCollectorsMapToResponse(\n      List\u003cApplicationId\u003e runningApps, NodeHeartbeatResponse response) {\n    Map\u003cApplicationId, String\u003e liveAppCollectorsMap \u003d new\n        HashMap\u003cApplicationId, String\u003e();\n    Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n    // Set collectors for all running apps on this node.\n    for (ApplicationId appId : runningApps) {\n      String appCollectorAddr \u003d rmApps.get(appId).getCollectorAddr();\n      if (appCollectorAddr !\u003d null) {\n        liveAppCollectorsMap.put(appId, appCollectorAddr);\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Collector for applicaton: \" + appId +\n              \" hasn\u0027t registered yet!\");\n        }\n      }\n    }\n    response.setAppCollectorsMap(liveAppCollectorsMap);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {}
        }
      ]
    },
    "5712b8f9fd1859fe046b482889239bd164ed7dab": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3334. NM uses timeline client to publish container metrics to new timeline service. Contributed by Junping Du.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "5712b8f9fd1859fe046b482889239bd164ed7dab",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,17 @@\n   private void setAppCollectorsMapToResponse(\n       List\u003cApplicationId\u003e liveApps, NodeHeartbeatResponse response) {\n     Map\u003cApplicationId, String\u003e liveAppCollectorsMap \u003d new\n         ConcurrentHashMap\u003cApplicationId, String\u003e();\n     Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n-      for (ApplicationId appId : liveApps) {\n-        String appCollectorAddr \u003d rmApps.get(appId).getCollectorAddr();\n-        if (appCollectorAddr !\u003d null) {\n-          liveAppCollectorsMap.put(appId, appCollectorAddr);\n-        } else {\n-          // Log a debug info if collector address is not found.\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Collector for applicaton: \" + appId +\n-                \" hasn\u0027t registered yet!\");\n-          }\n-        }\n+    // Set collectors for all apps now.\n+    // TODO set collectors for only active apps running on NM (liveApps cannot be\n+    // used for this case)\n+    for (Map.Entry\u003cApplicationId, RMApp\u003e rmApp : rmApps.entrySet()) {\n+      ApplicationId appId \u003d rmApp.getKey();\n+      String appCollectorAddr \u003d rmApp.getValue().getCollectorAddr();\n+      if (appCollectorAddr !\u003d null) {\n+        liveAppCollectorsMap.put(appId, appCollectorAddr);\n       }\n+    }\n     response.setAppCollectorsMap(liveAppCollectorsMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setAppCollectorsMapToResponse(\n      List\u003cApplicationId\u003e liveApps, NodeHeartbeatResponse response) {\n    Map\u003cApplicationId, String\u003e liveAppCollectorsMap \u003d new\n        ConcurrentHashMap\u003cApplicationId, String\u003e();\n    Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n    // Set collectors for all apps now.\n    // TODO set collectors for only active apps running on NM (liveApps cannot be\n    // used for this case)\n    for (Map.Entry\u003cApplicationId, RMApp\u003e rmApp : rmApps.entrySet()) {\n      ApplicationId appId \u003d rmApp.getKey();\n      String appCollectorAddr \u003d rmApp.getValue().getCollectorAddr();\n      if (appCollectorAddr !\u003d null) {\n        liveAppCollectorsMap.put(appId, appCollectorAddr);\n      }\n    }\n    response.setAppCollectorsMap(liveAppCollectorsMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "2188a07e5bea1da26bf679ca0ece26ab596d3438": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9b5636408005676ae580f8d929f8e912c27828e7",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-  private void setAppAggregatorsMapToResponse(\n+  private void setAppCollectorsMapToResponse(\n       List\u003cApplicationId\u003e liveApps, NodeHeartbeatResponse response) {\n-    Map\u003cApplicationId, String\u003e liveAppAggregatorsMap \u003d new \n+    Map\u003cApplicationId, String\u003e liveAppCollectorsMap \u003d new\n         ConcurrentHashMap\u003cApplicationId, String\u003e();\n     Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n       for (ApplicationId appId : liveApps) {\n-        String appAggregatorAddr \u003d rmApps.get(appId).getAggregatorAddr();\n-        if (appAggregatorAddr !\u003d null) {\n-          liveAppAggregatorsMap.put(appId, appAggregatorAddr);\n+        String appCollectorAddr \u003d rmApps.get(appId).getCollectorAddr();\n+        if (appCollectorAddr !\u003d null) {\n+          liveAppCollectorsMap.put(appId, appCollectorAddr);\n         } else {\n-          // Log a debug info if aggregator address is not found.\n+          // Log a debug info if collector address is not found.\n           if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Aggregator for applicaton: \" + appId + \" hasn\u0027t registered yet!\");\n+            LOG.debug(\"Collector for applicaton: \" + appId +\n+                \" hasn\u0027t registered yet!\");\n           }\n         }\n       }\n-    response.setAppAggregatorsMap(liveAppAggregatorsMap);\n+    response.setAppCollectorsMap(liveAppCollectorsMap);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setAppCollectorsMapToResponse(\n      List\u003cApplicationId\u003e liveApps, NodeHeartbeatResponse response) {\n    Map\u003cApplicationId, String\u003e liveAppCollectorsMap \u003d new\n        ConcurrentHashMap\u003cApplicationId, String\u003e();\n    Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n      for (ApplicationId appId : liveApps) {\n        String appCollectorAddr \u003d rmApps.get(appId).getCollectorAddr();\n        if (appCollectorAddr !\u003d null) {\n          liveAppCollectorsMap.put(appId, appCollectorAddr);\n        } else {\n          // Log a debug info if collector address is not found.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Collector for applicaton: \" + appId +\n                \" hasn\u0027t registered yet!\");\n          }\n        }\n      }\n    response.setAppCollectorsMap(liveAppCollectorsMap);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {
            "oldValue": "setAppAggregatorsMapToResponse",
            "newValue": "setAppCollectorsMapToResponse"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9b5636408005676ae580f8d929f8e912c27828e7",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-  private void setAppAggregatorsMapToResponse(\n+  private void setAppCollectorsMapToResponse(\n       List\u003cApplicationId\u003e liveApps, NodeHeartbeatResponse response) {\n-    Map\u003cApplicationId, String\u003e liveAppAggregatorsMap \u003d new \n+    Map\u003cApplicationId, String\u003e liveAppCollectorsMap \u003d new\n         ConcurrentHashMap\u003cApplicationId, String\u003e();\n     Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n       for (ApplicationId appId : liveApps) {\n-        String appAggregatorAddr \u003d rmApps.get(appId).getAggregatorAddr();\n-        if (appAggregatorAddr !\u003d null) {\n-          liveAppAggregatorsMap.put(appId, appAggregatorAddr);\n+        String appCollectorAddr \u003d rmApps.get(appId).getCollectorAddr();\n+        if (appCollectorAddr !\u003d null) {\n+          liveAppCollectorsMap.put(appId, appCollectorAddr);\n         } else {\n-          // Log a debug info if aggregator address is not found.\n+          // Log a debug info if collector address is not found.\n           if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Aggregator for applicaton: \" + appId + \" hasn\u0027t registered yet!\");\n+            LOG.debug(\"Collector for applicaton: \" + appId +\n+                \" hasn\u0027t registered yet!\");\n           }\n         }\n       }\n-    response.setAppAggregatorsMap(liveAppAggregatorsMap);\n+    response.setAppCollectorsMap(liveAppCollectorsMap);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setAppCollectorsMapToResponse(\n      List\u003cApplicationId\u003e liveApps, NodeHeartbeatResponse response) {\n    Map\u003cApplicationId, String\u003e liveAppCollectorsMap \u003d new\n        ConcurrentHashMap\u003cApplicationId, String\u003e();\n    Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n      for (ApplicationId appId : liveApps) {\n        String appCollectorAddr \u003d rmApps.get(appId).getCollectorAddr();\n        if (appCollectorAddr !\u003d null) {\n          liveAppCollectorsMap.put(appId, appCollectorAddr);\n        } else {\n          // Log a debug info if collector address is not found.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Collector for applicaton: \" + appId +\n                \" hasn\u0027t registered yet!\");\n          }\n        }\n      }\n    response.setAppCollectorsMap(liveAppCollectorsMap);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {}
        }
      ]
    },
    "9b5636408005676ae580f8d929f8e912c27828e7": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3039. Implemented the app-level timeline aggregator discovery service. Contributed by Junping Du.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9b5636408005676ae580f8d929f8e912c27828e7",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,18 @@\n+  private void setAppAggregatorsMapToResponse(\n+      List\u003cApplicationId\u003e liveApps, NodeHeartbeatResponse response) {\n+    Map\u003cApplicationId, String\u003e liveAppAggregatorsMap \u003d new \n+        ConcurrentHashMap\u003cApplicationId, String\u003e();\n+    Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n+      for (ApplicationId appId : liveApps) {\n+        String appAggregatorAddr \u003d rmApps.get(appId).getAggregatorAddr();\n+        if (appAggregatorAddr !\u003d null) {\n+          liveAppAggregatorsMap.put(appId, appAggregatorAddr);\n+        } else {\n+          // Log a debug info if aggregator address is not found.\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Aggregator for applicaton: \" + appId + \" hasn\u0027t registered yet!\");\n+          }\n+        }\n+      }\n+    response.setAppAggregatorsMap(liveAppAggregatorsMap);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void setAppAggregatorsMapToResponse(\n      List\u003cApplicationId\u003e liveApps, NodeHeartbeatResponse response) {\n    Map\u003cApplicationId, String\u003e liveAppAggregatorsMap \u003d new \n        ConcurrentHashMap\u003cApplicationId, String\u003e();\n    Map\u003cApplicationId, RMApp\u003e rmApps \u003d rmContext.getRMApps();\n      for (ApplicationId appId : liveApps) {\n        String appAggregatorAddr \u003d rmApps.get(appId).getAggregatorAddr();\n        if (appAggregatorAddr !\u003d null) {\n          liveAppAggregatorsMap.put(appId, appAggregatorAddr);\n        } else {\n          // Log a debug info if aggregator address is not found.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Aggregator for applicaton: \" + appId + \" hasn\u0027t registered yet!\");\n          }\n        }\n      }\n    response.setAppAggregatorsMap(liveAppAggregatorsMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java"
    }
  }
}