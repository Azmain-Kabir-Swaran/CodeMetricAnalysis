{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GenericExceptionHandler.java",
  "functionName": "toResponse",
  "functionId": "toResponse___e-Exception",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/GenericExceptionHandler.java",
  "functionStartLine": 54,
  "functionEndLine": 106,
  "numCommitsSeen": 8,
  "timeTaken": 1881,
  "changeHistory": [
    "56248f9d87fdf65df6103f52f47dc6e8b9969abc",
    "a6cd712ca7a3cae3fa8f63ab4e48116d8c94a705",
    "075ff276ca9e8c192717a50b0e18485afc8571a6",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "5f79f180f6e5fa938a50c52478cdf99bc6d55512",
    "0ea8570be578be60e2f32849900a1c50506d78d3"
  ],
  "changeHistoryShort": {
    "56248f9d87fdf65df6103f52f47dc6e8b9969abc": "Ybodychange",
    "a6cd712ca7a3cae3fa8f63ab4e48116d8c94a705": "Ybodychange",
    "075ff276ca9e8c192717a50b0e18485afc8571a6": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "5f79f180f6e5fa938a50c52478cdf99bc6d55512": "Ybodychange",
    "0ea8570be578be60e2f32849900a1c50506d78d3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "56248f9d87fdf65df6103f52f47dc6e8b9969abc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16556. Fix some alerts raised by LGTM.\n\nContributed by Malcolm Taylor.\n\nChange-Id: Ic60c3f4681dd9d48b3afcba7520bd1e4d3cc4231\n",
      "commitDate": "19/09/19 8:00 AM",
      "commitName": "56248f9d87fdf65df6103f52f47dc6e8b9969abc",
      "commitAuthor": "Malcolm Taylor",
      "commitDateOld": "03/03/19 11:59 PM",
      "commitNameOld": "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 199.29,
      "commitsBetweenForRepo": 1547,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,53 @@\n   public Response toResponse(Exception e) {\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"GOT EXCEPITION\", e);\n     }\n     // Don\u0027t catch this as filter forward on 404\n     // (ServletContainer.FEATURE_FILTER_FORWARD_ON_404)\n     // won\u0027t work and the web UI won\u0027t work!\n     if (e instanceof com.sun.jersey.api.NotFoundException) {\n       return ((com.sun.jersey.api.NotFoundException) e).getResponse();\n     }\n     // clear content type\n     response.setContentType(null);\n \n     // Convert exception\n     if (e instanceof RemoteException) {\n       e \u003d ((RemoteException) e).unwrapRemoteException();\n     }\n \n     // Map response status\n     final Response.Status s;\n     if (e instanceof SecurityException) {\n       s \u003d Response.Status.UNAUTHORIZED;\n     } else if (e instanceof AuthorizationException) {\n       s \u003d Response.Status.UNAUTHORIZED;\n     } else if (e instanceof FileNotFoundException) {\n       s \u003d Response.Status.NOT_FOUND;\n     } else if (e instanceof NotFoundException) {\n       s \u003d Response.Status.NOT_FOUND;\n     } else if (e instanceof IOException) {\n       s \u003d Response.Status.NOT_FOUND;\n     } else if (e instanceof ForbiddenException) {\n       s \u003d Response.Status.FORBIDDEN;\n     } else if (e instanceof UnsupportedOperationException) {\n       s \u003d Response.Status.BAD_REQUEST;\n     } else if (e instanceof IllegalArgumentException) {\n       s \u003d Response.Status.BAD_REQUEST;\n-    } else if (e instanceof NumberFormatException) {\n-      s \u003d Response.Status.BAD_REQUEST;\n     } else if (e instanceof BadRequestException) {\n       s \u003d Response.Status.BAD_REQUEST;\n     } else if (e instanceof WebApplicationException\n         \u0026\u0026 e.getCause() instanceof UnmarshalException) {\n       s \u003d Response.Status.BAD_REQUEST;\n     } else {\n       LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n       s \u003d Response.Status.INTERNAL_SERVER_ERROR;\n     }\n \n     // let jaxb handle marshalling data out in the same format requested\n     RemoteExceptionData exception \u003d new RemoteExceptionData(e.getClass().getSimpleName(),\n        e.getMessage(), e.getClass().getName());\n \n     return Response.status(s).entity(exception)\n         .build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response toResponse(Exception e) {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"GOT EXCEPITION\", e);\n    }\n    // Don\u0027t catch this as filter forward on 404\n    // (ServletContainer.FEATURE_FILTER_FORWARD_ON_404)\n    // won\u0027t work and the web UI won\u0027t work!\n    if (e instanceof com.sun.jersey.api.NotFoundException) {\n      return ((com.sun.jersey.api.NotFoundException) e).getResponse();\n    }\n    // clear content type\n    response.setContentType(null);\n\n    // Convert exception\n    if (e instanceof RemoteException) {\n      e \u003d ((RemoteException) e).unwrapRemoteException();\n    }\n\n    // Map response status\n    final Response.Status s;\n    if (e instanceof SecurityException) {\n      s \u003d Response.Status.UNAUTHORIZED;\n    } else if (e instanceof AuthorizationException) {\n      s \u003d Response.Status.UNAUTHORIZED;\n    } else if (e instanceof FileNotFoundException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof NotFoundException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof IOException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof ForbiddenException) {\n      s \u003d Response.Status.FORBIDDEN;\n    } else if (e instanceof UnsupportedOperationException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof IllegalArgumentException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof BadRequestException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof WebApplicationException\n        \u0026\u0026 e.getCause() instanceof UnmarshalException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else {\n      LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n      s \u003d Response.Status.INTERNAL_SERVER_ERROR;\n    }\n\n    // let jaxb handle marshalling data out in the same format requested\n    RemoteExceptionData exception \u003d new RemoteExceptionData(e.getClass().getSimpleName(),\n       e.getMessage(), e.getClass().getName());\n\n    return Response.status(s).entity(exception)\n        .build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/GenericExceptionHandler.java",
      "extendedDetails": {}
    },
    "a6cd712ca7a3cae3fa8f63ab4e48116d8c94a705": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2228. Augmented TimelineServer to load pseudo authentication filter when authentication \u003d simple. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610575 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/07/14 9:33 PM",
      "commitName": "a6cd712ca7a3cae3fa8f63ab4e48116d8c94a705",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "01/07/14 5:23 PM",
      "commitNameOld": "075ff276ca9e8c192717a50b0e18485afc8571a6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 13.17,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,55 @@\n   public Response toResponse(Exception e) {\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"GOT EXCEPITION\", e);\n     }\n     // Don\u0027t catch this as filter forward on 404\n     // (ServletContainer.FEATURE_FILTER_FORWARD_ON_404)\n     // won\u0027t work and the web UI won\u0027t work!\n     if (e instanceof com.sun.jersey.api.NotFoundException) {\n       return ((com.sun.jersey.api.NotFoundException) e).getResponse();\n     }\n     // clear content type\n     response.setContentType(null);\n \n     // Convert exception\n     if (e instanceof RemoteException) {\n       e \u003d ((RemoteException) e).unwrapRemoteException();\n     }\n \n     // Map response status\n     final Response.Status s;\n     if (e instanceof SecurityException) {\n       s \u003d Response.Status.UNAUTHORIZED;\n     } else if (e instanceof AuthorizationException) {\n       s \u003d Response.Status.UNAUTHORIZED;\n     } else if (e instanceof FileNotFoundException) {\n       s \u003d Response.Status.NOT_FOUND;\n     } else if (e instanceof NotFoundException) {\n       s \u003d Response.Status.NOT_FOUND;\n     } else if (e instanceof IOException) {\n       s \u003d Response.Status.NOT_FOUND;\n+    } else if (e instanceof ForbiddenException) {\n+      s \u003d Response.Status.FORBIDDEN;\n     } else if (e instanceof UnsupportedOperationException) {\n       s \u003d Response.Status.BAD_REQUEST;\n     } else if (e instanceof IllegalArgumentException) {\n       s \u003d Response.Status.BAD_REQUEST;\n     } else if (e instanceof NumberFormatException) {\n       s \u003d Response.Status.BAD_REQUEST;\n     } else if (e instanceof BadRequestException) {\n       s \u003d Response.Status.BAD_REQUEST;\n     } else if (e instanceof WebApplicationException\n         \u0026\u0026 e.getCause() instanceof UnmarshalException) {\n       s \u003d Response.Status.BAD_REQUEST;\n     } else {\n       LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n       s \u003d Response.Status.INTERNAL_SERVER_ERROR;\n     }\n \n     // let jaxb handle marshalling data out in the same format requested\n     RemoteExceptionData exception \u003d new RemoteExceptionData(e.getClass().getSimpleName(),\n        e.getMessage(), e.getClass().getName());\n \n     return Response.status(s).entity(exception)\n         .build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response toResponse(Exception e) {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"GOT EXCEPITION\", e);\n    }\n    // Don\u0027t catch this as filter forward on 404\n    // (ServletContainer.FEATURE_FILTER_FORWARD_ON_404)\n    // won\u0027t work and the web UI won\u0027t work!\n    if (e instanceof com.sun.jersey.api.NotFoundException) {\n      return ((com.sun.jersey.api.NotFoundException) e).getResponse();\n    }\n    // clear content type\n    response.setContentType(null);\n\n    // Convert exception\n    if (e instanceof RemoteException) {\n      e \u003d ((RemoteException) e).unwrapRemoteException();\n    }\n\n    // Map response status\n    final Response.Status s;\n    if (e instanceof SecurityException) {\n      s \u003d Response.Status.UNAUTHORIZED;\n    } else if (e instanceof AuthorizationException) {\n      s \u003d Response.Status.UNAUTHORIZED;\n    } else if (e instanceof FileNotFoundException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof NotFoundException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof IOException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof ForbiddenException) {\n      s \u003d Response.Status.FORBIDDEN;\n    } else if (e instanceof UnsupportedOperationException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof IllegalArgumentException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof NumberFormatException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof BadRequestException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof WebApplicationException\n        \u0026\u0026 e.getCause() instanceof UnmarshalException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else {\n      LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n      s \u003d Response.Status.INTERNAL_SERVER_ERROR;\n    }\n\n    // let jaxb handle marshalling data out in the same format requested\n    RemoteExceptionData exception \u003d new RemoteExceptionData(e.getClass().getSimpleName(),\n       e.getMessage(), e.getClass().getName());\n\n    return Response.status(s).entity(exception)\n        .build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/GenericExceptionHandler.java",
      "extendedDetails": {}
    },
    "075ff276ca9e8c192717a50b0e18485afc8571a6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1713. Added get-new-app and submit-app functionality to RM web services. Contributed by Varun Vasudev.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607216 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/07/14 5:23 PM",
      "commitName": "075ff276ca9e8c192717a50b0e18485afc8571a6",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/06/13 8:32 PM",
      "commitNameOld": "f5f8f3bca4eeaedeff8181812452ec363c4db744",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 379.87,
      "commitsBetweenForRepo": 2486,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,53 @@\n   public Response toResponse(Exception e) {\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"GOT EXCEPITION\", e);\n     }\n     // Don\u0027t catch this as filter forward on 404\n     // (ServletContainer.FEATURE_FILTER_FORWARD_ON_404)\n     // won\u0027t work and the web UI won\u0027t work!\n     if (e instanceof com.sun.jersey.api.NotFoundException) {\n       return ((com.sun.jersey.api.NotFoundException) e).getResponse();\n     }\n     // clear content type\n     response.setContentType(null);\n \n     // Convert exception\n     if (e instanceof RemoteException) {\n       e \u003d ((RemoteException) e).unwrapRemoteException();\n     }\n \n     // Map response status\n     final Response.Status s;\n     if (e instanceof SecurityException) {\n       s \u003d Response.Status.UNAUTHORIZED;\n     } else if (e instanceof AuthorizationException) {\n       s \u003d Response.Status.UNAUTHORIZED;\n     } else if (e instanceof FileNotFoundException) {\n       s \u003d Response.Status.NOT_FOUND;\n     } else if (e instanceof NotFoundException) {\n       s \u003d Response.Status.NOT_FOUND;\n     } else if (e instanceof IOException) {\n       s \u003d Response.Status.NOT_FOUND;\n     } else if (e instanceof UnsupportedOperationException) {\n       s \u003d Response.Status.BAD_REQUEST;\n     } else if (e instanceof IllegalArgumentException) {\n       s \u003d Response.Status.BAD_REQUEST;\n     } else if (e instanceof NumberFormatException) {\n       s \u003d Response.Status.BAD_REQUEST;\n     } else if (e instanceof BadRequestException) {\n       s \u003d Response.Status.BAD_REQUEST;\n+    } else if (e instanceof WebApplicationException\n+        \u0026\u0026 e.getCause() instanceof UnmarshalException) {\n+      s \u003d Response.Status.BAD_REQUEST;\n     } else {\n       LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n       s \u003d Response.Status.INTERNAL_SERVER_ERROR;\n     }\n \n     // let jaxb handle marshalling data out in the same format requested\n     RemoteExceptionData exception \u003d new RemoteExceptionData(e.getClass().getSimpleName(),\n        e.getMessage(), e.getClass().getName());\n \n     return Response.status(s).entity(exception)\n         .build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response toResponse(Exception e) {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"GOT EXCEPITION\", e);\n    }\n    // Don\u0027t catch this as filter forward on 404\n    // (ServletContainer.FEATURE_FILTER_FORWARD_ON_404)\n    // won\u0027t work and the web UI won\u0027t work!\n    if (e instanceof com.sun.jersey.api.NotFoundException) {\n      return ((com.sun.jersey.api.NotFoundException) e).getResponse();\n    }\n    // clear content type\n    response.setContentType(null);\n\n    // Convert exception\n    if (e instanceof RemoteException) {\n      e \u003d ((RemoteException) e).unwrapRemoteException();\n    }\n\n    // Map response status\n    final Response.Status s;\n    if (e instanceof SecurityException) {\n      s \u003d Response.Status.UNAUTHORIZED;\n    } else if (e instanceof AuthorizationException) {\n      s \u003d Response.Status.UNAUTHORIZED;\n    } else if (e instanceof FileNotFoundException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof NotFoundException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof IOException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof UnsupportedOperationException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof IllegalArgumentException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof NumberFormatException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof BadRequestException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof WebApplicationException\n        \u0026\u0026 e.getCause() instanceof UnmarshalException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else {\n      LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n      s \u003d Response.Status.INTERNAL_SERVER_ERROR;\n    }\n\n    // let jaxb handle marshalling data out in the same format requested\n    RemoteExceptionData exception \u003d new RemoteExceptionData(e.getClass().getSimpleName(),\n       e.getMessage(), e.getClass().getName());\n\n    return Response.status(s).entity(exception)\n        .build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/GenericExceptionHandler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Response toResponse(Exception e) {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"GOT EXCEPITION\", e);\n    }\n    // Don\u0027t catch this as filter forward on 404\n    // (ServletContainer.FEATURE_FILTER_FORWARD_ON_404)\n    // won\u0027t work and the web UI won\u0027t work!\n    if (e instanceof com.sun.jersey.api.NotFoundException) {\n      return ((com.sun.jersey.api.NotFoundException) e).getResponse();\n    }\n    // clear content type\n    response.setContentType(null);\n\n    // Convert exception\n    if (e instanceof RemoteException) {\n      e \u003d ((RemoteException) e).unwrapRemoteException();\n    }\n\n    // Map response status\n    final Response.Status s;\n    if (e instanceof SecurityException) {\n      s \u003d Response.Status.UNAUTHORIZED;\n    } else if (e instanceof AuthorizationException) {\n      s \u003d Response.Status.UNAUTHORIZED;\n    } else if (e instanceof FileNotFoundException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof NotFoundException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof IOException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof UnsupportedOperationException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof IllegalArgumentException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof NumberFormatException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof BadRequestException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else {\n      LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n      s \u003d Response.Status.INTERNAL_SERVER_ERROR;\n    }\n\n    // let jaxb handle marshalling data out in the same format requested\n    RemoteExceptionData exception \u003d new RemoteExceptionData(e.getClass().getSimpleName(),\n       e.getMessage(), e.getClass().getName());\n\n    return Response.status(s).entity(exception)\n        .build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/GenericExceptionHandler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/GenericExceptionHandler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/GenericExceptionHandler.java"
      }
    },
    "5f79f180f6e5fa938a50c52478cdf99bc6d55512": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3553. Add support for data returned when exceptions thrown from web  service apis to be in either xml or in JSON. (Thomas Graves via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1230330 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/01/12 3:59 PM",
      "commitName": "5f79f180f6e5fa938a50c52478cdf99bc6d55512",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "13/12/11 3:05 PM",
      "commitNameOld": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 29.04,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,50 @@\n   public Response toResponse(Exception e) {\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"GOT EXCEPITION\", e);\n     }\n     // Don\u0027t catch this as filter forward on 404\n     // (ServletContainer.FEATURE_FILTER_FORWARD_ON_404)\n     // won\u0027t work and the web UI won\u0027t work!\n     if (e instanceof com.sun.jersey.api.NotFoundException) {\n       return ((com.sun.jersey.api.NotFoundException) e).getResponse();\n     }\n     // clear content type\n     response.setContentType(null);\n \n     // Convert exception\n     if (e instanceof RemoteException) {\n       e \u003d ((RemoteException) e).unwrapRemoteException();\n     }\n \n     // Map response status\n     final Response.Status s;\n     if (e instanceof SecurityException) {\n       s \u003d Response.Status.UNAUTHORIZED;\n     } else if (e instanceof AuthorizationException) {\n       s \u003d Response.Status.UNAUTHORIZED;\n     } else if (e instanceof FileNotFoundException) {\n       s \u003d Response.Status.NOT_FOUND;\n     } else if (e instanceof NotFoundException) {\n       s \u003d Response.Status.NOT_FOUND;\n     } else if (e instanceof IOException) {\n       s \u003d Response.Status.NOT_FOUND;\n     } else if (e instanceof UnsupportedOperationException) {\n       s \u003d Response.Status.BAD_REQUEST;\n     } else if (e instanceof IllegalArgumentException) {\n       s \u003d Response.Status.BAD_REQUEST;\n     } else if (e instanceof NumberFormatException) {\n       s \u003d Response.Status.BAD_REQUEST;\n     } else if (e instanceof BadRequestException) {\n       s \u003d Response.Status.BAD_REQUEST;\n     } else {\n       LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n       s \u003d Response.Status.INTERNAL_SERVER_ERROR;\n     }\n \n-    // convert to json\n-    final Map\u003cString, Object\u003e m \u003d new TreeMap\u003cString, Object\u003e();\n-    m.put(\"exception\", e.getClass().getSimpleName());\n-    m.put(\"message\", e.getMessage());\n-    m.put(\"javaClassName\", e.getClass().getName());\n-    final Map\u003cString, Object\u003e m2 \u003d new TreeMap\u003cString, Object\u003e();\n-    m2.put(RemoteException.class.getSimpleName(), m);\n-    final String js \u003d JSON.toString(m2);\n+    // let jaxb handle marshalling data out in the same format requested\n+    RemoteExceptionData exception \u003d new RemoteExceptionData(e.getClass().getSimpleName(),\n+       e.getMessage(), e.getClass().getName());\n \n-    return Response.status(s).type(MediaType.APPLICATION_JSON).entity(js)\n+    return Response.status(s).entity(exception)\n         .build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response toResponse(Exception e) {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"GOT EXCEPITION\", e);\n    }\n    // Don\u0027t catch this as filter forward on 404\n    // (ServletContainer.FEATURE_FILTER_FORWARD_ON_404)\n    // won\u0027t work and the web UI won\u0027t work!\n    if (e instanceof com.sun.jersey.api.NotFoundException) {\n      return ((com.sun.jersey.api.NotFoundException) e).getResponse();\n    }\n    // clear content type\n    response.setContentType(null);\n\n    // Convert exception\n    if (e instanceof RemoteException) {\n      e \u003d ((RemoteException) e).unwrapRemoteException();\n    }\n\n    // Map response status\n    final Response.Status s;\n    if (e instanceof SecurityException) {\n      s \u003d Response.Status.UNAUTHORIZED;\n    } else if (e instanceof AuthorizationException) {\n      s \u003d Response.Status.UNAUTHORIZED;\n    } else if (e instanceof FileNotFoundException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof NotFoundException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof IOException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof UnsupportedOperationException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof IllegalArgumentException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof NumberFormatException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof BadRequestException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else {\n      LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n      s \u003d Response.Status.INTERNAL_SERVER_ERROR;\n    }\n\n    // let jaxb handle marshalling data out in the same format requested\n    RemoteExceptionData exception \u003d new RemoteExceptionData(e.getClass().getSimpleName(),\n       e.getMessage(), e.getClass().getName());\n\n    return Response.status(s).entity(exception)\n        .build();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/GenericExceptionHandler.java",
      "extendedDetails": {}
    },
    "0ea8570be578be60e2f32849900a1c50506d78d3": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2863. Support web services for YARN and MR components. (Thomas Graves via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213975 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 3:05 PM",
      "commitName": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,55 @@\n+  public Response toResponse(Exception e) {\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"GOT EXCEPITION\", e);\n+    }\n+    // Don\u0027t catch this as filter forward on 404\n+    // (ServletContainer.FEATURE_FILTER_FORWARD_ON_404)\n+    // won\u0027t work and the web UI won\u0027t work!\n+    if (e instanceof com.sun.jersey.api.NotFoundException) {\n+      return ((com.sun.jersey.api.NotFoundException) e).getResponse();\n+    }\n+    // clear content type\n+    response.setContentType(null);\n+\n+    // Convert exception\n+    if (e instanceof RemoteException) {\n+      e \u003d ((RemoteException) e).unwrapRemoteException();\n+    }\n+\n+    // Map response status\n+    final Response.Status s;\n+    if (e instanceof SecurityException) {\n+      s \u003d Response.Status.UNAUTHORIZED;\n+    } else if (e instanceof AuthorizationException) {\n+      s \u003d Response.Status.UNAUTHORIZED;\n+    } else if (e instanceof FileNotFoundException) {\n+      s \u003d Response.Status.NOT_FOUND;\n+    } else if (e instanceof NotFoundException) {\n+      s \u003d Response.Status.NOT_FOUND;\n+    } else if (e instanceof IOException) {\n+      s \u003d Response.Status.NOT_FOUND;\n+    } else if (e instanceof UnsupportedOperationException) {\n+      s \u003d Response.Status.BAD_REQUEST;\n+    } else if (e instanceof IllegalArgumentException) {\n+      s \u003d Response.Status.BAD_REQUEST;\n+    } else if (e instanceof NumberFormatException) {\n+      s \u003d Response.Status.BAD_REQUEST;\n+    } else if (e instanceof BadRequestException) {\n+      s \u003d Response.Status.BAD_REQUEST;\n+    } else {\n+      LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n+      s \u003d Response.Status.INTERNAL_SERVER_ERROR;\n+    }\n+\n+    // convert to json\n+    final Map\u003cString, Object\u003e m \u003d new TreeMap\u003cString, Object\u003e();\n+    m.put(\"exception\", e.getClass().getSimpleName());\n+    m.put(\"message\", e.getMessage());\n+    m.put(\"javaClassName\", e.getClass().getName());\n+    final Map\u003cString, Object\u003e m2 \u003d new TreeMap\u003cString, Object\u003e();\n+    m2.put(RemoteException.class.getSimpleName(), m);\n+    final String js \u003d JSON.toString(m2);\n+\n+    return Response.status(s).type(MediaType.APPLICATION_JSON).entity(js)\n+        .build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response toResponse(Exception e) {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"GOT EXCEPITION\", e);\n    }\n    // Don\u0027t catch this as filter forward on 404\n    // (ServletContainer.FEATURE_FILTER_FORWARD_ON_404)\n    // won\u0027t work and the web UI won\u0027t work!\n    if (e instanceof com.sun.jersey.api.NotFoundException) {\n      return ((com.sun.jersey.api.NotFoundException) e).getResponse();\n    }\n    // clear content type\n    response.setContentType(null);\n\n    // Convert exception\n    if (e instanceof RemoteException) {\n      e \u003d ((RemoteException) e).unwrapRemoteException();\n    }\n\n    // Map response status\n    final Response.Status s;\n    if (e instanceof SecurityException) {\n      s \u003d Response.Status.UNAUTHORIZED;\n    } else if (e instanceof AuthorizationException) {\n      s \u003d Response.Status.UNAUTHORIZED;\n    } else if (e instanceof FileNotFoundException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof NotFoundException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof IOException) {\n      s \u003d Response.Status.NOT_FOUND;\n    } else if (e instanceof UnsupportedOperationException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof IllegalArgumentException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof NumberFormatException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else if (e instanceof BadRequestException) {\n      s \u003d Response.Status.BAD_REQUEST;\n    } else {\n      LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\n      s \u003d Response.Status.INTERNAL_SERVER_ERROR;\n    }\n\n    // convert to json\n    final Map\u003cString, Object\u003e m \u003d new TreeMap\u003cString, Object\u003e();\n    m.put(\"exception\", e.getClass().getSimpleName());\n    m.put(\"message\", e.getMessage());\n    m.put(\"javaClassName\", e.getClass().getName());\n    final Map\u003cString, Object\u003e m2 \u003d new TreeMap\u003cString, Object\u003e();\n    m2.put(RemoteException.class.getSimpleName(), m);\n    final String js \u003d JSON.toString(m2);\n\n    return Response.status(s).type(MediaType.APPLICATION_JSON).entity(js)\n        .build();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/GenericExceptionHandler.java"
    }
  }
}