{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EntityGroupFSTimelineStore.java",
  "functionName": "parseSummaryLogs",
  "functionId": "parseSummaryLogs___tdm-TimelineDataManager",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
  "functionStartLine": 708,
  "functionEndLine": 741,
  "numCommitsSeen": 17,
  "timeTaken": 1533,
  "changeHistory": [
    "06413da72efed9a50e49efaf7110c220c88a7f4a",
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
    "02f597c5db36ded385413958bdee793ad7eda40e"
  ],
  "changeHistoryShort": {
    "06413da72efed9a50e49efaf7110c220c88a7f4a": "Ybodychange",
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": "Ybodychange",
    "02f597c5db36ded385413958bdee793ad7eda40e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "06413da72efed9a50e49efaf7110c220c88a7f4a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4851. Metric improvements for ATS v1.5 storage components. Li Lu via junping_du.\n",
      "commitDate": "03/05/16 4:16 AM",
      "commitName": "06413da72efed9a50e49efaf7110c220c88a7f4a",
      "commitAuthor": "Junping Du",
      "commitDateOld": "13/04/16 10:38 AM",
      "commitNameOld": "e0cb426758b3d716ff143f723fc16ef2f1e4971b",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 19.73,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,34 @@\n     synchronized void parseSummaryLogs(TimelineDataManager tdm)\n         throws IOException {\n+      long startTime \u003d Time.monotonicNow();\n       if (!isDone()) {\n         LOG.debug(\"Try to parse summary log for log {} in {}\",\n             appId, appDirPath);\n         appState \u003d getAppState(appId);\n         long recentLogModTime \u003d scanForLogs();\n         if (appState \u003d\u003d AppState.UNKNOWN) {\n           if (Time.now() - recentLogModTime \u003e unknownActiveMillis) {\n             LOG.info(\n                 \"{} state is UNKNOWN and logs are stale, assuming COMPLETED\",\n                 appId);\n             appState \u003d AppState.COMPLETED;\n           }\n         }\n       }\n       List\u003cLogInfo\u003e removeList \u003d new ArrayList\u003cLogInfo\u003e();\n       for (LogInfo log : summaryLogs) {\n         if (fs.exists(log.getPath(appDirPath))) {\n-          log.parseForStore(tdm, appDirPath, isDone(), jsonFactory,\n+          long summaryEntityParsed\n+              \u003d log.parseForStore(tdm, appDirPath, isDone(), jsonFactory,\n               objMapper, fs);\n+          metrics.incrEntitiesReadToSummary(summaryEntityParsed);\n         } else {\n           // The log may have been removed, remove the log\n           removeList.add(log);\n           LOG.info(\"File {} no longer exists, remove it from log list\",\n               log.getPath(appDirPath));\n         }\n       }\n       summaryLogs.removeAll(removeList);\n+      metrics.addSummaryLogReadTime(Time.monotonicNow() - startTime);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    synchronized void parseSummaryLogs(TimelineDataManager tdm)\n        throws IOException {\n      long startTime \u003d Time.monotonicNow();\n      if (!isDone()) {\n        LOG.debug(\"Try to parse summary log for log {} in {}\",\n            appId, appDirPath);\n        appState \u003d getAppState(appId);\n        long recentLogModTime \u003d scanForLogs();\n        if (appState \u003d\u003d AppState.UNKNOWN) {\n          if (Time.now() - recentLogModTime \u003e unknownActiveMillis) {\n            LOG.info(\n                \"{} state is UNKNOWN and logs are stale, assuming COMPLETED\",\n                appId);\n            appState \u003d AppState.COMPLETED;\n          }\n        }\n      }\n      List\u003cLogInfo\u003e removeList \u003d new ArrayList\u003cLogInfo\u003e();\n      for (LogInfo log : summaryLogs) {\n        if (fs.exists(log.getPath(appDirPath))) {\n          long summaryEntityParsed\n              \u003d log.parseForStore(tdm, appDirPath, isDone(), jsonFactory,\n              objMapper, fs);\n          metrics.incrEntitiesReadToSummary(summaryEntityParsed);\n        } else {\n          // The log may have been removed, remove the log\n          removeList.add(log);\n          LOG.info(\"File {} no longer exists, remove it from log list\",\n              log.getPath(appDirPath));\n        }\n      }\n      summaryLogs.removeAll(removeList);\n      metrics.addSummaryLogReadTime(Time.monotonicNow() - startTime);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4696. Improving EntityGroupFSTimelineStore on exception handling, test setup, and concurrency. (Steve Loughran via gtcarrera9)\n",
      "commitDate": "10/03/16 10:51 AM",
      "commitName": "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
      "commitAuthor": "Li Lu",
      "commitDateOld": "17/01/16 5:37 PM",
      "commitNameOld": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 52.72,
      "commitsBetweenForRepo": 371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     synchronized void parseSummaryLogs(TimelineDataManager tdm)\n         throws IOException {\n       if (!isDone()) {\n         LOG.debug(\"Try to parse summary log for log {} in {}\",\n             appId, appDirPath);\n-        appState \u003d EntityGroupFSTimelineStore.getAppState(appId, yarnClient);\n+        appState \u003d getAppState(appId);\n         long recentLogModTime \u003d scanForLogs();\n         if (appState \u003d\u003d AppState.UNKNOWN) {\n           if (Time.now() - recentLogModTime \u003e unknownActiveMillis) {\n             LOG.info(\n                 \"{} state is UNKNOWN and logs are stale, assuming COMPLETED\",\n                 appId);\n             appState \u003d AppState.COMPLETED;\n           }\n         }\n       }\n       List\u003cLogInfo\u003e removeList \u003d new ArrayList\u003cLogInfo\u003e();\n       for (LogInfo log : summaryLogs) {\n         if (fs.exists(log.getPath(appDirPath))) {\n           log.parseForStore(tdm, appDirPath, isDone(), jsonFactory,\n               objMapper, fs);\n         } else {\n           // The log may have been removed, remove the log\n           removeList.add(log);\n           LOG.info(\"File {} no longer exists, remove it from log list\",\n               log.getPath(appDirPath));\n         }\n       }\n       summaryLogs.removeAll(removeList);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    synchronized void parseSummaryLogs(TimelineDataManager tdm)\n        throws IOException {\n      if (!isDone()) {\n        LOG.debug(\"Try to parse summary log for log {} in {}\",\n            appId, appDirPath);\n        appState \u003d getAppState(appId);\n        long recentLogModTime \u003d scanForLogs();\n        if (appState \u003d\u003d AppState.UNKNOWN) {\n          if (Time.now() - recentLogModTime \u003e unknownActiveMillis) {\n            LOG.info(\n                \"{} state is UNKNOWN and logs are stale, assuming COMPLETED\",\n                appId);\n            appState \u003d AppState.COMPLETED;\n          }\n        }\n      }\n      List\u003cLogInfo\u003e removeList \u003d new ArrayList\u003cLogInfo\u003e();\n      for (LogInfo log : summaryLogs) {\n        if (fs.exists(log.getPath(appDirPath))) {\n          log.parseForStore(tdm, appDirPath, isDone(), jsonFactory,\n              objMapper, fs);\n        } else {\n          // The log may have been removed, remove the log\n          removeList.add(log);\n          LOG.info(\"File {} no longer exists, remove it from log list\",\n              log.getPath(appDirPath));\n        }\n      }\n      summaryLogs.removeAll(removeList);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "02f597c5db36ded385413958bdee793ad7eda40e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4265. Provide new timeline plugin storage to support fine-grained entity caching. Contributed by Li Lu and Jason Lowe\n",
      "commitDate": "17/01/16 5:37 PM",
      "commitName": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,30 @@\n+    synchronized void parseSummaryLogs(TimelineDataManager tdm)\n+        throws IOException {\n+      if (!isDone()) {\n+        LOG.debug(\"Try to parse summary log for log {} in {}\",\n+            appId, appDirPath);\n+        appState \u003d EntityGroupFSTimelineStore.getAppState(appId, yarnClient);\n+        long recentLogModTime \u003d scanForLogs();\n+        if (appState \u003d\u003d AppState.UNKNOWN) {\n+          if (Time.now() - recentLogModTime \u003e unknownActiveMillis) {\n+            LOG.info(\n+                \"{} state is UNKNOWN and logs are stale, assuming COMPLETED\",\n+                appId);\n+            appState \u003d AppState.COMPLETED;\n+          }\n+        }\n+      }\n+      List\u003cLogInfo\u003e removeList \u003d new ArrayList\u003cLogInfo\u003e();\n+      for (LogInfo log : summaryLogs) {\n+        if (fs.exists(log.getPath(appDirPath))) {\n+          log.parseForStore(tdm, appDirPath, isDone(), jsonFactory,\n+              objMapper, fs);\n+        } else {\n+          // The log may have been removed, remove the log\n+          removeList.add(log);\n+          LOG.info(\"File {} no longer exists, remove it from log list\",\n+              log.getPath(appDirPath));\n+        }\n+      }\n+      summaryLogs.removeAll(removeList);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    synchronized void parseSummaryLogs(TimelineDataManager tdm)\n        throws IOException {\n      if (!isDone()) {\n        LOG.debug(\"Try to parse summary log for log {} in {}\",\n            appId, appDirPath);\n        appState \u003d EntityGroupFSTimelineStore.getAppState(appId, yarnClient);\n        long recentLogModTime \u003d scanForLogs();\n        if (appState \u003d\u003d AppState.UNKNOWN) {\n          if (Time.now() - recentLogModTime \u003e unknownActiveMillis) {\n            LOG.info(\n                \"{} state is UNKNOWN and logs are stale, assuming COMPLETED\",\n                appId);\n            appState \u003d AppState.COMPLETED;\n          }\n        }\n      }\n      List\u003cLogInfo\u003e removeList \u003d new ArrayList\u003cLogInfo\u003e();\n      for (LogInfo log : summaryLogs) {\n        if (fs.exists(log.getPath(appDirPath))) {\n          log.parseForStore(tdm, appDirPath, isDone(), jsonFactory,\n              objMapper, fs);\n        } else {\n          // The log may have been removed, remove the log\n          removeList.add(log);\n          LOG.info(\"File {} no longer exists, remove it from log list\",\n              log.getPath(appDirPath));\n        }\n      }\n      summaryLogs.removeAll(removeList);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java"
    }
  }
}