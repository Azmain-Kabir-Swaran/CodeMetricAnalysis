{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApiServer.java",
  "functionName": "startService",
  "functionId": "startService___appName-String__ugi-UserGroupInformation(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
  "functionStartLine": 694,
  "functionEndLine": 719,
  "numCommitsSeen": 40,
  "timeTaken": 3556,
  "changeHistory": [
    "efc4d91cbeab8a13f6d61cb0e56443adb2d77559",
    "69b05968974994c6e22d6562a67b9392d1700094",
    "96eefcc84aacc4cc82ad7e3e72c5bdad56f4a7b7",
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
    "7dd4490a44442bd2b682a5f1a8605e6f6c053037",
    "40ab068eabe50875449d601471619a4e82fff86d"
  ],
  "changeHistoryShort": {
    "efc4d91cbeab8a13f6d61cb0e56443adb2d77559": "Ybodychange",
    "69b05968974994c6e22d6562a67b9392d1700094": "Ybodychange",
    "96eefcc84aacc4cc82ad7e3e72c5bdad56f4a7b7": "Ybodychange",
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": "Yfilerename",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "7dd4490a44442bd2b682a5f1a8605e6f6c053037": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "efc4d91cbeab8a13f6d61cb0e56443adb2d77559": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9067. YARN Resource Manager is running OOM because of leak of Configuration Object. Contributed by Eric Yang.\n",
      "commitDate": "28/11/18 5:34 PM",
      "commitName": "efc4d91cbeab8a13f6d61cb0e56443adb2d77559",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "12/11/18 4:53 PM",
      "commitNameOld": "4c465f5535054dad2ef0b18128fb115129f6939e",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 16.03,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,26 @@\n   private Response startService(String appName,\n       final UserGroupInformation ugi) throws IOException,\n       InterruptedException {\n     ApplicationId appId \u003d\n         ugi.doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n           @Override public ApplicationId run()\n               throws YarnException, IOException {\n             ServiceClient sc \u003d getServiceClient();\n-            sc.init(YARN_CONFIG);\n-            sc.start();\n-            ApplicationId appId \u003d sc.actionStartAndGetId(appName);\n-            sc.close();\n-            return appId;\n+            try {\n+              sc.init(YARN_CONFIG);\n+              sc.start();\n+              ApplicationId appId \u003d sc.actionStartAndGetId(appName);\n+              return appId;\n+            } finally {\n+              sc.close();\n+            }\n           }\n         });\n     LOG.info(\"Successfully started service \" + appName);\n     ServiceStatus status \u003d new ServiceStatus();\n     status.setDiagnostics(\n         \"Service \" + appName + \" is successfully started with ApplicationId: \"\n             + appId);\n     status.setState(ServiceState.ACCEPTED);\n     return formatResponse(Status.OK, status);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response startService(String appName,\n      final UserGroupInformation ugi) throws IOException,\n      InterruptedException {\n    ApplicationId appId \u003d\n        ugi.doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n          @Override public ApplicationId run()\n              throws YarnException, IOException {\n            ServiceClient sc \u003d getServiceClient();\n            try {\n              sc.init(YARN_CONFIG);\n              sc.start();\n              ApplicationId appId \u003d sc.actionStartAndGetId(appName);\n              return appId;\n            } finally {\n              sc.close();\n            }\n          }\n        });\n    LOG.info(\"Successfully started service \" + appName);\n    ServiceStatus status \u003d new ServiceStatus();\n    status.setDiagnostics(\n        \"Service \" + appName + \" is successfully started with ApplicationId: \"\n            + appId);\n    status.setState(ServiceState.ACCEPTED);\n    return formatResponse(Status.OK, status);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "69b05968974994c6e22d6562a67b9392d1700094": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8411.  Restart stopped system service during RM start.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "13/06/18 4:05 PM",
      "commitName": "69b05968974994c6e22d6562a67b9392d1700094",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "30/05/18 12:37 PM",
      "commitNameOld": "96eefcc84aacc4cc82ad7e3e72c5bdad56f4a7b7",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 14.14,
      "commitsBetweenForRepo": 117,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,23 @@\n   private Response startService(String appName,\n       final UserGroupInformation ugi) throws IOException,\n       InterruptedException {\n     ApplicationId appId \u003d\n         ugi.doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n           @Override public ApplicationId run()\n               throws YarnException, IOException {\n             ServiceClient sc \u003d getServiceClient();\n             sc.init(YARN_CONFIG);\n             sc.start();\n-            sc.actionStart(appName);\n-            ApplicationId appId \u003d sc.getAppId(appName);\n+            ApplicationId appId \u003d sc.actionStartAndGetId(appName);\n             sc.close();\n             return appId;\n           }\n         });\n     LOG.info(\"Successfully started service \" + appName);\n     ServiceStatus status \u003d new ServiceStatus();\n     status.setDiagnostics(\n         \"Service \" + appName + \" is successfully started with ApplicationId: \"\n             + appId);\n     status.setState(ServiceState.ACCEPTED);\n     return formatResponse(Status.OK, status);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response startService(String appName,\n      final UserGroupInformation ugi) throws IOException,\n      InterruptedException {\n    ApplicationId appId \u003d\n        ugi.doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n          @Override public ApplicationId run()\n              throws YarnException, IOException {\n            ServiceClient sc \u003d getServiceClient();\n            sc.init(YARN_CONFIG);\n            sc.start();\n            ApplicationId appId \u003d sc.actionStartAndGetId(appName);\n            sc.close();\n            return appId;\n          }\n        });\n    LOG.info(\"Successfully started service \" + appName);\n    ServiceStatus status \u003d new ServiceStatus();\n    status.setDiagnostics(\n        \"Service \" + appName + \" is successfully started with ApplicationId: \"\n            + appId);\n    status.setState(ServiceState.ACCEPTED);\n    return formatResponse(Status.OK, status);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "96eefcc84aacc4cc82ad7e3e72c5bdad56f4a7b7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8368. yarn app start cli should print applicationId. Contributed by Rohith Sharma K S\n",
      "commitDate": "30/05/18 12:37 PM",
      "commitName": "96eefcc84aacc4cc82ad7e3e72c5bdad56f4a7b7",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "18/05/18 2:29 PM",
      "commitNameOld": "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 11.92,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,24 @@\n   private Response startService(String appName,\n       final UserGroupInformation ugi) throws IOException,\n       InterruptedException {\n-    ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n-      @Override\n-      public Void run() throws YarnException, IOException {\n-        ServiceClient sc \u003d getServiceClient();\n-        sc.init(YARN_CONFIG);\n-        sc.start();\n-        sc.actionStart(appName);\n-        sc.close();\n-        return null;\n-      }\n-    });\n+    ApplicationId appId \u003d\n+        ugi.doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n+          @Override public ApplicationId run()\n+              throws YarnException, IOException {\n+            ServiceClient sc \u003d getServiceClient();\n+            sc.init(YARN_CONFIG);\n+            sc.start();\n+            sc.actionStart(appName);\n+            ApplicationId appId \u003d sc.getAppId(appName);\n+            sc.close();\n+            return appId;\n+          }\n+        });\n     LOG.info(\"Successfully started service \" + appName);\n     ServiceStatus status \u003d new ServiceStatus();\n-    status.setDiagnostics(\"Service \" + appName + \" is successfully started.\");\n+    status.setDiagnostics(\n+        \"Service \" + appName + \" is successfully started with ApplicationId: \"\n+            + appId);\n     status.setState(ServiceState.ACCEPTED);\n     return formatResponse(Status.OK, status);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response startService(String appName,\n      final UserGroupInformation ugi) throws IOException,\n      InterruptedException {\n    ApplicationId appId \u003d\n        ugi.doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n          @Override public ApplicationId run()\n              throws YarnException, IOException {\n            ServiceClient sc \u003d getServiceClient();\n            sc.init(YARN_CONFIG);\n            sc.start();\n            sc.actionStart(appName);\n            ApplicationId appId \u003d sc.getAppId(appName);\n            sc.close();\n            return appId;\n          }\n        });\n    LOG.info(\"Successfully started service \" + appName);\n    ServiceStatus status \u003d new ServiceStatus();\n    status.setDiagnostics(\n        \"Service \" + appName + \" is successfully started with ApplicationId: \"\n            + appId);\n    status.setState(ServiceState.ACCEPTED);\n    return formatResponse(Status.OK, status);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7530.  Refactored YARN service API project location.\n            Contributed by Chandni Singh\n",
      "commitDate": "18/05/18 2:29 PM",
      "commitName": "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/05/18 11:29 AM",
      "commitNameOld": "89f59113927dd886f09d8fe2c05ff2cd5d1390c1",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Response startService(String appName,\n      final UserGroupInformation ugi) throws IOException,\n      InterruptedException {\n    ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n      @Override\n      public Void run() throws YarnException, IOException {\n        ServiceClient sc \u003d getServiceClient();\n        sc.init(YARN_CONFIG);\n        sc.start();\n        sc.actionStart(appName);\n        sc.close();\n        return null;\n      }\n    });\n    LOG.info(\"Successfully started service \" + appName);\n    ServiceStatus status \u003d new ServiceStatus();\n    status.setDiagnostics(\"Service \" + appName + \" is successfully started.\");\n    status.setState(ServiceState.ACCEPTED);\n    return formatResponse(Status.OK, status);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
      }
    },
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
      "commitDate": "23/01/18 5:54 PM",
      "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
          "commitDate": "23/01/18 5:54 PM",
          "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "05/01/18 6:25 PM",
          "commitNameOld": "836e3c45e8232fc4c8c795c0f93d2f3d7353f392",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,20 @@\n-  private Response startService(String appName) {\n+  private Response startService(String appName,\n+      final UserGroupInformation ugi) throws IOException,\n+      InterruptedException {\n+    ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n+      @Override\n+      public Void run() throws YarnException, IOException {\n+        ServiceClient sc \u003d getServiceClient();\n+        sc.init(YARN_CONFIG);\n+        sc.start();\n+        sc.actionStart(appName);\n+        sc.close();\n+        return null;\n+      }\n+    });\n+    LOG.info(\"Successfully started service \" + appName);\n     ServiceStatus status \u003d new ServiceStatus();\n-    try {\n-      SERVICE_CLIENT.actionStart(appName);\n-      LOG.info(\"Successfully started service \" + appName);\n-      status.setDiagnostics(\"Service \" + appName + \" is successfully started.\");\n-      status.setState(ServiceState.ACCEPTED);\n-      return Response.ok(status).build();\n-    } catch (Exception e) {\n-      String message \u003d \"Failed to start service \" + appName;\n-      status.setDiagnostics(message + \": \" +  e.getMessage());\n-      LOG.info(message, e);\n-      return Response.status(Status.INTERNAL_SERVER_ERROR)\n-          .entity(status).build();\n-    }\n+    status.setDiagnostics(\"Service \" + appName + \" is successfully started.\");\n+    status.setState(ServiceState.ACCEPTED);\n+    return formatResponse(Status.OK, status);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response startService(String appName,\n      final UserGroupInformation ugi) throws IOException,\n      InterruptedException {\n    ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n      @Override\n      public Void run() throws YarnException, IOException {\n        ServiceClient sc \u003d getServiceClient();\n        sc.init(YARN_CONFIG);\n        sc.start();\n        sc.actionStart(appName);\n        sc.close();\n        return null;\n      }\n    });\n    LOG.info(\"Successfully started service \" + appName);\n    ServiceStatus status \u003d new ServiceStatus();\n    status.setDiagnostics(\"Service \" + appName + \" is successfully started.\");\n    status.setState(ServiceState.ACCEPTED);\n    return formatResponse(Status.OK, status);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {
            "oldValue": "[appName-String]",
            "newValue": "[appName-String, ugi-UserGroupInformation(modifiers-final)]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
          "commitDate": "23/01/18 5:54 PM",
          "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "05/01/18 6:25 PM",
          "commitNameOld": "836e3c45e8232fc4c8c795c0f93d2f3d7353f392",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,20 @@\n-  private Response startService(String appName) {\n+  private Response startService(String appName,\n+      final UserGroupInformation ugi) throws IOException,\n+      InterruptedException {\n+    ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n+      @Override\n+      public Void run() throws YarnException, IOException {\n+        ServiceClient sc \u003d getServiceClient();\n+        sc.init(YARN_CONFIG);\n+        sc.start();\n+        sc.actionStart(appName);\n+        sc.close();\n+        return null;\n+      }\n+    });\n+    LOG.info(\"Successfully started service \" + appName);\n     ServiceStatus status \u003d new ServiceStatus();\n-    try {\n-      SERVICE_CLIENT.actionStart(appName);\n-      LOG.info(\"Successfully started service \" + appName);\n-      status.setDiagnostics(\"Service \" + appName + \" is successfully started.\");\n-      status.setState(ServiceState.ACCEPTED);\n-      return Response.ok(status).build();\n-    } catch (Exception e) {\n-      String message \u003d \"Failed to start service \" + appName;\n-      status.setDiagnostics(message + \": \" +  e.getMessage());\n-      LOG.info(message, e);\n-      return Response.status(Status.INTERNAL_SERVER_ERROR)\n-          .entity(status).build();\n-    }\n+    status.setDiagnostics(\"Service \" + appName + \" is successfully started.\");\n+    status.setState(ServiceState.ACCEPTED);\n+    return formatResponse(Status.OK, status);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response startService(String appName,\n      final UserGroupInformation ugi) throws IOException,\n      InterruptedException {\n    ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n      @Override\n      public Void run() throws YarnException, IOException {\n        ServiceClient sc \u003d getServiceClient();\n        sc.init(YARN_CONFIG);\n        sc.start();\n        sc.actionStart(appName);\n        sc.close();\n        return null;\n      }\n    });\n    LOG.info(\"Successfully started service \" + appName);\n    ServiceStatus status \u003d new ServiceStatus();\n    status.setDiagnostics(\"Service \" + appName + \" is successfully started.\");\n    status.setState(ServiceState.ACCEPTED);\n    return formatResponse(Status.OK, status);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException, InterruptedException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
          "commitDate": "23/01/18 5:54 PM",
          "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "05/01/18 6:25 PM",
          "commitNameOld": "836e3c45e8232fc4c8c795c0f93d2f3d7353f392",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,20 @@\n-  private Response startService(String appName) {\n+  private Response startService(String appName,\n+      final UserGroupInformation ugi) throws IOException,\n+      InterruptedException {\n+    ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n+      @Override\n+      public Void run() throws YarnException, IOException {\n+        ServiceClient sc \u003d getServiceClient();\n+        sc.init(YARN_CONFIG);\n+        sc.start();\n+        sc.actionStart(appName);\n+        sc.close();\n+        return null;\n+      }\n+    });\n+    LOG.info(\"Successfully started service \" + appName);\n     ServiceStatus status \u003d new ServiceStatus();\n-    try {\n-      SERVICE_CLIENT.actionStart(appName);\n-      LOG.info(\"Successfully started service \" + appName);\n-      status.setDiagnostics(\"Service \" + appName + \" is successfully started.\");\n-      status.setState(ServiceState.ACCEPTED);\n-      return Response.ok(status).build();\n-    } catch (Exception e) {\n-      String message \u003d \"Failed to start service \" + appName;\n-      status.setDiagnostics(message + \": \" +  e.getMessage());\n-      LOG.info(message, e);\n-      return Response.status(Status.INTERNAL_SERVER_ERROR)\n-          .entity(status).build();\n-    }\n+    status.setDiagnostics(\"Service \" + appName + \" is successfully started.\");\n+    status.setState(ServiceState.ACCEPTED);\n+    return formatResponse(Status.OK, status);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response startService(String appName,\n      final UserGroupInformation ugi) throws IOException,\n      InterruptedException {\n    ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n      @Override\n      public Void run() throws YarnException, IOException {\n        ServiceClient sc \u003d getServiceClient();\n        sc.init(YARN_CONFIG);\n        sc.start();\n        sc.actionStart(appName);\n        sc.close();\n        return null;\n      }\n    });\n    LOG.info(\"Successfully started service \" + appName);\n    ServiceStatus status \u003d new ServiceStatus();\n    status.setDiagnostics(\"Service \" + appName + \" is successfully started.\");\n    status.setState(ServiceState.ACCEPTED);\n    return formatResponse(Status.OK, status);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "7dd4490a44442bd2b682a5f1a8605e6f6c053037": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7073. Yarn native services rest API documentation. Contributed by Gour Saha\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "7dd4490a44442bd2b682a5f1a8605e6f6c053037",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,16 @@\n   private Response startService(String appName) {\n+    ServiceStatus status \u003d new ServiceStatus();\n     try {\n       SERVICE_CLIENT.actionStart(appName);\n       LOG.info(\"Successfully started service \" + appName);\n-      return Response.ok(\"Service \" + appName + \" is successfully started\").build();\n+      status.setDiagnostics(\"Service \" + appName + \" is successfully started.\");\n+      status.setState(ServiceState.ACCEPTED);\n+      return Response.ok(status).build();\n     } catch (Exception e) {\n       String message \u003d \"Failed to start service \" + appName;\n+      status.setDiagnostics(message + \": \" +  e.getMessage());\n       LOG.info(message, e);\n       return Response.status(Status.INTERNAL_SERVER_ERROR)\n-          .entity(message + \": \" + e.getMessage()).build();\n+          .entity(status).build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response startService(String appName) {\n    ServiceStatus status \u003d new ServiceStatus();\n    try {\n      SERVICE_CLIENT.actionStart(appName);\n      LOG.info(\"Successfully started service \" + appName);\n      status.setDiagnostics(\"Service \" + appName + \" is successfully started.\");\n      status.setState(ServiceState.ACCEPTED);\n      return Response.ok(status).build();\n    } catch (Exception e) {\n      String message \u003d \"Failed to start service \" + appName;\n      status.setDiagnostics(message + \": \" +  e.getMessage());\n      LOG.info(message, e);\n      return Response.status(Status.INTERNAL_SERVER_ERROR)\n          .entity(status).build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,12 @@\n+  private Response startService(String appName) {\n+    try {\n+      SERVICE_CLIENT.actionStart(appName);\n+      LOG.info(\"Successfully started service \" + appName);\n+      return Response.ok(\"Service \" + appName + \" is successfully started\").build();\n+    } catch (Exception e) {\n+      String message \u003d \"Failed to start service \" + appName;\n+      LOG.info(message, e);\n+      return Response.status(Status.INTERNAL_SERVER_ERROR)\n+          .entity(message + \": \" + e.getMessage()).build();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Response startService(String appName) {\n    try {\n      SERVICE_CLIENT.actionStart(appName);\n      LOG.info(\"Successfully started service \" + appName);\n      return Response.ok(\"Service \" + appName + \" is successfully started\").build();\n    } catch (Exception e) {\n      String message \u003d \"Failed to start service \" + appName;\n      LOG.info(message, e);\n      return Response.status(Status.INTERNAL_SERVER_ERROR)\n          .entity(message + \": \" + e.getMessage()).build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
    }
  }
}