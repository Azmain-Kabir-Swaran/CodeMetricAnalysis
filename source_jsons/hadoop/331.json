{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSStripedInputStream.java",
  "functionName": "readOneStripe",
  "functionId": "readOneStripe___corruptedBlocks-CorruptedBlocks",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSStripedInputStream.java",
  "functionStartLine": 298,
  "functionEndLine": 328,
  "numCommitsSeen": 31,
  "timeTaken": 1805,
  "changeHistory": [
    "34e8b9f9a86fb03156861482643fba11bdee1dd4",
    "734d54c1a8950446e68098f62d8964e02ecc2890",
    "8808779db351fe444388d4acb3094766b5980718"
  ],
  "changeHistoryShort": {
    "34e8b9f9a86fb03156861482643fba11bdee1dd4": "Ybodychange",
    "734d54c1a8950446e68098f62d8964e02ecc2890": "Ybodychange",
    "8808779db351fe444388d4acb3094766b5980718": "Ymultichange(Yparameterchange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "34e8b9f9a86fb03156861482643fba11bdee1dd4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13540. DFSStripedInputStream should only allocate new buffers when reading. Contributed by Xiao Chen.\n",
      "commitDate": "23/05/18 4:10 AM",
      "commitName": "34e8b9f9a86fb03156861482643fba11bdee1dd4",
      "commitAuthor": "Sammi Chen",
      "commitDateOld": "14/05/18 9:28 AM",
      "commitNameOld": "960940e0e08f7839775f2d8a352b444d104d36b4",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 8.78,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private void readOneStripe(CorruptedBlocks corruptedBlocks)\n       throws IOException {\n-    resetCurStripeBuffer();\n+    resetCurStripeBuffer(true);\n \n     // compute stripe range based on pos\n     final long offsetInBlockGroup \u003d getOffsetInBlockGroup();\n     final long stripeLen \u003d cellSize * dataBlkNum;\n     final int stripeIndex \u003d (int) (offsetInBlockGroup / stripeLen);\n     final int stripeBufOffset \u003d (int) (offsetInBlockGroup % stripeLen);\n     final int stripeLimit \u003d (int) Math.min(currentLocatedBlock.getBlockSize()\n         - (stripeIndex * stripeLen), stripeLen);\n     StripeRange stripeRange \u003d\n         new StripeRange(offsetInBlockGroup, stripeLimit - stripeBufOffset);\n \n     LocatedStripedBlock blockGroup \u003d (LocatedStripedBlock) currentLocatedBlock;\n     AlignedStripe[] stripes \u003d StripedBlockUtil.divideOneStripe(ecPolicy,\n         cellSize, blockGroup, offsetInBlockGroup,\n         offsetInBlockGroup + stripeRange.getLength() - 1, curStripeBuf);\n     final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n         blockGroup, cellSize, dataBlkNum, parityBlkNum);\n     // read the whole stripe\n     for (AlignedStripe stripe : stripes) {\n       // Parse group to get chosen DN location\n       StripeReader sreader \u003d new StatefulStripeReader(stripe, ecPolicy, blks,\n           blockReaders, corruptedBlocks, decoder, this);\n       sreader.readStripe();\n     }\n     curStripeBuf.position(stripeBufOffset);\n     curStripeBuf.limit(stripeLimit);\n     curStripeRange \u003d stripeRange;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void readOneStripe(CorruptedBlocks corruptedBlocks)\n      throws IOException {\n    resetCurStripeBuffer(true);\n\n    // compute stripe range based on pos\n    final long offsetInBlockGroup \u003d getOffsetInBlockGroup();\n    final long stripeLen \u003d cellSize * dataBlkNum;\n    final int stripeIndex \u003d (int) (offsetInBlockGroup / stripeLen);\n    final int stripeBufOffset \u003d (int) (offsetInBlockGroup % stripeLen);\n    final int stripeLimit \u003d (int) Math.min(currentLocatedBlock.getBlockSize()\n        - (stripeIndex * stripeLen), stripeLen);\n    StripeRange stripeRange \u003d\n        new StripeRange(offsetInBlockGroup, stripeLimit - stripeBufOffset);\n\n    LocatedStripedBlock blockGroup \u003d (LocatedStripedBlock) currentLocatedBlock;\n    AlignedStripe[] stripes \u003d StripedBlockUtil.divideOneStripe(ecPolicy,\n        cellSize, blockGroup, offsetInBlockGroup,\n        offsetInBlockGroup + stripeRange.getLength() - 1, curStripeBuf);\n    final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n        blockGroup, cellSize, dataBlkNum, parityBlkNum);\n    // read the whole stripe\n    for (AlignedStripe stripe : stripes) {\n      // Parse group to get chosen DN location\n      StripeReader sreader \u003d new StatefulStripeReader(stripe, ecPolicy, blks,\n          blockReaders, corruptedBlocks, decoder, this);\n      sreader.readStripe();\n    }\n    curStripeBuf.position(stripeBufOffset);\n    curStripeBuf.limit(stripeLimit);\n    curStripeRange \u003d stripeRange;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSStripedInputStream.java",
      "extendedDetails": {}
    },
    "734d54c1a8950446e68098f62d8964e02ecc2890": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10861. Refactor StripeReaders and use ECChunk version decode API. Contributed by Sammi Chen\n",
      "commitDate": "21/09/16 6:34 AM",
      "commitName": "734d54c1a8950446e68098f62d8964e02ecc2890",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "08/09/16 11:54 AM",
      "commitNameOld": "401db4fc65140979fe7665983e36905e886df971",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 12.78,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private void readOneStripe(CorruptedBlocks corruptedBlocks)\n       throws IOException {\n     resetCurStripeBuffer();\n \n     // compute stripe range based on pos\n     final long offsetInBlockGroup \u003d getOffsetInBlockGroup();\n     final long stripeLen \u003d cellSize * dataBlkNum;\n     final int stripeIndex \u003d (int) (offsetInBlockGroup / stripeLen);\n     final int stripeBufOffset \u003d (int) (offsetInBlockGroup % stripeLen);\n     final int stripeLimit \u003d (int) Math.min(currentLocatedBlock.getBlockSize()\n         - (stripeIndex * stripeLen), stripeLen);\n-    StripeRange stripeRange \u003d new StripeRange(offsetInBlockGroup,\n-        stripeLimit - stripeBufOffset);\n+    StripeRange stripeRange \u003d\n+        new StripeRange(offsetInBlockGroup, stripeLimit - stripeBufOffset);\n \n     LocatedStripedBlock blockGroup \u003d (LocatedStripedBlock) currentLocatedBlock;\n     AlignedStripe[] stripes \u003d StripedBlockUtil.divideOneStripe(ecPolicy,\n         cellSize, blockGroup, offsetInBlockGroup,\n-        offsetInBlockGroup + stripeRange.length - 1, curStripeBuf);\n+        offsetInBlockGroup + stripeRange.getLength() - 1, curStripeBuf);\n     final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n         blockGroup, cellSize, dataBlkNum, parityBlkNum);\n     // read the whole stripe\n     for (AlignedStripe stripe : stripes) {\n       // Parse group to get chosen DN location\n-      StripeReader sreader \u003d new StatefulStripeReader(readingService, stripe,\n-          blks, blockReaders, corruptedBlocks);\n+      StripeReader sreader \u003d new StatefulStripeReader(stripe, ecPolicy, blks,\n+          blockReaders, corruptedBlocks, decoder, this);\n       sreader.readStripe();\n     }\n     curStripeBuf.position(stripeBufOffset);\n     curStripeBuf.limit(stripeLimit);\n     curStripeRange \u003d stripeRange;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void readOneStripe(CorruptedBlocks corruptedBlocks)\n      throws IOException {\n    resetCurStripeBuffer();\n\n    // compute stripe range based on pos\n    final long offsetInBlockGroup \u003d getOffsetInBlockGroup();\n    final long stripeLen \u003d cellSize * dataBlkNum;\n    final int stripeIndex \u003d (int) (offsetInBlockGroup / stripeLen);\n    final int stripeBufOffset \u003d (int) (offsetInBlockGroup % stripeLen);\n    final int stripeLimit \u003d (int) Math.min(currentLocatedBlock.getBlockSize()\n        - (stripeIndex * stripeLen), stripeLen);\n    StripeRange stripeRange \u003d\n        new StripeRange(offsetInBlockGroup, stripeLimit - stripeBufOffset);\n\n    LocatedStripedBlock blockGroup \u003d (LocatedStripedBlock) currentLocatedBlock;\n    AlignedStripe[] stripes \u003d StripedBlockUtil.divideOneStripe(ecPolicy,\n        cellSize, blockGroup, offsetInBlockGroup,\n        offsetInBlockGroup + stripeRange.getLength() - 1, curStripeBuf);\n    final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n        blockGroup, cellSize, dataBlkNum, parityBlkNum);\n    // read the whole stripe\n    for (AlignedStripe stripe : stripes) {\n      // Parse group to get chosen DN location\n      StripeReader sreader \u003d new StatefulStripeReader(stripe, ecPolicy, blks,\n          blockReaders, corruptedBlocks, decoder, this);\n      sreader.readStripe();\n    }\n    curStripeBuf.position(stripeBufOffset);\n    curStripeBuf.limit(stripeLimit);\n    curStripeRange \u003d stripeRange;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSStripedInputStream.java",
      "extendedDetails": {}
    },
    "8808779db351fe444388d4acb3094766b5980718": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9734. Refactoring of checksum failure report related codes. Contributed by Kai Zheng.\n\nChange-Id: Ie69a77e3498a360959f8e213c51fb2b17c28b64a\n",
      "commitDate": "25/02/16 9:55 AM",
      "commitName": "8808779db351fe444388d4acb3094766b5980718",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9734. Refactoring of checksum failure report related codes. Contributed by Kai Zheng.\n\nChange-Id: Ie69a77e3498a360959f8e213c51fb2b17c28b64a\n",
          "commitDate": "25/02/16 9:55 AM",
          "commitName": "8808779db351fe444388d4acb3094766b5980718",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "19/02/16 7:02 PM",
          "commitNameOld": "e54cc2931262bf49682a8323da9811976218c03b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 5.62,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,31 @@\n-  private void readOneStripe(\n-      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n+  private void readOneStripe(CorruptedBlocks corruptedBlocks)\n       throws IOException {\n     resetCurStripeBuffer();\n \n     // compute stripe range based on pos\n     final long offsetInBlockGroup \u003d getOffsetInBlockGroup();\n     final long stripeLen \u003d cellSize * dataBlkNum;\n     final int stripeIndex \u003d (int) (offsetInBlockGroup / stripeLen);\n     final int stripeBufOffset \u003d (int) (offsetInBlockGroup % stripeLen);\n     final int stripeLimit \u003d (int) Math.min(currentLocatedBlock.getBlockSize()\n         - (stripeIndex * stripeLen), stripeLen);\n     StripeRange stripeRange \u003d new StripeRange(offsetInBlockGroup,\n         stripeLimit - stripeBufOffset);\n \n     LocatedStripedBlock blockGroup \u003d (LocatedStripedBlock) currentLocatedBlock;\n     AlignedStripe[] stripes \u003d StripedBlockUtil.divideOneStripe(ecPolicy, cellSize,\n         blockGroup, offsetInBlockGroup,\n         offsetInBlockGroup + stripeRange.length - 1, curStripeBuf);\n     final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n         blockGroup, cellSize, dataBlkNum, parityBlkNum);\n     // read the whole stripe\n     for (AlignedStripe stripe : stripes) {\n       // Parse group to get chosen DN location\n       StripeReader sreader \u003d new StatefulStripeReader(readingService, stripe,\n-          blks, blockReaders, corruptedBlockMap);\n+          blks, blockReaders, corruptedBlocks);\n       sreader.readStripe();\n     }\n     curStripeBuf.position(stripeBufOffset);\n     curStripeBuf.limit(stripeLimit);\n     curStripeRange \u003d stripeRange;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void readOneStripe(CorruptedBlocks corruptedBlocks)\n      throws IOException {\n    resetCurStripeBuffer();\n\n    // compute stripe range based on pos\n    final long offsetInBlockGroup \u003d getOffsetInBlockGroup();\n    final long stripeLen \u003d cellSize * dataBlkNum;\n    final int stripeIndex \u003d (int) (offsetInBlockGroup / stripeLen);\n    final int stripeBufOffset \u003d (int) (offsetInBlockGroup % stripeLen);\n    final int stripeLimit \u003d (int) Math.min(currentLocatedBlock.getBlockSize()\n        - (stripeIndex * stripeLen), stripeLen);\n    StripeRange stripeRange \u003d new StripeRange(offsetInBlockGroup,\n        stripeLimit - stripeBufOffset);\n\n    LocatedStripedBlock blockGroup \u003d (LocatedStripedBlock) currentLocatedBlock;\n    AlignedStripe[] stripes \u003d StripedBlockUtil.divideOneStripe(ecPolicy, cellSize,\n        blockGroup, offsetInBlockGroup,\n        offsetInBlockGroup + stripeRange.length - 1, curStripeBuf);\n    final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n        blockGroup, cellSize, dataBlkNum, parityBlkNum);\n    // read the whole stripe\n    for (AlignedStripe stripe : stripes) {\n      // Parse group to get chosen DN location\n      StripeReader sreader \u003d new StatefulStripeReader(readingService, stripe,\n          blks, blockReaders, corruptedBlocks);\n      sreader.readStripe();\n    }\n    curStripeBuf.position(stripeBufOffset);\n    curStripeBuf.limit(stripeLimit);\n    curStripeRange \u003d stripeRange;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSStripedInputStream.java",
          "extendedDetails": {
            "oldValue": "[corruptedBlockMap-Map\u003cExtendedBlock,Set\u003cDatanodeInfo\u003e\u003e]",
            "newValue": "[corruptedBlocks-CorruptedBlocks]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9734. Refactoring of checksum failure report related codes. Contributed by Kai Zheng.\n\nChange-Id: Ie69a77e3498a360959f8e213c51fb2b17c28b64a\n",
          "commitDate": "25/02/16 9:55 AM",
          "commitName": "8808779db351fe444388d4acb3094766b5980718",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "19/02/16 7:02 PM",
          "commitNameOld": "e54cc2931262bf49682a8323da9811976218c03b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 5.62,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,31 @@\n-  private void readOneStripe(\n-      Map\u003cExtendedBlock, Set\u003cDatanodeInfo\u003e\u003e corruptedBlockMap)\n+  private void readOneStripe(CorruptedBlocks corruptedBlocks)\n       throws IOException {\n     resetCurStripeBuffer();\n \n     // compute stripe range based on pos\n     final long offsetInBlockGroup \u003d getOffsetInBlockGroup();\n     final long stripeLen \u003d cellSize * dataBlkNum;\n     final int stripeIndex \u003d (int) (offsetInBlockGroup / stripeLen);\n     final int stripeBufOffset \u003d (int) (offsetInBlockGroup % stripeLen);\n     final int stripeLimit \u003d (int) Math.min(currentLocatedBlock.getBlockSize()\n         - (stripeIndex * stripeLen), stripeLen);\n     StripeRange stripeRange \u003d new StripeRange(offsetInBlockGroup,\n         stripeLimit - stripeBufOffset);\n \n     LocatedStripedBlock blockGroup \u003d (LocatedStripedBlock) currentLocatedBlock;\n     AlignedStripe[] stripes \u003d StripedBlockUtil.divideOneStripe(ecPolicy, cellSize,\n         blockGroup, offsetInBlockGroup,\n         offsetInBlockGroup + stripeRange.length - 1, curStripeBuf);\n     final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n         blockGroup, cellSize, dataBlkNum, parityBlkNum);\n     // read the whole stripe\n     for (AlignedStripe stripe : stripes) {\n       // Parse group to get chosen DN location\n       StripeReader sreader \u003d new StatefulStripeReader(readingService, stripe,\n-          blks, blockReaders, corruptedBlockMap);\n+          blks, blockReaders, corruptedBlocks);\n       sreader.readStripe();\n     }\n     curStripeBuf.position(stripeBufOffset);\n     curStripeBuf.limit(stripeLimit);\n     curStripeRange \u003d stripeRange;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void readOneStripe(CorruptedBlocks corruptedBlocks)\n      throws IOException {\n    resetCurStripeBuffer();\n\n    // compute stripe range based on pos\n    final long offsetInBlockGroup \u003d getOffsetInBlockGroup();\n    final long stripeLen \u003d cellSize * dataBlkNum;\n    final int stripeIndex \u003d (int) (offsetInBlockGroup / stripeLen);\n    final int stripeBufOffset \u003d (int) (offsetInBlockGroup % stripeLen);\n    final int stripeLimit \u003d (int) Math.min(currentLocatedBlock.getBlockSize()\n        - (stripeIndex * stripeLen), stripeLen);\n    StripeRange stripeRange \u003d new StripeRange(offsetInBlockGroup,\n        stripeLimit - stripeBufOffset);\n\n    LocatedStripedBlock blockGroup \u003d (LocatedStripedBlock) currentLocatedBlock;\n    AlignedStripe[] stripes \u003d StripedBlockUtil.divideOneStripe(ecPolicy, cellSize,\n        blockGroup, offsetInBlockGroup,\n        offsetInBlockGroup + stripeRange.length - 1, curStripeBuf);\n    final LocatedBlock[] blks \u003d StripedBlockUtil.parseStripedBlockGroup(\n        blockGroup, cellSize, dataBlkNum, parityBlkNum);\n    // read the whole stripe\n    for (AlignedStripe stripe : stripes) {\n      // Parse group to get chosen DN location\n      StripeReader sreader \u003d new StatefulStripeReader(readingService, stripe,\n          blks, blockReaders, corruptedBlocks);\n      sreader.readStripe();\n    }\n    curStripeBuf.position(stripeBufOffset);\n    curStripeBuf.limit(stripeLimit);\n    curStripeRange \u003d stripeRange;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSStripedInputStream.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}