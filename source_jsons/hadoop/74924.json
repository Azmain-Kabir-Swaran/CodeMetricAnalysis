{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractDelegationTokenSecretManager.java",
  "functionName": "renewToken",
  "functionId": "renewToken___token-Token__TokenIdent____renewer-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
  "functionStartLine": 496,
  "functionEndLine": 547,
  "numCommitsSeen": 46,
  "timeTaken": 2486,
  "changeHistory": [
    "176346721006a03f41d028560e9e29b5931d5be2",
    "fd2f22adec5c2f21f792045dbfde9385c21403ec",
    "db890eef3208cc557476fa510f7a253ba22bc68a",
    "bee448cacd142a4125e60c840022b65cc5fe9efa",
    "e4374d803663c626de610cd5f062f25a6d7d5d4e",
    "fdfedf4c31fa1d8338fc915a631dfc57c1ca38da",
    "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "fbdb24946051f7abc2d065217ef8c52e0cf3f16f",
    "27ab7f3db9a1489d81ecf32cc3493d1f4efae68b",
    "a417a8faeaa1a40e140c7f86463e699d92404454",
    "38c59c0af7595897dbff8e5f13b7ff6978b9c08b"
  ],
  "changeHistoryShort": {
    "176346721006a03f41d028560e9e29b5931d5be2": "Ybodychange",
    "fd2f22adec5c2f21f792045dbfde9385c21403ec": "Ybodychange",
    "db890eef3208cc557476fa510f7a253ba22bc68a": "Ybodychange",
    "bee448cacd142a4125e60c840022b65cc5fe9efa": "Ybodychange",
    "e4374d803663c626de610cd5f062f25a6d7d5d4e": "Ybodychange",
    "fdfedf4c31fa1d8338fc915a631dfc57c1ca38da": "Ybodychange",
    "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18": "Ybodychange",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "fbdb24946051f7abc2d065217ef8c52e0cf3f16f": "Ybodychange",
    "27ab7f3db9a1489d81ecf32cc3493d1f4efae68b": "Ymultichange(Ymodifierchange,Ybodychange)",
    "a417a8faeaa1a40e140c7f86463e699d92404454": "Ymultichange(Yreturntypechange,Ybodychange)",
    "38c59c0af7595897dbff8e5f13b7ff6978b9c08b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "176346721006a03f41d028560e9e29b5931d5be2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14001. Improve delegation token validity checking.\n",
      "commitDate": "19/01/17 12:56 AM",
      "commitName": "176346721006a03f41d028560e9e29b5931d5be2",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "24/11/16 9:54 AM",
      "commitNameOld": "01665e456de8d79000ce273dded5ea53aa62965a",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 55.63,
      "commitsBetweenForRepo": 282,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                          String renewer) throws InvalidToken, IOException {\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n     LOG.info(\"Token renewal for identifier: \" + formatTokenId(id)\n         + \"; total currentTokens \" +  currentTokens.size());\n \n     long now \u003d Time.now();\n     if (id.getMaxDate() \u003c now) {\n       throw new InvalidToken(renewer + \" tried to renew an expired token \"\n           + formatTokenId(id) + \" max expiration date: \"\n           + Time.formatTime(id.getMaxDate())\n           + \" currentTime: \" + Time.formatTime(now));\n     }\n     if ((id.getRenewer() \u003d\u003d null) || (id.getRenewer().toString().isEmpty())) {\n       throw new AccessControlException(renewer +\n           \" tried to renew a token \" + formatTokenId(id)\n           + \" without a renewer\");\n     }\n     if (!id.getRenewer().toString().equals(renewer)) {\n       throw new AccessControlException(renewer\n           + \" tries to renew a token \" + formatTokenId(id)\n           + \" with non-matching renewer \" + id.getRenewer());\n     }\n     DelegationKey key \u003d getDelegationKey(id.getMasterKeyId());\n     if (key \u003d\u003d null) {\n       throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n           + id.getMasterKeyId()\n           + \" from cache. Failed to renew an unexpired token \"\n           + formatTokenId(id) + \" with sequenceNumber\u003d\"\n           + id.getSequenceNumber());\n     }\n     byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n-    if (!Arrays.equals(password, token.getPassword())) {\n+    if (!MessageDigest.isEqual(password, token.getPassword())) {\n       throw new AccessControlException(renewer\n           + \" is trying to renew a token \"\n           + formatTokenId(id) + \" with wrong password\");\n     }\n     long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n     String trackingId \u003d getTrackingIdIfEnabled(id);\n     DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n         password, trackingId);\n \n     if (getTokenInfo(id) \u003d\u003d null) {\n       throw new InvalidToken(\"Renewal request for unknown token \"\n           + formatTokenId(id));\n     }\n     updateToken(id, info);\n     return renewTime;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                         String renewer) throws InvalidToken, IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token renewal for identifier: \" + formatTokenId(id)\n        + \"; total currentTokens \" +  currentTokens.size());\n\n    long now \u003d Time.now();\n    if (id.getMaxDate() \u003c now) {\n      throw new InvalidToken(renewer + \" tried to renew an expired token \"\n          + formatTokenId(id) + \" max expiration date: \"\n          + Time.formatTime(id.getMaxDate())\n          + \" currentTime: \" + Time.formatTime(now));\n    }\n    if ((id.getRenewer() \u003d\u003d null) || (id.getRenewer().toString().isEmpty())) {\n      throw new AccessControlException(renewer +\n          \" tried to renew a token \" + formatTokenId(id)\n          + \" without a renewer\");\n    }\n    if (!id.getRenewer().toString().equals(renewer)) {\n      throw new AccessControlException(renewer\n          + \" tries to renew a token \" + formatTokenId(id)\n          + \" with non-matching renewer \" + id.getRenewer());\n    }\n    DelegationKey key \u003d getDelegationKey(id.getMasterKeyId());\n    if (key \u003d\u003d null) {\n      throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n          + id.getMasterKeyId()\n          + \" from cache. Failed to renew an unexpired token \"\n          + formatTokenId(id) + \" with sequenceNumber\u003d\"\n          + id.getSequenceNumber());\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!MessageDigest.isEqual(password, token.getPassword())) {\n      throw new AccessControlException(renewer\n          + \" is trying to renew a token \"\n          + formatTokenId(id) + \" with wrong password\");\n    }\n    long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n    String trackingId \u003d getTrackingIdIfEnabled(id);\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n        password, trackingId);\n\n    if (getTokenInfo(id) \u003d\u003d null) {\n      throw new InvalidToken(\"Renewal request for unknown token \"\n          + formatTokenId(id));\n    }\n    updateToken(id, info);\n    return renewTime;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "fd2f22adec5c2f21f792045dbfde9385c21403ec": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13720. Add more info to the msgs printed in AbstractDelegationTokenSecretManager. Contributed by Yongjun Zhang.\n",
      "commitDate": "10/11/16 10:42 PM",
      "commitName": "fd2f22adec5c2f21f792045dbfde9385c21403ec",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "20/09/16 1:20 PM",
      "commitNameOld": "e80386d69d5fb6a08aa3366e42d2518747af569f",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 51.43,
      "commitsBetweenForRepo": 451,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,52 @@\n   public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                          String renewer) throws InvalidToken, IOException {\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n-    LOG.info(\"Token renewal for identifier: \" + id + \"; total currentTokens \"\n-        +  currentTokens.size());\n+    LOG.info(\"Token renewal for identifier: \" + formatTokenId(id)\n+        + \"; total currentTokens \" +  currentTokens.size());\n \n     long now \u003d Time.now();\n     if (id.getMaxDate() \u003c now) {\n-      throw new InvalidToken(renewer + \" tried to renew an expired token\");\n+      throw new InvalidToken(renewer + \" tried to renew an expired token \"\n+          + formatTokenId(id) + \" max expiration date: \"\n+          + Time.formatTime(id.getMaxDate())\n+          + \" currentTime: \" + Time.formatTime(now));\n     }\n     if ((id.getRenewer() \u003d\u003d null) || (id.getRenewer().toString().isEmpty())) {\n       throw new AccessControlException(renewer +\n-          \" tried to renew a token without a renewer\");\n+          \" tried to renew a token \" + formatTokenId(id)\n+          + \" without a renewer\");\n     }\n     if (!id.getRenewer().toString().equals(renewer)) {\n-      throw new AccessControlException(renewer +\n-          \" tries to renew a token with renewer \" + id.getRenewer());\n+      throw new AccessControlException(renewer\n+          + \" tries to renew a token \" + formatTokenId(id)\n+          + \" with non-matching renewer \" + id.getRenewer());\n     }\n     DelegationKey key \u003d getDelegationKey(id.getMasterKeyId());\n     if (key \u003d\u003d null) {\n       throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n           + id.getMasterKeyId()\n-          + \" from cache. Failed to renew an unexpired token\"\n-          + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n+          + \" from cache. Failed to renew an unexpired token \"\n+          + formatTokenId(id) + \" with sequenceNumber\u003d\"\n+          + id.getSequenceNumber());\n     }\n     byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n     if (!Arrays.equals(password, token.getPassword())) {\n-      throw new AccessControlException(renewer +\n-          \" is trying to renew a token with wrong password\");\n+      throw new AccessControlException(renewer\n+          + \" is trying to renew a token \"\n+          + formatTokenId(id) + \" with wrong password\");\n     }\n     long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n     String trackingId \u003d getTrackingIdIfEnabled(id);\n     DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n         password, trackingId);\n \n     if (getTokenInfo(id) \u003d\u003d null) {\n-      throw new InvalidToken(\"Renewal request for unknown token\");\n+      throw new InvalidToken(\"Renewal request for unknown token \"\n+          + formatTokenId(id));\n     }\n     updateToken(id, info);\n     return renewTime;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                         String renewer) throws InvalidToken, IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token renewal for identifier: \" + formatTokenId(id)\n        + \"; total currentTokens \" +  currentTokens.size());\n\n    long now \u003d Time.now();\n    if (id.getMaxDate() \u003c now) {\n      throw new InvalidToken(renewer + \" tried to renew an expired token \"\n          + formatTokenId(id) + \" max expiration date: \"\n          + Time.formatTime(id.getMaxDate())\n          + \" currentTime: \" + Time.formatTime(now));\n    }\n    if ((id.getRenewer() \u003d\u003d null) || (id.getRenewer().toString().isEmpty())) {\n      throw new AccessControlException(renewer +\n          \" tried to renew a token \" + formatTokenId(id)\n          + \" without a renewer\");\n    }\n    if (!id.getRenewer().toString().equals(renewer)) {\n      throw new AccessControlException(renewer\n          + \" tries to renew a token \" + formatTokenId(id)\n          + \" with non-matching renewer \" + id.getRenewer());\n    }\n    DelegationKey key \u003d getDelegationKey(id.getMasterKeyId());\n    if (key \u003d\u003d null) {\n      throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n          + id.getMasterKeyId()\n          + \" from cache. Failed to renew an unexpired token \"\n          + formatTokenId(id) + \" with sequenceNumber\u003d\"\n          + id.getSequenceNumber());\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!Arrays.equals(password, token.getPassword())) {\n      throw new AccessControlException(renewer\n          + \" is trying to renew a token \"\n          + formatTokenId(id) + \" with wrong password\");\n    }\n    long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n    String trackingId \u003d getTrackingIdIfEnabled(id);\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n        password, trackingId);\n\n    if (getTokenInfo(id) \u003d\u003d null) {\n      throw new InvalidToken(\"Renewal request for unknown token \"\n          + formatTokenId(id));\n    }\n    updateToken(id, info);\n    return renewTime;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "db890eef3208cc557476fa510f7a253ba22bc68a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11017. KMS delegation token secret manager should be able to use zookeeper as store. (asuresh via tucu)\n",
      "commitDate": "20/09/14 8:21 AM",
      "commitName": "db890eef3208cc557476fa510f7a253ba22bc68a",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "02/05/14 11:38 AM",
      "commitNameOld": "bee448cacd142a4125e60c840022b65cc5fe9efa",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 140.86,
      "commitsBetweenForRepo": 1122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,44 @@\n   public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                          String renewer) throws InvalidToken, IOException {\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n     LOG.info(\"Token renewal for identifier: \" + id + \"; total currentTokens \"\n         +  currentTokens.size());\n \n     long now \u003d Time.now();\n     if (id.getMaxDate() \u003c now) {\n       throw new InvalidToken(renewer + \" tried to renew an expired token\");\n     }\n     if ((id.getRenewer() \u003d\u003d null) || (id.getRenewer().toString().isEmpty())) {\n       throw new AccessControlException(renewer +\n           \" tried to renew a token without a renewer\");\n     }\n     if (!id.getRenewer().toString().equals(renewer)) {\n       throw new AccessControlException(renewer +\n           \" tries to renew a token with renewer \" + id.getRenewer());\n     }\n-    DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n+    DelegationKey key \u003d getDelegationKey(id.getMasterKeyId());\n     if (key \u003d\u003d null) {\n       throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n           + id.getMasterKeyId()\n           + \" from cache. Failed to renew an unexpired token\"\n           + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n     }\n     byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n     if (!Arrays.equals(password, token.getPassword())) {\n       throw new AccessControlException(renewer +\n           \" is trying to renew a token with wrong password\");\n     }\n     long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n     String trackingId \u003d getTrackingIdIfEnabled(id);\n     DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n         password, trackingId);\n \n-    if (currentTokens.get(id) \u003d\u003d null) {\n+    if (getTokenInfo(id) \u003d\u003d null) {\n       throw new InvalidToken(\"Renewal request for unknown token\");\n     }\n-    currentTokens.put(id, info);\n-    updateStoredToken(id, renewTime);\n+    updateToken(id, info);\n     return renewTime;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                         String renewer) throws InvalidToken, IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token renewal for identifier: \" + id + \"; total currentTokens \"\n        +  currentTokens.size());\n\n    long now \u003d Time.now();\n    if (id.getMaxDate() \u003c now) {\n      throw new InvalidToken(renewer + \" tried to renew an expired token\");\n    }\n    if ((id.getRenewer() \u003d\u003d null) || (id.getRenewer().toString().isEmpty())) {\n      throw new AccessControlException(renewer +\n          \" tried to renew a token without a renewer\");\n    }\n    if (!id.getRenewer().toString().equals(renewer)) {\n      throw new AccessControlException(renewer +\n          \" tries to renew a token with renewer \" + id.getRenewer());\n    }\n    DelegationKey key \u003d getDelegationKey(id.getMasterKeyId());\n    if (key \u003d\u003d null) {\n      throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n          + id.getMasterKeyId()\n          + \" from cache. Failed to renew an unexpired token\"\n          + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!Arrays.equals(password, token.getPassword())) {\n      throw new AccessControlException(renewer +\n          \" is trying to renew a token with wrong password\");\n    }\n    long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n    String trackingId \u003d getTrackingIdIfEnabled(id);\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n        password, trackingId);\n\n    if (getTokenInfo(id) \u003d\u003d null) {\n      throw new InvalidToken(\"Renewal request for unknown token\");\n    }\n    updateToken(id, info);\n    return renewTime;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "bee448cacd142a4125e60c840022b65cc5fe9efa": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10562. Namenode exits on exception without printing stack trace in AbstractDelegationTokenSecretManager. (Contributed by Suresh Srinivas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592002 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/05/14 11:38 AM",
      "commitName": "bee448cacd142a4125e60c840022b65cc5fe9efa",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "01/05/14 2:20 PM",
      "commitNameOld": "13bba8ceacb1bee85b4d2af567f988dcaf6e5c19",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.89,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,45 @@\n   public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                          String renewer) throws InvalidToken, IOException {\n-    long now \u003d Time.now();\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n-    LOG.info(\"Token renewal requested for identifier: \"+id);\n-    \n+    LOG.info(\"Token renewal for identifier: \" + id + \"; total currentTokens \"\n+        +  currentTokens.size());\n+\n+    long now \u003d Time.now();\n     if (id.getMaxDate() \u003c now) {\n-      throw new InvalidToken(\"User \" + renewer + \n-                             \" tried to renew an expired token\");\n+      throw new InvalidToken(renewer + \" tried to renew an expired token\");\n     }\n     if ((id.getRenewer() \u003d\u003d null) || (id.getRenewer().toString().isEmpty())) {\n-      throw new AccessControlException(\"User \" + renewer + \n-                                       \" tried to renew a token without \" +\n-                                       \"a renewer\");\n+      throw new AccessControlException(renewer +\n+          \" tried to renew a token without a renewer\");\n     }\n     if (!id.getRenewer().toString().equals(renewer)) {\n-      throw new AccessControlException(\"Client \" + renewer + \n-                                       \" tries to renew a token with \" +\n-                                       \"renewer specified as \" + \n-                                       id.getRenewer());\n+      throw new AccessControlException(renewer +\n+          \" tries to renew a token with renewer \" + id.getRenewer());\n     }\n     DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n     if (key \u003d\u003d null) {\n       throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n           + id.getMasterKeyId()\n           + \" from cache. Failed to renew an unexpired token\"\n           + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n     }\n     byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n     if (!Arrays.equals(password, token.getPassword())) {\n-      throw new AccessControlException(\"Client \" + renewer\n-          + \" is trying to renew a token with \" + \"wrong password\");\n+      throw new AccessControlException(renewer +\n+          \" is trying to renew a token with wrong password\");\n     }\n     long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n     String trackingId \u003d getTrackingIdIfEnabled(id);\n     DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n         password, trackingId);\n \n     if (currentTokens.get(id) \u003d\u003d null) {\n       throw new InvalidToken(\"Renewal request for unknown token\");\n     }\n     currentTokens.put(id, info);\n     updateStoredToken(id, renewTime);\n     return renewTime;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                         String renewer) throws InvalidToken, IOException {\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token renewal for identifier: \" + id + \"; total currentTokens \"\n        +  currentTokens.size());\n\n    long now \u003d Time.now();\n    if (id.getMaxDate() \u003c now) {\n      throw new InvalidToken(renewer + \" tried to renew an expired token\");\n    }\n    if ((id.getRenewer() \u003d\u003d null) || (id.getRenewer().toString().isEmpty())) {\n      throw new AccessControlException(renewer +\n          \" tried to renew a token without a renewer\");\n    }\n    if (!id.getRenewer().toString().equals(renewer)) {\n      throw new AccessControlException(renewer +\n          \" tries to renew a token with renewer \" + id.getRenewer());\n    }\n    DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n    if (key \u003d\u003d null) {\n      throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n          + id.getMasterKeyId()\n          + \" from cache. Failed to renew an unexpired token\"\n          + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!Arrays.equals(password, token.getPassword())) {\n      throw new AccessControlException(renewer +\n          \" is trying to renew a token with wrong password\");\n    }\n    long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n    String trackingId \u003d getTrackingIdIfEnabled(id);\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n        password, trackingId);\n\n    if (currentTokens.get(id) \u003d\u003d null) {\n      throw new InvalidToken(\"Renewal request for unknown token\");\n    }\n    currentTokens.put(id, info);\n    updateStoredToken(id, renewTime);\n    return renewTime;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "e4374d803663c626de610cd5f062f25a6d7d5d4e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4680. Audit logging of delegation tokens for MR tracing. (Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1522012 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/13 12:57 PM",
      "commitName": "e4374d803663c626de610cd5f062f25a6d7d5d4e",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "29/05/13 5:52 PM",
      "commitNameOld": "fdfedf4c31fa1d8338fc915a631dfc57c1ca38da",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 104.79,
      "commitsBetweenForRepo": 649,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                          String renewer) throws InvalidToken, IOException {\n     long now \u003d Time.now();\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n     LOG.info(\"Token renewal requested for identifier: \"+id);\n     \n     if (id.getMaxDate() \u003c now) {\n       throw new InvalidToken(\"User \" + renewer + \n                              \" tried to renew an expired token\");\n     }\n     if ((id.getRenewer() \u003d\u003d null) || (id.getRenewer().toString().isEmpty())) {\n       throw new AccessControlException(\"User \" + renewer + \n                                        \" tried to renew a token without \" +\n                                        \"a renewer\");\n     }\n     if (!id.getRenewer().toString().equals(renewer)) {\n       throw new AccessControlException(\"Client \" + renewer + \n                                        \" tries to renew a token with \" +\n                                        \"renewer specified as \" + \n                                        id.getRenewer());\n     }\n     DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n     if (key \u003d\u003d null) {\n       throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n           + id.getMasterKeyId()\n           + \" from cache. Failed to renew an unexpired token\"\n           + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n     }\n     byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n     if (!Arrays.equals(password, token.getPassword())) {\n       throw new AccessControlException(\"Client \" + renewer\n           + \" is trying to renew a token with \" + \"wrong password\");\n     }\n     long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n+    String trackingId \u003d getTrackingIdIfEnabled(id);\n     DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n-        password);\n+        password, trackingId);\n \n     if (currentTokens.get(id) \u003d\u003d null) {\n       throw new InvalidToken(\"Renewal request for unknown token\");\n     }\n     currentTokens.put(id, info);\n     updateStoredToken(id, renewTime);\n     return renewTime;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                         String renewer) throws InvalidToken, IOException {\n    long now \u003d Time.now();\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token renewal requested for identifier: \"+id);\n    \n    if (id.getMaxDate() \u003c now) {\n      throw new InvalidToken(\"User \" + renewer + \n                             \" tried to renew an expired token\");\n    }\n    if ((id.getRenewer() \u003d\u003d null) || (id.getRenewer().toString().isEmpty())) {\n      throw new AccessControlException(\"User \" + renewer + \n                                       \" tried to renew a token without \" +\n                                       \"a renewer\");\n    }\n    if (!id.getRenewer().toString().equals(renewer)) {\n      throw new AccessControlException(\"Client \" + renewer + \n                                       \" tries to renew a token with \" +\n                                       \"renewer specified as \" + \n                                       id.getRenewer());\n    }\n    DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n    if (key \u003d\u003d null) {\n      throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n          + id.getMasterKeyId()\n          + \" from cache. Failed to renew an unexpired token\"\n          + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!Arrays.equals(password, token.getPassword())) {\n      throw new AccessControlException(\"Client \" + renewer\n          + \" is trying to renew a token with \" + \"wrong password\");\n    }\n    long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n    String trackingId \u003d getTrackingIdIfEnabled(id);\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n        password, trackingId);\n\n    if (currentTokens.get(id) \u003d\u003d null) {\n      throw new InvalidToken(\"Renewal request for unknown token\");\n    }\n    currentTokens.put(id, info);\n    updateStoredToken(id, renewTime);\n    return renewTime;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "fdfedf4c31fa1d8338fc915a631dfc57c1ca38da": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9574. Added new methods in AbstractDelegationTokenSecretManager for helping YARN ResourceManager to reuse code for RM restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487692 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/13 5:52 PM",
      "commitName": "fdfedf4c31fa1d8338fc915a631dfc57c1ca38da",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/04/13 8:18 AM",
      "commitNameOld": "f863543206a67ba295454609d618e16f91309b84",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 47.4,
      "commitsBetweenForRepo": 266,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,47 @@\n   public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                          String renewer) throws InvalidToken, IOException {\n     long now \u003d Time.now();\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n     LOG.info(\"Token renewal requested for identifier: \"+id);\n     \n     if (id.getMaxDate() \u003c now) {\n       throw new InvalidToken(\"User \" + renewer + \n                              \" tried to renew an expired token\");\n     }\n     if ((id.getRenewer() \u003d\u003d null) || (id.getRenewer().toString().isEmpty())) {\n       throw new AccessControlException(\"User \" + renewer + \n                                        \" tried to renew a token without \" +\n                                        \"a renewer\");\n     }\n     if (!id.getRenewer().toString().equals(renewer)) {\n       throw new AccessControlException(\"Client \" + renewer + \n                                        \" tries to renew a token with \" +\n                                        \"renewer specified as \" + \n                                        id.getRenewer());\n     }\n     DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n     if (key \u003d\u003d null) {\n       throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n           + id.getMasterKeyId()\n           + \" from cache. Failed to renew an unexpired token\"\n           + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n     }\n     byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n     if (!Arrays.equals(password, token.getPassword())) {\n       throw new AccessControlException(\"Client \" + renewer\n           + \" is trying to renew a token with \" + \"wrong password\");\n     }\n     long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n     DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n         password);\n \n     if (currentTokens.get(id) \u003d\u003d null) {\n       throw new InvalidToken(\"Renewal request for unknown token\");\n     }\n     currentTokens.put(id, info);\n+    updateStoredToken(id, renewTime);\n     return renewTime;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                         String renewer) throws InvalidToken, IOException {\n    long now \u003d Time.now();\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token renewal requested for identifier: \"+id);\n    \n    if (id.getMaxDate() \u003c now) {\n      throw new InvalidToken(\"User \" + renewer + \n                             \" tried to renew an expired token\");\n    }\n    if ((id.getRenewer() \u003d\u003d null) || (id.getRenewer().toString().isEmpty())) {\n      throw new AccessControlException(\"User \" + renewer + \n                                       \" tried to renew a token without \" +\n                                       \"a renewer\");\n    }\n    if (!id.getRenewer().toString().equals(renewer)) {\n      throw new AccessControlException(\"Client \" + renewer + \n                                       \" tries to renew a token with \" +\n                                       \"renewer specified as \" + \n                                       id.getRenewer());\n    }\n    DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n    if (key \u003d\u003d null) {\n      throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n          + id.getMasterKeyId()\n          + \" from cache. Failed to renew an unexpired token\"\n          + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!Arrays.equals(password, token.getPassword())) {\n      throw new AccessControlException(\"Client \" + renewer\n          + \" is trying to renew a token with \" + \"wrong password\");\n    }\n    long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n        password);\n\n    if (currentTokens.get(id) \u003d\u003d null) {\n      throw new InvalidToken(\"Renewal request for unknown token\");\n    }\n    currentTokens.put(id, info);\n    updateStoredToken(id, renewTime);\n    return renewTime;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8814. Replace string equals  by String#isEmpty(). Contributed by Brandon Li.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1387853 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/09/12 9:06 PM",
      "commitName": "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 26.13,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                          String renewer) throws InvalidToken, IOException {\n     long now \u003d Time.now();\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n     LOG.info(\"Token renewal requested for identifier: \"+id);\n     \n     if (id.getMaxDate() \u003c now) {\n       throw new InvalidToken(\"User \" + renewer + \n                              \" tried to renew an expired token\");\n     }\n-    if ((id.getRenewer() \u003d\u003d null) || (\"\".equals(id.getRenewer().toString()))) {\n+    if ((id.getRenewer() \u003d\u003d null) || (id.getRenewer().toString().isEmpty())) {\n       throw new AccessControlException(\"User \" + renewer + \n                                        \" tried to renew a token without \" +\n                                        \"a renewer\");\n     }\n     if (!id.getRenewer().toString().equals(renewer)) {\n       throw new AccessControlException(\"Client \" + renewer + \n                                        \" tries to renew a token with \" +\n                                        \"renewer specified as \" + \n                                        id.getRenewer());\n     }\n     DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n     if (key \u003d\u003d null) {\n       throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n           + id.getMasterKeyId()\n           + \" from cache. Failed to renew an unexpired token\"\n           + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n     }\n     byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n     if (!Arrays.equals(password, token.getPassword())) {\n       throw new AccessControlException(\"Client \" + renewer\n           + \" is trying to renew a token with \" + \"wrong password\");\n     }\n     long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n     DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n         password);\n \n     if (currentTokens.get(id) \u003d\u003d null) {\n       throw new InvalidToken(\"Renewal request for unknown token\");\n     }\n     currentTokens.put(id, info);\n     return renewTime;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                         String renewer) throws InvalidToken, IOException {\n    long now \u003d Time.now();\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token renewal requested for identifier: \"+id);\n    \n    if (id.getMaxDate() \u003c now) {\n      throw new InvalidToken(\"User \" + renewer + \n                             \" tried to renew an expired token\");\n    }\n    if ((id.getRenewer() \u003d\u003d null) || (id.getRenewer().toString().isEmpty())) {\n      throw new AccessControlException(\"User \" + renewer + \n                                       \" tried to renew a token without \" +\n                                       \"a renewer\");\n    }\n    if (!id.getRenewer().toString().equals(renewer)) {\n      throw new AccessControlException(\"Client \" + renewer + \n                                       \" tries to renew a token with \" +\n                                       \"renewer specified as \" + \n                                       id.getRenewer());\n    }\n    DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n    if (key \u003d\u003d null) {\n      throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n          + id.getMasterKeyId()\n          + \" from cache. Failed to renew an unexpired token\"\n          + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!Arrays.equals(password, token.getPassword())) {\n      throw new AccessControlException(\"Client \" + renewer\n          + \" is trying to renew a token with \" + \"wrong password\");\n    }\n    long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n        password);\n\n    if (currentTokens.get(id) \u003d\u003d null) {\n      throw new InvalidToken(\"Renewal request for unknown token\");\n    }\n    currentTokens.put(id, info);\n    return renewTime;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3641. Move server Util time methods to common and use now instead of System#currentTimeMillis. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 12:01 PM",
      "commitName": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "08/02/12 10:12 PM",
      "commitNameOld": "e918b91e23985fa1bb353c54a2e733f8ba6dbe49",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 154.53,
      "commitsBetweenForRepo": 990,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                          String renewer) throws InvalidToken, IOException {\n-    long now \u003d System.currentTimeMillis();\n+    long now \u003d Time.now();\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n     LOG.info(\"Token renewal requested for identifier: \"+id);\n     \n     if (id.getMaxDate() \u003c now) {\n       throw new InvalidToken(\"User \" + renewer + \n                              \" tried to renew an expired token\");\n     }\n     if ((id.getRenewer() \u003d\u003d null) || (\"\".equals(id.getRenewer().toString()))) {\n       throw new AccessControlException(\"User \" + renewer + \n                                        \" tried to renew a token without \" +\n                                        \"a renewer\");\n     }\n     if (!id.getRenewer().toString().equals(renewer)) {\n       throw new AccessControlException(\"Client \" + renewer + \n                                        \" tries to renew a token with \" +\n                                        \"renewer specified as \" + \n                                        id.getRenewer());\n     }\n     DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n     if (key \u003d\u003d null) {\n       throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n           + id.getMasterKeyId()\n           + \" from cache. Failed to renew an unexpired token\"\n           + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n     }\n     byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n     if (!Arrays.equals(password, token.getPassword())) {\n       throw new AccessControlException(\"Client \" + renewer\n           + \" is trying to renew a token with \" + \"wrong password\");\n     }\n     long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n     DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n         password);\n \n     if (currentTokens.get(id) \u003d\u003d null) {\n       throw new InvalidToken(\"Renewal request for unknown token\");\n     }\n     currentTokens.put(id, info);\n     return renewTime;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                         String renewer) throws InvalidToken, IOException {\n    long now \u003d Time.now();\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token renewal requested for identifier: \"+id);\n    \n    if (id.getMaxDate() \u003c now) {\n      throw new InvalidToken(\"User \" + renewer + \n                             \" tried to renew an expired token\");\n    }\n    if ((id.getRenewer() \u003d\u003d null) || (\"\".equals(id.getRenewer().toString()))) {\n      throw new AccessControlException(\"User \" + renewer + \n                                       \" tried to renew a token without \" +\n                                       \"a renewer\");\n    }\n    if (!id.getRenewer().toString().equals(renewer)) {\n      throw new AccessControlException(\"Client \" + renewer + \n                                       \" tries to renew a token with \" +\n                                       \"renewer specified as \" + \n                                       id.getRenewer());\n    }\n    DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n    if (key \u003d\u003d null) {\n      throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n          + id.getMasterKeyId()\n          + \" from cache. Failed to renew an unexpired token\"\n          + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!Arrays.equals(password, token.getPassword())) {\n      throw new AccessControlException(\"Client \" + renewer\n          + \" is trying to renew a token with \" + \"wrong password\");\n    }\n    long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n        password);\n\n    if (currentTokens.get(id) \u003d\u003d null) {\n      throw new InvalidToken(\"Renewal request for unknown token\");\n    }\n    currentTokens.put(id, info);\n    return renewTime;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                         String renewer) throws InvalidToken, IOException {\n    long now \u003d System.currentTimeMillis();\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token renewal requested for identifier: \"+id);\n    \n    if (id.getMaxDate() \u003c now) {\n      throw new InvalidToken(\"User \" + renewer + \n                             \" tried to renew an expired token\");\n    }\n    if ((id.getRenewer() \u003d\u003d null) || (\"\".equals(id.getRenewer().toString()))) {\n      throw new AccessControlException(\"User \" + renewer + \n                                       \" tried to renew a token without \" +\n                                       \"a renewer\");\n    }\n    if (!id.getRenewer().toString().equals(renewer)) {\n      throw new AccessControlException(\"Client \" + renewer + \n                                       \" tries to renew a token with \" +\n                                       \"renewer specified as \" + \n                                       id.getRenewer());\n    }\n    DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n    if (key \u003d\u003d null) {\n      throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n          + id.getMasterKeyId()\n          + \" from cache. Failed to renew an unexpired token\"\n          + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!Arrays.equals(password, token.getPassword())) {\n      throw new AccessControlException(\"Client \" + renewer\n          + \" is trying to renew a token with \" + \"wrong password\");\n    }\n    long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n        password);\n\n    if (currentTokens.get(id) \u003d\u003d null) {\n      throw new InvalidToken(\"Renewal request for unknown token\");\n    }\n    currentTokens.put(id, info);\n    return renewTime;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                         String renewer) throws InvalidToken, IOException {\n    long now \u003d System.currentTimeMillis();\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token renewal requested for identifier: \"+id);\n    \n    if (id.getMaxDate() \u003c now) {\n      throw new InvalidToken(\"User \" + renewer + \n                             \" tried to renew an expired token\");\n    }\n    if ((id.getRenewer() \u003d\u003d null) || (\"\".equals(id.getRenewer().toString()))) {\n      throw new AccessControlException(\"User \" + renewer + \n                                       \" tried to renew a token without \" +\n                                       \"a renewer\");\n    }\n    if (!id.getRenewer().toString().equals(renewer)) {\n      throw new AccessControlException(\"Client \" + renewer + \n                                       \" tries to renew a token with \" +\n                                       \"renewer specified as \" + \n                                       id.getRenewer());\n    }\n    DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n    if (key \u003d\u003d null) {\n      throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n          + id.getMasterKeyId()\n          + \" from cache. Failed to renew an unexpired token\"\n          + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!Arrays.equals(password, token.getPassword())) {\n      throw new AccessControlException(\"Client \" + renewer\n          + \" is trying to renew a token with \" + \"wrong password\");\n    }\n    long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n        password);\n\n    if (currentTokens.get(id) \u003d\u003d null) {\n      throw new InvalidToken(\"Renewal request for unknown token\");\n    }\n    currentTokens.put(id, info);\n    return renewTime;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                         String renewer) throws InvalidToken, IOException {\n    long now \u003d System.currentTimeMillis();\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token renewal requested for identifier: \"+id);\n    \n    if (id.getMaxDate() \u003c now) {\n      throw new InvalidToken(\"User \" + renewer + \n                             \" tried to renew an expired token\");\n    }\n    if ((id.getRenewer() \u003d\u003d null) || (\"\".equals(id.getRenewer().toString()))) {\n      throw new AccessControlException(\"User \" + renewer + \n                                       \" tried to renew a token without \" +\n                                       \"a renewer\");\n    }\n    if (!id.getRenewer().toString().equals(renewer)) {\n      throw new AccessControlException(\"Client \" + renewer + \n                                       \" tries to renew a token with \" +\n                                       \"renewer specified as \" + \n                                       id.getRenewer());\n    }\n    DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n    if (key \u003d\u003d null) {\n      throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n          + id.getMasterKeyId()\n          + \" from cache. Failed to renew an unexpired token\"\n          + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!Arrays.equals(password, token.getPassword())) {\n      throw new AccessControlException(\"Client \" + renewer\n          + \" is trying to renew a token with \" + \"wrong password\");\n    }\n    long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n        password);\n\n    if (currentTokens.get(id) \u003d\u003d null) {\n      throw new InvalidToken(\"Renewal request for unknown token\");\n    }\n    currentTokens.put(id, info);\n    return renewTime;\n  }",
      "path": "common/src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
        "newPath": "common/src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java"
      }
    },
    "fbdb24946051f7abc2d065217ef8c52e0cf3f16f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6620. NPE if renewer is passed as null in getDelegationToken. Contributed by Jitendra Pandey.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@953896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/10 3:48 PM",
      "commitName": "fbdb24946051f7abc2d065217ef8c52e0cf3f16f",
      "commitAuthor": "Jakob Homan",
      "commitDateOld": "11/06/10 2:34 PM",
      "commitNameOld": "6378822a67c0baa502d22201f5c2b478cbe1261c",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n   public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                          String renewer) throws InvalidToken, IOException {\n     long now \u003d System.currentTimeMillis();\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n-\n+    LOG.info(\"Token renewal requested for identifier: \"+id);\n+    \n     if (id.getMaxDate() \u003c now) {\n       throw new InvalidToken(\"User \" + renewer + \n                              \" tried to renew an expired token\");\n     }\n-    if (id.getRenewer() \u003d\u003d null) {\n+    if ((id.getRenewer() \u003d\u003d null) || (\"\".equals(id.getRenewer().toString()))) {\n       throw new AccessControlException(\"User \" + renewer + \n                                        \" tried to renew a token without \" +\n                                        \"a renewer\");\n     }\n     if (!id.getRenewer().toString().equals(renewer)) {\n       throw new AccessControlException(\"Client \" + renewer + \n                                        \" tries to renew a token with \" +\n                                        \"renewer specified as \" + \n                                        id.getRenewer());\n     }\n     DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n     if (key \u003d\u003d null) {\n       throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n           + id.getMasterKeyId()\n           + \" from cache. Failed to renew an unexpired token\"\n           + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n     }\n     byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n     if (!Arrays.equals(password, token.getPassword())) {\n       throw new AccessControlException(\"Client \" + renewer\n           + \" is trying to renew a token with \" + \"wrong password\");\n     }\n     long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n     DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n         password);\n \n     if (currentTokens.get(id) \u003d\u003d null) {\n       throw new InvalidToken(\"Renewal request for unknown token\");\n     }\n     currentTokens.put(id, info);\n     return renewTime;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                         String renewer) throws InvalidToken, IOException {\n    long now \u003d System.currentTimeMillis();\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    LOG.info(\"Token renewal requested for identifier: \"+id);\n    \n    if (id.getMaxDate() \u003c now) {\n      throw new InvalidToken(\"User \" + renewer + \n                             \" tried to renew an expired token\");\n    }\n    if ((id.getRenewer() \u003d\u003d null) || (\"\".equals(id.getRenewer().toString()))) {\n      throw new AccessControlException(\"User \" + renewer + \n                                       \" tried to renew a token without \" +\n                                       \"a renewer\");\n    }\n    if (!id.getRenewer().toString().equals(renewer)) {\n      throw new AccessControlException(\"Client \" + renewer + \n                                       \" tries to renew a token with \" +\n                                       \"renewer specified as \" + \n                                       id.getRenewer());\n    }\n    DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n    if (key \u003d\u003d null) {\n      throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n          + id.getMasterKeyId()\n          + \" from cache. Failed to renew an unexpired token\"\n          + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!Arrays.equals(password, token.getPassword())) {\n      throw new AccessControlException(\"Client \" + renewer\n          + \" is trying to renew a token with \" + \"wrong password\");\n    }\n    long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n        password);\n\n    if (currentTokens.get(id) \u003d\u003d null) {\n      throw new InvalidToken(\"Renewal request for unknown token\");\n    }\n    currentTokens.put(id, info);\n    return renewTime;\n  }",
      "path": "src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "27ab7f3db9a1489d81ecf32cc3493d1f4efae68b": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-6573. Support for persistent delegation tokens. Contributed by Jitendra Pandey.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@916468 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/02/10 1:43 PM",
      "commitName": "27ab7f3db9a1489d81ecf32cc3493d1f4efae68b",
      "commitAuthor": "Konstantin Shvachko",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-6573. Support for persistent delegation tokens. Contributed by Jitendra Pandey.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@916468 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/02/10 1:43 PM",
          "commitName": "27ab7f3db9a1489d81ecf32cc3493d1f4efae68b",
          "commitAuthor": "Konstantin Shvachko",
          "commitDateOld": "19/02/10 12:49 AM",
          "commitNameOld": "a417a8faeaa1a40e140c7f86463e699d92404454",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 6.54,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,45 @@\n-  public long renewToken(Token\u003cTokenIdent\u003e token,\n+  public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                          String renewer) throws InvalidToken, IOException {\n     long now \u003d System.currentTimeMillis();\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n-    synchronized (currentTokens) {\n-      if (currentTokens.get(id) \u003d\u003d null) {\n-        throw new InvalidToken(\"Renewal request for unknown token\");\n-      }\n-    }\n+\n     if (id.getMaxDate() \u003c now) {\n       throw new InvalidToken(\"User \" + renewer + \n                              \" tried to renew an expired token\");\n     }\n     if (id.getRenewer() \u003d\u003d null) {\n       throw new AccessControlException(\"User \" + renewer + \n                                        \" tried to renew a token without \" +\n                                        \"a renewer\");\n     }\n     if (!id.getRenewer().toString().equals(renewer)) {\n       throw new AccessControlException(\"Client \" + renewer + \n                                        \" tries to renew a token with \" +\n                                        \"renewer specified as \" + \n                                        id.getRenewer());\n     }\n-    DelegationKey key \u003d null;\n-    synchronized (this) {\n-      key \u003d allKeys.get(id.getMasterKeyId());\n-    }\n+    DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n     if (key \u003d\u003d null) {\n-      throw new InvalidToken(\"Unable to find master key for keyId\u003d\" + \n-                             id.getMasterKeyId() +\n-                             \" from cache. Failed to renew an unexpired token\"+\n-                             \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n+      throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n+          + id.getMasterKeyId()\n+          + \" from cache. Failed to renew an unexpired token\"\n+          + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n     }\n     byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n     if (!Arrays.equals(password, token.getPassword())) {\n-      throw new AccessControlException(\"Client \" + renewer + \n-                                       \" is trying to renew a token with \" +\n-                                       \"wrong password\");\n+      throw new AccessControlException(\"Client \" + renewer\n+          + \" is trying to renew a token with \" + \"wrong password\");\n     }\n-    DelegationTokenInformation info \u003d new DelegationTokenInformation(\n-        Math.min(id.getMaxDate(), now + tokenRenewInterval), password);\n-    synchronized (currentTokens) {\n-      currentTokens.put(id, info);\n+    long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n+    DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n+        password);\n+\n+    if (currentTokens.get(id) \u003d\u003d null) {\n+      throw new InvalidToken(\"Renewal request for unknown token\");\n     }\n-    return info.getRenewDate();\n+    currentTokens.put(id, info);\n+    return renewTime;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                         String renewer) throws InvalidToken, IOException {\n    long now \u003d System.currentTimeMillis();\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n\n    if (id.getMaxDate() \u003c now) {\n      throw new InvalidToken(\"User \" + renewer + \n                             \" tried to renew an expired token\");\n    }\n    if (id.getRenewer() \u003d\u003d null) {\n      throw new AccessControlException(\"User \" + renewer + \n                                       \" tried to renew a token without \" +\n                                       \"a renewer\");\n    }\n    if (!id.getRenewer().toString().equals(renewer)) {\n      throw new AccessControlException(\"Client \" + renewer + \n                                       \" tries to renew a token with \" +\n                                       \"renewer specified as \" + \n                                       id.getRenewer());\n    }\n    DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n    if (key \u003d\u003d null) {\n      throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n          + id.getMasterKeyId()\n          + \" from cache. Failed to renew an unexpired token\"\n          + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!Arrays.equals(password, token.getPassword())) {\n      throw new AccessControlException(\"Client \" + renewer\n          + \" is trying to renew a token with \" + \"wrong password\");\n    }\n    long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n        password);\n\n    if (currentTokens.get(id) \u003d\u003d null) {\n      throw new InvalidToken(\"Renewal request for unknown token\");\n    }\n    currentTokens.put(id, info);\n    return renewTime;\n  }",
          "path": "src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-6573. Support for persistent delegation tokens. Contributed by Jitendra Pandey.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@916468 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/02/10 1:43 PM",
          "commitName": "27ab7f3db9a1489d81ecf32cc3493d1f4efae68b",
          "commitAuthor": "Konstantin Shvachko",
          "commitDateOld": "19/02/10 12:49 AM",
          "commitNameOld": "a417a8faeaa1a40e140c7f86463e699d92404454",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 6.54,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,45 @@\n-  public long renewToken(Token\u003cTokenIdent\u003e token,\n+  public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                          String renewer) throws InvalidToken, IOException {\n     long now \u003d System.currentTimeMillis();\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n-    synchronized (currentTokens) {\n-      if (currentTokens.get(id) \u003d\u003d null) {\n-        throw new InvalidToken(\"Renewal request for unknown token\");\n-      }\n-    }\n+\n     if (id.getMaxDate() \u003c now) {\n       throw new InvalidToken(\"User \" + renewer + \n                              \" tried to renew an expired token\");\n     }\n     if (id.getRenewer() \u003d\u003d null) {\n       throw new AccessControlException(\"User \" + renewer + \n                                        \" tried to renew a token without \" +\n                                        \"a renewer\");\n     }\n     if (!id.getRenewer().toString().equals(renewer)) {\n       throw new AccessControlException(\"Client \" + renewer + \n                                        \" tries to renew a token with \" +\n                                        \"renewer specified as \" + \n                                        id.getRenewer());\n     }\n-    DelegationKey key \u003d null;\n-    synchronized (this) {\n-      key \u003d allKeys.get(id.getMasterKeyId());\n-    }\n+    DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n     if (key \u003d\u003d null) {\n-      throw new InvalidToken(\"Unable to find master key for keyId\u003d\" + \n-                             id.getMasterKeyId() +\n-                             \" from cache. Failed to renew an unexpired token\"+\n-                             \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n+      throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n+          + id.getMasterKeyId()\n+          + \" from cache. Failed to renew an unexpired token\"\n+          + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n     }\n     byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n     if (!Arrays.equals(password, token.getPassword())) {\n-      throw new AccessControlException(\"Client \" + renewer + \n-                                       \" is trying to renew a token with \" +\n-                                       \"wrong password\");\n+      throw new AccessControlException(\"Client \" + renewer\n+          + \" is trying to renew a token with \" + \"wrong password\");\n     }\n-    DelegationTokenInformation info \u003d new DelegationTokenInformation(\n-        Math.min(id.getMaxDate(), now + tokenRenewInterval), password);\n-    synchronized (currentTokens) {\n-      currentTokens.put(id, info);\n+    long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n+    DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n+        password);\n+\n+    if (currentTokens.get(id) \u003d\u003d null) {\n+      throw new InvalidToken(\"Renewal request for unknown token\");\n     }\n-    return info.getRenewDate();\n+    currentTokens.put(id, info);\n+    return renewTime;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized long renewToken(Token\u003cTokenIdent\u003e token,\n                         String renewer) throws InvalidToken, IOException {\n    long now \u003d System.currentTimeMillis();\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n\n    if (id.getMaxDate() \u003c now) {\n      throw new InvalidToken(\"User \" + renewer + \n                             \" tried to renew an expired token\");\n    }\n    if (id.getRenewer() \u003d\u003d null) {\n      throw new AccessControlException(\"User \" + renewer + \n                                       \" tried to renew a token without \" +\n                                       \"a renewer\");\n    }\n    if (!id.getRenewer().toString().equals(renewer)) {\n      throw new AccessControlException(\"Client \" + renewer + \n                                       \" tries to renew a token with \" +\n                                       \"renewer specified as \" + \n                                       id.getRenewer());\n    }\n    DelegationKey key \u003d allKeys.get(id.getMasterKeyId());\n    if (key \u003d\u003d null) {\n      throw new InvalidToken(\"Unable to find master key for keyId\u003d\"\n          + id.getMasterKeyId()\n          + \" from cache. Failed to renew an unexpired token\"\n          + \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!Arrays.equals(password, token.getPassword())) {\n      throw new AccessControlException(\"Client \" + renewer\n          + \" is trying to renew a token with \" + \"wrong password\");\n    }\n    long renewTime \u003d Math.min(id.getMaxDate(), now + tokenRenewInterval);\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(renewTime,\n        password);\n\n    if (currentTokens.get(id) \u003d\u003d null) {\n      throw new InvalidToken(\"Renewal request for unknown token\");\n    }\n    currentTokens.put(id, info);\n    return renewTime;\n  }",
          "path": "src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a417a8faeaa1a40e140c7f86463e699d92404454": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-6551. Delegation token renewing and cancelling should provide\nmeaningful exceptions when there are failures instead of returning \nfalse. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@911743 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/02/10 12:49 AM",
      "commitName": "a417a8faeaa1a40e140c7f86463e699d92404454",
      "commitAuthor": "Owen O\u0027Malley",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-6551. Delegation token renewing and cancelling should provide\nmeaningful exceptions when there are failures instead of returning \nfalse. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@911743 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/02/10 12:49 AM",
          "commitName": "a417a8faeaa1a40e140c7f86463e699d92404454",
          "commitAuthor": "Owen O\u0027Malley",
          "commitDateOld": "09/02/10 12:10 AM",
          "commitNameOld": "38c59c0af7595897dbff8e5f13b7ff6978b9c08b",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 10.03,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,50 @@\n-  public Boolean renewToken(Token\u003cTokenIdent\u003e token,\n-      String renewer) throws InvalidToken, IOException {\n+  public long renewToken(Token\u003cTokenIdent\u003e token,\n+                         String renewer) throws InvalidToken, IOException {\n     long now \u003d System.currentTimeMillis();\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n     synchronized (currentTokens) {\n       if (currentTokens.get(id) \u003d\u003d null) {\n-        LOG.warn(\"Renewal request for unknown token\");\n-        return false;\n+        throw new InvalidToken(\"Renewal request for unknown token\");\n       }\n     }\n     if (id.getMaxDate() \u003c now) {\n-      LOG.warn(\"Client \" + renewer + \" tries to renew an expired token\");\n-      return false;\n+      throw new InvalidToken(\"User \" + renewer + \n+                             \" tried to renew an expired token\");\n     }\n-    if (id.getRenewer() \u003d\u003d null || !id.getRenewer().toString().equals(renewer)) {\n-      LOG.warn(\"Client \" + renewer + \" tries to renew a token with \"\n-          + \"renewer specified as \" + id.getRenewer());\n-      return false;\n+    if (id.getRenewer() \u003d\u003d null) {\n+      throw new AccessControlException(\"User \" + renewer + \n+                                       \" tried to renew a token without \" +\n+                                       \"a renewer\");\n+    }\n+    if (!id.getRenewer().toString().equals(renewer)) {\n+      throw new AccessControlException(\"Client \" + renewer + \n+                                       \" tries to renew a token with \" +\n+                                       \"renewer specified as \" + \n+                                       id.getRenewer());\n     }\n     DelegationKey key \u003d null;\n     synchronized (this) {\n       key \u003d allKeys.get(id.getMasterKeyId());\n     }\n     if (key \u003d\u003d null) {\n-      LOG.warn(\"Unable to find master key for keyId\u003d\" + id.getMasterKeyId() \n-          + \" from cache. Failed to renew an unexpired token with sequenceNumber\u003d\" \n-          + id.getSequenceNumber() + \", issued by this key\");\n-      return false;\n+      throw new InvalidToken(\"Unable to find master key for keyId\u003d\" + \n+                             id.getMasterKeyId() +\n+                             \" from cache. Failed to renew an unexpired token\"+\n+                             \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n     }\n     byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n     if (!Arrays.equals(password, token.getPassword())) {\n-      LOG.warn(\"Client \" + renewer + \" is trying to renew a token with wrong password\");\n-      return false;\n+      throw new AccessControlException(\"Client \" + renewer + \n+                                       \" is trying to renew a token with \" +\n+                                       \"wrong password\");\n     }\n     DelegationTokenInformation info \u003d new DelegationTokenInformation(\n         Math.min(id.getMaxDate(), now + tokenRenewInterval), password);\n     synchronized (currentTokens) {\n       currentTokens.put(id, info);\n     }\n-    return true;\n+    return info.getRenewDate();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public long renewToken(Token\u003cTokenIdent\u003e token,\n                         String renewer) throws InvalidToken, IOException {\n    long now \u003d System.currentTimeMillis();\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    synchronized (currentTokens) {\n      if (currentTokens.get(id) \u003d\u003d null) {\n        throw new InvalidToken(\"Renewal request for unknown token\");\n      }\n    }\n    if (id.getMaxDate() \u003c now) {\n      throw new InvalidToken(\"User \" + renewer + \n                             \" tried to renew an expired token\");\n    }\n    if (id.getRenewer() \u003d\u003d null) {\n      throw new AccessControlException(\"User \" + renewer + \n                                       \" tried to renew a token without \" +\n                                       \"a renewer\");\n    }\n    if (!id.getRenewer().toString().equals(renewer)) {\n      throw new AccessControlException(\"Client \" + renewer + \n                                       \" tries to renew a token with \" +\n                                       \"renewer specified as \" + \n                                       id.getRenewer());\n    }\n    DelegationKey key \u003d null;\n    synchronized (this) {\n      key \u003d allKeys.get(id.getMasterKeyId());\n    }\n    if (key \u003d\u003d null) {\n      throw new InvalidToken(\"Unable to find master key for keyId\u003d\" + \n                             id.getMasterKeyId() +\n                             \" from cache. Failed to renew an unexpired token\"+\n                             \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!Arrays.equals(password, token.getPassword())) {\n      throw new AccessControlException(\"Client \" + renewer + \n                                       \" is trying to renew a token with \" +\n                                       \"wrong password\");\n    }\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(\n        Math.min(id.getMaxDate(), now + tokenRenewInterval), password);\n    synchronized (currentTokens) {\n      currentTokens.put(id, info);\n    }\n    return info.getRenewDate();\n  }",
          "path": "src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
          "extendedDetails": {
            "oldValue": "Boolean",
            "newValue": "long"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-6551. Delegation token renewing and cancelling should provide\nmeaningful exceptions when there are failures instead of returning \nfalse. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@911743 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/02/10 12:49 AM",
          "commitName": "a417a8faeaa1a40e140c7f86463e699d92404454",
          "commitAuthor": "Owen O\u0027Malley",
          "commitDateOld": "09/02/10 12:10 AM",
          "commitNameOld": "38c59c0af7595897dbff8e5f13b7ff6978b9c08b",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 10.03,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,50 @@\n-  public Boolean renewToken(Token\u003cTokenIdent\u003e token,\n-      String renewer) throws InvalidToken, IOException {\n+  public long renewToken(Token\u003cTokenIdent\u003e token,\n+                         String renewer) throws InvalidToken, IOException {\n     long now \u003d System.currentTimeMillis();\n     ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     TokenIdent id \u003d createIdentifier();\n     id.readFields(in);\n     synchronized (currentTokens) {\n       if (currentTokens.get(id) \u003d\u003d null) {\n-        LOG.warn(\"Renewal request for unknown token\");\n-        return false;\n+        throw new InvalidToken(\"Renewal request for unknown token\");\n       }\n     }\n     if (id.getMaxDate() \u003c now) {\n-      LOG.warn(\"Client \" + renewer + \" tries to renew an expired token\");\n-      return false;\n+      throw new InvalidToken(\"User \" + renewer + \n+                             \" tried to renew an expired token\");\n     }\n-    if (id.getRenewer() \u003d\u003d null || !id.getRenewer().toString().equals(renewer)) {\n-      LOG.warn(\"Client \" + renewer + \" tries to renew a token with \"\n-          + \"renewer specified as \" + id.getRenewer());\n-      return false;\n+    if (id.getRenewer() \u003d\u003d null) {\n+      throw new AccessControlException(\"User \" + renewer + \n+                                       \" tried to renew a token without \" +\n+                                       \"a renewer\");\n+    }\n+    if (!id.getRenewer().toString().equals(renewer)) {\n+      throw new AccessControlException(\"Client \" + renewer + \n+                                       \" tries to renew a token with \" +\n+                                       \"renewer specified as \" + \n+                                       id.getRenewer());\n     }\n     DelegationKey key \u003d null;\n     synchronized (this) {\n       key \u003d allKeys.get(id.getMasterKeyId());\n     }\n     if (key \u003d\u003d null) {\n-      LOG.warn(\"Unable to find master key for keyId\u003d\" + id.getMasterKeyId() \n-          + \" from cache. Failed to renew an unexpired token with sequenceNumber\u003d\" \n-          + id.getSequenceNumber() + \", issued by this key\");\n-      return false;\n+      throw new InvalidToken(\"Unable to find master key for keyId\u003d\" + \n+                             id.getMasterKeyId() +\n+                             \" from cache. Failed to renew an unexpired token\"+\n+                             \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n     }\n     byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n     if (!Arrays.equals(password, token.getPassword())) {\n-      LOG.warn(\"Client \" + renewer + \" is trying to renew a token with wrong password\");\n-      return false;\n+      throw new AccessControlException(\"Client \" + renewer + \n+                                       \" is trying to renew a token with \" +\n+                                       \"wrong password\");\n     }\n     DelegationTokenInformation info \u003d new DelegationTokenInformation(\n         Math.min(id.getMaxDate(), now + tokenRenewInterval), password);\n     synchronized (currentTokens) {\n       currentTokens.put(id, info);\n     }\n-    return true;\n+    return info.getRenewDate();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public long renewToken(Token\u003cTokenIdent\u003e token,\n                         String renewer) throws InvalidToken, IOException {\n    long now \u003d System.currentTimeMillis();\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    synchronized (currentTokens) {\n      if (currentTokens.get(id) \u003d\u003d null) {\n        throw new InvalidToken(\"Renewal request for unknown token\");\n      }\n    }\n    if (id.getMaxDate() \u003c now) {\n      throw new InvalidToken(\"User \" + renewer + \n                             \" tried to renew an expired token\");\n    }\n    if (id.getRenewer() \u003d\u003d null) {\n      throw new AccessControlException(\"User \" + renewer + \n                                       \" tried to renew a token without \" +\n                                       \"a renewer\");\n    }\n    if (!id.getRenewer().toString().equals(renewer)) {\n      throw new AccessControlException(\"Client \" + renewer + \n                                       \" tries to renew a token with \" +\n                                       \"renewer specified as \" + \n                                       id.getRenewer());\n    }\n    DelegationKey key \u003d null;\n    synchronized (this) {\n      key \u003d allKeys.get(id.getMasterKeyId());\n    }\n    if (key \u003d\u003d null) {\n      throw new InvalidToken(\"Unable to find master key for keyId\u003d\" + \n                             id.getMasterKeyId() +\n                             \" from cache. Failed to renew an unexpired token\"+\n                             \" with sequenceNumber\u003d\" + id.getSequenceNumber());\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!Arrays.equals(password, token.getPassword())) {\n      throw new AccessControlException(\"Client \" + renewer + \n                                       \" is trying to renew a token with \" +\n                                       \"wrong password\");\n    }\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(\n        Math.min(id.getMaxDate(), now + tokenRenewInterval), password);\n    synchronized (currentTokens) {\n      currentTokens.put(id, info);\n    }\n    return info.getRenewDate();\n  }",
          "path": "src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "38c59c0af7595897dbff8e5f13b7ff6978b9c08b": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6547. Move DelegationToken into Common, so that it can be used by\nMapReduce also. (devaraj via omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@907956 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/02/10 12:10 AM",
      "commitName": "38c59c0af7595897dbff8e5f13b7ff6978b9c08b",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,44 @@\n+  public Boolean renewToken(Token\u003cTokenIdent\u003e token,\n+      String renewer) throws InvalidToken, IOException {\n+    long now \u003d System.currentTimeMillis();\n+    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n+    DataInputStream in \u003d new DataInputStream(buf);\n+    TokenIdent id \u003d createIdentifier();\n+    id.readFields(in);\n+    synchronized (currentTokens) {\n+      if (currentTokens.get(id) \u003d\u003d null) {\n+        LOG.warn(\"Renewal request for unknown token\");\n+        return false;\n+      }\n+    }\n+    if (id.getMaxDate() \u003c now) {\n+      LOG.warn(\"Client \" + renewer + \" tries to renew an expired token\");\n+      return false;\n+    }\n+    if (id.getRenewer() \u003d\u003d null || !id.getRenewer().toString().equals(renewer)) {\n+      LOG.warn(\"Client \" + renewer + \" tries to renew a token with \"\n+          + \"renewer specified as \" + id.getRenewer());\n+      return false;\n+    }\n+    DelegationKey key \u003d null;\n+    synchronized (this) {\n+      key \u003d allKeys.get(id.getMasterKeyId());\n+    }\n+    if (key \u003d\u003d null) {\n+      LOG.warn(\"Unable to find master key for keyId\u003d\" + id.getMasterKeyId() \n+          + \" from cache. Failed to renew an unexpired token with sequenceNumber\u003d\" \n+          + id.getSequenceNumber() + \", issued by this key\");\n+      return false;\n+    }\n+    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n+    if (!Arrays.equals(password, token.getPassword())) {\n+      LOG.warn(\"Client \" + renewer + \" is trying to renew a token with wrong password\");\n+      return false;\n+    }\n+    DelegationTokenInformation info \u003d new DelegationTokenInformation(\n+        Math.min(id.getMaxDate(), now + tokenRenewInterval), password);\n+    synchronized (currentTokens) {\n+      currentTokens.put(id, info);\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Boolean renewToken(Token\u003cTokenIdent\u003e token,\n      String renewer) throws InvalidToken, IOException {\n    long now \u003d System.currentTimeMillis();\n    ByteArrayInputStream buf \u003d new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    TokenIdent id \u003d createIdentifier();\n    id.readFields(in);\n    synchronized (currentTokens) {\n      if (currentTokens.get(id) \u003d\u003d null) {\n        LOG.warn(\"Renewal request for unknown token\");\n        return false;\n      }\n    }\n    if (id.getMaxDate() \u003c now) {\n      LOG.warn(\"Client \" + renewer + \" tries to renew an expired token\");\n      return false;\n    }\n    if (id.getRenewer() \u003d\u003d null || !id.getRenewer().toString().equals(renewer)) {\n      LOG.warn(\"Client \" + renewer + \" tries to renew a token with \"\n          + \"renewer specified as \" + id.getRenewer());\n      return false;\n    }\n    DelegationKey key \u003d null;\n    synchronized (this) {\n      key \u003d allKeys.get(id.getMasterKeyId());\n    }\n    if (key \u003d\u003d null) {\n      LOG.warn(\"Unable to find master key for keyId\u003d\" + id.getMasterKeyId() \n          + \" from cache. Failed to renew an unexpired token with sequenceNumber\u003d\" \n          + id.getSequenceNumber() + \", issued by this key\");\n      return false;\n    }\n    byte[] password \u003d createPassword(token.getIdentifier(), key.getKey());\n    if (!Arrays.equals(password, token.getPassword())) {\n      LOG.warn(\"Client \" + renewer + \" is trying to renew a token with wrong password\");\n      return false;\n    }\n    DelegationTokenInformation info \u003d new DelegationTokenInformation(\n        Math.min(id.getMaxDate(), now + tokenRenewInterval), password);\n    synchronized (currentTokens) {\n      currentTokens.put(id, info);\n    }\n    return true;\n  }",
      "path": "src/java/org/apache/hadoop/security/token/delegation/AbstractDelegationTokenSecretManager.java"
    }
  }
}