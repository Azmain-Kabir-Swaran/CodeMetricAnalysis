{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProportionalCapacityPreemptionPolicy.java",
  "functionName": "cleanupStaledPreemptionCandidates",
  "functionId": "cleanupStaledPreemptionCandidates___currentTime-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
  "functionStartLine": 401,
  "functionEndLine": 409,
  "numCommitsSeen": 77,
  "timeTaken": 2796,
  "changeHistory": [
    "30fc5801966feb7f9bdd7d79db75acc595102913",
    "7cb3a3da96e59fc9b6528644dae5fb0ac1e44eac",
    "60e4116bf1d00afed91010e57357fe54057e4e39"
  ],
  "changeHistoryShort": {
    "30fc5801966feb7f9bdd7d79db75acc595102913": "Ybodychange",
    "7cb3a3da96e59fc9b6528644dae5fb0ac1e44eac": "Ymultichange(Yparameterchange,Ybodychange)",
    "60e4116bf1d00afed91010e57357fe54057e4e39": "Yintroduced"
  },
  "changeHistoryDetails": {
    "30fc5801966feb7f9bdd7d79db75acc595102913": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6519. Fix warnings from Spotbugs in hadoop-yarn-server-resourcemanager. Contributed by Weiwei Yang.\n",
      "commitDate": "01/05/17 7:45 AM",
      "commitName": "30fc5801966feb7f9bdd7d79db75acc595102913",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "23/01/17 10:52 AM",
      "commitNameOld": "ce832059db077fa95922198b066a737ed4f609fe",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 97.83,
      "commitsBetweenForRepo": 538,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,9 @@\n   private void cleanupStaledPreemptionCandidates(long currentTime) {\n     // Keep the preemptionCandidates list clean\n-    for (Iterator\u003cRMContainer\u003e i \u003d preemptionCandidates.keySet().iterator();\n-         i.hasNext(); ) {\n-      RMContainer id \u003d i.next();\n-      // garbage collect containers that are irrelevant for preemption\n-      // And avoid preempt selected containers for *this execution*\n-      // or within 1 ms\n-      if (preemptionCandidates.get(id) + 2 * maxWaitTime \u003c currentTime) {\n-        i.remove();\n-      }\n-    }\n+    // garbage collect containers that are irrelevant for preemption\n+    // And avoid preempt selected containers for *this execution*\n+    // or within 1 ms\n+    preemptionCandidates.entrySet()\n+        .removeIf(candidate -\u003e\n+            candidate.getValue() + 2 * maxWaitTime \u003c currentTime);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void cleanupStaledPreemptionCandidates(long currentTime) {\n    // Keep the preemptionCandidates list clean\n    // garbage collect containers that are irrelevant for preemption\n    // And avoid preempt selected containers for *this execution*\n    // or within 1 ms\n    preemptionCandidates.entrySet()\n        .removeIf(candidate -\u003e\n            candidate.getValue() + 2 * maxWaitTime \u003c currentTime);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
      "extendedDetails": {}
    },
    "7cb3a3da96e59fc9b6528644dae5fb0ac1e44eac": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4846. Fix random failures for TestCapacitySchedulerPreemption#testPreemptionPolicyShouldRespectAlreadyMarkedKillableContainers. (Bibin A Chundatt via wangda)\n",
      "commitDate": "22/04/16 11:40 AM",
      "commitName": "7cb3a3da96e59fc9b6528644dae5fb0ac1e44eac",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4846. Fix random failures for TestCapacitySchedulerPreemption#testPreemptionPolicyShouldRespectAlreadyMarkedKillableContainers. (Bibin A Chundatt via wangda)\n",
          "commitDate": "22/04/16 11:40 AM",
          "commitName": "7cb3a3da96e59fc9b6528644dae5fb0ac1e44eac",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "30/03/16 12:43 PM",
          "commitNameOld": "60e4116bf1d00afed91010e57357fe54057e4e39",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 22.96,
          "commitsBetweenForRepo": 153,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,13 @@\n-  private void cleanupStaledPreemptionCandidates() {\n+  private void cleanupStaledPreemptionCandidates(long currentTime) {\n     // Keep the preemptionCandidates list clean\n     for (Iterator\u003cRMContainer\u003e i \u003d preemptionCandidates.keySet().iterator();\n          i.hasNext(); ) {\n       RMContainer id \u003d i.next();\n       // garbage collect containers that are irrelevant for preemption\n-      if (preemptionCandidates.get(id) + 2 * maxWaitTime \u003c clock.getTime()) {\n+      // And avoid preempt selected containers for *this execution*\n+      // or within 1 ms\n+      if (preemptionCandidates.get(id) + 2 * maxWaitTime \u003c currentTime) {\n         i.remove();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void cleanupStaledPreemptionCandidates(long currentTime) {\n    // Keep the preemptionCandidates list clean\n    for (Iterator\u003cRMContainer\u003e i \u003d preemptionCandidates.keySet().iterator();\n         i.hasNext(); ) {\n      RMContainer id \u003d i.next();\n      // garbage collect containers that are irrelevant for preemption\n      // And avoid preempt selected containers for *this execution*\n      // or within 1 ms\n      if (preemptionCandidates.get(id) + 2 * maxWaitTime \u003c currentTime) {\n        i.remove();\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[currentTime-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4846. Fix random failures for TestCapacitySchedulerPreemption#testPreemptionPolicyShouldRespectAlreadyMarkedKillableContainers. (Bibin A Chundatt via wangda)\n",
          "commitDate": "22/04/16 11:40 AM",
          "commitName": "7cb3a3da96e59fc9b6528644dae5fb0ac1e44eac",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "30/03/16 12:43 PM",
          "commitNameOld": "60e4116bf1d00afed91010e57357fe54057e4e39",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 22.96,
          "commitsBetweenForRepo": 153,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,13 @@\n-  private void cleanupStaledPreemptionCandidates() {\n+  private void cleanupStaledPreemptionCandidates(long currentTime) {\n     // Keep the preemptionCandidates list clean\n     for (Iterator\u003cRMContainer\u003e i \u003d preemptionCandidates.keySet().iterator();\n          i.hasNext(); ) {\n       RMContainer id \u003d i.next();\n       // garbage collect containers that are irrelevant for preemption\n-      if (preemptionCandidates.get(id) + 2 * maxWaitTime \u003c clock.getTime()) {\n+      // And avoid preempt selected containers for *this execution*\n+      // or within 1 ms\n+      if (preemptionCandidates.get(id) + 2 * maxWaitTime \u003c currentTime) {\n         i.remove();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void cleanupStaledPreemptionCandidates(long currentTime) {\n    // Keep the preemptionCandidates list clean\n    for (Iterator\u003cRMContainer\u003e i \u003d preemptionCandidates.keySet().iterator();\n         i.hasNext(); ) {\n      RMContainer id \u003d i.next();\n      // garbage collect containers that are irrelevant for preemption\n      // And avoid preempt selected containers for *this execution*\n      // or within 1 ms\n      if (preemptionCandidates.get(id) + 2 * maxWaitTime \u003c currentTime) {\n        i.remove();\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
          "extendedDetails": {}
        }
      ]
    },
    "60e4116bf1d00afed91010e57357fe54057e4e39": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4822. Refactor existing Preemption Policy of CS for easier adding new approach to select preemption candidates. Contributed by Wangda Tan\n",
      "commitDate": "30/03/16 12:43 PM",
      "commitName": "60e4116bf1d00afed91010e57357fe54057e4e39",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,11 @@\n+  private void cleanupStaledPreemptionCandidates() {\n+    // Keep the preemptionCandidates list clean\n+    for (Iterator\u003cRMContainer\u003e i \u003d preemptionCandidates.keySet().iterator();\n+         i.hasNext(); ) {\n+      RMContainer id \u003d i.next();\n+      // garbage collect containers that are irrelevant for preemption\n+      if (preemptionCandidates.get(id) + 2 * maxWaitTime \u003c clock.getTime()) {\n+        i.remove();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void cleanupStaledPreemptionCandidates() {\n    // Keep the preemptionCandidates list clean\n    for (Iterator\u003cRMContainer\u003e i \u003d preemptionCandidates.keySet().iterator();\n         i.hasNext(); ) {\n      RMContainer id \u003d i.next();\n      // garbage collect containers that are irrelevant for preemption\n      if (preemptionCandidates.get(id) + 2 * maxWaitTime \u003c clock.getTime()) {\n        i.remove();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java"
    }
  }
}