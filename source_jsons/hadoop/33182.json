{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IntelFpgaOpenclPlugin.java",
  "functionName": "configureIP",
  "functionId": "configureIP___ipPath-String__device-FpgaDevice",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/IntelFpgaOpenclPlugin.java",
  "functionStartLine": 268,
  "functionEndLine": 295,
  "numCommitsSeen": 13,
  "timeTaken": 2852,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "8e1539eca8175f58f836daa5b0ad598c890cbb02",
    "7225ec0ceb49ae8f5588484297a20f07ec047420"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "8e1539eca8175f58f836daa5b0ad598c890cbb02": "Ymultichange(Yparameterchange,Ybodychange)",
    "7225ec0ceb49ae8f5588484297a20f07ec047420": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "12/03/19 2:15 PM",
      "commitNameOld": "8e1539eca8175f58f836daa5b0ad598c890cbb02",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 3.09,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public boolean configureIP(String ipPath, FpgaDevice device) {\n     // perform offline program the IP to get a quickest reprogramming sequence\n     // we need a mapping of \"major:minor\" to \"acl0\" to\n     // issue command \"aocl program \u003cacl0\u003e \u003cipPath\u003e\"\n     Shell.ShellCommandExecutor shexec;\n     String aclName;\n     aclName \u003d device.getAliasDevName();\n     shexec \u003d new Shell.ShellCommandExecutor(\n         new String[]{this.pathToExecutable, \"program\", aclName, ipPath});\n     try {\n       shexec.execute();\n       if (0 \u003d\u003d shexec.getExitCode()) {\n-        LOG.debug(shexec.getOutput());\n+        LOG.debug(\"{}\", shexec.getOutput());\n         LOG.info(\"Intel aocl program \" + ipPath + \" to \" +\n             aclName + \" successfully\");\n       } else {\n         LOG.error(\"Device programming failed, aocl output is:\");\n         LOG.error(shexec.getOutput());\n         return false;\n       }\n     } catch (IOException e) {\n       LOG.error(\"Intel aocl program \" + ipPath + \" to \" +\n           aclName + \" failed!\", e);\n       LOG.error(\"Aocl output: \" + shexec.getOutput());\n       return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean configureIP(String ipPath, FpgaDevice device) {\n    // perform offline program the IP to get a quickest reprogramming sequence\n    // we need a mapping of \"major:minor\" to \"acl0\" to\n    // issue command \"aocl program \u003cacl0\u003e \u003cipPath\u003e\"\n    Shell.ShellCommandExecutor shexec;\n    String aclName;\n    aclName \u003d device.getAliasDevName();\n    shexec \u003d new Shell.ShellCommandExecutor(\n        new String[]{this.pathToExecutable, \"program\", aclName, ipPath});\n    try {\n      shexec.execute();\n      if (0 \u003d\u003d shexec.getExitCode()) {\n        LOG.debug(\"{}\", shexec.getOutput());\n        LOG.info(\"Intel aocl program \" + ipPath + \" to \" +\n            aclName + \" successfully\");\n      } else {\n        LOG.error(\"Device programming failed, aocl output is:\");\n        LOG.error(shexec.getOutput());\n        return false;\n      }\n    } catch (IOException e) {\n      LOG.error(\"Intel aocl program \" + ipPath + \" to \" +\n          aclName + \" failed!\", e);\n      LOG.error(\"Aocl output: \" + shexec.getOutput());\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/IntelFpgaOpenclPlugin.java",
      "extendedDetails": {}
    },
    "8e1539eca8175f58f836daa5b0ad598c890cbb02": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9266. General improvements in IntelFpgaOpenclPlugin. Contributed by Peter Bacsko.\n",
      "commitDate": "12/03/19 2:15 PM",
      "commitName": "8e1539eca8175f58f836daa5b0ad598c890cbb02",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9266. General improvements in IntelFpgaOpenclPlugin. Contributed by Peter Bacsko.\n",
          "commitDate": "12/03/19 2:15 PM",
          "commitName": "8e1539eca8175f58f836daa5b0ad598c890cbb02",
          "commitAuthor": "Sunil G",
          "commitDateOld": "08/03/19 4:09 AM",
          "commitNameOld": "de15a66d782094632abd09222b87a01bab8e0f5e",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 4.38,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,28 @@\n-  public boolean configureIP(String ipPath, String majorMinorNumber) {\n+  public boolean configureIP(String ipPath, FpgaDevice device) {\n     // perform offline program the IP to get a quickest reprogramming sequence\n-    // we need a mapping of \"major:minor\" to \"acl0\" to issue command \"aocl program \u003cacl0\u003e \u003cipPath\u003e\"\n+    // we need a mapping of \"major:minor\" to \"acl0\" to\n+    // issue command \"aocl program \u003cacl0\u003e \u003cipPath\u003e\"\n     Shell.ShellCommandExecutor shexec;\n     String aclName;\n-    aclName \u003d this.aliasMap.get(majorMinorNumber);\n+    aclName \u003d device.getAliasDevName();\n     shexec \u003d new Shell.ShellCommandExecutor(\n         new String[]{this.pathToExecutable, \"program\", aclName, ipPath});\n     try {\n       shexec.execute();\n       if (0 \u003d\u003d shexec.getExitCode()) {\n         LOG.debug(shexec.getOutput());\n-        LOG.info(\"Intel aocl program \" + ipPath + \" to \" + aclName + \" successfully\");\n+        LOG.info(\"Intel aocl program \" + ipPath + \" to \" +\n+            aclName + \" successfully\");\n       } else {\n+        LOG.error(\"Device programming failed, aocl output is:\");\n+        LOG.error(shexec.getOutput());\n         return false;\n       }\n     } catch (IOException e) {\n-      LOG.error(\"Intel aocl program \" + ipPath + \" to \" + aclName + \" failed!\");\n-      e.printStackTrace();\n+      LOG.error(\"Intel aocl program \" + ipPath + \" to \" +\n+          aclName + \" failed!\", e);\n+      LOG.error(\"Aocl output: \" + shexec.getOutput());\n       return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean configureIP(String ipPath, FpgaDevice device) {\n    // perform offline program the IP to get a quickest reprogramming sequence\n    // we need a mapping of \"major:minor\" to \"acl0\" to\n    // issue command \"aocl program \u003cacl0\u003e \u003cipPath\u003e\"\n    Shell.ShellCommandExecutor shexec;\n    String aclName;\n    aclName \u003d device.getAliasDevName();\n    shexec \u003d new Shell.ShellCommandExecutor(\n        new String[]{this.pathToExecutable, \"program\", aclName, ipPath});\n    try {\n      shexec.execute();\n      if (0 \u003d\u003d shexec.getExitCode()) {\n        LOG.debug(shexec.getOutput());\n        LOG.info(\"Intel aocl program \" + ipPath + \" to \" +\n            aclName + \" successfully\");\n      } else {\n        LOG.error(\"Device programming failed, aocl output is:\");\n        LOG.error(shexec.getOutput());\n        return false;\n      }\n    } catch (IOException e) {\n      LOG.error(\"Intel aocl program \" + ipPath + \" to \" +\n          aclName + \" failed!\", e);\n      LOG.error(\"Aocl output: \" + shexec.getOutput());\n      return false;\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/IntelFpgaOpenclPlugin.java",
          "extendedDetails": {
            "oldValue": "[ipPath-String, majorMinorNumber-String]",
            "newValue": "[ipPath-String, device-FpgaDevice]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9266. General improvements in IntelFpgaOpenclPlugin. Contributed by Peter Bacsko.\n",
          "commitDate": "12/03/19 2:15 PM",
          "commitName": "8e1539eca8175f58f836daa5b0ad598c890cbb02",
          "commitAuthor": "Sunil G",
          "commitDateOld": "08/03/19 4:09 AM",
          "commitNameOld": "de15a66d782094632abd09222b87a01bab8e0f5e",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 4.38,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,28 @@\n-  public boolean configureIP(String ipPath, String majorMinorNumber) {\n+  public boolean configureIP(String ipPath, FpgaDevice device) {\n     // perform offline program the IP to get a quickest reprogramming sequence\n-    // we need a mapping of \"major:minor\" to \"acl0\" to issue command \"aocl program \u003cacl0\u003e \u003cipPath\u003e\"\n+    // we need a mapping of \"major:minor\" to \"acl0\" to\n+    // issue command \"aocl program \u003cacl0\u003e \u003cipPath\u003e\"\n     Shell.ShellCommandExecutor shexec;\n     String aclName;\n-    aclName \u003d this.aliasMap.get(majorMinorNumber);\n+    aclName \u003d device.getAliasDevName();\n     shexec \u003d new Shell.ShellCommandExecutor(\n         new String[]{this.pathToExecutable, \"program\", aclName, ipPath});\n     try {\n       shexec.execute();\n       if (0 \u003d\u003d shexec.getExitCode()) {\n         LOG.debug(shexec.getOutput());\n-        LOG.info(\"Intel aocl program \" + ipPath + \" to \" + aclName + \" successfully\");\n+        LOG.info(\"Intel aocl program \" + ipPath + \" to \" +\n+            aclName + \" successfully\");\n       } else {\n+        LOG.error(\"Device programming failed, aocl output is:\");\n+        LOG.error(shexec.getOutput());\n         return false;\n       }\n     } catch (IOException e) {\n-      LOG.error(\"Intel aocl program \" + ipPath + \" to \" + aclName + \" failed!\");\n-      e.printStackTrace();\n+      LOG.error(\"Intel aocl program \" + ipPath + \" to \" +\n+          aclName + \" failed!\", e);\n+      LOG.error(\"Aocl output: \" + shexec.getOutput());\n       return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean configureIP(String ipPath, FpgaDevice device) {\n    // perform offline program the IP to get a quickest reprogramming sequence\n    // we need a mapping of \"major:minor\" to \"acl0\" to\n    // issue command \"aocl program \u003cacl0\u003e \u003cipPath\u003e\"\n    Shell.ShellCommandExecutor shexec;\n    String aclName;\n    aclName \u003d device.getAliasDevName();\n    shexec \u003d new Shell.ShellCommandExecutor(\n        new String[]{this.pathToExecutable, \"program\", aclName, ipPath});\n    try {\n      shexec.execute();\n      if (0 \u003d\u003d shexec.getExitCode()) {\n        LOG.debug(shexec.getOutput());\n        LOG.info(\"Intel aocl program \" + ipPath + \" to \" +\n            aclName + \" successfully\");\n      } else {\n        LOG.error(\"Device programming failed, aocl output is:\");\n        LOG.error(shexec.getOutput());\n        return false;\n      }\n    } catch (IOException e) {\n      LOG.error(\"Intel aocl program \" + ipPath + \" to \" +\n          aclName + \" failed!\", e);\n      LOG.error(\"Aocl output: \" + shexec.getOutput());\n      return false;\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/IntelFpgaOpenclPlugin.java",
          "extendedDetails": {}
        }
      ]
    },
    "7225ec0ceb49ae8f5588484297a20f07ec047420": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6507. Add support in NodeManager to isolate FPGA devices with CGroups. (Zhankun Tang via wangda)\n\nChange-Id: Ic9afd841805f1035423915a0b0add5f3ba96cf9d\n",
      "commitDate": "01/12/17 10:50 AM",
      "commitName": "7225ec0ceb49ae8f5588484297a20f07ec047420",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,23 @@\n+  public boolean configureIP(String ipPath, String majorMinorNumber) {\n+    // perform offline program the IP to get a quickest reprogramming sequence\n+    // we need a mapping of \"major:minor\" to \"acl0\" to issue command \"aocl program \u003cacl0\u003e \u003cipPath\u003e\"\n+    Shell.ShellCommandExecutor shexec;\n+    String aclName;\n+    aclName \u003d this.aliasMap.get(majorMinorNumber);\n+    shexec \u003d new Shell.ShellCommandExecutor(\n+        new String[]{this.pathToExecutable, \"program\", aclName, ipPath});\n+    try {\n+      shexec.execute();\n+      if (0 \u003d\u003d shexec.getExitCode()) {\n+        LOG.debug(shexec.getOutput());\n+        LOG.info(\"Intel aocl program \" + ipPath + \" to \" + aclName + \" successfully\");\n+      } else {\n+        return false;\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Intel aocl program \" + ipPath + \" to \" + aclName + \" failed!\");\n+      e.printStackTrace();\n+      return false;\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean configureIP(String ipPath, String majorMinorNumber) {\n    // perform offline program the IP to get a quickest reprogramming sequence\n    // we need a mapping of \"major:minor\" to \"acl0\" to issue command \"aocl program \u003cacl0\u003e \u003cipPath\u003e\"\n    Shell.ShellCommandExecutor shexec;\n    String aclName;\n    aclName \u003d this.aliasMap.get(majorMinorNumber);\n    shexec \u003d new Shell.ShellCommandExecutor(\n        new String[]{this.pathToExecutable, \"program\", aclName, ipPath});\n    try {\n      shexec.execute();\n      if (0 \u003d\u003d shexec.getExitCode()) {\n        LOG.debug(shexec.getOutput());\n        LOG.info(\"Intel aocl program \" + ipPath + \" to \" + aclName + \" successfully\");\n      } else {\n        return false;\n      }\n    } catch (IOException e) {\n      LOG.error(\"Intel aocl program \" + ipPath + \" to \" + aclName + \" failed!\");\n      e.printStackTrace();\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/IntelFpgaOpenclPlugin.java"
    }
  }
}