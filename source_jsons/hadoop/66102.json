{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ChangeTracker.java",
  "functionName": "processException",
  "functionId": "processException___e-SdkBaseException__operation-String",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/impl/ChangeTracker.java",
  "functionStartLine": 231,
  "functionEndLine": 248,
  "numCommitsSeen": 4,
  "timeTaken": 1679,
  "changeHistory": [
    "a36274d69947648dbe82721220cc5240ec5d396d"
  ],
  "changeHistoryShort": {
    "a36274d69947648dbe82721220cc5240ec5d396d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a36274d69947648dbe82721220cc5240ec5d396d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
      "commitDate": "19/05/19 2:29 PM",
      "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthor": "Ben Roling",
      "diff": "@@ -0,0 +1,18 @@\n+  public void processException(SdkBaseException e, String operation) throws\n+      RemoteFileChangedException {\n+    if (e instanceof AmazonServiceException) {\n+      AmazonServiceException serviceException \u003d (AmazonServiceException) e;\n+      // This isn\u0027t really going to be hit due to\n+      // https://github.com/aws/aws-sdk-java/issues/1644\n+      if (serviceException.getStatusCode() \u003d\u003d SC_PRECONDITION_FAILED) {\n+        versionMismatches.incrementAndGet();\n+        throw new RemoteFileChangedException(uri, operation, String.format(\n+            RemoteFileChangedException.PRECONDITIONS_FAILED\n+                + \" on %s.\"\n+                + \" Version %s was unavailable\",\n+            getSource(),\n+            getRevisionId()),\n+            serviceException);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void processException(SdkBaseException e, String operation) throws\n      RemoteFileChangedException {\n    if (e instanceof AmazonServiceException) {\n      AmazonServiceException serviceException \u003d (AmazonServiceException) e;\n      // This isn\u0027t really going to be hit due to\n      // https://github.com/aws/aws-sdk-java/issues/1644\n      if (serviceException.getStatusCode() \u003d\u003d SC_PRECONDITION_FAILED) {\n        versionMismatches.incrementAndGet();\n        throw new RemoteFileChangedException(uri, operation, String.format(\n            RemoteFileChangedException.PRECONDITIONS_FAILED\n                + \" on %s.\"\n                + \" Version %s was unavailable\",\n            getSource(),\n            getRevisionId()),\n            serviceException);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/impl/ChangeTracker.java"
    }
  }
}