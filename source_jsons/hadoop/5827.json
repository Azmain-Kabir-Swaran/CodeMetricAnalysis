{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNodeRpcServer.java",
  "functionName": "getLinkTarget",
  "functionId": "getLinkTarget___path-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
  "functionStartLine": 1554,
  "functionEndLine": 1572,
  "numCommitsSeen": 324,
  "timeTaken": 10491,
  "changeHistory": [
    "693169ef34f856a27dc09d90a45fb4ec5b66ed2c",
    "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2",
    "db334bb8625da97c7e518cbcf477530c7ba7001e",
    "52ebd9c389e8f9eb445f3b764b37d9cf3f93e808",
    "36d1c49486587c2dbb193e8538b1d4510c462fa6",
    "9c2f4f634db124282f114a44b2e7dfc899693c1d",
    "b0632df93ae5d00180b21983d960d50a45f8fb7a",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "693169ef34f856a27dc09d90a45fb4ec5b66ed2c": "Ybodychange",
    "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2": "Ybodychange",
    "db334bb8625da97c7e518cbcf477530c7ba7001e": "Ybodychange",
    "52ebd9c389e8f9eb445f3b764b37d9cf3f93e808": "Ybodychange",
    "36d1c49486587c2dbb193e8538b1d4510c462fa6": "Ybodychange",
    "9c2f4f634db124282f114a44b2e7dfc899693c1d": "Ybodychange",
    "b0632df93ae5d00180b21983d960d50a45f8fb7a": "Ymovefromfile",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "693169ef34f856a27dc09d90a45fb4ec5b66ed2c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12882. Support full open(PathHandle) contract in HDFS\n",
      "commitDate": "11/12/17 8:14 PM",
      "commitName": "693169ef34f856a27dc09d90a45fb4ec5b66ed2c",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "30/11/17 12:18 PM",
      "commitNameOld": "b1c7654ee40b372ed777525a42981c7cf55b5c72",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 11.33,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   public String getLinkTarget(String path) throws IOException {\n     checkNNStartup();\n     metrics.incrGetLinkTargetOps();\n     HdfsFileStatus stat \u003d null;\n     try {\n-      stat \u003d namesystem.getFileInfo(path, false);\n+      stat \u003d namesystem.getFileInfo(path, false, false, false);\n     } catch (UnresolvedPathException e) {\n       return e.getResolvedPath().toString();\n     } catch (UnresolvedLinkException e) {\n       // The NameNode should only throw an UnresolvedPathException\n       throw new AssertionError(\"UnresolvedLinkException thrown\");\n     }\n     if (stat \u003d\u003d null) {\n       throw new FileNotFoundException(\"File does not exist: \" + path);\n     } else if (!stat.isSymlink()) {\n       throw new IOException(\"Path \" + path + \" is not a symbolic link\");\n     }\n     return DFSUtilClient.bytes2String(stat.getSymlinkInBytes());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getLinkTarget(String path) throws IOException {\n    checkNNStartup();\n    metrics.incrGetLinkTargetOps();\n    HdfsFileStatus stat \u003d null;\n    try {\n      stat \u003d namesystem.getFileInfo(path, false, false, false);\n    } catch (UnresolvedPathException e) {\n      return e.getResolvedPath().toString();\n    } catch (UnresolvedLinkException e) {\n      // The NameNode should only throw an UnresolvedPathException\n      throw new AssertionError(\"UnresolvedLinkException thrown\");\n    }\n    if (stat \u003d\u003d null) {\n      throw new FileNotFoundException(\"File does not exist: \" + path);\n    } else if (!stat.isSymlink()) {\n      throw new IOException(\"Path \" + path + \" is not a symbolic link\");\n    }\n    return DFSUtilClient.bytes2String(stat.getSymlinkInBytes());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6984. Serialize FileStatus via protobuf.\n",
      "commitDate": "02/08/17 12:12 PM",
      "commitName": "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "28/07/17 12:51 AM",
      "commitNameOld": "369f731264d77617452e4074d15404bd62ec6093",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 5.47,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   public String getLinkTarget(String path) throws IOException {\n     checkNNStartup();\n     metrics.incrGetLinkTargetOps();\n     HdfsFileStatus stat \u003d null;\n     try {\n       stat \u003d namesystem.getFileInfo(path, false);\n     } catch (UnresolvedPathException e) {\n       return e.getResolvedPath().toString();\n     } catch (UnresolvedLinkException e) {\n       // The NameNode should only throw an UnresolvedPathException\n       throw new AssertionError(\"UnresolvedLinkException thrown\");\n     }\n     if (stat \u003d\u003d null) {\n       throw new FileNotFoundException(\"File does not exist: \" + path);\n     } else if (!stat.isSymlink()) {\n       throw new IOException(\"Path \" + path + \" is not a symbolic link\");\n     }\n-    return stat.getSymlink();\n+    return DFSUtilClient.bytes2String(stat.getSymlinkInBytes());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getLinkTarget(String path) throws IOException {\n    checkNNStartup();\n    metrics.incrGetLinkTargetOps();\n    HdfsFileStatus stat \u003d null;\n    try {\n      stat \u003d namesystem.getFileInfo(path, false);\n    } catch (UnresolvedPathException e) {\n      return e.getResolvedPath().toString();\n    } catch (UnresolvedLinkException e) {\n      // The NameNode should only throw an UnresolvedPathException\n      throw new AssertionError(\"UnresolvedLinkException thrown\");\n    }\n    if (stat \u003d\u003d null) {\n      throw new FileNotFoundException(\"File does not exist: \" + path);\n    } else if (!stat.isSymlink()) {\n      throw new IOException(\"Path \" + path + \" is not a symbolic link\");\n    }\n    return DFSUtilClient.bytes2String(stat.getSymlinkInBytes());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "db334bb8625da97c7e518cbcf477530c7ba7001e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3443. Fix NPE when namenode transition to active during startup by adding checkNNStartup() in NameNodeRpcServer.  Contributed by Vinayakumar B\n",
      "commitDate": "21/01/15 11:33 AM",
      "commitName": "db334bb8625da97c7e518cbcf477530c7ba7001e",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "12/01/15 10:50 PM",
      "commitNameOld": "7e9358feb326d48b8c4f00249e7af5023cebd2e2",
      "commitAuthorOld": "Plamen Jeliazkov",
      "daysBetweenCommits": 8.53,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,19 @@\n   public String getLinkTarget(String path) throws IOException {\n+    checkNNStartup();\n     metrics.incrGetLinkTargetOps();\n     HdfsFileStatus stat \u003d null;\n     try {\n       stat \u003d namesystem.getFileInfo(path, false);\n     } catch (UnresolvedPathException e) {\n       return e.getResolvedPath().toString();\n     } catch (UnresolvedLinkException e) {\n       // The NameNode should only throw an UnresolvedPathException\n       throw new AssertionError(\"UnresolvedLinkException thrown\");\n     }\n     if (stat \u003d\u003d null) {\n       throw new FileNotFoundException(\"File does not exist: \" + path);\n     } else if (!stat.isSymlink()) {\n       throw new IOException(\"Path \" + path + \" is not a symbolic link\");\n     }\n     return stat.getSymlink();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getLinkTarget(String path) throws IOException {\n    checkNNStartup();\n    metrics.incrGetLinkTargetOps();\n    HdfsFileStatus stat \u003d null;\n    try {\n      stat \u003d namesystem.getFileInfo(path, false);\n    } catch (UnresolvedPathException e) {\n      return e.getResolvedPath().toString();\n    } catch (UnresolvedLinkException e) {\n      // The NameNode should only throw an UnresolvedPathException\n      throw new AssertionError(\"UnresolvedLinkException thrown\");\n    }\n    if (stat \u003d\u003d null) {\n      throw new FileNotFoundException(\"File does not exist: \" + path);\n    } else if (!stat.isSymlink()) {\n      throw new IOException(\"Path \" + path + \" is not a symbolic link\");\n    }\n    return stat.getSymlink();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "52ebd9c389e8f9eb445f3b764b37d9cf3f93e808": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4626. ClientProtocol#getLinkTarget should throw an exception for non-symlink and non-existent paths.  (Andrew Wang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493980 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 6:07 PM",
      "commitName": "52ebd9c389e8f9eb445f3b764b37d9cf3f93e808",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "14/06/13 8:52 PM",
      "commitNameOld": "5694c3404016b07d285c54e0f440317df5971391",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 2.89,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,18 @@\n   public String getLinkTarget(String path) throws IOException {\n     metrics.incrGetLinkTargetOps();\n+    HdfsFileStatus stat \u003d null;\n     try {\n-      HdfsFileStatus stat \u003d namesystem.getFileInfo(path, false);\n-      if (stat !\u003d null) {\n-        // NB: getSymlink throws IOException if !stat.isSymlink() \n-        return stat.getSymlink();\n-      }\n+      stat \u003d namesystem.getFileInfo(path, false);\n     } catch (UnresolvedPathException e) {\n       return e.getResolvedPath().toString();\n     } catch (UnresolvedLinkException e) {\n       // The NameNode should only throw an UnresolvedPathException\n       throw new AssertionError(\"UnresolvedLinkException thrown\");\n     }\n-    return null;\n+    if (stat \u003d\u003d null) {\n+      throw new FileNotFoundException(\"File does not exist: \" + path);\n+    } else if (!stat.isSymlink()) {\n+      throw new IOException(\"Path \" + path + \" is not a symbolic link\");\n+    }\n+    return stat.getSymlink();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getLinkTarget(String path) throws IOException {\n    metrics.incrGetLinkTargetOps();\n    HdfsFileStatus stat \u003d null;\n    try {\n      stat \u003d namesystem.getFileInfo(path, false);\n    } catch (UnresolvedPathException e) {\n      return e.getResolvedPath().toString();\n    } catch (UnresolvedLinkException e) {\n      // The NameNode should only throw an UnresolvedPathException\n      throw new AssertionError(\"UnresolvedLinkException thrown\");\n    }\n    if (stat \u003d\u003d null) {\n      throw new FileNotFoundException(\"File does not exist: \" + path);\n    } else if (!stat.isSymlink()) {\n      throw new IOException(\"Path \" + path + \" is not a symbolic link\");\n    }\n    return stat.getSymlink();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "36d1c49486587c2dbb193e8538b1d4510c462fa6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2693. Fix synchronization issues around state transition. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1221582 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/12/11 7:03 PM",
      "commitName": "36d1c49486587c2dbb193e8538b1d4510c462fa6",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "18/12/11 9:24 PM",
      "commitNameOld": "329717264f8380a1f0fd2cdabd1bf0517ff1067b",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.9,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,16 @@\n   public String getLinkTarget(String path) throws IOException {\n-    nn.checkOperation(OperationCategory.READ);\n     metrics.incrGetLinkTargetOps();\n     try {\n       HdfsFileStatus stat \u003d namesystem.getFileInfo(path, false);\n       if (stat !\u003d null) {\n         // NB: getSymlink throws IOException if !stat.isSymlink() \n         return stat.getSymlink();\n       }\n     } catch (UnresolvedPathException e) {\n       return e.getResolvedPath().toString();\n     } catch (UnresolvedLinkException e) {\n       // The NameNode should only throw an UnresolvedPathException\n       throw new AssertionError(\"UnresolvedLinkException thrown\");\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getLinkTarget(String path) throws IOException {\n    metrics.incrGetLinkTargetOps();\n    try {\n      HdfsFileStatus stat \u003d namesystem.getFileInfo(path, false);\n      if (stat !\u003d null) {\n        // NB: getSymlink throws IOException if !stat.isSymlink() \n        return stat.getSymlink();\n      }\n    } catch (UnresolvedPathException e) {\n      return e.getResolvedPath().toString();\n    } catch (UnresolvedLinkException e) {\n      // The NameNode should only throw an UnresolvedPathException\n      throw new AssertionError(\"UnresolvedLinkException thrown\");\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "9c2f4f634db124282f114a44b2e7dfc899693c1d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2514. Link resolution bug for intermediate symlinks with relative targets. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1204370 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/11/11 11:01 PM",
      "commitName": "9c2f4f634db124282f114a44b2e7dfc899693c1d",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "14/11/11 5:13 PM",
      "commitNameOld": "9a3f147fdd5421460889b266ead3a2300323cda2",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 6.24,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,16 @@\n   public String getLinkTarget(String path) throws IOException {\n     metrics.incrGetLinkTargetOps();\n-    /* Resolves the first symlink in the given path, returning a\n-     * new path consisting of the target of the symlink and any \n-     * remaining path components from the original path.\n-     */\n     try {\n       HdfsFileStatus stat \u003d namesystem.getFileInfo(path, false);\n       if (stat !\u003d null) {\n         // NB: getSymlink throws IOException if !stat.isSymlink() \n         return stat.getSymlink();\n       }\n     } catch (UnresolvedPathException e) {\n       return e.getResolvedPath().toString();\n     } catch (UnresolvedLinkException e) {\n       // The NameNode should only throw an UnresolvedPathException\n       throw new AssertionError(\"UnresolvedLinkException thrown\");\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getLinkTarget(String path) throws IOException {\n    metrics.incrGetLinkTargetOps();\n    try {\n      HdfsFileStatus stat \u003d namesystem.getFileInfo(path, false);\n      if (stat !\u003d null) {\n        // NB: getSymlink throws IOException if !stat.isSymlink() \n        return stat.getSymlink();\n      }\n    } catch (UnresolvedPathException e) {\n      return e.getResolvedPath().toString();\n    } catch (UnresolvedLinkException e) {\n      // The NameNode should only throw an UnresolvedPathException\n      throw new AssertionError(\"UnresolvedLinkException thrown\");\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "b0632df93ae5d00180b21983d960d50a45f8fb7a": {
      "type": "Ymovefromfile",
      "commitMessage": "HDFS-2197. Refactor RPC call implementations out of NameNode class. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165463 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/09/11 5:41 PM",
      "commitName": "b0632df93ae5d00180b21983d960d50a45f8fb7a",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "05/09/11 5:34 PM",
      "commitNameOld": "d1438b501dae9efc7aa84de35a57e1b8e6f5645e",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String getLinkTarget(String path) throws IOException {\n    metrics.incrGetLinkTargetOps();\n    /* Resolves the first symlink in the given path, returning a\n     * new path consisting of the target of the symlink and any \n     * remaining path components from the original path.\n     */\n    try {\n      HdfsFileStatus stat \u003d namesystem.getFileInfo(path, false);\n      if (stat !\u003d null) {\n        // NB: getSymlink throws IOException if !stat.isSymlink() \n        return stat.getSymlink();\n      }\n    } catch (UnresolvedPathException e) {\n      return e.getResolvedPath().toString();\n    } catch (UnresolvedLinkException e) {\n      // The NameNode should only throw an UnresolvedPathException\n      throw new AssertionError(\"UnresolvedLinkException thrown\");\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
        "oldMethodName": "getLinkTarget",
        "newMethodName": "getLinkTarget"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String getLinkTarget(String path) throws IOException {\n    metrics.incrGetLinkTargetOps();\n    /* Resolves the first symlink in the given path, returning a\n     * new path consisting of the target of the symlink and any \n     * remaining path components from the original path.\n     */\n    try {\n      HdfsFileStatus stat \u003d namesystem.getFileInfo(path, false);\n      if (stat !\u003d null) {\n        // NB: getSymlink throws IOException if !stat.isSymlink() \n        return stat.getSymlink();\n      }\n    } catch (UnresolvedPathException e) {\n      return e.getResolvedPath().toString();\n    } catch (UnresolvedLinkException e) {\n      // The NameNode should only throw an UnresolvedPathException\n      throw new AssertionError(\"UnresolvedLinkException thrown\");\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String getLinkTarget(String path) throws IOException {\n    metrics.incrGetLinkTargetOps();\n    /* Resolves the first symlink in the given path, returning a\n     * new path consisting of the target of the symlink and any \n     * remaining path components from the original path.\n     */\n    try {\n      HdfsFileStatus stat \u003d namesystem.getFileInfo(path, false);\n      if (stat !\u003d null) {\n        // NB: getSymlink throws IOException if !stat.isSymlink() \n        return stat.getSymlink();\n      }\n    } catch (UnresolvedPathException e) {\n      return e.getResolvedPath().toString();\n    } catch (UnresolvedLinkException e) {\n      // The NameNode should only throw an UnresolvedPathException\n      throw new AssertionError(\"UnresolvedLinkException thrown\");\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,20 @@\n+  public String getLinkTarget(String path) throws IOException {\n+    metrics.incrGetLinkTargetOps();\n+    /* Resolves the first symlink in the given path, returning a\n+     * new path consisting of the target of the symlink and any \n+     * remaining path components from the original path.\n+     */\n+    try {\n+      HdfsFileStatus stat \u003d namesystem.getFileInfo(path, false);\n+      if (stat !\u003d null) {\n+        // NB: getSymlink throws IOException if !stat.isSymlink() \n+        return stat.getSymlink();\n+      }\n+    } catch (UnresolvedPathException e) {\n+      return e.getResolvedPath().toString();\n+    } catch (UnresolvedLinkException e) {\n+      // The NameNode should only throw an UnresolvedPathException\n+      throw new AssertionError(\"UnresolvedLinkException thrown\");\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String getLinkTarget(String path) throws IOException {\n    metrics.incrGetLinkTargetOps();\n    /* Resolves the first symlink in the given path, returning a\n     * new path consisting of the target of the symlink and any \n     * remaining path components from the original path.\n     */\n    try {\n      HdfsFileStatus stat \u003d namesystem.getFileInfo(path, false);\n      if (stat !\u003d null) {\n        // NB: getSymlink throws IOException if !stat.isSymlink() \n        return stat.getSymlink();\n      }\n    } catch (UnresolvedPathException e) {\n      return e.getResolvedPath().toString();\n    } catch (UnresolvedLinkException e) {\n      // The NameNode should only throw an UnresolvedPathException\n      throw new AssertionError(\"UnresolvedLinkException thrown\");\n    }\n    return null;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java"
    }
  }
}