{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShortCircuitShm.java",
  "functionName": "registerSlot",
  "functionId": "registerSlot___slotIdx-int__blockId-ExtendedBlockId",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitShm.java",
  "functionStartLine": 574,
  "functionEndLine": 600,
  "numCommitsSeen": 10,
  "timeTaken": 2470,
  "changeHistory": [
    "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42",
    "e85a3fecc68b48a3dc9af5daa466a24f3b39545b",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560",
    "33500fd304ee1c9a1b5966de1eb1e78b58f0af26",
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f"
  ],
  "changeHistoryShort": {
    "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42": "Yfilerename",
    "e85a3fecc68b48a3dc9af5daa466a24f3b39545b": "Ybodychange",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": "Yfilerename",
    "33500fd304ee1c9a1b5966de1eb1e78b58f0af26": "Ybodychange",
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8934. Move ShortCircuitShm to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "22/08/15 1:31 PM",
      "commitName": "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "22/08/15 12:39 AM",
      "commitNameOld": "61bf9cae6f3882c6e9a9222f59457b9be91e3018",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 0.54,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized public final Slot registerSlot(int slotIdx,\n      ExtendedBlockId blockId) throws InvalidRequestException {\n    if (slotIdx \u003c 0) {\n      throw new InvalidRequestException(this + \": invalid negative slot \" +\n          \"index \" + slotIdx);\n    }\n    if (slotIdx \u003e\u003d slots.length) {\n      throw new InvalidRequestException(this + \": invalid slot \" +\n          \"index \" + slotIdx);\n    }\n    if (allocatedSlots.get(slotIdx)) {\n      throw new InvalidRequestException(this + \": slot \" + slotIdx +\n          \" is already in use.\");\n    }\n    Slot slot \u003d new Slot(calculateSlotAddress(slotIdx), blockId);\n    if (!slot.isValid()) {\n      throw new InvalidRequestException(this + \": slot \" + slotIdx +\n          \" is not marked as valid.\");\n    }\n    slots[slotIdx] \u003d slot;\n    allocatedSlots.set(slotIdx, true);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": registerSlot \" + slotIdx + \": allocatedSlots\u003d\" + allocatedSlots +\n                  StringUtils.getStackTrace(Thread.currentThread()));\n    }\n    return slot;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitShm.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitShm.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitShm.java"
      }
    },
    "e85a3fecc68b48a3dc9af5daa466a24f3b39545b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6750. The DataNode should use its shared memory segment to mark short-circuit replicas that have been unlinked as stale (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1613537 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/14 4:56 PM",
      "commitName": "e85a3fecc68b48a3dc9af5daa466a24f3b39545b",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "01/04/14 10:09 PM",
      "commitNameOld": "f93d99990a9a02ce693cd74466c2e5f127c1f560",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 114.78,
      "commitsBetweenForRepo": 722,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   synchronized public final Slot registerSlot(int slotIdx,\n       ExtendedBlockId blockId) throws InvalidRequestException {\n     if (slotIdx \u003c 0) {\n       throw new InvalidRequestException(this + \": invalid negative slot \" +\n           \"index \" + slotIdx);\n     }\n     if (slotIdx \u003e\u003d slots.length) {\n       throw new InvalidRequestException(this + \": invalid slot \" +\n           \"index \" + slotIdx);\n     }\n     if (allocatedSlots.get(slotIdx)) {\n       throw new InvalidRequestException(this + \": slot \" + slotIdx +\n           \" is already in use.\");\n     }\n     Slot slot \u003d new Slot(calculateSlotAddress(slotIdx), blockId);\n     if (!slot.isValid()) {\n       throw new InvalidRequestException(this + \": slot \" + slotIdx +\n-          \" has not been allocated.\");\n+          \" is not marked as valid.\");\n     }\n     slots[slotIdx] \u003d slot;\n     allocatedSlots.set(slotIdx, true);\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(this + \": registerSlot \" + slotIdx + \": allocatedSlots\u003d\" + allocatedSlots +\n                   StringUtils.getStackTrace(Thread.currentThread()));\n     }\n     return slot;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public final Slot registerSlot(int slotIdx,\n      ExtendedBlockId blockId) throws InvalidRequestException {\n    if (slotIdx \u003c 0) {\n      throw new InvalidRequestException(this + \": invalid negative slot \" +\n          \"index \" + slotIdx);\n    }\n    if (slotIdx \u003e\u003d slots.length) {\n      throw new InvalidRequestException(this + \": invalid slot \" +\n          \"index \" + slotIdx);\n    }\n    if (allocatedSlots.get(slotIdx)) {\n      throw new InvalidRequestException(this + \": slot \" + slotIdx +\n          \" is already in use.\");\n    }\n    Slot slot \u003d new Slot(calculateSlotAddress(slotIdx), blockId);\n    if (!slot.isValid()) {\n      throw new InvalidRequestException(this + \": slot \" + slotIdx +\n          \" is not marked as valid.\");\n    }\n    slots[slotIdx] \u003d slot;\n    allocatedSlots.set(slotIdx, true);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": registerSlot \" + slotIdx + \": allocatedSlots\u003d\" + allocatedSlots +\n                  StringUtils.getStackTrace(Thread.currentThread()));\n    }\n    return slot;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitShm.java",
      "extendedDetails": {}
    },
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-6167. Relocate the non-public API classes in the hdfs.client package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583878 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/14 10:09 PM",
      "commitName": "f93d99990a9a02ce693cd74466c2e5f127c1f560",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/04/14 6:00 PM",
      "commitNameOld": "5c7cb51775bd3d4a6e3e1bd501b3a8d747733fe3",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized public final Slot registerSlot(int slotIdx,\n      ExtendedBlockId blockId) throws InvalidRequestException {\n    if (slotIdx \u003c 0) {\n      throw new InvalidRequestException(this + \": invalid negative slot \" +\n          \"index \" + slotIdx);\n    }\n    if (slotIdx \u003e\u003d slots.length) {\n      throw new InvalidRequestException(this + \": invalid slot \" +\n          \"index \" + slotIdx);\n    }\n    if (allocatedSlots.get(slotIdx)) {\n      throw new InvalidRequestException(this + \": slot \" + slotIdx +\n          \" is already in use.\");\n    }\n    Slot slot \u003d new Slot(calculateSlotAddress(slotIdx), blockId);\n    if (!slot.isValid()) {\n      throw new InvalidRequestException(this + \": slot \" + slotIdx +\n          \" has not been allocated.\");\n    }\n    slots[slotIdx] \u003d slot;\n    allocatedSlots.set(slotIdx, true);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": registerSlot \" + slotIdx + \": allocatedSlots\u003d\" + allocatedSlots +\n                  StringUtils.getStackTrace(Thread.currentThread()));\n    }\n    return slot;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitShm.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/ShortCircuitShm.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitShm.java"
      }
    },
    "33500fd304ee1c9a1b5966de1eb1e78b58f0af26": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6040. fix DFSClient issue without libhadoop.so and some other ShortCircuitShm cleanups (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573883 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/03/14 10:31 PM",
      "commitName": "33500fd304ee1c9a1b5966de1eb1e78b58f0af26",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "02/03/14 7:58 PM",
      "commitNameOld": "dd049a2f6097da189ccce2f5890a2b9bc77fa73f",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 1.11,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,27 @@\n   synchronized public final Slot registerSlot(int slotIdx,\n       ExtendedBlockId blockId) throws InvalidRequestException {\n+    if (slotIdx \u003c 0) {\n+      throw new InvalidRequestException(this + \": invalid negative slot \" +\n+          \"index \" + slotIdx);\n+    }\n+    if (slotIdx \u003e\u003d slots.length) {\n+      throw new InvalidRequestException(this + \": invalid slot \" +\n+          \"index \" + slotIdx);\n+    }\n     if (allocatedSlots.get(slotIdx)) {\n       throw new InvalidRequestException(this + \": slot \" + slotIdx +\n           \" is already in use.\");\n     }\n     Slot slot \u003d new Slot(calculateSlotAddress(slotIdx), blockId);\n     if (!slot.isValid()) {\n       throw new InvalidRequestException(this + \": slot \" + slotIdx +\n           \" has not been allocated.\");\n     }\n     slots[slotIdx] \u003d slot;\n     allocatedSlots.set(slotIdx, true);\n     if (LOG.isTraceEnabled()) {\n-      //LOG.trace(this + \": registerSlot \" + slotIdx);\n       LOG.trace(this + \": registerSlot \" + slotIdx + \": allocatedSlots\u003d\" + allocatedSlots +\n                   StringUtils.getStackTrace(Thread.currentThread()));\n     }\n     return slot;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public final Slot registerSlot(int slotIdx,\n      ExtendedBlockId blockId) throws InvalidRequestException {\n    if (slotIdx \u003c 0) {\n      throw new InvalidRequestException(this + \": invalid negative slot \" +\n          \"index \" + slotIdx);\n    }\n    if (slotIdx \u003e\u003d slots.length) {\n      throw new InvalidRequestException(this + \": invalid slot \" +\n          \"index \" + slotIdx);\n    }\n    if (allocatedSlots.get(slotIdx)) {\n      throw new InvalidRequestException(this + \": slot \" + slotIdx +\n          \" is already in use.\");\n    }\n    Slot slot \u003d new Slot(calculateSlotAddress(slotIdx), blockId);\n    if (!slot.isValid()) {\n      throw new InvalidRequestException(this + \": slot \" + slotIdx +\n          \" has not been allocated.\");\n    }\n    slots[slotIdx] \u003d slot;\n    allocatedSlots.set(slotIdx, true);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": registerSlot \" + slotIdx + \": allocatedSlots\u003d\" + allocatedSlots +\n                  StringUtils.getStackTrace(Thread.currentThread()));\n    }\n    return slot;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/ShortCircuitShm.java",
      "extendedDetails": {}
    },
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5950. The DFSClient and DataNode should use shared memory segments to communicate short-circuit information (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/14 7:58 PM",
      "commitName": "dd049a2f6097da189ccce2f5890a2b9bc77fa73f",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,20 @@\n+  synchronized public final Slot registerSlot(int slotIdx,\n+      ExtendedBlockId blockId) throws InvalidRequestException {\n+    if (allocatedSlots.get(slotIdx)) {\n+      throw new InvalidRequestException(this + \": slot \" + slotIdx +\n+          \" is already in use.\");\n+    }\n+    Slot slot \u003d new Slot(calculateSlotAddress(slotIdx), blockId);\n+    if (!slot.isValid()) {\n+      throw new InvalidRequestException(this + \": slot \" + slotIdx +\n+          \" has not been allocated.\");\n+    }\n+    slots[slotIdx] \u003d slot;\n+    allocatedSlots.set(slotIdx, true);\n+    if (LOG.isTraceEnabled()) {\n+      //LOG.trace(this + \": registerSlot \" + slotIdx);\n+      LOG.trace(this + \": registerSlot \" + slotIdx + \": allocatedSlots\u003d\" + allocatedSlots +\n+                  StringUtils.getStackTrace(Thread.currentThread()));\n+    }\n+    return slot;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public final Slot registerSlot(int slotIdx,\n      ExtendedBlockId blockId) throws InvalidRequestException {\n    if (allocatedSlots.get(slotIdx)) {\n      throw new InvalidRequestException(this + \": slot \" + slotIdx +\n          \" is already in use.\");\n    }\n    Slot slot \u003d new Slot(calculateSlotAddress(slotIdx), blockId);\n    if (!slot.isValid()) {\n      throw new InvalidRequestException(this + \": slot \" + slotIdx +\n          \" has not been allocated.\");\n    }\n    slots[slotIdx] \u003d slot;\n    allocatedSlots.set(slotIdx, true);\n    if (LOG.isTraceEnabled()) {\n      //LOG.trace(this + \": registerSlot \" + slotIdx);\n      LOG.trace(this + \": registerSlot \" + slotIdx + \": allocatedSlots\u003d\" + allocatedSlots +\n                  StringUtils.getStackTrace(Thread.currentThread()));\n    }\n    return slot;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/ShortCircuitShm.java"
    }
  }
}