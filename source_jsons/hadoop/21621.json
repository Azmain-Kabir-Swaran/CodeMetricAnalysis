{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobSubmitter.java",
  "functionName": "readTokensFromFiles",
  "functionId": "readTokensFromFiles___conf-Configuration__credentials-Credentials",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
  "functionStartLine": 386,
  "functionEndLine": 417,
  "numCommitsSeen": 41,
  "timeTaken": 6391,
  "changeHistory": [
    "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939",
    "ca33bdd5c6afd45110edb6961d1c492bcb009472",
    "a0b1f10a30dc2736cc136f257b0d3bf0140158bb",
    "f222bde273cc10a38945dc31e85206a0c4f06a12",
    "52945a33cc3fcb3b961cce0e7e3ca01291f2a223",
    "905b17876c44634545a68300ff2f2d73fb86d3b7",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939": "Ybodychange",
    "ca33bdd5c6afd45110edb6961d1c492bcb009472": "Ybodychange",
    "a0b1f10a30dc2736cc136f257b0d3bf0140158bb": "Ybodychange",
    "f222bde273cc10a38945dc31e85206a0c4f06a12": "Ybodychange",
    "52945a33cc3fcb3b961cce0e7e3ca01291f2a223": "Ybodychange",
    "905b17876c44634545a68300ff2f2d73fb86d3b7": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15550. Avoid static initialization of ObjectMappers\n",
      "commitDate": "25/06/18 3:36 PM",
      "commitName": "7a3c6e9c3cd9ffdc71946fd12f5c3d59718c4939",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "02/11/17 1:43 AM",
      "commitNameOld": "178751ed8c9d47038acf8616c226f1f52e884feb",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 235.58,
      "commitsBetweenForRepo": 2240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   private void readTokensFromFiles(Configuration conf, Credentials credentials)\n   throws IOException {\n     // add tokens and secrets coming from a token storage file\n     String binaryTokenFilename \u003d\n       conf.get(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY);\n     if (binaryTokenFilename !\u003d null) {\n       Credentials binary \u003d Credentials.readTokenStorageFile(\n           FileSystem.getLocal(conf).makeQualified(\n               new Path(binaryTokenFilename)),\n           conf);\n       credentials.addAll(binary);\n     }\n     // add secret keys coming from a json file\n     String tokensFileName \u003d conf.get(\"mapreduce.job.credentials.json\");\n     if(tokensFileName !\u003d null) {\n       LOG.info(\"loading user\u0027s secret keys from \" + tokensFileName);\n       String localFileName \u003d new Path(tokensFileName).toUri().getPath();\n \n       try {\n         // read JSON\n-        Map\u003cString, String\u003e nm \u003d READER.readValue(new File(localFileName));\n+        Map\u003cString, String\u003e nm \u003d JsonSerialization.mapReader().readValue(\n+            new File(localFileName));\n \n         for(Map.Entry\u003cString, String\u003e ent: nm.entrySet()) {\n           credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()\n               .getBytes(Charsets.UTF_8));\n         }\n       } catch (JsonMappingException | JsonParseException e) {\n         LOG.warn(\"couldn\u0027t parse Token Cache JSON file with user secret keys\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void readTokensFromFiles(Configuration conf, Credentials credentials)\n  throws IOException {\n    // add tokens and secrets coming from a token storage file\n    String binaryTokenFilename \u003d\n      conf.get(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY);\n    if (binaryTokenFilename !\u003d null) {\n      Credentials binary \u003d Credentials.readTokenStorageFile(\n          FileSystem.getLocal(conf).makeQualified(\n              new Path(binaryTokenFilename)),\n          conf);\n      credentials.addAll(binary);\n    }\n    // add secret keys coming from a json file\n    String tokensFileName \u003d conf.get(\"mapreduce.job.credentials.json\");\n    if(tokensFileName !\u003d null) {\n      LOG.info(\"loading user\u0027s secret keys from \" + tokensFileName);\n      String localFileName \u003d new Path(tokensFileName).toUri().getPath();\n\n      try {\n        // read JSON\n        Map\u003cString, String\u003e nm \u003d JsonSerialization.mapReader().readValue(\n            new File(localFileName));\n\n        for(Map.Entry\u003cString, String\u003e ent: nm.entrySet()) {\n          credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()\n              .getBytes(Charsets.UTF_8));\n        }\n      } catch (JsonMappingException | JsonParseException e) {\n        LOG.warn(\"couldn\u0027t parse Token Cache JSON file with user secret keys\");\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
      "extendedDetails": {}
    },
    "ca33bdd5c6afd45110edb6961d1c492bcb009472": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6790. Update jackson from 1.9.13 to 2.x in hadoop-mapreduce.\n",
      "commitDate": "06/11/16 6:19 PM",
      "commitName": "ca33bdd5c6afd45110edb6961d1c492bcb009472",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "19/07/16 8:15 PM",
      "commitNameOld": "8f0d3d69d65a252439610e6f13d679808d768569",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 109.96,
      "commitsBetweenForRepo": 817,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,31 @@\n   private void readTokensFromFiles(Configuration conf, Credentials credentials)\n   throws IOException {\n     // add tokens and secrets coming from a token storage file\n     String binaryTokenFilename \u003d\n       conf.get(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY);\n     if (binaryTokenFilename !\u003d null) {\n       Credentials binary \u003d Credentials.readTokenStorageFile(\n           FileSystem.getLocal(conf).makeQualified(\n               new Path(binaryTokenFilename)),\n           conf);\n       credentials.addAll(binary);\n     }\n     // add secret keys coming from a json file\n     String tokensFileName \u003d conf.get(\"mapreduce.job.credentials.json\");\n     if(tokensFileName !\u003d null) {\n       LOG.info(\"loading user\u0027s secret keys from \" + tokensFileName);\n       String localFileName \u003d new Path(tokensFileName).toUri().getPath();\n \n-      boolean json_error \u003d false;\n       try {\n         // read JSON\n         Map\u003cString, String\u003e nm \u003d READER.readValue(new File(localFileName));\n \n         for(Map.Entry\u003cString, String\u003e ent: nm.entrySet()) {\n           credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()\n               .getBytes(Charsets.UTF_8));\n         }\n-      } catch (JsonMappingException e) {\n-        json_error \u003d true;\n-      } catch (JsonParseException e) {\n-        json_error \u003d true;\n-      }\n-      if(json_error)\n+      } catch (JsonMappingException | JsonParseException e) {\n         LOG.warn(\"couldn\u0027t parse Token Cache JSON file with user secret keys\");\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void readTokensFromFiles(Configuration conf, Credentials credentials)\n  throws IOException {\n    // add tokens and secrets coming from a token storage file\n    String binaryTokenFilename \u003d\n      conf.get(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY);\n    if (binaryTokenFilename !\u003d null) {\n      Credentials binary \u003d Credentials.readTokenStorageFile(\n          FileSystem.getLocal(conf).makeQualified(\n              new Path(binaryTokenFilename)),\n          conf);\n      credentials.addAll(binary);\n    }\n    // add secret keys coming from a json file\n    String tokensFileName \u003d conf.get(\"mapreduce.job.credentials.json\");\n    if(tokensFileName !\u003d null) {\n      LOG.info(\"loading user\u0027s secret keys from \" + tokensFileName);\n      String localFileName \u003d new Path(tokensFileName).toUri().getPath();\n\n      try {\n        // read JSON\n        Map\u003cString, String\u003e nm \u003d READER.readValue(new File(localFileName));\n\n        for(Map.Entry\u003cString, String\u003e ent: nm.entrySet()) {\n          credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()\n              .getBytes(Charsets.UTF_8));\n        }\n      } catch (JsonMappingException | JsonParseException e) {\n        LOG.warn(\"couldn\u0027t parse Token Cache JSON file with user secret keys\");\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
      "extendedDetails": {}
    },
    "a0b1f10a30dc2736cc136f257b0d3bf0140158bb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6626. Reuse ObjectMapper instance in MapReduce. Contributed by Lin Yiqun.\n",
      "commitDate": "09/02/16 10:05 AM",
      "commitName": "a0b1f10a30dc2736cc136f257b0d3bf0140158bb",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "14/05/15 4:07 PM",
      "commitNameOld": "6b710a42e00acca405e085724c89cda016cf7442",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 270.79,
      "commitsBetweenForRepo": 1993,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,36 @@\n   private void readTokensFromFiles(Configuration conf, Credentials credentials)\n   throws IOException {\n     // add tokens and secrets coming from a token storage file\n     String binaryTokenFilename \u003d\n       conf.get(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY);\n     if (binaryTokenFilename !\u003d null) {\n       Credentials binary \u003d Credentials.readTokenStorageFile(\n           FileSystem.getLocal(conf).makeQualified(\n               new Path(binaryTokenFilename)),\n           conf);\n       credentials.addAll(binary);\n     }\n     // add secret keys coming from a json file\n     String tokensFileName \u003d conf.get(\"mapreduce.job.credentials.json\");\n     if(tokensFileName !\u003d null) {\n       LOG.info(\"loading user\u0027s secret keys from \" + tokensFileName);\n       String localFileName \u003d new Path(tokensFileName).toUri().getPath();\n \n       boolean json_error \u003d false;\n       try {\n         // read JSON\n-        ObjectMapper mapper \u003d new ObjectMapper();\n-        Map\u003cString, String\u003e nm \u003d \n-          mapper.readValue(new File(localFileName), Map.class);\n+        Map\u003cString, String\u003e nm \u003d READER.readValue(new File(localFileName));\n \n         for(Map.Entry\u003cString, String\u003e ent: nm.entrySet()) {\n           credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()\n               .getBytes(Charsets.UTF_8));\n         }\n       } catch (JsonMappingException e) {\n         json_error \u003d true;\n       } catch (JsonParseException e) {\n         json_error \u003d true;\n       }\n       if(json_error)\n         LOG.warn(\"couldn\u0027t parse Token Cache JSON file with user secret keys\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void readTokensFromFiles(Configuration conf, Credentials credentials)\n  throws IOException {\n    // add tokens and secrets coming from a token storage file\n    String binaryTokenFilename \u003d\n      conf.get(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY);\n    if (binaryTokenFilename !\u003d null) {\n      Credentials binary \u003d Credentials.readTokenStorageFile(\n          FileSystem.getLocal(conf).makeQualified(\n              new Path(binaryTokenFilename)),\n          conf);\n      credentials.addAll(binary);\n    }\n    // add secret keys coming from a json file\n    String tokensFileName \u003d conf.get(\"mapreduce.job.credentials.json\");\n    if(tokensFileName !\u003d null) {\n      LOG.info(\"loading user\u0027s secret keys from \" + tokensFileName);\n      String localFileName \u003d new Path(tokensFileName).toUri().getPath();\n\n      boolean json_error \u003d false;\n      try {\n        // read JSON\n        Map\u003cString, String\u003e nm \u003d READER.readValue(new File(localFileName));\n\n        for(Map.Entry\u003cString, String\u003e ent: nm.entrySet()) {\n          credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()\n              .getBytes(Charsets.UTF_8));\n        }\n      } catch (JsonMappingException e) {\n        json_error \u003d true;\n      } catch (JsonParseException e) {\n        json_error \u003d true;\n      }\n      if(json_error)\n        LOG.warn(\"couldn\u0027t parse Token Cache JSON file with user secret keys\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
      "extendedDetails": {}
    },
    "f222bde273cc10a38945dc31e85206a0c4f06a12": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6100. replace mapreduce.job.credentials.binary with MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY for better readability. Contributed by Zhihai Xu.\n",
      "commitDate": "16/03/15 10:36 PM",
      "commitName": "f222bde273cc10a38945dc31e85206a0c4f06a12",
      "commitAuthor": "Harsh J",
      "commitDateOld": "04/03/15 2:42 PM",
      "commitNameOld": "c66c3ac6bf9f63177279feec3f2917e4b882e2bc",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 12.29,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   private void readTokensFromFiles(Configuration conf, Credentials credentials)\n   throws IOException {\n     // add tokens and secrets coming from a token storage file\n     String binaryTokenFilename \u003d\n-      conf.get(\"mapreduce.job.credentials.binary\");\n+      conf.get(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY);\n     if (binaryTokenFilename !\u003d null) {\n       Credentials binary \u003d Credentials.readTokenStorageFile(\n           FileSystem.getLocal(conf).makeQualified(\n               new Path(binaryTokenFilename)),\n           conf);\n       credentials.addAll(binary);\n     }\n     // add secret keys coming from a json file\n     String tokensFileName \u003d conf.get(\"mapreduce.job.credentials.json\");\n     if(tokensFileName !\u003d null) {\n       LOG.info(\"loading user\u0027s secret keys from \" + tokensFileName);\n       String localFileName \u003d new Path(tokensFileName).toUri().getPath();\n \n       boolean json_error \u003d false;\n       try {\n         // read JSON\n         ObjectMapper mapper \u003d new ObjectMapper();\n         Map\u003cString, String\u003e nm \u003d \n           mapper.readValue(new File(localFileName), Map.class);\n \n         for(Map.Entry\u003cString, String\u003e ent: nm.entrySet()) {\n           credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()\n               .getBytes(Charsets.UTF_8));\n         }\n       } catch (JsonMappingException e) {\n         json_error \u003d true;\n       } catch (JsonParseException e) {\n         json_error \u003d true;\n       }\n       if(json_error)\n         LOG.warn(\"couldn\u0027t parse Token Cache JSON file with user secret keys\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void readTokensFromFiles(Configuration conf, Credentials credentials)\n  throws IOException {\n    // add tokens and secrets coming from a token storage file\n    String binaryTokenFilename \u003d\n      conf.get(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY);\n    if (binaryTokenFilename !\u003d null) {\n      Credentials binary \u003d Credentials.readTokenStorageFile(\n          FileSystem.getLocal(conf).makeQualified(\n              new Path(binaryTokenFilename)),\n          conf);\n      credentials.addAll(binary);\n    }\n    // add secret keys coming from a json file\n    String tokensFileName \u003d conf.get(\"mapreduce.job.credentials.json\");\n    if(tokensFileName !\u003d null) {\n      LOG.info(\"loading user\u0027s secret keys from \" + tokensFileName);\n      String localFileName \u003d new Path(tokensFileName).toUri().getPath();\n\n      boolean json_error \u003d false;\n      try {\n        // read JSON\n        ObjectMapper mapper \u003d new ObjectMapper();\n        Map\u003cString, String\u003e nm \u003d \n          mapper.readValue(new File(localFileName), Map.class);\n\n        for(Map.Entry\u003cString, String\u003e ent: nm.entrySet()) {\n          credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()\n              .getBytes(Charsets.UTF_8));\n        }\n      } catch (JsonMappingException e) {\n        json_error \u003d true;\n      } catch (JsonParseException e) {\n        json_error \u003d true;\n      }\n      if(json_error)\n        LOG.warn(\"couldn\u0027t parse Token Cache JSON file with user secret keys\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
      "extendedDetails": {}
    },
    "52945a33cc3fcb3b961cce0e7e3ca01291f2a223": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6086. mapreduce.job.credentials.binary should allow all URIs. (Zhihai Xu via kasha)\n",
      "commitDate": "18/09/14 3:46 PM",
      "commitName": "52945a33cc3fcb3b961cce0e7e3ca01291f2a223",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "10/07/14 5:43 PM",
      "commitNameOld": "95986dd2fb4527c43fa4c088c61fb7b4bd794d23",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 69.92,
      "commitsBetweenForRepo": 613,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,38 @@\n   private void readTokensFromFiles(Configuration conf, Credentials credentials)\n   throws IOException {\n     // add tokens and secrets coming from a token storage file\n     String binaryTokenFilename \u003d\n       conf.get(\"mapreduce.job.credentials.binary\");\n     if (binaryTokenFilename !\u003d null) {\n       Credentials binary \u003d Credentials.readTokenStorageFile(\n-          new Path(\"file:///\" + binaryTokenFilename), conf);\n+          FileSystem.getLocal(conf).makeQualified(\n+              new Path(binaryTokenFilename)),\n+          conf);\n       credentials.addAll(binary);\n     }\n     // add secret keys coming from a json file\n     String tokensFileName \u003d conf.get(\"mapreduce.job.credentials.json\");\n     if(tokensFileName !\u003d null) {\n       LOG.info(\"loading user\u0027s secret keys from \" + tokensFileName);\n       String localFileName \u003d new Path(tokensFileName).toUri().getPath();\n \n       boolean json_error \u003d false;\n       try {\n         // read JSON\n         ObjectMapper mapper \u003d new ObjectMapper();\n         Map\u003cString, String\u003e nm \u003d \n           mapper.readValue(new File(localFileName), Map.class);\n \n         for(Map.Entry\u003cString, String\u003e ent: nm.entrySet()) {\n           credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()\n               .getBytes(Charsets.UTF_8));\n         }\n       } catch (JsonMappingException e) {\n         json_error \u003d true;\n       } catch (JsonParseException e) {\n         json_error \u003d true;\n       }\n       if(json_error)\n         LOG.warn(\"couldn\u0027t parse Token Cache JSON file with user secret keys\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void readTokensFromFiles(Configuration conf, Credentials credentials)\n  throws IOException {\n    // add tokens and secrets coming from a token storage file\n    String binaryTokenFilename \u003d\n      conf.get(\"mapreduce.job.credentials.binary\");\n    if (binaryTokenFilename !\u003d null) {\n      Credentials binary \u003d Credentials.readTokenStorageFile(\n          FileSystem.getLocal(conf).makeQualified(\n              new Path(binaryTokenFilename)),\n          conf);\n      credentials.addAll(binary);\n    }\n    // add secret keys coming from a json file\n    String tokensFileName \u003d conf.get(\"mapreduce.job.credentials.json\");\n    if(tokensFileName !\u003d null) {\n      LOG.info(\"loading user\u0027s secret keys from \" + tokensFileName);\n      String localFileName \u003d new Path(tokensFileName).toUri().getPath();\n\n      boolean json_error \u003d false;\n      try {\n        // read JSON\n        ObjectMapper mapper \u003d new ObjectMapper();\n        Map\u003cString, String\u003e nm \u003d \n          mapper.readValue(new File(localFileName), Map.class);\n\n        for(Map.Entry\u003cString, String\u003e ent: nm.entrySet()) {\n          credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()\n              .getBytes(Charsets.UTF_8));\n        }\n      } catch (JsonMappingException e) {\n        json_error \u003d true;\n      } catch (JsonParseException e) {\n        json_error \u003d true;\n      }\n      if(json_error)\n        LOG.warn(\"couldn\u0027t parse Token Cache JSON file with user secret keys\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
      "extendedDetails": {}
    },
    "905b17876c44634545a68300ff2f2d73fb86d3b7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4723. Fix warnings found by findbugs 2. Contributed by Sandy Ryza\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1409601 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/12 4:16 PM",
      "commitName": "905b17876c44634545a68300ff2f2d73fb86d3b7",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "31/08/12 1:37 PM",
      "commitNameOld": "63f941d2ad71bf528c5f565ec206a49571c59169",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 75.15,
      "commitsBetweenForRepo": 447,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private void readTokensFromFiles(Configuration conf, Credentials credentials)\n   throws IOException {\n     // add tokens and secrets coming from a token storage file\n     String binaryTokenFilename \u003d\n       conf.get(\"mapreduce.job.credentials.binary\");\n     if (binaryTokenFilename !\u003d null) {\n       Credentials binary \u003d Credentials.readTokenStorageFile(\n           new Path(\"file:///\" + binaryTokenFilename), conf);\n       credentials.addAll(binary);\n     }\n     // add secret keys coming from a json file\n     String tokensFileName \u003d conf.get(\"mapreduce.job.credentials.json\");\n     if(tokensFileName !\u003d null) {\n       LOG.info(\"loading user\u0027s secret keys from \" + tokensFileName);\n       String localFileName \u003d new Path(tokensFileName).toUri().getPath();\n \n       boolean json_error \u003d false;\n       try {\n         // read JSON\n         ObjectMapper mapper \u003d new ObjectMapper();\n         Map\u003cString, String\u003e nm \u003d \n           mapper.readValue(new File(localFileName), Map.class);\n \n         for(Map.Entry\u003cString, String\u003e ent: nm.entrySet()) {\n           credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()\n-              .getBytes());\n+              .getBytes(Charsets.UTF_8));\n         }\n       } catch (JsonMappingException e) {\n         json_error \u003d true;\n       } catch (JsonParseException e) {\n         json_error \u003d true;\n       }\n       if(json_error)\n         LOG.warn(\"couldn\u0027t parse Token Cache JSON file with user secret keys\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void readTokensFromFiles(Configuration conf, Credentials credentials)\n  throws IOException {\n    // add tokens and secrets coming from a token storage file\n    String binaryTokenFilename \u003d\n      conf.get(\"mapreduce.job.credentials.binary\");\n    if (binaryTokenFilename !\u003d null) {\n      Credentials binary \u003d Credentials.readTokenStorageFile(\n          new Path(\"file:///\" + binaryTokenFilename), conf);\n      credentials.addAll(binary);\n    }\n    // add secret keys coming from a json file\n    String tokensFileName \u003d conf.get(\"mapreduce.job.credentials.json\");\n    if(tokensFileName !\u003d null) {\n      LOG.info(\"loading user\u0027s secret keys from \" + tokensFileName);\n      String localFileName \u003d new Path(tokensFileName).toUri().getPath();\n\n      boolean json_error \u003d false;\n      try {\n        // read JSON\n        ObjectMapper mapper \u003d new ObjectMapper();\n        Map\u003cString, String\u003e nm \u003d \n          mapper.readValue(new File(localFileName), Map.class);\n\n        for(Map.Entry\u003cString, String\u003e ent: nm.entrySet()) {\n          credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()\n              .getBytes(Charsets.UTF_8));\n        }\n      } catch (JsonMappingException e) {\n        json_error \u003d true;\n      } catch (JsonParseException e) {\n        json_error \u003d true;\n      }\n      if(json_error)\n        LOG.warn(\"couldn\u0027t parse Token Cache JSON file with user secret keys\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void readTokensFromFiles(Configuration conf, Credentials credentials)\n  throws IOException {\n    // add tokens and secrets coming from a token storage file\n    String binaryTokenFilename \u003d\n      conf.get(\"mapreduce.job.credentials.binary\");\n    if (binaryTokenFilename !\u003d null) {\n      Credentials binary \u003d Credentials.readTokenStorageFile(\n          new Path(\"file:///\" + binaryTokenFilename), conf);\n      credentials.addAll(binary);\n    }\n    // add secret keys coming from a json file\n    String tokensFileName \u003d conf.get(\"mapreduce.job.credentials.json\");\n    if(tokensFileName !\u003d null) {\n      LOG.info(\"loading user\u0027s secret keys from \" + tokensFileName);\n      String localFileName \u003d new Path(tokensFileName).toUri().getPath();\n\n      boolean json_error \u003d false;\n      try {\n        // read JSON\n        ObjectMapper mapper \u003d new ObjectMapper();\n        Map\u003cString, String\u003e nm \u003d \n          mapper.readValue(new File(localFileName), Map.class);\n\n        for(Map.Entry\u003cString, String\u003e ent: nm.entrySet()) {\n          credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()\n              .getBytes());\n        }\n      } catch (JsonMappingException e) {\n        json_error \u003d true;\n      } catch (JsonParseException e) {\n        json_error \u003d true;\n      }\n      if(json_error)\n        LOG.warn(\"couldn\u0027t parse Token Cache JSON file with user secret keys\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void readTokensFromFiles(Configuration conf, Credentials credentials)\n  throws IOException {\n    // add tokens and secrets coming from a token storage file\n    String binaryTokenFilename \u003d\n      conf.get(\"mapreduce.job.credentials.binary\");\n    if (binaryTokenFilename !\u003d null) {\n      Credentials binary \u003d Credentials.readTokenStorageFile(\n          new Path(\"file:///\" + binaryTokenFilename), conf);\n      credentials.addAll(binary);\n    }\n    // add secret keys coming from a json file\n    String tokensFileName \u003d conf.get(\"mapreduce.job.credentials.json\");\n    if(tokensFileName !\u003d null) {\n      LOG.info(\"loading user\u0027s secret keys from \" + tokensFileName);\n      String localFileName \u003d new Path(tokensFileName).toUri().getPath();\n\n      boolean json_error \u003d false;\n      try {\n        // read JSON\n        ObjectMapper mapper \u003d new ObjectMapper();\n        Map\u003cString, String\u003e nm \u003d \n          mapper.readValue(new File(localFileName), Map.class);\n\n        for(Map.Entry\u003cString, String\u003e ent: nm.entrySet()) {\n          credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()\n              .getBytes());\n        }\n      } catch (JsonMappingException e) {\n        json_error \u003d true;\n      } catch (JsonParseException e) {\n        json_error \u003d true;\n      }\n      if(json_error)\n        LOG.warn(\"couldn\u0027t parse Token Cache JSON file with user secret keys\");\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,36 @@\n+  private void readTokensFromFiles(Configuration conf, Credentials credentials)\n+  throws IOException {\n+    // add tokens and secrets coming from a token storage file\n+    String binaryTokenFilename \u003d\n+      conf.get(\"mapreduce.job.credentials.binary\");\n+    if (binaryTokenFilename !\u003d null) {\n+      Credentials binary \u003d Credentials.readTokenStorageFile(\n+          new Path(\"file:///\" + binaryTokenFilename), conf);\n+      credentials.addAll(binary);\n+    }\n+    // add secret keys coming from a json file\n+    String tokensFileName \u003d conf.get(\"mapreduce.job.credentials.json\");\n+    if(tokensFileName !\u003d null) {\n+      LOG.info(\"loading user\u0027s secret keys from \" + tokensFileName);\n+      String localFileName \u003d new Path(tokensFileName).toUri().getPath();\n+\n+      boolean json_error \u003d false;\n+      try {\n+        // read JSON\n+        ObjectMapper mapper \u003d new ObjectMapper();\n+        Map\u003cString, String\u003e nm \u003d \n+          mapper.readValue(new File(localFileName), Map.class);\n+\n+        for(Map.Entry\u003cString, String\u003e ent: nm.entrySet()) {\n+          credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()\n+              .getBytes());\n+        }\n+      } catch (JsonMappingException e) {\n+        json_error \u003d true;\n+      } catch (JsonParseException e) {\n+        json_error \u003d true;\n+      }\n+      if(json_error)\n+        LOG.warn(\"couldn\u0027t parse Token Cache JSON file with user secret keys\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void readTokensFromFiles(Configuration conf, Credentials credentials)\n  throws IOException {\n    // add tokens and secrets coming from a token storage file\n    String binaryTokenFilename \u003d\n      conf.get(\"mapreduce.job.credentials.binary\");\n    if (binaryTokenFilename !\u003d null) {\n      Credentials binary \u003d Credentials.readTokenStorageFile(\n          new Path(\"file:///\" + binaryTokenFilename), conf);\n      credentials.addAll(binary);\n    }\n    // add secret keys coming from a json file\n    String tokensFileName \u003d conf.get(\"mapreduce.job.credentials.json\");\n    if(tokensFileName !\u003d null) {\n      LOG.info(\"loading user\u0027s secret keys from \" + tokensFileName);\n      String localFileName \u003d new Path(tokensFileName).toUri().getPath();\n\n      boolean json_error \u003d false;\n      try {\n        // read JSON\n        ObjectMapper mapper \u003d new ObjectMapper();\n        Map\u003cString, String\u003e nm \u003d \n          mapper.readValue(new File(localFileName), Map.class);\n\n        for(Map.Entry\u003cString, String\u003e ent: nm.entrySet()) {\n          credentials.addSecretKey(new Text(ent.getKey()), ent.getValue()\n              .getBytes());\n        }\n      } catch (JsonMappingException e) {\n        json_error \u003d true;\n      } catch (JsonParseException e) {\n        json_error \u003d true;\n      }\n      if(json_error)\n        LOG.warn(\"couldn\u0027t parse Token Cache JSON file with user secret keys\");\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/JobSubmitter.java"
    }
  }
}