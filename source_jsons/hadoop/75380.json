{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShellCommandFencer.java",
  "functionName": "tryFence",
  "functionId": "tryFence___target-HAServiceTarget__cmd-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ShellCommandFencer.java",
  "functionStartLine": 76,
  "functionEndLine": 128,
  "numCommitsSeen": 23,
  "timeTaken": 1220,
  "changeHistory": [
    "293fb1ec1e77084945a048bdde1683ad975b11bf",
    "dae6daba8c15affad4a2c8ec9c7fe660bcd54c40",
    "840df19ceecca1be26c572da2afe2f4d5f958b24",
    "39775dca68643b37a3b9a5ae7bc8eea1418f60d1",
    "90ea037d21be08821fc9c95b80bec1e1078d79cc",
    "5c156519dfc1be193a9b7fc2aa450ed1f774b60f",
    "2d0b340c4739dff11d1c04982d4bd3a4dcd97ce9"
  ],
  "changeHistoryShort": {
    "293fb1ec1e77084945a048bdde1683ad975b11bf": "Ybodychange",
    "dae6daba8c15affad4a2c8ec9c7fe660bcd54c40": "Ybodychange",
    "840df19ceecca1be26c572da2afe2f4d5f958b24": "Ymultichange(Yparameterchange,Ybodychange)",
    "39775dca68643b37a3b9a5ae7bc8eea1418f60d1": "Ymultichange(Yparameterchange,Ybodychange)",
    "90ea037d21be08821fc9c95b80bec1e1078d79cc": "Ymultichange(Yparameterchange,Ybodychange)",
    "5c156519dfc1be193a9b7fc2aa450ed1f774b60f": "Ymultichange(Yparameterchange,Ybodychange)",
    "2d0b340c4739dff11d1c04982d4bd3a4dcd97ce9": "Yfilerename"
  },
  "changeHistoryDetails": {
    "293fb1ec1e77084945a048bdde1683ad975b11bf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9524. Fix ShellCommandFencer to work on Windows. Contributed by Arpit Agarwal.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476856 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/04/13 4:16 PM",
      "commitName": "293fb1ec1e77084945a048bdde1683ad975b11bf",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "04/04/12 1:27 AM",
      "commitNameOld": "dae6daba8c15affad4a2c8ec9c7fe660bcd54c40",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 389.62,
      "commitsBetweenForRepo": 2129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,53 @@\n   public boolean tryFence(HAServiceTarget target, String cmd) {\n-    ProcessBuilder builder \u003d new ProcessBuilder(\n-        \"bash\", \"-e\", \"-c\", cmd);\n+    ProcessBuilder builder;\n+\n+    if (!Shell.WINDOWS) {\n+      builder \u003d new ProcessBuilder(\"bash\", \"-e\", \"-c\", cmd);\n+    } else {\n+      builder \u003d new ProcessBuilder(\"cmd.exe\", \"/c\", cmd);\n+    }\n+\n     setConfAsEnvVars(builder.environment());\n     addTargetInfoAsEnvVars(target, builder.environment());\n \n     Process p;\n     try {\n       p \u003d builder.start();\n       p.getOutputStream().close();\n     } catch (IOException e) {\n       LOG.warn(\"Unable to execute \" + cmd, e);\n       return false;\n     }\n     \n     String pid \u003d tryGetPid(p);\n     LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n         + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n     \n     String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n     if (pid !\u003d null) {\n       logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n     }\n     \n     // Pump logs to stderr\n     StreamPumper errPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getErrorStream(),\n         StreamPumper.StreamType.STDERR);\n     errPumper.start();\n     \n     StreamPumper outPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getInputStream(),\n         StreamPumper.StreamType.STDOUT);\n     outPumper.start();\n     \n     int rc;\n     try {\n       rc \u003d p.waitFor();\n       errPumper.join();\n       outPumper.join();\n     } catch (InterruptedException ie) {\n       LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n       return false;\n     }\n     \n     return rc \u003d\u003d 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean tryFence(HAServiceTarget target, String cmd) {\n    ProcessBuilder builder;\n\n    if (!Shell.WINDOWS) {\n      builder \u003d new ProcessBuilder(\"bash\", \"-e\", \"-c\", cmd);\n    } else {\n      builder \u003d new ProcessBuilder(\"cmd.exe\", \"/c\", cmd);\n    }\n\n    setConfAsEnvVars(builder.environment());\n    addTargetInfoAsEnvVars(target, builder.environment());\n\n    Process p;\n    try {\n      p \u003d builder.start();\n      p.getOutputStream().close();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to execute \" + cmd, e);\n      return false;\n    }\n    \n    String pid \u003d tryGetPid(p);\n    LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n        + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n    \n    String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n    if (pid !\u003d null) {\n      logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n    }\n    \n    // Pump logs to stderr\n    StreamPumper errPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getErrorStream(),\n        StreamPumper.StreamType.STDERR);\n    errPumper.start();\n    \n    StreamPumper outPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getInputStream(),\n        StreamPumper.StreamType.STDOUT);\n    outPumper.start();\n    \n    int rc;\n    try {\n      rc \u003d p.waitFor();\n      errPumper.join();\n      outPumper.join();\n    } catch (InterruptedException ie) {\n      LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n      return false;\n    }\n    \n    return rc \u003d\u003d 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ShellCommandFencer.java",
      "extendedDetails": {}
    },
    "dae6daba8c15affad4a2c8ec9c7fe660bcd54c40": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8007. Use substitution tokens for fencing argument. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1309285 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/04/12 1:27 AM",
      "commitName": "dae6daba8c15affad4a2c8ec9c7fe660bcd54c40",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "25/03/12 6:54 PM",
      "commitNameOld": "840df19ceecca1be26c572da2afe2f4d5f958b24",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 9.27,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,47 @@\n   public boolean tryFence(HAServiceTarget target, String cmd) {\n-    InetSocketAddress serviceAddr \u003d target.getAddress();\n-    List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n-\n-    // Create arg list with service as the first argument\n-    List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n-    argList.add(cmdList.get(0));\n-    argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n-    argList.addAll(cmdList.subList(1, cmdList.size()));\n-    String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n-\n     ProcessBuilder builder \u003d new ProcessBuilder(\n-        \"bash\", \"-e\", \"-c\", cmdWithSvc);\n+        \"bash\", \"-e\", \"-c\", cmd);\n     setConfAsEnvVars(builder.environment());\n+    addTargetInfoAsEnvVars(target, builder.environment());\n \n     Process p;\n     try {\n       p \u003d builder.start();\n       p.getOutputStream().close();\n     } catch (IOException e) {\n       LOG.warn(\"Unable to execute \" + cmd, e);\n       return false;\n     }\n     \n     String pid \u003d tryGetPid(p);\n     LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n         + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n     \n     String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n     if (pid !\u003d null) {\n       logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n     }\n     \n     // Pump logs to stderr\n     StreamPumper errPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getErrorStream(),\n         StreamPumper.StreamType.STDERR);\n     errPumper.start();\n     \n     StreamPumper outPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getInputStream(),\n         StreamPumper.StreamType.STDOUT);\n     outPumper.start();\n     \n     int rc;\n     try {\n       rc \u003d p.waitFor();\n       errPumper.join();\n       outPumper.join();\n     } catch (InterruptedException ie) {\n       LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n       return false;\n     }\n     \n     return rc \u003d\u003d 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean tryFence(HAServiceTarget target, String cmd) {\n    ProcessBuilder builder \u003d new ProcessBuilder(\n        \"bash\", \"-e\", \"-c\", cmd);\n    setConfAsEnvVars(builder.environment());\n    addTargetInfoAsEnvVars(target, builder.environment());\n\n    Process p;\n    try {\n      p \u003d builder.start();\n      p.getOutputStream().close();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to execute \" + cmd, e);\n      return false;\n    }\n    \n    String pid \u003d tryGetPid(p);\n    LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n        + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n    \n    String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n    if (pid !\u003d null) {\n      logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n    }\n    \n    // Pump logs to stderr\n    StreamPumper errPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getErrorStream(),\n        StreamPumper.StreamType.STDERR);\n    errPumper.start();\n    \n    StreamPumper outPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getInputStream(),\n        StreamPumper.StreamType.STDOUT);\n    outPumper.start();\n    \n    int rc;\n    try {\n      rc \u003d p.waitFor();\n      errPumper.join();\n      outPumper.join();\n    } catch (InterruptedException ie) {\n      LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n      return false;\n    }\n    \n    return rc \u003d\u003d 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ShellCommandFencer.java",
      "extendedDetails": {}
    },
    "840df19ceecca1be26c572da2afe2f4d5f958b24": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-8193. Refactor FailoverController/HAAdmin code to add an abstract class for \"target\" services. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305195 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/12 6:54 PM",
      "commitName": "840df19ceecca1be26c572da2afe2f4d5f958b24",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-8193. Refactor FailoverController/HAAdmin code to add an abstract class for \"target\" services. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305195 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/03/12 6:54 PM",
          "commitName": "840df19ceecca1be26c572da2afe2f4d5f958b24",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "25/03/12 2:38 PM",
          "commitNameOld": "39775dca68643b37a3b9a5ae7bc8eea1418f60d1",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,56 @@\n-  public boolean tryFence(InetSocketAddress serviceAddr, String cmd) {\n+  public boolean tryFence(HAServiceTarget target, String cmd) {\n+    InetSocketAddress serviceAddr \u003d target.getAddress();\n     List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n \n     // Create arg list with service as the first argument\n     List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n     argList.add(cmdList.get(0));\n     argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n     argList.addAll(cmdList.subList(1, cmdList.size()));\n     String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n \n     ProcessBuilder builder \u003d new ProcessBuilder(\n         \"bash\", \"-e\", \"-c\", cmdWithSvc);\n     setConfAsEnvVars(builder.environment());\n \n     Process p;\n     try {\n       p \u003d builder.start();\n       p.getOutputStream().close();\n     } catch (IOException e) {\n       LOG.warn(\"Unable to execute \" + cmd, e);\n       return false;\n     }\n     \n     String pid \u003d tryGetPid(p);\n     LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n         + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n     \n     String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n     if (pid !\u003d null) {\n       logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n     }\n     \n     // Pump logs to stderr\n     StreamPumper errPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getErrorStream(),\n         StreamPumper.StreamType.STDERR);\n     errPumper.start();\n     \n     StreamPumper outPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getInputStream(),\n         StreamPumper.StreamType.STDOUT);\n     outPumper.start();\n     \n     int rc;\n     try {\n       rc \u003d p.waitFor();\n       errPumper.join();\n       outPumper.join();\n     } catch (InterruptedException ie) {\n       LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n       return false;\n     }\n     \n     return rc \u003d\u003d 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean tryFence(HAServiceTarget target, String cmd) {\n    InetSocketAddress serviceAddr \u003d target.getAddress();\n    List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n\n    // Create arg list with service as the first argument\n    List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n    argList.add(cmdList.get(0));\n    argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n    argList.addAll(cmdList.subList(1, cmdList.size()));\n    String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n\n    ProcessBuilder builder \u003d new ProcessBuilder(\n        \"bash\", \"-e\", \"-c\", cmdWithSvc);\n    setConfAsEnvVars(builder.environment());\n\n    Process p;\n    try {\n      p \u003d builder.start();\n      p.getOutputStream().close();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to execute \" + cmd, e);\n      return false;\n    }\n    \n    String pid \u003d tryGetPid(p);\n    LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n        + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n    \n    String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n    if (pid !\u003d null) {\n      logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n    }\n    \n    // Pump logs to stderr\n    StreamPumper errPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getErrorStream(),\n        StreamPumper.StreamType.STDERR);\n    errPumper.start();\n    \n    StreamPumper outPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getInputStream(),\n        StreamPumper.StreamType.STDOUT);\n    outPumper.start();\n    \n    int rc;\n    try {\n      rc \u003d p.waitFor();\n      errPumper.join();\n      outPumper.join();\n    } catch (InterruptedException ie) {\n      LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n      return false;\n    }\n    \n    return rc \u003d\u003d 0;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ShellCommandFencer.java",
          "extendedDetails": {
            "oldValue": "[serviceAddr-InetSocketAddress, cmd-String]",
            "newValue": "[target-HAServiceTarget, cmd-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-8193. Refactor FailoverController/HAAdmin code to add an abstract class for \"target\" services. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305195 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/03/12 6:54 PM",
          "commitName": "840df19ceecca1be26c572da2afe2f4d5f958b24",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "25/03/12 2:38 PM",
          "commitNameOld": "39775dca68643b37a3b9a5ae7bc8eea1418f60d1",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,56 @@\n-  public boolean tryFence(InetSocketAddress serviceAddr, String cmd) {\n+  public boolean tryFence(HAServiceTarget target, String cmd) {\n+    InetSocketAddress serviceAddr \u003d target.getAddress();\n     List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n \n     // Create arg list with service as the first argument\n     List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n     argList.add(cmdList.get(0));\n     argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n     argList.addAll(cmdList.subList(1, cmdList.size()));\n     String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n \n     ProcessBuilder builder \u003d new ProcessBuilder(\n         \"bash\", \"-e\", \"-c\", cmdWithSvc);\n     setConfAsEnvVars(builder.environment());\n \n     Process p;\n     try {\n       p \u003d builder.start();\n       p.getOutputStream().close();\n     } catch (IOException e) {\n       LOG.warn(\"Unable to execute \" + cmd, e);\n       return false;\n     }\n     \n     String pid \u003d tryGetPid(p);\n     LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n         + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n     \n     String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n     if (pid !\u003d null) {\n       logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n     }\n     \n     // Pump logs to stderr\n     StreamPumper errPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getErrorStream(),\n         StreamPumper.StreamType.STDERR);\n     errPumper.start();\n     \n     StreamPumper outPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getInputStream(),\n         StreamPumper.StreamType.STDOUT);\n     outPumper.start();\n     \n     int rc;\n     try {\n       rc \u003d p.waitFor();\n       errPumper.join();\n       outPumper.join();\n     } catch (InterruptedException ie) {\n       LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n       return false;\n     }\n     \n     return rc \u003d\u003d 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean tryFence(HAServiceTarget target, String cmd) {\n    InetSocketAddress serviceAddr \u003d target.getAddress();\n    List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n\n    // Create arg list with service as the first argument\n    List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n    argList.add(cmdList.get(0));\n    argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n    argList.addAll(cmdList.subList(1, cmdList.size()));\n    String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n\n    ProcessBuilder builder \u003d new ProcessBuilder(\n        \"bash\", \"-e\", \"-c\", cmdWithSvc);\n    setConfAsEnvVars(builder.environment());\n\n    Process p;\n    try {\n      p \u003d builder.start();\n      p.getOutputStream().close();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to execute \" + cmd, e);\n      return false;\n    }\n    \n    String pid \u003d tryGetPid(p);\n    LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n        + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n    \n    String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n    if (pid !\u003d null) {\n      logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n    }\n    \n    // Pump logs to stderr\n    StreamPumper errPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getErrorStream(),\n        StreamPumper.StreamType.STDERR);\n    errPumper.start();\n    \n    StreamPumper outPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getInputStream(),\n        StreamPumper.StreamType.STDOUT);\n    outPumper.start();\n    \n    int rc;\n    try {\n      rc \u003d p.waitFor();\n      errPumper.join();\n      outPumper.join();\n    } catch (InterruptedException ie) {\n      LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n      return false;\n    }\n    \n    return rc \u003d\u003d 0;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ShellCommandFencer.java",
          "extendedDetails": {}
        }
      ]
    },
    "39775dca68643b37a3b9a5ae7bc8eea1418f60d1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Revert HADOOP-8193 from r1304967. Patch introduced some NPEs in a test case.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305152 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/12 2:38 PM",
      "commitName": "39775dca68643b37a3b9a5ae7bc8eea1418f60d1",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert HADOOP-8193 from r1304967. Patch introduced some NPEs in a test case.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305152 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/03/12 2:38 PM",
          "commitName": "39775dca68643b37a3b9a5ae7bc8eea1418f60d1",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "24/03/12 4:48 PM",
          "commitNameOld": "90ea037d21be08821fc9c95b80bec1e1078d79cc",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.91,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,55 @@\n-  public boolean tryFence(HAServiceTarget target, String cmd) {\n-    InetSocketAddress serviceAddr \u003d target.getAddress();\n+  public boolean tryFence(InetSocketAddress serviceAddr, String cmd) {\n     List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n \n     // Create arg list with service as the first argument\n     List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n     argList.add(cmdList.get(0));\n     argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n     argList.addAll(cmdList.subList(1, cmdList.size()));\n     String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n \n     ProcessBuilder builder \u003d new ProcessBuilder(\n         \"bash\", \"-e\", \"-c\", cmdWithSvc);\n     setConfAsEnvVars(builder.environment());\n \n     Process p;\n     try {\n       p \u003d builder.start();\n       p.getOutputStream().close();\n     } catch (IOException e) {\n       LOG.warn(\"Unable to execute \" + cmd, e);\n       return false;\n     }\n     \n     String pid \u003d tryGetPid(p);\n     LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n         + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n     \n     String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n     if (pid !\u003d null) {\n       logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n     }\n     \n     // Pump logs to stderr\n     StreamPumper errPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getErrorStream(),\n         StreamPumper.StreamType.STDERR);\n     errPumper.start();\n     \n     StreamPumper outPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getInputStream(),\n         StreamPumper.StreamType.STDOUT);\n     outPumper.start();\n     \n     int rc;\n     try {\n       rc \u003d p.waitFor();\n       errPumper.join();\n       outPumper.join();\n     } catch (InterruptedException ie) {\n       LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n       return false;\n     }\n     \n     return rc \u003d\u003d 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean tryFence(InetSocketAddress serviceAddr, String cmd) {\n    List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n\n    // Create arg list with service as the first argument\n    List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n    argList.add(cmdList.get(0));\n    argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n    argList.addAll(cmdList.subList(1, cmdList.size()));\n    String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n\n    ProcessBuilder builder \u003d new ProcessBuilder(\n        \"bash\", \"-e\", \"-c\", cmdWithSvc);\n    setConfAsEnvVars(builder.environment());\n\n    Process p;\n    try {\n      p \u003d builder.start();\n      p.getOutputStream().close();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to execute \" + cmd, e);\n      return false;\n    }\n    \n    String pid \u003d tryGetPid(p);\n    LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n        + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n    \n    String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n    if (pid !\u003d null) {\n      logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n    }\n    \n    // Pump logs to stderr\n    StreamPumper errPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getErrorStream(),\n        StreamPumper.StreamType.STDERR);\n    errPumper.start();\n    \n    StreamPumper outPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getInputStream(),\n        StreamPumper.StreamType.STDOUT);\n    outPumper.start();\n    \n    int rc;\n    try {\n      rc \u003d p.waitFor();\n      errPumper.join();\n      outPumper.join();\n    } catch (InterruptedException ie) {\n      LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n      return false;\n    }\n    \n    return rc \u003d\u003d 0;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ShellCommandFencer.java",
          "extendedDetails": {
            "oldValue": "[target-HAServiceTarget, cmd-String]",
            "newValue": "[serviceAddr-InetSocketAddress, cmd-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert HADOOP-8193 from r1304967. Patch introduced some NPEs in a test case.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305152 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/03/12 2:38 PM",
          "commitName": "39775dca68643b37a3b9a5ae7bc8eea1418f60d1",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "24/03/12 4:48 PM",
          "commitNameOld": "90ea037d21be08821fc9c95b80bec1e1078d79cc",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.91,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,55 @@\n-  public boolean tryFence(HAServiceTarget target, String cmd) {\n-    InetSocketAddress serviceAddr \u003d target.getAddress();\n+  public boolean tryFence(InetSocketAddress serviceAddr, String cmd) {\n     List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n \n     // Create arg list with service as the first argument\n     List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n     argList.add(cmdList.get(0));\n     argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n     argList.addAll(cmdList.subList(1, cmdList.size()));\n     String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n \n     ProcessBuilder builder \u003d new ProcessBuilder(\n         \"bash\", \"-e\", \"-c\", cmdWithSvc);\n     setConfAsEnvVars(builder.environment());\n \n     Process p;\n     try {\n       p \u003d builder.start();\n       p.getOutputStream().close();\n     } catch (IOException e) {\n       LOG.warn(\"Unable to execute \" + cmd, e);\n       return false;\n     }\n     \n     String pid \u003d tryGetPid(p);\n     LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n         + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n     \n     String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n     if (pid !\u003d null) {\n       logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n     }\n     \n     // Pump logs to stderr\n     StreamPumper errPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getErrorStream(),\n         StreamPumper.StreamType.STDERR);\n     errPumper.start();\n     \n     StreamPumper outPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getInputStream(),\n         StreamPumper.StreamType.STDOUT);\n     outPumper.start();\n     \n     int rc;\n     try {\n       rc \u003d p.waitFor();\n       errPumper.join();\n       outPumper.join();\n     } catch (InterruptedException ie) {\n       LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n       return false;\n     }\n     \n     return rc \u003d\u003d 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean tryFence(InetSocketAddress serviceAddr, String cmd) {\n    List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n\n    // Create arg list with service as the first argument\n    List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n    argList.add(cmdList.get(0));\n    argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n    argList.addAll(cmdList.subList(1, cmdList.size()));\n    String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n\n    ProcessBuilder builder \u003d new ProcessBuilder(\n        \"bash\", \"-e\", \"-c\", cmdWithSvc);\n    setConfAsEnvVars(builder.environment());\n\n    Process p;\n    try {\n      p \u003d builder.start();\n      p.getOutputStream().close();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to execute \" + cmd, e);\n      return false;\n    }\n    \n    String pid \u003d tryGetPid(p);\n    LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n        + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n    \n    String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n    if (pid !\u003d null) {\n      logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n    }\n    \n    // Pump logs to stderr\n    StreamPumper errPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getErrorStream(),\n        StreamPumper.StreamType.STDERR);\n    errPumper.start();\n    \n    StreamPumper outPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getInputStream(),\n        StreamPumper.StreamType.STDOUT);\n    outPumper.start();\n    \n    int rc;\n    try {\n      rc \u003d p.waitFor();\n      errPumper.join();\n      outPumper.join();\n    } catch (InterruptedException ie) {\n      LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n      return false;\n    }\n    \n    return rc \u003d\u003d 0;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ShellCommandFencer.java",
          "extendedDetails": {}
        }
      ]
    },
    "90ea037d21be08821fc9c95b80bec1e1078d79cc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-8193. Refactor FailoverController/HAAdmin code to add an abstract class for \"target\" services. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1304967 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/03/12 4:48 PM",
      "commitName": "90ea037d21be08821fc9c95b80bec1e1078d79cc",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-8193. Refactor FailoverController/HAAdmin code to add an abstract class for \"target\" services. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1304967 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/03/12 4:48 PM",
          "commitName": "90ea037d21be08821fc9c95b80bec1e1078d79cc",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "30/01/12 2:27 PM",
          "commitNameOld": "5c156519dfc1be193a9b7fc2aa450ed1f774b60f",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 54.06,
          "commitsBetweenForRepo": 427,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,56 @@\n-  public boolean tryFence(InetSocketAddress serviceAddr, String cmd) {\n+  public boolean tryFence(HAServiceTarget target, String cmd) {\n+    InetSocketAddress serviceAddr \u003d target.getAddress();\n     List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n \n     // Create arg list with service as the first argument\n     List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n     argList.add(cmdList.get(0));\n     argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n     argList.addAll(cmdList.subList(1, cmdList.size()));\n     String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n \n     ProcessBuilder builder \u003d new ProcessBuilder(\n         \"bash\", \"-e\", \"-c\", cmdWithSvc);\n     setConfAsEnvVars(builder.environment());\n \n     Process p;\n     try {\n       p \u003d builder.start();\n       p.getOutputStream().close();\n     } catch (IOException e) {\n       LOG.warn(\"Unable to execute \" + cmd, e);\n       return false;\n     }\n     \n     String pid \u003d tryGetPid(p);\n     LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n         + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n     \n     String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n     if (pid !\u003d null) {\n       logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n     }\n     \n     // Pump logs to stderr\n     StreamPumper errPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getErrorStream(),\n         StreamPumper.StreamType.STDERR);\n     errPumper.start();\n     \n     StreamPumper outPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getInputStream(),\n         StreamPumper.StreamType.STDOUT);\n     outPumper.start();\n     \n     int rc;\n     try {\n       rc \u003d p.waitFor();\n       errPumper.join();\n       outPumper.join();\n     } catch (InterruptedException ie) {\n       LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n       return false;\n     }\n     \n     return rc \u003d\u003d 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean tryFence(HAServiceTarget target, String cmd) {\n    InetSocketAddress serviceAddr \u003d target.getAddress();\n    List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n\n    // Create arg list with service as the first argument\n    List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n    argList.add(cmdList.get(0));\n    argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n    argList.addAll(cmdList.subList(1, cmdList.size()));\n    String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n\n    ProcessBuilder builder \u003d new ProcessBuilder(\n        \"bash\", \"-e\", \"-c\", cmdWithSvc);\n    setConfAsEnvVars(builder.environment());\n\n    Process p;\n    try {\n      p \u003d builder.start();\n      p.getOutputStream().close();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to execute \" + cmd, e);\n      return false;\n    }\n    \n    String pid \u003d tryGetPid(p);\n    LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n        + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n    \n    String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n    if (pid !\u003d null) {\n      logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n    }\n    \n    // Pump logs to stderr\n    StreamPumper errPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getErrorStream(),\n        StreamPumper.StreamType.STDERR);\n    errPumper.start();\n    \n    StreamPumper outPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getInputStream(),\n        StreamPumper.StreamType.STDOUT);\n    outPumper.start();\n    \n    int rc;\n    try {\n      rc \u003d p.waitFor();\n      errPumper.join();\n      outPumper.join();\n    } catch (InterruptedException ie) {\n      LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n      return false;\n    }\n    \n    return rc \u003d\u003d 0;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ShellCommandFencer.java",
          "extendedDetails": {
            "oldValue": "[serviceAddr-InetSocketAddress, cmd-String]",
            "newValue": "[target-HAServiceTarget, cmd-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-8193. Refactor FailoverController/HAAdmin code to add an abstract class for \"target\" services. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1304967 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/03/12 4:48 PM",
          "commitName": "90ea037d21be08821fc9c95b80bec1e1078d79cc",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "30/01/12 2:27 PM",
          "commitNameOld": "5c156519dfc1be193a9b7fc2aa450ed1f774b60f",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 54.06,
          "commitsBetweenForRepo": 427,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,56 @@\n-  public boolean tryFence(InetSocketAddress serviceAddr, String cmd) {\n+  public boolean tryFence(HAServiceTarget target, String cmd) {\n+    InetSocketAddress serviceAddr \u003d target.getAddress();\n     List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n \n     // Create arg list with service as the first argument\n     List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n     argList.add(cmdList.get(0));\n     argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n     argList.addAll(cmdList.subList(1, cmdList.size()));\n     String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n \n     ProcessBuilder builder \u003d new ProcessBuilder(\n         \"bash\", \"-e\", \"-c\", cmdWithSvc);\n     setConfAsEnvVars(builder.environment());\n \n     Process p;\n     try {\n       p \u003d builder.start();\n       p.getOutputStream().close();\n     } catch (IOException e) {\n       LOG.warn(\"Unable to execute \" + cmd, e);\n       return false;\n     }\n     \n     String pid \u003d tryGetPid(p);\n     LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n         + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n     \n     String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n     if (pid !\u003d null) {\n       logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n     }\n     \n     // Pump logs to stderr\n     StreamPumper errPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getErrorStream(),\n         StreamPumper.StreamType.STDERR);\n     errPumper.start();\n     \n     StreamPumper outPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getInputStream(),\n         StreamPumper.StreamType.STDOUT);\n     outPumper.start();\n     \n     int rc;\n     try {\n       rc \u003d p.waitFor();\n       errPumper.join();\n       outPumper.join();\n     } catch (InterruptedException ie) {\n       LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n       return false;\n     }\n     \n     return rc \u003d\u003d 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean tryFence(HAServiceTarget target, String cmd) {\n    InetSocketAddress serviceAddr \u003d target.getAddress();\n    List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n\n    // Create arg list with service as the first argument\n    List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n    argList.add(cmdList.get(0));\n    argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n    argList.addAll(cmdList.subList(1, cmdList.size()));\n    String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n\n    ProcessBuilder builder \u003d new ProcessBuilder(\n        \"bash\", \"-e\", \"-c\", cmdWithSvc);\n    setConfAsEnvVars(builder.environment());\n\n    Process p;\n    try {\n      p \u003d builder.start();\n      p.getOutputStream().close();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to execute \" + cmd, e);\n      return false;\n    }\n    \n    String pid \u003d tryGetPid(p);\n    LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n        + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n    \n    String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n    if (pid !\u003d null) {\n      logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n    }\n    \n    // Pump logs to stderr\n    StreamPumper errPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getErrorStream(),\n        StreamPumper.StreamType.STDERR);\n    errPumper.start();\n    \n    StreamPumper outPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getInputStream(),\n        StreamPumper.StreamType.STDOUT);\n    outPumper.start();\n    \n    int rc;\n    try {\n      rc \u003d p.waitFor();\n      errPumper.join();\n      outPumper.join();\n    } catch (InterruptedException ie) {\n      LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n      return false;\n    }\n    \n    return rc \u003d\u003d 0;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ShellCommandFencer.java",
          "extendedDetails": {}
        }
      ]
    },
    "5c156519dfc1be193a9b7fc2aa450ed1f774b60f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-7983. HA: failover should be able to pass args to fencers. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1238049 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/12 2:27 PM",
      "commitName": "5c156519dfc1be193a9b7fc2aa450ed1f774b60f",
      "commitAuthor": "Eli Collins",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-7983. HA: failover should be able to pass args to fencers. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1238049 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/01/12 2:27 PM",
          "commitName": "5c156519dfc1be193a9b7fc2aa450ed1f774b60f",
          "commitAuthor": "Eli Collins",
          "commitDateOld": "06/01/12 7:29 PM",
          "commitNameOld": "fcf1039cdc8bb7253935ef7361a0dfc026155f8f",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 23.79,
          "commitsBetweenForRepo": 143,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,55 @@\n-  public boolean tryFence(String cmd) {\n+  public boolean tryFence(InetSocketAddress serviceAddr, String cmd) {\n+    List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n+\n+    // Create arg list with service as the first argument\n+    List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n+    argList.add(cmdList.get(0));\n+    argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n+    argList.addAll(cmdList.subList(1, cmdList.size()));\n+    String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n+\n     ProcessBuilder builder \u003d new ProcessBuilder(\n-        \"bash\", \"-e\", \"-c\", cmd);\n+        \"bash\", \"-e\", \"-c\", cmdWithSvc);\n     setConfAsEnvVars(builder.environment());\n \n     Process p;\n     try {\n       p \u003d builder.start();\n       p.getOutputStream().close();\n     } catch (IOException e) {\n       LOG.warn(\"Unable to execute \" + cmd, e);\n       return false;\n     }\n     \n     String pid \u003d tryGetPid(p);\n     LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n         + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n     \n     String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n     if (pid !\u003d null) {\n       logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n     }\n     \n     // Pump logs to stderr\n     StreamPumper errPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getErrorStream(),\n         StreamPumper.StreamType.STDERR);\n     errPumper.start();\n     \n     StreamPumper outPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getInputStream(),\n         StreamPumper.StreamType.STDOUT);\n     outPumper.start();\n     \n     int rc;\n     try {\n       rc \u003d p.waitFor();\n       errPumper.join();\n       outPumper.join();\n     } catch (InterruptedException ie) {\n       LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n       return false;\n     }\n     \n     return rc \u003d\u003d 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean tryFence(InetSocketAddress serviceAddr, String cmd) {\n    List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n\n    // Create arg list with service as the first argument\n    List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n    argList.add(cmdList.get(0));\n    argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n    argList.addAll(cmdList.subList(1, cmdList.size()));\n    String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n\n    ProcessBuilder builder \u003d new ProcessBuilder(\n        \"bash\", \"-e\", \"-c\", cmdWithSvc);\n    setConfAsEnvVars(builder.environment());\n\n    Process p;\n    try {\n      p \u003d builder.start();\n      p.getOutputStream().close();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to execute \" + cmd, e);\n      return false;\n    }\n    \n    String pid \u003d tryGetPid(p);\n    LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n        + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n    \n    String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n    if (pid !\u003d null) {\n      logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n    }\n    \n    // Pump logs to stderr\n    StreamPumper errPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getErrorStream(),\n        StreamPumper.StreamType.STDERR);\n    errPumper.start();\n    \n    StreamPumper outPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getInputStream(),\n        StreamPumper.StreamType.STDOUT);\n    outPumper.start();\n    \n    int rc;\n    try {\n      rc \u003d p.waitFor();\n      errPumper.join();\n      outPumper.join();\n    } catch (InterruptedException ie) {\n      LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n      return false;\n    }\n    \n    return rc \u003d\u003d 0;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ShellCommandFencer.java",
          "extendedDetails": {
            "oldValue": "[cmd-String]",
            "newValue": "[serviceAddr-InetSocketAddress, cmd-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-7983. HA: failover should be able to pass args to fencers. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1238049 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/01/12 2:27 PM",
          "commitName": "5c156519dfc1be193a9b7fc2aa450ed1f774b60f",
          "commitAuthor": "Eli Collins",
          "commitDateOld": "06/01/12 7:29 PM",
          "commitNameOld": "fcf1039cdc8bb7253935ef7361a0dfc026155f8f",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 23.79,
          "commitsBetweenForRepo": 143,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,55 @@\n-  public boolean tryFence(String cmd) {\n+  public boolean tryFence(InetSocketAddress serviceAddr, String cmd) {\n+    List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n+\n+    // Create arg list with service as the first argument\n+    List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n+    argList.add(cmdList.get(0));\n+    argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n+    argList.addAll(cmdList.subList(1, cmdList.size()));\n+    String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n+\n     ProcessBuilder builder \u003d new ProcessBuilder(\n-        \"bash\", \"-e\", \"-c\", cmd);\n+        \"bash\", \"-e\", \"-c\", cmdWithSvc);\n     setConfAsEnvVars(builder.environment());\n \n     Process p;\n     try {\n       p \u003d builder.start();\n       p.getOutputStream().close();\n     } catch (IOException e) {\n       LOG.warn(\"Unable to execute \" + cmd, e);\n       return false;\n     }\n     \n     String pid \u003d tryGetPid(p);\n     LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n         + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n     \n     String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n     if (pid !\u003d null) {\n       logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n     }\n     \n     // Pump logs to stderr\n     StreamPumper errPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getErrorStream(),\n         StreamPumper.StreamType.STDERR);\n     errPumper.start();\n     \n     StreamPumper outPumper \u003d new StreamPumper(\n         LOG, logPrefix, p.getInputStream(),\n         StreamPumper.StreamType.STDOUT);\n     outPumper.start();\n     \n     int rc;\n     try {\n       rc \u003d p.waitFor();\n       errPumper.join();\n       outPumper.join();\n     } catch (InterruptedException ie) {\n       LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n       return false;\n     }\n     \n     return rc \u003d\u003d 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean tryFence(InetSocketAddress serviceAddr, String cmd) {\n    List\u003cString\u003e cmdList \u003d Arrays.asList(cmd.split(\"\\\\s+\"));\n\n    // Create arg list with service as the first argument\n    List\u003cString\u003e argList \u003d new ArrayList\u003cString\u003e();\n    argList.add(cmdList.get(0));\n    argList.add(serviceAddr.getHostName() + \":\" + serviceAddr.getPort());\n    argList.addAll(cmdList.subList(1, cmdList.size()));\n    String cmdWithSvc \u003d StringUtils.join(\" \", argList);\n\n    ProcessBuilder builder \u003d new ProcessBuilder(\n        \"bash\", \"-e\", \"-c\", cmdWithSvc);\n    setConfAsEnvVars(builder.environment());\n\n    Process p;\n    try {\n      p \u003d builder.start();\n      p.getOutputStream().close();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to execute \" + cmd, e);\n      return false;\n    }\n    \n    String pid \u003d tryGetPid(p);\n    LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n        + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n    \n    String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n    if (pid !\u003d null) {\n      logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n    }\n    \n    // Pump logs to stderr\n    StreamPumper errPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getErrorStream(),\n        StreamPumper.StreamType.STDERR);\n    errPumper.start();\n    \n    StreamPumper outPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getInputStream(),\n        StreamPumper.StreamType.STDOUT);\n    outPumper.start();\n    \n    int rc;\n    try {\n      rc \u003d p.waitFor();\n      errPumper.join();\n      outPumper.join();\n    } catch (InterruptedException ie) {\n      LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n      return false;\n    }\n    \n    return rc \u003d\u003d 0;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ShellCommandFencer.java",
          "extendedDetails": {}
        }
      ]
    },
    "2d0b340c4739dff11d1c04982d4bd3a4dcd97ce9": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7961. Move HA fencing to common. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1228510 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/01/12 4:17 PM",
      "commitName": "2d0b340c4739dff11d1c04982d4bd3a4dcd97ce9",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "06/01/12 12:44 PM",
      "commitNameOld": "9a07ba8945407cd8f63169faf9e0faa4311d38c7",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean tryFence(String cmd) {\n    ProcessBuilder builder \u003d new ProcessBuilder(\n        \"bash\", \"-e\", \"-c\", cmd);\n    setConfAsEnvVars(builder.environment());\n\n    Process p;\n    try {\n      p \u003d builder.start();\n      p.getOutputStream().close();\n    } catch (IOException e) {\n      LOG.warn(\"Unable to execute \" + cmd, e);\n      return false;\n    }\n    \n    String pid \u003d tryGetPid(p);\n    LOG.info(\"Launched fencing command \u0027\" + cmd + \"\u0027 with \"\n        + ((pid !\u003d null) ? (\"pid \" + pid) : \"unknown pid\"));\n    \n    String logPrefix \u003d abbreviate(cmd, ABBREV_LENGTH);\n    if (pid !\u003d null) {\n      logPrefix \u003d \"[PID \" + pid + \"] \" + logPrefix;\n    }\n    \n    // Pump logs to stderr\n    StreamPumper errPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getErrorStream(),\n        StreamPumper.StreamType.STDERR);\n    errPumper.start();\n    \n    StreamPumper outPumper \u003d new StreamPumper(\n        LOG, logPrefix, p.getInputStream(),\n        StreamPumper.StreamType.STDOUT);\n    outPumper.start();\n    \n    int rc;\n    try {\n      rc \u003d p.waitFor();\n      errPumper.join();\n      outPumper.join();\n    } catch (InterruptedException ie) {\n      LOG.warn(\"Interrupted while waiting for fencing command: \" + cmd);\n      return false;\n    }\n    \n    return rc \u003d\u003d 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ShellCommandFencer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/ShellCommandFencer.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ShellCommandFencer.java"
      }
    }
  }
}