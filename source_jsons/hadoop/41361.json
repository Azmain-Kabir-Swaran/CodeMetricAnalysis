{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSLeafQueue.java",
  "functionName": "updateStarvedAppsMinshare",
  "functionId": "updateStarvedAppsMinshare___appsWithDemand-TreeSet__FSAppAttempt__(modifiers-final)__minShareStarvation-Resource(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
  "functionStartLine": 235,
  "functionEndLine": 263,
  "numCommitsSeen": 69,
  "timeTaken": 1195,
  "changeHistory": [
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c"
  ],
  "changeHistoryShort": {
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6163. FS Preemption is a trickle for severely starved applications. (kasha)\n",
      "commitDate": "15/02/17 11:16 PM",
      "commitName": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,29 @@\n+  private void updateStarvedAppsMinshare(\n+      final TreeSet\u003cFSAppAttempt\u003e appsWithDemand,\n+      final Resource minShareStarvation) {\n+    Resource pending \u003d Resources.clone(minShareStarvation);\n+\n+    // Keep adding apps to the starved list until the unmet demand goes over\n+    // the remaining minshare\n+    for (FSAppAttempt app : appsWithDemand) {\n+      if (!Resources.isNone(pending)) {\n+        Resource appMinShare \u003d app.getPendingDemand();\n+        Resources.subtractFromNonNegative(\n+            appMinShare, app.getFairshareStarvation());\n+\n+        if (Resources.greaterThan(policy.getResourceCalculator(),\n+            scheduler.getClusterResource(), appMinShare, pending)) {\n+          Resources.subtractFromNonNegative(appMinShare, pending);\n+          pending \u003d none();\n+        } else {\n+          Resources.subtractFromNonNegative(pending, appMinShare);\n+        }\n+        app.setMinshareStarvation(appMinShare);\n+        context.getStarvedApps().addStarvedApp(app);\n+      } else {\n+        // Reset minshare starvation in case we had set it in a previous\n+        // iteration\n+        app.resetMinshareStarvation();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateStarvedAppsMinshare(\n      final TreeSet\u003cFSAppAttempt\u003e appsWithDemand,\n      final Resource minShareStarvation) {\n    Resource pending \u003d Resources.clone(minShareStarvation);\n\n    // Keep adding apps to the starved list until the unmet demand goes over\n    // the remaining minshare\n    for (FSAppAttempt app : appsWithDemand) {\n      if (!Resources.isNone(pending)) {\n        Resource appMinShare \u003d app.getPendingDemand();\n        Resources.subtractFromNonNegative(\n            appMinShare, app.getFairshareStarvation());\n\n        if (Resources.greaterThan(policy.getResourceCalculator(),\n            scheduler.getClusterResource(), appMinShare, pending)) {\n          Resources.subtractFromNonNegative(appMinShare, pending);\n          pending \u003d none();\n        } else {\n          Resources.subtractFromNonNegative(pending, appMinShare);\n        }\n        app.setMinshareStarvation(appMinShare);\n        context.getStarvedApps().addStarvedApp(app);\n      } else {\n        // Reset minshare starvation in case we had set it in a previous\n        // iteration\n        app.resetMinshareStarvation();\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java"
    }
  }
}