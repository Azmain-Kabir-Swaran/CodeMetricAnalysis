{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClusterNodeTracker.java",
  "functionName": "removeNode",
  "functionId": "removeNode___nodeId-NodeId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java",
  "functionStartLine": 169,
  "functionEndLine": 212,
  "numCommitsSeen": 17,
  "timeTaken": 3233,
  "changeHistory": [
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181",
    "8db9d61ac2e04888cb228b29fe54b41c730cf0e6",
    "cda0a280ddd0c77af93d236fc80478c16bbe809a",
    "5f2d33a5510353eaea7d953953847626726d14c1",
    "e905a42a2c6c88210b5c2120d7daf0bb3739cd1d",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d"
  ],
  "changeHistoryShort": {
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181": "Ybodychange",
    "8db9d61ac2e04888cb228b29fe54b41c730cf0e6": "Ybodychange",
    "cda0a280ddd0c77af93d236fc80478c16bbe809a": "Ybodychange",
    "5f2d33a5510353eaea7d953953847626726d14c1": "Ybodychange",
    "e905a42a2c6c88210b5c2120d7daf0bb3739cd1d": "Ybodychange",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7494. Add muti-node lookup mechanism and pluggable nodes sorting policies to optimize placement decision. Contributed by Sunil Govindan.\n",
      "commitDate": "21/08/18 7:42 AM",
      "commitName": "9c3fc3ef2865164aa5f121793ac914cfeb21a181",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "29/11/17 11:11 AM",
      "commitNameOld": "8498d287cd3beddcf8fe19625227e09982ec4be2",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 264.81,
      "commitsBetweenForRepo": 2445,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,44 @@\n   public N removeNode(NodeId nodeId) {\n     writeLock.lock();\n     try {\n       N node \u003d nodes.remove(nodeId);\n       if (node \u003d\u003d null) {\n         LOG.warn(\"Attempting to remove a non-existent node \" + nodeId);\n         return null;\n       }\n       nodeNameToNodeMap.remove(node.getNodeName());\n \n       // Update nodes per rack as well\n       String rackName \u003d node.getRackName();\n       List\u003cN\u003e nodesList \u003d nodesPerRack.get(rackName);\n       if (nodesList \u003d\u003d null) {\n         LOG.error(\"Attempting to remove node from an empty rack \" + rackName);\n       } else {\n         nodesList.remove(node);\n         if (nodesList.isEmpty()) {\n           nodesPerRack.remove(rackName);\n         }\n       }\n \n+      List\u003cN\u003e nodesPerPartition \u003d nodesPerLabel.get(node.getPartition());\n+      nodesPerPartition.remove(node);\n+\n+      // Update new set of nodes for given partition.\n+      if (nodesPerPartition.isEmpty()) {\n+        nodesPerLabel.remove(node.getPartition());\n+      } else {\n+        nodesPerLabel.put(node.getPartition(), nodesPerPartition);\n+      }\n+\n       // Update cluster capacity\n       Resources.subtractFrom(clusterCapacity, node.getTotalResource());\n       staleClusterCapacity \u003d Resources.clone(clusterCapacity);\n \n       // Update maximumAllocation\n       updateMaxResources(node, false);\n \n       return node;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public N removeNode(NodeId nodeId) {\n    writeLock.lock();\n    try {\n      N node \u003d nodes.remove(nodeId);\n      if (node \u003d\u003d null) {\n        LOG.warn(\"Attempting to remove a non-existent node \" + nodeId);\n        return null;\n      }\n      nodeNameToNodeMap.remove(node.getNodeName());\n\n      // Update nodes per rack as well\n      String rackName \u003d node.getRackName();\n      List\u003cN\u003e nodesList \u003d nodesPerRack.get(rackName);\n      if (nodesList \u003d\u003d null) {\n        LOG.error(\"Attempting to remove node from an empty rack \" + rackName);\n      } else {\n        nodesList.remove(node);\n        if (nodesList.isEmpty()) {\n          nodesPerRack.remove(rackName);\n        }\n      }\n\n      List\u003cN\u003e nodesPerPartition \u003d nodesPerLabel.get(node.getPartition());\n      nodesPerPartition.remove(node);\n\n      // Update new set of nodes for given partition.\n      if (nodesPerPartition.isEmpty()) {\n        nodesPerLabel.remove(node.getPartition());\n      } else {\n        nodesPerLabel.put(node.getPartition(), nodesPerPartition);\n      }\n\n      // Update cluster capacity\n      Resources.subtractFrom(clusterCapacity, node.getTotalResource());\n      staleClusterCapacity \u003d Resources.clone(clusterCapacity);\n\n      // Update maximumAllocation\n      updateMaxResources(node, false);\n\n      return node;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java",
      "extendedDetails": {}
    },
    "8db9d61ac2e04888cb228b29fe54b41c730cf0e6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7401. Reduce lock contention in ClusterNodeTracker#getClusterCapacity()\n",
      "commitDate": "07/11/17 2:53 PM",
      "commitName": "8db9d61ac2e04888cb228b29fe54b41c730cf0e6",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "7805deed4896e470ebd2f6bbd1ba9962947c63cd",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 56.27,
      "commitsBetweenForRepo": 548,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   public N removeNode(NodeId nodeId) {\n     writeLock.lock();\n     try {\n       N node \u003d nodes.remove(nodeId);\n       if (node \u003d\u003d null) {\n         LOG.warn(\"Attempting to remove a non-existent node \" + nodeId);\n         return null;\n       }\n       nodeNameToNodeMap.remove(node.getNodeName());\n \n       // Update nodes per rack as well\n       String rackName \u003d node.getRackName();\n       List\u003cN\u003e nodesList \u003d nodesPerRack.get(rackName);\n       if (nodesList \u003d\u003d null) {\n         LOG.error(\"Attempting to remove node from an empty rack \" + rackName);\n       } else {\n         nodesList.remove(node);\n         if (nodesList.isEmpty()) {\n           nodesPerRack.remove(rackName);\n         }\n       }\n \n       // Update cluster capacity\n       Resources.subtractFrom(clusterCapacity, node.getTotalResource());\n+      staleClusterCapacity \u003d Resources.clone(clusterCapacity);\n \n       // Update maximumAllocation\n       updateMaxResources(node, false);\n \n       return node;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public N removeNode(NodeId nodeId) {\n    writeLock.lock();\n    try {\n      N node \u003d nodes.remove(nodeId);\n      if (node \u003d\u003d null) {\n        LOG.warn(\"Attempting to remove a non-existent node \" + nodeId);\n        return null;\n      }\n      nodeNameToNodeMap.remove(node.getNodeName());\n\n      // Update nodes per rack as well\n      String rackName \u003d node.getRackName();\n      List\u003cN\u003e nodesList \u003d nodesPerRack.get(rackName);\n      if (nodesList \u003d\u003d null) {\n        LOG.error(\"Attempting to remove node from an empty rack \" + rackName);\n      } else {\n        nodesList.remove(node);\n        if (nodesList.isEmpty()) {\n          nodesPerRack.remove(rackName);\n        }\n      }\n\n      // Update cluster capacity\n      Resources.subtractFrom(clusterCapacity, node.getTotalResource());\n      staleClusterCapacity \u003d Resources.clone(clusterCapacity);\n\n      // Update maximumAllocation\n      updateMaxResources(node, false);\n\n      return node;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java",
      "extendedDetails": {}
    },
    "cda0a280ddd0c77af93d236fc80478c16bbe809a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5181. ClusterNodeTracker: add method to get list of nodes matching a specific resourceName. (kasha via asuresh)\n",
      "commitDate": "19/07/16 10:43 AM",
      "commitName": "cda0a280ddd0c77af93d236fc80478c16bbe809a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "19/07/16 10:43 AM",
      "commitNameOld": "5f2d33a5510353eaea7d953953847626726d14c1",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,33 @@\n   public N removeNode(NodeId nodeId) {\n     writeLock.lock();\n     try {\n       N node \u003d nodes.remove(nodeId);\n       if (node \u003d\u003d null) {\n         LOG.warn(\"Attempting to remove a non-existent node \" + nodeId);\n         return null;\n       }\n+      nodeNameToNodeMap.remove(node.getNodeName());\n \n       // Update nodes per rack as well\n       String rackName \u003d node.getRackName();\n-      Integer numNodes \u003d nodesPerRack.get(rackName);\n-      if (numNodes \u003e 0) {\n-        nodesPerRack.put(rackName, --numNodes);\n-      } else {\n+      List\u003cN\u003e nodesList \u003d nodesPerRack.get(rackName);\n+      if (nodesList \u003d\u003d null) {\n         LOG.error(\"Attempting to remove node from an empty rack \" + rackName);\n+      } else {\n+        nodesList.remove(node);\n+        if (nodesList.isEmpty()) {\n+          nodesPerRack.remove(rackName);\n+        }\n       }\n \n       // Update cluster capacity\n       Resources.subtractFrom(clusterCapacity, node.getTotalResource());\n \n       // Update maximumAllocation\n       updateMaxResources(node, false);\n \n       return node;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public N removeNode(NodeId nodeId) {\n    writeLock.lock();\n    try {\n      N node \u003d nodes.remove(nodeId);\n      if (node \u003d\u003d null) {\n        LOG.warn(\"Attempting to remove a non-existent node \" + nodeId);\n        return null;\n      }\n      nodeNameToNodeMap.remove(node.getNodeName());\n\n      // Update nodes per rack as well\n      String rackName \u003d node.getRackName();\n      List\u003cN\u003e nodesList \u003d nodesPerRack.get(rackName);\n      if (nodesList \u003d\u003d null) {\n        LOG.error(\"Attempting to remove node from an empty rack \" + rackName);\n      } else {\n        nodesList.remove(node);\n        if (nodesList.isEmpty()) {\n          nodesPerRack.remove(rackName);\n        }\n      }\n\n      // Update cluster capacity\n      Resources.subtractFrom(clusterCapacity, node.getTotalResource());\n\n      // Update maximumAllocation\n      updateMaxResources(node, false);\n\n      return node;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java",
      "extendedDetails": {}
    },
    "5f2d33a5510353eaea7d953953847626726d14c1": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN\u003d5181. ClusterNodeTracker: add method to get list of nodes matching a specific resourceName. (kasha via asuresh)\"\n\nThis reverts commit e905a42a2c6c88210b5c2120d7daf0bb3739cd1d.\n",
      "commitDate": "19/07/16 10:43 AM",
      "commitName": "5f2d33a5510353eaea7d953953847626726d14c1",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "15/07/16 2:35 PM",
      "commitNameOld": "e905a42a2c6c88210b5c2120d7daf0bb3739cd1d",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 3.84,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,29 @@\n   public N removeNode(NodeId nodeId) {\n     writeLock.lock();\n     try {\n       N node \u003d nodes.remove(nodeId);\n       if (node \u003d\u003d null) {\n         LOG.warn(\"Attempting to remove a non-existent node \" + nodeId);\n         return null;\n       }\n-      nodeNameToNodeMap.remove(node.getNodeName());\n \n       // Update nodes per rack as well\n       String rackName \u003d node.getRackName();\n-      List\u003cN\u003e nodesList \u003d nodesPerRack.get(rackName);\n-      if (nodesList \u003d\u003d null) {\n-        LOG.error(\"Attempting to remove node from an empty rack \" + rackName);\n+      Integer numNodes \u003d nodesPerRack.get(rackName);\n+      if (numNodes \u003e 0) {\n+        nodesPerRack.put(rackName, --numNodes);\n       } else {\n-        nodesList.remove(node);\n-        if (nodesList.isEmpty()) {\n-          nodesPerRack.remove(rackName);\n-        }\n+        LOG.error(\"Attempting to remove node from an empty rack \" + rackName);\n       }\n \n       // Update cluster capacity\n       Resources.subtractFrom(clusterCapacity, node.getTotalResource());\n \n       // Update maximumAllocation\n       updateMaxResources(node, false);\n \n       return node;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public N removeNode(NodeId nodeId) {\n    writeLock.lock();\n    try {\n      N node \u003d nodes.remove(nodeId);\n      if (node \u003d\u003d null) {\n        LOG.warn(\"Attempting to remove a non-existent node \" + nodeId);\n        return null;\n      }\n\n      // Update nodes per rack as well\n      String rackName \u003d node.getRackName();\n      Integer numNodes \u003d nodesPerRack.get(rackName);\n      if (numNodes \u003e 0) {\n        nodesPerRack.put(rackName, --numNodes);\n      } else {\n        LOG.error(\"Attempting to remove node from an empty rack \" + rackName);\n      }\n\n      // Update cluster capacity\n      Resources.subtractFrom(clusterCapacity, node.getTotalResource());\n\n      // Update maximumAllocation\n      updateMaxResources(node, false);\n\n      return node;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java",
      "extendedDetails": {}
    },
    "e905a42a2c6c88210b5c2120d7daf0bb3739cd1d": {
      "type": "Ybodychange",
      "commitMessage": "YARN\u003d5181. ClusterNodeTracker: add method to get list of nodes matching a specific resourceName. (kasha via asuresh)\n",
      "commitDate": "15/07/16 2:35 PM",
      "commitName": "e905a42a2c6c88210b5c2120d7daf0bb3739cd1d",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "11/07/16 10:36 PM",
      "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 3.67,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,33 @@\n   public N removeNode(NodeId nodeId) {\n     writeLock.lock();\n     try {\n       N node \u003d nodes.remove(nodeId);\n       if (node \u003d\u003d null) {\n         LOG.warn(\"Attempting to remove a non-existent node \" + nodeId);\n         return null;\n       }\n+      nodeNameToNodeMap.remove(node.getNodeName());\n \n       // Update nodes per rack as well\n       String rackName \u003d node.getRackName();\n-      Integer numNodes \u003d nodesPerRack.get(rackName);\n-      if (numNodes \u003e 0) {\n-        nodesPerRack.put(rackName, --numNodes);\n-      } else {\n+      List\u003cN\u003e nodesList \u003d nodesPerRack.get(rackName);\n+      if (nodesList \u003d\u003d null) {\n         LOG.error(\"Attempting to remove node from an empty rack \" + rackName);\n+      } else {\n+        nodesList.remove(node);\n+        if (nodesList.isEmpty()) {\n+          nodesPerRack.remove(rackName);\n+        }\n       }\n \n       // Update cluster capacity\n       Resources.subtractFrom(clusterCapacity, node.getTotalResource());\n \n       // Update maximumAllocation\n       updateMaxResources(node, false);\n \n       return node;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public N removeNode(NodeId nodeId) {\n    writeLock.lock();\n    try {\n      N node \u003d nodes.remove(nodeId);\n      if (node \u003d\u003d null) {\n        LOG.warn(\"Attempting to remove a non-existent node \" + nodeId);\n        return null;\n      }\n      nodeNameToNodeMap.remove(node.getNodeName());\n\n      // Update nodes per rack as well\n      String rackName \u003d node.getRackName();\n      List\u003cN\u003e nodesList \u003d nodesPerRack.get(rackName);\n      if (nodesList \u003d\u003d null) {\n        LOG.error(\"Attempting to remove node from an empty rack \" + rackName);\n      } else {\n        nodesList.remove(node);\n        if (nodesList.isEmpty()) {\n          nodesPerRack.remove(rackName);\n        }\n      }\n\n      // Update cluster capacity\n      Resources.subtractFrom(clusterCapacity, node.getTotalResource());\n\n      // Update maximumAllocation\n      updateMaxResources(node, false);\n\n      return node;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java",
      "extendedDetails": {}
    },
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,29 @@\n+  public N removeNode(NodeId nodeId) {\n+    writeLock.lock();\n+    try {\n+      N node \u003d nodes.remove(nodeId);\n+      if (node \u003d\u003d null) {\n+        LOG.warn(\"Attempting to remove a non-existent node \" + nodeId);\n+        return null;\n+      }\n+\n+      // Update nodes per rack as well\n+      String rackName \u003d node.getRackName();\n+      Integer numNodes \u003d nodesPerRack.get(rackName);\n+      if (numNodes \u003e 0) {\n+        nodesPerRack.put(rackName, --numNodes);\n+      } else {\n+        LOG.error(\"Attempting to remove node from an empty rack \" + rackName);\n+      }\n+\n+      // Update cluster capacity\n+      Resources.subtractFrom(clusterCapacity, node.getTotalResource());\n+\n+      // Update maximumAllocation\n+      updateMaxResources(node, false);\n+\n+      return node;\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public N removeNode(NodeId nodeId) {\n    writeLock.lock();\n    try {\n      N node \u003d nodes.remove(nodeId);\n      if (node \u003d\u003d null) {\n        LOG.warn(\"Attempting to remove a non-existent node \" + nodeId);\n        return null;\n      }\n\n      // Update nodes per rack as well\n      String rackName \u003d node.getRackName();\n      Integer numNodes \u003d nodesPerRack.get(rackName);\n      if (numNodes \u003e 0) {\n        nodesPerRack.put(rackName, --numNodes);\n      } else {\n        LOG.error(\"Attempting to remove node from an empty rack \" + rackName);\n      }\n\n      // Update cluster capacity\n      Resources.subtractFrom(clusterCapacity, node.getTotalResource());\n\n      // Update maximumAllocation\n      updateMaxResources(node, false);\n\n      return node;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java"
    }
  }
}