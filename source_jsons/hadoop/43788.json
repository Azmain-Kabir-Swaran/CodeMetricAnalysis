{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceUtils.java",
  "functionName": "buildClasspath",
  "functionId": "buildClasspath___sliderConfDir-String__libdir-String__sliderFileSystem-SliderFileSystem__configClassPath-String__usingMiniMRCluster-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceUtils.java",
  "functionStartLine": 459,
  "functionEndLine": 490,
  "numCommitsSeen": 40,
  "timeTaken": 6832,
  "changeHistory": [
    "24c53e057a237f78e1433d724df5ffe7961579a5",
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "02d68c4bcf7f8a0b56d13d3869937c7268fdd9cb",
    "c31cd981ebabc0747cabcc07a8c8797619ed2c53",
    "f47df51791dfc1b3bda9cbd00f644894ba69c8ec"
  ],
  "changeHistoryShort": {
    "24c53e057a237f78e1433d724df5ffe7961579a5": "Ymultichange(Yparameterchange,Ybodychange)",
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": "Ymultichange(Yfilerename,Ybodychange)",
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yfilerename",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ymultichange(Ymovefromfile,Ybodychange)",
    "02d68c4bcf7f8a0b56d13d3869937c7268fdd9cb": "Ybodychange",
    "c31cd981ebabc0747cabcc07a8c8797619ed2c53": "Yparameterchange",
    "f47df51791dfc1b3bda9cbd00f644894ba69c8ec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "24c53e057a237f78e1433d724df5ffe7961579a5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9546. Add configuration option for YARN Native services AM classpath. Contributed by Gergely Pollak.\n",
      "commitDate": "20/05/19 7:53 AM",
      "commitName": "24c53e057a237f78e1433d724df5ffe7961579a5",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9546. Add configuration option for YARN Native services AM classpath. Contributed by Gergely Pollak.\n",
          "commitDate": "20/05/19 7:53 AM",
          "commitName": "24c53e057a237f78e1433d724df5ffe7961579a5",
          "commitAuthor": "Sunil G",
          "commitDateOld": "25/02/19 11:45 AM",
          "commitNameOld": "95372657fc25c02399b01793833021ccf88dada2",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 83.8,
          "commitsBetweenForRepo": 555,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,32 @@\n   public static ClasspathConstructor buildClasspath(String sliderConfDir,\n       String libdir,\n       SliderFileSystem sliderFileSystem,\n+      String configClassPath,\n       boolean usingMiniMRCluster) {\n \n     ClasspathConstructor classpath \u003d new ClasspathConstructor();\n     classpath.append(YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n \n     // add the runtime classpath needed for tests to work\n     if (usingMiniMRCluster) {\n       // for mini cluster we pass down the java CP properties\n       // and nothing else\n       classpath.appendAll(classpath.localJVMClasspath());\n     } else {\n       if (sliderConfDir !\u003d null) {\n         classpath.addClassDirectory(sliderConfDir);\n       }\n       classpath.addLibDir(libdir);\n       if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n         classpath.addLibDir(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK);\n       }\n       classpath.addRemoteClasspathEnvVar();\n       classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n     }\n+\n+    if (!configClassPath.isEmpty()) {\n+      classpath.appendAll(Arrays.asList(configClassPath.split(\",\")));\n+    }\n+\n     return classpath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ClasspathConstructor buildClasspath(String sliderConfDir,\n      String libdir,\n      SliderFileSystem sliderFileSystem,\n      String configClassPath,\n      boolean usingMiniMRCluster) {\n\n    ClasspathConstructor classpath \u003d new ClasspathConstructor();\n    classpath.append(YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n\n    // add the runtime classpath needed for tests to work\n    if (usingMiniMRCluster) {\n      // for mini cluster we pass down the java CP properties\n      // and nothing else\n      classpath.appendAll(classpath.localJVMClasspath());\n    } else {\n      if (sliderConfDir !\u003d null) {\n        classpath.addClassDirectory(sliderConfDir);\n      }\n      classpath.addLibDir(libdir);\n      if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n        classpath.addLibDir(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK);\n      }\n      classpath.addRemoteClasspathEnvVar();\n      classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n    }\n\n    if (!configClassPath.isEmpty()) {\n      classpath.appendAll(Arrays.asList(configClassPath.split(\",\")));\n    }\n\n    return classpath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceUtils.java",
          "extendedDetails": {
            "oldValue": "[sliderConfDir-String, libdir-String, sliderFileSystem-SliderFileSystem, usingMiniMRCluster-boolean]",
            "newValue": "[sliderConfDir-String, libdir-String, sliderFileSystem-SliderFileSystem, configClassPath-String, usingMiniMRCluster-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9546. Add configuration option for YARN Native services AM classpath. Contributed by Gergely Pollak.\n",
          "commitDate": "20/05/19 7:53 AM",
          "commitName": "24c53e057a237f78e1433d724df5ffe7961579a5",
          "commitAuthor": "Sunil G",
          "commitDateOld": "25/02/19 11:45 AM",
          "commitNameOld": "95372657fc25c02399b01793833021ccf88dada2",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 83.8,
          "commitsBetweenForRepo": 555,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,32 @@\n   public static ClasspathConstructor buildClasspath(String sliderConfDir,\n       String libdir,\n       SliderFileSystem sliderFileSystem,\n+      String configClassPath,\n       boolean usingMiniMRCluster) {\n \n     ClasspathConstructor classpath \u003d new ClasspathConstructor();\n     classpath.append(YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n \n     // add the runtime classpath needed for tests to work\n     if (usingMiniMRCluster) {\n       // for mini cluster we pass down the java CP properties\n       // and nothing else\n       classpath.appendAll(classpath.localJVMClasspath());\n     } else {\n       if (sliderConfDir !\u003d null) {\n         classpath.addClassDirectory(sliderConfDir);\n       }\n       classpath.addLibDir(libdir);\n       if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n         classpath.addLibDir(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK);\n       }\n       classpath.addRemoteClasspathEnvVar();\n       classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n     }\n+\n+    if (!configClassPath.isEmpty()) {\n+      classpath.appendAll(Arrays.asList(configClassPath.split(\",\")));\n+    }\n+\n     return classpath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ClasspathConstructor buildClasspath(String sliderConfDir,\n      String libdir,\n      SliderFileSystem sliderFileSystem,\n      String configClassPath,\n      boolean usingMiniMRCluster) {\n\n    ClasspathConstructor classpath \u003d new ClasspathConstructor();\n    classpath.append(YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n\n    // add the runtime classpath needed for tests to work\n    if (usingMiniMRCluster) {\n      // for mini cluster we pass down the java CP properties\n      // and nothing else\n      classpath.appendAll(classpath.localJVMClasspath());\n    } else {\n      if (sliderConfDir !\u003d null) {\n        classpath.addClassDirectory(sliderConfDir);\n      }\n      classpath.addLibDir(libdir);\n      if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n        classpath.addLibDir(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK);\n      }\n      classpath.addRemoteClasspathEnvVar();\n      classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n    }\n\n    if (!configClassPath.isEmpty()) {\n      classpath.appendAll(Arrays.asList(configClassPath.split(\",\")));\n    }\n\n    return classpath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7423. Improve service client loggings. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7423. Improve service client loggings. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,26 @@\n   public static ClasspathConstructor buildClasspath(String sliderConfDir,\n       String libdir,\n       SliderFileSystem sliderFileSystem,\n       boolean usingMiniMRCluster) {\n \n     ClasspathConstructor classpath \u003d new ClasspathConstructor();\n     classpath.append(YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n \n     // add the runtime classpath needed for tests to work\n     if (usingMiniMRCluster) {\n       // for mini cluster we pass down the java CP properties\n       // and nothing else\n       classpath.appendAll(classpath.localJVMClasspath());\n     } else {\n       if (sliderConfDir !\u003d null) {\n         classpath.addClassDirectory(sliderConfDir);\n       }\n       classpath.addLibDir(libdir);\n       if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n         classpath.addLibDir(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK);\n-      } else {\n-        log.info(\n-            \"For faster submission of apps, upload dependencies using cmd \" +\n-                \"enableFastLaunch\");\n       }\n       classpath.addRemoteClasspathEnvVar();\n       classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n     }\n     return classpath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ClasspathConstructor buildClasspath(String sliderConfDir,\n      String libdir,\n      SliderFileSystem sliderFileSystem,\n      boolean usingMiniMRCluster) {\n\n    ClasspathConstructor classpath \u003d new ClasspathConstructor();\n    classpath.append(YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n\n    // add the runtime classpath needed for tests to work\n    if (usingMiniMRCluster) {\n      // for mini cluster we pass down the java CP properties\n      // and nothing else\n      classpath.appendAll(classpath.localJVMClasspath());\n    } else {\n      if (sliderConfDir !\u003d null) {\n        classpath.addClassDirectory(sliderConfDir);\n      }\n      classpath.addLibDir(libdir);\n      if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n        classpath.addLibDir(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK);\n      }\n      classpath.addRemoteClasspathEnvVar();\n      classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n    }\n    return classpath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/SliderUtils.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceUtils.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7423. Improve service client loggings. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,26 @@\n   public static ClasspathConstructor buildClasspath(String sliderConfDir,\n       String libdir,\n       SliderFileSystem sliderFileSystem,\n       boolean usingMiniMRCluster) {\n \n     ClasspathConstructor classpath \u003d new ClasspathConstructor();\n     classpath.append(YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n \n     // add the runtime classpath needed for tests to work\n     if (usingMiniMRCluster) {\n       // for mini cluster we pass down the java CP properties\n       // and nothing else\n       classpath.appendAll(classpath.localJVMClasspath());\n     } else {\n       if (sliderConfDir !\u003d null) {\n         classpath.addClassDirectory(sliderConfDir);\n       }\n       classpath.addLibDir(libdir);\n       if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n         classpath.addLibDir(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK);\n-      } else {\n-        log.info(\n-            \"For faster submission of apps, upload dependencies using cmd \" +\n-                \"enableFastLaunch\");\n       }\n       classpath.addRemoteClasspathEnvVar();\n       classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n     }\n     return classpath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ClasspathConstructor buildClasspath(String sliderConfDir,\n      String libdir,\n      SliderFileSystem sliderFileSystem,\n      boolean usingMiniMRCluster) {\n\n    ClasspathConstructor classpath \u003d new ClasspathConstructor();\n    classpath.append(YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n\n    // add the runtime classpath needed for tests to work\n    if (usingMiniMRCluster) {\n      // for mini cluster we pass down the java CP properties\n      // and nothing else\n      classpath.appendAll(classpath.localJVMClasspath());\n    } else {\n      if (sliderConfDir !\u003d null) {\n        classpath.addClassDirectory(sliderConfDir);\n      }\n      classpath.addLibDir(libdir);\n      if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n        classpath.addLibDir(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK);\n      }\n      classpath.addRemoteClasspathEnvVar();\n      classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n    }\n    return classpath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "fecf22b2fd5321d13f0c79d9daf27fbe1f84c9cb",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public static ClasspathConstructor buildClasspath(String sliderConfDir,\n       String libdir,\n       SliderFileSystem sliderFileSystem,\n       boolean usingMiniMRCluster) {\n \n     ClasspathConstructor classpath \u003d new ClasspathConstructor();\n     classpath.append(YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n \n     // add the runtime classpath needed for tests to work\n     if (usingMiniMRCluster) {\n       // for mini cluster we pass down the java CP properties\n       // and nothing else\n       classpath.appendAll(classpath.localJVMClasspath());\n     } else {\n       if (sliderConfDir !\u003d null) {\n         classpath.addClassDirectory(sliderConfDir);\n       }\n       classpath.addLibDir(libdir);\n       if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n         classpath.addLibDir(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK);\n       } else {\n         log.info(\n-            \"For faster submission of apps, upload dependencies using cmd {} {}\",\n-            SliderActions.ACTION_DEPENDENCY, Arguments.ARG_UPLOAD);\n+            \"For faster submission of apps, upload dependencies using cmd \" +\n+                \"enableFastLaunch\");\n       }\n       classpath.addRemoteClasspathEnvVar();\n       classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n     }\n     return classpath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static ClasspathConstructor buildClasspath(String sliderConfDir,\n      String libdir,\n      SliderFileSystem sliderFileSystem,\n      boolean usingMiniMRCluster) {\n\n    ClasspathConstructor classpath \u003d new ClasspathConstructor();\n    classpath.append(YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n\n    // add the runtime classpath needed for tests to work\n    if (usingMiniMRCluster) {\n      // for mini cluster we pass down the java CP properties\n      // and nothing else\n      classpath.appendAll(classpath.localJVMClasspath());\n    } else {\n      if (sliderConfDir !\u003d null) {\n        classpath.addClassDirectory(sliderConfDir);\n      }\n      classpath.addLibDir(libdir);\n      if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n        classpath.addLibDir(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK);\n      } else {\n        log.info(\n            \"For faster submission of apps, upload dependencies using cmd \" +\n                \"enableFastLaunch\");\n      }\n      classpath.addRemoteClasspathEnvVar();\n      classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n    }\n    return classpath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/SliderUtils.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static ClasspathConstructor buildClasspath(String sliderConfDir,\n      String libdir,\n      SliderFileSystem sliderFileSystem,\n      boolean usingMiniMRCluster) {\n\n    ClasspathConstructor classpath \u003d new ClasspathConstructor();\n    classpath.append(YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n\n    // add the runtime classpath needed for tests to work\n    if (usingMiniMRCluster) {\n      // for mini cluster we pass down the java CP properties\n      // and nothing else\n      classpath.appendAll(classpath.localJVMClasspath());\n    } else {\n      if (sliderConfDir !\u003d null) {\n        classpath.addClassDirectory(sliderConfDir);\n      }\n      classpath.addLibDir(libdir);\n      if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n        classpath.addLibDir(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK);\n      } else {\n        log.info(\n            \"For faster submission of apps, upload dependencies using cmd {} {}\",\n            SliderActions.ACTION_DEPENDENCY, Arguments.ARG_UPLOAD);\n      }\n      classpath.addRemoteClasspathEnvVar();\n      classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n    }\n    return classpath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/SliderUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/SliderUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/SliderUtils.java"
      }
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n   public static ClasspathConstructor buildClasspath(String sliderConfDir,\n       String libdir,\n       SliderFileSystem sliderFileSystem,\n       boolean usingMiniMRCluster) {\n \n     ClasspathConstructor classpath \u003d new ClasspathConstructor();\n-    classpath.append(SliderKeys.LOG4J_SERVER_PROP_FILENAME);\n+    classpath.append(YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n \n     // add the runtime classpath needed for tests to work\n     if (usingMiniMRCluster) {\n       // for mini cluster we pass down the java CP properties\n       // and nothing else\n       classpath.appendAll(classpath.localJVMClasspath());\n     } else {\n       if (sliderConfDir !\u003d null) {\n         classpath.addClassDirectory(sliderConfDir);\n       }\n       classpath.addLibDir(libdir);\n       if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n-        classpath.addLibDir(SliderKeys.SLIDER_DEPENDENCY_LOCALIZED_DIR_LINK);\n+        classpath.addLibDir(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK);\n       } else {\n         log.info(\n             \"For faster submission of apps, upload dependencies using cmd {} {}\",\n             SliderActions.ACTION_DEPENDENCY, Arguments.ARG_UPLOAD);\n       }\n       classpath.addRemoteClasspathEnvVar();\n       classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n     }\n     return classpath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ClasspathConstructor buildClasspath(String sliderConfDir,\n      String libdir,\n      SliderFileSystem sliderFileSystem,\n      boolean usingMiniMRCluster) {\n\n    ClasspathConstructor classpath \u003d new ClasspathConstructor();\n    classpath.append(YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n\n    // add the runtime classpath needed for tests to work\n    if (usingMiniMRCluster) {\n      // for mini cluster we pass down the java CP properties\n      // and nothing else\n      classpath.appendAll(classpath.localJVMClasspath());\n    } else {\n      if (sliderConfDir !\u003d null) {\n        classpath.addClassDirectory(sliderConfDir);\n      }\n      classpath.addLibDir(libdir);\n      if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n        classpath.addLibDir(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK);\n      } else {\n        log.info(\n            \"For faster submission of apps, upload dependencies using cmd {} {}\",\n            SliderActions.ACTION_DEPENDENCY, Arguments.ARG_UPLOAD);\n      }\n      classpath.addRemoteClasspathEnvVar();\n      classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n    }\n    return classpath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/SliderUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/common/tools/SliderUtils.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/SliderUtils.java",
            "oldMethodName": "buildClasspath",
            "newMethodName": "buildClasspath"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n   public static ClasspathConstructor buildClasspath(String sliderConfDir,\n       String libdir,\n       SliderFileSystem sliderFileSystem,\n       boolean usingMiniMRCluster) {\n \n     ClasspathConstructor classpath \u003d new ClasspathConstructor();\n-    classpath.append(SliderKeys.LOG4J_SERVER_PROP_FILENAME);\n+    classpath.append(YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n \n     // add the runtime classpath needed for tests to work\n     if (usingMiniMRCluster) {\n       // for mini cluster we pass down the java CP properties\n       // and nothing else\n       classpath.appendAll(classpath.localJVMClasspath());\n     } else {\n       if (sliderConfDir !\u003d null) {\n         classpath.addClassDirectory(sliderConfDir);\n       }\n       classpath.addLibDir(libdir);\n       if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n-        classpath.addLibDir(SliderKeys.SLIDER_DEPENDENCY_LOCALIZED_DIR_LINK);\n+        classpath.addLibDir(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK);\n       } else {\n         log.info(\n             \"For faster submission of apps, upload dependencies using cmd {} {}\",\n             SliderActions.ACTION_DEPENDENCY, Arguments.ARG_UPLOAD);\n       }\n       classpath.addRemoteClasspathEnvVar();\n       classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n     }\n     return classpath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ClasspathConstructor buildClasspath(String sliderConfDir,\n      String libdir,\n      SliderFileSystem sliderFileSystem,\n      boolean usingMiniMRCluster) {\n\n    ClasspathConstructor classpath \u003d new ClasspathConstructor();\n    classpath.append(YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n\n    // add the runtime classpath needed for tests to work\n    if (usingMiniMRCluster) {\n      // for mini cluster we pass down the java CP properties\n      // and nothing else\n      classpath.appendAll(classpath.localJVMClasspath());\n    } else {\n      if (sliderConfDir !\u003d null) {\n        classpath.addClassDirectory(sliderConfDir);\n      }\n      classpath.addLibDir(libdir);\n      if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n        classpath.addLibDir(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK);\n      } else {\n        log.info(\n            \"For faster submission of apps, upload dependencies using cmd {} {}\",\n            SliderActions.ACTION_DEPENDENCY, Arguments.ARG_UPLOAD);\n      }\n      classpath.addRemoteClasspathEnvVar();\n      classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n    }\n    return classpath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/SliderUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "02d68c4bcf7f8a0b56d13d3869937c7268fdd9cb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6588. Add native-service AM log4j properties in classpath. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "02d68c4bcf7f8a0b56d13d3869937c7268fdd9cb",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:28 PM",
      "commitNameOld": "384ee13eeccef6994b5f5b2ea8de4513e52c2124",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   public static ClasspathConstructor buildClasspath(String sliderConfDir,\n       String libdir,\n       SliderFileSystem sliderFileSystem,\n       boolean usingMiniMRCluster) {\n \n     ClasspathConstructor classpath \u003d new ClasspathConstructor();\n+    classpath.append(SliderKeys.LOG4J_SERVER_PROP_FILENAME);\n \n     // add the runtime classpath needed for tests to work\n     if (usingMiniMRCluster) {\n       // for mini cluster we pass down the java CP properties\n       // and nothing else\n       classpath.appendAll(classpath.localJVMClasspath());\n     } else {\n       if (sliderConfDir !\u003d null) {\n         classpath.addClassDirectory(sliderConfDir);\n       }\n       classpath.addLibDir(libdir);\n       if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n         classpath.addLibDir(SliderKeys.SLIDER_DEPENDENCY_LOCALIZED_DIR_LINK);\n       } else {\n         log.info(\n             \"For faster submission of apps, upload dependencies using cmd {} {}\",\n             SliderActions.ACTION_DEPENDENCY, Arguments.ARG_UPLOAD);\n       }\n       classpath.addRemoteClasspathEnvVar();\n       classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n     }\n     return classpath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static ClasspathConstructor buildClasspath(String sliderConfDir,\n      String libdir,\n      SliderFileSystem sliderFileSystem,\n      boolean usingMiniMRCluster) {\n\n    ClasspathConstructor classpath \u003d new ClasspathConstructor();\n    classpath.append(SliderKeys.LOG4J_SERVER_PROP_FILENAME);\n\n    // add the runtime classpath needed for tests to work\n    if (usingMiniMRCluster) {\n      // for mini cluster we pass down the java CP properties\n      // and nothing else\n      classpath.appendAll(classpath.localJVMClasspath());\n    } else {\n      if (sliderConfDir !\u003d null) {\n        classpath.addClassDirectory(sliderConfDir);\n      }\n      classpath.addLibDir(libdir);\n      if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n        classpath.addLibDir(SliderKeys.SLIDER_DEPENDENCY_LOCALIZED_DIR_LINK);\n      } else {\n        log.info(\n            \"For faster submission of apps, upload dependencies using cmd {} {}\",\n            SliderActions.ACTION_DEPENDENCY, Arguments.ARG_UPLOAD);\n      }\n      classpath.addRemoteClasspathEnvVar();\n      classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n    }\n    return classpath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/common/tools/SliderUtils.java",
      "extendedDetails": {}
    },
    "c31cd981ebabc0747cabcc07a8c8797619ed2c53": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-6255. Refactor yarn-native-services framework. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "c31cd981ebabc0747cabcc07a8c8797619ed2c53",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:28 PM",
      "commitNameOld": "a5e20f0fc1262dc57396f95c9d741b4486c728c2",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   public static ClasspathConstructor buildClasspath(String sliderConfDir,\n       String libdir,\n-      Configuration config,\n       SliderFileSystem sliderFileSystem,\n       boolean usingMiniMRCluster) {\n \n     ClasspathConstructor classpath \u003d new ClasspathConstructor();\n \n     // add the runtime classpath needed for tests to work\n     if (usingMiniMRCluster) {\n       // for mini cluster we pass down the java CP properties\n       // and nothing else\n       classpath.appendAll(classpath.localJVMClasspath());\n     } else {\n       if (sliderConfDir !\u003d null) {\n         classpath.addClassDirectory(sliderConfDir);\n       }\n       classpath.addLibDir(libdir);\n       if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n         classpath.addLibDir(SliderKeys.SLIDER_DEPENDENCY_LOCALIZED_DIR_LINK);\n       } else {\n         log.info(\n             \"For faster submission of apps, upload dependencies using cmd {} {}\",\n             SliderActions.ACTION_DEPENDENCY, Arguments.ARG_UPLOAD);\n       }\n       classpath.addRemoteClasspathEnvVar();\n       classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n     }\n     return classpath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static ClasspathConstructor buildClasspath(String sliderConfDir,\n      String libdir,\n      SliderFileSystem sliderFileSystem,\n      boolean usingMiniMRCluster) {\n\n    ClasspathConstructor classpath \u003d new ClasspathConstructor();\n\n    // add the runtime classpath needed for tests to work\n    if (usingMiniMRCluster) {\n      // for mini cluster we pass down the java CP properties\n      // and nothing else\n      classpath.appendAll(classpath.localJVMClasspath());\n    } else {\n      if (sliderConfDir !\u003d null) {\n        classpath.addClassDirectory(sliderConfDir);\n      }\n      classpath.addLibDir(libdir);\n      if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n        classpath.addLibDir(SliderKeys.SLIDER_DEPENDENCY_LOCALIZED_DIR_LINK);\n      } else {\n        log.info(\n            \"For faster submission of apps, upload dependencies using cmd {} {}\",\n            SliderActions.ACTION_DEPENDENCY, Arguments.ARG_UPLOAD);\n      }\n      classpath.addRemoteClasspathEnvVar();\n      classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n    }\n    return classpath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/common/tools/SliderUtils.java",
      "extendedDetails": {
        "oldValue": "[sliderConfDir-String, libdir-String, config-Configuration, sliderFileSystem-SliderFileSystem, usingMiniMRCluster-boolean]",
        "newValue": "[sliderConfDir-String, libdir-String, sliderFileSystem-SliderFileSystem, usingMiniMRCluster-boolean]"
      }
    },
    "f47df51791dfc1b3bda9cbd00f644894ba69c8ec": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5461. Initial code ported from slider-core module. (jianhe)\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "f47df51791dfc1b3bda9cbd00f644894ba69c8ec",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,30 @@\n+  public static ClasspathConstructor buildClasspath(String sliderConfDir,\n+      String libdir,\n+      Configuration config,\n+      SliderFileSystem sliderFileSystem,\n+      boolean usingMiniMRCluster) {\n+\n+    ClasspathConstructor classpath \u003d new ClasspathConstructor();\n+\n+    // add the runtime classpath needed for tests to work\n+    if (usingMiniMRCluster) {\n+      // for mini cluster we pass down the java CP properties\n+      // and nothing else\n+      classpath.appendAll(classpath.localJVMClasspath());\n+    } else {\n+      if (sliderConfDir !\u003d null) {\n+        classpath.addClassDirectory(sliderConfDir);\n+      }\n+      classpath.addLibDir(libdir);\n+      if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n+        classpath.addLibDir(SliderKeys.SLIDER_DEPENDENCY_LOCALIZED_DIR_LINK);\n+      } else {\n+        log.info(\n+            \"For faster submission of apps, upload dependencies using cmd {} {}\",\n+            SliderActions.ACTION_DEPENDENCY, Arguments.ARG_UPLOAD);\n+      }\n+      classpath.addRemoteClasspathEnvVar();\n+      classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n+    }\n+    return classpath;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static ClasspathConstructor buildClasspath(String sliderConfDir,\n      String libdir,\n      Configuration config,\n      SliderFileSystem sliderFileSystem,\n      boolean usingMiniMRCluster) {\n\n    ClasspathConstructor classpath \u003d new ClasspathConstructor();\n\n    // add the runtime classpath needed for tests to work\n    if (usingMiniMRCluster) {\n      // for mini cluster we pass down the java CP properties\n      // and nothing else\n      classpath.appendAll(classpath.localJVMClasspath());\n    } else {\n      if (sliderConfDir !\u003d null) {\n        classpath.addClassDirectory(sliderConfDir);\n      }\n      classpath.addLibDir(libdir);\n      if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\n        classpath.addLibDir(SliderKeys.SLIDER_DEPENDENCY_LOCALIZED_DIR_LINK);\n      } else {\n        log.info(\n            \"For faster submission of apps, upload dependencies using cmd {} {}\",\n            SliderActions.ACTION_DEPENDENCY, Arguments.ARG_UPLOAD);\n      }\n      classpath.addRemoteClasspathEnvVar();\n      classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\n    }\n    return classpath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/common/tools/SliderUtils.java"
    }
  }
}