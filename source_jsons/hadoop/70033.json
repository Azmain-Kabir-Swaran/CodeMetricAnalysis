{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureBlobFileSystemStore.java",
  "functionName": "initializeClient",
  "functionId": "initializeClient___uri-URI__fileSystemName-String__accountName-String__isSecure-boolean",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
  "functionStartLine": 1162,
  "functionEndLine": 1213,
  "numCommitsSeen": 55,
  "timeTaken": 5378,
  "changeHistory": [
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc",
    "d1f5976c004292f35b0fc5efbc86273becc4a304",
    "82ad9b549f9ae0867699042e0f5856577919a749",
    "b033c681e4fc3ee1a38caa807e130aee481d99d5",
    "65f60e56b082faf92e1cd3daee2569d8fc669c67",
    "e5593cbd8323399359b3e8da46bd58e8364cbf22",
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1",
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462"
  ],
  "changeHistoryShort": {
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc": "Ybodychange",
    "d1f5976c004292f35b0fc5efbc86273becc4a304": "Ybodychange",
    "82ad9b549f9ae0867699042e0f5856577919a749": "Ybodychange",
    "b033c681e4fc3ee1a38caa807e130aee481d99d5": "Ybodychange",
    "65f60e56b082faf92e1cd3daee2569d8fc669c67": "Ymultichange(Yexceptionschange,Ybodychange)",
    "e5593cbd8323399359b3e8da46bd58e8364cbf22": "Ymultichange(Yparameterchange,Ybodychange)",
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1": "Ybodychange",
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": "Ybodychange",
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462": "Yintroduced"
  },
  "changeHistoryDetails": {
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16730: ABFS: Support for Shared Access Signatures (SAS). Contributed by Sneha Vijayarajan.\n",
      "commitDate": "27/02/20 10:27 AM",
      "commitName": "791270a2e5e31546ff5c1ef4fa8bad6852b906dc",
      "commitAuthor": "Sneha Vijayarajan",
      "commitDateOld": "14/01/20 5:28 PM",
      "commitNameOld": "c36f09deb91454c086926c01f872d8ca4419aee0",
      "commitAuthorOld": "Clemens Wolff",
      "daysBetweenCommits": 43.71,
      "commitsBetweenForRepo": 144,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,52 @@\n   private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure)\n       throws IOException {\n     if (this.client !\u003d null) {\n       return;\n     }\n \n     final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSecure);\n \n     final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n \n     URL baseUrl;\n     try {\n       baseUrl \u003d new URL(url);\n     } catch (MalformedURLException e) {\n       throw new InvalidUriException(uri.toString());\n     }\n \n     SharedKeyCredentials creds \u003d null;\n     AccessTokenProvider tokenProvider \u003d null;\n+    SASTokenProvider sasTokenProvider \u003d null;\n \n-    if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n+    if (authType \u003d\u003d AuthType.SharedKey) {\n       LOG.trace(\"Fetching SharedKey credentials\");\n       int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n       if (dotIndex \u003c\u003d 0) {\n         throw new InvalidUriException(\n                 uri.toString() + \" - account name is not fully qualified.\");\n       }\n       creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n             abfsConfiguration.getStorageAccountKey());\n+    } else if (authType \u003d\u003d AuthType.SAS) {\n+      LOG.trace(\"Fetching SAS token provider\");\n+      sasTokenProvider \u003d abfsConfiguration.getSASTokenProvider();\n     } else {\n       LOG.trace(\"Fetching token provider\");\n       tokenProvider \u003d abfsConfiguration.getTokenProvider();\n       ExtensionHelper.bind(tokenProvider, uri,\n             abfsConfiguration.getRawConfiguration());\n     }\n \n     LOG.trace(\"Initializing AbfsClient for {}\", baseUrl);\n-    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration,\n-        new ExponentialRetryPolicy(abfsConfiguration.getMaxIoRetries()),\n-        tokenProvider, abfsPerfTracker);\n+    if (tokenProvider !\u003d null) {\n+      this.client \u003d new AbfsClient(baseUrl, creds, abfsConfiguration,\n+          new ExponentialRetryPolicy(abfsConfiguration.getMaxIoRetries()),\n+          tokenProvider, abfsPerfTracker);\n+    } else {\n+      this.client \u003d new AbfsClient(baseUrl, creds, abfsConfiguration,\n+          new ExponentialRetryPolicy(abfsConfiguration.getMaxIoRetries()),\n+          sasTokenProvider, abfsPerfTracker);\n+    }\n     LOG.trace(\"AbfsClient init complete\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure)\n      throws IOException {\n    if (this.client !\u003d null) {\n      return;\n    }\n\n    final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSecure);\n\n    final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n\n    URL baseUrl;\n    try {\n      baseUrl \u003d new URL(url);\n    } catch (MalformedURLException e) {\n      throw new InvalidUriException(uri.toString());\n    }\n\n    SharedKeyCredentials creds \u003d null;\n    AccessTokenProvider tokenProvider \u003d null;\n    SASTokenProvider sasTokenProvider \u003d null;\n\n    if (authType \u003d\u003d AuthType.SharedKey) {\n      LOG.trace(\"Fetching SharedKey credentials\");\n      int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n      if (dotIndex \u003c\u003d 0) {\n        throw new InvalidUriException(\n                uri.toString() + \" - account name is not fully qualified.\");\n      }\n      creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n            abfsConfiguration.getStorageAccountKey());\n    } else if (authType \u003d\u003d AuthType.SAS) {\n      LOG.trace(\"Fetching SAS token provider\");\n      sasTokenProvider \u003d abfsConfiguration.getSASTokenProvider();\n    } else {\n      LOG.trace(\"Fetching token provider\");\n      tokenProvider \u003d abfsConfiguration.getTokenProvider();\n      ExtensionHelper.bind(tokenProvider, uri,\n            abfsConfiguration.getRawConfiguration());\n    }\n\n    LOG.trace(\"Initializing AbfsClient for {}\", baseUrl);\n    if (tokenProvider !\u003d null) {\n      this.client \u003d new AbfsClient(baseUrl, creds, abfsConfiguration,\n          new ExponentialRetryPolicy(abfsConfiguration.getMaxIoRetries()),\n          tokenProvider, abfsPerfTracker);\n    } else {\n      this.client \u003d new AbfsClient(baseUrl, creds, abfsConfiguration,\n          new ExponentialRetryPolicy(abfsConfiguration.getMaxIoRetries()),\n          sasTokenProvider, abfsPerfTracker);\n    }\n    LOG.trace(\"AbfsClient init complete\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "d1f5976c004292f35b0fc5efbc86273becc4a304": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16699. Add verbose TRACE logging to ABFS.\n\nContributed by Sneha Vijayarajan,\n\nChange-Id: Ic616a10406e6e9f11616c9cc05d8630ebbedaf65\n",
      "commitDate": "07/01/20 10:05 AM",
      "commitName": "d1f5976c004292f35b0fc5efbc86273becc4a304",
      "commitAuthor": "Sneha Vijayarajan",
      "commitDateOld": "27/11/19 3:10 PM",
      "commitNameOld": "82ad9b549f9ae0867699042e0f5856577919a749",
      "commitAuthorOld": "Sneha Vijayarajan",
      "daysBetweenCommits": 40.79,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,42 @@\n   private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure)\n       throws IOException {\n     if (this.client !\u003d null) {\n       return;\n     }\n \n     final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSecure);\n \n     final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n \n     URL baseUrl;\n     try {\n       baseUrl \u003d new URL(url);\n     } catch (MalformedURLException e) {\n       throw new InvalidUriException(uri.toString());\n     }\n \n     SharedKeyCredentials creds \u003d null;\n     AccessTokenProvider tokenProvider \u003d null;\n \n     if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n+      LOG.trace(\"Fetching SharedKey credentials\");\n       int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n       if (dotIndex \u003c\u003d 0) {\n         throw new InvalidUriException(\n                 uri.toString() + \" - account name is not fully qualified.\");\n       }\n       creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n             abfsConfiguration.getStorageAccountKey());\n     } else {\n+      LOG.trace(\"Fetching token provider\");\n       tokenProvider \u003d abfsConfiguration.getTokenProvider();\n       ExtensionHelper.bind(tokenProvider, uri,\n             abfsConfiguration.getRawConfiguration());\n     }\n \n-    this.client \u003d new AbfsClient(baseUrl, creds, abfsConfiguration,\n+    LOG.trace(\"Initializing AbfsClient for {}\", baseUrl);\n+    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration,\n         new ExponentialRetryPolicy(abfsConfiguration.getMaxIoRetries()),\n         tokenProvider, abfsPerfTracker);\n+    LOG.trace(\"AbfsClient init complete\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure)\n      throws IOException {\n    if (this.client !\u003d null) {\n      return;\n    }\n\n    final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSecure);\n\n    final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n\n    URL baseUrl;\n    try {\n      baseUrl \u003d new URL(url);\n    } catch (MalformedURLException e) {\n      throw new InvalidUriException(uri.toString());\n    }\n\n    SharedKeyCredentials creds \u003d null;\n    AccessTokenProvider tokenProvider \u003d null;\n\n    if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n      LOG.trace(\"Fetching SharedKey credentials\");\n      int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n      if (dotIndex \u003c\u003d 0) {\n        throw new InvalidUriException(\n                uri.toString() + \" - account name is not fully qualified.\");\n      }\n      creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n            abfsConfiguration.getStorageAccountKey());\n    } else {\n      LOG.trace(\"Fetching token provider\");\n      tokenProvider \u003d abfsConfiguration.getTokenProvider();\n      ExtensionHelper.bind(tokenProvider, uri,\n            abfsConfiguration.getRawConfiguration());\n    }\n\n    LOG.trace(\"Initializing AbfsClient for {}\", baseUrl);\n    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration,\n        new ExponentialRetryPolicy(abfsConfiguration.getMaxIoRetries()),\n        tokenProvider, abfsPerfTracker);\n    LOG.trace(\"AbfsClient init complete\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "82ad9b549f9ae0867699042e0f5856577919a749": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16660. ABFS: Make RetryCount in ExponentialRetryPolicy Configurable.\n\nContributed by Sneha Vijayarajan.\n",
      "commitDate": "27/11/19 3:10 PM",
      "commitName": "82ad9b549f9ae0867699042e0f5856577919a749",
      "commitAuthor": "Sneha Vijayarajan",
      "commitDateOld": "27/11/19 7:56 AM",
      "commitNameOld": "9e69628f55be4acc040b7fe06cc22097238bb848",
      "commitAuthorOld": "bilaharith",
      "daysBetweenCommits": 0.3,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,38 @@\n   private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure)\n       throws IOException {\n     if (this.client !\u003d null) {\n       return;\n     }\n \n     final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSecure);\n \n     final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n \n     URL baseUrl;\n     try {\n       baseUrl \u003d new URL(url);\n     } catch (MalformedURLException e) {\n       throw new InvalidUriException(uri.toString());\n     }\n \n     SharedKeyCredentials creds \u003d null;\n     AccessTokenProvider tokenProvider \u003d null;\n \n     if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n       int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n       if (dotIndex \u003c\u003d 0) {\n         throw new InvalidUriException(\n                 uri.toString() + \" - account name is not fully qualified.\");\n       }\n       creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n             abfsConfiguration.getStorageAccountKey());\n     } else {\n       tokenProvider \u003d abfsConfiguration.getTokenProvider();\n       ExtensionHelper.bind(tokenProvider, uri,\n             abfsConfiguration.getRawConfiguration());\n     }\n \n-    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy(), tokenProvider, abfsPerfTracker);\n+    this.client \u003d new AbfsClient(baseUrl, creds, abfsConfiguration,\n+        new ExponentialRetryPolicy(abfsConfiguration.getMaxIoRetries()),\n+        tokenProvider, abfsPerfTracker);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure)\n      throws IOException {\n    if (this.client !\u003d null) {\n      return;\n    }\n\n    final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSecure);\n\n    final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n\n    URL baseUrl;\n    try {\n      baseUrl \u003d new URL(url);\n    } catch (MalformedURLException e) {\n      throw new InvalidUriException(uri.toString());\n    }\n\n    SharedKeyCredentials creds \u003d null;\n    AccessTokenProvider tokenProvider \u003d null;\n\n    if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n      int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n      if (dotIndex \u003c\u003d 0) {\n        throw new InvalidUriException(\n                uri.toString() + \" - account name is not fully qualified.\");\n      }\n      creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n            abfsConfiguration.getStorageAccountKey());\n    } else {\n      tokenProvider \u003d abfsConfiguration.getTokenProvider();\n      ExtensionHelper.bind(tokenProvider, uri,\n            abfsConfiguration.getRawConfiguration());\n    }\n\n    this.client \u003d new AbfsClient(baseUrl, creds, abfsConfiguration,\n        new ExponentialRetryPolicy(abfsConfiguration.getMaxIoRetries()),\n        tokenProvider, abfsPerfTracker);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "b033c681e4fc3ee1a38caa807e130aee481d99d5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16612. Track Azure Blob File System client-perceived latency\n\nContributed by Jeetesh Mangwani.\n\nThis add the ability to track the end-to-end performance of ADLS Gen 2 REST APIs by measuring latency in the Hadoop ABFS driver.\nThe latency information is sent back to the ADLS Gen 2 REST API endpoints in the subsequent requests.\n",
      "commitDate": "19/11/19 9:00 AM",
      "commitName": "b033c681e4fc3ee1a38caa807e130aee481d99d5",
      "commitAuthor": "Jeetesh Mangwani",
      "commitDateOld": "28/09/19 8:39 PM",
      "commitNameOld": "c0edc848a8e71b5e2a1586a589bbf2ac8685040d",
      "commitAuthorOld": "Sneha Vijayarajan",
      "daysBetweenCommits": 51.56,
      "commitsBetweenForRepo": 252,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure)\n       throws IOException {\n     if (this.client !\u003d null) {\n       return;\n     }\n \n     final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSecure);\n \n     final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n \n     URL baseUrl;\n     try {\n       baseUrl \u003d new URL(url);\n     } catch (MalformedURLException e) {\n       throw new InvalidUriException(uri.toString());\n     }\n \n     SharedKeyCredentials creds \u003d null;\n     AccessTokenProvider tokenProvider \u003d null;\n \n     if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n       int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n       if (dotIndex \u003c\u003d 0) {\n         throw new InvalidUriException(\n                 uri.toString() + \" - account name is not fully qualified.\");\n       }\n       creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n             abfsConfiguration.getStorageAccountKey());\n     } else {\n       tokenProvider \u003d abfsConfiguration.getTokenProvider();\n       ExtensionHelper.bind(tokenProvider, uri,\n             abfsConfiguration.getRawConfiguration());\n     }\n \n-    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy(), tokenProvider);\n+    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy(), tokenProvider, abfsPerfTracker);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure)\n      throws IOException {\n    if (this.client !\u003d null) {\n      return;\n    }\n\n    final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSecure);\n\n    final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n\n    URL baseUrl;\n    try {\n      baseUrl \u003d new URL(url);\n    } catch (MalformedURLException e) {\n      throw new InvalidUriException(uri.toString());\n    }\n\n    SharedKeyCredentials creds \u003d null;\n    AccessTokenProvider tokenProvider \u003d null;\n\n    if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n      int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n      if (dotIndex \u003c\u003d 0) {\n        throw new InvalidUriException(\n                uri.toString() + \" - account name is not fully qualified.\");\n      }\n      creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n            abfsConfiguration.getStorageAccountKey());\n    } else {\n      tokenProvider \u003d abfsConfiguration.getTokenProvider();\n      ExtensionHelper.bind(tokenProvider, uri,\n            abfsConfiguration.getRawConfiguration());\n    }\n\n    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy(), tokenProvider, abfsPerfTracker);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "65f60e56b082faf92e1cd3daee2569d8fc669c67": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-16068. ABFS Authentication and Delegation Token plugins to optionally be bound to specific URI of the store.\n\nContributed by Steve Loughran.\n",
      "commitDate": "28/02/19 6:22 AM",
      "commitName": "65f60e56b082faf92e1cd3daee2569d8fc669c67",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-16068. ABFS Authentication and Delegation Token plugins to optionally be bound to specific URI of the store.\n\nContributed by Steve Loughran.\n",
          "commitDate": "28/02/19 6:22 AM",
          "commitName": "65f60e56b082faf92e1cd3daee2569d8fc669c67",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "26/02/19 7:37 AM",
          "commitNameOld": "3988e75ca385aec31ca1fc49d6cffce1ea935825",
          "commitAuthorOld": "Da Zhou",
          "daysBetweenCommits": 1.95,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-  private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure) throws AzureBlobFileSystemException {\n+  private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure)\n+      throws IOException {\n     if (this.client !\u003d null) {\n       return;\n     }\n \n     final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSecure);\n \n     final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n \n     URL baseUrl;\n     try {\n       baseUrl \u003d new URL(url);\n     } catch (MalformedURLException e) {\n       throw new InvalidUriException(uri.toString());\n     }\n \n     SharedKeyCredentials creds \u003d null;\n     AccessTokenProvider tokenProvider \u003d null;\n \n     if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n       int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n       if (dotIndex \u003c\u003d 0) {\n         throw new InvalidUriException(\n                 uri.toString() + \" - account name is not fully qualified.\");\n       }\n       creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n             abfsConfiguration.getStorageAccountKey());\n     } else {\n       tokenProvider \u003d abfsConfiguration.getTokenProvider();\n+      ExtensionHelper.bind(tokenProvider, uri,\n+            abfsConfiguration.getRawConfiguration());\n     }\n \n     this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy(), tokenProvider);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure)\n      throws IOException {\n    if (this.client !\u003d null) {\n      return;\n    }\n\n    final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSecure);\n\n    final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n\n    URL baseUrl;\n    try {\n      baseUrl \u003d new URL(url);\n    } catch (MalformedURLException e) {\n      throw new InvalidUriException(uri.toString());\n    }\n\n    SharedKeyCredentials creds \u003d null;\n    AccessTokenProvider tokenProvider \u003d null;\n\n    if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n      int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n      if (dotIndex \u003c\u003d 0) {\n        throw new InvalidUriException(\n                uri.toString() + \" - account name is not fully qualified.\");\n      }\n      creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n            abfsConfiguration.getStorageAccountKey());\n    } else {\n      tokenProvider \u003d abfsConfiguration.getTokenProvider();\n      ExtensionHelper.bind(tokenProvider, uri,\n            abfsConfiguration.getRawConfiguration());\n    }\n\n    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy(), tokenProvider);\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
          "extendedDetails": {
            "oldValue": "[AzureBlobFileSystemException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16068. ABFS Authentication and Delegation Token plugins to optionally be bound to specific URI of the store.\n\nContributed by Steve Loughran.\n",
          "commitDate": "28/02/19 6:22 AM",
          "commitName": "65f60e56b082faf92e1cd3daee2569d8fc669c67",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "26/02/19 7:37 AM",
          "commitNameOld": "3988e75ca385aec31ca1fc49d6cffce1ea935825",
          "commitAuthorOld": "Da Zhou",
          "daysBetweenCommits": 1.95,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-  private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure) throws AzureBlobFileSystemException {\n+  private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure)\n+      throws IOException {\n     if (this.client !\u003d null) {\n       return;\n     }\n \n     final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSecure);\n \n     final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n \n     URL baseUrl;\n     try {\n       baseUrl \u003d new URL(url);\n     } catch (MalformedURLException e) {\n       throw new InvalidUriException(uri.toString());\n     }\n \n     SharedKeyCredentials creds \u003d null;\n     AccessTokenProvider tokenProvider \u003d null;\n \n     if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n       int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n       if (dotIndex \u003c\u003d 0) {\n         throw new InvalidUriException(\n                 uri.toString() + \" - account name is not fully qualified.\");\n       }\n       creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n             abfsConfiguration.getStorageAccountKey());\n     } else {\n       tokenProvider \u003d abfsConfiguration.getTokenProvider();\n+      ExtensionHelper.bind(tokenProvider, uri,\n+            abfsConfiguration.getRawConfiguration());\n     }\n \n     this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy(), tokenProvider);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure)\n      throws IOException {\n    if (this.client !\u003d null) {\n      return;\n    }\n\n    final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSecure);\n\n    final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n\n    URL baseUrl;\n    try {\n      baseUrl \u003d new URL(url);\n    } catch (MalformedURLException e) {\n      throw new InvalidUriException(uri.toString());\n    }\n\n    SharedKeyCredentials creds \u003d null;\n    AccessTokenProvider tokenProvider \u003d null;\n\n    if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n      int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n      if (dotIndex \u003c\u003d 0) {\n        throw new InvalidUriException(\n                uri.toString() + \" - account name is not fully qualified.\");\n      }\n      creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n            abfsConfiguration.getStorageAccountKey());\n    } else {\n      tokenProvider \u003d abfsConfiguration.getTokenProvider();\n      ExtensionHelper.bind(tokenProvider, uri,\n            abfsConfiguration.getRawConfiguration());\n    }\n\n    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy(), tokenProvider);\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "e5593cbd8323399359b3e8da46bd58e8364cbf22": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-15694. ABFS: Allow OAuth credentials to not be tied to accounts.\nContributed by Sean Mackrory.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "e5593cbd8323399359b3e8da46bd58e8364cbf22",
      "commitAuthor": "Thomas Marquardt",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-15694. ABFS: Allow OAuth credentials to not be tied to accounts.\nContributed by Sean Mackrory.\n",
          "commitDate": "17/09/18 12:54 PM",
          "commitName": "e5593cbd8323399359b3e8da46bd58e8364cbf22",
          "commitAuthor": "Thomas Marquardt",
          "commitDateOld": "17/09/18 12:54 PM",
          "commitNameOld": "81dc4a995c3837b721a0c1f897698b5ed47b8fb0",
          "commitAuthorOld": "Thomas Marquardt",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,33 @@\n-  private void initializeClient(URI uri, boolean isSeure) throws AzureBlobFileSystemException {\n+  private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure) throws AzureBlobFileSystemException {\n     if (this.client !\u003d null) {\n       return;\n     }\n \n-    final String authority \u003d uri.getRawAuthority();\n-    if (null \u003d\u003d authority) {\n-      throw new InvalidUriAuthorityException(uri.toString());\n-    }\n-\n-    if (!authority.contains(AbfsHttpConstants.AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER)) {\n-      throw new InvalidUriAuthorityException(uri.toString());\n-    }\n-\n-    final String[] authorityParts \u003d authority.split(AbfsHttpConstants.AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER, 2);\n-\n-    if (authorityParts.length \u003c 2 || authorityParts[0] !\u003d null\n-        \u0026\u0026 authorityParts[0].isEmpty()) {\n-      final String errMsg \u003d String\n-              .format(\"\u0027%s\u0027 has a malformed authority, expected container name. \"\n-                      + \"Authority takes the form \"\n-                      + FileSystemUriSchemes.ABFS_SCHEME + \"://[\u003ccontainer name\u003e@]\u003caccount name\u003e\",\n-                      uri.toString());\n-      throw new InvalidUriException(errMsg);\n-    }\n-\n-    final String fileSystemName \u003d authorityParts[0];\n-    final String accountName \u003d authorityParts[1];\n-\n-    final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSeure);\n+    final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSecure);\n \n     final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n \n     URL baseUrl;\n     try {\n       baseUrl \u003d new URL(url);\n     } catch (MalformedURLException e) {\n       throw new InvalidUriException(uri.toString());\n     }\n \n     SharedKeyCredentials creds \u003d null;\n     AccessTokenProvider tokenProvider \u003d null;\n \n     if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n       int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n       if (dotIndex \u003c\u003d 0) {\n         throw new InvalidUriException(\n                 uri.toString() + \" - account name is not fully qualified.\");\n       }\n       creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n-            abfsConfiguration.getStorageAccountKey(accountName));\n+            abfsConfiguration.getStorageAccountKey());\n     } else {\n-      tokenProvider \u003d abfsConfiguration.getTokenProvider(accountName);\n+      tokenProvider \u003d abfsConfiguration.getTokenProvider();\n     }\n \n     this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy(), tokenProvider);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure) throws AzureBlobFileSystemException {\n    if (this.client !\u003d null) {\n      return;\n    }\n\n    final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSecure);\n\n    final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n\n    URL baseUrl;\n    try {\n      baseUrl \u003d new URL(url);\n    } catch (MalformedURLException e) {\n      throw new InvalidUriException(uri.toString());\n    }\n\n    SharedKeyCredentials creds \u003d null;\n    AccessTokenProvider tokenProvider \u003d null;\n\n    if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n      int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n      if (dotIndex \u003c\u003d 0) {\n        throw new InvalidUriException(\n                uri.toString() + \" - account name is not fully qualified.\");\n      }\n      creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n            abfsConfiguration.getStorageAccountKey());\n    } else {\n      tokenProvider \u003d abfsConfiguration.getTokenProvider();\n    }\n\n    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy(), tokenProvider);\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
          "extendedDetails": {
            "oldValue": "[uri-URI, isSeure-boolean]",
            "newValue": "[uri-URI, fileSystemName-String, accountName-String, isSecure-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15694. ABFS: Allow OAuth credentials to not be tied to accounts.\nContributed by Sean Mackrory.\n",
          "commitDate": "17/09/18 12:54 PM",
          "commitName": "e5593cbd8323399359b3e8da46bd58e8364cbf22",
          "commitAuthor": "Thomas Marquardt",
          "commitDateOld": "17/09/18 12:54 PM",
          "commitNameOld": "81dc4a995c3837b721a0c1f897698b5ed47b8fb0",
          "commitAuthorOld": "Thomas Marquardt",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,33 @@\n-  private void initializeClient(URI uri, boolean isSeure) throws AzureBlobFileSystemException {\n+  private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure) throws AzureBlobFileSystemException {\n     if (this.client !\u003d null) {\n       return;\n     }\n \n-    final String authority \u003d uri.getRawAuthority();\n-    if (null \u003d\u003d authority) {\n-      throw new InvalidUriAuthorityException(uri.toString());\n-    }\n-\n-    if (!authority.contains(AbfsHttpConstants.AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER)) {\n-      throw new InvalidUriAuthorityException(uri.toString());\n-    }\n-\n-    final String[] authorityParts \u003d authority.split(AbfsHttpConstants.AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER, 2);\n-\n-    if (authorityParts.length \u003c 2 || authorityParts[0] !\u003d null\n-        \u0026\u0026 authorityParts[0].isEmpty()) {\n-      final String errMsg \u003d String\n-              .format(\"\u0027%s\u0027 has a malformed authority, expected container name. \"\n-                      + \"Authority takes the form \"\n-                      + FileSystemUriSchemes.ABFS_SCHEME + \"://[\u003ccontainer name\u003e@]\u003caccount name\u003e\",\n-                      uri.toString());\n-      throw new InvalidUriException(errMsg);\n-    }\n-\n-    final String fileSystemName \u003d authorityParts[0];\n-    final String accountName \u003d authorityParts[1];\n-\n-    final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSeure);\n+    final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSecure);\n \n     final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n \n     URL baseUrl;\n     try {\n       baseUrl \u003d new URL(url);\n     } catch (MalformedURLException e) {\n       throw new InvalidUriException(uri.toString());\n     }\n \n     SharedKeyCredentials creds \u003d null;\n     AccessTokenProvider tokenProvider \u003d null;\n \n     if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n       int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n       if (dotIndex \u003c\u003d 0) {\n         throw new InvalidUriException(\n                 uri.toString() + \" - account name is not fully qualified.\");\n       }\n       creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n-            abfsConfiguration.getStorageAccountKey(accountName));\n+            abfsConfiguration.getStorageAccountKey());\n     } else {\n-      tokenProvider \u003d abfsConfiguration.getTokenProvider(accountName);\n+      tokenProvider \u003d abfsConfiguration.getTokenProvider();\n     }\n \n     this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy(), tokenProvider);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeClient(URI uri, String fileSystemName, String accountName, boolean isSecure) throws AzureBlobFileSystemException {\n    if (this.client !\u003d null) {\n      return;\n    }\n\n    final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSecure);\n\n    final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n\n    URL baseUrl;\n    try {\n      baseUrl \u003d new URL(url);\n    } catch (MalformedURLException e) {\n      throw new InvalidUriException(uri.toString());\n    }\n\n    SharedKeyCredentials creds \u003d null;\n    AccessTokenProvider tokenProvider \u003d null;\n\n    if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n      int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n      if (dotIndex \u003c\u003d 0) {\n        throw new InvalidUriException(\n                uri.toString() + \" - account name is not fully qualified.\");\n      }\n      creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n            abfsConfiguration.getStorageAccountKey());\n    } else {\n      tokenProvider \u003d abfsConfiguration.getTokenProvider();\n    }\n\n    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy(), tokenProvider);\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15660. ABFS: Add support for OAuth\nContributed by Da Zhou, Rajeev Bansal, and Junhua Gu.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "9149b9703e3ab09abdc087db129e82ad3f4cefa1",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "b54b0c1b676c616aef9574e4e88ea30c314c79dc",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,57 @@\n   private void initializeClient(URI uri, boolean isSeure) throws AzureBlobFileSystemException {\n     if (this.client !\u003d null) {\n       return;\n     }\n \n     final String authority \u003d uri.getRawAuthority();\n     if (null \u003d\u003d authority) {\n       throw new InvalidUriAuthorityException(uri.toString());\n     }\n \n     if (!authority.contains(AbfsHttpConstants.AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER)) {\n       throw new InvalidUriAuthorityException(uri.toString());\n     }\n \n     final String[] authorityParts \u003d authority.split(AbfsHttpConstants.AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER, 2);\n \n     if (authorityParts.length \u003c 2 || authorityParts[0] !\u003d null\n         \u0026\u0026 authorityParts[0].isEmpty()) {\n       final String errMsg \u003d String\n               .format(\"\u0027%s\u0027 has a malformed authority, expected container name. \"\n                       + \"Authority takes the form \"\n                       + FileSystemUriSchemes.ABFS_SCHEME + \"://[\u003ccontainer name\u003e@]\u003caccount name\u003e\",\n                       uri.toString());\n       throw new InvalidUriException(errMsg);\n     }\n \n     final String fileSystemName \u003d authorityParts[0];\n     final String accountName \u003d authorityParts[1];\n \n     final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSeure);\n \n     final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n \n     URL baseUrl;\n     try {\n       baseUrl \u003d new URL(url);\n     } catch (MalformedURLException e) {\n       throw new InvalidUriException(uri.toString());\n     }\n \n-    int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n-    if (dotIndex \u003c\u003d 0) {\n-      throw new InvalidUriException(\n-          uri.toString() + \" - account name is not fully qualified.\");\n-    }\n-    SharedKeyCredentials creds \u003d\n-            new SharedKeyCredentials(accountName.substring(0, dotIndex),\n-                    this.abfsConfiguration.getStorageAccountKey(accountName));\n+    SharedKeyCredentials creds \u003d null;\n+    AccessTokenProvider tokenProvider \u003d null;\n \n-    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy());\n+    if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n+      int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n+      if (dotIndex \u003c\u003d 0) {\n+        throw new InvalidUriException(\n+                uri.toString() + \" - account name is not fully qualified.\");\n+      }\n+      creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n+            abfsConfiguration.getStorageAccountKey(accountName));\n+    } else {\n+      tokenProvider \u003d abfsConfiguration.getTokenProvider(accountName);\n+    }\n+\n+    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy(), tokenProvider);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeClient(URI uri, boolean isSeure) throws AzureBlobFileSystemException {\n    if (this.client !\u003d null) {\n      return;\n    }\n\n    final String authority \u003d uri.getRawAuthority();\n    if (null \u003d\u003d authority) {\n      throw new InvalidUriAuthorityException(uri.toString());\n    }\n\n    if (!authority.contains(AbfsHttpConstants.AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER)) {\n      throw new InvalidUriAuthorityException(uri.toString());\n    }\n\n    final String[] authorityParts \u003d authority.split(AbfsHttpConstants.AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER, 2);\n\n    if (authorityParts.length \u003c 2 || authorityParts[0] !\u003d null\n        \u0026\u0026 authorityParts[0].isEmpty()) {\n      final String errMsg \u003d String\n              .format(\"\u0027%s\u0027 has a malformed authority, expected container name. \"\n                      + \"Authority takes the form \"\n                      + FileSystemUriSchemes.ABFS_SCHEME + \"://[\u003ccontainer name\u003e@]\u003caccount name\u003e\",\n                      uri.toString());\n      throw new InvalidUriException(errMsg);\n    }\n\n    final String fileSystemName \u003d authorityParts[0];\n    final String accountName \u003d authorityParts[1];\n\n    final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSeure);\n\n    final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n\n    URL baseUrl;\n    try {\n      baseUrl \u003d new URL(url);\n    } catch (MalformedURLException e) {\n      throw new InvalidUriException(uri.toString());\n    }\n\n    SharedKeyCredentials creds \u003d null;\n    AccessTokenProvider tokenProvider \u003d null;\n\n    if (abfsConfiguration.getAuthType(accountName) \u003d\u003d AuthType.SharedKey) {\n      int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n      if (dotIndex \u003c\u003d 0) {\n        throw new InvalidUriException(\n                uri.toString() + \" - account name is not fully qualified.\");\n      }\n      creds \u003d new SharedKeyCredentials(accountName.substring(0, dotIndex),\n            abfsConfiguration.getStorageAccountKey(accountName));\n    } else {\n      tokenProvider \u003d abfsConfiguration.getTokenProvider(accountName);\n    }\n\n    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy(), tokenProvider);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15446. ABFS: tune imports \u0026 javadocs; stabilise tests.\nContributed by Steve Loughran and Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,51 @@\n   private void initializeClient(URI uri, boolean isSeure) throws AzureBlobFileSystemException {\n     if (this.client !\u003d null) {\n       return;\n     }\n \n     final String authority \u003d uri.getRawAuthority();\n     if (null \u003d\u003d authority) {\n       throw new InvalidUriAuthorityException(uri.toString());\n     }\n \n     if (!authority.contains(AbfsHttpConstants.AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER)) {\n       throw new InvalidUriAuthorityException(uri.toString());\n     }\n \n     final String[] authorityParts \u003d authority.split(AbfsHttpConstants.AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER, 2);\n \n-    if (authorityParts.length \u003c 2 || \"\".equals(authorityParts[0])) {\n+    if (authorityParts.length \u003c 2 || authorityParts[0] !\u003d null\n+        \u0026\u0026 authorityParts[0].isEmpty()) {\n       final String errMsg \u003d String\n-              .format(\"URI \u0027%s\u0027 has a malformed authority, expected container name. \"\n-                              + \"Authority takes the form \"+ FileSystemUriSchemes.ABFS_SCHEME + \"://[\u003ccontainer name\u003e@]\u003caccount name\u003e\",\n+              .format(\"\u0027%s\u0027 has a malformed authority, expected container name. \"\n+                      + \"Authority takes the form \"\n+                      + FileSystemUriSchemes.ABFS_SCHEME + \"://[\u003ccontainer name\u003e@]\u003caccount name\u003e\",\n                       uri.toString());\n       throw new InvalidUriException(errMsg);\n     }\n \n     final String fileSystemName \u003d authorityParts[0];\n     final String accountName \u003d authorityParts[1];\n \n     final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSeure);\n \n     final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n \n     URL baseUrl;\n     try {\n       baseUrl \u003d new URL(url);\n     } catch (MalformedURLException e) {\n-      throw new InvalidUriException(String.format(\"URI \u0027%s\u0027 is malformed\", uri.toString()));\n+      throw new InvalidUriException(uri.toString());\n     }\n \n+    int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n+    if (dotIndex \u003c\u003d 0) {\n+      throw new InvalidUriException(\n+          uri.toString() + \" - account name is not fully qualified.\");\n+    }\n     SharedKeyCredentials creds \u003d\n-            new SharedKeyCredentials(accountName.substring(0, accountName.indexOf(AbfsHttpConstants.DOT)),\n+            new SharedKeyCredentials(accountName.substring(0, dotIndex),\n                     this.abfsConfiguration.getStorageAccountKey(accountName));\n \n     this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeClient(URI uri, boolean isSeure) throws AzureBlobFileSystemException {\n    if (this.client !\u003d null) {\n      return;\n    }\n\n    final String authority \u003d uri.getRawAuthority();\n    if (null \u003d\u003d authority) {\n      throw new InvalidUriAuthorityException(uri.toString());\n    }\n\n    if (!authority.contains(AbfsHttpConstants.AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER)) {\n      throw new InvalidUriAuthorityException(uri.toString());\n    }\n\n    final String[] authorityParts \u003d authority.split(AbfsHttpConstants.AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER, 2);\n\n    if (authorityParts.length \u003c 2 || authorityParts[0] !\u003d null\n        \u0026\u0026 authorityParts[0].isEmpty()) {\n      final String errMsg \u003d String\n              .format(\"\u0027%s\u0027 has a malformed authority, expected container name. \"\n                      + \"Authority takes the form \"\n                      + FileSystemUriSchemes.ABFS_SCHEME + \"://[\u003ccontainer name\u003e@]\u003caccount name\u003e\",\n                      uri.toString());\n      throw new InvalidUriException(errMsg);\n    }\n\n    final String fileSystemName \u003d authorityParts[0];\n    final String accountName \u003d authorityParts[1];\n\n    final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSeure);\n\n    final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n\n    URL baseUrl;\n    try {\n      baseUrl \u003d new URL(url);\n    } catch (MalformedURLException e) {\n      throw new InvalidUriException(uri.toString());\n    }\n\n    int dotIndex \u003d accountName.indexOf(AbfsHttpConstants.DOT);\n    if (dotIndex \u003c\u003d 0) {\n      throw new InvalidUriException(\n          uri.toString() + \" - account name is not fully qualified.\");\n    }\n    SharedKeyCredentials creds \u003d\n            new SharedKeyCredentials(accountName.substring(0, dotIndex),\n                    this.abfsConfiguration.getStorageAccountKey(accountName));\n\n    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy());\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15560. ABFS: removed dependency injection and unnecessary dependencies.\nContributed by Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,44 @@\n+  private void initializeClient(URI uri, boolean isSeure) throws AzureBlobFileSystemException {\n+    if (this.client !\u003d null) {\n+      return;\n+    }\n+\n+    final String authority \u003d uri.getRawAuthority();\n+    if (null \u003d\u003d authority) {\n+      throw new InvalidUriAuthorityException(uri.toString());\n+    }\n+\n+    if (!authority.contains(AbfsHttpConstants.AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER)) {\n+      throw new InvalidUriAuthorityException(uri.toString());\n+    }\n+\n+    final String[] authorityParts \u003d authority.split(AbfsHttpConstants.AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER, 2);\n+\n+    if (authorityParts.length \u003c 2 || \"\".equals(authorityParts[0])) {\n+      final String errMsg \u003d String\n+              .format(\"URI \u0027%s\u0027 has a malformed authority, expected container name. \"\n+                              + \"Authority takes the form \"+ FileSystemUriSchemes.ABFS_SCHEME + \"://[\u003ccontainer name\u003e@]\u003caccount name\u003e\",\n+                      uri.toString());\n+      throw new InvalidUriException(errMsg);\n+    }\n+\n+    final String fileSystemName \u003d authorityParts[0];\n+    final String accountName \u003d authorityParts[1];\n+\n+    final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSeure);\n+\n+    final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n+\n+    URL baseUrl;\n+    try {\n+      baseUrl \u003d new URL(url);\n+    } catch (MalformedURLException e) {\n+      throw new InvalidUriException(String.format(\"URI \u0027%s\u0027 is malformed\", uri.toString()));\n+    }\n+\n+    SharedKeyCredentials creds \u003d\n+            new SharedKeyCredentials(accountName.substring(0, accountName.indexOf(AbfsHttpConstants.DOT)),\n+                    this.abfsConfiguration.getStorageAccountKey(accountName));\n+\n+    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeClient(URI uri, boolean isSeure) throws AzureBlobFileSystemException {\n    if (this.client !\u003d null) {\n      return;\n    }\n\n    final String authority \u003d uri.getRawAuthority();\n    if (null \u003d\u003d authority) {\n      throw new InvalidUriAuthorityException(uri.toString());\n    }\n\n    if (!authority.contains(AbfsHttpConstants.AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER)) {\n      throw new InvalidUriAuthorityException(uri.toString());\n    }\n\n    final String[] authorityParts \u003d authority.split(AbfsHttpConstants.AZURE_DISTRIBUTED_FILE_SYSTEM_AUTHORITY_DELIMITER, 2);\n\n    if (authorityParts.length \u003c 2 || \"\".equals(authorityParts[0])) {\n      final String errMsg \u003d String\n              .format(\"URI \u0027%s\u0027 has a malformed authority, expected container name. \"\n                              + \"Authority takes the form \"+ FileSystemUriSchemes.ABFS_SCHEME + \"://[\u003ccontainer name\u003e@]\u003caccount name\u003e\",\n                      uri.toString());\n      throw new InvalidUriException(errMsg);\n    }\n\n    final String fileSystemName \u003d authorityParts[0];\n    final String accountName \u003d authorityParts[1];\n\n    final URIBuilder uriBuilder \u003d getURIBuilder(accountName, isSeure);\n\n    final String url \u003d uriBuilder.toString() + AbfsHttpConstants.FORWARD_SLASH + fileSystemName;\n\n    URL baseUrl;\n    try {\n      baseUrl \u003d new URL(url);\n    } catch (MalformedURLException e) {\n      throw new InvalidUriException(String.format(\"URI \u0027%s\u0027 is malformed\", uri.toString()));\n    }\n\n    SharedKeyCredentials creds \u003d\n            new SharedKeyCredentials(accountName.substring(0, accountName.indexOf(AbfsHttpConstants.DOT)),\n                    this.abfsConfiguration.getStorageAccountKey(accountName));\n\n    this.client \u003d  new AbfsClient(baseUrl, creds, abfsConfiguration, new ExponentialRetryPolicy());\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java"
    }
  }
}