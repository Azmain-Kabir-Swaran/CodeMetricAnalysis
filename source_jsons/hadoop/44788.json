{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAdminCLI.java",
  "functionName": "parseCommandAndCreateResource",
  "functionId": "parseCommandAndCreateResource___resourceTypes-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
  "functionStartLine": 919,
  "functionEndLine": 957,
  "numCommitsSeen": 51,
  "timeTaken": 1924,
  "changeHistory": [
    "745f64012a2a912d5f0a36bbda89dc638e1715cb",
    "2564b4d07f63de142fe1909d61904831c108667c"
  ],
  "changeHistoryShort": {
    "745f64012a2a912d5f0a36bbda89dc638e1715cb": "Ybodychange",
    "2564b4d07f63de142fe1909d61904831c108667c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "745f64012a2a912d5f0a36bbda89dc638e1715cb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8843. updateNodeResource does not support units for memory. Contributed by Manikandan R.\n",
      "commitDate": "08/10/18 10:05 AM",
      "commitName": "745f64012a2a912d5f0a36bbda89dc638e1715cb",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "31/07/18 9:36 AM",
      "commitNameOld": "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 69.02,
      "commitsBetweenForRepo": 612,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,39 @@\n   private Resource parseCommandAndCreateResource(String resourceTypes) {\n     Resource resource \u003d Resource.newInstance(0, 0);\n     Map\u003cString, ResourceInformation\u003e resourceTypesFromRM \u003d\n         ResourceUtils.getResourceTypes();\n     String[] resourceTypesArr \u003d resourceTypes.split(\",\");\n     for (int k \u003d 0; k \u003c resourceTypesArr.length; k++) {\n       String resourceType \u003d resourceTypesArr[k];\n       String[] resourceTypeArray \u003d resourceType.split(\"\u003d\");\n       if (resourceTypeArray.length \u003d\u003d 2) {\n         String resName \u003d StringUtils.trim(resourceTypeArray[0]);\n         String resValue \u003d StringUtils.trim(resourceTypeArray[1]);\n         if (resourceTypesFromRM.containsKey(resName)) {\n           String[] resourceValue \u003d ResourceUtils.parseResourceValue(resValue);\n           if (resourceValue.length \u003d\u003d 2) {\n+            long value \u003d Long.parseLong(resourceValue[1]);\n+            if (!resourceTypesFromRM.get(resName).getUnits()\n+                .equals(resourceValue[0])) {\n+              value \u003d UnitsConversionUtil.convert(resourceValue[0],\n+                  resourceTypesFromRM.get(resName).getUnits(), value);\n+            }\n             ResourceInformation ri \u003d ResourceInformation.newInstance(resName,\n-                resourceValue[0], Long.parseLong(resourceValue[1]));\n+                resourceValue[0], value);\n             resource.setResourceInformation(resName, ri);\n           } else {\n             throw new IllegalArgumentException(\"Invalid resource value: \" +\n                 resValue + \". Unable to extract unit and actual value.\");\n           }\n         } else {\n           throw new IllegalArgumentException(\"Invalid resource type: \" +\n               resName + \". Not allowed.\");\n         }\n       } else {\n         throw new IllegalArgumentException(\"Invalid resource type value: \" +\n             \"(\"+ resourceType + \") for updateNodeResource. \"\n                 + \"It should be key value pairs separated using \u0027\u003d\u0027 symbol.\");\n       }\n     }\n     return resource;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource parseCommandAndCreateResource(String resourceTypes) {\n    Resource resource \u003d Resource.newInstance(0, 0);\n    Map\u003cString, ResourceInformation\u003e resourceTypesFromRM \u003d\n        ResourceUtils.getResourceTypes();\n    String[] resourceTypesArr \u003d resourceTypes.split(\",\");\n    for (int k \u003d 0; k \u003c resourceTypesArr.length; k++) {\n      String resourceType \u003d resourceTypesArr[k];\n      String[] resourceTypeArray \u003d resourceType.split(\"\u003d\");\n      if (resourceTypeArray.length \u003d\u003d 2) {\n        String resName \u003d StringUtils.trim(resourceTypeArray[0]);\n        String resValue \u003d StringUtils.trim(resourceTypeArray[1]);\n        if (resourceTypesFromRM.containsKey(resName)) {\n          String[] resourceValue \u003d ResourceUtils.parseResourceValue(resValue);\n          if (resourceValue.length \u003d\u003d 2) {\n            long value \u003d Long.parseLong(resourceValue[1]);\n            if (!resourceTypesFromRM.get(resName).getUnits()\n                .equals(resourceValue[0])) {\n              value \u003d UnitsConversionUtil.convert(resourceValue[0],\n                  resourceTypesFromRM.get(resName).getUnits(), value);\n            }\n            ResourceInformation ri \u003d ResourceInformation.newInstance(resName,\n                resourceValue[0], value);\n            resource.setResourceInformation(resName, ri);\n          } else {\n            throw new IllegalArgumentException(\"Invalid resource value: \" +\n                resValue + \". Unable to extract unit and actual value.\");\n          }\n        } else {\n          throw new IllegalArgumentException(\"Invalid resource type: \" +\n              resName + \". Not allowed.\");\n        }\n      } else {\n        throw new IllegalArgumentException(\"Invalid resource type value: \" +\n            \"(\"+ resourceType + \") for updateNodeResource. \"\n                + \"It should be key value pairs separated using \u0027\u003d\u0027 symbol.\");\n      }\n    }\n    return resource;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "2564b4d07f63de142fe1909d61904831c108667c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7119. Support multiple resource types in rmadmin updateNodeResource command. Contributed by Manikandan R.\n",
      "commitDate": "14/12/17 2:41 AM",
      "commitName": "2564b4d07f63de142fe1909d61904831c108667c",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,33 @@\n+  private Resource parseCommandAndCreateResource(String resourceTypes) {\n+    Resource resource \u003d Resource.newInstance(0, 0);\n+    Map\u003cString, ResourceInformation\u003e resourceTypesFromRM \u003d\n+        ResourceUtils.getResourceTypes();\n+    String[] resourceTypesArr \u003d resourceTypes.split(\",\");\n+    for (int k \u003d 0; k \u003c resourceTypesArr.length; k++) {\n+      String resourceType \u003d resourceTypesArr[k];\n+      String[] resourceTypeArray \u003d resourceType.split(\"\u003d\");\n+      if (resourceTypeArray.length \u003d\u003d 2) {\n+        String resName \u003d StringUtils.trim(resourceTypeArray[0]);\n+        String resValue \u003d StringUtils.trim(resourceTypeArray[1]);\n+        if (resourceTypesFromRM.containsKey(resName)) {\n+          String[] resourceValue \u003d ResourceUtils.parseResourceValue(resValue);\n+          if (resourceValue.length \u003d\u003d 2) {\n+            ResourceInformation ri \u003d ResourceInformation.newInstance(resName,\n+                resourceValue[0], Long.parseLong(resourceValue[1]));\n+            resource.setResourceInformation(resName, ri);\n+          } else {\n+            throw new IllegalArgumentException(\"Invalid resource value: \" +\n+                resValue + \". Unable to extract unit and actual value.\");\n+          }\n+        } else {\n+          throw new IllegalArgumentException(\"Invalid resource type: \" +\n+              resName + \". Not allowed.\");\n+        }\n+      } else {\n+        throw new IllegalArgumentException(\"Invalid resource type value: \" +\n+            \"(\"+ resourceType + \") for updateNodeResource. \"\n+                + \"It should be key value pairs separated using \u0027\u003d\u0027 symbol.\");\n+      }\n+    }\n+    return resource;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource parseCommandAndCreateResource(String resourceTypes) {\n    Resource resource \u003d Resource.newInstance(0, 0);\n    Map\u003cString, ResourceInformation\u003e resourceTypesFromRM \u003d\n        ResourceUtils.getResourceTypes();\n    String[] resourceTypesArr \u003d resourceTypes.split(\",\");\n    for (int k \u003d 0; k \u003c resourceTypesArr.length; k++) {\n      String resourceType \u003d resourceTypesArr[k];\n      String[] resourceTypeArray \u003d resourceType.split(\"\u003d\");\n      if (resourceTypeArray.length \u003d\u003d 2) {\n        String resName \u003d StringUtils.trim(resourceTypeArray[0]);\n        String resValue \u003d StringUtils.trim(resourceTypeArray[1]);\n        if (resourceTypesFromRM.containsKey(resName)) {\n          String[] resourceValue \u003d ResourceUtils.parseResourceValue(resValue);\n          if (resourceValue.length \u003d\u003d 2) {\n            ResourceInformation ri \u003d ResourceInformation.newInstance(resName,\n                resourceValue[0], Long.parseLong(resourceValue[1]));\n            resource.setResourceInformation(resName, ri);\n          } else {\n            throw new IllegalArgumentException(\"Invalid resource value: \" +\n                resValue + \". Unable to extract unit and actual value.\");\n          }\n        } else {\n          throw new IllegalArgumentException(\"Invalid resource type: \" +\n              resName + \". Not allowed.\");\n        }\n      } else {\n        throw new IllegalArgumentException(\"Invalid resource type value: \" +\n            \"(\"+ resourceType + \") for updateNodeResource. \"\n                + \"It should be key value pairs separated using \u0027\u003d\u0027 symbol.\");\n      }\n    }\n    return resource;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java"
    }
  }
}