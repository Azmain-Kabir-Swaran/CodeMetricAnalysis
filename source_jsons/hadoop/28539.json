{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogServlet.java",
  "functionName": "getLogsInfo",
  "functionId": "getLogsInfo___hsr-HttpServletRequest__appIdStr-String__appAttemptIdStr-String__containerIdStr-String__nmId-String__redirectedFromNode-boolean__manualRedirection-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogServlet.java",
  "functionStartLine": 169,
  "functionEndLine": 209,
  "numCommitsSeen": 7,
  "timeTaken": 2863,
  "changeHistory": [
    "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
    "71b2c2ffe962ff4f5799e1f55961db687cb55842"
  ],
  "changeHistoryShort": {
    "ab3642955971dec1ce285f39cf0f02e6cc64b4b2": "Ymultichange(Yparameterchange,Ybodychange)",
    "71b2c2ffe962ff4f5799e1f55961db687cb55842": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab3642955971dec1ce285f39cf0f02e6cc64b4b2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-10215. Endpoint for obtaining direct URL for the logs. Contributed by Andras Gyori\n",
      "commitDate": "28/04/20 9:53 AM",
      "commitName": "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
      "commitAuthor": "Szilard Nemeth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-10215. Endpoint for obtaining direct URL for the logs. Contributed by Andras Gyori\n",
          "commitDate": "28/04/20 9:53 AM",
          "commitName": "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "06/02/20 3:25 AM",
          "commitNameOld": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 82.23,
          "commitsBetweenForRepo": 275,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,41 @@\n   public Response getLogsInfo(HttpServletRequest hsr, String appIdStr,\n       String appAttemptIdStr, String containerIdStr, String nmId,\n-      boolean redirectedFromNode) {\n+      boolean redirectedFromNode, boolean manualRedirection) {\n     ApplicationId appId \u003d null;\n     if (appIdStr !\u003d null) {\n       try {\n         appId \u003d ApplicationId.fromString(appIdStr);\n       } catch (IllegalArgumentException iae) {\n         throw new BadRequestException(iae);\n       }\n     }\n \n     ApplicationAttemptId appAttemptId \u003d null;\n     if (appAttemptIdStr !\u003d null) {\n       try {\n         appAttemptId \u003d ApplicationAttemptId.fromString(appAttemptIdStr);\n       } catch (IllegalArgumentException iae) {\n         throw new BadRequestException(iae);\n       }\n     }\n \n     ContainerId containerId \u003d null;\n     if (containerIdStr !\u003d null) {\n       try {\n         containerId \u003d ContainerId.fromString(containerIdStr);\n       } catch (IllegalArgumentException iae) {\n         throw new BadRequestException(iae);\n       }\n     }\n \n     validateUserInput(appId, appAttemptId, containerId);\n \n     WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n         WrappedLogMetaRequest.builder()\n             .setApplicationId(appId)\n             .setApplicationAttemptId(appAttemptId)\n             .setContainerId(containerIdStr);\n \n     return getContainerLogsInfo(hsr, logMetaRequestBuilder, nmId,\n-        redirectedFromNode, null);\n+        redirectedFromNode, null, manualRedirection);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getLogsInfo(HttpServletRequest hsr, String appIdStr,\n      String appAttemptIdStr, String containerIdStr, String nmId,\n      boolean redirectedFromNode, boolean manualRedirection) {\n    ApplicationId appId \u003d null;\n    if (appIdStr !\u003d null) {\n      try {\n        appId \u003d ApplicationId.fromString(appIdStr);\n      } catch (IllegalArgumentException iae) {\n        throw new BadRequestException(iae);\n      }\n    }\n\n    ApplicationAttemptId appAttemptId \u003d null;\n    if (appAttemptIdStr !\u003d null) {\n      try {\n        appAttemptId \u003d ApplicationAttemptId.fromString(appAttemptIdStr);\n      } catch (IllegalArgumentException iae) {\n        throw new BadRequestException(iae);\n      }\n    }\n\n    ContainerId containerId \u003d null;\n    if (containerIdStr !\u003d null) {\n      try {\n        containerId \u003d ContainerId.fromString(containerIdStr);\n      } catch (IllegalArgumentException iae) {\n        throw new BadRequestException(iae);\n      }\n    }\n\n    validateUserInput(appId, appAttemptId, containerId);\n\n    WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n        WrappedLogMetaRequest.builder()\n            .setApplicationId(appId)\n            .setApplicationAttemptId(appAttemptId)\n            .setContainerId(containerIdStr);\n\n    return getContainerLogsInfo(hsr, logMetaRequestBuilder, nmId,\n        redirectedFromNode, null, manualRedirection);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogServlet.java",
          "extendedDetails": {
            "oldValue": "[hsr-HttpServletRequest, appIdStr-String, appAttemptIdStr-String, containerIdStr-String, nmId-String, redirectedFromNode-boolean]",
            "newValue": "[hsr-HttpServletRequest, appIdStr-String, appAttemptIdStr-String, containerIdStr-String, nmId-String, redirectedFromNode-boolean, manualRedirection-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-10215. Endpoint for obtaining direct URL for the logs. Contributed by Andras Gyori\n",
          "commitDate": "28/04/20 9:53 AM",
          "commitName": "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "06/02/20 3:25 AM",
          "commitNameOld": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 82.23,
          "commitsBetweenForRepo": 275,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,41 @@\n   public Response getLogsInfo(HttpServletRequest hsr, String appIdStr,\n       String appAttemptIdStr, String containerIdStr, String nmId,\n-      boolean redirectedFromNode) {\n+      boolean redirectedFromNode, boolean manualRedirection) {\n     ApplicationId appId \u003d null;\n     if (appIdStr !\u003d null) {\n       try {\n         appId \u003d ApplicationId.fromString(appIdStr);\n       } catch (IllegalArgumentException iae) {\n         throw new BadRequestException(iae);\n       }\n     }\n \n     ApplicationAttemptId appAttemptId \u003d null;\n     if (appAttemptIdStr !\u003d null) {\n       try {\n         appAttemptId \u003d ApplicationAttemptId.fromString(appAttemptIdStr);\n       } catch (IllegalArgumentException iae) {\n         throw new BadRequestException(iae);\n       }\n     }\n \n     ContainerId containerId \u003d null;\n     if (containerIdStr !\u003d null) {\n       try {\n         containerId \u003d ContainerId.fromString(containerIdStr);\n       } catch (IllegalArgumentException iae) {\n         throw new BadRequestException(iae);\n       }\n     }\n \n     validateUserInput(appId, appAttemptId, containerId);\n \n     WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n         WrappedLogMetaRequest.builder()\n             .setApplicationId(appId)\n             .setApplicationAttemptId(appAttemptId)\n             .setContainerId(containerIdStr);\n \n     return getContainerLogsInfo(hsr, logMetaRequestBuilder, nmId,\n-        redirectedFromNode, null);\n+        redirectedFromNode, null, manualRedirection);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getLogsInfo(HttpServletRequest hsr, String appIdStr,\n      String appAttemptIdStr, String containerIdStr, String nmId,\n      boolean redirectedFromNode, boolean manualRedirection) {\n    ApplicationId appId \u003d null;\n    if (appIdStr !\u003d null) {\n      try {\n        appId \u003d ApplicationId.fromString(appIdStr);\n      } catch (IllegalArgumentException iae) {\n        throw new BadRequestException(iae);\n      }\n    }\n\n    ApplicationAttemptId appAttemptId \u003d null;\n    if (appAttemptIdStr !\u003d null) {\n      try {\n        appAttemptId \u003d ApplicationAttemptId.fromString(appAttemptIdStr);\n      } catch (IllegalArgumentException iae) {\n        throw new BadRequestException(iae);\n      }\n    }\n\n    ContainerId containerId \u003d null;\n    if (containerIdStr !\u003d null) {\n      try {\n        containerId \u003d ContainerId.fromString(containerIdStr);\n      } catch (IllegalArgumentException iae) {\n        throw new BadRequestException(iae);\n      }\n    }\n\n    validateUserInput(appId, appAttemptId, containerId);\n\n    WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n        WrappedLogMetaRequest.builder()\n            .setApplicationId(appId)\n            .setApplicationAttemptId(appAttemptId)\n            .setContainerId(containerIdStr);\n\n    return getContainerLogsInfo(hsr, logMetaRequestBuilder, nmId,\n        redirectedFromNode, null, manualRedirection);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogServlet.java",
          "extendedDetails": {}
        }
      ]
    },
    "71b2c2ffe962ff4f5799e1f55961db687cb55842": {
      "type": "Yintroduced",
      "commitMessage": "YARN-10101. Support listing of aggregated logs for containers belonging to an application attempt. Contributed by Adam Antal\n",
      "commitDate": "06/02/20 3:25 AM",
      "commitName": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,41 @@\n+  public Response getLogsInfo(HttpServletRequest hsr, String appIdStr,\n+      String appAttemptIdStr, String containerIdStr, String nmId,\n+      boolean redirectedFromNode) {\n+    ApplicationId appId \u003d null;\n+    if (appIdStr !\u003d null) {\n+      try {\n+        appId \u003d ApplicationId.fromString(appIdStr);\n+      } catch (IllegalArgumentException iae) {\n+        throw new BadRequestException(iae);\n+      }\n+    }\n+\n+    ApplicationAttemptId appAttemptId \u003d null;\n+    if (appAttemptIdStr !\u003d null) {\n+      try {\n+        appAttemptId \u003d ApplicationAttemptId.fromString(appAttemptIdStr);\n+      } catch (IllegalArgumentException iae) {\n+        throw new BadRequestException(iae);\n+      }\n+    }\n+\n+    ContainerId containerId \u003d null;\n+    if (containerIdStr !\u003d null) {\n+      try {\n+        containerId \u003d ContainerId.fromString(containerIdStr);\n+      } catch (IllegalArgumentException iae) {\n+        throw new BadRequestException(iae);\n+      }\n+    }\n+\n+    validateUserInput(appId, appAttemptId, containerId);\n+\n+    WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n+        WrappedLogMetaRequest.builder()\n+            .setApplicationId(appId)\n+            .setApplicationAttemptId(appAttemptId)\n+            .setContainerId(containerIdStr);\n+\n+    return getContainerLogsInfo(hsr, logMetaRequestBuilder, nmId,\n+        redirectedFromNode, null);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getLogsInfo(HttpServletRequest hsr, String appIdStr,\n      String appAttemptIdStr, String containerIdStr, String nmId,\n      boolean redirectedFromNode) {\n    ApplicationId appId \u003d null;\n    if (appIdStr !\u003d null) {\n      try {\n        appId \u003d ApplicationId.fromString(appIdStr);\n      } catch (IllegalArgumentException iae) {\n        throw new BadRequestException(iae);\n      }\n    }\n\n    ApplicationAttemptId appAttemptId \u003d null;\n    if (appAttemptIdStr !\u003d null) {\n      try {\n        appAttemptId \u003d ApplicationAttemptId.fromString(appAttemptIdStr);\n      } catch (IllegalArgumentException iae) {\n        throw new BadRequestException(iae);\n      }\n    }\n\n    ContainerId containerId \u003d null;\n    if (containerIdStr !\u003d null) {\n      try {\n        containerId \u003d ContainerId.fromString(containerIdStr);\n      } catch (IllegalArgumentException iae) {\n        throw new BadRequestException(iae);\n      }\n    }\n\n    validateUserInput(appId, appAttemptId, containerId);\n\n    WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n        WrappedLogMetaRequest.builder()\n            .setApplicationId(appId)\n            .setApplicationAttemptId(appAttemptId)\n            .setContainerId(containerIdStr);\n\n    return getContainerLogsInfo(hsr, logMetaRequestBuilder, nmId,\n        redirectedFromNode, null);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogServlet.java"
    }
  }
}