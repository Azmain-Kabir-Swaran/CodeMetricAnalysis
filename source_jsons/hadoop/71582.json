{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReverseZoneUtils.java",
  "functionName": "getSubnetCountForReverseZones",
  "functionId": "getSubnetCountForReverseZones___conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/ReverseZoneUtils.java",
  "functionStartLine": 79,
  "functionEndLine": 115,
  "numCommitsSeen": 3,
  "timeTaken": 1896,
  "changeHistory": [
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
    "7d685f2fb3ca8fa23caed29ed813c1c979abf718"
  ],
  "changeHistoryShort": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
    "7d685f2fb3ca8fa23caed29ed813c1c979abf718": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
      "commitDate": "19/10/18 4:46 PM",
      "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
          "commitDate": "19/10/18 4:46 PM",
          "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "19/10/18 1:57 PM",
          "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n-  protected static int getSubnetCountForReverseZones(Configuration conf) {\n+  protected static long getSubnetCountForReverseZones(Configuration conf) {\n     String subnet \u003d conf.get(KEY_DNS_ZONE_SUBNET);\n     String mask \u003d conf.get(KEY_DNS_ZONE_MASK);\n     String range \u003d conf.get(KEY_DNS_SPLIT_REVERSE_ZONE_RANGE);\n \n     int parsedRange;\n     try {\n       parsedRange \u003d Integer.parseInt(range);\n     } catch (NumberFormatException e) {\n       LOG.error(\"The supplied range is not a valid integer: Supplied range: \",\n           range);\n       throw e;\n     }\n     if (parsedRange \u003c 0) {\n       String msg \u003d String\n           .format(\"Range cannot be negative: Supplied range: %d\", parsedRange);\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n \n-    int ipCount;\n+    long ipCount;\n     try {\n       SubnetUtils subnetUtils \u003d new SubnetUtils(subnet, mask);\n       subnetUtils.setInclusiveHostCount(true);\n-      ipCount \u003d subnetUtils.getInfo().getAddressCount();\n+      ipCount \u003d subnetUtils.getInfo().getAddressCountLong();\n \n     } catch (IllegalArgumentException e) {\n       LOG.error(\"The subnet or mask is invalid: Subnet: {} Mask: {}\", subnet,\n           mask);\n       throw e;\n     }\n \n     if (parsedRange \u003d\u003d 0) {\n       return ipCount;\n     }\n     return ipCount / parsedRange;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static long getSubnetCountForReverseZones(Configuration conf) {\n    String subnet \u003d conf.get(KEY_DNS_ZONE_SUBNET);\n    String mask \u003d conf.get(KEY_DNS_ZONE_MASK);\n    String range \u003d conf.get(KEY_DNS_SPLIT_REVERSE_ZONE_RANGE);\n\n    int parsedRange;\n    try {\n      parsedRange \u003d Integer.parseInt(range);\n    } catch (NumberFormatException e) {\n      LOG.error(\"The supplied range is not a valid integer: Supplied range: \",\n          range);\n      throw e;\n    }\n    if (parsedRange \u003c 0) {\n      String msg \u003d String\n          .format(\"Range cannot be negative: Supplied range: %d\", parsedRange);\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    long ipCount;\n    try {\n      SubnetUtils subnetUtils \u003d new SubnetUtils(subnet, mask);\n      subnetUtils.setInclusiveHostCount(true);\n      ipCount \u003d subnetUtils.getInfo().getAddressCountLong();\n\n    } catch (IllegalArgumentException e) {\n      LOG.error(\"The subnet or mask is invalid: Subnet: {} Mask: {}\", subnet,\n          mask);\n      throw e;\n    }\n\n    if (parsedRange \u003d\u003d 0) {\n      return ipCount;\n    }\n    return ipCount / parsedRange;\n  }",
          "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/ReverseZoneUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/ReverseZoneUtils.java",
            "newPath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/ReverseZoneUtils.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
          "commitDate": "19/10/18 4:46 PM",
          "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "19/10/18 1:57 PM",
          "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n-  protected static int getSubnetCountForReverseZones(Configuration conf) {\n+  protected static long getSubnetCountForReverseZones(Configuration conf) {\n     String subnet \u003d conf.get(KEY_DNS_ZONE_SUBNET);\n     String mask \u003d conf.get(KEY_DNS_ZONE_MASK);\n     String range \u003d conf.get(KEY_DNS_SPLIT_REVERSE_ZONE_RANGE);\n \n     int parsedRange;\n     try {\n       parsedRange \u003d Integer.parseInt(range);\n     } catch (NumberFormatException e) {\n       LOG.error(\"The supplied range is not a valid integer: Supplied range: \",\n           range);\n       throw e;\n     }\n     if (parsedRange \u003c 0) {\n       String msg \u003d String\n           .format(\"Range cannot be negative: Supplied range: %d\", parsedRange);\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n \n-    int ipCount;\n+    long ipCount;\n     try {\n       SubnetUtils subnetUtils \u003d new SubnetUtils(subnet, mask);\n       subnetUtils.setInclusiveHostCount(true);\n-      ipCount \u003d subnetUtils.getInfo().getAddressCount();\n+      ipCount \u003d subnetUtils.getInfo().getAddressCountLong();\n \n     } catch (IllegalArgumentException e) {\n       LOG.error(\"The subnet or mask is invalid: Subnet: {} Mask: {}\", subnet,\n           mask);\n       throw e;\n     }\n \n     if (parsedRange \u003d\u003d 0) {\n       return ipCount;\n     }\n     return ipCount / parsedRange;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static long getSubnetCountForReverseZones(Configuration conf) {\n    String subnet \u003d conf.get(KEY_DNS_ZONE_SUBNET);\n    String mask \u003d conf.get(KEY_DNS_ZONE_MASK);\n    String range \u003d conf.get(KEY_DNS_SPLIT_REVERSE_ZONE_RANGE);\n\n    int parsedRange;\n    try {\n      parsedRange \u003d Integer.parseInt(range);\n    } catch (NumberFormatException e) {\n      LOG.error(\"The supplied range is not a valid integer: Supplied range: \",\n          range);\n      throw e;\n    }\n    if (parsedRange \u003c 0) {\n      String msg \u003d String\n          .format(\"Range cannot be negative: Supplied range: %d\", parsedRange);\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    long ipCount;\n    try {\n      SubnetUtils subnetUtils \u003d new SubnetUtils(subnet, mask);\n      subnetUtils.setInclusiveHostCount(true);\n      ipCount \u003d subnetUtils.getInfo().getAddressCountLong();\n\n    } catch (IllegalArgumentException e) {\n      LOG.error(\"The subnet or mask is invalid: Subnet: {} Mask: {}\", subnet,\n          mask);\n      throw e;\n    }\n\n    if (parsedRange \u003d\u003d 0) {\n      return ipCount;\n    }\n    return ipCount / parsedRange;\n  }",
          "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/ReverseZoneUtils.java",
          "extendedDetails": {
            "oldValue": "int",
            "newValue": "long"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
          "commitDate": "19/10/18 4:46 PM",
          "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "19/10/18 1:57 PM",
          "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n-  protected static int getSubnetCountForReverseZones(Configuration conf) {\n+  protected static long getSubnetCountForReverseZones(Configuration conf) {\n     String subnet \u003d conf.get(KEY_DNS_ZONE_SUBNET);\n     String mask \u003d conf.get(KEY_DNS_ZONE_MASK);\n     String range \u003d conf.get(KEY_DNS_SPLIT_REVERSE_ZONE_RANGE);\n \n     int parsedRange;\n     try {\n       parsedRange \u003d Integer.parseInt(range);\n     } catch (NumberFormatException e) {\n       LOG.error(\"The supplied range is not a valid integer: Supplied range: \",\n           range);\n       throw e;\n     }\n     if (parsedRange \u003c 0) {\n       String msg \u003d String\n           .format(\"Range cannot be negative: Supplied range: %d\", parsedRange);\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n \n-    int ipCount;\n+    long ipCount;\n     try {\n       SubnetUtils subnetUtils \u003d new SubnetUtils(subnet, mask);\n       subnetUtils.setInclusiveHostCount(true);\n-      ipCount \u003d subnetUtils.getInfo().getAddressCount();\n+      ipCount \u003d subnetUtils.getInfo().getAddressCountLong();\n \n     } catch (IllegalArgumentException e) {\n       LOG.error(\"The subnet or mask is invalid: Subnet: {} Mask: {}\", subnet,\n           mask);\n       throw e;\n     }\n \n     if (parsedRange \u003d\u003d 0) {\n       return ipCount;\n     }\n     return ipCount / parsedRange;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static long getSubnetCountForReverseZones(Configuration conf) {\n    String subnet \u003d conf.get(KEY_DNS_ZONE_SUBNET);\n    String mask \u003d conf.get(KEY_DNS_ZONE_MASK);\n    String range \u003d conf.get(KEY_DNS_SPLIT_REVERSE_ZONE_RANGE);\n\n    int parsedRange;\n    try {\n      parsedRange \u003d Integer.parseInt(range);\n    } catch (NumberFormatException e) {\n      LOG.error(\"The supplied range is not a valid integer: Supplied range: \",\n          range);\n      throw e;\n    }\n    if (parsedRange \u003c 0) {\n      String msg \u003d String\n          .format(\"Range cannot be negative: Supplied range: %d\", parsedRange);\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    long ipCount;\n    try {\n      SubnetUtils subnetUtils \u003d new SubnetUtils(subnet, mask);\n      subnetUtils.setInclusiveHostCount(true);\n      ipCount \u003d subnetUtils.getInfo().getAddressCountLong();\n\n    } catch (IllegalArgumentException e) {\n      LOG.error(\"The subnet or mask is invalid: Subnet: {} Mask: {}\", subnet,\n          mask);\n      throw e;\n    }\n\n    if (parsedRange \u003d\u003d 0) {\n      return ipCount;\n    }\n    return ipCount / parsedRange;\n  }",
          "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/ReverseZoneUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "7d685f2fb3ca8fa23caed29ed813c1c979abf718": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4757. Add the ability to split reverse zone subnets. Contributed by Shane Kumpf.\n\n(cherry picked from commit 9bff70f1316d889c3109c68dd308c8f456229bf8)\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "7d685f2fb3ca8fa23caed29ed813c1c979abf718",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,37 @@\n+  protected static int getSubnetCountForReverseZones(Configuration conf) {\n+    String subnet \u003d conf.get(KEY_DNS_ZONE_SUBNET);\n+    String mask \u003d conf.get(KEY_DNS_ZONE_MASK);\n+    String range \u003d conf.get(KEY_DNS_SPLIT_REVERSE_ZONE_RANGE);\n+\n+    int parsedRange;\n+    try {\n+      parsedRange \u003d Integer.parseInt(range);\n+    } catch (NumberFormatException e) {\n+      LOG.error(\"The supplied range is not a valid integer: Supplied range: \",\n+          range);\n+      throw e;\n+    }\n+    if (parsedRange \u003c 0) {\n+      String msg \u003d String\n+          .format(\"Range cannot be negative: Supplied range: %d\", parsedRange);\n+      LOG.error(msg);\n+      throw new IllegalArgumentException(msg);\n+    }\n+\n+    int ipCount;\n+    try {\n+      SubnetUtils subnetUtils \u003d new SubnetUtils(subnet, mask);\n+      subnetUtils.setInclusiveHostCount(true);\n+      ipCount \u003d subnetUtils.getInfo().getAddressCount();\n+\n+    } catch (IllegalArgumentException e) {\n+      LOG.error(\"The subnet or mask is invalid: Subnet: {} Mask: {}\", subnet,\n+          mask);\n+      throw e;\n+    }\n+\n+    if (parsedRange \u003d\u003d 0) {\n+      return ipCount;\n+    }\n+    return ipCount / parsedRange;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected static int getSubnetCountForReverseZones(Configuration conf) {\n    String subnet \u003d conf.get(KEY_DNS_ZONE_SUBNET);\n    String mask \u003d conf.get(KEY_DNS_ZONE_MASK);\n    String range \u003d conf.get(KEY_DNS_SPLIT_REVERSE_ZONE_RANGE);\n\n    int parsedRange;\n    try {\n      parsedRange \u003d Integer.parseInt(range);\n    } catch (NumberFormatException e) {\n      LOG.error(\"The supplied range is not a valid integer: Supplied range: \",\n          range);\n      throw e;\n    }\n    if (parsedRange \u003c 0) {\n      String msg \u003d String\n          .format(\"Range cannot be negative: Supplied range: %d\", parsedRange);\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    int ipCount;\n    try {\n      SubnetUtils subnetUtils \u003d new SubnetUtils(subnet, mask);\n      subnetUtils.setInclusiveHostCount(true);\n      ipCount \u003d subnetUtils.getInfo().getAddressCount();\n\n    } catch (IllegalArgumentException e) {\n      LOG.error(\"The subnet or mask is invalid: Subnet: {} Mask: {}\", subnet,\n          mask);\n      throw e;\n    }\n\n    if (parsedRange \u003d\u003d 0) {\n      return ipCount;\n    }\n    return ipCount / parsedRange;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/ReverseZoneUtils.java"
    }
  }
}