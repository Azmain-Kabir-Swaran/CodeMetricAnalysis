{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractGangliaSink.java",
  "functionName": "init",
  "functionId": "init___conf-SubsetConfiguration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/ganglia/AbstractGangliaSink.java",
  "functionStartLine": 116,
  "functionEndLine": 164,
  "numCommitsSeen": 10,
  "timeTaken": 1270,
  "changeHistory": [
    "ccaf036662e22da14583942054898c99fa51dae5",
    "8004a002307940176cc188657c68e85171a5b5a8",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "224972e0558e7a0022002ed26e765acdfd9f8f6c"
  ],
  "changeHistoryShort": {
    "ccaf036662e22da14583942054898c99fa51dae5": "Ybodychange",
    "8004a002307940176cc188657c68e85171a5b5a8": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "224972e0558e7a0022002ed26e765acdfd9f8f6c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ccaf036662e22da14583942054898c99fa51dae5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14539. Move commons logging APIs over to slf4j in hadoop-common. Contributed by Wenxin He.\n",
      "commitDate": "17/07/17 9:32 PM",
      "commitName": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "17/11/16 8:48 PM",
      "commitNameOld": "c0b1a44f6c6e6f9e4ac5cecea0d4a50e237a4c9c",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 241.99,
      "commitsBetweenForRepo": 1261,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public void init(SubsetConfiguration conf) {\n     LOG.debug(\"Initializing the GangliaSink for Ganglia metrics.\");\n \n     this.conf \u003d conf;\n \n     // Take the hostname from the DNS class.\n     if (conf.getString(\"slave.host.name\") !\u003d null) {\n       hostName \u003d conf.getString(\"slave.host.name\");\n     } else {\n       try {\n         hostName \u003d DNS.getDefaultHost(\n             conf.getString(\"dfs.datanode.dns.interface\", \"default\"),\n             conf.getString(\"dfs.datanode.dns.nameserver\", \"default\"));\n       } catch (UnknownHostException uhe) {\n-        LOG.error(uhe);\n+        LOG.error(uhe.toString());\n         hostName \u003d \"UNKNOWN.example.com\";\n       }\n     }\n \n     // load the gannglia servers from properties\n     metricsServers \u003d Servers.parse(conf.getString(SERVERS_PROPERTY),\n         DEFAULT_PORT);\n     multicastEnabled \u003d conf.getBoolean(MULTICAST_ENABLED_PROPERTY,\n             DEFAULT_MULTICAST_ENABLED);\n     multicastTtl \u003d conf.getInt(MULTICAST_TTL_PROPERTY, DEFAULT_MULTICAST_TTL);\n \n     // extract the Ganglia conf per metrics\n     gangliaConfMap \u003d new HashMap\u003cString, GangliaConf\u003e();\n     loadGangliaConf(GangliaConfType.units);\n     loadGangliaConf(GangliaConfType.tmax);\n     loadGangliaConf(GangliaConfType.dmax);\n     loadGangliaConf(GangliaConfType.slope);\n \n     try {\n       if (multicastEnabled) {\n         LOG.info(\"Enabling multicast for Ganglia with TTL \" + multicastTtl);\n         datagramSocket \u003d new MulticastSocket();\n         ((MulticastSocket) datagramSocket).setTimeToLive(multicastTtl);\n       } else {\n         datagramSocket \u003d new DatagramSocket();\n       }\n     } catch (IOException e) {\n-      LOG.error(e);\n+      LOG.error(e.toString());\n     }\n \n     // see if sparseMetrics is supported. Default is false\n     supportSparseMetrics \u003d conf.getBoolean(SUPPORT_SPARSE_METRICS_PROPERTY,\n         SUPPORT_SPARSE_METRICS_DEFAULT);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SubsetConfiguration conf) {\n    LOG.debug(\"Initializing the GangliaSink for Ganglia metrics.\");\n\n    this.conf \u003d conf;\n\n    // Take the hostname from the DNS class.\n    if (conf.getString(\"slave.host.name\") !\u003d null) {\n      hostName \u003d conf.getString(\"slave.host.name\");\n    } else {\n      try {\n        hostName \u003d DNS.getDefaultHost(\n            conf.getString(\"dfs.datanode.dns.interface\", \"default\"),\n            conf.getString(\"dfs.datanode.dns.nameserver\", \"default\"));\n      } catch (UnknownHostException uhe) {\n        LOG.error(uhe.toString());\n        hostName \u003d \"UNKNOWN.example.com\";\n      }\n    }\n\n    // load the gannglia servers from properties\n    metricsServers \u003d Servers.parse(conf.getString(SERVERS_PROPERTY),\n        DEFAULT_PORT);\n    multicastEnabled \u003d conf.getBoolean(MULTICAST_ENABLED_PROPERTY,\n            DEFAULT_MULTICAST_ENABLED);\n    multicastTtl \u003d conf.getInt(MULTICAST_TTL_PROPERTY, DEFAULT_MULTICAST_TTL);\n\n    // extract the Ganglia conf per metrics\n    gangliaConfMap \u003d new HashMap\u003cString, GangliaConf\u003e();\n    loadGangliaConf(GangliaConfType.units);\n    loadGangliaConf(GangliaConfType.tmax);\n    loadGangliaConf(GangliaConfType.dmax);\n    loadGangliaConf(GangliaConfType.slope);\n\n    try {\n      if (multicastEnabled) {\n        LOG.info(\"Enabling multicast for Ganglia with TTL \" + multicastTtl);\n        datagramSocket \u003d new MulticastSocket();\n        ((MulticastSocket) datagramSocket).setTimeToLive(multicastTtl);\n      } else {\n        datagramSocket \u003d new DatagramSocket();\n      }\n    } catch (IOException e) {\n      LOG.error(e.toString());\n    }\n\n    // see if sparseMetrics is supported. Default is false\n    supportSparseMetrics \u003d conf.getBoolean(SUPPORT_SPARSE_METRICS_PROPERTY,\n        SUPPORT_SPARSE_METRICS_DEFAULT);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/ganglia/AbstractGangliaSink.java",
      "extendedDetails": {}
    },
    "8004a002307940176cc188657c68e85171a5b5a8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10181. GangliaContext does not work with multicast ganglia setup. Contributed by Andrew Johnson.\n",
      "commitDate": "02/02/15 11:09 AM",
      "commitName": "8004a002307940176cc188657c68e85171a5b5a8",
      "commitAuthor": "cnauroth",
      "commitDateOld": "05/01/15 8:09 AM",
      "commitNameOld": "2403634de02a6948791575b63e7ef1562dbad241",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 28.12,
      "commitsBetweenForRepo": 192,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,49 @@\n   public void init(SubsetConfiguration conf) {\n     LOG.debug(\"Initializing the GangliaSink for Ganglia metrics.\");\n \n     this.conf \u003d conf;\n \n     // Take the hostname from the DNS class.\n     if (conf.getString(\"slave.host.name\") !\u003d null) {\n       hostName \u003d conf.getString(\"slave.host.name\");\n     } else {\n       try {\n         hostName \u003d DNS.getDefaultHost(\n             conf.getString(\"dfs.datanode.dns.interface\", \"default\"),\n             conf.getString(\"dfs.datanode.dns.nameserver\", \"default\"));\n       } catch (UnknownHostException uhe) {\n         LOG.error(uhe);\n         hostName \u003d \"UNKNOWN.example.com\";\n       }\n     }\n \n     // load the gannglia servers from properties\n     metricsServers \u003d Servers.parse(conf.getString(SERVERS_PROPERTY),\n         DEFAULT_PORT);\n+    multicastEnabled \u003d conf.getBoolean(MULTICAST_ENABLED_PROPERTY,\n+            DEFAULT_MULTICAST_ENABLED);\n+    multicastTtl \u003d conf.getInt(MULTICAST_TTL_PROPERTY, DEFAULT_MULTICAST_TTL);\n \n     // extract the Ganglia conf per metrics\n     gangliaConfMap \u003d new HashMap\u003cString, GangliaConf\u003e();\n     loadGangliaConf(GangliaConfType.units);\n     loadGangliaConf(GangliaConfType.tmax);\n     loadGangliaConf(GangliaConfType.dmax);\n     loadGangliaConf(GangliaConfType.slope);\n \n     try {\n-      datagramSocket \u003d new DatagramSocket();\n-    } catch (SocketException se) {\n-      LOG.error(se);\n+      if (multicastEnabled) {\n+        LOG.info(\"Enabling multicast for Ganglia with TTL \" + multicastTtl);\n+        datagramSocket \u003d new MulticastSocket();\n+        ((MulticastSocket) datagramSocket).setTimeToLive(multicastTtl);\n+      } else {\n+        datagramSocket \u003d new DatagramSocket();\n+      }\n+    } catch (IOException e) {\n+      LOG.error(e);\n     }\n \n     // see if sparseMetrics is supported. Default is false\n     supportSparseMetrics \u003d conf.getBoolean(SUPPORT_SPARSE_METRICS_PROPERTY,\n         SUPPORT_SPARSE_METRICS_DEFAULT);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SubsetConfiguration conf) {\n    LOG.debug(\"Initializing the GangliaSink for Ganglia metrics.\");\n\n    this.conf \u003d conf;\n\n    // Take the hostname from the DNS class.\n    if (conf.getString(\"slave.host.name\") !\u003d null) {\n      hostName \u003d conf.getString(\"slave.host.name\");\n    } else {\n      try {\n        hostName \u003d DNS.getDefaultHost(\n            conf.getString(\"dfs.datanode.dns.interface\", \"default\"),\n            conf.getString(\"dfs.datanode.dns.nameserver\", \"default\"));\n      } catch (UnknownHostException uhe) {\n        LOG.error(uhe);\n        hostName \u003d \"UNKNOWN.example.com\";\n      }\n    }\n\n    // load the gannglia servers from properties\n    metricsServers \u003d Servers.parse(conf.getString(SERVERS_PROPERTY),\n        DEFAULT_PORT);\n    multicastEnabled \u003d conf.getBoolean(MULTICAST_ENABLED_PROPERTY,\n            DEFAULT_MULTICAST_ENABLED);\n    multicastTtl \u003d conf.getInt(MULTICAST_TTL_PROPERTY, DEFAULT_MULTICAST_TTL);\n\n    // extract the Ganglia conf per metrics\n    gangliaConfMap \u003d new HashMap\u003cString, GangliaConf\u003e();\n    loadGangliaConf(GangliaConfType.units);\n    loadGangliaConf(GangliaConfType.tmax);\n    loadGangliaConf(GangliaConfType.dmax);\n    loadGangliaConf(GangliaConfType.slope);\n\n    try {\n      if (multicastEnabled) {\n        LOG.info(\"Enabling multicast for Ganglia with TTL \" + multicastTtl);\n        datagramSocket \u003d new MulticastSocket();\n        ((MulticastSocket) datagramSocket).setTimeToLive(multicastTtl);\n      } else {\n        datagramSocket \u003d new DatagramSocket();\n      }\n    } catch (IOException e) {\n      LOG.error(e);\n    }\n\n    // see if sparseMetrics is supported. Default is false\n    supportSparseMetrics \u003d conf.getBoolean(SUPPORT_SPARSE_METRICS_PROPERTY,\n        SUPPORT_SPARSE_METRICS_DEFAULT);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/ganglia/AbstractGangliaSink.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void init(SubsetConfiguration conf) {\n    LOG.debug(\"Initializing the GangliaSink for Ganglia metrics.\");\n\n    this.conf \u003d conf;\n\n    // Take the hostname from the DNS class.\n    if (conf.getString(\"slave.host.name\") !\u003d null) {\n      hostName \u003d conf.getString(\"slave.host.name\");\n    } else {\n      try {\n        hostName \u003d DNS.getDefaultHost(\n            conf.getString(\"dfs.datanode.dns.interface\", \"default\"),\n            conf.getString(\"dfs.datanode.dns.nameserver\", \"default\"));\n      } catch (UnknownHostException uhe) {\n        LOG.error(uhe);\n        hostName \u003d \"UNKNOWN.example.com\";\n      }\n    }\n\n    // load the gannglia servers from properties\n    metricsServers \u003d Servers.parse(conf.getString(SERVERS_PROPERTY),\n        DEFAULT_PORT);\n\n    // extract the Ganglia conf per metrics\n    gangliaConfMap \u003d new HashMap\u003cString, GangliaConf\u003e();\n    loadGangliaConf(GangliaConfType.units);\n    loadGangliaConf(GangliaConfType.tmax);\n    loadGangliaConf(GangliaConfType.dmax);\n    loadGangliaConf(GangliaConfType.slope);\n\n    try {\n      datagramSocket \u003d new DatagramSocket();\n    } catch (SocketException se) {\n      LOG.error(se);\n    }\n\n    // see if sparseMetrics is supported. Default is false\n    supportSparseMetrics \u003d conf.getBoolean(SUPPORT_SPARSE_METRICS_PROPERTY,\n        SUPPORT_SPARSE_METRICS_DEFAULT);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/ganglia/AbstractGangliaSink.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/ganglia/AbstractGangliaSink.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/ganglia/AbstractGangliaSink.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void init(SubsetConfiguration conf) {\n    LOG.debug(\"Initializing the GangliaSink for Ganglia metrics.\");\n\n    this.conf \u003d conf;\n\n    // Take the hostname from the DNS class.\n    if (conf.getString(\"slave.host.name\") !\u003d null) {\n      hostName \u003d conf.getString(\"slave.host.name\");\n    } else {\n      try {\n        hostName \u003d DNS.getDefaultHost(\n            conf.getString(\"dfs.datanode.dns.interface\", \"default\"),\n            conf.getString(\"dfs.datanode.dns.nameserver\", \"default\"));\n      } catch (UnknownHostException uhe) {\n        LOG.error(uhe);\n        hostName \u003d \"UNKNOWN.example.com\";\n      }\n    }\n\n    // load the gannglia servers from properties\n    metricsServers \u003d Servers.parse(conf.getString(SERVERS_PROPERTY),\n        DEFAULT_PORT);\n\n    // extract the Ganglia conf per metrics\n    gangliaConfMap \u003d new HashMap\u003cString, GangliaConf\u003e();\n    loadGangliaConf(GangliaConfType.units);\n    loadGangliaConf(GangliaConfType.tmax);\n    loadGangliaConf(GangliaConfType.dmax);\n    loadGangliaConf(GangliaConfType.slope);\n\n    try {\n      datagramSocket \u003d new DatagramSocket();\n    } catch (SocketException se) {\n      LOG.error(se);\n    }\n\n    // see if sparseMetrics is supported. Default is false\n    supportSparseMetrics \u003d conf.getBoolean(SUPPORT_SPARSE_METRICS_PROPERTY,\n        SUPPORT_SPARSE_METRICS_DEFAULT);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/ganglia/AbstractGangliaSink.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/metrics2/sink/ganglia/AbstractGangliaSink.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/ganglia/AbstractGangliaSink.java"
      }
    },
    "224972e0558e7a0022002ed26e765acdfd9f8f6c": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7324. Ganglia plugins for metrics v2. (Priyo Mustafi via llu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1145525 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/11 3:23 AM",
      "commitName": "224972e0558e7a0022002ed26e765acdfd9f8f6c",
      "commitAuthor": "Luke Lu",
      "diff": "@@ -0,0 +1,40 @@\n+  public void init(SubsetConfiguration conf) {\n+    LOG.debug(\"Initializing the GangliaSink for Ganglia metrics.\");\n+\n+    this.conf \u003d conf;\n+\n+    // Take the hostname from the DNS class.\n+    if (conf.getString(\"slave.host.name\") !\u003d null) {\n+      hostName \u003d conf.getString(\"slave.host.name\");\n+    } else {\n+      try {\n+        hostName \u003d DNS.getDefaultHost(\n+            conf.getString(\"dfs.datanode.dns.interface\", \"default\"),\n+            conf.getString(\"dfs.datanode.dns.nameserver\", \"default\"));\n+      } catch (UnknownHostException uhe) {\n+        LOG.error(uhe);\n+        hostName \u003d \"UNKNOWN.example.com\";\n+      }\n+    }\n+\n+    // load the gannglia servers from properties\n+    metricsServers \u003d Servers.parse(conf.getString(SERVERS_PROPERTY),\n+        DEFAULT_PORT);\n+\n+    // extract the Ganglia conf per metrics\n+    gangliaConfMap \u003d new HashMap\u003cString, GangliaConf\u003e();\n+    loadGangliaConf(GangliaConfType.units);\n+    loadGangliaConf(GangliaConfType.tmax);\n+    loadGangliaConf(GangliaConfType.dmax);\n+    loadGangliaConf(GangliaConfType.slope);\n+\n+    try {\n+      datagramSocket \u003d new DatagramSocket();\n+    } catch (SocketException se) {\n+      LOG.error(se);\n+    }\n+\n+    // see if sparseMetrics is supported. Default is false\n+    supportSparseMetrics \u003d conf.getBoolean(SUPPORT_SPARSE_METRICS_PROPERTY,\n+        SUPPORT_SPARSE_METRICS_DEFAULT);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SubsetConfiguration conf) {\n    LOG.debug(\"Initializing the GangliaSink for Ganglia metrics.\");\n\n    this.conf \u003d conf;\n\n    // Take the hostname from the DNS class.\n    if (conf.getString(\"slave.host.name\") !\u003d null) {\n      hostName \u003d conf.getString(\"slave.host.name\");\n    } else {\n      try {\n        hostName \u003d DNS.getDefaultHost(\n            conf.getString(\"dfs.datanode.dns.interface\", \"default\"),\n            conf.getString(\"dfs.datanode.dns.nameserver\", \"default\"));\n      } catch (UnknownHostException uhe) {\n        LOG.error(uhe);\n        hostName \u003d \"UNKNOWN.example.com\";\n      }\n    }\n\n    // load the gannglia servers from properties\n    metricsServers \u003d Servers.parse(conf.getString(SERVERS_PROPERTY),\n        DEFAULT_PORT);\n\n    // extract the Ganglia conf per metrics\n    gangliaConfMap \u003d new HashMap\u003cString, GangliaConf\u003e();\n    loadGangliaConf(GangliaConfType.units);\n    loadGangliaConf(GangliaConfType.tmax);\n    loadGangliaConf(GangliaConfType.dmax);\n    loadGangliaConf(GangliaConfType.slope);\n\n    try {\n      datagramSocket \u003d new DatagramSocket();\n    } catch (SocketException se) {\n      LOG.error(se);\n    }\n\n    // see if sparseMetrics is supported. Default is false\n    supportSparseMetrics \u003d conf.getBoolean(SUPPORT_SPARSE_METRICS_PROPERTY,\n        SUPPORT_SPARSE_METRICS_DEFAULT);\n  }",
      "path": "common/src/java/org/apache/hadoop/metrics2/sink/ganglia/AbstractGangliaSink.java"
    }
  }
}