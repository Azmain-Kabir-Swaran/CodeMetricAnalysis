{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebAppProxyServlet.java",
  "functionName": "proxyLink",
  "functionId": "proxyLink___req-HttpServletRequest(modifiers-final)__resp-HttpServletResponse(modifiers-final)__link-URI(modifiers-final)__c-Cookie(modifiers-final)__proxyHost-String(modifiers-final)__method-HTTP(modifiers-final)__appId-ApplicationId(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
  "functionStartLine": 225,
  "functionEndLine": 313,
  "numCommitsSeen": 86,
  "timeTaken": 6791,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "c2288ac45b748b4119442c46147ccc324926c340",
    "736d33cddd88a0cec925a451940b2523999a9c51",
    "d18f10ad1b3e497fa1aaaeb85ba055f87d9849f7",
    "773b6515ac51af3484824bd6f57685a9726a1e70",
    "83be450acc7fc9bb9f7bbd006e7b0804bf10279c",
    "198fb58776ec02397af5ad83259535b0291b745c",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "d41cb76b56e19f6eb411b3dacaf28a490d079c68",
    "7bf2f9559f884827f2ea09412e4c20a456e972df",
    "8aabd3d4e67cad8dc7e46f5339981135badc7421"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "c2288ac45b748b4119442c46147ccc324926c340": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "736d33cddd88a0cec925a451940b2523999a9c51": "Ybodychange",
    "d18f10ad1b3e497fa1aaaeb85ba055f87d9849f7": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "773b6515ac51af3484824bd6f57685a9726a1e70": "Ybodychange",
    "83be450acc7fc9bb9f7bbd006e7b0804bf10279c": "Ybodychange",
    "198fb58776ec02397af5ad83259535b0291b745c": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "d41cb76b56e19f6eb411b3dacaf28a490d079c68": "Ymultichange(Yparameterchange,Ybodychange)",
    "7bf2f9559f884827f2ea09412e4c20a456e972df": "Ybodychange",
    "8aabd3d4e67cad8dc7e46f5339981135badc7421": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/10/18 2:53 AM",
      "commitNameOld": "2202e00ba8a44ad70f0a90e6c519257e3ae56a36",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 148.56,
      "commitsBetweenForRepo": 1101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,93 +1,89 @@\n   private void proxyLink(final HttpServletRequest req,\n       final HttpServletResponse resp, final URI link, final Cookie c,\n       final String proxyHost, final HTTP method, final ApplicationId appId)\n       throws IOException {\n     HttpClientBuilder httpClientBuilder \u003d HttpClientBuilder.create();\n \n     String httpsPolicy \u003d conf.get(YarnConfiguration.RM_APPLICATION_HTTPS_POLICY,\n         YarnConfiguration.DEFAULT_RM_APPLICATION_HTTPS_POLICY);\n     if (httpsPolicy.equals(\"LENIENT\") || httpsPolicy.equals(\"STRICT\")) {\n       ProxyCA proxyCA \u003d getProxyCA();\n       // ProxyCA could be null when the Proxy is run outside the RM\n       if (proxyCA !\u003d null) {\n         try {\n           httpClientBuilder.setSSLContext(proxyCA.createSSLContext(appId));\n           httpClientBuilder.setSSLHostnameVerifier(\n               proxyCA.getHostnameVerifier());\n         } catch (Exception e) {\n           throw new IOException(e);\n         }\n       }\n     }\n \n     // Make sure we send the request from the proxy address in the config\n     // since that is what the AM filter checks against. IP aliasing or\n     // similar could cause issues otherwise.\n     InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n-    }\n+    LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n     httpClientBuilder.setDefaultRequestConfig(\n         RequestConfig.custom()\n         .setCircularRedirectsAllowed(true)\n         .setLocalAddress(localAddress)\n         .build());\n \n     HttpRequestBase base \u003d null;\n     if (method.equals(HTTP.GET)) {\n       base \u003d new HttpGet(link);\n     } else if (method.equals(HTTP.PUT)) {\n       base \u003d new HttpPut(link);\n \n       StringBuilder sb \u003d new StringBuilder();\n       BufferedReader reader \u003d\n           new BufferedReader(\n               new InputStreamReader(req.getInputStream(), \"UTF-8\"));\n       String line;\n       while ((line \u003d reader.readLine()) !\u003d null) {\n         sb.append(line);\n       }\n \n       ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\n     } else {\n       resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\n       return;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n     while (names.hasMoreElements()) {\n       String name \u003d names.nextElement();\n       if (PASS_THROUGH_HEADERS.contains(name)) {\n         String value \u003d req.getHeader(name);\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n-        }\n+        LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n         base.setHeader(name, value);\n       }\n     }\n \n     String user \u003d req.getRemoteUser();\n     if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n       base.setHeader(\"Cookie\",\n           PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n     }\n     OutputStream out \u003d resp.getOutputStream();\n     HttpClient client \u003d httpClientBuilder.build();\n     try {\n       HttpResponse httpResp \u003d client.execute(base);\n       resp.setStatus(httpResp.getStatusLine().getStatusCode());\n       for (Header header : httpResp.getAllHeaders()) {\n         resp.setHeader(header.getName(), header.getValue());\n       }\n       if (c !\u003d null) {\n         resp.addCookie(c);\n       }\n       InputStream in \u003d httpResp.getEntity().getContent();\n       if (in !\u003d null) {\n         IOUtils.copyBytes(in, out, 4096, true);\n       }\n     } finally {\n       base.releaseConnection();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void proxyLink(final HttpServletRequest req,\n      final HttpServletResponse resp, final URI link, final Cookie c,\n      final String proxyHost, final HTTP method, final ApplicationId appId)\n      throws IOException {\n    HttpClientBuilder httpClientBuilder \u003d HttpClientBuilder.create();\n\n    String httpsPolicy \u003d conf.get(YarnConfiguration.RM_APPLICATION_HTTPS_POLICY,\n        YarnConfiguration.DEFAULT_RM_APPLICATION_HTTPS_POLICY);\n    if (httpsPolicy.equals(\"LENIENT\") || httpsPolicy.equals(\"STRICT\")) {\n      ProxyCA proxyCA \u003d getProxyCA();\n      // ProxyCA could be null when the Proxy is run outside the RM\n      if (proxyCA !\u003d null) {\n        try {\n          httpClientBuilder.setSSLContext(proxyCA.createSSLContext(appId));\n          httpClientBuilder.setSSLHostnameVerifier(\n              proxyCA.getHostnameVerifier());\n        } catch (Exception e) {\n          throw new IOException(e);\n        }\n      }\n    }\n\n    // Make sure we send the request from the proxy address in the config\n    // since that is what the AM filter checks against. IP aliasing or\n    // similar could cause issues otherwise.\n    InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n    LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n    httpClientBuilder.setDefaultRequestConfig(\n        RequestConfig.custom()\n        .setCircularRedirectsAllowed(true)\n        .setLocalAddress(localAddress)\n        .build());\n\n    HttpRequestBase base \u003d null;\n    if (method.equals(HTTP.GET)) {\n      base \u003d new HttpGet(link);\n    } else if (method.equals(HTTP.PUT)) {\n      base \u003d new HttpPut(link);\n\n      StringBuilder sb \u003d new StringBuilder();\n      BufferedReader reader \u003d\n          new BufferedReader(\n              new InputStreamReader(req.getInputStream(), \"UTF-8\"));\n      String line;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        sb.append(line);\n      }\n\n      ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\n    } else {\n      resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\n      return;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n    while (names.hasMoreElements()) {\n      String name \u003d names.nextElement();\n      if (PASS_THROUGH_HEADERS.contains(name)) {\n        String value \u003d req.getHeader(name);\n        LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n        base.setHeader(name, value);\n      }\n    }\n\n    String user \u003d req.getRemoteUser();\n    if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n      base.setHeader(\"Cookie\",\n          PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n    }\n    OutputStream out \u003d resp.getOutputStream();\n    HttpClient client \u003d httpClientBuilder.build();\n    try {\n      HttpResponse httpResp \u003d client.execute(base);\n      resp.setStatus(httpResp.getStatusLine().getStatusCode());\n      for (Header header : httpResp.getAllHeaders()) {\n        resp.setHeader(header.getName(), header.getValue());\n      }\n      if (c !\u003d null) {\n        resp.addCookie(c);\n      }\n      InputStream in \u003d httpResp.getEntity().getContent();\n      if (in !\u003d null) {\n        IOUtils.copyBytes(in, out, 4096, true);\n      }\n    } finally {\n      base.releaseConnection();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
      "extendedDetails": {}
    },
    "c2288ac45b748b4119442c46147ccc324926c340": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-8448. AM HTTPS Support for AM communication with RMWeb proxy. (Contributed by Robert Kanter)\n",
      "commitDate": "16/10/18 1:36 PM",
      "commitName": "c2288ac45b748b4119442c46147ccc324926c340",
      "commitAuthor": "Haibo Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8448. AM HTTPS Support for AM communication with RMWeb proxy. (Contributed by Robert Kanter)\n",
          "commitDate": "16/10/18 1:36 PM",
          "commitName": "c2288ac45b748b4119442c46147ccc324926c340",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "03/10/17 3:01 PM",
          "commitNameOld": "c9b525bd943fe7e098e72fb9be5623862c7ab5ff",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 377.94,
          "commitsBetweenForRepo": 3424,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,76 +1,93 @@\n-  private static void proxyLink(final HttpServletRequest req,\n+  private void proxyLink(final HttpServletRequest req,\n       final HttpServletResponse resp, final URI link, final Cookie c,\n-      final String proxyHost, final HTTP method) throws IOException {\n-    DefaultHttpClient client \u003d new DefaultHttpClient();\n-    client\n-        .getParams()\n-        .setParameter(ClientPNames.COOKIE_POLICY,\n-            CookiePolicy.BROWSER_COMPATIBILITY)\n-        .setBooleanParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, true);\n+      final String proxyHost, final HTTP method, final ApplicationId appId)\n+      throws IOException {\n+    HttpClientBuilder httpClientBuilder \u003d HttpClientBuilder.create();\n+\n+    String httpsPolicy \u003d conf.get(YarnConfiguration.RM_APPLICATION_HTTPS_POLICY,\n+        YarnConfiguration.DEFAULT_RM_APPLICATION_HTTPS_POLICY);\n+    if (httpsPolicy.equals(\"LENIENT\") || httpsPolicy.equals(\"STRICT\")) {\n+      ProxyCA proxyCA \u003d getProxyCA();\n+      // ProxyCA could be null when the Proxy is run outside the RM\n+      if (proxyCA !\u003d null) {\n+        try {\n+          httpClientBuilder.setSSLContext(proxyCA.createSSLContext(appId));\n+          httpClientBuilder.setSSLHostnameVerifier(\n+              proxyCA.getHostnameVerifier());\n+        } catch (Exception e) {\n+          throw new IOException(e);\n+        }\n+      }\n+    }\n+\n     // Make sure we send the request from the proxy address in the config\n     // since that is what the AM filter checks against. IP aliasing or\n     // similar could cause issues otherwise.\n     InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n     }\n-    client.getParams()\n-        .setParameter(ConnRoutePNames.LOCAL_ADDRESS, localAddress);\n+    httpClientBuilder.setDefaultRequestConfig(\n+        RequestConfig.custom()\n+        .setCircularRedirectsAllowed(true)\n+        .setLocalAddress(localAddress)\n+        .build());\n \n     HttpRequestBase base \u003d null;\n     if (method.equals(HTTP.GET)) {\n       base \u003d new HttpGet(link);\n     } else if (method.equals(HTTP.PUT)) {\n       base \u003d new HttpPut(link);\n \n       StringBuilder sb \u003d new StringBuilder();\n       BufferedReader reader \u003d\n           new BufferedReader(\n               new InputStreamReader(req.getInputStream(), \"UTF-8\"));\n       String line;\n       while ((line \u003d reader.readLine()) !\u003d null) {\n         sb.append(line);\n       }\n \n       ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\n     } else {\n       resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\n       return;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n     while (names.hasMoreElements()) {\n       String name \u003d names.nextElement();\n       if (PASS_THROUGH_HEADERS.contains(name)) {\n         String value \u003d req.getHeader(name);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n         }\n         base.setHeader(name, value);\n       }\n     }\n \n     String user \u003d req.getRemoteUser();\n     if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n       base.setHeader(\"Cookie\",\n           PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n     }\n     OutputStream out \u003d resp.getOutputStream();\n+    HttpClient client \u003d httpClientBuilder.build();\n     try {\n       HttpResponse httpResp \u003d client.execute(base);\n       resp.setStatus(httpResp.getStatusLine().getStatusCode());\n       for (Header header : httpResp.getAllHeaders()) {\n         resp.setHeader(header.getName(), header.getValue());\n       }\n       if (c !\u003d null) {\n         resp.addCookie(c);\n       }\n       InputStream in \u003d httpResp.getEntity().getContent();\n       if (in !\u003d null) {\n         IOUtils.copyBytes(in, out, 4096, true);\n       }\n     } finally {\n       base.releaseConnection();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void proxyLink(final HttpServletRequest req,\n      final HttpServletResponse resp, final URI link, final Cookie c,\n      final String proxyHost, final HTTP method, final ApplicationId appId)\n      throws IOException {\n    HttpClientBuilder httpClientBuilder \u003d HttpClientBuilder.create();\n\n    String httpsPolicy \u003d conf.get(YarnConfiguration.RM_APPLICATION_HTTPS_POLICY,\n        YarnConfiguration.DEFAULT_RM_APPLICATION_HTTPS_POLICY);\n    if (httpsPolicy.equals(\"LENIENT\") || httpsPolicy.equals(\"STRICT\")) {\n      ProxyCA proxyCA \u003d getProxyCA();\n      // ProxyCA could be null when the Proxy is run outside the RM\n      if (proxyCA !\u003d null) {\n        try {\n          httpClientBuilder.setSSLContext(proxyCA.createSSLContext(appId));\n          httpClientBuilder.setSSLHostnameVerifier(\n              proxyCA.getHostnameVerifier());\n        } catch (Exception e) {\n          throw new IOException(e);\n        }\n      }\n    }\n\n    // Make sure we send the request from the proxy address in the config\n    // since that is what the AM filter checks against. IP aliasing or\n    // similar could cause issues otherwise.\n    InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n    }\n    httpClientBuilder.setDefaultRequestConfig(\n        RequestConfig.custom()\n        .setCircularRedirectsAllowed(true)\n        .setLocalAddress(localAddress)\n        .build());\n\n    HttpRequestBase base \u003d null;\n    if (method.equals(HTTP.GET)) {\n      base \u003d new HttpGet(link);\n    } else if (method.equals(HTTP.PUT)) {\n      base \u003d new HttpPut(link);\n\n      StringBuilder sb \u003d new StringBuilder();\n      BufferedReader reader \u003d\n          new BufferedReader(\n              new InputStreamReader(req.getInputStream(), \"UTF-8\"));\n      String line;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        sb.append(line);\n      }\n\n      ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\n    } else {\n      resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\n      return;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n    while (names.hasMoreElements()) {\n      String name \u003d names.nextElement();\n      if (PASS_THROUGH_HEADERS.contains(name)) {\n        String value \u003d req.getHeader(name);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n        }\n        base.setHeader(name, value);\n      }\n    }\n\n    String user \u003d req.getRemoteUser();\n    if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n      base.setHeader(\"Cookie\",\n          PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n    }\n    OutputStream out \u003d resp.getOutputStream();\n    HttpClient client \u003d httpClientBuilder.build();\n    try {\n      HttpResponse httpResp \u003d client.execute(base);\n      resp.setStatus(httpResp.getStatusLine().getStatusCode());\n      for (Header header : httpResp.getAllHeaders()) {\n        resp.setHeader(header.getName(), header.getValue());\n      }\n      if (c !\u003d null) {\n        resp.addCookie(c);\n      }\n      InputStream in \u003d httpResp.getEntity().getContent();\n      if (in !\u003d null) {\n        IOUtils.copyBytes(in, out, 4096, true);\n      }\n    } finally {\n      base.releaseConnection();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(modifiers-final), resp-HttpServletResponse(modifiers-final), link-URI(modifiers-final), c-Cookie(modifiers-final), proxyHost-String(modifiers-final), method-HTTP(modifiers-final)]",
            "newValue": "[req-HttpServletRequest(modifiers-final), resp-HttpServletResponse(modifiers-final), link-URI(modifiers-final), c-Cookie(modifiers-final), proxyHost-String(modifiers-final), method-HTTP(modifiers-final), appId-ApplicationId(modifiers-final)]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-8448. AM HTTPS Support for AM communication with RMWeb proxy. (Contributed by Robert Kanter)\n",
          "commitDate": "16/10/18 1:36 PM",
          "commitName": "c2288ac45b748b4119442c46147ccc324926c340",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "03/10/17 3:01 PM",
          "commitNameOld": "c9b525bd943fe7e098e72fb9be5623862c7ab5ff",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 377.94,
          "commitsBetweenForRepo": 3424,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,76 +1,93 @@\n-  private static void proxyLink(final HttpServletRequest req,\n+  private void proxyLink(final HttpServletRequest req,\n       final HttpServletResponse resp, final URI link, final Cookie c,\n-      final String proxyHost, final HTTP method) throws IOException {\n-    DefaultHttpClient client \u003d new DefaultHttpClient();\n-    client\n-        .getParams()\n-        .setParameter(ClientPNames.COOKIE_POLICY,\n-            CookiePolicy.BROWSER_COMPATIBILITY)\n-        .setBooleanParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, true);\n+      final String proxyHost, final HTTP method, final ApplicationId appId)\n+      throws IOException {\n+    HttpClientBuilder httpClientBuilder \u003d HttpClientBuilder.create();\n+\n+    String httpsPolicy \u003d conf.get(YarnConfiguration.RM_APPLICATION_HTTPS_POLICY,\n+        YarnConfiguration.DEFAULT_RM_APPLICATION_HTTPS_POLICY);\n+    if (httpsPolicy.equals(\"LENIENT\") || httpsPolicy.equals(\"STRICT\")) {\n+      ProxyCA proxyCA \u003d getProxyCA();\n+      // ProxyCA could be null when the Proxy is run outside the RM\n+      if (proxyCA !\u003d null) {\n+        try {\n+          httpClientBuilder.setSSLContext(proxyCA.createSSLContext(appId));\n+          httpClientBuilder.setSSLHostnameVerifier(\n+              proxyCA.getHostnameVerifier());\n+        } catch (Exception e) {\n+          throw new IOException(e);\n+        }\n+      }\n+    }\n+\n     // Make sure we send the request from the proxy address in the config\n     // since that is what the AM filter checks against. IP aliasing or\n     // similar could cause issues otherwise.\n     InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n     }\n-    client.getParams()\n-        .setParameter(ConnRoutePNames.LOCAL_ADDRESS, localAddress);\n+    httpClientBuilder.setDefaultRequestConfig(\n+        RequestConfig.custom()\n+        .setCircularRedirectsAllowed(true)\n+        .setLocalAddress(localAddress)\n+        .build());\n \n     HttpRequestBase base \u003d null;\n     if (method.equals(HTTP.GET)) {\n       base \u003d new HttpGet(link);\n     } else if (method.equals(HTTP.PUT)) {\n       base \u003d new HttpPut(link);\n \n       StringBuilder sb \u003d new StringBuilder();\n       BufferedReader reader \u003d\n           new BufferedReader(\n               new InputStreamReader(req.getInputStream(), \"UTF-8\"));\n       String line;\n       while ((line \u003d reader.readLine()) !\u003d null) {\n         sb.append(line);\n       }\n \n       ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\n     } else {\n       resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\n       return;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n     while (names.hasMoreElements()) {\n       String name \u003d names.nextElement();\n       if (PASS_THROUGH_HEADERS.contains(name)) {\n         String value \u003d req.getHeader(name);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n         }\n         base.setHeader(name, value);\n       }\n     }\n \n     String user \u003d req.getRemoteUser();\n     if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n       base.setHeader(\"Cookie\",\n           PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n     }\n     OutputStream out \u003d resp.getOutputStream();\n+    HttpClient client \u003d httpClientBuilder.build();\n     try {\n       HttpResponse httpResp \u003d client.execute(base);\n       resp.setStatus(httpResp.getStatusLine().getStatusCode());\n       for (Header header : httpResp.getAllHeaders()) {\n         resp.setHeader(header.getName(), header.getValue());\n       }\n       if (c !\u003d null) {\n         resp.addCookie(c);\n       }\n       InputStream in \u003d httpResp.getEntity().getContent();\n       if (in !\u003d null) {\n         IOUtils.copyBytes(in, out, 4096, true);\n       }\n     } finally {\n       base.releaseConnection();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void proxyLink(final HttpServletRequest req,\n      final HttpServletResponse resp, final URI link, final Cookie c,\n      final String proxyHost, final HTTP method, final ApplicationId appId)\n      throws IOException {\n    HttpClientBuilder httpClientBuilder \u003d HttpClientBuilder.create();\n\n    String httpsPolicy \u003d conf.get(YarnConfiguration.RM_APPLICATION_HTTPS_POLICY,\n        YarnConfiguration.DEFAULT_RM_APPLICATION_HTTPS_POLICY);\n    if (httpsPolicy.equals(\"LENIENT\") || httpsPolicy.equals(\"STRICT\")) {\n      ProxyCA proxyCA \u003d getProxyCA();\n      // ProxyCA could be null when the Proxy is run outside the RM\n      if (proxyCA !\u003d null) {\n        try {\n          httpClientBuilder.setSSLContext(proxyCA.createSSLContext(appId));\n          httpClientBuilder.setSSLHostnameVerifier(\n              proxyCA.getHostnameVerifier());\n        } catch (Exception e) {\n          throw new IOException(e);\n        }\n      }\n    }\n\n    // Make sure we send the request from the proxy address in the config\n    // since that is what the AM filter checks against. IP aliasing or\n    // similar could cause issues otherwise.\n    InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n    }\n    httpClientBuilder.setDefaultRequestConfig(\n        RequestConfig.custom()\n        .setCircularRedirectsAllowed(true)\n        .setLocalAddress(localAddress)\n        .build());\n\n    HttpRequestBase base \u003d null;\n    if (method.equals(HTTP.GET)) {\n      base \u003d new HttpGet(link);\n    } else if (method.equals(HTTP.PUT)) {\n      base \u003d new HttpPut(link);\n\n      StringBuilder sb \u003d new StringBuilder();\n      BufferedReader reader \u003d\n          new BufferedReader(\n              new InputStreamReader(req.getInputStream(), \"UTF-8\"));\n      String line;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        sb.append(line);\n      }\n\n      ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\n    } else {\n      resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\n      return;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n    while (names.hasMoreElements()) {\n      String name \u003d names.nextElement();\n      if (PASS_THROUGH_HEADERS.contains(name)) {\n        String value \u003d req.getHeader(name);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n        }\n        base.setHeader(name, value);\n      }\n    }\n\n    String user \u003d req.getRemoteUser();\n    if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n      base.setHeader(\"Cookie\",\n          PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n    }\n    OutputStream out \u003d resp.getOutputStream();\n    HttpClient client \u003d httpClientBuilder.build();\n    try {\n      HttpResponse httpResp \u003d client.execute(base);\n      resp.setStatus(httpResp.getStatusLine().getStatusCode());\n      for (Header header : httpResp.getAllHeaders()) {\n        resp.setHeader(header.getName(), header.getValue());\n      }\n      if (c !\u003d null) {\n        resp.addCookie(c);\n      }\n      InputStream in \u003d httpResp.getEntity().getContent();\n      if (in !\u003d null) {\n        IOUtils.copyBytes(in, out, 4096, true);\n      }\n    } finally {\n      base.releaseConnection();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8448. AM HTTPS Support for AM communication with RMWeb proxy. (Contributed by Robert Kanter)\n",
          "commitDate": "16/10/18 1:36 PM",
          "commitName": "c2288ac45b748b4119442c46147ccc324926c340",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "03/10/17 3:01 PM",
          "commitNameOld": "c9b525bd943fe7e098e72fb9be5623862c7ab5ff",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 377.94,
          "commitsBetweenForRepo": 3424,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,76 +1,93 @@\n-  private static void proxyLink(final HttpServletRequest req,\n+  private void proxyLink(final HttpServletRequest req,\n       final HttpServletResponse resp, final URI link, final Cookie c,\n-      final String proxyHost, final HTTP method) throws IOException {\n-    DefaultHttpClient client \u003d new DefaultHttpClient();\n-    client\n-        .getParams()\n-        .setParameter(ClientPNames.COOKIE_POLICY,\n-            CookiePolicy.BROWSER_COMPATIBILITY)\n-        .setBooleanParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, true);\n+      final String proxyHost, final HTTP method, final ApplicationId appId)\n+      throws IOException {\n+    HttpClientBuilder httpClientBuilder \u003d HttpClientBuilder.create();\n+\n+    String httpsPolicy \u003d conf.get(YarnConfiguration.RM_APPLICATION_HTTPS_POLICY,\n+        YarnConfiguration.DEFAULT_RM_APPLICATION_HTTPS_POLICY);\n+    if (httpsPolicy.equals(\"LENIENT\") || httpsPolicy.equals(\"STRICT\")) {\n+      ProxyCA proxyCA \u003d getProxyCA();\n+      // ProxyCA could be null when the Proxy is run outside the RM\n+      if (proxyCA !\u003d null) {\n+        try {\n+          httpClientBuilder.setSSLContext(proxyCA.createSSLContext(appId));\n+          httpClientBuilder.setSSLHostnameVerifier(\n+              proxyCA.getHostnameVerifier());\n+        } catch (Exception e) {\n+          throw new IOException(e);\n+        }\n+      }\n+    }\n+\n     // Make sure we send the request from the proxy address in the config\n     // since that is what the AM filter checks against. IP aliasing or\n     // similar could cause issues otherwise.\n     InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n     }\n-    client.getParams()\n-        .setParameter(ConnRoutePNames.LOCAL_ADDRESS, localAddress);\n+    httpClientBuilder.setDefaultRequestConfig(\n+        RequestConfig.custom()\n+        .setCircularRedirectsAllowed(true)\n+        .setLocalAddress(localAddress)\n+        .build());\n \n     HttpRequestBase base \u003d null;\n     if (method.equals(HTTP.GET)) {\n       base \u003d new HttpGet(link);\n     } else if (method.equals(HTTP.PUT)) {\n       base \u003d new HttpPut(link);\n \n       StringBuilder sb \u003d new StringBuilder();\n       BufferedReader reader \u003d\n           new BufferedReader(\n               new InputStreamReader(req.getInputStream(), \"UTF-8\"));\n       String line;\n       while ((line \u003d reader.readLine()) !\u003d null) {\n         sb.append(line);\n       }\n \n       ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\n     } else {\n       resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\n       return;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n     while (names.hasMoreElements()) {\n       String name \u003d names.nextElement();\n       if (PASS_THROUGH_HEADERS.contains(name)) {\n         String value \u003d req.getHeader(name);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n         }\n         base.setHeader(name, value);\n       }\n     }\n \n     String user \u003d req.getRemoteUser();\n     if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n       base.setHeader(\"Cookie\",\n           PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n     }\n     OutputStream out \u003d resp.getOutputStream();\n+    HttpClient client \u003d httpClientBuilder.build();\n     try {\n       HttpResponse httpResp \u003d client.execute(base);\n       resp.setStatus(httpResp.getStatusLine().getStatusCode());\n       for (Header header : httpResp.getAllHeaders()) {\n         resp.setHeader(header.getName(), header.getValue());\n       }\n       if (c !\u003d null) {\n         resp.addCookie(c);\n       }\n       InputStream in \u003d httpResp.getEntity().getContent();\n       if (in !\u003d null) {\n         IOUtils.copyBytes(in, out, 4096, true);\n       }\n     } finally {\n       base.releaseConnection();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void proxyLink(final HttpServletRequest req,\n      final HttpServletResponse resp, final URI link, final Cookie c,\n      final String proxyHost, final HTTP method, final ApplicationId appId)\n      throws IOException {\n    HttpClientBuilder httpClientBuilder \u003d HttpClientBuilder.create();\n\n    String httpsPolicy \u003d conf.get(YarnConfiguration.RM_APPLICATION_HTTPS_POLICY,\n        YarnConfiguration.DEFAULT_RM_APPLICATION_HTTPS_POLICY);\n    if (httpsPolicy.equals(\"LENIENT\") || httpsPolicy.equals(\"STRICT\")) {\n      ProxyCA proxyCA \u003d getProxyCA();\n      // ProxyCA could be null when the Proxy is run outside the RM\n      if (proxyCA !\u003d null) {\n        try {\n          httpClientBuilder.setSSLContext(proxyCA.createSSLContext(appId));\n          httpClientBuilder.setSSLHostnameVerifier(\n              proxyCA.getHostnameVerifier());\n        } catch (Exception e) {\n          throw new IOException(e);\n        }\n      }\n    }\n\n    // Make sure we send the request from the proxy address in the config\n    // since that is what the AM filter checks against. IP aliasing or\n    // similar could cause issues otherwise.\n    InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n    }\n    httpClientBuilder.setDefaultRequestConfig(\n        RequestConfig.custom()\n        .setCircularRedirectsAllowed(true)\n        .setLocalAddress(localAddress)\n        .build());\n\n    HttpRequestBase base \u003d null;\n    if (method.equals(HTTP.GET)) {\n      base \u003d new HttpGet(link);\n    } else if (method.equals(HTTP.PUT)) {\n      base \u003d new HttpPut(link);\n\n      StringBuilder sb \u003d new StringBuilder();\n      BufferedReader reader \u003d\n          new BufferedReader(\n              new InputStreamReader(req.getInputStream(), \"UTF-8\"));\n      String line;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        sb.append(line);\n      }\n\n      ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\n    } else {\n      resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\n      return;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n    while (names.hasMoreElements()) {\n      String name \u003d names.nextElement();\n      if (PASS_THROUGH_HEADERS.contains(name)) {\n        String value \u003d req.getHeader(name);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n        }\n        base.setHeader(name, value);\n      }\n    }\n\n    String user \u003d req.getRemoteUser();\n    if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n      base.setHeader(\"Cookie\",\n          PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n    }\n    OutputStream out \u003d resp.getOutputStream();\n    HttpClient client \u003d httpClientBuilder.build();\n    try {\n      HttpResponse httpResp \u003d client.execute(base);\n      resp.setStatus(httpResp.getStatusLine().getStatusCode());\n      for (Header header : httpResp.getAllHeaders()) {\n        resp.setHeader(header.getName(), header.getValue());\n      }\n      if (c !\u003d null) {\n        resp.addCookie(c);\n      }\n      InputStream in \u003d httpResp.getEntity().getContent();\n      if (in !\u003d null) {\n        IOUtils.copyBytes(in, out, 4096, true);\n      }\n    } finally {\n      base.releaseConnection();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
          "extendedDetails": {}
        }
      ]
    },
    "736d33cddd88a0cec925a451940b2523999a9c51": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4767. Network issues can cause persistent RM UI outage. (Daniel Templeton via kasha)\n",
      "commitDate": "03/10/16 2:35 PM",
      "commitName": "736d33cddd88a0cec925a451940b2523999a9c51",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "19/05/16 6:48 AM",
      "commitNameOld": "22ff9e68d1d9f27d62455c15fb1242538551aca9",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 137.32,
      "commitsBetweenForRepo": 1007,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,76 @@\n   private static void proxyLink(final HttpServletRequest req,\n       final HttpServletResponse resp, final URI link, final Cookie c,\n       final String proxyHost, final HTTP method) throws IOException {\n     DefaultHttpClient client \u003d new DefaultHttpClient();\n     client\n         .getParams()\n         .setParameter(ClientPNames.COOKIE_POLICY,\n             CookiePolicy.BROWSER_COMPATIBILITY)\n         .setBooleanParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, true);\n     // Make sure we send the request from the proxy address in the config\n     // since that is what the AM filter checks against. IP aliasing or\n     // similar could cause issues otherwise.\n     InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n     }\n     client.getParams()\n         .setParameter(ConnRoutePNames.LOCAL_ADDRESS, localAddress);\n \n     HttpRequestBase base \u003d null;\n     if (method.equals(HTTP.GET)) {\n       base \u003d new HttpGet(link);\n     } else if (method.equals(HTTP.PUT)) {\n       base \u003d new HttpPut(link);\n \n       StringBuilder sb \u003d new StringBuilder();\n       BufferedReader reader \u003d\n           new BufferedReader(\n               new InputStreamReader(req.getInputStream(), \"UTF-8\"));\n       String line;\n       while ((line \u003d reader.readLine()) !\u003d null) {\n         sb.append(line);\n       }\n \n       ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\n     } else {\n       resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\n       return;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n-    while(names.hasMoreElements()) {\n+    while (names.hasMoreElements()) {\n       String name \u003d names.nextElement();\n-      if(passThroughHeaders.contains(name)) {\n+      if (PASS_THROUGH_HEADERS.contains(name)) {\n         String value \u003d req.getHeader(name);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n         }\n         base.setHeader(name, value);\n       }\n     }\n \n     String user \u003d req.getRemoteUser();\n     if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n       base.setHeader(\"Cookie\",\n           PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n     }\n     OutputStream out \u003d resp.getOutputStream();\n     try {\n       HttpResponse httpResp \u003d client.execute(base);\n       resp.setStatus(httpResp.getStatusLine().getStatusCode());\n       for (Header header : httpResp.getAllHeaders()) {\n         resp.setHeader(header.getName(), header.getValue());\n       }\n       if (c !\u003d null) {\n         resp.addCookie(c);\n       }\n       InputStream in \u003d httpResp.getEntity().getContent();\n       if (in !\u003d null) {\n         IOUtils.copyBytes(in, out, 4096, true);\n       }\n     } finally {\n       base.releaseConnection();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void proxyLink(final HttpServletRequest req,\n      final HttpServletResponse resp, final URI link, final Cookie c,\n      final String proxyHost, final HTTP method) throws IOException {\n    DefaultHttpClient client \u003d new DefaultHttpClient();\n    client\n        .getParams()\n        .setParameter(ClientPNames.COOKIE_POLICY,\n            CookiePolicy.BROWSER_COMPATIBILITY)\n        .setBooleanParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, true);\n    // Make sure we send the request from the proxy address in the config\n    // since that is what the AM filter checks against. IP aliasing or\n    // similar could cause issues otherwise.\n    InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n    }\n    client.getParams()\n        .setParameter(ConnRoutePNames.LOCAL_ADDRESS, localAddress);\n\n    HttpRequestBase base \u003d null;\n    if (method.equals(HTTP.GET)) {\n      base \u003d new HttpGet(link);\n    } else if (method.equals(HTTP.PUT)) {\n      base \u003d new HttpPut(link);\n\n      StringBuilder sb \u003d new StringBuilder();\n      BufferedReader reader \u003d\n          new BufferedReader(\n              new InputStreamReader(req.getInputStream(), \"UTF-8\"));\n      String line;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        sb.append(line);\n      }\n\n      ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\n    } else {\n      resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\n      return;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n    while (names.hasMoreElements()) {\n      String name \u003d names.nextElement();\n      if (PASS_THROUGH_HEADERS.contains(name)) {\n        String value \u003d req.getHeader(name);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n        }\n        base.setHeader(name, value);\n      }\n    }\n\n    String user \u003d req.getRemoteUser();\n    if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n      base.setHeader(\"Cookie\",\n          PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n    }\n    OutputStream out \u003d resp.getOutputStream();\n    try {\n      HttpResponse httpResp \u003d client.execute(base);\n      resp.setStatus(httpResp.getStatusLine().getStatusCode());\n      for (Header header : httpResp.getAllHeaders()) {\n        resp.setHeader(header.getName(), header.getValue());\n      }\n      if (c !\u003d null) {\n        resp.addCookie(c);\n      }\n      InputStream in \u003d httpResp.getEntity().getContent();\n      if (in !\u003d null) {\n        IOUtils.copyBytes(in, out, 4096, true);\n      }\n    } finally {\n      base.releaseConnection();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
      "extendedDetails": {}
    },
    "d18f10ad1b3e497fa1aaaeb85ba055f87d9849f7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "MAPREDUCE-6284. Add Task Attempt State API to MapReduce Application Master REST API. Contributed by Ryu Kobayashi.\n",
      "commitDate": "07/05/15 11:59 PM",
      "commitName": "d18f10ad1b3e497fa1aaaeb85ba055f87d9849f7",
      "commitAuthor": "Tsuyoshi Ozawa",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-6284. Add Task Attempt State API to MapReduce Application Master REST API. Contributed by Ryu Kobayashi.\n",
          "commitDate": "07/05/15 11:59 PM",
          "commitName": "d18f10ad1b3e497fa1aaaeb85ba055f87d9849f7",
          "commitAuthor": "Tsuyoshi Ozawa",
          "commitDateOld": "05/05/15 9:42 PM",
          "commitNameOld": "a583a40693f5c56c40b39fd12cfa0bb7174fc526",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 2.1,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,76 @@\n-  private static void proxyLink(HttpServletRequest req, \n-      HttpServletResponse resp, URI link, Cookie c, String proxyHost)\n-      throws IOException {\n+  private static void proxyLink(final HttpServletRequest req,\n+      final HttpServletResponse resp, final URI link, final Cookie c,\n+      final String proxyHost, final HTTP method) throws IOException {\n     DefaultHttpClient client \u003d new DefaultHttpClient();\n     client\n         .getParams()\n         .setParameter(ClientPNames.COOKIE_POLICY,\n             CookiePolicy.BROWSER_COMPATIBILITY)\n         .setBooleanParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, true);\n     // Make sure we send the request from the proxy address in the config\n     // since that is what the AM filter checks against. IP aliasing or\n     // similar could cause issues otherwise.\n     InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n     }\n     client.getParams()\n         .setParameter(ConnRoutePNames.LOCAL_ADDRESS, localAddress);\n-    HttpGet httpGet \u003d new HttpGet(link);\n+\n+    HttpRequestBase base \u003d null;\n+    if (method.equals(HTTP.GET)) {\n+      base \u003d new HttpGet(link);\n+    } else if (method.equals(HTTP.PUT)) {\n+      base \u003d new HttpPut(link);\n+\n+      StringBuilder sb \u003d new StringBuilder();\n+      BufferedReader reader \u003d\n+          new BufferedReader(\n+              new InputStreamReader(req.getInputStream(), \"UTF-8\"));\n+      String line;\n+      while ((line \u003d reader.readLine()) !\u003d null) {\n+        sb.append(line);\n+      }\n+\n+      ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\n+    } else {\n+      resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\n+      return;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n     while(names.hasMoreElements()) {\n       String name \u003d names.nextElement();\n       if(passThroughHeaders.contains(name)) {\n         String value \u003d req.getHeader(name);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n         }\n-        httpGet.setHeader(name, value);\n+        base.setHeader(name, value);\n       }\n     }\n \n     String user \u003d req.getRemoteUser();\n     if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n-      httpGet.setHeader(\"Cookie\",\n+      base.setHeader(\"Cookie\",\n           PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n     }\n     OutputStream out \u003d resp.getOutputStream();\n     try {\n-      HttpResponse httpResp \u003d client.execute(httpGet);\n+      HttpResponse httpResp \u003d client.execute(base);\n       resp.setStatus(httpResp.getStatusLine().getStatusCode());\n       for (Header header : httpResp.getAllHeaders()) {\n         resp.setHeader(header.getName(), header.getValue());\n       }\n       if (c !\u003d null) {\n         resp.addCookie(c);\n       }\n       InputStream in \u003d httpResp.getEntity().getContent();\n       if (in !\u003d null) {\n         IOUtils.copyBytes(in, out, 4096, true);\n       }\n     } finally {\n-      httpGet.releaseConnection();\n+      base.releaseConnection();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void proxyLink(final HttpServletRequest req,\n      final HttpServletResponse resp, final URI link, final Cookie c,\n      final String proxyHost, final HTTP method) throws IOException {\n    DefaultHttpClient client \u003d new DefaultHttpClient();\n    client\n        .getParams()\n        .setParameter(ClientPNames.COOKIE_POLICY,\n            CookiePolicy.BROWSER_COMPATIBILITY)\n        .setBooleanParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, true);\n    // Make sure we send the request from the proxy address in the config\n    // since that is what the AM filter checks against. IP aliasing or\n    // similar could cause issues otherwise.\n    InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n    }\n    client.getParams()\n        .setParameter(ConnRoutePNames.LOCAL_ADDRESS, localAddress);\n\n    HttpRequestBase base \u003d null;\n    if (method.equals(HTTP.GET)) {\n      base \u003d new HttpGet(link);\n    } else if (method.equals(HTTP.PUT)) {\n      base \u003d new HttpPut(link);\n\n      StringBuilder sb \u003d new StringBuilder();\n      BufferedReader reader \u003d\n          new BufferedReader(\n              new InputStreamReader(req.getInputStream(), \"UTF-8\"));\n      String line;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        sb.append(line);\n      }\n\n      ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\n    } else {\n      resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\n      return;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n    while(names.hasMoreElements()) {\n      String name \u003d names.nextElement();\n      if(passThroughHeaders.contains(name)) {\n        String value \u003d req.getHeader(name);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n        }\n        base.setHeader(name, value);\n      }\n    }\n\n    String user \u003d req.getRemoteUser();\n    if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n      base.setHeader(\"Cookie\",\n          PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n    }\n    OutputStream out \u003d resp.getOutputStream();\n    try {\n      HttpResponse httpResp \u003d client.execute(base);\n      resp.setStatus(httpResp.getStatusLine().getStatusCode());\n      for (Header header : httpResp.getAllHeaders()) {\n        resp.setHeader(header.getName(), header.getValue());\n      }\n      if (c !\u003d null) {\n        resp.addCookie(c);\n      }\n      InputStream in \u003d httpResp.getEntity().getContent();\n      if (in !\u003d null) {\n        IOUtils.copyBytes(in, out, 4096, true);\n      }\n    } finally {\n      base.releaseConnection();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest, resp-HttpServletResponse, link-URI, c-Cookie, proxyHost-String]",
            "newValue": "[req-HttpServletRequest(modifiers-final), resp-HttpServletResponse(modifiers-final), link-URI(modifiers-final), c-Cookie(modifiers-final), proxyHost-String(modifiers-final), method-HTTP(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-6284. Add Task Attempt State API to MapReduce Application Master REST API. Contributed by Ryu Kobayashi.\n",
          "commitDate": "07/05/15 11:59 PM",
          "commitName": "d18f10ad1b3e497fa1aaaeb85ba055f87d9849f7",
          "commitAuthor": "Tsuyoshi Ozawa",
          "commitDateOld": "05/05/15 9:42 PM",
          "commitNameOld": "a583a40693f5c56c40b39fd12cfa0bb7174fc526",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 2.1,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,76 @@\n-  private static void proxyLink(HttpServletRequest req, \n-      HttpServletResponse resp, URI link, Cookie c, String proxyHost)\n-      throws IOException {\n+  private static void proxyLink(final HttpServletRequest req,\n+      final HttpServletResponse resp, final URI link, final Cookie c,\n+      final String proxyHost, final HTTP method) throws IOException {\n     DefaultHttpClient client \u003d new DefaultHttpClient();\n     client\n         .getParams()\n         .setParameter(ClientPNames.COOKIE_POLICY,\n             CookiePolicy.BROWSER_COMPATIBILITY)\n         .setBooleanParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, true);\n     // Make sure we send the request from the proxy address in the config\n     // since that is what the AM filter checks against. IP aliasing or\n     // similar could cause issues otherwise.\n     InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n     }\n     client.getParams()\n         .setParameter(ConnRoutePNames.LOCAL_ADDRESS, localAddress);\n-    HttpGet httpGet \u003d new HttpGet(link);\n+\n+    HttpRequestBase base \u003d null;\n+    if (method.equals(HTTP.GET)) {\n+      base \u003d new HttpGet(link);\n+    } else if (method.equals(HTTP.PUT)) {\n+      base \u003d new HttpPut(link);\n+\n+      StringBuilder sb \u003d new StringBuilder();\n+      BufferedReader reader \u003d\n+          new BufferedReader(\n+              new InputStreamReader(req.getInputStream(), \"UTF-8\"));\n+      String line;\n+      while ((line \u003d reader.readLine()) !\u003d null) {\n+        sb.append(line);\n+      }\n+\n+      ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\n+    } else {\n+      resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\n+      return;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n     while(names.hasMoreElements()) {\n       String name \u003d names.nextElement();\n       if(passThroughHeaders.contains(name)) {\n         String value \u003d req.getHeader(name);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n         }\n-        httpGet.setHeader(name, value);\n+        base.setHeader(name, value);\n       }\n     }\n \n     String user \u003d req.getRemoteUser();\n     if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n-      httpGet.setHeader(\"Cookie\",\n+      base.setHeader(\"Cookie\",\n           PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n     }\n     OutputStream out \u003d resp.getOutputStream();\n     try {\n-      HttpResponse httpResp \u003d client.execute(httpGet);\n+      HttpResponse httpResp \u003d client.execute(base);\n       resp.setStatus(httpResp.getStatusLine().getStatusCode());\n       for (Header header : httpResp.getAllHeaders()) {\n         resp.setHeader(header.getName(), header.getValue());\n       }\n       if (c !\u003d null) {\n         resp.addCookie(c);\n       }\n       InputStream in \u003d httpResp.getEntity().getContent();\n       if (in !\u003d null) {\n         IOUtils.copyBytes(in, out, 4096, true);\n       }\n     } finally {\n-      httpGet.releaseConnection();\n+      base.releaseConnection();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void proxyLink(final HttpServletRequest req,\n      final HttpServletResponse resp, final URI link, final Cookie c,\n      final String proxyHost, final HTTP method) throws IOException {\n    DefaultHttpClient client \u003d new DefaultHttpClient();\n    client\n        .getParams()\n        .setParameter(ClientPNames.COOKIE_POLICY,\n            CookiePolicy.BROWSER_COMPATIBILITY)\n        .setBooleanParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, true);\n    // Make sure we send the request from the proxy address in the config\n    // since that is what the AM filter checks against. IP aliasing or\n    // similar could cause issues otherwise.\n    InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n    }\n    client.getParams()\n        .setParameter(ConnRoutePNames.LOCAL_ADDRESS, localAddress);\n\n    HttpRequestBase base \u003d null;\n    if (method.equals(HTTP.GET)) {\n      base \u003d new HttpGet(link);\n    } else if (method.equals(HTTP.PUT)) {\n      base \u003d new HttpPut(link);\n\n      StringBuilder sb \u003d new StringBuilder();\n      BufferedReader reader \u003d\n          new BufferedReader(\n              new InputStreamReader(req.getInputStream(), \"UTF-8\"));\n      String line;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        sb.append(line);\n      }\n\n      ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\n    } else {\n      resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\n      return;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n    while(names.hasMoreElements()) {\n      String name \u003d names.nextElement();\n      if(passThroughHeaders.contains(name)) {\n        String value \u003d req.getHeader(name);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n        }\n        base.setHeader(name, value);\n      }\n    }\n\n    String user \u003d req.getRemoteUser();\n    if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n      base.setHeader(\"Cookie\",\n          PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n    }\n    OutputStream out \u003d resp.getOutputStream();\n    try {\n      HttpResponse httpResp \u003d client.execute(base);\n      resp.setStatus(httpResp.getStatusLine().getStatusCode());\n      for (Header header : httpResp.getAllHeaders()) {\n        resp.setHeader(header.getName(), header.getValue());\n      }\n      if (c !\u003d null) {\n        resp.addCookie(c);\n      }\n      InputStream in \u003d httpResp.getEntity().getContent();\n      if (in !\u003d null) {\n        IOUtils.copyBytes(in, out, 4096, true);\n      }\n    } finally {\n      base.releaseConnection();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "MAPREDUCE-6284. Add Task Attempt State API to MapReduce Application Master REST API. Contributed by Ryu Kobayashi.\n",
          "commitDate": "07/05/15 11:59 PM",
          "commitName": "d18f10ad1b3e497fa1aaaeb85ba055f87d9849f7",
          "commitAuthor": "Tsuyoshi Ozawa",
          "commitDateOld": "05/05/15 9:42 PM",
          "commitNameOld": "a583a40693f5c56c40b39fd12cfa0bb7174fc526",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 2.1,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,76 @@\n-  private static void proxyLink(HttpServletRequest req, \n-      HttpServletResponse resp, URI link, Cookie c, String proxyHost)\n-      throws IOException {\n+  private static void proxyLink(final HttpServletRequest req,\n+      final HttpServletResponse resp, final URI link, final Cookie c,\n+      final String proxyHost, final HTTP method) throws IOException {\n     DefaultHttpClient client \u003d new DefaultHttpClient();\n     client\n         .getParams()\n         .setParameter(ClientPNames.COOKIE_POLICY,\n             CookiePolicy.BROWSER_COMPATIBILITY)\n         .setBooleanParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, true);\n     // Make sure we send the request from the proxy address in the config\n     // since that is what the AM filter checks against. IP aliasing or\n     // similar could cause issues otherwise.\n     InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n     }\n     client.getParams()\n         .setParameter(ConnRoutePNames.LOCAL_ADDRESS, localAddress);\n-    HttpGet httpGet \u003d new HttpGet(link);\n+\n+    HttpRequestBase base \u003d null;\n+    if (method.equals(HTTP.GET)) {\n+      base \u003d new HttpGet(link);\n+    } else if (method.equals(HTTP.PUT)) {\n+      base \u003d new HttpPut(link);\n+\n+      StringBuilder sb \u003d new StringBuilder();\n+      BufferedReader reader \u003d\n+          new BufferedReader(\n+              new InputStreamReader(req.getInputStream(), \"UTF-8\"));\n+      String line;\n+      while ((line \u003d reader.readLine()) !\u003d null) {\n+        sb.append(line);\n+      }\n+\n+      ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\n+    } else {\n+      resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\n+      return;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n     while(names.hasMoreElements()) {\n       String name \u003d names.nextElement();\n       if(passThroughHeaders.contains(name)) {\n         String value \u003d req.getHeader(name);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n         }\n-        httpGet.setHeader(name, value);\n+        base.setHeader(name, value);\n       }\n     }\n \n     String user \u003d req.getRemoteUser();\n     if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n-      httpGet.setHeader(\"Cookie\",\n+      base.setHeader(\"Cookie\",\n           PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n     }\n     OutputStream out \u003d resp.getOutputStream();\n     try {\n-      HttpResponse httpResp \u003d client.execute(httpGet);\n+      HttpResponse httpResp \u003d client.execute(base);\n       resp.setStatus(httpResp.getStatusLine().getStatusCode());\n       for (Header header : httpResp.getAllHeaders()) {\n         resp.setHeader(header.getName(), header.getValue());\n       }\n       if (c !\u003d null) {\n         resp.addCookie(c);\n       }\n       InputStream in \u003d httpResp.getEntity().getContent();\n       if (in !\u003d null) {\n         IOUtils.copyBytes(in, out, 4096, true);\n       }\n     } finally {\n-      httpGet.releaseConnection();\n+      base.releaseConnection();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void proxyLink(final HttpServletRequest req,\n      final HttpServletResponse resp, final URI link, final Cookie c,\n      final String proxyHost, final HTTP method) throws IOException {\n    DefaultHttpClient client \u003d new DefaultHttpClient();\n    client\n        .getParams()\n        .setParameter(ClientPNames.COOKIE_POLICY,\n            CookiePolicy.BROWSER_COMPATIBILITY)\n        .setBooleanParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, true);\n    // Make sure we send the request from the proxy address in the config\n    // since that is what the AM filter checks against. IP aliasing or\n    // similar could cause issues otherwise.\n    InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n    }\n    client.getParams()\n        .setParameter(ConnRoutePNames.LOCAL_ADDRESS, localAddress);\n\n    HttpRequestBase base \u003d null;\n    if (method.equals(HTTP.GET)) {\n      base \u003d new HttpGet(link);\n    } else if (method.equals(HTTP.PUT)) {\n      base \u003d new HttpPut(link);\n\n      StringBuilder sb \u003d new StringBuilder();\n      BufferedReader reader \u003d\n          new BufferedReader(\n              new InputStreamReader(req.getInputStream(), \"UTF-8\"));\n      String line;\n      while ((line \u003d reader.readLine()) !\u003d null) {\n        sb.append(line);\n      }\n\n      ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\n    } else {\n      resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\n      return;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n    while(names.hasMoreElements()) {\n      String name \u003d names.nextElement();\n      if(passThroughHeaders.contains(name)) {\n        String value \u003d req.getHeader(name);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n        }\n        base.setHeader(name, value);\n      }\n    }\n\n    String user \u003d req.getRemoteUser();\n    if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n      base.setHeader(\"Cookie\",\n          PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n    }\n    OutputStream out \u003d resp.getOutputStream();\n    try {\n      HttpResponse httpResp \u003d client.execute(base);\n      resp.setStatus(httpResp.getStatusLine().getStatusCode());\n      for (Header header : httpResp.getAllHeaders()) {\n        resp.setHeader(header.getName(), header.getValue());\n      }\n      if (c !\u003d null) {\n        resp.addCookie(c);\n      }\n      InputStream in \u003d httpResp.getEntity().getContent();\n      if (in !\u003d null) {\n        IOUtils.copyBytes(in, out, 4096, true);\n      }\n    } finally {\n      base.releaseConnection();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest, resp-HttpServletResponse, link-URI, c-Cookie, proxyHost-String]",
            "newValue": "[req-HttpServletRequest(modifiers-final), resp-HttpServletResponse(modifiers-final), link-URI(modifiers-final), c-Cookie(modifiers-final), proxyHost-String(modifiers-final), method-HTTP(modifiers-final)]"
          }
        }
      ]
    },
    "773b6515ac51af3484824bd6f57685a9726a1e70": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3217. Remove httpclient dependency from hadoop-yarn-server-web-proxy. Contributed by Brahma Reddy Battula.\n",
      "commitDate": "26/02/15 7:24 AM",
      "commitName": "773b6515ac51af3484824bd6f57685a9726a1e70",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "25/02/15 8:14 AM",
      "commitNameOld": "1a68fc43464d3948418f453bb2f80df7ce773097",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.97,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n   private static void proxyLink(HttpServletRequest req, \n       HttpServletResponse resp, URI link, Cookie c, String proxyHost)\n       throws IOException {\n-    org.apache.commons.httpclient.URI uri \u003d \n-      new org.apache.commons.httpclient.URI(link.toString(), false);\n-    HttpClientParams params \u003d new HttpClientParams();\n-    params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);\n-    params.setBooleanParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS, true);\n-    HttpClient client \u003d new HttpClient(params);\n+    DefaultHttpClient client \u003d new DefaultHttpClient();\n+    client\n+        .getParams()\n+        .setParameter(ClientPNames.COOKIE_POLICY,\n+            CookiePolicy.BROWSER_COMPATIBILITY)\n+        .setBooleanParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, true);\n     // Make sure we send the request from the proxy address in the config\n     // since that is what the AM filter checks against. IP aliasing or\n     // similar could cause issues otherwise.\n-    HostConfiguration config \u003d new HostConfiguration();\n     InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n     }\n-    config.setLocalAddress(localAddress);\n-    HttpMethod method \u003d new GetMethod(uri.getEscapedURI());\n-    method.setRequestHeader(\"Connection\",\"close\");\n+    client.getParams()\n+        .setParameter(ConnRoutePNames.LOCAL_ADDRESS, localAddress);\n+    HttpGet httpGet \u003d new HttpGet(link);\n     @SuppressWarnings(\"unchecked\")\n     Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n     while(names.hasMoreElements()) {\n       String name \u003d names.nextElement();\n       if(passThroughHeaders.contains(name)) {\n         String value \u003d req.getHeader(name);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n         }\n-        method.setRequestHeader(name, value);\n+        httpGet.setHeader(name, value);\n       }\n     }\n \n     String user \u003d req.getRemoteUser();\n     if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n-      method.setRequestHeader(\"Cookie\",\n+      httpGet.setHeader(\"Cookie\",\n           PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n     }\n     OutputStream out \u003d resp.getOutputStream();\n     try {\n-      resp.setStatus(client.executeMethod(config, method));\n-      for(Header header : method.getResponseHeaders()) {\n+      HttpResponse httpResp \u003d client.execute(httpGet);\n+      resp.setStatus(httpResp.getStatusLine().getStatusCode());\n+      for (Header header : httpResp.getAllHeaders()) {\n         resp.setHeader(header.getName(), header.getValue());\n       }\n       if (c !\u003d null) {\n         resp.addCookie(c);\n       }\n-      InputStream in \u003d method.getResponseBodyAsStream();\n+      InputStream in \u003d httpResp.getEntity().getContent();\n       if (in !\u003d null) {\n         IOUtils.copyBytes(in, out, 4096, true);\n       }\n     } finally {\n-      method.releaseConnection();\n+      httpGet.releaseConnection();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void proxyLink(HttpServletRequest req, \n      HttpServletResponse resp, URI link, Cookie c, String proxyHost)\n      throws IOException {\n    DefaultHttpClient client \u003d new DefaultHttpClient();\n    client\n        .getParams()\n        .setParameter(ClientPNames.COOKIE_POLICY,\n            CookiePolicy.BROWSER_COMPATIBILITY)\n        .setBooleanParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, true);\n    // Make sure we send the request from the proxy address in the config\n    // since that is what the AM filter checks against. IP aliasing or\n    // similar could cause issues otherwise.\n    InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n    }\n    client.getParams()\n        .setParameter(ConnRoutePNames.LOCAL_ADDRESS, localAddress);\n    HttpGet httpGet \u003d new HttpGet(link);\n    @SuppressWarnings(\"unchecked\")\n    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n    while(names.hasMoreElements()) {\n      String name \u003d names.nextElement();\n      if(passThroughHeaders.contains(name)) {\n        String value \u003d req.getHeader(name);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n        }\n        httpGet.setHeader(name, value);\n      }\n    }\n\n    String user \u003d req.getRemoteUser();\n    if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n      httpGet.setHeader(\"Cookie\",\n          PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n    }\n    OutputStream out \u003d resp.getOutputStream();\n    try {\n      HttpResponse httpResp \u003d client.execute(httpGet);\n      resp.setStatus(httpResp.getStatusLine().getStatusCode());\n      for (Header header : httpResp.getAllHeaders()) {\n        resp.setHeader(header.getName(), header.getValue());\n      }\n      if (c !\u003d null) {\n        resp.addCookie(c);\n      }\n      InputStream in \u003d httpResp.getEntity().getContent();\n      if (in !\u003d null) {\n        IOUtils.copyBytes(in, out, 4096, true);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
      "extendedDetails": {}
    },
    "83be450acc7fc9bb9f7bbd006e7b0804bf10279c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3147. Clean up RM web proxy code. Contributed by Steve Loughran\n",
      "commitDate": "12/02/15 10:57 AM",
      "commitName": "83be450acc7fc9bb9f7bbd006e7b0804bf10279c",
      "commitAuthor": "Xuan",
      "commitDateOld": "23/12/14 8:04 PM",
      "commitNameOld": "d468c9aaf15e977f12e6214b47996412c907e069",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 50.62,
      "commitsBetweenForRepo": 356,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,55 @@\n   private static void proxyLink(HttpServletRequest req, \n       HttpServletResponse resp, URI link, Cookie c, String proxyHost)\n       throws IOException {\n     org.apache.commons.httpclient.URI uri \u003d \n       new org.apache.commons.httpclient.URI(link.toString(), false);\n     HttpClientParams params \u003d new HttpClientParams();\n     params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);\n     params.setBooleanParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS, true);\n     HttpClient client \u003d new HttpClient(params);\n     // Make sure we send the request from the proxy address in the config\n     // since that is what the AM filter checks against. IP aliasing or\n     // similar could cause issues otherwise.\n     HostConfiguration config \u003d new HostConfiguration();\n     InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"local InetAddress for proxy host: \" + localAddress.toString());\n+      LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n     }\n     config.setLocalAddress(localAddress);\n     HttpMethod method \u003d new GetMethod(uri.getEscapedURI());\n     method.setRequestHeader(\"Connection\",\"close\");\n     @SuppressWarnings(\"unchecked\")\n     Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n     while(names.hasMoreElements()) {\n       String name \u003d names.nextElement();\n       if(passThroughHeaders.contains(name)) {\n         String value \u003d req.getHeader(name);\n-        LOG.debug(\"REQ HEADER: \"+name+\" : \"+value);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n+        }\n         method.setRequestHeader(name, value);\n       }\n     }\n \n     String user \u003d req.getRemoteUser();\n-    if(user !\u003d null \u0026\u0026 !user.isEmpty()) {\n-      method.setRequestHeader(\"Cookie\",PROXY_USER_COOKIE_NAME+\"\u003d\"+\n-          URLEncoder.encode(user, \"ASCII\"));\n+    if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n+      method.setRequestHeader(\"Cookie\",\n+          PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n     }\n     OutputStream out \u003d resp.getOutputStream();\n     try {\n       resp.setStatus(client.executeMethod(config, method));\n       for(Header header : method.getResponseHeaders()) {\n         resp.setHeader(header.getName(), header.getValue());\n       }\n-      if(c !\u003d null) {\n+      if (c !\u003d null) {\n         resp.addCookie(c);\n       }\n       InputStream in \u003d method.getResponseBodyAsStream();\n-      if(in !\u003d null) {\n+      if (in !\u003d null) {\n         IOUtils.copyBytes(in, out, 4096, true);\n       }\n     } finally {\n       method.releaseConnection();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void proxyLink(HttpServletRequest req, \n      HttpServletResponse resp, URI link, Cookie c, String proxyHost)\n      throws IOException {\n    org.apache.commons.httpclient.URI uri \u003d \n      new org.apache.commons.httpclient.URI(link.toString(), false);\n    HttpClientParams params \u003d new HttpClientParams();\n    params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);\n    params.setBooleanParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS, true);\n    HttpClient client \u003d new HttpClient(params);\n    // Make sure we send the request from the proxy address in the config\n    // since that is what the AM filter checks against. IP aliasing or\n    // similar could cause issues otherwise.\n    HostConfiguration config \u003d new HostConfiguration();\n    InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\n    }\n    config.setLocalAddress(localAddress);\n    HttpMethod method \u003d new GetMethod(uri.getEscapedURI());\n    method.setRequestHeader(\"Connection\",\"close\");\n    @SuppressWarnings(\"unchecked\")\n    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n    while(names.hasMoreElements()) {\n      String name \u003d names.nextElement();\n      if(passThroughHeaders.contains(name)) {\n        String value \u003d req.getHeader(name);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"REQ HEADER: {} : {}\", name, value);\n        }\n        method.setRequestHeader(name, value);\n      }\n    }\n\n    String user \u003d req.getRemoteUser();\n    if (user !\u003d null \u0026\u0026 !user.isEmpty()) {\n      method.setRequestHeader(\"Cookie\",\n          PROXY_USER_COOKIE_NAME + \"\u003d\" + URLEncoder.encode(user, \"ASCII\"));\n    }\n    OutputStream out \u003d resp.getOutputStream();\n    try {\n      resp.setStatus(client.executeMethod(config, method));\n      for(Header header : method.getResponseHeaders()) {\n        resp.setHeader(header.getName(), header.getValue());\n      }\n      if (c !\u003d null) {\n        resp.addCookie(c);\n      }\n      InputStream in \u003d method.getResponseBodyAsStream();\n      if (in !\u003d null) {\n        IOUtils.copyBytes(in, out, 4096, true);\n      }\n    } finally {\n      method.releaseConnection();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
      "extendedDetails": {}
    },
    "198fb58776ec02397af5ad83259535b0291b745c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1703. Fixed ResourceManager web-proxy to close connections correctly. Contributed by Rohith Sharma.\n",
      "commitDate": "15/11/14 12:05 PM",
      "commitName": "198fb58776ec02397af5ad83259535b0291b745c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "20/03/14 7:02 PM",
      "commitNameOld": "1c49cfbeb7df7ad5466578bd470819bcedc612cf",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 239.75,
      "commitsBetweenForRepo": 1977,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n   private static void proxyLink(HttpServletRequest req, \n       HttpServletResponse resp, URI link, Cookie c, String proxyHost)\n       throws IOException {\n     org.apache.commons.httpclient.URI uri \u003d \n       new org.apache.commons.httpclient.URI(link.toString(), false);\n     HttpClientParams params \u003d new HttpClientParams();\n     params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);\n     params.setBooleanParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS, true);\n     HttpClient client \u003d new HttpClient(params);\n     // Make sure we send the request from the proxy address in the config\n     // since that is what the AM filter checks against. IP aliasing or\n     // similar could cause issues otherwise.\n     HostConfiguration config \u003d new HostConfiguration();\n     InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"local InetAddress for proxy host: \" + localAddress.toString());\n     }\n     config.setLocalAddress(localAddress);\n     HttpMethod method \u003d new GetMethod(uri.getEscapedURI());\n+    method.setRequestHeader(\"Connection\",\"close\");\n     @SuppressWarnings(\"unchecked\")\n     Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n     while(names.hasMoreElements()) {\n       String name \u003d names.nextElement();\n       if(passThroughHeaders.contains(name)) {\n         String value \u003d req.getHeader(name);\n         LOG.debug(\"REQ HEADER: \"+name+\" : \"+value);\n         method.setRequestHeader(name, value);\n       }\n     }\n \n     String user \u003d req.getRemoteUser();\n     if(user !\u003d null \u0026\u0026 !user.isEmpty()) {\n       method.setRequestHeader(\"Cookie\",PROXY_USER_COOKIE_NAME+\"\u003d\"+\n           URLEncoder.encode(user, \"ASCII\"));\n     }\n     OutputStream out \u003d resp.getOutputStream();\n     try {\n       resp.setStatus(client.executeMethod(config, method));\n       for(Header header : method.getResponseHeaders()) {\n         resp.setHeader(header.getName(), header.getValue());\n       }\n       if(c !\u003d null) {\n         resp.addCookie(c);\n       }\n       InputStream in \u003d method.getResponseBodyAsStream();\n       if(in !\u003d null) {\n         IOUtils.copyBytes(in, out, 4096, true);\n       }\n     } finally {\n       method.releaseConnection();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void proxyLink(HttpServletRequest req, \n      HttpServletResponse resp, URI link, Cookie c, String proxyHost)\n      throws IOException {\n    org.apache.commons.httpclient.URI uri \u003d \n      new org.apache.commons.httpclient.URI(link.toString(), false);\n    HttpClientParams params \u003d new HttpClientParams();\n    params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);\n    params.setBooleanParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS, true);\n    HttpClient client \u003d new HttpClient(params);\n    // Make sure we send the request from the proxy address in the config\n    // since that is what the AM filter checks against. IP aliasing or\n    // similar could cause issues otherwise.\n    HostConfiguration config \u003d new HostConfiguration();\n    InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"local InetAddress for proxy host: \" + localAddress.toString());\n    }\n    config.setLocalAddress(localAddress);\n    HttpMethod method \u003d new GetMethod(uri.getEscapedURI());\n    method.setRequestHeader(\"Connection\",\"close\");\n    @SuppressWarnings(\"unchecked\")\n    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n    while(names.hasMoreElements()) {\n      String name \u003d names.nextElement();\n      if(passThroughHeaders.contains(name)) {\n        String value \u003d req.getHeader(name);\n        LOG.debug(\"REQ HEADER: \"+name+\" : \"+value);\n        method.setRequestHeader(name, value);\n      }\n    }\n\n    String user \u003d req.getRemoteUser();\n    if(user !\u003d null \u0026\u0026 !user.isEmpty()) {\n      method.setRequestHeader(\"Cookie\",PROXY_USER_COOKIE_NAME+\"\u003d\"+\n          URLEncoder.encode(user, \"ASCII\"));\n    }\n    OutputStream out \u003d resp.getOutputStream();\n    try {\n      resp.setStatus(client.executeMethod(config, method));\n      for(Header header : method.getResponseHeaders()) {\n        resp.setHeader(header.getName(), header.getValue());\n      }\n      if(c !\u003d null) {\n        resp.addCookie(c);\n      }\n      InputStream in \u003d method.getResponseBodyAsStream();\n      if(in !\u003d null) {\n        IOUtils.copyBytes(in, out, 4096, true);\n      }\n    } finally {\n      method.releaseConnection();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void proxyLink(HttpServletRequest req, \n      HttpServletResponse resp, URI link, Cookie c, String proxyHost)\n      throws IOException {\n    org.apache.commons.httpclient.URI uri \u003d \n      new org.apache.commons.httpclient.URI(link.toString(), false);\n    HttpClientParams params \u003d new HttpClientParams();\n    params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);\n    params.setBooleanParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS, true);\n    HttpClient client \u003d new HttpClient(params);\n    // Make sure we send the request from the proxy address in the config\n    // since that is what the AM filter checks against. IP aliasing or\n    // similar could cause issues otherwise.\n    HostConfiguration config \u003d new HostConfiguration();\n    InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"local InetAddress for proxy host: \" + localAddress.toString());\n    }\n    config.setLocalAddress(localAddress);\n    HttpMethod method \u003d new GetMethod(uri.getEscapedURI());\n\n    @SuppressWarnings(\"unchecked\")\n    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n    while(names.hasMoreElements()) {\n      String name \u003d names.nextElement();\n      if(passThroughHeaders.contains(name)) {\n        String value \u003d req.getHeader(name);\n        LOG.debug(\"REQ HEADER: \"+name+\" : \"+value);\n        method.setRequestHeader(name, value);\n      }\n    }\n\n    String user \u003d req.getRemoteUser();\n    if(user !\u003d null \u0026\u0026 !user.isEmpty()) {\n      method.setRequestHeader(\"Cookie\",PROXY_USER_COOKIE_NAME+\"\u003d\"+\n          URLEncoder.encode(user, \"ASCII\"));\n    }\n    OutputStream out \u003d resp.getOutputStream();\n    try {\n      resp.setStatus(client.executeMethod(config, method));\n      for(Header header : method.getResponseHeaders()) {\n        resp.setHeader(header.getName(), header.getValue());\n      }\n      if(c !\u003d null) {\n        resp.addCookie(c);\n      }\n      InputStream in \u003d method.getResponseBodyAsStream();\n      if(in !\u003d null) {\n        IOUtils.copyBytes(in, out, 4096, true);\n      }\n    } finally {\n      method.releaseConnection();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java"
      }
    },
    "d41cb76b56e19f6eb411b3dacaf28a490d079c68": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3960. Fix web-proxy to forward request to AM with configured hostname or IP. Contributed by Thomas Graves. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296878 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/03/12 1:14 PM",
      "commitName": "d41cb76b56e19f6eb411b3dacaf28a490d079c68",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-3960. Fix web-proxy to forward request to AM with configured hostname or IP. Contributed by Thomas Graves. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296878 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/03/12 1:14 PM",
          "commitName": "d41cb76b56e19f6eb411b3dacaf28a490d079c68",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "29/02/12 2:14 PM",
          "commitNameOld": "7bf2f9559f884827f2ea09412e4c20a456e972df",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 3.96,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,53 @@\n   private static void proxyLink(HttpServletRequest req, \n-      HttpServletResponse resp, URI link,Cookie c) throws IOException {\n+      HttpServletResponse resp, URI link, Cookie c, String proxyHost)\n+      throws IOException {\n     org.apache.commons.httpclient.URI uri \u003d \n       new org.apache.commons.httpclient.URI(link.toString(), false);\n     HttpClientParams params \u003d new HttpClientParams();\n     params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);\n     params.setBooleanParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS, true);\n     HttpClient client \u003d new HttpClient(params);\n+    // Make sure we send the request from the proxy address in the config\n+    // since that is what the AM filter checks against. IP aliasing or\n+    // similar could cause issues otherwise.\n+    HostConfiguration config \u003d new HostConfiguration();\n+    InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"local InetAddress for proxy host: \" + localAddress.toString());\n+    }\n+    config.setLocalAddress(localAddress);\n     HttpMethod method \u003d new GetMethod(uri.getEscapedURI());\n \n     @SuppressWarnings(\"unchecked\")\n     Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n     while(names.hasMoreElements()) {\n       String name \u003d names.nextElement();\n       if(passThroughHeaders.contains(name)) {\n         String value \u003d req.getHeader(name);\n         LOG.debug(\"REQ HEADER: \"+name+\" : \"+value);\n         method.setRequestHeader(name, value);\n       }\n     }\n \n     String user \u003d req.getRemoteUser();\n     if(user !\u003d null \u0026\u0026 !user.isEmpty()) {\n       method.setRequestHeader(\"Cookie\",PROXY_USER_COOKIE_NAME+\"\u003d\"+\n           URLEncoder.encode(user, \"ASCII\"));\n     }\n     OutputStream out \u003d resp.getOutputStream();\n     try {\n-      resp.setStatus(client.executeMethod(method));\n+      resp.setStatus(client.executeMethod(config, method));\n       for(Header header : method.getResponseHeaders()) {\n         resp.setHeader(header.getName(), header.getValue());\n       }\n       if(c !\u003d null) {\n         resp.addCookie(c);\n       }\n       InputStream in \u003d method.getResponseBodyAsStream();\n       if(in !\u003d null) {\n         IOUtils.copyBytes(in, out, 4096, true);\n       }\n     } finally {\n       method.releaseConnection();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void proxyLink(HttpServletRequest req, \n      HttpServletResponse resp, URI link, Cookie c, String proxyHost)\n      throws IOException {\n    org.apache.commons.httpclient.URI uri \u003d \n      new org.apache.commons.httpclient.URI(link.toString(), false);\n    HttpClientParams params \u003d new HttpClientParams();\n    params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);\n    params.setBooleanParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS, true);\n    HttpClient client \u003d new HttpClient(params);\n    // Make sure we send the request from the proxy address in the config\n    // since that is what the AM filter checks against. IP aliasing or\n    // similar could cause issues otherwise.\n    HostConfiguration config \u003d new HostConfiguration();\n    InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"local InetAddress for proxy host: \" + localAddress.toString());\n    }\n    config.setLocalAddress(localAddress);\n    HttpMethod method \u003d new GetMethod(uri.getEscapedURI());\n\n    @SuppressWarnings(\"unchecked\")\n    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n    while(names.hasMoreElements()) {\n      String name \u003d names.nextElement();\n      if(passThroughHeaders.contains(name)) {\n        String value \u003d req.getHeader(name);\n        LOG.debug(\"REQ HEADER: \"+name+\" : \"+value);\n        method.setRequestHeader(name, value);\n      }\n    }\n\n    String user \u003d req.getRemoteUser();\n    if(user !\u003d null \u0026\u0026 !user.isEmpty()) {\n      method.setRequestHeader(\"Cookie\",PROXY_USER_COOKIE_NAME+\"\u003d\"+\n          URLEncoder.encode(user, \"ASCII\"));\n    }\n    OutputStream out \u003d resp.getOutputStream();\n    try {\n      resp.setStatus(client.executeMethod(config, method));\n      for(Header header : method.getResponseHeaders()) {\n        resp.setHeader(header.getName(), header.getValue());\n      }\n      if(c !\u003d null) {\n        resp.addCookie(c);\n      }\n      InputStream in \u003d method.getResponseBodyAsStream();\n      if(in !\u003d null) {\n        IOUtils.copyBytes(in, out, 4096, true);\n      }\n    } finally {\n      method.releaseConnection();\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest, resp-HttpServletResponse, link-URI, c-Cookie]",
            "newValue": "[req-HttpServletRequest, resp-HttpServletResponse, link-URI, c-Cookie, proxyHost-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3960. Fix web-proxy to forward request to AM with configured hostname or IP. Contributed by Thomas Graves. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296878 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/03/12 1:14 PM",
          "commitName": "d41cb76b56e19f6eb411b3dacaf28a490d079c68",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "29/02/12 2:14 PM",
          "commitNameOld": "7bf2f9559f884827f2ea09412e4c20a456e972df",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 3.96,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,53 @@\n   private static void proxyLink(HttpServletRequest req, \n-      HttpServletResponse resp, URI link,Cookie c) throws IOException {\n+      HttpServletResponse resp, URI link, Cookie c, String proxyHost)\n+      throws IOException {\n     org.apache.commons.httpclient.URI uri \u003d \n       new org.apache.commons.httpclient.URI(link.toString(), false);\n     HttpClientParams params \u003d new HttpClientParams();\n     params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);\n     params.setBooleanParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS, true);\n     HttpClient client \u003d new HttpClient(params);\n+    // Make sure we send the request from the proxy address in the config\n+    // since that is what the AM filter checks against. IP aliasing or\n+    // similar could cause issues otherwise.\n+    HostConfiguration config \u003d new HostConfiguration();\n+    InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"local InetAddress for proxy host: \" + localAddress.toString());\n+    }\n+    config.setLocalAddress(localAddress);\n     HttpMethod method \u003d new GetMethod(uri.getEscapedURI());\n \n     @SuppressWarnings(\"unchecked\")\n     Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n     while(names.hasMoreElements()) {\n       String name \u003d names.nextElement();\n       if(passThroughHeaders.contains(name)) {\n         String value \u003d req.getHeader(name);\n         LOG.debug(\"REQ HEADER: \"+name+\" : \"+value);\n         method.setRequestHeader(name, value);\n       }\n     }\n \n     String user \u003d req.getRemoteUser();\n     if(user !\u003d null \u0026\u0026 !user.isEmpty()) {\n       method.setRequestHeader(\"Cookie\",PROXY_USER_COOKIE_NAME+\"\u003d\"+\n           URLEncoder.encode(user, \"ASCII\"));\n     }\n     OutputStream out \u003d resp.getOutputStream();\n     try {\n-      resp.setStatus(client.executeMethod(method));\n+      resp.setStatus(client.executeMethod(config, method));\n       for(Header header : method.getResponseHeaders()) {\n         resp.setHeader(header.getName(), header.getValue());\n       }\n       if(c !\u003d null) {\n         resp.addCookie(c);\n       }\n       InputStream in \u003d method.getResponseBodyAsStream();\n       if(in !\u003d null) {\n         IOUtils.copyBytes(in, out, 4096, true);\n       }\n     } finally {\n       method.releaseConnection();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void proxyLink(HttpServletRequest req, \n      HttpServletResponse resp, URI link, Cookie c, String proxyHost)\n      throws IOException {\n    org.apache.commons.httpclient.URI uri \u003d \n      new org.apache.commons.httpclient.URI(link.toString(), false);\n    HttpClientParams params \u003d new HttpClientParams();\n    params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);\n    params.setBooleanParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS, true);\n    HttpClient client \u003d new HttpClient(params);\n    // Make sure we send the request from the proxy address in the config\n    // since that is what the AM filter checks against. IP aliasing or\n    // similar could cause issues otherwise.\n    HostConfiguration config \u003d new HostConfiguration();\n    InetAddress localAddress \u003d InetAddress.getByName(proxyHost);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"local InetAddress for proxy host: \" + localAddress.toString());\n    }\n    config.setLocalAddress(localAddress);\n    HttpMethod method \u003d new GetMethod(uri.getEscapedURI());\n\n    @SuppressWarnings(\"unchecked\")\n    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n    while(names.hasMoreElements()) {\n      String name \u003d names.nextElement();\n      if(passThroughHeaders.contains(name)) {\n        String value \u003d req.getHeader(name);\n        LOG.debug(\"REQ HEADER: \"+name+\" : \"+value);\n        method.setRequestHeader(name, value);\n      }\n    }\n\n    String user \u003d req.getRemoteUser();\n    if(user !\u003d null \u0026\u0026 !user.isEmpty()) {\n      method.setRequestHeader(\"Cookie\",PROXY_USER_COOKIE_NAME+\"\u003d\"+\n          URLEncoder.encode(user, \"ASCII\"));\n    }\n    OutputStream out \u003d resp.getOutputStream();\n    try {\n      resp.setStatus(client.executeMethod(config, method));\n      for(Header header : method.getResponseHeaders()) {\n        resp.setHeader(header.getName(), header.getValue());\n      }\n      if(c !\u003d null) {\n        resp.addCookie(c);\n      }\n      InputStream in \u003d method.getResponseBodyAsStream();\n      if(in !\u003d null) {\n        IOUtils.copyBytes(in, out, 4096, true);\n      }\n    } finally {\n      method.releaseConnection();\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
          "extendedDetails": {}
        }
      ]
    },
    "7bf2f9559f884827f2ea09412e4c20a456e972df": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3706. Fix circular redirect error in job-attempts page. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1295314 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/02/12 2:14 PM",
      "commitName": "7bf2f9559f884827f2ea09412e4c20a456e972df",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "29/02/12 7:19 AM",
      "commitNameOld": "defa1c5babdcb40eb2b868ee2564826a8fb68f3b",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 0.29,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,43 @@\n   private static void proxyLink(HttpServletRequest req, \n       HttpServletResponse resp, URI link,Cookie c) throws IOException {\n     org.apache.commons.httpclient.URI uri \u003d \n       new org.apache.commons.httpclient.URI(link.toString(), false);\n-    HttpClient client \u003d new HttpClient();\n+    HttpClientParams params \u003d new HttpClientParams();\n+    params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);\n+    params.setBooleanParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS, true);\n+    HttpClient client \u003d new HttpClient(params);\n     HttpMethod method \u003d new GetMethod(uri.getEscapedURI());\n \n     @SuppressWarnings(\"unchecked\")\n     Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n     while(names.hasMoreElements()) {\n       String name \u003d names.nextElement();\n       if(passThroughHeaders.contains(name)) {\n         String value \u003d req.getHeader(name);\n         LOG.debug(\"REQ HEADER: \"+name+\" : \"+value);\n         method.setRequestHeader(name, value);\n       }\n     }\n \n     String user \u003d req.getRemoteUser();\n     if(user !\u003d null \u0026\u0026 !user.isEmpty()) {\n       method.setRequestHeader(\"Cookie\",PROXY_USER_COOKIE_NAME+\"\u003d\"+\n           URLEncoder.encode(user, \"ASCII\"));\n     }\n     OutputStream out \u003d resp.getOutputStream();\n     try {\n       resp.setStatus(client.executeMethod(method));\n       for(Header header : method.getResponseHeaders()) {\n         resp.setHeader(header.getName(), header.getValue());\n       }\n       if(c !\u003d null) {\n         resp.addCookie(c);\n       }\n       InputStream in \u003d method.getResponseBodyAsStream();\n       if(in !\u003d null) {\n         IOUtils.copyBytes(in, out, 4096, true);\n       }\n     } finally {\n       method.releaseConnection();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void proxyLink(HttpServletRequest req, \n      HttpServletResponse resp, URI link,Cookie c) throws IOException {\n    org.apache.commons.httpclient.URI uri \u003d \n      new org.apache.commons.httpclient.URI(link.toString(), false);\n    HttpClientParams params \u003d new HttpClientParams();\n    params.setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);\n    params.setBooleanParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS, true);\n    HttpClient client \u003d new HttpClient(params);\n    HttpMethod method \u003d new GetMethod(uri.getEscapedURI());\n\n    @SuppressWarnings(\"unchecked\")\n    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n    while(names.hasMoreElements()) {\n      String name \u003d names.nextElement();\n      if(passThroughHeaders.contains(name)) {\n        String value \u003d req.getHeader(name);\n        LOG.debug(\"REQ HEADER: \"+name+\" : \"+value);\n        method.setRequestHeader(name, value);\n      }\n    }\n\n    String user \u003d req.getRemoteUser();\n    if(user !\u003d null \u0026\u0026 !user.isEmpty()) {\n      method.setRequestHeader(\"Cookie\",PROXY_USER_COOKIE_NAME+\"\u003d\"+\n          URLEncoder.encode(user, \"ASCII\"));\n    }\n    OutputStream out \u003d resp.getOutputStream();\n    try {\n      resp.setStatus(client.executeMethod(method));\n      for(Header header : method.getResponseHeaders()) {\n        resp.setHeader(header.getName(), header.getValue());\n      }\n      if(c !\u003d null) {\n        resp.addCookie(c);\n      }\n      InputStream in \u003d method.getResponseBodyAsStream();\n      if(in !\u003d null) {\n        IOUtils.copyBytes(in, out, 4096, true);\n      }\n    } finally {\n      method.releaseConnection();\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java",
      "extendedDetails": {}
    },
    "8aabd3d4e67cad8dc7e46f5339981135badc7421": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2858. Added a WebApp Proxy for applications. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189036 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/10/11 11:29 PM",
      "commitName": "8aabd3d4e67cad8dc7e46f5339981135badc7421",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,40 @@\n+  private static void proxyLink(HttpServletRequest req, \n+      HttpServletResponse resp, URI link,Cookie c) throws IOException {\n+    org.apache.commons.httpclient.URI uri \u003d \n+      new org.apache.commons.httpclient.URI(link.toString(), false);\n+    HttpClient client \u003d new HttpClient();\n+    HttpMethod method \u003d new GetMethod(uri.getEscapedURI());\n+\n+    @SuppressWarnings(\"unchecked\")\n+    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n+    while(names.hasMoreElements()) {\n+      String name \u003d names.nextElement();\n+      if(passThroughHeaders.contains(name)) {\n+        String value \u003d req.getHeader(name);\n+        LOG.debug(\"REQ HEADER: \"+name+\" : \"+value);\n+        method.setRequestHeader(name, value);\n+      }\n+    }\n+\n+    String user \u003d req.getRemoteUser();\n+    if(user !\u003d null \u0026\u0026 !user.isEmpty()) {\n+      method.setRequestHeader(\"Cookie\",PROXY_USER_COOKIE_NAME+\"\u003d\"+\n+          URLEncoder.encode(user, \"ASCII\"));\n+    }\n+    OutputStream out \u003d resp.getOutputStream();\n+    try {\n+      resp.setStatus(client.executeMethod(method));\n+      for(Header header : method.getResponseHeaders()) {\n+        resp.setHeader(header.getName(), header.getValue());\n+      }\n+      if(c !\u003d null) {\n+        resp.addCookie(c);\n+      }\n+      InputStream in \u003d method.getResponseBodyAsStream();\n+      if(in !\u003d null) {\n+        IOUtils.copyBytes(in, out, 4096, true);\n+      }\n+    } finally {\n+      method.releaseConnection();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void proxyLink(HttpServletRequest req, \n      HttpServletResponse resp, URI link,Cookie c) throws IOException {\n    org.apache.commons.httpclient.URI uri \u003d \n      new org.apache.commons.httpclient.URI(link.toString(), false);\n    HttpClient client \u003d new HttpClient();\n    HttpMethod method \u003d new GetMethod(uri.getEscapedURI());\n\n    @SuppressWarnings(\"unchecked\")\n    Enumeration\u003cString\u003e names \u003d req.getHeaderNames();\n    while(names.hasMoreElements()) {\n      String name \u003d names.nextElement();\n      if(passThroughHeaders.contains(name)) {\n        String value \u003d req.getHeader(name);\n        LOG.debug(\"REQ HEADER: \"+name+\" : \"+value);\n        method.setRequestHeader(name, value);\n      }\n    }\n\n    String user \u003d req.getRemoteUser();\n    if(user !\u003d null \u0026\u0026 !user.isEmpty()) {\n      method.setRequestHeader(\"Cookie\",PROXY_USER_COOKIE_NAME+\"\u003d\"+\n          URLEncoder.encode(user, \"ASCII\"));\n    }\n    OutputStream out \u003d resp.getOutputStream();\n    try {\n      resp.setStatus(client.executeMethod(method));\n      for(Header header : method.getResponseHeaders()) {\n        resp.setHeader(header.getName(), header.getValue());\n      }\n      if(c !\u003d null) {\n        resp.addCookie(c);\n      }\n      InputStream in \u003d method.getResponseBodyAsStream();\n      if(in !\u003d null) {\n        IOUtils.copyBytes(in, out, 4096, true);\n      }\n    } finally {\n      method.releaseConnection();\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServlet.java"
    }
  }
}