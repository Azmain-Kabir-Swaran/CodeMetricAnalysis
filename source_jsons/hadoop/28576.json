{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogWebService.java",
  "functionName": "getLogs",
  "functionId": "getLogs___req-HttpServletRequest(annotations-@Context)__res-HttpServletResponse(annotations-@Context)__containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID))__filename-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME))__format-String(annotations-@QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT))__size-String(annotations-@QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE))__nmId-String(annotations-@QueryParam(YarnWebServiceParams.NM_ID))__redirectedFromNode-boolean(annotations-@QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)-@DefaultValue(\"false\"))__clusterId-String(annotations-@QueryParam(YarnWebServiceParams.CLUSTER_ID))__manualRedirection-boolean(annotations-@QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)-@DefaultValue(\"false\"))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
  "functionStartLine": 276,
  "functionEndLine": 291,
  "numCommitsSeen": 9,
  "timeTaken": 3602,
  "changeHistory": [
    "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
    "dd2607e3ec3c349130e4143b0f67b23e11da420a",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "8d1981806feb8278966c02a9eff42d72541bb35e"
  ],
  "changeHistoryShort": {
    "ab3642955971dec1ce285f39cf0f02e6cc64b4b2": "Ymultichange(Yparameterchange,Ybodychange)",
    "dd2607e3ec3c349130e4143b0f67b23e11da420a": "Ybodychange",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "8d1981806feb8278966c02a9eff42d72541bb35e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab3642955971dec1ce285f39cf0f02e6cc64b4b2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-10215. Endpoint for obtaining direct URL for the logs. Contributed by Andras Gyori\n",
      "commitDate": "28/04/20 9:53 AM",
      "commitName": "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
      "commitAuthor": "Szilard Nemeth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-10215. Endpoint for obtaining direct URL for the logs. Contributed by Andras Gyori\n",
          "commitDate": "28/04/20 9:53 AM",
          "commitName": "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "06/02/20 3:25 AM",
          "commitNameOld": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 82.23,
          "commitsBetweenForRepo": 275,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,16 @@\n   public Response getLogs(@Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n       @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename,\n       @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format,\n       @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size,\n       @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n       @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n       @DefaultValue(\"false\") boolean redirectedFromNode,\n-      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n+      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId,\n+      @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)\n+      @DefaultValue(\"false\") boolean manualRedirection) {\n     initForReadableEndpoints(res);\n     return logServlet.getLogFile(req, containerIdStr, filename, format, size,\n-        nmId, redirectedFromNode, clusterId);\n+        nmId, redirectedFromNode, clusterId, manualRedirection);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getLogs(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename,\n      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format,\n      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId,\n      @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)\n      @DefaultValue(\"false\") boolean manualRedirection) {\n    initForReadableEndpoints(res);\n    return logServlet.getLogFile(req, containerIdStr, filename, format, size,\n        nmId, redirectedFromNode, clusterId, manualRedirection);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID)), filename-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME)), format-String(annotations-@QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT)), size-String(annotations-@QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE)), nmId-String(annotations-@QueryParam(YarnWebServiceParams.NM_ID)), redirectedFromNode-boolean(annotations-@QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)-@DefaultValue(\"false\")), clusterId-String(annotations-@QueryParam(YarnWebServiceParams.CLUSTER_ID))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID)), filename-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME)), format-String(annotations-@QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT)), size-String(annotations-@QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE)), nmId-String(annotations-@QueryParam(YarnWebServiceParams.NM_ID)), redirectedFromNode-boolean(annotations-@QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)-@DefaultValue(\"false\")), clusterId-String(annotations-@QueryParam(YarnWebServiceParams.CLUSTER_ID)), manualRedirection-boolean(annotations-@QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)-@DefaultValue(\"false\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-10215. Endpoint for obtaining direct URL for the logs. Contributed by Andras Gyori\n",
          "commitDate": "28/04/20 9:53 AM",
          "commitName": "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "06/02/20 3:25 AM",
          "commitNameOld": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 82.23,
          "commitsBetweenForRepo": 275,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,16 @@\n   public Response getLogs(@Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n       @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename,\n       @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format,\n       @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size,\n       @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n       @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n       @DefaultValue(\"false\") boolean redirectedFromNode,\n-      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n+      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId,\n+      @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)\n+      @DefaultValue(\"false\") boolean manualRedirection) {\n     initForReadableEndpoints(res);\n     return logServlet.getLogFile(req, containerIdStr, filename, format, size,\n-        nmId, redirectedFromNode, clusterId);\n+        nmId, redirectedFromNode, clusterId, manualRedirection);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getLogs(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename,\n      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format,\n      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId,\n      @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)\n      @DefaultValue(\"false\") boolean manualRedirection) {\n    initForReadableEndpoints(res);\n    return logServlet.getLogFile(req, containerIdStr, filename, format, size,\n        nmId, redirectedFromNode, clusterId, manualRedirection);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
          "extendedDetails": {}
        }
      ]
    },
    "dd2607e3ec3c349130e4143b0f67b23e11da420a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10026. Pull out common code pieces from ATS v1.5 and v2. Contributed by Adam Antal\n",
      "commitDate": "06/01/20 8:16 AM",
      "commitName": "dd2607e3ec3c349130e4143b0f67b23e11da420a",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 296.7,
      "commitsBetweenForRepo": 1914,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,93 +1,14 @@\n   public Response getLogs(@Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n       @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename,\n       @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format,\n       @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size,\n       @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n       @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n       @DefaultValue(\"false\") boolean redirectedFromNode,\n       @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n     initForReadableEndpoints(res);\n-    ContainerId containerId;\n-    try {\n-      containerId \u003d ContainerId.fromString(containerIdStr);\n-    } catch (IllegalArgumentException ex) {\n-      return LogWebServiceUtils.createBadResponse(Response.Status.NOT_FOUND,\n-          \"Invalid ContainerId: \" + containerIdStr);\n-    }\n-\n-    final long length \u003d LogWebServiceUtils.parseLongParam(size);\n-\n-    ApplicationId appId \u003d\n-        containerId.getApplicationAttemptId().getApplicationId();\n-    AppInfo appInfo;\n-    try {\n-      appInfo \u003d getApp(req, appId.toString(), clusterId);\n-    } catch (Exception ex) {\n-      // directly find logs from HDFS.\n-      return LogWebServiceUtils\n-          .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,\n-              filename, format, length, false);\n-    }\n-    String appOwner \u003d appInfo.getUser();\n-    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n-      // directly find logs from HDFS.\n-      return LogWebServiceUtils\n-          .sendStreamOutputResponse(factory, appId, appOwner, null,\n-              containerIdStr, filename, format, length, false);\n-    }\n-\n-    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n-      String nodeHttpAddress \u003d null;\n-      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n-        try {\n-          nodeHttpAddress \u003d\n-              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n-        } catch (Exception ex) {\n-          LOG.debug(\"{}\", ex);\n-        }\n-      }\n-      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n-        ContainerInfo containerInfo;\n-        try {\n-          containerInfo \u003d\n-              getContainer(req, appId.toString(), containerId.toString(),\n-                  clusterId);\n-        } catch (Exception ex) {\n-          // output the aggregated logs\n-          return LogWebServiceUtils\n-              .sendStreamOutputResponse(factory, appId, appOwner, null,\n-                  containerIdStr, filename, format, length, true);\n-        }\n-        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n-        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n-        // we would only get aggregated logs instead of re-directing the\n-        // request.\n-        // If this is the redirect request from NM, we should not re-direct the\n-        // request back. Simply output the aggregated logs.\n-        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n-            || redirectedFromNode) {\n-          // output the aggregated logs\n-          return LogWebServiceUtils\n-              .sendStreamOutputResponse(factory, appId, appOwner, null,\n-                  containerIdStr, filename, format, length, true);\n-        }\n-      }\n-      String uri \u003d \"/\" + containerId.toString() + \"/logs/\" + filename;\n-      String resURI \u003d JOINER.join(\n-          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n-          NM_DOWNLOAD_URI_STR, uri);\n-      String query \u003d req.getQueryString();\n-      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n-        resURI +\u003d \"?\" + query;\n-      }\n-      Response.ResponseBuilder response \u003d\n-          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n-      response.header(\"Location\", resURI);\n-      return response.build();\n-    } else {\n-      return LogWebServiceUtils.createBadResponse(Response.Status.NOT_FOUND,\n-          \"The application is not at Running or Finished State.\");\n-    }\n+    return logServlet.getLogFile(req, containerIdStr, filename, format, size,\n+        nmId, redirectedFromNode, clusterId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getLogs(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename,\n      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format,\n      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n    initForReadableEndpoints(res);\n    return logServlet.getLogFile(req, containerIdStr, filename, format, size,\n        nmId, redirectedFromNode, clusterId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
      "extendedDetails": {}
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "11/10/18 4:26 PM",
      "commitNameOld": "8d1981806feb8278966c02a9eff42d72541bb35e",
      "commitAuthorOld": "Vrushali C",
      "daysBetweenCommits": 155.0,
      "commitsBetweenForRepo": 1186,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,93 @@\n   public Response getLogs(@Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n       @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename,\n       @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format,\n       @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size,\n       @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n       @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n       @DefaultValue(\"false\") boolean redirectedFromNode,\n       @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n     initForReadableEndpoints(res);\n     ContainerId containerId;\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException ex) {\n       return LogWebServiceUtils.createBadResponse(Response.Status.NOT_FOUND,\n           \"Invalid ContainerId: \" + containerIdStr);\n     }\n \n     final long length \u003d LogWebServiceUtils.parseLongParam(size);\n \n     ApplicationId appId \u003d\n         containerId.getApplicationAttemptId().getApplicationId();\n     AppInfo appInfo;\n     try {\n       appInfo \u003d getApp(req, appId.toString(), clusterId);\n     } catch (Exception ex) {\n       // directly find logs from HDFS.\n       return LogWebServiceUtils\n           .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,\n               filename, format, length, false);\n     }\n     String appOwner \u003d appInfo.getUser();\n     if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n       // directly find logs from HDFS.\n       return LogWebServiceUtils\n           .sendStreamOutputResponse(factory, appId, appOwner, null,\n               containerIdStr, filename, format, length, false);\n     }\n \n     if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n       String nodeHttpAddress \u003d null;\n       if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n         try {\n           nodeHttpAddress \u003d\n               LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n         } catch (Exception ex) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(ex.getMessage());\n-          }\n+          LOG.debug(\"{}\", ex);\n         }\n       }\n       if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n         ContainerInfo containerInfo;\n         try {\n           containerInfo \u003d\n               getContainer(req, appId.toString(), containerId.toString(),\n                   clusterId);\n         } catch (Exception ex) {\n           // output the aggregated logs\n           return LogWebServiceUtils\n               .sendStreamOutputResponse(factory, appId, appOwner, null,\n                   containerIdStr, filename, format, length, true);\n         }\n         nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n         // make sure nodeHttpAddress is not null and not empty. Otherwise,\n         // we would only get aggregated logs instead of re-directing the\n         // request.\n         // If this is the redirect request from NM, we should not re-direct the\n         // request back. Simply output the aggregated logs.\n         if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n             || redirectedFromNode) {\n           // output the aggregated logs\n           return LogWebServiceUtils\n               .sendStreamOutputResponse(factory, appId, appOwner, null,\n                   containerIdStr, filename, format, length, true);\n         }\n       }\n       String uri \u003d \"/\" + containerId.toString() + \"/logs/\" + filename;\n       String resURI \u003d JOINER.join(\n           LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n           NM_DOWNLOAD_URI_STR, uri);\n       String query \u003d req.getQueryString();\n       if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n         resURI +\u003d \"?\" + query;\n       }\n       Response.ResponseBuilder response \u003d\n           Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n       response.header(\"Location\", resURI);\n       return response.build();\n     } else {\n       return LogWebServiceUtils.createBadResponse(Response.Status.NOT_FOUND,\n           \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getLogs(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename,\n      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format,\n      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n    initForReadableEndpoints(res);\n    ContainerId containerId;\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException ex) {\n      return LogWebServiceUtils.createBadResponse(Response.Status.NOT_FOUND,\n          \"Invalid ContainerId: \" + containerIdStr);\n    }\n\n    final long length \u003d LogWebServiceUtils.parseLongParam(size);\n\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d getApp(req, appId.toString(), clusterId);\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,\n              filename, format, length, false);\n    }\n    String appOwner \u003d appInfo.getUser();\n    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .sendStreamOutputResponse(factory, appId, appOwner, null,\n              containerIdStr, filename, format, length, false);\n    }\n\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d\n              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n        } catch (Exception ex) {\n          LOG.debug(\"{}\", ex);\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d\n              getContainer(req, appId.toString(), containerId.toString(),\n                  clusterId);\n        } catch (Exception ex) {\n          // output the aggregated logs\n          return LogWebServiceUtils\n              .sendStreamOutputResponse(factory, appId, appOwner, null,\n                  containerIdStr, filename, format, length, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get aggregated logs instead of re-directing the\n        // request.\n        // If this is the redirect request from NM, we should not re-direct the\n        // request back. Simply output the aggregated logs.\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirectedFromNode) {\n          // output the aggregated logs\n          return LogWebServiceUtils\n              .sendStreamOutputResponse(factory, appId, appOwner, null,\n                  containerIdStr, filename, format, length, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs/\" + filename;\n      String resURI \u003d JOINER.join(\n          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      Response.ResponseBuilder response \u003d\n          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      return LogWebServiceUtils.createBadResponse(Response.Status.NOT_FOUND,\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
      "extendedDetails": {}
    },
    "8d1981806feb8278966c02a9eff42d72541bb35e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5742 Serve aggregated logs of historical apps from timeline service. Contributed by Rohith Sharma KS\n",
      "commitDate": "11/10/18 4:26 PM",
      "commitName": "8d1981806feb8278966c02a9eff42d72541bb35e",
      "commitAuthor": "Vrushali C",
      "diff": "@@ -0,0 +1,95 @@\n+  public Response getLogs(@Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n+      @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename,\n+      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format,\n+      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size,\n+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n+      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n+      @DefaultValue(\"false\") boolean redirectedFromNode,\n+      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n+    initForReadableEndpoints(res);\n+    ContainerId containerId;\n+    try {\n+      containerId \u003d ContainerId.fromString(containerIdStr);\n+    } catch (IllegalArgumentException ex) {\n+      return LogWebServiceUtils.createBadResponse(Response.Status.NOT_FOUND,\n+          \"Invalid ContainerId: \" + containerIdStr);\n+    }\n+\n+    final long length \u003d LogWebServiceUtils.parseLongParam(size);\n+\n+    ApplicationId appId \u003d\n+        containerId.getApplicationAttemptId().getApplicationId();\n+    AppInfo appInfo;\n+    try {\n+      appInfo \u003d getApp(req, appId.toString(), clusterId);\n+    } catch (Exception ex) {\n+      // directly find logs from HDFS.\n+      return LogWebServiceUtils\n+          .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,\n+              filename, format, length, false);\n+    }\n+    String appOwner \u003d appInfo.getUser();\n+    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n+      // directly find logs from HDFS.\n+      return LogWebServiceUtils\n+          .sendStreamOutputResponse(factory, appId, appOwner, null,\n+              containerIdStr, filename, format, length, false);\n+    }\n+\n+    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n+      String nodeHttpAddress \u003d null;\n+      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n+        try {\n+          nodeHttpAddress \u003d\n+              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n+        } catch (Exception ex) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(ex.getMessage());\n+          }\n+        }\n+      }\n+      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+        ContainerInfo containerInfo;\n+        try {\n+          containerInfo \u003d\n+              getContainer(req, appId.toString(), containerId.toString(),\n+                  clusterId);\n+        } catch (Exception ex) {\n+          // output the aggregated logs\n+          return LogWebServiceUtils\n+              .sendStreamOutputResponse(factory, appId, appOwner, null,\n+                  containerIdStr, filename, format, length, true);\n+        }\n+        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n+        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n+        // we would only get aggregated logs instead of re-directing the\n+        // request.\n+        // If this is the redirect request from NM, we should not re-direct the\n+        // request back. Simply output the aggregated logs.\n+        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n+            || redirectedFromNode) {\n+          // output the aggregated logs\n+          return LogWebServiceUtils\n+              .sendStreamOutputResponse(factory, appId, appOwner, null,\n+                  containerIdStr, filename, format, length, true);\n+        }\n+      }\n+      String uri \u003d \"/\" + containerId.toString() + \"/logs/\" + filename;\n+      String resURI \u003d JOINER.join(\n+          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n+          NM_DOWNLOAD_URI_STR, uri);\n+      String query \u003d req.getQueryString();\n+      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n+        resURI +\u003d \"?\" + query;\n+      }\n+      Response.ResponseBuilder response \u003d\n+          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n+      response.header(\"Location\", resURI);\n+      return response.build();\n+    } else {\n+      return LogWebServiceUtils.createBadResponse(Response.Status.NOT_FOUND,\n+          \"The application is not at Running or Finished State.\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getLogs(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename,\n      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format,\n      @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n    initForReadableEndpoints(res);\n    ContainerId containerId;\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException ex) {\n      return LogWebServiceUtils.createBadResponse(Response.Status.NOT_FOUND,\n          \"Invalid ContainerId: \" + containerIdStr);\n    }\n\n    final long length \u003d LogWebServiceUtils.parseLongParam(size);\n\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d getApp(req, appId.toString(), clusterId);\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,\n              filename, format, length, false);\n    }\n    String appOwner \u003d appInfo.getUser();\n    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .sendStreamOutputResponse(factory, appId, appOwner, null,\n              containerIdStr, filename, format, length, false);\n    }\n\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d\n              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n        } catch (Exception ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(ex.getMessage());\n          }\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d\n              getContainer(req, appId.toString(), containerId.toString(),\n                  clusterId);\n        } catch (Exception ex) {\n          // output the aggregated logs\n          return LogWebServiceUtils\n              .sendStreamOutputResponse(factory, appId, appOwner, null,\n                  containerIdStr, filename, format, length, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get aggregated logs instead of re-directing the\n        // request.\n        // If this is the redirect request from NM, we should not re-direct the\n        // request back. Simply output the aggregated logs.\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirectedFromNode) {\n          // output the aggregated logs\n          return LogWebServiceUtils\n              .sendStreamOutputResponse(factory, appId, appOwner, null,\n                  containerIdStr, filename, format, length, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs/\" + filename;\n      String resURI \u003d JOINER.join(\n          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      Response.ResponseBuilder response \u003d\n          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      return LogWebServiceUtils.createBadResponse(Response.Status.NOT_FOUND,\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java"
    }
  }
}