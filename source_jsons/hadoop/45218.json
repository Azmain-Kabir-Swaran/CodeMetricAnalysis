{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "YarnClientImpl.java",
  "functionName": "shellToContainer",
  "functionId": "shellToContainer___containerId-ContainerId__command-ShellContainerCommand",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
  "functionStartLine": 1086,
  "functionEndLine": 1134,
  "numCommitsSeen": 70,
  "timeTaken": 2538,
  "changeHistory": [
    "2e544dc921afeaa02e731cb273ac7776eec6e49d",
    "ca90b2480ecb9a627914e7a463b6293024ad6e4d",
    "49824ed260d31350d9b836a4c31319e2b3501dd0",
    "27ffec7ba77ba3d0b88b97b34aca5356e2e258f4"
  ],
  "changeHistoryShort": {
    "2e544dc921afeaa02e731cb273ac7776eec6e49d": "Ybodychange",
    "ca90b2480ecb9a627914e7a463b6293024ad6e4d": "Ybodychange",
    "49824ed260d31350d9b836a4c31319e2b3501dd0": "Ybodychange",
    "27ffec7ba77ba3d0b88b97b34aca5356e2e258f4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2e544dc921afeaa02e731cb273ac7776eec6e49d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9129. Ensure flush after printing to log plus additional cleanup. Contributed by Eric Yang\n",
      "commitDate": "19/12/18 4:45 PM",
      "commitName": "2e544dc921afeaa02e731cb273ac7776eec6e49d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "14/12/18 2:08 PM",
      "commitNameOld": "ca90b2480ecb9a627914e7a463b6293024ad6e4d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 5.11,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,49 @@\n   public void shellToContainer(ContainerId containerId,\n       ShellContainerCommand command) throws IOException {\n     try {\n       GetContainerReportRequest request \u003d Records\n           .newRecord(GetContainerReportRequest.class);\n       request.setContainerId(containerId);\n       GetContainerReportResponse response \u003d rmClient\n           .getContainerReport(request);\n       URI nodeHttpAddress \u003d new URI(response.getContainerReport()\n           .getNodeHttpAddress());\n       String host \u003d nodeHttpAddress.getHost();\n       int port \u003d nodeHttpAddress.getPort();\n       String scheme \u003d nodeHttpAddress.getScheme();\n       String protocol \u003d \"ws://\";\n       if (scheme.equals(\"https\")) {\n         protocol \u003d \"wss://\";\n       }\n       WebSocketClient client \u003d new WebSocketClient();\n       URI uri \u003d URI.create(protocol + host + \":\" + port + \"/container/\" +\n           containerId + \"/\" + command);\n       if (!UserGroupInformation.isSecurityEnabled()) {\n         uri \u003d URI.create(protocol + host + \":\" + port + \"/container/\" +\n             containerId + \"/\" + command + \"?user.name\u003d\" +\n             System.getProperty(\"user.name\"));\n       }\n       try {\n         client.start();\n         // The socket that receives events\n         ContainerShellWebSocket socket \u003d new ContainerShellWebSocket();\n         ClientUpgradeRequest upgradeRequest \u003d new ClientUpgradeRequest();\n         if (UserGroupInformation.isSecurityEnabled()) {\n           String challenge \u003d YarnClientUtils.generateToken(host);\n           upgradeRequest.setHeader(\"Authorization\", \"Negotiate \" + challenge);\n         }\n         // Attempt Connect\n         Future\u003cSession\u003e fut \u003d client.connect(socket, uri, upgradeRequest);\n-        // Wait for Connect\n         Session session \u003d fut.get();\n-        // Send a message\n-        session.getRemote().sendString(\"stty -echo\");\n-        session.getRemote().sendString(\"\\r\");\n-        session.getRemote().flush();\n-        socket.run();\n+        if (session.isOpen()) {\n+          socket.run();\n+        }\n       } finally {\n         client.stop();\n       }\n     } catch (WebSocketException e) {\n       LOG.debug(\"Websocket exception: \" + e.getMessage());\n     } catch (Throwable t) {\n       LOG.error(\"Fail to shell to container: \" + t.getMessage());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shellToContainer(ContainerId containerId,\n      ShellContainerCommand command) throws IOException {\n    try {\n      GetContainerReportRequest request \u003d Records\n          .newRecord(GetContainerReportRequest.class);\n      request.setContainerId(containerId);\n      GetContainerReportResponse response \u003d rmClient\n          .getContainerReport(request);\n      URI nodeHttpAddress \u003d new URI(response.getContainerReport()\n          .getNodeHttpAddress());\n      String host \u003d nodeHttpAddress.getHost();\n      int port \u003d nodeHttpAddress.getPort();\n      String scheme \u003d nodeHttpAddress.getScheme();\n      String protocol \u003d \"ws://\";\n      if (scheme.equals(\"https\")) {\n        protocol \u003d \"wss://\";\n      }\n      WebSocketClient client \u003d new WebSocketClient();\n      URI uri \u003d URI.create(protocol + host + \":\" + port + \"/container/\" +\n          containerId + \"/\" + command);\n      if (!UserGroupInformation.isSecurityEnabled()) {\n        uri \u003d URI.create(protocol + host + \":\" + port + \"/container/\" +\n            containerId + \"/\" + command + \"?user.name\u003d\" +\n            System.getProperty(\"user.name\"));\n      }\n      try {\n        client.start();\n        // The socket that receives events\n        ContainerShellWebSocket socket \u003d new ContainerShellWebSocket();\n        ClientUpgradeRequest upgradeRequest \u003d new ClientUpgradeRequest();\n        if (UserGroupInformation.isSecurityEnabled()) {\n          String challenge \u003d YarnClientUtils.generateToken(host);\n          upgradeRequest.setHeader(\"Authorization\", \"Negotiate \" + challenge);\n        }\n        // Attempt Connect\n        Future\u003cSession\u003e fut \u003d client.connect(socket, uri, upgradeRequest);\n        Session session \u003d fut.get();\n        if (session.isOpen()) {\n          socket.run();\n        }\n      } finally {\n        client.stop();\n      }\n    } catch (WebSocketException e) {\n      LOG.debug(\"Websocket exception: \" + e.getMessage());\n    } catch (Throwable t) {\n      LOG.error(\"Fail to shell to container: \" + t.getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "ca90b2480ecb9a627914e7a463b6293024ad6e4d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9032. Support sh shell for interactive container shell at command line. Contributed by Eric Yang\n",
      "commitDate": "14/12/18 2:08 PM",
      "commitName": "ca90b2480ecb9a627914e7a463b6293024ad6e4d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "20/11/18 11:12 AM",
      "commitNameOld": "49824ed260d31350d9b836a4c31319e2b3501dd0",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 24.12,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,52 @@\n   public void shellToContainer(ContainerId containerId,\n       ShellContainerCommand command) throws IOException {\n     try {\n       GetContainerReportRequest request \u003d Records\n           .newRecord(GetContainerReportRequest.class);\n       request.setContainerId(containerId);\n       GetContainerReportResponse response \u003d rmClient\n           .getContainerReport(request);\n       URI nodeHttpAddress \u003d new URI(response.getContainerReport()\n           .getNodeHttpAddress());\n       String host \u003d nodeHttpAddress.getHost();\n       int port \u003d nodeHttpAddress.getPort();\n       String scheme \u003d nodeHttpAddress.getScheme();\n       String protocol \u003d \"ws://\";\n       if (scheme.equals(\"https\")) {\n         protocol \u003d \"wss://\";\n       }\n       WebSocketClient client \u003d new WebSocketClient();\n       URI uri \u003d URI.create(protocol + host + \":\" + port + \"/container/\" +\n-          containerId);\n+          containerId + \"/\" + command);\n       if (!UserGroupInformation.isSecurityEnabled()) {\n         uri \u003d URI.create(protocol + host + \":\" + port + \"/container/\" +\n-            containerId + \"?user.name\u003d\" + System.getProperty(\"user.name\"));\n+            containerId + \"/\" + command + \"?user.name\u003d\" +\n+            System.getProperty(\"user.name\"));\n       }\n       try {\n         client.start();\n         // The socket that receives events\n         ContainerShellWebSocket socket \u003d new ContainerShellWebSocket();\n         ClientUpgradeRequest upgradeRequest \u003d new ClientUpgradeRequest();\n         if (UserGroupInformation.isSecurityEnabled()) {\n           String challenge \u003d YarnClientUtils.generateToken(host);\n           upgradeRequest.setHeader(\"Authorization\", \"Negotiate \" + challenge);\n         }\n         // Attempt Connect\n         Future\u003cSession\u003e fut \u003d client.connect(socket, uri, upgradeRequest);\n         // Wait for Connect\n         Session session \u003d fut.get();\n         // Send a message\n         session.getRemote().sendString(\"stty -echo\");\n         session.getRemote().sendString(\"\\r\");\n         session.getRemote().flush();\n         socket.run();\n       } finally {\n         client.stop();\n       }\n     } catch (WebSocketException e) {\n       LOG.debug(\"Websocket exception: \" + e.getMessage());\n     } catch (Throwable t) {\n       LOG.error(\"Fail to shell to container: \" + t.getMessage());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shellToContainer(ContainerId containerId,\n      ShellContainerCommand command) throws IOException {\n    try {\n      GetContainerReportRequest request \u003d Records\n          .newRecord(GetContainerReportRequest.class);\n      request.setContainerId(containerId);\n      GetContainerReportResponse response \u003d rmClient\n          .getContainerReport(request);\n      URI nodeHttpAddress \u003d new URI(response.getContainerReport()\n          .getNodeHttpAddress());\n      String host \u003d nodeHttpAddress.getHost();\n      int port \u003d nodeHttpAddress.getPort();\n      String scheme \u003d nodeHttpAddress.getScheme();\n      String protocol \u003d \"ws://\";\n      if (scheme.equals(\"https\")) {\n        protocol \u003d \"wss://\";\n      }\n      WebSocketClient client \u003d new WebSocketClient();\n      URI uri \u003d URI.create(protocol + host + \":\" + port + \"/container/\" +\n          containerId + \"/\" + command);\n      if (!UserGroupInformation.isSecurityEnabled()) {\n        uri \u003d URI.create(protocol + host + \":\" + port + \"/container/\" +\n            containerId + \"/\" + command + \"?user.name\u003d\" +\n            System.getProperty(\"user.name\"));\n      }\n      try {\n        client.start();\n        // The socket that receives events\n        ContainerShellWebSocket socket \u003d new ContainerShellWebSocket();\n        ClientUpgradeRequest upgradeRequest \u003d new ClientUpgradeRequest();\n        if (UserGroupInformation.isSecurityEnabled()) {\n          String challenge \u003d YarnClientUtils.generateToken(host);\n          upgradeRequest.setHeader(\"Authorization\", \"Negotiate \" + challenge);\n        }\n        // Attempt Connect\n        Future\u003cSession\u003e fut \u003d client.connect(socket, uri, upgradeRequest);\n        // Wait for Connect\n        Session session \u003d fut.get();\n        // Send a message\n        session.getRemote().sendString(\"stty -echo\");\n        session.getRemote().sendString(\"\\r\");\n        session.getRemote().flush();\n        socket.run();\n      } finally {\n        client.stop();\n      }\n    } catch (WebSocketException e) {\n      LOG.debug(\"Websocket exception: \" + e.getMessage());\n    } catch (Throwable t) {\n      LOG.error(\"Fail to shell to container: \" + t.getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "49824ed260d31350d9b836a4c31319e2b3501dd0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8838. Check that container user is same as websocket user for interactive shell. Contributed by Eric Yang\n",
      "commitDate": "20/11/18 11:12 AM",
      "commitName": "49824ed260d31350d9b836a4c31319e2b3501dd0",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "19/11/18 5:59 PM",
      "commitNameOld": "27ffec7ba77ba3d0b88b97b34aca5356e2e258f4",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.72,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,51 @@\n   public void shellToContainer(ContainerId containerId,\n       ShellContainerCommand command) throws IOException {\n     try {\n       GetContainerReportRequest request \u003d Records\n           .newRecord(GetContainerReportRequest.class);\n       request.setContainerId(containerId);\n       GetContainerReportResponse response \u003d rmClient\n           .getContainerReport(request);\n       URI nodeHttpAddress \u003d new URI(response.getContainerReport()\n           .getNodeHttpAddress());\n       String host \u003d nodeHttpAddress.getHost();\n       int port \u003d nodeHttpAddress.getPort();\n       String scheme \u003d nodeHttpAddress.getScheme();\n       String protocol \u003d \"ws://\";\n       if (scheme.equals(\"https\")) {\n         protocol \u003d \"wss://\";\n       }\n       WebSocketClient client \u003d new WebSocketClient();\n       URI uri \u003d URI.create(protocol + host + \":\" + port + \"/container/\" +\n           containerId);\n+      if (!UserGroupInformation.isSecurityEnabled()) {\n+        uri \u003d URI.create(protocol + host + \":\" + port + \"/container/\" +\n+            containerId + \"?user.name\u003d\" + System.getProperty(\"user.name\"));\n+      }\n       try {\n         client.start();\n         // The socket that receives events\n         ContainerShellWebSocket socket \u003d new ContainerShellWebSocket();\n         ClientUpgradeRequest upgradeRequest \u003d new ClientUpgradeRequest();\n         if (UserGroupInformation.isSecurityEnabled()) {\n           String challenge \u003d YarnClientUtils.generateToken(host);\n           upgradeRequest.setHeader(\"Authorization\", \"Negotiate \" + challenge);\n         }\n         // Attempt Connect\n         Future\u003cSession\u003e fut \u003d client.connect(socket, uri, upgradeRequest);\n         // Wait for Connect\n         Session session \u003d fut.get();\n         // Send a message\n         session.getRemote().sendString(\"stty -echo\");\n         session.getRemote().sendString(\"\\r\");\n         session.getRemote().flush();\n         socket.run();\n       } finally {\n         client.stop();\n       }\n     } catch (WebSocketException e) {\n       LOG.debug(\"Websocket exception: \" + e.getMessage());\n     } catch (Throwable t) {\n       LOG.error(\"Fail to shell to container: \" + t.getMessage());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shellToContainer(ContainerId containerId,\n      ShellContainerCommand command) throws IOException {\n    try {\n      GetContainerReportRequest request \u003d Records\n          .newRecord(GetContainerReportRequest.class);\n      request.setContainerId(containerId);\n      GetContainerReportResponse response \u003d rmClient\n          .getContainerReport(request);\n      URI nodeHttpAddress \u003d new URI(response.getContainerReport()\n          .getNodeHttpAddress());\n      String host \u003d nodeHttpAddress.getHost();\n      int port \u003d nodeHttpAddress.getPort();\n      String scheme \u003d nodeHttpAddress.getScheme();\n      String protocol \u003d \"ws://\";\n      if (scheme.equals(\"https\")) {\n        protocol \u003d \"wss://\";\n      }\n      WebSocketClient client \u003d new WebSocketClient();\n      URI uri \u003d URI.create(protocol + host + \":\" + port + \"/container/\" +\n          containerId);\n      if (!UserGroupInformation.isSecurityEnabled()) {\n        uri \u003d URI.create(protocol + host + \":\" + port + \"/container/\" +\n            containerId + \"?user.name\u003d\" + System.getProperty(\"user.name\"));\n      }\n      try {\n        client.start();\n        // The socket that receives events\n        ContainerShellWebSocket socket \u003d new ContainerShellWebSocket();\n        ClientUpgradeRequest upgradeRequest \u003d new ClientUpgradeRequest();\n        if (UserGroupInformation.isSecurityEnabled()) {\n          String challenge \u003d YarnClientUtils.generateToken(host);\n          upgradeRequest.setHeader(\"Authorization\", \"Negotiate \" + challenge);\n        }\n        // Attempt Connect\n        Future\u003cSession\u003e fut \u003d client.connect(socket, uri, upgradeRequest);\n        // Wait for Connect\n        Session session \u003d fut.get();\n        // Send a message\n        session.getRemote().sendString(\"stty -echo\");\n        session.getRemote().sendString(\"\\r\");\n        session.getRemote().flush();\n        socket.run();\n      } finally {\n        client.stop();\n      }\n    } catch (WebSocketException e) {\n      LOG.debug(\"Websocket exception: \" + e.getMessage());\n    } catch (Throwable t) {\n      LOG.error(\"Fail to shell to container: \" + t.getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "27ffec7ba77ba3d0b88b97b34aca5356e2e258f4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8778. Add command line interface to invoke interactive docker shell. Contributed by Eric Yang\n",
      "commitDate": "19/11/18 5:59 PM",
      "commitName": "27ffec7ba77ba3d0b88b97b34aca5356e2e258f4",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,47 @@\n+  public void shellToContainer(ContainerId containerId,\n+      ShellContainerCommand command) throws IOException {\n+    try {\n+      GetContainerReportRequest request \u003d Records\n+          .newRecord(GetContainerReportRequest.class);\n+      request.setContainerId(containerId);\n+      GetContainerReportResponse response \u003d rmClient\n+          .getContainerReport(request);\n+      URI nodeHttpAddress \u003d new URI(response.getContainerReport()\n+          .getNodeHttpAddress());\n+      String host \u003d nodeHttpAddress.getHost();\n+      int port \u003d nodeHttpAddress.getPort();\n+      String scheme \u003d nodeHttpAddress.getScheme();\n+      String protocol \u003d \"ws://\";\n+      if (scheme.equals(\"https\")) {\n+        protocol \u003d \"wss://\";\n+      }\n+      WebSocketClient client \u003d new WebSocketClient();\n+      URI uri \u003d URI.create(protocol + host + \":\" + port + \"/container/\" +\n+          containerId);\n+      try {\n+        client.start();\n+        // The socket that receives events\n+        ContainerShellWebSocket socket \u003d new ContainerShellWebSocket();\n+        ClientUpgradeRequest upgradeRequest \u003d new ClientUpgradeRequest();\n+        if (UserGroupInformation.isSecurityEnabled()) {\n+          String challenge \u003d YarnClientUtils.generateToken(host);\n+          upgradeRequest.setHeader(\"Authorization\", \"Negotiate \" + challenge);\n+        }\n+        // Attempt Connect\n+        Future\u003cSession\u003e fut \u003d client.connect(socket, uri, upgradeRequest);\n+        // Wait for Connect\n+        Session session \u003d fut.get();\n+        // Send a message\n+        session.getRemote().sendString(\"stty -echo\");\n+        session.getRemote().sendString(\"\\r\");\n+        session.getRemote().flush();\n+        socket.run();\n+      } finally {\n+        client.stop();\n+      }\n+    } catch (WebSocketException e) {\n+      LOG.debug(\"Websocket exception: \" + e.getMessage());\n+    } catch (Throwable t) {\n+      LOG.error(\"Fail to shell to container: \" + t.getMessage());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void shellToContainer(ContainerId containerId,\n      ShellContainerCommand command) throws IOException {\n    try {\n      GetContainerReportRequest request \u003d Records\n          .newRecord(GetContainerReportRequest.class);\n      request.setContainerId(containerId);\n      GetContainerReportResponse response \u003d rmClient\n          .getContainerReport(request);\n      URI nodeHttpAddress \u003d new URI(response.getContainerReport()\n          .getNodeHttpAddress());\n      String host \u003d nodeHttpAddress.getHost();\n      int port \u003d nodeHttpAddress.getPort();\n      String scheme \u003d nodeHttpAddress.getScheme();\n      String protocol \u003d \"ws://\";\n      if (scheme.equals(\"https\")) {\n        protocol \u003d \"wss://\";\n      }\n      WebSocketClient client \u003d new WebSocketClient();\n      URI uri \u003d URI.create(protocol + host + \":\" + port + \"/container/\" +\n          containerId);\n      try {\n        client.start();\n        // The socket that receives events\n        ContainerShellWebSocket socket \u003d new ContainerShellWebSocket();\n        ClientUpgradeRequest upgradeRequest \u003d new ClientUpgradeRequest();\n        if (UserGroupInformation.isSecurityEnabled()) {\n          String challenge \u003d YarnClientUtils.generateToken(host);\n          upgradeRequest.setHeader(\"Authorization\", \"Negotiate \" + challenge);\n        }\n        // Attempt Connect\n        Future\u003cSession\u003e fut \u003d client.connect(socket, uri, upgradeRequest);\n        // Wait for Connect\n        Session session \u003d fut.get();\n        // Send a message\n        session.getRemote().sendString(\"stty -echo\");\n        session.getRemote().sendString(\"\\r\");\n        session.getRemote().flush();\n        socket.run();\n      } finally {\n        client.stop();\n      }\n    } catch (WebSocketException e) {\n      LOG.debug(\"Websocket exception: \" + e.getMessage());\n    } catch (Throwable t) {\n      LOG.error(\"Fail to shell to container: \" + t.getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java"
    }
  }
}