{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HHXORErasureEncodingStep.java",
  "functionName": "performCoding",
  "functionId": "performCoding___inputs-ByteBuffer[]__outputs-ByteBuffer[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/coder/HHXORErasureEncodingStep.java",
  "functionStartLine": 67,
  "functionEndLine": 99,
  "numCommitsSeen": 3,
  "timeTaken": 924,
  "changeHistory": [
    "31ebccc96238136560f4210bdf6766fe18e0650c",
    "1bb31fb22e6f8e6df8e9ff4e94adf20308b4c743"
  ],
  "changeHistoryShort": {
    "31ebccc96238136560f4210bdf6766fe18e0650c": "Yexceptionschange",
    "1bb31fb22e6f8e6df8e9ff4e94adf20308b4c743": "Yintroduced"
  },
  "changeHistoryDetails": {
    "31ebccc96238136560f4210bdf6766fe18e0650c": {
      "type": "Yexceptionschange",
      "commitMessage": "HDFS-12613. Native EC coder should implement release() as idempotent function. (Lei (Eddy) Xu)\n",
      "commitDate": "16/10/17 7:44 PM",
      "commitName": "31ebccc96238136560f4210bdf6766fe18e0650c",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "17/10/16 11:02 PM",
      "commitNameOld": "c023c748869063fb67d14ea996569c42578d1cea",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 363.86,
      "commitsBetweenForRepo": 2347,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n-  private void performCoding(ByteBuffer[] inputs, ByteBuffer[] outputs) {\n+  private void performCoding(ByteBuffer[] inputs, ByteBuffer[] outputs)\n+      throws IOException {\n     final int numDataUnits \u003d this.rsRawEncoder.getNumDataUnits();\n     final int numParityUnits \u003d this.rsRawEncoder.getNumParityUnits();\n     final int subSPacketSize \u003d getSubPacketSize();\n \n     // inputs length \u003d numDataUnits * subPacketSize\n     if (inputs.length !\u003d numDataUnits * subSPacketSize) {\n       throw new IllegalArgumentException(\"Invalid inputs length\");\n     }\n \n     if (outputs.length !\u003d numParityUnits * subSPacketSize) {\n       throw new IllegalArgumentException(\"Invalid outputs length\");\n     }\n \n     // first numDataUnits length is first sub-stripe,\n     // second numDataUnits length is second sub-stripe\n     ByteBuffer[][] hhInputs \u003d new ByteBuffer[subSPacketSize][numDataUnits];\n     for (int i \u003d 0; i \u003c subSPacketSize; ++i) {\n       for (int j \u003d 0; j \u003c numDataUnits; ++j) {\n         hhInputs[i][j] \u003d inputs[i * numDataUnits + j];\n       }\n     }\n \n     ByteBuffer[][] hhOutputs \u003d new ByteBuffer[subSPacketSize][numParityUnits];\n     for (int i \u003d 0; i \u003c subSPacketSize; ++i) {\n       for (int j \u003d 0; j \u003c numParityUnits; ++j) {\n         hhOutputs[i][j] \u003d outputs[i * numParityUnits + j];\n       }\n     }\n \n     doEncode(hhInputs, hhOutputs);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void performCoding(ByteBuffer[] inputs, ByteBuffer[] outputs)\n      throws IOException {\n    final int numDataUnits \u003d this.rsRawEncoder.getNumDataUnits();\n    final int numParityUnits \u003d this.rsRawEncoder.getNumParityUnits();\n    final int subSPacketSize \u003d getSubPacketSize();\n\n    // inputs length \u003d numDataUnits * subPacketSize\n    if (inputs.length !\u003d numDataUnits * subSPacketSize) {\n      throw new IllegalArgumentException(\"Invalid inputs length\");\n    }\n\n    if (outputs.length !\u003d numParityUnits * subSPacketSize) {\n      throw new IllegalArgumentException(\"Invalid outputs length\");\n    }\n\n    // first numDataUnits length is first sub-stripe,\n    // second numDataUnits length is second sub-stripe\n    ByteBuffer[][] hhInputs \u003d new ByteBuffer[subSPacketSize][numDataUnits];\n    for (int i \u003d 0; i \u003c subSPacketSize; ++i) {\n      for (int j \u003d 0; j \u003c numDataUnits; ++j) {\n        hhInputs[i][j] \u003d inputs[i * numDataUnits + j];\n      }\n    }\n\n    ByteBuffer[][] hhOutputs \u003d new ByteBuffer[subSPacketSize][numParityUnits];\n    for (int i \u003d 0; i \u003c subSPacketSize; ++i) {\n      for (int j \u003d 0; j \u003c numParityUnits; ++j) {\n        hhOutputs[i][j] \u003d outputs[i * numParityUnits + j];\n      }\n    }\n\n    doEncode(hhInputs, hhOutputs);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/coder/HHXORErasureEncodingStep.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[IOException]"
      }
    },
    "1bb31fb22e6f8e6df8e9ff4e94adf20308b4c743": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11828. Implement the Hitchhiker erasure coding algorithm. Contributed by Jack Liu Quan.\n\nChange-Id: If43475ccc2574df60949c947af562722db076251\n",
      "commitDate": "21/01/16 10:30 AM",
      "commitName": "1bb31fb22e6f8e6df8e9ff4e94adf20308b4c743",
      "commitAuthor": "Zhe Zhang",
      "diff": "@@ -0,0 +1,32 @@\n+  private void performCoding(ByteBuffer[] inputs, ByteBuffer[] outputs) {\n+    final int numDataUnits \u003d this.rsRawEncoder.getNumDataUnits();\n+    final int numParityUnits \u003d this.rsRawEncoder.getNumParityUnits();\n+    final int subSPacketSize \u003d getSubPacketSize();\n+\n+    // inputs length \u003d numDataUnits * subPacketSize\n+    if (inputs.length !\u003d numDataUnits * subSPacketSize) {\n+      throw new IllegalArgumentException(\"Invalid inputs length\");\n+    }\n+\n+    if (outputs.length !\u003d numParityUnits * subSPacketSize) {\n+      throw new IllegalArgumentException(\"Invalid outputs length\");\n+    }\n+\n+    // first numDataUnits length is first sub-stripe,\n+    // second numDataUnits length is second sub-stripe\n+    ByteBuffer[][] hhInputs \u003d new ByteBuffer[subSPacketSize][numDataUnits];\n+    for (int i \u003d 0; i \u003c subSPacketSize; ++i) {\n+      for (int j \u003d 0; j \u003c numDataUnits; ++j) {\n+        hhInputs[i][j] \u003d inputs[i * numDataUnits + j];\n+      }\n+    }\n+\n+    ByteBuffer[][] hhOutputs \u003d new ByteBuffer[subSPacketSize][numParityUnits];\n+    for (int i \u003d 0; i \u003c subSPacketSize; ++i) {\n+      for (int j \u003d 0; j \u003c numParityUnits; ++j) {\n+        hhOutputs[i][j] \u003d outputs[i * numParityUnits + j];\n+      }\n+    }\n+\n+    doEncode(hhInputs, hhOutputs);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void performCoding(ByteBuffer[] inputs, ByteBuffer[] outputs) {\n    final int numDataUnits \u003d this.rsRawEncoder.getNumDataUnits();\n    final int numParityUnits \u003d this.rsRawEncoder.getNumParityUnits();\n    final int subSPacketSize \u003d getSubPacketSize();\n\n    // inputs length \u003d numDataUnits * subPacketSize\n    if (inputs.length !\u003d numDataUnits * subSPacketSize) {\n      throw new IllegalArgumentException(\"Invalid inputs length\");\n    }\n\n    if (outputs.length !\u003d numParityUnits * subSPacketSize) {\n      throw new IllegalArgumentException(\"Invalid outputs length\");\n    }\n\n    // first numDataUnits length is first sub-stripe,\n    // second numDataUnits length is second sub-stripe\n    ByteBuffer[][] hhInputs \u003d new ByteBuffer[subSPacketSize][numDataUnits];\n    for (int i \u003d 0; i \u003c subSPacketSize; ++i) {\n      for (int j \u003d 0; j \u003c numDataUnits; ++j) {\n        hhInputs[i][j] \u003d inputs[i * numDataUnits + j];\n      }\n    }\n\n    ByteBuffer[][] hhOutputs \u003d new ByteBuffer[subSPacketSize][numParityUnits];\n    for (int i \u003d 0; i \u003c subSPacketSize; ++i) {\n      for (int j \u003d 0; j \u003c numParityUnits; ++j) {\n        hhOutputs[i][j] \u003d outputs[i * numParityUnits + j];\n      }\n    }\n\n    doEncode(hhInputs, hhOutputs);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/coder/HHXORErasureEncodingStep.java"
    }
  }
}