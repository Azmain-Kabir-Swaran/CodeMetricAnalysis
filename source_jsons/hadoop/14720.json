{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CacheAdmin.java",
  "functionName": "run",
  "functionId": "run___args-String[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java",
  "functionStartLine": 65,
  "functionEndLine": 92,
  "numCommitsSeen": 41,
  "timeTaken": 3461,
  "changeHistory": [
    "754f15bae61b81ad3c2e3f722d1feaebf374e2c4",
    "6f3a63a41b90157c3e46ea20ca6170b854ea902e",
    "b4eb963c3c3e0b123003d7b32cdf7c9202cfb441",
    "eb2175db1a99348c80457e3ffda172cc461de8bc",
    "02e0e158a26f81ce8375426ba0ea56db09ee36be"
  ],
  "changeHistoryShort": {
    "754f15bae61b81ad3c2e3f722d1feaebf374e2c4": "Ybodychange",
    "6f3a63a41b90157c3e46ea20ca6170b854ea902e": "Ybodychange",
    "b4eb963c3c3e0b123003d7b32cdf7c9202cfb441": "Ybodychange",
    "eb2175db1a99348c80457e3ffda172cc461de8bc": "Ymultichange(Yparameterchange,Ybodychange)",
    "02e0e158a26f81ce8375426ba0ea56db09ee36be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "754f15bae61b81ad3c2e3f722d1feaebf374e2c4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11226. cacheadmin, cryptoadmin and storagepolicyadmin should support generic options. Contributed by Brahma Reddy Battula\n",
      "commitDate": "12/12/16 6:21 PM",
      "commitName": "754f15bae61b81ad3c2e3f722d1feaebf374e2c4",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "20/06/16 10:42 AM",
      "commitNameOld": "5f6b4157a40e974ccc6a56c39dbd35c54f393fbd",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 175.36,
      "commitsBetweenForRepo": 1376,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,28 @@\n   public int run(String[] args) throws IOException {\n     if (args.length \u003d\u003d 0) {\n       AdminHelper.printUsage(false, \"cacheadmin\", COMMANDS);\n+      ToolRunner.printGenericCommandUsage(System.err);\n       return 1;\n     }\n     AdminHelper.Command command \u003d AdminHelper.determineCommand(args[0],\n         COMMANDS);\n     if (command \u003d\u003d null) {\n       System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n       if (!args[0].startsWith(\"-\")) {\n         System.err.println(\"Command names must start with dashes.\");\n       }\n       AdminHelper.printUsage(false, \"cacheadmin\", COMMANDS);\n+      ToolRunner.printGenericCommandUsage(System.err);\n       return 1;\n     }\n     List\u003cString\u003e argsList \u003d new LinkedList\u003cString\u003e();\n     for (int j \u003d 1; j \u003c args.length; j++) {\n       argsList.add(args[j]);\n     }\n     try {\n       return command.run(getConf(), argsList);\n     } catch (IllegalArgumentException e) {\n       System.err.println(AdminHelper.prettifyException(e));\n       return -1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws IOException {\n    if (args.length \u003d\u003d 0) {\n      AdminHelper.printUsage(false, \"cacheadmin\", COMMANDS);\n      ToolRunner.printGenericCommandUsage(System.err);\n      return 1;\n    }\n    AdminHelper.Command command \u003d AdminHelper.determineCommand(args[0],\n        COMMANDS);\n    if (command \u003d\u003d null) {\n      System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n      if (!args[0].startsWith(\"-\")) {\n        System.err.println(\"Command names must start with dashes.\");\n      }\n      AdminHelper.printUsage(false, \"cacheadmin\", COMMANDS);\n      ToolRunner.printGenericCommandUsage(System.err);\n      return 1;\n    }\n    List\u003cString\u003e argsList \u003d new LinkedList\u003cString\u003e();\n    for (int j \u003d 1; j \u003c args.length; j++) {\n      argsList.add(args[j]);\n    }\n    try {\n      return command.run(getConf(), argsList);\n    } catch (IllegalArgumentException e) {\n      System.err.println(AdminHelper.prettifyException(e));\n      return -1;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java",
      "extendedDetails": {}
    },
    "6f3a63a41b90157c3e46ea20ca6170b854ea902e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7600. Refine hdfs admin classes to reuse common code. Contributed by Jing Zhao.\n",
      "commitDate": "12/01/15 5:32 PM",
      "commitName": "6f3a63a41b90157c3e46ea20ca6170b854ea902e",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "12/06/14 11:39 PM",
      "commitNameOld": "be3fdd1c40140e24df1a5414cf91537862b66e82",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 213.79,
      "commitsBetweenForRepo": 1787,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   public int run(String[] args) throws IOException {\n     if (args.length \u003d\u003d 0) {\n-      printUsage(false);\n+      AdminHelper.printUsage(false, \"cacheadmin\", COMMANDS);\n       return 1;\n     }\n-    Command command \u003d determineCommand(args[0]);\n+    AdminHelper.Command command \u003d AdminHelper.determineCommand(args[0],\n+        COMMANDS);\n     if (command \u003d\u003d null) {\n       System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n       if (!args[0].startsWith(\"-\")) {\n         System.err.println(\"Command names must start with dashes.\");\n       }\n-      printUsage(false);\n+      AdminHelper.printUsage(false, \"cacheadmin\", COMMANDS);\n       return 1;\n     }\n     List\u003cString\u003e argsList \u003d new LinkedList\u003cString\u003e();\n     for (int j \u003d 1; j \u003c args.length; j++) {\n       argsList.add(args[j]);\n     }\n     try {\n       return command.run(getConf(), argsList);\n     } catch (IllegalArgumentException e) {\n-      System.err.println(prettifyException(e));\n+      System.err.println(AdminHelper.prettifyException(e));\n       return -1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws IOException {\n    if (args.length \u003d\u003d 0) {\n      AdminHelper.printUsage(false, \"cacheadmin\", COMMANDS);\n      return 1;\n    }\n    AdminHelper.Command command \u003d AdminHelper.determineCommand(args[0],\n        COMMANDS);\n    if (command \u003d\u003d null) {\n      System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n      if (!args[0].startsWith(\"-\")) {\n        System.err.println(\"Command names must start with dashes.\");\n      }\n      AdminHelper.printUsage(false, \"cacheadmin\", COMMANDS);\n      return 1;\n    }\n    List\u003cString\u003e argsList \u003d new LinkedList\u003cString\u003e();\n    for (int j \u003d 1; j \u003c args.length; j++) {\n      argsList.add(args[j]);\n    }\n    try {\n      return command.run(getConf(), argsList);\n    } catch (IllegalArgumentException e) {\n      System.err.println(AdminHelper.prettifyException(e));\n      return -1;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java",
      "extendedDetails": {}
    },
    "b4eb963c3c3e0b123003d7b32cdf7c9202cfb441": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5659. dfsadmin -report doesn\u0027t output cache information properly. Contributed by Andrew Wang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554893 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:11 PM",
      "commitName": "b4eb963c3c3e0b123003d7b32cdf7c9202cfb441",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "30/12/13 12:02 PM",
      "commitNameOld": "7f86c8114ec98f8a38a690bc1304c2cfc41d093e",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.01,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,25 @@\n   public int run(String[] args) throws IOException {\n     if (args.length \u003d\u003d 0) {\n       printUsage(false);\n       return 1;\n     }\n     Command command \u003d determineCommand(args[0]);\n     if (command \u003d\u003d null) {\n       System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n       if (!args[0].startsWith(\"-\")) {\n         System.err.println(\"Command names must start with dashes.\");\n       }\n       printUsage(false);\n       return 1;\n     }\n     List\u003cString\u003e argsList \u003d new LinkedList\u003cString\u003e();\n     for (int j \u003d 1; j \u003c args.length; j++) {\n       argsList.add(args[j]);\n     }\n-    return command.run(getConf(), argsList);\n+    try {\n+      return command.run(getConf(), argsList);\n+    } catch (IllegalArgumentException e) {\n+      System.err.println(prettifyException(e));\n+      return -1;\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws IOException {\n    if (args.length \u003d\u003d 0) {\n      printUsage(false);\n      return 1;\n    }\n    Command command \u003d determineCommand(args[0]);\n    if (command \u003d\u003d null) {\n      System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n      if (!args[0].startsWith(\"-\")) {\n        System.err.println(\"Command names must start with dashes.\");\n      }\n      printUsage(false);\n      return 1;\n    }\n    List\u003cString\u003e argsList \u003d new LinkedList\u003cString\u003e();\n    for (int j \u003d 1; j \u003c args.length; j++) {\n      argsList.add(args[j]);\n    }\n    try {\n      return command.run(getConf(), argsList);\n    } catch (IllegalArgumentException e) {\n      System.err.println(prettifyException(e));\n      return -1;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java",
      "extendedDetails": {}
    },
    "eb2175db1a99348c80457e3ffda172cc461de8bc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5190. Move cache pool related CLI commands to CacheAdmin. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1529334 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/10/13 3:28 PM",
      "commitName": "eb2175db1a99348c80457e3ffda172cc461de8bc",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5190. Move cache pool related CLI commands to CacheAdmin. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1529334 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/10/13 3:28 PM",
          "commitName": "eb2175db1a99348c80457e3ffda172cc461de8bc",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "20/09/13 5:20 PM",
          "commitNameOld": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 13.92,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,20 @@\n-    public int run(List\u003cString\u003e args) throws IOException {\n-      if (args.size() \u003d\u003d 0) {\n-        for (Command command : COMMANDS) {\n-          System.err.println(command.getLongUsage());\n-        }\n-        return 0;\n+  public int run(String[] args) throws IOException {\n+    if (args.length \u003d\u003d 0) {\n+      printUsage(false);\n+      return 1;\n+    }\n+    Command command \u003d determineCommand(args[0]);\n+    if (command \u003d\u003d null) {\n+      System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n+      if (!args[0].startsWith(\"-\")) {\n+        System.err.println(\"Command names must start with dashes.\");\n       }\n-      if (args.size() !\u003d 1) {\n-        System.out.println(\"You must give exactly one argument to -help.\");\n-        return 0;\n-      }\n-      String commandName \u003d args.get(0);\n-      commandName.replaceAll(\"^[-]*\", \"\");\n-      Command command \u003d determineCommand(commandName);\n-      if (command \u003d\u003d null) {\n-        System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n-          commandName + \"\u0027.\\n\");\n-        System.err.print(\"Valid command names are:\\n\");\n-        String separator \u003d \"\";\n-        for (Command c : COMMANDS) {\n-          System.err.print(separator + c.getName());\n-          separator \u003d \", \";\n-        }\n-        return 1;\n-      }\n-      System.err.print(command.getLongUsage());\n-      return 0;\n-    }\n\\ No newline at end of file\n+      printUsage(false);\n+      return 1;\n+    }\n+    List\u003cString\u003e argsList \u003d new LinkedList\u003cString\u003e();\n+    for (int j \u003d 1; j \u003c args.length; j++) {\n+      argsList.add(args[j]);\n+    }\n+    return command.run(getConf(), argsList);\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public int run(String[] args) throws IOException {\n    if (args.length \u003d\u003d 0) {\n      printUsage(false);\n      return 1;\n    }\n    Command command \u003d determineCommand(args[0]);\n    if (command \u003d\u003d null) {\n      System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n      if (!args[0].startsWith(\"-\")) {\n        System.err.println(\"Command names must start with dashes.\");\n      }\n      printUsage(false);\n      return 1;\n    }\n    List\u003cString\u003e argsList \u003d new LinkedList\u003cString\u003e();\n    for (int j \u003d 1; j \u003c args.length; j++) {\n      argsList.add(args[j]);\n    }\n    return command.run(getConf(), argsList);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java",
          "extendedDetails": {
            "oldValue": "[args-List\u003cString\u003e]",
            "newValue": "[args-String[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5190. Move cache pool related CLI commands to CacheAdmin. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1529334 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/10/13 3:28 PM",
          "commitName": "eb2175db1a99348c80457e3ffda172cc461de8bc",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "20/09/13 5:20 PM",
          "commitNameOld": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 13.92,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,20 @@\n-    public int run(List\u003cString\u003e args) throws IOException {\n-      if (args.size() \u003d\u003d 0) {\n-        for (Command command : COMMANDS) {\n-          System.err.println(command.getLongUsage());\n-        }\n-        return 0;\n+  public int run(String[] args) throws IOException {\n+    if (args.length \u003d\u003d 0) {\n+      printUsage(false);\n+      return 1;\n+    }\n+    Command command \u003d determineCommand(args[0]);\n+    if (command \u003d\u003d null) {\n+      System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n+      if (!args[0].startsWith(\"-\")) {\n+        System.err.println(\"Command names must start with dashes.\");\n       }\n-      if (args.size() !\u003d 1) {\n-        System.out.println(\"You must give exactly one argument to -help.\");\n-        return 0;\n-      }\n-      String commandName \u003d args.get(0);\n-      commandName.replaceAll(\"^[-]*\", \"\");\n-      Command command \u003d determineCommand(commandName);\n-      if (command \u003d\u003d null) {\n-        System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n-          commandName + \"\u0027.\\n\");\n-        System.err.print(\"Valid command names are:\\n\");\n-        String separator \u003d \"\";\n-        for (Command c : COMMANDS) {\n-          System.err.print(separator + c.getName());\n-          separator \u003d \", \";\n-        }\n-        return 1;\n-      }\n-      System.err.print(command.getLongUsage());\n-      return 0;\n-    }\n\\ No newline at end of file\n+      printUsage(false);\n+      return 1;\n+    }\n+    List\u003cString\u003e argsList \u003d new LinkedList\u003cString\u003e();\n+    for (int j \u003d 1; j \u003c args.length; j++) {\n+      argsList.add(args[j]);\n+    }\n+    return command.run(getConf(), argsList);\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public int run(String[] args) throws IOException {\n    if (args.length \u003d\u003d 0) {\n      printUsage(false);\n      return 1;\n    }\n    Command command \u003d determineCommand(args[0]);\n    if (command \u003d\u003d null) {\n      System.err.println(\"Can\u0027t understand command \u0027\" + args[0] + \"\u0027\");\n      if (!args[0].startsWith(\"-\")) {\n        System.err.println(\"Command names must start with dashes.\");\n      }\n      printUsage(false);\n      return 1;\n    }\n    List\u003cString\u003e argsList \u003d new LinkedList\u003cString\u003e();\n    for (int j \u003d 1; j \u003c args.length; j++) {\n      argsList.add(args[j]);\n    }\n    return command.run(getConf(), argsList);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java",
          "extendedDetails": {}
        }
      ]
    },
    "02e0e158a26f81ce8375426ba0ea56db09ee36be": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5158. Add command-line support for manipulating cache directives\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1522272 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/13 8:55 PM",
      "commitName": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,28 @@\n+    public int run(List\u003cString\u003e args) throws IOException {\n+      if (args.size() \u003d\u003d 0) {\n+        for (Command command : COMMANDS) {\n+          System.err.println(command.getLongUsage());\n+        }\n+        return 0;\n+      }\n+      if (args.size() !\u003d 1) {\n+        System.out.println(\"You must give exactly one argument to -help.\");\n+        return 0;\n+      }\n+      String commandName \u003d args.get(0);\n+      commandName.replaceAll(\"^[-]*\", \"\");\n+      Command command \u003d determineCommand(commandName);\n+      if (command \u003d\u003d null) {\n+        System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n+          commandName + \"\u0027.\\n\");\n+        System.err.print(\"Valid command names are:\\n\");\n+        String separator \u003d \"\";\n+        for (Command c : COMMANDS) {\n+          System.err.print(separator + c.getName());\n+          separator \u003d \", \";\n+        }\n+        return 1;\n+      }\n+      System.err.print(command.getLongUsage());\n+      return 0;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(List\u003cString\u003e args) throws IOException {\n      if (args.size() \u003d\u003d 0) {\n        for (Command command : COMMANDS) {\n          System.err.println(command.getLongUsage());\n        }\n        return 0;\n      }\n      if (args.size() !\u003d 1) {\n        System.out.println(\"You must give exactly one argument to -help.\");\n        return 0;\n      }\n      String commandName \u003d args.get(0);\n      commandName.replaceAll(\"^[-]*\", \"\");\n      Command command \u003d determineCommand(commandName);\n      if (command \u003d\u003d null) {\n        System.err.print(\"Sorry, I don\u0027t know the command \u0027\" +\n          commandName + \"\u0027.\\n\");\n        System.err.print(\"Valid command names are:\\n\");\n        String separator \u003d \"\";\n        for (Command c : COMMANDS) {\n          System.err.print(separator + c.getName());\n          separator \u003d \", \";\n        }\n        return 1;\n      }\n      System.err.print(command.getLongUsage());\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/CacheAdmin.java"
    }
  }
}