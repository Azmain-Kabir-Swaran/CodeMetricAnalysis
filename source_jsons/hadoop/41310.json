{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSAppAttempt.java",
  "functionName": "recoverContainer",
  "functionId": "recoverContainer___node-SchedulerNode__rmContainer-RMContainer",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
  "functionStartLine": 669,
  "functionEndLine": 691,
  "numCommitsSeen": 76,
  "timeTaken": 2739,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "025c6565725c1819566377632753e8b9055617a6",
    "1f4cdf10681b6903207a63fb5c306c9665ed9464"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "025c6565725c1819566377632753e8b9055617a6": "Ybodychange",
    "1f4cdf10681b6903207a63fb5c306c9665ed9464": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,23 @@\n   public synchronized void recoverContainer(SchedulerNode node,\n       RMContainer rmContainer) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n-\n       super.recoverContainer(node, rmContainer);\n \n       if (!rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n         getQueue().incUsedResource(rmContainer.getContainer().getResource());\n       }\n \n       // If not running unmanaged, the first container we recover is always\n       // the AM. Set the amResource for this app and update the leaf queue\u0027s AM\n       // usage\n       if (!isAmRunning() \u0026\u0026 !getUnmanagedAM()) {\n         Resource resource \u003d rmContainer.getAllocatedResource();\n         setAMResource(resource);\n         getQueue().addAMResourceUsage(resource);\n         setAmRunning(true);\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void recoverContainer(SchedulerNode node,\n      RMContainer rmContainer) {\n    writeLock.lock();\n    try {\n      super.recoverContainer(node, rmContainer);\n\n      if (!rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n        getQueue().incUsedResource(rmContainer.getContainer().getResource());\n      }\n\n      // If not running unmanaged, the first container we recover is always\n      // the AM. Set the amResource for this app and update the leaf queue\u0027s AM\n      // usage\n      if (!isAmRunning() \u0026\u0026 !getUnmanagedAM()) {\n        Resource resource \u003d rmContainer.getAllocatedResource();\n        setAMResource(resource);\n        getQueue().addAMResourceUsage(resource);\n        setAmRunning(true);\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "025c6565725c1819566377632753e8b9055617a6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7382. NoSuchElementException in FairScheduler after failover causes RM crash (rkanter)\n",
      "commitDate": "24/10/17 10:21 AM",
      "commitName": "025c6565725c1819566377632753e8b9055617a6",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "20/10/17 1:32 AM",
      "commitNameOld": "1f4cdf10681b6903207a63fb5c306c9665ed9464",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 4.37,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,24 @@\n   public synchronized void recoverContainer(SchedulerNode node,\n       RMContainer rmContainer) {\n     try {\n       writeLock.lock();\n \n       super.recoverContainer(node, rmContainer);\n \n       if (!rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n         getQueue().incUsedResource(rmContainer.getContainer().getResource());\n       }\n+\n+      // If not running unmanaged, the first container we recover is always\n+      // the AM. Set the amResource for this app and update the leaf queue\u0027s AM\n+      // usage\n+      if (!isAmRunning() \u0026\u0026 !getUnmanagedAM()) {\n+        Resource resource \u003d rmContainer.getAllocatedResource();\n+        setAMResource(resource);\n+        getQueue().addAMResourceUsage(resource);\n+        setAmRunning(true);\n+      }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void recoverContainer(SchedulerNode node,\n      RMContainer rmContainer) {\n    try {\n      writeLock.lock();\n\n      super.recoverContainer(node, rmContainer);\n\n      if (!rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n        getQueue().incUsedResource(rmContainer.getContainer().getResource());\n      }\n\n      // If not running unmanaged, the first container we recover is always\n      // the AM. Set the amResource for this app and update the leaf queue\u0027s AM\n      // usage\n      if (!isAmRunning() \u0026\u0026 !getUnmanagedAM()) {\n        Resource resource \u003d rmContainer.getAllocatedResource();\n        setAMResource(resource);\n        getQueue().addAMResourceUsage(resource);\n        setAmRunning(true);\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "1f4cdf10681b6903207a63fb5c306c9665ed9464": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4090. Make Collections.sort() more efficient by caching resource usage. (Contributed by Yufei Gu, Shilong Zhang and Xianyin Xin)\n",
      "commitDate": "20/10/17 1:32 AM",
      "commitName": "1f4cdf10681b6903207a63fb5c306c9665ed9464",
      "commitAuthor": "Yufei Gu",
      "diff": "@@ -0,0 +1,14 @@\n+  public synchronized void recoverContainer(SchedulerNode node,\n+      RMContainer rmContainer) {\n+    try {\n+      writeLock.lock();\n+\n+      super.recoverContainer(node, rmContainer);\n+\n+      if (!rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n+        getQueue().incUsedResource(rmContainer.getContainer().getResource());\n+      }\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void recoverContainer(SchedulerNode node,\n      RMContainer rmContainer) {\n    try {\n      writeLock.lock();\n\n      super.recoverContainer(node, rmContainer);\n\n      if (!rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n        getQueue().incUsedResource(rmContainer.getContainer().getResource());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java"
    }
  }
}