{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AggregatedLogFormat.java",
  "functionName": "readContainerLogsForALogType",
  "functionId": "readContainerLogsForALogType___valueStream-DataInputStream__out-PrintStream__logUploadedTime-long__logType-List__String____bytes-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
  "functionStartLine": 932,
  "functionEndLine": 995,
  "numCommitsSeen": 74,
  "timeTaken": 3542,
  "changeHistory": [
    "c35fa4a0e57b99415e284c7c2f3b1a0bebc610c2",
    "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
    "1a4b52869191b7e39c0101d3585efc12d6362c1c",
    "58e9f24e0f06efede21085b7ffe36af042fa7b38"
  ],
  "changeHistoryShort": {
    "c35fa4a0e57b99415e284c7c2f3b1a0bebc610c2": "Ybodychange",
    "0bc05e40fa7e183efe8463ada459c621da3ce3bf": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "1a4b52869191b7e39c0101d3585efc12d6362c1c": "Ybodychange",
    "58e9f24e0f06efede21085b7ffe36af042fa7b38": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c35fa4a0e57b99415e284c7c2f3b1a0bebc610c2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5251. Yarn CLI to obtain App logs for last \u0027n\u0027 bytes fails. Contributed by Xuan Gong.\n",
      "commitDate": "17/06/16 8:24 AM",
      "commitName": "c35fa4a0e57b99415e284c7c2f3b1a0bebc610c2",
      "commitAuthor": "Junping Du",
      "commitDateOld": "15/06/16 4:17 PM",
      "commitNameOld": "5dfc38ff57669cba9078146e91ed990a1d25a3f0",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 1.67,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,64 @@\n     public static int readContainerLogsForALogType(\n         DataInputStream valueStream, PrintStream out, long logUploadedTime,\n         List\u003cString\u003e logType, long bytes) throws IOException {\n       byte[] buf \u003d new byte[65535];\n \n       String fileType \u003d valueStream.readUTF();\n       String fileLengthStr \u003d valueStream.readUTF();\n       long fileLength \u003d Long.parseLong(fileLengthStr);\n       if (logType.contains(fileType)) {\n         out.print(\"LogType:\");\n         out.println(fileType);\n         if (logUploadedTime !\u003d -1) {\n           out.print(\"Log Upload Time:\");\n           out.println(Times.format(logUploadedTime));\n         }\n         out.print(\"LogLength:\");\n         out.println(fileLengthStr);\n         out.println(\"Log Contents:\");\n \n         long toSkip \u003d 0;\n         long totalBytesToRead \u003d fileLength;\n+        long skipAfterRead \u003d 0;\n         if (bytes \u003c 0) {\n           long absBytes \u003d Math.abs(bytes);\n           if (absBytes \u003c fileLength) {\n             toSkip \u003d fileLength - absBytes;\n             totalBytesToRead \u003d absBytes;\n           }\n-          long skippedBytes \u003d valueStream.skip(toSkip);\n-          if (skippedBytes !\u003d toSkip) {\n-            throw new IOException(\"The bytes were skipped are \"\n-                + \"different from the caller requested\");\n-          }\n+          org.apache.hadoop.io.IOUtils.skipFully(\n+              valueStream, toSkip);\n         } else {\n           if (bytes \u003c fileLength) {\n             totalBytesToRead \u003d bytes;\n+            skipAfterRead \u003d fileLength - bytes;\n           }\n         }\n \n         long curRead \u003d 0;\n         long pendingRead \u003d totalBytesToRead - curRead;\n         int toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n         int len \u003d valueStream.read(buf, 0, toRead);\n         while (len !\u003d -1 \u0026\u0026 curRead \u003c totalBytesToRead) {\n           out.write(buf, 0, len);\n           curRead +\u003d len;\n \n           pendingRead \u003d totalBytesToRead - curRead;\n           toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n           len \u003d valueStream.read(buf, 0, toRead);\n         }\n-        out.println(\"End of LogType:\" + fileType);\n+        org.apache.hadoop.io.IOUtils.skipFully(\n+            valueStream, skipAfterRead);\n+        out.println(\"\\nEnd of LogType:\" + fileType);\n         out.println(\"\");\n         return 0;\n       } else {\n         long totalSkipped \u003d 0;\n         long currSkipped \u003d 0;\n         while (currSkipped !\u003d -1 \u0026\u0026 totalSkipped \u003c fileLength) {\n           currSkipped \u003d valueStream.skip(fileLength - totalSkipped);\n           totalSkipped +\u003d currSkipped;\n         }\n         return -1;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static int readContainerLogsForALogType(\n        DataInputStream valueStream, PrintStream out, long logUploadedTime,\n        List\u003cString\u003e logType, long bytes) throws IOException {\n      byte[] buf \u003d new byte[65535];\n\n      String fileType \u003d valueStream.readUTF();\n      String fileLengthStr \u003d valueStream.readUTF();\n      long fileLength \u003d Long.parseLong(fileLengthStr);\n      if (logType.contains(fileType)) {\n        out.print(\"LogType:\");\n        out.println(fileType);\n        if (logUploadedTime !\u003d -1) {\n          out.print(\"Log Upload Time:\");\n          out.println(Times.format(logUploadedTime));\n        }\n        out.print(\"LogLength:\");\n        out.println(fileLengthStr);\n        out.println(\"Log Contents:\");\n\n        long toSkip \u003d 0;\n        long totalBytesToRead \u003d fileLength;\n        long skipAfterRead \u003d 0;\n        if (bytes \u003c 0) {\n          long absBytes \u003d Math.abs(bytes);\n          if (absBytes \u003c fileLength) {\n            toSkip \u003d fileLength - absBytes;\n            totalBytesToRead \u003d absBytes;\n          }\n          org.apache.hadoop.io.IOUtils.skipFully(\n              valueStream, toSkip);\n        } else {\n          if (bytes \u003c fileLength) {\n            totalBytesToRead \u003d bytes;\n            skipAfterRead \u003d fileLength - bytes;\n          }\n        }\n\n        long curRead \u003d 0;\n        long pendingRead \u003d totalBytesToRead - curRead;\n        int toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n        int len \u003d valueStream.read(buf, 0, toRead);\n        while (len !\u003d -1 \u0026\u0026 curRead \u003c totalBytesToRead) {\n          out.write(buf, 0, len);\n          curRead +\u003d len;\n\n          pendingRead \u003d totalBytesToRead - curRead;\n          toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n          len \u003d valueStream.read(buf, 0, toRead);\n        }\n        org.apache.hadoop.io.IOUtils.skipFully(\n            valueStream, skipAfterRead);\n        out.println(\"\\nEnd of LogType:\" + fileType);\n        out.println(\"\");\n        return 0;\n      } else {\n        long totalSkipped \u003d 0;\n        long currSkipped \u003d 0;\n        while (currSkipped !\u003d -1 \u0026\u0026 totalSkipped \u003c fileLength) {\n          currSkipped \u003d valueStream.skip(fileLength - totalSkipped);\n          totalSkipped +\u003d currSkipped;\n        }\n        return -1;\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
      "extendedDetails": {}
    },
    "0bc05e40fa7e183efe8463ada459c621da3ce3bf": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-5088. Improve \"yarn log\" command-line to read the last K bytes for the log files. Contributed by Xuan Gong\n",
      "commitDate": "01/06/16 1:44 PM",
      "commitName": "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-5088. Improve \"yarn log\" command-line to read the last K bytes for the log files. Contributed by Xuan Gong\n",
          "commitDate": "01/06/16 1:44 PM",
          "commitName": "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
          "commitAuthor": "Xuan",
          "commitDateOld": "26/05/16 11:49 PM",
          "commitNameOld": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 5.58,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,63 @@\n-    private static void readContainerLogs(DataInputStream valueStream,\n-        PrintStream out, long logUploadedTime) throws IOException {\n+    public static int readContainerLogsForALogType(\n+        DataInputStream valueStream, PrintStream out, long logUploadedTime,\n+        List\u003cString\u003e logType, long bytes) throws IOException {\n       byte[] buf \u003d new byte[65535];\n \n       String fileType \u003d valueStream.readUTF();\n       String fileLengthStr \u003d valueStream.readUTF();\n       long fileLength \u003d Long.parseLong(fileLengthStr);\n-      out.print(\"LogType:\");\n-      out.println(fileType);\n-      if (logUploadedTime !\u003d -1) {\n-        out.print(\"Log Upload Time:\");\n-        out.println(Times.format(logUploadedTime));\n-      }\n-      out.print(\"LogLength:\");\n-      out.println(fileLengthStr);\n-      out.println(\"Log Contents:\");\n+      if (logType.contains(fileType)) {\n+        out.print(\"LogType:\");\n+        out.println(fileType);\n+        if (logUploadedTime !\u003d -1) {\n+          out.print(\"Log Upload Time:\");\n+          out.println(Times.format(logUploadedTime));\n+        }\n+        out.print(\"LogLength:\");\n+        out.println(fileLengthStr);\n+        out.println(\"Log Contents:\");\n \n-      long curRead \u003d 0;\n-      long pendingRead \u003d fileLength - curRead;\n-      int toRead \u003d\n-                pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n-      int len \u003d valueStream.read(buf, 0, toRead);\n-      while (len !\u003d -1 \u0026\u0026 curRead \u003c fileLength) {\n-        out.write(buf, 0, len);\n-        curRead +\u003d len;\n+        long toSkip \u003d 0;\n+        long totalBytesToRead \u003d fileLength;\n+        if (bytes \u003c 0) {\n+          long absBytes \u003d Math.abs(bytes);\n+          if (absBytes \u003c fileLength) {\n+            toSkip \u003d fileLength - absBytes;\n+            totalBytesToRead \u003d absBytes;\n+          }\n+          long skippedBytes \u003d valueStream.skip(toSkip);\n+          if (skippedBytes !\u003d toSkip) {\n+            throw new IOException(\"The bytes were skipped are \"\n+                + \"different from the caller requested\");\n+          }\n+        } else {\n+          if (bytes \u003c fileLength) {\n+            totalBytesToRead \u003d bytes;\n+          }\n+        }\n \n-        pendingRead \u003d fileLength - curRead;\n-        toRead \u003d\n-                  pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n-        len \u003d valueStream.read(buf, 0, toRead);\n+        long curRead \u003d 0;\n+        long pendingRead \u003d totalBytesToRead - curRead;\n+        int toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n+        int len \u003d valueStream.read(buf, 0, toRead);\n+        while (len !\u003d -1 \u0026\u0026 curRead \u003c totalBytesToRead) {\n+          out.write(buf, 0, len);\n+          curRead +\u003d len;\n+\n+          pendingRead \u003d totalBytesToRead - curRead;\n+          toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n+          len \u003d valueStream.read(buf, 0, toRead);\n+        }\n+        out.println(\"End of LogType:\" + fileType);\n+        out.println(\"\");\n+        return 0;\n+      } else {\n+        long totalSkipped \u003d 0;\n+        long currSkipped \u003d 0;\n+        while (currSkipped !\u003d -1 \u0026\u0026 totalSkipped \u003c fileLength) {\n+          currSkipped \u003d valueStream.skip(fileLength - totalSkipped);\n+          totalSkipped +\u003d currSkipped;\n+        }\n+        return -1;\n       }\n-      out.println(\"End of LogType:\" + fileType);\n-      out.println(\"\");\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static int readContainerLogsForALogType(\n        DataInputStream valueStream, PrintStream out, long logUploadedTime,\n        List\u003cString\u003e logType, long bytes) throws IOException {\n      byte[] buf \u003d new byte[65535];\n\n      String fileType \u003d valueStream.readUTF();\n      String fileLengthStr \u003d valueStream.readUTF();\n      long fileLength \u003d Long.parseLong(fileLengthStr);\n      if (logType.contains(fileType)) {\n        out.print(\"LogType:\");\n        out.println(fileType);\n        if (logUploadedTime !\u003d -1) {\n          out.print(\"Log Upload Time:\");\n          out.println(Times.format(logUploadedTime));\n        }\n        out.print(\"LogLength:\");\n        out.println(fileLengthStr);\n        out.println(\"Log Contents:\");\n\n        long toSkip \u003d 0;\n        long totalBytesToRead \u003d fileLength;\n        if (bytes \u003c 0) {\n          long absBytes \u003d Math.abs(bytes);\n          if (absBytes \u003c fileLength) {\n            toSkip \u003d fileLength - absBytes;\n            totalBytesToRead \u003d absBytes;\n          }\n          long skippedBytes \u003d valueStream.skip(toSkip);\n          if (skippedBytes !\u003d toSkip) {\n            throw new IOException(\"The bytes were skipped are \"\n                + \"different from the caller requested\");\n          }\n        } else {\n          if (bytes \u003c fileLength) {\n            totalBytesToRead \u003d bytes;\n          }\n        }\n\n        long curRead \u003d 0;\n        long pendingRead \u003d totalBytesToRead - curRead;\n        int toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n        int len \u003d valueStream.read(buf, 0, toRead);\n        while (len !\u003d -1 \u0026\u0026 curRead \u003c totalBytesToRead) {\n          out.write(buf, 0, len);\n          curRead +\u003d len;\n\n          pendingRead \u003d totalBytesToRead - curRead;\n          toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n          len \u003d valueStream.read(buf, 0, toRead);\n        }\n        out.println(\"End of LogType:\" + fileType);\n        out.println(\"\");\n        return 0;\n      } else {\n        long totalSkipped \u003d 0;\n        long currSkipped \u003d 0;\n        while (currSkipped !\u003d -1 \u0026\u0026 totalSkipped \u003c fileLength) {\n          currSkipped \u003d valueStream.skip(fileLength - totalSkipped);\n          totalSkipped +\u003d currSkipped;\n        }\n        return -1;\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
          "extendedDetails": {
            "oldValue": "readContainerLogs",
            "newValue": "readContainerLogsForALogType"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5088. Improve \"yarn log\" command-line to read the last K bytes for the log files. Contributed by Xuan Gong\n",
          "commitDate": "01/06/16 1:44 PM",
          "commitName": "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
          "commitAuthor": "Xuan",
          "commitDateOld": "26/05/16 11:49 PM",
          "commitNameOld": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 5.58,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,63 @@\n-    private static void readContainerLogs(DataInputStream valueStream,\n-        PrintStream out, long logUploadedTime) throws IOException {\n+    public static int readContainerLogsForALogType(\n+        DataInputStream valueStream, PrintStream out, long logUploadedTime,\n+        List\u003cString\u003e logType, long bytes) throws IOException {\n       byte[] buf \u003d new byte[65535];\n \n       String fileType \u003d valueStream.readUTF();\n       String fileLengthStr \u003d valueStream.readUTF();\n       long fileLength \u003d Long.parseLong(fileLengthStr);\n-      out.print(\"LogType:\");\n-      out.println(fileType);\n-      if (logUploadedTime !\u003d -1) {\n-        out.print(\"Log Upload Time:\");\n-        out.println(Times.format(logUploadedTime));\n-      }\n-      out.print(\"LogLength:\");\n-      out.println(fileLengthStr);\n-      out.println(\"Log Contents:\");\n+      if (logType.contains(fileType)) {\n+        out.print(\"LogType:\");\n+        out.println(fileType);\n+        if (logUploadedTime !\u003d -1) {\n+          out.print(\"Log Upload Time:\");\n+          out.println(Times.format(logUploadedTime));\n+        }\n+        out.print(\"LogLength:\");\n+        out.println(fileLengthStr);\n+        out.println(\"Log Contents:\");\n \n-      long curRead \u003d 0;\n-      long pendingRead \u003d fileLength - curRead;\n-      int toRead \u003d\n-                pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n-      int len \u003d valueStream.read(buf, 0, toRead);\n-      while (len !\u003d -1 \u0026\u0026 curRead \u003c fileLength) {\n-        out.write(buf, 0, len);\n-        curRead +\u003d len;\n+        long toSkip \u003d 0;\n+        long totalBytesToRead \u003d fileLength;\n+        if (bytes \u003c 0) {\n+          long absBytes \u003d Math.abs(bytes);\n+          if (absBytes \u003c fileLength) {\n+            toSkip \u003d fileLength - absBytes;\n+            totalBytesToRead \u003d absBytes;\n+          }\n+          long skippedBytes \u003d valueStream.skip(toSkip);\n+          if (skippedBytes !\u003d toSkip) {\n+            throw new IOException(\"The bytes were skipped are \"\n+                + \"different from the caller requested\");\n+          }\n+        } else {\n+          if (bytes \u003c fileLength) {\n+            totalBytesToRead \u003d bytes;\n+          }\n+        }\n \n-        pendingRead \u003d fileLength - curRead;\n-        toRead \u003d\n-                  pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n-        len \u003d valueStream.read(buf, 0, toRead);\n+        long curRead \u003d 0;\n+        long pendingRead \u003d totalBytesToRead - curRead;\n+        int toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n+        int len \u003d valueStream.read(buf, 0, toRead);\n+        while (len !\u003d -1 \u0026\u0026 curRead \u003c totalBytesToRead) {\n+          out.write(buf, 0, len);\n+          curRead +\u003d len;\n+\n+          pendingRead \u003d totalBytesToRead - curRead;\n+          toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n+          len \u003d valueStream.read(buf, 0, toRead);\n+        }\n+        out.println(\"End of LogType:\" + fileType);\n+        out.println(\"\");\n+        return 0;\n+      } else {\n+        long totalSkipped \u003d 0;\n+        long currSkipped \u003d 0;\n+        while (currSkipped !\u003d -1 \u0026\u0026 totalSkipped \u003c fileLength) {\n+          currSkipped \u003d valueStream.skip(fileLength - totalSkipped);\n+          totalSkipped +\u003d currSkipped;\n+        }\n+        return -1;\n       }\n-      out.println(\"End of LogType:\" + fileType);\n-      out.println(\"\");\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static int readContainerLogsForALogType(\n        DataInputStream valueStream, PrintStream out, long logUploadedTime,\n        List\u003cString\u003e logType, long bytes) throws IOException {\n      byte[] buf \u003d new byte[65535];\n\n      String fileType \u003d valueStream.readUTF();\n      String fileLengthStr \u003d valueStream.readUTF();\n      long fileLength \u003d Long.parseLong(fileLengthStr);\n      if (logType.contains(fileType)) {\n        out.print(\"LogType:\");\n        out.println(fileType);\n        if (logUploadedTime !\u003d -1) {\n          out.print(\"Log Upload Time:\");\n          out.println(Times.format(logUploadedTime));\n        }\n        out.print(\"LogLength:\");\n        out.println(fileLengthStr);\n        out.println(\"Log Contents:\");\n\n        long toSkip \u003d 0;\n        long totalBytesToRead \u003d fileLength;\n        if (bytes \u003c 0) {\n          long absBytes \u003d Math.abs(bytes);\n          if (absBytes \u003c fileLength) {\n            toSkip \u003d fileLength - absBytes;\n            totalBytesToRead \u003d absBytes;\n          }\n          long skippedBytes \u003d valueStream.skip(toSkip);\n          if (skippedBytes !\u003d toSkip) {\n            throw new IOException(\"The bytes were skipped are \"\n                + \"different from the caller requested\");\n          }\n        } else {\n          if (bytes \u003c fileLength) {\n            totalBytesToRead \u003d bytes;\n          }\n        }\n\n        long curRead \u003d 0;\n        long pendingRead \u003d totalBytesToRead - curRead;\n        int toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n        int len \u003d valueStream.read(buf, 0, toRead);\n        while (len !\u003d -1 \u0026\u0026 curRead \u003c totalBytesToRead) {\n          out.write(buf, 0, len);\n          curRead +\u003d len;\n\n          pendingRead \u003d totalBytesToRead - curRead;\n          toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n          len \u003d valueStream.read(buf, 0, toRead);\n        }\n        out.println(\"End of LogType:\" + fileType);\n        out.println(\"\");\n        return 0;\n      } else {\n        long totalSkipped \u003d 0;\n        long currSkipped \u003d 0;\n        while (currSkipped !\u003d -1 \u0026\u0026 totalSkipped \u003c fileLength) {\n          currSkipped \u003d valueStream.skip(fileLength - totalSkipped);\n          totalSkipped +\u003d currSkipped;\n        }\n        return -1;\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
          "extendedDetails": {
            "oldValue": "[valueStream-DataInputStream, out-PrintStream, logUploadedTime-long]",
            "newValue": "[valueStream-DataInputStream, out-PrintStream, logUploadedTime-long, logType-List\u003cString\u003e, bytes-long]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5088. Improve \"yarn log\" command-line to read the last K bytes for the log files. Contributed by Xuan Gong\n",
          "commitDate": "01/06/16 1:44 PM",
          "commitName": "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
          "commitAuthor": "Xuan",
          "commitDateOld": "26/05/16 11:49 PM",
          "commitNameOld": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 5.58,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,63 @@\n-    private static void readContainerLogs(DataInputStream valueStream,\n-        PrintStream out, long logUploadedTime) throws IOException {\n+    public static int readContainerLogsForALogType(\n+        DataInputStream valueStream, PrintStream out, long logUploadedTime,\n+        List\u003cString\u003e logType, long bytes) throws IOException {\n       byte[] buf \u003d new byte[65535];\n \n       String fileType \u003d valueStream.readUTF();\n       String fileLengthStr \u003d valueStream.readUTF();\n       long fileLength \u003d Long.parseLong(fileLengthStr);\n-      out.print(\"LogType:\");\n-      out.println(fileType);\n-      if (logUploadedTime !\u003d -1) {\n-        out.print(\"Log Upload Time:\");\n-        out.println(Times.format(logUploadedTime));\n-      }\n-      out.print(\"LogLength:\");\n-      out.println(fileLengthStr);\n-      out.println(\"Log Contents:\");\n+      if (logType.contains(fileType)) {\n+        out.print(\"LogType:\");\n+        out.println(fileType);\n+        if (logUploadedTime !\u003d -1) {\n+          out.print(\"Log Upload Time:\");\n+          out.println(Times.format(logUploadedTime));\n+        }\n+        out.print(\"LogLength:\");\n+        out.println(fileLengthStr);\n+        out.println(\"Log Contents:\");\n \n-      long curRead \u003d 0;\n-      long pendingRead \u003d fileLength - curRead;\n-      int toRead \u003d\n-                pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n-      int len \u003d valueStream.read(buf, 0, toRead);\n-      while (len !\u003d -1 \u0026\u0026 curRead \u003c fileLength) {\n-        out.write(buf, 0, len);\n-        curRead +\u003d len;\n+        long toSkip \u003d 0;\n+        long totalBytesToRead \u003d fileLength;\n+        if (bytes \u003c 0) {\n+          long absBytes \u003d Math.abs(bytes);\n+          if (absBytes \u003c fileLength) {\n+            toSkip \u003d fileLength - absBytes;\n+            totalBytesToRead \u003d absBytes;\n+          }\n+          long skippedBytes \u003d valueStream.skip(toSkip);\n+          if (skippedBytes !\u003d toSkip) {\n+            throw new IOException(\"The bytes were skipped are \"\n+                + \"different from the caller requested\");\n+          }\n+        } else {\n+          if (bytes \u003c fileLength) {\n+            totalBytesToRead \u003d bytes;\n+          }\n+        }\n \n-        pendingRead \u003d fileLength - curRead;\n-        toRead \u003d\n-                  pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n-        len \u003d valueStream.read(buf, 0, toRead);\n+        long curRead \u003d 0;\n+        long pendingRead \u003d totalBytesToRead - curRead;\n+        int toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n+        int len \u003d valueStream.read(buf, 0, toRead);\n+        while (len !\u003d -1 \u0026\u0026 curRead \u003c totalBytesToRead) {\n+          out.write(buf, 0, len);\n+          curRead +\u003d len;\n+\n+          pendingRead \u003d totalBytesToRead - curRead;\n+          toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n+          len \u003d valueStream.read(buf, 0, toRead);\n+        }\n+        out.println(\"End of LogType:\" + fileType);\n+        out.println(\"\");\n+        return 0;\n+      } else {\n+        long totalSkipped \u003d 0;\n+        long currSkipped \u003d 0;\n+        while (currSkipped !\u003d -1 \u0026\u0026 totalSkipped \u003c fileLength) {\n+          currSkipped \u003d valueStream.skip(fileLength - totalSkipped);\n+          totalSkipped +\u003d currSkipped;\n+        }\n+        return -1;\n       }\n-      out.println(\"End of LogType:\" + fileType);\n-      out.println(\"\");\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static int readContainerLogsForALogType(\n        DataInputStream valueStream, PrintStream out, long logUploadedTime,\n        List\u003cString\u003e logType, long bytes) throws IOException {\n      byte[] buf \u003d new byte[65535];\n\n      String fileType \u003d valueStream.readUTF();\n      String fileLengthStr \u003d valueStream.readUTF();\n      long fileLength \u003d Long.parseLong(fileLengthStr);\n      if (logType.contains(fileType)) {\n        out.print(\"LogType:\");\n        out.println(fileType);\n        if (logUploadedTime !\u003d -1) {\n          out.print(\"Log Upload Time:\");\n          out.println(Times.format(logUploadedTime));\n        }\n        out.print(\"LogLength:\");\n        out.println(fileLengthStr);\n        out.println(\"Log Contents:\");\n\n        long toSkip \u003d 0;\n        long totalBytesToRead \u003d fileLength;\n        if (bytes \u003c 0) {\n          long absBytes \u003d Math.abs(bytes);\n          if (absBytes \u003c fileLength) {\n            toSkip \u003d fileLength - absBytes;\n            totalBytesToRead \u003d absBytes;\n          }\n          long skippedBytes \u003d valueStream.skip(toSkip);\n          if (skippedBytes !\u003d toSkip) {\n            throw new IOException(\"The bytes were skipped are \"\n                + \"different from the caller requested\");\n          }\n        } else {\n          if (bytes \u003c fileLength) {\n            totalBytesToRead \u003d bytes;\n          }\n        }\n\n        long curRead \u003d 0;\n        long pendingRead \u003d totalBytesToRead - curRead;\n        int toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n        int len \u003d valueStream.read(buf, 0, toRead);\n        while (len !\u003d -1 \u0026\u0026 curRead \u003c totalBytesToRead) {\n          out.write(buf, 0, len);\n          curRead +\u003d len;\n\n          pendingRead \u003d totalBytesToRead - curRead;\n          toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n          len \u003d valueStream.read(buf, 0, toRead);\n        }\n        out.println(\"End of LogType:\" + fileType);\n        out.println(\"\");\n        return 0;\n      } else {\n        long totalSkipped \u003d 0;\n        long currSkipped \u003d 0;\n        while (currSkipped !\u003d -1 \u0026\u0026 totalSkipped \u003c fileLength) {\n          currSkipped \u003d valueStream.skip(fileLength - totalSkipped);\n          totalSkipped +\u003d currSkipped;\n        }\n        return -1;\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "int"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5088. Improve \"yarn log\" command-line to read the last K bytes for the log files. Contributed by Xuan Gong\n",
          "commitDate": "01/06/16 1:44 PM",
          "commitName": "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
          "commitAuthor": "Xuan",
          "commitDateOld": "26/05/16 11:49 PM",
          "commitNameOld": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 5.58,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,63 @@\n-    private static void readContainerLogs(DataInputStream valueStream,\n-        PrintStream out, long logUploadedTime) throws IOException {\n+    public static int readContainerLogsForALogType(\n+        DataInputStream valueStream, PrintStream out, long logUploadedTime,\n+        List\u003cString\u003e logType, long bytes) throws IOException {\n       byte[] buf \u003d new byte[65535];\n \n       String fileType \u003d valueStream.readUTF();\n       String fileLengthStr \u003d valueStream.readUTF();\n       long fileLength \u003d Long.parseLong(fileLengthStr);\n-      out.print(\"LogType:\");\n-      out.println(fileType);\n-      if (logUploadedTime !\u003d -1) {\n-        out.print(\"Log Upload Time:\");\n-        out.println(Times.format(logUploadedTime));\n-      }\n-      out.print(\"LogLength:\");\n-      out.println(fileLengthStr);\n-      out.println(\"Log Contents:\");\n+      if (logType.contains(fileType)) {\n+        out.print(\"LogType:\");\n+        out.println(fileType);\n+        if (logUploadedTime !\u003d -1) {\n+          out.print(\"Log Upload Time:\");\n+          out.println(Times.format(logUploadedTime));\n+        }\n+        out.print(\"LogLength:\");\n+        out.println(fileLengthStr);\n+        out.println(\"Log Contents:\");\n \n-      long curRead \u003d 0;\n-      long pendingRead \u003d fileLength - curRead;\n-      int toRead \u003d\n-                pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n-      int len \u003d valueStream.read(buf, 0, toRead);\n-      while (len !\u003d -1 \u0026\u0026 curRead \u003c fileLength) {\n-        out.write(buf, 0, len);\n-        curRead +\u003d len;\n+        long toSkip \u003d 0;\n+        long totalBytesToRead \u003d fileLength;\n+        if (bytes \u003c 0) {\n+          long absBytes \u003d Math.abs(bytes);\n+          if (absBytes \u003c fileLength) {\n+            toSkip \u003d fileLength - absBytes;\n+            totalBytesToRead \u003d absBytes;\n+          }\n+          long skippedBytes \u003d valueStream.skip(toSkip);\n+          if (skippedBytes !\u003d toSkip) {\n+            throw new IOException(\"The bytes were skipped are \"\n+                + \"different from the caller requested\");\n+          }\n+        } else {\n+          if (bytes \u003c fileLength) {\n+            totalBytesToRead \u003d bytes;\n+          }\n+        }\n \n-        pendingRead \u003d fileLength - curRead;\n-        toRead \u003d\n-                  pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n-        len \u003d valueStream.read(buf, 0, toRead);\n+        long curRead \u003d 0;\n+        long pendingRead \u003d totalBytesToRead - curRead;\n+        int toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n+        int len \u003d valueStream.read(buf, 0, toRead);\n+        while (len !\u003d -1 \u0026\u0026 curRead \u003c totalBytesToRead) {\n+          out.write(buf, 0, len);\n+          curRead +\u003d len;\n+\n+          pendingRead \u003d totalBytesToRead - curRead;\n+          toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n+          len \u003d valueStream.read(buf, 0, toRead);\n+        }\n+        out.println(\"End of LogType:\" + fileType);\n+        out.println(\"\");\n+        return 0;\n+      } else {\n+        long totalSkipped \u003d 0;\n+        long currSkipped \u003d 0;\n+        while (currSkipped !\u003d -1 \u0026\u0026 totalSkipped \u003c fileLength) {\n+          currSkipped \u003d valueStream.skip(fileLength - totalSkipped);\n+          totalSkipped +\u003d currSkipped;\n+        }\n+        return -1;\n       }\n-      out.println(\"End of LogType:\" + fileType);\n-      out.println(\"\");\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static int readContainerLogsForALogType(\n        DataInputStream valueStream, PrintStream out, long logUploadedTime,\n        List\u003cString\u003e logType, long bytes) throws IOException {\n      byte[] buf \u003d new byte[65535];\n\n      String fileType \u003d valueStream.readUTF();\n      String fileLengthStr \u003d valueStream.readUTF();\n      long fileLength \u003d Long.parseLong(fileLengthStr);\n      if (logType.contains(fileType)) {\n        out.print(\"LogType:\");\n        out.println(fileType);\n        if (logUploadedTime !\u003d -1) {\n          out.print(\"Log Upload Time:\");\n          out.println(Times.format(logUploadedTime));\n        }\n        out.print(\"LogLength:\");\n        out.println(fileLengthStr);\n        out.println(\"Log Contents:\");\n\n        long toSkip \u003d 0;\n        long totalBytesToRead \u003d fileLength;\n        if (bytes \u003c 0) {\n          long absBytes \u003d Math.abs(bytes);\n          if (absBytes \u003c fileLength) {\n            toSkip \u003d fileLength - absBytes;\n            totalBytesToRead \u003d absBytes;\n          }\n          long skippedBytes \u003d valueStream.skip(toSkip);\n          if (skippedBytes !\u003d toSkip) {\n            throw new IOException(\"The bytes were skipped are \"\n                + \"different from the caller requested\");\n          }\n        } else {\n          if (bytes \u003c fileLength) {\n            totalBytesToRead \u003d bytes;\n          }\n        }\n\n        long curRead \u003d 0;\n        long pendingRead \u003d totalBytesToRead - curRead;\n        int toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n        int len \u003d valueStream.read(buf, 0, toRead);\n        while (len !\u003d -1 \u0026\u0026 curRead \u003c totalBytesToRead) {\n          out.write(buf, 0, len);\n          curRead +\u003d len;\n\n          pendingRead \u003d totalBytesToRead - curRead;\n          toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n          len \u003d valueStream.read(buf, 0, toRead);\n        }\n        out.println(\"End of LogType:\" + fileType);\n        out.println(\"\");\n        return 0;\n      } else {\n        long totalSkipped \u003d 0;\n        long currSkipped \u003d 0;\n        while (currSkipped !\u003d -1 \u0026\u0026 totalSkipped \u003c fileLength) {\n          currSkipped \u003d valueStream.skip(fileLength - totalSkipped);\n          totalSkipped +\u003d currSkipped;\n        }\n        return -1;\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5088. Improve \"yarn log\" command-line to read the last K bytes for the log files. Contributed by Xuan Gong\n",
          "commitDate": "01/06/16 1:44 PM",
          "commitName": "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
          "commitAuthor": "Xuan",
          "commitDateOld": "26/05/16 11:49 PM",
          "commitNameOld": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 5.58,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,63 @@\n-    private static void readContainerLogs(DataInputStream valueStream,\n-        PrintStream out, long logUploadedTime) throws IOException {\n+    public static int readContainerLogsForALogType(\n+        DataInputStream valueStream, PrintStream out, long logUploadedTime,\n+        List\u003cString\u003e logType, long bytes) throws IOException {\n       byte[] buf \u003d new byte[65535];\n \n       String fileType \u003d valueStream.readUTF();\n       String fileLengthStr \u003d valueStream.readUTF();\n       long fileLength \u003d Long.parseLong(fileLengthStr);\n-      out.print(\"LogType:\");\n-      out.println(fileType);\n-      if (logUploadedTime !\u003d -1) {\n-        out.print(\"Log Upload Time:\");\n-        out.println(Times.format(logUploadedTime));\n-      }\n-      out.print(\"LogLength:\");\n-      out.println(fileLengthStr);\n-      out.println(\"Log Contents:\");\n+      if (logType.contains(fileType)) {\n+        out.print(\"LogType:\");\n+        out.println(fileType);\n+        if (logUploadedTime !\u003d -1) {\n+          out.print(\"Log Upload Time:\");\n+          out.println(Times.format(logUploadedTime));\n+        }\n+        out.print(\"LogLength:\");\n+        out.println(fileLengthStr);\n+        out.println(\"Log Contents:\");\n \n-      long curRead \u003d 0;\n-      long pendingRead \u003d fileLength - curRead;\n-      int toRead \u003d\n-                pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n-      int len \u003d valueStream.read(buf, 0, toRead);\n-      while (len !\u003d -1 \u0026\u0026 curRead \u003c fileLength) {\n-        out.write(buf, 0, len);\n-        curRead +\u003d len;\n+        long toSkip \u003d 0;\n+        long totalBytesToRead \u003d fileLength;\n+        if (bytes \u003c 0) {\n+          long absBytes \u003d Math.abs(bytes);\n+          if (absBytes \u003c fileLength) {\n+            toSkip \u003d fileLength - absBytes;\n+            totalBytesToRead \u003d absBytes;\n+          }\n+          long skippedBytes \u003d valueStream.skip(toSkip);\n+          if (skippedBytes !\u003d toSkip) {\n+            throw new IOException(\"The bytes were skipped are \"\n+                + \"different from the caller requested\");\n+          }\n+        } else {\n+          if (bytes \u003c fileLength) {\n+            totalBytesToRead \u003d bytes;\n+          }\n+        }\n \n-        pendingRead \u003d fileLength - curRead;\n-        toRead \u003d\n-                  pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n-        len \u003d valueStream.read(buf, 0, toRead);\n+        long curRead \u003d 0;\n+        long pendingRead \u003d totalBytesToRead - curRead;\n+        int toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n+        int len \u003d valueStream.read(buf, 0, toRead);\n+        while (len !\u003d -1 \u0026\u0026 curRead \u003c totalBytesToRead) {\n+          out.write(buf, 0, len);\n+          curRead +\u003d len;\n+\n+          pendingRead \u003d totalBytesToRead - curRead;\n+          toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n+          len \u003d valueStream.read(buf, 0, toRead);\n+        }\n+        out.println(\"End of LogType:\" + fileType);\n+        out.println(\"\");\n+        return 0;\n+      } else {\n+        long totalSkipped \u003d 0;\n+        long currSkipped \u003d 0;\n+        while (currSkipped !\u003d -1 \u0026\u0026 totalSkipped \u003c fileLength) {\n+          currSkipped \u003d valueStream.skip(fileLength - totalSkipped);\n+          totalSkipped +\u003d currSkipped;\n+        }\n+        return -1;\n       }\n-      out.println(\"End of LogType:\" + fileType);\n-      out.println(\"\");\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static int readContainerLogsForALogType(\n        DataInputStream valueStream, PrintStream out, long logUploadedTime,\n        List\u003cString\u003e logType, long bytes) throws IOException {\n      byte[] buf \u003d new byte[65535];\n\n      String fileType \u003d valueStream.readUTF();\n      String fileLengthStr \u003d valueStream.readUTF();\n      long fileLength \u003d Long.parseLong(fileLengthStr);\n      if (logType.contains(fileType)) {\n        out.print(\"LogType:\");\n        out.println(fileType);\n        if (logUploadedTime !\u003d -1) {\n          out.print(\"Log Upload Time:\");\n          out.println(Times.format(logUploadedTime));\n        }\n        out.print(\"LogLength:\");\n        out.println(fileLengthStr);\n        out.println(\"Log Contents:\");\n\n        long toSkip \u003d 0;\n        long totalBytesToRead \u003d fileLength;\n        if (bytes \u003c 0) {\n          long absBytes \u003d Math.abs(bytes);\n          if (absBytes \u003c fileLength) {\n            toSkip \u003d fileLength - absBytes;\n            totalBytesToRead \u003d absBytes;\n          }\n          long skippedBytes \u003d valueStream.skip(toSkip);\n          if (skippedBytes !\u003d toSkip) {\n            throw new IOException(\"The bytes were skipped are \"\n                + \"different from the caller requested\");\n          }\n        } else {\n          if (bytes \u003c fileLength) {\n            totalBytesToRead \u003d bytes;\n          }\n        }\n\n        long curRead \u003d 0;\n        long pendingRead \u003d totalBytesToRead - curRead;\n        int toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n        int len \u003d valueStream.read(buf, 0, toRead);\n        while (len !\u003d -1 \u0026\u0026 curRead \u003c totalBytesToRead) {\n          out.write(buf, 0, len);\n          curRead +\u003d len;\n\n          pendingRead \u003d totalBytesToRead - curRead;\n          toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n          len \u003d valueStream.read(buf, 0, toRead);\n        }\n        out.println(\"End of LogType:\" + fileType);\n        out.println(\"\");\n        return 0;\n      } else {\n        long totalSkipped \u003d 0;\n        long currSkipped \u003d 0;\n        while (currSkipped !\u003d -1 \u0026\u0026 totalSkipped \u003c fileLength) {\n          currSkipped \u003d valueStream.skip(fileLength - totalSkipped);\n          totalSkipped +\u003d currSkipped;\n        }\n        return -1;\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
          "extendedDetails": {}
        }
      ]
    },
    "1a4b52869191b7e39c0101d3585efc12d6362c1c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2777. Mark the end of individual log in aggregated log. Contributed\nby Varun Saxena\n",
      "commitDate": "20/03/15 10:24 AM",
      "commitName": "1a4b52869191b7e39c0101d3585efc12d6362c1c",
      "commitAuthor": "Xuan",
      "commitDateOld": "12/03/15 1:32 PM",
      "commitNameOld": "863079bb874ba77918ca1c0741eae10e245995c8",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.87,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n     private static void readContainerLogs(DataInputStream valueStream,\n         PrintStream out, long logUploadedTime) throws IOException {\n       byte[] buf \u003d new byte[65535];\n \n       String fileType \u003d valueStream.readUTF();\n       String fileLengthStr \u003d valueStream.readUTF();\n       long fileLength \u003d Long.parseLong(fileLengthStr);\n       out.print(\"LogType:\");\n       out.println(fileType);\n       if (logUploadedTime !\u003d -1) {\n         out.print(\"Log Upload Time:\");\n         out.println(Times.format(logUploadedTime));\n       }\n       out.print(\"LogLength:\");\n       out.println(fileLengthStr);\n       out.println(\"Log Contents:\");\n \n       long curRead \u003d 0;\n       long pendingRead \u003d fileLength - curRead;\n       int toRead \u003d\n                 pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n       int len \u003d valueStream.read(buf, 0, toRead);\n       while (len !\u003d -1 \u0026\u0026 curRead \u003c fileLength) {\n         out.write(buf, 0, len);\n         curRead +\u003d len;\n \n         pendingRead \u003d fileLength - curRead;\n         toRead \u003d\n                   pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n         len \u003d valueStream.read(buf, 0, toRead);\n       }\n+      out.println(\"End of LogType:\" + fileType);\n       out.println(\"\");\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void readContainerLogs(DataInputStream valueStream,\n        PrintStream out, long logUploadedTime) throws IOException {\n      byte[] buf \u003d new byte[65535];\n\n      String fileType \u003d valueStream.readUTF();\n      String fileLengthStr \u003d valueStream.readUTF();\n      long fileLength \u003d Long.parseLong(fileLengthStr);\n      out.print(\"LogType:\");\n      out.println(fileType);\n      if (logUploadedTime !\u003d -1) {\n        out.print(\"Log Upload Time:\");\n        out.println(Times.format(logUploadedTime));\n      }\n      out.print(\"LogLength:\");\n      out.println(fileLengthStr);\n      out.println(\"Log Contents:\");\n\n      long curRead \u003d 0;\n      long pendingRead \u003d fileLength - curRead;\n      int toRead \u003d\n                pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n      int len \u003d valueStream.read(buf, 0, toRead);\n      while (len !\u003d -1 \u0026\u0026 curRead \u003c fileLength) {\n        out.write(buf, 0, len);\n        curRead +\u003d len;\n\n        pendingRead \u003d fileLength - curRead;\n        toRead \u003d\n                  pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n        len \u003d valueStream.read(buf, 0, toRead);\n      }\n      out.println(\"End of LogType:\" + fileType);\n      out.println(\"\");\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
      "extendedDetails": {}
    },
    "58e9f24e0f06efede21085b7ffe36af042fa7b38": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2788. Fixed backwards compatiblity issues with log-aggregation feature that were caused when adding log-upload-time via YARN-2703. Contributed by Xuan Gong.\n",
      "commitDate": "03/11/14 1:16 PM",
      "commitName": "58e9f24e0f06efede21085b7ffe36af042fa7b38",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,33 @@\n+    private static void readContainerLogs(DataInputStream valueStream,\n+        PrintStream out, long logUploadedTime) throws IOException {\n+      byte[] buf \u003d new byte[65535];\n+\n+      String fileType \u003d valueStream.readUTF();\n+      String fileLengthStr \u003d valueStream.readUTF();\n+      long fileLength \u003d Long.parseLong(fileLengthStr);\n+      out.print(\"LogType:\");\n+      out.println(fileType);\n+      if (logUploadedTime !\u003d -1) {\n+        out.print(\"Log Upload Time:\");\n+        out.println(Times.format(logUploadedTime));\n+      }\n+      out.print(\"LogLength:\");\n+      out.println(fileLengthStr);\n+      out.println(\"Log Contents:\");\n+\n+      long curRead \u003d 0;\n+      long pendingRead \u003d fileLength - curRead;\n+      int toRead \u003d\n+                pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n+      int len \u003d valueStream.read(buf, 0, toRead);\n+      while (len !\u003d -1 \u0026\u0026 curRead \u003c fileLength) {\n+        out.write(buf, 0, len);\n+        curRead +\u003d len;\n+\n+        pendingRead \u003d fileLength - curRead;\n+        toRead \u003d\n+                  pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n+        len \u003d valueStream.read(buf, 0, toRead);\n+      }\n+      out.println(\"\");\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static void readContainerLogs(DataInputStream valueStream,\n        PrintStream out, long logUploadedTime) throws IOException {\n      byte[] buf \u003d new byte[65535];\n\n      String fileType \u003d valueStream.readUTF();\n      String fileLengthStr \u003d valueStream.readUTF();\n      long fileLength \u003d Long.parseLong(fileLengthStr);\n      out.print(\"LogType:\");\n      out.println(fileType);\n      if (logUploadedTime !\u003d -1) {\n        out.print(\"Log Upload Time:\");\n        out.println(Times.format(logUploadedTime));\n      }\n      out.print(\"LogLength:\");\n      out.println(fileLengthStr);\n      out.println(\"Log Contents:\");\n\n      long curRead \u003d 0;\n      long pendingRead \u003d fileLength - curRead;\n      int toRead \u003d\n                pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n      int len \u003d valueStream.read(buf, 0, toRead);\n      while (len !\u003d -1 \u0026\u0026 curRead \u003c fileLength) {\n        out.write(buf, 0, len);\n        curRead +\u003d len;\n\n        pendingRead \u003d fileLength - curRead;\n        toRead \u003d\n                  pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n        len \u003d valueStream.read(buf, 0, toRead);\n      }\n      out.println(\"\");\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java"
    }
  }
}