{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLogsPage.java",
  "functionName": "render",
  "functionId": "render___html-Block",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
  "functionStartLine": 104,
  "functionEndLine": 180,
  "numCommitsSeen": 24,
  "timeTaken": 8540,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "631b5c2db733b0733a779e843b8035f68d0fcdf3",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "a759abcd898224c3481c55aa7e424bc286f60b15",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449",
    "df2991c0cbc3f35c2640b93680667507c4f810dd",
    "13e4562924a6cb3d16c262e0f595b2ffbf9e0546",
    "b549c107825581b15fd14494099a943ff3213c6f",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "631b5c2db733b0733a779e843b8035f68d0fcdf3": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "a759abcd898224c3481c55aa7e424bc286f60b15": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": "Ybodychange",
    "df2991c0cbc3f35c2640b93680667507c4f810dd": "Ybodychange",
    "13e4562924a6cb3d16c262e0f595b2ffbf9e0546": "Ybodychange",
    "b549c107825581b15fd14494099a943ff3213c6f": "Ybodychange",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "15/12/17 3:38 PM",
      "commitNameOld": "631b5c2db733b0733a779e843b8035f68d0fcdf3",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 454.99,
      "commitsBetweenForRepo": 3985,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,77 @@\n     protected void render(Block html) {\n \n       String redirectUrl \u003d $(REDIRECT_URL);\n       if (redirectUrl !\u003dnull \u0026\u0026 redirectUrl.equals(\"false\")) {\n         html.h1(\"Failed while trying to construct the redirect url to the log\" +\n             \" server. Log Server url may not be configured\");\n         //Intentional fallthrough.\n       }\n \n       ContainerId containerId;\n       ApplicationId appId;\n       try {\n         containerId \u003d ContainerId.fromString($(CONTAINER_ID));\n         appId \u003d containerId.getApplicationAttemptId().getApplicationId();\n       } catch (IllegalArgumentException ex) {\n         html.h1(\"Invalid container ID: \" + $(CONTAINER_ID));\n         return;\n       }\n \n       LogAggregationFileController fileController \u003d null;\n       boolean foundAggregatedLogs \u003d false;\n       try {\n         fileController \u003d this.factory.getFileControllerForRead(\n             appId, $(APP_OWNER));\n         foundAggregatedLogs \u003d true;\n       } catch (IOException fnf) {\n         // Do Nothing\n       }\n \n       try {\n         if ($(CONTAINER_LOG_TYPE).isEmpty()) {\n           html.h2(\"Local Logs:\");\n           List\u003cFile\u003e logFiles \u003d ContainerLogsUtils.getContainerLogDirs(containerId,\n               request().getRemoteUser(), nmContext);\n           printLocalLogFileDirectory(html, logFiles);\n           if (foundAggregatedLogs) {\n             // print out the aggregated logs if exists\n             try {\n               ContainerLogsRequest logRequest \u003d new ContainerLogsRequest();\n               logRequest.setAppId(appId);\n               logRequest.setAppOwner($(APP_OWNER));\n               logRequest.setContainerId($(CONTAINER_ID));\n               logRequest.setNodeId(this.nmContext.getNodeId().toString());\n               List\u003cContainerLogMeta\u003e containersLogMeta \u003d fileController\n                   .readAggregatedLogsMeta(logRequest);\n               if (containersLogMeta !\u003d null \u0026\u0026 !containersLogMeta.isEmpty()) {\n                 html.h2(\"Aggregated Logs:\");\n                 printAggregatedLogFileDirectory(html, containersLogMeta);\n               }\n             } catch (Exception ex) {\n-              if (LOG.isDebugEnabled()) {\n-                LOG.debug(ex.getMessage());\n-              }\n+              LOG.debug(\"{}\", ex);\n             }\n           }\n         } else {\n           String aggregationType \u003d $(LOG_AGGREGATION_TYPE);\n           if (aggregationType \u003d\u003d null || aggregationType.isEmpty() ||\n               aggregationType.trim().toLowerCase().equals(\n                   LOG_AGGREGATION_LOCAL_TYPE)) {\n             File logFile \u003d ContainerLogsUtils.getContainerLogFile(containerId,\n                 $(CONTAINER_LOG_TYPE), request().getRemoteUser(), nmContext);\n             printLocalLogFile(html, logFile);\n           } else if (!LOG_AGGREGATION_LOCAL_TYPE.trim().toLowerCase().equals(\n               aggregationType) \u0026\u0026 !LOG_AGGREGATION_REMOTE_TYPE.trim()\n                   .toLowerCase().equals(aggregationType)) {\n             html.h1(\"Invalid value for query parameter: \"\n                 + LOG_AGGREGATION_TYPE + \". \"\n                 + \"The valid value could be either \"\n                 + LOG_AGGREGATION_LOCAL_TYPE + \" or \"\n                 + LOG_AGGREGATION_REMOTE_TYPE + \".\");\n           }\n         }\n       } catch (YarnException ex) {\n         html.h1(ex.getMessage());\n       } catch (NotFoundException ex) {\n         html.h1(ex.getMessage());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n\n      String redirectUrl \u003d $(REDIRECT_URL);\n      if (redirectUrl !\u003dnull \u0026\u0026 redirectUrl.equals(\"false\")) {\n        html.h1(\"Failed while trying to construct the redirect url to the log\" +\n            \" server. Log Server url may not be configured\");\n        //Intentional fallthrough.\n      }\n\n      ContainerId containerId;\n      ApplicationId appId;\n      try {\n        containerId \u003d ContainerId.fromString($(CONTAINER_ID));\n        appId \u003d containerId.getApplicationAttemptId().getApplicationId();\n      } catch (IllegalArgumentException ex) {\n        html.h1(\"Invalid container ID: \" + $(CONTAINER_ID));\n        return;\n      }\n\n      LogAggregationFileController fileController \u003d null;\n      boolean foundAggregatedLogs \u003d false;\n      try {\n        fileController \u003d this.factory.getFileControllerForRead(\n            appId, $(APP_OWNER));\n        foundAggregatedLogs \u003d true;\n      } catch (IOException fnf) {\n        // Do Nothing\n      }\n\n      try {\n        if ($(CONTAINER_LOG_TYPE).isEmpty()) {\n          html.h2(\"Local Logs:\");\n          List\u003cFile\u003e logFiles \u003d ContainerLogsUtils.getContainerLogDirs(containerId,\n              request().getRemoteUser(), nmContext);\n          printLocalLogFileDirectory(html, logFiles);\n          if (foundAggregatedLogs) {\n            // print out the aggregated logs if exists\n            try {\n              ContainerLogsRequest logRequest \u003d new ContainerLogsRequest();\n              logRequest.setAppId(appId);\n              logRequest.setAppOwner($(APP_OWNER));\n              logRequest.setContainerId($(CONTAINER_ID));\n              logRequest.setNodeId(this.nmContext.getNodeId().toString());\n              List\u003cContainerLogMeta\u003e containersLogMeta \u003d fileController\n                  .readAggregatedLogsMeta(logRequest);\n              if (containersLogMeta !\u003d null \u0026\u0026 !containersLogMeta.isEmpty()) {\n                html.h2(\"Aggregated Logs:\");\n                printAggregatedLogFileDirectory(html, containersLogMeta);\n              }\n            } catch (Exception ex) {\n              LOG.debug(\"{}\", ex);\n            }\n          }\n        } else {\n          String aggregationType \u003d $(LOG_AGGREGATION_TYPE);\n          if (aggregationType \u003d\u003d null || aggregationType.isEmpty() ||\n              aggregationType.trim().toLowerCase().equals(\n                  LOG_AGGREGATION_LOCAL_TYPE)) {\n            File logFile \u003d ContainerLogsUtils.getContainerLogFile(containerId,\n                $(CONTAINER_LOG_TYPE), request().getRemoteUser(), nmContext);\n            printLocalLogFile(html, logFile);\n          } else if (!LOG_AGGREGATION_LOCAL_TYPE.trim().toLowerCase().equals(\n              aggregationType) \u0026\u0026 !LOG_AGGREGATION_REMOTE_TYPE.trim()\n                  .toLowerCase().equals(aggregationType)) {\n            html.h1(\"Invalid value for query parameter: \"\n                + LOG_AGGREGATION_TYPE + \". \"\n                + \"The valid value could be either \"\n                + LOG_AGGREGATION_LOCAL_TYPE + \" or \"\n                + LOG_AGGREGATION_REMOTE_TYPE + \".\");\n          }\n        }\n      } catch (YarnException ex) {\n        html.h1(ex.getMessage());\n      } catch (NotFoundException ex) {\n        html.h1(ex.getMessage());\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {}
    },
    "631b5c2db733b0733a779e843b8035f68d0fcdf3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5418. When partial log aggregation is enabled, display the list of aggregated files on the container log page. (Xuan Gong via wangda)\n\nChange-Id: I1befb0bbaeb89fb315bafe3e2f3379663f8cf1ec\n",
      "commitDate": "15/12/17 3:38 PM",
      "commitName": "631b5c2db733b0733a779e843b8035f68d0fcdf3",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "27/07/17 5:10 PM",
      "commitNameOld": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 140.98,
      "commitsBetweenForRepo": 1187,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,79 @@\n     protected void render(Block html) {\n \n       String redirectUrl \u003d $(REDIRECT_URL);\n       if (redirectUrl !\u003dnull \u0026\u0026 redirectUrl.equals(\"false\")) {\n         html.h1(\"Failed while trying to construct the redirect url to the log\" +\n-        \t\t\" server. Log Server url may not be configured\");\n+            \" server. Log Server url may not be configured\");\n         //Intentional fallthrough.\n       }\n \n       ContainerId containerId;\n+      ApplicationId appId;\n       try {\n         containerId \u003d ContainerId.fromString($(CONTAINER_ID));\n+        appId \u003d containerId.getApplicationAttemptId().getApplicationId();\n       } catch (IllegalArgumentException ex) {\n         html.h1(\"Invalid container ID: \" + $(CONTAINER_ID));\n         return;\n       }\n \n+      LogAggregationFileController fileController \u003d null;\n+      boolean foundAggregatedLogs \u003d false;\n+      try {\n+        fileController \u003d this.factory.getFileControllerForRead(\n+            appId, $(APP_OWNER));\n+        foundAggregatedLogs \u003d true;\n+      } catch (IOException fnf) {\n+        // Do Nothing\n+      }\n+\n       try {\n         if ($(CONTAINER_LOG_TYPE).isEmpty()) {\n+          html.h2(\"Local Logs:\");\n           List\u003cFile\u003e logFiles \u003d ContainerLogsUtils.getContainerLogDirs(containerId,\n               request().getRemoteUser(), nmContext);\n-          printLogFileDirectory(html, logFiles);\n+          printLocalLogFileDirectory(html, logFiles);\n+          if (foundAggregatedLogs) {\n+            // print out the aggregated logs if exists\n+            try {\n+              ContainerLogsRequest logRequest \u003d new ContainerLogsRequest();\n+              logRequest.setAppId(appId);\n+              logRequest.setAppOwner($(APP_OWNER));\n+              logRequest.setContainerId($(CONTAINER_ID));\n+              logRequest.setNodeId(this.nmContext.getNodeId().toString());\n+              List\u003cContainerLogMeta\u003e containersLogMeta \u003d fileController\n+                  .readAggregatedLogsMeta(logRequest);\n+              if (containersLogMeta !\u003d null \u0026\u0026 !containersLogMeta.isEmpty()) {\n+                html.h2(\"Aggregated Logs:\");\n+                printAggregatedLogFileDirectory(html, containersLogMeta);\n+              }\n+            } catch (Exception ex) {\n+              if (LOG.isDebugEnabled()) {\n+                LOG.debug(ex.getMessage());\n+              }\n+            }\n+          }\n         } else {\n-          File logFile \u003d ContainerLogsUtils.getContainerLogFile(containerId,\n-              $(CONTAINER_LOG_TYPE), request().getRemoteUser(), nmContext);\n-          printLogFile(html, logFile);\n+          String aggregationType \u003d $(LOG_AGGREGATION_TYPE);\n+          if (aggregationType \u003d\u003d null || aggregationType.isEmpty() ||\n+              aggregationType.trim().toLowerCase().equals(\n+                  LOG_AGGREGATION_LOCAL_TYPE)) {\n+            File logFile \u003d ContainerLogsUtils.getContainerLogFile(containerId,\n+                $(CONTAINER_LOG_TYPE), request().getRemoteUser(), nmContext);\n+            printLocalLogFile(html, logFile);\n+          } else if (!LOG_AGGREGATION_LOCAL_TYPE.trim().toLowerCase().equals(\n+              aggregationType) \u0026\u0026 !LOG_AGGREGATION_REMOTE_TYPE.trim()\n+                  .toLowerCase().equals(aggregationType)) {\n+            html.h1(\"Invalid value for query parameter: \"\n+                + LOG_AGGREGATION_TYPE + \". \"\n+                + \"The valid value could be either \"\n+                + LOG_AGGREGATION_LOCAL_TYPE + \" or \"\n+                + LOG_AGGREGATION_REMOTE_TYPE + \".\");\n+          }\n         }\n       } catch (YarnException ex) {\n         html.h1(ex.getMessage());\n       } catch (NotFoundException ex) {\n         html.h1(ex.getMessage());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n\n      String redirectUrl \u003d $(REDIRECT_URL);\n      if (redirectUrl !\u003dnull \u0026\u0026 redirectUrl.equals(\"false\")) {\n        html.h1(\"Failed while trying to construct the redirect url to the log\" +\n            \" server. Log Server url may not be configured\");\n        //Intentional fallthrough.\n      }\n\n      ContainerId containerId;\n      ApplicationId appId;\n      try {\n        containerId \u003d ContainerId.fromString($(CONTAINER_ID));\n        appId \u003d containerId.getApplicationAttemptId().getApplicationId();\n      } catch (IllegalArgumentException ex) {\n        html.h1(\"Invalid container ID: \" + $(CONTAINER_ID));\n        return;\n      }\n\n      LogAggregationFileController fileController \u003d null;\n      boolean foundAggregatedLogs \u003d false;\n      try {\n        fileController \u003d this.factory.getFileControllerForRead(\n            appId, $(APP_OWNER));\n        foundAggregatedLogs \u003d true;\n      } catch (IOException fnf) {\n        // Do Nothing\n      }\n\n      try {\n        if ($(CONTAINER_LOG_TYPE).isEmpty()) {\n          html.h2(\"Local Logs:\");\n          List\u003cFile\u003e logFiles \u003d ContainerLogsUtils.getContainerLogDirs(containerId,\n              request().getRemoteUser(), nmContext);\n          printLocalLogFileDirectory(html, logFiles);\n          if (foundAggregatedLogs) {\n            // print out the aggregated logs if exists\n            try {\n              ContainerLogsRequest logRequest \u003d new ContainerLogsRequest();\n              logRequest.setAppId(appId);\n              logRequest.setAppOwner($(APP_OWNER));\n              logRequest.setContainerId($(CONTAINER_ID));\n              logRequest.setNodeId(this.nmContext.getNodeId().toString());\n              List\u003cContainerLogMeta\u003e containersLogMeta \u003d fileController\n                  .readAggregatedLogsMeta(logRequest);\n              if (containersLogMeta !\u003d null \u0026\u0026 !containersLogMeta.isEmpty()) {\n                html.h2(\"Aggregated Logs:\");\n                printAggregatedLogFileDirectory(html, containersLogMeta);\n              }\n            } catch (Exception ex) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(ex.getMessage());\n              }\n            }\n          }\n        } else {\n          String aggregationType \u003d $(LOG_AGGREGATION_TYPE);\n          if (aggregationType \u003d\u003d null || aggregationType.isEmpty() ||\n              aggregationType.trim().toLowerCase().equals(\n                  LOG_AGGREGATION_LOCAL_TYPE)) {\n            File logFile \u003d ContainerLogsUtils.getContainerLogFile(containerId,\n                $(CONTAINER_LOG_TYPE), request().getRemoteUser(), nmContext);\n            printLocalLogFile(html, logFile);\n          } else if (!LOG_AGGREGATION_LOCAL_TYPE.trim().toLowerCase().equals(\n              aggregationType) \u0026\u0026 !LOG_AGGREGATION_REMOTE_TYPE.trim()\n                  .toLowerCase().equals(aggregationType)) {\n            html.h1(\"Invalid value for query parameter: \"\n                + LOG_AGGREGATION_TYPE + \". \"\n                + \"The valid value could be either \"\n                + LOG_AGGREGATION_LOCAL_TYPE + \" or \"\n                + LOG_AGGREGATION_REMOTE_TYPE + \".\");\n          }\n        }\n      } catch (YarnException ex) {\n        html.h1(ex.getMessage());\n      } catch (NotFoundException ex) {\n        html.h1(ex.getMessage());\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "20/05/15 5:20 PM",
      "commitNameOld": "6329bd00fa1f17cc9555efa496ea7607ad93e0ce",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 390.91,
      "commitsBetweenForRepo": 2748,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     protected void render(Block html) {\n \n       String redirectUrl \u003d $(REDIRECT_URL);\n       if (redirectUrl !\u003dnull \u0026\u0026 redirectUrl.equals(\"false\")) {\n         html.h1(\"Failed while trying to construct the redirect url to the log\" +\n         \t\t\" server. Log Server url may not be configured\");\n         //Intentional fallthrough.\n       }\n \n       ContainerId containerId;\n       try {\n-        containerId \u003d ConverterUtils.toContainerId($(CONTAINER_ID));\n+        containerId \u003d ContainerId.fromString($(CONTAINER_ID));\n       } catch (IllegalArgumentException ex) {\n         html.h1(\"Invalid container ID: \" + $(CONTAINER_ID));\n         return;\n       }\n \n       try {\n         if ($(CONTAINER_LOG_TYPE).isEmpty()) {\n           List\u003cFile\u003e logFiles \u003d ContainerLogsUtils.getContainerLogDirs(containerId,\n               request().getRemoteUser(), nmContext);\n           printLogFileDirectory(html, logFiles);\n         } else {\n           File logFile \u003d ContainerLogsUtils.getContainerLogFile(containerId,\n               $(CONTAINER_LOG_TYPE), request().getRemoteUser(), nmContext);\n           printLogFile(html, logFile);\n         }\n       } catch (YarnException ex) {\n         html.h1(ex.getMessage());\n       } catch (NotFoundException ex) {\n         html.h1(ex.getMessage());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n\n      String redirectUrl \u003d $(REDIRECT_URL);\n      if (redirectUrl !\u003dnull \u0026\u0026 redirectUrl.equals(\"false\")) {\n        html.h1(\"Failed while trying to construct the redirect url to the log\" +\n        \t\t\" server. Log Server url may not be configured\");\n        //Intentional fallthrough.\n      }\n\n      ContainerId containerId;\n      try {\n        containerId \u003d ContainerId.fromString($(CONTAINER_ID));\n      } catch (IllegalArgumentException ex) {\n        html.h1(\"Invalid container ID: \" + $(CONTAINER_ID));\n        return;\n      }\n\n      try {\n        if ($(CONTAINER_LOG_TYPE).isEmpty()) {\n          List\u003cFile\u003e logFiles \u003d ContainerLogsUtils.getContainerLogDirs(containerId,\n              request().getRemoteUser(), nmContext);\n          printLogFileDirectory(html, logFiles);\n        } else {\n          File logFile \u003d ContainerLogsUtils.getContainerLogFile(containerId,\n              $(CONTAINER_LOG_TYPE), request().getRemoteUser(), nmContext);\n          printLogFile(html, logFile);\n        }\n      } catch (YarnException ex) {\n        html.h1(ex.getMessage());\n      } catch (NotFoundException ex) {\n        html.h1(ex.getMessage());\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {}
    },
    "a759abcd898224c3481c55aa7e424bc286f60b15": {
      "type": "Ybodychange",
      "commitMessage": "YARN-649. Added a new NM web-service to serve container logs in plain text over HTTP. Contributed by Sandy Ryza.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1519326 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/09/13 5:09 PM",
      "commitName": "a759abcd898224c3481c55aa7e424bc286f60b15",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/05/13 4:14 PM",
      "commitNameOld": "5420f287ccc83df69b6725942754c82b89e46b3e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 95.04,
      "commitsBetweenForRepo": 609,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,33 @@\n     protected void render(Block html) {\n \n       String redirectUrl \u003d $(REDIRECT_URL);\n       if (redirectUrl !\u003dnull \u0026\u0026 redirectUrl.equals(\"false\")) {\n         html.h1(\"Failed while trying to construct the redirect url to the log\" +\n         \t\t\" server. Log Server url may not be configured\");\n         //Intentional fallthrough.\n       }\n-      \n+\n       ContainerId containerId;\n       try {\n         containerId \u003d ConverterUtils.toContainerId($(CONTAINER_ID));\n-      } catch (IllegalArgumentException e) {\n-        html.h1(\"Invalid containerId \" + $(CONTAINER_ID));\n+      } catch (IllegalArgumentException ex) {\n+        html.h1(\"Invalid container ID: \" + $(CONTAINER_ID));\n         return;\n       }\n \n-      ApplicationId applicationId \u003d containerId.getApplicationAttemptId()\n-          .getApplicationId();\n-      Application application \u003d this.nmContext.getApplications().get(\n-          applicationId);\n-      Container container \u003d this.nmContext.getContainers().get(containerId);\n-\n-      if (application \u003d\u003d null) {\n-        html.h1(\n-            \"Unknown container. Container either has not started or \"\n-                + \"has already completed or \"\n-                + \"doesn\u0027t belong to this node at all.\");\n-        return;\n-      }\n-      if (container \u003d\u003d null) {\n-        // Container may have alerady completed, but logs not aggregated yet.\n-        printLogs(html, containerId, applicationId, application);\n-        return;\n-      }\n-\n-      if (EnumSet.of(ContainerState.NEW, ContainerState.LOCALIZING,\n-          ContainerState.LOCALIZED).contains(container.getContainerState())) {\n-        html.h1(\"Container is not yet running. Current state is \"\n-                + container.getContainerState());\n-        return;\n-      }\n-\n-      if (container.getContainerState() \u003d\u003d ContainerState.LOCALIZATION_FAILED) {\n-        html.h1(\"Container wasn\u0027t started. Localization failed.\");\n-        return;\n-      }\n-\n-      if (EnumSet.of(ContainerState.RUNNING,\n-          ContainerState.EXITED_WITH_FAILURE,\n-          ContainerState.EXITED_WITH_SUCCESS).contains(\n-          container.getContainerState())) {\n-        printLogs(html, containerId, applicationId, application);\n-        return;\n-      }\n-      if (EnumSet.of(ContainerState.KILLING,\n-          ContainerState.CONTAINER_CLEANEDUP_AFTER_KILL,\n-          ContainerState.CONTAINER_RESOURCES_CLEANINGUP).contains(\n-          container.getContainerState())) {\n-        //Container may have generated some logs before being killed.\n-        printLogs(html, containerId, applicationId, application);\n-        return;\n-      }\n-      if (container.getContainerState().equals(ContainerState.DONE)) {\n-        // Prev state unknown. Logs may be available.\n-        printLogs(html, containerId, applicationId, application);\n-        return;\n-      } else {\n-        html.h1(\"Container is no longer running...\");\n-        return;\n+      try {\n+        if ($(CONTAINER_LOG_TYPE).isEmpty()) {\n+          List\u003cFile\u003e logFiles \u003d ContainerLogsUtils.getContainerLogDirs(containerId,\n+              request().getRemoteUser(), nmContext);\n+          printLogFileDirectory(html, logFiles);\n+        } else {\n+          File logFile \u003d ContainerLogsUtils.getContainerLogFile(containerId,\n+              $(CONTAINER_LOG_TYPE), request().getRemoteUser(), nmContext);\n+          printLogFile(html, logFile);\n+        }\n+      } catch (YarnException ex) {\n+        html.h1(ex.getMessage());\n+      } catch (NotFoundException ex) {\n+        html.h1(ex.getMessage());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n\n      String redirectUrl \u003d $(REDIRECT_URL);\n      if (redirectUrl !\u003dnull \u0026\u0026 redirectUrl.equals(\"false\")) {\n        html.h1(\"Failed while trying to construct the redirect url to the log\" +\n        \t\t\" server. Log Server url may not be configured\");\n        //Intentional fallthrough.\n      }\n\n      ContainerId containerId;\n      try {\n        containerId \u003d ConverterUtils.toContainerId($(CONTAINER_ID));\n      } catch (IllegalArgumentException ex) {\n        html.h1(\"Invalid container ID: \" + $(CONTAINER_ID));\n        return;\n      }\n\n      try {\n        if ($(CONTAINER_LOG_TYPE).isEmpty()) {\n          List\u003cFile\u003e logFiles \u003d ContainerLogsUtils.getContainerLogDirs(containerId,\n              request().getRemoteUser(), nmContext);\n          printLogFileDirectory(html, logFiles);\n        } else {\n          File logFile \u003d ContainerLogsUtils.getContainerLogFile(containerId,\n              $(CONTAINER_LOG_TYPE), request().getRemoteUser(), nmContext);\n          printLogFile(html, logFile);\n        }\n      } catch (YarnException ex) {\n        html.h1(ex.getMessage());\n      } catch (NotFoundException ex) {\n        html.h1(ex.getMessage());\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected void render(Block html) {\n\n      String redirectUrl \u003d $(REDIRECT_URL);\n      if (redirectUrl !\u003dnull \u0026\u0026 redirectUrl.equals(\"false\")) {\n        html.h1(\"Failed while trying to construct the redirect url to the log\" +\n        \t\t\" server. Log Server url may not be configured\");\n        //Intentional fallthrough.\n      }\n      \n      ContainerId containerId;\n      try {\n        containerId \u003d ConverterUtils.toContainerId($(CONTAINER_ID));\n      } catch (IllegalArgumentException e) {\n        html.h1(\"Invalid containerId \" + $(CONTAINER_ID));\n        return;\n      }\n\n      ApplicationId applicationId \u003d containerId.getApplicationAttemptId()\n          .getApplicationId();\n      Application application \u003d this.nmContext.getApplications().get(\n          applicationId);\n      Container container \u003d this.nmContext.getContainers().get(containerId);\n\n      if (application \u003d\u003d null) {\n        html.h1(\n            \"Unknown container. Container either has not started or \"\n                + \"has already completed or \"\n                + \"doesn\u0027t belong to this node at all.\");\n        return;\n      }\n      if (container \u003d\u003d null) {\n        // Container may have alerady completed, but logs not aggregated yet.\n        printLogs(html, containerId, applicationId, application);\n        return;\n      }\n\n      if (EnumSet.of(ContainerState.NEW, ContainerState.LOCALIZING,\n          ContainerState.LOCALIZED).contains(container.getContainerState())) {\n        html.h1(\"Container is not yet running. Current state is \"\n                + container.getContainerState());\n        return;\n      }\n\n      if (container.getContainerState() \u003d\u003d ContainerState.LOCALIZATION_FAILED) {\n        html.h1(\"Container wasn\u0027t started. Localization failed.\");\n        return;\n      }\n\n      if (EnumSet.of(ContainerState.RUNNING,\n          ContainerState.EXITED_WITH_FAILURE,\n          ContainerState.EXITED_WITH_SUCCESS).contains(\n          container.getContainerState())) {\n        printLogs(html, containerId, applicationId, application);\n        return;\n      }\n      if (EnumSet.of(ContainerState.KILLING,\n          ContainerState.CONTAINER_CLEANEDUP_AFTER_KILL,\n          ContainerState.CONTAINER_RESOURCES_CLEANINGUP).contains(\n          container.getContainerState())) {\n        //Container may have generated some logs before being killed.\n        printLogs(html, containerId, applicationId, application);\n        return;\n      }\n      if (container.getContainerState().equals(ContainerState.DONE)) {\n        // Prev state unknown. Logs may be available.\n        printLogs(html, containerId, applicationId, application);\n        return;\n      } else {\n        html.h1(\"Container is no longer running...\");\n        return;\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java"
      }
    },
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2989. Modified JobHistory to link to task and AM logs from the JobHistoryServer. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 11:45 PM",
      "commitName": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "20/10/11 4:45 AM",
      "commitNameOld": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.79,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,135 +1,72 @@\n     protected void render(Block html) {\n-      DIV\u003cHamlet\u003e div \u003d html.div(\"#content\");\n \n+      String redirectUrl \u003d $(REDIRECT_URL);\n+      if (redirectUrl !\u003dnull \u0026\u0026 redirectUrl.equals(\"false\")) {\n+        html.h1(\"Failed while trying to construct the redirect url to the log\" +\n+        \t\t\" server. Log Server url may not be configured\");\n+        //Intentional fallthrough.\n+      }\n+      \n       ContainerId containerId;\n       try {\n         containerId \u003d ConverterUtils.toContainerId($(CONTAINER_ID));\n       } catch (IllegalArgumentException e) {\n-        div.h1(\"Invalid containerId \" + $(CONTAINER_ID))._();\n+        html.h1(\"Invalid containerId \" + $(CONTAINER_ID));\n         return;\n       }\n \n       ApplicationId applicationId \u003d containerId.getApplicationAttemptId()\n           .getApplicationId();\n       Application application \u003d this.nmContext.getApplications().get(\n           applicationId);\n       Container container \u003d this.nmContext.getContainers().get(containerId);\n \n-      if (application \u003d\u003d null || container \u003d\u003d null) {\n-        div.h1(\n-            \"Unknown container. Container is either not yet running or \"\n+      if (application \u003d\u003d null) {\n+        html.h1(\n+            \"Unknown container. Container either has not started or \"\n                 + \"has already completed or \"\n-                + \"doesn\u0027t belong to this node at all.\")._();\n+                + \"doesn\u0027t belong to this node at all.\");\n+        return;\n+      }\n+      if (container \u003d\u003d null) {\n+        // Container may have alerady completed, but logs not aggregated yet.\n+        printLogs(html, containerId, applicationId, application);\n         return;\n       }\n \n       if (EnumSet.of(ContainerState.NEW, ContainerState.LOCALIZING,\n-          ContainerState.LOCALIZING).contains(container.getContainerState())) {\n-        div.h1(\"Container is not yet running. Current state is \"\n-                + container.getContainerState())\n-              ._();\n+          ContainerState.LOCALIZED).contains(container.getContainerState())) {\n+        html.h1(\"Container is not yet running. Current state is \"\n+                + container.getContainerState());\n+        return;\n+      }\n+\n+      if (container.getContainerState() \u003d\u003d ContainerState.LOCALIZATION_FAILED) {\n+        html.h1(\"Container wasn\u0027t started. Localization failed.\");\n         return;\n       }\n \n       if (EnumSet.of(ContainerState.RUNNING,\n           ContainerState.EXITED_WITH_FAILURE,\n           ContainerState.EXITED_WITH_SUCCESS).contains(\n           container.getContainerState())) {\n-\n-        // Check for the authorization.\n-        String remoteUser \u003d request().getRemoteUser();\n-        UserGroupInformation callerUGI \u003d null;\n-        if (remoteUser !\u003d null) {\n-          callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n-        }\n-        if (callerUGI !\u003d null \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n-            ApplicationAccessType.VIEW_APP, application.getUser(),\n-                applicationId)) {\n-          div.h1(\n-              \"You (User \" + remoteUser\n-                  + \") are not authorized to view the logs for application \"\n-                  + applicationId)._();\n-          return;\n-        }\n-\n-        if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n-          File logFile \u003d null;\n-          try {\n-            logFile \u003d\n-                new File(this.logsSelector\n-                    .getLocalPathToRead(\n-                        ConverterUtils.toString(\n-                            applicationId)\n-                            + Path.SEPARATOR + $(CONTAINER_ID)\n-                            + Path.SEPARATOR\n-                            + $(CONTAINER_LOG_TYPE), this.conf).toUri()\n-                    .getPath());\n-          } catch (Exception e) {\n-            div.h1(\"Cannot find this log on the local disk.\")._();\n-          }\n-          div.h1(logFile \u003d\u003d null ? \"Unknown LogFile\" : logFile.getName());\n-          long start \u003d\n-              $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n-          start \u003d start \u003c 0 ? logFile.length() + start : start;\n-          start \u003d start \u003c 0 ? 0 : start;\n-          long end \u003d\n-              $(\"end\").isEmpty() ? logFile.length() : Long\n-                  .parseLong($(\"end\"));\n-          end \u003d end \u003c 0 ? logFile.length() + end : end;\n-          end \u003d end \u003c 0 ? logFile.length() : end;\n-          if (start \u003e end) {\n-            writer().write(\"Invalid start and end values!\");\n-          } else {\n-          try {\n-            long toRead \u003d end - start;\n-            if (toRead \u003c logFile.length()) {\n-                div._(\"Showing \" + toRead + \" bytes. Click \")\n-                    .a(url(\"containerlogs\", $(CONTAINER_ID),\n-                        logFile.getName()), \"here\")\n-                    ._(\" for full log\").br()._();\n-            }\n-            // TODO: Use secure IO Utils to avoid symlink attacks.\n-            //TODO Fix findBugs close warning along with IOUtils change\n-            FileReader reader \u003d new FileReader(logFile);\n-            char[] cbuf \u003d new char[65536];\n-            reader.skip(start);\n-            int len \u003d 0;\n-            int totalRead \u003d 0;\n-            writer().write(\"\u003cpre\u003e\");\n-            while ((len \u003d reader.read(cbuf, 0, (int) toRead)) \u003e 0\n-                \u0026\u0026 totalRead \u003c (end - start)) {\n-              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n-              totalRead +\u003d len;\n-              toRead \u003d toRead - totalRead;\n-            }\n-            reader.close();\n-            writer().write(\"\u003c/pre\u003e\");\n-          } catch (IOException e) {\n-              writer().write(\n-                  \"Exception reading log-file \"\n-                      + StringUtils.stringifyException(e));\n-          } \n-        }\n-          div._();\n-        } else {\n-          // Just print out the log-types\n-          List\u003cFile\u003e containerLogsDirs \u003d\n-              getContainerLogDirs(this.conf, containerId);\n-          for (File containerLogsDir : containerLogsDirs) {\n-            for (File logFile : containerLogsDir.listFiles()) {\n-              div\n-                  .p()\n-                  .a(\n-                      url(\"containerlogs\", $(CONTAINER_ID),\n-                          logFile.getName(), \"?start\u003d-4076\"),\n-                      logFile.getName() + \" : Total file length is \"\n-                          + logFile.length() + \" bytes.\")\n-                  ._();\n-            }\n-          }\n-          div._();\n-        }\n+        printLogs(html, containerId, applicationId, application);\n+        return;\n+      }\n+      if (EnumSet.of(ContainerState.KILLING,\n+          ContainerState.CONTAINER_CLEANEDUP_AFTER_KILL,\n+          ContainerState.CONTAINER_RESOURCES_CLEANINGUP).contains(\n+          container.getContainerState())) {\n+        //Container may have generated some logs before being killed.\n+        printLogs(html, containerId, applicationId, application);\n+        return;\n+      }\n+      if (container.getContainerState().equals(ContainerState.DONE)) {\n+        // Prev state unknown. Logs may be available.\n+        printLogs(html, containerId, applicationId, application);\n+        return;\n       } else {\n-        div.h1(\"Container is no longer running..\")._();\n+        html.h1(\"Container is no longer running...\");\n+        return;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n\n      String redirectUrl \u003d $(REDIRECT_URL);\n      if (redirectUrl !\u003dnull \u0026\u0026 redirectUrl.equals(\"false\")) {\n        html.h1(\"Failed while trying to construct the redirect url to the log\" +\n        \t\t\" server. Log Server url may not be configured\");\n        //Intentional fallthrough.\n      }\n      \n      ContainerId containerId;\n      try {\n        containerId \u003d ConverterUtils.toContainerId($(CONTAINER_ID));\n      } catch (IllegalArgumentException e) {\n        html.h1(\"Invalid containerId \" + $(CONTAINER_ID));\n        return;\n      }\n\n      ApplicationId applicationId \u003d containerId.getApplicationAttemptId()\n          .getApplicationId();\n      Application application \u003d this.nmContext.getApplications().get(\n          applicationId);\n      Container container \u003d this.nmContext.getContainers().get(containerId);\n\n      if (application \u003d\u003d null) {\n        html.h1(\n            \"Unknown container. Container either has not started or \"\n                + \"has already completed or \"\n                + \"doesn\u0027t belong to this node at all.\");\n        return;\n      }\n      if (container \u003d\u003d null) {\n        // Container may have alerady completed, but logs not aggregated yet.\n        printLogs(html, containerId, applicationId, application);\n        return;\n      }\n\n      if (EnumSet.of(ContainerState.NEW, ContainerState.LOCALIZING,\n          ContainerState.LOCALIZED).contains(container.getContainerState())) {\n        html.h1(\"Container is not yet running. Current state is \"\n                + container.getContainerState());\n        return;\n      }\n\n      if (container.getContainerState() \u003d\u003d ContainerState.LOCALIZATION_FAILED) {\n        html.h1(\"Container wasn\u0027t started. Localization failed.\");\n        return;\n      }\n\n      if (EnumSet.of(ContainerState.RUNNING,\n          ContainerState.EXITED_WITH_FAILURE,\n          ContainerState.EXITED_WITH_SUCCESS).contains(\n          container.getContainerState())) {\n        printLogs(html, containerId, applicationId, application);\n        return;\n      }\n      if (EnumSet.of(ContainerState.KILLING,\n          ContainerState.CONTAINER_CLEANEDUP_AFTER_KILL,\n          ContainerState.CONTAINER_RESOURCES_CLEANINGUP).contains(\n          container.getContainerState())) {\n        //Container may have generated some logs before being killed.\n        printLogs(html, containerId, applicationId, application);\n        return;\n      }\n      if (container.getContainerState().equals(ContainerState.DONE)) {\n        // Prev state unknown. Logs may be available.\n        printLogs(html, containerId, applicationId, application);\n        return;\n      } else {\n        html.h1(\"Container is no longer running...\");\n        return;\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {}
    },
    "df2991c0cbc3f35c2640b93680667507c4f810dd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/10/11 4:45 AM",
      "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/10/11 10:21 PM",
      "commitNameOld": "13e4562924a6cb3d16c262e0f595b2ffbf9e0546",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.27,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,109 +1,135 @@\n     protected void render(Block html) {\n       DIV\u003cHamlet\u003e div \u003d html.div(\"#content\");\n \n       ContainerId containerId;\n       try {\n         containerId \u003d ConverterUtils.toContainerId($(CONTAINER_ID));\n       } catch (IllegalArgumentException e) {\n         div.h1(\"Invalid containerId \" + $(CONTAINER_ID))._();\n         return;\n       }\n \n+      ApplicationId applicationId \u003d containerId.getApplicationAttemptId()\n+          .getApplicationId();\n+      Application application \u003d this.nmContext.getApplications().get(\n+          applicationId);\n       Container container \u003d this.nmContext.getContainers().get(containerId);\n \n-      if (container \u003d\u003d null) {\n+      if (application \u003d\u003d null || container \u003d\u003d null) {\n         div.h1(\n             \"Unknown container. Container is either not yet running or \"\n                 + \"has already completed or \"\n                 + \"doesn\u0027t belong to this node at all.\")._();\n-      } else if (EnumSet.of(ContainerState.NEW, ContainerState.LOCALIZING,\n+        return;\n+      }\n+\n+      if (EnumSet.of(ContainerState.NEW, ContainerState.LOCALIZING,\n           ContainerState.LOCALIZING).contains(container.getContainerState())) {\n         div.h1(\"Container is not yet running. Current state is \"\n                 + container.getContainerState())\n               ._();\n-      } else if (EnumSet.of(ContainerState.RUNNING,\n+        return;\n+      }\n+\n+      if (EnumSet.of(ContainerState.RUNNING,\n           ContainerState.EXITED_WITH_FAILURE,\n           ContainerState.EXITED_WITH_SUCCESS).contains(\n           container.getContainerState())) {\n \n+        // Check for the authorization.\n+        String remoteUser \u003d request().getRemoteUser();\n+        UserGroupInformation callerUGI \u003d null;\n+        if (remoteUser !\u003d null) {\n+          callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n+        }\n+        if (callerUGI !\u003d null \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n+            ApplicationAccessType.VIEW_APP, application.getUser(),\n+                applicationId)) {\n+          div.h1(\n+              \"You (User \" + remoteUser\n+                  + \") are not authorized to view the logs for application \"\n+                  + applicationId)._();\n+          return;\n+        }\n+\n         if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n           File logFile \u003d null;\n           try {\n             logFile \u003d\n                 new File(this.logsSelector\n                     .getLocalPathToRead(\n                         ConverterUtils.toString(\n-                            containerId.getApplicationAttemptId().getApplicationId())\n+                            applicationId)\n                             + Path.SEPARATOR + $(CONTAINER_ID)\n                             + Path.SEPARATOR\n                             + $(CONTAINER_LOG_TYPE), this.conf).toUri()\n                     .getPath());\n           } catch (Exception e) {\n             div.h1(\"Cannot find this log on the local disk.\")._();\n           }\n           div.h1(logFile \u003d\u003d null ? \"Unknown LogFile\" : logFile.getName());\n           long start \u003d\n               $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n           start \u003d start \u003c 0 ? logFile.length() + start : start;\n           start \u003d start \u003c 0 ? 0 : start;\n           long end \u003d\n               $(\"end\").isEmpty() ? logFile.length() : Long\n                   .parseLong($(\"end\"));\n           end \u003d end \u003c 0 ? logFile.length() + end : end;\n           end \u003d end \u003c 0 ? logFile.length() : end;\n           if (start \u003e end) {\n             writer().write(\"Invalid start and end values!\");\n           } else {\n           try {\n             long toRead \u003d end - start;\n             if (toRead \u003c logFile.length()) {\n                 div._(\"Showing \" + toRead + \" bytes. Click \")\n                     .a(url(\"containerlogs\", $(CONTAINER_ID),\n                         logFile.getName()), \"here\")\n                     ._(\" for full log\").br()._();\n             }\n             // TODO: Use secure IO Utils to avoid symlink attacks.\n             //TODO Fix findBugs close warning along with IOUtils change\n             FileReader reader \u003d new FileReader(logFile);\n             char[] cbuf \u003d new char[65536];\n             reader.skip(start);\n             int len \u003d 0;\n             int totalRead \u003d 0;\n             writer().write(\"\u003cpre\u003e\");\n             while ((len \u003d reader.read(cbuf, 0, (int) toRead)) \u003e 0\n                 \u0026\u0026 totalRead \u003c (end - start)) {\n               writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n               totalRead +\u003d len;\n               toRead \u003d toRead - totalRead;\n             }\n             reader.close();\n             writer().write(\"\u003c/pre\u003e\");\n           } catch (IOException e) {\n               writer().write(\n                   \"Exception reading log-file \"\n                       + StringUtils.stringifyException(e));\n           } \n         }\n           div._();\n         } else {\n           // Just print out the log-types\n           List\u003cFile\u003e containerLogsDirs \u003d\n               getContainerLogDirs(this.conf, containerId);\n           for (File containerLogsDir : containerLogsDirs) {\n             for (File logFile : containerLogsDir.listFiles()) {\n               div\n                   .p()\n                   .a(\n                       url(\"containerlogs\", $(CONTAINER_ID),\n                           logFile.getName(), \"?start\u003d-4076\"),\n                       logFile.getName() + \" : Total file length is \"\n                           + logFile.length() + \" bytes.\")\n                   ._();\n             }\n           }\n           div._();\n         }\n       } else {\n         div.h1(\"Container is no longer running..\")._();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      DIV\u003cHamlet\u003e div \u003d html.div(\"#content\");\n\n      ContainerId containerId;\n      try {\n        containerId \u003d ConverterUtils.toContainerId($(CONTAINER_ID));\n      } catch (IllegalArgumentException e) {\n        div.h1(\"Invalid containerId \" + $(CONTAINER_ID))._();\n        return;\n      }\n\n      ApplicationId applicationId \u003d containerId.getApplicationAttemptId()\n          .getApplicationId();\n      Application application \u003d this.nmContext.getApplications().get(\n          applicationId);\n      Container container \u003d this.nmContext.getContainers().get(containerId);\n\n      if (application \u003d\u003d null || container \u003d\u003d null) {\n        div.h1(\n            \"Unknown container. Container is either not yet running or \"\n                + \"has already completed or \"\n                + \"doesn\u0027t belong to this node at all.\")._();\n        return;\n      }\n\n      if (EnumSet.of(ContainerState.NEW, ContainerState.LOCALIZING,\n          ContainerState.LOCALIZING).contains(container.getContainerState())) {\n        div.h1(\"Container is not yet running. Current state is \"\n                + container.getContainerState())\n              ._();\n        return;\n      }\n\n      if (EnumSet.of(ContainerState.RUNNING,\n          ContainerState.EXITED_WITH_FAILURE,\n          ContainerState.EXITED_WITH_SUCCESS).contains(\n          container.getContainerState())) {\n\n        // Check for the authorization.\n        String remoteUser \u003d request().getRemoteUser();\n        UserGroupInformation callerUGI \u003d null;\n        if (remoteUser !\u003d null) {\n          callerUGI \u003d UserGroupInformation.createRemoteUser(remoteUser);\n        }\n        if (callerUGI !\u003d null \u0026\u0026 !this.aclsManager.checkAccess(callerUGI,\n            ApplicationAccessType.VIEW_APP, application.getUser(),\n                applicationId)) {\n          div.h1(\n              \"You (User \" + remoteUser\n                  + \") are not authorized to view the logs for application \"\n                  + applicationId)._();\n          return;\n        }\n\n        if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n          File logFile \u003d null;\n          try {\n            logFile \u003d\n                new File(this.logsSelector\n                    .getLocalPathToRead(\n                        ConverterUtils.toString(\n                            applicationId)\n                            + Path.SEPARATOR + $(CONTAINER_ID)\n                            + Path.SEPARATOR\n                            + $(CONTAINER_LOG_TYPE), this.conf).toUri()\n                    .getPath());\n          } catch (Exception e) {\n            div.h1(\"Cannot find this log on the local disk.\")._();\n          }\n          div.h1(logFile \u003d\u003d null ? \"Unknown LogFile\" : logFile.getName());\n          long start \u003d\n              $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n          start \u003d start \u003c 0 ? logFile.length() + start : start;\n          start \u003d start \u003c 0 ? 0 : start;\n          long end \u003d\n              $(\"end\").isEmpty() ? logFile.length() : Long\n                  .parseLong($(\"end\"));\n          end \u003d end \u003c 0 ? logFile.length() + end : end;\n          end \u003d end \u003c 0 ? logFile.length() : end;\n          if (start \u003e end) {\n            writer().write(\"Invalid start and end values!\");\n          } else {\n          try {\n            long toRead \u003d end - start;\n            if (toRead \u003c logFile.length()) {\n                div._(\"Showing \" + toRead + \" bytes. Click \")\n                    .a(url(\"containerlogs\", $(CONTAINER_ID),\n                        logFile.getName()), \"here\")\n                    ._(\" for full log\").br()._();\n            }\n            // TODO: Use secure IO Utils to avoid symlink attacks.\n            //TODO Fix findBugs close warning along with IOUtils change\n            FileReader reader \u003d new FileReader(logFile);\n            char[] cbuf \u003d new char[65536];\n            reader.skip(start);\n            int len \u003d 0;\n            int totalRead \u003d 0;\n            writer().write(\"\u003cpre\u003e\");\n            while ((len \u003d reader.read(cbuf, 0, (int) toRead)) \u003e 0\n                \u0026\u0026 totalRead \u003c (end - start)) {\n              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n              totalRead +\u003d len;\n              toRead \u003d toRead - totalRead;\n            }\n            reader.close();\n            writer().write(\"\u003c/pre\u003e\");\n          } catch (IOException e) {\n              writer().write(\n                  \"Exception reading log-file \"\n                      + StringUtils.stringifyException(e));\n          } \n        }\n          div._();\n        } else {\n          // Just print out the log-types\n          List\u003cFile\u003e containerLogsDirs \u003d\n              getContainerLogDirs(this.conf, containerId);\n          for (File containerLogsDir : containerLogsDirs) {\n            for (File logFile : containerLogsDir.listFiles()) {\n              div\n                  .p()\n                  .a(\n                      url(\"containerlogs\", $(CONTAINER_ID),\n                          logFile.getName(), \"?start\u003d-4076\"),\n                      logFile.getName() + \" : Total file length is \"\n                          + logFile.length() + \" bytes.\")\n                  ._();\n            }\n          }\n          div._();\n        }\n      } else {\n        div.h1(\"Container is no longer running..\")._();\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {}
    },
    "13e4562924a6cb3d16c262e0f595b2ffbf9e0546": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3144. Augmented JobHistory with the information needed for serving aggregated logs. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1185976 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/10/11 10:21 PM",
      "commitName": "13e4562924a6cb3d16c262e0f595b2ffbf9e0546",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "23/09/11 7:07 AM",
      "commitNameOld": "b549c107825581b15fd14494099a943ff3213c6f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 25.63,
      "commitsBetweenForRepo": 192,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,109 +1,109 @@\n     protected void render(Block html) {\n       DIV\u003cHamlet\u003e div \u003d html.div(\"#content\");\n \n       ContainerId containerId;\n       try {\n         containerId \u003d ConverterUtils.toContainerId($(CONTAINER_ID));\n-      } catch (IOException e) {\n+      } catch (IllegalArgumentException e) {\n         div.h1(\"Invalid containerId \" + $(CONTAINER_ID))._();\n         return;\n       }\n \n       Container container \u003d this.nmContext.getContainers().get(containerId);\n \n       if (container \u003d\u003d null) {\n         div.h1(\n             \"Unknown container. Container is either not yet running or \"\n                 + \"has already completed or \"\n                 + \"doesn\u0027t belong to this node at all.\")._();\n       } else if (EnumSet.of(ContainerState.NEW, ContainerState.LOCALIZING,\n           ContainerState.LOCALIZING).contains(container.getContainerState())) {\n         div.h1(\"Container is not yet running. Current state is \"\n                 + container.getContainerState())\n               ._();\n       } else if (EnumSet.of(ContainerState.RUNNING,\n           ContainerState.EXITED_WITH_FAILURE,\n           ContainerState.EXITED_WITH_SUCCESS).contains(\n           container.getContainerState())) {\n \n         if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n           File logFile \u003d null;\n           try {\n             logFile \u003d\n                 new File(this.logsSelector\n                     .getLocalPathToRead(\n                         ConverterUtils.toString(\n                             containerId.getApplicationAttemptId().getApplicationId())\n                             + Path.SEPARATOR + $(CONTAINER_ID)\n                             + Path.SEPARATOR\n                             + $(CONTAINER_LOG_TYPE), this.conf).toUri()\n                     .getPath());\n           } catch (Exception e) {\n             div.h1(\"Cannot find this log on the local disk.\")._();\n           }\n           div.h1(logFile \u003d\u003d null ? \"Unknown LogFile\" : logFile.getName());\n           long start \u003d\n               $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n           start \u003d start \u003c 0 ? logFile.length() + start : start;\n           start \u003d start \u003c 0 ? 0 : start;\n           long end \u003d\n               $(\"end\").isEmpty() ? logFile.length() : Long\n                   .parseLong($(\"end\"));\n           end \u003d end \u003c 0 ? logFile.length() + end : end;\n           end \u003d end \u003c 0 ? logFile.length() : end;\n           if (start \u003e end) {\n             writer().write(\"Invalid start and end values!\");\n           } else {\n           try {\n             long toRead \u003d end - start;\n             if (toRead \u003c logFile.length()) {\n                 div._(\"Showing \" + toRead + \" bytes. Click \")\n                     .a(url(\"containerlogs\", $(CONTAINER_ID),\n                         logFile.getName()), \"here\")\n                     ._(\" for full log\").br()._();\n             }\n             // TODO: Use secure IO Utils to avoid symlink attacks.\n             //TODO Fix findBugs close warning along with IOUtils change\n             FileReader reader \u003d new FileReader(logFile);\n             char[] cbuf \u003d new char[65536];\n             reader.skip(start);\n             int len \u003d 0;\n             int totalRead \u003d 0;\n             writer().write(\"\u003cpre\u003e\");\n             while ((len \u003d reader.read(cbuf, 0, (int) toRead)) \u003e 0\n                 \u0026\u0026 totalRead \u003c (end - start)) {\n               writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n               totalRead +\u003d len;\n               toRead \u003d toRead - totalRead;\n             }\n             reader.close();\n             writer().write(\"\u003c/pre\u003e\");\n           } catch (IOException e) {\n               writer().write(\n                   \"Exception reading log-file \"\n                       + StringUtils.stringifyException(e));\n           } \n         }\n           div._();\n         } else {\n           // Just print out the log-types\n           List\u003cFile\u003e containerLogsDirs \u003d\n               getContainerLogDirs(this.conf, containerId);\n           for (File containerLogsDir : containerLogsDirs) {\n             for (File logFile : containerLogsDir.listFiles()) {\n               div\n                   .p()\n                   .a(\n                       url(\"containerlogs\", $(CONTAINER_ID),\n                           logFile.getName(), \"?start\u003d-4076\"),\n                       logFile.getName() + \" : Total file length is \"\n                           + logFile.length() + \" bytes.\")\n                   ._();\n             }\n           }\n           div._();\n         }\n       } else {\n         div.h1(\"Container is no longer running..\")._();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      DIV\u003cHamlet\u003e div \u003d html.div(\"#content\");\n\n      ContainerId containerId;\n      try {\n        containerId \u003d ConverterUtils.toContainerId($(CONTAINER_ID));\n      } catch (IllegalArgumentException e) {\n        div.h1(\"Invalid containerId \" + $(CONTAINER_ID))._();\n        return;\n      }\n\n      Container container \u003d this.nmContext.getContainers().get(containerId);\n\n      if (container \u003d\u003d null) {\n        div.h1(\n            \"Unknown container. Container is either not yet running or \"\n                + \"has already completed or \"\n                + \"doesn\u0027t belong to this node at all.\")._();\n      } else if (EnumSet.of(ContainerState.NEW, ContainerState.LOCALIZING,\n          ContainerState.LOCALIZING).contains(container.getContainerState())) {\n        div.h1(\"Container is not yet running. Current state is \"\n                + container.getContainerState())\n              ._();\n      } else if (EnumSet.of(ContainerState.RUNNING,\n          ContainerState.EXITED_WITH_FAILURE,\n          ContainerState.EXITED_WITH_SUCCESS).contains(\n          container.getContainerState())) {\n\n        if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n          File logFile \u003d null;\n          try {\n            logFile \u003d\n                new File(this.logsSelector\n                    .getLocalPathToRead(\n                        ConverterUtils.toString(\n                            containerId.getApplicationAttemptId().getApplicationId())\n                            + Path.SEPARATOR + $(CONTAINER_ID)\n                            + Path.SEPARATOR\n                            + $(CONTAINER_LOG_TYPE), this.conf).toUri()\n                    .getPath());\n          } catch (Exception e) {\n            div.h1(\"Cannot find this log on the local disk.\")._();\n          }\n          div.h1(logFile \u003d\u003d null ? \"Unknown LogFile\" : logFile.getName());\n          long start \u003d\n              $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n          start \u003d start \u003c 0 ? logFile.length() + start : start;\n          start \u003d start \u003c 0 ? 0 : start;\n          long end \u003d\n              $(\"end\").isEmpty() ? logFile.length() : Long\n                  .parseLong($(\"end\"));\n          end \u003d end \u003c 0 ? logFile.length() + end : end;\n          end \u003d end \u003c 0 ? logFile.length() : end;\n          if (start \u003e end) {\n            writer().write(\"Invalid start and end values!\");\n          } else {\n          try {\n            long toRead \u003d end - start;\n            if (toRead \u003c logFile.length()) {\n                div._(\"Showing \" + toRead + \" bytes. Click \")\n                    .a(url(\"containerlogs\", $(CONTAINER_ID),\n                        logFile.getName()), \"here\")\n                    ._(\" for full log\").br()._();\n            }\n            // TODO: Use secure IO Utils to avoid symlink attacks.\n            //TODO Fix findBugs close warning along with IOUtils change\n            FileReader reader \u003d new FileReader(logFile);\n            char[] cbuf \u003d new char[65536];\n            reader.skip(start);\n            int len \u003d 0;\n            int totalRead \u003d 0;\n            writer().write(\"\u003cpre\u003e\");\n            while ((len \u003d reader.read(cbuf, 0, (int) toRead)) \u003e 0\n                \u0026\u0026 totalRead \u003c (end - start)) {\n              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n              totalRead +\u003d len;\n              toRead \u003d toRead - totalRead;\n            }\n            reader.close();\n            writer().write(\"\u003c/pre\u003e\");\n          } catch (IOException e) {\n              writer().write(\n                  \"Exception reading log-file \"\n                      + StringUtils.stringifyException(e));\n          } \n        }\n          div._();\n        } else {\n          // Just print out the log-types\n          List\u003cFile\u003e containerLogsDirs \u003d\n              getContainerLogDirs(this.conf, containerId);\n          for (File containerLogsDir : containerLogsDirs) {\n            for (File logFile : containerLogsDir.listFiles()) {\n              div\n                  .p()\n                  .a(\n                      url(\"containerlogs\", $(CONTAINER_ID),\n                          logFile.getName(), \"?start\u003d-4076\"),\n                      logFile.getName() + \" : Total file length is \"\n                          + logFile.length() + \" bytes.\")\n                  ._();\n            }\n          }\n          div._();\n        }\n      } else {\n        div.h1(\"Container is no longer running..\")._();\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {}
    },
    "b549c107825581b15fd14494099a943ff3213c6f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3055. Simplified ApplicationAttemptId passing to ApplicationMaster via environment variable. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1174785 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/09/11 7:07 AM",
      "commitName": "b549c107825581b15fd14494099a943ff3213c6f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/09/11 5:05 PM",
      "commitNameOld": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 10.58,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,103 +1,109 @@\n     protected void render(Block html) {\n       DIV\u003cHamlet\u003e div \u003d html.div(\"#content\");\n \n-      ContainerId containerId \u003d\n-        ConverterUtils.toContainerId(this.recordFactory, $(CONTAINER_ID));\n+      ContainerId containerId;\n+      try {\n+        containerId \u003d ConverterUtils.toContainerId($(CONTAINER_ID));\n+      } catch (IOException e) {\n+        div.h1(\"Invalid containerId \" + $(CONTAINER_ID))._();\n+        return;\n+      }\n+\n       Container container \u003d this.nmContext.getContainers().get(containerId);\n \n       if (container \u003d\u003d null) {\n         div.h1(\n             \"Unknown container. Container is either not yet running or \"\n                 + \"has already completed or \"\n                 + \"doesn\u0027t belong to this node at all.\")._();\n       } else if (EnumSet.of(ContainerState.NEW, ContainerState.LOCALIZING,\n           ContainerState.LOCALIZING).contains(container.getContainerState())) {\n         div.h1(\"Container is not yet running. Current state is \"\n                 + container.getContainerState())\n               ._();\n       } else if (EnumSet.of(ContainerState.RUNNING,\n           ContainerState.EXITED_WITH_FAILURE,\n           ContainerState.EXITED_WITH_SUCCESS).contains(\n           container.getContainerState())) {\n \n         if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n           File logFile \u003d null;\n           try {\n             logFile \u003d\n                 new File(this.logsSelector\n                     .getLocalPathToRead(\n                         ConverterUtils.toString(\n                             containerId.getApplicationAttemptId().getApplicationId())\n                             + Path.SEPARATOR + $(CONTAINER_ID)\n                             + Path.SEPARATOR\n                             + $(CONTAINER_LOG_TYPE), this.conf).toUri()\n                     .getPath());\n           } catch (Exception e) {\n             div.h1(\"Cannot find this log on the local disk.\")._();\n           }\n           div.h1(logFile \u003d\u003d null ? \"Unknown LogFile\" : logFile.getName());\n           long start \u003d\n               $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n           start \u003d start \u003c 0 ? logFile.length() + start : start;\n           start \u003d start \u003c 0 ? 0 : start;\n           long end \u003d\n               $(\"end\").isEmpty() ? logFile.length() : Long\n                   .parseLong($(\"end\"));\n           end \u003d end \u003c 0 ? logFile.length() + end : end;\n           end \u003d end \u003c 0 ? logFile.length() : end;\n           if (start \u003e end) {\n             writer().write(\"Invalid start and end values!\");\n           } else {\n           try {\n             long toRead \u003d end - start;\n             if (toRead \u003c logFile.length()) {\n                 div._(\"Showing \" + toRead + \" bytes. Click \")\n                     .a(url(\"containerlogs\", $(CONTAINER_ID),\n                         logFile.getName()), \"here\")\n                     ._(\" for full log\").br()._();\n             }\n             // TODO: Use secure IO Utils to avoid symlink attacks.\n             //TODO Fix findBugs close warning along with IOUtils change\n             FileReader reader \u003d new FileReader(logFile);\n             char[] cbuf \u003d new char[65536];\n             reader.skip(start);\n             int len \u003d 0;\n             int totalRead \u003d 0;\n             writer().write(\"\u003cpre\u003e\");\n             while ((len \u003d reader.read(cbuf, 0, (int) toRead)) \u003e 0\n                 \u0026\u0026 totalRead \u003c (end - start)) {\n               writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n               totalRead +\u003d len;\n               toRead \u003d toRead - totalRead;\n             }\n             reader.close();\n             writer().write(\"\u003c/pre\u003e\");\n           } catch (IOException e) {\n               writer().write(\n                   \"Exception reading log-file \"\n                       + StringUtils.stringifyException(e));\n           } \n         }\n           div._();\n         } else {\n           // Just print out the log-types\n           List\u003cFile\u003e containerLogsDirs \u003d\n               getContainerLogDirs(this.conf, containerId);\n           for (File containerLogsDir : containerLogsDirs) {\n             for (File logFile : containerLogsDir.listFiles()) {\n               div\n                   .p()\n                   .a(\n                       url(\"containerlogs\", $(CONTAINER_ID),\n                           logFile.getName(), \"?start\u003d-4076\"),\n                       logFile.getName() + \" : Total file length is \"\n                           + logFile.length() + \" bytes.\")\n                   ._();\n             }\n           }\n           div._();\n         }\n       } else {\n         div.h1(\"Container is no longer running..\")._();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      DIV\u003cHamlet\u003e div \u003d html.div(\"#content\");\n\n      ContainerId containerId;\n      try {\n        containerId \u003d ConverterUtils.toContainerId($(CONTAINER_ID));\n      } catch (IOException e) {\n        div.h1(\"Invalid containerId \" + $(CONTAINER_ID))._();\n        return;\n      }\n\n      Container container \u003d this.nmContext.getContainers().get(containerId);\n\n      if (container \u003d\u003d null) {\n        div.h1(\n            \"Unknown container. Container is either not yet running or \"\n                + \"has already completed or \"\n                + \"doesn\u0027t belong to this node at all.\")._();\n      } else if (EnumSet.of(ContainerState.NEW, ContainerState.LOCALIZING,\n          ContainerState.LOCALIZING).contains(container.getContainerState())) {\n        div.h1(\"Container is not yet running. Current state is \"\n                + container.getContainerState())\n              ._();\n      } else if (EnumSet.of(ContainerState.RUNNING,\n          ContainerState.EXITED_WITH_FAILURE,\n          ContainerState.EXITED_WITH_SUCCESS).contains(\n          container.getContainerState())) {\n\n        if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n          File logFile \u003d null;\n          try {\n            logFile \u003d\n                new File(this.logsSelector\n                    .getLocalPathToRead(\n                        ConverterUtils.toString(\n                            containerId.getApplicationAttemptId().getApplicationId())\n                            + Path.SEPARATOR + $(CONTAINER_ID)\n                            + Path.SEPARATOR\n                            + $(CONTAINER_LOG_TYPE), this.conf).toUri()\n                    .getPath());\n          } catch (Exception e) {\n            div.h1(\"Cannot find this log on the local disk.\")._();\n          }\n          div.h1(logFile \u003d\u003d null ? \"Unknown LogFile\" : logFile.getName());\n          long start \u003d\n              $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n          start \u003d start \u003c 0 ? logFile.length() + start : start;\n          start \u003d start \u003c 0 ? 0 : start;\n          long end \u003d\n              $(\"end\").isEmpty() ? logFile.length() : Long\n                  .parseLong($(\"end\"));\n          end \u003d end \u003c 0 ? logFile.length() + end : end;\n          end \u003d end \u003c 0 ? logFile.length() : end;\n          if (start \u003e end) {\n            writer().write(\"Invalid start and end values!\");\n          } else {\n          try {\n            long toRead \u003d end - start;\n            if (toRead \u003c logFile.length()) {\n                div._(\"Showing \" + toRead + \" bytes. Click \")\n                    .a(url(\"containerlogs\", $(CONTAINER_ID),\n                        logFile.getName()), \"here\")\n                    ._(\" for full log\").br()._();\n            }\n            // TODO: Use secure IO Utils to avoid symlink attacks.\n            //TODO Fix findBugs close warning along with IOUtils change\n            FileReader reader \u003d new FileReader(logFile);\n            char[] cbuf \u003d new char[65536];\n            reader.skip(start);\n            int len \u003d 0;\n            int totalRead \u003d 0;\n            writer().write(\"\u003cpre\u003e\");\n            while ((len \u003d reader.read(cbuf, 0, (int) toRead)) \u003e 0\n                \u0026\u0026 totalRead \u003c (end - start)) {\n              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n              totalRead +\u003d len;\n              toRead \u003d toRead - totalRead;\n            }\n            reader.close();\n            writer().write(\"\u003c/pre\u003e\");\n          } catch (IOException e) {\n              writer().write(\n                  \"Exception reading log-file \"\n                      + StringUtils.stringifyException(e));\n          } \n        }\n          div._();\n        } else {\n          // Just print out the log-types\n          List\u003cFile\u003e containerLogsDirs \u003d\n              getContainerLogDirs(this.conf, containerId);\n          for (File containerLogsDir : containerLogsDirs) {\n            for (File logFile : containerLogsDir.listFiles()) {\n              div\n                  .p()\n                  .a(\n                      url(\"containerlogs\", $(CONTAINER_ID),\n                          logFile.getName(), \"?start\u003d-4076\"),\n                      logFile.getName() + \" : Total file length is \"\n                          + logFile.length() + \" bytes.\")\n                  ._();\n            }\n          }\n          div._();\n        }\n      } else {\n        div.h1(\"Container is no longer running..\")._();\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {}
    },
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2896. Simplify all apis to in org.apache.hadoop.yarn.api.records.* to be get/set only. Added javadocs to all public records.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169980 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/09/11 5:05 PM",
      "commitName": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "08/09/11 6:44 PM",
      "commitNameOld": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 3.93,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,102 +1,103 @@\n     protected void render(Block html) {\n       DIV\u003cHamlet\u003e div \u003d html.div(\"#content\");\n \n       ContainerId containerId \u003d\n         ConverterUtils.toContainerId(this.recordFactory, $(CONTAINER_ID));\n       Container container \u003d this.nmContext.getContainers().get(containerId);\n \n       if (container \u003d\u003d null) {\n         div.h1(\n             \"Unknown container. Container is either not yet running or \"\n                 + \"has already completed or \"\n                 + \"doesn\u0027t belong to this node at all.\")._();\n       } else if (EnumSet.of(ContainerState.NEW, ContainerState.LOCALIZING,\n           ContainerState.LOCALIZING).contains(container.getContainerState())) {\n         div.h1(\"Container is not yet running. Current state is \"\n                 + container.getContainerState())\n               ._();\n       } else if (EnumSet.of(ContainerState.RUNNING,\n           ContainerState.EXITED_WITH_FAILURE,\n           ContainerState.EXITED_WITH_SUCCESS).contains(\n           container.getContainerState())) {\n \n         if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n           File logFile \u003d null;\n           try {\n             logFile \u003d\n                 new File(this.logsSelector\n                     .getLocalPathToRead(\n-                        ConverterUtils.toString(containerId.getAppId())\n+                        ConverterUtils.toString(\n+                            containerId.getApplicationAttemptId().getApplicationId())\n                             + Path.SEPARATOR + $(CONTAINER_ID)\n                             + Path.SEPARATOR\n                             + $(CONTAINER_LOG_TYPE), this.conf).toUri()\n                     .getPath());\n           } catch (Exception e) {\n             div.h1(\"Cannot find this log on the local disk.\")._();\n           }\n           div.h1(logFile \u003d\u003d null ? \"Unknown LogFile\" : logFile.getName());\n           long start \u003d\n               $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n           start \u003d start \u003c 0 ? logFile.length() + start : start;\n           start \u003d start \u003c 0 ? 0 : start;\n           long end \u003d\n               $(\"end\").isEmpty() ? logFile.length() : Long\n                   .parseLong($(\"end\"));\n           end \u003d end \u003c 0 ? logFile.length() + end : end;\n           end \u003d end \u003c 0 ? logFile.length() : end;\n           if (start \u003e end) {\n             writer().write(\"Invalid start and end values!\");\n           } else {\n           try {\n             long toRead \u003d end - start;\n             if (toRead \u003c logFile.length()) {\n                 div._(\"Showing \" + toRead + \" bytes. Click \")\n                     .a(url(\"containerlogs\", $(CONTAINER_ID),\n                         logFile.getName()), \"here\")\n                     ._(\" for full log\").br()._();\n             }\n             // TODO: Use secure IO Utils to avoid symlink attacks.\n             //TODO Fix findBugs close warning along with IOUtils change\n             FileReader reader \u003d new FileReader(logFile);\n             char[] cbuf \u003d new char[65536];\n             reader.skip(start);\n             int len \u003d 0;\n             int totalRead \u003d 0;\n             writer().write(\"\u003cpre\u003e\");\n             while ((len \u003d reader.read(cbuf, 0, (int) toRead)) \u003e 0\n                 \u0026\u0026 totalRead \u003c (end - start)) {\n               writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n               totalRead +\u003d len;\n               toRead \u003d toRead - totalRead;\n             }\n             reader.close();\n             writer().write(\"\u003c/pre\u003e\");\n           } catch (IOException e) {\n               writer().write(\n                   \"Exception reading log-file \"\n                       + StringUtils.stringifyException(e));\n           } \n         }\n           div._();\n         } else {\n           // Just print out the log-types\n           List\u003cFile\u003e containerLogsDirs \u003d\n               getContainerLogDirs(this.conf, containerId);\n           for (File containerLogsDir : containerLogsDirs) {\n             for (File logFile : containerLogsDir.listFiles()) {\n               div\n                   .p()\n                   .a(\n                       url(\"containerlogs\", $(CONTAINER_ID),\n                           logFile.getName(), \"?start\u003d-4076\"),\n                       logFile.getName() + \" : Total file length is \"\n                           + logFile.length() + \" bytes.\")\n                   ._();\n             }\n           }\n           div._();\n         }\n       } else {\n         div.h1(\"Container is no longer running..\")._();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      DIV\u003cHamlet\u003e div \u003d html.div(\"#content\");\n\n      ContainerId containerId \u003d\n        ConverterUtils.toContainerId(this.recordFactory, $(CONTAINER_ID));\n      Container container \u003d this.nmContext.getContainers().get(containerId);\n\n      if (container \u003d\u003d null) {\n        div.h1(\n            \"Unknown container. Container is either not yet running or \"\n                + \"has already completed or \"\n                + \"doesn\u0027t belong to this node at all.\")._();\n      } else if (EnumSet.of(ContainerState.NEW, ContainerState.LOCALIZING,\n          ContainerState.LOCALIZING).contains(container.getContainerState())) {\n        div.h1(\"Container is not yet running. Current state is \"\n                + container.getContainerState())\n              ._();\n      } else if (EnumSet.of(ContainerState.RUNNING,\n          ContainerState.EXITED_WITH_FAILURE,\n          ContainerState.EXITED_WITH_SUCCESS).contains(\n          container.getContainerState())) {\n\n        if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n          File logFile \u003d null;\n          try {\n            logFile \u003d\n                new File(this.logsSelector\n                    .getLocalPathToRead(\n                        ConverterUtils.toString(\n                            containerId.getApplicationAttemptId().getApplicationId())\n                            + Path.SEPARATOR + $(CONTAINER_ID)\n                            + Path.SEPARATOR\n                            + $(CONTAINER_LOG_TYPE), this.conf).toUri()\n                    .getPath());\n          } catch (Exception e) {\n            div.h1(\"Cannot find this log on the local disk.\")._();\n          }\n          div.h1(logFile \u003d\u003d null ? \"Unknown LogFile\" : logFile.getName());\n          long start \u003d\n              $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n          start \u003d start \u003c 0 ? logFile.length() + start : start;\n          start \u003d start \u003c 0 ? 0 : start;\n          long end \u003d\n              $(\"end\").isEmpty() ? logFile.length() : Long\n                  .parseLong($(\"end\"));\n          end \u003d end \u003c 0 ? logFile.length() + end : end;\n          end \u003d end \u003c 0 ? logFile.length() : end;\n          if (start \u003e end) {\n            writer().write(\"Invalid start and end values!\");\n          } else {\n          try {\n            long toRead \u003d end - start;\n            if (toRead \u003c logFile.length()) {\n                div._(\"Showing \" + toRead + \" bytes. Click \")\n                    .a(url(\"containerlogs\", $(CONTAINER_ID),\n                        logFile.getName()), \"here\")\n                    ._(\" for full log\").br()._();\n            }\n            // TODO: Use secure IO Utils to avoid symlink attacks.\n            //TODO Fix findBugs close warning along with IOUtils change\n            FileReader reader \u003d new FileReader(logFile);\n            char[] cbuf \u003d new char[65536];\n            reader.skip(start);\n            int len \u003d 0;\n            int totalRead \u003d 0;\n            writer().write(\"\u003cpre\u003e\");\n            while ((len \u003d reader.read(cbuf, 0, (int) toRead)) \u003e 0\n                \u0026\u0026 totalRead \u003c (end - start)) {\n              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n              totalRead +\u003d len;\n              toRead \u003d toRead - totalRead;\n            }\n            reader.close();\n            writer().write(\"\u003c/pre\u003e\");\n          } catch (IOException e) {\n              writer().write(\n                  \"Exception reading log-file \"\n                      + StringUtils.stringifyException(e));\n          } \n        }\n          div._();\n        } else {\n          // Just print out the log-types\n          List\u003cFile\u003e containerLogsDirs \u003d\n              getContainerLogDirs(this.conf, containerId);\n          for (File containerLogsDir : containerLogsDirs) {\n            for (File logFile : containerLogsDir.listFiles()) {\n              div\n                  .p()\n                  .a(\n                      url(\"containerlogs\", $(CONTAINER_ID),\n                          logFile.getName(), \"?start\u003d-4076\"),\n                      logFile.getName() + \" : Total file length is \"\n                          + logFile.length() + \" bytes.\")\n                  ._();\n            }\n          }\n          div._();\n        }\n      } else {\n        div.h1(\"Container is no longer running..\")._();\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected void render(Block html) {\n      DIV\u003cHamlet\u003e div \u003d html.div(\"#content\");\n\n      ContainerId containerId \u003d\n        ConverterUtils.toContainerId(this.recordFactory, $(CONTAINER_ID));\n      Container container \u003d this.nmContext.getContainers().get(containerId);\n\n      if (container \u003d\u003d null) {\n        div.h1(\n            \"Unknown container. Container is either not yet running or \"\n                + \"has already completed or \"\n                + \"doesn\u0027t belong to this node at all.\")._();\n      } else if (EnumSet.of(ContainerState.NEW, ContainerState.LOCALIZING,\n          ContainerState.LOCALIZING).contains(container.getContainerState())) {\n        div.h1(\"Container is not yet running. Current state is \"\n                + container.getContainerState())\n              ._();\n      } else if (EnumSet.of(ContainerState.RUNNING,\n          ContainerState.EXITED_WITH_FAILURE,\n          ContainerState.EXITED_WITH_SUCCESS).contains(\n          container.getContainerState())) {\n\n        if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n          File logFile \u003d null;\n          try {\n            logFile \u003d\n                new File(this.logsSelector\n                    .getLocalPathToRead(\n                        ConverterUtils.toString(containerId.getAppId())\n                            + Path.SEPARATOR + $(CONTAINER_ID)\n                            + Path.SEPARATOR\n                            + $(CONTAINER_LOG_TYPE), this.conf).toUri()\n                    .getPath());\n          } catch (Exception e) {\n            div.h1(\"Cannot find this log on the local disk.\")._();\n          }\n          div.h1(logFile \u003d\u003d null ? \"Unknown LogFile\" : logFile.getName());\n          long start \u003d\n              $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n          start \u003d start \u003c 0 ? logFile.length() + start : start;\n          start \u003d start \u003c 0 ? 0 : start;\n          long end \u003d\n              $(\"end\").isEmpty() ? logFile.length() : Long\n                  .parseLong($(\"end\"));\n          end \u003d end \u003c 0 ? logFile.length() + end : end;\n          end \u003d end \u003c 0 ? logFile.length() : end;\n          if (start \u003e end) {\n            writer().write(\"Invalid start and end values!\");\n          } else {\n          try {\n            long toRead \u003d end - start;\n            if (toRead \u003c logFile.length()) {\n                div._(\"Showing \" + toRead + \" bytes. Click \")\n                    .a(url(\"containerlogs\", $(CONTAINER_ID),\n                        logFile.getName()), \"here\")\n                    ._(\" for full log\").br()._();\n            }\n            // TODO: Use secure IO Utils to avoid symlink attacks.\n            //TODO Fix findBugs close warning along with IOUtils change\n            FileReader reader \u003d new FileReader(logFile);\n            char[] cbuf \u003d new char[65536];\n            reader.skip(start);\n            int len \u003d 0;\n            int totalRead \u003d 0;\n            writer().write(\"\u003cpre\u003e\");\n            while ((len \u003d reader.read(cbuf, 0, (int) toRead)) \u003e 0\n                \u0026\u0026 totalRead \u003c (end - start)) {\n              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n              totalRead +\u003d len;\n              toRead \u003d toRead - totalRead;\n            }\n            reader.close();\n            writer().write(\"\u003c/pre\u003e\");\n          } catch (IOException e) {\n              writer().write(\n                  \"Exception reading log-file \"\n                      + StringUtils.stringifyException(e));\n          } \n        }\n          div._();\n        } else {\n          // Just print out the log-types\n          List\u003cFile\u003e containerLogsDirs \u003d\n              getContainerLogDirs(this.conf, containerId);\n          for (File containerLogsDir : containerLogsDirs) {\n            for (File logFile : containerLogsDir.listFiles()) {\n              div\n                  .p()\n                  .a(\n                      url(\"containerlogs\", $(CONTAINER_ID),\n                          logFile.getName(), \"?start\u003d-4076\"),\n                      logFile.getName() + \" : Total file length is \"\n                          + logFile.length() + \" bytes.\")\n                  ._();\n            }\n          }\n          div._();\n        }\n      } else {\n        div.h1(\"Container is no longer running..\")._();\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,102 @@\n+    protected void render(Block html) {\n+      DIV\u003cHamlet\u003e div \u003d html.div(\"#content\");\n+\n+      ContainerId containerId \u003d\n+        ConverterUtils.toContainerId(this.recordFactory, $(CONTAINER_ID));\n+      Container container \u003d this.nmContext.getContainers().get(containerId);\n+\n+      if (container \u003d\u003d null) {\n+        div.h1(\n+            \"Unknown container. Container is either not yet running or \"\n+                + \"has already completed or \"\n+                + \"doesn\u0027t belong to this node at all.\")._();\n+      } else if (EnumSet.of(ContainerState.NEW, ContainerState.LOCALIZING,\n+          ContainerState.LOCALIZING).contains(container.getContainerState())) {\n+        div.h1(\"Container is not yet running. Current state is \"\n+                + container.getContainerState())\n+              ._();\n+      } else if (EnumSet.of(ContainerState.RUNNING,\n+          ContainerState.EXITED_WITH_FAILURE,\n+          ContainerState.EXITED_WITH_SUCCESS).contains(\n+          container.getContainerState())) {\n+\n+        if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n+          File logFile \u003d null;\n+          try {\n+            logFile \u003d\n+                new File(this.logsSelector\n+                    .getLocalPathToRead(\n+                        ConverterUtils.toString(containerId.getAppId())\n+                            + Path.SEPARATOR + $(CONTAINER_ID)\n+                            + Path.SEPARATOR\n+                            + $(CONTAINER_LOG_TYPE), this.conf).toUri()\n+                    .getPath());\n+          } catch (Exception e) {\n+            div.h1(\"Cannot find this log on the local disk.\")._();\n+          }\n+          div.h1(logFile \u003d\u003d null ? \"Unknown LogFile\" : logFile.getName());\n+          long start \u003d\n+              $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n+          start \u003d start \u003c 0 ? logFile.length() + start : start;\n+          start \u003d start \u003c 0 ? 0 : start;\n+          long end \u003d\n+              $(\"end\").isEmpty() ? logFile.length() : Long\n+                  .parseLong($(\"end\"));\n+          end \u003d end \u003c 0 ? logFile.length() + end : end;\n+          end \u003d end \u003c 0 ? logFile.length() : end;\n+          if (start \u003e end) {\n+            writer().write(\"Invalid start and end values!\");\n+          } else {\n+          try {\n+            long toRead \u003d end - start;\n+            if (toRead \u003c logFile.length()) {\n+                div._(\"Showing \" + toRead + \" bytes. Click \")\n+                    .a(url(\"containerlogs\", $(CONTAINER_ID),\n+                        logFile.getName()), \"here\")\n+                    ._(\" for full log\").br()._();\n+            }\n+            // TODO: Use secure IO Utils to avoid symlink attacks.\n+            //TODO Fix findBugs close warning along with IOUtils change\n+            FileReader reader \u003d new FileReader(logFile);\n+            char[] cbuf \u003d new char[65536];\n+            reader.skip(start);\n+            int len \u003d 0;\n+            int totalRead \u003d 0;\n+            writer().write(\"\u003cpre\u003e\");\n+            while ((len \u003d reader.read(cbuf, 0, (int) toRead)) \u003e 0\n+                \u0026\u0026 totalRead \u003c (end - start)) {\n+              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n+              totalRead +\u003d len;\n+              toRead \u003d toRead - totalRead;\n+            }\n+            reader.close();\n+            writer().write(\"\u003c/pre\u003e\");\n+          } catch (IOException e) {\n+              writer().write(\n+                  \"Exception reading log-file \"\n+                      + StringUtils.stringifyException(e));\n+          } \n+        }\n+          div._();\n+        } else {\n+          // Just print out the log-types\n+          List\u003cFile\u003e containerLogsDirs \u003d\n+              getContainerLogDirs(this.conf, containerId);\n+          for (File containerLogsDir : containerLogsDirs) {\n+            for (File logFile : containerLogsDir.listFiles()) {\n+              div\n+                  .p()\n+                  .a(\n+                      url(\"containerlogs\", $(CONTAINER_ID),\n+                          logFile.getName(), \"?start\u003d-4076\"),\n+                      logFile.getName() + \" : Total file length is \"\n+                          + logFile.length() + \" bytes.\")\n+                  ._();\n+            }\n+          }\n+          div._();\n+        }\n+      } else {\n+        div.h1(\"Container is no longer running..\")._();\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      DIV\u003cHamlet\u003e div \u003d html.div(\"#content\");\n\n      ContainerId containerId \u003d\n        ConverterUtils.toContainerId(this.recordFactory, $(CONTAINER_ID));\n      Container container \u003d this.nmContext.getContainers().get(containerId);\n\n      if (container \u003d\u003d null) {\n        div.h1(\n            \"Unknown container. Container is either not yet running or \"\n                + \"has already completed or \"\n                + \"doesn\u0027t belong to this node at all.\")._();\n      } else if (EnumSet.of(ContainerState.NEW, ContainerState.LOCALIZING,\n          ContainerState.LOCALIZING).contains(container.getContainerState())) {\n        div.h1(\"Container is not yet running. Current state is \"\n                + container.getContainerState())\n              ._();\n      } else if (EnumSet.of(ContainerState.RUNNING,\n          ContainerState.EXITED_WITH_FAILURE,\n          ContainerState.EXITED_WITH_SUCCESS).contains(\n          container.getContainerState())) {\n\n        if (!$(CONTAINER_LOG_TYPE).isEmpty()) {\n          File logFile \u003d null;\n          try {\n            logFile \u003d\n                new File(this.logsSelector\n                    .getLocalPathToRead(\n                        ConverterUtils.toString(containerId.getAppId())\n                            + Path.SEPARATOR + $(CONTAINER_ID)\n                            + Path.SEPARATOR\n                            + $(CONTAINER_LOG_TYPE), this.conf).toUri()\n                    .getPath());\n          } catch (Exception e) {\n            div.h1(\"Cannot find this log on the local disk.\")._();\n          }\n          div.h1(logFile \u003d\u003d null ? \"Unknown LogFile\" : logFile.getName());\n          long start \u003d\n              $(\"start\").isEmpty() ? -4 * 1024 : Long.parseLong($(\"start\"));\n          start \u003d start \u003c 0 ? logFile.length() + start : start;\n          start \u003d start \u003c 0 ? 0 : start;\n          long end \u003d\n              $(\"end\").isEmpty() ? logFile.length() : Long\n                  .parseLong($(\"end\"));\n          end \u003d end \u003c 0 ? logFile.length() + end : end;\n          end \u003d end \u003c 0 ? logFile.length() : end;\n          if (start \u003e end) {\n            writer().write(\"Invalid start and end values!\");\n          } else {\n          try {\n            long toRead \u003d end - start;\n            if (toRead \u003c logFile.length()) {\n                div._(\"Showing \" + toRead + \" bytes. Click \")\n                    .a(url(\"containerlogs\", $(CONTAINER_ID),\n                        logFile.getName()), \"here\")\n                    ._(\" for full log\").br()._();\n            }\n            // TODO: Use secure IO Utils to avoid symlink attacks.\n            //TODO Fix findBugs close warning along with IOUtils change\n            FileReader reader \u003d new FileReader(logFile);\n            char[] cbuf \u003d new char[65536];\n            reader.skip(start);\n            int len \u003d 0;\n            int totalRead \u003d 0;\n            writer().write(\"\u003cpre\u003e\");\n            while ((len \u003d reader.read(cbuf, 0, (int) toRead)) \u003e 0\n                \u0026\u0026 totalRead \u003c (end - start)) {\n              writer().write(cbuf, 0, len); // TODO: HTMl Quoting?\n              totalRead +\u003d len;\n              toRead \u003d toRead - totalRead;\n            }\n            reader.close();\n            writer().write(\"\u003c/pre\u003e\");\n          } catch (IOException e) {\n              writer().write(\n                  \"Exception reading log-file \"\n                      + StringUtils.stringifyException(e));\n          } \n        }\n          div._();\n        } else {\n          // Just print out the log-types\n          List\u003cFile\u003e containerLogsDirs \u003d\n              getContainerLogDirs(this.conf, containerId);\n          for (File containerLogsDir : containerLogsDirs) {\n            for (File logFile : containerLogsDir.listFiles()) {\n              div\n                  .p()\n                  .a(\n                      url(\"containerlogs\", $(CONTAINER_ID),\n                          logFile.getName(), \"?start\u003d-4076\"),\n                      logFile.getName() + \" : Total file length is \"\n                          + logFile.length() + \" bytes.\")\n                  ._();\n            }\n          }\n          div._();\n        }\n      } else {\n        div.h1(\"Container is no longer running..\")._();\n      }\n    }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/ContainerLogsPage.java"
    }
  }
}