{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZKRMStateStore.java",
  "functionName": "loadRMAppState",
  "functionId": "loadRMAppState___rmState-RMState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
  "functionStartLine": 705,
  "functionEndLine": 742,
  "numCommitsSeen": 77,
  "timeTaken": 4559,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9",
    "2e52789edf68016e7a3f450164f8bd3d8e6cb210",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f",
    "e516706b896743e47e2852be81944eb5613e3e76",
    "5805a81efbc024024d8172489dfdc6cf77879416",
    "93907baa0b033c1431dc7055116746fc9db508cc",
    "305ae48136d6e201de4451e824cb7b84f94ba2e0",
    "797159bbd4f80c92d8bfe6979b4dd91ce51d0afc",
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
    "8628c1704b7d8c1a0ac01cea679c03245d11d330"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9": "Ybodychange",
    "2e52789edf68016e7a3f450164f8bd3d8e6cb210": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f": "Ybodychange",
    "e516706b896743e47e2852be81944eb5613e3e76": "Ybodychange",
    "5805a81efbc024024d8172489dfdc6cf77879416": "Ybodychange",
    "93907baa0b033c1431dc7055116746fc9db508cc": "Ybodychange",
    "305ae48136d6e201de4451e824cb7b84f94ba2e0": "Ybodychange",
    "797159bbd4f80c92d8bfe6979b4dd91ce51d0afc": "Ybodychange",
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6": "Ybodychange",
    "8628c1704b7d8c1a0ac01cea679c03245d11d330": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   private synchronized void loadRMAppState(RMState rmState) throws Exception {\n     for (int splitIndex \u003d 0; splitIndex \u003c\u003d 4; splitIndex++) {\n       String appRoot \u003d rmAppRootHierarchies.get(splitIndex);\n       if (appRoot \u003d\u003d null) {\n         continue;\n       }\n       List\u003cString\u003e childNodes \u003d getChildren(appRoot);\n       boolean appNodeFound \u003d false;\n       for (String childNodeName : childNodes) {\n         if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n           appNodeFound \u003d true;\n           if (splitIndex \u003d\u003d 0) {\n             loadRMAppStateFromAppNode(rmState,\n                 getNodePath(appRoot, childNodeName), childNodeName);\n           } else {\n             // If AppId Node is partitioned.\n             String parentNodePath \u003d getNodePath(appRoot, childNodeName);\n             List\u003cString\u003e leafNodes \u003d getChildren(parentNodePath);\n             for (String leafNodeName : leafNodes) {\n               String appIdStr \u003d childNodeName + leafNodeName;\n               loadRMAppStateFromAppNode(rmState,\n                   getNodePath(parentNodePath, leafNodeName), appIdStr);\n             }\n           }\n         } else if (!childNodeName.equals(RM_APP_ROOT_HIERARCHIES)){\n-          LOG.debug(\"Unknown child node with name \" + childNodeName + \" under\" +\n+          LOG.debug(\"Unknown child node with name {} under {}\", childNodeName,\n               appRoot);\n         }\n       }\n       if (splitIndex !\u003d appIdNodeSplitIndex \u0026\u0026 !appNodeFound) {\n         // If no loaded app exists for a particular split index and the split\n         // index for which apps are being loaded is not the one configured, then\n         // we do not need to keep track of this hierarchy for storing/updating/\n         // removing app/app attempt znodes.\n         rmAppRootHierarchies.remove(splitIndex);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void loadRMAppState(RMState rmState) throws Exception {\n    for (int splitIndex \u003d 0; splitIndex \u003c\u003d 4; splitIndex++) {\n      String appRoot \u003d rmAppRootHierarchies.get(splitIndex);\n      if (appRoot \u003d\u003d null) {\n        continue;\n      }\n      List\u003cString\u003e childNodes \u003d getChildren(appRoot);\n      boolean appNodeFound \u003d false;\n      for (String childNodeName : childNodes) {\n        if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n          appNodeFound \u003d true;\n          if (splitIndex \u003d\u003d 0) {\n            loadRMAppStateFromAppNode(rmState,\n                getNodePath(appRoot, childNodeName), childNodeName);\n          } else {\n            // If AppId Node is partitioned.\n            String parentNodePath \u003d getNodePath(appRoot, childNodeName);\n            List\u003cString\u003e leafNodes \u003d getChildren(parentNodePath);\n            for (String leafNodeName : leafNodes) {\n              String appIdStr \u003d childNodeName + leafNodeName;\n              loadRMAppStateFromAppNode(rmState,\n                  getNodePath(parentNodePath, leafNodeName), appIdStr);\n            }\n          }\n        } else if (!childNodeName.equals(RM_APP_ROOT_HIERARCHIES)){\n          LOG.debug(\"Unknown child node with name {} under {}\", childNodeName,\n              appRoot);\n        }\n      }\n      if (splitIndex !\u003d appIdNodeSplitIndex \u0026\u0026 !appNodeFound) {\n        // If no loaded app exists for a particular split index and the split\n        // index for which apps are being loaded is not the one configured, then\n        // we do not need to keep track of this hierarchy for storing/updating/\n        // removing app/app attempt znodes.\n        rmAppRootHierarchies.remove(splitIndex);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7262. Add a hierarchy into the ZKRMStateStore for delegation token znodes to prevent jute buffer overflow (rkanter)\n",
      "commitDate": "26/10/17 5:47 PM",
      "commitName": "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 17.28,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   private synchronized void loadRMAppState(RMState rmState) throws Exception {\n     for (int splitIndex \u003d 0; splitIndex \u003c\u003d 4; splitIndex++) {\n       String appRoot \u003d rmAppRootHierarchies.get(splitIndex);\n       if (appRoot \u003d\u003d null) {\n         continue;\n       }\n       List\u003cString\u003e childNodes \u003d getChildren(appRoot);\n       boolean appNodeFound \u003d false;\n       for (String childNodeName : childNodes) {\n         if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n           appNodeFound \u003d true;\n           if (splitIndex \u003d\u003d 0) {\n             loadRMAppStateFromAppNode(rmState,\n                 getNodePath(appRoot, childNodeName), childNodeName);\n           } else {\n             // If AppId Node is partitioned.\n             String parentNodePath \u003d getNodePath(appRoot, childNodeName);\n             List\u003cString\u003e leafNodes \u003d getChildren(parentNodePath);\n             for (String leafNodeName : leafNodes) {\n               String appIdStr \u003d childNodeName + leafNodeName;\n               loadRMAppStateFromAppNode(rmState,\n                   getNodePath(parentNodePath, leafNodeName), appIdStr);\n             }\n           }\n-        } else {\n-          LOG.info(\"Unknown child node with name: \" + childNodeName);\n+        } else if (!childNodeName.equals(RM_APP_ROOT_HIERARCHIES)){\n+          LOG.debug(\"Unknown child node with name \" + childNodeName + \" under\" +\n+              appRoot);\n         }\n       }\n       if (splitIndex !\u003d appIdNodeSplitIndex \u0026\u0026 !appNodeFound) {\n         // If no loaded app exists for a particular split index and the split\n         // index for which apps are being loaded is not the one configured, then\n         // we do not need to keep track of this hierarchy for storing/updating/\n         // removing app/app attempt znodes.\n         rmAppRootHierarchies.remove(splitIndex);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void loadRMAppState(RMState rmState) throws Exception {\n    for (int splitIndex \u003d 0; splitIndex \u003c\u003d 4; splitIndex++) {\n      String appRoot \u003d rmAppRootHierarchies.get(splitIndex);\n      if (appRoot \u003d\u003d null) {\n        continue;\n      }\n      List\u003cString\u003e childNodes \u003d getChildren(appRoot);\n      boolean appNodeFound \u003d false;\n      for (String childNodeName : childNodes) {\n        if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n          appNodeFound \u003d true;\n          if (splitIndex \u003d\u003d 0) {\n            loadRMAppStateFromAppNode(rmState,\n                getNodePath(appRoot, childNodeName), childNodeName);\n          } else {\n            // If AppId Node is partitioned.\n            String parentNodePath \u003d getNodePath(appRoot, childNodeName);\n            List\u003cString\u003e leafNodes \u003d getChildren(parentNodePath);\n            for (String leafNodeName : leafNodes) {\n              String appIdStr \u003d childNodeName + leafNodeName;\n              loadRMAppStateFromAppNode(rmState,\n                  getNodePath(parentNodePath, leafNodeName), appIdStr);\n            }\n          }\n        } else if (!childNodeName.equals(RM_APP_ROOT_HIERARCHIES)){\n          LOG.debug(\"Unknown child node with name \" + childNodeName + \" under\" +\n              appRoot);\n        }\n      }\n      if (splitIndex !\u003d appIdNodeSplitIndex \u0026\u0026 !appNodeFound) {\n        // If no loaded app exists for a particular split index and the split\n        // index for which apps are being loaded is not the one configured, then\n        // we do not need to keep track of this hierarchy for storing/updating/\n        // removing app/app attempt znodes.\n        rmAppRootHierarchies.remove(splitIndex);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "2e52789edf68016e7a3f450164f8bd3d8e6cb210": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2962. ZKRMStateStore: Limit the number of znodes under a znode (Contributed by Varun Sexena via Daniel Templeton)\n",
      "commitDate": "28/04/17 1:30 PM",
      "commitName": "2e52789edf68016e7a3f450164f8bd3d8e6cb210",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "30/01/17 9:44 PM",
      "commitNameOld": "87852b6ef4b9d973b7b3999974d41c8860fb1495",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 87.62,
      "commitsBetweenForRepo": 498,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,37 @@\n   private synchronized void loadRMAppState(RMState rmState) throws Exception {\n-    List\u003cString\u003e childNodes \u003d getChildren(rmAppRoot);\n-\n-    for (String childNodeName : childNodes) {\n-      String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n-      byte[] childData \u003d getData(childNodePath);\n-\n-      if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n-        // application\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Loading application from znode: \" + childNodeName);\n+    for (int splitIndex \u003d 0; splitIndex \u003c\u003d 4; splitIndex++) {\n+      String appRoot \u003d rmAppRootHierarchies.get(splitIndex);\n+      if (appRoot \u003d\u003d null) {\n+        continue;\n+      }\n+      List\u003cString\u003e childNodes \u003d getChildren(appRoot);\n+      boolean appNodeFound \u003d false;\n+      for (String childNodeName : childNodes) {\n+        if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n+          appNodeFound \u003d true;\n+          if (splitIndex \u003d\u003d 0) {\n+            loadRMAppStateFromAppNode(rmState,\n+                getNodePath(appRoot, childNodeName), childNodeName);\n+          } else {\n+            // If AppId Node is partitioned.\n+            String parentNodePath \u003d getNodePath(appRoot, childNodeName);\n+            List\u003cString\u003e leafNodes \u003d getChildren(parentNodePath);\n+            for (String leafNodeName : leafNodes) {\n+              String appIdStr \u003d childNodeName + leafNodeName;\n+              loadRMAppStateFromAppNode(rmState,\n+                  getNodePath(parentNodePath, leafNodeName), appIdStr);\n+            }\n+          }\n+        } else {\n+          LOG.info(\"Unknown child node with name: \" + childNodeName);\n         }\n-\n-        ApplicationId appId \u003d ApplicationId.fromString(childNodeName);\n-        ApplicationStateDataPBImpl appState \u003d\n-            new ApplicationStateDataPBImpl(\n-                ApplicationStateDataProto.parseFrom(childData));\n-\n-        if (!appId.equals(\n-            appState.getApplicationSubmissionContext().getApplicationId())) {\n-          throw new YarnRuntimeException(\"The child node name is different \"\n-              + \"from the application id\");\n-        }\n-\n-        rmState.appState.put(appId, appState);\n-        loadApplicationAttemptState(appState, appId);\n-      } else {\n-        LOG.info(\"Unknown child node with name: \" + childNodeName);\n+      }\n+      if (splitIndex !\u003d appIdNodeSplitIndex \u0026\u0026 !appNodeFound) {\n+        // If no loaded app exists for a particular split index and the split\n+        // index for which apps are being loaded is not the one configured, then\n+        // we do not need to keep track of this hierarchy for storing/updating/\n+        // removing app/app attempt znodes.\n+        rmAppRootHierarchies.remove(splitIndex);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void loadRMAppState(RMState rmState) throws Exception {\n    for (int splitIndex \u003d 0; splitIndex \u003c\u003d 4; splitIndex++) {\n      String appRoot \u003d rmAppRootHierarchies.get(splitIndex);\n      if (appRoot \u003d\u003d null) {\n        continue;\n      }\n      List\u003cString\u003e childNodes \u003d getChildren(appRoot);\n      boolean appNodeFound \u003d false;\n      for (String childNodeName : childNodes) {\n        if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n          appNodeFound \u003d true;\n          if (splitIndex \u003d\u003d 0) {\n            loadRMAppStateFromAppNode(rmState,\n                getNodePath(appRoot, childNodeName), childNodeName);\n          } else {\n            // If AppId Node is partitioned.\n            String parentNodePath \u003d getNodePath(appRoot, childNodeName);\n            List\u003cString\u003e leafNodes \u003d getChildren(parentNodePath);\n            for (String leafNodeName : leafNodes) {\n              String appIdStr \u003d childNodeName + leafNodeName;\n              loadRMAppStateFromAppNode(rmState,\n                  getNodePath(parentNodePath, leafNodeName), appIdStr);\n            }\n          }\n        } else {\n          LOG.info(\"Unknown child node with name: \" + childNodeName);\n        }\n      }\n      if (splitIndex !\u003d appIdNodeSplitIndex \u0026\u0026 !appNodeFound) {\n        // If no loaded app exists for a particular split index and the split\n        // index for which apps are being loaded is not the one configured, then\n        // we do not need to keep track of this hierarchy for storing/updating/\n        // removing app/app attempt znodes.\n        rmAppRootHierarchies.remove(splitIndex);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "01/02/16 6:17 PM",
      "commitNameOld": "9875325d5c63f343809907d06bf48a298035a611",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 133.83,
      "commitsBetweenForRepo": 860,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   private synchronized void loadRMAppState(RMState rmState) throws Exception {\n     List\u003cString\u003e childNodes \u003d getChildren(rmAppRoot);\n     for (String childNodeName : childNodes) {\n       String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n       byte[] childData \u003d getData(childNodePath);\n       if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n         // application\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Loading application from znode: \" + childNodeName);\n         }\n-        ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n+        ApplicationId appId \u003d ApplicationId.fromString(childNodeName);\n         ApplicationStateDataPBImpl appState \u003d\n             new ApplicationStateDataPBImpl(\n                 ApplicationStateDataProto.parseFrom(childData));\n         if (!appId.equals(\n             appState.getApplicationSubmissionContext().getApplicationId())) {\n           throw new YarnRuntimeException(\"The child node name is different \" +\n               \"from the application id\");\n         }\n         rmState.appState.put(appId, appState);\n         loadApplicationAttemptState(appState, appId);\n       } else {\n         LOG.info(\"Unknown child node with name: \" + childNodeName);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void loadRMAppState(RMState rmState) throws Exception {\n    List\u003cString\u003e childNodes \u003d getChildren(rmAppRoot);\n    for (String childNodeName : childNodes) {\n      String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n      byte[] childData \u003d getData(childNodePath);\n      if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n        // application\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Loading application from znode: \" + childNodeName);\n        }\n        ApplicationId appId \u003d ApplicationId.fromString(childNodeName);\n        ApplicationStateDataPBImpl appState \u003d\n            new ApplicationStateDataPBImpl(\n                ApplicationStateDataProto.parseFrom(childData));\n        if (!appId.equals(\n            appState.getApplicationSubmissionContext().getApplicationId())) {\n          throw new YarnRuntimeException(\"The child node name is different \" +\n              \"from the application id\");\n        }\n        rmState.appState.put(appId, appState);\n        loadApplicationAttemptState(appState, appId);\n      } else {\n        LOG.info(\"Unknown child node with name: \" + childNodeName);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2716. Refactor ZKRMStateStore retry code with Apache Curator. Contributed by Karthik Kambatla\n",
      "commitDate": "08/06/15 2:50 PM",
      "commitName": "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f",
      "commitAuthor": "Jian He",
      "commitDateOld": "08/05/15 3:12 PM",
      "commitNameOld": "d0b73287c26983f32b0efe01862150e9fd28086f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 30.99,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   private synchronized void loadRMAppState(RMState rmState) throws Exception {\n-    List\u003cString\u003e childNodes \u003d getChildrenWithRetries(rmAppRoot, false);\n+    List\u003cString\u003e childNodes \u003d getChildren(rmAppRoot);\n     for (String childNodeName : childNodes) {\n       String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n-      byte[] childData \u003d getDataWithRetries(childNodePath, false);\n+      byte[] childData \u003d getData(childNodePath);\n       if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n         // application\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Loading application from znode: \" + childNodeName);\n         }\n         ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n         ApplicationStateDataPBImpl appState \u003d\n             new ApplicationStateDataPBImpl(\n                 ApplicationStateDataProto.parseFrom(childData));\n         if (!appId.equals(\n             appState.getApplicationSubmissionContext().getApplicationId())) {\n           throw new YarnRuntimeException(\"The child node name is different \" +\n               \"from the application id\");\n         }\n         rmState.appState.put(appId, appState);\n         loadApplicationAttemptState(appState, appId);\n       } else {\n         LOG.info(\"Unknown child node with name: \" + childNodeName);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void loadRMAppState(RMState rmState) throws Exception {\n    List\u003cString\u003e childNodes \u003d getChildren(rmAppRoot);\n    for (String childNodeName : childNodes) {\n      String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n      byte[] childData \u003d getData(childNodePath);\n      if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n        // application\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Loading application from znode: \" + childNodeName);\n        }\n        ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n        ApplicationStateDataPBImpl appState \u003d\n            new ApplicationStateDataPBImpl(\n                ApplicationStateDataProto.parseFrom(childData));\n        if (!appId.equals(\n            appState.getApplicationSubmissionContext().getApplicationId())) {\n          throw new YarnRuntimeException(\"The child node name is different \" +\n              \"from the application id\");\n        }\n        rmState.appState.put(appId, appState);\n        loadApplicationAttemptState(appState, appId);\n      } else {\n        LOG.info(\"Unknown child node with name: \" + childNodeName);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "e516706b896743e47e2852be81944eb5613e3e76": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3469. ZKRMStateStore: Avoid setting watches that are not required. (Jun Hong via kasha)\n",
      "commitDate": "10/04/15 11:20 AM",
      "commitName": "e516706b896743e47e2852be81944eb5613e3e76",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "04/03/15 7:49 PM",
      "commitNameOld": "8d88691d162f87f95c9ed7e0a569ef08e8385d4f",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 36.61,
      "commitsBetweenForRepo": 327,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   private synchronized void loadRMAppState(RMState rmState) throws Exception {\n-    List\u003cString\u003e childNodes \u003d getChildrenWithRetries(rmAppRoot, true);\n+    List\u003cString\u003e childNodes \u003d getChildrenWithRetries(rmAppRoot, false);\n     for (String childNodeName : childNodes) {\n       String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n-      byte[] childData \u003d getDataWithRetries(childNodePath, true);\n+      byte[] childData \u003d getDataWithRetries(childNodePath, false);\n       if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n         // application\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Loading application from znode: \" + childNodeName);\n         }\n         ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n         ApplicationStateDataPBImpl appState \u003d\n             new ApplicationStateDataPBImpl(\n                 ApplicationStateDataProto.parseFrom(childData));\n         if (!appId.equals(\n             appState.getApplicationSubmissionContext().getApplicationId())) {\n           throw new YarnRuntimeException(\"The child node name is different \" +\n               \"from the application id\");\n         }\n         rmState.appState.put(appId, appState);\n         loadApplicationAttemptState(appState, appId);\n       } else {\n         LOG.info(\"Unknown child node with name: \" + childNodeName);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void loadRMAppState(RMState rmState) throws Exception {\n    List\u003cString\u003e childNodes \u003d getChildrenWithRetries(rmAppRoot, false);\n    for (String childNodeName : childNodes) {\n      String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n      byte[] childData \u003d getDataWithRetries(childNodePath, false);\n      if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n        // application\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Loading application from znode: \" + childNodeName);\n        }\n        ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n        ApplicationStateDataPBImpl appState \u003d\n            new ApplicationStateDataPBImpl(\n                ApplicationStateDataProto.parseFrom(childData));\n        if (!appId.equals(\n            appState.getApplicationSubmissionContext().getApplicationId())) {\n          throw new YarnRuntimeException(\"The child node name is different \" +\n              \"from the application id\");\n        }\n        rmState.appState.put(appId, appState);\n        loadApplicationAttemptState(appState, appId);\n      } else {\n        LOG.info(\"Unknown child node with name: \" + childNodeName);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "5805a81efbc024024d8172489dfdc6cf77879416": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2404. Removed ApplicationAttemptState and ApplicationState class in RMStateStore. Contributed by Tsuyoshi OZAWA\n",
      "commitDate": "25/11/14 12:48 PM",
      "commitName": "5805a81efbc024024d8172489dfdc6cf77879416",
      "commitAuthor": "Jian He",
      "commitDateOld": "26/10/14 11:14 AM",
      "commitNameOld": "018664550507981297fd9f91e29408e6b7801ea9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 30.11,
      "commitsBetweenForRepo": 280,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,26 @@\n   private synchronized void loadRMAppState(RMState rmState) throws Exception {\n     List\u003cString\u003e childNodes \u003d getChildrenWithRetries(rmAppRoot, true);\n     for (String childNodeName : childNodes) {\n       String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n       byte[] childData \u003d getDataWithRetries(childNodePath, true);\n       if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n         // application\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Loading application from znode: \" + childNodeName);\n         }\n         ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n-        ApplicationStateDataPBImpl appStateData \u003d\n+        ApplicationStateDataPBImpl appState \u003d\n             new ApplicationStateDataPBImpl(\n                 ApplicationStateDataProto.parseFrom(childData));\n-        ApplicationState appState \u003d\n-            new ApplicationState(appStateData.getSubmitTime(),\n-              appStateData.getStartTime(),\n-              appStateData.getApplicationSubmissionContext(),\n-              appStateData.getUser(),\n-              appStateData.getState(),\n-              appStateData.getDiagnostics(), appStateData.getFinishTime());\n-        if (!appId.equals(appState.context.getApplicationId())) {\n+        if (!appId.equals(\n+            appState.getApplicationSubmissionContext().getApplicationId())) {\n           throw new YarnRuntimeException(\"The child node name is different \" +\n               \"from the application id\");\n         }\n         rmState.appState.put(appId, appState);\n         loadApplicationAttemptState(appState, appId);\n       } else {\n         LOG.info(\"Unknown child node with name: \" + childNodeName);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void loadRMAppState(RMState rmState) throws Exception {\n    List\u003cString\u003e childNodes \u003d getChildrenWithRetries(rmAppRoot, true);\n    for (String childNodeName : childNodes) {\n      String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n      byte[] childData \u003d getDataWithRetries(childNodePath, true);\n      if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n        // application\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Loading application from znode: \" + childNodeName);\n        }\n        ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n        ApplicationStateDataPBImpl appState \u003d\n            new ApplicationStateDataPBImpl(\n                ApplicationStateDataProto.parseFrom(childData));\n        if (!appId.equals(\n            appState.getApplicationSubmissionContext().getApplicationId())) {\n          throw new YarnRuntimeException(\"The child node name is different \" +\n              \"from the application id\");\n        }\n        rmState.appState.put(appId, appState);\n        loadApplicationAttemptState(appState, appId);\n      } else {\n        LOG.info(\"Unknown child node with name: \" + childNodeName);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "93907baa0b033c1431dc7055116746fc9db508cc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1307. Redesign znode structure for Zookeeper based RM state-store for better organization and scalability. Contributed by Tsuyoshi OZAWA.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552209 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/13 6:33 PM",
      "commitName": "93907baa0b033c1431dc7055116746fc9db508cc",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/12/13 8:17 PM",
      "commitNameOld": "305ae48136d6e201de4451e824cb7b84f94ba2e0",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 10.93,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,32 @@\n   private synchronized void loadRMAppState(RMState rmState) throws Exception {\n     List\u003cString\u003e childNodes \u003d getChildrenWithRetries(rmAppRoot, true);\n-    List\u003cApplicationAttemptState\u003e attempts \u003d\n-        new ArrayList\u003cApplicationAttemptState\u003e();\n     for (String childNodeName : childNodes) {\n       String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n       byte[] childData \u003d getDataWithRetries(childNodePath, true);\n       if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n         // application\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Loading application from znode: \" + childNodeName);\n         }\n         ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n         ApplicationStateDataPBImpl appStateData \u003d\n             new ApplicationStateDataPBImpl(\n                 ApplicationStateDataProto.parseFrom(childData));\n         ApplicationState appState \u003d\n             new ApplicationState(appStateData.getSubmitTime(),\n               appStateData.getStartTime(),\n               appStateData.getApplicationSubmissionContext(),\n               appStateData.getUser(),\n               appStateData.getState(),\n               appStateData.getDiagnostics(), appStateData.getFinishTime());\n         if (!appId.equals(appState.context.getApplicationId())) {\n           throw new YarnRuntimeException(\"The child node name is different \" +\n               \"from the application id\");\n         }\n         rmState.appState.put(appId, appState);\n-      } else if (childNodeName\n-          .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n-        // attempt\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Loading application attempt from znode: \" + childNodeName);\n-        }\n-        ApplicationAttemptId attemptId \u003d\n-            ConverterUtils.toApplicationAttemptId(childNodeName);\n-        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n-            new ApplicationAttemptStateDataPBImpl(\n-                ApplicationAttemptStateDataProto.parseFrom(childData));\n-        Credentials credentials \u003d null;\n-        if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n-          credentials \u003d new Credentials();\n-          DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n-          dibb.reset(attemptStateData.getAppAttemptTokens());\n-          credentials.readTokenStorageStream(dibb);\n-        }\n-        ApplicationAttemptState attemptState \u003d\n-            new ApplicationAttemptState(attemptId,\n-              attemptStateData.getMasterContainer(), credentials,\n-              attemptStateData.getStartTime(),\n-              attemptStateData.getState(),\n-              attemptStateData.getFinalTrackingUrl(),\n-              attemptStateData.getDiagnostics(),\n-              attemptStateData.getFinalApplicationStatus());\n-        if (!attemptId.equals(attemptState.getAttemptId())) {\n-          throw new YarnRuntimeException(\"The child node name is different \" +\n-              \"from the application attempt id\");\n-        }\n-        attempts.add(attemptState);\n+        loadApplicationAttemptState(appState, appId);\n       } else {\n         LOG.info(\"Unknown child node with name: \" + childNodeName);\n       }\n     }\n-\n-    // go through all attempts and add them to their apps\n-    for (ApplicationAttemptState attemptState : attempts) {\n-      ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n-      ApplicationState appState \u003d rmState.appState.get(appId);\n-      if (appState !\u003d null) {\n-        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n-      } else {\n-        // the application znode may have been removed when the application\n-        // completed but the RM might have stopped before it could remove the\n-        // application attempt znodes\n-        LOG.info(\"Application node not found for attempt: \"\n-            + attemptState.getAttemptId());\n-        deleteWithRetries(\n-            getNodePath(rmAppRoot, attemptState.getAttemptId().toString()), -1);\n-      }\n-    }\n-    LOG.info(\"Done Loading applications from ZK state store\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void loadRMAppState(RMState rmState) throws Exception {\n    List\u003cString\u003e childNodes \u003d getChildrenWithRetries(rmAppRoot, true);\n    for (String childNodeName : childNodes) {\n      String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n      byte[] childData \u003d getDataWithRetries(childNodePath, true);\n      if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n        // application\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Loading application from znode: \" + childNodeName);\n        }\n        ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n        ApplicationStateDataPBImpl appStateData \u003d\n            new ApplicationStateDataPBImpl(\n                ApplicationStateDataProto.parseFrom(childData));\n        ApplicationState appState \u003d\n            new ApplicationState(appStateData.getSubmitTime(),\n              appStateData.getStartTime(),\n              appStateData.getApplicationSubmissionContext(),\n              appStateData.getUser(),\n              appStateData.getState(),\n              appStateData.getDiagnostics(), appStateData.getFinishTime());\n        if (!appId.equals(appState.context.getApplicationId())) {\n          throw new YarnRuntimeException(\"The child node name is different \" +\n              \"from the application id\");\n        }\n        rmState.appState.put(appId, appState);\n        loadApplicationAttemptState(appState, appId);\n      } else {\n        LOG.info(\"Unknown child node with name: \" + childNodeName);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "305ae48136d6e201de4451e824cb7b84f94ba2e0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1378. Implemented a cleaner of old finished applications from the RM state-store. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548990 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/12/13 8:17 PM",
      "commitName": "305ae48136d6e201de4451e824cb7b84f94ba2e0",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/12/13 11:28 AM",
      "commitNameOld": "9c95015bb47f362e592393f0cec899fd8fdd3b04",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.37,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,82 @@\n   private synchronized void loadRMAppState(RMState rmState) throws Exception {\n     List\u003cString\u003e childNodes \u003d getChildrenWithRetries(rmAppRoot, true);\n     List\u003cApplicationAttemptState\u003e attempts \u003d\n         new ArrayList\u003cApplicationAttemptState\u003e();\n     for (String childNodeName : childNodes) {\n       String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n       byte[] childData \u003d getDataWithRetries(childNodePath, true);\n       if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n         // application\n-        LOG.info(\"Loading application from znode: \" + childNodeName);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Loading application from znode: \" + childNodeName);\n+        }\n         ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n         ApplicationStateDataPBImpl appStateData \u003d\n             new ApplicationStateDataPBImpl(\n                 ApplicationStateDataProto.parseFrom(childData));\n         ApplicationState appState \u003d\n             new ApplicationState(appStateData.getSubmitTime(),\n               appStateData.getStartTime(),\n               appStateData.getApplicationSubmissionContext(),\n               appStateData.getUser(),\n               appStateData.getState(),\n               appStateData.getDiagnostics(), appStateData.getFinishTime());\n         if (!appId.equals(appState.context.getApplicationId())) {\n           throw new YarnRuntimeException(\"The child node name is different \" +\n               \"from the application id\");\n         }\n         rmState.appState.put(appId, appState);\n       } else if (childNodeName\n           .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n         // attempt\n-        LOG.info(\"Loading application attempt from znode: \" + childNodeName);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Loading application attempt from znode: \" + childNodeName);\n+        }\n         ApplicationAttemptId attemptId \u003d\n             ConverterUtils.toApplicationAttemptId(childNodeName);\n         ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n             new ApplicationAttemptStateDataPBImpl(\n                 ApplicationAttemptStateDataProto.parseFrom(childData));\n         Credentials credentials \u003d null;\n         if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n           credentials \u003d new Credentials();\n           DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n           dibb.reset(attemptStateData.getAppAttemptTokens());\n           credentials.readTokenStorageStream(dibb);\n         }\n         ApplicationAttemptState attemptState \u003d\n             new ApplicationAttemptState(attemptId,\n               attemptStateData.getMasterContainer(), credentials,\n               attemptStateData.getStartTime(),\n               attemptStateData.getState(),\n               attemptStateData.getFinalTrackingUrl(),\n               attemptStateData.getDiagnostics(),\n               attemptStateData.getFinalApplicationStatus());\n         if (!attemptId.equals(attemptState.getAttemptId())) {\n           throw new YarnRuntimeException(\"The child node name is different \" +\n               \"from the application attempt id\");\n         }\n         attempts.add(attemptState);\n       } else {\n         LOG.info(\"Unknown child node with name: \" + childNodeName);\n       }\n     }\n \n     // go through all attempts and add them to their apps\n     for (ApplicationAttemptState attemptState : attempts) {\n       ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n       ApplicationState appState \u003d rmState.appState.get(appId);\n       if (appState !\u003d null) {\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       } else {\n         // the application znode may have been removed when the application\n         // completed but the RM might have stopped before it could remove the\n         // application attempt znodes\n         LOG.info(\"Application node not found for attempt: \"\n             + attemptState.getAttemptId());\n         deleteWithRetries(\n-            getNodePath(rmAppRoot, attemptState.getAttemptId().toString()),\n-            0);\n+            getNodePath(rmAppRoot, attemptState.getAttemptId().toString()), -1);\n       }\n     }\n+    LOG.info(\"Done Loading applications from ZK state store\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void loadRMAppState(RMState rmState) throws Exception {\n    List\u003cString\u003e childNodes \u003d getChildrenWithRetries(rmAppRoot, true);\n    List\u003cApplicationAttemptState\u003e attempts \u003d\n        new ArrayList\u003cApplicationAttemptState\u003e();\n    for (String childNodeName : childNodes) {\n      String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n      byte[] childData \u003d getDataWithRetries(childNodePath, true);\n      if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n        // application\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Loading application from znode: \" + childNodeName);\n        }\n        ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n        ApplicationStateDataPBImpl appStateData \u003d\n            new ApplicationStateDataPBImpl(\n                ApplicationStateDataProto.parseFrom(childData));\n        ApplicationState appState \u003d\n            new ApplicationState(appStateData.getSubmitTime(),\n              appStateData.getStartTime(),\n              appStateData.getApplicationSubmissionContext(),\n              appStateData.getUser(),\n              appStateData.getState(),\n              appStateData.getDiagnostics(), appStateData.getFinishTime());\n        if (!appId.equals(appState.context.getApplicationId())) {\n          throw new YarnRuntimeException(\"The child node name is different \" +\n              \"from the application id\");\n        }\n        rmState.appState.put(appId, appState);\n      } else if (childNodeName\n          .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        // attempt\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Loading application attempt from znode: \" + childNodeName);\n        }\n        ApplicationAttemptId attemptId \u003d\n            ConverterUtils.toApplicationAttemptId(childNodeName);\n        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n            new ApplicationAttemptStateDataPBImpl(\n                ApplicationAttemptStateDataProto.parseFrom(childData));\n        Credentials credentials \u003d null;\n        if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n          credentials \u003d new Credentials();\n          DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n          dibb.reset(attemptStateData.getAppAttemptTokens());\n          credentials.readTokenStorageStream(dibb);\n        }\n        ApplicationAttemptState attemptState \u003d\n            new ApplicationAttemptState(attemptId,\n              attemptStateData.getMasterContainer(), credentials,\n              attemptStateData.getStartTime(),\n              attemptStateData.getState(),\n              attemptStateData.getFinalTrackingUrl(),\n              attemptStateData.getDiagnostics(),\n              attemptStateData.getFinalApplicationStatus());\n        if (!attemptId.equals(attemptState.getAttemptId())) {\n          throw new YarnRuntimeException(\"The child node name is different \" +\n              \"from the application attempt id\");\n        }\n        attempts.add(attemptState);\n      } else {\n        LOG.info(\"Unknown child node with name: \" + childNodeName);\n      }\n    }\n\n    // go through all attempts and add them to their apps\n    for (ApplicationAttemptState attemptState : attempts) {\n      ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n      ApplicationState appState \u003d rmState.appState.get(appId);\n      if (appState !\u003d null) {\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      } else {\n        // the application znode may have been removed when the application\n        // completed but the RM might have stopped before it could remove the\n        // application attempt znodes\n        LOG.info(\"Application node not found for attempt: \"\n            + attemptState.getAttemptId());\n        deleteWithRetries(\n            getNodePath(rmAppRoot, attemptState.getAttemptId().toString()), -1);\n      }\n    }\n    LOG.info(\"Done Loading applications from ZK state store\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "797159bbd4f80c92d8bfe6979b4dd91ce51d0afc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1222. Make improvements in ZKRMStateStore for fencing (Karthik Kambatla via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1541995 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/13 9:53 AM",
      "commitName": "797159bbd4f80c92d8bfe6979b4dd91ce51d0afc",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "31/10/13 10:25 AM",
      "commitNameOld": "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 14.02,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,78 @@\n   private synchronized void loadRMAppState(RMState rmState) throws Exception {\n-    List\u003cString\u003e childNodes \u003d zkClient.getChildren(rmAppRoot, true);\n+    List\u003cString\u003e childNodes \u003d getChildrenWithRetries(rmAppRoot, true);\n     List\u003cApplicationAttemptState\u003e attempts \u003d\n         new ArrayList\u003cApplicationAttemptState\u003e();\n     for (String childNodeName : childNodes) {\n       String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n       byte[] childData \u003d getDataWithRetries(childNodePath, true);\n       if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n         // application\n         LOG.info(\"Loading application from znode: \" + childNodeName);\n         ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n         ApplicationStateDataPBImpl appStateData \u003d\n             new ApplicationStateDataPBImpl(\n                 ApplicationStateDataProto.parseFrom(childData));\n         ApplicationState appState \u003d\n             new ApplicationState(appStateData.getSubmitTime(),\n               appStateData.getStartTime(),\n               appStateData.getApplicationSubmissionContext(),\n               appStateData.getUser(),\n               appStateData.getState(),\n               appStateData.getDiagnostics(), appStateData.getFinishTime());\n         if (!appId.equals(appState.context.getApplicationId())) {\n           throw new YarnRuntimeException(\"The child node name is different \" +\n               \"from the application id\");\n         }\n         rmState.appState.put(appId, appState);\n       } else if (childNodeName\n           .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n         // attempt\n         LOG.info(\"Loading application attempt from znode: \" + childNodeName);\n         ApplicationAttemptId attemptId \u003d\n             ConverterUtils.toApplicationAttemptId(childNodeName);\n         ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n             new ApplicationAttemptStateDataPBImpl(\n                 ApplicationAttemptStateDataProto.parseFrom(childData));\n         Credentials credentials \u003d null;\n         if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n           credentials \u003d new Credentials();\n           DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n           dibb.reset(attemptStateData.getAppAttemptTokens());\n           credentials.readTokenStorageStream(dibb);\n         }\n         ApplicationAttemptState attemptState \u003d\n             new ApplicationAttemptState(attemptId,\n               attemptStateData.getMasterContainer(), credentials,\n               attemptStateData.getStartTime(),\n               attemptStateData.getState(),\n               attemptStateData.getFinalTrackingUrl(),\n               attemptStateData.getDiagnostics(),\n               attemptStateData.getFinalApplicationStatus());\n         if (!attemptId.equals(attemptState.getAttemptId())) {\n           throw new YarnRuntimeException(\"The child node name is different \" +\n               \"from the application attempt id\");\n         }\n         attempts.add(attemptState);\n       } else {\n         LOG.info(\"Unknown child node with name: \" + childNodeName);\n       }\n     }\n \n     // go through all attempts and add them to their apps\n     for (ApplicationAttemptState attemptState : attempts) {\n       ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n       ApplicationState appState \u003d rmState.appState.get(appId);\n       if (appState !\u003d null) {\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       } else {\n         // the application znode may have been removed when the application\n         // completed but the RM might have stopped before it could remove the\n         // application attempt znodes\n         LOG.info(\"Application node not found for attempt: \"\n             + attemptState.getAttemptId());\n         deleteWithRetries(\n             getNodePath(rmAppRoot, attemptState.getAttemptId().toString()),\n             0);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void loadRMAppState(RMState rmState) throws Exception {\n    List\u003cString\u003e childNodes \u003d getChildrenWithRetries(rmAppRoot, true);\n    List\u003cApplicationAttemptState\u003e attempts \u003d\n        new ArrayList\u003cApplicationAttemptState\u003e();\n    for (String childNodeName : childNodes) {\n      String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n      byte[] childData \u003d getDataWithRetries(childNodePath, true);\n      if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n        // application\n        LOG.info(\"Loading application from znode: \" + childNodeName);\n        ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n        ApplicationStateDataPBImpl appStateData \u003d\n            new ApplicationStateDataPBImpl(\n                ApplicationStateDataProto.parseFrom(childData));\n        ApplicationState appState \u003d\n            new ApplicationState(appStateData.getSubmitTime(),\n              appStateData.getStartTime(),\n              appStateData.getApplicationSubmissionContext(),\n              appStateData.getUser(),\n              appStateData.getState(),\n              appStateData.getDiagnostics(), appStateData.getFinishTime());\n        if (!appId.equals(appState.context.getApplicationId())) {\n          throw new YarnRuntimeException(\"The child node name is different \" +\n              \"from the application id\");\n        }\n        rmState.appState.put(appId, appState);\n      } else if (childNodeName\n          .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        // attempt\n        LOG.info(\"Loading application attempt from znode: \" + childNodeName);\n        ApplicationAttemptId attemptId \u003d\n            ConverterUtils.toApplicationAttemptId(childNodeName);\n        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n            new ApplicationAttemptStateDataPBImpl(\n                ApplicationAttemptStateDataProto.parseFrom(childData));\n        Credentials credentials \u003d null;\n        if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n          credentials \u003d new Credentials();\n          DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n          dibb.reset(attemptStateData.getAppAttemptTokens());\n          credentials.readTokenStorageStream(dibb);\n        }\n        ApplicationAttemptState attemptState \u003d\n            new ApplicationAttemptState(attemptId,\n              attemptStateData.getMasterContainer(), credentials,\n              attemptStateData.getStartTime(),\n              attemptStateData.getState(),\n              attemptStateData.getFinalTrackingUrl(),\n              attemptStateData.getDiagnostics(),\n              attemptStateData.getFinalApplicationStatus());\n        if (!attemptId.equals(attemptState.getAttemptId())) {\n          throw new YarnRuntimeException(\"The child node name is different \" +\n              \"from the application attempt id\");\n        }\n        attempts.add(attemptState);\n      } else {\n        LOG.info(\"Unknown child node with name: \" + childNodeName);\n      }\n    }\n\n    // go through all attempts and add them to their apps\n    for (ApplicationAttemptState attemptState : attempts) {\n      ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n      ApplicationState appState \u003d rmState.appState.get(appId);\n      if (appState !\u003d null) {\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      } else {\n        // the application znode may have been removed when the application\n        // completed but the RM might have stopped before it could remove the\n        // application attempt znodes\n        LOG.info(\"Application node not found for attempt: \"\n            + attemptState.getAttemptId());\n        deleteWithRetries(\n            getNodePath(rmAppRoot, attemptState.getAttemptId().toString()),\n            0);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-891. Modified ResourceManager state-store to remember completed applications so that clients can get information about them post RM-restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1537560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/13 10:25 AM",
      "commitName": "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/09/13 1:39 PM",
      "commitNameOld": "8628c1704b7d8c1a0ac01cea679c03245d11d330",
      "commitAuthorOld": "Hitesh Shah",
      "daysBetweenCommits": 41.87,
      "commitsBetweenForRepo": 291,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,78 @@\n   private synchronized void loadRMAppState(RMState rmState) throws Exception {\n     List\u003cString\u003e childNodes \u003d zkClient.getChildren(rmAppRoot, true);\n     List\u003cApplicationAttemptState\u003e attempts \u003d\n         new ArrayList\u003cApplicationAttemptState\u003e();\n     for (String childNodeName : childNodes) {\n       String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n       byte[] childData \u003d getDataWithRetries(childNodePath, true);\n       if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n         // application\n         LOG.info(\"Loading application from znode: \" + childNodeName);\n         ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n         ApplicationStateDataPBImpl appStateData \u003d\n             new ApplicationStateDataPBImpl(\n                 ApplicationStateDataProto.parseFrom(childData));\n         ApplicationState appState \u003d\n             new ApplicationState(appStateData.getSubmitTime(),\n-                appStateData.getApplicationSubmissionContext(),\n-                appStateData.getUser());\n+              appStateData.getStartTime(),\n+              appStateData.getApplicationSubmissionContext(),\n+              appStateData.getUser(),\n+              appStateData.getState(),\n+              appStateData.getDiagnostics(), appStateData.getFinishTime());\n         if (!appId.equals(appState.context.getApplicationId())) {\n           throw new YarnRuntimeException(\"The child node name is different \" +\n               \"from the application id\");\n         }\n         rmState.appState.put(appId, appState);\n       } else if (childNodeName\n           .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n         // attempt\n         LOG.info(\"Loading application attempt from znode: \" + childNodeName);\n         ApplicationAttemptId attemptId \u003d\n             ConverterUtils.toApplicationAttemptId(childNodeName);\n         ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n             new ApplicationAttemptStateDataPBImpl(\n                 ApplicationAttemptStateDataProto.parseFrom(childData));\n         Credentials credentials \u003d null;\n         if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n           credentials \u003d new Credentials();\n           DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n           dibb.reset(attemptStateData.getAppAttemptTokens());\n           credentials.readTokenStorageStream(dibb);\n         }\n         ApplicationAttemptState attemptState \u003d\n             new ApplicationAttemptState(attemptId,\n-                attemptStateData.getMasterContainer(), credentials);\n+              attemptStateData.getMasterContainer(), credentials,\n+              attemptStateData.getStartTime(),\n+              attemptStateData.getState(),\n+              attemptStateData.getFinalTrackingUrl(),\n+              attemptStateData.getDiagnostics(),\n+              attemptStateData.getFinalApplicationStatus());\n         if (!attemptId.equals(attemptState.getAttemptId())) {\n           throw new YarnRuntimeException(\"The child node name is different \" +\n               \"from the application attempt id\");\n         }\n         attempts.add(attemptState);\n       } else {\n         LOG.info(\"Unknown child node with name: \" + childNodeName);\n       }\n     }\n \n     // go through all attempts and add them to their apps\n     for (ApplicationAttemptState attemptState : attempts) {\n       ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n       ApplicationState appState \u003d rmState.appState.get(appId);\n       if (appState !\u003d null) {\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       } else {\n         // the application znode may have been removed when the application\n         // completed but the RM might have stopped before it could remove the\n         // application attempt znodes\n         LOG.info(\"Application node not found for attempt: \"\n             + attemptState.getAttemptId());\n         deleteWithRetries(\n             getNodePath(rmAppRoot, attemptState.getAttemptId().toString()),\n             0);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void loadRMAppState(RMState rmState) throws Exception {\n    List\u003cString\u003e childNodes \u003d zkClient.getChildren(rmAppRoot, true);\n    List\u003cApplicationAttemptState\u003e attempts \u003d\n        new ArrayList\u003cApplicationAttemptState\u003e();\n    for (String childNodeName : childNodes) {\n      String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n      byte[] childData \u003d getDataWithRetries(childNodePath, true);\n      if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n        // application\n        LOG.info(\"Loading application from znode: \" + childNodeName);\n        ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n        ApplicationStateDataPBImpl appStateData \u003d\n            new ApplicationStateDataPBImpl(\n                ApplicationStateDataProto.parseFrom(childData));\n        ApplicationState appState \u003d\n            new ApplicationState(appStateData.getSubmitTime(),\n              appStateData.getStartTime(),\n              appStateData.getApplicationSubmissionContext(),\n              appStateData.getUser(),\n              appStateData.getState(),\n              appStateData.getDiagnostics(), appStateData.getFinishTime());\n        if (!appId.equals(appState.context.getApplicationId())) {\n          throw new YarnRuntimeException(\"The child node name is different \" +\n              \"from the application id\");\n        }\n        rmState.appState.put(appId, appState);\n      } else if (childNodeName\n          .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        // attempt\n        LOG.info(\"Loading application attempt from znode: \" + childNodeName);\n        ApplicationAttemptId attemptId \u003d\n            ConverterUtils.toApplicationAttemptId(childNodeName);\n        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n            new ApplicationAttemptStateDataPBImpl(\n                ApplicationAttemptStateDataProto.parseFrom(childData));\n        Credentials credentials \u003d null;\n        if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n          credentials \u003d new Credentials();\n          DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n          dibb.reset(attemptStateData.getAppAttemptTokens());\n          credentials.readTokenStorageStream(dibb);\n        }\n        ApplicationAttemptState attemptState \u003d\n            new ApplicationAttemptState(attemptId,\n              attemptStateData.getMasterContainer(), credentials,\n              attemptStateData.getStartTime(),\n              attemptStateData.getState(),\n              attemptStateData.getFinalTrackingUrl(),\n              attemptStateData.getDiagnostics(),\n              attemptStateData.getFinalApplicationStatus());\n        if (!attemptId.equals(attemptState.getAttemptId())) {\n          throw new YarnRuntimeException(\"The child node name is different \" +\n              \"from the application attempt id\");\n        }\n        attempts.add(attemptState);\n      } else {\n        LOG.info(\"Unknown child node with name: \" + childNodeName);\n      }\n    }\n\n    // go through all attempts and add them to their apps\n    for (ApplicationAttemptState attemptState : attempts) {\n      ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n      ApplicationState appState \u003d rmState.appState.get(appId);\n      if (appState !\u003d null) {\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      } else {\n        // the application znode may have been removed when the application\n        // completed but the RM might have stopped before it could remove the\n        // application attempt znodes\n        LOG.info(\"Application node not found for attempt: \"\n            + attemptState.getAttemptId());\n        deleteWithRetries(\n            getNodePath(rmAppRoot, attemptState.getAttemptId().toString()),\n            0);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "8628c1704b7d8c1a0ac01cea679c03245d11d330": {
      "type": "Yintroduced",
      "commitMessage": "YARN-353. Add Zookeeper-based store implementation for RMStateStore. Contributed by Bikas Saha, Jian He and Karthik Kambatla.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1524829 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/09/13 1:39 PM",
      "commitName": "8628c1704b7d8c1a0ac01cea679c03245d11d330",
      "commitAuthor": "Hitesh Shah",
      "diff": "@@ -0,0 +1,70 @@\n+  private synchronized void loadRMAppState(RMState rmState) throws Exception {\n+    List\u003cString\u003e childNodes \u003d zkClient.getChildren(rmAppRoot, true);\n+    List\u003cApplicationAttemptState\u003e attempts \u003d\n+        new ArrayList\u003cApplicationAttemptState\u003e();\n+    for (String childNodeName : childNodes) {\n+      String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n+      byte[] childData \u003d getDataWithRetries(childNodePath, true);\n+      if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n+        // application\n+        LOG.info(\"Loading application from znode: \" + childNodeName);\n+        ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n+        ApplicationStateDataPBImpl appStateData \u003d\n+            new ApplicationStateDataPBImpl(\n+                ApplicationStateDataProto.parseFrom(childData));\n+        ApplicationState appState \u003d\n+            new ApplicationState(appStateData.getSubmitTime(),\n+                appStateData.getApplicationSubmissionContext(),\n+                appStateData.getUser());\n+        if (!appId.equals(appState.context.getApplicationId())) {\n+          throw new YarnRuntimeException(\"The child node name is different \" +\n+              \"from the application id\");\n+        }\n+        rmState.appState.put(appId, appState);\n+      } else if (childNodeName\n+          .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n+        // attempt\n+        LOG.info(\"Loading application attempt from znode: \" + childNodeName);\n+        ApplicationAttemptId attemptId \u003d\n+            ConverterUtils.toApplicationAttemptId(childNodeName);\n+        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n+            new ApplicationAttemptStateDataPBImpl(\n+                ApplicationAttemptStateDataProto.parseFrom(childData));\n+        Credentials credentials \u003d null;\n+        if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n+          credentials \u003d new Credentials();\n+          DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n+          dibb.reset(attemptStateData.getAppAttemptTokens());\n+          credentials.readTokenStorageStream(dibb);\n+        }\n+        ApplicationAttemptState attemptState \u003d\n+            new ApplicationAttemptState(attemptId,\n+                attemptStateData.getMasterContainer(), credentials);\n+        if (!attemptId.equals(attemptState.getAttemptId())) {\n+          throw new YarnRuntimeException(\"The child node name is different \" +\n+              \"from the application attempt id\");\n+        }\n+        attempts.add(attemptState);\n+      } else {\n+        LOG.info(\"Unknown child node with name: \" + childNodeName);\n+      }\n+    }\n+\n+    // go through all attempts and add them to their apps\n+    for (ApplicationAttemptState attemptState : attempts) {\n+      ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n+      ApplicationState appState \u003d rmState.appState.get(appId);\n+      if (appState !\u003d null) {\n+        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n+      } else {\n+        // the application znode may have been removed when the application\n+        // completed but the RM might have stopped before it could remove the\n+        // application attempt znodes\n+        LOG.info(\"Application node not found for attempt: \"\n+            + attemptState.getAttemptId());\n+        deleteWithRetries(\n+            getNodePath(rmAppRoot, attemptState.getAttemptId().toString()),\n+            0);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void loadRMAppState(RMState rmState) throws Exception {\n    List\u003cString\u003e childNodes \u003d zkClient.getChildren(rmAppRoot, true);\n    List\u003cApplicationAttemptState\u003e attempts \u003d\n        new ArrayList\u003cApplicationAttemptState\u003e();\n    for (String childNodeName : childNodes) {\n      String childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n      byte[] childData \u003d getDataWithRetries(childNodePath, true);\n      if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n        // application\n        LOG.info(\"Loading application from znode: \" + childNodeName);\n        ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n        ApplicationStateDataPBImpl appStateData \u003d\n            new ApplicationStateDataPBImpl(\n                ApplicationStateDataProto.parseFrom(childData));\n        ApplicationState appState \u003d\n            new ApplicationState(appStateData.getSubmitTime(),\n                appStateData.getApplicationSubmissionContext(),\n                appStateData.getUser());\n        if (!appId.equals(appState.context.getApplicationId())) {\n          throw new YarnRuntimeException(\"The child node name is different \" +\n              \"from the application id\");\n        }\n        rmState.appState.put(appId, appState);\n      } else if (childNodeName\n          .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        // attempt\n        LOG.info(\"Loading application attempt from znode: \" + childNodeName);\n        ApplicationAttemptId attemptId \u003d\n            ConverterUtils.toApplicationAttemptId(childNodeName);\n        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n            new ApplicationAttemptStateDataPBImpl(\n                ApplicationAttemptStateDataProto.parseFrom(childData));\n        Credentials credentials \u003d null;\n        if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n          credentials \u003d new Credentials();\n          DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n          dibb.reset(attemptStateData.getAppAttemptTokens());\n          credentials.readTokenStorageStream(dibb);\n        }\n        ApplicationAttemptState attemptState \u003d\n            new ApplicationAttemptState(attemptId,\n                attemptStateData.getMasterContainer(), credentials);\n        if (!attemptId.equals(attemptState.getAttemptId())) {\n          throw new YarnRuntimeException(\"The child node name is different \" +\n              \"from the application attempt id\");\n        }\n        attempts.add(attemptState);\n      } else {\n        LOG.info(\"Unknown child node with name: \" + childNodeName);\n      }\n    }\n\n    // go through all attempts and add them to their apps\n    for (ApplicationAttemptState attemptState : attempts) {\n      ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n      ApplicationState appState \u003d rmState.appState.get(appId);\n      if (appState !\u003d null) {\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      } else {\n        // the application znode may have been removed when the application\n        // completed but the RM might have stopped before it could remove the\n        // application attempt znodes\n        LOG.info(\"Application node not found for attempt: \"\n            + attemptState.getAttemptId());\n        deleteWithRetries(\n            getNodePath(rmAppRoot, attemptState.getAttemptId().toString()),\n            0);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java"
    }
  }
}