{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StatePool.java",
  "functionName": "persist",
  "functionId": "persist",
  "sourceFilePath": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/state/StatePool.java",
  "functionStartLine": 229,
  "functionEndLine": 271,
  "numCommitsSeen": 5,
  "timeTaken": 1181,
  "changeHistory": [
    "10325d97329c214bb3899c8535df5a366bc86d2f",
    "a238f931ea7dce0ca620d1798156c84ff77097ff"
  ],
  "changeHistoryShort": {
    "10325d97329c214bb3899c8535df5a366bc86d2f": "Yfilerename",
    "a238f931ea7dce0ca620d1798156c84ff77097ff": "Yintroduced"
  },
  "changeHistoryDetails": {
    "10325d97329c214bb3899c8535df5a366bc86d2f": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3582. Move successfully passing MR1 tests to MR2 maven tree.(ahmed via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1233090 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/01/12 2:10 PM",
      "commitName": "10325d97329c214bb3899c8535df5a366bc86d2f",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/01/12 10:20 AM",
      "commitNameOld": "8b2f6909ec7df5cffb5ef417f5c9cffdee43e38a",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void persist() throws IOException {\n    if (!persist) {\n      return;\n    }\n    if (isUpdated()) {\n      System.out.println(\"State is updated! Committing.\");\n      Path currStateFile \u003d new Path(persistDirPath, CURRENT_STATE_FILENAME);\n      Path commitStateFile \u003d new Path(persistDirPath, COMMIT_STATE_FILENAME);\n      FileSystem fs \u003d currStateFile.getFileSystem(conf);\n\n      System.out.println(\"Starting the persist phase. Persisting to \" \n                         + currStateFile.toString());\n      // persist current state \n      //  write the contents of the current state to the current(temp) directory\n      FSDataOutputStream out \u003d fs.create(currStateFile, true);\n      write(out);\n      out.close();\n\n      System.out.println(\"Persist phase over. The best known un-committed state\"\n                         + \" is located at \" + currStateFile.toString());\n\n      // commit (phase-1) \n      //  copy the previous commit file to the relocation file\n      if (fs.exists(commitStateFile)) {\n        Path commitRelocationFile \u003d new Path(persistDirPath, timeStamp);\n        System.out.println(\"Starting the pre-commit phase. Moving the previous \" \n            + \"best known state to \" + commitRelocationFile.toString());\n        // copy the commit file to the relocation file\n        FileUtil.copy(fs,commitStateFile, fs, commitRelocationFile, false, \n                      conf);\n      }\n\n      // commit (phase-2)\n      System.out.println(\"Starting the commit phase. Committing the states in \" \n                         + currStateFile.toString());\n      FileUtil.copy(fs, currStateFile, fs, commitStateFile, true, true, conf);\n\n      System.out.println(\"Commit phase successful! The best known committed \" \n                         + \"state is located at \" + commitStateFile.toString());\n    } else {\n      System.out.println(\"State not updated! No commit required.\");\n    }\n  }",
      "path": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/state/StatePool.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/tools/rumen/state/StatePool.java",
        "newPath": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/state/StatePool.java"
      }
    },
    "a238f931ea7dce0ca620d1798156c84ff77097ff": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-778. Rumen Anonymizer. (Amar Kamat and Chris Douglas via amarrk)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1215141 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/12/11 6:20 AM",
      "commitName": "a238f931ea7dce0ca620d1798156c84ff77097ff",
      "commitAuthor": "Amar Kamat",
      "diff": "@@ -0,0 +1,43 @@\n+  public void persist() throws IOException {\n+    if (!persist) {\n+      return;\n+    }\n+    if (isUpdated()) {\n+      System.out.println(\"State is updated! Committing.\");\n+      Path currStateFile \u003d new Path(persistDirPath, CURRENT_STATE_FILENAME);\n+      Path commitStateFile \u003d new Path(persistDirPath, COMMIT_STATE_FILENAME);\n+      FileSystem fs \u003d currStateFile.getFileSystem(conf);\n+\n+      System.out.println(\"Starting the persist phase. Persisting to \" \n+                         + currStateFile.toString());\n+      // persist current state \n+      //  write the contents of the current state to the current(temp) directory\n+      FSDataOutputStream out \u003d fs.create(currStateFile, true);\n+      write(out);\n+      out.close();\n+\n+      System.out.println(\"Persist phase over. The best known un-committed state\"\n+                         + \" is located at \" + currStateFile.toString());\n+\n+      // commit (phase-1) \n+      //  copy the previous commit file to the relocation file\n+      if (fs.exists(commitStateFile)) {\n+        Path commitRelocationFile \u003d new Path(persistDirPath, timeStamp);\n+        System.out.println(\"Starting the pre-commit phase. Moving the previous \" \n+            + \"best known state to \" + commitRelocationFile.toString());\n+        // copy the commit file to the relocation file\n+        FileUtil.copy(fs,commitStateFile, fs, commitRelocationFile, false, \n+                      conf);\n+      }\n+\n+      // commit (phase-2)\n+      System.out.println(\"Starting the commit phase. Committing the states in \" \n+                         + currStateFile.toString());\n+      FileUtil.copy(fs, currStateFile, fs, commitStateFile, true, true, conf);\n+\n+      System.out.println(\"Commit phase successful! The best known committed \" \n+                         + \"state is located at \" + commitStateFile.toString());\n+    } else {\n+      System.out.println(\"State not updated! No commit required.\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void persist() throws IOException {\n    if (!persist) {\n      return;\n    }\n    if (isUpdated()) {\n      System.out.println(\"State is updated! Committing.\");\n      Path currStateFile \u003d new Path(persistDirPath, CURRENT_STATE_FILENAME);\n      Path commitStateFile \u003d new Path(persistDirPath, COMMIT_STATE_FILENAME);\n      FileSystem fs \u003d currStateFile.getFileSystem(conf);\n\n      System.out.println(\"Starting the persist phase. Persisting to \" \n                         + currStateFile.toString());\n      // persist current state \n      //  write the contents of the current state to the current(temp) directory\n      FSDataOutputStream out \u003d fs.create(currStateFile, true);\n      write(out);\n      out.close();\n\n      System.out.println(\"Persist phase over. The best known un-committed state\"\n                         + \" is located at \" + currStateFile.toString());\n\n      // commit (phase-1) \n      //  copy the previous commit file to the relocation file\n      if (fs.exists(commitStateFile)) {\n        Path commitRelocationFile \u003d new Path(persistDirPath, timeStamp);\n        System.out.println(\"Starting the pre-commit phase. Moving the previous \" \n            + \"best known state to \" + commitRelocationFile.toString());\n        // copy the commit file to the relocation file\n        FileUtil.copy(fs,commitStateFile, fs, commitRelocationFile, false, \n                      conf);\n      }\n\n      // commit (phase-2)\n      System.out.println(\"Starting the commit phase. Committing the states in \" \n                         + currStateFile.toString());\n      FileUtil.copy(fs, currStateFile, fs, commitStateFile, true, true, conf);\n\n      System.out.println(\"Commit phase successful! The best known committed \" \n                         + \"state is located at \" + commitStateFile.toString());\n    } else {\n      System.out.println(\"State not updated! No commit required.\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/tools/rumen/state/StatePool.java"
    }
  }
}