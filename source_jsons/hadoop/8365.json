{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirSnapshotOp.java",
  "functionName": "getSnapshotFiles",
  "functionId": "getSnapshotFiles___fsd-FSDirectory__lsf-List__DirectorySnapshottableFeature____file-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSnapshotOp.java",
  "functionStartLine": 202,
  "functionEndLine": 230,
  "numCommitsSeen": 18,
  "timeTaken": 2172,
  "changeHistory": [
    "693169ef34f856a27dc09d90a45fb4ec5b66ed2c",
    "286cc6483fe458894cdd22ff1d8822c304e0d94f",
    "97913f430cbe3f82ac866ae6ab8f42754102f6c0"
  ],
  "changeHistoryShort": {
    "693169ef34f856a27dc09d90a45fb4ec5b66ed2c": "Ybodychange",
    "286cc6483fe458894cdd22ff1d8822c304e0d94f": "Ybodychange",
    "97913f430cbe3f82ac866ae6ab8f42754102f6c0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "693169ef34f856a27dc09d90a45fb4ec5b66ed2c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12882. Support full open(PathHandle) contract in HDFS\n",
      "commitDate": "11/12/17 8:14 PM",
      "commitName": "693169ef34f856a27dc09d90a45fb4ec5b66ed2c",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "30/11/17 12:18 PM",
      "commitNameOld": "b1c7654ee40b372ed777525a42981c7cf55b5c72",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 11.33,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   static Collection\u003cString\u003e getSnapshotFiles(FSDirectory fsd,\n       List\u003cDirectorySnapshottableFeature\u003e lsf,\n       String file) throws IOException {\n     ArrayList\u003cString\u003e snaps \u003d new ArrayList\u003c\u003e();\n     for (DirectorySnapshottableFeature sf : lsf) {\n       // for each snapshottable dir e.g. /dir1, /dir2\n       final ReadOnlyList\u003cSnapshot\u003e lsnap \u003d sf.getSnapshotList();\n       for (Snapshot s : lsnap) {\n         // for each snapshot name under snapshottable dir\n         // e.g. /dir1/.snapshot/s1, /dir1/.snapshot/s2\n         final String dirName \u003d s.getRoot().getRootFullPathName();\n         if (!file.startsWith(dirName)) {\n           // file not in current snapshot root dir, no need to check other snaps\n           break;\n         }\n         String snapname \u003d s.getRoot().getFullPathName();\n         if (dirName.equals(Path.SEPARATOR)) { // handle rootDir\n           snapname +\u003d Path.SEPARATOR;\n         }\n         snapname +\u003d file.substring(file.indexOf(dirName) + dirName.length());\n-        if (fsd.getFSNamesystem().getFileInfo(snapname, true) !\u003d null) {\n+        HdfsFileStatus stat \u003d\n+            fsd.getFSNamesystem().getFileInfo(snapname, true, false, false);\n+        if (stat !\u003d null) {\n           snaps.add(snapname);\n         }\n       }\n     }\n     return snaps;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static Collection\u003cString\u003e getSnapshotFiles(FSDirectory fsd,\n      List\u003cDirectorySnapshottableFeature\u003e lsf,\n      String file) throws IOException {\n    ArrayList\u003cString\u003e snaps \u003d new ArrayList\u003c\u003e();\n    for (DirectorySnapshottableFeature sf : lsf) {\n      // for each snapshottable dir e.g. /dir1, /dir2\n      final ReadOnlyList\u003cSnapshot\u003e lsnap \u003d sf.getSnapshotList();\n      for (Snapshot s : lsnap) {\n        // for each snapshot name under snapshottable dir\n        // e.g. /dir1/.snapshot/s1, /dir1/.snapshot/s2\n        final String dirName \u003d s.getRoot().getRootFullPathName();\n        if (!file.startsWith(dirName)) {\n          // file not in current snapshot root dir, no need to check other snaps\n          break;\n        }\n        String snapname \u003d s.getRoot().getFullPathName();\n        if (dirName.equals(Path.SEPARATOR)) { // handle rootDir\n          snapname +\u003d Path.SEPARATOR;\n        }\n        snapname +\u003d file.substring(file.indexOf(dirName) + dirName.length());\n        HdfsFileStatus stat \u003d\n            fsd.getFSNamesystem().getFileInfo(snapname, true, false, false);\n        if (stat !\u003d null) {\n          snaps.add(snapname);\n        }\n      }\n    }\n    return snaps;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSnapshotOp.java",
      "extendedDetails": {}
    },
    "286cc6483fe458894cdd22ff1d8822c304e0d94f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9377. Fix findbugs warnings in FSDirSnapshotOp. (Mingliang Liu via Yongjun Zhang)\n",
      "commitDate": "05/11/15 2:36 PM",
      "commitName": "286cc6483fe458894cdd22ff1d8822c304e0d94f",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "27/10/15 11:31 PM",
      "commitNameOld": "97913f430cbe3f82ac866ae6ab8f42754102f6c0",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 8.67,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,27 @@\n   static Collection\u003cString\u003e getSnapshotFiles(FSDirectory fsd,\n       List\u003cDirectorySnapshottableFeature\u003e lsf,\n       String file) throws IOException {\n-    ArrayList\u003cString\u003e snaps \u003d new ArrayList\u003cString\u003e();\n-    ListIterator\u003cDirectorySnapshottableFeature\u003e sfi \u003d lsf.listIterator();\n+    ArrayList\u003cString\u003e snaps \u003d new ArrayList\u003c\u003e();\n     for (DirectorySnapshottableFeature sf : lsf) {\n       // for each snapshottable dir e.g. /dir1, /dir2\n       final ReadOnlyList\u003cSnapshot\u003e lsnap \u003d sf.getSnapshotList();\n       for (Snapshot s : lsnap) {\n         // for each snapshot name under snapshottable dir\n         // e.g. /dir1/.snapshot/s1, /dir1/.snapshot/s2\n         final String dirName \u003d s.getRoot().getRootFullPathName();\n         if (!file.startsWith(dirName)) {\n           // file not in current snapshot root dir, no need to check other snaps\n           break;\n         }\n         String snapname \u003d s.getRoot().getFullPathName();\n         if (dirName.equals(Path.SEPARATOR)) { // handle rootDir\n           snapname +\u003d Path.SEPARATOR;\n         }\n         snapname +\u003d file.substring(file.indexOf(dirName) + dirName.length());\n         if (fsd.getFSNamesystem().getFileInfo(snapname, true) !\u003d null) {\n           snaps.add(snapname);\n         }\n       }\n     }\n     return snaps;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static Collection\u003cString\u003e getSnapshotFiles(FSDirectory fsd,\n      List\u003cDirectorySnapshottableFeature\u003e lsf,\n      String file) throws IOException {\n    ArrayList\u003cString\u003e snaps \u003d new ArrayList\u003c\u003e();\n    for (DirectorySnapshottableFeature sf : lsf) {\n      // for each snapshottable dir e.g. /dir1, /dir2\n      final ReadOnlyList\u003cSnapshot\u003e lsnap \u003d sf.getSnapshotList();\n      for (Snapshot s : lsnap) {\n        // for each snapshot name under snapshottable dir\n        // e.g. /dir1/.snapshot/s1, /dir1/.snapshot/s2\n        final String dirName \u003d s.getRoot().getRootFullPathName();\n        if (!file.startsWith(dirName)) {\n          // file not in current snapshot root dir, no need to check other snaps\n          break;\n        }\n        String snapname \u003d s.getRoot().getFullPathName();\n        if (dirName.equals(Path.SEPARATOR)) { // handle rootDir\n          snapname +\u003d Path.SEPARATOR;\n        }\n        snapname +\u003d file.substring(file.indexOf(dirName) + dirName.length());\n        if (fsd.getFSNamesystem().getFileInfo(snapname, true) !\u003d null) {\n          snaps.add(snapname);\n        }\n      }\n    }\n    return snaps;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSnapshotOp.java",
      "extendedDetails": {}
    },
    "97913f430cbe3f82ac866ae6ab8f42754102f6c0": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9231. fsck doesn\u0027t list correct file path when Bad Replicas/Blocks are in a snapshot. (Xiao Chen via Yongjun Zhang)\n",
      "commitDate": "27/10/15 11:31 PM",
      "commitName": "97913f430cbe3f82ac866ae6ab8f42754102f6c0",
      "commitAuthor": "Yongjun Zhang",
      "diff": "@@ -0,0 +1,28 @@\n+  static Collection\u003cString\u003e getSnapshotFiles(FSDirectory fsd,\n+      List\u003cDirectorySnapshottableFeature\u003e lsf,\n+      String file) throws IOException {\n+    ArrayList\u003cString\u003e snaps \u003d new ArrayList\u003cString\u003e();\n+    ListIterator\u003cDirectorySnapshottableFeature\u003e sfi \u003d lsf.listIterator();\n+    for (DirectorySnapshottableFeature sf : lsf) {\n+      // for each snapshottable dir e.g. /dir1, /dir2\n+      final ReadOnlyList\u003cSnapshot\u003e lsnap \u003d sf.getSnapshotList();\n+      for (Snapshot s : lsnap) {\n+        // for each snapshot name under snapshottable dir\n+        // e.g. /dir1/.snapshot/s1, /dir1/.snapshot/s2\n+        final String dirName \u003d s.getRoot().getRootFullPathName();\n+        if (!file.startsWith(dirName)) {\n+          // file not in current snapshot root dir, no need to check other snaps\n+          break;\n+        }\n+        String snapname \u003d s.getRoot().getFullPathName();\n+        if (dirName.equals(Path.SEPARATOR)) { // handle rootDir\n+          snapname +\u003d Path.SEPARATOR;\n+        }\n+        snapname +\u003d file.substring(file.indexOf(dirName) + dirName.length());\n+        if (fsd.getFSNamesystem().getFileInfo(snapname, true) !\u003d null) {\n+          snaps.add(snapname);\n+        }\n+      }\n+    }\n+    return snaps;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static Collection\u003cString\u003e getSnapshotFiles(FSDirectory fsd,\n      List\u003cDirectorySnapshottableFeature\u003e lsf,\n      String file) throws IOException {\n    ArrayList\u003cString\u003e snaps \u003d new ArrayList\u003cString\u003e();\n    ListIterator\u003cDirectorySnapshottableFeature\u003e sfi \u003d lsf.listIterator();\n    for (DirectorySnapshottableFeature sf : lsf) {\n      // for each snapshottable dir e.g. /dir1, /dir2\n      final ReadOnlyList\u003cSnapshot\u003e lsnap \u003d sf.getSnapshotList();\n      for (Snapshot s : lsnap) {\n        // for each snapshot name under snapshottable dir\n        // e.g. /dir1/.snapshot/s1, /dir1/.snapshot/s2\n        final String dirName \u003d s.getRoot().getRootFullPathName();\n        if (!file.startsWith(dirName)) {\n          // file not in current snapshot root dir, no need to check other snaps\n          break;\n        }\n        String snapname \u003d s.getRoot().getFullPathName();\n        if (dirName.equals(Path.SEPARATOR)) { // handle rootDir\n          snapname +\u003d Path.SEPARATOR;\n        }\n        snapname +\u003d file.substring(file.indexOf(dirName) + dirName.length());\n        if (fsd.getFSNamesystem().getFileInfo(snapname, true) !\u003d null) {\n          snaps.add(snapname);\n        }\n      }\n    }\n    return snaps;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSnapshotOp.java"
    }
  }
}