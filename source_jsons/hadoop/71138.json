{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Client.java",
  "functionName": "setupRemoteResourcesGetEnv",
  "functionId": "setupRemoteResourcesGetEnv",
  "sourceFilePath": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/Client.java",
  "functionStartLine": 649,
  "functionEndLine": 682,
  "numCommitsSeen": 7,
  "timeTaken": 562,
  "changeHistory": [
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91"
  ],
  "changeHistoryShort": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12345 Add Dynamometer to hadoop-tools, a tool for scale testing the HDFS NameNode with real metadata and workloads. Contributed by Erik Krogen.\n",
      "commitDate": "25/06/19 8:07 AM",
      "commitName": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,34 @@\n+  private Map\u003cString, String\u003e setupRemoteResourcesGetEnv() throws IOException {\n+    LOG.info(\"Set the environment for the application master\");\n+    Map\u003cString, String\u003e env \u003d new HashMap\u003c\u003e();\n+\n+    // Copy local resources to a remote FS to prepare them for localization\n+    // by containers. We do not need to set them as local resources here as\n+    // the AM does not need them.\n+    if (launchNameNode) {\n+      setupRemoteResource(infraAppId, DynoConstants.FS_IMAGE, env, fsImagePath);\n+      setupRemoteResource(infraAppId, DynoConstants.FS_IMAGE_MD5, env,\n+          fsImageMD5Path);\n+    } else {\n+      env.put(DynoConstants.REMOTE_NN_RPC_ADDR_ENV, remoteNameNodeRpcAddress);\n+    }\n+    setupRemoteResource(infraAppId, DynoConstants.VERSION, env,\n+        versionFilePath);\n+    setupRemoteResource(infraAppId, DynoConstants.CONF_ZIP, env, confPath);\n+    setupRemoteResource(infraAppId, DynoConstants.START_SCRIPT, env,\n+        START_SCRIPT_LOCATION);\n+    setupRemoteResource(infraAppId, DynoConstants.HADOOP_BINARY, env,\n+        hadoopBinary);\n+    setupRemoteResource(infraAppId, DynoConstants.DYNO_DEPENDENCIES, env,\n+        dependencyJars);\n+\n+    env.put(DynoConstants.BLOCK_LIST_PATH_ENV, blockListPath);\n+    env.put(DynoConstants.JOB_ACL_VIEW_ENV, getConf().get(\n+        MRJobConfig.JOB_ACL_VIEW_JOB, MRJobConfig.DEFAULT_JOB_ACL_VIEW_JOB));\n+\n+    env.put(DynoConstants.REMOTE_STORAGE_PATH_ENV,\n+        getRemoteStoragePath(getConf(), infraAppId).toString());\n+\n+    env.put(Environment.CLASSPATH.key(), getAMClassPathEnv());\n+    return env;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, String\u003e setupRemoteResourcesGetEnv() throws IOException {\n    LOG.info(\"Set the environment for the application master\");\n    Map\u003cString, String\u003e env \u003d new HashMap\u003c\u003e();\n\n    // Copy local resources to a remote FS to prepare them for localization\n    // by containers. We do not need to set them as local resources here as\n    // the AM does not need them.\n    if (launchNameNode) {\n      setupRemoteResource(infraAppId, DynoConstants.FS_IMAGE, env, fsImagePath);\n      setupRemoteResource(infraAppId, DynoConstants.FS_IMAGE_MD5, env,\n          fsImageMD5Path);\n    } else {\n      env.put(DynoConstants.REMOTE_NN_RPC_ADDR_ENV, remoteNameNodeRpcAddress);\n    }\n    setupRemoteResource(infraAppId, DynoConstants.VERSION, env,\n        versionFilePath);\n    setupRemoteResource(infraAppId, DynoConstants.CONF_ZIP, env, confPath);\n    setupRemoteResource(infraAppId, DynoConstants.START_SCRIPT, env,\n        START_SCRIPT_LOCATION);\n    setupRemoteResource(infraAppId, DynoConstants.HADOOP_BINARY, env,\n        hadoopBinary);\n    setupRemoteResource(infraAppId, DynoConstants.DYNO_DEPENDENCIES, env,\n        dependencyJars);\n\n    env.put(DynoConstants.BLOCK_LIST_PATH_ENV, blockListPath);\n    env.put(DynoConstants.JOB_ACL_VIEW_ENV, getConf().get(\n        MRJobConfig.JOB_ACL_VIEW_JOB, MRJobConfig.DEFAULT_JOB_ACL_VIEW_JOB));\n\n    env.put(DynoConstants.REMOTE_STORAGE_PATH_ENV,\n        getRemoteStoragePath(getConf(), infraAppId).toString());\n\n    env.put(Environment.CLASSPATH.key(), getAMClassPathEnv());\n    return env;\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/Client.java"
    }
  }
}