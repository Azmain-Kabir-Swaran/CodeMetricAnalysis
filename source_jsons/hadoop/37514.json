{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceManager.java",
  "functionName": "handle",
  "functionId": "handle___event-RMAppAttemptEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
  "functionStartLine": 1092,
  "functionEndLine": 1134,
  "numCommitsSeen": 227,
  "timeTaken": 10444,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "3400d0c535aeb151c3f283cc41111b15d66990e5",
    "52734134116eb4b18686e308d00e71e7e903383e",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "3400d0c535aeb151c3f283cc41111b15d66990e5": "Ybodychange",
    "52734134116eb4b18686e308d00e71e7e903383e": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n     public void handle(RMAppAttemptEvent event) {\n       ApplicationAttemptId appAttemptId \u003d event.getApplicationAttemptId();\n       ApplicationId appId \u003d appAttemptId.getApplicationId();\n       RMApp rmApp \u003d this.rmContext.getRMApps().get(appId);\n       if (rmApp !\u003d null) {\n         RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n         if (rmAppAttempt !\u003d null) {\n           try {\n             rmAppAttempt.handle(event);\n           } catch (Throwable t) {\n             LOG.error(\"Error in handling event type \" + event.getType()\n                 + \" for applicationAttempt \" + appAttemptId, t);\n           }\n         } else if (rmApp.getApplicationSubmissionContext() !\u003d null\n             \u0026\u0026 rmApp.getApplicationSubmissionContext()\n             .getKeepContainersAcrossApplicationAttempts()\n             \u0026\u0026 event.getType() \u003d\u003d RMAppAttemptEventType.CONTAINER_FINISHED) {\n           // For work-preserving AM restart, failed attempts are still\n           // capturing CONTAINER_FINISHED events and record the finished\n           // containers which will be used by current attempt.\n           // We just keep \u0027yarn.resourcemanager.am.max-attempts\u0027 in\n           // RMStateStore. If the finished container\u0027s attempt is deleted, we\n           // use the first attempt in app.attempts to deal with these events.\n \n           RMAppAttempt previousFailedAttempt \u003d\n               rmApp.getAppAttempts().values().iterator().next();\n           if (previousFailedAttempt !\u003d null) {\n             try {\n-              LOG.debug(\"Event \" + event.getType() + \" handled by \"\n-                  + previousFailedAttempt);\n+              LOG.debug(\"Event {} handled by {}\", event.getType(),\n+                  previousFailedAttempt);\n               previousFailedAttempt.handle(event);\n             } catch (Throwable t) {\n               LOG.error(\"Error in handling event type \" + event.getType()\n                   + \" for applicationAttempt \" + appAttemptId\n                   + \" with \" + previousFailedAttempt, t);\n             }\n           } else {\n             LOG.error(\"Event \" + event.getType()\n                 + \" not handled, because previousFailedAttempt is null\");\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void handle(RMAppAttemptEvent event) {\n      ApplicationAttemptId appAttemptId \u003d event.getApplicationAttemptId();\n      ApplicationId appId \u003d appAttemptId.getApplicationId();\n      RMApp rmApp \u003d this.rmContext.getRMApps().get(appId);\n      if (rmApp !\u003d null) {\n        RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n        if (rmAppAttempt !\u003d null) {\n          try {\n            rmAppAttempt.handle(event);\n          } catch (Throwable t) {\n            LOG.error(\"Error in handling event type \" + event.getType()\n                + \" for applicationAttempt \" + appAttemptId, t);\n          }\n        } else if (rmApp.getApplicationSubmissionContext() !\u003d null\n            \u0026\u0026 rmApp.getApplicationSubmissionContext()\n            .getKeepContainersAcrossApplicationAttempts()\n            \u0026\u0026 event.getType() \u003d\u003d RMAppAttemptEventType.CONTAINER_FINISHED) {\n          // For work-preserving AM restart, failed attempts are still\n          // capturing CONTAINER_FINISHED events and record the finished\n          // containers which will be used by current attempt.\n          // We just keep \u0027yarn.resourcemanager.am.max-attempts\u0027 in\n          // RMStateStore. If the finished container\u0027s attempt is deleted, we\n          // use the first attempt in app.attempts to deal with these events.\n\n          RMAppAttempt previousFailedAttempt \u003d\n              rmApp.getAppAttempts().values().iterator().next();\n          if (previousFailedAttempt !\u003d null) {\n            try {\n              LOG.debug(\"Event {} handled by {}\", event.getType(),\n                  previousFailedAttempt);\n              previousFailedAttempt.handle(event);\n            } catch (Throwable t) {\n              LOG.error(\"Error in handling event type \" + event.getType()\n                  + \" for applicationAttempt \" + appAttemptId\n                  + \" with \" + previousFailedAttempt, t);\n            }\n          } else {\n            LOG.error(\"Event \" + event.getType()\n                + \" not handled, because previousFailedAttempt is null\");\n          }\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "3400d0c535aeb151c3f283cc41111b15d66990e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7698. A misleading variable\u0027s name in ApplicationAttemptEventDispatcher\n\nSigned-off-by: Akira Ajisaka \u003caajisaka@apache.org\u003e\n",
      "commitDate": "29/01/18 7:00 AM",
      "commitName": "3400d0c535aeb151c3f283cc41111b15d66990e5",
      "commitAuthor": "Jinjiang Ling",
      "commitDateOld": "23/01/18 5:54 PM",
      "commitNameOld": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 5.55,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n     public void handle(RMAppAttemptEvent event) {\n-      ApplicationAttemptId appAttemptID \u003d event.getApplicationAttemptId();\n-      ApplicationId appAttemptId \u003d appAttemptID.getApplicationId();\n-      RMApp rmApp \u003d this.rmContext.getRMApps().get(appAttemptId);\n+      ApplicationAttemptId appAttemptId \u003d event.getApplicationAttemptId();\n+      ApplicationId appId \u003d appAttemptId.getApplicationId();\n+      RMApp rmApp \u003d this.rmContext.getRMApps().get(appId);\n       if (rmApp !\u003d null) {\n-        RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptID);\n+        RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n         if (rmAppAttempt !\u003d null) {\n           try {\n             rmAppAttempt.handle(event);\n           } catch (Throwable t) {\n             LOG.error(\"Error in handling event type \" + event.getType()\n                 + \" for applicationAttempt \" + appAttemptId, t);\n           }\n         } else if (rmApp.getApplicationSubmissionContext() !\u003d null\n             \u0026\u0026 rmApp.getApplicationSubmissionContext()\n             .getKeepContainersAcrossApplicationAttempts()\n             \u0026\u0026 event.getType() \u003d\u003d RMAppAttemptEventType.CONTAINER_FINISHED) {\n           // For work-preserving AM restart, failed attempts are still\n           // capturing CONTAINER_FINISHED events and record the finished\n           // containers which will be used by current attempt.\n           // We just keep \u0027yarn.resourcemanager.am.max-attempts\u0027 in\n           // RMStateStore. If the finished container\u0027s attempt is deleted, we\n           // use the first attempt in app.attempts to deal with these events.\n \n           RMAppAttempt previousFailedAttempt \u003d\n               rmApp.getAppAttempts().values().iterator().next();\n           if (previousFailedAttempt !\u003d null) {\n             try {\n               LOG.debug(\"Event \" + event.getType() + \" handled by \"\n                   + previousFailedAttempt);\n               previousFailedAttempt.handle(event);\n             } catch (Throwable t) {\n               LOG.error(\"Error in handling event type \" + event.getType()\n                   + \" for applicationAttempt \" + appAttemptId\n                   + \" with \" + previousFailedAttempt, t);\n             }\n           } else {\n             LOG.error(\"Event \" + event.getType()\n                 + \" not handled, because previousFailedAttempt is null\");\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void handle(RMAppAttemptEvent event) {\n      ApplicationAttemptId appAttemptId \u003d event.getApplicationAttemptId();\n      ApplicationId appId \u003d appAttemptId.getApplicationId();\n      RMApp rmApp \u003d this.rmContext.getRMApps().get(appId);\n      if (rmApp !\u003d null) {\n        RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n        if (rmAppAttempt !\u003d null) {\n          try {\n            rmAppAttempt.handle(event);\n          } catch (Throwable t) {\n            LOG.error(\"Error in handling event type \" + event.getType()\n                + \" for applicationAttempt \" + appAttemptId, t);\n          }\n        } else if (rmApp.getApplicationSubmissionContext() !\u003d null\n            \u0026\u0026 rmApp.getApplicationSubmissionContext()\n            .getKeepContainersAcrossApplicationAttempts()\n            \u0026\u0026 event.getType() \u003d\u003d RMAppAttemptEventType.CONTAINER_FINISHED) {\n          // For work-preserving AM restart, failed attempts are still\n          // capturing CONTAINER_FINISHED events and record the finished\n          // containers which will be used by current attempt.\n          // We just keep \u0027yarn.resourcemanager.am.max-attempts\u0027 in\n          // RMStateStore. If the finished container\u0027s attempt is deleted, we\n          // use the first attempt in app.attempts to deal with these events.\n\n          RMAppAttempt previousFailedAttempt \u003d\n              rmApp.getAppAttempts().values().iterator().next();\n          if (previousFailedAttempt !\u003d null) {\n            try {\n              LOG.debug(\"Event \" + event.getType() + \" handled by \"\n                  + previousFailedAttempt);\n              previousFailedAttempt.handle(event);\n            } catch (Throwable t) {\n              LOG.error(\"Error in handling event type \" + event.getType()\n                  + \" for applicationAttempt \" + appAttemptId\n                  + \" with \" + previousFailedAttempt, t);\n            }\n          } else {\n            LOG.error(\"Event \" + event.getType()\n                + \" not handled, because previousFailedAttempt is null\");\n          }\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "52734134116eb4b18686e308d00e71e7e903383e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3480. Remove attempts that are beyond max-attempt limit from state store. Contributed by Jun Gong\n",
      "commitDate": "29/12/15 3:58 PM",
      "commitName": "52734134116eb4b18686e308d00e71e7e903383e",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/12/15 9:43 AM",
      "commitNameOld": "65f395226ba6cc3750a268a308e288b916f8df1e",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 23.26,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,43 @@\n     public void handle(RMAppAttemptEvent event) {\n       ApplicationAttemptId appAttemptID \u003d event.getApplicationAttemptId();\n       ApplicationId appAttemptId \u003d appAttemptID.getApplicationId();\n       RMApp rmApp \u003d this.rmContext.getRMApps().get(appAttemptId);\n       if (rmApp !\u003d null) {\n         RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptID);\n         if (rmAppAttempt !\u003d null) {\n           try {\n             rmAppAttempt.handle(event);\n           } catch (Throwable t) {\n             LOG.error(\"Error in handling event type \" + event.getType()\n                 + \" for applicationAttempt \" + appAttemptId, t);\n           }\n+        } else if (rmApp.getApplicationSubmissionContext() !\u003d null\n+            \u0026\u0026 rmApp.getApplicationSubmissionContext()\n+            .getKeepContainersAcrossApplicationAttempts()\n+            \u0026\u0026 event.getType() \u003d\u003d RMAppAttemptEventType.CONTAINER_FINISHED) {\n+          // For work-preserving AM restart, failed attempts are still\n+          // capturing CONTAINER_FINISHED events and record the finished\n+          // containers which will be used by current attempt.\n+          // We just keep \u0027yarn.resourcemanager.am.max-attempts\u0027 in\n+          // RMStateStore. If the finished container\u0027s attempt is deleted, we\n+          // use the first attempt in app.attempts to deal with these events.\n+\n+          RMAppAttempt previousFailedAttempt \u003d\n+              rmApp.getAppAttempts().values().iterator().next();\n+          if (previousFailedAttempt !\u003d null) {\n+            try {\n+              LOG.debug(\"Event \" + event.getType() + \" handled by \"\n+                  + previousFailedAttempt);\n+              previousFailedAttempt.handle(event);\n+            } catch (Throwable t) {\n+              LOG.error(\"Error in handling event type \" + event.getType()\n+                  + \" for applicationAttempt \" + appAttemptId\n+                  + \" with \" + previousFailedAttempt, t);\n+            }\n+          } else {\n+            LOG.error(\"Event \" + event.getType()\n+                + \" not handled, because previousFailedAttempt is null\");\n+          }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void handle(RMAppAttemptEvent event) {\n      ApplicationAttemptId appAttemptID \u003d event.getApplicationAttemptId();\n      ApplicationId appAttemptId \u003d appAttemptID.getApplicationId();\n      RMApp rmApp \u003d this.rmContext.getRMApps().get(appAttemptId);\n      if (rmApp !\u003d null) {\n        RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptID);\n        if (rmAppAttempt !\u003d null) {\n          try {\n            rmAppAttempt.handle(event);\n          } catch (Throwable t) {\n            LOG.error(\"Error in handling event type \" + event.getType()\n                + \" for applicationAttempt \" + appAttemptId, t);\n          }\n        } else if (rmApp.getApplicationSubmissionContext() !\u003d null\n            \u0026\u0026 rmApp.getApplicationSubmissionContext()\n            .getKeepContainersAcrossApplicationAttempts()\n            \u0026\u0026 event.getType() \u003d\u003d RMAppAttemptEventType.CONTAINER_FINISHED) {\n          // For work-preserving AM restart, failed attempts are still\n          // capturing CONTAINER_FINISHED events and record the finished\n          // containers which will be used by current attempt.\n          // We just keep \u0027yarn.resourcemanager.am.max-attempts\u0027 in\n          // RMStateStore. If the finished container\u0027s attempt is deleted, we\n          // use the first attempt in app.attempts to deal with these events.\n\n          RMAppAttempt previousFailedAttempt \u003d\n              rmApp.getAppAttempts().values().iterator().next();\n          if (previousFailedAttempt !\u003d null) {\n            try {\n              LOG.debug(\"Event \" + event.getType() + \" handled by \"\n                  + previousFailedAttempt);\n              previousFailedAttempt.handle(event);\n            } catch (Throwable t) {\n              LOG.error(\"Error in handling event type \" + event.getType()\n                  + \" for applicationAttempt \" + appAttemptId\n                  + \" with \" + previousFailedAttempt, t);\n            }\n          } else {\n            LOG.error(\"Event \" + event.getType()\n                + \" not handled, because previousFailedAttempt is null\");\n          }\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void handle(RMAppAttemptEvent event) {\n      ApplicationAttemptId appAttemptID \u003d event.getApplicationAttemptId();\n      ApplicationId appAttemptId \u003d appAttemptID.getApplicationId();\n      RMApp rmApp \u003d this.rmContext.getRMApps().get(appAttemptId);\n      if (rmApp !\u003d null) {\n        RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptID);\n        if (rmAppAttempt !\u003d null) {\n          try {\n            rmAppAttempt.handle(event);\n          } catch (Throwable t) {\n            LOG.error(\"Error in handling event type \" + event.getType()\n                + \" for applicationAttempt \" + appAttemptId, t);\n          }\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void handle(RMAppAttemptEvent event) {\n      ApplicationAttemptId appAttemptID \u003d event.getApplicationAttemptId();\n      ApplicationId appAttemptId \u003d appAttemptID.getApplicationId();\n      RMApp rmApp \u003d this.rmContext.getRMApps().get(appAttemptId);\n      if (rmApp !\u003d null) {\n        RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptID);\n        if (rmAppAttempt !\u003d null) {\n          try {\n            rmAppAttempt.handle(event);\n          } catch (Throwable t) {\n            LOG.error(\"Error in handling event type \" + event.getType()\n                + \" for applicationAttempt \" + appAttemptId, t);\n          }\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,16 @@\n+    public void handle(RMAppAttemptEvent event) {\n+      ApplicationAttemptId appAttemptID \u003d event.getApplicationAttemptId();\n+      ApplicationId appAttemptId \u003d appAttemptID.getApplicationId();\n+      RMApp rmApp \u003d this.rmContext.getRMApps().get(appAttemptId);\n+      if (rmApp !\u003d null) {\n+        RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptID);\n+        if (rmAppAttempt !\u003d null) {\n+          try {\n+            rmAppAttempt.handle(event);\n+          } catch (Throwable t) {\n+            LOG.error(\"Error in handling event type \" + event.getType()\n+                + \" for applicationAttempt \" + appAttemptId, t);\n+          }\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void handle(RMAppAttemptEvent event) {\n      ApplicationAttemptId appAttemptID \u003d event.getApplicationAttemptId();\n      ApplicationId appAttemptId \u003d appAttemptID.getApplicationId();\n      RMApp rmApp \u003d this.rmContext.getRMApps().get(appAttemptId);\n      if (rmApp !\u003d null) {\n        RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptID);\n        if (rmAppAttempt !\u003d null) {\n          try {\n            rmAppAttempt.handle(event);\n          } catch (Throwable t) {\n            LOG.error(\"Error in handling event type \" + event.getType()\n                + \" for applicationAttempt \" + appAttemptId, t);\n          }\n        }\n      }\n    }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
    }
  }
}