{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StripedReader.java",
  "functionName": "initReaders",
  "functionId": "initReaders",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedReader.java",
  "functionStartLine": 141,
  "functionEndLine": 165,
  "numCommitsSeen": 6,
  "timeTaken": 859,
  "changeHistory": [
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f"
  ],
  "changeHistoryShort": {
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
      "commitDate": "06/04/16 10:50 PM",
      "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,25 @@\n+  private void initReaders() throws IOException {\n+    // Store the array indices of source DNs we have read successfully.\n+    // In each iteration of read, the successList list may be updated if\n+    // some source DN is corrupted or slow. And use the updated successList\n+    // list of DNs for next iteration read.\n+    successList \u003d new int[minRequiredSources];\n+\n+    StripedBlockReader reader;\n+    int nSuccess \u003d 0;\n+    for (int i \u003d 0; i \u003c sources.length \u0026\u0026 nSuccess \u003c minRequiredSources; i++) {\n+      reader \u003d createReader(i, 0);\n+      readers.add(reader);\n+      if (reader.getBlockReader() !\u003d null) {\n+        initOrVerifyChecksum(reader);\n+        successList[nSuccess++] \u003d i;\n+      }\n+    }\n+\n+    if (nSuccess \u003c minRequiredSources) {\n+      String error \u003d \"Can\u0027t find minimum sources required by \"\n+          + \"reconstruction, block id: \"\n+          + reconstructor.getBlockGroup().getBlockId();\n+      throw new IOException(error);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initReaders() throws IOException {\n    // Store the array indices of source DNs we have read successfully.\n    // In each iteration of read, the successList list may be updated if\n    // some source DN is corrupted or slow. And use the updated successList\n    // list of DNs for next iteration read.\n    successList \u003d new int[minRequiredSources];\n\n    StripedBlockReader reader;\n    int nSuccess \u003d 0;\n    for (int i \u003d 0; i \u003c sources.length \u0026\u0026 nSuccess \u003c minRequiredSources; i++) {\n      reader \u003d createReader(i, 0);\n      readers.add(reader);\n      if (reader.getBlockReader() !\u003d null) {\n        initOrVerifyChecksum(reader);\n        successList[nSuccess++] \u003d i;\n      }\n    }\n\n    if (nSuccess \u003c minRequiredSources) {\n      String error \u003d \"Can\u0027t find minimum sources required by \"\n          + \"reconstruction, block id: \"\n          + reconstructor.getBlockGroup().getBlockId();\n      throw new IOException(error);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedReader.java"
    }
  }
}