{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMS.java",
  "functionName": "handleEncryptedKeyOp",
  "functionId": "handleEncryptedKeyOp___versionName-String(annotations-@PathParam(\"versionName\")__modifiers-final)__eekOp-String(annotations-@QueryParam(KMSRESTConstants.EEK_OP))__jsonPayload-Map",
  "sourceFilePath": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
  "functionStartLine": 609,
  "functionEndLine": 690,
  "numCommitsSeen": 36,
  "timeTaken": 3359,
  "changeHistory": [
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99",
    "79d90b810c14d5e3abab75235f587663834ce36c",
    "65912e4027548868ebefd8ee36eb00fa889704a7",
    "89bd6d29a62afd7ed8ff87bcc29d17b1cb53dcb6",
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
    "021ae471153ce2566924b0f6d29809669074c06d",
    "bda9c584c828fdd18e9c066747d58dbf751a585d",
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64"
  ],
  "changeHistoryShort": {
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99": "Ybodychange",
    "79d90b810c14d5e3abab75235f587663834ce36c": "Ymultichange(Yrename,Ybodychange)",
    "65912e4027548868ebefd8ee36eb00fa889704a7": "Ybodychange",
    "89bd6d29a62afd7ed8ff87bcc29d17b1cb53dcb6": "Ybodychange",
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "021ae471153ce2566924b0f6d29809669074c06d": "Ybodychange",
    "bda9c584c828fdd18e9c066747d58dbf751a585d": "Ybodychange",
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14705. Add batched interface reencryptEncryptedKeys to KMS.\n",
      "commitDate": "22/08/17 7:47 AM",
      "commitName": "4ec5acc70418a3f2327cf83ecae1789a057fdd99",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "08/06/17 10:35 PM",
      "commitNameOld": "c4b5c32669423b9a792f33f9f8333d95528f2515",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 74.38,
      "commitsBetweenForRepo": 438,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,82 @@\n   public Response handleEncryptedKeyOp(\n       @PathParam(\"versionName\") final String versionName,\n       @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n       Map jsonPayload)\n       throws Exception {\n     try {\n       LOG.trace(\"Entering decryptEncryptedKey method.\");\n       UserGroupInformation user \u003d HttpUserGroupInformation.get();\n-      KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n-      KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n+      checkNotEmpty(versionName, \"versionName\");\n+      checkNotNull(eekOp, \"eekOp\");\n       LOG.debug(\"Decrypting key for {}, the edek Operation is {}.\",\n               versionName, eekOp);\n \n       final String keyName \u003d (String) jsonPayload.get(\n               KMSRESTConstants.NAME_FIELD);\n       String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n       String encMaterialStr \u003d\n               (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n-      KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n+      checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n       final byte[] iv \u003d Base64.decodeBase64(ivStr);\n-      KMSClientProvider.checkNotNull(encMaterialStr,\n+      checkNotNull(encMaterialStr,\n           KMSRESTConstants.MATERIAL_FIELD);\n       final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n       Object retJSON;\n       if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n+        KMSWebApp.getDecryptEEKCallsMeter().mark();\n         assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK,\n                 keyName);\n \n         KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n                 new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n                 @Override\n                   public KeyVersion run() throws Exception {\n                   return provider.decryptEncryptedKey(\n                             new KMSClientProvider.KMSEncryptedKeyVersion(\n                                     keyName, versionName, iv,\n                                             KeyProviderCryptoExtension.EEK,\n                                             encMaterial)\n                     );\n                 }\n               }\n         );\n \n-        retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n+        retJSON \u003d KMSUtil.toJSON(retKeyVersion);\n         kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n       } else if (eekOp.equals(KMSRESTConstants.EEK_REENCRYPT)) {\n+        KMSWebApp.getReencryptEEKCallsMeter().mark();\n         assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.REENCRYPT_EEK,\n             keyName);\n \n         EncryptedKeyVersion retEncryptedKeyVersion \u003d\n             user.doAs(new PrivilegedExceptionAction\u003cEncryptedKeyVersion\u003e() {\n               @Override\n               public EncryptedKeyVersion run() throws Exception {\n                 return provider.reencryptEncryptedKey(\n                     new KMSClientProvider.KMSEncryptedKeyVersion(keyName,\n                         versionName, iv, KeyProviderCryptoExtension.EEK,\n                         encMaterial));\n               }\n             });\n \n-        retJSON \u003d KMSServerJSONUtils.toJSON(retEncryptedKeyVersion);\n+        retJSON \u003d KMSUtil.toJSON(retEncryptedKeyVersion);\n         kmsAudit.ok(user, KMSOp.REENCRYPT_EEK, keyName, \"\");\n       } else {\n         StringBuilder error;\n         error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n         error.append(KMSRESTConstants.EEK_OP);\n         error.append(\" value, it must be \");\n         error.append(KMSRESTConstants.EEK_GENERATE);\n         error.append(\" or \");\n         error.append(KMSRESTConstants.EEK_DECRYPT);\n         LOG.error(error.toString());\n         throw new IllegalArgumentException(error.toString());\n       }\n-      KMSWebApp.getDecryptEEKCallsMeter().mark();\n       LOG.trace(\"Exiting handleEncryptedKeyOp method.\");\n       return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n           .build();\n     } catch (Exception e) {\n       LOG.debug(\"Exception in handleEncryptedKeyOp.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response handleEncryptedKeyOp(\n      @PathParam(\"versionName\") final String versionName,\n      @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n      Map jsonPayload)\n      throws Exception {\n    try {\n      LOG.trace(\"Entering decryptEncryptedKey method.\");\n      UserGroupInformation user \u003d HttpUserGroupInformation.get();\n      checkNotEmpty(versionName, \"versionName\");\n      checkNotNull(eekOp, \"eekOp\");\n      LOG.debug(\"Decrypting key for {}, the edek Operation is {}.\",\n              versionName, eekOp);\n\n      final String keyName \u003d (String) jsonPayload.get(\n              KMSRESTConstants.NAME_FIELD);\n      String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n      String encMaterialStr \u003d\n              (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n      checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n      final byte[] iv \u003d Base64.decodeBase64(ivStr);\n      checkNotNull(encMaterialStr,\n          KMSRESTConstants.MATERIAL_FIELD);\n      final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n      Object retJSON;\n      if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n        KMSWebApp.getDecryptEEKCallsMeter().mark();\n        assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK,\n                keyName);\n\n        KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n                new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n                @Override\n                  public KeyVersion run() throws Exception {\n                  return provider.decryptEncryptedKey(\n                            new KMSClientProvider.KMSEncryptedKeyVersion(\n                                    keyName, versionName, iv,\n                                            KeyProviderCryptoExtension.EEK,\n                                            encMaterial)\n                    );\n                }\n              }\n        );\n\n        retJSON \u003d KMSUtil.toJSON(retKeyVersion);\n        kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n      } else if (eekOp.equals(KMSRESTConstants.EEK_REENCRYPT)) {\n        KMSWebApp.getReencryptEEKCallsMeter().mark();\n        assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.REENCRYPT_EEK,\n            keyName);\n\n        EncryptedKeyVersion retEncryptedKeyVersion \u003d\n            user.doAs(new PrivilegedExceptionAction\u003cEncryptedKeyVersion\u003e() {\n              @Override\n              public EncryptedKeyVersion run() throws Exception {\n                return provider.reencryptEncryptedKey(\n                    new KMSClientProvider.KMSEncryptedKeyVersion(keyName,\n                        versionName, iv, KeyProviderCryptoExtension.EEK,\n                        encMaterial));\n              }\n            });\n\n        retJSON \u003d KMSUtil.toJSON(retEncryptedKeyVersion);\n        kmsAudit.ok(user, KMSOp.REENCRYPT_EEK, keyName, \"\");\n      } else {\n        StringBuilder error;\n        error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n        error.append(KMSRESTConstants.EEK_OP);\n        error.append(\" value, it must be \");\n        error.append(KMSRESTConstants.EEK_GENERATE);\n        error.append(\" or \");\n        error.append(KMSRESTConstants.EEK_DECRYPT);\n        LOG.error(error.toString());\n        throw new IllegalArgumentException(error.toString());\n      }\n      LOG.trace(\"Exiting handleEncryptedKeyOp method.\");\n      return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n          .build();\n    } catch (Exception e) {\n      LOG.debug(\"Exception in handleEncryptedKeyOp.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "79d90b810c14d5e3abab75235f587663834ce36c": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "HADOOP-13827. Add reencryptEncryptedKey interface to KMS.\n",
      "commitDate": "06/12/16 12:04 PM",
      "commitName": "79d90b810c14d5e3abab75235f587663834ce36c",
      "commitAuthor": "Xiao Chen",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-13827. Add reencryptEncryptedKey interface to KMS.\n",
          "commitDate": "06/12/16 12:04 PM",
          "commitName": "79d90b810c14d5e3abab75235f587663834ce36c",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "27/10/16 4:09 PM",
          "commitNameOld": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 39.87,
          "commitsBetweenForRepo": 295,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,64 +1,81 @@\n-  public Response decryptEncryptedKey(\n+  public Response handleEncryptedKeyOp(\n       @PathParam(\"versionName\") final String versionName,\n       @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n       Map jsonPayload)\n       throws Exception {\n     try {\n       LOG.trace(\"Entering decryptEncryptedKey method.\");\n       UserGroupInformation user \u003d HttpUserGroupInformation.get();\n       KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n       KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n       LOG.debug(\"Decrypting key for {}, the edek Operation is {}.\",\n               versionName, eekOp);\n \n       final String keyName \u003d (String) jsonPayload.get(\n               KMSRESTConstants.NAME_FIELD);\n       String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n       String encMaterialStr \u003d\n               (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n+      KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n+      final byte[] iv \u003d Base64.decodeBase64(ivStr);\n+      KMSClientProvider.checkNotNull(encMaterialStr,\n+          KMSRESTConstants.MATERIAL_FIELD);\n+      final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n       Object retJSON;\n       if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n         assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK,\n                 keyName);\n-        KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n-        final byte[] iv \u003d Base64.decodeBase64(ivStr);\n-        KMSClientProvider.checkNotNull(encMaterialStr,\n-                KMSRESTConstants.MATERIAL_FIELD);\n-        final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n \n         KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n                 new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n                 @Override\n                   public KeyVersion run() throws Exception {\n                   return provider.decryptEncryptedKey(\n                             new KMSClientProvider.KMSEncryptedKeyVersion(\n                                     keyName, versionName, iv,\n                                             KeyProviderCryptoExtension.EEK,\n                                             encMaterial)\n                     );\n                 }\n               }\n         );\n \n         retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n         kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n+      } else if (eekOp.equals(KMSRESTConstants.EEK_REENCRYPT)) {\n+        assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.REENCRYPT_EEK,\n+            keyName);\n+\n+        EncryptedKeyVersion retEncryptedKeyVersion \u003d\n+            user.doAs(new PrivilegedExceptionAction\u003cEncryptedKeyVersion\u003e() {\n+              @Override\n+              public EncryptedKeyVersion run() throws Exception {\n+                return provider.reencryptEncryptedKey(\n+                    new KMSClientProvider.KMSEncryptedKeyVersion(keyName,\n+                        versionName, iv, KeyProviderCryptoExtension.EEK,\n+                        encMaterial));\n+              }\n+            });\n+\n+        retJSON \u003d KMSServerJSONUtils.toJSON(retEncryptedKeyVersion);\n+        kmsAudit.ok(user, KMSOp.REENCRYPT_EEK, keyName, \"\");\n       } else {\n         StringBuilder error;\n         error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n         error.append(KMSRESTConstants.EEK_OP);\n         error.append(\" value, it must be \");\n         error.append(KMSRESTConstants.EEK_GENERATE);\n         error.append(\" or \");\n         error.append(KMSRESTConstants.EEK_DECRYPT);\n         LOG.error(error.toString());\n         throw new IllegalArgumentException(error.toString());\n       }\n       KMSWebApp.getDecryptEEKCallsMeter().mark();\n-      LOG.trace(\"Exiting decryptEncryptedKey method.\");\n+      LOG.trace(\"Exiting handleEncryptedKeyOp method.\");\n       return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n-              .build();\n+          .build();\n     } catch (Exception e) {\n-      LOG.debug(\"Exception in decryptEncryptedKey.\", e);\n+      LOG.debug(\"Exception in handleEncryptedKeyOp.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response handleEncryptedKeyOp(\n      @PathParam(\"versionName\") final String versionName,\n      @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n      Map jsonPayload)\n      throws Exception {\n    try {\n      LOG.trace(\"Entering decryptEncryptedKey method.\");\n      UserGroupInformation user \u003d HttpUserGroupInformation.get();\n      KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n      KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n      LOG.debug(\"Decrypting key for {}, the edek Operation is {}.\",\n              versionName, eekOp);\n\n      final String keyName \u003d (String) jsonPayload.get(\n              KMSRESTConstants.NAME_FIELD);\n      String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n      String encMaterialStr \u003d\n              (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n      KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n      final byte[] iv \u003d Base64.decodeBase64(ivStr);\n      KMSClientProvider.checkNotNull(encMaterialStr,\n          KMSRESTConstants.MATERIAL_FIELD);\n      final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n      Object retJSON;\n      if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n        assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK,\n                keyName);\n\n        KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n                new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n                @Override\n                  public KeyVersion run() throws Exception {\n                  return provider.decryptEncryptedKey(\n                            new KMSClientProvider.KMSEncryptedKeyVersion(\n                                    keyName, versionName, iv,\n                                            KeyProviderCryptoExtension.EEK,\n                                            encMaterial)\n                    );\n                }\n              }\n        );\n\n        retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n        kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n      } else if (eekOp.equals(KMSRESTConstants.EEK_REENCRYPT)) {\n        assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.REENCRYPT_EEK,\n            keyName);\n\n        EncryptedKeyVersion retEncryptedKeyVersion \u003d\n            user.doAs(new PrivilegedExceptionAction\u003cEncryptedKeyVersion\u003e() {\n              @Override\n              public EncryptedKeyVersion run() throws Exception {\n                return provider.reencryptEncryptedKey(\n                    new KMSClientProvider.KMSEncryptedKeyVersion(keyName,\n                        versionName, iv, KeyProviderCryptoExtension.EEK,\n                        encMaterial));\n              }\n            });\n\n        retJSON \u003d KMSServerJSONUtils.toJSON(retEncryptedKeyVersion);\n        kmsAudit.ok(user, KMSOp.REENCRYPT_EEK, keyName, \"\");\n      } else {\n        StringBuilder error;\n        error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n        error.append(KMSRESTConstants.EEK_OP);\n        error.append(\" value, it must be \");\n        error.append(KMSRESTConstants.EEK_GENERATE);\n        error.append(\" or \");\n        error.append(KMSRESTConstants.EEK_DECRYPT);\n        LOG.error(error.toString());\n        throw new IllegalArgumentException(error.toString());\n      }\n      KMSWebApp.getDecryptEEKCallsMeter().mark();\n      LOG.trace(\"Exiting handleEncryptedKeyOp method.\");\n      return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n          .build();\n    } catch (Exception e) {\n      LOG.debug(\"Exception in handleEncryptedKeyOp.\", e);\n      throw e;\n    }\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
          "extendedDetails": {
            "oldValue": "decryptEncryptedKey",
            "newValue": "handleEncryptedKeyOp"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13827. Add reencryptEncryptedKey interface to KMS.\n",
          "commitDate": "06/12/16 12:04 PM",
          "commitName": "79d90b810c14d5e3abab75235f587663834ce36c",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "27/10/16 4:09 PM",
          "commitNameOld": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 39.87,
          "commitsBetweenForRepo": 295,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,64 +1,81 @@\n-  public Response decryptEncryptedKey(\n+  public Response handleEncryptedKeyOp(\n       @PathParam(\"versionName\") final String versionName,\n       @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n       Map jsonPayload)\n       throws Exception {\n     try {\n       LOG.trace(\"Entering decryptEncryptedKey method.\");\n       UserGroupInformation user \u003d HttpUserGroupInformation.get();\n       KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n       KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n       LOG.debug(\"Decrypting key for {}, the edek Operation is {}.\",\n               versionName, eekOp);\n \n       final String keyName \u003d (String) jsonPayload.get(\n               KMSRESTConstants.NAME_FIELD);\n       String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n       String encMaterialStr \u003d\n               (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n+      KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n+      final byte[] iv \u003d Base64.decodeBase64(ivStr);\n+      KMSClientProvider.checkNotNull(encMaterialStr,\n+          KMSRESTConstants.MATERIAL_FIELD);\n+      final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n       Object retJSON;\n       if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n         assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK,\n                 keyName);\n-        KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n-        final byte[] iv \u003d Base64.decodeBase64(ivStr);\n-        KMSClientProvider.checkNotNull(encMaterialStr,\n-                KMSRESTConstants.MATERIAL_FIELD);\n-        final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n \n         KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n                 new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n                 @Override\n                   public KeyVersion run() throws Exception {\n                   return provider.decryptEncryptedKey(\n                             new KMSClientProvider.KMSEncryptedKeyVersion(\n                                     keyName, versionName, iv,\n                                             KeyProviderCryptoExtension.EEK,\n                                             encMaterial)\n                     );\n                 }\n               }\n         );\n \n         retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n         kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n+      } else if (eekOp.equals(KMSRESTConstants.EEK_REENCRYPT)) {\n+        assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.REENCRYPT_EEK,\n+            keyName);\n+\n+        EncryptedKeyVersion retEncryptedKeyVersion \u003d\n+            user.doAs(new PrivilegedExceptionAction\u003cEncryptedKeyVersion\u003e() {\n+              @Override\n+              public EncryptedKeyVersion run() throws Exception {\n+                return provider.reencryptEncryptedKey(\n+                    new KMSClientProvider.KMSEncryptedKeyVersion(keyName,\n+                        versionName, iv, KeyProviderCryptoExtension.EEK,\n+                        encMaterial));\n+              }\n+            });\n+\n+        retJSON \u003d KMSServerJSONUtils.toJSON(retEncryptedKeyVersion);\n+        kmsAudit.ok(user, KMSOp.REENCRYPT_EEK, keyName, \"\");\n       } else {\n         StringBuilder error;\n         error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n         error.append(KMSRESTConstants.EEK_OP);\n         error.append(\" value, it must be \");\n         error.append(KMSRESTConstants.EEK_GENERATE);\n         error.append(\" or \");\n         error.append(KMSRESTConstants.EEK_DECRYPT);\n         LOG.error(error.toString());\n         throw new IllegalArgumentException(error.toString());\n       }\n       KMSWebApp.getDecryptEEKCallsMeter().mark();\n-      LOG.trace(\"Exiting decryptEncryptedKey method.\");\n+      LOG.trace(\"Exiting handleEncryptedKeyOp method.\");\n       return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n-              .build();\n+          .build();\n     } catch (Exception e) {\n-      LOG.debug(\"Exception in decryptEncryptedKey.\", e);\n+      LOG.debug(\"Exception in handleEncryptedKeyOp.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response handleEncryptedKeyOp(\n      @PathParam(\"versionName\") final String versionName,\n      @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n      Map jsonPayload)\n      throws Exception {\n    try {\n      LOG.trace(\"Entering decryptEncryptedKey method.\");\n      UserGroupInformation user \u003d HttpUserGroupInformation.get();\n      KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n      KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n      LOG.debug(\"Decrypting key for {}, the edek Operation is {}.\",\n              versionName, eekOp);\n\n      final String keyName \u003d (String) jsonPayload.get(\n              KMSRESTConstants.NAME_FIELD);\n      String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n      String encMaterialStr \u003d\n              (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n      KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n      final byte[] iv \u003d Base64.decodeBase64(ivStr);\n      KMSClientProvider.checkNotNull(encMaterialStr,\n          KMSRESTConstants.MATERIAL_FIELD);\n      final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n      Object retJSON;\n      if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n        assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK,\n                keyName);\n\n        KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n                new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n                @Override\n                  public KeyVersion run() throws Exception {\n                  return provider.decryptEncryptedKey(\n                            new KMSClientProvider.KMSEncryptedKeyVersion(\n                                    keyName, versionName, iv,\n                                            KeyProviderCryptoExtension.EEK,\n                                            encMaterial)\n                    );\n                }\n              }\n        );\n\n        retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n        kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n      } else if (eekOp.equals(KMSRESTConstants.EEK_REENCRYPT)) {\n        assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.REENCRYPT_EEK,\n            keyName);\n\n        EncryptedKeyVersion retEncryptedKeyVersion \u003d\n            user.doAs(new PrivilegedExceptionAction\u003cEncryptedKeyVersion\u003e() {\n              @Override\n              public EncryptedKeyVersion run() throws Exception {\n                return provider.reencryptEncryptedKey(\n                    new KMSClientProvider.KMSEncryptedKeyVersion(keyName,\n                        versionName, iv, KeyProviderCryptoExtension.EEK,\n                        encMaterial));\n              }\n            });\n\n        retJSON \u003d KMSServerJSONUtils.toJSON(retEncryptedKeyVersion);\n        kmsAudit.ok(user, KMSOp.REENCRYPT_EEK, keyName, \"\");\n      } else {\n        StringBuilder error;\n        error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n        error.append(KMSRESTConstants.EEK_OP);\n        error.append(\" value, it must be \");\n        error.append(KMSRESTConstants.EEK_GENERATE);\n        error.append(\" or \");\n        error.append(KMSRESTConstants.EEK_DECRYPT);\n        LOG.error(error.toString());\n        throw new IllegalArgumentException(error.toString());\n      }\n      KMSWebApp.getDecryptEEKCallsMeter().mark();\n      LOG.trace(\"Exiting handleEncryptedKeyOp method.\");\n      return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n          .build();\n    } catch (Exception e) {\n      LOG.debug(\"Exception in handleEncryptedKeyOp.\", e);\n      throw e;\n    }\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
          "extendedDetails": {}
        }
      ]
    },
    "65912e4027548868ebefd8ee36eb00fa889704a7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13669. KMS Server should log exceptions before throwing. Contributed by Suraj Acharya.\n",
      "commitDate": "10/10/16 12:51 PM",
      "commitName": "65912e4027548868ebefd8ee36eb00fa889704a7",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "30/09/16 5:51 PM",
      "commitNameOld": "89bd6d29a62afd7ed8ff87bcc29d17b1cb53dcb6",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 9.79,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,64 @@\n   public Response decryptEncryptedKey(\n       @PathParam(\"versionName\") final String versionName,\n       @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n       Map jsonPayload)\n       throws Exception {\n-    LOG.trace(\"Entering decryptEncryptedKey method.\");\n-    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n-    KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n-    KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n-    LOG.debug(\"Decrypting key for {}, the edek Operation is {}.\",\n-            versionName, eekOp);\n+    try {\n+      LOG.trace(\"Entering decryptEncryptedKey method.\");\n+      UserGroupInformation user \u003d HttpUserGroupInformation.get();\n+      KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n+      KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n+      LOG.debug(\"Decrypting key for {}, the edek Operation is {}.\",\n+              versionName, eekOp);\n \n-    final String keyName \u003d (String) jsonPayload.get(\n-        KMSRESTConstants.NAME_FIELD);\n-    String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n-    String encMaterialStr \u003d\n-        (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n-    Object retJSON;\n-    if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n-      assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK, keyName);\n-      KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n-      final byte[] iv \u003d Base64.decodeBase64(ivStr);\n-      KMSClientProvider.checkNotNull(encMaterialStr,\n-          KMSRESTConstants.MATERIAL_FIELD);\n-      final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n+      final String keyName \u003d (String) jsonPayload.get(\n+              KMSRESTConstants.NAME_FIELD);\n+      String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n+      String encMaterialStr \u003d\n+              (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n+      Object retJSON;\n+      if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n+        assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK,\n+                keyName);\n+        KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n+        final byte[] iv \u003d Base64.decodeBase64(ivStr);\n+        KMSClientProvider.checkNotNull(encMaterialStr,\n+                KMSRESTConstants.MATERIAL_FIELD);\n+        final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n \n-      KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n-          new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n-            @Override\n-            public KeyVersion run() throws Exception {\n-              return provider.decryptEncryptedKey(\n-                  new KMSClientProvider.KMSEncryptedKeyVersion(keyName,\n-                      versionName, iv, KeyProviderCryptoExtension.EEK,\n-                      encMaterial)\n-              );\n-            }\n-          }\n-      );\n+        KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n+                new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n+                @Override\n+                  public KeyVersion run() throws Exception {\n+                  return provider.decryptEncryptedKey(\n+                            new KMSClientProvider.KMSEncryptedKeyVersion(\n+                                    keyName, versionName, iv,\n+                                            KeyProviderCryptoExtension.EEK,\n+                                            encMaterial)\n+                    );\n+                }\n+              }\n+        );\n \n-      retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n-      kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n-    } else {\n-      StringBuilder error;\n-      error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n-      error.append(KMSRESTConstants.EEK_OP);\n-      error.append(\" value, it must be \");\n-      error.append(KMSRESTConstants.EEK_GENERATE);\n-      error.append(\" or \");\n-      error.append(KMSRESTConstants.EEK_DECRYPT);\n-      LOG.error(error.toString());\n-      throw new IllegalArgumentException(error.toString());\n+        retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n+        kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n+      } else {\n+        StringBuilder error;\n+        error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n+        error.append(KMSRESTConstants.EEK_OP);\n+        error.append(\" value, it must be \");\n+        error.append(KMSRESTConstants.EEK_GENERATE);\n+        error.append(\" or \");\n+        error.append(KMSRESTConstants.EEK_DECRYPT);\n+        LOG.error(error.toString());\n+        throw new IllegalArgumentException(error.toString());\n+      }\n+      KMSWebApp.getDecryptEEKCallsMeter().mark();\n+      LOG.trace(\"Exiting decryptEncryptedKey method.\");\n+      return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n+              .build();\n+    } catch (Exception e) {\n+      LOG.debug(\"Exception in decryptEncryptedKey.\", e);\n+      throw e;\n     }\n-    KMSWebApp.getDecryptEEKCallsMeter().mark();\n-    LOG.trace(\"Exiting decryptEncryptedKey method.\");\n-    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n-        .build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response decryptEncryptedKey(\n      @PathParam(\"versionName\") final String versionName,\n      @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n      Map jsonPayload)\n      throws Exception {\n    try {\n      LOG.trace(\"Entering decryptEncryptedKey method.\");\n      UserGroupInformation user \u003d HttpUserGroupInformation.get();\n      KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n      KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n      LOG.debug(\"Decrypting key for {}, the edek Operation is {}.\",\n              versionName, eekOp);\n\n      final String keyName \u003d (String) jsonPayload.get(\n              KMSRESTConstants.NAME_FIELD);\n      String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n      String encMaterialStr \u003d\n              (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n      Object retJSON;\n      if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n        assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK,\n                keyName);\n        KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n        final byte[] iv \u003d Base64.decodeBase64(ivStr);\n        KMSClientProvider.checkNotNull(encMaterialStr,\n                KMSRESTConstants.MATERIAL_FIELD);\n        final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n\n        KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n                new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n                @Override\n                  public KeyVersion run() throws Exception {\n                  return provider.decryptEncryptedKey(\n                            new KMSClientProvider.KMSEncryptedKeyVersion(\n                                    keyName, versionName, iv,\n                                            KeyProviderCryptoExtension.EEK,\n                                            encMaterial)\n                    );\n                }\n              }\n        );\n\n        retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n        kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n      } else {\n        StringBuilder error;\n        error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n        error.append(KMSRESTConstants.EEK_OP);\n        error.append(\" value, it must be \");\n        error.append(KMSRESTConstants.EEK_GENERATE);\n        error.append(\" or \");\n        error.append(KMSRESTConstants.EEK_DECRYPT);\n        LOG.error(error.toString());\n        throw new IllegalArgumentException(error.toString());\n      }\n      KMSWebApp.getDecryptEEKCallsMeter().mark();\n      LOG.trace(\"Exiting decryptEncryptedKey method.\");\n      return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n              .build();\n    } catch (Exception e) {\n      LOG.debug(\"Exception in decryptEncryptedKey.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "89bd6d29a62afd7ed8ff87bcc29d17b1cb53dcb6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13317. Add logs to KMS server-side to improve supportability. Contributed by Suraj Acharya.\n",
      "commitDate": "30/09/16 5:51 PM",
      "commitName": "89bd6d29a62afd7ed8ff87bcc29d17b1cb53dcb6",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "25/03/16 3:28 PM",
      "commitNameOld": "d4df7849a5caf749403bd89d29652f69c9c3f5a8",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 189.1,
      "commitsBetweenForRepo": 1358,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,57 @@\n   public Response decryptEncryptedKey(\n       @PathParam(\"versionName\") final String versionName,\n       @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n       Map jsonPayload)\n       throws Exception {\n+    LOG.trace(\"Entering decryptEncryptedKey method.\");\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n     KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n+    LOG.debug(\"Decrypting key for {}, the edek Operation is {}.\",\n+            versionName, eekOp);\n \n     final String keyName \u003d (String) jsonPayload.get(\n         KMSRESTConstants.NAME_FIELD);\n     String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n-    String encMaterialStr \u003d \n+    String encMaterialStr \u003d\n         (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n     Object retJSON;\n     if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n       assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK, keyName);\n       KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n       final byte[] iv \u003d Base64.decodeBase64(ivStr);\n       KMSClientProvider.checkNotNull(encMaterialStr,\n           KMSRESTConstants.MATERIAL_FIELD);\n       final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n \n       KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n           new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n             @Override\n             public KeyVersion run() throws Exception {\n               return provider.decryptEncryptedKey(\n                   new KMSClientProvider.KMSEncryptedKeyVersion(keyName,\n                       versionName, iv, KeyProviderCryptoExtension.EEK,\n                       encMaterial)\n               );\n             }\n           }\n       );\n \n       retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n       kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n     } else {\n-      throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n-          \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n-          KMSRESTConstants.EEK_DECRYPT);\n+      StringBuilder error;\n+      error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n+      error.append(KMSRESTConstants.EEK_OP);\n+      error.append(\" value, it must be \");\n+      error.append(KMSRESTConstants.EEK_GENERATE);\n+      error.append(\" or \");\n+      error.append(KMSRESTConstants.EEK_DECRYPT);\n+      LOG.error(error.toString());\n+      throw new IllegalArgumentException(error.toString());\n     }\n     KMSWebApp.getDecryptEEKCallsMeter().mark();\n+    LOG.trace(\"Exiting decryptEncryptedKey method.\");\n     return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n         .build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response decryptEncryptedKey(\n      @PathParam(\"versionName\") final String versionName,\n      @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n      Map jsonPayload)\n      throws Exception {\n    LOG.trace(\"Entering decryptEncryptedKey method.\");\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n    KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n    LOG.debug(\"Decrypting key for {}, the edek Operation is {}.\",\n            versionName, eekOp);\n\n    final String keyName \u003d (String) jsonPayload.get(\n        KMSRESTConstants.NAME_FIELD);\n    String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n    String encMaterialStr \u003d\n        (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n    Object retJSON;\n    if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n      assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK, keyName);\n      KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n      final byte[] iv \u003d Base64.decodeBase64(ivStr);\n      KMSClientProvider.checkNotNull(encMaterialStr,\n          KMSRESTConstants.MATERIAL_FIELD);\n      final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n\n      KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n          new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n            @Override\n            public KeyVersion run() throws Exception {\n              return provider.decryptEncryptedKey(\n                  new KMSClientProvider.KMSEncryptedKeyVersion(keyName,\n                      versionName, iv, KeyProviderCryptoExtension.EEK,\n                      encMaterial)\n              );\n            }\n          }\n      );\n\n      retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n      kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n    } else {\n      StringBuilder error;\n      error \u003d new StringBuilder(\"IllegalArgumentException Wrong \");\n      error.append(KMSRESTConstants.EEK_OP);\n      error.append(\" value, it must be \");\n      error.append(KMSRESTConstants.EEK_GENERATE);\n      error.append(\" or \");\n      error.append(KMSRESTConstants.EEK_DECRYPT);\n      LOG.error(error.toString());\n      throw new IllegalArgumentException(error.toString());\n    }\n    KMSWebApp.getDecryptEEKCallsMeter().mark();\n    LOG.trace(\"Exiting decryptEncryptedKey method.\");\n    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n        .build();\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "e86c9ef6517313aaa0e4575261a462f2f55d43dc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-10770. KMS add delegation token support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/14 10:03 PM",
      "commitName": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10770. KMS add delegation token support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618096 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/08/14 10:03 PM",
          "commitName": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "08/08/14 4:10 PM",
          "commitNameOld": "021ae471153ce2566924b0f6d29809669074c06d",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 6.25,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,47 @@\n-  public Response decryptEncryptedKey(@Context SecurityContext securityContext,\n-      @PathParam(\"versionName\") String versionName,\n+  public Response decryptEncryptedKey(\n+      @PathParam(\"versionName\") final String versionName,\n       @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n       Map jsonPayload)\n       throws Exception {\n-    Principal user \u003d getPrincipal(securityContext);\n+    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n     KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n \n-    String keyName \u003d (String) jsonPayload.get(KMSRESTConstants.NAME_FIELD);\n+    final String keyName \u003d (String) jsonPayload.get(\n+        KMSRESTConstants.NAME_FIELD);\n     String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n     String encMaterialStr \u003d \n         (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n     Object retJSON;\n     if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n       assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK, keyName);\n       KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n-      byte[] iv \u003d Base64.decodeBase64(ivStr);\n+      final byte[] iv \u003d Base64.decodeBase64(ivStr);\n       KMSClientProvider.checkNotNull(encMaterialStr,\n           KMSRESTConstants.MATERIAL_FIELD);\n-      byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n-      KeyProvider.KeyVersion retKeyVersion \u003d\n-          provider.decryptEncryptedKey(\n-              new KMSClientProvider.KMSEncryptedKeyVersion(keyName, versionName,\n-                  iv, KeyProviderCryptoExtension.EEK, encMaterial));\n+      final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n+\n+      KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n+          new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n+            @Override\n+            public KeyVersion run() throws Exception {\n+              return provider.decryptEncryptedKey(\n+                  new KMSClientProvider.KMSEncryptedKeyVersion(keyName,\n+                      versionName, iv, KeyProviderCryptoExtension.EEK,\n+                      encMaterial)\n+              );\n+            }\n+          }\n+      );\n+\n       retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n       kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n     } else {\n       throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n           \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n           KMSRESTConstants.EEK_DECRYPT);\n     }\n     KMSWebApp.getDecryptEEKCallsMeter().mark();\n     return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n         .build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response decryptEncryptedKey(\n      @PathParam(\"versionName\") final String versionName,\n      @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n      Map jsonPayload)\n      throws Exception {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n    KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n\n    final String keyName \u003d (String) jsonPayload.get(\n        KMSRESTConstants.NAME_FIELD);\n    String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n    String encMaterialStr \u003d \n        (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n    Object retJSON;\n    if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n      assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK, keyName);\n      KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n      final byte[] iv \u003d Base64.decodeBase64(ivStr);\n      KMSClientProvider.checkNotNull(encMaterialStr,\n          KMSRESTConstants.MATERIAL_FIELD);\n      final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n\n      KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n          new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n            @Override\n            public KeyVersion run() throws Exception {\n              return provider.decryptEncryptedKey(\n                  new KMSClientProvider.KMSEncryptedKeyVersion(keyName,\n                      versionName, iv, KeyProviderCryptoExtension.EEK,\n                      encMaterial)\n              );\n            }\n          }\n      );\n\n      retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n      kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n    } else {\n      throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n          \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n          KMSRESTConstants.EEK_DECRYPT);\n    }\n    KMSWebApp.getDecryptEEKCallsMeter().mark();\n    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n        .build();\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
          "extendedDetails": {
            "oldValue": "[securityContext-SecurityContext(annotations-@Context), versionName-String(annotations-@PathParam(\"versionName\")), eekOp-String(annotations-@QueryParam(KMSRESTConstants.EEK_OP)), jsonPayload-Map]",
            "newValue": "[versionName-String(annotations-@PathParam(\"versionName\")__modifiers-final), eekOp-String(annotations-@QueryParam(KMSRESTConstants.EEK_OP)), jsonPayload-Map]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10770. KMS add delegation token support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618096 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/08/14 10:03 PM",
          "commitName": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "08/08/14 4:10 PM",
          "commitNameOld": "021ae471153ce2566924b0f6d29809669074c06d",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 6.25,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,47 @@\n-  public Response decryptEncryptedKey(@Context SecurityContext securityContext,\n-      @PathParam(\"versionName\") String versionName,\n+  public Response decryptEncryptedKey(\n+      @PathParam(\"versionName\") final String versionName,\n       @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n       Map jsonPayload)\n       throws Exception {\n-    Principal user \u003d getPrincipal(securityContext);\n+    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n     KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n \n-    String keyName \u003d (String) jsonPayload.get(KMSRESTConstants.NAME_FIELD);\n+    final String keyName \u003d (String) jsonPayload.get(\n+        KMSRESTConstants.NAME_FIELD);\n     String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n     String encMaterialStr \u003d \n         (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n     Object retJSON;\n     if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n       assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK, keyName);\n       KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n-      byte[] iv \u003d Base64.decodeBase64(ivStr);\n+      final byte[] iv \u003d Base64.decodeBase64(ivStr);\n       KMSClientProvider.checkNotNull(encMaterialStr,\n           KMSRESTConstants.MATERIAL_FIELD);\n-      byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n-      KeyProvider.KeyVersion retKeyVersion \u003d\n-          provider.decryptEncryptedKey(\n-              new KMSClientProvider.KMSEncryptedKeyVersion(keyName, versionName,\n-                  iv, KeyProviderCryptoExtension.EEK, encMaterial));\n+      final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n+\n+      KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n+          new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n+            @Override\n+            public KeyVersion run() throws Exception {\n+              return provider.decryptEncryptedKey(\n+                  new KMSClientProvider.KMSEncryptedKeyVersion(keyName,\n+                      versionName, iv, KeyProviderCryptoExtension.EEK,\n+                      encMaterial)\n+              );\n+            }\n+          }\n+      );\n+\n       retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n       kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n     } else {\n       throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n           \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n           KMSRESTConstants.EEK_DECRYPT);\n     }\n     KMSWebApp.getDecryptEEKCallsMeter().mark();\n     return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n         .build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response decryptEncryptedKey(\n      @PathParam(\"versionName\") final String versionName,\n      @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n      Map jsonPayload)\n      throws Exception {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n    KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n\n    final String keyName \u003d (String) jsonPayload.get(\n        KMSRESTConstants.NAME_FIELD);\n    String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n    String encMaterialStr \u003d \n        (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n    Object retJSON;\n    if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n      assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK, keyName);\n      KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n      final byte[] iv \u003d Base64.decodeBase64(ivStr);\n      KMSClientProvider.checkNotNull(encMaterialStr,\n          KMSRESTConstants.MATERIAL_FIELD);\n      final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n\n      KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n          new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n            @Override\n            public KeyVersion run() throws Exception {\n              return provider.decryptEncryptedKey(\n                  new KMSClientProvider.KMSEncryptedKeyVersion(keyName,\n                      versionName, iv, KeyProviderCryptoExtension.EEK,\n                      encMaterial)\n              );\n            }\n          }\n      );\n\n      retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n      kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n    } else {\n      throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n          \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n          KMSRESTConstants.EEK_DECRYPT);\n    }\n    KMSWebApp.getDecryptEEKCallsMeter().mark();\n    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n        .build();\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-10770. KMS add delegation token support. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618096 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/08/14 10:03 PM",
          "commitName": "e86c9ef6517313aaa0e4575261a462f2f55d43dc",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "08/08/14 4:10 PM",
          "commitNameOld": "021ae471153ce2566924b0f6d29809669074c06d",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 6.25,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,47 @@\n-  public Response decryptEncryptedKey(@Context SecurityContext securityContext,\n-      @PathParam(\"versionName\") String versionName,\n+  public Response decryptEncryptedKey(\n+      @PathParam(\"versionName\") final String versionName,\n       @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n       Map jsonPayload)\n       throws Exception {\n-    Principal user \u003d getPrincipal(securityContext);\n+    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n     KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n \n-    String keyName \u003d (String) jsonPayload.get(KMSRESTConstants.NAME_FIELD);\n+    final String keyName \u003d (String) jsonPayload.get(\n+        KMSRESTConstants.NAME_FIELD);\n     String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n     String encMaterialStr \u003d \n         (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n     Object retJSON;\n     if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n       assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK, keyName);\n       KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n-      byte[] iv \u003d Base64.decodeBase64(ivStr);\n+      final byte[] iv \u003d Base64.decodeBase64(ivStr);\n       KMSClientProvider.checkNotNull(encMaterialStr,\n           KMSRESTConstants.MATERIAL_FIELD);\n-      byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n-      KeyProvider.KeyVersion retKeyVersion \u003d\n-          provider.decryptEncryptedKey(\n-              new KMSClientProvider.KMSEncryptedKeyVersion(keyName, versionName,\n-                  iv, KeyProviderCryptoExtension.EEK, encMaterial));\n+      final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n+\n+      KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n+          new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n+            @Override\n+            public KeyVersion run() throws Exception {\n+              return provider.decryptEncryptedKey(\n+                  new KMSClientProvider.KMSEncryptedKeyVersion(keyName,\n+                      versionName, iv, KeyProviderCryptoExtension.EEK,\n+                      encMaterial)\n+              );\n+            }\n+          }\n+      );\n+\n       retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n       kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n     } else {\n       throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n           \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n           KMSRESTConstants.EEK_DECRYPT);\n     }\n     KMSWebApp.getDecryptEEKCallsMeter().mark();\n     return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n         .build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response decryptEncryptedKey(\n      @PathParam(\"versionName\") final String versionName,\n      @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n      Map jsonPayload)\n      throws Exception {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n    KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n\n    final String keyName \u003d (String) jsonPayload.get(\n        KMSRESTConstants.NAME_FIELD);\n    String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n    String encMaterialStr \u003d \n        (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n    Object retJSON;\n    if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n      assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK, keyName);\n      KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n      final byte[] iv \u003d Base64.decodeBase64(ivStr);\n      KMSClientProvider.checkNotNull(encMaterialStr,\n          KMSRESTConstants.MATERIAL_FIELD);\n      final byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n\n      KeyProvider.KeyVersion retKeyVersion \u003d user.doAs(\n          new PrivilegedExceptionAction\u003cKeyVersion\u003e() {\n            @Override\n            public KeyVersion run() throws Exception {\n              return provider.decryptEncryptedKey(\n                  new KMSClientProvider.KMSEncryptedKeyVersion(keyName,\n                      versionName, iv, KeyProviderCryptoExtension.EEK,\n                      encMaterial)\n              );\n            }\n          }\n      );\n\n      retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n      kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n    } else {\n      throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n          \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n          KMSRESTConstants.EEK_DECRYPT);\n    }\n    KMSWebApp.getDecryptEEKCallsMeter().mark();\n    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n        .build();\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
          "extendedDetails": {
            "oldValue": "[securityContext-SecurityContext(annotations-@Context), versionName-String(annotations-@PathParam(\"versionName\")), eekOp-String(annotations-@QueryParam(KMSRESTConstants.EEK_OP)), jsonPayload-Map]",
            "newValue": "[versionName-String(annotations-@PathParam(\"versionName\")__modifiers-final), eekOp-String(annotations-@QueryParam(KMSRESTConstants.EEK_OP)), jsonPayload-Map]"
          }
        }
      ]
    },
    "021ae471153ce2566924b0f6d29809669074c06d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10862. Miscellaneous trivial corrections to KMS classes. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616903 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/14 4:10 PM",
      "commitName": "021ae471153ce2566924b0f6d29809669074c06d",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "30/07/14 10:54 AM",
      "commitNameOld": "bda9c584c828fdd18e9c066747d58dbf751a585d",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 9.22,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public Response decryptEncryptedKey(@Context SecurityContext securityContext,\n       @PathParam(\"versionName\") String versionName,\n       @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n       Map jsonPayload)\n       throws Exception {\n     Principal user \u003d getPrincipal(securityContext);\n     KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n     KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n \n     String keyName \u003d (String) jsonPayload.get(KMSRESTConstants.NAME_FIELD);\n     String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n     String encMaterialStr \u003d \n         (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n     Object retJSON;\n     if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n-      assertAccess(KMSACLs.Type.DECRYPT_EEK, user, DECRYPT_EEK, keyName);\n+      assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK, keyName);\n       KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n       byte[] iv \u003d Base64.decodeBase64(ivStr);\n       KMSClientProvider.checkNotNull(encMaterialStr,\n           KMSRESTConstants.MATERIAL_FIELD);\n       byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n       KeyProvider.KeyVersion retKeyVersion \u003d\n           provider.decryptEncryptedKey(\n               new KMSClientProvider.KMSEncryptedKeyVersion(keyName, versionName,\n                   iv, KeyProviderCryptoExtension.EEK, encMaterial));\n       retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n-      kmsAudit.ok(user, DECRYPT_EEK, keyName, \"\");\n+      kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n     } else {\n       throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n           \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n           KMSRESTConstants.EEK_DECRYPT);\n     }\n     KMSWebApp.getDecryptEEKCallsMeter().mark();\n     return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n         .build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response decryptEncryptedKey(@Context SecurityContext securityContext,\n      @PathParam(\"versionName\") String versionName,\n      @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n      Map jsonPayload)\n      throws Exception {\n    Principal user \u003d getPrincipal(securityContext);\n    KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n    KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n\n    String keyName \u003d (String) jsonPayload.get(KMSRESTConstants.NAME_FIELD);\n    String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n    String encMaterialStr \u003d \n        (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n    Object retJSON;\n    if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n      assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK, keyName);\n      KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n      byte[] iv \u003d Base64.decodeBase64(ivStr);\n      KMSClientProvider.checkNotNull(encMaterialStr,\n          KMSRESTConstants.MATERIAL_FIELD);\n      byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n      KeyProvider.KeyVersion retKeyVersion \u003d\n          provider.decryptEncryptedKey(\n              new KMSClientProvider.KMSEncryptedKeyVersion(keyName, versionName,\n                  iv, KeyProviderCryptoExtension.EEK, encMaterial));\n      retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n      kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\n    } else {\n      throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n          \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n          KMSRESTConstants.EEK_DECRYPT);\n    }\n    KMSWebApp.getDecryptEEKCallsMeter().mark();\n    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n        .build();\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "bda9c584c828fdd18e9c066747d58dbf751a585d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10756. KMS audit log should consolidate successful similar requests. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614725 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/07/14 10:54 AM",
      "commitName": "bda9c584c828fdd18e9c066747d58dbf751a585d",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "21/07/14 1:55 PM",
      "commitNameOld": "0c1469ece38556cf02a0c7bd23761d6bf79d9a64",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 8.87,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public Response decryptEncryptedKey(@Context SecurityContext securityContext,\n       @PathParam(\"versionName\") String versionName,\n       @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n       Map jsonPayload)\n       throws Exception {\n     Principal user \u003d getPrincipal(securityContext);\n     KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n     KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n \n     String keyName \u003d (String) jsonPayload.get(KMSRESTConstants.NAME_FIELD);\n     String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n     String encMaterialStr \u003d \n         (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n     Object retJSON;\n     if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n-      assertAccess(KMSACLs.Type.DECRYPT_EEK, user, DECRYPT_EEK, versionName);\n+      assertAccess(KMSACLs.Type.DECRYPT_EEK, user, DECRYPT_EEK, keyName);\n       KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n       byte[] iv \u003d Base64.decodeBase64(ivStr);\n       KMSClientProvider.checkNotNull(encMaterialStr,\n           KMSRESTConstants.MATERIAL_FIELD);\n       byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n       KeyProvider.KeyVersion retKeyVersion \u003d\n           provider.decryptEncryptedKey(\n               new KMSClientProvider.KMSEncryptedKeyVersion(keyName, versionName,\n                   iv, KeyProviderCryptoExtension.EEK, encMaterial));\n       retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n-      KMSAudit.ok(user, DECRYPT_EEK, versionName, \"\");\n+      kmsAudit.ok(user, DECRYPT_EEK, keyName, \"\");\n     } else {\n       throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n           \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n           KMSRESTConstants.EEK_DECRYPT);\n     }\n     KMSWebApp.getDecryptEEKCallsMeter().mark();\n     return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n         .build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response decryptEncryptedKey(@Context SecurityContext securityContext,\n      @PathParam(\"versionName\") String versionName,\n      @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n      Map jsonPayload)\n      throws Exception {\n    Principal user \u003d getPrincipal(securityContext);\n    KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n    KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n\n    String keyName \u003d (String) jsonPayload.get(KMSRESTConstants.NAME_FIELD);\n    String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n    String encMaterialStr \u003d \n        (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n    Object retJSON;\n    if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n      assertAccess(KMSACLs.Type.DECRYPT_EEK, user, DECRYPT_EEK, keyName);\n      KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n      byte[] iv \u003d Base64.decodeBase64(ivStr);\n      KMSClientProvider.checkNotNull(encMaterialStr,\n          KMSRESTConstants.MATERIAL_FIELD);\n      byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n      KeyProvider.KeyVersion retKeyVersion \u003d\n          provider.decryptEncryptedKey(\n              new KMSClientProvider.KMSEncryptedKeyVersion(keyName, versionName,\n                  iv, KeyProviderCryptoExtension.EEK, encMaterial));\n      retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n      kmsAudit.ok(user, DECRYPT_EEK, keyName, \"\");\n    } else {\n      throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n          \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n          KMSRESTConstants.EEK_DECRYPT);\n    }\n    KMSWebApp.getDecryptEEKCallsMeter().mark();\n    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n        .build();\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10720. KMS: Implement generateEncryptedKey and decryptEncryptedKey in the REST API. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612399 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/14 1:55 PM",
      "commitName": "0c1469ece38556cf02a0c7bd23761d6bf79d9a64",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,36 @@\n+  public Response decryptEncryptedKey(@Context SecurityContext securityContext,\n+      @PathParam(\"versionName\") String versionName,\n+      @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n+      Map jsonPayload)\n+      throws Exception {\n+    Principal user \u003d getPrincipal(securityContext);\n+    KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n+    KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n+\n+    String keyName \u003d (String) jsonPayload.get(KMSRESTConstants.NAME_FIELD);\n+    String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n+    String encMaterialStr \u003d \n+        (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n+    Object retJSON;\n+    if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n+      assertAccess(KMSACLs.Type.DECRYPT_EEK, user, DECRYPT_EEK, versionName);\n+      KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n+      byte[] iv \u003d Base64.decodeBase64(ivStr);\n+      KMSClientProvider.checkNotNull(encMaterialStr,\n+          KMSRESTConstants.MATERIAL_FIELD);\n+      byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n+      KeyProvider.KeyVersion retKeyVersion \u003d\n+          provider.decryptEncryptedKey(\n+              new KMSClientProvider.KMSEncryptedKeyVersion(keyName, versionName,\n+                  iv, KeyProviderCryptoExtension.EEK, encMaterial));\n+      retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n+      KMSAudit.ok(user, DECRYPT_EEK, versionName, \"\");\n+    } else {\n+      throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n+          \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n+          KMSRESTConstants.EEK_DECRYPT);\n+    }\n+    KMSWebApp.getDecryptEEKCallsMeter().mark();\n+    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n+        .build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response decryptEncryptedKey(@Context SecurityContext securityContext,\n      @PathParam(\"versionName\") String versionName,\n      @QueryParam(KMSRESTConstants.EEK_OP) String eekOp,\n      Map jsonPayload)\n      throws Exception {\n    Principal user \u003d getPrincipal(securityContext);\n    KMSClientProvider.checkNotEmpty(versionName, \"versionName\");\n    KMSClientProvider.checkNotNull(eekOp, \"eekOp\");\n\n    String keyName \u003d (String) jsonPayload.get(KMSRESTConstants.NAME_FIELD);\n    String ivStr \u003d (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\n    String encMaterialStr \u003d \n        (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\n    Object retJSON;\n    if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\n      assertAccess(KMSACLs.Type.DECRYPT_EEK, user, DECRYPT_EEK, versionName);\n      KMSClientProvider.checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\n      byte[] iv \u003d Base64.decodeBase64(ivStr);\n      KMSClientProvider.checkNotNull(encMaterialStr,\n          KMSRESTConstants.MATERIAL_FIELD);\n      byte[] encMaterial \u003d Base64.decodeBase64(encMaterialStr);\n      KeyProvider.KeyVersion retKeyVersion \u003d\n          provider.decryptEncryptedKey(\n              new KMSClientProvider.KMSEncryptedKeyVersion(keyName, versionName,\n                  iv, KeyProviderCryptoExtension.EEK, encMaterial));\n      retJSON \u003d KMSServerJSONUtils.toJSON(retKeyVersion);\n      KMSAudit.ok(user, DECRYPT_EEK, versionName, \"\");\n    } else {\n      throw new IllegalArgumentException(\"Wrong \" + KMSRESTConstants.EEK_OP +\n          \" value, it must be \" + KMSRESTConstants.EEK_GENERATE + \" or \" +\n          KMSRESTConstants.EEK_DECRYPT);\n    }\n    KMSWebApp.getDecryptEEKCallsMeter().mark();\n    return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON)\n        .build();\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java"
    }
  }
}