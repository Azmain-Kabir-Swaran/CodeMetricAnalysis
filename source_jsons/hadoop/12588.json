{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNodeConnector.java",
  "functionName": "checkAndMarkRunning",
  "functionId": "checkAndMarkRunning",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/NameNodeConnector.java",
  "functionStartLine": 345,
  "functionEndLine": 376,
  "numCommitsSeen": 69,
  "timeTaken": 7420,
  "changeHistory": [
    "5e7cfdca7b73a88bf3c3f1e5eb794a24218cce52",
    "83dd14aa84ad697ad32c51007ac31ad39feb4288",
    "c2a52ef9c29459ff9ef3e23b29e14912bfdb1405",
    "065d8f2a34296b566e7ca541a284f7991212f14c",
    "76ccb80fadad50a4465e7e26bc21ae7016036207",
    "0d85f7e59146cc3e9a040c2203995f3efd8ed4eb",
    "83b9933db3349e6a6faf23bce35c9d4ce3f7bcf2",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "5e7cfdca7b73a88bf3c3f1e5eb794a24218cce52": "Ybodychange",
    "83dd14aa84ad697ad32c51007ac31ad39feb4288": "Ybodychange",
    "c2a52ef9c29459ff9ef3e23b29e14912bfdb1405": "Ybodychange",
    "065d8f2a34296b566e7ca541a284f7991212f14c": "Ybodychange",
    "76ccb80fadad50a4465e7e26bc21ae7016036207": "Ybodychange",
    "0d85f7e59146cc3e9a040c2203995f3efd8ed4eb": "Ybodychange",
    "83b9933db3349e6a6faf23bce35c9d4ce3f7bcf2": "Ymultichange(Yrename,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5e7cfdca7b73a88bf3c3f1e5eb794a24218cce52": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14394. Provide Builder pattern for DistributedFileSystem.create. (lei)\n",
      "commitDate": "15/06/17 10:59 AM",
      "commitName": "5e7cfdca7b73a88bf3c3f1e5eb794a24218cce52",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "11/05/17 2:09 PM",
      "commitNameOld": "83dd14aa84ad697ad32c51007ac31ad39feb4288",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 34.87,
      "commitsBetweenForRepo": 157,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,32 @@\n   private OutputStream checkAndMarkRunning() throws IOException {\n     try {\n       if (fs.exists(idPath)) {\n         // try appending to it so that it will fail fast if another balancer is\n         // running.\n         IOUtils.closeStream(fs.append(idPath));\n         fs.delete(idPath, true);\n       }\n \n-      final FSDataOutputStream fsout \u003d fs.newFSDataOutputStreamBuilder(idPath)\n-          .replicate()\n-          .setFlags(EnumSet.of(CreateFlag.CREATE))\n-          .build();\n+      final FSDataOutputStream fsout \u003d fs.createFile(idPath)\n+          .replicate().recursive().build();\n \n       Preconditions.checkState(\n           fsout.hasCapability(StreamCapability.HFLUSH.getValue())\n           \u0026\u0026 fsout.hasCapability(StreamCapability.HSYNC.getValue()),\n           \"Id lock file should support hflush and hsync\");\n \n       // mark balancer idPath to be deleted during filesystem closure\n       fs.deleteOnExit(idPath);\n       if (write2IdFile) {\n         fsout.writeBytes(InetAddress.getLocalHost().getHostName());\n         fsout.hflush();\n       }\n       return fsout;\n     } catch(RemoteException e) {\n       if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n         return null;\n       } else {\n         throw e;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private OutputStream checkAndMarkRunning() throws IOException {\n    try {\n      if (fs.exists(idPath)) {\n        // try appending to it so that it will fail fast if another balancer is\n        // running.\n        IOUtils.closeStream(fs.append(idPath));\n        fs.delete(idPath, true);\n      }\n\n      final FSDataOutputStream fsout \u003d fs.createFile(idPath)\n          .replicate().recursive().build();\n\n      Preconditions.checkState(\n          fsout.hasCapability(StreamCapability.HFLUSH.getValue())\n          \u0026\u0026 fsout.hasCapability(StreamCapability.HSYNC.getValue()),\n          \"Id lock file should support hflush and hsync\");\n\n      // mark balancer idPath to be deleted during filesystem closure\n      fs.deleteOnExit(idPath);\n      if (write2IdFile) {\n        fsout.writeBytes(InetAddress.getLocalHost().getHostName());\n        fsout.hflush();\n      }\n      return fsout;\n    } catch(RemoteException e) {\n      if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/NameNodeConnector.java",
      "extendedDetails": {}
    },
    "83dd14aa84ad697ad32c51007ac31ad39feb4288": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11757. Query StreamCapabilities when creating balancer\u0027s lock file. Contributed by SammiChen.\n",
      "commitDate": "11/05/17 2:09 PM",
      "commitName": "83dd14aa84ad697ad32c51007ac31ad39feb4288",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "04/05/17 11:39 AM",
      "commitNameOld": "c2a52ef9c29459ff9ef3e23b29e14912bfdb1405",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 7.1,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   private OutputStream checkAndMarkRunning() throws IOException {\n     try {\n       if (fs.exists(idPath)) {\n         // try appending to it so that it will fail fast if another balancer is\n         // running.\n         IOUtils.closeStream(fs.append(idPath));\n         fs.delete(idPath, true);\n       }\n \n       final FSDataOutputStream fsout \u003d fs.newFSDataOutputStreamBuilder(idPath)\n           .replicate()\n           .setFlags(EnumSet.of(CreateFlag.CREATE))\n           .build();\n \n-      Preconditions.checkState(!fs.getFileStatus(idPath).isErasureCoded(),\n-          \"Id File should be a replicate file\");\n+      Preconditions.checkState(\n+          fsout.hasCapability(StreamCapability.HFLUSH.getValue())\n+          \u0026\u0026 fsout.hasCapability(StreamCapability.HSYNC.getValue()),\n+          \"Id lock file should support hflush and hsync\");\n \n       // mark balancer idPath to be deleted during filesystem closure\n       fs.deleteOnExit(idPath);\n       if (write2IdFile) {\n         fsout.writeBytes(InetAddress.getLocalHost().getHostName());\n         fsout.hflush();\n       }\n       return fsout;\n     } catch(RemoteException e) {\n       if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n         return null;\n       } else {\n         throw e;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private OutputStream checkAndMarkRunning() throws IOException {\n    try {\n      if (fs.exists(idPath)) {\n        // try appending to it so that it will fail fast if another balancer is\n        // running.\n        IOUtils.closeStream(fs.append(idPath));\n        fs.delete(idPath, true);\n      }\n\n      final FSDataOutputStream fsout \u003d fs.newFSDataOutputStreamBuilder(idPath)\n          .replicate()\n          .setFlags(EnumSet.of(CreateFlag.CREATE))\n          .build();\n\n      Preconditions.checkState(\n          fsout.hasCapability(StreamCapability.HFLUSH.getValue())\n          \u0026\u0026 fsout.hasCapability(StreamCapability.HSYNC.getValue()),\n          \"Id lock file should support hflush and hsync\");\n\n      // mark balancer idPath to be deleted during filesystem closure\n      fs.deleteOnExit(idPath);\n      if (write2IdFile) {\n        fsout.writeBytes(InetAddress.getLocalHost().getHostName());\n        fsout.hflush();\n      }\n      return fsout;\n    } catch(RemoteException e) {\n      if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/NameNodeConnector.java",
      "extendedDetails": {}
    },
    "c2a52ef9c29459ff9ef3e23b29e14912bfdb1405": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11643. Add shouldReplicate option to create builder. Contributed by SammiChen.\n",
      "commitDate": "04/05/17 11:39 AM",
      "commitName": "c2a52ef9c29459ff9ef3e23b29e14912bfdb1405",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "10/06/15 1:42 PM",
      "commitNameOld": "a7a7768341f1b7d3a8f2686e2f4d00c57f2e1d4f",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 693.91,
      "commitsBetweenForRepo": 4607,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,32 @@\n   private OutputStream checkAndMarkRunning() throws IOException {\n     try {\n       if (fs.exists(idPath)) {\n         // try appending to it so that it will fail fast if another balancer is\n         // running.\n         IOUtils.closeStream(fs.append(idPath));\n         fs.delete(idPath, true);\n       }\n-      final FSDataOutputStream fsout \u003d fs.create(idPath, false);\n+\n+      final FSDataOutputStream fsout \u003d fs.newFSDataOutputStreamBuilder(idPath)\n+          .replicate()\n+          .setFlags(EnumSet.of(CreateFlag.CREATE))\n+          .build();\n+\n+      Preconditions.checkState(!fs.getFileStatus(idPath).isErasureCoded(),\n+          \"Id File should be a replicate file\");\n+\n       // mark balancer idPath to be deleted during filesystem closure\n       fs.deleteOnExit(idPath);\n       if (write2IdFile) {\n         fsout.writeBytes(InetAddress.getLocalHost().getHostName());\n         fsout.hflush();\n       }\n       return fsout;\n     } catch(RemoteException e) {\n       if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n         return null;\n       } else {\n         throw e;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private OutputStream checkAndMarkRunning() throws IOException {\n    try {\n      if (fs.exists(idPath)) {\n        // try appending to it so that it will fail fast if another balancer is\n        // running.\n        IOUtils.closeStream(fs.append(idPath));\n        fs.delete(idPath, true);\n      }\n\n      final FSDataOutputStream fsout \u003d fs.newFSDataOutputStreamBuilder(idPath)\n          .replicate()\n          .setFlags(EnumSet.of(CreateFlag.CREATE))\n          .build();\n\n      Preconditions.checkState(!fs.getFileStatus(idPath).isErasureCoded(),\n          \"Id File should be a replicate file\");\n\n      // mark balancer idPath to be deleted during filesystem closure\n      fs.deleteOnExit(idPath);\n      if (write2IdFile) {\n        fsout.writeBytes(InetAddress.getLocalHost().getHostName());\n        fsout.hflush();\n      }\n      return fsout;\n    } catch(RemoteException e) {\n      if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/NameNodeConnector.java",
      "extendedDetails": {}
    },
    "065d8f2a34296b566e7ca541a284f7991212f14c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6300. Prevent multiple balancers from running simultaneously (Contributed by Rakesh R)\n",
      "commitDate": "13/05/15 4:57 AM",
      "commitName": "065d8f2a34296b566e7ca541a284f7991212f14c",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "11/02/15 8:10 AM",
      "commitNameOld": "b94c1117a28e996adee68fe0e181eb6f536289f4",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 90.82,
      "commitsBetweenForRepo": 895,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,24 @@\n   private OutputStream checkAndMarkRunning() throws IOException {\n     try {\n-      final FSDataOutputStream out \u003d fs.create(idPath);\n-      if (write2IdFile) {\n-        out.writeBytes(InetAddress.getLocalHost().getHostName());\n-        out.hflush();\n+      if (fs.exists(idPath)) {\n+        // try appending to it so that it will fail fast if another balancer is\n+        // running.\n+        IOUtils.closeStream(fs.append(idPath));\n+        fs.delete(idPath, true);\n       }\n-      return out;\n+      final FSDataOutputStream fsout \u003d fs.create(idPath, false);\n+      // mark balancer idPath to be deleted during filesystem closure\n+      fs.deleteOnExit(idPath);\n+      if (write2IdFile) {\n+        fsout.writeBytes(InetAddress.getLocalHost().getHostName());\n+        fsout.hflush();\n+      }\n+      return fsout;\n     } catch(RemoteException e) {\n       if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n         return null;\n       } else {\n         throw e;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private OutputStream checkAndMarkRunning() throws IOException {\n    try {\n      if (fs.exists(idPath)) {\n        // try appending to it so that it will fail fast if another balancer is\n        // running.\n        IOUtils.closeStream(fs.append(idPath));\n        fs.delete(idPath, true);\n      }\n      final FSDataOutputStream fsout \u003d fs.create(idPath, false);\n      // mark balancer idPath to be deleted during filesystem closure\n      fs.deleteOnExit(idPath);\n      if (write2IdFile) {\n        fsout.writeBytes(InetAddress.getLocalHost().getHostName());\n        fsout.hflush();\n      }\n      return fsout;\n    } catch(RemoteException e) {\n      if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/NameNodeConnector.java",
      "extendedDetails": {}
    },
    "76ccb80fadad50a4465e7e26bc21ae7016036207": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7088. Archival Storage: fix TestBalancer and TestBalancerWithMultipleNameNodes. Contributed by Tsz Wo Nicholas Sze.\n",
      "commitDate": "18/09/14 10:54 AM",
      "commitName": "76ccb80fadad50a4465e7e26bc21ae7016036207",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "11/09/14 1:00 PM",
      "commitNameOld": "0d85f7e59146cc3e9a040c2203995f3efd8ed4eb",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 6.91,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,16 @@\n   private OutputStream checkAndMarkRunning() throws IOException {\n     try {\n       final FSDataOutputStream out \u003d fs.create(idPath);\n-      out.writeBytes(InetAddress.getLocalHost().getHostName());\n-      out.hflush();\n+      if (write2IdFile) {\n+        out.writeBytes(InetAddress.getLocalHost().getHostName());\n+        out.hflush();\n+      }\n       return out;\n     } catch(RemoteException e) {\n       if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n         return null;\n       } else {\n         throw e;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private OutputStream checkAndMarkRunning() throws IOException {\n    try {\n      final FSDataOutputStream out \u003d fs.create(idPath);\n      if (write2IdFile) {\n        out.writeBytes(InetAddress.getLocalHost().getHostName());\n        out.hflush();\n      }\n      return out;\n    } catch(RemoteException e) {\n      if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/NameNodeConnector.java",
      "extendedDetails": {}
    },
    "0d85f7e59146cc3e9a040c2203995f3efd8ed4eb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7034. Archival Storage: Fix TestBlockPlacement and TestStorageMover. Contributed by Jing Zhao.\n",
      "commitDate": "11/09/14 1:00 PM",
      "commitName": "0d85f7e59146cc3e9a040c2203995f3efd8ed4eb",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "08/09/14 2:10 PM",
      "commitNameOld": "2b5c528a7331a00cfc67e64cd10342650948d686",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 2.95,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   private OutputStream checkAndMarkRunning() throws IOException {\n     try {\n-      final DataOutputStream out \u003d fs.create(idPath);\n+      final FSDataOutputStream out \u003d fs.create(idPath);\n       out.writeBytes(InetAddress.getLocalHost().getHostName());\n-      out.flush();\n+      out.hflush();\n       return out;\n     } catch(RemoteException e) {\n       if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n         return null;\n       } else {\n         throw e;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private OutputStream checkAndMarkRunning() throws IOException {\n    try {\n      final FSDataOutputStream out \u003d fs.create(idPath);\n      out.writeBytes(InetAddress.getLocalHost().getHostName());\n      out.hflush();\n      return out;\n    } catch(RemoteException e) {\n      if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/NameNodeConnector.java",
      "extendedDetails": {}
    },
    "83b9933db3349e6a6faf23bce35c9d4ce3f7bcf2": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "HDFS-6809. Move Balancer\u0027s inner classes MovedBlocks and Matcher as to standalone classes and separates KeyManager from NameNodeConnector.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616422 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/14 12:18 AM",
      "commitName": "83b9933db3349e6a6faf23bce35c9d4ce3f7bcf2",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-6809. Move Balancer\u0027s inner classes MovedBlocks and Matcher as to standalone classes and separates KeyManager from NameNodeConnector.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616422 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/08/14 12:18 AM",
          "commitName": "83b9933db3349e6a6faf23bce35c9d4ce3f7bcf2",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "14/07/14 11:10 AM",
          "commitNameOld": "3b54223c0f32d42a84436c670d80b791a8e9696d",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 23.55,
          "commitsBetweenForRepo": 182,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private OutputStream checkAndMarkRunningBalancer() throws IOException {\n+  private OutputStream checkAndMarkRunning() throws IOException {\n     try {\n-      final DataOutputStream out \u003d fs.create(BALANCER_ID_PATH);\n+      final DataOutputStream out \u003d fs.create(idPath);\n       out.writeBytes(InetAddress.getLocalHost().getHostName());\n       out.flush();\n       return out;\n     } catch(RemoteException e) {\n       if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n         return null;\n       } else {\n         throw e;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private OutputStream checkAndMarkRunning() throws IOException {\n    try {\n      final DataOutputStream out \u003d fs.create(idPath);\n      out.writeBytes(InetAddress.getLocalHost().getHostName());\n      out.flush();\n      return out;\n    } catch(RemoteException e) {\n      if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/NameNodeConnector.java",
          "extendedDetails": {
            "oldValue": "checkAndMarkRunningBalancer",
            "newValue": "checkAndMarkRunning"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6809. Move Balancer\u0027s inner classes MovedBlocks and Matcher as to standalone classes and separates KeyManager from NameNodeConnector.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616422 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/08/14 12:18 AM",
          "commitName": "83b9933db3349e6a6faf23bce35c9d4ce3f7bcf2",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "14/07/14 11:10 AM",
          "commitNameOld": "3b54223c0f32d42a84436c670d80b791a8e9696d",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 23.55,
          "commitsBetweenForRepo": 182,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private OutputStream checkAndMarkRunningBalancer() throws IOException {\n+  private OutputStream checkAndMarkRunning() throws IOException {\n     try {\n-      final DataOutputStream out \u003d fs.create(BALANCER_ID_PATH);\n+      final DataOutputStream out \u003d fs.create(idPath);\n       out.writeBytes(InetAddress.getLocalHost().getHostName());\n       out.flush();\n       return out;\n     } catch(RemoteException e) {\n       if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n         return null;\n       } else {\n         throw e;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private OutputStream checkAndMarkRunning() throws IOException {\n    try {\n      final DataOutputStream out \u003d fs.create(idPath);\n      out.writeBytes(InetAddress.getLocalHost().getHostName());\n      out.flush();\n      return out;\n    } catch(RemoteException e) {\n      if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/NameNodeConnector.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private OutputStream checkAndMarkRunningBalancer() throws IOException {\n    try {\n      final DataOutputStream out \u003d fs.create(BALANCER_ID_PATH);\n      out.writeBytes(InetAddress.getLocalHost().getHostName());\n      out.flush();\n      return out;\n    } catch(RemoteException e) {\n      if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/NameNodeConnector.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/NameNodeConnector.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/NameNodeConnector.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private OutputStream checkAndMarkRunningBalancer() throws IOException {\n    try {\n      final DataOutputStream out \u003d fs.create(BALANCER_ID_PATH);\n      out.writeBytes(InetAddress.getLocalHost().getHostName());\n      out.flush();\n      return out;\n    } catch(RemoteException e) {\n      if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/NameNodeConnector.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/balancer/NameNodeConnector.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/NameNodeConnector.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,14 @@\n+  private OutputStream checkAndMarkRunningBalancer() throws IOException {\n+    try {\n+      final DataOutputStream out \u003d fs.create(BALANCER_ID_PATH);\n+      out.writeBytes(InetAddress.getLocalHost().getHostName());\n+      out.flush();\n+      return out;\n+    } catch(RemoteException e) {\n+      if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n+        return null;\n+      } else {\n+        throw e;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private OutputStream checkAndMarkRunningBalancer() throws IOException {\n    try {\n      final DataOutputStream out \u003d fs.create(BALANCER_ID_PATH);\n      out.writeBytes(InetAddress.getLocalHost().getHostName());\n      out.flush();\n      return out;\n    } catch(RemoteException e) {\n      if(AlreadyBeingCreatedException.class.getName().equals(e.getClassName())){\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/balancer/NameNodeConnector.java"
    }
  }
}