{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RackResolver.java",
  "functionName": "coreResolve",
  "functionId": "coreResolve___hostNames-List__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/RackResolver.java",
  "functionStartLine": 139,
  "functionEndLine": 163,
  "numCommitsSeen": 6,
  "timeTaken": 1618,
  "changeHistory": [
    "e20b5ef52cbc4f9f3bd6cdc36cb359eece63bfbc"
  ],
  "changeHistoryShort": {
    "e20b5ef52cbc4f9f3bd6cdc36cb359eece63bfbc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e20b5ef52cbc4f9f3bd6cdc36cb359eece63bfbc": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9332. RackResolver tool should accept multiple hosts. Contributed by Lantao Jin.\n",
      "commitDate": "03/03/19 11:59 PM",
      "commitName": "e20b5ef52cbc4f9f3bd6cdc36cb359eece63bfbc",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,25 @@\n+  private static List\u003cNode\u003e coreResolve(List\u003cString\u003e hostNames) {\n+    List\u003cNode\u003e nodes \u003d new ArrayList\u003cNode\u003e(hostNames.size());\n+    List\u003cString\u003e rNameList \u003d dnsToSwitchMapping.resolve(hostNames);\n+    if (rNameList \u003d\u003d null || rNameList.isEmpty()) {\n+      for (String hostName : hostNames) {\n+        nodes.add(new NodeBase(hostName, NetworkTopology.DEFAULT_RACK));\n+      }\n+      LOG.info(\"Got an error when resolve hostNames. Falling back to \"\n+          + NetworkTopology.DEFAULT_RACK + \" for all.\");\n+    } else {\n+      for (int i \u003d 0; i \u003c hostNames.size(); i++) {\n+        if (Strings.isNullOrEmpty(rNameList.get(i))) {\n+          // fallback to use default rack\n+          nodes.add(new NodeBase(hostNames.get(i),\n+              NetworkTopology.DEFAULT_RACK));\n+          LOG.debug(\"Could not resolve {}. Falling back to {}\",\n+              hostNames.get(i), NetworkTopology.DEFAULT_RACK);\n+        } else {\n+          nodes.add(new NodeBase(hostNames.get(i), rNameList.get(i)));\n+          LOG.debug(\"Resolved {} to {}\", hostNames.get(i), rNameList.get(i));\n+        }\n+      }\n+    }\n+    return nodes;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static List\u003cNode\u003e coreResolve(List\u003cString\u003e hostNames) {\n    List\u003cNode\u003e nodes \u003d new ArrayList\u003cNode\u003e(hostNames.size());\n    List\u003cString\u003e rNameList \u003d dnsToSwitchMapping.resolve(hostNames);\n    if (rNameList \u003d\u003d null || rNameList.isEmpty()) {\n      for (String hostName : hostNames) {\n        nodes.add(new NodeBase(hostName, NetworkTopology.DEFAULT_RACK));\n      }\n      LOG.info(\"Got an error when resolve hostNames. Falling back to \"\n          + NetworkTopology.DEFAULT_RACK + \" for all.\");\n    } else {\n      for (int i \u003d 0; i \u003c hostNames.size(); i++) {\n        if (Strings.isNullOrEmpty(rNameList.get(i))) {\n          // fallback to use default rack\n          nodes.add(new NodeBase(hostNames.get(i),\n              NetworkTopology.DEFAULT_RACK));\n          LOG.debug(\"Could not resolve {}. Falling back to {}\",\n              hostNames.get(i), NetworkTopology.DEFAULT_RACK);\n        } else {\n          nodes.add(new NodeBase(hostNames.get(i), rNameList.get(i)));\n          LOG.debug(\"Resolved {} to {}\", hostNames.get(i), rNameList.get(i));\n        }\n      }\n    }\n    return nodes;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/RackResolver.java"
    }
  }
}