{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogsCLI.java",
  "functionName": "getMatchedLogOptions",
  "functionId": "getMatchedLogOptions___request-ContainerLogsRequest__logCliHelper-LogCLIHelpers__useRegex-boolean__ignoreSizeLimit-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
  "functionStartLine": 1215,
  "functionEndLine": 1229,
  "numCommitsSeen": 121,
  "timeTaken": 3837,
  "changeHistory": [
    "ec2ae3060a807c8754826af2135a68c08b2e4f13",
    "e605d47df05619c6b1c18aca59f709899498da75",
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1"
  ],
  "changeHistoryShort": {
    "ec2ae3060a807c8754826af2135a68c08b2e4f13": "Ymultichange(Yparameterchange,Ybodychange)",
    "e605d47df05619c6b1c18aca59f709899498da75": "Ymultichange(Yparameterchange,Ybodychange)",
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856": "Ybodychange",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ec2ae3060a807c8754826af2135a68c08b2e4f13": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
      "commitDate": "29/09/17 4:42 PM",
      "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
          "commitDate": "29/09/17 4:42 PM",
          "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/09/17 3:33 PM",
          "commitNameOld": "1a84c24b0cf6674fa755403971fa57d8e412b320",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 14.05,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,15 @@\n   private ContainerLogsRequest getMatchedLogOptions(\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n-      boolean useRegex) throws IOException {\n+      boolean useRegex, boolean ignoreSizeLimit) throws IOException {\n     ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n-    if (request.getLogTypes() !\u003d null \u0026\u0026 !request.getLogTypes().isEmpty()) {\n-      Set\u003cString\u003e matchedFiles \u003d new HashSet\u003cString\u003e();\n-      if (!request.getLogTypes().contains(\"ALL\")) {\n-        Set\u003cString\u003e files \u003d logCliHelper.listContainerLogs(request);\n-        matchedFiles \u003d getMatchedLogFiles(request, files, useRegex);\n-        if (matchedFiles.isEmpty()) {\n-          return null;\n-        }\n-      }\n+    Set\u003cContainerLogFileInfo\u003e files \u003d logCliHelper.listContainerLogs(\n+        request);\n+    Set\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, files,\n+        useRegex, ignoreSizeLimit);\n+    if (matchedFiles.isEmpty()) {\n+      return null;\n+    } else {\n       newOptions.setLogTypes(matchedFiles);\n+      return newOptions;\n     }\n-    return newOptions;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerLogsRequest getMatchedLogOptions(\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n      boolean useRegex, boolean ignoreSizeLimit) throws IOException {\n    ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n    Set\u003cContainerLogFileInfo\u003e files \u003d logCliHelper.listContainerLogs(\n        request);\n    Set\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, files,\n        useRegex, ignoreSizeLimit);\n    if (matchedFiles.isEmpty()) {\n      return null;\n    } else {\n      newOptions.setLogTypes(matchedFiles);\n      return newOptions;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[request-ContainerLogsRequest, logCliHelper-LogCLIHelpers, useRegex-boolean]",
            "newValue": "[request-ContainerLogsRequest, logCliHelper-LogCLIHelpers, useRegex-boolean, ignoreSizeLimit-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
          "commitDate": "29/09/17 4:42 PM",
          "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/09/17 3:33 PM",
          "commitNameOld": "1a84c24b0cf6674fa755403971fa57d8e412b320",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 14.05,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,15 @@\n   private ContainerLogsRequest getMatchedLogOptions(\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n-      boolean useRegex) throws IOException {\n+      boolean useRegex, boolean ignoreSizeLimit) throws IOException {\n     ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n-    if (request.getLogTypes() !\u003d null \u0026\u0026 !request.getLogTypes().isEmpty()) {\n-      Set\u003cString\u003e matchedFiles \u003d new HashSet\u003cString\u003e();\n-      if (!request.getLogTypes().contains(\"ALL\")) {\n-        Set\u003cString\u003e files \u003d logCliHelper.listContainerLogs(request);\n-        matchedFiles \u003d getMatchedLogFiles(request, files, useRegex);\n-        if (matchedFiles.isEmpty()) {\n-          return null;\n-        }\n-      }\n+    Set\u003cContainerLogFileInfo\u003e files \u003d logCliHelper.listContainerLogs(\n+        request);\n+    Set\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, files,\n+        useRegex, ignoreSizeLimit);\n+    if (matchedFiles.isEmpty()) {\n+      return null;\n+    } else {\n       newOptions.setLogTypes(matchedFiles);\n+      return newOptions;\n     }\n-    return newOptions;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerLogsRequest getMatchedLogOptions(\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n      boolean useRegex, boolean ignoreSizeLimit) throws IOException {\n    ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n    Set\u003cContainerLogFileInfo\u003e files \u003d logCliHelper.listContainerLogs(\n        request);\n    Set\u003cString\u003e matchedFiles \u003d getMatchedLogFiles(request, files,\n        useRegex, ignoreSizeLimit);\n    if (matchedFiles.isEmpty()) {\n      return null;\n    } else {\n      newOptions.setLogTypes(matchedFiles);\n      return newOptions;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "e605d47df05619c6b1c18aca59f709899498da75": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
      "commitDate": "05/08/16 10:55 AM",
      "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
          "commitDate": "05/08/16 10:55 AM",
          "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/08/16 10:41 AM",
          "commitNameOld": "3818393297c7b337e380e8111a55f2ac4745cb83",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n   private ContainerLogsRequest getMatchedLogOptions(\n-      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n-      throws IOException {\n+      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n+      boolean useRegex) throws IOException {\n     ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n     if (request.getLogTypes() !\u003d null \u0026\u0026 !request.getLogTypes().isEmpty()) {\n-      List\u003cString\u003e matchedFiles \u003d new ArrayList\u003cString\u003e();\n-      if (!request.getLogTypes().contains(\".*\")) {\n+      Set\u003cString\u003e matchedFiles \u003d new HashSet\u003cString\u003e();\n+      if (!request.getLogTypes().contains(\"ALL\")) {\n         Set\u003cString\u003e files \u003d logCliHelper.listContainerLogs(request);\n-        matchedFiles \u003d getMatchedLogFiles(request, files);\n+        matchedFiles \u003d getMatchedLogFiles(request, files, useRegex);\n         if (matchedFiles.isEmpty()) {\n           return null;\n         }\n       }\n       newOptions.setLogTypes(matchedFiles);\n     }\n     return newOptions;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerLogsRequest getMatchedLogOptions(\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n      boolean useRegex) throws IOException {\n    ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n    if (request.getLogTypes() !\u003d null \u0026\u0026 !request.getLogTypes().isEmpty()) {\n      Set\u003cString\u003e matchedFiles \u003d new HashSet\u003cString\u003e();\n      if (!request.getLogTypes().contains(\"ALL\")) {\n        Set\u003cString\u003e files \u003d logCliHelper.listContainerLogs(request);\n        matchedFiles \u003d getMatchedLogFiles(request, files, useRegex);\n        if (matchedFiles.isEmpty()) {\n          return null;\n        }\n      }\n      newOptions.setLogTypes(matchedFiles);\n    }\n    return newOptions;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[request-ContainerLogsRequest, logCliHelper-LogCLIHelpers]",
            "newValue": "[request-ContainerLogsRequest, logCliHelper-LogCLIHelpers, useRegex-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
          "commitDate": "05/08/16 10:55 AM",
          "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/08/16 10:41 AM",
          "commitNameOld": "3818393297c7b337e380e8111a55f2ac4745cb83",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n   private ContainerLogsRequest getMatchedLogOptions(\n-      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n-      throws IOException {\n+      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n+      boolean useRegex) throws IOException {\n     ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n     if (request.getLogTypes() !\u003d null \u0026\u0026 !request.getLogTypes().isEmpty()) {\n-      List\u003cString\u003e matchedFiles \u003d new ArrayList\u003cString\u003e();\n-      if (!request.getLogTypes().contains(\".*\")) {\n+      Set\u003cString\u003e matchedFiles \u003d new HashSet\u003cString\u003e();\n+      if (!request.getLogTypes().contains(\"ALL\")) {\n         Set\u003cString\u003e files \u003d logCliHelper.listContainerLogs(request);\n-        matchedFiles \u003d getMatchedLogFiles(request, files);\n+        matchedFiles \u003d getMatchedLogFiles(request, files, useRegex);\n         if (matchedFiles.isEmpty()) {\n           return null;\n         }\n       }\n       newOptions.setLogTypes(matchedFiles);\n     }\n     return newOptions;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerLogsRequest getMatchedLogOptions(\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper,\n      boolean useRegex) throws IOException {\n    ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n    if (request.getLogTypes() !\u003d null \u0026\u0026 !request.getLogTypes().isEmpty()) {\n      Set\u003cString\u003e matchedFiles \u003d new HashSet\u003cString\u003e();\n      if (!request.getLogTypes().contains(\"ALL\")) {\n        Set\u003cString\u003e files \u003d logCliHelper.listContainerLogs(request);\n        matchedFiles \u003d getMatchedLogFiles(request, files, useRegex);\n        if (matchedFiles.isEmpty()) {\n          return null;\n        }\n      }\n      newOptions.setLogTypes(matchedFiles);\n    }\n    return newOptions;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5266. Wrong exit code while trying to get app logs using regex via CLI. Contributed by Xuan Gong\n",
      "commitDate": "22/06/16 9:48 PM",
      "commitName": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
      "commitAuthor": "Xuan",
      "commitDateOld": "20/06/16 4:05 PM",
      "commitNameOld": "5d58858bb6dfc07272ef099d60ca7cfb3b04423c",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 2.24,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,17 @@\n   private ContainerLogsRequest getMatchedLogOptions(\n       ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n       throws IOException {\n     ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n     if (request.getLogTypes() !\u003d null \u0026\u0026 !request.getLogTypes().isEmpty()) {\n       List\u003cString\u003e matchedFiles \u003d new ArrayList\u003cString\u003e();\n       if (!request.getLogTypes().contains(\".*\")) {\n         Set\u003cString\u003e files \u003d logCliHelper.listContainerLogs(request);\n-        matchedFiles \u003d getMatchedLogFiles(\n-            request, files, true);\n+        matchedFiles \u003d getMatchedLogFiles(request, files);\n         if (matchedFiles.isEmpty()) {\n           return null;\n         }\n       }\n       newOptions.setLogTypes(matchedFiles);\n     }\n     return newOptions;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerLogsRequest getMatchedLogOptions(\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n      throws IOException {\n    ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n    if (request.getLogTypes() !\u003d null \u0026\u0026 !request.getLogTypes().isEmpty()) {\n      List\u003cString\u003e matchedFiles \u003d new ArrayList\u003cString\u003e();\n      if (!request.getLogTypes().contains(\".*\")) {\n        Set\u003cString\u003e files \u003d logCliHelper.listContainerLogs(request);\n        matchedFiles \u003d getMatchedLogFiles(request, files);\n        if (matchedFiles.isEmpty()) {\n          return null;\n        }\n      }\n      newOptions.setLogTypes(matchedFiles);\n    }\n    return newOptions;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
      "commitDate": "26/05/16 11:49 PM",
      "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,18 @@\n+  private ContainerLogsRequest getMatchedLogOptions(\n+      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n+      throws IOException {\n+    ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n+    if (request.getLogTypes() !\u003d null \u0026\u0026 !request.getLogTypes().isEmpty()) {\n+      List\u003cString\u003e matchedFiles \u003d new ArrayList\u003cString\u003e();\n+      if (!request.getLogTypes().contains(\".*\")) {\n+        Set\u003cString\u003e files \u003d logCliHelper.listContainerLogs(request);\n+        matchedFiles \u003d getMatchedLogFiles(\n+            request, files, true);\n+        if (matchedFiles.isEmpty()) {\n+          return null;\n+        }\n+      }\n+      newOptions.setLogTypes(matchedFiles);\n+    }\n+    return newOptions;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerLogsRequest getMatchedLogOptions(\n      ContainerLogsRequest request, LogCLIHelpers logCliHelper)\n      throws IOException {\n    ContainerLogsRequest newOptions \u003d new ContainerLogsRequest(request);\n    if (request.getLogTypes() !\u003d null \u0026\u0026 !request.getLogTypes().isEmpty()) {\n      List\u003cString\u003e matchedFiles \u003d new ArrayList\u003cString\u003e();\n      if (!request.getLogTypes().contains(\".*\")) {\n        Set\u003cString\u003e files \u003d logCliHelper.listContainerLogs(request);\n        matchedFiles \u003d getMatchedLogFiles(\n            request, files, true);\n        if (matchedFiles.isEmpty()) {\n          return null;\n        }\n      }\n      newOptions.setLogTypes(matchedFiles);\n    }\n    return newOptions;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java"
    }
  }
}