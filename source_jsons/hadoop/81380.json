{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NetUtils.java",
  "functionName": "wrapException",
  "functionId": "wrapException___destHost-String(modifiers-final)__destPort-int(modifiers-final)__localHost-String(modifiers-final)__localPort-int(modifiers-final)__exception-IOException(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java",
  "functionStartLine": 747,
  "functionEndLine": 841,
  "numCommitsSeen": 75,
  "timeTaken": 4043,
  "changeHistory": [
    "6b4564f1d59ab679512be0d244165e1f272cb9bd",
    "28f644bf25b80a6642ce1f32f1688a8d8f4c7cca",
    "67e7673750e731f5ecfa84e82b84b7fc7ee0b233",
    "7280550a8f668df8aa32e4630db4ead49e9b8b6d",
    "86bf8c7193013834f67e03bd67a320cc080ef32c",
    "7f300bcdc78d164a42d56c3f65a512cfe0ac40be",
    "5a0b74663951475f668c7c68b9902c2bb54dc861",
    "ebdc7f800a6c161696adb161b623a80ebaa743d7",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "6b4564f1d59ab679512be0d244165e1f272cb9bd": "Ybodychange",
    "28f644bf25b80a6642ce1f32f1688a8d8f4c7cca": "Ybodychange",
    "67e7673750e731f5ecfa84e82b84b7fc7ee0b233": "Ybodychange",
    "7280550a8f668df8aa32e4630db4ead49e9b8b6d": "Ybodychange",
    "86bf8c7193013834f67e03bd67a320cc080ef32c": "Ybodychange",
    "7f300bcdc78d164a42d56c3f65a512cfe0ac40be": "Ybodychange",
    "5a0b74663951475f668c7c68b9902c2bb54dc861": "Ybodychange",
    "ebdc7f800a6c161696adb161b623a80ebaa743d7": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparametermetachange,Yparameterchange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b4564f1d59ab679512be0d244165e1f272cb9bd": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16453. Update how exceptions are handled in NetUtils. Contributed by Lisheng Sun.\n",
      "commitDate": "11/08/19 8:34 PM",
      "commitName": "6b4564f1d59ab679512be0d244165e1f272cb9bd",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "10/04/19 1:21 PM",
      "commitNameOld": "87407553ef9215c008ccc5836dc7c9a9201a9e7d",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 123.3,
      "commitsBetweenForRepo": 884,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,95 @@\n   public static IOException wrapException(final String destHost,\n                                           final int destPort,\n                                           final String localHost,\n                                           final int localPort,\n                                           final IOException exception) {\n     try {\n       if (exception instanceof BindException) {\n         return wrapWithMessage(exception,\n             \"Problem binding to [\"\n                 + localHost\n                 + \":\"\n                 + localPort\n                 + \"] \"\n                 + exception\n                 + \";\"\n                 + see(\"BindException\"));\n       } else if (exception instanceof ConnectException) {\n         // Check if client was trying to connect to an unspecified IPv4 address\n         // (0.0.0.0) or IPv6 address(0:0:0:0:0:0:0:0 or ::)\n         if ((destHost !\u003d null \u0026\u0026 (destHost.equals(\"0.0.0.0\") ||\n             destHost.equals(\"0:0:0:0:0:0:0:0\") || destHost.equals(\"::\")))\n             || destPort \u003d\u003d 0) {\n           return wrapWithMessage(exception, \"Your endpoint configuration\" +\n               \" is wrong;\" + see(\"UnsetHostnameOrPort\"));\n         } else {\n           // connection refused; include the host:port in the error\n           return wrapWithMessage(exception,\n               \"Call From \"\n                   + localHost\n                   + \" to \"\n                   + destHost\n                   + \":\"\n                   + destPort\n                   + \" failed on connection exception: \"\n                   + exception\n                   + \";\"\n                   + see(\"ConnectionRefused\"));\n         }\n       } else if (exception instanceof UnknownHostException) {\n         return wrapWithMessage(exception,\n             \"Invalid host name: \"\n                 + getHostDetailsAsString(destHost, destPort, localHost)\n                 + exception\n                 + \";\"\n                 + see(\"UnknownHost\"));\n       } else if (exception instanceof SocketTimeoutException) {\n         return wrapWithMessage(exception,\n             \"Call From \"\n                 + localHost + \" to \" + destHost + \":\" + destPort\n                 + \" failed on socket timeout exception: \" + exception\n                 + \";\"\n                 + see(\"SocketTimeout\"));\n       } else if (exception instanceof NoRouteToHostException) {\n         return wrapWithMessage(exception,\n             \"No Route to Host from  \"\n                 + localHost + \" to \" + destHost + \":\" + destPort\n                 + \" failed on socket timeout exception: \" + exception\n                 + \";\"\n                 + see(\"NoRouteToHost\"));\n       } else if (exception instanceof EOFException) {\n         return wrapWithMessage(exception,\n             \"End of File Exception between \"\n                 + getHostDetailsAsString(destHost, destPort, localHost)\n                 + \": \" + exception\n                 + \";\"\n                 + see(\"EOFException\"));\n       } else if (exception instanceof SocketException) {\n         // Many of the predecessor exceptions are subclasses of SocketException,\n         // so must be handled before this\n         return wrapWithMessage(exception,\n             \"Call From \"\n                 + localHost + \" to \" + destHost + \":\" + destPort\n                 + \" failed on socket exception: \" + exception\n                 + \";\"\n                 + see(\"SocketException\"));\n       } else {\n-        // Return instance of same type if Exception has a String constructor\n+        // 1. Return instance of same type with exception msg if Exception has a\n+        // String constructor.\n+        // 2. Return instance of same type if Exception doesn\u0027t have a String\n+        // constructor.\n+        // Related HADOOP-16453.\n         return wrapWithMessage(exception,\n             \"DestHost:destPort \" + destHost + \":\" + destPort\n                 + \" , LocalHost:localPort \" + localHost\n                 + \":\" + localPort + \". Failed on local exception: \" +\n                 exception);\n \n       }\n     } catch (IOException ex) {\n       return (IOException) new IOException(\"Failed on local exception: \"\n           + exception + \"; Host Details : \"\n           + getHostDetailsAsString(destHost, destPort, localHost))\n           .initCause(exception);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException wrapException(final String destHost,\n                                          final int destPort,\n                                          final String localHost,\n                                          final int localPort,\n                                          final IOException exception) {\n    try {\n      if (exception instanceof BindException) {\n        return wrapWithMessage(exception,\n            \"Problem binding to [\"\n                + localHost\n                + \":\"\n                + localPort\n                + \"] \"\n                + exception\n                + \";\"\n                + see(\"BindException\"));\n      } else if (exception instanceof ConnectException) {\n        // Check if client was trying to connect to an unspecified IPv4 address\n        // (0.0.0.0) or IPv6 address(0:0:0:0:0:0:0:0 or ::)\n        if ((destHost !\u003d null \u0026\u0026 (destHost.equals(\"0.0.0.0\") ||\n            destHost.equals(\"0:0:0:0:0:0:0:0\") || destHost.equals(\"::\")))\n            || destPort \u003d\u003d 0) {\n          return wrapWithMessage(exception, \"Your endpoint configuration\" +\n              \" is wrong;\" + see(\"UnsetHostnameOrPort\"));\n        } else {\n          // connection refused; include the host:port in the error\n          return wrapWithMessage(exception,\n              \"Call From \"\n                  + localHost\n                  + \" to \"\n                  + destHost\n                  + \":\"\n                  + destPort\n                  + \" failed on connection exception: \"\n                  + exception\n                  + \";\"\n                  + see(\"ConnectionRefused\"));\n        }\n      } else if (exception instanceof UnknownHostException) {\n        return wrapWithMessage(exception,\n            \"Invalid host name: \"\n                + getHostDetailsAsString(destHost, destPort, localHost)\n                + exception\n                + \";\"\n                + see(\"UnknownHost\"));\n      } else if (exception instanceof SocketTimeoutException) {\n        return wrapWithMessage(exception,\n            \"Call From \"\n                + localHost + \" to \" + destHost + \":\" + destPort\n                + \" failed on socket timeout exception: \" + exception\n                + \";\"\n                + see(\"SocketTimeout\"));\n      } else if (exception instanceof NoRouteToHostException) {\n        return wrapWithMessage(exception,\n            \"No Route to Host from  \"\n                + localHost + \" to \" + destHost + \":\" + destPort\n                + \" failed on socket timeout exception: \" + exception\n                + \";\"\n                + see(\"NoRouteToHost\"));\n      } else if (exception instanceof EOFException) {\n        return wrapWithMessage(exception,\n            \"End of File Exception between \"\n                + getHostDetailsAsString(destHost, destPort, localHost)\n                + \": \" + exception\n                + \";\"\n                + see(\"EOFException\"));\n      } else if (exception instanceof SocketException) {\n        // Many of the predecessor exceptions are subclasses of SocketException,\n        // so must be handled before this\n        return wrapWithMessage(exception,\n            \"Call From \"\n                + localHost + \" to \" + destHost + \":\" + destPort\n                + \" failed on socket exception: \" + exception\n                + \";\"\n                + see(\"SocketException\"));\n      } else {\n        // 1. Return instance of same type with exception msg if Exception has a\n        // String constructor.\n        // 2. Return instance of same type if Exception doesn\u0027t have a String\n        // constructor.\n        // Related HADOOP-16453.\n        return wrapWithMessage(exception,\n            \"DestHost:destPort \" + destHost + \":\" + destPort\n                + \" , LocalHost:localPort \" + localHost\n                + \":\" + localPort + \". Failed on local exception: \" +\n                exception);\n\n      }\n    } catch (IOException ex) {\n      return (IOException) new IOException(\"Failed on local exception: \"\n          + exception + \"; Host Details : \"\n          + getHostDetailsAsString(destHost, destPort, localHost))\n          .initCause(exception);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java",
      "extendedDetails": {}
    },
    "28f644bf25b80a6642ce1f32f1688a8d8f4c7cca": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15178. Generalize NetUtils#wrapException to handle other subclasses with String Constructor. Contributed by Ajay Kumar.\n",
      "commitDate": "27/02/18 7:38 AM",
      "commitName": "28f644bf25b80a6642ce1f32f1688a8d8f4c7cca",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "24/10/17 2:36 PM",
      "commitNameOld": "67e7673750e731f5ecfa84e82b84b7fc7ee0b233",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 125.75,
      "commitsBetweenForRepo": 823,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,91 @@\n   public static IOException wrapException(final String destHost,\n                                           final int destPort,\n                                           final String localHost,\n                                           final int localPort,\n                                           final IOException exception) {\n-    if (exception instanceof BindException) {\n-      return wrapWithMessage(exception,\n-          \"Problem binding to [\"\n-              + localHost\n-              + \":\"\n-              + localPort\n-              + \"] \"\n-              + exception\n-              + \";\"\n-              + see(\"BindException\"));\n-    } else if (exception instanceof ConnectException) {\n-      // Check if client was trying to connect to an unspecified IPv4 address\n-      // (0.0.0.0) or IPv6 address(0:0:0:0:0:0:0:0 or ::)\n-      if ((destHost !\u003d null \u0026\u0026 (destHost.equals(\"0.0.0.0\") ||\n-          destHost.equals(\"0:0:0:0:0:0:0:0\") || destHost.equals(\"::\")))\n-          || destPort \u003d\u003d 0) {\n-        return wrapWithMessage(exception, \"Your endpoint configuration\" +\n-            \" is wrong;\" + see(\"UnsetHostnameOrPort\"));\n-      } else {\n-        // connection refused; include the host:port in the error\n+    try {\n+      if (exception instanceof BindException) {\n         return wrapWithMessage(exception,\n-            \"Call From \"\n+            \"Problem binding to [\"\n                 + localHost\n-                + \" to \"\n-                + destHost\n                 + \":\"\n-                + destPort\n-                + \" failed on connection exception: \"\n+                + localPort\n+                + \"] \"\n                 + exception\n                 + \";\"\n-                + see(\"ConnectionRefused\"));\n-      }\n-    } else if (exception instanceof UnknownHostException) {\n-      return wrapWithMessage(exception,\n-          \"Invalid host name: \"\n-              + getHostDetailsAsString(destHost, destPort, localHost)\n-              + exception\n-              + \";\"\n-              + see(\"UnknownHost\"));\n-    } else if (exception instanceof SocketTimeoutException) {\n-      return wrapWithMessage(exception,\n-          \"Call From \"\n-              + localHost + \" to \" + destHost + \":\" + destPort\n-              + \" failed on socket timeout exception: \" + exception\n-              + \";\"\n-              + see(\"SocketTimeout\"));\n-    } else if (exception instanceof NoRouteToHostException) {\n-      return wrapWithMessage(exception,\n-          \"No Route to Host from  \"\n-              + localHost + \" to \" + destHost + \":\" + destPort\n-              + \" failed on socket timeout exception: \" + exception\n-              + \";\"\n-              + see(\"NoRouteToHost\"));\n-    } else if (exception instanceof EOFException) {\n-      return wrapWithMessage(exception,\n-          \"End of File Exception between \"\n-              + getHostDetailsAsString(destHost,  destPort, localHost)\n-              + \": \" + exception\n-              + \";\"\n-              + see(\"EOFException\"));\n-    } else if (exception instanceof SocketException) {\n-      // Many of the predecessor exceptions are subclasses of SocketException,\n-      // so must be handled before this\n-      return wrapWithMessage(exception,\n-          \"Call From \"\n-              + localHost + \" to \" + destHost + \":\" + destPort\n-              + \" failed on socket exception: \" + exception\n-              + \";\"\n-              + see(\"SocketException\"));\n-    }\n-    else {\n-      return (IOException) new IOException(\"Failed on local exception: \"\n-             + exception\n-             + \"; Host Details : \"\n-             + getHostDetailsAsString(destHost, destPort, localHost))\n-          .initCause(exception);\n+                + see(\"BindException\"));\n+      } else if (exception instanceof ConnectException) {\n+        // Check if client was trying to connect to an unspecified IPv4 address\n+        // (0.0.0.0) or IPv6 address(0:0:0:0:0:0:0:0 or ::)\n+        if ((destHost !\u003d null \u0026\u0026 (destHost.equals(\"0.0.0.0\") ||\n+            destHost.equals(\"0:0:0:0:0:0:0:0\") || destHost.equals(\"::\")))\n+            || destPort \u003d\u003d 0) {\n+          return wrapWithMessage(exception, \"Your endpoint configuration\" +\n+              \" is wrong;\" + see(\"UnsetHostnameOrPort\"));\n+        } else {\n+          // connection refused; include the host:port in the error\n+          return wrapWithMessage(exception,\n+              \"Call From \"\n+                  + localHost\n+                  + \" to \"\n+                  + destHost\n+                  + \":\"\n+                  + destPort\n+                  + \" failed on connection exception: \"\n+                  + exception\n+                  + \";\"\n+                  + see(\"ConnectionRefused\"));\n+        }\n+      } else if (exception instanceof UnknownHostException) {\n+        return wrapWithMessage(exception,\n+            \"Invalid host name: \"\n+                + getHostDetailsAsString(destHost, destPort, localHost)\n+                + exception\n+                + \";\"\n+                + see(\"UnknownHost\"));\n+      } else if (exception instanceof SocketTimeoutException) {\n+        return wrapWithMessage(exception,\n+            \"Call From \"\n+                + localHost + \" to \" + destHost + \":\" + destPort\n+                + \" failed on socket timeout exception: \" + exception\n+                + \";\"\n+                + see(\"SocketTimeout\"));\n+      } else if (exception instanceof NoRouteToHostException) {\n+        return wrapWithMessage(exception,\n+            \"No Route to Host from  \"\n+                + localHost + \" to \" + destHost + \":\" + destPort\n+                + \" failed on socket timeout exception: \" + exception\n+                + \";\"\n+                + see(\"NoRouteToHost\"));\n+      } else if (exception instanceof EOFException) {\n+        return wrapWithMessage(exception,\n+            \"End of File Exception between \"\n+                + getHostDetailsAsString(destHost, destPort, localHost)\n+                + \": \" + exception\n+                + \";\"\n+                + see(\"EOFException\"));\n+      } else if (exception instanceof SocketException) {\n+        // Many of the predecessor exceptions are subclasses of SocketException,\n+        // so must be handled before this\n+        return wrapWithMessage(exception,\n+            \"Call From \"\n+                + localHost + \" to \" + destHost + \":\" + destPort\n+                + \" failed on socket exception: \" + exception\n+                + \";\"\n+                + see(\"SocketException\"));\n+      } else {\n+        // Return instance of same type if Exception has a String constructor\n+        return wrapWithMessage(exception,\n+            \"DestHost:destPort \" + destHost + \":\" + destPort\n+                + \" , LocalHost:localPort \" + localHost\n+                + \":\" + localPort + \". Failed on local exception: \" +\n+                exception);\n \n+      }\n+    } catch (IOException ex) {\n+      return (IOException) new IOException(\"Failed on local exception: \"\n+          + exception + \"; Host Details : \"\n+          + getHostDetailsAsString(destHost, destPort, localHost))\n+          .initCause(exception);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException wrapException(final String destHost,\n                                          final int destPort,\n                                          final String localHost,\n                                          final int localPort,\n                                          final IOException exception) {\n    try {\n      if (exception instanceof BindException) {\n        return wrapWithMessage(exception,\n            \"Problem binding to [\"\n                + localHost\n                + \":\"\n                + localPort\n                + \"] \"\n                + exception\n                + \";\"\n                + see(\"BindException\"));\n      } else if (exception instanceof ConnectException) {\n        // Check if client was trying to connect to an unspecified IPv4 address\n        // (0.0.0.0) or IPv6 address(0:0:0:0:0:0:0:0 or ::)\n        if ((destHost !\u003d null \u0026\u0026 (destHost.equals(\"0.0.0.0\") ||\n            destHost.equals(\"0:0:0:0:0:0:0:0\") || destHost.equals(\"::\")))\n            || destPort \u003d\u003d 0) {\n          return wrapWithMessage(exception, \"Your endpoint configuration\" +\n              \" is wrong;\" + see(\"UnsetHostnameOrPort\"));\n        } else {\n          // connection refused; include the host:port in the error\n          return wrapWithMessage(exception,\n              \"Call From \"\n                  + localHost\n                  + \" to \"\n                  + destHost\n                  + \":\"\n                  + destPort\n                  + \" failed on connection exception: \"\n                  + exception\n                  + \";\"\n                  + see(\"ConnectionRefused\"));\n        }\n      } else if (exception instanceof UnknownHostException) {\n        return wrapWithMessage(exception,\n            \"Invalid host name: \"\n                + getHostDetailsAsString(destHost, destPort, localHost)\n                + exception\n                + \";\"\n                + see(\"UnknownHost\"));\n      } else if (exception instanceof SocketTimeoutException) {\n        return wrapWithMessage(exception,\n            \"Call From \"\n                + localHost + \" to \" + destHost + \":\" + destPort\n                + \" failed on socket timeout exception: \" + exception\n                + \";\"\n                + see(\"SocketTimeout\"));\n      } else if (exception instanceof NoRouteToHostException) {\n        return wrapWithMessage(exception,\n            \"No Route to Host from  \"\n                + localHost + \" to \" + destHost + \":\" + destPort\n                + \" failed on socket timeout exception: \" + exception\n                + \";\"\n                + see(\"NoRouteToHost\"));\n      } else if (exception instanceof EOFException) {\n        return wrapWithMessage(exception,\n            \"End of File Exception between \"\n                + getHostDetailsAsString(destHost, destPort, localHost)\n                + \": \" + exception\n                + \";\"\n                + see(\"EOFException\"));\n      } else if (exception instanceof SocketException) {\n        // Many of the predecessor exceptions are subclasses of SocketException,\n        // so must be handled before this\n        return wrapWithMessage(exception,\n            \"Call From \"\n                + localHost + \" to \" + destHost + \":\" + destPort\n                + \" failed on socket exception: \" + exception\n                + \";\"\n                + see(\"SocketException\"));\n      } else {\n        // Return instance of same type if Exception has a String constructor\n        return wrapWithMessage(exception,\n            \"DestHost:destPort \" + destHost + \":\" + destPort\n                + \" , LocalHost:localPort \" + localHost\n                + \":\" + localPort + \". Failed on local exception: \" +\n                exception);\n\n      }\n    } catch (IOException ex) {\n      return (IOException) new IOException(\"Failed on local exception: \"\n          + exception + \"; Host Details : \"\n          + getHostDetailsAsString(destHost, destPort, localHost))\n          .initCause(exception);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java",
      "extendedDetails": {}
    },
    "67e7673750e731f5ecfa84e82b84b7fc7ee0b233": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9657. NetUtils.wrapException to have special handling for 0.0.0.0 addresses and :0 ports. Contributed by Varun Saxena.\n",
      "commitDate": "24/10/17 2:36 PM",
      "commitName": "67e7673750e731f5ecfa84e82b84b7fc7ee0b233",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 98.71,
      "commitsBetweenForRepo": 828,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,84 @@\n   public static IOException wrapException(final String destHost,\n                                           final int destPort,\n                                           final String localHost,\n                                           final int localPort,\n                                           final IOException exception) {\n     if (exception instanceof BindException) {\n       return wrapWithMessage(exception,\n           \"Problem binding to [\"\n               + localHost\n               + \":\"\n               + localPort\n               + \"] \"\n               + exception\n               + \";\"\n               + see(\"BindException\"));\n     } else if (exception instanceof ConnectException) {\n-      // connection refused; include the host:port in the error\n-      return wrapWithMessage(exception, \n-          \"Call From \"\n-              + localHost\n-              + \" to \"\n-              + destHost\n-              + \":\"\n-              + destPort\n-              + \" failed on connection exception: \"\n-              + exception\n-              + \";\"\n-              + see(\"ConnectionRefused\"));\n+      // Check if client was trying to connect to an unspecified IPv4 address\n+      // (0.0.0.0) or IPv6 address(0:0:0:0:0:0:0:0 or ::)\n+      if ((destHost !\u003d null \u0026\u0026 (destHost.equals(\"0.0.0.0\") ||\n+          destHost.equals(\"0:0:0:0:0:0:0:0\") || destHost.equals(\"::\")))\n+          || destPort \u003d\u003d 0) {\n+        return wrapWithMessage(exception, \"Your endpoint configuration\" +\n+            \" is wrong;\" + see(\"UnsetHostnameOrPort\"));\n+      } else {\n+        // connection refused; include the host:port in the error\n+        return wrapWithMessage(exception,\n+            \"Call From \"\n+                + localHost\n+                + \" to \"\n+                + destHost\n+                + \":\"\n+                + destPort\n+                + \" failed on connection exception: \"\n+                + exception\n+                + \";\"\n+                + see(\"ConnectionRefused\"));\n+      }\n     } else if (exception instanceof UnknownHostException) {\n       return wrapWithMessage(exception,\n           \"Invalid host name: \"\n               + getHostDetailsAsString(destHost, destPort, localHost)\n               + exception\n               + \";\"\n               + see(\"UnknownHost\"));\n     } else if (exception instanceof SocketTimeoutException) {\n       return wrapWithMessage(exception,\n           \"Call From \"\n               + localHost + \" to \" + destHost + \":\" + destPort\n               + \" failed on socket timeout exception: \" + exception\n               + \";\"\n               + see(\"SocketTimeout\"));\n     } else if (exception instanceof NoRouteToHostException) {\n       return wrapWithMessage(exception,\n           \"No Route to Host from  \"\n               + localHost + \" to \" + destHost + \":\" + destPort\n               + \" failed on socket timeout exception: \" + exception\n               + \";\"\n               + see(\"NoRouteToHost\"));\n     } else if (exception instanceof EOFException) {\n       return wrapWithMessage(exception,\n           \"End of File Exception between \"\n               + getHostDetailsAsString(destHost,  destPort, localHost)\n               + \": \" + exception\n               + \";\"\n               + see(\"EOFException\"));\n     } else if (exception instanceof SocketException) {\n       // Many of the predecessor exceptions are subclasses of SocketException,\n       // so must be handled before this\n       return wrapWithMessage(exception,\n           \"Call From \"\n               + localHost + \" to \" + destHost + \":\" + destPort\n               + \" failed on socket exception: \" + exception\n               + \";\"\n               + see(\"SocketException\"));\n     }\n     else {\n       return (IOException) new IOException(\"Failed on local exception: \"\n              + exception\n              + \"; Host Details : \"\n              + getHostDetailsAsString(destHost, destPort, localHost))\n           .initCause(exception);\n \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException wrapException(final String destHost,\n                                          final int destPort,\n                                          final String localHost,\n                                          final int localPort,\n                                          final IOException exception) {\n    if (exception instanceof BindException) {\n      return wrapWithMessage(exception,\n          \"Problem binding to [\"\n              + localHost\n              + \":\"\n              + localPort\n              + \"] \"\n              + exception\n              + \";\"\n              + see(\"BindException\"));\n    } else if (exception instanceof ConnectException) {\n      // Check if client was trying to connect to an unspecified IPv4 address\n      // (0.0.0.0) or IPv6 address(0:0:0:0:0:0:0:0 or ::)\n      if ((destHost !\u003d null \u0026\u0026 (destHost.equals(\"0.0.0.0\") ||\n          destHost.equals(\"0:0:0:0:0:0:0:0\") || destHost.equals(\"::\")))\n          || destPort \u003d\u003d 0) {\n        return wrapWithMessage(exception, \"Your endpoint configuration\" +\n            \" is wrong;\" + see(\"UnsetHostnameOrPort\"));\n      } else {\n        // connection refused; include the host:port in the error\n        return wrapWithMessage(exception,\n            \"Call From \"\n                + localHost\n                + \" to \"\n                + destHost\n                + \":\"\n                + destPort\n                + \" failed on connection exception: \"\n                + exception\n                + \";\"\n                + see(\"ConnectionRefused\"));\n      }\n    } else if (exception instanceof UnknownHostException) {\n      return wrapWithMessage(exception,\n          \"Invalid host name: \"\n              + getHostDetailsAsString(destHost, destPort, localHost)\n              + exception\n              + \";\"\n              + see(\"UnknownHost\"));\n    } else if (exception instanceof SocketTimeoutException) {\n      return wrapWithMessage(exception,\n          \"Call From \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"SocketTimeout\"));\n    } else if (exception instanceof NoRouteToHostException) {\n      return wrapWithMessage(exception,\n          \"No Route to Host from  \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"NoRouteToHost\"));\n    } else if (exception instanceof EOFException) {\n      return wrapWithMessage(exception,\n          \"End of File Exception between \"\n              + getHostDetailsAsString(destHost,  destPort, localHost)\n              + \": \" + exception\n              + \";\"\n              + see(\"EOFException\"));\n    } else if (exception instanceof SocketException) {\n      // Many of the predecessor exceptions are subclasses of SocketException,\n      // so must be handled before this\n      return wrapWithMessage(exception,\n          \"Call From \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket exception: \" + exception\n              + \";\"\n              + see(\"SocketException\"));\n    }\n    else {\n      return (IOException) new IOException(\"Failed on local exception: \"\n             + exception\n             + \"; Host Details : \"\n             + getHostDetailsAsString(destHost, destPort, localHost))\n          .initCause(exception);\n\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java",
      "extendedDetails": {}
    },
    "7280550a8f668df8aa32e4630db4ead49e9b8b6d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11212. NetUtils.wrapException to handle SocketException explicitly. (Contributed by Steve Loughran)\n",
      "commitDate": "04/04/16 10:50 AM",
      "commitName": "7280550a8f668df8aa32e4630db4ead49e9b8b6d",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "19/03/16 2:02 PM",
      "commitNameOld": "cd8b6889a74a949e37f4b2eb664cdf3b59bfb93b",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 15.87,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,75 @@\n   public static IOException wrapException(final String destHost,\n                                           final int destPort,\n                                           final String localHost,\n                                           final int localPort,\n                                           final IOException exception) {\n     if (exception instanceof BindException) {\n       return wrapWithMessage(exception,\n           \"Problem binding to [\"\n               + localHost\n               + \":\"\n               + localPort\n               + \"] \"\n               + exception\n               + \";\"\n               + see(\"BindException\"));\n     } else if (exception instanceof ConnectException) {\n       // connection refused; include the host:port in the error\n       return wrapWithMessage(exception, \n           \"Call From \"\n               + localHost\n               + \" to \"\n               + destHost\n               + \":\"\n               + destPort\n               + \" failed on connection exception: \"\n               + exception\n               + \";\"\n               + see(\"ConnectionRefused\"));\n     } else if (exception instanceof UnknownHostException) {\n       return wrapWithMessage(exception,\n           \"Invalid host name: \"\n               + getHostDetailsAsString(destHost, destPort, localHost)\n               + exception\n               + \";\"\n               + see(\"UnknownHost\"));\n     } else if (exception instanceof SocketTimeoutException) {\n       return wrapWithMessage(exception,\n           \"Call From \"\n               + localHost + \" to \" + destHost + \":\" + destPort\n               + \" failed on socket timeout exception: \" + exception\n               + \";\"\n               + see(\"SocketTimeout\"));\n     } else if (exception instanceof NoRouteToHostException) {\n       return wrapWithMessage(exception,\n           \"No Route to Host from  \"\n               + localHost + \" to \" + destHost + \":\" + destPort\n               + \" failed on socket timeout exception: \" + exception\n               + \";\"\n               + see(\"NoRouteToHost\"));\n     } else if (exception instanceof EOFException) {\n       return wrapWithMessage(exception,\n           \"End of File Exception between \"\n               + getHostDetailsAsString(destHost,  destPort, localHost)\n               + \": \" + exception\n               + \";\"\n               + see(\"EOFException\"));\n+    } else if (exception instanceof SocketException) {\n+      // Many of the predecessor exceptions are subclasses of SocketException,\n+      // so must be handled before this\n+      return wrapWithMessage(exception,\n+          \"Call From \"\n+              + localHost + \" to \" + destHost + \":\" + destPort\n+              + \" failed on socket exception: \" + exception\n+              + \";\"\n+              + see(\"SocketException\"));\n     }\n     else {\n       return (IOException) new IOException(\"Failed on local exception: \"\n-                                               + exception\n-                                               + \"; Host Details : \"\n-                                               + getHostDetailsAsString(destHost, destPort, localHost))\n+             + exception\n+             + \"; Host Details : \"\n+             + getHostDetailsAsString(destHost, destPort, localHost))\n           .initCause(exception);\n \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException wrapException(final String destHost,\n                                          final int destPort,\n                                          final String localHost,\n                                          final int localPort,\n                                          final IOException exception) {\n    if (exception instanceof BindException) {\n      return wrapWithMessage(exception,\n          \"Problem binding to [\"\n              + localHost\n              + \":\"\n              + localPort\n              + \"] \"\n              + exception\n              + \";\"\n              + see(\"BindException\"));\n    } else if (exception instanceof ConnectException) {\n      // connection refused; include the host:port in the error\n      return wrapWithMessage(exception, \n          \"Call From \"\n              + localHost\n              + \" to \"\n              + destHost\n              + \":\"\n              + destPort\n              + \" failed on connection exception: \"\n              + exception\n              + \";\"\n              + see(\"ConnectionRefused\"));\n    } else if (exception instanceof UnknownHostException) {\n      return wrapWithMessage(exception,\n          \"Invalid host name: \"\n              + getHostDetailsAsString(destHost, destPort, localHost)\n              + exception\n              + \";\"\n              + see(\"UnknownHost\"));\n    } else if (exception instanceof SocketTimeoutException) {\n      return wrapWithMessage(exception,\n          \"Call From \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"SocketTimeout\"));\n    } else if (exception instanceof NoRouteToHostException) {\n      return wrapWithMessage(exception,\n          \"No Route to Host from  \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"NoRouteToHost\"));\n    } else if (exception instanceof EOFException) {\n      return wrapWithMessage(exception,\n          \"End of File Exception between \"\n              + getHostDetailsAsString(destHost,  destPort, localHost)\n              + \": \" + exception\n              + \";\"\n              + see(\"EOFException\"));\n    } else if (exception instanceof SocketException) {\n      // Many of the predecessor exceptions are subclasses of SocketException,\n      // so must be handled before this\n      return wrapWithMessage(exception,\n          \"Call From \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket exception: \" + exception\n              + \";\"\n              + see(\"SocketException\"));\n    }\n    else {\n      return (IOException) new IOException(\"Failed on local exception: \"\n             + exception\n             + \"; Host Details : \"\n             + getHostDetailsAsString(destHost, destPort, localHost))\n          .initCause(exception);\n\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java",
      "extendedDetails": {}
    },
    "86bf8c7193013834f67e03bd67a320cc080ef32c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9576. Changed NetUtils#wrapException to throw EOFException instead of wrapping it as IOException. Contributed by Steve Loughran\n",
      "commitDate": "10/11/14 5:25 PM",
      "commitName": "86bf8c7193013834f67e03bd67a320cc080ef32c",
      "commitAuthor": "Jian He",
      "commitDateOld": "27/09/14 1:06 PM",
      "commitNameOld": "7f300bcdc78d164a42d56c3f65a512cfe0ac40be",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 44.22,
      "commitsBetweenForRepo": 425,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,66 @@\n   public static IOException wrapException(final String destHost,\n                                           final int destPort,\n                                           final String localHost,\n                                           final int localPort,\n                                           final IOException exception) {\n     if (exception instanceof BindException) {\n       return wrapWithMessage(exception,\n           \"Problem binding to [\"\n               + localHost\n               + \":\"\n               + localPort\n               + \"] \"\n               + exception\n               + \";\"\n               + see(\"BindException\"));\n     } else if (exception instanceof ConnectException) {\n       // connection refused; include the host:port in the error\n       return wrapWithMessage(exception, \n           \"Call From \"\n               + localHost\n               + \" to \"\n               + destHost\n               + \":\"\n               + destPort\n               + \" failed on connection exception: \"\n               + exception\n               + \";\"\n               + see(\"ConnectionRefused\"));\n     } else if (exception instanceof UnknownHostException) {\n       return wrapWithMessage(exception,\n           \"Invalid host name: \"\n               + getHostDetailsAsString(destHost, destPort, localHost)\n               + exception\n               + \";\"\n               + see(\"UnknownHost\"));\n     } else if (exception instanceof SocketTimeoutException) {\n       return wrapWithMessage(exception,\n           \"Call From \"\n               + localHost + \" to \" + destHost + \":\" + destPort\n               + \" failed on socket timeout exception: \" + exception\n               + \";\"\n               + see(\"SocketTimeout\"));\n     } else if (exception instanceof NoRouteToHostException) {\n       return wrapWithMessage(exception,\n           \"No Route to Host from  \"\n               + localHost + \" to \" + destHost + \":\" + destPort\n               + \" failed on socket timeout exception: \" + exception\n               + \";\"\n               + see(\"NoRouteToHost\"));\n+    } else if (exception instanceof EOFException) {\n+      return wrapWithMessage(exception,\n+          \"End of File Exception between \"\n+              + getHostDetailsAsString(destHost,  destPort, localHost)\n+              + \": \" + exception\n+              + \";\"\n+              + see(\"EOFException\"));\n     }\n     else {\n       return (IOException) new IOException(\"Failed on local exception: \"\n                                                + exception\n                                                + \"; Host Details : \"\n                                                + getHostDetailsAsString(destHost, destPort, localHost))\n           .initCause(exception);\n \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException wrapException(final String destHost,\n                                          final int destPort,\n                                          final String localHost,\n                                          final int localPort,\n                                          final IOException exception) {\n    if (exception instanceof BindException) {\n      return wrapWithMessage(exception,\n          \"Problem binding to [\"\n              + localHost\n              + \":\"\n              + localPort\n              + \"] \"\n              + exception\n              + \";\"\n              + see(\"BindException\"));\n    } else if (exception instanceof ConnectException) {\n      // connection refused; include the host:port in the error\n      return wrapWithMessage(exception, \n          \"Call From \"\n              + localHost\n              + \" to \"\n              + destHost\n              + \":\"\n              + destPort\n              + \" failed on connection exception: \"\n              + exception\n              + \";\"\n              + see(\"ConnectionRefused\"));\n    } else if (exception instanceof UnknownHostException) {\n      return wrapWithMessage(exception,\n          \"Invalid host name: \"\n              + getHostDetailsAsString(destHost, destPort, localHost)\n              + exception\n              + \";\"\n              + see(\"UnknownHost\"));\n    } else if (exception instanceof SocketTimeoutException) {\n      return wrapWithMessage(exception,\n          \"Call From \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"SocketTimeout\"));\n    } else if (exception instanceof NoRouteToHostException) {\n      return wrapWithMessage(exception,\n          \"No Route to Host from  \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"NoRouteToHost\"));\n    } else if (exception instanceof EOFException) {\n      return wrapWithMessage(exception,\n          \"End of File Exception between \"\n              + getHostDetailsAsString(destHost,  destPort, localHost)\n              + \": \" + exception\n              + \";\"\n              + see(\"EOFException\"));\n    }\n    else {\n      return (IOException) new IOException(\"Failed on local exception: \"\n                                               + exception\n                                               + \"; Host Details : \"\n                                               + getHostDetailsAsString(destHost, destPort, localHost))\n          .initCause(exception);\n\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java",
      "extendedDetails": {}
    },
    "7f300bcdc78d164a42d56c3f65a512cfe0ac40be": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11143 NetUtils.wrapException loses inner stack trace on BindException\n",
      "commitDate": "27/09/14 1:06 PM",
      "commitName": "7f300bcdc78d164a42d56c3f65a512cfe0ac40be",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "10/05/13 2:45 PM",
      "commitNameOld": "945cb2ecaa110e7815ebdefd50dc8c8353f30cb3",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 504.93,
      "commitsBetweenForRepo": 3557,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   public static IOException wrapException(final String destHost,\n                                           final int destPort,\n                                           final String localHost,\n                                           final int localPort,\n                                           final IOException exception) {\n     if (exception instanceof BindException) {\n-      return new BindException(\n+      return wrapWithMessage(exception,\n           \"Problem binding to [\"\n               + localHost\n               + \":\"\n               + localPort\n               + \"] \"\n               + exception\n               + \";\"\n               + see(\"BindException\"));\n     } else if (exception instanceof ConnectException) {\n       // connection refused; include the host:port in the error\n       return wrapWithMessage(exception, \n           \"Call From \"\n               + localHost\n               + \" to \"\n               + destHost\n               + \":\"\n               + destPort\n               + \" failed on connection exception: \"\n               + exception\n               + \";\"\n               + see(\"ConnectionRefused\"));\n     } else if (exception instanceof UnknownHostException) {\n       return wrapWithMessage(exception,\n           \"Invalid host name: \"\n               + getHostDetailsAsString(destHost, destPort, localHost)\n               + exception\n               + \";\"\n               + see(\"UnknownHost\"));\n     } else if (exception instanceof SocketTimeoutException) {\n       return wrapWithMessage(exception,\n           \"Call From \"\n               + localHost + \" to \" + destHost + \":\" + destPort\n               + \" failed on socket timeout exception: \" + exception\n               + \";\"\n               + see(\"SocketTimeout\"));\n     } else if (exception instanceof NoRouteToHostException) {\n       return wrapWithMessage(exception,\n           \"No Route to Host from  \"\n               + localHost + \" to \" + destHost + \":\" + destPort\n               + \" failed on socket timeout exception: \" + exception\n               + \";\"\n               + see(\"NoRouteToHost\"));\n     }\n     else {\n       return (IOException) new IOException(\"Failed on local exception: \"\n                                                + exception\n                                                + \"; Host Details : \"\n                                                + getHostDetailsAsString(destHost, destPort, localHost))\n           .initCause(exception);\n \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException wrapException(final String destHost,\n                                          final int destPort,\n                                          final String localHost,\n                                          final int localPort,\n                                          final IOException exception) {\n    if (exception instanceof BindException) {\n      return wrapWithMessage(exception,\n          \"Problem binding to [\"\n              + localHost\n              + \":\"\n              + localPort\n              + \"] \"\n              + exception\n              + \";\"\n              + see(\"BindException\"));\n    } else if (exception instanceof ConnectException) {\n      // connection refused; include the host:port in the error\n      return wrapWithMessage(exception, \n          \"Call From \"\n              + localHost\n              + \" to \"\n              + destHost\n              + \":\"\n              + destPort\n              + \" failed on connection exception: \"\n              + exception\n              + \";\"\n              + see(\"ConnectionRefused\"));\n    } else if (exception instanceof UnknownHostException) {\n      return wrapWithMessage(exception,\n          \"Invalid host name: \"\n              + getHostDetailsAsString(destHost, destPort, localHost)\n              + exception\n              + \";\"\n              + see(\"UnknownHost\"));\n    } else if (exception instanceof SocketTimeoutException) {\n      return wrapWithMessage(exception,\n          \"Call From \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"SocketTimeout\"));\n    } else if (exception instanceof NoRouteToHostException) {\n      return wrapWithMessage(exception,\n          \"No Route to Host from  \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"NoRouteToHost\"));\n    }\n    else {\n      return (IOException) new IOException(\"Failed on local exception: \"\n                                               + exception\n                                               + \"; Host Details : \"\n                                               + getHostDetailsAsString(destHost, destPort, localHost))\n          .initCause(exception);\n\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java",
      "extendedDetails": {}
    },
    "5a0b74663951475f668c7c68b9902c2bb54dc861": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4404. Create file failure when the machine of first attempted NameNode is down. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1442461 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/02/13 7:18 PM",
      "commitName": "5a0b74663951475f668c7c68b9902c2bb54dc861",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "14/01/13 3:48 PM",
      "commitNameOld": "6d807fcab144d8097cf559e5ac234db995819ba1",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 21.15,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,59 @@\n   public static IOException wrapException(final String destHost,\n                                           final int destPort,\n                                           final String localHost,\n                                           final int localPort,\n                                           final IOException exception) {\n     if (exception instanceof BindException) {\n       return new BindException(\n           \"Problem binding to [\"\n               + localHost\n               + \":\"\n               + localPort\n               + \"] \"\n               + exception\n               + \";\"\n               + see(\"BindException\"));\n     } else if (exception instanceof ConnectException) {\n       // connection refused; include the host:port in the error\n-      return (ConnectException) new ConnectException(\n+      return wrapWithMessage(exception, \n           \"Call From \"\n               + localHost\n               + \" to \"\n               + destHost\n               + \":\"\n               + destPort\n               + \" failed on connection exception: \"\n               + exception\n               + \";\"\n-              + see(\"ConnectionRefused\"))\n-          .initCause(exception);\n+              + see(\"ConnectionRefused\"));\n     } else if (exception instanceof UnknownHostException) {\n-      return (UnknownHostException) new UnknownHostException(\n+      return wrapWithMessage(exception,\n           \"Invalid host name: \"\n               + getHostDetailsAsString(destHost, destPort, localHost)\n               + exception\n               + \";\"\n-              + see(\"UnknownHost\"))\n-          .initCause(exception);\n+              + see(\"UnknownHost\"));\n     } else if (exception instanceof SocketTimeoutException) {\n-      return (SocketTimeoutException) new SocketTimeoutException(\n+      return wrapWithMessage(exception,\n           \"Call From \"\n               + localHost + \" to \" + destHost + \":\" + destPort\n               + \" failed on socket timeout exception: \" + exception\n               + \";\"\n-              + see(\"SocketTimeout\"))\n-          .initCause(exception);\n+              + see(\"SocketTimeout\"));\n     } else if (exception instanceof NoRouteToHostException) {\n-      return (NoRouteToHostException) new NoRouteToHostException(\n+      return wrapWithMessage(exception,\n           \"No Route to Host from  \"\n               + localHost + \" to \" + destHost + \":\" + destPort\n               + \" failed on socket timeout exception: \" + exception\n               + \";\"\n-              + see(\"NoRouteToHost\"))\n-          .initCause(exception);\n+              + see(\"NoRouteToHost\"));\n     }\n     else {\n       return (IOException) new IOException(\"Failed on local exception: \"\n                                                + exception\n                                                + \"; Host Details : \"\n                                                + getHostDetailsAsString(destHost, destPort, localHost))\n           .initCause(exception);\n \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOException wrapException(final String destHost,\n                                          final int destPort,\n                                          final String localHost,\n                                          final int localPort,\n                                          final IOException exception) {\n    if (exception instanceof BindException) {\n      return new BindException(\n          \"Problem binding to [\"\n              + localHost\n              + \":\"\n              + localPort\n              + \"] \"\n              + exception\n              + \";\"\n              + see(\"BindException\"));\n    } else if (exception instanceof ConnectException) {\n      // connection refused; include the host:port in the error\n      return wrapWithMessage(exception, \n          \"Call From \"\n              + localHost\n              + \" to \"\n              + destHost\n              + \":\"\n              + destPort\n              + \" failed on connection exception: \"\n              + exception\n              + \";\"\n              + see(\"ConnectionRefused\"));\n    } else if (exception instanceof UnknownHostException) {\n      return wrapWithMessage(exception,\n          \"Invalid host name: \"\n              + getHostDetailsAsString(destHost, destPort, localHost)\n              + exception\n              + \";\"\n              + see(\"UnknownHost\"));\n    } else if (exception instanceof SocketTimeoutException) {\n      return wrapWithMessage(exception,\n          \"Call From \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"SocketTimeout\"));\n    } else if (exception instanceof NoRouteToHostException) {\n      return wrapWithMessage(exception,\n          \"No Route to Host from  \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"NoRouteToHost\"));\n    }\n    else {\n      return (IOException) new IOException(\"Failed on local exception: \"\n                                               + exception\n                                               + \"; Host Details : \"\n                                               + getHostDetailsAsString(destHost, destPort, localHost))\n          .initCause(exception);\n\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java",
      "extendedDetails": {}
    },
    "ebdc7f800a6c161696adb161b623a80ebaa743d7": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparametermetachange,Yparameterchange)",
      "commitMessage": "HADOOP-7469 Add a standard handler for socket connection problems\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1177645 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/09/11 6:22 AM",
      "commitName": "ebdc7f800a6c161696adb161b623a80ebaa743d7",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-7469 Add a standard handler for socket connection problems\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1177645 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/09/11 6:22 AM",
          "commitName": "ebdc7f800a6c161696adb161b623a80ebaa743d7",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "30/09/11 5:46 AM",
          "commitNameOld": "063e33a862f99ce93b8399924c35d39ccd880f01",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,63 @@\n-  private IOException wrapException(InetSocketAddress addr,\n-                                         IOException exception) {\n-    if (exception instanceof ConnectException) {\n-      //connection refused; include the host:port in the error\n-      return (ConnectException)new ConnectException(\n-           \"Call to \" + addr + \" failed on connection exception: \" + exception)\n-                    .initCause(exception);\n+  public static IOException wrapException(final String destHost,\n+                                          final int destPort,\n+                                          final String localHost,\n+                                          final int localPort,\n+                                          final IOException exception) {\n+    if (exception instanceof BindException) {\n+      return new BindException(\n+          \"Problem binding to [\"\n+              + localHost\n+              + \":\"\n+              + localPort\n+              + \"] \"\n+              + exception\n+              + \";\"\n+              + see(\"BindException\"));\n+    } else if (exception instanceof ConnectException) {\n+      // connection refused; include the host:port in the error\n+      return (ConnectException) new ConnectException(\n+          \"Call From \"\n+              + localHost\n+              + \" to \"\n+              + destHost\n+              + \":\"\n+              + destPort\n+              + \" failed on connection exception: \"\n+              + exception\n+              + \";\"\n+              + see(\"ConnectionRefused\"))\n+          .initCause(exception);\n+    } else if (exception instanceof UnknownHostException) {\n+      return (UnknownHostException) new UnknownHostException(\n+          \"Invalid host name: \"\n+              + getHostDetailsAsString(destHost, destPort, localHost)\n+              + exception\n+              + \";\"\n+              + see(\"UnknownHost\"))\n+          .initCause(exception);\n     } else if (exception instanceof SocketTimeoutException) {\n-      return (SocketTimeoutException)new SocketTimeoutException(\n-           \"Call to \" + addr + \" failed on socket timeout exception: \"\n-                      + exception).initCause(exception);\n-    } else {\n-      return (IOException)new IOException(\n-           \"Call to \" + addr + \" failed on local exception: \" + exception)\n-                                 .initCause(exception);\n+      return (SocketTimeoutException) new SocketTimeoutException(\n+          \"Call From \"\n+              + localHost + \" to \" + destHost + \":\" + destPort\n+              + \" failed on socket timeout exception: \" + exception\n+              + \";\"\n+              + see(\"SocketTimeout\"))\n+          .initCause(exception);\n+    } else if (exception instanceof NoRouteToHostException) {\n+      return (NoRouteToHostException) new NoRouteToHostException(\n+          \"No Route to Host from  \"\n+              + localHost + \" to \" + destHost + \":\" + destPort\n+              + \" failed on socket timeout exception: \" + exception\n+              + \";\"\n+              + see(\"NoRouteToHost\"))\n+          .initCause(exception);\n+    }\n+    else {\n+      return (IOException) new IOException(\"Failed on local exception: \"\n+                                               + exception\n+                                               + \"; Host Details : \"\n+                                               + getHostDetailsAsString(destHost, destPort, localHost))\n+          .initCause(exception);\n \n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static IOException wrapException(final String destHost,\n                                          final int destPort,\n                                          final String localHost,\n                                          final int localPort,\n                                          final IOException exception) {\n    if (exception instanceof BindException) {\n      return new BindException(\n          \"Problem binding to [\"\n              + localHost\n              + \":\"\n              + localPort\n              + \"] \"\n              + exception\n              + \";\"\n              + see(\"BindException\"));\n    } else if (exception instanceof ConnectException) {\n      // connection refused; include the host:port in the error\n      return (ConnectException) new ConnectException(\n          \"Call From \"\n              + localHost\n              + \" to \"\n              + destHost\n              + \":\"\n              + destPort\n              + \" failed on connection exception: \"\n              + exception\n              + \";\"\n              + see(\"ConnectionRefused\"))\n          .initCause(exception);\n    } else if (exception instanceof UnknownHostException) {\n      return (UnknownHostException) new UnknownHostException(\n          \"Invalid host name: \"\n              + getHostDetailsAsString(destHost, destPort, localHost)\n              + exception\n              + \";\"\n              + see(\"UnknownHost\"))\n          .initCause(exception);\n    } else if (exception instanceof SocketTimeoutException) {\n      return (SocketTimeoutException) new SocketTimeoutException(\n          \"Call From \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"SocketTimeout\"))\n          .initCause(exception);\n    } else if (exception instanceof NoRouteToHostException) {\n      return (NoRouteToHostException) new NoRouteToHostException(\n          \"No Route to Host from  \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"NoRouteToHost\"))\n          .initCause(exception);\n    }\n    else {\n      return (IOException) new IOException(\"Failed on local exception: \"\n                                               + exception\n                                               + \"; Host Details : \"\n                                               + getHostDetailsAsString(destHost, destPort, localHost))\n          .initCause(exception);\n\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java",
            "oldMethodName": "wrapException",
            "newMethodName": "wrapException"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-7469 Add a standard handler for socket connection problems\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1177645 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/09/11 6:22 AM",
          "commitName": "ebdc7f800a6c161696adb161b623a80ebaa743d7",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "30/09/11 5:46 AM",
          "commitNameOld": "063e33a862f99ce93b8399924c35d39ccd880f01",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,63 @@\n-  private IOException wrapException(InetSocketAddress addr,\n-                                         IOException exception) {\n-    if (exception instanceof ConnectException) {\n-      //connection refused; include the host:port in the error\n-      return (ConnectException)new ConnectException(\n-           \"Call to \" + addr + \" failed on connection exception: \" + exception)\n-                    .initCause(exception);\n+  public static IOException wrapException(final String destHost,\n+                                          final int destPort,\n+                                          final String localHost,\n+                                          final int localPort,\n+                                          final IOException exception) {\n+    if (exception instanceof BindException) {\n+      return new BindException(\n+          \"Problem binding to [\"\n+              + localHost\n+              + \":\"\n+              + localPort\n+              + \"] \"\n+              + exception\n+              + \";\"\n+              + see(\"BindException\"));\n+    } else if (exception instanceof ConnectException) {\n+      // connection refused; include the host:port in the error\n+      return (ConnectException) new ConnectException(\n+          \"Call From \"\n+              + localHost\n+              + \" to \"\n+              + destHost\n+              + \":\"\n+              + destPort\n+              + \" failed on connection exception: \"\n+              + exception\n+              + \";\"\n+              + see(\"ConnectionRefused\"))\n+          .initCause(exception);\n+    } else if (exception instanceof UnknownHostException) {\n+      return (UnknownHostException) new UnknownHostException(\n+          \"Invalid host name: \"\n+              + getHostDetailsAsString(destHost, destPort, localHost)\n+              + exception\n+              + \";\"\n+              + see(\"UnknownHost\"))\n+          .initCause(exception);\n     } else if (exception instanceof SocketTimeoutException) {\n-      return (SocketTimeoutException)new SocketTimeoutException(\n-           \"Call to \" + addr + \" failed on socket timeout exception: \"\n-                      + exception).initCause(exception);\n-    } else {\n-      return (IOException)new IOException(\n-           \"Call to \" + addr + \" failed on local exception: \" + exception)\n-                                 .initCause(exception);\n+      return (SocketTimeoutException) new SocketTimeoutException(\n+          \"Call From \"\n+              + localHost + \" to \" + destHost + \":\" + destPort\n+              + \" failed on socket timeout exception: \" + exception\n+              + \";\"\n+              + see(\"SocketTimeout\"))\n+          .initCause(exception);\n+    } else if (exception instanceof NoRouteToHostException) {\n+      return (NoRouteToHostException) new NoRouteToHostException(\n+          \"No Route to Host from  \"\n+              + localHost + \" to \" + destHost + \":\" + destPort\n+              + \" failed on socket timeout exception: \" + exception\n+              + \";\"\n+              + see(\"NoRouteToHost\"))\n+          .initCause(exception);\n+    }\n+    else {\n+      return (IOException) new IOException(\"Failed on local exception: \"\n+                                               + exception\n+                                               + \"; Host Details : \"\n+                                               + getHostDetailsAsString(destHost, destPort, localHost))\n+          .initCause(exception);\n \n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static IOException wrapException(final String destHost,\n                                          final int destPort,\n                                          final String localHost,\n                                          final int localPort,\n                                          final IOException exception) {\n    if (exception instanceof BindException) {\n      return new BindException(\n          \"Problem binding to [\"\n              + localHost\n              + \":\"\n              + localPort\n              + \"] \"\n              + exception\n              + \";\"\n              + see(\"BindException\"));\n    } else if (exception instanceof ConnectException) {\n      // connection refused; include the host:port in the error\n      return (ConnectException) new ConnectException(\n          \"Call From \"\n              + localHost\n              + \" to \"\n              + destHost\n              + \":\"\n              + destPort\n              + \" failed on connection exception: \"\n              + exception\n              + \";\"\n              + see(\"ConnectionRefused\"))\n          .initCause(exception);\n    } else if (exception instanceof UnknownHostException) {\n      return (UnknownHostException) new UnknownHostException(\n          \"Invalid host name: \"\n              + getHostDetailsAsString(destHost, destPort, localHost)\n              + exception\n              + \";\"\n              + see(\"UnknownHost\"))\n          .initCause(exception);\n    } else if (exception instanceof SocketTimeoutException) {\n      return (SocketTimeoutException) new SocketTimeoutException(\n          \"Call From \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"SocketTimeout\"))\n          .initCause(exception);\n    } else if (exception instanceof NoRouteToHostException) {\n      return (NoRouteToHostException) new NoRouteToHostException(\n          \"No Route to Host from  \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"NoRouteToHost\"))\n          .initCause(exception);\n    }\n    else {\n      return (IOException) new IOException(\"Failed on local exception: \"\n                                               + exception\n                                               + \"; Host Details : \"\n                                               + getHostDetailsAsString(destHost, destPort, localHost))\n          .initCause(exception);\n\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-7469 Add a standard handler for socket connection problems\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1177645 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/09/11 6:22 AM",
          "commitName": "ebdc7f800a6c161696adb161b623a80ebaa743d7",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "30/09/11 5:46 AM",
          "commitNameOld": "063e33a862f99ce93b8399924c35d39ccd880f01",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,63 @@\n-  private IOException wrapException(InetSocketAddress addr,\n-                                         IOException exception) {\n-    if (exception instanceof ConnectException) {\n-      //connection refused; include the host:port in the error\n-      return (ConnectException)new ConnectException(\n-           \"Call to \" + addr + \" failed on connection exception: \" + exception)\n-                    .initCause(exception);\n+  public static IOException wrapException(final String destHost,\n+                                          final int destPort,\n+                                          final String localHost,\n+                                          final int localPort,\n+                                          final IOException exception) {\n+    if (exception instanceof BindException) {\n+      return new BindException(\n+          \"Problem binding to [\"\n+              + localHost\n+              + \":\"\n+              + localPort\n+              + \"] \"\n+              + exception\n+              + \";\"\n+              + see(\"BindException\"));\n+    } else if (exception instanceof ConnectException) {\n+      // connection refused; include the host:port in the error\n+      return (ConnectException) new ConnectException(\n+          \"Call From \"\n+              + localHost\n+              + \" to \"\n+              + destHost\n+              + \":\"\n+              + destPort\n+              + \" failed on connection exception: \"\n+              + exception\n+              + \";\"\n+              + see(\"ConnectionRefused\"))\n+          .initCause(exception);\n+    } else if (exception instanceof UnknownHostException) {\n+      return (UnknownHostException) new UnknownHostException(\n+          \"Invalid host name: \"\n+              + getHostDetailsAsString(destHost, destPort, localHost)\n+              + exception\n+              + \";\"\n+              + see(\"UnknownHost\"))\n+          .initCause(exception);\n     } else if (exception instanceof SocketTimeoutException) {\n-      return (SocketTimeoutException)new SocketTimeoutException(\n-           \"Call to \" + addr + \" failed on socket timeout exception: \"\n-                      + exception).initCause(exception);\n-    } else {\n-      return (IOException)new IOException(\n-           \"Call to \" + addr + \" failed on local exception: \" + exception)\n-                                 .initCause(exception);\n+      return (SocketTimeoutException) new SocketTimeoutException(\n+          \"Call From \"\n+              + localHost + \" to \" + destHost + \":\" + destPort\n+              + \" failed on socket timeout exception: \" + exception\n+              + \";\"\n+              + see(\"SocketTimeout\"))\n+          .initCause(exception);\n+    } else if (exception instanceof NoRouteToHostException) {\n+      return (NoRouteToHostException) new NoRouteToHostException(\n+          \"No Route to Host from  \"\n+              + localHost + \" to \" + destHost + \":\" + destPort\n+              + \" failed on socket timeout exception: \" + exception\n+              + \";\"\n+              + see(\"NoRouteToHost\"))\n+          .initCause(exception);\n+    }\n+    else {\n+      return (IOException) new IOException(\"Failed on local exception: \"\n+                                               + exception\n+                                               + \"; Host Details : \"\n+                                               + getHostDetailsAsString(destHost, destPort, localHost))\n+          .initCause(exception);\n \n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static IOException wrapException(final String destHost,\n                                          final int destPort,\n                                          final String localHost,\n                                          final int localPort,\n                                          final IOException exception) {\n    if (exception instanceof BindException) {\n      return new BindException(\n          \"Problem binding to [\"\n              + localHost\n              + \":\"\n              + localPort\n              + \"] \"\n              + exception\n              + \";\"\n              + see(\"BindException\"));\n    } else if (exception instanceof ConnectException) {\n      // connection refused; include the host:port in the error\n      return (ConnectException) new ConnectException(\n          \"Call From \"\n              + localHost\n              + \" to \"\n              + destHost\n              + \":\"\n              + destPort\n              + \" failed on connection exception: \"\n              + exception\n              + \";\"\n              + see(\"ConnectionRefused\"))\n          .initCause(exception);\n    } else if (exception instanceof UnknownHostException) {\n      return (UnknownHostException) new UnknownHostException(\n          \"Invalid host name: \"\n              + getHostDetailsAsString(destHost, destPort, localHost)\n              + exception\n              + \";\"\n              + see(\"UnknownHost\"))\n          .initCause(exception);\n    } else if (exception instanceof SocketTimeoutException) {\n      return (SocketTimeoutException) new SocketTimeoutException(\n          \"Call From \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"SocketTimeout\"))\n          .initCause(exception);\n    } else if (exception instanceof NoRouteToHostException) {\n      return (NoRouteToHostException) new NoRouteToHostException(\n          \"No Route to Host from  \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"NoRouteToHost\"))\n          .initCause(exception);\n    }\n    else {\n      return (IOException) new IOException(\"Failed on local exception: \"\n                                               + exception\n                                               + \"; Host Details : \"\n                                               + getHostDetailsAsString(destHost, destPort, localHost))\n          .initCause(exception);\n\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-7469 Add a standard handler for socket connection problems\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1177645 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/09/11 6:22 AM",
          "commitName": "ebdc7f800a6c161696adb161b623a80ebaa743d7",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "30/09/11 5:46 AM",
          "commitNameOld": "063e33a862f99ce93b8399924c35d39ccd880f01",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,63 @@\n-  private IOException wrapException(InetSocketAddress addr,\n-                                         IOException exception) {\n-    if (exception instanceof ConnectException) {\n-      //connection refused; include the host:port in the error\n-      return (ConnectException)new ConnectException(\n-           \"Call to \" + addr + \" failed on connection exception: \" + exception)\n-                    .initCause(exception);\n+  public static IOException wrapException(final String destHost,\n+                                          final int destPort,\n+                                          final String localHost,\n+                                          final int localPort,\n+                                          final IOException exception) {\n+    if (exception instanceof BindException) {\n+      return new BindException(\n+          \"Problem binding to [\"\n+              + localHost\n+              + \":\"\n+              + localPort\n+              + \"] \"\n+              + exception\n+              + \";\"\n+              + see(\"BindException\"));\n+    } else if (exception instanceof ConnectException) {\n+      // connection refused; include the host:port in the error\n+      return (ConnectException) new ConnectException(\n+          \"Call From \"\n+              + localHost\n+              + \" to \"\n+              + destHost\n+              + \":\"\n+              + destPort\n+              + \" failed on connection exception: \"\n+              + exception\n+              + \";\"\n+              + see(\"ConnectionRefused\"))\n+          .initCause(exception);\n+    } else if (exception instanceof UnknownHostException) {\n+      return (UnknownHostException) new UnknownHostException(\n+          \"Invalid host name: \"\n+              + getHostDetailsAsString(destHost, destPort, localHost)\n+              + exception\n+              + \";\"\n+              + see(\"UnknownHost\"))\n+          .initCause(exception);\n     } else if (exception instanceof SocketTimeoutException) {\n-      return (SocketTimeoutException)new SocketTimeoutException(\n-           \"Call to \" + addr + \" failed on socket timeout exception: \"\n-                      + exception).initCause(exception);\n-    } else {\n-      return (IOException)new IOException(\n-           \"Call to \" + addr + \" failed on local exception: \" + exception)\n-                                 .initCause(exception);\n+      return (SocketTimeoutException) new SocketTimeoutException(\n+          \"Call From \"\n+              + localHost + \" to \" + destHost + \":\" + destPort\n+              + \" failed on socket timeout exception: \" + exception\n+              + \";\"\n+              + see(\"SocketTimeout\"))\n+          .initCause(exception);\n+    } else if (exception instanceof NoRouteToHostException) {\n+      return (NoRouteToHostException) new NoRouteToHostException(\n+          \"No Route to Host from  \"\n+              + localHost + \" to \" + destHost + \":\" + destPort\n+              + \" failed on socket timeout exception: \" + exception\n+              + \";\"\n+              + see(\"NoRouteToHost\"))\n+          .initCause(exception);\n+    }\n+    else {\n+      return (IOException) new IOException(\"Failed on local exception: \"\n+                                               + exception\n+                                               + \"; Host Details : \"\n+                                               + getHostDetailsAsString(destHost, destPort, localHost))\n+          .initCause(exception);\n \n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static IOException wrapException(final String destHost,\n                                          final int destPort,\n                                          final String localHost,\n                                          final int localPort,\n                                          final IOException exception) {\n    if (exception instanceof BindException) {\n      return new BindException(\n          \"Problem binding to [\"\n              + localHost\n              + \":\"\n              + localPort\n              + \"] \"\n              + exception\n              + \";\"\n              + see(\"BindException\"));\n    } else if (exception instanceof ConnectException) {\n      // connection refused; include the host:port in the error\n      return (ConnectException) new ConnectException(\n          \"Call From \"\n              + localHost\n              + \" to \"\n              + destHost\n              + \":\"\n              + destPort\n              + \" failed on connection exception: \"\n              + exception\n              + \";\"\n              + see(\"ConnectionRefused\"))\n          .initCause(exception);\n    } else if (exception instanceof UnknownHostException) {\n      return (UnknownHostException) new UnknownHostException(\n          \"Invalid host name: \"\n              + getHostDetailsAsString(destHost, destPort, localHost)\n              + exception\n              + \";\"\n              + see(\"UnknownHost\"))\n          .initCause(exception);\n    } else if (exception instanceof SocketTimeoutException) {\n      return (SocketTimeoutException) new SocketTimeoutException(\n          \"Call From \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"SocketTimeout\"))\n          .initCause(exception);\n    } else if (exception instanceof NoRouteToHostException) {\n      return (NoRouteToHostException) new NoRouteToHostException(\n          \"No Route to Host from  \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"NoRouteToHost\"))\n          .initCause(exception);\n    }\n    else {\n      return (IOException) new IOException(\"Failed on local exception: \"\n                                               + exception\n                                               + \"; Host Details : \"\n                                               + getHostDetailsAsString(destHost, destPort, localHost))\n          .initCause(exception);\n\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java",
          "extendedDetails": {
            "oldValue": "[addr-InetSocketAddress, exception-IOException]",
            "newValue": "[destHost-String(modifiers-final), destPort-int(modifiers-final), localHost-String(modifiers-final), localPort-int(modifiers-final), exception-IOException(modifiers-final)]"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-7469 Add a standard handler for socket connection problems\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1177645 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/09/11 6:22 AM",
          "commitName": "ebdc7f800a6c161696adb161b623a80ebaa743d7",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "30/09/11 5:46 AM",
          "commitNameOld": "063e33a862f99ce93b8399924c35d39ccd880f01",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,63 @@\n-  private IOException wrapException(InetSocketAddress addr,\n-                                         IOException exception) {\n-    if (exception instanceof ConnectException) {\n-      //connection refused; include the host:port in the error\n-      return (ConnectException)new ConnectException(\n-           \"Call to \" + addr + \" failed on connection exception: \" + exception)\n-                    .initCause(exception);\n+  public static IOException wrapException(final String destHost,\n+                                          final int destPort,\n+                                          final String localHost,\n+                                          final int localPort,\n+                                          final IOException exception) {\n+    if (exception instanceof BindException) {\n+      return new BindException(\n+          \"Problem binding to [\"\n+              + localHost\n+              + \":\"\n+              + localPort\n+              + \"] \"\n+              + exception\n+              + \";\"\n+              + see(\"BindException\"));\n+    } else if (exception instanceof ConnectException) {\n+      // connection refused; include the host:port in the error\n+      return (ConnectException) new ConnectException(\n+          \"Call From \"\n+              + localHost\n+              + \" to \"\n+              + destHost\n+              + \":\"\n+              + destPort\n+              + \" failed on connection exception: \"\n+              + exception\n+              + \";\"\n+              + see(\"ConnectionRefused\"))\n+          .initCause(exception);\n+    } else if (exception instanceof UnknownHostException) {\n+      return (UnknownHostException) new UnknownHostException(\n+          \"Invalid host name: \"\n+              + getHostDetailsAsString(destHost, destPort, localHost)\n+              + exception\n+              + \";\"\n+              + see(\"UnknownHost\"))\n+          .initCause(exception);\n     } else if (exception instanceof SocketTimeoutException) {\n-      return (SocketTimeoutException)new SocketTimeoutException(\n-           \"Call to \" + addr + \" failed on socket timeout exception: \"\n-                      + exception).initCause(exception);\n-    } else {\n-      return (IOException)new IOException(\n-           \"Call to \" + addr + \" failed on local exception: \" + exception)\n-                                 .initCause(exception);\n+      return (SocketTimeoutException) new SocketTimeoutException(\n+          \"Call From \"\n+              + localHost + \" to \" + destHost + \":\" + destPort\n+              + \" failed on socket timeout exception: \" + exception\n+              + \";\"\n+              + see(\"SocketTimeout\"))\n+          .initCause(exception);\n+    } else if (exception instanceof NoRouteToHostException) {\n+      return (NoRouteToHostException) new NoRouteToHostException(\n+          \"No Route to Host from  \"\n+              + localHost + \" to \" + destHost + \":\" + destPort\n+              + \" failed on socket timeout exception: \" + exception\n+              + \";\"\n+              + see(\"NoRouteToHost\"))\n+          .initCause(exception);\n+    }\n+    else {\n+      return (IOException) new IOException(\"Failed on local exception: \"\n+                                               + exception\n+                                               + \"; Host Details : \"\n+                                               + getHostDetailsAsString(destHost, destPort, localHost))\n+          .initCause(exception);\n \n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static IOException wrapException(final String destHost,\n                                          final int destPort,\n                                          final String localHost,\n                                          final int localPort,\n                                          final IOException exception) {\n    if (exception instanceof BindException) {\n      return new BindException(\n          \"Problem binding to [\"\n              + localHost\n              + \":\"\n              + localPort\n              + \"] \"\n              + exception\n              + \";\"\n              + see(\"BindException\"));\n    } else if (exception instanceof ConnectException) {\n      // connection refused; include the host:port in the error\n      return (ConnectException) new ConnectException(\n          \"Call From \"\n              + localHost\n              + \" to \"\n              + destHost\n              + \":\"\n              + destPort\n              + \" failed on connection exception: \"\n              + exception\n              + \";\"\n              + see(\"ConnectionRefused\"))\n          .initCause(exception);\n    } else if (exception instanceof UnknownHostException) {\n      return (UnknownHostException) new UnknownHostException(\n          \"Invalid host name: \"\n              + getHostDetailsAsString(destHost, destPort, localHost)\n              + exception\n              + \";\"\n              + see(\"UnknownHost\"))\n          .initCause(exception);\n    } else if (exception instanceof SocketTimeoutException) {\n      return (SocketTimeoutException) new SocketTimeoutException(\n          \"Call From \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"SocketTimeout\"))\n          .initCause(exception);\n    } else if (exception instanceof NoRouteToHostException) {\n      return (NoRouteToHostException) new NoRouteToHostException(\n          \"No Route to Host from  \"\n              + localHost + \" to \" + destHost + \":\" + destPort\n              + \" failed on socket timeout exception: \" + exception\n              + \";\"\n              + see(\"NoRouteToHost\"))\n          .initCause(exception);\n    }\n    else {\n      return (IOException) new IOException(\"Failed on local exception: \"\n                                               + exception\n                                               + \"; Host Details : \"\n                                               + getHostDetailsAsString(destHost, destPort, localHost))\n          .initCause(exception);\n\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java",
          "extendedDetails": {
            "oldValue": "[addr-InetSocketAddress, exception-IOException]",
            "newValue": "[destHost-String(modifiers-final), destPort-int(modifiers-final), localHost-String(modifiers-final), localPort-int(modifiers-final), exception-IOException(modifiers-final)]"
          }
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private IOException wrapException(InetSocketAddress addr,\n                                         IOException exception) {\n    if (exception instanceof ConnectException) {\n      //connection refused; include the host:port in the error\n      return (ConnectException)new ConnectException(\n           \"Call to \" + addr + \" failed on connection exception: \" + exception)\n                    .initCause(exception);\n    } else if (exception instanceof SocketTimeoutException) {\n      return (SocketTimeoutException)new SocketTimeoutException(\n           \"Call to \" + addr + \" failed on socket timeout exception: \"\n                      + exception).initCause(exception);\n    } else {\n      return (IOException)new IOException(\n           \"Call to \" + addr + \" failed on local exception: \" + exception)\n                                 .initCause(exception);\n\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private IOException wrapException(InetSocketAddress addr,\n                                         IOException exception) {\n    if (exception instanceof ConnectException) {\n      //connection refused; include the host:port in the error\n      return (ConnectException)new ConnectException(\n           \"Call to \" + addr + \" failed on connection exception: \" + exception)\n                    .initCause(exception);\n    } else if (exception instanceof SocketTimeoutException) {\n      return (SocketTimeoutException)new SocketTimeoutException(\n           \"Call to \" + addr + \" failed on socket timeout exception: \"\n                      + exception).initCause(exception);\n    } else {\n      return (IOException)new IOException(\n           \"Call to \" + addr + \" failed on local exception: \" + exception)\n                                 .initCause(exception);\n\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private IOException wrapException(InetSocketAddress addr,\n                                         IOException exception) {\n    if (exception instanceof ConnectException) {\n      //connection refused; include the host:port in the error\n      return (ConnectException)new ConnectException(\n           \"Call to \" + addr + \" failed on connection exception: \" + exception)\n                    .initCause(exception);\n    } else if (exception instanceof SocketTimeoutException) {\n      return (SocketTimeoutException)new SocketTimeoutException(\n           \"Call to \" + addr + \" failed on socket timeout exception: \"\n                      + exception).initCause(exception);\n    } else {\n      return (IOException)new IOException(\n           \"Call to \" + addr + \" failed on local exception: \" + exception)\n                                 .initCause(exception);\n\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/ipc/Client.java",
        "newPath": "common/src/java/org/apache/hadoop/ipc/Client.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,18 @@\n+  private IOException wrapException(InetSocketAddress addr,\n+                                         IOException exception) {\n+    if (exception instanceof ConnectException) {\n+      //connection refused; include the host:port in the error\n+      return (ConnectException)new ConnectException(\n+           \"Call to \" + addr + \" failed on connection exception: \" + exception)\n+                    .initCause(exception);\n+    } else if (exception instanceof SocketTimeoutException) {\n+      return (SocketTimeoutException)new SocketTimeoutException(\n+           \"Call to \" + addr + \" failed on socket timeout exception: \"\n+                      + exception).initCause(exception);\n+    } else {\n+      return (IOException)new IOException(\n+           \"Call to \" + addr + \" failed on local exception: \" + exception)\n+                                 .initCause(exception);\n+\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private IOException wrapException(InetSocketAddress addr,\n                                         IOException exception) {\n    if (exception instanceof ConnectException) {\n      //connection refused; include the host:port in the error\n      return (ConnectException)new ConnectException(\n           \"Call to \" + addr + \" failed on connection exception: \" + exception)\n                    .initCause(exception);\n    } else if (exception instanceof SocketTimeoutException) {\n      return (SocketTimeoutException)new SocketTimeoutException(\n           \"Call to \" + addr + \" failed on socket timeout exception: \"\n                      + exception).initCause(exception);\n    } else {\n      return (IOException)new IOException(\n           \"Call to \" + addr + \" failed on local exception: \" + exception)\n                                 .initCause(exception);\n\n    }\n  }",
      "path": "src/java/org/apache/hadoop/ipc/Client.java"
    }
  }
}