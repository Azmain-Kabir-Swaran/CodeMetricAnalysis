{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Separator.java",
  "functionName": "splitRanges",
  "functionId": "splitRanges___source-byte[]__separator-byte[]__sizes-int[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-common/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/Separator.java",
  "functionStartLine": 445,
  "functionEndLine": 506,
  "numCommitsSeen": 22,
  "timeTaken": 4464,
  "changeHistory": [
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
    "b51d0fef56a59b15489f5b932025718b4e9613d2",
    "92d90c3a243134177f192d1d473dd606c79a91fc",
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875"
  ],
  "changeHistoryShort": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Yfilerename",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "b51d0fef56a59b15489f5b932025718b4e9613d2": "Yfilerename",
    "92d90c3a243134177f192d1d473dd606c79a91fc": "Ymovefromfile",
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "17/02/18 3:24 AM",
      "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n      int[] sizes) {\n    List\u003cRange\u003e segments \u003d new ArrayList\u003cRange\u003e();\n    if (source \u003d\u003d null || separator \u003d\u003d null) {\n      return segments;\n    }\n    // VARIABLE_SIZE here indicates that there is no limit to number of segments\n    // to return.\n    int limit \u003d VARIABLE_SIZE;\n    if (sizes !\u003d null \u0026\u0026 sizes.length \u003e 0) {\n      limit \u003d sizes.length;\n    }\n    int start \u003d 0;\n    int currentSegment \u003d 0;\n    itersource: for (int i \u003d 0; i \u003c source.length; i++) {\n      for (int j \u003d 0; j \u003c separator.length; j++) {\n        if (source[i + j] !\u003d separator[j]) {\n          continue itersource;\n        }\n      }\n      // all separator elements matched\n      if (limit \u003e VARIABLE_SIZE) {\n        if (segments.size() \u003e\u003d (limit - 1)) {\n          // everything else goes in one final segment\n          break;\n        }\n        if (sizes !\u003d null) {\n          int currentSegExpectedSize \u003d sizes[currentSegment];\n          if (currentSegExpectedSize \u003e VARIABLE_SIZE) {\n            int currentSegSize \u003d i - start;\n            if (currentSegSize \u003c currentSegExpectedSize) {\n              // Segment not yet complete. More bytes to parse.\n              continue itersource;\n            } else if (currentSegSize \u003e currentSegExpectedSize) {\n              // Segment is not as per size.\n              throw new IllegalArgumentException(\n                  \"Segments not separated as per expected sizes\");\n            }\n          }\n        }\n      }\n      segments.add(new Range(start, i));\n      start \u003d i + separator.length;\n      // i will be incremented again in outer for loop\n      i +\u003d separator.length - 1;\n      currentSegment++;\n    }\n    // add in remaining to a final range\n    if (start \u003c\u003d source.length) {\n      if (sizes !\u003d null) {\n        // Check if final segment is as per size specified.\n        if (sizes[currentSegment] \u003e VARIABLE_SIZE \u0026\u0026\n            source.length - start \u003e sizes[currentSegment]) {\n          // Segment is not as per size.\n          throw new IllegalArgumentException(\n              \"Segments not separated as per expected sizes\");\n        }\n      }\n      segments.add(new Range(start, source.length));\n    }\n    return segments;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-common/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/Separator.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/Separator.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-common/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/Separator.java"
      }
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n      int[] sizes) {\n    List\u003cRange\u003e segments \u003d new ArrayList\u003cRange\u003e();\n    if (source \u003d\u003d null || separator \u003d\u003d null) {\n      return segments;\n    }\n    // VARIABLE_SIZE here indicates that there is no limit to number of segments\n    // to return.\n    int limit \u003d VARIABLE_SIZE;\n    if (sizes !\u003d null \u0026\u0026 sizes.length \u003e 0) {\n      limit \u003d sizes.length;\n    }\n    int start \u003d 0;\n    int currentSegment \u003d 0;\n    itersource: for (int i \u003d 0; i \u003c source.length; i++) {\n      for (int j \u003d 0; j \u003c separator.length; j++) {\n        if (source[i + j] !\u003d separator[j]) {\n          continue itersource;\n        }\n      }\n      // all separator elements matched\n      if (limit \u003e VARIABLE_SIZE) {\n        if (segments.size() \u003e\u003d (limit - 1)) {\n          // everything else goes in one final segment\n          break;\n        }\n        if (sizes !\u003d null) {\n          int currentSegExpectedSize \u003d sizes[currentSegment];\n          if (currentSegExpectedSize \u003e VARIABLE_SIZE) {\n            int currentSegSize \u003d i - start;\n            if (currentSegSize \u003c currentSegExpectedSize) {\n              // Segment not yet complete. More bytes to parse.\n              continue itersource;\n            } else if (currentSegSize \u003e currentSegExpectedSize) {\n              // Segment is not as per size.\n              throw new IllegalArgumentException(\n                  \"Segments not separated as per expected sizes\");\n            }\n          }\n        }\n      }\n      segments.add(new Range(start, i));\n      start \u003d i + separator.length;\n      // i will be incremented again in outer for loop\n      i +\u003d separator.length - 1;\n      currentSegment++;\n    }\n    // add in remaining to a final range\n    if (start \u003c\u003d source.length) {\n      if (sizes !\u003d null) {\n        // Check if final segment is as per size specified.\n        if (sizes[currentSegment] \u003e VARIABLE_SIZE \u0026\u0026\n            source.length - start \u003e sizes[currentSegment]) {\n          // Segment is not as per size.\n          throw new IllegalArgumentException(\n              \"Segments not separated as per expected sizes\");\n        }\n      }\n      segments.add(new Range(start, source.length));\n    }\n    return segments;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/Separator.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/Separator.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/Separator.java"
      }
    },
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:46 AM",
          "commitNameOld": "d729e8211bbbbc49f4dc4d0250859bcf86f6acef",
          "commitAuthorOld": "Li Lu",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,62 @@\n-  public static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n-      int limit) {\n+  private static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n+      int[] sizes) {\n     List\u003cRange\u003e segments \u003d new ArrayList\u003cRange\u003e();\n-    if ((source \u003d\u003d null) || (separator \u003d\u003d null)) {\n+    if (source \u003d\u003d null || separator \u003d\u003d null) {\n       return segments;\n     }\n+    // VARIABLE_SIZE here indicates that there is no limit to number of segments\n+    // to return.\n+    int limit \u003d VARIABLE_SIZE;\n+    if (sizes !\u003d null \u0026\u0026 sizes.length \u003e 0) {\n+      limit \u003d sizes.length;\n+    }\n     int start \u003d 0;\n+    int currentSegment \u003d 0;\n     itersource: for (int i \u003d 0; i \u003c source.length; i++) {\n       for (int j \u003d 0; j \u003c separator.length; j++) {\n         if (source[i + j] !\u003d separator[j]) {\n           continue itersource;\n         }\n       }\n       // all separator elements matched\n-      if (limit \u003e 0 \u0026\u0026 segments.size() \u003e\u003d (limit - 1)) {\n-        // everything else goes in one final segment\n-        break;\n+      if (limit \u003e VARIABLE_SIZE) {\n+        if (segments.size() \u003e\u003d (limit - 1)) {\n+          // everything else goes in one final segment\n+          break;\n+        }\n+        if (sizes !\u003d null) {\n+          int currentSegExpectedSize \u003d sizes[currentSegment];\n+          if (currentSegExpectedSize \u003e VARIABLE_SIZE) {\n+            int currentSegSize \u003d i - start;\n+            if (currentSegSize \u003c currentSegExpectedSize) {\n+              // Segment not yet complete. More bytes to parse.\n+              continue itersource;\n+            } else if (currentSegSize \u003e currentSegExpectedSize) {\n+              // Segment is not as per size.\n+              throw new IllegalArgumentException(\n+                  \"Segments not separated as per expected sizes\");\n+            }\n+          }\n+        }\n       }\n       segments.add(new Range(start, i));\n       start \u003d i + separator.length;\n       // i will be incremented again in outer for loop\n       i +\u003d separator.length - 1;\n+      currentSegment++;\n     }\n     // add in remaining to a final range\n     if (start \u003c\u003d source.length) {\n+      if (sizes !\u003d null) {\n+        // Check if final segment is as per size specified.\n+        if (sizes[currentSegment] \u003e VARIABLE_SIZE \u0026\u0026\n+            source.length - start \u003e sizes[currentSegment]) {\n+          // Segment is not as per size.\n+          throw new IllegalArgumentException(\n+              \"Segments not separated as per expected sizes\");\n+        }\n+      }\n       segments.add(new Range(start, source.length));\n     }\n     return segments;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n      int[] sizes) {\n    List\u003cRange\u003e segments \u003d new ArrayList\u003cRange\u003e();\n    if (source \u003d\u003d null || separator \u003d\u003d null) {\n      return segments;\n    }\n    // VARIABLE_SIZE here indicates that there is no limit to number of segments\n    // to return.\n    int limit \u003d VARIABLE_SIZE;\n    if (sizes !\u003d null \u0026\u0026 sizes.length \u003e 0) {\n      limit \u003d sizes.length;\n    }\n    int start \u003d 0;\n    int currentSegment \u003d 0;\n    itersource: for (int i \u003d 0; i \u003c source.length; i++) {\n      for (int j \u003d 0; j \u003c separator.length; j++) {\n        if (source[i + j] !\u003d separator[j]) {\n          continue itersource;\n        }\n      }\n      // all separator elements matched\n      if (limit \u003e VARIABLE_SIZE) {\n        if (segments.size() \u003e\u003d (limit - 1)) {\n          // everything else goes in one final segment\n          break;\n        }\n        if (sizes !\u003d null) {\n          int currentSegExpectedSize \u003d sizes[currentSegment];\n          if (currentSegExpectedSize \u003e VARIABLE_SIZE) {\n            int currentSegSize \u003d i - start;\n            if (currentSegSize \u003c currentSegExpectedSize) {\n              // Segment not yet complete. More bytes to parse.\n              continue itersource;\n            } else if (currentSegSize \u003e currentSegExpectedSize) {\n              // Segment is not as per size.\n              throw new IllegalArgumentException(\n                  \"Segments not separated as per expected sizes\");\n            }\n          }\n        }\n      }\n      segments.add(new Range(start, i));\n      start \u003d i + separator.length;\n      // i will be incremented again in outer for loop\n      i +\u003d separator.length - 1;\n      currentSegment++;\n    }\n    // add in remaining to a final range\n    if (start \u003c\u003d source.length) {\n      if (sizes !\u003d null) {\n        // Check if final segment is as per size specified.\n        if (sizes[currentSegment] \u003e VARIABLE_SIZE \u0026\u0026\n            source.length - start \u003e sizes[currentSegment]) {\n          // Segment is not as per size.\n          throw new IllegalArgumentException(\n              \"Segments not separated as per expected sizes\");\n        }\n      }\n      segments.add(new Range(start, source.length));\n    }\n    return segments;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/Separator.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/Separator.java",
            "oldMethodName": "splitRanges",
            "newMethodName": "splitRanges"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:46 AM",
          "commitNameOld": "d729e8211bbbbc49f4dc4d0250859bcf86f6acef",
          "commitAuthorOld": "Li Lu",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,62 @@\n-  public static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n-      int limit) {\n+  private static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n+      int[] sizes) {\n     List\u003cRange\u003e segments \u003d new ArrayList\u003cRange\u003e();\n-    if ((source \u003d\u003d null) || (separator \u003d\u003d null)) {\n+    if (source \u003d\u003d null || separator \u003d\u003d null) {\n       return segments;\n     }\n+    // VARIABLE_SIZE here indicates that there is no limit to number of segments\n+    // to return.\n+    int limit \u003d VARIABLE_SIZE;\n+    if (sizes !\u003d null \u0026\u0026 sizes.length \u003e 0) {\n+      limit \u003d sizes.length;\n+    }\n     int start \u003d 0;\n+    int currentSegment \u003d 0;\n     itersource: for (int i \u003d 0; i \u003c source.length; i++) {\n       for (int j \u003d 0; j \u003c separator.length; j++) {\n         if (source[i + j] !\u003d separator[j]) {\n           continue itersource;\n         }\n       }\n       // all separator elements matched\n-      if (limit \u003e 0 \u0026\u0026 segments.size() \u003e\u003d (limit - 1)) {\n-        // everything else goes in one final segment\n-        break;\n+      if (limit \u003e VARIABLE_SIZE) {\n+        if (segments.size() \u003e\u003d (limit - 1)) {\n+          // everything else goes in one final segment\n+          break;\n+        }\n+        if (sizes !\u003d null) {\n+          int currentSegExpectedSize \u003d sizes[currentSegment];\n+          if (currentSegExpectedSize \u003e VARIABLE_SIZE) {\n+            int currentSegSize \u003d i - start;\n+            if (currentSegSize \u003c currentSegExpectedSize) {\n+              // Segment not yet complete. More bytes to parse.\n+              continue itersource;\n+            } else if (currentSegSize \u003e currentSegExpectedSize) {\n+              // Segment is not as per size.\n+              throw new IllegalArgumentException(\n+                  \"Segments not separated as per expected sizes\");\n+            }\n+          }\n+        }\n       }\n       segments.add(new Range(start, i));\n       start \u003d i + separator.length;\n       // i will be incremented again in outer for loop\n       i +\u003d separator.length - 1;\n+      currentSegment++;\n     }\n     // add in remaining to a final range\n     if (start \u003c\u003d source.length) {\n+      if (sizes !\u003d null) {\n+        // Check if final segment is as per size specified.\n+        if (sizes[currentSegment] \u003e VARIABLE_SIZE \u0026\u0026\n+            source.length - start \u003e sizes[currentSegment]) {\n+          // Segment is not as per size.\n+          throw new IllegalArgumentException(\n+              \"Segments not separated as per expected sizes\");\n+        }\n+      }\n       segments.add(new Range(start, source.length));\n     }\n     return segments;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n      int[] sizes) {\n    List\u003cRange\u003e segments \u003d new ArrayList\u003cRange\u003e();\n    if (source \u003d\u003d null || separator \u003d\u003d null) {\n      return segments;\n    }\n    // VARIABLE_SIZE here indicates that there is no limit to number of segments\n    // to return.\n    int limit \u003d VARIABLE_SIZE;\n    if (sizes !\u003d null \u0026\u0026 sizes.length \u003e 0) {\n      limit \u003d sizes.length;\n    }\n    int start \u003d 0;\n    int currentSegment \u003d 0;\n    itersource: for (int i \u003d 0; i \u003c source.length; i++) {\n      for (int j \u003d 0; j \u003c separator.length; j++) {\n        if (source[i + j] !\u003d separator[j]) {\n          continue itersource;\n        }\n      }\n      // all separator elements matched\n      if (limit \u003e VARIABLE_SIZE) {\n        if (segments.size() \u003e\u003d (limit - 1)) {\n          // everything else goes in one final segment\n          break;\n        }\n        if (sizes !\u003d null) {\n          int currentSegExpectedSize \u003d sizes[currentSegment];\n          if (currentSegExpectedSize \u003e VARIABLE_SIZE) {\n            int currentSegSize \u003d i - start;\n            if (currentSegSize \u003c currentSegExpectedSize) {\n              // Segment not yet complete. More bytes to parse.\n              continue itersource;\n            } else if (currentSegSize \u003e currentSegExpectedSize) {\n              // Segment is not as per size.\n              throw new IllegalArgumentException(\n                  \"Segments not separated as per expected sizes\");\n            }\n          }\n        }\n      }\n      segments.add(new Range(start, i));\n      start \u003d i + separator.length;\n      // i will be incremented again in outer for loop\n      i +\u003d separator.length - 1;\n      currentSegment++;\n    }\n    // add in remaining to a final range\n    if (start \u003c\u003d source.length) {\n      if (sizes !\u003d null) {\n        // Check if final segment is as per size specified.\n        if (sizes[currentSegment] \u003e VARIABLE_SIZE \u0026\u0026\n            source.length - start \u003e sizes[currentSegment]) {\n          // Segment is not as per size.\n          throw new IllegalArgumentException(\n              \"Segments not separated as per expected sizes\");\n        }\n      }\n      segments.add(new Range(start, source.length));\n    }\n    return segments;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/Separator.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:46 AM",
          "commitNameOld": "d729e8211bbbbc49f4dc4d0250859bcf86f6acef",
          "commitAuthorOld": "Li Lu",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,62 @@\n-  public static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n-      int limit) {\n+  private static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n+      int[] sizes) {\n     List\u003cRange\u003e segments \u003d new ArrayList\u003cRange\u003e();\n-    if ((source \u003d\u003d null) || (separator \u003d\u003d null)) {\n+    if (source \u003d\u003d null || separator \u003d\u003d null) {\n       return segments;\n     }\n+    // VARIABLE_SIZE here indicates that there is no limit to number of segments\n+    // to return.\n+    int limit \u003d VARIABLE_SIZE;\n+    if (sizes !\u003d null \u0026\u0026 sizes.length \u003e 0) {\n+      limit \u003d sizes.length;\n+    }\n     int start \u003d 0;\n+    int currentSegment \u003d 0;\n     itersource: for (int i \u003d 0; i \u003c source.length; i++) {\n       for (int j \u003d 0; j \u003c separator.length; j++) {\n         if (source[i + j] !\u003d separator[j]) {\n           continue itersource;\n         }\n       }\n       // all separator elements matched\n-      if (limit \u003e 0 \u0026\u0026 segments.size() \u003e\u003d (limit - 1)) {\n-        // everything else goes in one final segment\n-        break;\n+      if (limit \u003e VARIABLE_SIZE) {\n+        if (segments.size() \u003e\u003d (limit - 1)) {\n+          // everything else goes in one final segment\n+          break;\n+        }\n+        if (sizes !\u003d null) {\n+          int currentSegExpectedSize \u003d sizes[currentSegment];\n+          if (currentSegExpectedSize \u003e VARIABLE_SIZE) {\n+            int currentSegSize \u003d i - start;\n+            if (currentSegSize \u003c currentSegExpectedSize) {\n+              // Segment not yet complete. More bytes to parse.\n+              continue itersource;\n+            } else if (currentSegSize \u003e currentSegExpectedSize) {\n+              // Segment is not as per size.\n+              throw new IllegalArgumentException(\n+                  \"Segments not separated as per expected sizes\");\n+            }\n+          }\n+        }\n       }\n       segments.add(new Range(start, i));\n       start \u003d i + separator.length;\n       // i will be incremented again in outer for loop\n       i +\u003d separator.length - 1;\n+      currentSegment++;\n     }\n     // add in remaining to a final range\n     if (start \u003c\u003d source.length) {\n+      if (sizes !\u003d null) {\n+        // Check if final segment is as per size specified.\n+        if (sizes[currentSegment] \u003e VARIABLE_SIZE \u0026\u0026\n+            source.length - start \u003e sizes[currentSegment]) {\n+          // Segment is not as per size.\n+          throw new IllegalArgumentException(\n+              \"Segments not separated as per expected sizes\");\n+        }\n+      }\n       segments.add(new Range(start, source.length));\n     }\n     return segments;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n      int[] sizes) {\n    List\u003cRange\u003e segments \u003d new ArrayList\u003cRange\u003e();\n    if (source \u003d\u003d null || separator \u003d\u003d null) {\n      return segments;\n    }\n    // VARIABLE_SIZE here indicates that there is no limit to number of segments\n    // to return.\n    int limit \u003d VARIABLE_SIZE;\n    if (sizes !\u003d null \u0026\u0026 sizes.length \u003e 0) {\n      limit \u003d sizes.length;\n    }\n    int start \u003d 0;\n    int currentSegment \u003d 0;\n    itersource: for (int i \u003d 0; i \u003c source.length; i++) {\n      for (int j \u003d 0; j \u003c separator.length; j++) {\n        if (source[i + j] !\u003d separator[j]) {\n          continue itersource;\n        }\n      }\n      // all separator elements matched\n      if (limit \u003e VARIABLE_SIZE) {\n        if (segments.size() \u003e\u003d (limit - 1)) {\n          // everything else goes in one final segment\n          break;\n        }\n        if (sizes !\u003d null) {\n          int currentSegExpectedSize \u003d sizes[currentSegment];\n          if (currentSegExpectedSize \u003e VARIABLE_SIZE) {\n            int currentSegSize \u003d i - start;\n            if (currentSegSize \u003c currentSegExpectedSize) {\n              // Segment not yet complete. More bytes to parse.\n              continue itersource;\n            } else if (currentSegSize \u003e currentSegExpectedSize) {\n              // Segment is not as per size.\n              throw new IllegalArgumentException(\n                  \"Segments not separated as per expected sizes\");\n            }\n          }\n        }\n      }\n      segments.add(new Range(start, i));\n      start \u003d i + separator.length;\n      // i will be incremented again in outer for loop\n      i +\u003d separator.length - 1;\n      currentSegment++;\n    }\n    // add in remaining to a final range\n    if (start \u003c\u003d source.length) {\n      if (sizes !\u003d null) {\n        // Check if final segment is as per size specified.\n        if (sizes[currentSegment] \u003e VARIABLE_SIZE \u0026\u0026\n            source.length - start \u003e sizes[currentSegment]) {\n          // Segment is not as per size.\n          throw new IllegalArgumentException(\n              \"Segments not separated as per expected sizes\");\n        }\n      }\n      segments.add(new Range(start, source.length));\n    }\n    return segments;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/Separator.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:46 AM",
          "commitNameOld": "d729e8211bbbbc49f4dc4d0250859bcf86f6acef",
          "commitAuthorOld": "Li Lu",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,62 @@\n-  public static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n-      int limit) {\n+  private static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n+      int[] sizes) {\n     List\u003cRange\u003e segments \u003d new ArrayList\u003cRange\u003e();\n-    if ((source \u003d\u003d null) || (separator \u003d\u003d null)) {\n+    if (source \u003d\u003d null || separator \u003d\u003d null) {\n       return segments;\n     }\n+    // VARIABLE_SIZE here indicates that there is no limit to number of segments\n+    // to return.\n+    int limit \u003d VARIABLE_SIZE;\n+    if (sizes !\u003d null \u0026\u0026 sizes.length \u003e 0) {\n+      limit \u003d sizes.length;\n+    }\n     int start \u003d 0;\n+    int currentSegment \u003d 0;\n     itersource: for (int i \u003d 0; i \u003c source.length; i++) {\n       for (int j \u003d 0; j \u003c separator.length; j++) {\n         if (source[i + j] !\u003d separator[j]) {\n           continue itersource;\n         }\n       }\n       // all separator elements matched\n-      if (limit \u003e 0 \u0026\u0026 segments.size() \u003e\u003d (limit - 1)) {\n-        // everything else goes in one final segment\n-        break;\n+      if (limit \u003e VARIABLE_SIZE) {\n+        if (segments.size() \u003e\u003d (limit - 1)) {\n+          // everything else goes in one final segment\n+          break;\n+        }\n+        if (sizes !\u003d null) {\n+          int currentSegExpectedSize \u003d sizes[currentSegment];\n+          if (currentSegExpectedSize \u003e VARIABLE_SIZE) {\n+            int currentSegSize \u003d i - start;\n+            if (currentSegSize \u003c currentSegExpectedSize) {\n+              // Segment not yet complete. More bytes to parse.\n+              continue itersource;\n+            } else if (currentSegSize \u003e currentSegExpectedSize) {\n+              // Segment is not as per size.\n+              throw new IllegalArgumentException(\n+                  \"Segments not separated as per expected sizes\");\n+            }\n+          }\n+        }\n       }\n       segments.add(new Range(start, i));\n       start \u003d i + separator.length;\n       // i will be incremented again in outer for loop\n       i +\u003d separator.length - 1;\n+      currentSegment++;\n     }\n     // add in remaining to a final range\n     if (start \u003c\u003d source.length) {\n+      if (sizes !\u003d null) {\n+        // Check if final segment is as per size specified.\n+        if (sizes[currentSegment] \u003e VARIABLE_SIZE \u0026\u0026\n+            source.length - start \u003e sizes[currentSegment]) {\n+          // Segment is not as per size.\n+          throw new IllegalArgumentException(\n+              \"Segments not separated as per expected sizes\");\n+        }\n+      }\n       segments.add(new Range(start, source.length));\n     }\n     return segments;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n      int[] sizes) {\n    List\u003cRange\u003e segments \u003d new ArrayList\u003cRange\u003e();\n    if (source \u003d\u003d null || separator \u003d\u003d null) {\n      return segments;\n    }\n    // VARIABLE_SIZE here indicates that there is no limit to number of segments\n    // to return.\n    int limit \u003d VARIABLE_SIZE;\n    if (sizes !\u003d null \u0026\u0026 sizes.length \u003e 0) {\n      limit \u003d sizes.length;\n    }\n    int start \u003d 0;\n    int currentSegment \u003d 0;\n    itersource: for (int i \u003d 0; i \u003c source.length; i++) {\n      for (int j \u003d 0; j \u003c separator.length; j++) {\n        if (source[i + j] !\u003d separator[j]) {\n          continue itersource;\n        }\n      }\n      // all separator elements matched\n      if (limit \u003e VARIABLE_SIZE) {\n        if (segments.size() \u003e\u003d (limit - 1)) {\n          // everything else goes in one final segment\n          break;\n        }\n        if (sizes !\u003d null) {\n          int currentSegExpectedSize \u003d sizes[currentSegment];\n          if (currentSegExpectedSize \u003e VARIABLE_SIZE) {\n            int currentSegSize \u003d i - start;\n            if (currentSegSize \u003c currentSegExpectedSize) {\n              // Segment not yet complete. More bytes to parse.\n              continue itersource;\n            } else if (currentSegSize \u003e currentSegExpectedSize) {\n              // Segment is not as per size.\n              throw new IllegalArgumentException(\n                  \"Segments not separated as per expected sizes\");\n            }\n          }\n        }\n      }\n      segments.add(new Range(start, i));\n      start \u003d i + separator.length;\n      // i will be incremented again in outer for loop\n      i +\u003d separator.length - 1;\n      currentSegment++;\n    }\n    // add in remaining to a final range\n    if (start \u003c\u003d source.length) {\n      if (sizes !\u003d null) {\n        // Check if final segment is as per size specified.\n        if (sizes[currentSegment] \u003e VARIABLE_SIZE \u0026\u0026\n            source.length - start \u003e sizes[currentSegment]) {\n          // Segment is not as per size.\n          throw new IllegalArgumentException(\n              \"Segments not separated as per expected sizes\");\n        }\n      }\n      segments.add(new Range(start, source.length));\n    }\n    return segments;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/Separator.java",
          "extendedDetails": {
            "oldValue": "[source-byte[], separator-byte[], limit-int]",
            "newValue": "[source-byte[], separator-byte[], sizes-int[]]"
          }
        }
      ]
    },
    "b51d0fef56a59b15489f5b932025718b4e9613d2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-4178. [storage implementation] app id as string in row keys can cause incorrect ordering (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "b51d0fef56a59b15489f5b932025718b4e9613d2",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "0f44b5508d2ffcae08f130b6535a9832d37e2b38",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   public static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n       int limit) {\n     List\u003cRange\u003e segments \u003d new ArrayList\u003cRange\u003e();\n     if ((source \u003d\u003d null) || (separator \u003d\u003d null)) {\n       return segments;\n     }\n     int start \u003d 0;\n     itersource: for (int i \u003d 0; i \u003c source.length; i++) {\n       for (int j \u003d 0; j \u003c separator.length; j++) {\n         if (source[i + j] !\u003d separator[j]) {\n           continue itersource;\n         }\n       }\n       // all separator elements matched\n       if (limit \u003e 0 \u0026\u0026 segments.size() \u003e\u003d (limit - 1)) {\n         // everything else goes in one final segment\n         break;\n       }\n-\n-      segments.add(new Range(start, i));\n+\t      segments.add(new Range(start, i));\n       start \u003d i + separator.length;\n       // i will be incremented again in outer for loop\n       i +\u003d separator.length - 1;\n     }\n     // add in remaining to a final range\n     if (start \u003c\u003d source.length) {\n       segments.add(new Range(start, source.length));\n     }\n     return segments;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n      int limit) {\n    List\u003cRange\u003e segments \u003d new ArrayList\u003cRange\u003e();\n    if ((source \u003d\u003d null) || (separator \u003d\u003d null)) {\n      return segments;\n    }\n    int start \u003d 0;\n    itersource: for (int i \u003d 0; i \u003c source.length; i++) {\n      for (int j \u003d 0; j \u003c separator.length; j++) {\n        if (source[i + j] !\u003d separator[j]) {\n          continue itersource;\n        }\n      }\n      // all separator elements matched\n      if (limit \u003e 0 \u0026\u0026 segments.size() \u003e\u003d (limit - 1)) {\n        // everything else goes in one final segment\n        break;\n      }\n\t      segments.add(new Range(start, i));\n      start \u003d i + separator.length;\n      // i will be incremented again in outer for loop\n      i +\u003d separator.length - 1;\n    }\n    // add in remaining to a final range\n    if (start \u003c\u003d source.length) {\n      segments.add(new Range(start, source.length));\n    }\n    return segments;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineWriterUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java"
      }
    },
    "92d90c3a243134177f192d1d473dd606c79a91fc": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-3706. Generalize native HBase writer for additional tables (Joep Rottinghuis via sjlee)\n\n(cherry picked from commit 9137aeae0dec83f9eff40d12cae712dfd508c0c5)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "92d90c3a243134177f192d1d473dd606c79a91fc",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "6b445a5ccb9826ab9f72ce187c3f93aadfd8b0c0",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n-  public static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator, int limit) {\n+  public static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n+      int limit) {\n     List\u003cRange\u003e segments \u003d new ArrayList\u003cRange\u003e();\n     if ((source \u003d\u003d null) || (separator \u003d\u003d null)) {\n       return segments;\n     }\n     int start \u003d 0;\n     itersource: for (int i \u003d 0; i \u003c source.length; i++) {\n       for (int j \u003d 0; j \u003c separator.length; j++) {\n         if (source[i + j] !\u003d separator[j]) {\n           continue itersource;\n         }\n       }\n       // all separator elements matched\n-      if (limit \u003e 0 \u0026\u0026 segments.size() \u003e\u003d (limit-1)) {\n+      if (limit \u003e 0 \u0026\u0026 segments.size() \u003e\u003d (limit - 1)) {\n         // everything else goes in one final segment\n         break;\n       }\n \n       segments.add(new Range(start, i));\n       start \u003d i + separator.length;\n       // i will be incremented again in outer for loop\n-      i +\u003d separator.length-1;\n+      i +\u003d separator.length - 1;\n     }\n     // add in remaining to a final range\n     if (start \u003c\u003d source.length) {\n       segments.add(new Range(start, source.length));\n     }\n     return segments;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator,\n      int limit) {\n    List\u003cRange\u003e segments \u003d new ArrayList\u003cRange\u003e();\n    if ((source \u003d\u003d null) || (separator \u003d\u003d null)) {\n      return segments;\n    }\n    int start \u003d 0;\n    itersource: for (int i \u003d 0; i \u003c source.length; i++) {\n      for (int j \u003d 0; j \u003c separator.length; j++) {\n        if (source[i + j] !\u003d separator[j]) {\n          continue itersource;\n        }\n      }\n      // all separator elements matched\n      if (limit \u003e 0 \u0026\u0026 segments.size() \u003e\u003d (limit - 1)) {\n        // everything else goes in one final segment\n        break;\n      }\n\n      segments.add(new Range(start, i));\n      start \u003d i + separator.length;\n      // i will be incremented again in outer for loop\n      i +\u003d separator.length - 1;\n    }\n    // add in remaining to a final range\n    if (start \u003c\u003d source.length) {\n      segments.add(new Range(start, source.length));\n    }\n    return segments;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineWriterUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/TimelineWriterUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineWriterUtils.java",
        "oldMethodName": "splitRanges",
        "newMethodName": "splitRanges"
      }
    },
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3411. [Storage implementation] explore the native HBase write schema for storage (Vrushali C via sjlee)\n\n(cherry picked from commit 7a3068854d27eadae1c57545988f5b2029bf119a)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,29 @@\n+  public static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator, int limit) {\n+    List\u003cRange\u003e segments \u003d new ArrayList\u003cRange\u003e();\n+    if ((source \u003d\u003d null) || (separator \u003d\u003d null)) {\n+      return segments;\n+    }\n+    int start \u003d 0;\n+    itersource: for (int i \u003d 0; i \u003c source.length; i++) {\n+      for (int j \u003d 0; j \u003c separator.length; j++) {\n+        if (source[i + j] !\u003d separator[j]) {\n+          continue itersource;\n+        }\n+      }\n+      // all separator elements matched\n+      if (limit \u003e 0 \u0026\u0026 segments.size() \u003e\u003d (limit-1)) {\n+        // everything else goes in one final segment\n+        break;\n+      }\n+\n+      segments.add(new Range(start, i));\n+      start \u003d i + separator.length;\n+      // i will be incremented again in outer for loop\n+      i +\u003d separator.length-1;\n+    }\n+    // add in remaining to a final range\n+    if (start \u003c\u003d source.length) {\n+      segments.add(new Range(start, source.length));\n+    }\n+    return segments;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cRange\u003e splitRanges(byte[] source, byte[] separator, int limit) {\n    List\u003cRange\u003e segments \u003d new ArrayList\u003cRange\u003e();\n    if ((source \u003d\u003d null) || (separator \u003d\u003d null)) {\n      return segments;\n    }\n    int start \u003d 0;\n    itersource: for (int i \u003d 0; i \u003c source.length; i++) {\n      for (int j \u003d 0; j \u003c separator.length; j++) {\n        if (source[i + j] !\u003d separator[j]) {\n          continue itersource;\n        }\n      }\n      // all separator elements matched\n      if (limit \u003e 0 \u0026\u0026 segments.size() \u003e\u003d (limit-1)) {\n        // everything else goes in one final segment\n        break;\n      }\n\n      segments.add(new Range(start, i));\n      start \u003d i + separator.length;\n      // i will be incremented again in outer for loop\n      i +\u003d separator.length-1;\n    }\n    // add in remaining to a final range\n    if (start \u003c\u003d source.length) {\n      segments.add(new Range(start, source.length));\n    }\n    return segments;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/TimelineWriterUtils.java"
    }
  }
}