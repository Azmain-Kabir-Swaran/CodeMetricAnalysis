{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ConfBlock.java",
  "functionName": "render",
  "functionId": "render___html-Block",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/ConfBlock.java",
  "functionStartLine": 55,
  "functionEndLine": 118,
  "numCommitsSeen": 8,
  "timeTaken": 2148,
  "changeHistory": [
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
    "c9b7ce92737f0a829408936ed9a361220d3e9680",
    "c87b3a448a00df97149a4e93a8c39d9ad0268bdb",
    "5ec44fc35c129d266edaebbc6fa17754a89b2ad6",
    "a3e695ab2c512254e028c2001a72788f10e682fa",
    "7d04a96027ad75877b41b7cd8f67455dd13159d7",
    "0ea8570be578be60e2f32849900a1c50506d78d3",
    "a3e8f6836b489f8f2ddd785ae038df729c85059f"
  ],
  "changeHistoryShort": {
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Ybodychange",
    "c9b7ce92737f0a829408936ed9a361220d3e9680": "Ybodychange",
    "c87b3a448a00df97149a4e93a8c39d9ad0268bdb": "Ybodychange",
    "5ec44fc35c129d266edaebbc6fa17754a89b2ad6": "Ybodychange",
    "a3e695ab2c512254e028c2001a72788f10e682fa": "Ybodychange",
    "7d04a96027ad75877b41b7cd8f67455dd13159d7": "Ybodychange",
    "0ea8570be578be60e2f32849900a1c50506d78d3": "Ybodychange",
    "a3e8f6836b489f8f2ddd785ae038df729c85059f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "30/03/17 10:55 AM",
      "commitNameOld": "c9b7ce92737f0a829408936ed9a361220d3e9680",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 119.26,
      "commitsBetweenForRepo": 606,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n-        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n+        p().__(\"Sorry, can\u0027t do anything without a JobID.\").__();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job job \u003d appContext.getJob(jobID);\n     if (job \u003d\u003d null) {\n       html.\n-        p()._(\"Sorry, \", jid, \" not found.\")._();\n+        p().__(\"Sorry, \", jid, \" not found.\").__();\n       return;\n     }\n     Path confPath \u003d job.getConfFile();\n     try {\n       ConfInfo info \u003d new ConfInfo(job);\n \n-      html.div().a(\"/jobhistory/downloadconf/\" + jid, confPath.toString())._();\n+      html.div().a(\"/jobhistory/downloadconf/\" + jid, confPath.toString()).__();\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n         // Tasks table\n       table(\"#conf\").\n         thead().\n           tr().\n             th(_TH, \"key\").\n             th(_TH, \"value\").\n             th(_TH, \"source chain\").\n-          _().\n-        _().\n+              __().\n+              __().\n       tbody();\n       for (ConfEntryInfo entry : info.getProperties()) {\n         StringBuffer buffer \u003d new StringBuffer();\n         String[] sources \u003d entry.getSource();\n         //Skip the last entry, because it is always the same HDFS file, and\n         // output them in reverse order so most recent is output first\n         boolean first \u003d true;\n         for(int i \u003d (sources.length  - 2); i \u003e\u003d 0; i--) {\n           if(!first) {\n             buffer.append(\" \u003c- \");\n           }\n           first \u003d false;\n           buffer.append(sources[i]);\n         }\n         tbody.\n           tr().\n             td(entry.getName()).\n             td(entry.getValue()).\n             td(buffer.toString()).\n-          _();\n+            __();\n       }\n-      tbody._().\n+      tbody.__().\n       tfoot().\n         tr().\n-          th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\")._()._().\n-          th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\")._()._().\n-          th().input(\"search_init\").$type(InputType.text).$name(\"source chain\").$value(\"source chain\")._()._().\n-          _().\n-        _().\n-      _();\n+          th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\").__().__().\n+          th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\").__().__().\n+          th().input(\"search_init\").$type(InputType.text).$name(\"source chain\").$value(\"source chain\").__().__().\n+          __().\n+          __().\n+          __();\n     } catch(IOException e) {\n       LOG.error(\"Error while reading \"+confPath, e);\n-      html.p()._(\"Sorry got an error while reading conf file. \",confPath);\n+      html.p().__(\"Sorry got an error while reading conf file. \", confPath);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p().__(\"Sorry, can\u0027t do anything without a JobID.\").__();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job job \u003d appContext.getJob(jobID);\n    if (job \u003d\u003d null) {\n      html.\n        p().__(\"Sorry, \", jid, \" not found.\").__();\n      return;\n    }\n    Path confPath \u003d job.getConfFile();\n    try {\n      ConfInfo info \u003d new ConfInfo(job);\n\n      html.div().a(\"/jobhistory/downloadconf/\" + jid, confPath.toString()).__();\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n        // Tasks table\n      table(\"#conf\").\n        thead().\n          tr().\n            th(_TH, \"key\").\n            th(_TH, \"value\").\n            th(_TH, \"source chain\").\n              __().\n              __().\n      tbody();\n      for (ConfEntryInfo entry : info.getProperties()) {\n        StringBuffer buffer \u003d new StringBuffer();\n        String[] sources \u003d entry.getSource();\n        //Skip the last entry, because it is always the same HDFS file, and\n        // output them in reverse order so most recent is output first\n        boolean first \u003d true;\n        for(int i \u003d (sources.length  - 2); i \u003e\u003d 0; i--) {\n          if(!first) {\n            buffer.append(\" \u003c- \");\n          }\n          first \u003d false;\n          buffer.append(sources[i]);\n        }\n        tbody.\n          tr().\n            td(entry.getName()).\n            td(entry.getValue()).\n            td(buffer.toString()).\n            __();\n      }\n      tbody.__().\n      tfoot().\n        tr().\n          th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\").__().__().\n          th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\").__().__().\n          th().input(\"search_init\").$type(InputType.text).$name(\"source chain\").$value(\"source chain\").__().__().\n          __().\n          __().\n          __();\n    } catch(IOException e) {\n      LOG.error(\"Error while reading \"+confPath, e);\n      html.p().__(\"Sorry got an error while reading conf file. \", confPath);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/ConfBlock.java",
      "extendedDetails": {}
    },
    "c9b7ce92737f0a829408936ed9a361220d3e9680": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6836. exception thrown when accessing the job configuration web UI. Contributed by Haibo Chen\n",
      "commitDate": "30/03/17 10:55 AM",
      "commitName": "c9b7ce92737f0a829408936ed9a361220d3e9680",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "01/12/16 5:29 PM",
      "commitNameOld": "c87b3a448a00df97149a4e93a8c39d9ad0268bdb",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 118.68,
      "commitsBetweenForRepo": 625,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job job \u003d appContext.getJob(jobID);\n     if (job \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     Path confPath \u003d job.getConfFile();\n     try {\n       ConfInfo info \u003d new ConfInfo(job);\n \n-      html.div().a(\"/jobhistory/downloadconf/\" + jid, confPath.toString());\n+      html.div().a(\"/jobhistory/downloadconf/\" + jid, confPath.toString())._();\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n         // Tasks table\n       table(\"#conf\").\n         thead().\n           tr().\n             th(_TH, \"key\").\n             th(_TH, \"value\").\n             th(_TH, \"source chain\").\n           _().\n         _().\n       tbody();\n       for (ConfEntryInfo entry : info.getProperties()) {\n         StringBuffer buffer \u003d new StringBuffer();\n         String[] sources \u003d entry.getSource();\n         //Skip the last entry, because it is always the same HDFS file, and\n         // output them in reverse order so most recent is output first\n         boolean first \u003d true;\n         for(int i \u003d (sources.length  - 2); i \u003e\u003d 0; i--) {\n           if(!first) {\n             buffer.append(\" \u003c- \");\n           }\n           first \u003d false;\n           buffer.append(sources[i]);\n         }\n         tbody.\n           tr().\n             td(entry.getName()).\n             td(entry.getValue()).\n             td(buffer.toString()).\n           _();\n       }\n       tbody._().\n       tfoot().\n         tr().\n           th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\")._()._().\n           th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\")._()._().\n           th().input(\"search_init\").$type(InputType.text).$name(\"source chain\").$value(\"source chain\")._()._().\n           _().\n         _().\n       _();\n     } catch(IOException e) {\n       LOG.error(\"Error while reading \"+confPath, e);\n       html.p()._(\"Sorry got an error while reading conf file. \",confPath);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job job \u003d appContext.getJob(jobID);\n    if (job \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    Path confPath \u003d job.getConfFile();\n    try {\n      ConfInfo info \u003d new ConfInfo(job);\n\n      html.div().a(\"/jobhistory/downloadconf/\" + jid, confPath.toString())._();\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n        // Tasks table\n      table(\"#conf\").\n        thead().\n          tr().\n            th(_TH, \"key\").\n            th(_TH, \"value\").\n            th(_TH, \"source chain\").\n          _().\n        _().\n      tbody();\n      for (ConfEntryInfo entry : info.getProperties()) {\n        StringBuffer buffer \u003d new StringBuffer();\n        String[] sources \u003d entry.getSource();\n        //Skip the last entry, because it is always the same HDFS file, and\n        // output them in reverse order so most recent is output first\n        boolean first \u003d true;\n        for(int i \u003d (sources.length  - 2); i \u003e\u003d 0; i--) {\n          if(!first) {\n            buffer.append(\" \u003c- \");\n          }\n          first \u003d false;\n          buffer.append(sources[i]);\n        }\n        tbody.\n          tr().\n            td(entry.getName()).\n            td(entry.getValue()).\n            td(buffer.toString()).\n          _();\n      }\n      tbody._().\n      tfoot().\n        tr().\n          th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\")._()._().\n          th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\")._()._().\n          th().input(\"search_init\").$type(InputType.text).$name(\"source chain\").$value(\"source chain\")._()._().\n          _().\n        _().\n      _();\n    } catch(IOException e) {\n      LOG.error(\"Error while reading \"+confPath, e);\n      html.p()._(\"Sorry got an error while reading conf file. \",confPath);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/ConfBlock.java",
      "extendedDetails": {}
    },
    "c87b3a448a00df97149a4e93a8c39d9ad0268bdb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6787. Allow job_conf.xml to be downloadable on the job overview page in JHS (haibochen via rkanter)\n",
      "commitDate": "01/12/16 5:29 PM",
      "commitName": "c87b3a448a00df97149a4e93a8c39d9ad0268bdb",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "24/11/15 11:30 PM",
      "commitNameOld": "5ec44fc35c129d266edaebbc6fa17754a89b2ad6",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 372.75,
      "commitsBetweenForRepo": 2599,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job job \u003d appContext.getJob(jobID);\n     if (job \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     Path confPath \u003d job.getConfFile();\n     try {\n       ConfInfo info \u003d new ConfInfo(job);\n \n-      html.div().h3(confPath.toString())._();\n+      html.div().a(\"/jobhistory/downloadconf/\" + jid, confPath.toString());\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n         // Tasks table\n       table(\"#conf\").\n         thead().\n           tr().\n             th(_TH, \"key\").\n             th(_TH, \"value\").\n             th(_TH, \"source chain\").\n           _().\n         _().\n       tbody();\n       for (ConfEntryInfo entry : info.getProperties()) {\n         StringBuffer buffer \u003d new StringBuffer();\n         String[] sources \u003d entry.getSource();\n         //Skip the last entry, because it is always the same HDFS file, and\n         // output them in reverse order so most recent is output first\n         boolean first \u003d true;\n         for(int i \u003d (sources.length  - 2); i \u003e\u003d 0; i--) {\n           if(!first) {\n             buffer.append(\" \u003c- \");\n           }\n           first \u003d false;\n           buffer.append(sources[i]);\n         }\n         tbody.\n           tr().\n             td(entry.getName()).\n             td(entry.getValue()).\n             td(buffer.toString()).\n           _();\n       }\n       tbody._().\n       tfoot().\n         tr().\n           th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\")._()._().\n           th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\")._()._().\n           th().input(\"search_init\").$type(InputType.text).$name(\"source chain\").$value(\"source chain\")._()._().\n           _().\n         _().\n       _();\n     } catch(IOException e) {\n       LOG.error(\"Error while reading \"+confPath, e);\n       html.p()._(\"Sorry got an error while reading conf file. \",confPath);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job job \u003d appContext.getJob(jobID);\n    if (job \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    Path confPath \u003d job.getConfFile();\n    try {\n      ConfInfo info \u003d new ConfInfo(job);\n\n      html.div().a(\"/jobhistory/downloadconf/\" + jid, confPath.toString());\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n        // Tasks table\n      table(\"#conf\").\n        thead().\n          tr().\n            th(_TH, \"key\").\n            th(_TH, \"value\").\n            th(_TH, \"source chain\").\n          _().\n        _().\n      tbody();\n      for (ConfEntryInfo entry : info.getProperties()) {\n        StringBuffer buffer \u003d new StringBuffer();\n        String[] sources \u003d entry.getSource();\n        //Skip the last entry, because it is always the same HDFS file, and\n        // output them in reverse order so most recent is output first\n        boolean first \u003d true;\n        for(int i \u003d (sources.length  - 2); i \u003e\u003d 0; i--) {\n          if(!first) {\n            buffer.append(\" \u003c- \");\n          }\n          first \u003d false;\n          buffer.append(sources[i]);\n        }\n        tbody.\n          tr().\n            td(entry.getName()).\n            td(entry.getValue()).\n            td(buffer.toString()).\n          _();\n      }\n      tbody._().\n      tfoot().\n        tr().\n          th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\")._()._().\n          th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\")._()._().\n          th().input(\"search_init\").$type(InputType.text).$name(\"source chain\").$value(\"source chain\")._()._().\n          _().\n        _().\n      _();\n    } catch(IOException e) {\n      LOG.error(\"Error while reading \"+confPath, e);\n      html.p()._(\"Sorry got an error while reading conf file. \",confPath);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/ConfBlock.java",
      "extendedDetails": {}
    },
    "5ec44fc35c129d266edaebbc6fa17754a89b2ad6": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6553. Replace \u0027\\u2b05\u0027 with \u0027\u003c-\u0027 in rendering job configuration. Contributed by Gabor Liptak.\n",
      "commitDate": "24/11/15 11:30 PM",
      "commitName": "5ec44fc35c129d266edaebbc6fa17754a89b2ad6",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/07/12 6:39 AM",
      "commitNameOld": "a3e695ab2c512254e028c2001a72788f10e682fa",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 1211.74,
      "commitsBetweenForRepo": 8740,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,64 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job job \u003d appContext.getJob(jobID);\n     if (job \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     Path confPath \u003d job.getConfFile();\n     try {\n       ConfInfo info \u003d new ConfInfo(job);\n \n       html.div().h3(confPath.toString())._();\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n         // Tasks table\n       table(\"#conf\").\n         thead().\n           tr().\n             th(_TH, \"key\").\n             th(_TH, \"value\").\n             th(_TH, \"source chain\").\n           _().\n         _().\n       tbody();\n       for (ConfEntryInfo entry : info.getProperties()) {\n         StringBuffer buffer \u003d new StringBuffer();\n         String[] sources \u003d entry.getSource();\n         //Skip the last entry, because it is always the same HDFS file, and\n         // output them in reverse order so most recent is output first\n         boolean first \u003d true;\n         for(int i \u003d (sources.length  - 2); i \u003e\u003d 0; i--) {\n           if(!first) {\n-            // \\u2B05 is an arrow \u003c--\n-            buffer.append(\" \\u2B05 \");\n+            buffer.append(\" \u003c- \");\n           }\n           first \u003d false;\n           buffer.append(sources[i]);\n         }\n         tbody.\n           tr().\n             td(entry.getName()).\n             td(entry.getValue()).\n             td(buffer.toString()).\n           _();\n       }\n       tbody._().\n       tfoot().\n         tr().\n           th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\")._()._().\n           th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\")._()._().\n           th().input(\"search_init\").$type(InputType.text).$name(\"source chain\").$value(\"source chain\")._()._().\n           _().\n         _().\n       _();\n     } catch(IOException e) {\n       LOG.error(\"Error while reading \"+confPath, e);\n       html.p()._(\"Sorry got an error while reading conf file. \",confPath);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job job \u003d appContext.getJob(jobID);\n    if (job \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    Path confPath \u003d job.getConfFile();\n    try {\n      ConfInfo info \u003d new ConfInfo(job);\n\n      html.div().h3(confPath.toString())._();\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n        // Tasks table\n      table(\"#conf\").\n        thead().\n          tr().\n            th(_TH, \"key\").\n            th(_TH, \"value\").\n            th(_TH, \"source chain\").\n          _().\n        _().\n      tbody();\n      for (ConfEntryInfo entry : info.getProperties()) {\n        StringBuffer buffer \u003d new StringBuffer();\n        String[] sources \u003d entry.getSource();\n        //Skip the last entry, because it is always the same HDFS file, and\n        // output them in reverse order so most recent is output first\n        boolean first \u003d true;\n        for(int i \u003d (sources.length  - 2); i \u003e\u003d 0; i--) {\n          if(!first) {\n            buffer.append(\" \u003c- \");\n          }\n          first \u003d false;\n          buffer.append(sources[i]);\n        }\n        tbody.\n          tr().\n            td(entry.getName()).\n            td(entry.getValue()).\n            td(buffer.toString()).\n          _();\n      }\n      tbody._().\n      tfoot().\n        tr().\n          th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\")._()._().\n          th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\")._()._().\n          th().input(\"search_init\").$type(InputType.text).$name(\"source chain\").$value(\"source chain\")._()._().\n          _().\n        _().\n      _();\n    } catch(IOException e) {\n      LOG.error(\"Error while reading \"+confPath, e);\n      html.p()._(\"Sorry got an error while reading conf file. \",confPath);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/ConfBlock.java",
      "extendedDetails": {}
    },
    "a3e695ab2c512254e028c2001a72788f10e682fa": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4375. Show Configuration Tracability in MR UI (bobby via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1367539 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/12 6:39 AM",
      "commitName": "a3e695ab2c512254e028c2001a72788f10e682fa",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "17/04/12 6:59 PM",
      "commitNameOld": "7d04a96027ad75877b41b7cd8f67455dd13159d7",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 104.49,
      "commitsBetweenForRepo": 567,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,65 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job job \u003d appContext.getJob(jobID);\n     if (job \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     Path confPath \u003d job.getConfFile();\n     try {\n       ConfInfo info \u003d new ConfInfo(job);\n \n       html.div().h3(confPath.toString())._();\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n         // Tasks table\n       table(\"#conf\").\n         thead().\n           tr().\n             th(_TH, \"key\").\n             th(_TH, \"value\").\n+            th(_TH, \"source chain\").\n           _().\n         _().\n       tbody();\n       for (ConfEntryInfo entry : info.getProperties()) {\n+        StringBuffer buffer \u003d new StringBuffer();\n+        String[] sources \u003d entry.getSource();\n+        //Skip the last entry, because it is always the same HDFS file, and\n+        // output them in reverse order so most recent is output first\n+        boolean first \u003d true;\n+        for(int i \u003d (sources.length  - 2); i \u003e\u003d 0; i--) {\n+          if(!first) {\n+            // \\u2B05 is an arrow \u003c--\n+            buffer.append(\" \\u2B05 \");\n+          }\n+          first \u003d false;\n+          buffer.append(sources[i]);\n+        }\n         tbody.\n           tr().\n             td(entry.getName()).\n             td(entry.getValue()).\n+            td(buffer.toString()).\n           _();\n       }\n       tbody._().\n       tfoot().\n         tr().\n           th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\")._()._().\n           th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\")._()._().\n+          th().input(\"search_init\").$type(InputType.text).$name(\"source chain\").$value(\"source chain\")._()._().\n           _().\n         _().\n       _();\n     } catch(IOException e) {\n       LOG.error(\"Error while reading \"+confPath, e);\n       html.p()._(\"Sorry got an error while reading conf file. \",confPath);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job job \u003d appContext.getJob(jobID);\n    if (job \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    Path confPath \u003d job.getConfFile();\n    try {\n      ConfInfo info \u003d new ConfInfo(job);\n\n      html.div().h3(confPath.toString())._();\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n        // Tasks table\n      table(\"#conf\").\n        thead().\n          tr().\n            th(_TH, \"key\").\n            th(_TH, \"value\").\n            th(_TH, \"source chain\").\n          _().\n        _().\n      tbody();\n      for (ConfEntryInfo entry : info.getProperties()) {\n        StringBuffer buffer \u003d new StringBuffer();\n        String[] sources \u003d entry.getSource();\n        //Skip the last entry, because it is always the same HDFS file, and\n        // output them in reverse order so most recent is output first\n        boolean first \u003d true;\n        for(int i \u003d (sources.length  - 2); i \u003e\u003d 0; i--) {\n          if(!first) {\n            // \\u2B05 is an arrow \u003c--\n            buffer.append(\" \\u2B05 \");\n          }\n          first \u003d false;\n          buffer.append(sources[i]);\n        }\n        tbody.\n          tr().\n            td(entry.getName()).\n            td(entry.getValue()).\n            td(buffer.toString()).\n          _();\n      }\n      tbody._().\n      tfoot().\n        tr().\n          th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\")._()._().\n          th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\")._()._().\n          th().input(\"search_init\").$type(InputType.text).$name(\"source chain\").$value(\"source chain\")._()._().\n          _().\n        _().\n      _();\n    } catch(IOException e) {\n      LOG.error(\"Error while reading \"+confPath, e);\n      html.p()._(\"Sorry got an error while reading conf file. \",confPath);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/ConfBlock.java",
      "extendedDetails": {}
    },
    "7d04a96027ad75877b41b7cd8f67455dd13159d7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3972. Fix locking and exception issues in JobHistory server. (Contributed by Robert Joseph Evans)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327354 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/12 6:59 PM",
      "commitName": "7d04a96027ad75877b41b7cd8f67455dd13159d7",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "13/12/11 3:05 PM",
      "commitNameOld": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 126.12,
      "commitsBetweenForRepo": 923,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job job \u003d appContext.getJob(jobID);\n     if (job \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     Path confPath \u003d job.getConfFile();\n     try {\n-      ConfInfo info \u003d new ConfInfo(job, this.conf);\n+      ConfInfo info \u003d new ConfInfo(job);\n \n       html.div().h3(confPath.toString())._();\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n         // Tasks table\n       table(\"#conf\").\n         thead().\n           tr().\n             th(_TH, \"key\").\n             th(_TH, \"value\").\n           _().\n         _().\n       tbody();\n       for (ConfEntryInfo entry : info.getProperties()) {\n         tbody.\n           tr().\n             td(entry.getName()).\n             td(entry.getValue()).\n           _();\n       }\n       tbody._().\n       tfoot().\n         tr().\n           th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\")._()._().\n           th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\")._()._().\n           _().\n         _().\n       _();\n     } catch(IOException e) {\n       LOG.error(\"Error while reading \"+confPath, e);\n       html.p()._(\"Sorry got an error while reading conf file. \",confPath);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job job \u003d appContext.getJob(jobID);\n    if (job \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    Path confPath \u003d job.getConfFile();\n    try {\n      ConfInfo info \u003d new ConfInfo(job);\n\n      html.div().h3(confPath.toString())._();\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n        // Tasks table\n      table(\"#conf\").\n        thead().\n          tr().\n            th(_TH, \"key\").\n            th(_TH, \"value\").\n          _().\n        _().\n      tbody();\n      for (ConfEntryInfo entry : info.getProperties()) {\n        tbody.\n          tr().\n            td(entry.getName()).\n            td(entry.getValue()).\n          _();\n      }\n      tbody._().\n      tfoot().\n        tr().\n          th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\")._()._().\n          th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\")._()._().\n          _().\n        _().\n      _();\n    } catch(IOException e) {\n      LOG.error(\"Error while reading \"+confPath, e);\n      html.p()._(\"Sorry got an error while reading conf file. \",confPath);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/ConfBlock.java",
      "extendedDetails": {}
    },
    "0ea8570be578be60e2f32849900a1c50506d78d3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2863. Support web services for YARN and MR components. (Thomas Graves via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213975 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 3:05 PM",
      "commitName": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/09/11 3:55 PM",
      "commitNameOld": "a3e8f6836b489f8f2ddd785ae038df729c85059f",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 91.01,
      "commitsBetweenForRepo": 635,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,49 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job job \u003d appContext.getJob(jobID);\n     if (job \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     Path confPath \u003d job.getConfFile();\n     try {\n-      //Read in the configuration file and put it in a key/value table.\n-      FileContext fc \u003d FileContext.getFileContext(confPath.toUri(), conf);\n-      Configuration jobConf \u003d new Configuration(false);\n-      jobConf.addResource(fc.open(confPath));\n-    \n+      ConfInfo info \u003d new ConfInfo(job, this.conf);\n+\n       html.div().h3(confPath.toString())._();\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n         // Tasks table\n       table(\"#conf\").\n         thead().\n           tr().\n             th(_TH, \"key\").\n             th(_TH, \"value\").\n           _().\n         _().\n       tbody();\n-      for(Map.Entry\u003cString, String\u003e entry : jobConf) {\n+      for (ConfEntryInfo entry : info.getProperties()) {\n         tbody.\n           tr().\n-            td(entry.getKey()).\n+            td(entry.getName()).\n             td(entry.getValue()).\n           _();\n       }\n       tbody._().\n       tfoot().\n         tr().\n           th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\")._()._().\n           th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\")._()._().\n           _().\n         _().\n       _();\n     } catch(IOException e) {\n       LOG.error(\"Error while reading \"+confPath, e);\n       html.p()._(\"Sorry got an error while reading conf file. \",confPath);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job job \u003d appContext.getJob(jobID);\n    if (job \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    Path confPath \u003d job.getConfFile();\n    try {\n      ConfInfo info \u003d new ConfInfo(job, this.conf);\n\n      html.div().h3(confPath.toString())._();\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n        // Tasks table\n      table(\"#conf\").\n        thead().\n          tr().\n            th(_TH, \"key\").\n            th(_TH, \"value\").\n          _().\n        _().\n      tbody();\n      for (ConfEntryInfo entry : info.getProperties()) {\n        tbody.\n          tr().\n            td(entry.getName()).\n            td(entry.getValue()).\n          _();\n      }\n      tbody._().\n      tfoot().\n        tr().\n          th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\")._()._().\n          th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\")._()._().\n          _().\n        _().\n      _();\n    } catch(IOException e) {\n      LOG.error(\"Error while reading \"+confPath, e);\n      html.p()._(\"Sorry got an error while reading conf file. \",confPath);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/ConfBlock.java",
      "extendedDetails": {}
    },
    "a3e8f6836b489f8f2ddd785ae038df729c85059f": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2676. MR-279: JobHistory Job page needs reformatted. (Robert Evans via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1170379 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/09/11 3:55 PM",
      "commitName": "a3e8f6836b489f8f2ddd785ae038df729c85059f",
      "commitAuthor": "Mahadev Konar",
      "diff": "@@ -0,0 +1,52 @@\n+  @Override protected void render(Block html) {\n+    String jid \u003d $(JOB_ID);\n+    if (jid.isEmpty()) {\n+      html.\n+        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n+      return;\n+    }\n+    JobId jobID \u003d MRApps.toJobID(jid);\n+    Job job \u003d appContext.getJob(jobID);\n+    if (job \u003d\u003d null) {\n+      html.\n+        p()._(\"Sorry, \", jid, \" not found.\")._();\n+      return;\n+    }\n+    Path confPath \u003d job.getConfFile();\n+    try {\n+      //Read in the configuration file and put it in a key/value table.\n+      FileContext fc \u003d FileContext.getFileContext(confPath.toUri(), conf);\n+      Configuration jobConf \u003d new Configuration(false);\n+      jobConf.addResource(fc.open(confPath));\n+    \n+      html.div().h3(confPath.toString())._();\n+      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n+        // Tasks table\n+      table(\"#conf\").\n+        thead().\n+          tr().\n+            th(_TH, \"key\").\n+            th(_TH, \"value\").\n+          _().\n+        _().\n+      tbody();\n+      for(Map.Entry\u003cString, String\u003e entry : jobConf) {\n+        tbody.\n+          tr().\n+            td(entry.getKey()).\n+            td(entry.getValue()).\n+          _();\n+      }\n+      tbody._().\n+      tfoot().\n+        tr().\n+          th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\")._()._().\n+          th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\")._()._().\n+          _().\n+        _().\n+      _();\n+    } catch(IOException e) {\n+      LOG.error(\"Error while reading \"+confPath, e);\n+      html.p()._(\"Sorry got an error while reading conf file. \",confPath);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job job \u003d appContext.getJob(jobID);\n    if (job \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    Path confPath \u003d job.getConfFile();\n    try {\n      //Read in the configuration file and put it in a key/value table.\n      FileContext fc \u003d FileContext.getFileContext(confPath.toUri(), conf);\n      Configuration jobConf \u003d new Configuration(false);\n      jobConf.addResource(fc.open(confPath));\n    \n      html.div().h3(confPath.toString())._();\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n        // Tasks table\n      table(\"#conf\").\n        thead().\n          tr().\n            th(_TH, \"key\").\n            th(_TH, \"value\").\n          _().\n        _().\n      tbody();\n      for(Map.Entry\u003cString, String\u003e entry : jobConf) {\n        tbody.\n          tr().\n            td(entry.getKey()).\n            td(entry.getValue()).\n          _();\n      }\n      tbody._().\n      tfoot().\n        tr().\n          th().input(\"search_init\").$type(InputType.text).$name(\"key\").$value(\"key\")._()._().\n          th().input(\"search_init\").$type(InputType.text).$name(\"value\").$value(\"value\")._()._().\n          _().\n        _().\n      _();\n    } catch(IOException e) {\n      LOG.error(\"Error while reading \"+confPath, e);\n      html.p()._(\"Sorry got an error while reading conf file. \",confPath);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/webapp/ConfBlock.java"
    }
  }
}