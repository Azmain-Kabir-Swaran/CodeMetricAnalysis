{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueueManager.java",
  "functionName": "refreshQueues",
  "functionId": "refreshQueues___conf-Configuration__schedulerRefresher-QueueRefresher",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/QueueManager.java",
  "functionStartLine": 337,
  "functionEndLine": 390,
  "numCommitsSeen": 8,
  "timeTaken": 9222,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymovefromfile",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void refreshQueues(Configuration conf,\n      QueueRefresher schedulerRefresher)\n      throws IOException {\n\n    // Create a new configuration parser using the passed conf object.\n    QueueConfigurationParser cp \u003d\n        getQueueConfigurationParser(conf, true, areAclsEnabled);\n\n    /*\n     * (1) Validate the refresh of properties owned by QueueManager. As of now,\n     * while refreshing queue properties, we only check that the hierarchy is\n     * the same w.r.t queue names, ACLs and state for each queue and don\u0027t\n     * support adding new queues or removing old queues\n     */\n    if (!root.isHierarchySameAs(cp.getRoot())) {\n      LOG.warn(MSG_REFRESH_FAILURE_WITH_CHANGE_OF_HIERARCHY);\n      throw new IOException(MSG_REFRESH_FAILURE_WITH_CHANGE_OF_HIERARCHY);\n    }\n\n    /*\n     * (2) QueueManager owned properties are validated. Now validate and\n     * refresh the properties of scheduler in a single step.\n     */\n    if (schedulerRefresher !\u003d null) {\n      try {\n        schedulerRefresher.refreshQueues(cp.getRoot().getJobQueueInfo().getChildren());\n      } catch (Throwable e) {\n        StringBuilder msg \u003d\n            new StringBuilder(\n                \"Scheduler\u0027s refresh-queues failed with the exception : \"\n                    + StringUtils.stringifyException(e));\n        msg.append(\"\\n\");\n        msg.append(MSG_REFRESH_FAILURE_WITH_SCHEDULER_FAILURE);\n        LOG.error(msg.toString());\n        throw new IOException(msg.toString());\n      }\n    }\n\n    /*\n     * (3) Scheduler has validated and refreshed its queues successfully, now\n     * refresh the properties owned by QueueManager\n     */\n\n    // First copy the scheduling information recursively into the new\n    // queue-hierarchy. This is done to retain old scheduling information. This\n    // is done after scheduler refresh and not before it because during refresh,\n    // schedulers may wish to change their scheduling info objects too.\n    cp.getRoot().copySchedulingInfo(this.root);\n\n    // Now switch roots.\n    initialize(cp);\n\n    LOG.info(\"Queue configuration is refreshed successfully.\");\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/QueueManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/QueueManager.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/QueueManager.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void refreshQueues(Configuration conf,\n      QueueRefresher schedulerRefresher)\n      throws IOException {\n\n    // Create a new configuration parser using the passed conf object.\n    QueueConfigurationParser cp \u003d\n        getQueueConfigurationParser(conf, true, areAclsEnabled);\n\n    /*\n     * (1) Validate the refresh of properties owned by QueueManager. As of now,\n     * while refreshing queue properties, we only check that the hierarchy is\n     * the same w.r.t queue names, ACLs and state for each queue and don\u0027t\n     * support adding new queues or removing old queues\n     */\n    if (!root.isHierarchySameAs(cp.getRoot())) {\n      LOG.warn(MSG_REFRESH_FAILURE_WITH_CHANGE_OF_HIERARCHY);\n      throw new IOException(MSG_REFRESH_FAILURE_WITH_CHANGE_OF_HIERARCHY);\n    }\n\n    /*\n     * (2) QueueManager owned properties are validated. Now validate and\n     * refresh the properties of scheduler in a single step.\n     */\n    if (schedulerRefresher !\u003d null) {\n      try {\n        schedulerRefresher.refreshQueues(cp.getRoot().getJobQueueInfo().getChildren());\n      } catch (Throwable e) {\n        StringBuilder msg \u003d\n            new StringBuilder(\n                \"Scheduler\u0027s refresh-queues failed with the exception : \"\n                    + StringUtils.stringifyException(e));\n        msg.append(\"\\n\");\n        msg.append(MSG_REFRESH_FAILURE_WITH_SCHEDULER_FAILURE);\n        LOG.error(msg.toString());\n        throw new IOException(msg.toString());\n      }\n    }\n\n    /*\n     * (3) Scheduler has validated and refreshed its queues successfully, now\n     * refresh the properties owned by QueueManager\n     */\n\n    // First copy the scheduling information recursively into the new\n    // queue-hierarchy. This is done to retain old scheduling information. This\n    // is done after scheduler refresh and not before it because during refresh,\n    // schedulers may wish to change their scheduling info objects too.\n    cp.getRoot().copySchedulingInfo(this.root);\n\n    // Now switch roots.\n    initialize(cp);\n\n    LOG.info(\"Queue configuration is refreshed successfully.\");\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/QueueManager.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/QueueManager.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/QueueManager.java",
        "oldMethodName": "refreshQueues",
        "newMethodName": "refreshQueues"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,54 @@\n+  synchronized void refreshQueues(Configuration conf,\n+      QueueRefresher schedulerRefresher)\n+      throws IOException {\n+\n+    // Create a new configuration parser using the passed conf object.\n+    QueueConfigurationParser cp \u003d\n+        getQueueConfigurationParser(conf, true, areAclsEnabled);\n+\n+    /*\n+     * (1) Validate the refresh of properties owned by QueueManager. As of now,\n+     * while refreshing queue properties, we only check that the hierarchy is\n+     * the same w.r.t queue names, ACLs and state for each queue and don\u0027t\n+     * support adding new queues or removing old queues\n+     */\n+    if (!root.isHierarchySameAs(cp.getRoot())) {\n+      LOG.warn(MSG_REFRESH_FAILURE_WITH_CHANGE_OF_HIERARCHY);\n+      throw new IOException(MSG_REFRESH_FAILURE_WITH_CHANGE_OF_HIERARCHY);\n+    }\n+\n+    /*\n+     * (2) QueueManager owned properties are validated. Now validate and\n+     * refresh the properties of scheduler in a single step.\n+     */\n+    if (schedulerRefresher !\u003d null) {\n+      try {\n+        schedulerRefresher.refreshQueues(cp.getRoot().getJobQueueInfo().getChildren());\n+      } catch (Throwable e) {\n+        StringBuilder msg \u003d\n+            new StringBuilder(\n+                \"Scheduler\u0027s refresh-queues failed with the exception : \"\n+                    + StringUtils.stringifyException(e));\n+        msg.append(\"\\n\");\n+        msg.append(MSG_REFRESH_FAILURE_WITH_SCHEDULER_FAILURE);\n+        LOG.error(msg.toString());\n+        throw new IOException(msg.toString());\n+      }\n+    }\n+\n+    /*\n+     * (3) Scheduler has validated and refreshed its queues successfully, now\n+     * refresh the properties owned by QueueManager\n+     */\n+\n+    // First copy the scheduling information recursively into the new\n+    // queue-hierarchy. This is done to retain old scheduling information. This\n+    // is done after scheduler refresh and not before it because during refresh,\n+    // schedulers may wish to change their scheduling info objects too.\n+    cp.getRoot().copySchedulingInfo(this.root);\n+\n+    // Now switch roots.\n+    initialize(cp);\n+\n+    LOG.info(\"Queue configuration is refreshed successfully.\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void refreshQueues(Configuration conf,\n      QueueRefresher schedulerRefresher)\n      throws IOException {\n\n    // Create a new configuration parser using the passed conf object.\n    QueueConfigurationParser cp \u003d\n        getQueueConfigurationParser(conf, true, areAclsEnabled);\n\n    /*\n     * (1) Validate the refresh of properties owned by QueueManager. As of now,\n     * while refreshing queue properties, we only check that the hierarchy is\n     * the same w.r.t queue names, ACLs and state for each queue and don\u0027t\n     * support adding new queues or removing old queues\n     */\n    if (!root.isHierarchySameAs(cp.getRoot())) {\n      LOG.warn(MSG_REFRESH_FAILURE_WITH_CHANGE_OF_HIERARCHY);\n      throw new IOException(MSG_REFRESH_FAILURE_WITH_CHANGE_OF_HIERARCHY);\n    }\n\n    /*\n     * (2) QueueManager owned properties are validated. Now validate and\n     * refresh the properties of scheduler in a single step.\n     */\n    if (schedulerRefresher !\u003d null) {\n      try {\n        schedulerRefresher.refreshQueues(cp.getRoot().getJobQueueInfo().getChildren());\n      } catch (Throwable e) {\n        StringBuilder msg \u003d\n            new StringBuilder(\n                \"Scheduler\u0027s refresh-queues failed with the exception : \"\n                    + StringUtils.stringifyException(e));\n        msg.append(\"\\n\");\n        msg.append(MSG_REFRESH_FAILURE_WITH_SCHEDULER_FAILURE);\n        LOG.error(msg.toString());\n        throw new IOException(msg.toString());\n      }\n    }\n\n    /*\n     * (3) Scheduler has validated and refreshed its queues successfully, now\n     * refresh the properties owned by QueueManager\n     */\n\n    // First copy the scheduling information recursively into the new\n    // queue-hierarchy. This is done to retain old scheduling information. This\n    // is done after scheduler refresh and not before it because during refresh,\n    // schedulers may wish to change their scheduling info objects too.\n    cp.getRoot().copySchedulingInfo(this.root);\n\n    // Now switch roots.\n    initialize(cp);\n\n    LOG.info(\"Queue configuration is refreshed successfully.\");\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/QueueManager.java"
    }
  }
}