{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CgroupsLCEResourcesHandler.java",
  "functionName": "parseMtab",
  "functionId": "parseMtab",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
  "functionStartLine": 398,
  "functionEndLine": 433,
  "numCommitsSeen": 22,
  "timeTaken": 2565,
  "changeHistory": [
    "d5ff57a08fac983f8b5d201064ce07945f0f216e",
    "47b145b9b4e81d781891abce8a6638f0b436acc4",
    "a2f680493f040704e2b85108e286731ee3860a52",
    "41a548a916d4248164cb9495320f123ec215d70e",
    "4be95175cdb58ff12a27ab443d609d3b46da7bfa",
    "5032a694ed250f65ade8c2b62c97b89ab45f53ea"
  ],
  "changeHistoryShort": {
    "d5ff57a08fac983f8b5d201064ce07945f0f216e": "Ybodychange",
    "47b145b9b4e81d781891abce8a6638f0b436acc4": "Ybodychange",
    "a2f680493f040704e2b85108e286731ee3860a52": "Ymultichange(Yreturntypechange,Ybodychange)",
    "41a548a916d4248164cb9495320f123ec215d70e": "Ybodychange",
    "4be95175cdb58ff12a27ab443d609d3b46da7bfa": "Ybodychange",
    "5032a694ed250f65ade8c2b62c97b89ab45f53ea": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d5ff57a08fac983f8b5d201064ce07945f0f216e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7047. Moving logging APIs over to slf4j in hadoop-yarn-server-nodemanager. Contributed by Yeliang Cang.\n",
      "commitDate": "22/08/17 1:14 AM",
      "commitName": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "08/08/17 10:33 AM",
      "commitNameOld": "47b145b9b4e81d781891abce8a6638f0b436acc4",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 13.61,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private Map\u003cString, Set\u003cString\u003e\u003e parseMtab() throws IOException {\n     Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, Set\u003cString\u003e\u003e();\n     BufferedReader in \u003d null;\n     Set\u003cString\u003e validCgroups \u003d\n         CGroupsHandler.CGroupController.getValidCGroups();\n \n     try {\n       FileInputStream fis \u003d new FileInputStream(new File(getMtabFileName()));\n       in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n       for (String str \u003d in.readLine(); str !\u003d null;\n           str \u003d in.readLine()) {\n         Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n         boolean mat \u003d m.find();\n         if (mat) {\n           String path \u003d m.group(1);\n           String type \u003d m.group(2);\n           String options \u003d m.group(3);\n \n           if (type.equals(CGROUPS_FSTYPE)) {\n             Set\u003cString\u003e cgroupList \u003d\n                 new HashSet\u003c\u003e(Arrays.asList(options.split(\",\")));\n             // Collect the valid subsystem names\n             cgroupList.retainAll(validCgroups);\n             ret.put(path, cgroupList);\n           }\n         }\n       }\n     } catch (IOException e) {\n       throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n     } finally {\n-      IOUtils.cleanup(LOG, in);\n+      IOUtils.cleanupWithLogger(LOG, in);\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Set\u003cString\u003e\u003e parseMtab() throws IOException {\n    Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, Set\u003cString\u003e\u003e();\n    BufferedReader in \u003d null;\n    Set\u003cString\u003e validCgroups \u003d\n        CGroupsHandler.CGroupController.getValidCGroups();\n\n    try {\n      FileInputStream fis \u003d new FileInputStream(new File(getMtabFileName()));\n      in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n      for (String str \u003d in.readLine(); str !\u003d null;\n          str \u003d in.readLine()) {\n        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n        boolean mat \u003d m.find();\n        if (mat) {\n          String path \u003d m.group(1);\n          String type \u003d m.group(2);\n          String options \u003d m.group(3);\n\n          if (type.equals(CGROUPS_FSTYPE)) {\n            Set\u003cString\u003e cgroupList \u003d\n                new HashSet\u003c\u003e(Arrays.asList(options.split(\",\")));\n            // Collect the valid subsystem names\n            cgroupList.retainAll(validCgroups);\n            ret.put(path, cgroupList);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, in);\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
      "extendedDetails": {}
    },
    "47b145b9b4e81d781891abce8a6638f0b436acc4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6757. Refactor the usage of yarn.nodemanager.linux-container-executor.cgroups.mount-path\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "08/08/17 10:33 AM",
      "commitName": "47b145b9b4e81d781891abce8a6638f0b436acc4",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "09/05/17 12:05 PM",
      "commitNameOld": "a2f680493f040704e2b85108e286731ee3860a52",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 90.94,
      "commitsBetweenForRepo": 509,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,36 @@\n   private Map\u003cString, Set\u003cString\u003e\u003e parseMtab() throws IOException {\n     Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, Set\u003cString\u003e\u003e();\n     BufferedReader in \u003d null;\n+    Set\u003cString\u003e validCgroups \u003d\n+        CGroupsHandler.CGroupController.getValidCGroups();\n \n     try {\n       FileInputStream fis \u003d new FileInputStream(new File(getMtabFileName()));\n       in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n       for (String str \u003d in.readLine(); str !\u003d null;\n           str \u003d in.readLine()) {\n         Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n         boolean mat \u003d m.find();\n         if (mat) {\n           String path \u003d m.group(1);\n           String type \u003d m.group(2);\n           String options \u003d m.group(3);\n \n           if (type.equals(CGROUPS_FSTYPE)) {\n-            HashSet\u003cString\u003e value \u003d Sets.newHashSet(options.split(\",\"));\n-            ret.put(path, value);\n+            Set\u003cString\u003e cgroupList \u003d\n+                new HashSet\u003c\u003e(Arrays.asList(options.split(\",\")));\n+            // Collect the valid subsystem names\n+            cgroupList.retainAll(validCgroups);\n+            ret.put(path, cgroupList);\n           }\n         }\n       }\n     } catch (IOException e) {\n       throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n     } finally {\n       IOUtils.cleanup(LOG, in);\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Set\u003cString\u003e\u003e parseMtab() throws IOException {\n    Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, Set\u003cString\u003e\u003e();\n    BufferedReader in \u003d null;\n    Set\u003cString\u003e validCgroups \u003d\n        CGroupsHandler.CGroupController.getValidCGroups();\n\n    try {\n      FileInputStream fis \u003d new FileInputStream(new File(getMtabFileName()));\n      in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n      for (String str \u003d in.readLine(); str !\u003d null;\n          str \u003d in.readLine()) {\n        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n        boolean mat \u003d m.find();\n        if (mat) {\n          String path \u003d m.group(1);\n          String type \u003d m.group(2);\n          String options \u003d m.group(3);\n\n          if (type.equals(CGROUPS_FSTYPE)) {\n            Set\u003cString\u003e cgroupList \u003d\n                new HashSet\u003c\u003e(Arrays.asList(options.split(\",\")));\n            // Collect the valid subsystem names\n            cgroupList.retainAll(validCgroups);\n            ret.put(path, cgroupList);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n    } finally {\n      IOUtils.cleanup(LOG, in);\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
      "extendedDetails": {}
    },
    "a2f680493f040704e2b85108e286731ee3860a52": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-5301. NM mount cpu cgroups failed on some systems\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "09/05/17 12:05 PM",
      "commitName": "a2f680493f040704e2b85108e286731ee3860a52",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5301. NM mount cpu cgroups failed on some systems\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
          "commitDate": "09/05/17 12:05 PM",
          "commitName": "a2f680493f040704e2b85108e286731ee3860a52",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "24/04/17 11:37 AM",
          "commitNameOld": "8ac50e1322cb3f84bd998635924d85846aa47c94",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 15.02,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private Map\u003cString, List\u003cString\u003e\u003e parseMtab() throws IOException {\n-    Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n+  private Map\u003cString, Set\u003cString\u003e\u003e parseMtab() throws IOException {\n+    Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, Set\u003cString\u003e\u003e();\n     BufferedReader in \u003d null;\n \n     try {\n       FileInputStream fis \u003d new FileInputStream(new File(getMtabFileName()));\n       in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n       for (String str \u003d in.readLine(); str !\u003d null;\n           str \u003d in.readLine()) {\n         Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n         boolean mat \u003d m.find();\n         if (mat) {\n           String path \u003d m.group(1);\n           String type \u003d m.group(2);\n           String options \u003d m.group(3);\n \n           if (type.equals(CGROUPS_FSTYPE)) {\n-            List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n+            HashSet\u003cString\u003e value \u003d Sets.newHashSet(options.split(\",\"));\n             ret.put(path, value);\n           }\n         }\n       }\n     } catch (IOException e) {\n       throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n     } finally {\n       IOUtils.cleanup(LOG, in);\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cString, Set\u003cString\u003e\u003e parseMtab() throws IOException {\n    Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, Set\u003cString\u003e\u003e();\n    BufferedReader in \u003d null;\n\n    try {\n      FileInputStream fis \u003d new FileInputStream(new File(getMtabFileName()));\n      in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n      for (String str \u003d in.readLine(); str !\u003d null;\n          str \u003d in.readLine()) {\n        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n        boolean mat \u003d m.find();\n        if (mat) {\n          String path \u003d m.group(1);\n          String type \u003d m.group(2);\n          String options \u003d m.group(3);\n\n          if (type.equals(CGROUPS_FSTYPE)) {\n            HashSet\u003cString\u003e value \u003d Sets.newHashSet(options.split(\",\"));\n            ret.put(path, value);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n    } finally {\n      IOUtils.cleanup(LOG, in);\n    }\n\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
          "extendedDetails": {
            "oldValue": "Map\u003cString,List\u003cString\u003e\u003e",
            "newValue": "Map\u003cString,Set\u003cString\u003e\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5301. NM mount cpu cgroups failed on some systems\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
          "commitDate": "09/05/17 12:05 PM",
          "commitName": "a2f680493f040704e2b85108e286731ee3860a52",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "24/04/17 11:37 AM",
          "commitNameOld": "8ac50e1322cb3f84bd998635924d85846aa47c94",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 15.02,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private Map\u003cString, List\u003cString\u003e\u003e parseMtab() throws IOException {\n-    Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n+  private Map\u003cString, Set\u003cString\u003e\u003e parseMtab() throws IOException {\n+    Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, Set\u003cString\u003e\u003e();\n     BufferedReader in \u003d null;\n \n     try {\n       FileInputStream fis \u003d new FileInputStream(new File(getMtabFileName()));\n       in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n       for (String str \u003d in.readLine(); str !\u003d null;\n           str \u003d in.readLine()) {\n         Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n         boolean mat \u003d m.find();\n         if (mat) {\n           String path \u003d m.group(1);\n           String type \u003d m.group(2);\n           String options \u003d m.group(3);\n \n           if (type.equals(CGROUPS_FSTYPE)) {\n-            List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n+            HashSet\u003cString\u003e value \u003d Sets.newHashSet(options.split(\",\"));\n             ret.put(path, value);\n           }\n         }\n       }\n     } catch (IOException e) {\n       throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n     } finally {\n       IOUtils.cleanup(LOG, in);\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cString, Set\u003cString\u003e\u003e parseMtab() throws IOException {\n    Map\u003cString, Set\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, Set\u003cString\u003e\u003e();\n    BufferedReader in \u003d null;\n\n    try {\n      FileInputStream fis \u003d new FileInputStream(new File(getMtabFileName()));\n      in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n      for (String str \u003d in.readLine(); str !\u003d null;\n          str \u003d in.readLine()) {\n        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n        boolean mat \u003d m.find();\n        if (mat) {\n          String path \u003d m.group(1);\n          String type \u003d m.group(2);\n          String options \u003d m.group(3);\n\n          if (type.equals(CGROUPS_FSTYPE)) {\n            HashSet\u003cString\u003e value \u003d Sets.newHashSet(options.split(\",\"));\n            ret.put(path, value);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n    } finally {\n      IOUtils.cleanup(LOG, in);\n    }\n\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "41a548a916d4248164cb9495320f123ec215d70e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2937. Fixed new findbugs warnings in hadoop-yarn-nodemanager. Contributed by Varun Saxena.\n",
      "commitDate": "23/12/14 8:32 PM",
      "commitName": "41a548a916d4248164cb9495320f123ec215d70e",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "16/09/14 10:14 AM",
      "commitNameOld": "9f6891d9ef7064d121305ca783eb62586c8aa018",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 98.47,
      "commitsBetweenForRepo": 893,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,31 @@\n   private Map\u003cString, List\u003cString\u003e\u003e parseMtab() throws IOException {\n     Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n     BufferedReader in \u003d null;\n \n     try {\n-      in \u003d new BufferedReader(new FileReader(new File(getMtabFileName())));\n+      FileInputStream fis \u003d new FileInputStream(new File(getMtabFileName()));\n+      in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n       for (String str \u003d in.readLine(); str !\u003d null;\n           str \u003d in.readLine()) {\n         Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n         boolean mat \u003d m.find();\n         if (mat) {\n           String path \u003d m.group(1);\n           String type \u003d m.group(2);\n           String options \u003d m.group(3);\n \n           if (type.equals(CGROUPS_FSTYPE)) {\n             List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n             ret.put(path, value);\n           }\n         }\n       }\n     } catch (IOException e) {\n       throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n     } finally {\n-      // Close the streams\n-      try {\n-        in.close();\n-      } catch (IOException e2) {\n-        LOG.warn(\"Error closing the stream: \" + getMtabFileName(), e2);\n-      }\n+      IOUtils.cleanup(LOG, in);\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, List\u003cString\u003e\u003e parseMtab() throws IOException {\n    Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n    BufferedReader in \u003d null;\n\n    try {\n      FileInputStream fis \u003d new FileInputStream(new File(getMtabFileName()));\n      in \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n      for (String str \u003d in.readLine(); str !\u003d null;\n          str \u003d in.readLine()) {\n        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n        boolean mat \u003d m.find();\n        if (mat) {\n          String path \u003d m.group(1);\n          String type \u003d m.group(2);\n          String options \u003d m.group(3);\n\n          if (type.equals(CGROUPS_FSTYPE)) {\n            List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n            ret.put(path, value);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n    } finally {\n      IOUtils.cleanup(LOG, in);\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
      "extendedDetails": {}
    },
    "4be95175cdb58ff12a27ab443d609d3b46da7bfa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2440. Enabled Nodemanagers to limit the aggregate cpu usage across all containers to a preconfigured limit. Contributed by Varun Vasudev.\n",
      "commitDate": "10/09/14 7:22 PM",
      "commitName": "4be95175cdb58ff12a27ab443d609d3b46da7bfa",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "08/10/13 10:05 PM",
      "commitNameOld": "726c3538a7f0087fe99157019c2b90198de06ec7",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 336.89,
      "commitsBetweenForRepo": 2359,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   private Map\u003cString, List\u003cString\u003e\u003e parseMtab() throws IOException {\n     Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n     BufferedReader in \u003d null;\n \n     try {\n-      in \u003d new BufferedReader(new FileReader(new File(MTAB_FILE)));\n+      in \u003d new BufferedReader(new FileReader(new File(getMtabFileName())));\n \n       for (String str \u003d in.readLine(); str !\u003d null;\n           str \u003d in.readLine()) {\n         Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n         boolean mat \u003d m.find();\n         if (mat) {\n           String path \u003d m.group(1);\n           String type \u003d m.group(2);\n           String options \u003d m.group(3);\n \n           if (type.equals(CGROUPS_FSTYPE)) {\n             List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n             ret.put(path, value);\n           }\n         }\n       }\n     } catch (IOException e) {\n-      throw new IOException(\"Error while reading \" + MTAB_FILE, e);\n+      throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n     } finally {\n       // Close the streams\n       try {\n         in.close();\n       } catch (IOException e2) {\n-        LOG.warn(\"Error closing the stream: \" + MTAB_FILE, e2);\n+        LOG.warn(\"Error closing the stream: \" + getMtabFileName(), e2);\n       }\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, List\u003cString\u003e\u003e parseMtab() throws IOException {\n    Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n    BufferedReader in \u003d null;\n\n    try {\n      in \u003d new BufferedReader(new FileReader(new File(getMtabFileName())));\n\n      for (String str \u003d in.readLine(); str !\u003d null;\n          str \u003d in.readLine()) {\n        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n        boolean mat \u003d m.find();\n        if (mat) {\n          String path \u003d m.group(1);\n          String type \u003d m.group(2);\n          String options \u003d m.group(3);\n\n          if (type.equals(CGROUPS_FSTYPE)) {\n            List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n            ret.put(path, value);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new IOException(\"Error while reading \" + getMtabFileName(), e);\n    } finally {\n      // Close the streams\n      try {\n        in.close();\n      } catch (IOException e2) {\n        LOG.warn(\"Error closing the stream: \" + getMtabFileName(), e2);\n      }\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
      "extendedDetails": {}
    },
    "5032a694ed250f65ade8c2b62c97b89ab45f53ea": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3. Add support for CPU isolation/monitoring of containers. (adferguson via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1423706 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/12 2:58 PM",
      "commitName": "5032a694ed250f65ade8c2b62c97b89ab45f53ea",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,35 @@\n+  private Map\u003cString, List\u003cString\u003e\u003e parseMtab() throws IOException {\n+    Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n+    BufferedReader in \u003d null;\n+\n+    try {\n+      in \u003d new BufferedReader(new FileReader(new File(MTAB_FILE)));\t\n+    \t\n+      for (String str \u003d in.readLine(); str !\u003d null;\n+          str \u003d in.readLine()) {\n+        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n+        boolean mat \u003d m.find();\n+        if (mat) {\n+          String path \u003d m.group(1);\n+          String type \u003d m.group(2);\n+          String options \u003d m.group(3);\n+\n+          if (type.equals(CGROUPS_FSTYPE)) {\n+            List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n+            ret.put(path, value);\n+          }\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new IOException(\"Error while reading \" + MTAB_FILE, e);\n+    } finally {\n+      // Close the streams\n+      try {\n+        in.close();\n+      } catch (IOException e2) {\n+        LOG.warn(\"Error closing the stream: \" + MTAB_FILE, e2);\n+      }\n+    }\n+\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, List\u003cString\u003e\u003e parseMtab() throws IOException {\n    Map\u003cString, List\u003cString\u003e\u003e ret \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n    BufferedReader in \u003d null;\n\n    try {\n      in \u003d new BufferedReader(new FileReader(new File(MTAB_FILE)));\t\n    \t\n      for (String str \u003d in.readLine(); str !\u003d null;\n          str \u003d in.readLine()) {\n        Matcher m \u003d MTAB_FILE_FORMAT.matcher(str);\n        boolean mat \u003d m.find();\n        if (mat) {\n          String path \u003d m.group(1);\n          String type \u003d m.group(2);\n          String options \u003d m.group(3);\n\n          if (type.equals(CGROUPS_FSTYPE)) {\n            List\u003cString\u003e value \u003d Arrays.asList(options.split(\",\"));\n            ret.put(path, value);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new IOException(\"Error while reading \" + MTAB_FILE, e);\n    } finally {\n      // Close the streams\n      try {\n        in.close();\n      } catch (IOException e2) {\n        LOG.warn(\"Error closing the stream: \" + MTAB_FILE, e2);\n      }\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java"
    }
  }
}