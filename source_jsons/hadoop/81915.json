{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZKCuratorManager.java",
  "functionName": "start",
  "functionId": "start___authInfos-List__AuthInfo__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/curator/ZKCuratorManager.java",
  "functionStartLine": 123,
  "functionEndLine": 158,
  "numCommitsSeen": 7,
  "timeTaken": 907,
  "changeHistory": [
    "bbbf0e2a4136b30cad9dfd36ef138650a1adea60"
  ],
  "changeHistoryShort": {
    "bbbf0e2a4136b30cad9dfd36ef138650a1adea60": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bbbf0e2a4136b30cad9dfd36ef138650a1adea60": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14741. Refactor curator based ZooKeeper communication into common library. (Íñigo Goiri via Subru).\n",
      "commitDate": "11/08/17 1:58 PM",
      "commitName": "bbbf0e2a4136b30cad9dfd36ef138650a1adea60",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,36 @@\n+  public void start(List\u003cAuthInfo\u003e authInfos) throws IOException {\n+\n+    // Connect to the ZooKeeper ensemble\n+    String zkHostPort \u003d conf.get(CommonConfigurationKeys.ZK_ADDRESS);\n+    if (zkHostPort \u003d\u003d null) {\n+      throw new IOException(\n+          CommonConfigurationKeys.ZK_ADDRESS + \" is not configured.\");\n+    }\n+    int numRetries \u003d conf.getInt(CommonConfigurationKeys.ZK_NUM_RETRIES,\n+        CommonConfigurationKeys.ZK_NUM_RETRIES_DEFAULT);\n+    int zkSessionTimeout \u003d conf.getInt(CommonConfigurationKeys.ZK_TIMEOUT_MS,\n+        CommonConfigurationKeys.ZK_TIMEOUT_MS_DEFAULT);\n+    int zkRetryInterval \u003d conf.getInt(\n+        CommonConfigurationKeys.ZK_RETRY_INTERVAL_MS,\n+        CommonConfigurationKeys.ZK_RETRY_INTERVAL_MS_DEFAULT);\n+    RetryNTimes retryPolicy \u003d new RetryNTimes(numRetries, zkRetryInterval);\n+\n+    // Set up ZK auths\n+    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d getZKAuths(conf);\n+    if (authInfos \u003d\u003d null) {\n+      authInfos \u003d new ArrayList\u003c\u003e();\n+    }\n+    for (ZKUtil.ZKAuthInfo zkAuth : zkAuths) {\n+      authInfos.add(new AuthInfo(zkAuth.getScheme(), zkAuth.getAuth()));\n+    }\n+\n+    CuratorFramework client \u003d CuratorFrameworkFactory.builder()\n+        .connectString(zkHostPort)\n+        .sessionTimeoutMs(zkSessionTimeout)\n+        .retryPolicy(retryPolicy)\n+        .authorization(authInfos)\n+        .build();\n+    client.start();\n+\n+    this.curator \u003d client;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void start(List\u003cAuthInfo\u003e authInfos) throws IOException {\n\n    // Connect to the ZooKeeper ensemble\n    String zkHostPort \u003d conf.get(CommonConfigurationKeys.ZK_ADDRESS);\n    if (zkHostPort \u003d\u003d null) {\n      throw new IOException(\n          CommonConfigurationKeys.ZK_ADDRESS + \" is not configured.\");\n    }\n    int numRetries \u003d conf.getInt(CommonConfigurationKeys.ZK_NUM_RETRIES,\n        CommonConfigurationKeys.ZK_NUM_RETRIES_DEFAULT);\n    int zkSessionTimeout \u003d conf.getInt(CommonConfigurationKeys.ZK_TIMEOUT_MS,\n        CommonConfigurationKeys.ZK_TIMEOUT_MS_DEFAULT);\n    int zkRetryInterval \u003d conf.getInt(\n        CommonConfigurationKeys.ZK_RETRY_INTERVAL_MS,\n        CommonConfigurationKeys.ZK_RETRY_INTERVAL_MS_DEFAULT);\n    RetryNTimes retryPolicy \u003d new RetryNTimes(numRetries, zkRetryInterval);\n\n    // Set up ZK auths\n    List\u003cZKUtil.ZKAuthInfo\u003e zkAuths \u003d getZKAuths(conf);\n    if (authInfos \u003d\u003d null) {\n      authInfos \u003d new ArrayList\u003c\u003e();\n    }\n    for (ZKUtil.ZKAuthInfo zkAuth : zkAuths) {\n      authInfos.add(new AuthInfo(zkAuth.getScheme(), zkAuth.getAuth()));\n    }\n\n    CuratorFramework client \u003d CuratorFrameworkFactory.builder()\n        .connectString(zkHostPort)\n        .sessionTimeoutMs(zkSessionTimeout)\n        .retryPolicy(retryPolicy)\n        .authorization(authInfos)\n        .build();\n    client.start();\n\n    this.curator \u003d client;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/curator/ZKCuratorManager.java"
    }
  }
}