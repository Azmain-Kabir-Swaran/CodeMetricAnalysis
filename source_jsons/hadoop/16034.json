{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InstrumentationService.java",
  "functionName": "init",
  "functionId": "init",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/instrumentation/InstrumentationService.java",
  "functionStartLine": 66,
  "functionEndLine": 105,
  "numCommitsSeen": 4,
  "timeTaken": 549,
  "changeHistory": [
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
    "3334306512b5dc932814fded31a89ba1ee97cd9f"
  ],
  "changeHistoryShort": {
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae": "Ybodychange",
    "3334306512b5dc932814fded31a89ba1ee97cd9f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3844. Add @Override and remove {@inheritdoc} and unnecessary imports. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377168 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 6:03 PM",
      "commitName": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "01/08/12 4:14 PM",
      "commitNameOld": "08e89662170010dd619c0df859c670cb37b630dd",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 23.08,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n   public void init() throws ServiceException {\n     timersSize \u003d getServiceConfig().getInt(CONF_TIMERS_SIZE, 10);\n     counterLock \u003d new ReentrantLock();\n     timerLock \u003d new ReentrantLock();\n     variableLock \u003d new ReentrantLock();\n     samplerLock \u003d new ReentrantLock();\n     Map\u003cString, VariableHolder\u003e jvmVariables \u003d new ConcurrentHashMap\u003cString, VariableHolder\u003e();\n     counters \u003d new ConcurrentHashMap\u003cString, Map\u003cString, AtomicLong\u003e\u003e();\n     timers \u003d new ConcurrentHashMap\u003cString, Map\u003cString, Timer\u003e\u003e();\n     variables \u003d new ConcurrentHashMap\u003cString, Map\u003cString, VariableHolder\u003e\u003e();\n     samplers \u003d new ConcurrentHashMap\u003cString, Map\u003cString, Sampler\u003e\u003e();\n     samplersList \u003d new ArrayList\u003cSampler\u003e();\n     all \u003d new LinkedHashMap\u003cString, Map\u003cString, ?\u003e\u003e();\n     all.put(\"os-env\", System.getenv());\n     all.put(\"sys-props\", (Map\u003cString, ?\u003e) (Map) System.getProperties());\n     all.put(\"jvm\", jvmVariables);\n     all.put(\"counters\", (Map) counters);\n     all.put(\"timers\", (Map) timers);\n     all.put(\"variables\", (Map) variables);\n     all.put(\"samplers\", (Map) samplers);\n \n     jvmVariables.put(\"free.memory\", new VariableHolder\u003cLong\u003e(new Instrumentation.Variable\u003cLong\u003e() {\n+      @Override\n       public Long getValue() {\n         return Runtime.getRuntime().freeMemory();\n       }\n     }));\n     jvmVariables.put(\"max.memory\", new VariableHolder\u003cLong\u003e(new Instrumentation.Variable\u003cLong\u003e() {\n+      @Override\n       public Long getValue() {\n         return Runtime.getRuntime().maxMemory();\n       }\n     }));\n     jvmVariables.put(\"total.memory\", new VariableHolder\u003cLong\u003e(new Instrumentation.Variable\u003cLong\u003e() {\n+      @Override\n       public Long getValue() {\n         return Runtime.getRuntime().totalMemory();\n       }\n     }));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws ServiceException {\n    timersSize \u003d getServiceConfig().getInt(CONF_TIMERS_SIZE, 10);\n    counterLock \u003d new ReentrantLock();\n    timerLock \u003d new ReentrantLock();\n    variableLock \u003d new ReentrantLock();\n    samplerLock \u003d new ReentrantLock();\n    Map\u003cString, VariableHolder\u003e jvmVariables \u003d new ConcurrentHashMap\u003cString, VariableHolder\u003e();\n    counters \u003d new ConcurrentHashMap\u003cString, Map\u003cString, AtomicLong\u003e\u003e();\n    timers \u003d new ConcurrentHashMap\u003cString, Map\u003cString, Timer\u003e\u003e();\n    variables \u003d new ConcurrentHashMap\u003cString, Map\u003cString, VariableHolder\u003e\u003e();\n    samplers \u003d new ConcurrentHashMap\u003cString, Map\u003cString, Sampler\u003e\u003e();\n    samplersList \u003d new ArrayList\u003cSampler\u003e();\n    all \u003d new LinkedHashMap\u003cString, Map\u003cString, ?\u003e\u003e();\n    all.put(\"os-env\", System.getenv());\n    all.put(\"sys-props\", (Map\u003cString, ?\u003e) (Map) System.getProperties());\n    all.put(\"jvm\", jvmVariables);\n    all.put(\"counters\", (Map) counters);\n    all.put(\"timers\", (Map) timers);\n    all.put(\"variables\", (Map) variables);\n    all.put(\"samplers\", (Map) samplers);\n\n    jvmVariables.put(\"free.memory\", new VariableHolder\u003cLong\u003e(new Instrumentation.Variable\u003cLong\u003e() {\n      @Override\n      public Long getValue() {\n        return Runtime.getRuntime().freeMemory();\n      }\n    }));\n    jvmVariables.put(\"max.memory\", new VariableHolder\u003cLong\u003e(new Instrumentation.Variable\u003cLong\u003e() {\n      @Override\n      public Long getValue() {\n        return Runtime.getRuntime().maxMemory();\n      }\n    }));\n    jvmVariables.put(\"total.memory\", new VariableHolder\u003cLong\u003e(new Instrumentation.Variable\u003cLong\u003e() {\n      @Override\n      public Long getValue() {\n        return Runtime.getRuntime().totalMemory();\n      }\n    }));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/instrumentation/InstrumentationService.java",
      "extendedDetails": {}
    },
    "3334306512b5dc932814fded31a89ba1ee97cd9f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2178. Contributing Hoop to HDFS, replacement for HDFS proxy with read/write capabilities. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212060 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/12/11 11:25 AM",
      "commitName": "3334306512b5dc932814fded31a89ba1ee97cd9f",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,37 @@\n+  public void init() throws ServiceException {\n+    timersSize \u003d getServiceConfig().getInt(CONF_TIMERS_SIZE, 10);\n+    counterLock \u003d new ReentrantLock();\n+    timerLock \u003d new ReentrantLock();\n+    variableLock \u003d new ReentrantLock();\n+    samplerLock \u003d new ReentrantLock();\n+    Map\u003cString, VariableHolder\u003e jvmVariables \u003d new ConcurrentHashMap\u003cString, VariableHolder\u003e();\n+    counters \u003d new ConcurrentHashMap\u003cString, Map\u003cString, AtomicLong\u003e\u003e();\n+    timers \u003d new ConcurrentHashMap\u003cString, Map\u003cString, Timer\u003e\u003e();\n+    variables \u003d new ConcurrentHashMap\u003cString, Map\u003cString, VariableHolder\u003e\u003e();\n+    samplers \u003d new ConcurrentHashMap\u003cString, Map\u003cString, Sampler\u003e\u003e();\n+    samplersList \u003d new ArrayList\u003cSampler\u003e();\n+    all \u003d new LinkedHashMap\u003cString, Map\u003cString, ?\u003e\u003e();\n+    all.put(\"os-env\", System.getenv());\n+    all.put(\"sys-props\", (Map\u003cString, ?\u003e) (Map) System.getProperties());\n+    all.put(\"jvm\", jvmVariables);\n+    all.put(\"counters\", (Map) counters);\n+    all.put(\"timers\", (Map) timers);\n+    all.put(\"variables\", (Map) variables);\n+    all.put(\"samplers\", (Map) samplers);\n+\n+    jvmVariables.put(\"free.memory\", new VariableHolder\u003cLong\u003e(new Instrumentation.Variable\u003cLong\u003e() {\n+      public Long getValue() {\n+        return Runtime.getRuntime().freeMemory();\n+      }\n+    }));\n+    jvmVariables.put(\"max.memory\", new VariableHolder\u003cLong\u003e(new Instrumentation.Variable\u003cLong\u003e() {\n+      public Long getValue() {\n+        return Runtime.getRuntime().maxMemory();\n+      }\n+    }));\n+    jvmVariables.put(\"total.memory\", new VariableHolder\u003cLong\u003e(new Instrumentation.Variable\u003cLong\u003e() {\n+      public Long getValue() {\n+        return Runtime.getRuntime().totalMemory();\n+      }\n+    }));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws ServiceException {\n    timersSize \u003d getServiceConfig().getInt(CONF_TIMERS_SIZE, 10);\n    counterLock \u003d new ReentrantLock();\n    timerLock \u003d new ReentrantLock();\n    variableLock \u003d new ReentrantLock();\n    samplerLock \u003d new ReentrantLock();\n    Map\u003cString, VariableHolder\u003e jvmVariables \u003d new ConcurrentHashMap\u003cString, VariableHolder\u003e();\n    counters \u003d new ConcurrentHashMap\u003cString, Map\u003cString, AtomicLong\u003e\u003e();\n    timers \u003d new ConcurrentHashMap\u003cString, Map\u003cString, Timer\u003e\u003e();\n    variables \u003d new ConcurrentHashMap\u003cString, Map\u003cString, VariableHolder\u003e\u003e();\n    samplers \u003d new ConcurrentHashMap\u003cString, Map\u003cString, Sampler\u003e\u003e();\n    samplersList \u003d new ArrayList\u003cSampler\u003e();\n    all \u003d new LinkedHashMap\u003cString, Map\u003cString, ?\u003e\u003e();\n    all.put(\"os-env\", System.getenv());\n    all.put(\"sys-props\", (Map\u003cString, ?\u003e) (Map) System.getProperties());\n    all.put(\"jvm\", jvmVariables);\n    all.put(\"counters\", (Map) counters);\n    all.put(\"timers\", (Map) timers);\n    all.put(\"variables\", (Map) variables);\n    all.put(\"samplers\", (Map) samplers);\n\n    jvmVariables.put(\"free.memory\", new VariableHolder\u003cLong\u003e(new Instrumentation.Variable\u003cLong\u003e() {\n      public Long getValue() {\n        return Runtime.getRuntime().freeMemory();\n      }\n    }));\n    jvmVariables.put(\"max.memory\", new VariableHolder\u003cLong\u003e(new Instrumentation.Variable\u003cLong\u003e() {\n      public Long getValue() {\n        return Runtime.getRuntime().maxMemory();\n      }\n    }));\n    jvmVariables.put(\"total.memory\", new VariableHolder\u003cLong\u003e(new Instrumentation.Variable\u003cLong\u003e() {\n      public Long getValue() {\n        return Runtime.getRuntime().totalMemory();\n      }\n    }));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/instrumentation/InstrumentationService.java"
    }
  }
}