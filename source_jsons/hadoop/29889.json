{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EntityGroupFSTimelineStore.java",
  "functionName": "scanActiveLogs",
  "functionId": "scanActiveLogs",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
  "functionStartLine": 354,
  "functionEndLine": 359,
  "numCommitsSeen": 17,
  "timeTaken": 2112,
  "changeHistory": [
    "f44b349b813508f0f6d99ca10bddba683dedf6c4",
    "06413da72efed9a50e49efaf7110c220c88a7f4a",
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
    "02f597c5db36ded385413958bdee793ad7eda40e"
  ],
  "changeHistoryShort": {
    "f44b349b813508f0f6d99ca10bddba683dedf6c4": "Ybodychange",
    "06413da72efed9a50e49efaf7110c220c88a7f4a": "Ybodychange",
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": "Ymultichange(Yreturntypechange,Ybodychange)",
    "02f597c5db36ded385413958bdee793ad7eda40e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f44b349b813508f0f6d99ca10bddba683dedf6c4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6811. [ATS1.5] All history logs should be kept under its own User Directory. Contributed by Rohith Sharma K S.\n",
      "commitDate": "04/08/17 4:03 PM",
      "commitName": "f44b349b813508f0f6d99ca10bddba683dedf6c4",
      "commitAuthor": "Junping Du",
      "commitDateOld": "21/11/16 5:20 PM",
      "commitNameOld": "6f8074298d8f33effe08f6be49ecfc89f69feda7",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 255.91,
      "commitsBetweenForRepo": 1408,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,6 @@\n   int scanActiveLogs() throws IOException {\n     long startTime \u003d Time.monotonicNow();\n-    RemoteIterator\u003cFileStatus\u003e iter \u003d list(activeRootPath);\n-    int logsToScanCount \u003d 0;\n-    while (iter.hasNext()) {\n-      FileStatus stat \u003d iter.next();\n-      String name \u003d stat.getPath().getName();\n-      ApplicationId appId \u003d parseApplicationId(name);\n-      if (appId !\u003d null) {\n-        LOG.debug(\"scan logs for {} in {}\", appId, stat.getPath());\n-        logsToScanCount++;\n-        AppLogs logs \u003d getAndSetActiveLog(appId, stat.getPath());\n-        executor.execute(new ActiveLogParser(logs));\n-      } else {\n-        LOG.debug(\"Unable to parse entry {}\", name);\n-      }\n-    }\n+    int logsToScanCount \u003d scanActiveLogs(activeRootPath);\n     metrics.addActiveLogDirScanTime(Time.monotonicNow() - startTime);\n     return logsToScanCount;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int scanActiveLogs() throws IOException {\n    long startTime \u003d Time.monotonicNow();\n    int logsToScanCount \u003d scanActiveLogs(activeRootPath);\n    metrics.addActiveLogDirScanTime(Time.monotonicNow() - startTime);\n    return logsToScanCount;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "06413da72efed9a50e49efaf7110c220c88a7f4a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4851. Metric improvements for ATS v1.5 storage components. Li Lu via junping_du.\n",
      "commitDate": "03/05/16 4:16 AM",
      "commitName": "06413da72efed9a50e49efaf7110c220c88a7f4a",
      "commitAuthor": "Junping Du",
      "commitDateOld": "13/04/16 10:38 AM",
      "commitNameOld": "e0cb426758b3d716ff143f723fc16ef2f1e4971b",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 19.73,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,20 @@\n   int scanActiveLogs() throws IOException {\n+    long startTime \u003d Time.monotonicNow();\n     RemoteIterator\u003cFileStatus\u003e iter \u003d list(activeRootPath);\n     int logsToScanCount \u003d 0;\n     while (iter.hasNext()) {\n       FileStatus stat \u003d iter.next();\n       String name \u003d stat.getPath().getName();\n       ApplicationId appId \u003d parseApplicationId(name);\n       if (appId !\u003d null) {\n         LOG.debug(\"scan logs for {} in {}\", appId, stat.getPath());\n         logsToScanCount++;\n         AppLogs logs \u003d getAndSetActiveLog(appId, stat.getPath());\n         executor.execute(new ActiveLogParser(logs));\n       } else {\n         LOG.debug(\"Unable to parse entry {}\", name);\n       }\n     }\n+    metrics.addActiveLogDirScanTime(Time.monotonicNow() - startTime);\n     return logsToScanCount;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int scanActiveLogs() throws IOException {\n    long startTime \u003d Time.monotonicNow();\n    RemoteIterator\u003cFileStatus\u003e iter \u003d list(activeRootPath);\n    int logsToScanCount \u003d 0;\n    while (iter.hasNext()) {\n      FileStatus stat \u003d iter.next();\n      String name \u003d stat.getPath().getName();\n      ApplicationId appId \u003d parseApplicationId(name);\n      if (appId !\u003d null) {\n        LOG.debug(\"scan logs for {} in {}\", appId, stat.getPath());\n        logsToScanCount++;\n        AppLogs logs \u003d getAndSetActiveLog(appId, stat.getPath());\n        executor.execute(new ActiveLogParser(logs));\n      } else {\n        LOG.debug(\"Unable to parse entry {}\", name);\n      }\n    }\n    metrics.addActiveLogDirScanTime(Time.monotonicNow() - startTime);\n    return logsToScanCount;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-4696. Improving EntityGroupFSTimelineStore on exception handling, test setup, and concurrency. (Steve Loughran via gtcarrera9)\n",
      "commitDate": "10/03/16 10:51 AM",
      "commitName": "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
      "commitAuthor": "Li Lu",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-4696. Improving EntityGroupFSTimelineStore on exception handling, test setup, and concurrency. (Steve Loughran via gtcarrera9)\n",
          "commitDate": "10/03/16 10:51 AM",
          "commitName": "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
          "commitAuthor": "Li Lu",
          "commitDateOld": "17/01/16 5:37 PM",
          "commitNameOld": "02f597c5db36ded385413958bdee793ad7eda40e",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 52.72,
          "commitsBetweenForRepo": 371,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,18 @@\n-  void scanActiveLogs() throws IOException {\n-    RemoteIterator\u003cFileStatus\u003e iter \u003d fs.listStatusIterator(activeRootPath);\n+  int scanActiveLogs() throws IOException {\n+    RemoteIterator\u003cFileStatus\u003e iter \u003d list(activeRootPath);\n+    int logsToScanCount \u003d 0;\n     while (iter.hasNext()) {\n       FileStatus stat \u003d iter.next();\n-      ApplicationId appId \u003d parseApplicationId(stat.getPath().getName());\n+      String name \u003d stat.getPath().getName();\n+      ApplicationId appId \u003d parseApplicationId(name);\n       if (appId !\u003d null) {\n         LOG.debug(\"scan logs for {} in {}\", appId, stat.getPath());\n+        logsToScanCount++;\n         AppLogs logs \u003d getAndSetActiveLog(appId, stat.getPath());\n         executor.execute(new ActiveLogParser(logs));\n+      } else {\n+        LOG.debug(\"Unable to parse entry {}\", name);\n       }\n     }\n+    return logsToScanCount;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  int scanActiveLogs() throws IOException {\n    RemoteIterator\u003cFileStatus\u003e iter \u003d list(activeRootPath);\n    int logsToScanCount \u003d 0;\n    while (iter.hasNext()) {\n      FileStatus stat \u003d iter.next();\n      String name \u003d stat.getPath().getName();\n      ApplicationId appId \u003d parseApplicationId(name);\n      if (appId !\u003d null) {\n        LOG.debug(\"scan logs for {} in {}\", appId, stat.getPath());\n        logsToScanCount++;\n        AppLogs logs \u003d getAndSetActiveLog(appId, stat.getPath());\n        executor.execute(new ActiveLogParser(logs));\n      } else {\n        LOG.debug(\"Unable to parse entry {}\", name);\n      }\n    }\n    return logsToScanCount;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "int"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4696. Improving EntityGroupFSTimelineStore on exception handling, test setup, and concurrency. (Steve Loughran via gtcarrera9)\n",
          "commitDate": "10/03/16 10:51 AM",
          "commitName": "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
          "commitAuthor": "Li Lu",
          "commitDateOld": "17/01/16 5:37 PM",
          "commitNameOld": "02f597c5db36ded385413958bdee793ad7eda40e",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 52.72,
          "commitsBetweenForRepo": 371,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,18 @@\n-  void scanActiveLogs() throws IOException {\n-    RemoteIterator\u003cFileStatus\u003e iter \u003d fs.listStatusIterator(activeRootPath);\n+  int scanActiveLogs() throws IOException {\n+    RemoteIterator\u003cFileStatus\u003e iter \u003d list(activeRootPath);\n+    int logsToScanCount \u003d 0;\n     while (iter.hasNext()) {\n       FileStatus stat \u003d iter.next();\n-      ApplicationId appId \u003d parseApplicationId(stat.getPath().getName());\n+      String name \u003d stat.getPath().getName();\n+      ApplicationId appId \u003d parseApplicationId(name);\n       if (appId !\u003d null) {\n         LOG.debug(\"scan logs for {} in {}\", appId, stat.getPath());\n+        logsToScanCount++;\n         AppLogs logs \u003d getAndSetActiveLog(appId, stat.getPath());\n         executor.execute(new ActiveLogParser(logs));\n+      } else {\n+        LOG.debug(\"Unable to parse entry {}\", name);\n       }\n     }\n+    return logsToScanCount;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  int scanActiveLogs() throws IOException {\n    RemoteIterator\u003cFileStatus\u003e iter \u003d list(activeRootPath);\n    int logsToScanCount \u003d 0;\n    while (iter.hasNext()) {\n      FileStatus stat \u003d iter.next();\n      String name \u003d stat.getPath().getName();\n      ApplicationId appId \u003d parseApplicationId(name);\n      if (appId !\u003d null) {\n        LOG.debug(\"scan logs for {} in {}\", appId, stat.getPath());\n        logsToScanCount++;\n        AppLogs logs \u003d getAndSetActiveLog(appId, stat.getPath());\n        executor.execute(new ActiveLogParser(logs));\n      } else {\n        LOG.debug(\"Unable to parse entry {}\", name);\n      }\n    }\n    return logsToScanCount;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "02f597c5db36ded385413958bdee793ad7eda40e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4265. Provide new timeline plugin storage to support fine-grained entity caching. Contributed by Li Lu and Jason Lowe\n",
      "commitDate": "17/01/16 5:37 PM",
      "commitName": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,12 @@\n+  void scanActiveLogs() throws IOException {\n+    RemoteIterator\u003cFileStatus\u003e iter \u003d fs.listStatusIterator(activeRootPath);\n+    while (iter.hasNext()) {\n+      FileStatus stat \u003d iter.next();\n+      ApplicationId appId \u003d parseApplicationId(stat.getPath().getName());\n+      if (appId !\u003d null) {\n+        LOG.debug(\"scan logs for {} in {}\", appId, stat.getPath());\n+        AppLogs logs \u003d getAndSetActiveLog(appId, stat.getPath());\n+        executor.execute(new ActiveLogParser(logs));\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void scanActiveLogs() throws IOException {\n    RemoteIterator\u003cFileStatus\u003e iter \u003d fs.listStatusIterator(activeRootPath);\n    while (iter.hasNext()) {\n      FileStatus stat \u003d iter.next();\n      ApplicationId appId \u003d parseApplicationId(stat.getPath().getName());\n      if (appId !\u003d null) {\n        LOG.debug(\"scan logs for {} in {}\", appId, stat.getPath());\n        AppLogs logs \u003d getAndSetActiveLog(appId, stat.getPath());\n        executor.execute(new ActiveLogParser(logs));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java"
    }
  }
}