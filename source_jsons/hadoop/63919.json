{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceUtils.java",
  "functionName": "addResourceTypeInformation",
  "functionId": "addResourceTypeInformation___prop-String__value-String__nodeResources-Map__String,ResourceInformation__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
  "functionStartLine": 574,
  "functionEndLine": 598,
  "numCommitsSeen": 63,
  "timeTaken": 4046,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "12a095a496dd59066d73a7a6c24129b5b6a9d650",
    "10fc8d2a7dc975ce70de63f88a2674389314f197",
    "8bcc49e6771ca75f012211e27870a421b19233e7",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "12a095a496dd59066d73a7a6c24129b5b6a9d650": "Ybodychange",
    "10fc8d2a7dc975ce70de63f88a2674389314f197": "Ymultichange(Yrename,Ybodychange)",
    "8bcc49e6771ca75f012211e27870a421b19233e7": "Ybodychange",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Yfilerename",
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "24/01/19 1:53 AM",
      "commitNameOld": "a4bd64e724cbe2ef639c984ddfe2da3baf170a96",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 50.56,
      "commitsBetweenForRepo": 422,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,25 @@\n   private static void addResourceTypeInformation(String prop, String value,\n       Map\u003cString, ResourceInformation\u003e nodeResources) {\n     if (prop.startsWith(YarnConfiguration.NM_RESOURCES_PREFIX)) {\n       LOG.info(\"Found resource entry \" + prop);\n       String resourceType \u003d prop.substring(\n           YarnConfiguration.NM_RESOURCES_PREFIX.length());\n       if (!nodeResources.containsKey(resourceType)) {\n         nodeResources\n             .put(resourceType, ResourceInformation.newInstance(resourceType));\n       }\n       String units \u003d getUnits(value);\n       Long resourceValue \u003d\n           Long.valueOf(value.substring(0, value.length() - units.length()));\n       String destUnit \u003d getDefaultUnit(resourceType);\n       if(!units.equals(destUnit)) {\n         resourceValue \u003d UnitsConversionUtil.convert(\n             units, destUnit, resourceValue);\n         units \u003d destUnit;\n       }\n       nodeResources.get(resourceType).setValue(resourceValue);\n       nodeResources.get(resourceType).setUnits(units);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Setting value for resource type \" + resourceType + \" to \"\n-            + resourceValue + \" with units \" + units);\n-      }\n+      LOG.debug(\"Setting value for resource type {} to {} with units {}\",\n+          resourceType, resourceValue, units);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void addResourceTypeInformation(String prop, String value,\n      Map\u003cString, ResourceInformation\u003e nodeResources) {\n    if (prop.startsWith(YarnConfiguration.NM_RESOURCES_PREFIX)) {\n      LOG.info(\"Found resource entry \" + prop);\n      String resourceType \u003d prop.substring(\n          YarnConfiguration.NM_RESOURCES_PREFIX.length());\n      if (!nodeResources.containsKey(resourceType)) {\n        nodeResources\n            .put(resourceType, ResourceInformation.newInstance(resourceType));\n      }\n      String units \u003d getUnits(value);\n      Long resourceValue \u003d\n          Long.valueOf(value.substring(0, value.length() - units.length()));\n      String destUnit \u003d getDefaultUnit(resourceType);\n      if(!units.equals(destUnit)) {\n        resourceValue \u003d UnitsConversionUtil.convert(\n            units, destUnit, resourceValue);\n        units \u003d destUnit;\n      }\n      nodeResources.get(resourceType).setValue(resourceValue);\n      nodeResources.get(resourceType).setUnits(units);\n      LOG.debug(\"Setting value for resource type {} to {} with units {}\",\n          resourceType, resourceValue, units);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "12a095a496dd59066d73a7a6c24129b5b6a9d650": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7159. Normalize unit of resource objects in RM to avoid unit conversion in critical path. Contributed by Manikandan R.\n",
      "commitDate": "02/08/18 9:59 AM",
      "commitName": "12a095a496dd59066d73a7a6c24129b5b6a9d650",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 51.06,
      "commitsBetweenForRepo": 322,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,27 @@\n   private static void addResourceTypeInformation(String prop, String value,\n       Map\u003cString, ResourceInformation\u003e nodeResources) {\n     if (prop.startsWith(YarnConfiguration.NM_RESOURCES_PREFIX)) {\n       LOG.info(\"Found resource entry \" + prop);\n       String resourceType \u003d prop.substring(\n           YarnConfiguration.NM_RESOURCES_PREFIX.length());\n       if (!nodeResources.containsKey(resourceType)) {\n         nodeResources\n             .put(resourceType, ResourceInformation.newInstance(resourceType));\n       }\n       String units \u003d getUnits(value);\n       Long resourceValue \u003d\n           Long.valueOf(value.substring(0, value.length() - units.length()));\n+      String destUnit \u003d getDefaultUnit(resourceType);\n+      if(!units.equals(destUnit)) {\n+        resourceValue \u003d UnitsConversionUtil.convert(\n+            units, destUnit, resourceValue);\n+        units \u003d destUnit;\n+      }\n       nodeResources.get(resourceType).setValue(resourceValue);\n       nodeResources.get(resourceType).setUnits(units);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Setting value for resource type \" + resourceType + \" to \"\n             + resourceValue + \" with units \" + units);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void addResourceTypeInformation(String prop, String value,\n      Map\u003cString, ResourceInformation\u003e nodeResources) {\n    if (prop.startsWith(YarnConfiguration.NM_RESOURCES_PREFIX)) {\n      LOG.info(\"Found resource entry \" + prop);\n      String resourceType \u003d prop.substring(\n          YarnConfiguration.NM_RESOURCES_PREFIX.length());\n      if (!nodeResources.containsKey(resourceType)) {\n        nodeResources\n            .put(resourceType, ResourceInformation.newInstance(resourceType));\n      }\n      String units \u003d getUnits(value);\n      Long resourceValue \u003d\n          Long.valueOf(value.substring(0, value.length() - units.length()));\n      String destUnit \u003d getDefaultUnit(resourceType);\n      if(!units.equals(destUnit)) {\n        resourceValue \u003d UnitsConversionUtil.convert(\n            units, destUnit, resourceValue);\n        units \u003d destUnit;\n      }\n      nodeResources.get(resourceType).setValue(resourceValue);\n      nodeResources.get(resourceType).setUnits(units);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Setting value for resource type \" + resourceType + \" to \"\n            + resourceValue + \" with units \" + units);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "10fc8d2a7dc975ce70de63f88a2674389314f197": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-7383. Node resource is not parsed correctly for resource names containing dot. Contributed by Gergely Novák.\n",
      "commitDate": "13/12/17 8:30 AM",
      "commitName": "10fc8d2a7dc975ce70de63f88a2674389314f197",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-7383. Node resource is not parsed correctly for resource names containing dot. Contributed by Gergely Novák.\n",
          "commitDate": "13/12/17 8:30 AM",
          "commitName": "10fc8d2a7dc975ce70de63f88a2674389314f197",
          "commitAuthor": "Sunil G",
          "commitDateOld": "01/12/17 1:37 PM",
          "commitNameOld": "25df5054216a6a76d09d9c49984f8075ebc6a197",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 11.79,
          "commitsBetweenForRepo": 70,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-  private static void addResourceInformation(String prop, String value,\n+  private static void addResourceTypeInformation(String prop, String value,\n       Map\u003cString, ResourceInformation\u003e nodeResources) {\n-    String[] parts \u003d prop.split(\"\\\\.\");\n-    LOG.info(\"Found resource entry \" + prop);\n-    if (parts.length \u003d\u003d 4) {\n-      String resourceType \u003d parts[3];\n+    if (prop.startsWith(YarnConfiguration.NM_RESOURCES_PREFIX)) {\n+      LOG.info(\"Found resource entry \" + prop);\n+      String resourceType \u003d prop.substring(\n+          YarnConfiguration.NM_RESOURCES_PREFIX.length());\n       if (!nodeResources.containsKey(resourceType)) {\n         nodeResources\n             .put(resourceType, ResourceInformation.newInstance(resourceType));\n       }\n       String units \u003d getUnits(value);\n       Long resourceValue \u003d\n           Long.valueOf(value.substring(0, value.length() - units.length()));\n       nodeResources.get(resourceType).setValue(resourceValue);\n       nodeResources.get(resourceType).setUnits(units);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Setting value for resource type \" + resourceType + \" to \"\n             + resourceValue + \" with units \" + units);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void addResourceTypeInformation(String prop, String value,\n      Map\u003cString, ResourceInformation\u003e nodeResources) {\n    if (prop.startsWith(YarnConfiguration.NM_RESOURCES_PREFIX)) {\n      LOG.info(\"Found resource entry \" + prop);\n      String resourceType \u003d prop.substring(\n          YarnConfiguration.NM_RESOURCES_PREFIX.length());\n      if (!nodeResources.containsKey(resourceType)) {\n        nodeResources\n            .put(resourceType, ResourceInformation.newInstance(resourceType));\n      }\n      String units \u003d getUnits(value);\n      Long resourceValue \u003d\n          Long.valueOf(value.substring(0, value.length() - units.length()));\n      nodeResources.get(resourceType).setValue(resourceValue);\n      nodeResources.get(resourceType).setUnits(units);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Setting value for resource type \" + resourceType + \" to \"\n            + resourceValue + \" with units \" + units);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {
            "oldValue": "addResourceInformation",
            "newValue": "addResourceTypeInformation"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7383. Node resource is not parsed correctly for resource names containing dot. Contributed by Gergely Novák.\n",
          "commitDate": "13/12/17 8:30 AM",
          "commitName": "10fc8d2a7dc975ce70de63f88a2674389314f197",
          "commitAuthor": "Sunil G",
          "commitDateOld": "01/12/17 1:37 PM",
          "commitNameOld": "25df5054216a6a76d09d9c49984f8075ebc6a197",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 11.79,
          "commitsBetweenForRepo": 70,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-  private static void addResourceInformation(String prop, String value,\n+  private static void addResourceTypeInformation(String prop, String value,\n       Map\u003cString, ResourceInformation\u003e nodeResources) {\n-    String[] parts \u003d prop.split(\"\\\\.\");\n-    LOG.info(\"Found resource entry \" + prop);\n-    if (parts.length \u003d\u003d 4) {\n-      String resourceType \u003d parts[3];\n+    if (prop.startsWith(YarnConfiguration.NM_RESOURCES_PREFIX)) {\n+      LOG.info(\"Found resource entry \" + prop);\n+      String resourceType \u003d prop.substring(\n+          YarnConfiguration.NM_RESOURCES_PREFIX.length());\n       if (!nodeResources.containsKey(resourceType)) {\n         nodeResources\n             .put(resourceType, ResourceInformation.newInstance(resourceType));\n       }\n       String units \u003d getUnits(value);\n       Long resourceValue \u003d\n           Long.valueOf(value.substring(0, value.length() - units.length()));\n       nodeResources.get(resourceType).setValue(resourceValue);\n       nodeResources.get(resourceType).setUnits(units);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Setting value for resource type \" + resourceType + \" to \"\n             + resourceValue + \" with units \" + units);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void addResourceTypeInformation(String prop, String value,\n      Map\u003cString, ResourceInformation\u003e nodeResources) {\n    if (prop.startsWith(YarnConfiguration.NM_RESOURCES_PREFIX)) {\n      LOG.info(\"Found resource entry \" + prop);\n      String resourceType \u003d prop.substring(\n          YarnConfiguration.NM_RESOURCES_PREFIX.length());\n      if (!nodeResources.containsKey(resourceType)) {\n        nodeResources\n            .put(resourceType, ResourceInformation.newInstance(resourceType));\n      }\n      String units \u003d getUnits(value);\n      Long resourceValue \u003d\n          Long.valueOf(value.substring(0, value.length() - units.length()));\n      nodeResources.get(resourceType).setValue(resourceValue);\n      nodeResources.get(resourceType).setUnits(units);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Setting value for resource type \" + resourceType + \" to \"\n            + resourceValue + \" with units \" + units);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "8bcc49e6771ca75f012211e27870a421b19233e7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7205. Log improvements for the ResourceUtils. (Sunil G via wangda)\n\nChange-Id: I0f5b7a7f68ec5d3e1d52211f83fdd089bc0bfd37\n",
      "commitDate": "11/10/17 3:25 PM",
      "commitName": "8bcc49e6771ca75f012211e27870a421b19233e7",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "11/10/17 11:14 AM",
      "commitNameOld": "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,21 @@\n   private static void addResourceInformation(String prop, String value,\n       Map\u003cString, ResourceInformation\u003e nodeResources) {\n     String[] parts \u003d prop.split(\"\\\\.\");\n     LOG.info(\"Found resource entry \" + prop);\n     if (parts.length \u003d\u003d 4) {\n       String resourceType \u003d parts[3];\n       if (!nodeResources.containsKey(resourceType)) {\n         nodeResources\n             .put(resourceType, ResourceInformation.newInstance(resourceType));\n       }\n       String units \u003d getUnits(value);\n       Long resourceValue \u003d\n           Long.valueOf(value.substring(0, value.length() - units.length()));\n       nodeResources.get(resourceType).setValue(resourceValue);\n       nodeResources.get(resourceType).setUnits(units);\n-      LOG.debug(\"Setting value for resource type \" + resourceType + \" to \"\n-              + resourceValue + \" with units \" + units);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Setting value for resource type \" + resourceType + \" to \"\n+            + resourceValue + \" with units \" + units);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void addResourceInformation(String prop, String value,\n      Map\u003cString, ResourceInformation\u003e nodeResources) {\n    String[] parts \u003d prop.split(\"\\\\.\");\n    LOG.info(\"Found resource entry \" + prop);\n    if (parts.length \u003d\u003d 4) {\n      String resourceType \u003d parts[3];\n      if (!nodeResources.containsKey(resourceType)) {\n        nodeResources\n            .put(resourceType, ResourceInformation.newInstance(resourceType));\n      }\n      String units \u003d getUnits(value);\n      Long resourceValue \u003d\n          Long.valueOf(value.substring(0, value.length() - units.length()));\n      nodeResources.get(resourceType).setValue(resourceValue);\n      nodeResources.get(resourceType).setUnits(units);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Setting value for resource type \" + resourceType + \" to \"\n            + resourceValue + \" with units \" + units);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "4e5632d28eb8f6b1b8830c2aa89ec6321d477977",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void addResourceInformation(String prop, String value,\n      Map\u003cString, ResourceInformation\u003e nodeResources) {\n    String[] parts \u003d prop.split(\"\\\\.\");\n    LOG.info(\"Found resource entry \" + prop);\n    if (parts.length \u003d\u003d 4) {\n      String resourceType \u003d parts[3];\n      if (!nodeResources.containsKey(resourceType)) {\n        nodeResources\n            .put(resourceType, ResourceInformation.newInstance(resourceType));\n      }\n      String units \u003d getUnits(value);\n      Long resourceValue \u003d\n          Long.valueOf(value.substring(0, value.length() - units.length()));\n      nodeResources.get(resourceType).setValue(resourceValue);\n      nodeResources.get(resourceType).setUnits(units);\n      LOG.debug(\"Setting value for resource type \" + resourceType + \" to \"\n              + resourceValue + \" with units \" + units);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java"
      }
    },
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4830. Add support for resource types in the nodemanager. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "759114b0063907d4c07ea6ee261e861bf5cc3a9a",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,19 @@\n+  private static void addResourceInformation(String prop, String value,\n+      Map\u003cString, ResourceInformation\u003e nodeResources) {\n+    String[] parts \u003d prop.split(\"\\\\.\");\n+    LOG.info(\"Found resource entry \" + prop);\n+    if (parts.length \u003d\u003d 4) {\n+      String resourceType \u003d parts[3];\n+      if (!nodeResources.containsKey(resourceType)) {\n+        nodeResources\n+            .put(resourceType, ResourceInformation.newInstance(resourceType));\n+      }\n+      String units \u003d getUnits(value);\n+      Long resourceValue \u003d\n+          Long.valueOf(value.substring(0, value.length() - units.length()));\n+      nodeResources.get(resourceType).setValue(resourceValue);\n+      nodeResources.get(resourceType).setUnits(units);\n+      LOG.debug(\"Setting value for resource type \" + resourceType + \" to \"\n+              + resourceValue + \" with units \" + units);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void addResourceInformation(String prop, String value,\n      Map\u003cString, ResourceInformation\u003e nodeResources) {\n    String[] parts \u003d prop.split(\"\\\\.\");\n    LOG.info(\"Found resource entry \" + prop);\n    if (parts.length \u003d\u003d 4) {\n      String resourceType \u003d parts[3];\n      if (!nodeResources.containsKey(resourceType)) {\n        nodeResources\n            .put(resourceType, ResourceInformation.newInstance(resourceType));\n      }\n      String units \u003d getUnits(value);\n      Long resourceValue \u003d\n          Long.valueOf(value.substring(0, value.length() - units.length()));\n      nodeResources.get(resourceType).setValue(resourceValue);\n      nodeResources.get(resourceType).setUnits(units);\n      LOG.debug(\"Setting value for resource type \" + resourceType + \" to \"\n              + resourceValue + \" with units \" + units);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java"
    }
  }
}