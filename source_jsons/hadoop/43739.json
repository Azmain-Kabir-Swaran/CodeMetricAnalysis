{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceApiUtil.java",
  "functionName": "validatePlacementPolicy",
  "functionId": "validatePlacementPolicy___components-List__Component____componentNames-Set__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
  "functionStartLine": 338,
  "functionEndLine": 360,
  "numCommitsSeen": 32,
  "timeTaken": 1421,
  "changeHistory": [
    "c791b0e90e0d9c7cb05d162d605e0679942bcbfb",
    "778a4a24be176382a5704f709c00bdfcfe6ddc8c",
    "a0bde7d525911680f9e5fb0a939604865eb8e164"
  ],
  "changeHistoryShort": {
    "c791b0e90e0d9c7cb05d162d605e0679942bcbfb": "Ybodychange",
    "778a4a24be176382a5704f709c00bdfcfe6ddc8c": "Ybodychange",
    "a0bde7d525911680f9e5fb0a939604865eb8e164": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c791b0e90e0d9c7cb05d162d605e0679942bcbfb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10219. Fix YARN Native Service Placement Constraints with Node Attributes.\n\nContributed by Eric Yang.\n",
      "commitDate": "14/04/20 12:04 AM",
      "commitName": "c791b0e90e0d9c7cb05d162d605e0679942bcbfb",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "05/09/19 12:49 PM",
      "commitNameOld": "2e2e5401f297545181323b126a69eaa2239afb02",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 221.47,
      "commitsBetweenForRepo": 932,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,23 @@\n   private static void validatePlacementPolicy(List\u003cComponent\u003e components,\n       Set\u003cString\u003e componentNames) {\n     for (Component comp : components) {\n       PlacementPolicy placementPolicy \u003d comp.getPlacementPolicy();\n       if (placementPolicy !\u003d null) {\n         for (PlacementConstraint constraint : placementPolicy\n             .getConstraints()) {\n           if (constraint.getType() \u003d\u003d null) {\n             throw new IllegalArgumentException(String.format(\n               RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_TYPE_NULL,\n               constraint.getName() \u003d\u003d null ? \"\" : constraint.getName() + \" \",\n               comp.getName()));\n           }\n           if (constraint.getScope() \u003d\u003d null) {\n             throw new IllegalArgumentException(String.format(\n               RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_SCOPE_NULL,\n               constraint.getName() \u003d\u003d null ? \"\" : constraint.getName() + \" \",\n               comp.getName()));\n           }\n-          if (constraint.getTargetTags().isEmpty()) {\n-            throw new IllegalArgumentException(String.format(\n-              RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_TAGS_NULL,\n-              constraint.getName() \u003d\u003d null ? \"\" : constraint.getName() + \" \",\n-              comp.getName()));\n-          }\n-          for (String targetTag : constraint.getTargetTags()) {\n-            if (!comp.getName().equals(targetTag)) {\n-              throw new IllegalArgumentException(String.format(\n-                  RestApiErrorMessages.ERROR_PLACEMENT_POLICY_TAG_NAME_NOT_SAME,\n-                  targetTag, comp.getName(), comp.getName(), comp.getName()));\n-            }\n-          }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validatePlacementPolicy(List\u003cComponent\u003e components,\n      Set\u003cString\u003e componentNames) {\n    for (Component comp : components) {\n      PlacementPolicy placementPolicy \u003d comp.getPlacementPolicy();\n      if (placementPolicy !\u003d null) {\n        for (PlacementConstraint constraint : placementPolicy\n            .getConstraints()) {\n          if (constraint.getType() \u003d\u003d null) {\n            throw new IllegalArgumentException(String.format(\n              RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_TYPE_NULL,\n              constraint.getName() \u003d\u003d null ? \"\" : constraint.getName() + \" \",\n              comp.getName()));\n          }\n          if (constraint.getScope() \u003d\u003d null) {\n            throw new IllegalArgumentException(String.format(\n              RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_SCOPE_NULL,\n              constraint.getName() \u003d\u003d null ? \"\" : constraint.getName() + \" \",\n              comp.getName()));\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
      "extendedDetails": {}
    },
    "778a4a24be176382a5704f709c00bdfcfe6ddc8c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8350. NPE in service AM related to placement policy. Contributed by Gour Saha\n",
      "commitDate": "30/05/18 1:19 PM",
      "commitName": "778a4a24be176382a5704f709c00bdfcfe6ddc8c",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "15/05/18 5:40 PM",
      "commitNameOld": "8d3b39de89809f5eed06f85f00ab223e2f75e49c",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 14.82,
      "commitsBetweenForRepo": 126,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,36 @@\n   private static void validatePlacementPolicy(List\u003cComponent\u003e components,\n       Set\u003cString\u003e componentNames) {\n     for (Component comp : components) {\n-      if (comp.getPlacementPolicy() !\u003d null) {\n-        for (PlacementConstraint constraint : comp.getPlacementPolicy()\n+      PlacementPolicy placementPolicy \u003d comp.getPlacementPolicy();\n+      if (placementPolicy !\u003d null) {\n+        for (PlacementConstraint constraint : placementPolicy\n             .getConstraints()) {\n+          if (constraint.getType() \u003d\u003d null) {\n+            throw new IllegalArgumentException(String.format(\n+              RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_TYPE_NULL,\n+              constraint.getName() \u003d\u003d null ? \"\" : constraint.getName() + \" \",\n+              comp.getName()));\n+          }\n+          if (constraint.getScope() \u003d\u003d null) {\n+            throw new IllegalArgumentException(String.format(\n+              RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_SCOPE_NULL,\n+              constraint.getName() \u003d\u003d null ? \"\" : constraint.getName() + \" \",\n+              comp.getName()));\n+          }\n+          if (constraint.getTargetTags().isEmpty()) {\n+            throw new IllegalArgumentException(String.format(\n+              RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_TAGS_NULL,\n+              constraint.getName() \u003d\u003d null ? \"\" : constraint.getName() + \" \",\n+              comp.getName()));\n+          }\n           for (String targetTag : constraint.getTargetTags()) {\n             if (!comp.getName().equals(targetTag)) {\n               throw new IllegalArgumentException(String.format(\n                   RestApiErrorMessages.ERROR_PLACEMENT_POLICY_TAG_NAME_NOT_SAME,\n                   targetTag, comp.getName(), comp.getName(), comp.getName()));\n             }\n           }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validatePlacementPolicy(List\u003cComponent\u003e components,\n      Set\u003cString\u003e componentNames) {\n    for (Component comp : components) {\n      PlacementPolicy placementPolicy \u003d comp.getPlacementPolicy();\n      if (placementPolicy !\u003d null) {\n        for (PlacementConstraint constraint : placementPolicy\n            .getConstraints()) {\n          if (constraint.getType() \u003d\u003d null) {\n            throw new IllegalArgumentException(String.format(\n              RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_TYPE_NULL,\n              constraint.getName() \u003d\u003d null ? \"\" : constraint.getName() + \" \",\n              comp.getName()));\n          }\n          if (constraint.getScope() \u003d\u003d null) {\n            throw new IllegalArgumentException(String.format(\n              RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_SCOPE_NULL,\n              constraint.getName() \u003d\u003d null ? \"\" : constraint.getName() + \" \",\n              comp.getName()));\n          }\n          if (constraint.getTargetTags().isEmpty()) {\n            throw new IllegalArgumentException(String.format(\n              RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_TAGS_NULL,\n              constraint.getName() \u003d\u003d null ? \"\" : constraint.getName() + \" \",\n              comp.getName()));\n          }\n          for (String targetTag : constraint.getTargetTags()) {\n            if (!comp.getName().equals(targetTag)) {\n              throw new IllegalArgumentException(String.format(\n                  RestApiErrorMessages.ERROR_PLACEMENT_POLICY_TAG_NAME_NOT_SAME,\n                  targetTag, comp.getName(), comp.getName(), comp.getName()));\n            }\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
      "extendedDetails": {}
    },
    "a0bde7d525911680f9e5fb0a939604865eb8e164": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7142. Support placement policy in yarn native services. (Gour Saha via wangda)\n\nChange-Id: I166c67a7a34430627c17365f60bac75b6da1b434\n",
      "commitDate": "02/04/18 7:26 AM",
      "commitName": "a0bde7d525911680f9e5fb0a939604865eb8e164",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,17 @@\n+  private static void validatePlacementPolicy(List\u003cComponent\u003e components,\n+      Set\u003cString\u003e componentNames) {\n+    for (Component comp : components) {\n+      if (comp.getPlacementPolicy() !\u003d null) {\n+        for (PlacementConstraint constraint : comp.getPlacementPolicy()\n+            .getConstraints()) {\n+          for (String targetTag : constraint.getTargetTags()) {\n+            if (!comp.getName().equals(targetTag)) {\n+              throw new IllegalArgumentException(String.format(\n+                  RestApiErrorMessages.ERROR_PLACEMENT_POLICY_TAG_NAME_NOT_SAME,\n+                  targetTag, comp.getName(), comp.getName(), comp.getName()));\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validatePlacementPolicy(List\u003cComponent\u003e components,\n      Set\u003cString\u003e componentNames) {\n    for (Component comp : components) {\n      if (comp.getPlacementPolicy() !\u003d null) {\n        for (PlacementConstraint constraint : comp.getPlacementPolicy()\n            .getConstraints()) {\n          for (String targetTag : constraint.getTargetTags()) {\n            if (!comp.getName().equals(targetTag)) {\n              throw new IllegalArgumentException(String.format(\n                  RestApiErrorMessages.ERROR_PLACEMENT_POLICY_TAG_NAME_NOT_SAME,\n                  targetTag, comp.getName(), comp.getName(), comp.getName()));\n            }\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java"
    }
  }
}