{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAuthenticationFilter.java",
  "functionName": "doFilter",
  "functionId": "doFilter___request-ServletRequest__response-ServletResponse__filterChain-FilterChain",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/security/http/RMAuthenticationFilter.java",
  "functionStartLine": 60,
  "functionEndLine": 83,
  "numCommitsSeen": 3,
  "timeTaken": 1327,
  "changeHistory": [
    "1220bb72d452521c6f09cebe1dd77341054ee9dd"
  ],
  "changeHistoryShort": {
    "1220bb72d452521c6f09cebe1dd77341054ee9dd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1220bb72d452521c6f09cebe1dd77341054ee9dd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2656. Made RM web services authentication filter support proxy user. Contributed by Varun Vasudev and Zhijie Shen.\n",
      "commitDate": "14/10/14 9:50 PM",
      "commitName": "1220bb72d452521c6f09cebe1dd77341054ee9dd",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,24 @@\n+  public void doFilter(ServletRequest request, ServletResponse response,\n+      FilterChain filterChain) throws IOException, ServletException {\n+    HttpServletRequest req \u003d (HttpServletRequest) request;\n+    String newHeader \u003d\n+        req.getHeader(DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER);\n+    if (newHeader \u003d\u003d null || newHeader.isEmpty()) {\n+      // For backward compatibility, allow use of the old header field\n+      // only when the new header doesn\u0027t exist\n+      final String oldHeader \u003d req.getHeader(OLD_HEADER);\n+      if (oldHeader !\u003d null \u0026\u0026 !oldHeader.isEmpty()) {\n+        request \u003d new HttpServletRequestWrapper(req) {\n+          @Override\n+          public String getHeader(String name) {\n+            if (name\n+                .equals(DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER)) {\n+              return oldHeader;\n+            }\n+            return super.getHeader(name);\n+          }\n+        };\n+      }\n+    }\n+    super.doFilter(request, response, filterChain);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    HttpServletRequest req \u003d (HttpServletRequest) request;\n    String newHeader \u003d\n        req.getHeader(DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER);\n    if (newHeader \u003d\u003d null || newHeader.isEmpty()) {\n      // For backward compatibility, allow use of the old header field\n      // only when the new header doesn\u0027t exist\n      final String oldHeader \u003d req.getHeader(OLD_HEADER);\n      if (oldHeader !\u003d null \u0026\u0026 !oldHeader.isEmpty()) {\n        request \u003d new HttpServletRequestWrapper(req) {\n          @Override\n          public String getHeader(String name) {\n            if (name\n                .equals(DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER)) {\n              return oldHeader;\n            }\n            return super.getHeader(name);\n          }\n        };\n      }\n    }\n    super.doFilter(request, response, filterChain);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/security/http/RMAuthenticationFilter.java"
    }
  }
}