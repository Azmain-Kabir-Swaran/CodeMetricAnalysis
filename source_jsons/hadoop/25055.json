{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MRApps.java",
  "functionName": "setClasspath",
  "functionId": "setClasspath___environment-Map__String,String____conf-Configuration",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
  "functionStartLine": 237,
  "functionEndLine": 286,
  "numCommitsSeen": 69,
  "timeTaken": 3012,
  "changeHistory": [
    "e46d5bb962b0c942f993afc505b165b1cd96e51b",
    "4102e5882e17b75507ae5cf8b8979485b3e24cbc",
    "0f95921447ea547bdf9caf18f7fde46bc66031f8",
    "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb",
    "0ba7078ef4ee127a47c5042c82db0b113a967b23",
    "49beea562a3b6bbb5eb56d89759e51b35c5fd4f1",
    "050fd3a11744cde3d54c1fff23d8fdeb3803bf92",
    "dc33a0765cd27255021911c4abb435b5850387aa",
    "267bebeab0430976637eda3e4a63de3220256ea7",
    "947ede4c4e03a1684890ede265c211482b172bec",
    "f73daf6af1c87c65dd97e5ec4608ba2742dc83ea",
    "c1d90772b6e38bb4e4be7ed75cb5d34f3048ad7b",
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940"
  ],
  "changeHistoryShort": {
    "e46d5bb962b0c942f993afc505b165b1cd96e51b": "Ybodychange",
    "4102e5882e17b75507ae5cf8b8979485b3e24cbc": "Ybodychange",
    "0f95921447ea547bdf9caf18f7fde46bc66031f8": "Ybodychange",
    "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb": "Ybodychange",
    "0ba7078ef4ee127a47c5042c82db0b113a967b23": "Ybodychange",
    "49beea562a3b6bbb5eb56d89759e51b35c5fd4f1": "Ybodychange",
    "050fd3a11744cde3d54c1fff23d8fdeb3803bf92": "Ybodychange",
    "dc33a0765cd27255021911c4abb435b5850387aa": "Ybodychange",
    "267bebeab0430976637eda3e4a63de3220256ea7": "Ybodychange",
    "947ede4c4e03a1684890ede265c211482b172bec": "Ybodychange",
    "f73daf6af1c87c65dd97e5ec4608ba2742dc83ea": "Ymultichange(Yparameterchange,Ybodychange)",
    "c1d90772b6e38bb4e4be7ed75cb5d34f3048ad7b": "Ybodychange",
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e46d5bb962b0c942f993afc505b165b1cd96e51b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5951. Add support for the YARN Shared Cache.\n",
      "commitDate": "12/10/17 10:59 AM",
      "commitName": "e46d5bb962b0c942f993afc505b165b1cd96e51b",
      "commitAuthor": "Chris Trezzo",
      "commitDateOld": "31/05/17 9:35 PM",
      "commitNameOld": "f5517a82001eea2207a93d3b70d42ad8f4ddeccb",
      "commitAuthorOld": "Sean Busbey",
      "daysBetweenCommits": 133.56,
      "commitsBetweenForRepo": 980,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,50 @@\n   public static void setClasspath(Map\u003cString, String\u003e environment,\n       Configuration conf) throws IOException {\n     boolean userClassesTakesPrecedence \u003d \n       conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n \n     String classpathEnvVar \u003d\n       conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_CLASSLOADER, false)\n         ? Environment.APP_CLASSPATH.name() : Environment.CLASSPATH.name();\n \n     MRApps.addToEnvironment(environment,\n       classpathEnvVar, crossPlatformifyMREnv(conf, Environment.PWD), conf);\n     if (!userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n+    /*\n+     * We use \"*\" for the name of the JOB_JAR instead of MRJobConfig.JOB_JAR for\n+     * the case where the job jar is not necessarily named \"job.jar\". This can\n+     * happen, for example, when the job is leveraging a resource from the YARN\n+     * shared cache.\n+     */\n     MRApps.addToEnvironment(\n         environment,\n         classpathEnvVar,\n-        MRJobConfig.JOB_JAR + Path.SEPARATOR + MRJobConfig.JOB_JAR, conf);\n+        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"*\", conf);\n     MRApps.addToEnvironment(\n         environment,\n         classpathEnvVar,\n         MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR, conf);\n     MRApps.addToEnvironment(\n         environment,\n         classpathEnvVar,\n         MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\", conf);\n     MRApps.addToEnvironment(\n         environment,\n         classpathEnvVar,\n         crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + \"*\", conf);\n     // a * in the classpath will only find a .jar, so we need to filter out\n     // all .jars and add everything else\n     addToClasspathIfNotJar(DistributedCache.getFileClassPaths(conf),\n         DistributedCache.getCacheFiles(conf),\n         conf,\n         environment, classpathEnvVar);\n     addToClasspathIfNotJar(DistributedCache.getArchiveClassPaths(conf),\n         DistributedCache.getCacheArchives(conf),\n         conf,\n         environment, classpathEnvVar);\n     if (userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setClasspath(Map\u003cString, String\u003e environment,\n      Configuration conf) throws IOException {\n    boolean userClassesTakesPrecedence \u003d \n      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n\n    String classpathEnvVar \u003d\n      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_CLASSLOADER, false)\n        ? Environment.APP_CLASSPATH.name() : Environment.CLASSPATH.name();\n\n    MRApps.addToEnvironment(environment,\n      classpathEnvVar, crossPlatformifyMREnv(conf, Environment.PWD), conf);\n    if (!userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n    /*\n     * We use \"*\" for the name of the JOB_JAR instead of MRJobConfig.JOB_JAR for\n     * the case where the job jar is not necessarily named \"job.jar\". This can\n     * happen, for example, when the job is leveraging a resource from the YARN\n     * shared cache.\n     */\n    MRApps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"*\", conf);\n    MRApps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR, conf);\n    MRApps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\", conf);\n    MRApps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + \"*\", conf);\n    // a * in the classpath will only find a .jar, so we need to filter out\n    // all .jars and add everything else\n    addToClasspathIfNotJar(DistributedCache.getFileClassPaths(conf),\n        DistributedCache.getCacheFiles(conf),\n        conf,\n        environment, classpathEnvVar);\n    addToClasspathIfNotJar(DistributedCache.getArchiveClassPaths(conf),\n        DistributedCache.getCacheArchives(conf),\n        conf,\n        environment, classpathEnvVar);\n    if (userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "4102e5882e17b75507ae5cf8b8979485b3e24cbc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3626. On Windows localized resources are not moved to the front of the classpath when they should be. Contributed by Craig Welch.\n",
      "commitDate": "27/05/15 2:31 PM",
      "commitName": "4102e5882e17b75507ae5cf8b8979485b3e24cbc",
      "commitAuthor": "cnauroth",
      "commitDateOld": "13/05/15 1:10 PM",
      "commitNameOld": "0f95921447ea547bdf9caf18f7fde46bc66031f8",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 14.06,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,44 @@\n   public static void setClasspath(Map\u003cString, String\u003e environment,\n       Configuration conf) throws IOException {\n     boolean userClassesTakesPrecedence \u003d \n       conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n \n-    if (userClassesTakesPrecedence) {\n-      conf.set(YarnConfiguration.YARN_APPLICATION_CLASSPATH_PREPEND_DISTCACHE,\n-        \"true\");\n-    }\n-\n     String classpathEnvVar \u003d\n       conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_CLASSLOADER, false)\n         ? Environment.APP_CLASSPATH.name() : Environment.CLASSPATH.name();\n \n     MRApps.addToEnvironment(environment,\n       classpathEnvVar, crossPlatformifyMREnv(conf, Environment.PWD), conf);\n     if (!userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n     MRApps.addToEnvironment(\n         environment,\n         classpathEnvVar,\n         MRJobConfig.JOB_JAR + Path.SEPARATOR + MRJobConfig.JOB_JAR, conf);\n     MRApps.addToEnvironment(\n         environment,\n         classpathEnvVar,\n         MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR, conf);\n     MRApps.addToEnvironment(\n         environment,\n         classpathEnvVar,\n         MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\", conf);\n     MRApps.addToEnvironment(\n         environment,\n         classpathEnvVar,\n         crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + \"*\", conf);\n     // a * in the classpath will only find a .jar, so we need to filter out\n     // all .jars and add everything else\n     addToClasspathIfNotJar(DistributedCache.getFileClassPaths(conf),\n         DistributedCache.getCacheFiles(conf),\n         conf,\n         environment, classpathEnvVar);\n     addToClasspathIfNotJar(DistributedCache.getArchiveClassPaths(conf),\n         DistributedCache.getCacheArchives(conf),\n         conf,\n         environment, classpathEnvVar);\n     if (userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setClasspath(Map\u003cString, String\u003e environment,\n      Configuration conf) throws IOException {\n    boolean userClassesTakesPrecedence \u003d \n      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n\n    String classpathEnvVar \u003d\n      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_CLASSLOADER, false)\n        ? Environment.APP_CLASSPATH.name() : Environment.CLASSPATH.name();\n\n    MRApps.addToEnvironment(environment,\n      classpathEnvVar, crossPlatformifyMREnv(conf, Environment.PWD), conf);\n    if (!userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n    MRApps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + MRJobConfig.JOB_JAR, conf);\n    MRApps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR, conf);\n    MRApps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\", conf);\n    MRApps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + \"*\", conf);\n    // a * in the classpath will only find a .jar, so we need to filter out\n    // all .jars and add everything else\n    addToClasspathIfNotJar(DistributedCache.getFileClassPaths(conf),\n        DistributedCache.getCacheFiles(conf),\n        conf,\n        environment, classpathEnvVar);\n    addToClasspathIfNotJar(DistributedCache.getArchiveClassPaths(conf),\n        DistributedCache.getCacheArchives(conf),\n        conf,\n        environment, classpathEnvVar);\n    if (userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "0f95921447ea547bdf9caf18f7fde46bc66031f8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3626. On Windows localized resources are not moved to the front of the classpath when they should be. Contributed by Craig Welch\n",
      "commitDate": "13/05/15 1:10 PM",
      "commitName": "0f95921447ea547bdf9caf18f7fde46bc66031f8",
      "commitAuthor": "Xuan",
      "commitDateOld": "21/04/15 1:57 PM",
      "commitNameOld": "725eb52ddc647074f0bf1cc73c3029f1352f51d5",
      "commitAuthorOld": "Gera Shegalov",
      "daysBetweenCommits": 21.97,
      "commitsBetweenForRepo": 282,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,49 @@\n   public static void setClasspath(Map\u003cString, String\u003e environment,\n       Configuration conf) throws IOException {\n     boolean userClassesTakesPrecedence \u003d \n       conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n \n-    String classpathEnvVar \u003d \n+    if (userClassesTakesPrecedence) {\n+      conf.set(YarnConfiguration.YARN_APPLICATION_CLASSPATH_PREPEND_DISTCACHE,\n+        \"true\");\n+    }\n+\n+    String classpathEnvVar \u003d\n       conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_CLASSLOADER, false)\n         ? Environment.APP_CLASSPATH.name() : Environment.CLASSPATH.name();\n \n     MRApps.addToEnvironment(environment,\n       classpathEnvVar, crossPlatformifyMREnv(conf, Environment.PWD), conf);\n     if (!userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n     MRApps.addToEnvironment(\n         environment,\n         classpathEnvVar,\n         MRJobConfig.JOB_JAR + Path.SEPARATOR + MRJobConfig.JOB_JAR, conf);\n     MRApps.addToEnvironment(\n         environment,\n         classpathEnvVar,\n         MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR, conf);\n     MRApps.addToEnvironment(\n         environment,\n         classpathEnvVar,\n         MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\", conf);\n     MRApps.addToEnvironment(\n         environment,\n         classpathEnvVar,\n         crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + \"*\", conf);\n     // a * in the classpath will only find a .jar, so we need to filter out\n     // all .jars and add everything else\n     addToClasspathIfNotJar(DistributedCache.getFileClassPaths(conf),\n         DistributedCache.getCacheFiles(conf),\n         conf,\n         environment, classpathEnvVar);\n     addToClasspathIfNotJar(DistributedCache.getArchiveClassPaths(conf),\n         DistributedCache.getCacheArchives(conf),\n         conf,\n         environment, classpathEnvVar);\n     if (userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setClasspath(Map\u003cString, String\u003e environment,\n      Configuration conf) throws IOException {\n    boolean userClassesTakesPrecedence \u003d \n      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n\n    if (userClassesTakesPrecedence) {\n      conf.set(YarnConfiguration.YARN_APPLICATION_CLASSPATH_PREPEND_DISTCACHE,\n        \"true\");\n    }\n\n    String classpathEnvVar \u003d\n      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_CLASSLOADER, false)\n        ? Environment.APP_CLASSPATH.name() : Environment.CLASSPATH.name();\n\n    MRApps.addToEnvironment(environment,\n      classpathEnvVar, crossPlatformifyMREnv(conf, Environment.PWD), conf);\n    if (!userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n    MRApps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + MRJobConfig.JOB_JAR, conf);\n    MRApps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR, conf);\n    MRApps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\", conf);\n    MRApps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + \"*\", conf);\n    // a * in the classpath will only find a .jar, so we need to filter out\n    // all .jars and add everything else\n    addToClasspathIfNotJar(DistributedCache.getFileClassPaths(conf),\n        DistributedCache.getCacheFiles(conf),\n        conf,\n        environment, classpathEnvVar);\n    addToClasspathIfNotJar(DistributedCache.getArchiveClassPaths(conf),\n        DistributedCache.getCacheArchives(conf),\n        conf,\n        environment, classpathEnvVar);\n    if (userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1824. Improved NodeManager and clients to be able to handle cross platform application submissions. Contributed by Jian He.\nMAPREDUCE-4052. Improved MapReduce clients to use NodeManagers\u0027 ability to handle cross platform application submissions. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1578135 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/03/14 11:32 AM",
      "commitName": "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/03/14 3:04 PM",
      "commitNameOld": "3bbd67173eaf776b7b5e4af8a24dd8738e02fed0",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 3.85,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,44 @@\n   public static void setClasspath(Map\u003cString, String\u003e environment,\n       Configuration conf) throws IOException {\n     boolean userClassesTakesPrecedence \u003d \n       conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n \n     String classpathEnvVar \u003d \n       conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_CLASSLOADER, false)\n         ? Environment.APP_CLASSPATH.name() : Environment.CLASSPATH.name();\n \n-    Apps.addToEnvironment(environment,\n-      classpathEnvVar,\n-      Environment.PWD.$());\n+    MRApps.addToEnvironment(environment,\n+      classpathEnvVar, crossPlatformifyMREnv(conf, Environment.PWD), conf);\n     if (!userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n-    Apps.addToEnvironment(\n+    MRApps.addToEnvironment(\n         environment,\n         classpathEnvVar,\n-        MRJobConfig.JOB_JAR + Path.SEPARATOR + MRJobConfig.JOB_JAR);\n-    Apps.addToEnvironment(\n+        MRJobConfig.JOB_JAR + Path.SEPARATOR + MRJobConfig.JOB_JAR, conf);\n+    MRApps.addToEnvironment(\n         environment,\n         classpathEnvVar,\n-        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR);\n-    Apps.addToEnvironment(\n+        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR, conf);\n+    MRApps.addToEnvironment(\n         environment,\n         classpathEnvVar,\n-        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\");\n-    Apps.addToEnvironment(\n+        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\", conf);\n+    MRApps.addToEnvironment(\n         environment,\n         classpathEnvVar,\n-        Environment.PWD.$() + Path.SEPARATOR + \"*\");\n+        crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + \"*\", conf);\n     // a * in the classpath will only find a .jar, so we need to filter out\n     // all .jars and add everything else\n     addToClasspathIfNotJar(DistributedCache.getFileClassPaths(conf),\n         DistributedCache.getCacheFiles(conf),\n         conf,\n         environment, classpathEnvVar);\n     addToClasspathIfNotJar(DistributedCache.getArchiveClassPaths(conf),\n         DistributedCache.getCacheArchives(conf),\n         conf,\n         environment, classpathEnvVar);\n     if (userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setClasspath(Map\u003cString, String\u003e environment,\n      Configuration conf) throws IOException {\n    boolean userClassesTakesPrecedence \u003d \n      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n\n    String classpathEnvVar \u003d \n      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_CLASSLOADER, false)\n        ? Environment.APP_CLASSPATH.name() : Environment.CLASSPATH.name();\n\n    MRApps.addToEnvironment(environment,\n      classpathEnvVar, crossPlatformifyMREnv(conf, Environment.PWD), conf);\n    if (!userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n    MRApps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + MRJobConfig.JOB_JAR, conf);\n    MRApps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR, conf);\n    MRApps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\", conf);\n    MRApps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + \"*\", conf);\n    // a * in the classpath will only find a .jar, so we need to filter out\n    // all .jars and add everything else\n    addToClasspathIfNotJar(DistributedCache.getFileClassPaths(conf),\n        DistributedCache.getCacheFiles(conf),\n        conf,\n        environment, classpathEnvVar);\n    addToClasspathIfNotJar(DistributedCache.getArchiveClassPaths(conf),\n        DistributedCache.getCacheArchives(conf),\n        conf,\n        environment, classpathEnvVar);\n    if (userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "0ba7078ef4ee127a47c5042c82db0b113a967b23": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-1700. User supplied dependencies may conflict with MapReduce system JARs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430929 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/13 8:12 AM",
      "commitName": "0ba7078ef4ee127a47c5042c82db0b113a967b23",
      "commitAuthor": "Thomas White",
      "commitDateOld": "04/01/13 12:35 PM",
      "commitNameOld": "64e4fb983e022d8d3375a3e1b8facbf95f7ba403",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 4.82,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,45 @@\n   public static void setClasspath(Map\u003cString, String\u003e environment,\n       Configuration conf) throws IOException {\n     boolean userClassesTakesPrecedence \u003d \n       conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n \n+    String classpathEnvVar \u003d \n+      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_CLASSLOADER, false)\n+        ? Environment.APP_CLASSPATH.name() : Environment.CLASSPATH.name();\n+\n     Apps.addToEnvironment(environment,\n-      Environment.CLASSPATH.name(),\n+      classpathEnvVar,\n       Environment.PWD.$());\n     if (!userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n     Apps.addToEnvironment(\n         environment,\n-        Environment.CLASSPATH.name(),\n+        classpathEnvVar,\n         MRJobConfig.JOB_JAR + Path.SEPARATOR + MRJobConfig.JOB_JAR);\n     Apps.addToEnvironment(\n         environment,\n-        Environment.CLASSPATH.name(),\n+        classpathEnvVar,\n         MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR);\n     Apps.addToEnvironment(\n         environment,\n-        Environment.CLASSPATH.name(),\n+        classpathEnvVar,\n         MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\");\n     Apps.addToEnvironment(\n         environment,\n-        Environment.CLASSPATH.name(),\n+        classpathEnvVar,\n         Environment.PWD.$() + Path.SEPARATOR + \"*\");\n     // a * in the classpath will only find a .jar, so we need to filter out\n     // all .jars and add everything else\n     addToClasspathIfNotJar(DistributedCache.getFileClassPaths(conf),\n         DistributedCache.getCacheFiles(conf),\n         conf,\n-        environment);\n+        environment, classpathEnvVar);\n     addToClasspathIfNotJar(DistributedCache.getArchiveClassPaths(conf),\n         DistributedCache.getCacheArchives(conf),\n         conf,\n-        environment);\n+        environment, classpathEnvVar);\n     if (userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setClasspath(Map\u003cString, String\u003e environment,\n      Configuration conf) throws IOException {\n    boolean userClassesTakesPrecedence \u003d \n      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n\n    String classpathEnvVar \u003d \n      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_CLASSLOADER, false)\n        ? Environment.APP_CLASSPATH.name() : Environment.CLASSPATH.name();\n\n    Apps.addToEnvironment(environment,\n      classpathEnvVar,\n      Environment.PWD.$());\n    if (!userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n    Apps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + MRJobConfig.JOB_JAR);\n    Apps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR);\n    Apps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\");\n    Apps.addToEnvironment(\n        environment,\n        classpathEnvVar,\n        Environment.PWD.$() + Path.SEPARATOR + \"*\");\n    // a * in the classpath will only find a .jar, so we need to filter out\n    // all .jars and add everything else\n    addToClasspathIfNotJar(DistributedCache.getFileClassPaths(conf),\n        DistributedCache.getCacheFiles(conf),\n        conf,\n        environment, classpathEnvVar);\n    addToClasspathIfNotJar(DistributedCache.getArchiveClassPaths(conf),\n        DistributedCache.getCacheArchives(conf),\n        conf,\n        environment, classpathEnvVar);\n    if (userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "49beea562a3b6bbb5eb56d89759e51b35c5fd4f1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4740. only .jars can be added to the Distributed Cache classpath. Contributed by Robert Joseph Evans\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401054 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/10/12 12:50 PM",
      "commitName": "49beea562a3b6bbb5eb56d89759e51b35c5fd4f1",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "18/10/12 10:57 PM",
      "commitNameOld": "022f7b4a25c73b8c43985e8d1bac717b96373ac6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.58,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,41 @@\n   public static void setClasspath(Map\u003cString, String\u003e environment,\n       Configuration conf) throws IOException {\n     boolean userClassesTakesPrecedence \u003d \n       conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n \n     Apps.addToEnvironment(environment,\n       Environment.CLASSPATH.name(),\n       Environment.PWD.$());\n     if (!userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n     Apps.addToEnvironment(\n         environment,\n         Environment.CLASSPATH.name(),\n         MRJobConfig.JOB_JAR + Path.SEPARATOR + MRJobConfig.JOB_JAR);\n     Apps.addToEnvironment(\n         environment,\n         Environment.CLASSPATH.name(),\n         MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR);\n     Apps.addToEnvironment(\n         environment,\n         Environment.CLASSPATH.name(),\n         MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\");\n     Apps.addToEnvironment(\n         environment,\n         Environment.CLASSPATH.name(),\n         Environment.PWD.$() + Path.SEPARATOR + \"*\");\n+    // a * in the classpath will only find a .jar, so we need to filter out\n+    // all .jars and add everything else\n+    addToClasspathIfNotJar(DistributedCache.getFileClassPaths(conf),\n+        DistributedCache.getCacheFiles(conf),\n+        conf,\n+        environment);\n+    addToClasspathIfNotJar(DistributedCache.getArchiveClassPaths(conf),\n+        DistributedCache.getCacheArchives(conf),\n+        conf,\n+        environment);\n     if (userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setClasspath(Map\u003cString, String\u003e environment,\n      Configuration conf) throws IOException {\n    boolean userClassesTakesPrecedence \u003d \n      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n\n    Apps.addToEnvironment(environment,\n      Environment.CLASSPATH.name(),\n      Environment.PWD.$());\n    if (!userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n    Apps.addToEnvironment(\n        environment,\n        Environment.CLASSPATH.name(),\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + MRJobConfig.JOB_JAR);\n    Apps.addToEnvironment(\n        environment,\n        Environment.CLASSPATH.name(),\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR);\n    Apps.addToEnvironment(\n        environment,\n        Environment.CLASSPATH.name(),\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\");\n    Apps.addToEnvironment(\n        environment,\n        Environment.CLASSPATH.name(),\n        Environment.PWD.$() + Path.SEPARATOR + \"*\");\n    // a * in the classpath will only find a .jar, so we need to filter out\n    // all .jars and add everything else\n    addToClasspathIfNotJar(DistributedCache.getFileClassPaths(conf),\n        DistributedCache.getCacheFiles(conf),\n        conf,\n        environment);\n    addToClasspathIfNotJar(DistributedCache.getArchiveClassPaths(conf),\n        DistributedCache.getCacheArchives(conf),\n        conf,\n        environment);\n    if (userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "050fd3a11744cde3d54c1fff23d8fdeb3803bf92": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4647. We should only unjar jobjar if there is a lib directory in it. (Robert Evans via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1390557 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/12 8:22 AM",
      "commitName": "050fd3a11744cde3d54c1fff23d8fdeb3803bf92",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "06/09/12 9:56 PM",
      "commitNameOld": "00569147730fbf9bba6e3b0b38bec302af6046fe",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 19.43,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public static void setClasspath(Map\u003cString, String\u003e environment,\n       Configuration conf) throws IOException {\n     boolean userClassesTakesPrecedence \u003d \n       conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n \n     Apps.addToEnvironment(environment,\n       Environment.CLASSPATH.name(),\n       Environment.PWD.$());\n     if (!userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n     Apps.addToEnvironment(\n         environment,\n         Environment.CLASSPATH.name(),\n-        MRJobConfig.JOB_JAR + Path.SEPARATOR);\n+        MRJobConfig.JOB_JAR + Path.SEPARATOR + MRJobConfig.JOB_JAR);\n     Apps.addToEnvironment(\n         environment,\n         Environment.CLASSPATH.name(),\n         MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR);\n     Apps.addToEnvironment(\n         environment,\n         Environment.CLASSPATH.name(),\n         MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\");\n     Apps.addToEnvironment(\n         environment,\n         Environment.CLASSPATH.name(),\n         Environment.PWD.$() + Path.SEPARATOR + \"*\");\n     if (userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setClasspath(Map\u003cString, String\u003e environment,\n      Configuration conf) throws IOException {\n    boolean userClassesTakesPrecedence \u003d \n      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n\n    Apps.addToEnvironment(environment,\n      Environment.CLASSPATH.name(),\n      Environment.PWD.$());\n    if (!userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n    Apps.addToEnvironment(\n        environment,\n        Environment.CLASSPATH.name(),\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + MRJobConfig.JOB_JAR);\n    Apps.addToEnvironment(\n        environment,\n        Environment.CLASSPATH.name(),\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR);\n    Apps.addToEnvironment(\n        environment,\n        Environment.CLASSPATH.name(),\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\");\n    Apps.addToEnvironment(\n        environment,\n        Environment.CLASSPATH.name(),\n        Environment.PWD.$() + Path.SEPARATOR + \"*\");\n    if (userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "dc33a0765cd27255021911c4abb435b5850387aa": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4068. Jars in lib subdirectory of the submittable JAR are not added to the classpath (rkanter via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1376253 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/12 2:18 PM",
      "commitName": "dc33a0765cd27255021911c4abb435b5850387aa",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "03/08/12 1:29 PM",
      "commitNameOld": "72789336b29b7f6c68216551f129361db53dcea4",
      "commitAuthorOld": "Jonathan Turner Eagles",
      "daysBetweenCommits": 19.03,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,31 @@\n   public static void setClasspath(Map\u003cString, String\u003e environment,\n       Configuration conf) throws IOException {\n     boolean userClassesTakesPrecedence \u003d \n       conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n \n     Apps.addToEnvironment(environment,\n       Environment.CLASSPATH.name(),\n       Environment.PWD.$());\n     if (!userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n     Apps.addToEnvironment(\n         environment,\n         Environment.CLASSPATH.name(),\n-        MRJobConfig.JOB_JAR);\n+        MRJobConfig.JOB_JAR + Path.SEPARATOR);\n+    Apps.addToEnvironment(\n+        environment,\n+        Environment.CLASSPATH.name(),\n+        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR);\n+    Apps.addToEnvironment(\n+        environment,\n+        Environment.CLASSPATH.name(),\n+        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\");\n     Apps.addToEnvironment(\n         environment,\n         Environment.CLASSPATH.name(),\n         Environment.PWD.$() + Path.SEPARATOR + \"*\");\n     if (userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setClasspath(Map\u003cString, String\u003e environment,\n      Configuration conf) throws IOException {\n    boolean userClassesTakesPrecedence \u003d \n      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n\n    Apps.addToEnvironment(environment,\n      Environment.CLASSPATH.name(),\n      Environment.PWD.$());\n    if (!userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n    Apps.addToEnvironment(\n        environment,\n        Environment.CLASSPATH.name(),\n        MRJobConfig.JOB_JAR + Path.SEPARATOR);\n    Apps.addToEnvironment(\n        environment,\n        Environment.CLASSPATH.name(),\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"classes\" + Path.SEPARATOR);\n    Apps.addToEnvironment(\n        environment,\n        Environment.CLASSPATH.name(),\n        MRJobConfig.JOB_JAR + Path.SEPARATOR + \"lib\" + Path.SEPARATOR + \"*\");\n    Apps.addToEnvironment(\n        environment,\n        Environment.CLASSPATH.name(),\n        Environment.PWD.$() + Path.SEPARATOR + \"*\");\n    if (userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "267bebeab0430976637eda3e4a63de3220256ea7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3884. PWD should be first in the classpath of MR tasks (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1292424 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/02/12 9:57 AM",
      "commitName": "267bebeab0430976637eda3e4a63de3220256ea7",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "01/02/12 12:43 PM",
      "commitNameOld": "947ede4c4e03a1684890ede265c211482b172bec",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 20.88,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,23 @@\n   public static void setClasspath(Map\u003cString, String\u003e environment,\n       Configuration conf) throws IOException {\n     boolean userClassesTakesPrecedence \u003d \n       conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n \n+    Apps.addToEnvironment(environment,\n+      Environment.CLASSPATH.name(),\n+      Environment.PWD.$());\n     if (!userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n     Apps.addToEnvironment(\n         environment,\n         Environment.CLASSPATH.name(),\n         MRJobConfig.JOB_JAR);\n     Apps.addToEnvironment(\n         environment,\n         Environment.CLASSPATH.name(),\n         Environment.PWD.$() + Path.SEPARATOR + \"*\");\n     if (userClassesTakesPrecedence) {\n       MRApps.setMRFrameworkClasspath(environment, conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setClasspath(Map\u003cString, String\u003e environment,\n      Configuration conf) throws IOException {\n    boolean userClassesTakesPrecedence \u003d \n      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n\n    Apps.addToEnvironment(environment,\n      Environment.CLASSPATH.name(),\n      Environment.PWD.$());\n    if (!userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n    Apps.addToEnvironment(\n        environment,\n        Environment.CLASSPATH.name(),\n        MRJobConfig.JOB_JAR);\n    Apps.addToEnvironment(\n        environment,\n        Environment.CLASSPATH.name(),\n        Environment.PWD.$() + Path.SEPARATOR + \"*\");\n    if (userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "947ede4c4e03a1684890ede265c211482b172bec": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3696. MR job via oozie does not work on hadoop 23. (John George via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1239310 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/02/12 12:43 PM",
      "commitName": "947ede4c4e03a1684890ede265c211482b172bec",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "24/01/12 10:21 AM",
      "commitNameOld": "f73daf6af1c87c65dd97e5ec4608ba2742dc83ea",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 8.1,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,20 @@\n   public static void setClasspath(Map\u003cString, String\u003e environment,\n       Configuration conf) throws IOException {\n+    boolean userClassesTakesPrecedence \u003d \n+      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n+\n+    if (!userClassesTakesPrecedence) {\n+      MRApps.setMRFrameworkClasspath(environment, conf);\n+    }\n     Apps.addToEnvironment(\n-        environment, \n-        Environment.CLASSPATH.name(), \n+        environment,\n+        Environment.CLASSPATH.name(),\n         MRJobConfig.JOB_JAR);\n     Apps.addToEnvironment(\n-        environment, \n+        environment,\n         Environment.CLASSPATH.name(),\n         Environment.PWD.$() + Path.SEPARATOR + \"*\");\n-    MRApps.setMRFrameworkClasspath(environment, conf);\n+    if (userClassesTakesPrecedence) {\n+      MRApps.setMRFrameworkClasspath(environment, conf);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setClasspath(Map\u003cString, String\u003e environment,\n      Configuration conf) throws IOException {\n    boolean userClassesTakesPrecedence \u003d \n      conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST, false);\n\n    if (!userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n    Apps.addToEnvironment(\n        environment,\n        Environment.CLASSPATH.name(),\n        MRJobConfig.JOB_JAR);\n    Apps.addToEnvironment(\n        environment,\n        Environment.CLASSPATH.name(),\n        Environment.PWD.$() + Path.SEPARATOR + \"*\");\n    if (userClassesTakesPrecedence) {\n      MRApps.setMRFrameworkClasspath(environment, conf);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "f73daf6af1c87c65dd97e5ec4608ba2742dc83ea": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3505. yarn APPLICATION_CLASSPATH needs to be overridable. (ahmed via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1235391 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/01/12 10:21 AM",
      "commitName": "f73daf6af1c87c65dd97e5ec4608ba2742dc83ea",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-3505. yarn APPLICATION_CLASSPATH needs to be overridable. (ahmed via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1235391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/01/12 10:21 AM",
          "commitName": "f73daf6af1c87c65dd97e5ec4608ba2742dc83ea",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "09/01/12 2:20 PM",
          "commitNameOld": "239a5549eadeccb0ab433abb38079dbe19f862ff",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 14.83,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  public static void setClasspath(Map\u003cString, String\u003e environment) \n-      throws IOException {\n+  public static void setClasspath(Map\u003cString, String\u003e environment,\n+      Configuration conf) throws IOException {\n     Apps.addToEnvironment(\n         environment, \n         Environment.CLASSPATH.name(), \n         MRJobConfig.JOB_JAR);\n     Apps.addToEnvironment(\n         environment, \n         Environment.CLASSPATH.name(),\n         Environment.PWD.$() + Path.SEPARATOR + \"*\");\n-    MRApps.setMRFrameworkClasspath(environment);\n+    MRApps.setMRFrameworkClasspath(environment, conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void setClasspath(Map\u003cString, String\u003e environment,\n      Configuration conf) throws IOException {\n    Apps.addToEnvironment(\n        environment, \n        Environment.CLASSPATH.name(), \n        MRJobConfig.JOB_JAR);\n    Apps.addToEnvironment(\n        environment, \n        Environment.CLASSPATH.name(),\n        Environment.PWD.$() + Path.SEPARATOR + \"*\");\n    MRApps.setMRFrameworkClasspath(environment, conf);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
          "extendedDetails": {
            "oldValue": "[environment-Map\u003cString,String\u003e]",
            "newValue": "[environment-Map\u003cString,String\u003e, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3505. yarn APPLICATION_CLASSPATH needs to be overridable. (ahmed via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1235391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/01/12 10:21 AM",
          "commitName": "f73daf6af1c87c65dd97e5ec4608ba2742dc83ea",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "09/01/12 2:20 PM",
          "commitNameOld": "239a5549eadeccb0ab433abb38079dbe19f862ff",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 14.83,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  public static void setClasspath(Map\u003cString, String\u003e environment) \n-      throws IOException {\n+  public static void setClasspath(Map\u003cString, String\u003e environment,\n+      Configuration conf) throws IOException {\n     Apps.addToEnvironment(\n         environment, \n         Environment.CLASSPATH.name(), \n         MRJobConfig.JOB_JAR);\n     Apps.addToEnvironment(\n         environment, \n         Environment.CLASSPATH.name(),\n         Environment.PWD.$() + Path.SEPARATOR + \"*\");\n-    MRApps.setMRFrameworkClasspath(environment);\n+    MRApps.setMRFrameworkClasspath(environment, conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void setClasspath(Map\u003cString, String\u003e environment,\n      Configuration conf) throws IOException {\n    Apps.addToEnvironment(\n        environment, \n        Environment.CLASSPATH.name(), \n        MRJobConfig.JOB_JAR);\n    Apps.addToEnvironment(\n        environment, \n        Environment.CLASSPATH.name(),\n        Environment.PWD.$() + Path.SEPARATOR + \"*\");\n    MRApps.setMRFrameworkClasspath(environment, conf);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
          "extendedDetails": {}
        }
      ]
    },
    "c1d90772b6e38bb4e4be7ed75cb5d34f3048ad7b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3068. Added a whitelist of environment variables for containers from the NodeManager and set MALLOC_ARENA_MAX for all daemons and containers. Contributed by Chris Riccomini. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1185447 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/10/11 6:22 PM",
      "commitName": "c1d90772b6e38bb4e4be7ed75cb5d34f3048ad7b",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "21/09/11 11:28 AM",
      "commitNameOld": "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 26.29,
      "commitsBetweenForRepo": 195,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,12 @@\n   public static void setClasspath(Map\u003cString, String\u003e environment) \n       throws IOException {\n-    MRApps.addToEnvironment(\n+    Apps.addToEnvironment(\n         environment, \n         Environment.CLASSPATH.name(), \n         MRJobConfig.JOB_JAR);\n-    MRApps.addToEnvironment(\n+    Apps.addToEnvironment(\n         environment, \n         Environment.CLASSPATH.name(),\n         Environment.PWD.$() + Path.SEPARATOR + \"*\");\n     MRApps.setMRFrameworkClasspath(environment);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setClasspath(Map\u003cString, String\u003e environment) \n      throws IOException {\n    Apps.addToEnvironment(\n        environment, \n        Environment.CLASSPATH.name(), \n        MRJobConfig.JOB_JAR);\n    Apps.addToEnvironment(\n        environment, \n        Environment.CLASSPATH.name(),\n        Environment.PWD.$() + Path.SEPARATOR + \"*\");\n    MRApps.setMRFrameworkClasspath(environment);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2880. Improved classpath-construction for mapreduce AM and containers. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1173783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/09/11 11:28 AM",
      "commitName": "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,12 @@\n+  public static void setClasspath(Map\u003cString, String\u003e environment) \n+      throws IOException {\n+    MRApps.addToEnvironment(\n+        environment, \n+        Environment.CLASSPATH.name(), \n+        MRJobConfig.JOB_JAR);\n+    MRApps.addToEnvironment(\n+        environment, \n+        Environment.CLASSPATH.name(),\n+        Environment.PWD.$() + Path.SEPARATOR + \"*\");\n+    MRApps.setMRFrameworkClasspath(environment);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setClasspath(Map\u003cString, String\u003e environment) \n      throws IOException {\n    MRApps.addToEnvironment(\n        environment, \n        Environment.CLASSPATH.name(), \n        MRJobConfig.JOB_JAR);\n    MRApps.addToEnvironment(\n        environment, \n        Environment.CLASSPATH.name(),\n        Environment.PWD.$() + Path.SEPARATOR + \"*\");\n    MRApps.setMRFrameworkClasspath(environment);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java"
    }
  }
}