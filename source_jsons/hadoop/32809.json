{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLaunch.java",
  "functionName": "signalContainer",
  "functionId": "signalContainer___command-SignalContainerCommand",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
  "functionStartLine": 819,
  "functionEndLine": 877,
  "numCommitsSeen": 95,
  "timeTaken": 4195,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "5ce70e1211e624d58e8bb1181aec00729ebdc085",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "8f08532bde153811368e1b8336446fba4743f9d2"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "5ce70e1211e624d58e8bb1181aec00729ebdc085": "Ybodychange",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "8f08532bde153811368e1b8336446fba4743f9d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "03/01/19 10:40 PM",
      "commitNameOld": "f4906ac01960c78ff0c91797eaa4b36d80f6826d",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 70.7,
      "commitsBetweenForRepo": 575,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,59 @@\n   public void signalContainer(SignalContainerCommand command)\n       throws IOException {\n     ContainerId containerId \u003d\n         container.getContainerTokenIdentifier().getContainerID();\n     String containerIdStr \u003d containerId.toString();\n     String user \u003d container.getUser();\n     Signal signal \u003d translateCommandToSignal(command);\n     if (signal.equals(Signal.NULL)) {\n       LOG.info(\"ignore signal command \" + command);\n       return;\n     }\n \n     LOG.info(\"Sending signal \" + command + \" to container \" + containerIdStr);\n \n     boolean alreadyLaunched \u003d\n         !containerAlreadyLaunched.compareAndSet(false, true);\n     if (!alreadyLaunched) {\n       LOG.info(\"Container \" + containerIdStr + \" not launched.\"\n           + \" Not sending the signal\");\n       return;\n     }\n \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Getting pid for container \" + containerIdStr\n-          + \" to send signal to from pid file \"\n-          + (pidFilePath !\u003d null ? pidFilePath.toString() : \"null\"));\n-    }\n+    LOG.debug(\"Getting pid for container {} to send signal to from pid\"\n+        + \" file {}\", containerIdStr,\n+        (pidFilePath !\u003d null ? pidFilePath.toString() : \"null\"));\n \n     try {\n       // get process id from pid file if available\n       // else if shell is still active, get it from the shell\n       String processId \u003d getContainerPid();\n       if (processId !\u003d null) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Sending signal to pid \" + processId\n-              + \" as user \" + user\n-              + \" for container \" + containerIdStr);\n-        }\n+        LOG.debug(\"Sending signal to pid {} as user {} for container {}\",\n+            processId, user, containerIdStr);\n \n         boolean result \u003d exec.signalContainer(\n             new ContainerSignalContext.Builder()\n                 .setContainer(container)\n                 .setUser(user)\n                 .setPid(processId)\n                 .setSignal(signal)\n                 .build());\n \n         String diagnostics \u003d \"Sent signal \" + command\n             + \" (\" + signal + \") to pid \" + processId\n             + \" as user \" + user\n             + \" for container \" + containerIdStr\n             + \", result\u003d\" + (result ? \"success\" : \"failed\");\n         LOG.info(diagnostics);\n \n         dispatcher.getEventHandler().handle(\n             new ContainerDiagnosticsUpdateEvent(containerId, diagnostics));\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Exception when sending signal to container \" + containerIdStr\n               + \": \" + StringUtils.stringifyException(e);\n       LOG.warn(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void signalContainer(SignalContainerCommand command)\n      throws IOException {\n    ContainerId containerId \u003d\n        container.getContainerTokenIdentifier().getContainerID();\n    String containerIdStr \u003d containerId.toString();\n    String user \u003d container.getUser();\n    Signal signal \u003d translateCommandToSignal(command);\n    if (signal.equals(Signal.NULL)) {\n      LOG.info(\"ignore signal command \" + command);\n      return;\n    }\n\n    LOG.info(\"Sending signal \" + command + \" to container \" + containerIdStr);\n\n    boolean alreadyLaunched \u003d\n        !containerAlreadyLaunched.compareAndSet(false, true);\n    if (!alreadyLaunched) {\n      LOG.info(\"Container \" + containerIdStr + \" not launched.\"\n          + \" Not sending the signal\");\n      return;\n    }\n\n    LOG.debug(\"Getting pid for container {} to send signal to from pid\"\n        + \" file {}\", containerIdStr,\n        (pidFilePath !\u003d null ? pidFilePath.toString() : \"null\"));\n\n    try {\n      // get process id from pid file if available\n      // else if shell is still active, get it from the shell\n      String processId \u003d getContainerPid();\n      if (processId !\u003d null) {\n        LOG.debug(\"Sending signal to pid {} as user {} for container {}\",\n            processId, user, containerIdStr);\n\n        boolean result \u003d exec.signalContainer(\n            new ContainerSignalContext.Builder()\n                .setContainer(container)\n                .setUser(user)\n                .setPid(processId)\n                .setSignal(signal)\n                .build());\n\n        String diagnostics \u003d \"Sent signal \" + command\n            + \" (\" + signal + \") to pid \" + processId\n            + \" as user \" + user\n            + \" for container \" + containerIdStr\n            + \", result\u003d\" + (result ? \"success\" : \"failed\");\n        LOG.info(diagnostics);\n\n        dispatcher.getEventHandler().handle(\n            new ContainerDiagnosticsUpdateEvent(containerId, diagnostics));\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Exception when sending signal to container \" + containerIdStr\n              + \": \" + StringUtils.stringifyException(e);\n      LOG.warn(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "5ce70e1211e624d58e8bb1181aec00729ebdc085": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7644. NM gets backed up deleting docker containers. Contributed by Chandni Singh\n",
      "commitDate": "10/10/18 7:52 AM",
      "commitName": "5ce70e1211e624d58e8bb1181aec00729ebdc085",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "27/09/18 12:31 PM",
      "commitNameOld": "b237a0dd44ab285941983648d7ef26b99b30d624",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 12.81,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,64 @@\n   public void signalContainer(SignalContainerCommand command)\n       throws IOException {\n     ContainerId containerId \u003d\n         container.getContainerTokenIdentifier().getContainerID();\n     String containerIdStr \u003d containerId.toString();\n     String user \u003d container.getUser();\n     Signal signal \u003d translateCommandToSignal(command);\n     if (signal.equals(Signal.NULL)) {\n       LOG.info(\"ignore signal command \" + command);\n       return;\n     }\n \n     LOG.info(\"Sending signal \" + command + \" to container \" + containerIdStr);\n \n     boolean alreadyLaunched \u003d\n         !containerAlreadyLaunched.compareAndSet(false, true);\n     if (!alreadyLaunched) {\n       LOG.info(\"Container \" + containerIdStr + \" not launched.\"\n           + \" Not sending the signal\");\n       return;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Getting pid for container \" + containerIdStr\n           + \" to send signal to from pid file \"\n           + (pidFilePath !\u003d null ? pidFilePath.toString() : \"null\"));\n     }\n \n     try {\n       // get process id from pid file if available\n       // else if shell is still active, get it from the shell\n-      String processId \u003d null;\n-      if (pidFilePath !\u003d null) {\n-        processId \u003d getContainerPid(pidFilePath);\n-      }\n-\n+      String processId \u003d getContainerPid();\n       if (processId !\u003d null) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Sending signal to pid \" + processId\n               + \" as user \" + user\n               + \" for container \" + containerIdStr);\n         }\n \n         boolean result \u003d exec.signalContainer(\n             new ContainerSignalContext.Builder()\n                 .setContainer(container)\n                 .setUser(user)\n                 .setPid(processId)\n                 .setSignal(signal)\n                 .build());\n \n         String diagnostics \u003d \"Sent signal \" + command\n             + \" (\" + signal + \") to pid \" + processId\n             + \" as user \" + user\n             + \" for container \" + containerIdStr\n             + \", result\u003d\" + (result ? \"success\" : \"failed\");\n         LOG.info(diagnostics);\n \n         dispatcher.getEventHandler().handle(\n             new ContainerDiagnosticsUpdateEvent(containerId, diagnostics));\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Exception when sending signal to container \" + containerIdStr\n               + \": \" + StringUtils.stringifyException(e);\n       LOG.warn(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void signalContainer(SignalContainerCommand command)\n      throws IOException {\n    ContainerId containerId \u003d\n        container.getContainerTokenIdentifier().getContainerID();\n    String containerIdStr \u003d containerId.toString();\n    String user \u003d container.getUser();\n    Signal signal \u003d translateCommandToSignal(command);\n    if (signal.equals(Signal.NULL)) {\n      LOG.info(\"ignore signal command \" + command);\n      return;\n    }\n\n    LOG.info(\"Sending signal \" + command + \" to container \" + containerIdStr);\n\n    boolean alreadyLaunched \u003d\n        !containerAlreadyLaunched.compareAndSet(false, true);\n    if (!alreadyLaunched) {\n      LOG.info(\"Container \" + containerIdStr + \" not launched.\"\n          + \" Not sending the signal\");\n      return;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Getting pid for container \" + containerIdStr\n          + \" to send signal to from pid file \"\n          + (pidFilePath !\u003d null ? pidFilePath.toString() : \"null\"));\n    }\n\n    try {\n      // get process id from pid file if available\n      // else if shell is still active, get it from the shell\n      String processId \u003d getContainerPid();\n      if (processId !\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Sending signal to pid \" + processId\n              + \" as user \" + user\n              + \" for container \" + containerIdStr);\n        }\n\n        boolean result \u003d exec.signalContainer(\n            new ContainerSignalContext.Builder()\n                .setContainer(container)\n                .setUser(user)\n                .setPid(processId)\n                .setSignal(signal)\n                .build());\n\n        String diagnostics \u003d \"Sent signal \" + command\n            + \" (\" + signal + \") to pid \" + processId\n            + \" as user \" + user\n            + \" for container \" + containerIdStr\n            + \", result\u003d\" + (result ? \"success\" : \"failed\");\n        LOG.info(diagnostics);\n\n        dispatcher.getEventHandler().handle(\n            new ContainerDiagnosticsUpdateEvent(containerId, diagnostics));\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Exception when sending signal to container \" + containerIdStr\n              + \": \" + StringUtils.stringifyException(e);\n      LOG.warn(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
      "commitDate": "15/11/16 7:56 AM",
      "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "01/11/16 2:21 AM",
      "commitNameOld": "310aa4686eb697f0700a71d33106514c404dab1b",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 14.27,
      "commitsBetweenForRepo": 134,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,68 @@\n   public void signalContainer(SignalContainerCommand command)\n       throws IOException {\n     ContainerId containerId \u003d\n         container.getContainerTokenIdentifier().getContainerID();\n     String containerIdStr \u003d containerId.toString();\n     String user \u003d container.getUser();\n     Signal signal \u003d translateCommandToSignal(command);\n     if (signal.equals(Signal.NULL)) {\n       LOG.info(\"ignore signal command \" + command);\n       return;\n     }\n \n     LOG.info(\"Sending signal \" + command + \" to container \" + containerIdStr);\n \n-    boolean alreadyLaunched \u003d !shouldLaunchContainer.compareAndSet(false, true);\n+    boolean alreadyLaunched \u003d\n+        !containerAlreadyLaunched.compareAndSet(false, true);\n     if (!alreadyLaunched) {\n       LOG.info(\"Container \" + containerIdStr + \" not launched.\"\n           + \" Not sending the signal\");\n       return;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Getting pid for container \" + containerIdStr\n           + \" to send signal to from pid file \"\n           + (pidFilePath !\u003d null ? pidFilePath.toString() : \"null\"));\n     }\n \n     try {\n       // get process id from pid file if available\n       // else if shell is still active, get it from the shell\n       String processId \u003d null;\n       if (pidFilePath !\u003d null) {\n         processId \u003d getContainerPid(pidFilePath);\n       }\n \n       if (processId !\u003d null) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Sending signal to pid \" + processId\n               + \" as user \" + user\n               + \" for container \" + containerIdStr);\n         }\n \n         boolean result \u003d exec.signalContainer(\n             new ContainerSignalContext.Builder()\n                 .setContainer(container)\n                 .setUser(user)\n                 .setPid(processId)\n                 .setSignal(signal)\n                 .build());\n \n         String diagnostics \u003d \"Sent signal \" + command\n             + \" (\" + signal + \") to pid \" + processId\n             + \" as user \" + user\n             + \" for container \" + containerIdStr\n             + \", result\u003d\" + (result ? \"success\" : \"failed\");\n         LOG.info(diagnostics);\n \n         dispatcher.getEventHandler().handle(\n             new ContainerDiagnosticsUpdateEvent(containerId, diagnostics));\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Exception when sending signal to container \" + containerIdStr\n               + \": \" + StringUtils.stringifyException(e);\n       LOG.warn(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void signalContainer(SignalContainerCommand command)\n      throws IOException {\n    ContainerId containerId \u003d\n        container.getContainerTokenIdentifier().getContainerID();\n    String containerIdStr \u003d containerId.toString();\n    String user \u003d container.getUser();\n    Signal signal \u003d translateCommandToSignal(command);\n    if (signal.equals(Signal.NULL)) {\n      LOG.info(\"ignore signal command \" + command);\n      return;\n    }\n\n    LOG.info(\"Sending signal \" + command + \" to container \" + containerIdStr);\n\n    boolean alreadyLaunched \u003d\n        !containerAlreadyLaunched.compareAndSet(false, true);\n    if (!alreadyLaunched) {\n      LOG.info(\"Container \" + containerIdStr + \" not launched.\"\n          + \" Not sending the signal\");\n      return;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Getting pid for container \" + containerIdStr\n          + \" to send signal to from pid file \"\n          + (pidFilePath !\u003d null ? pidFilePath.toString() : \"null\"));\n    }\n\n    try {\n      // get process id from pid file if available\n      // else if shell is still active, get it from the shell\n      String processId \u003d null;\n      if (pidFilePath !\u003d null) {\n        processId \u003d getContainerPid(pidFilePath);\n      }\n\n      if (processId !\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Sending signal to pid \" + processId\n              + \" as user \" + user\n              + \" for container \" + containerIdStr);\n        }\n\n        boolean result \u003d exec.signalContainer(\n            new ContainerSignalContext.Builder()\n                .setContainer(container)\n                .setUser(user)\n                .setPid(processId)\n                .setSignal(signal)\n                .build());\n\n        String diagnostics \u003d \"Sent signal \" + command\n            + \" (\" + signal + \") to pid \" + processId\n            + \" as user \" + user\n            + \" for container \" + containerIdStr\n            + \", result\u003d\" + (result ? \"success\" : \"failed\");\n        LOG.info(diagnostics);\n\n        dispatcher.getEventHandler().handle(\n            new ContainerDiagnosticsUpdateEvent(containerId, diagnostics));\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Exception when sending signal to container \" + containerIdStr\n              + \": \" + StringUtils.stringifyException(e);\n      LOG.warn(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "29/04/16 3:39 AM",
      "commitNameOld": "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 46.48,
      "commitsBetweenForRepo": 304,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,67 @@\n   public void signalContainer(SignalContainerCommand command)\n       throws IOException {\n     ContainerId containerId \u003d\n         container.getContainerTokenIdentifier().getContainerID();\n-    String containerIdStr \u003d ConverterUtils.toString(containerId);\n+    String containerIdStr \u003d containerId.toString();\n     String user \u003d container.getUser();\n     Signal signal \u003d translateCommandToSignal(command);\n     if (signal.equals(Signal.NULL)) {\n       LOG.info(\"ignore signal command \" + command);\n       return;\n     }\n \n     LOG.info(\"Sending signal \" + command + \" to container \" + containerIdStr);\n \n     boolean alreadyLaunched \u003d !shouldLaunchContainer.compareAndSet(false, true);\n     if (!alreadyLaunched) {\n       LOG.info(\"Container \" + containerIdStr + \" not launched.\"\n           + \" Not sending the signal\");\n       return;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Getting pid for container \" + containerIdStr\n           + \" to send signal to from pid file \"\n           + (pidFilePath !\u003d null ? pidFilePath.toString() : \"null\"));\n     }\n \n     try {\n       // get process id from pid file if available\n       // else if shell is still active, get it from the shell\n       String processId \u003d null;\n       if (pidFilePath !\u003d null) {\n         processId \u003d getContainerPid(pidFilePath);\n       }\n \n       if (processId !\u003d null) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Sending signal to pid \" + processId\n               + \" as user \" + user\n               + \" for container \" + containerIdStr);\n         }\n \n         boolean result \u003d exec.signalContainer(\n             new ContainerSignalContext.Builder()\n                 .setContainer(container)\n                 .setUser(user)\n                 .setPid(processId)\n                 .setSignal(signal)\n                 .build());\n \n         String diagnostics \u003d \"Sent signal \" + command\n             + \" (\" + signal + \") to pid \" + processId\n             + \" as user \" + user\n             + \" for container \" + containerIdStr\n             + \", result\u003d\" + (result ? \"success\" : \"failed\");\n         LOG.info(diagnostics);\n \n         dispatcher.getEventHandler().handle(\n             new ContainerDiagnosticsUpdateEvent(containerId, diagnostics));\n       }\n     } catch (Exception e) {\n       String message \u003d\n           \"Exception when sending signal to container \" + containerIdStr\n               + \": \" + StringUtils.stringifyException(e);\n       LOG.warn(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void signalContainer(SignalContainerCommand command)\n      throws IOException {\n    ContainerId containerId \u003d\n        container.getContainerTokenIdentifier().getContainerID();\n    String containerIdStr \u003d containerId.toString();\n    String user \u003d container.getUser();\n    Signal signal \u003d translateCommandToSignal(command);\n    if (signal.equals(Signal.NULL)) {\n      LOG.info(\"ignore signal command \" + command);\n      return;\n    }\n\n    LOG.info(\"Sending signal \" + command + \" to container \" + containerIdStr);\n\n    boolean alreadyLaunched \u003d !shouldLaunchContainer.compareAndSet(false, true);\n    if (!alreadyLaunched) {\n      LOG.info(\"Container \" + containerIdStr + \" not launched.\"\n          + \" Not sending the signal\");\n      return;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Getting pid for container \" + containerIdStr\n          + \" to send signal to from pid file \"\n          + (pidFilePath !\u003d null ? pidFilePath.toString() : \"null\"));\n    }\n\n    try {\n      // get process id from pid file if available\n      // else if shell is still active, get it from the shell\n      String processId \u003d null;\n      if (pidFilePath !\u003d null) {\n        processId \u003d getContainerPid(pidFilePath);\n      }\n\n      if (processId !\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Sending signal to pid \" + processId\n              + \" as user \" + user\n              + \" for container \" + containerIdStr);\n        }\n\n        boolean result \u003d exec.signalContainer(\n            new ContainerSignalContext.Builder()\n                .setContainer(container)\n                .setUser(user)\n                .setPid(processId)\n                .setSignal(signal)\n                .build());\n\n        String diagnostics \u003d \"Sent signal \" + command\n            + \" (\" + signal + \") to pid \" + processId\n            + \" as user \" + user\n            + \" for container \" + containerIdStr\n            + \", result\u003d\" + (result ? \"success\" : \"failed\");\n        LOG.info(diagnostics);\n\n        dispatcher.getEventHandler().handle(\n            new ContainerDiagnosticsUpdateEvent(containerId, diagnostics));\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Exception when sending signal to container \" + containerIdStr\n              + \": \" + StringUtils.stringifyException(e);\n      LOG.warn(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "8f08532bde153811368e1b8336446fba4743f9d2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1897. CLI and core support for signal container functionality. Contributed by Ming Ma\n",
      "commitDate": "02/10/15 6:50 PM",
      "commitName": "8f08532bde153811368e1b8336446fba4743f9d2",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,67 @@\n+  public void signalContainer(SignalContainerCommand command)\n+      throws IOException {\n+    ContainerId containerId \u003d\n+        container.getContainerTokenIdentifier().getContainerID();\n+    String containerIdStr \u003d ConverterUtils.toString(containerId);\n+    String user \u003d container.getUser();\n+    Signal signal \u003d translateCommandToSignal(command);\n+    if (signal.equals(Signal.NULL)) {\n+      LOG.info(\"ignore signal command \" + command);\n+      return;\n+    }\n+\n+    LOG.info(\"Sending signal \" + command + \" to container \" + containerIdStr);\n+\n+    boolean alreadyLaunched \u003d !shouldLaunchContainer.compareAndSet(false, true);\n+    if (!alreadyLaunched) {\n+      LOG.info(\"Container \" + containerIdStr + \" not launched.\"\n+          + \" Not sending the signal\");\n+      return;\n+    }\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Getting pid for container \" + containerIdStr\n+          + \" to send signal to from pid file \"\n+          + (pidFilePath !\u003d null ? pidFilePath.toString() : \"null\"));\n+    }\n+\n+    try {\n+      // get process id from pid file if available\n+      // else if shell is still active, get it from the shell\n+      String processId \u003d null;\n+      if (pidFilePath !\u003d null) {\n+        processId \u003d getContainerPid(pidFilePath);\n+      }\n+\n+      if (processId !\u003d null) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Sending signal to pid \" + processId\n+              + \" as user \" + user\n+              + \" for container \" + containerIdStr);\n+        }\n+\n+        boolean result \u003d exec.signalContainer(\n+            new ContainerSignalContext.Builder()\n+                .setContainer(container)\n+                .setUser(user)\n+                .setPid(processId)\n+                .setSignal(signal)\n+                .build());\n+\n+        String diagnostics \u003d \"Sent signal \" + command\n+            + \" (\" + signal + \") to pid \" + processId\n+            + \" as user \" + user\n+            + \" for container \" + containerIdStr\n+            + \", result\u003d\" + (result ? \"success\" : \"failed\");\n+        LOG.info(diagnostics);\n+\n+        dispatcher.getEventHandler().handle(\n+            new ContainerDiagnosticsUpdateEvent(containerId, diagnostics));\n+      }\n+    } catch (Exception e) {\n+      String message \u003d\n+          \"Exception when sending signal to container \" + containerIdStr\n+              + \": \" + StringUtils.stringifyException(e);\n+      LOG.warn(message);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void signalContainer(SignalContainerCommand command)\n      throws IOException {\n    ContainerId containerId \u003d\n        container.getContainerTokenIdentifier().getContainerID();\n    String containerIdStr \u003d ConverterUtils.toString(containerId);\n    String user \u003d container.getUser();\n    Signal signal \u003d translateCommandToSignal(command);\n    if (signal.equals(Signal.NULL)) {\n      LOG.info(\"ignore signal command \" + command);\n      return;\n    }\n\n    LOG.info(\"Sending signal \" + command + \" to container \" + containerIdStr);\n\n    boolean alreadyLaunched \u003d !shouldLaunchContainer.compareAndSet(false, true);\n    if (!alreadyLaunched) {\n      LOG.info(\"Container \" + containerIdStr + \" not launched.\"\n          + \" Not sending the signal\");\n      return;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Getting pid for container \" + containerIdStr\n          + \" to send signal to from pid file \"\n          + (pidFilePath !\u003d null ? pidFilePath.toString() : \"null\"));\n    }\n\n    try {\n      // get process id from pid file if available\n      // else if shell is still active, get it from the shell\n      String processId \u003d null;\n      if (pidFilePath !\u003d null) {\n        processId \u003d getContainerPid(pidFilePath);\n      }\n\n      if (processId !\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Sending signal to pid \" + processId\n              + \" as user \" + user\n              + \" for container \" + containerIdStr);\n        }\n\n        boolean result \u003d exec.signalContainer(\n            new ContainerSignalContext.Builder()\n                .setContainer(container)\n                .setUser(user)\n                .setPid(processId)\n                .setSignal(signal)\n                .build());\n\n        String diagnostics \u003d \"Sent signal \" + command\n            + \" (\" + signal + \") to pid \" + processId\n            + \" as user \" + user\n            + \" for container \" + containerIdStr\n            + \", result\u003d\" + (result ? \"success\" : \"failed\");\n        LOG.info(diagnostics);\n\n        dispatcher.getEventHandler().handle(\n            new ContainerDiagnosticsUpdateEvent(containerId, diagnostics));\n      }\n    } catch (Exception e) {\n      String message \u003d\n          \"Exception when sending signal to container \" + containerIdStr\n              + \": \" + StringUtils.stringifyException(e);\n      LOG.warn(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java"
    }
  }
}