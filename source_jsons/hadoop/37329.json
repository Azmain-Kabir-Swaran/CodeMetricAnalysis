{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractReservationSystem.java",
  "functionName": "initialize",
  "functionId": "initialize___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractReservationSystem.java",
  "functionStartLine": 143,
  "functionEndLine": 178,
  "numCommitsSeen": 15,
  "timeTaken": 2939,
  "changeHistory": [
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
    "e3345e985bff93c6c74a76747e45376c6027f42c",
    "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
    "23f937e3b718f607d4fc975610ab3a03265f0f7e",
    "2798723a5443d04455b9d79c48d61f435ab52267",
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e"
  ],
  "changeHistoryShort": {
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0": "Ybodychange",
    "e3345e985bff93c6c74a76747e45376c6027f42c": "Ybodychange",
    "7996eca7dcfaa1bdf970e32022274f2699bef8a1": "Ybodychange",
    "23f937e3b718f607d4fc975610ab3a03265f0f7e": "Ybodychange",
    "2798723a5443d04455b9d79c48d61f435ab52267": "Ybodychange",
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5328. Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\n",
      "commitDate": "06/09/17 4:46 PM",
      "commitName": "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "06/09/17 4:39 PM",
      "commitNameOld": "e3345e985bff93c6c74a76747e45376c6027f42c",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,36 @@\n   private void initialize(Configuration conf) throws YarnException {\n     LOG.info(\"Initializing Reservation system\");\n     this.conf \u003d conf;\n     scheduler \u003d rmContext.getScheduler();\n     // Get the plan step size\n-    planStepSize \u003d\n-        conf.getTimeDuration(\n-            YarnConfiguration.RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n-            YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n-            TimeUnit.MILLISECONDS);\n+    planStepSize \u003d conf.getTimeDuration(\n+        YarnConfiguration.RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n+        YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n+        TimeUnit.MILLISECONDS);\n     if (planStepSize \u003c 0) {\n       planStepSize \u003d\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP;\n     }\n+    maxPeriodicity \u003d\n+        conf.getLong(YarnConfiguration.RM_RESERVATION_SYSTEM_MAX_PERIODICITY,\n+            YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_MAX_PERIODICITY);\n+    if (maxPeriodicity \u003c\u003d 0) {\n+      maxPeriodicity \u003d\n+          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_MAX_PERIODICITY;\n+    }\n     // Create a plan corresponding to every reservable queue\n     Set\u003cString\u003e planQueueNames \u003d scheduler.getPlanQueues();\n     for (String planQueueName : planQueueNames) {\n       Plan plan \u003d initializePlan(planQueueName);\n       plans.put(planQueueName, plan);\n     }\n-    isRecoveryEnabled \u003d conf.getBoolean(\n-        YarnConfiguration.RECOVERY_ENABLED,\n+    isRecoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n         YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n     if (conf.getBoolean(YarnConfiguration.YARN_RESERVATION_ACL_ENABLE,\n-            YarnConfiguration.DEFAULT_YARN_RESERVATION_ACL_ENABLE) \u0026\u0026\n-                    conf.getBoolean(YarnConfiguration.YARN_ACL_ENABLE,\n-                            YarnConfiguration.DEFAULT_YARN_ACL_ENABLE)) {\n+        YarnConfiguration.DEFAULT_YARN_RESERVATION_ACL_ENABLE)\n+        \u0026\u0026 conf.getBoolean(YarnConfiguration.YARN_ACL_ENABLE,\n+            YarnConfiguration.DEFAULT_YARN_ACL_ENABLE)) {\n       reservationsACLsManager \u003d new ReservationsACLsManager(scheduler, conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initialize(Configuration conf) throws YarnException {\n    LOG.info(\"Initializing Reservation system\");\n    this.conf \u003d conf;\n    scheduler \u003d rmContext.getScheduler();\n    // Get the plan step size\n    planStepSize \u003d conf.getTimeDuration(\n        YarnConfiguration.RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n        YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n        TimeUnit.MILLISECONDS);\n    if (planStepSize \u003c 0) {\n      planStepSize \u003d\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP;\n    }\n    maxPeriodicity \u003d\n        conf.getLong(YarnConfiguration.RM_RESERVATION_SYSTEM_MAX_PERIODICITY,\n            YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_MAX_PERIODICITY);\n    if (maxPeriodicity \u003c\u003d 0) {\n      maxPeriodicity \u003d\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_MAX_PERIODICITY;\n    }\n    // Create a plan corresponding to every reservable queue\n    Set\u003cString\u003e planQueueNames \u003d scheduler.getPlanQueues();\n    for (String planQueueName : planQueueNames) {\n      Plan plan \u003d initializePlan(planQueueName);\n      plans.put(planQueueName, plan);\n    }\n    isRecoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n        YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n    if (conf.getBoolean(YarnConfiguration.YARN_RESERVATION_ACL_ENABLE,\n        YarnConfiguration.DEFAULT_YARN_RESERVATION_ACL_ENABLE)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.YARN_ACL_ENABLE,\n            YarnConfiguration.DEFAULT_YARN_ACL_ENABLE)) {\n      reservationsACLsManager \u003d new ReservationsACLsManager(scheduler, conf);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractReservationSystem.java",
      "extendedDetails": {}
    },
    "e3345e985bff93c6c74a76747e45376c6027f42c": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\"\n\nThis reverts commit 7996eca7dcfaa1bdf970e32022274f2699bef8a1.\n",
      "commitDate": "06/09/17 4:39 PM",
      "commitName": "e3345e985bff93c6c74a76747e45376c6027f42c",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/09/17 3:16 PM",
      "commitNameOld": "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 5.06,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,31 @@\n   private void initialize(Configuration conf) throws YarnException {\n     LOG.info(\"Initializing Reservation system\");\n     this.conf \u003d conf;\n     scheduler \u003d rmContext.getScheduler();\n     // Get the plan step size\n-    planStepSize \u003d conf.getTimeDuration(\n-        YarnConfiguration.RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n-        YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n-        TimeUnit.MILLISECONDS);\n+    planStepSize \u003d\n+        conf.getTimeDuration(\n+            YarnConfiguration.RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n+            YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n+            TimeUnit.MILLISECONDS);\n     if (planStepSize \u003c 0) {\n       planStepSize \u003d\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP;\n     }\n-    maxPeriodicity \u003d\n-        conf.getLong(YarnConfiguration.RM_RESERVATION_SYSTEM_MAX_PERIODICITY,\n-            YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_MAX_PERIODICITY);\n-    if (maxPeriodicity \u003c\u003d 0) {\n-      maxPeriodicity \u003d\n-          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_MAX_PERIODICITY;\n-    }\n     // Create a plan corresponding to every reservable queue\n     Set\u003cString\u003e planQueueNames \u003d scheduler.getPlanQueues();\n     for (String planQueueName : planQueueNames) {\n       Plan plan \u003d initializePlan(planQueueName);\n       plans.put(planQueueName, plan);\n     }\n-    isRecoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n+    isRecoveryEnabled \u003d conf.getBoolean(\n+        YarnConfiguration.RECOVERY_ENABLED,\n         YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n     if (conf.getBoolean(YarnConfiguration.YARN_RESERVATION_ACL_ENABLE,\n-        YarnConfiguration.DEFAULT_YARN_RESERVATION_ACL_ENABLE)\n-        \u0026\u0026 conf.getBoolean(YarnConfiguration.YARN_ACL_ENABLE,\n-            YarnConfiguration.DEFAULT_YARN_ACL_ENABLE)) {\n+            YarnConfiguration.DEFAULT_YARN_RESERVATION_ACL_ENABLE) \u0026\u0026\n+                    conf.getBoolean(YarnConfiguration.YARN_ACL_ENABLE,\n+                            YarnConfiguration.DEFAULT_YARN_ACL_ENABLE)) {\n       reservationsACLsManager \u003d new ReservationsACLsManager(scheduler, conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initialize(Configuration conf) throws YarnException {\n    LOG.info(\"Initializing Reservation system\");\n    this.conf \u003d conf;\n    scheduler \u003d rmContext.getScheduler();\n    // Get the plan step size\n    planStepSize \u003d\n        conf.getTimeDuration(\n            YarnConfiguration.RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n            YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n            TimeUnit.MILLISECONDS);\n    if (planStepSize \u003c 0) {\n      planStepSize \u003d\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP;\n    }\n    // Create a plan corresponding to every reservable queue\n    Set\u003cString\u003e planQueueNames \u003d scheduler.getPlanQueues();\n    for (String planQueueName : planQueueNames) {\n      Plan plan \u003d initializePlan(planQueueName);\n      plans.put(planQueueName, plan);\n    }\n    isRecoveryEnabled \u003d conf.getBoolean(\n        YarnConfiguration.RECOVERY_ENABLED,\n        YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n    if (conf.getBoolean(YarnConfiguration.YARN_RESERVATION_ACL_ENABLE,\n            YarnConfiguration.DEFAULT_YARN_RESERVATION_ACL_ENABLE) \u0026\u0026\n                    conf.getBoolean(YarnConfiguration.YARN_ACL_ENABLE,\n                            YarnConfiguration.DEFAULT_YARN_ACL_ENABLE)) {\n      reservationsACLsManager \u003d new ReservationsACLsManager(scheduler, conf);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractReservationSystem.java",
      "extendedDetails": {}
    },
    "7996eca7dcfaa1bdf970e32022274f2699bef8a1": {
      "type": "Ybodychange",
      "commitMessage": "Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\n",
      "commitDate": "01/09/17 3:16 PM",
      "commitName": "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "27/02/17 7:08 AM",
      "commitNameOld": "5f5b031d1f20cb7f621db41979e963eaa42cf52f",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 186.3,
      "commitsBetweenForRepo": 1148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,36 @@\n   private void initialize(Configuration conf) throws YarnException {\n     LOG.info(\"Initializing Reservation system\");\n     this.conf \u003d conf;\n     scheduler \u003d rmContext.getScheduler();\n     // Get the plan step size\n-    planStepSize \u003d\n-        conf.getTimeDuration(\n-            YarnConfiguration.RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n-            YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n-            TimeUnit.MILLISECONDS);\n+    planStepSize \u003d conf.getTimeDuration(\n+        YarnConfiguration.RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n+        YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n+        TimeUnit.MILLISECONDS);\n     if (planStepSize \u003c 0) {\n       planStepSize \u003d\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP;\n     }\n+    maxPeriodicity \u003d\n+        conf.getLong(YarnConfiguration.RM_RESERVATION_SYSTEM_MAX_PERIODICITY,\n+            YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_MAX_PERIODICITY);\n+    if (maxPeriodicity \u003c\u003d 0) {\n+      maxPeriodicity \u003d\n+          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_MAX_PERIODICITY;\n+    }\n     // Create a plan corresponding to every reservable queue\n     Set\u003cString\u003e planQueueNames \u003d scheduler.getPlanQueues();\n     for (String planQueueName : planQueueNames) {\n       Plan plan \u003d initializePlan(planQueueName);\n       plans.put(planQueueName, plan);\n     }\n-    isRecoveryEnabled \u003d conf.getBoolean(\n-        YarnConfiguration.RECOVERY_ENABLED,\n+    isRecoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n         YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n \n     if (conf.getBoolean(YarnConfiguration.YARN_RESERVATION_ACL_ENABLE,\n-            YarnConfiguration.DEFAULT_YARN_RESERVATION_ACL_ENABLE) \u0026\u0026\n-                    conf.getBoolean(YarnConfiguration.YARN_ACL_ENABLE,\n-                            YarnConfiguration.DEFAULT_YARN_ACL_ENABLE)) {\n+        YarnConfiguration.DEFAULT_YARN_RESERVATION_ACL_ENABLE)\n+        \u0026\u0026 conf.getBoolean(YarnConfiguration.YARN_ACL_ENABLE,\n+            YarnConfiguration.DEFAULT_YARN_ACL_ENABLE)) {\n       reservationsACLsManager \u003d new ReservationsACLsManager(scheduler, conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initialize(Configuration conf) throws YarnException {\n    LOG.info(\"Initializing Reservation system\");\n    this.conf \u003d conf;\n    scheduler \u003d rmContext.getScheduler();\n    // Get the plan step size\n    planStepSize \u003d conf.getTimeDuration(\n        YarnConfiguration.RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n        YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n        TimeUnit.MILLISECONDS);\n    if (planStepSize \u003c 0) {\n      planStepSize \u003d\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP;\n    }\n    maxPeriodicity \u003d\n        conf.getLong(YarnConfiguration.RM_RESERVATION_SYSTEM_MAX_PERIODICITY,\n            YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_MAX_PERIODICITY);\n    if (maxPeriodicity \u003c\u003d 0) {\n      maxPeriodicity \u003d\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_MAX_PERIODICITY;\n    }\n    // Create a plan corresponding to every reservable queue\n    Set\u003cString\u003e planQueueNames \u003d scheduler.getPlanQueues();\n    for (String planQueueName : planQueueNames) {\n      Plan plan \u003d initializePlan(planQueueName);\n      plans.put(planQueueName, plan);\n    }\n    isRecoveryEnabled \u003d conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,\n        YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n    if (conf.getBoolean(YarnConfiguration.YARN_RESERVATION_ACL_ENABLE,\n        YarnConfiguration.DEFAULT_YARN_RESERVATION_ACL_ENABLE)\n        \u0026\u0026 conf.getBoolean(YarnConfiguration.YARN_ACL_ENABLE,\n            YarnConfiguration.DEFAULT_YARN_ACL_ENABLE)) {\n      reservationsACLsManager \u003d new ReservationsACLsManager(scheduler, conf);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractReservationSystem.java",
      "extendedDetails": {}
    },
    "23f937e3b718f607d4fc975610ab3a03265f0f7e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2575. Create separate ACLs for Reservation create/update/delete/list ops (Sean Po via asuresh)\n",
      "commitDate": "11/02/16 10:47 AM",
      "commitName": "23f937e3b718f607d4fc975610ab3a03265f0f7e",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "01/02/16 6:17 PM",
      "commitNameOld": "9875325d5c63f343809907d06bf48a298035a611",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.69,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,31 @@\n   private void initialize(Configuration conf) throws YarnException {\n     LOG.info(\"Initializing Reservation system\");\n     this.conf \u003d conf;\n     scheduler \u003d rmContext.getScheduler();\n     // Get the plan step size\n     planStepSize \u003d\n         conf.getTimeDuration(\n             YarnConfiguration.RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n             YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n             TimeUnit.MILLISECONDS);\n     if (planStepSize \u003c 0) {\n       planStepSize \u003d\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP;\n     }\n     // Create a plan corresponding to every reservable queue\n     Set\u003cString\u003e planQueueNames \u003d scheduler.getPlanQueues();\n     for (String planQueueName : planQueueNames) {\n       Plan plan \u003d initializePlan(planQueueName);\n       plans.put(planQueueName, plan);\n     }\n     isRecoveryEnabled \u003d conf.getBoolean(\n         YarnConfiguration.RECOVERY_ENABLED,\n         YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n+\n+    if (conf.getBoolean(YarnConfiguration.YARN_RESERVATION_ACL_ENABLE,\n+            YarnConfiguration.DEFAULT_YARN_RESERVATION_ACL_ENABLE) \u0026\u0026\n+                    conf.getBoolean(YarnConfiguration.YARN_ACL_ENABLE,\n+                            YarnConfiguration.DEFAULT_YARN_ACL_ENABLE)) {\n+      reservationsACLsManager \u003d new ReservationsACLsManager(scheduler, conf);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initialize(Configuration conf) throws YarnException {\n    LOG.info(\"Initializing Reservation system\");\n    this.conf \u003d conf;\n    scheduler \u003d rmContext.getScheduler();\n    // Get the plan step size\n    planStepSize \u003d\n        conf.getTimeDuration(\n            YarnConfiguration.RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n            YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n            TimeUnit.MILLISECONDS);\n    if (planStepSize \u003c 0) {\n      planStepSize \u003d\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP;\n    }\n    // Create a plan corresponding to every reservable queue\n    Set\u003cString\u003e planQueueNames \u003d scheduler.getPlanQueues();\n    for (String planQueueName : planQueueNames) {\n      Plan plan \u003d initializePlan(planQueueName);\n      plans.put(planQueueName, plan);\n    }\n    isRecoveryEnabled \u003d conf.getBoolean(\n        YarnConfiguration.RECOVERY_ENABLED,\n        YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n\n    if (conf.getBoolean(YarnConfiguration.YARN_RESERVATION_ACL_ENABLE,\n            YarnConfiguration.DEFAULT_YARN_RESERVATION_ACL_ENABLE) \u0026\u0026\n                    conf.getBoolean(YarnConfiguration.YARN_ACL_ENABLE,\n                            YarnConfiguration.DEFAULT_YARN_ACL_ENABLE)) {\n      reservationsACLsManager \u003d new ReservationsACLsManager(scheduler, conf);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractReservationSystem.java",
      "extendedDetails": {}
    },
    "2798723a5443d04455b9d79c48d61f435ab52267": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3739. Add reservation system recovery to RM recovery process. Contributed by  Subru Krishnan.\n",
      "commitDate": "22/10/15 6:51 AM",
      "commitName": "2798723a5443d04455b9d79c48d61f435ab52267",
      "commitAuthor": "Anubhav Dhoot",
      "commitDateOld": "20/10/15 4:46 PM",
      "commitNameOld": "506d1b1dbcb7ae5dad4a3dc4d415af241c72887c",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 1.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,24 @@\n   private void initialize(Configuration conf) throws YarnException {\n     LOG.info(\"Initializing Reservation system\");\n     this.conf \u003d conf;\n     scheduler \u003d rmContext.getScheduler();\n     // Get the plan step size\n     planStepSize \u003d\n         conf.getTimeDuration(\n             YarnConfiguration.RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n             YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n             TimeUnit.MILLISECONDS);\n     if (planStepSize \u003c 0) {\n       planStepSize \u003d\n           YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP;\n     }\n     // Create a plan corresponding to every reservable queue\n     Set\u003cString\u003e planQueueNames \u003d scheduler.getPlanQueues();\n     for (String planQueueName : planQueueNames) {\n       Plan plan \u003d initializePlan(planQueueName);\n       plans.put(planQueueName, plan);\n     }\n+    isRecoveryEnabled \u003d conf.getBoolean(\n+        YarnConfiguration.RECOVERY_ENABLED,\n+        YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initialize(Configuration conf) throws YarnException {\n    LOG.info(\"Initializing Reservation system\");\n    this.conf \u003d conf;\n    scheduler \u003d rmContext.getScheduler();\n    // Get the plan step size\n    planStepSize \u003d\n        conf.getTimeDuration(\n            YarnConfiguration.RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n            YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n            TimeUnit.MILLISECONDS);\n    if (planStepSize \u003c 0) {\n      planStepSize \u003d\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP;\n    }\n    // Create a plan corresponding to every reservable queue\n    Set\u003cString\u003e planQueueNames \u003d scheduler.getPlanQueues();\n    for (String planQueueName : planQueueNames) {\n      Plan plan \u003d initializePlan(planQueueName);\n      plans.put(planQueueName, plan);\n    }\n    isRecoveryEnabled \u003d conf.getBoolean(\n        YarnConfiguration.RECOVERY_ENABLED,\n        YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractReservationSystem.java",
      "extendedDetails": {}
    },
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2080. Integrating reservation system with ResourceManager and client-RM protocol. Contributed by Subru Krishnan and Carlo Curino.\n(cherry picked from commit 8baeaead8532898163f1006276b731a237b1a559)\n\nConflicts:\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java\n",
      "commitDate": "03/10/14 3:42 PM",
      "commitName": "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e",
      "commitAuthor": "subru",
      "diff": "@@ -0,0 +1,21 @@\n+  private void initialize(Configuration conf) throws YarnException {\n+    LOG.info(\"Initializing Reservation system\");\n+    this.conf \u003d conf;\n+    scheduler \u003d rmContext.getScheduler();\n+    // Get the plan step size\n+    planStepSize \u003d\n+        conf.getTimeDuration(\n+            YarnConfiguration.RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n+            YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n+            TimeUnit.MILLISECONDS);\n+    if (planStepSize \u003c 0) {\n+      planStepSize \u003d\n+          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP;\n+    }\n+    // Create a plan corresponding to every reservable queue\n+    Set\u003cString\u003e planQueueNames \u003d scheduler.getPlanQueues();\n+    for (String planQueueName : planQueueNames) {\n+      Plan plan \u003d initializePlan(planQueueName);\n+      plans.put(planQueueName, plan);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initialize(Configuration conf) throws YarnException {\n    LOG.info(\"Initializing Reservation system\");\n    this.conf \u003d conf;\n    scheduler \u003d rmContext.getScheduler();\n    // Get the plan step size\n    planStepSize \u003d\n        conf.getTimeDuration(\n            YarnConfiguration.RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n            YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP,\n            TimeUnit.MILLISECONDS);\n    if (planStepSize \u003c 0) {\n      planStepSize \u003d\n          YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP;\n    }\n    // Create a plan corresponding to every reservable queue\n    Set\u003cString\u003e planQueueNames \u003d scheduler.getPlanQueues();\n    for (String planQueueName : planQueueNames) {\n      Plan plan \u003d initializePlan(planQueueName);\n      plans.put(planQueueName, plan);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/AbstractReservationSystem.java"
    }
  }
}