{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistributedFileSystem.java",
  "functionName": "listCacheDirectives",
  "functionId": "listCacheDirectives___filter-CacheDirectiveInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
  "functionStartLine": 2435,
  "functionEndLine": 2468,
  "numCommitsSeen": 451,
  "timeTaken": 7763,
  "changeHistory": [
    "f048512bb89f4d1edbb54360622adc61ffacbde3",
    "1c030c6e58dc83152f933323bb7743ad47f5af27",
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
    "25ebe6bfd7031f6d3550d964a5f4cf44f1286494",
    "f79b3e6b17450e9d34c483046b7437b09dd72016",
    "efe545b0c219eeba61ac5259aee4d518beb74316",
    "8111c3af6b06d6a814e235ad90af5860632d2c25",
    "a0d9a155a4a4258f628e927e096ecf6673f788ec",
    "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
    "02e0e158a26f81ce8375426ba0ea56db09ee36be"
  ],
  "changeHistoryShort": {
    "f048512bb89f4d1edbb54360622adc61ffacbde3": "Ybodychange",
    "1c030c6e58dc83152f933323bb7743ad47f5af27": "Yfilerename",
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "25ebe6bfd7031f6d3550d964a5f4cf44f1286494": "Ybodychange",
    "f79b3e6b17450e9d34c483046b7437b09dd72016": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "efe545b0c219eeba61ac5259aee4d518beb74316": "Ybodychange",
    "8111c3af6b06d6a814e235ad90af5860632d2c25": "Ymultichange(Yparameterchange,Ybodychange)",
    "a0d9a155a4a4258f628e927e096ecf6673f788ec": "Ybodychange",
    "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "02e0e158a26f81ce8375426ba0ea56db09ee36be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f048512bb89f4d1edbb54360622adc61ffacbde3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14192. Track missing DFS operations in Statistics and StorageStatistics. Contributed by Ayush Saxena.\n",
      "commitDate": "16/01/19 10:14 AM",
      "commitName": "f048512bb89f4d1edbb54360622adc61ffacbde3",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "16/12/18 9:54 PM",
      "commitNameOld": "788e7473a404fa074b3af522416ee3d2fae865a0",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 30.51,
      "commitsBetweenForRepo": 179,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   public RemoteIterator\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n       CacheDirectiveInfo filter) throws IOException {\n+    statistics.incrementReadOps(1);\n+    storageStatistics.incrementOpCounter(OpType.LIST_CACHE_DIRECTIVE);\n     if (filter \u003d\u003d null) {\n       filter \u003d new CacheDirectiveInfo.Builder().build();\n     }\n     if (filter.getPath() !\u003d null) {\n       filter \u003d new CacheDirectiveInfo.Builder(filter).\n           setPath(new Path(getPathName(fixRelativePart(filter.getPath())))).\n           build();\n     }\n     final RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n         dfs.listCacheDirectives(filter);\n     return new RemoteIterator\u003cCacheDirectiveEntry\u003e() {\n       @Override\n       public boolean hasNext() throws IOException {\n         return iter.hasNext();\n       }\n \n       @Override\n       public CacheDirectiveEntry next() throws IOException {\n         // Although the paths we get back from the NameNode should always be\n         // absolute, we call makeQualified to add the scheme and authority of\n         // this DistributedFilesystem.\n         CacheDirectiveEntry desc \u003d iter.next();\n         CacheDirectiveInfo info \u003d desc.getInfo();\n         Path p \u003d info.getPath().makeQualified(getUri(), getWorkingDirectory());\n         return new CacheDirectiveEntry(\n             new CacheDirectiveInfo.Builder(info).setPath(p).build(),\n             desc.getStats());\n       }\n     };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      CacheDirectiveInfo filter) throws IOException {\n    statistics.incrementReadOps(1);\n    storageStatistics.incrementOpCounter(OpType.LIST_CACHE_DIRECTIVE);\n    if (filter \u003d\u003d null) {\n      filter \u003d new CacheDirectiveInfo.Builder().build();\n    }\n    if (filter.getPath() !\u003d null) {\n      filter \u003d new CacheDirectiveInfo.Builder(filter).\n          setPath(new Path(getPathName(fixRelativePart(filter.getPath())))).\n          build();\n    }\n    final RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n        dfs.listCacheDirectives(filter);\n    return new RemoteIterator\u003cCacheDirectiveEntry\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iter.hasNext();\n      }\n\n      @Override\n      public CacheDirectiveEntry next() throws IOException {\n        // Although the paths we get back from the NameNode should always be\n        // absolute, we call makeQualified to add the scheme and authority of\n        // this DistributedFilesystem.\n        CacheDirectiveEntry desc \u003d iter.next();\n        CacheDirectiveInfo info \u003d desc.getInfo();\n        Path p \u003d info.getPath().makeQualified(getUri(), getWorkingDirectory());\n        return new CacheDirectiveEntry(\n            new CacheDirectiveInfo.Builder(info).setPath(p).build(),\n            desc.getStats());\n      }\n    };\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "1c030c6e58dc83152f933323bb7743ad47f5af27": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8740. Move DistributedFileSystem to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "27/09/15 10:54 AM",
      "commitName": "1c030c6e58dc83152f933323bb7743ad47f5af27",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "27/09/15 1:42 AM",
      "commitNameOld": "f0f984e4e63d0dbafe93062a122ee051330db301",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.38,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public RemoteIterator\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      CacheDirectiveInfo filter) throws IOException {\n    if (filter \u003d\u003d null) {\n      filter \u003d new CacheDirectiveInfo.Builder().build();\n    }\n    if (filter.getPath() !\u003d null) {\n      filter \u003d new CacheDirectiveInfo.Builder(filter).\n          setPath(new Path(getPathName(fixRelativePart(filter.getPath())))).\n          build();\n    }\n    final RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n        dfs.listCacheDirectives(filter);\n    return new RemoteIterator\u003cCacheDirectiveEntry\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iter.hasNext();\n      }\n\n      @Override\n      public CacheDirectiveEntry next() throws IOException {\n        // Although the paths we get back from the NameNode should always be\n        // absolute, we call makeQualified to add the scheme and authority of\n        // this DistributedFilesystem.\n        CacheDirectiveEntry desc \u003d iter.next();\n        CacheDirectiveInfo info \u003d desc.getInfo();\n        Path p \u003d info.getPath().makeQualified(getUri(), getWorkingDirectory());\n        return new CacheDirectiveEntry(\n            new CacheDirectiveInfo.Builder(info).setPath(p).build(),\n            desc.getStats());\n      }\n    };\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java"
      }
    },
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/13 9:12 AM",
      "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "08/11/13 9:54 PM",
          "commitNameOld": "25ebe6bfd7031f6d3550d964a5f4cf44f1286494",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 12.47,
          "commitsBetweenForRepo": 93,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,32 @@\n-  public RemoteIterator\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n-      PathBasedCacheDirective filter) throws IOException {\n+  public RemoteIterator\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n+      CacheDirectiveInfo filter) throws IOException {\n     if (filter \u003d\u003d null) {\n-      filter \u003d new PathBasedCacheDirective.Builder().build();\n+      filter \u003d new CacheDirectiveInfo.Builder().build();\n     }\n     if (filter.getPath() !\u003d null) {\n-      filter \u003d new PathBasedCacheDirective.Builder(filter).\n+      filter \u003d new CacheDirectiveInfo.Builder(filter).\n           setPath(new Path(getPathName(fixRelativePart(filter.getPath())))).\n           build();\n     }\n-    final RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n-        dfs.listPathBasedCacheDirectives(filter);\n-    return new RemoteIterator\u003cPathBasedCacheDirective\u003e() {\n+    final RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n+        dfs.listCacheDirectives(filter);\n+    return new RemoteIterator\u003cCacheDirectiveEntry\u003e() {\n       @Override\n       public boolean hasNext() throws IOException {\n         return iter.hasNext();\n       }\n \n       @Override\n-      public PathBasedCacheDirective next() throws IOException {\n+      public CacheDirectiveEntry next() throws IOException {\n         // Although the paths we get back from the NameNode should always be\n         // absolute, we call makeQualified to add the scheme and authority of\n         // this DistributedFilesystem.\n-        PathBasedCacheDirective desc \u003d iter.next();\n-        Path p \u003d desc.getPath().makeQualified(getUri(), getWorkingDirectory());\n-        return new PathBasedCacheDirective.Builder(desc).setPath(p).build();\n+        CacheDirectiveEntry desc \u003d iter.next();\n+        CacheDirectiveInfo info \u003d desc.getInfo();\n+        Path p \u003d info.getPath().makeQualified(getUri(), getWorkingDirectory());\n+        return new CacheDirectiveEntry(\n+            new CacheDirectiveInfo.Builder(info).setPath(p).build(),\n+            desc.getStats());\n       }\n     };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RemoteIterator\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      CacheDirectiveInfo filter) throws IOException {\n    if (filter \u003d\u003d null) {\n      filter \u003d new CacheDirectiveInfo.Builder().build();\n    }\n    if (filter.getPath() !\u003d null) {\n      filter \u003d new CacheDirectiveInfo.Builder(filter).\n          setPath(new Path(getPathName(fixRelativePart(filter.getPath())))).\n          build();\n    }\n    final RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n        dfs.listCacheDirectives(filter);\n    return new RemoteIterator\u003cCacheDirectiveEntry\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iter.hasNext();\n      }\n\n      @Override\n      public CacheDirectiveEntry next() throws IOException {\n        // Although the paths we get back from the NameNode should always be\n        // absolute, we call makeQualified to add the scheme and authority of\n        // this DistributedFilesystem.\n        CacheDirectiveEntry desc \u003d iter.next();\n        CacheDirectiveInfo info \u003d desc.getInfo();\n        Path p \u003d info.getPath().makeQualified(getUri(), getWorkingDirectory());\n        return new CacheDirectiveEntry(\n            new CacheDirectiveInfo.Builder(info).setPath(p).build(),\n            desc.getStats());\n      }\n    };\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {
            "oldValue": "listPathBasedCacheDirectives",
            "newValue": "listCacheDirectives"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "08/11/13 9:54 PM",
          "commitNameOld": "25ebe6bfd7031f6d3550d964a5f4cf44f1286494",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 12.47,
          "commitsBetweenForRepo": 93,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,32 @@\n-  public RemoteIterator\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n-      PathBasedCacheDirective filter) throws IOException {\n+  public RemoteIterator\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n+      CacheDirectiveInfo filter) throws IOException {\n     if (filter \u003d\u003d null) {\n-      filter \u003d new PathBasedCacheDirective.Builder().build();\n+      filter \u003d new CacheDirectiveInfo.Builder().build();\n     }\n     if (filter.getPath() !\u003d null) {\n-      filter \u003d new PathBasedCacheDirective.Builder(filter).\n+      filter \u003d new CacheDirectiveInfo.Builder(filter).\n           setPath(new Path(getPathName(fixRelativePart(filter.getPath())))).\n           build();\n     }\n-    final RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n-        dfs.listPathBasedCacheDirectives(filter);\n-    return new RemoteIterator\u003cPathBasedCacheDirective\u003e() {\n+    final RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n+        dfs.listCacheDirectives(filter);\n+    return new RemoteIterator\u003cCacheDirectiveEntry\u003e() {\n       @Override\n       public boolean hasNext() throws IOException {\n         return iter.hasNext();\n       }\n \n       @Override\n-      public PathBasedCacheDirective next() throws IOException {\n+      public CacheDirectiveEntry next() throws IOException {\n         // Although the paths we get back from the NameNode should always be\n         // absolute, we call makeQualified to add the scheme and authority of\n         // this DistributedFilesystem.\n-        PathBasedCacheDirective desc \u003d iter.next();\n-        Path p \u003d desc.getPath().makeQualified(getUri(), getWorkingDirectory());\n-        return new PathBasedCacheDirective.Builder(desc).setPath(p).build();\n+        CacheDirectiveEntry desc \u003d iter.next();\n+        CacheDirectiveInfo info \u003d desc.getInfo();\n+        Path p \u003d info.getPath().makeQualified(getUri(), getWorkingDirectory());\n+        return new CacheDirectiveEntry(\n+            new CacheDirectiveInfo.Builder(info).setPath(p).build(),\n+            desc.getStats());\n       }\n     };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RemoteIterator\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      CacheDirectiveInfo filter) throws IOException {\n    if (filter \u003d\u003d null) {\n      filter \u003d new CacheDirectiveInfo.Builder().build();\n    }\n    if (filter.getPath() !\u003d null) {\n      filter \u003d new CacheDirectiveInfo.Builder(filter).\n          setPath(new Path(getPathName(fixRelativePart(filter.getPath())))).\n          build();\n    }\n    final RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n        dfs.listCacheDirectives(filter);\n    return new RemoteIterator\u003cCacheDirectiveEntry\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iter.hasNext();\n      }\n\n      @Override\n      public CacheDirectiveEntry next() throws IOException {\n        // Although the paths we get back from the NameNode should always be\n        // absolute, we call makeQualified to add the scheme and authority of\n        // this DistributedFilesystem.\n        CacheDirectiveEntry desc \u003d iter.next();\n        CacheDirectiveInfo info \u003d desc.getInfo();\n        Path p \u003d info.getPath().makeQualified(getUri(), getWorkingDirectory());\n        return new CacheDirectiveEntry(\n            new CacheDirectiveInfo.Builder(info).setPath(p).build(),\n            desc.getStats());\n      }\n    };\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {
            "oldValue": "[filter-PathBasedCacheDirective]",
            "newValue": "[filter-CacheDirectiveInfo]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "08/11/13 9:54 PM",
          "commitNameOld": "25ebe6bfd7031f6d3550d964a5f4cf44f1286494",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 12.47,
          "commitsBetweenForRepo": 93,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,32 @@\n-  public RemoteIterator\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n-      PathBasedCacheDirective filter) throws IOException {\n+  public RemoteIterator\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n+      CacheDirectiveInfo filter) throws IOException {\n     if (filter \u003d\u003d null) {\n-      filter \u003d new PathBasedCacheDirective.Builder().build();\n+      filter \u003d new CacheDirectiveInfo.Builder().build();\n     }\n     if (filter.getPath() !\u003d null) {\n-      filter \u003d new PathBasedCacheDirective.Builder(filter).\n+      filter \u003d new CacheDirectiveInfo.Builder(filter).\n           setPath(new Path(getPathName(fixRelativePart(filter.getPath())))).\n           build();\n     }\n-    final RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n-        dfs.listPathBasedCacheDirectives(filter);\n-    return new RemoteIterator\u003cPathBasedCacheDirective\u003e() {\n+    final RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n+        dfs.listCacheDirectives(filter);\n+    return new RemoteIterator\u003cCacheDirectiveEntry\u003e() {\n       @Override\n       public boolean hasNext() throws IOException {\n         return iter.hasNext();\n       }\n \n       @Override\n-      public PathBasedCacheDirective next() throws IOException {\n+      public CacheDirectiveEntry next() throws IOException {\n         // Although the paths we get back from the NameNode should always be\n         // absolute, we call makeQualified to add the scheme and authority of\n         // this DistributedFilesystem.\n-        PathBasedCacheDirective desc \u003d iter.next();\n-        Path p \u003d desc.getPath().makeQualified(getUri(), getWorkingDirectory());\n-        return new PathBasedCacheDirective.Builder(desc).setPath(p).build();\n+        CacheDirectiveEntry desc \u003d iter.next();\n+        CacheDirectiveInfo info \u003d desc.getInfo();\n+        Path p \u003d info.getPath().makeQualified(getUri(), getWorkingDirectory());\n+        return new CacheDirectiveEntry(\n+            new CacheDirectiveInfo.Builder(info).setPath(p).build(),\n+            desc.getStats());\n       }\n     };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RemoteIterator\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      CacheDirectiveInfo filter) throws IOException {\n    if (filter \u003d\u003d null) {\n      filter \u003d new CacheDirectiveInfo.Builder().build();\n    }\n    if (filter.getPath() !\u003d null) {\n      filter \u003d new CacheDirectiveInfo.Builder(filter).\n          setPath(new Path(getPathName(fixRelativePart(filter.getPath())))).\n          build();\n    }\n    final RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n        dfs.listCacheDirectives(filter);\n    return new RemoteIterator\u003cCacheDirectiveEntry\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iter.hasNext();\n      }\n\n      @Override\n      public CacheDirectiveEntry next() throws IOException {\n        // Although the paths we get back from the NameNode should always be\n        // absolute, we call makeQualified to add the scheme and authority of\n        // this DistributedFilesystem.\n        CacheDirectiveEntry desc \u003d iter.next();\n        CacheDirectiveInfo info \u003d desc.getInfo();\n        Path p \u003d info.getPath().makeQualified(getUri(), getWorkingDirectory());\n        return new CacheDirectiveEntry(\n            new CacheDirectiveInfo.Builder(info).setPath(p).build(),\n            desc.getStats());\n      }\n    };\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {
            "oldValue": "RemoteIterator\u003cPathBasedCacheDirective\u003e",
            "newValue": "RemoteIterator\u003cCacheDirectiveEntry\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "08/11/13 9:54 PM",
          "commitNameOld": "25ebe6bfd7031f6d3550d964a5f4cf44f1286494",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 12.47,
          "commitsBetweenForRepo": 93,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,32 @@\n-  public RemoteIterator\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n-      PathBasedCacheDirective filter) throws IOException {\n+  public RemoteIterator\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n+      CacheDirectiveInfo filter) throws IOException {\n     if (filter \u003d\u003d null) {\n-      filter \u003d new PathBasedCacheDirective.Builder().build();\n+      filter \u003d new CacheDirectiveInfo.Builder().build();\n     }\n     if (filter.getPath() !\u003d null) {\n-      filter \u003d new PathBasedCacheDirective.Builder(filter).\n+      filter \u003d new CacheDirectiveInfo.Builder(filter).\n           setPath(new Path(getPathName(fixRelativePart(filter.getPath())))).\n           build();\n     }\n-    final RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n-        dfs.listPathBasedCacheDirectives(filter);\n-    return new RemoteIterator\u003cPathBasedCacheDirective\u003e() {\n+    final RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n+        dfs.listCacheDirectives(filter);\n+    return new RemoteIterator\u003cCacheDirectiveEntry\u003e() {\n       @Override\n       public boolean hasNext() throws IOException {\n         return iter.hasNext();\n       }\n \n       @Override\n-      public PathBasedCacheDirective next() throws IOException {\n+      public CacheDirectiveEntry next() throws IOException {\n         // Although the paths we get back from the NameNode should always be\n         // absolute, we call makeQualified to add the scheme and authority of\n         // this DistributedFilesystem.\n-        PathBasedCacheDirective desc \u003d iter.next();\n-        Path p \u003d desc.getPath().makeQualified(getUri(), getWorkingDirectory());\n-        return new PathBasedCacheDirective.Builder(desc).setPath(p).build();\n+        CacheDirectiveEntry desc \u003d iter.next();\n+        CacheDirectiveInfo info \u003d desc.getInfo();\n+        Path p \u003d info.getPath().makeQualified(getUri(), getWorkingDirectory());\n+        return new CacheDirectiveEntry(\n+            new CacheDirectiveInfo.Builder(info).setPath(p).build(),\n+            desc.getStats());\n       }\n     };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RemoteIterator\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      CacheDirectiveInfo filter) throws IOException {\n    if (filter \u003d\u003d null) {\n      filter \u003d new CacheDirectiveInfo.Builder().build();\n    }\n    if (filter.getPath() !\u003d null) {\n      filter \u003d new CacheDirectiveInfo.Builder(filter).\n          setPath(new Path(getPathName(fixRelativePart(filter.getPath())))).\n          build();\n    }\n    final RemoteIterator\u003cCacheDirectiveEntry\u003e iter \u003d\n        dfs.listCacheDirectives(filter);\n    return new RemoteIterator\u003cCacheDirectiveEntry\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iter.hasNext();\n      }\n\n      @Override\n      public CacheDirectiveEntry next() throws IOException {\n        // Although the paths we get back from the NameNode should always be\n        // absolute, we call makeQualified to add the scheme and authority of\n        // this DistributedFilesystem.\n        CacheDirectiveEntry desc \u003d iter.next();\n        CacheDirectiveInfo info \u003d desc.getInfo();\n        Path p \u003d info.getPath().makeQualified(getUri(), getWorkingDirectory());\n        return new CacheDirectiveEntry(\n            new CacheDirectiveInfo.Builder(info).setPath(p).build(),\n            desc.getStats());\n      }\n    };\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "25ebe6bfd7031f6d3550d964a5f4cf44f1286494": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5482. DistributedFileSystem#listPathBasedCacheDirectives must support relative paths. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1540257 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/11/13 9:54 PM",
      "commitName": "25ebe6bfd7031f6d3550d964a5f4cf44f1286494",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "07/11/13 2:07 PM",
      "commitNameOld": "f79b3e6b17450e9d34c483046b7437b09dd72016",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 1.32,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   public RemoteIterator\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n       PathBasedCacheDirective filter) throws IOException {\n     if (filter \u003d\u003d null) {\n       filter \u003d new PathBasedCacheDirective.Builder().build();\n     }\n     if (filter.getPath() !\u003d null) {\n       filter \u003d new PathBasedCacheDirective.Builder(filter).\n-          setPath(filter.getPath().\n-              makeQualified(getUri(), filter.getPath())).\n-                build();\n+          setPath(new Path(getPathName(fixRelativePart(filter.getPath())))).\n+          build();\n     }\n     final RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n         dfs.listPathBasedCacheDirectives(filter);\n     return new RemoteIterator\u003cPathBasedCacheDirective\u003e() {\n       @Override\n       public boolean hasNext() throws IOException {\n         return iter.hasNext();\n       }\n \n       @Override\n       public PathBasedCacheDirective next() throws IOException {\n+        // Although the paths we get back from the NameNode should always be\n+        // absolute, we call makeQualified to add the scheme and authority of\n+        // this DistributedFilesystem.\n         PathBasedCacheDirective desc \u003d iter.next();\n-        Path p \u003d desc.getPath().makeQualified(getUri(), desc.getPath());\n+        Path p \u003d desc.getPath().makeQualified(getUri(), getWorkingDirectory());\n         return new PathBasedCacheDirective.Builder(desc).setPath(p).build();\n       }\n     };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n      PathBasedCacheDirective filter) throws IOException {\n    if (filter \u003d\u003d null) {\n      filter \u003d new PathBasedCacheDirective.Builder().build();\n    }\n    if (filter.getPath() !\u003d null) {\n      filter \u003d new PathBasedCacheDirective.Builder(filter).\n          setPath(new Path(getPathName(fixRelativePart(filter.getPath())))).\n          build();\n    }\n    final RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n        dfs.listPathBasedCacheDirectives(filter);\n    return new RemoteIterator\u003cPathBasedCacheDirective\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iter.hasNext();\n      }\n\n      @Override\n      public PathBasedCacheDirective next() throws IOException {\n        // Although the paths we get back from the NameNode should always be\n        // absolute, we call makeQualified to add the scheme and authority of\n        // this DistributedFilesystem.\n        PathBasedCacheDirective desc \u003d iter.next();\n        Path p \u003d desc.getPath().makeQualified(getUri(), getWorkingDirectory());\n        return new PathBasedCacheDirective.Builder(desc).setPath(p).build();\n      }\n    };\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "f79b3e6b17450e9d34c483046b7437b09dd72016": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/13 2:07 PM",
      "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 2:07 PM",
          "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "16/10/13 7:14 PM",
          "commitNameOld": "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 21.83,
          "commitsBetweenForRepo": 97,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,27 @@\n-  public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n-      String pool, final Path path) throws IOException {\n-    String pathName \u003d path !\u003d null ? getPathName(fixRelativePart(path)) : null;\n-    final RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n-        dfs.listPathBasedCacheDescriptors(pool, pathName);\n-    return new RemoteIterator\u003cPathBasedCacheDescriptor\u003e() {\n+  public RemoteIterator\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n+      PathBasedCacheDirective filter) throws IOException {\n+    if (filter \u003d\u003d null) {\n+      filter \u003d new PathBasedCacheDirective.Builder().build();\n+    }\n+    if (filter.getPath() !\u003d null) {\n+      filter \u003d new PathBasedCacheDirective.Builder(filter).\n+          setPath(filter.getPath().\n+              makeQualified(getUri(), filter.getPath())).\n+                build();\n+    }\n+    final RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n+        dfs.listPathBasedCacheDirectives(filter);\n+    return new RemoteIterator\u003cPathBasedCacheDirective\u003e() {\n       @Override\n       public boolean hasNext() throws IOException {\n         return iter.hasNext();\n       }\n \n       @Override\n-      public PathBasedCacheDescriptor next() throws IOException {\n-        PathBasedCacheDescriptor desc \u003d iter.next();\n-        Path qualPath \u003d desc.getPath().makeQualified(getUri(), path);\n-        return new PathBasedCacheDescriptor(desc.getEntryId(), qualPath,\n-            desc.getReplication(), desc.getPool());\n+      public PathBasedCacheDirective next() throws IOException {\n+        PathBasedCacheDirective desc \u003d iter.next();\n+        Path p \u003d desc.getPath().makeQualified(getUri(), desc.getPath());\n+        return new PathBasedCacheDirective.Builder(desc).setPath(p).build();\n       }\n     };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RemoteIterator\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n      PathBasedCacheDirective filter) throws IOException {\n    if (filter \u003d\u003d null) {\n      filter \u003d new PathBasedCacheDirective.Builder().build();\n    }\n    if (filter.getPath() !\u003d null) {\n      filter \u003d new PathBasedCacheDirective.Builder(filter).\n          setPath(filter.getPath().\n              makeQualified(getUri(), filter.getPath())).\n                build();\n    }\n    final RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n        dfs.listPathBasedCacheDirectives(filter);\n    return new RemoteIterator\u003cPathBasedCacheDirective\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iter.hasNext();\n      }\n\n      @Override\n      public PathBasedCacheDirective next() throws IOException {\n        PathBasedCacheDirective desc \u003d iter.next();\n        Path p \u003d desc.getPath().makeQualified(getUri(), desc.getPath());\n        return new PathBasedCacheDirective.Builder(desc).setPath(p).build();\n      }\n    };\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {
            "oldValue": "listPathBasedCacheDescriptors",
            "newValue": "listPathBasedCacheDirectives"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 2:07 PM",
          "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "16/10/13 7:14 PM",
          "commitNameOld": "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 21.83,
          "commitsBetweenForRepo": 97,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,27 @@\n-  public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n-      String pool, final Path path) throws IOException {\n-    String pathName \u003d path !\u003d null ? getPathName(fixRelativePart(path)) : null;\n-    final RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n-        dfs.listPathBasedCacheDescriptors(pool, pathName);\n-    return new RemoteIterator\u003cPathBasedCacheDescriptor\u003e() {\n+  public RemoteIterator\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n+      PathBasedCacheDirective filter) throws IOException {\n+    if (filter \u003d\u003d null) {\n+      filter \u003d new PathBasedCacheDirective.Builder().build();\n+    }\n+    if (filter.getPath() !\u003d null) {\n+      filter \u003d new PathBasedCacheDirective.Builder(filter).\n+          setPath(filter.getPath().\n+              makeQualified(getUri(), filter.getPath())).\n+                build();\n+    }\n+    final RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n+        dfs.listPathBasedCacheDirectives(filter);\n+    return new RemoteIterator\u003cPathBasedCacheDirective\u003e() {\n       @Override\n       public boolean hasNext() throws IOException {\n         return iter.hasNext();\n       }\n \n       @Override\n-      public PathBasedCacheDescriptor next() throws IOException {\n-        PathBasedCacheDescriptor desc \u003d iter.next();\n-        Path qualPath \u003d desc.getPath().makeQualified(getUri(), path);\n-        return new PathBasedCacheDescriptor(desc.getEntryId(), qualPath,\n-            desc.getReplication(), desc.getPool());\n+      public PathBasedCacheDirective next() throws IOException {\n+        PathBasedCacheDirective desc \u003d iter.next();\n+        Path p \u003d desc.getPath().makeQualified(getUri(), desc.getPath());\n+        return new PathBasedCacheDirective.Builder(desc).setPath(p).build();\n       }\n     };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RemoteIterator\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n      PathBasedCacheDirective filter) throws IOException {\n    if (filter \u003d\u003d null) {\n      filter \u003d new PathBasedCacheDirective.Builder().build();\n    }\n    if (filter.getPath() !\u003d null) {\n      filter \u003d new PathBasedCacheDirective.Builder(filter).\n          setPath(filter.getPath().\n              makeQualified(getUri(), filter.getPath())).\n                build();\n    }\n    final RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n        dfs.listPathBasedCacheDirectives(filter);\n    return new RemoteIterator\u003cPathBasedCacheDirective\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iter.hasNext();\n      }\n\n      @Override\n      public PathBasedCacheDirective next() throws IOException {\n        PathBasedCacheDirective desc \u003d iter.next();\n        Path p \u003d desc.getPath().makeQualified(getUri(), desc.getPath());\n        return new PathBasedCacheDirective.Builder(desc).setPath(p).build();\n      }\n    };\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {
            "oldValue": "[pool-String, path-Path(modifiers-final)]",
            "newValue": "[filter-PathBasedCacheDirective]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 2:07 PM",
          "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "16/10/13 7:14 PM",
          "commitNameOld": "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 21.83,
          "commitsBetweenForRepo": 97,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,27 @@\n-  public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n-      String pool, final Path path) throws IOException {\n-    String pathName \u003d path !\u003d null ? getPathName(fixRelativePart(path)) : null;\n-    final RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n-        dfs.listPathBasedCacheDescriptors(pool, pathName);\n-    return new RemoteIterator\u003cPathBasedCacheDescriptor\u003e() {\n+  public RemoteIterator\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n+      PathBasedCacheDirective filter) throws IOException {\n+    if (filter \u003d\u003d null) {\n+      filter \u003d new PathBasedCacheDirective.Builder().build();\n+    }\n+    if (filter.getPath() !\u003d null) {\n+      filter \u003d new PathBasedCacheDirective.Builder(filter).\n+          setPath(filter.getPath().\n+              makeQualified(getUri(), filter.getPath())).\n+                build();\n+    }\n+    final RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n+        dfs.listPathBasedCacheDirectives(filter);\n+    return new RemoteIterator\u003cPathBasedCacheDirective\u003e() {\n       @Override\n       public boolean hasNext() throws IOException {\n         return iter.hasNext();\n       }\n \n       @Override\n-      public PathBasedCacheDescriptor next() throws IOException {\n-        PathBasedCacheDescriptor desc \u003d iter.next();\n-        Path qualPath \u003d desc.getPath().makeQualified(getUri(), path);\n-        return new PathBasedCacheDescriptor(desc.getEntryId(), qualPath,\n-            desc.getReplication(), desc.getPool());\n+      public PathBasedCacheDirective next() throws IOException {\n+        PathBasedCacheDirective desc \u003d iter.next();\n+        Path p \u003d desc.getPath().makeQualified(getUri(), desc.getPath());\n+        return new PathBasedCacheDirective.Builder(desc).setPath(p).build();\n       }\n     };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RemoteIterator\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n      PathBasedCacheDirective filter) throws IOException {\n    if (filter \u003d\u003d null) {\n      filter \u003d new PathBasedCacheDirective.Builder().build();\n    }\n    if (filter.getPath() !\u003d null) {\n      filter \u003d new PathBasedCacheDirective.Builder(filter).\n          setPath(filter.getPath().\n              makeQualified(getUri(), filter.getPath())).\n                build();\n    }\n    final RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n        dfs.listPathBasedCacheDirectives(filter);\n    return new RemoteIterator\u003cPathBasedCacheDirective\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iter.hasNext();\n      }\n\n      @Override\n      public PathBasedCacheDirective next() throws IOException {\n        PathBasedCacheDirective desc \u003d iter.next();\n        Path p \u003d desc.getPath().makeQualified(getUri(), desc.getPath());\n        return new PathBasedCacheDirective.Builder(desc).setPath(p).build();\n      }\n    };\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {
            "oldValue": "RemoteIterator\u003cPathBasedCacheDescriptor\u003e",
            "newValue": "RemoteIterator\u003cPathBasedCacheDirective\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 2:07 PM",
          "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "16/10/13 7:14 PM",
          "commitNameOld": "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 21.83,
          "commitsBetweenForRepo": 97,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,27 @@\n-  public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n-      String pool, final Path path) throws IOException {\n-    String pathName \u003d path !\u003d null ? getPathName(fixRelativePart(path)) : null;\n-    final RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n-        dfs.listPathBasedCacheDescriptors(pool, pathName);\n-    return new RemoteIterator\u003cPathBasedCacheDescriptor\u003e() {\n+  public RemoteIterator\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n+      PathBasedCacheDirective filter) throws IOException {\n+    if (filter \u003d\u003d null) {\n+      filter \u003d new PathBasedCacheDirective.Builder().build();\n+    }\n+    if (filter.getPath() !\u003d null) {\n+      filter \u003d new PathBasedCacheDirective.Builder(filter).\n+          setPath(filter.getPath().\n+              makeQualified(getUri(), filter.getPath())).\n+                build();\n+    }\n+    final RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n+        dfs.listPathBasedCacheDirectives(filter);\n+    return new RemoteIterator\u003cPathBasedCacheDirective\u003e() {\n       @Override\n       public boolean hasNext() throws IOException {\n         return iter.hasNext();\n       }\n \n       @Override\n-      public PathBasedCacheDescriptor next() throws IOException {\n-        PathBasedCacheDescriptor desc \u003d iter.next();\n-        Path qualPath \u003d desc.getPath().makeQualified(getUri(), path);\n-        return new PathBasedCacheDescriptor(desc.getEntryId(), qualPath,\n-            desc.getReplication(), desc.getPool());\n+      public PathBasedCacheDirective next() throws IOException {\n+        PathBasedCacheDirective desc \u003d iter.next();\n+        Path p \u003d desc.getPath().makeQualified(getUri(), desc.getPath());\n+        return new PathBasedCacheDirective.Builder(desc).setPath(p).build();\n       }\n     };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RemoteIterator\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n      PathBasedCacheDirective filter) throws IOException {\n    if (filter \u003d\u003d null) {\n      filter \u003d new PathBasedCacheDirective.Builder().build();\n    }\n    if (filter.getPath() !\u003d null) {\n      filter \u003d new PathBasedCacheDirective.Builder(filter).\n          setPath(filter.getPath().\n              makeQualified(getUri(), filter.getPath())).\n                build();\n    }\n    final RemoteIterator\u003cPathBasedCacheDirective\u003e iter \u003d\n        dfs.listPathBasedCacheDirectives(filter);\n    return new RemoteIterator\u003cPathBasedCacheDirective\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iter.hasNext();\n      }\n\n      @Override\n      public PathBasedCacheDirective next() throws IOException {\n        PathBasedCacheDirective desc \u003d iter.next();\n        Path p \u003d desc.getPath().makeQualified(getUri(), desc.getPath());\n        return new PathBasedCacheDirective.Builder(desc).setPath(p).build();\n      }\n    };\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "efe545b0c219eeba61ac5259aee4d518beb74316": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5358. Add replication field to PathBasedCacheDirective. (Contributed by Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532124 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/10/13 3:56 PM",
      "commitName": "efe545b0c219eeba61ac5259aee4d518beb74316",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "11/10/13 12:44 PM",
      "commitNameOld": "8111c3af6b06d6a814e235ad90af5860632d2c25",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 3.13,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n       String pool, final Path path) throws IOException {\n     String pathName \u003d path !\u003d null ? getPathName(fixRelativePart(path)) : null;\n     final RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n         dfs.listPathBasedCacheDescriptors(pool, pathName);\n     return new RemoteIterator\u003cPathBasedCacheDescriptor\u003e() {\n       @Override\n       public boolean hasNext() throws IOException {\n         return iter.hasNext();\n       }\n \n       @Override\n       public PathBasedCacheDescriptor next() throws IOException {\n         PathBasedCacheDescriptor desc \u003d iter.next();\n         Path qualPath \u003d desc.getPath().makeQualified(getUri(), path);\n         return new PathBasedCacheDescriptor(desc.getEntryId(), qualPath,\n-            desc.getPool());\n+            desc.getReplication(), desc.getPool());\n       }\n     };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n      String pool, final Path path) throws IOException {\n    String pathName \u003d path !\u003d null ? getPathName(fixRelativePart(path)) : null;\n    final RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n        dfs.listPathBasedCacheDescriptors(pool, pathName);\n    return new RemoteIterator\u003cPathBasedCacheDescriptor\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iter.hasNext();\n      }\n\n      @Override\n      public PathBasedCacheDescriptor next() throws IOException {\n        PathBasedCacheDescriptor desc \u003d iter.next();\n        Path qualPath \u003d desc.getPath().makeQualified(getUri(), path);\n        return new PathBasedCacheDescriptor(desc.getEntryId(), qualPath,\n            desc.getReplication(), desc.getPool());\n      }\n    };\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "8111c3af6b06d6a814e235ad90af5860632d2c25": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5224. Refactor PathBasedCache* methods to use a Path rather than a String. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1531406 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/10/13 12:44 PM",
      "commitName": "8111c3af6b06d6a814e235ad90af5860632d2c25",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5224. Refactor PathBasedCache* methods to use a Path rather than a String. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1531406 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/10/13 12:44 PM",
          "commitName": "8111c3af6b06d6a814e235ad90af5860632d2c25",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "04/10/13 3:28 PM",
          "commitNameOld": "eb2175db1a99348c80457e3ffda172cc461de8bc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 6.89,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,4 +1,20 @@\n   public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n-      String pool, String path) throws IOException {\n-    return dfs.listPathBasedCacheDescriptors(pool, path);\n+      String pool, final Path path) throws IOException {\n+    String pathName \u003d path !\u003d null ? getPathName(fixRelativePart(path)) : null;\n+    final RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n+        dfs.listPathBasedCacheDescriptors(pool, pathName);\n+    return new RemoteIterator\u003cPathBasedCacheDescriptor\u003e() {\n+      @Override\n+      public boolean hasNext() throws IOException {\n+        return iter.hasNext();\n+      }\n+\n+      @Override\n+      public PathBasedCacheDescriptor next() throws IOException {\n+        PathBasedCacheDescriptor desc \u003d iter.next();\n+        Path qualPath \u003d desc.getPath().makeQualified(getUri(), path);\n+        return new PathBasedCacheDescriptor(desc.getEntryId(), qualPath,\n+            desc.getPool());\n+      }\n+    };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n      String pool, final Path path) throws IOException {\n    String pathName \u003d path !\u003d null ? getPathName(fixRelativePart(path)) : null;\n    final RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n        dfs.listPathBasedCacheDescriptors(pool, pathName);\n    return new RemoteIterator\u003cPathBasedCacheDescriptor\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iter.hasNext();\n      }\n\n      @Override\n      public PathBasedCacheDescriptor next() throws IOException {\n        PathBasedCacheDescriptor desc \u003d iter.next();\n        Path qualPath \u003d desc.getPath().makeQualified(getUri(), path);\n        return new PathBasedCacheDescriptor(desc.getEntryId(), qualPath,\n            desc.getPool());\n      }\n    };\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {
            "oldValue": "[pool-String, path-String]",
            "newValue": "[pool-String, path-Path(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5224. Refactor PathBasedCache* methods to use a Path rather than a String. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1531406 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/10/13 12:44 PM",
          "commitName": "8111c3af6b06d6a814e235ad90af5860632d2c25",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "04/10/13 3:28 PM",
          "commitNameOld": "eb2175db1a99348c80457e3ffda172cc461de8bc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 6.89,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,4 +1,20 @@\n   public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n-      String pool, String path) throws IOException {\n-    return dfs.listPathBasedCacheDescriptors(pool, path);\n+      String pool, final Path path) throws IOException {\n+    String pathName \u003d path !\u003d null ? getPathName(fixRelativePart(path)) : null;\n+    final RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n+        dfs.listPathBasedCacheDescriptors(pool, pathName);\n+    return new RemoteIterator\u003cPathBasedCacheDescriptor\u003e() {\n+      @Override\n+      public boolean hasNext() throws IOException {\n+        return iter.hasNext();\n+      }\n+\n+      @Override\n+      public PathBasedCacheDescriptor next() throws IOException {\n+        PathBasedCacheDescriptor desc \u003d iter.next();\n+        Path qualPath \u003d desc.getPath().makeQualified(getUri(), path);\n+        return new PathBasedCacheDescriptor(desc.getEntryId(), qualPath,\n+            desc.getPool());\n+      }\n+    };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n      String pool, final Path path) throws IOException {\n    String pathName \u003d path !\u003d null ? getPathName(fixRelativePart(path)) : null;\n    final RemoteIterator\u003cPathBasedCacheDescriptor\u003e iter \u003d\n        dfs.listPathBasedCacheDescriptors(pool, pathName);\n    return new RemoteIterator\u003cPathBasedCacheDescriptor\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iter.hasNext();\n      }\n\n      @Override\n      public PathBasedCacheDescriptor next() throws IOException {\n        PathBasedCacheDescriptor desc \u003d iter.next();\n        Path qualPath \u003d desc.getPath().makeQualified(getUri(), path);\n        return new PathBasedCacheDescriptor(desc.getEntryId(), qualPath,\n            desc.getPool());\n      }\n    };\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "a0d9a155a4a4258f628e927e096ecf6673f788ec": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5236. Change PathBasedCacheDirective APIs to be a single value rather than batch. (Contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1525183 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/09/13 5:20 PM",
      "commitName": "a0d9a155a4a4258f628e927e096ecf6673f788ec",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "18/09/13 1:43 PM",
      "commitNameOld": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 2.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,4 @@\n   public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n       String pool, String path) throws IOException {\n-    return dfs.namenode.listPathBasedCacheDescriptors(0, pool, path);\n+    return dfs.listPathBasedCacheDescriptors(pool, path);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n      String pool, String path) throws IOException {\n    return dfs.listPathBasedCacheDescriptors(pool, path);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/09/13 1:43 PM",
      "commitName": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/13 1:43 PM",
          "commitName": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "11/09/13 8:55 PM",
          "commitNameOld": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 6.7,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,4 +1,4 @@\n-  public RemoteIterator\u003cPathBasedCacheEntry\u003e listPathBasedCacheEntries(\n+  public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n       String pool, String path) throws IOException {\n-    return dfs.namenode.listPathBasedCacheEntries(0, pool, path);\n+    return dfs.namenode.listPathBasedCacheDescriptors(0, pool, path);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n      String pool, String path) throws IOException {\n    return dfs.namenode.listPathBasedCacheDescriptors(0, pool, path);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {
            "oldValue": "listPathBasedCacheEntries",
            "newValue": "listPathBasedCacheDescriptors"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/13 1:43 PM",
          "commitName": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "11/09/13 8:55 PM",
          "commitNameOld": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 6.7,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,4 +1,4 @@\n-  public RemoteIterator\u003cPathBasedCacheEntry\u003e listPathBasedCacheEntries(\n+  public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n       String pool, String path) throws IOException {\n-    return dfs.namenode.listPathBasedCacheEntries(0, pool, path);\n+    return dfs.namenode.listPathBasedCacheDescriptors(0, pool, path);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n      String pool, String path) throws IOException {\n    return dfs.namenode.listPathBasedCacheDescriptors(0, pool, path);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {
            "oldValue": "RemoteIterator\u003cPathBasedCacheEntry\u003e",
            "newValue": "RemoteIterator\u003cPathBasedCacheDescriptor\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5213. Separate PathBasedCacheEntry and PathBasedCacheDirectiveWithId. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1524561 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/09/13 1:43 PM",
          "commitName": "e202d4d1548a0be2f5c61ff82be8b52bd0cfce04",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "11/09/13 8:55 PM",
          "commitNameOld": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 6.7,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,4 +1,4 @@\n-  public RemoteIterator\u003cPathBasedCacheEntry\u003e listPathBasedCacheEntries(\n+  public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n       String pool, String path) throws IOException {\n-    return dfs.namenode.listPathBasedCacheEntries(0, pool, path);\n+    return dfs.namenode.listPathBasedCacheDescriptors(0, pool, path);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RemoteIterator\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n      String pool, String path) throws IOException {\n    return dfs.namenode.listPathBasedCacheDescriptors(0, pool, path);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "02e0e158a26f81ce8375426ba0ea56db09ee36be": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5158. Add command-line support for manipulating cache directives\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1522272 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/13 8:55 PM",
      "commitName": "02e0e158a26f81ce8375426ba0ea56db09ee36be",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,4 @@\n+  public RemoteIterator\u003cPathBasedCacheEntry\u003e listPathBasedCacheEntries(\n+      String pool, String path) throws IOException {\n+    return dfs.namenode.listPathBasedCacheEntries(0, pool, path);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RemoteIterator\u003cPathBasedCacheEntry\u003e listPathBasedCacheEntries(\n      String pool, String path) throws IOException {\n    return dfs.namenode.listPathBasedCacheEntries(0, pool, path);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java"
    }
  }
}