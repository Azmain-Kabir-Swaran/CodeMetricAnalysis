{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NetworkTopology.java",
  "functionName": "getDistanceByPath",
  "functionId": "getDistanceByPath___node1-Node__node2-Node",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
  "functionStartLine": 366,
  "functionEndLine": 390,
  "numCommitsSeen": 49,
  "timeTaken": 1160,
  "changeHistory": [
    "61f46be071e42f9eb49a54b1bd2e54feac59f808"
  ],
  "changeHistoryShort": {
    "61f46be071e42f9eb49a54b1bd2e54feac59f808": "Yintroduced"
  },
  "changeHistoryDetails": {
    "61f46be071e42f9eb49a54b1bd2e54feac59f808": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10208. Addendum for HDFS-9579: to handle the case when client machine can\u0027t resolve network path (Ming Ma via sjlee)\n",
      "commitDate": "16/05/16 6:49 PM",
      "commitName": "61f46be071e42f9eb49a54b1bd2e54feac59f808",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,25 @@\n+  static public int getDistanceByPath(Node node1, Node node2) {\n+    if (node1 \u003d\u003d null \u0026\u0026 node2 \u003d\u003d null) {\n+      return 0;\n+    }\n+    if (node1 \u003d\u003d null || node2 \u003d\u003d null) {\n+      LOG.warn(\"One of the nodes is a null pointer\");\n+      return Integer.MAX_VALUE;\n+    }\n+    String[] paths1 \u003d NodeBase.getPathComponents(node1);\n+    String[] paths2 \u003d NodeBase.getPathComponents(node2);\n+    int dis \u003d 0;\n+    int index \u003d 0;\n+    int minLevel \u003d Math.min(paths1.length, paths2.length);\n+    while (index \u003c minLevel) {\n+      if (!paths1[index].equals(paths2[index])) {\n+        // Once the path starts to diverge,  compute the distance that include\n+        // the rest of paths.\n+        dis +\u003d 2 * (minLevel - index);\n+        break;\n+      }\n+      index++;\n+    }\n+    dis +\u003d Math.abs(paths1.length - paths2.length);\n+    return dis;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static public int getDistanceByPath(Node node1, Node node2) {\n    if (node1 \u003d\u003d null \u0026\u0026 node2 \u003d\u003d null) {\n      return 0;\n    }\n    if (node1 \u003d\u003d null || node2 \u003d\u003d null) {\n      LOG.warn(\"One of the nodes is a null pointer\");\n      return Integer.MAX_VALUE;\n    }\n    String[] paths1 \u003d NodeBase.getPathComponents(node1);\n    String[] paths2 \u003d NodeBase.getPathComponents(node2);\n    int dis \u003d 0;\n    int index \u003d 0;\n    int minLevel \u003d Math.min(paths1.length, paths2.length);\n    while (index \u003c minLevel) {\n      if (!paths1[index].equals(paths2[index])) {\n        // Once the path starts to diverge,  compute the distance that include\n        // the rest of paths.\n        dis +\u003d 2 * (minLevel - index);\n        break;\n      }\n      index++;\n    }\n    dis +\u003d Math.abs(paths1.length - paths2.length);\n    return dis;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java"
    }
  }
}