{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AppCatalogSolrClient.java",
  "functionName": "upgradeApp",
  "functionId": "upgradeApp___service-Service",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-catalog/hadoop-yarn-applications-catalog-webapp/src/main/java/org/apache/hadoop/yarn/appcatalog/application/AppCatalogSolrClient.java",
  "functionStartLine": 392,
  "functionEndLine": 432,
  "numCommitsSeen": 7,
  "timeTaken": 697,
  "changeHistory": [
    "b2cdf809bce10f680048cacf45806f0abb4f4804"
  ],
  "changeHistoryShort": {
    "b2cdf809bce10f680048cacf45806f0abb4f4804": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b2cdf809bce10f680048cacf45806f0abb4f4804": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9281. Add express upgrade button to Appcatalog UI. Contributed by Eric Yang\n",
      "commitDate": "13/04/19 8:55 AM",
      "commitName": "b2cdf809bce10f680048cacf45806f0abb4f4804",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,41 @@\n+  public void upgradeApp(Service service) throws IOException,\n+      SolrServerException {\n+    ObjectMapper mapper \u003d new ObjectMapper();\n+    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    Collection\u003cSolrInputDocument\u003e docs \u003d new HashSet\u003cSolrInputDocument\u003e();\n+    SolrClient solr \u003d getSolrClient();\n+    if (service!\u003dnull) {\n+      String name \u003d service.getName();\n+      String app \u003d \"\";\n+      SolrQuery query \u003d new SolrQuery();\n+      query.setQuery(\"id:\" + name);\n+      query.setFilterQueries(\"type_s:AppEntry\");\n+      query.setRows(1);\n+\n+      QueryResponse response;\n+      try {\n+        response \u003d solr.query(query);\n+        Iterator\u003cSolrDocument\u003e appList \u003d response.getResults().listIterator();\n+        while (appList.hasNext()) {\n+          SolrDocument d \u003d appList.next();\n+          app \u003d d.get(\"app_s\").toString();\n+        }\n+      } catch (SolrServerException | IOException e) {\n+        LOG.error(\"Error in finding deployed application: \" + name, e);\n+      }\n+      // Register deployed application instance with AppList\n+      SolrInputDocument request \u003d new SolrInputDocument();\n+      request.addField(\"type_s\", \"AppEntry\");\n+      request.addField(\"id\", name);\n+      request.addField(\"name_s\", name);\n+      request.addField(\"app_s\", app);\n+      request.addField(\"yarnfile_s\", mapper.writeValueAsString(service));\n+      docs.add(request);\n+    }\n+    try {\n+      commitSolrChanges(solr, docs);\n+    } catch (IOException e) {\n+      throw new IOException(\"Unable to register docker instance \"\n+          + \"with application entry.\", e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void upgradeApp(Service service) throws IOException,\n      SolrServerException {\n    ObjectMapper mapper \u003d new ObjectMapper();\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    Collection\u003cSolrInputDocument\u003e docs \u003d new HashSet\u003cSolrInputDocument\u003e();\n    SolrClient solr \u003d getSolrClient();\n    if (service!\u003dnull) {\n      String name \u003d service.getName();\n      String app \u003d \"\";\n      SolrQuery query \u003d new SolrQuery();\n      query.setQuery(\"id:\" + name);\n      query.setFilterQueries(\"type_s:AppEntry\");\n      query.setRows(1);\n\n      QueryResponse response;\n      try {\n        response \u003d solr.query(query);\n        Iterator\u003cSolrDocument\u003e appList \u003d response.getResults().listIterator();\n        while (appList.hasNext()) {\n          SolrDocument d \u003d appList.next();\n          app \u003d d.get(\"app_s\").toString();\n        }\n      } catch (SolrServerException | IOException e) {\n        LOG.error(\"Error in finding deployed application: \" + name, e);\n      }\n      // Register deployed application instance with AppList\n      SolrInputDocument request \u003d new SolrInputDocument();\n      request.addField(\"type_s\", \"AppEntry\");\n      request.addField(\"id\", name);\n      request.addField(\"name_s\", name);\n      request.addField(\"app_s\", app);\n      request.addField(\"yarnfile_s\", mapper.writeValueAsString(service));\n      docs.add(request);\n    }\n    try {\n      commitSolrChanges(solr, docs);\n    } catch (IOException e) {\n      throw new IOException(\"Unable to register docker instance \"\n          + \"with application entry.\", e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-catalog/hadoop-yarn-applications-catalog-webapp/src/main/java/org/apache/hadoop/yarn/appcatalog/application/AppCatalogSolrClient.java"
    }
  }
}