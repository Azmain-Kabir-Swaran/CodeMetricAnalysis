{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "INodeFile.java",
  "functionName": "computeQuotaUsage",
  "functionId": "computeQuotaUsage___bsps-BlockStoragePolicySuite__blockStoragePolicyId-byte__useCache-boolean__lastSnapshotId-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
  "functionStartLine": 807,
  "functionEndLine": 855,
  "numCommitsSeen": 461,
  "timeTaken": 7336,
  "changeHistory": [
    "ea5bb483269b51a349c358b71f84904c76693a66",
    "97a2396af685838c9fcb31e48573e758c124d8d7",
    "26773d9d6c10479982a3cdbea3a0933f4476add3",
    "b2c85db86c9a62b0a03ee87547265077f664970a",
    "02a4a22b9c0e22c2e7dd6ec85edd5c5a167fe19f",
    "5c97db07fb306842f49d73a67a90cecec19a7833",
    "72f6bd4893dcf10d6dad24753f9be99505a87a1f",
    "f2231cebcddc80f0b753c4a7cb45ee4040846951",
    "5dae97a584d30cef3e34141edfaca49c4ec57913",
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795",
    "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a",
    "8df119da214babde03e73243c7ca4cfe6d0ca562"
  ],
  "changeHistoryShort": {
    "ea5bb483269b51a349c358b71f84904c76693a66": "Ybodychange",
    "97a2396af685838c9fcb31e48573e758c124d8d7": "Ybodychange",
    "26773d9d6c10479982a3cdbea3a0933f4476add3": "Ybodychange",
    "b2c85db86c9a62b0a03ee87547265077f664970a": "Ymultichange(Yparameterchange,Ybodychange)",
    "02a4a22b9c0e22c2e7dd6ec85edd5c5a167fe19f": "Ybodychange",
    "5c97db07fb306842f49d73a67a90cecec19a7833": "Ybodychange",
    "72f6bd4893dcf10d6dad24753f9be99505a87a1f": "Ymultichange(Yparameterchange,Ybodychange)",
    "f2231cebcddc80f0b753c4a7cb45ee4040846951": "Ybodychange",
    "5dae97a584d30cef3e34141edfaca49c4ec57913": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e": "Ybodychange",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": "Ybodychange",
    "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a": "Ybodychange",
    "8df119da214babde03e73243c7ca4cfe6d0ca562": "Ybodychange"
  },
  "changeHistoryDetails": {
    "ea5bb483269b51a349c358b71f84904c76693a66": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9360. Storage type usage isn\u0027t updated properly after file deletion. Contributed by Ming Ma.\n",
      "commitDate": "05/11/15 1:30 AM",
      "commitName": "ea5bb483269b51a349c358b71f84904c76693a66",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "23/09/15 1:34 PM",
      "commitNameOld": "c09dc258a8f64fab852bf6f26187163480dbee3c",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 42.54,
      "commitsBetweenForRepo": 359,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,49 @@\n   public final QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n       byte blockStoragePolicyId, boolean useCache, int lastSnapshotId) {\n     final QuotaCounts counts \u003d new QuotaCounts.Builder().nameSpace(1).build();\n \n-    final BlockStoragePolicy bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n+    final BlockStoragePolicy bsp \u003d (blockStoragePolicyId \u003d\u003d\n+        BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) ? null :\n+        bsps.getPolicy(blockStoragePolicyId);\n     FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n     if (sf \u003d\u003d null) {\n       counts.add(storagespaceConsumed(bsp));\n       return counts;\n     }\n \n     FileDiffList fileDiffList \u003d sf.getDiffs();\n     int last \u003d fileDiffList.getLastSnapshotId();\n \n     if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n         || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n       counts.add(storagespaceConsumed(bsp));\n       return counts;\n     }\n \n     final long ssDeltaNoReplication;\n     short replication;\n     if (isStriped()) {\n       return computeQuotaUsageWithStriped(bsp, counts);\n     }\n \n     if (last \u003c lastSnapshotId) {\n       ssDeltaNoReplication \u003d computeFileSize(true, false);\n       replication \u003d getFileReplication();\n     } else {\n       int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n       ssDeltaNoReplication \u003d computeFileSize(sid);\n       replication \u003d getFileReplication(sid);\n     }\n \n     counts.addStorageSpace(ssDeltaNoReplication * replication);\n     if (bsp !\u003d null) {\n       List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n       for (StorageType t : storageTypes) {\n         if (!t.supportTypeQuota()) {\n           continue;\n         }\n         counts.addTypeSpace(t, ssDeltaNoReplication);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n      byte blockStoragePolicyId, boolean useCache, int lastSnapshotId) {\n    final QuotaCounts counts \u003d new QuotaCounts.Builder().nameSpace(1).build();\n\n    final BlockStoragePolicy bsp \u003d (blockStoragePolicyId \u003d\u003d\n        BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) ? null :\n        bsps.getPolicy(blockStoragePolicyId);\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf \u003d\u003d null) {\n      counts.add(storagespaceConsumed(bsp));\n      return counts;\n    }\n\n    FileDiffList fileDiffList \u003d sf.getDiffs();\n    int last \u003d fileDiffList.getLastSnapshotId();\n\n    if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n        || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n      counts.add(storagespaceConsumed(bsp));\n      return counts;\n    }\n\n    final long ssDeltaNoReplication;\n    short replication;\n    if (isStriped()) {\n      return computeQuotaUsageWithStriped(bsp, counts);\n    }\n\n    if (last \u003c lastSnapshotId) {\n      ssDeltaNoReplication \u003d computeFileSize(true, false);\n      replication \u003d getFileReplication();\n    } else {\n      int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n      ssDeltaNoReplication \u003d computeFileSize(sid);\n      replication \u003d getFileReplication(sid);\n    }\n\n    counts.addStorageSpace(ssDeltaNoReplication * replication);\n    if (bsp !\u003d null) {\n      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n      for (StorageType t : storageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        counts.addTypeSpace(t, ssDeltaNoReplication);\n      }\n    }\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
      "extendedDetails": {}
    },
    "97a2396af685838c9fcb31e48573e758c124d8d7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8372. Erasure coding: compute storage type quotas for striped files, to be consistent with HDFS-8327. Contributed by Zhe Zhang.\n",
      "commitDate": "26/05/15 12:01 PM",
      "commitName": "97a2396af685838c9fcb31e48573e758c124d8d7",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 12:01 PM",
      "commitNameOld": "6bacaa9a5233cbad7f311ccd9d8f8dc9375c732d",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   public final QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n       byte blockStoragePolicyId, boolean useCache, int lastSnapshotId) {\n     final QuotaCounts counts \u003d new QuotaCounts.Builder().nameSpace(1).build();\n \n     final BlockStoragePolicy bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n     FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n     if (sf \u003d\u003d null) {\n       counts.add(storagespaceConsumed(bsp));\n       return counts;\n     }\n \n     FileDiffList fileDiffList \u003d sf.getDiffs();\n     int last \u003d fileDiffList.getLastSnapshotId();\n \n     if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n         || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n       counts.add(storagespaceConsumed(bsp));\n       return counts;\n     }\n \n     final long ssDeltaNoReplication;\n     short replication;\n     if (isStriped()) {\n-      return computeQuotaUsageWithStriped(bsps, counts);\n+      return computeQuotaUsageWithStriped(bsp, counts);\n     }\n     \n     if (last \u003c lastSnapshotId) {\n       ssDeltaNoReplication \u003d computeFileSize(true, false);\n       replication \u003d getFileReplication();\n     } else {\n       int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n       ssDeltaNoReplication \u003d computeFileSize(sid);\n       replication \u003d getFileReplication(sid);\n     }\n \n     counts.addStorageSpace(ssDeltaNoReplication * replication);\n     if (bsp !\u003d null) {\n       List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n       for (StorageType t : storageTypes) {\n         if (!t.supportTypeQuota()) {\n           continue;\n         }\n         counts.addTypeSpace(t, ssDeltaNoReplication);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n      byte blockStoragePolicyId, boolean useCache, int lastSnapshotId) {\n    final QuotaCounts counts \u003d new QuotaCounts.Builder().nameSpace(1).build();\n\n    final BlockStoragePolicy bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf \u003d\u003d null) {\n      counts.add(storagespaceConsumed(bsp));\n      return counts;\n    }\n\n    FileDiffList fileDiffList \u003d sf.getDiffs();\n    int last \u003d fileDiffList.getLastSnapshotId();\n\n    if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n        || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n      counts.add(storagespaceConsumed(bsp));\n      return counts;\n    }\n\n    final long ssDeltaNoReplication;\n    short replication;\n    if (isStriped()) {\n      return computeQuotaUsageWithStriped(bsp, counts);\n    }\n    \n    if (last \u003c lastSnapshotId) {\n      ssDeltaNoReplication \u003d computeFileSize(true, false);\n      replication \u003d getFileReplication();\n    } else {\n      int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n      ssDeltaNoReplication \u003d computeFileSize(sid);\n      replication \u003d getFileReplication(sid);\n    }\n\n    counts.addStorageSpace(ssDeltaNoReplication * replication);\n    if (bsp !\u003d null) {\n      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n      for (StorageType t : storageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        counts.addTypeSpace(t, ssDeltaNoReplication);\n      }\n    }\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
      "extendedDetails": {}
    },
    "26773d9d6c10479982a3cdbea3a0933f4476add3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7826. Erasure Coding: Update INodeFile quota computation for striped blocks. Contributed by Kai Sasaki.\n",
      "commitDate": "26/05/15 11:32 AM",
      "commitName": "26773d9d6c10479982a3cdbea3a0933f4476add3",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 11:32 AM",
      "commitNameOld": "39a0a85fb77872911089aac3f7792ab48d9eca68",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,48 @@\n   public final QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n       byte blockStoragePolicyId, boolean useCache, int lastSnapshotId) {\n     final QuotaCounts counts \u003d new QuotaCounts.Builder().nameSpace(1).build();\n \n     final BlockStoragePolicy bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n     FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n     if (sf \u003d\u003d null) {\n       counts.add(storagespaceConsumed(bsp));\n       return counts;\n     }\n \n     FileDiffList fileDiffList \u003d sf.getDiffs();\n     int last \u003d fileDiffList.getLastSnapshotId();\n \n     if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n         || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n       counts.add(storagespaceConsumed(bsp));\n       return counts;\n     }\n \n     final long ssDeltaNoReplication;\n     short replication;\n+\n+    if (isStriped()) {\n+      return computeQuotaUsageWithStriped(bsps, counts);\n+    }\n+    \n     if (last \u003c lastSnapshotId) {\n       ssDeltaNoReplication \u003d computeFileSize(true, false);\n       replication \u003d getFileReplication();\n     } else {\n       int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n       ssDeltaNoReplication \u003d computeFileSize(sid);\n       replication \u003d getFileReplication(sid);\n     }\n \n     counts.addStorageSpace(ssDeltaNoReplication * replication);\n     if (bsp !\u003d null) {\n       List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n       for (StorageType t : storageTypes) {\n         if (!t.supportTypeQuota()) {\n           continue;\n         }\n         counts.addTypeSpace(t, ssDeltaNoReplication);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n      byte blockStoragePolicyId, boolean useCache, int lastSnapshotId) {\n    final QuotaCounts counts \u003d new QuotaCounts.Builder().nameSpace(1).build();\n\n    final BlockStoragePolicy bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf \u003d\u003d null) {\n      counts.add(storagespaceConsumed(bsp));\n      return counts;\n    }\n\n    FileDiffList fileDiffList \u003d sf.getDiffs();\n    int last \u003d fileDiffList.getLastSnapshotId();\n\n    if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n        || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n      counts.add(storagespaceConsumed(bsp));\n      return counts;\n    }\n\n    final long ssDeltaNoReplication;\n    short replication;\n\n    if (isStriped()) {\n      return computeQuotaUsageWithStriped(bsps, counts);\n    }\n    \n    if (last \u003c lastSnapshotId) {\n      ssDeltaNoReplication \u003d computeFileSize(true, false);\n      replication \u003d getFileReplication();\n    } else {\n      int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n      ssDeltaNoReplication \u003d computeFileSize(sid);\n      replication \u003d getFileReplication(sid);\n    }\n\n    counts.addStorageSpace(ssDeltaNoReplication * replication);\n    if (bsp !\u003d null) {\n      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n      for (StorageType t : storageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        counts.addTypeSpace(t, ssDeltaNoReplication);\n      }\n    }\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
      "extendedDetails": {}
    },
    "b2c85db86c9a62b0a03ee87547265077f664970a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
      "commitDate": "13/05/15 9:50 PM",
      "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
          "commitDate": "13/05/15 9:50 PM",
          "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "12/05/15 6:29 AM",
          "commitNameOld": "6d5da9484185ca9f585195d6da069b9cd5be4044",
          "commitAuthorOld": "yliu",
          "daysBetweenCommits": 1.64,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,43 @@\n-  public final QuotaCounts computeQuotaUsage(\n-      BlockStoragePolicySuite bsps, byte blockStoragePolicyId,\n-      QuotaCounts counts, boolean useCache,\n-      int lastSnapshotId) {\n-    long nsDelta \u003d 1;\n-    counts.addNameSpace(nsDelta);\n+  public final QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n+      byte blockStoragePolicyId, boolean useCache, int lastSnapshotId) {\n+    final QuotaCounts counts \u003d new QuotaCounts.Builder().nameSpace(1).build();\n \n-    BlockStoragePolicy bsp \u003d null;\n-    if (blockStoragePolicyId !\u003d BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n-      bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n-    }\n-\n+    final BlockStoragePolicy bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n     FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n     if (sf \u003d\u003d null) {\n       counts.add(storagespaceConsumed(bsp));\n       return counts;\n     }\n \n     FileDiffList fileDiffList \u003d sf.getDiffs();\n     int last \u003d fileDiffList.getLastSnapshotId();\n \n     if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n         || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n       counts.add(storagespaceConsumed(bsp));\n       return counts;\n     }\n \n     final long ssDeltaNoReplication;\n     short replication;\n     if (last \u003c lastSnapshotId) {\n       ssDeltaNoReplication \u003d computeFileSize(true, false);\n       replication \u003d getFileReplication();\n     } else {\n       int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n       ssDeltaNoReplication \u003d computeFileSize(sid);\n       replication \u003d getFileReplication(sid);\n     }\n \n     counts.addStorageSpace(ssDeltaNoReplication * replication);\n     if (bsp !\u003d null) {\n       List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n       for (StorageType t : storageTypes) {\n         if (!t.supportTypeQuota()) {\n           continue;\n         }\n         counts.addTypeSpace(t, ssDeltaNoReplication);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n      byte blockStoragePolicyId, boolean useCache, int lastSnapshotId) {\n    final QuotaCounts counts \u003d new QuotaCounts.Builder().nameSpace(1).build();\n\n    final BlockStoragePolicy bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf \u003d\u003d null) {\n      counts.add(storagespaceConsumed(bsp));\n      return counts;\n    }\n\n    FileDiffList fileDiffList \u003d sf.getDiffs();\n    int last \u003d fileDiffList.getLastSnapshotId();\n\n    if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n        || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n      counts.add(storagespaceConsumed(bsp));\n      return counts;\n    }\n\n    final long ssDeltaNoReplication;\n    short replication;\n    if (last \u003c lastSnapshotId) {\n      ssDeltaNoReplication \u003d computeFileSize(true, false);\n      replication \u003d getFileReplication();\n    } else {\n      int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n      ssDeltaNoReplication \u003d computeFileSize(sid);\n      replication \u003d getFileReplication(sid);\n    }\n\n    counts.addStorageSpace(ssDeltaNoReplication * replication);\n    if (bsp !\u003d null) {\n      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n      for (StorageType t : storageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        counts.addTypeSpace(t, ssDeltaNoReplication);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
          "extendedDetails": {
            "oldValue": "[bsps-BlockStoragePolicySuite, blockStoragePolicyId-byte, counts-QuotaCounts, useCache-boolean, lastSnapshotId-int]",
            "newValue": "[bsps-BlockStoragePolicySuite, blockStoragePolicyId-byte, useCache-boolean, lastSnapshotId-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
          "commitDate": "13/05/15 9:50 PM",
          "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "12/05/15 6:29 AM",
          "commitNameOld": "6d5da9484185ca9f585195d6da069b9cd5be4044",
          "commitAuthorOld": "yliu",
          "daysBetweenCommits": 1.64,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,43 @@\n-  public final QuotaCounts computeQuotaUsage(\n-      BlockStoragePolicySuite bsps, byte blockStoragePolicyId,\n-      QuotaCounts counts, boolean useCache,\n-      int lastSnapshotId) {\n-    long nsDelta \u003d 1;\n-    counts.addNameSpace(nsDelta);\n+  public final QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n+      byte blockStoragePolicyId, boolean useCache, int lastSnapshotId) {\n+    final QuotaCounts counts \u003d new QuotaCounts.Builder().nameSpace(1).build();\n \n-    BlockStoragePolicy bsp \u003d null;\n-    if (blockStoragePolicyId !\u003d BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n-      bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n-    }\n-\n+    final BlockStoragePolicy bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n     FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n     if (sf \u003d\u003d null) {\n       counts.add(storagespaceConsumed(bsp));\n       return counts;\n     }\n \n     FileDiffList fileDiffList \u003d sf.getDiffs();\n     int last \u003d fileDiffList.getLastSnapshotId();\n \n     if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n         || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n       counts.add(storagespaceConsumed(bsp));\n       return counts;\n     }\n \n     final long ssDeltaNoReplication;\n     short replication;\n     if (last \u003c lastSnapshotId) {\n       ssDeltaNoReplication \u003d computeFileSize(true, false);\n       replication \u003d getFileReplication();\n     } else {\n       int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n       ssDeltaNoReplication \u003d computeFileSize(sid);\n       replication \u003d getFileReplication(sid);\n     }\n \n     counts.addStorageSpace(ssDeltaNoReplication * replication);\n     if (bsp !\u003d null) {\n       List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n       for (StorageType t : storageTypes) {\n         if (!t.supportTypeQuota()) {\n           continue;\n         }\n         counts.addTypeSpace(t, ssDeltaNoReplication);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n      byte blockStoragePolicyId, boolean useCache, int lastSnapshotId) {\n    final QuotaCounts counts \u003d new QuotaCounts.Builder().nameSpace(1).build();\n\n    final BlockStoragePolicy bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf \u003d\u003d null) {\n      counts.add(storagespaceConsumed(bsp));\n      return counts;\n    }\n\n    FileDiffList fileDiffList \u003d sf.getDiffs();\n    int last \u003d fileDiffList.getLastSnapshotId();\n\n    if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n        || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n      counts.add(storagespaceConsumed(bsp));\n      return counts;\n    }\n\n    final long ssDeltaNoReplication;\n    short replication;\n    if (last \u003c lastSnapshotId) {\n      ssDeltaNoReplication \u003d computeFileSize(true, false);\n      replication \u003d getFileReplication();\n    } else {\n      int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n      ssDeltaNoReplication \u003d computeFileSize(sid);\n      replication \u003d getFileReplication(sid);\n    }\n\n    counts.addStorageSpace(ssDeltaNoReplication * replication);\n    if (bsp !\u003d null) {\n      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n      for (StorageType t : storageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        counts.addTypeSpace(t, ssDeltaNoReplication);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
          "extendedDetails": {}
        }
      ]
    },
    "02a4a22b9c0e22c2e7dd6ec85edd5c5a167fe19f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8327. Compute storage type quotas in INodeFile.computeQuotaDeltaForTruncate(). Contributed by Haohui Mai.\n",
      "commitDate": "08/05/15 11:09 PM",
      "commitName": "02a4a22b9c0e22c2e7dd6ec85edd5c5a167fe19f",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "08/05/15 11:04 PM",
      "commitNameOld": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,50 @@\n   public final QuotaCounts computeQuotaUsage(\n       BlockStoragePolicySuite bsps, byte blockStoragePolicyId,\n       QuotaCounts counts, boolean useCache,\n       int lastSnapshotId) {\n     long nsDelta \u003d 1;\n+    counts.addNameSpace(nsDelta);\n+\n+    BlockStoragePolicy bsp \u003d null;\n+    if (blockStoragePolicyId !\u003d BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n+      bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n+    }\n+\n+    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n+    if (sf \u003d\u003d null) {\n+      counts.add(storagespaceConsumed(bsp));\n+      return counts;\n+    }\n+\n+    FileDiffList fileDiffList \u003d sf.getDiffs();\n+    int last \u003d fileDiffList.getLastSnapshotId();\n+\n+    if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n+        || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n+      counts.add(storagespaceConsumed(bsp));\n+      return counts;\n+    }\n+\n     final long ssDeltaNoReplication;\n     short replication;\n-    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n-    if (sf !\u003d null) {\n-      FileDiffList fileDiffList \u003d sf.getDiffs();\n-      int last \u003d fileDiffList.getLastSnapshotId();\n-\n-      if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n-          || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n-        ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n-        replication \u003d getBlockReplication();\n-      } else if (last \u003c lastSnapshotId) {\n-        ssDeltaNoReplication \u003d computeFileSize(true, false);\n-        replication \u003d getFileReplication();\n-      } else {\n-        int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n-        ssDeltaNoReplication \u003d storagespaceConsumedNoReplication(sid);\n-        replication \u003d getReplication(sid);\n-      }\n+    if (last \u003c lastSnapshotId) {\n+      ssDeltaNoReplication \u003d computeFileSize(true, false);\n+      replication \u003d getFileReplication();\n     } else {\n-      ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n-      replication \u003d getBlockReplication();\n+      int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n+      ssDeltaNoReplication \u003d computeFileSize(sid);\n+      replication \u003d getFileReplication(sid);\n     }\n-    counts.addNameSpace(nsDelta);\n-    counts.addStorageSpace(ssDeltaNoReplication * replication);\n \n-    if (blockStoragePolicyId !\u003d BLOCK_STORAGE_POLICY_ID_UNSPECIFIED){\n-      BlockStoragePolicy bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n+    counts.addStorageSpace(ssDeltaNoReplication * replication);\n+    if (bsp !\u003d null) {\n       List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n       for (StorageType t : storageTypes) {\n         if (!t.supportTypeQuota()) {\n           continue;\n         }\n         counts.addTypeSpace(t, ssDeltaNoReplication);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final QuotaCounts computeQuotaUsage(\n      BlockStoragePolicySuite bsps, byte blockStoragePolicyId,\n      QuotaCounts counts, boolean useCache,\n      int lastSnapshotId) {\n    long nsDelta \u003d 1;\n    counts.addNameSpace(nsDelta);\n\n    BlockStoragePolicy bsp \u003d null;\n    if (blockStoragePolicyId !\u003d BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n      bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n    }\n\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf \u003d\u003d null) {\n      counts.add(storagespaceConsumed(bsp));\n      return counts;\n    }\n\n    FileDiffList fileDiffList \u003d sf.getDiffs();\n    int last \u003d fileDiffList.getLastSnapshotId();\n\n    if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n        || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n      counts.add(storagespaceConsumed(bsp));\n      return counts;\n    }\n\n    final long ssDeltaNoReplication;\n    short replication;\n    if (last \u003c lastSnapshotId) {\n      ssDeltaNoReplication \u003d computeFileSize(true, false);\n      replication \u003d getFileReplication();\n    } else {\n      int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n      ssDeltaNoReplication \u003d computeFileSize(sid);\n      replication \u003d getFileReplication(sid);\n    }\n\n    counts.addStorageSpace(ssDeltaNoReplication * replication);\n    if (bsp !\u003d null) {\n      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n      for (StorageType t : storageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        counts.addTypeSpace(t, ssDeltaNoReplication);\n      }\n    }\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
      "extendedDetails": {}
    },
    "5c97db07fb306842f49d73a67a90cecec19a7833": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8169. Move LocatedBlocks and related classes to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "20/04/15 12:36 AM",
      "commitName": "5c97db07fb306842f49d73a67a90cecec19a7833",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "02/04/15 9:20 PM",
      "commitNameOld": "72f6bd4893dcf10d6dad24753f9be99505a87a1f",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 17.14,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public final QuotaCounts computeQuotaUsage(\n       BlockStoragePolicySuite bsps, byte blockStoragePolicyId,\n       QuotaCounts counts, boolean useCache,\n       int lastSnapshotId) {\n     long nsDelta \u003d 1;\n     final long ssDeltaNoReplication;\n     short replication;\n     FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n     if (sf !\u003d null) {\n       FileDiffList fileDiffList \u003d sf.getDiffs();\n       int last \u003d fileDiffList.getLastSnapshotId();\n \n       if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n           || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n         ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n         replication \u003d getBlockReplication();\n       } else if (last \u003c lastSnapshotId) {\n         ssDeltaNoReplication \u003d computeFileSize(true, false);\n         replication \u003d getFileReplication();\n       } else {\n         int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n         ssDeltaNoReplication \u003d storagespaceConsumedNoReplication(sid);\n         replication \u003d getReplication(sid);\n       }\n     } else {\n       ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n       replication \u003d getBlockReplication();\n     }\n     counts.addNameSpace(nsDelta);\n     counts.addStorageSpace(ssDeltaNoReplication * replication);\n \n-    if (blockStoragePolicyId !\u003d ID_UNSPECIFIED){\n+    if (blockStoragePolicyId !\u003d BLOCK_STORAGE_POLICY_ID_UNSPECIFIED){\n       BlockStoragePolicy bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n       List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n       for (StorageType t : storageTypes) {\n         if (!t.supportTypeQuota()) {\n           continue;\n         }\n         counts.addTypeSpace(t, ssDeltaNoReplication);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final QuotaCounts computeQuotaUsage(\n      BlockStoragePolicySuite bsps, byte blockStoragePolicyId,\n      QuotaCounts counts, boolean useCache,\n      int lastSnapshotId) {\n    long nsDelta \u003d 1;\n    final long ssDeltaNoReplication;\n    short replication;\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf !\u003d null) {\n      FileDiffList fileDiffList \u003d sf.getDiffs();\n      int last \u003d fileDiffList.getLastSnapshotId();\n\n      if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n          || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n        ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n        replication \u003d getBlockReplication();\n      } else if (last \u003c lastSnapshotId) {\n        ssDeltaNoReplication \u003d computeFileSize(true, false);\n        replication \u003d getFileReplication();\n      } else {\n        int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n        ssDeltaNoReplication \u003d storagespaceConsumedNoReplication(sid);\n        replication \u003d getReplication(sid);\n      }\n    } else {\n      ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n      replication \u003d getBlockReplication();\n    }\n    counts.addNameSpace(nsDelta);\n    counts.addStorageSpace(ssDeltaNoReplication * replication);\n\n    if (blockStoragePolicyId !\u003d BLOCK_STORAGE_POLICY_ID_UNSPECIFIED){\n      BlockStoragePolicy bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n      for (StorageType t : storageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        counts.addTypeSpace(t, ssDeltaNoReplication);\n      }\n    }\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
      "extendedDetails": {}
    },
    "72f6bd4893dcf10d6dad24753f9be99505a87a1f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7811. Avoid recursive call getStoragePolicyID in INodeFile#computeQuotaUsage. Contributed by Xiaoyu Yao and Jing Zhao.\n",
      "commitDate": "02/04/15 9:20 PM",
      "commitName": "72f6bd4893dcf10d6dad24753f9be99505a87a1f",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7811. Avoid recursive call getStoragePolicyID in INodeFile#computeQuotaUsage. Contributed by Xiaoyu Yao and Jing Zhao.\n",
          "commitDate": "02/04/15 9:20 PM",
          "commitName": "72f6bd4893dcf10d6dad24753f9be99505a87a1f",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "26/03/15 10:24 AM",
          "commitNameOld": "3d0708bdb0a75af3d87bbac9f6c4ffbcabab98ca",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 7.46,
          "commitsBetweenForRepo": 70,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,43 @@\n   public final QuotaCounts computeQuotaUsage(\n-      BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n+      BlockStoragePolicySuite bsps, byte blockStoragePolicyId,\n+      QuotaCounts counts, boolean useCache,\n       int lastSnapshotId) {\n     long nsDelta \u003d 1;\n     final long ssDeltaNoReplication;\n     short replication;\n     FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n     if (sf !\u003d null) {\n       FileDiffList fileDiffList \u003d sf.getDiffs();\n       int last \u003d fileDiffList.getLastSnapshotId();\n \n       if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n           || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n         ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n         replication \u003d getBlockReplication();\n       } else if (last \u003c lastSnapshotId) {\n         ssDeltaNoReplication \u003d computeFileSize(true, false);\n         replication \u003d getFileReplication();\n       } else {\n         int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n         ssDeltaNoReplication \u003d storagespaceConsumedNoReplication(sid);\n         replication \u003d getReplication(sid);\n       }\n     } else {\n       ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n       replication \u003d getBlockReplication();\n     }\n     counts.addNameSpace(nsDelta);\n     counts.addStorageSpace(ssDeltaNoReplication * replication);\n \n-    if (getStoragePolicyID() !\u003d BlockStoragePolicySuite.ID_UNSPECIFIED){\n-      BlockStoragePolicy bsp \u003d bsps.getPolicy(getStoragePolicyID());\n+    if (blockStoragePolicyId !\u003d ID_UNSPECIFIED){\n+      BlockStoragePolicy bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n       List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n       for (StorageType t : storageTypes) {\n         if (!t.supportTypeQuota()) {\n           continue;\n         }\n         counts.addTypeSpace(t, ssDeltaNoReplication);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final QuotaCounts computeQuotaUsage(\n      BlockStoragePolicySuite bsps, byte blockStoragePolicyId,\n      QuotaCounts counts, boolean useCache,\n      int lastSnapshotId) {\n    long nsDelta \u003d 1;\n    final long ssDeltaNoReplication;\n    short replication;\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf !\u003d null) {\n      FileDiffList fileDiffList \u003d sf.getDiffs();\n      int last \u003d fileDiffList.getLastSnapshotId();\n\n      if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n          || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n        ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n        replication \u003d getBlockReplication();\n      } else if (last \u003c lastSnapshotId) {\n        ssDeltaNoReplication \u003d computeFileSize(true, false);\n        replication \u003d getFileReplication();\n      } else {\n        int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n        ssDeltaNoReplication \u003d storagespaceConsumedNoReplication(sid);\n        replication \u003d getReplication(sid);\n      }\n    } else {\n      ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n      replication \u003d getBlockReplication();\n    }\n    counts.addNameSpace(nsDelta);\n    counts.addStorageSpace(ssDeltaNoReplication * replication);\n\n    if (blockStoragePolicyId !\u003d ID_UNSPECIFIED){\n      BlockStoragePolicy bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n      for (StorageType t : storageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        counts.addTypeSpace(t, ssDeltaNoReplication);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
          "extendedDetails": {
            "oldValue": "[bsps-BlockStoragePolicySuite, counts-QuotaCounts, useCache-boolean, lastSnapshotId-int]",
            "newValue": "[bsps-BlockStoragePolicySuite, blockStoragePolicyId-byte, counts-QuotaCounts, useCache-boolean, lastSnapshotId-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7811. Avoid recursive call getStoragePolicyID in INodeFile#computeQuotaUsage. Contributed by Xiaoyu Yao and Jing Zhao.\n",
          "commitDate": "02/04/15 9:20 PM",
          "commitName": "72f6bd4893dcf10d6dad24753f9be99505a87a1f",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "26/03/15 10:24 AM",
          "commitNameOld": "3d0708bdb0a75af3d87bbac9f6c4ffbcabab98ca",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 7.46,
          "commitsBetweenForRepo": 70,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,43 @@\n   public final QuotaCounts computeQuotaUsage(\n-      BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n+      BlockStoragePolicySuite bsps, byte blockStoragePolicyId,\n+      QuotaCounts counts, boolean useCache,\n       int lastSnapshotId) {\n     long nsDelta \u003d 1;\n     final long ssDeltaNoReplication;\n     short replication;\n     FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n     if (sf !\u003d null) {\n       FileDiffList fileDiffList \u003d sf.getDiffs();\n       int last \u003d fileDiffList.getLastSnapshotId();\n \n       if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n           || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n         ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n         replication \u003d getBlockReplication();\n       } else if (last \u003c lastSnapshotId) {\n         ssDeltaNoReplication \u003d computeFileSize(true, false);\n         replication \u003d getFileReplication();\n       } else {\n         int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n         ssDeltaNoReplication \u003d storagespaceConsumedNoReplication(sid);\n         replication \u003d getReplication(sid);\n       }\n     } else {\n       ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n       replication \u003d getBlockReplication();\n     }\n     counts.addNameSpace(nsDelta);\n     counts.addStorageSpace(ssDeltaNoReplication * replication);\n \n-    if (getStoragePolicyID() !\u003d BlockStoragePolicySuite.ID_UNSPECIFIED){\n-      BlockStoragePolicy bsp \u003d bsps.getPolicy(getStoragePolicyID());\n+    if (blockStoragePolicyId !\u003d ID_UNSPECIFIED){\n+      BlockStoragePolicy bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n       List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n       for (StorageType t : storageTypes) {\n         if (!t.supportTypeQuota()) {\n           continue;\n         }\n         counts.addTypeSpace(t, ssDeltaNoReplication);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final QuotaCounts computeQuotaUsage(\n      BlockStoragePolicySuite bsps, byte blockStoragePolicyId,\n      QuotaCounts counts, boolean useCache,\n      int lastSnapshotId) {\n    long nsDelta \u003d 1;\n    final long ssDeltaNoReplication;\n    short replication;\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf !\u003d null) {\n      FileDiffList fileDiffList \u003d sf.getDiffs();\n      int last \u003d fileDiffList.getLastSnapshotId();\n\n      if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n          || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n        ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n        replication \u003d getBlockReplication();\n      } else if (last \u003c lastSnapshotId) {\n        ssDeltaNoReplication \u003d computeFileSize(true, false);\n        replication \u003d getFileReplication();\n      } else {\n        int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n        ssDeltaNoReplication \u003d storagespaceConsumedNoReplication(sid);\n        replication \u003d getReplication(sid);\n      }\n    } else {\n      ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n      replication \u003d getBlockReplication();\n    }\n    counts.addNameSpace(nsDelta);\n    counts.addStorageSpace(ssDeltaNoReplication * replication);\n\n    if (blockStoragePolicyId !\u003d ID_UNSPECIFIED){\n      BlockStoragePolicy bsp \u003d bsps.getPolicy(blockStoragePolicyId);\n      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n      for (StorageType t : storageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        counts.addTypeSpace(t, ssDeltaNoReplication);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
          "extendedDetails": {}
        }
      ]
    },
    "f2231cebcddc80f0b753c4a7cb45ee4040846951": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7775. Use consistent naming for NN-internal quota related types and functions. (Contributed bu Xiaoyu Yao)\n",
      "commitDate": "13/02/15 9:01 PM",
      "commitName": "f2231cebcddc80f0b753c4a7cb45ee4040846951",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "11/02/15 10:41 AM",
      "commitNameOld": "5dae97a584d30cef3e34141edfaca49c4ec57913",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 2.43,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public final QuotaCounts computeQuotaUsage(\n       BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n       int lastSnapshotId) {\n     long nsDelta \u003d 1;\n-    final long dsDeltaNoReplication;\n-    short dsReplication;\n+    final long ssDeltaNoReplication;\n+    short replication;\n     FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n     if (sf !\u003d null) {\n       FileDiffList fileDiffList \u003d sf.getDiffs();\n       int last \u003d fileDiffList.getLastSnapshotId();\n \n       if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n           || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n-        dsDeltaNoReplication \u003d diskspaceConsumedNoReplication();\n-        dsReplication \u003d getBlockReplication();\n+        ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n+        replication \u003d getBlockReplication();\n       } else if (last \u003c lastSnapshotId) {\n-        dsDeltaNoReplication \u003d computeFileSize(true, false);\n-        dsReplication \u003d getFileReplication();\n+        ssDeltaNoReplication \u003d computeFileSize(true, false);\n+        replication \u003d getFileReplication();\n       } else {\n         int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n-        dsDeltaNoReplication \u003d diskspaceConsumedNoReplication(sid);\n-        dsReplication \u003d getReplication(sid);\n+        ssDeltaNoReplication \u003d storagespaceConsumedNoReplication(sid);\n+        replication \u003d getReplication(sid);\n       }\n     } else {\n-      dsDeltaNoReplication \u003d diskspaceConsumedNoReplication();\n-      dsReplication \u003d getBlockReplication();\n+      ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n+      replication \u003d getBlockReplication();\n     }\n     counts.addNameSpace(nsDelta);\n-    counts.addDiskSpace(dsDeltaNoReplication * dsReplication);\n+    counts.addStorageSpace(ssDeltaNoReplication * replication);\n \n     if (getStoragePolicyID() !\u003d BlockStoragePolicySuite.ID_UNSPECIFIED){\n       BlockStoragePolicy bsp \u003d bsps.getPolicy(getStoragePolicyID());\n-      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(dsReplication);\n+      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n       for (StorageType t : storageTypes) {\n         if (!t.supportTypeQuota()) {\n           continue;\n         }\n-        counts.addTypeSpace(t, dsDeltaNoReplication);\n+        counts.addTypeSpace(t, ssDeltaNoReplication);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final QuotaCounts computeQuotaUsage(\n      BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n      int lastSnapshotId) {\n    long nsDelta \u003d 1;\n    final long ssDeltaNoReplication;\n    short replication;\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf !\u003d null) {\n      FileDiffList fileDiffList \u003d sf.getDiffs();\n      int last \u003d fileDiffList.getLastSnapshotId();\n\n      if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n          || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n        ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n        replication \u003d getBlockReplication();\n      } else if (last \u003c lastSnapshotId) {\n        ssDeltaNoReplication \u003d computeFileSize(true, false);\n        replication \u003d getFileReplication();\n      } else {\n        int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n        ssDeltaNoReplication \u003d storagespaceConsumedNoReplication(sid);\n        replication \u003d getReplication(sid);\n      }\n    } else {\n      ssDeltaNoReplication \u003d storagespaceConsumedNoReplication();\n      replication \u003d getBlockReplication();\n    }\n    counts.addNameSpace(nsDelta);\n    counts.addStorageSpace(ssDeltaNoReplication * replication);\n\n    if (getStoragePolicyID() !\u003d BlockStoragePolicySuite.ID_UNSPECIFIED){\n      BlockStoragePolicy bsp \u003d bsps.getPolicy(getStoragePolicyID());\n      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(replication);\n      for (StorageType t : storageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        counts.addTypeSpace(t, ssDeltaNoReplication);\n      }\n    }\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
      "extendedDetails": {}
    },
    "5dae97a584d30cef3e34141edfaca49c4ec57913": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "11/02/15 10:41 AM",
      "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/02/15 11:51 AM",
          "commitNameOld": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 2.95,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,42 @@\n-  public final Quota.Counts computeQuotaUsage(Quota.Counts counts,\n-      boolean useCache, int lastSnapshotId) {\n+  public final QuotaCounts computeQuotaUsage(\n+      BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n+      int lastSnapshotId) {\n     long nsDelta \u003d 1;\n-    final long dsDelta;\n+    final long dsDeltaNoReplication;\n+    short dsReplication;\n     FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n     if (sf !\u003d null) {\n       FileDiffList fileDiffList \u003d sf.getDiffs();\n       int last \u003d fileDiffList.getLastSnapshotId();\n \n       if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n           || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n-        dsDelta \u003d diskspaceConsumed();\n+        dsDeltaNoReplication \u003d diskspaceConsumedNoReplication();\n+        dsReplication \u003d getBlockReplication();\n       } else if (last \u003c lastSnapshotId) {\n-        dsDelta \u003d computeFileSize(true, false) * getFileReplication();\n-      } else {      \n+        dsDeltaNoReplication \u003d computeFileSize(true, false);\n+        dsReplication \u003d getFileReplication();\n+      } else {\n         int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n-        dsDelta \u003d diskspaceConsumed(sid);\n+        dsDeltaNoReplication \u003d diskspaceConsumedNoReplication(sid);\n+        dsReplication \u003d getReplication(sid);\n       }\n     } else {\n-      dsDelta \u003d diskspaceConsumed();\n+      dsDeltaNoReplication \u003d diskspaceConsumedNoReplication();\n+      dsReplication \u003d getBlockReplication();\n     }\n-    counts.add(Quota.NAMESPACE, nsDelta);\n-    counts.add(Quota.DISKSPACE, dsDelta);\n+    counts.addNameSpace(nsDelta);\n+    counts.addDiskSpace(dsDeltaNoReplication * dsReplication);\n+\n+    if (getStoragePolicyID() !\u003d BlockStoragePolicySuite.ID_UNSPECIFIED){\n+      BlockStoragePolicy bsp \u003d bsps.getPolicy(getStoragePolicyID());\n+      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(dsReplication);\n+      for (StorageType t : storageTypes) {\n+        if (!t.supportTypeQuota()) {\n+          continue;\n+        }\n+        counts.addTypeSpace(t, dsDeltaNoReplication);\n+      }\n+    }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final QuotaCounts computeQuotaUsage(\n      BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n      int lastSnapshotId) {\n    long nsDelta \u003d 1;\n    final long dsDeltaNoReplication;\n    short dsReplication;\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf !\u003d null) {\n      FileDiffList fileDiffList \u003d sf.getDiffs();\n      int last \u003d fileDiffList.getLastSnapshotId();\n\n      if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n          || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n        dsDeltaNoReplication \u003d diskspaceConsumedNoReplication();\n        dsReplication \u003d getBlockReplication();\n      } else if (last \u003c lastSnapshotId) {\n        dsDeltaNoReplication \u003d computeFileSize(true, false);\n        dsReplication \u003d getFileReplication();\n      } else {\n        int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n        dsDeltaNoReplication \u003d diskspaceConsumedNoReplication(sid);\n        dsReplication \u003d getReplication(sid);\n      }\n    } else {\n      dsDeltaNoReplication \u003d diskspaceConsumedNoReplication();\n      dsReplication \u003d getBlockReplication();\n    }\n    counts.addNameSpace(nsDelta);\n    counts.addDiskSpace(dsDeltaNoReplication * dsReplication);\n\n    if (getStoragePolicyID() !\u003d BlockStoragePolicySuite.ID_UNSPECIFIED){\n      BlockStoragePolicy bsp \u003d bsps.getPolicy(getStoragePolicyID());\n      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(dsReplication);\n      for (StorageType t : storageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        counts.addTypeSpace(t, dsDeltaNoReplication);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
          "extendedDetails": {
            "oldValue": "[counts-Quota.Counts, useCache-boolean, lastSnapshotId-int]",
            "newValue": "[bsps-BlockStoragePolicySuite, counts-QuotaCounts, useCache-boolean, lastSnapshotId-int]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/02/15 11:51 AM",
          "commitNameOld": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 2.95,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,42 @@\n-  public final Quota.Counts computeQuotaUsage(Quota.Counts counts,\n-      boolean useCache, int lastSnapshotId) {\n+  public final QuotaCounts computeQuotaUsage(\n+      BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n+      int lastSnapshotId) {\n     long nsDelta \u003d 1;\n-    final long dsDelta;\n+    final long dsDeltaNoReplication;\n+    short dsReplication;\n     FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n     if (sf !\u003d null) {\n       FileDiffList fileDiffList \u003d sf.getDiffs();\n       int last \u003d fileDiffList.getLastSnapshotId();\n \n       if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n           || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n-        dsDelta \u003d diskspaceConsumed();\n+        dsDeltaNoReplication \u003d diskspaceConsumedNoReplication();\n+        dsReplication \u003d getBlockReplication();\n       } else if (last \u003c lastSnapshotId) {\n-        dsDelta \u003d computeFileSize(true, false) * getFileReplication();\n-      } else {      \n+        dsDeltaNoReplication \u003d computeFileSize(true, false);\n+        dsReplication \u003d getFileReplication();\n+      } else {\n         int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n-        dsDelta \u003d diskspaceConsumed(sid);\n+        dsDeltaNoReplication \u003d diskspaceConsumedNoReplication(sid);\n+        dsReplication \u003d getReplication(sid);\n       }\n     } else {\n-      dsDelta \u003d diskspaceConsumed();\n+      dsDeltaNoReplication \u003d diskspaceConsumedNoReplication();\n+      dsReplication \u003d getBlockReplication();\n     }\n-    counts.add(Quota.NAMESPACE, nsDelta);\n-    counts.add(Quota.DISKSPACE, dsDelta);\n+    counts.addNameSpace(nsDelta);\n+    counts.addDiskSpace(dsDeltaNoReplication * dsReplication);\n+\n+    if (getStoragePolicyID() !\u003d BlockStoragePolicySuite.ID_UNSPECIFIED){\n+      BlockStoragePolicy bsp \u003d bsps.getPolicy(getStoragePolicyID());\n+      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(dsReplication);\n+      for (StorageType t : storageTypes) {\n+        if (!t.supportTypeQuota()) {\n+          continue;\n+        }\n+        counts.addTypeSpace(t, dsDeltaNoReplication);\n+      }\n+    }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final QuotaCounts computeQuotaUsage(\n      BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n      int lastSnapshotId) {\n    long nsDelta \u003d 1;\n    final long dsDeltaNoReplication;\n    short dsReplication;\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf !\u003d null) {\n      FileDiffList fileDiffList \u003d sf.getDiffs();\n      int last \u003d fileDiffList.getLastSnapshotId();\n\n      if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n          || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n        dsDeltaNoReplication \u003d diskspaceConsumedNoReplication();\n        dsReplication \u003d getBlockReplication();\n      } else if (last \u003c lastSnapshotId) {\n        dsDeltaNoReplication \u003d computeFileSize(true, false);\n        dsReplication \u003d getFileReplication();\n      } else {\n        int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n        dsDeltaNoReplication \u003d diskspaceConsumedNoReplication(sid);\n        dsReplication \u003d getReplication(sid);\n      }\n    } else {\n      dsDeltaNoReplication \u003d diskspaceConsumedNoReplication();\n      dsReplication \u003d getBlockReplication();\n    }\n    counts.addNameSpace(nsDelta);\n    counts.addDiskSpace(dsDeltaNoReplication * dsReplication);\n\n    if (getStoragePolicyID() !\u003d BlockStoragePolicySuite.ID_UNSPECIFIED){\n      BlockStoragePolicy bsp \u003d bsps.getPolicy(getStoragePolicyID());\n      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(dsReplication);\n      for (StorageType t : storageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        counts.addTypeSpace(t, dsDeltaNoReplication);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
          "extendedDetails": {
            "oldValue": "Quota.Counts",
            "newValue": "QuotaCounts"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/02/15 11:51 AM",
          "commitNameOld": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 2.95,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,42 @@\n-  public final Quota.Counts computeQuotaUsage(Quota.Counts counts,\n-      boolean useCache, int lastSnapshotId) {\n+  public final QuotaCounts computeQuotaUsage(\n+      BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n+      int lastSnapshotId) {\n     long nsDelta \u003d 1;\n-    final long dsDelta;\n+    final long dsDeltaNoReplication;\n+    short dsReplication;\n     FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n     if (sf !\u003d null) {\n       FileDiffList fileDiffList \u003d sf.getDiffs();\n       int last \u003d fileDiffList.getLastSnapshotId();\n \n       if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n           || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n-        dsDelta \u003d diskspaceConsumed();\n+        dsDeltaNoReplication \u003d diskspaceConsumedNoReplication();\n+        dsReplication \u003d getBlockReplication();\n       } else if (last \u003c lastSnapshotId) {\n-        dsDelta \u003d computeFileSize(true, false) * getFileReplication();\n-      } else {      \n+        dsDeltaNoReplication \u003d computeFileSize(true, false);\n+        dsReplication \u003d getFileReplication();\n+      } else {\n         int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n-        dsDelta \u003d diskspaceConsumed(sid);\n+        dsDeltaNoReplication \u003d diskspaceConsumedNoReplication(sid);\n+        dsReplication \u003d getReplication(sid);\n       }\n     } else {\n-      dsDelta \u003d diskspaceConsumed();\n+      dsDeltaNoReplication \u003d diskspaceConsumedNoReplication();\n+      dsReplication \u003d getBlockReplication();\n     }\n-    counts.add(Quota.NAMESPACE, nsDelta);\n-    counts.add(Quota.DISKSPACE, dsDelta);\n+    counts.addNameSpace(nsDelta);\n+    counts.addDiskSpace(dsDeltaNoReplication * dsReplication);\n+\n+    if (getStoragePolicyID() !\u003d BlockStoragePolicySuite.ID_UNSPECIFIED){\n+      BlockStoragePolicy bsp \u003d bsps.getPolicy(getStoragePolicyID());\n+      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(dsReplication);\n+      for (StorageType t : storageTypes) {\n+        if (!t.supportTypeQuota()) {\n+          continue;\n+        }\n+        counts.addTypeSpace(t, dsDeltaNoReplication);\n+      }\n+    }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final QuotaCounts computeQuotaUsage(\n      BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n      int lastSnapshotId) {\n    long nsDelta \u003d 1;\n    final long dsDeltaNoReplication;\n    short dsReplication;\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf !\u003d null) {\n      FileDiffList fileDiffList \u003d sf.getDiffs();\n      int last \u003d fileDiffList.getLastSnapshotId();\n\n      if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n          || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n        dsDeltaNoReplication \u003d diskspaceConsumedNoReplication();\n        dsReplication \u003d getBlockReplication();\n      } else if (last \u003c lastSnapshotId) {\n        dsDeltaNoReplication \u003d computeFileSize(true, false);\n        dsReplication \u003d getFileReplication();\n      } else {\n        int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n        dsDeltaNoReplication \u003d diskspaceConsumedNoReplication(sid);\n        dsReplication \u003d getReplication(sid);\n      }\n    } else {\n      dsDeltaNoReplication \u003d diskspaceConsumedNoReplication();\n      dsReplication \u003d getBlockReplication();\n    }\n    counts.addNameSpace(nsDelta);\n    counts.addDiskSpace(dsDeltaNoReplication * dsReplication);\n\n    if (getStoragePolicyID() !\u003d BlockStoragePolicySuite.ID_UNSPECIFIED){\n      BlockStoragePolicy bsp \u003d bsps.getPolicy(getStoragePolicyID());\n      List\u003cStorageType\u003e storageTypes \u003d bsp.chooseStorageTypes(dsReplication);\n      for (StorageType t : storageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        counts.addTypeSpace(t, dsDeltaNoReplication);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
          "extendedDetails": {}
        }
      ]
    },
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.\n",
      "commitDate": "02/02/15 4:32 PM",
      "commitName": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "27/01/15 12:58 PM",
      "commitNameOld": "2848db814a98b83e7546f65a2751e56fb5b2dbe0",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 6.15,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,25 @@\n   public final Quota.Counts computeQuotaUsage(Quota.Counts counts,\n       boolean useCache, int lastSnapshotId) {\n     long nsDelta \u003d 1;\n     final long dsDelta;\n     FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n     if (sf !\u003d null) {\n       FileDiffList fileDiffList \u003d sf.getDiffs();\n       int last \u003d fileDiffList.getLastSnapshotId();\n-      List\u003cFileDiff\u003e diffs \u003d fileDiffList.asList();\n \n       if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n           || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n-        nsDelta +\u003d diffs.size();\n         dsDelta \u003d diskspaceConsumed();\n       } else if (last \u003c lastSnapshotId) {\n         dsDelta \u003d computeFileSize(true, false) * getFileReplication();\n       } else {      \n         int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n         dsDelta \u003d diskspaceConsumed(sid);\n       }\n     } else {\n       dsDelta \u003d diskspaceConsumed();\n     }\n     counts.add(Quota.NAMESPACE, nsDelta);\n     counts.add(Quota.DISKSPACE, dsDelta);\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final Quota.Counts computeQuotaUsage(Quota.Counts counts,\n      boolean useCache, int lastSnapshotId) {\n    long nsDelta \u003d 1;\n    final long dsDelta;\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf !\u003d null) {\n      FileDiffList fileDiffList \u003d sf.getDiffs();\n      int last \u003d fileDiffList.getLastSnapshotId();\n\n      if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n          || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n        dsDelta \u003d diskspaceConsumed();\n      } else if (last \u003c lastSnapshotId) {\n        dsDelta \u003d computeFileSize(true, false) * getFileReplication();\n      } else {      \n        int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n        dsDelta \u003d diskspaceConsumed(sid);\n      }\n    } else {\n      dsDelta \u003d diskspaceConsumed();\n    }\n    counts.add(Quota.NAMESPACE, nsDelta);\n    counts.add(Quota.DISKSPACE, dsDelta);\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
      "extendedDetails": {}
    },
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 12:52 PM",
      "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "14/12/13 2:13 AM",
      "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 24.44,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   public final Quota.Counts computeQuotaUsage(Quota.Counts counts,\n       boolean useCache, int lastSnapshotId) {\n     long nsDelta \u003d 1;\n     final long dsDelta;\n     FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n     if (sf !\u003d null) {\n       FileDiffList fileDiffList \u003d sf.getDiffs();\n-      Snapshot last \u003d fileDiffList.getLastSnapshot();\n+      int last \u003d fileDiffList.getLastSnapshotId();\n       List\u003cFileDiff\u003e diffs \u003d fileDiffList.asList();\n \n-      if (lastSnapshotId \u003d\u003d Snapshot.INVALID_ID || last \u003d\u003d null) {\n+      if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n+          || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n         nsDelta +\u003d diffs.size();\n         dsDelta \u003d diskspaceConsumed();\n-      } else if (last.getId() \u003c lastSnapshotId) {\n+      } else if (last \u003c lastSnapshotId) {\n         dsDelta \u003d computeFileSize(true, false) * getFileReplication();\n       } else {      \n-        Snapshot s \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n-        dsDelta \u003d diskspaceConsumed(s);\n+        int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n+        dsDelta \u003d diskspaceConsumed(sid);\n       }\n     } else {\n       dsDelta \u003d diskspaceConsumed();\n     }\n     counts.add(Quota.NAMESPACE, nsDelta);\n     counts.add(Quota.DISKSPACE, dsDelta);\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final Quota.Counts computeQuotaUsage(Quota.Counts counts,\n      boolean useCache, int lastSnapshotId) {\n    long nsDelta \u003d 1;\n    final long dsDelta;\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf !\u003d null) {\n      FileDiffList fileDiffList \u003d sf.getDiffs();\n      int last \u003d fileDiffList.getLastSnapshotId();\n      List\u003cFileDiff\u003e diffs \u003d fileDiffList.asList();\n\n      if (lastSnapshotId \u003d\u003d Snapshot.CURRENT_STATE_ID\n          || last \u003d\u003d Snapshot.CURRENT_STATE_ID) {\n        nsDelta +\u003d diffs.size();\n        dsDelta \u003d diskspaceConsumed();\n      } else if (last \u003c lastSnapshotId) {\n        dsDelta \u003d computeFileSize(true, false) * getFileReplication();\n      } else {      \n        int sid \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n        dsDelta \u003d diskspaceConsumed(sid);\n      }\n    } else {\n      dsDelta \u003d diskspaceConsumed();\n    }\n    counts.add(Quota.NAMESPACE, nsDelta);\n    counts.add(Quota.DISKSPACE, dsDelta);\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
      "extendedDetails": {}
    },
    "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5554. Flatten INodeFile hierarchy: Replace INodeFileWithSnapshot with FileWithSnapshotFeature.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548796 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/12/13 10:17 PM",
      "commitName": "4c87a27ad851ffaa3cc3e2074a9ef7073b5a164a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "27/11/13 12:32 PM",
      "commitNameOld": "8df119da214babde03e73243c7ca4cfe6d0ca562",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 9.41,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   public final Quota.Counts computeQuotaUsage(Quota.Counts counts,\n       boolean useCache, int lastSnapshotId) {\n     long nsDelta \u003d 1;\n     final long dsDelta;\n-    if (this instanceof INodeFileWithSnapshot) {\n-      FileDiffList fileDiffList \u003d ((INodeFileWithSnapshot) this).getDiffs();\n+    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n+    if (sf !\u003d null) {\n+      FileDiffList fileDiffList \u003d sf.getDiffs();\n       Snapshot last \u003d fileDiffList.getLastSnapshot();\n       List\u003cFileDiff\u003e diffs \u003d fileDiffList.asList();\n \n       if (lastSnapshotId \u003d\u003d Snapshot.INVALID_ID || last \u003d\u003d null) {\n         nsDelta +\u003d diffs.size();\n         dsDelta \u003d diskspaceConsumed();\n       } else if (last.getId() \u003c lastSnapshotId) {\n         dsDelta \u003d computeFileSize(true, false) * getFileReplication();\n       } else {      \n         Snapshot s \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n         dsDelta \u003d diskspaceConsumed(s);\n       }\n     } else {\n       dsDelta \u003d diskspaceConsumed();\n     }\n     counts.add(Quota.NAMESPACE, nsDelta);\n     counts.add(Quota.DISKSPACE, dsDelta);\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final Quota.Counts computeQuotaUsage(Quota.Counts counts,\n      boolean useCache, int lastSnapshotId) {\n    long nsDelta \u003d 1;\n    final long dsDelta;\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf !\u003d null) {\n      FileDiffList fileDiffList \u003d sf.getDiffs();\n      Snapshot last \u003d fileDiffList.getLastSnapshot();\n      List\u003cFileDiff\u003e diffs \u003d fileDiffList.asList();\n\n      if (lastSnapshotId \u003d\u003d Snapshot.INVALID_ID || last \u003d\u003d null) {\n        nsDelta +\u003d diffs.size();\n        dsDelta \u003d diskspaceConsumed();\n      } else if (last.getId() \u003c lastSnapshotId) {\n        dsDelta \u003d computeFileSize(true, false) * getFileReplication();\n      } else {      \n        Snapshot s \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n        dsDelta \u003d diskspaceConsumed(s);\n      }\n    } else {\n      dsDelta \u003d diskspaceConsumed();\n    }\n    counts.add(Quota.NAMESPACE, nsDelta);\n    counts.add(Quota.DISKSPACE, dsDelta);\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
      "extendedDetails": {}
    },
    "8df119da214babde03e73243c7ca4cfe6d0ca562": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5537. Remove FileWithSnapshot interface.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/11/13 12:32 PM",
      "commitName": "8df119da214babde03e73243c7ca4cfe6d0ca562",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "26/11/13 10:33 AM",
      "commitNameOld": "82ff2d3f2e569879500d851f4d67dfa2d02b5c9b",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.08,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public final Quota.Counts computeQuotaUsage(Quota.Counts counts,\n       boolean useCache, int lastSnapshotId) {\n     long nsDelta \u003d 1;\n     final long dsDelta;\n-    if (this instanceof FileWithSnapshot) {\n-      FileDiffList fileDiffList \u003d ((FileWithSnapshot) this).getDiffs();\n+    if (this instanceof INodeFileWithSnapshot) {\n+      FileDiffList fileDiffList \u003d ((INodeFileWithSnapshot) this).getDiffs();\n       Snapshot last \u003d fileDiffList.getLastSnapshot();\n       List\u003cFileDiff\u003e diffs \u003d fileDiffList.asList();\n \n       if (lastSnapshotId \u003d\u003d Snapshot.INVALID_ID || last \u003d\u003d null) {\n         nsDelta +\u003d diffs.size();\n         dsDelta \u003d diskspaceConsumed();\n       } else if (last.getId() \u003c lastSnapshotId) {\n         dsDelta \u003d computeFileSize(true, false) * getFileReplication();\n       } else {      \n         Snapshot s \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n         dsDelta \u003d diskspaceConsumed(s);\n       }\n     } else {\n       dsDelta \u003d diskspaceConsumed();\n     }\n     counts.add(Quota.NAMESPACE, nsDelta);\n     counts.add(Quota.DISKSPACE, dsDelta);\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final Quota.Counts computeQuotaUsage(Quota.Counts counts,\n      boolean useCache, int lastSnapshotId) {\n    long nsDelta \u003d 1;\n    final long dsDelta;\n    if (this instanceof INodeFileWithSnapshot) {\n      FileDiffList fileDiffList \u003d ((INodeFileWithSnapshot) this).getDiffs();\n      Snapshot last \u003d fileDiffList.getLastSnapshot();\n      List\u003cFileDiff\u003e diffs \u003d fileDiffList.asList();\n\n      if (lastSnapshotId \u003d\u003d Snapshot.INVALID_ID || last \u003d\u003d null) {\n        nsDelta +\u003d diffs.size();\n        dsDelta \u003d diskspaceConsumed();\n      } else if (last.getId() \u003c lastSnapshotId) {\n        dsDelta \u003d computeFileSize(true, false) * getFileReplication();\n      } else {      \n        Snapshot s \u003d fileDiffList.getSnapshotById(lastSnapshotId);\n        dsDelta \u003d diskspaceConsumed(s);\n      }\n    } else {\n      dsDelta \u003d diskspaceConsumed();\n    }\n    counts.add(Quota.NAMESPACE, nsDelta);\n    counts.add(Quota.DISKSPACE, dsDelta);\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
      "extendedDetails": {}
    }
  }
}