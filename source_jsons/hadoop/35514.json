{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CgroupsLCEResourcesHandler.java",
  "functionName": "checkAndDeleteCgroup",
  "functionId": "checkAndDeleteCgroup___cgf-File",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
  "functionStartLine": 270,
  "functionEndLine": 292,
  "numCommitsSeen": 22,
  "timeTaken": 1174,
  "changeHistory": [
    "3f5431a22fcef7e3eb9aceeefe324e5b7ac84049"
  ],
  "changeHistoryShort": {
    "3f5431a22fcef7e3eb9aceeefe324e5b7ac84049": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3f5431a22fcef7e3eb9aceeefe324e5b7ac84049": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2809. Implement workaround for linux kernel panic when removing cgroup. Contributed by Nathan Roberts\n",
      "commitDate": "10/02/15 9:27 AM",
      "commitName": "3f5431a22fcef7e3eb9aceeefe324e5b7ac84049",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,23 @@\n+  boolean checkAndDeleteCgroup(File cgf) throws InterruptedException {\n+    boolean deleted \u003d false;\n+    // FileInputStream in \u003d null;\n+    try (FileInputStream in \u003d new FileInputStream(cgf + \"/tasks\")) {\n+      if (in.read() \u003d\u003d -1) {\n+        /*\n+         * \"tasks\" file is empty, sleep a bit more and then try to delete the\n+         * cgroup. Some versions of linux will occasionally panic due to a race\n+         * condition in this area, hence the paranoia.\n+         */\n+        Thread.sleep(deleteCgroupDelay);\n+        deleted \u003d cgf.delete();\n+        if (!deleted) {\n+          LOG.warn(\"Failed attempt to delete cgroup: \" + cgf);\n+        }\n+      } else {\n+        logLineFromTasksFile(cgf);\n+      }\n+    } catch (IOException e) {\n+      LOG.warn(\"Failed to read cgroup tasks file. \", e);\n+    }\n+    return deleted;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  boolean checkAndDeleteCgroup(File cgf) throws InterruptedException {\n    boolean deleted \u003d false;\n    // FileInputStream in \u003d null;\n    try (FileInputStream in \u003d new FileInputStream(cgf + \"/tasks\")) {\n      if (in.read() \u003d\u003d -1) {\n        /*\n         * \"tasks\" file is empty, sleep a bit more and then try to delete the\n         * cgroup. Some versions of linux will occasionally panic due to a race\n         * condition in this area, hence the paranoia.\n         */\n        Thread.sleep(deleteCgroupDelay);\n        deleted \u003d cgf.delete();\n        if (!deleted) {\n          LOG.warn(\"Failed attempt to delete cgroup: \" + cgf);\n        }\n      } else {\n        logLineFromTasksFile(cgf);\n      }\n    } catch (IOException e) {\n      LOG.warn(\"Failed to read cgroup tasks file. \", e);\n    }\n    return deleted;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java"
    }
  }
}