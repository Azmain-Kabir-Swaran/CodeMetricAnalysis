{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CgroupsLCEResourcesHandler.java",
  "functionName": "init",
  "functionId": "init___lce-LinuxContainerExecutor__plugin-ResourceCalculatorPlugin",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
  "functionStartLine": 151,
  "functionEndLine": 182,
  "numCommitsSeen": 28,
  "timeTaken": 3993,
  "changeHistory": [
    "e0c21c6da91776caf661661a19c368939c81fcc4",
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4",
    "500a1d9c76ec612b4e737888f4be79951c11591d",
    "9f6891d9ef7064d121305ca783eb62586c8aa018",
    "4be95175cdb58ff12a27ab443d609d3b46da7bfa",
    "726c3538a7f0087fe99157019c2b90198de06ec7",
    "5032a694ed250f65ade8c2b62c97b89ab45f53ea"
  ],
  "changeHistoryShort": {
    "e0c21c6da91776caf661661a19c368939c81fcc4": "Ybodychange",
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4": "Ybodychange",
    "500a1d9c76ec612b4e737888f4be79951c11591d": "Ybodychange",
    "9f6891d9ef7064d121305ca783eb62586c8aa018": "Ybodychange",
    "4be95175cdb58ff12a27ab443d609d3b46da7bfa": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "726c3538a7f0087fe99157019c2b90198de06ec7": "Ymultichange(Ymodifierchange,Ybodychange)",
    "5032a694ed250f65ade8c2b62c97b89ab45f53ea": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e0c21c6da91776caf661661a19c368939c81fcc4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9092. Create an object for cgroups mount enable and cgroups mount path as they belong together. Contributed by Gergely Pollak\n",
      "commitDate": "09/08/19 1:18 AM",
      "commitName": "e0c21c6da91776caf661661a19c368939c81fcc4",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "06/05/19 11:56 AM",
      "commitNameOld": "597fa47ad125c0871f5c4deb3a883e5b3341c67b",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 94.56,
      "commitsBetweenForRepo": 730,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   void init(LinuxContainerExecutor lce, ResourceCalculatorPlugin plugin)\n       throws IOException {\n     initConfig();\n \n     // mount cgroups if requested\n-    if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n+    if (cGroupsMountConfig.mountEnabledAndMountPathDefined()) {\n       ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n-      cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n-                    CONTROLLER_CPU);\n+      cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" +\n+          cGroupsMountConfig.getMountPath() + \"/\" + CONTROLLER_CPU);\n       lce.mountCgroups(cgroupKVs, cgroupPrefix);\n     }\n \n     initializeControllerPaths();\n \n     nodeVCores \u003d NodeManagerHardwareUtils.getVCores(plugin, conf);\n \n     // cap overall usage to the number of cores allocated to YARN\n     yarnProcessors \u003d NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\n     int systemProcessors \u003d NodeManagerHardwareUtils.getNodeCPUs(plugin, conf);\n     if (systemProcessors !\u003d (int) yarnProcessors) {\n       LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n       int[] limits \u003d getOverallLimits(yarnProcessors);\n       updateCgroup(CONTROLLER_CPU, \"\", CPU_PERIOD_US,\n           String.valueOf(limits[0]));\n       updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US,\n           String.valueOf(limits[1]));\n     } else if (CGroupsCpuResourceHandlerImpl.cpuLimitsExist(\n         pathForCgroup(CONTROLLER_CPU, \"\"))) {\n       LOG.info(\"Removing CPU constraints for YARN containers.\");\n       updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(-1));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void init(LinuxContainerExecutor lce, ResourceCalculatorPlugin plugin)\n      throws IOException {\n    initConfig();\n\n    // mount cgroups if requested\n    if (cGroupsMountConfig.mountEnabledAndMountPathDefined()) {\n      ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n      cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" +\n          cGroupsMountConfig.getMountPath() + \"/\" + CONTROLLER_CPU);\n      lce.mountCgroups(cgroupKVs, cgroupPrefix);\n    }\n\n    initializeControllerPaths();\n\n    nodeVCores \u003d NodeManagerHardwareUtils.getVCores(plugin, conf);\n\n    // cap overall usage to the number of cores allocated to YARN\n    yarnProcessors \u003d NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\n    int systemProcessors \u003d NodeManagerHardwareUtils.getNodeCPUs(plugin, conf);\n    if (systemProcessors !\u003d (int) yarnProcessors) {\n      LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n      int[] limits \u003d getOverallLimits(yarnProcessors);\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_PERIOD_US,\n          String.valueOf(limits[0]));\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US,\n          String.valueOf(limits[1]));\n    } else if (CGroupsCpuResourceHandlerImpl.cpuLimitsExist(\n        pathForCgroup(CONTROLLER_CPU, \"\"))) {\n      LOG.info(\"Removing CPU constraints for YARN containers.\");\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(-1));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
      "extendedDetails": {}
    },
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3542. Refactored existing CPU cgroups support to use the newer and integrated ResourceHandler mechanism, and also deprecated the old LCEResourceHandler inteface hierarchy. Contributed by Varun Vasudev.\n",
      "commitDate": "25/01/16 4:19 PM",
      "commitName": "2085e60a9655b59aa2ba8917acdc511ab71ff6e4",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "commitDateOld": "18/01/16 1:58 AM",
      "commitNameOld": "d40859fab1ad977636457a6cc96b6a4f9b903afc",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 7.6,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   void init(LinuxContainerExecutor lce, ResourceCalculatorPlugin plugin)\n       throws IOException {\n     initConfig();\n \n     // mount cgroups if requested\n     if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n       ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n       cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                     CONTROLLER_CPU);\n       lce.mountCgroups(cgroupKVs, cgroupPrefix);\n     }\n \n     initializeControllerPaths();\n \n     nodeVCores \u003d NodeManagerHardwareUtils.getVCores(plugin, conf);\n \n     // cap overall usage to the number of cores allocated to YARN\n     yarnProcessors \u003d NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\n     int systemProcessors \u003d NodeManagerHardwareUtils.getNodeCPUs(plugin, conf);\n     if (systemProcessors !\u003d (int) yarnProcessors) {\n       LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n       int[] limits \u003d getOverallLimits(yarnProcessors);\n       updateCgroup(CONTROLLER_CPU, \"\", CPU_PERIOD_US, String.valueOf(limits[0]));\n       updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(limits[1]));\n-    } else if (cpuLimitsExist()) {\n+    } else if (CGroupsCpuResourceHandlerImpl.cpuLimitsExist(\n+        pathForCgroup(CONTROLLER_CPU, \"\"))) {\n       LOG.info(\"Removing CPU constraints for YARN containers.\");\n       updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(-1));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void init(LinuxContainerExecutor lce, ResourceCalculatorPlugin plugin)\n      throws IOException {\n    initConfig();\n\n    // mount cgroups if requested\n    if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n      ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n      cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                    CONTROLLER_CPU);\n      lce.mountCgroups(cgroupKVs, cgroupPrefix);\n    }\n\n    initializeControllerPaths();\n\n    nodeVCores \u003d NodeManagerHardwareUtils.getVCores(plugin, conf);\n\n    // cap overall usage to the number of cores allocated to YARN\n    yarnProcessors \u003d NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\n    int systemProcessors \u003d NodeManagerHardwareUtils.getNodeCPUs(plugin, conf);\n    if (systemProcessors !\u003d (int) yarnProcessors) {\n      LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n      int[] limits \u003d getOverallLimits(yarnProcessors);\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_PERIOD_US, String.valueOf(limits[0]));\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(limits[1]));\n    } else if (CGroupsCpuResourceHandlerImpl.cpuLimitsExist(\n        pathForCgroup(CONTROLLER_CPU, \"\"))) {\n      LOG.info(\"Removing CPU constraints for YARN containers.\");\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(-1));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
      "extendedDetails": {}
    },
    "500a1d9c76ec612b4e737888f4be79951c11591d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-160. Enhanced NodeManager to automatically obtain cpu/memory values from underlying OS when configured to do so. Contributed by Varun Vasudev.\n",
      "commitDate": "26/05/15 11:38 AM",
      "commitName": "500a1d9c76ec612b4e737888f4be79951c11591d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/04/15 9:41 PM",
      "commitNameOld": "1b3b9e5c31c38388c1ce4208c65e8dd5f956da82",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 25.58,
      "commitsBetweenForRepo": 279,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   void init(LinuxContainerExecutor lce, ResourceCalculatorPlugin plugin)\n       throws IOException {\n     initConfig();\n \n     // mount cgroups if requested\n     if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n       ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n       cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                     CONTROLLER_CPU);\n       lce.mountCgroups(cgroupKVs, cgroupPrefix);\n     }\n \n     initializeControllerPaths();\n \n+    nodeVCores \u003d NodeManagerHardwareUtils.getVCores(plugin, conf);\n+\n     // cap overall usage to the number of cores allocated to YARN\n-    yarnProcessors \u003d NodeManagerHardwareUtils.getContainersCores(plugin, conf);\n-    int systemProcessors \u003d plugin.getNumProcessors();\n+    yarnProcessors \u003d NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\n+    int systemProcessors \u003d NodeManagerHardwareUtils.getNodeCPUs(plugin, conf);\n     if (systemProcessors !\u003d (int) yarnProcessors) {\n       LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n       int[] limits \u003d getOverallLimits(yarnProcessors);\n       updateCgroup(CONTROLLER_CPU, \"\", CPU_PERIOD_US, String.valueOf(limits[0]));\n       updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(limits[1]));\n     } else if (cpuLimitsExist()) {\n       LOG.info(\"Removing CPU constraints for YARN containers.\");\n       updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(-1));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void init(LinuxContainerExecutor lce, ResourceCalculatorPlugin plugin)\n      throws IOException {\n    initConfig();\n\n    // mount cgroups if requested\n    if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n      ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n      cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                    CONTROLLER_CPU);\n      lce.mountCgroups(cgroupKVs, cgroupPrefix);\n    }\n\n    initializeControllerPaths();\n\n    nodeVCores \u003d NodeManagerHardwareUtils.getVCores(plugin, conf);\n\n    // cap overall usage to the number of cores allocated to YARN\n    yarnProcessors \u003d NodeManagerHardwareUtils.getContainersCPUs(plugin, conf);\n    int systemProcessors \u003d NodeManagerHardwareUtils.getNodeCPUs(plugin, conf);\n    if (systemProcessors !\u003d (int) yarnProcessors) {\n      LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n      int[] limits \u003d getOverallLimits(yarnProcessors);\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_PERIOD_US, String.valueOf(limits[0]));\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(limits[1]));\n    } else if (cpuLimitsExist()) {\n      LOG.info(\"Removing CPU constraints for YARN containers.\");\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(-1));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
      "extendedDetails": {}
    },
    "9f6891d9ef7064d121305ca783eb62586c8aa018": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2531. Added a configuration for admins to be able to override app-configs and enforce/not-enforce strict control of per-container cpu usage. Contributed by Varun Vasudev.\n",
      "commitDate": "16/09/14 10:14 AM",
      "commitName": "9f6891d9ef7064d121305ca783eb62586c8aa018",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/09/14 7:22 PM",
      "commitNameOld": "4be95175cdb58ff12a27ab443d609d3b46da7bfa",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 5.62,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,27 @@\n   void init(LinuxContainerExecutor lce, ResourceCalculatorPlugin plugin)\n       throws IOException {\n     initConfig();\n \n     // mount cgroups if requested\n     if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n       ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n       cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                     CONTROLLER_CPU);\n       lce.mountCgroups(cgroupKVs, cgroupPrefix);\n     }\n \n     initializeControllerPaths();\n \n     // cap overall usage to the number of cores allocated to YARN\n-    float yarnProcessors \u003d\n-        NodeManagerHardwareUtils.getContainersCores(plugin, conf);\n+    yarnProcessors \u003d NodeManagerHardwareUtils.getContainersCores(plugin, conf);\n     int systemProcessors \u003d plugin.getNumProcessors();\n     if (systemProcessors !\u003d (int) yarnProcessors) {\n       LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n       int[] limits \u003d getOverallLimits(yarnProcessors);\n       updateCgroup(CONTROLLER_CPU, \"\", CPU_PERIOD_US, String.valueOf(limits[0]));\n       updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(limits[1]));\n     } else if (cpuLimitsExist()) {\n       LOG.info(\"Removing CPU constraints for YARN containers.\");\n       updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(-1));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void init(LinuxContainerExecutor lce, ResourceCalculatorPlugin plugin)\n      throws IOException {\n    initConfig();\n\n    // mount cgroups if requested\n    if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n      ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n      cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                    CONTROLLER_CPU);\n      lce.mountCgroups(cgroupKVs, cgroupPrefix);\n    }\n\n    initializeControllerPaths();\n\n    // cap overall usage to the number of cores allocated to YARN\n    yarnProcessors \u003d NodeManagerHardwareUtils.getContainersCores(plugin, conf);\n    int systemProcessors \u003d plugin.getNumProcessors();\n    if (systemProcessors !\u003d (int) yarnProcessors) {\n      LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n      int[] limits \u003d getOverallLimits(yarnProcessors);\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_PERIOD_US, String.valueOf(limits[0]));\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(limits[1]));\n    } else if (cpuLimitsExist()) {\n      LOG.info(\"Removing CPU constraints for YARN containers.\");\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(-1));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
      "extendedDetails": {}
    },
    "4be95175cdb58ff12a27ab443d609d3b46da7bfa": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-2440. Enabled Nodemanagers to limit the aggregate cpu usage across all containers to a preconfigured limit. Contributed by Varun Vasudev.\n",
      "commitDate": "10/09/14 7:22 PM",
      "commitName": "4be95175cdb58ff12a27ab443d609d3b46da7bfa",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2440. Enabled Nodemanagers to limit the aggregate cpu usage across all containers to a preconfigured limit. Contributed by Varun Vasudev.\n",
          "commitDate": "10/09/14 7:22 PM",
          "commitName": "4be95175cdb58ff12a27ab443d609d3b46da7bfa",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "08/10/13 10:05 PM",
          "commitNameOld": "726c3538a7f0087fe99157019c2b90198de06ec7",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 336.89,
          "commitsBetweenForRepo": 2359,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,28 @@\n-  public void init(LinuxContainerExecutor lce) throws IOException {\n+  void init(LinuxContainerExecutor lce, ResourceCalculatorPlugin plugin)\n+      throws IOException {\n     initConfig();\n-    \n+\n     // mount cgroups if requested\n     if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n       ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n       cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                     CONTROLLER_CPU);\n       lce.mountCgroups(cgroupKVs, cgroupPrefix);\n     }\n \n     initializeControllerPaths();\n+\n+    // cap overall usage to the number of cores allocated to YARN\n+    float yarnProcessors \u003d\n+        NodeManagerHardwareUtils.getContainersCores(plugin, conf);\n+    int systemProcessors \u003d plugin.getNumProcessors();\n+    if (systemProcessors !\u003d (int) yarnProcessors) {\n+      LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n+      int[] limits \u003d getOverallLimits(yarnProcessors);\n+      updateCgroup(CONTROLLER_CPU, \"\", CPU_PERIOD_US, String.valueOf(limits[0]));\n+      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(limits[1]));\n+    } else if (cpuLimitsExist()) {\n+      LOG.info(\"Removing CPU constraints for YARN containers.\");\n+      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(-1));\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void init(LinuxContainerExecutor lce, ResourceCalculatorPlugin plugin)\n      throws IOException {\n    initConfig();\n\n    // mount cgroups if requested\n    if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n      ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n      cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                    CONTROLLER_CPU);\n      lce.mountCgroups(cgroupKVs, cgroupPrefix);\n    }\n\n    initializeControllerPaths();\n\n    // cap overall usage to the number of cores allocated to YARN\n    float yarnProcessors \u003d\n        NodeManagerHardwareUtils.getContainersCores(plugin, conf);\n    int systemProcessors \u003d plugin.getNumProcessors();\n    if (systemProcessors !\u003d (int) yarnProcessors) {\n      LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n      int[] limits \u003d getOverallLimits(yarnProcessors);\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_PERIOD_US, String.valueOf(limits[0]));\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(limits[1]));\n    } else if (cpuLimitsExist()) {\n      LOG.info(\"Removing CPU constraints for YARN containers.\");\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(-1));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
          "extendedDetails": {
            "oldValue": "[lce-LinuxContainerExecutor]",
            "newValue": "[lce-LinuxContainerExecutor, plugin-ResourceCalculatorPlugin]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-2440. Enabled Nodemanagers to limit the aggregate cpu usage across all containers to a preconfigured limit. Contributed by Varun Vasudev.\n",
          "commitDate": "10/09/14 7:22 PM",
          "commitName": "4be95175cdb58ff12a27ab443d609d3b46da7bfa",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "08/10/13 10:05 PM",
          "commitNameOld": "726c3538a7f0087fe99157019c2b90198de06ec7",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 336.89,
          "commitsBetweenForRepo": 2359,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,28 @@\n-  public void init(LinuxContainerExecutor lce) throws IOException {\n+  void init(LinuxContainerExecutor lce, ResourceCalculatorPlugin plugin)\n+      throws IOException {\n     initConfig();\n-    \n+\n     // mount cgroups if requested\n     if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n       ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n       cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                     CONTROLLER_CPU);\n       lce.mountCgroups(cgroupKVs, cgroupPrefix);\n     }\n \n     initializeControllerPaths();\n+\n+    // cap overall usage to the number of cores allocated to YARN\n+    float yarnProcessors \u003d\n+        NodeManagerHardwareUtils.getContainersCores(plugin, conf);\n+    int systemProcessors \u003d plugin.getNumProcessors();\n+    if (systemProcessors !\u003d (int) yarnProcessors) {\n+      LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n+      int[] limits \u003d getOverallLimits(yarnProcessors);\n+      updateCgroup(CONTROLLER_CPU, \"\", CPU_PERIOD_US, String.valueOf(limits[0]));\n+      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(limits[1]));\n+    } else if (cpuLimitsExist()) {\n+      LOG.info(\"Removing CPU constraints for YARN containers.\");\n+      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(-1));\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void init(LinuxContainerExecutor lce, ResourceCalculatorPlugin plugin)\n      throws IOException {\n    initConfig();\n\n    // mount cgroups if requested\n    if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n      ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n      cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                    CONTROLLER_CPU);\n      lce.mountCgroups(cgroupKVs, cgroupPrefix);\n    }\n\n    initializeControllerPaths();\n\n    // cap overall usage to the number of cores allocated to YARN\n    float yarnProcessors \u003d\n        NodeManagerHardwareUtils.getContainersCores(plugin, conf);\n    int systemProcessors \u003d plugin.getNumProcessors();\n    if (systemProcessors !\u003d (int) yarnProcessors) {\n      LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n      int[] limits \u003d getOverallLimits(yarnProcessors);\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_PERIOD_US, String.valueOf(limits[0]));\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(limits[1]));\n    } else if (cpuLimitsExist()) {\n      LOG.info(\"Removing CPU constraints for YARN containers.\");\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(-1));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2440. Enabled Nodemanagers to limit the aggregate cpu usage across all containers to a preconfigured limit. Contributed by Varun Vasudev.\n",
          "commitDate": "10/09/14 7:22 PM",
          "commitName": "4be95175cdb58ff12a27ab443d609d3b46da7bfa",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "08/10/13 10:05 PM",
          "commitNameOld": "726c3538a7f0087fe99157019c2b90198de06ec7",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 336.89,
          "commitsBetweenForRepo": 2359,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,28 @@\n-  public void init(LinuxContainerExecutor lce) throws IOException {\n+  void init(LinuxContainerExecutor lce, ResourceCalculatorPlugin plugin)\n+      throws IOException {\n     initConfig();\n-    \n+\n     // mount cgroups if requested\n     if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n       ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n       cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                     CONTROLLER_CPU);\n       lce.mountCgroups(cgroupKVs, cgroupPrefix);\n     }\n \n     initializeControllerPaths();\n+\n+    // cap overall usage to the number of cores allocated to YARN\n+    float yarnProcessors \u003d\n+        NodeManagerHardwareUtils.getContainersCores(plugin, conf);\n+    int systemProcessors \u003d plugin.getNumProcessors();\n+    if (systemProcessors !\u003d (int) yarnProcessors) {\n+      LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n+      int[] limits \u003d getOverallLimits(yarnProcessors);\n+      updateCgroup(CONTROLLER_CPU, \"\", CPU_PERIOD_US, String.valueOf(limits[0]));\n+      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(limits[1]));\n+    } else if (cpuLimitsExist()) {\n+      LOG.info(\"Removing CPU constraints for YARN containers.\");\n+      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(-1));\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void init(LinuxContainerExecutor lce, ResourceCalculatorPlugin plugin)\n      throws IOException {\n    initConfig();\n\n    // mount cgroups if requested\n    if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n      ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n      cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                    CONTROLLER_CPU);\n      lce.mountCgroups(cgroupKVs, cgroupPrefix);\n    }\n\n    initializeControllerPaths();\n\n    // cap overall usage to the number of cores allocated to YARN\n    float yarnProcessors \u003d\n        NodeManagerHardwareUtils.getContainersCores(plugin, conf);\n    int systemProcessors \u003d plugin.getNumProcessors();\n    if (systemProcessors !\u003d (int) yarnProcessors) {\n      LOG.info(\"YARN containers restricted to \" + yarnProcessors + \" cores\");\n      int[] limits \u003d getOverallLimits(yarnProcessors);\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_PERIOD_US, String.valueOf(limits[0]));\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(limits[1]));\n    } else if (cpuLimitsExist()) {\n      LOG.info(\"Removing CPU constraints for YARN containers.\");\n      updateCgroup(CONTROLLER_CPU, \"\", CPU_QUOTA_US, String.valueOf(-1));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "726c3538a7f0087fe99157019c2b90198de06ec7": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-1284. LCE: Race condition leaves dangling cgroups entries for killed containers. (Alejandro Abdelnur via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1530492 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/10/13 10:05 PM",
      "commitName": "726c3538a7f0087fe99157019c2b90198de06ec7",
      "commitAuthor": "Sanford Ryza",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-1284. LCE: Race condition leaves dangling cgroups entries for killed containers. (Alejandro Abdelnur via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1530492 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/10/13 10:05 PM",
          "commitName": "726c3538a7f0087fe99157019c2b90198de06ec7",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "17/06/13 11:34 PM",
          "commitNameOld": "6451288704922576e75dd1597f5fd0ef09ab4f26",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 112.94,
          "commitsBetweenForRepo": 659,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,13 @@\n-  public synchronized void init(LinuxContainerExecutor lce) throws IOException {\n-\n-    this.cgroupPrefix \u003d conf.get(YarnConfiguration.\n-            NM_LINUX_CONTAINER_CGROUPS_HIERARCHY, \"/hadoop-yarn\");\n-    this.cgroupMount \u003d conf.getBoolean(YarnConfiguration.\n-            NM_LINUX_CONTAINER_CGROUPS_MOUNT, false);\n-    this.cgroupMountPath \u003d conf.get(YarnConfiguration.\n-            NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH, null);\n-\n-    // remove extra /\u0027s at end or start of cgroupPrefix\n-    if (cgroupPrefix.charAt(0) \u003d\u003d \u0027/\u0027) {\n-      cgroupPrefix \u003d cgroupPrefix.substring(1);\n-    }\n-\n-    int len \u003d cgroupPrefix.length();\n-    if (cgroupPrefix.charAt(len - 1) \u003d\u003d \u0027/\u0027) {\n-      cgroupPrefix \u003d cgroupPrefix.substring(0, len - 1);\n-    }\n-  \n+  public void init(LinuxContainerExecutor lce) throws IOException {\n+    initConfig();\n+    \n     // mount cgroups if requested\n     if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n       ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n       cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                     CONTROLLER_CPU);\n       lce.mountCgroups(cgroupKVs, cgroupPrefix);\n     }\n \n     initializeControllerPaths();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(LinuxContainerExecutor lce) throws IOException {\n    initConfig();\n    \n    // mount cgroups if requested\n    if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n      ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n      cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                    CONTROLLER_CPU);\n      lce.mountCgroups(cgroupKVs, cgroupPrefix);\n    }\n\n    initializeControllerPaths();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1284. LCE: Race condition leaves dangling cgroups entries for killed containers. (Alejandro Abdelnur via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1530492 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/10/13 10:05 PM",
          "commitName": "726c3538a7f0087fe99157019c2b90198de06ec7",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "17/06/13 11:34 PM",
          "commitNameOld": "6451288704922576e75dd1597f5fd0ef09ab4f26",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 112.94,
          "commitsBetweenForRepo": 659,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,13 @@\n-  public synchronized void init(LinuxContainerExecutor lce) throws IOException {\n-\n-    this.cgroupPrefix \u003d conf.get(YarnConfiguration.\n-            NM_LINUX_CONTAINER_CGROUPS_HIERARCHY, \"/hadoop-yarn\");\n-    this.cgroupMount \u003d conf.getBoolean(YarnConfiguration.\n-            NM_LINUX_CONTAINER_CGROUPS_MOUNT, false);\n-    this.cgroupMountPath \u003d conf.get(YarnConfiguration.\n-            NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH, null);\n-\n-    // remove extra /\u0027s at end or start of cgroupPrefix\n-    if (cgroupPrefix.charAt(0) \u003d\u003d \u0027/\u0027) {\n-      cgroupPrefix \u003d cgroupPrefix.substring(1);\n-    }\n-\n-    int len \u003d cgroupPrefix.length();\n-    if (cgroupPrefix.charAt(len - 1) \u003d\u003d \u0027/\u0027) {\n-      cgroupPrefix \u003d cgroupPrefix.substring(0, len - 1);\n-    }\n-  \n+  public void init(LinuxContainerExecutor lce) throws IOException {\n+    initConfig();\n+    \n     // mount cgroups if requested\n     if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n       ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n       cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                     CONTROLLER_CPU);\n       lce.mountCgroups(cgroupKVs, cgroupPrefix);\n     }\n \n     initializeControllerPaths();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(LinuxContainerExecutor lce) throws IOException {\n    initConfig();\n    \n    // mount cgroups if requested\n    if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n      ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n      cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                    CONTROLLER_CPU);\n      lce.mountCgroups(cgroupKVs, cgroupPrefix);\n    }\n\n    initializeControllerPaths();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "5032a694ed250f65ade8c2b62c97b89ab45f53ea": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3. Add support for CPU isolation/monitoring of containers. (adferguson via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1423706 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/12 2:58 PM",
      "commitName": "5032a694ed250f65ade8c2b62c97b89ab45f53ea",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,29 @@\n+  public synchronized void init(LinuxContainerExecutor lce) throws IOException {\n+\n+    this.cgroupPrefix \u003d conf.get(YarnConfiguration.\n+            NM_LINUX_CONTAINER_CGROUPS_HIERARCHY, \"/hadoop-yarn\");\n+    this.cgroupMount \u003d conf.getBoolean(YarnConfiguration.\n+            NM_LINUX_CONTAINER_CGROUPS_MOUNT, false);\n+    this.cgroupMountPath \u003d conf.get(YarnConfiguration.\n+            NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH, null);\n+\t\n+    // remove extra /\u0027s at end or start of cgroupPrefix\n+    if (cgroupPrefix.charAt(0) \u003d\u003d \u0027/\u0027) {\n+    \tcgroupPrefix \u003d cgroupPrefix.substring(1);\n+    }\n+\n+    int len \u003d cgroupPrefix.length();\n+    if (cgroupPrefix.charAt(len - 1) \u003d\u003d \u0027/\u0027) {\n+    \tcgroupPrefix \u003d cgroupPrefix.substring(0, len - 1);\n+    }\n+   \n+    // mount cgroups if requested\n+    if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n+      ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n+      cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n+                    CONTROLLER_CPU);\n+      lce.mountCgroups(cgroupKVs, cgroupPrefix);\n+    }\n+    \n+    initializeControllerPaths();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(LinuxContainerExecutor lce) throws IOException {\n\n    this.cgroupPrefix \u003d conf.get(YarnConfiguration.\n            NM_LINUX_CONTAINER_CGROUPS_HIERARCHY, \"/hadoop-yarn\");\n    this.cgroupMount \u003d conf.getBoolean(YarnConfiguration.\n            NM_LINUX_CONTAINER_CGROUPS_MOUNT, false);\n    this.cgroupMountPath \u003d conf.get(YarnConfiguration.\n            NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH, null);\n\t\n    // remove extra /\u0027s at end or start of cgroupPrefix\n    if (cgroupPrefix.charAt(0) \u003d\u003d \u0027/\u0027) {\n    \tcgroupPrefix \u003d cgroupPrefix.substring(1);\n    }\n\n    int len \u003d cgroupPrefix.length();\n    if (cgroupPrefix.charAt(len - 1) \u003d\u003d \u0027/\u0027) {\n    \tcgroupPrefix \u003d cgroupPrefix.substring(0, len - 1);\n    }\n   \n    // mount cgroups if requested\n    if (cgroupMount \u0026\u0026 cgroupMountPath !\u003d null) {\n      ArrayList\u003cString\u003e cgroupKVs \u003d new ArrayList\u003cString\u003e();\n      cgroupKVs.add(CONTROLLER_CPU + \"\u003d\" + cgroupMountPath + \"/\" +\n                    CONTROLLER_CPU);\n      lce.mountCgroups(cgroupKVs, cgroupPrefix);\n    }\n    \n    initializeControllerPaths();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/CgroupsLCEResourcesHandler.java"
    }
  }
}