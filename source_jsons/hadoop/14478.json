{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JournalNodeSyncer.java",
  "functionName": "syncWithJournalAtIndex",
  "functionId": "syncWithJournalAtIndex___index-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
  "functionStartLine": 231,
  "functionEndLine": 261,
  "numCommitsSeen": 14,
  "timeTaken": 2514,
  "changeHistory": [
    "9e287054a8aa0725643bc5c90601645302fffade",
    "0ef639235b305d684cbe46818613320b3fa62d44",
    "6347b2253d1b912d1d8d89a4b3d470c596f2c596",
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4"
  ],
  "changeHistoryShort": {
    "9e287054a8aa0725643bc5c90601645302fffade": "Ybodychange",
    "0ef639235b305d684cbe46818613320b3fa62d44": "Ybodychange",
    "6347b2253d1b912d1d8d89a4b3d470c596f2c596": "Ybodychange",
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9e287054a8aa0725643bc5c90601645302fffade": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14942. Change Log Level to debug in JournalNodeSyncer#syncWithJournalAtIndex. Contributed by Lisheng Sun.\n",
      "commitDate": "06/11/19 8:32 AM",
      "commitName": "9e287054a8aa0725643bc5c90601645302fffade",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "07/02/19 4:51 PM",
      "commitNameOld": "4be87353e35a30d95d8847b09a1890b014bfc6bb",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 271.65,
      "commitsBetweenForRepo": 2032,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private void syncWithJournalAtIndex(int index) {\n     LOG.info(\"Syncing Journal \" + jn.getBoundIpcAddress().getAddress() + \":\"\n         + jn.getBoundIpcAddress().getPort() + \" with \"\n         + otherJNProxies.get(index) + \", journal id: \" + jid);\n     final InterQJournalProtocol jnProxy \u003d otherJNProxies.get(index).jnProxy;\n     if (jnProxy \u003d\u003d null) {\n       LOG.error(\"JournalNode Proxy not found.\");\n       return;\n     }\n \n     List\u003cRemoteEditLog\u003e thisJournalEditLogs;\n     try {\n       thisJournalEditLogs \u003d journal.getEditLogManifest(0, false).getLogs();\n     } catch (IOException e) {\n       LOG.error(\"Exception in getting local edit log manifest\", e);\n       return;\n     }\n \n     GetEditLogManifestResponseProto editLogManifest;\n     try {\n       editLogManifest \u003d jnProxy.getEditLogManifestFromJournal(jid,\n           nameServiceId, 0, false);\n     } catch (IOException e) {\n-      LOG.error(\"Could not sync with Journal at \" +\n+      LOG.debug(\"Could not sync with Journal at {}.\",\n           otherJNProxies.get(journalNodeIndexForSync), e);\n       return;\n     }\n \n     getMissingLogSegments(thisJournalEditLogs, editLogManifest,\n         otherJNProxies.get(index));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void syncWithJournalAtIndex(int index) {\n    LOG.info(\"Syncing Journal \" + jn.getBoundIpcAddress().getAddress() + \":\"\n        + jn.getBoundIpcAddress().getPort() + \" with \"\n        + otherJNProxies.get(index) + \", journal id: \" + jid);\n    final InterQJournalProtocol jnProxy \u003d otherJNProxies.get(index).jnProxy;\n    if (jnProxy \u003d\u003d null) {\n      LOG.error(\"JournalNode Proxy not found.\");\n      return;\n    }\n\n    List\u003cRemoteEditLog\u003e thisJournalEditLogs;\n    try {\n      thisJournalEditLogs \u003d journal.getEditLogManifest(0, false).getLogs();\n    } catch (IOException e) {\n      LOG.error(\"Exception in getting local edit log manifest\", e);\n      return;\n    }\n\n    GetEditLogManifestResponseProto editLogManifest;\n    try {\n      editLogManifest \u003d jnProxy.getEditLogManifestFromJournal(jid,\n          nameServiceId, 0, false);\n    } catch (IOException e) {\n      LOG.debug(\"Could not sync with Journal at {}.\",\n          otherJNProxies.get(journalNodeIndexForSync), e);\n      return;\n    }\n\n    getMissingLogSegments(thisJournalEditLogs, editLogManifest,\n        otherJNProxies.get(index));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
      "extendedDetails": {}
    },
    "0ef639235b305d684cbe46818613320b3fa62d44": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13073. Cleanup code in InterQJournalProtocol.proto. Contributed by Bharat Viswanadham.\n",
      "commitDate": "02/02/18 4:28 PM",
      "commitName": "0ef639235b305d684cbe46818613320b3fa62d44",
      "commitAuthor": "Hanisha Koneru",
      "commitDateOld": "22/01/18 4:02 PM",
      "commitNameOld": "6347b2253d1b912d1d8d89a4b3d470c596f2c596",
      "commitAuthorOld": "Hanisha Koneru",
      "daysBetweenCommits": 11.02,
      "commitsBetweenForRepo": 105,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private void syncWithJournalAtIndex(int index) {\n     LOG.info(\"Syncing Journal \" + jn.getBoundIpcAddress().getAddress() + \":\"\n         + jn.getBoundIpcAddress().getPort() + \" with \"\n         + otherJNProxies.get(index) + \", journal id: \" + jid);\n     final InterQJournalProtocol jnProxy \u003d otherJNProxies.get(index).jnProxy;\n     if (jnProxy \u003d\u003d null) {\n       LOG.error(\"JournalNode Proxy not found.\");\n       return;\n     }\n \n     List\u003cRemoteEditLog\u003e thisJournalEditLogs;\n     try {\n       thisJournalEditLogs \u003d journal.getEditLogManifest(0, false).getLogs();\n     } catch (IOException e) {\n       LOG.error(\"Exception in getting local edit log manifest\", e);\n       return;\n     }\n \n-    GetEditLogManifestFromJournalResponseProto editLogManifest;\n+    GetEditLogManifestResponseProto editLogManifest;\n     try {\n       editLogManifest \u003d jnProxy.getEditLogManifestFromJournal(jid,\n           nameServiceId, 0, false);\n     } catch (IOException e) {\n       LOG.error(\"Could not sync with Journal at \" +\n           otherJNProxies.get(journalNodeIndexForSync), e);\n       return;\n     }\n \n     getMissingLogSegments(thisJournalEditLogs, editLogManifest,\n         otherJNProxies.get(index));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void syncWithJournalAtIndex(int index) {\n    LOG.info(\"Syncing Journal \" + jn.getBoundIpcAddress().getAddress() + \":\"\n        + jn.getBoundIpcAddress().getPort() + \" with \"\n        + otherJNProxies.get(index) + \", journal id: \" + jid);\n    final InterQJournalProtocol jnProxy \u003d otherJNProxies.get(index).jnProxy;\n    if (jnProxy \u003d\u003d null) {\n      LOG.error(\"JournalNode Proxy not found.\");\n      return;\n    }\n\n    List\u003cRemoteEditLog\u003e thisJournalEditLogs;\n    try {\n      thisJournalEditLogs \u003d journal.getEditLogManifest(0, false).getLogs();\n    } catch (IOException e) {\n      LOG.error(\"Exception in getting local edit log manifest\", e);\n      return;\n    }\n\n    GetEditLogManifestResponseProto editLogManifest;\n    try {\n      editLogManifest \u003d jnProxy.getEditLogManifestFromJournal(jid,\n          nameServiceId, 0, false);\n    } catch (IOException e) {\n      LOG.error(\"Could not sync with Journal at \" +\n          otherJNProxies.get(journalNodeIndexForSync), e);\n      return;\n    }\n\n    getMissingLogSegments(thisJournalEditLogs, editLogManifest,\n        otherJNProxies.get(index));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
      "extendedDetails": {}
    },
    "6347b2253d1b912d1d8d89a4b3d470c596f2c596": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13023. Journal Sync does not work on a secure cluster. Contributed by Bharat Viswanadham.\n",
      "commitDate": "22/01/18 4:02 PM",
      "commitName": "6347b2253d1b912d1d8d89a4b3d470c596f2c596",
      "commitAuthor": "Hanisha Koneru",
      "commitDateOld": "10/11/17 4:30 PM",
      "commitNameOld": "6d201f77c734d6c6a9e3e297fe3dbff251cbb8b3",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 72.98,
      "commitsBetweenForRepo": 377,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,31 @@\n   private void syncWithJournalAtIndex(int index) {\n     LOG.info(\"Syncing Journal \" + jn.getBoundIpcAddress().getAddress() + \":\"\n         + jn.getBoundIpcAddress().getPort() + \" with \"\n         + otherJNProxies.get(index) + \", journal id: \" + jid);\n-    final QJournalProtocolPB jnProxy \u003d otherJNProxies.get(index).jnProxy;\n+    final InterQJournalProtocol jnProxy \u003d otherJNProxies.get(index).jnProxy;\n     if (jnProxy \u003d\u003d null) {\n       LOG.error(\"JournalNode Proxy not found.\");\n       return;\n     }\n \n     List\u003cRemoteEditLog\u003e thisJournalEditLogs;\n     try {\n       thisJournalEditLogs \u003d journal.getEditLogManifest(0, false).getLogs();\n     } catch (IOException e) {\n       LOG.error(\"Exception in getting local edit log manifest\", e);\n       return;\n     }\n \n-    GetEditLogManifestResponseProto editLogManifest;\n+    GetEditLogManifestFromJournalResponseProto editLogManifest;\n     try {\n-      editLogManifest \u003d jnProxy.getEditLogManifest(null,\n-          GetEditLogManifestRequestProto.newBuilder().setJid(jidProto)\n-              .setSinceTxId(0)\n-              .setInProgressOk(false).build());\n-    } catch (ServiceException e) {\n+      editLogManifest \u003d jnProxy.getEditLogManifestFromJournal(jid,\n+          nameServiceId, 0, false);\n+    } catch (IOException e) {\n       LOG.error(\"Could not sync with Journal at \" +\n           otherJNProxies.get(journalNodeIndexForSync), e);\n       return;\n     }\n \n     getMissingLogSegments(thisJournalEditLogs, editLogManifest,\n         otherJNProxies.get(index));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void syncWithJournalAtIndex(int index) {\n    LOG.info(\"Syncing Journal \" + jn.getBoundIpcAddress().getAddress() + \":\"\n        + jn.getBoundIpcAddress().getPort() + \" with \"\n        + otherJNProxies.get(index) + \", journal id: \" + jid);\n    final InterQJournalProtocol jnProxy \u003d otherJNProxies.get(index).jnProxy;\n    if (jnProxy \u003d\u003d null) {\n      LOG.error(\"JournalNode Proxy not found.\");\n      return;\n    }\n\n    List\u003cRemoteEditLog\u003e thisJournalEditLogs;\n    try {\n      thisJournalEditLogs \u003d journal.getEditLogManifest(0, false).getLogs();\n    } catch (IOException e) {\n      LOG.error(\"Exception in getting local edit log manifest\", e);\n      return;\n    }\n\n    GetEditLogManifestFromJournalResponseProto editLogManifest;\n    try {\n      editLogManifest \u003d jnProxy.getEditLogManifestFromJournal(jid,\n          nameServiceId, 0, false);\n    } catch (IOException e) {\n      LOG.error(\"Could not sync with Journal at \" +\n          otherJNProxies.get(journalNodeIndexForSync), e);\n      return;\n    }\n\n    getMissingLogSegments(thisJournalEditLogs, editLogManifest,\n        otherJNProxies.get(index));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
      "extendedDetails": {}
    },
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4025. QJM: Sychronize past log segments to JNs that missed them. Contributed by Hanisha Koneru.\n",
      "commitDate": "22/02/17 4:33 PM",
      "commitName": "13d4bcfe3535a2df79c2a56e7578716d15497ff4",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,33 @@\n+  private void syncWithJournalAtIndex(int index) {\n+    LOG.info(\"Syncing Journal \" + jn.getBoundIpcAddress().getAddress() + \":\"\n+        + jn.getBoundIpcAddress().getPort() + \" with \"\n+        + otherJNProxies.get(index) + \", journal id: \" + jid);\n+    final QJournalProtocolPB jnProxy \u003d otherJNProxies.get(index).jnProxy;\n+    if (jnProxy \u003d\u003d null) {\n+      LOG.error(\"JournalNode Proxy not found.\");\n+      return;\n+    }\n+\n+    List\u003cRemoteEditLog\u003e thisJournalEditLogs;\n+    try {\n+      thisJournalEditLogs \u003d journal.getEditLogManifest(0, false).getLogs();\n+    } catch (IOException e) {\n+      LOG.error(\"Exception in getting local edit log manifest\", e);\n+      return;\n+    }\n+\n+    GetEditLogManifestResponseProto editLogManifest;\n+    try {\n+      editLogManifest \u003d jnProxy.getEditLogManifest(null,\n+          GetEditLogManifestRequestProto.newBuilder().setJid(jidProto)\n+              .setSinceTxId(0)\n+              .setInProgressOk(false).build());\n+    } catch (ServiceException e) {\n+      LOG.error(\"Could not sync with Journal at \" +\n+          otherJNProxies.get(journalNodeIndexForSync), e);\n+      return;\n+    }\n+\n+    getMissingLogSegments(thisJournalEditLogs, editLogManifest,\n+        otherJNProxies.get(index));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void syncWithJournalAtIndex(int index) {\n    LOG.info(\"Syncing Journal \" + jn.getBoundIpcAddress().getAddress() + \":\"\n        + jn.getBoundIpcAddress().getPort() + \" with \"\n        + otherJNProxies.get(index) + \", journal id: \" + jid);\n    final QJournalProtocolPB jnProxy \u003d otherJNProxies.get(index).jnProxy;\n    if (jnProxy \u003d\u003d null) {\n      LOG.error(\"JournalNode Proxy not found.\");\n      return;\n    }\n\n    List\u003cRemoteEditLog\u003e thisJournalEditLogs;\n    try {\n      thisJournalEditLogs \u003d journal.getEditLogManifest(0, false).getLogs();\n    } catch (IOException e) {\n      LOG.error(\"Exception in getting local edit log manifest\", e);\n      return;\n    }\n\n    GetEditLogManifestResponseProto editLogManifest;\n    try {\n      editLogManifest \u003d jnProxy.getEditLogManifest(null,\n          GetEditLogManifestRequestProto.newBuilder().setJid(jidProto)\n              .setSinceTxId(0)\n              .setInProgressOk(false).build());\n    } catch (ServiceException e) {\n      LOG.error(\"Could not sync with Journal at \" +\n          otherJNProxies.get(journalNodeIndexForSync), e);\n      return;\n    }\n\n    getMissingLogSegments(thisJournalEditLogs, editLogManifest,\n        otherJNProxies.get(index));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java"
    }
  }
}