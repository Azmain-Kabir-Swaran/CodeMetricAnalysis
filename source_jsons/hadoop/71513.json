{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegistryUtils.java",
  "functionName": "extractServiceRecords",
  "functionId": "extractServiceRecords___operations-RegistryOperations__parentpath-String__stats-Collection__RegistryPathStatus__",
  "sourceFilePath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/binding/RegistryUtils.java",
  "functionStartLine": 324,
  "functionEndLine": 352,
  "numCommitsSeen": 9,
  "timeTaken": 1354,
  "changeHistory": [
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
    "1670578018b3210d518408530858a869e37b23cb",
    "6a326711aa27e84fd4c53937afc5c41a746ec65a"
  ],
  "changeHistoryShort": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": "Yfilerename",
    "1670578018b3210d518408530858a869e37b23cb": "Ybodychange",
    "6a326711aa27e84fd4c53937afc5c41a746ec65a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
      "commitDate": "19/10/18 4:46 PM",
      "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/10/18 1:57 PM",
      "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static Map\u003cString, ServiceRecord\u003e extractServiceRecords(\n      RegistryOperations operations,\n      String parentpath,\n      Collection\u003cRegistryPathStatus\u003e stats) throws IOException {\n    Map\u003cString, ServiceRecord\u003e results \u003d new HashMap\u003cString, ServiceRecord\u003e(stats.size());\n    for (RegistryPathStatus stat : stats) {\n      if (stat.size \u003e ServiceRecord.RECORD_TYPE.length()) {\n        // maybe has data\n        String path \u003d join(parentpath, stat.path);\n        try {\n          ServiceRecord serviceRecord \u003d operations.resolve(path);\n          results.put(path, serviceRecord);\n        } catch (EOFException ignored) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"data too short for {}\", path);\n          }\n        } catch (InvalidRecordException record) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Invalid record at {}\", path);\n          }\n        } catch (NoRecordException record) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"No record at {}\", path);\n          }\n        }\n      }\n    }\n    return results;\n  }",
      "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/binding/RegistryUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/binding/RegistryUtils.java",
        "newPath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/binding/RegistryUtils.java"
      }
    },
    "1670578018b3210d518408530858a869e37b23cb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2768 Improved Yarn Registry service record structure (stevel)\n",
      "commitDate": "06/11/14 12:22 PM",
      "commitName": "1670578018b3210d518408530858a869e37b23cb",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "30/10/14 3:32 PM",
      "commitNameOld": "81fe8e414748161f537e6902021d63928f8635f1",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 6.91,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   public static Map\u003cString, ServiceRecord\u003e extractServiceRecords(\n       RegistryOperations operations,\n       String parentpath,\n       Collection\u003cRegistryPathStatus\u003e stats) throws IOException {\n     Map\u003cString, ServiceRecord\u003e results \u003d new HashMap\u003cString, ServiceRecord\u003e(stats.size());\n     for (RegistryPathStatus stat : stats) {\n-      if (stat.size \u003e ServiceRecordHeader.getLength()) {\n+      if (stat.size \u003e ServiceRecord.RECORD_TYPE.length()) {\n         // maybe has data\n         String path \u003d join(parentpath, stat.path);\n         try {\n           ServiceRecord serviceRecord \u003d operations.resolve(path);\n           results.put(path, serviceRecord);\n         } catch (EOFException ignored) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"data too short for {}\", path);\n           }\n         } catch (InvalidRecordException record) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Invalid record at {}\", path);\n           }\n         } catch (NoRecordException record) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"No record at {}\", path);\n           }\n         }\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Map\u003cString, ServiceRecord\u003e extractServiceRecords(\n      RegistryOperations operations,\n      String parentpath,\n      Collection\u003cRegistryPathStatus\u003e stats) throws IOException {\n    Map\u003cString, ServiceRecord\u003e results \u003d new HashMap\u003cString, ServiceRecord\u003e(stats.size());\n    for (RegistryPathStatus stat : stats) {\n      if (stat.size \u003e ServiceRecord.RECORD_TYPE.length()) {\n        // maybe has data\n        String path \u003d join(parentpath, stat.path);\n        try {\n          ServiceRecord serviceRecord \u003d operations.resolve(path);\n          results.put(path, serviceRecord);\n        } catch (EOFException ignored) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"data too short for {}\", path);\n          }\n        } catch (InvalidRecordException record) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Invalid record at {}\", path);\n          }\n        } catch (NoRecordException record) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"No record at {}\", path);\n          }\n        }\n      }\n    }\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/binding/RegistryUtils.java",
      "extendedDetails": {}
    },
    "6a326711aa27e84fd4c53937afc5c41a746ec65a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-913 service registry: YARN-2652 add hadoop-yarn-registry package under hadoop-yarn\n",
      "commitDate": "08/10/14 1:02 PM",
      "commitName": "6a326711aa27e84fd4c53937afc5c41a746ec65a",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,29 @@\n+  public static Map\u003cString, ServiceRecord\u003e extractServiceRecords(\n+      RegistryOperations operations,\n+      String parentpath,\n+      Collection\u003cRegistryPathStatus\u003e stats) throws IOException {\n+    Map\u003cString, ServiceRecord\u003e results \u003d new HashMap\u003cString, ServiceRecord\u003e(stats.size());\n+    for (RegistryPathStatus stat : stats) {\n+      if (stat.size \u003e ServiceRecordHeader.getLength()) {\n+        // maybe has data\n+        String path \u003d join(parentpath, stat.path);\n+        try {\n+          ServiceRecord serviceRecord \u003d operations.resolve(path);\n+          results.put(path, serviceRecord);\n+        } catch (EOFException ignored) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"data too short for {}\", path);\n+          }\n+        } catch (InvalidRecordException record) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Invalid record at {}\", path);\n+          }\n+        } catch (NoRecordException record) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"No record at {}\", path);\n+          }\n+        }\n+      }\n+    }\n+    return results;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Map\u003cString, ServiceRecord\u003e extractServiceRecords(\n      RegistryOperations operations,\n      String parentpath,\n      Collection\u003cRegistryPathStatus\u003e stats) throws IOException {\n    Map\u003cString, ServiceRecord\u003e results \u003d new HashMap\u003cString, ServiceRecord\u003e(stats.size());\n    for (RegistryPathStatus stat : stats) {\n      if (stat.size \u003e ServiceRecordHeader.getLength()) {\n        // maybe has data\n        String path \u003d join(parentpath, stat.path);\n        try {\n          ServiceRecord serviceRecord \u003d operations.resolve(path);\n          results.put(path, serviceRecord);\n        } catch (EOFException ignored) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"data too short for {}\", path);\n          }\n        } catch (InvalidRecordException record) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Invalid record at {}\", path);\n          }\n        } catch (NoRecordException record) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"No record at {}\", path);\n          }\n        }\n      }\n    }\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/binding/RegistryUtils.java"
    }
  }
}