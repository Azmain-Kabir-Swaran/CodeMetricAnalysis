{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TFileAggregatedLogsBlock.java",
  "functionName": "readContainerLogs",
  "functionId": "readContainerLogs___html-Block__logReader-AggregatedLogFormat.ContainerLogsReader__startIndex-long__endIndex-long__desiredLogType-String__logUpLoadTime-long__startTime-long__endTime-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/tfile/TFileAggregatedLogsBlock.java",
  "functionStartLine": 173,
  "functionEndLine": 205,
  "numCommitsSeen": 26,
  "timeTaken": 6587,
  "changeHistory": [
    "74411ce0ce7336c0f7bb5793939fdd64a5dcdef6",
    "631b5c2db733b0733a779e843b8035f68d0fcdf3",
    "91cc070d67533ebb3325b982eba2135e0d175a82",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
    "0f9528b99addbb0fd9a19d84db22a8c8e934b05f",
    "58e9f24e0f06efede21085b7ffe36af042fa7b38",
    "f81dc3f995579c1b94b11d60e9fc6da56c8a9496",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "8e576570a99270f2db4bd722f451cde0a5c3e4a4"
  ],
  "changeHistoryShort": {
    "74411ce0ce7336c0f7bb5793939fdd64a5dcdef6": "Ybodychange",
    "631b5c2db733b0733a779e843b8035f68d0fcdf3": "Ymultichange(Yparameterchange,Ybodychange)",
    "91cc070d67533ebb3325b982eba2135e0d175a82": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Ybodychange",
    "0f9528b99addbb0fd9a19d84db22a8c8e934b05f": "Ybodychange",
    "58e9f24e0f06efede21085b7ffe36af042fa7b38": "Ymultichange(Yparameterchange,Ybodychange)",
    "f81dc3f995579c1b94b11d60e9fc6da56c8a9496": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "8e576570a99270f2db4bd722f451cde0a5c3e4a4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "74411ce0ce7336c0f7bb5793939fdd64a5dcdef6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7417. Remove duplicated code from IndexedFileAggregatedLogsBlock\n           and TFileAggregatedLogsBlock.\n           Contributed by Zian Chen\n",
      "commitDate": "13/08/18 1:50 PM",
      "commitName": "74411ce0ce7336c0f7bb5793939fdd64a5dcdef6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "15/12/17 3:38 PM",
      "commitNameOld": "631b5c2db733b0733a779e843b8035f68d0fcdf3",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 240.88,
      "commitsBetweenForRepo": 2277,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,33 @@\n   private boolean readContainerLogs(Block html,\n       AggregatedLogFormat.ContainerLogsReader logReader, long startIndex,\n       long endIndex, String desiredLogType, long logUpLoadTime,\n       long startTime, long endTime) throws IOException {\n     int bufferSize \u003d 65536;\n-    char[] cbuf \u003d new char[bufferSize];\n+    byte[] cbuf \u003d new byte[bufferSize];\n \n     boolean foundLog \u003d false;\n     String logType \u003d logReader.nextLog();\n     while (logType !\u003d null) {\n       if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n           || desiredLogType.equals(logType)) {\n         long logLength \u003d logReader.getCurrentLogLength();\n         if (foundLog) {\n           html.pre().__(\"\\n\\n\").__();\n         }\n \n         html.p().__(\"Log Type: \" + logType).__();\n         html.p().__(\"Log Upload Time: \" + Times.format(logUpLoadTime)).__();\n         html.p().__(\"Log Length: \" + Long.toString(logLength)).__();\n \n-        long start \u003d startIndex \u003c 0\n-            ? logLength + startIndex : startIndex;\n-        start \u003d start \u003c 0 ? 0 : start;\n-        start \u003d start \u003e logLength ? logLength : start;\n-        long end \u003d endIndex \u003c 0\n-            ? logLength + endIndex : endIndex;\n-        end \u003d end \u003c 0 ? 0 : end;\n-        end \u003d end \u003e logLength ? logLength : end;\n-        end \u003d end \u003c start ? start : end;\n+        long[] range \u003d checkParseRange(html, startIndex, endIndex, startTime,\n+            endTime, logLength, logType);\n \n-        long toRead \u003d end - start;\n-        if (toRead \u003c logLength) {\n-          html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength\n-            + \" total. Click \").a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n-                $(ENTITY_STRING), $(APP_OWNER),\n-                logType, \"?start\u003d0\u0026start.time\u003d\" + startTime\n-                + \"\u0026end.time\u003d\" + endTime), \"here\").\n-            __(\" for the full log.\").__();\n-        }\n-\n-        long totalSkipped \u003d 0;\n-        while (totalSkipped \u003c start) {\n-          long ret \u003d logReader.skip(start - totalSkipped);\n-          if (ret \u003d\u003d 0) {\n-            //Read one byte\n-            int nextByte \u003d logReader.read();\n-            // Check if we have reached EOF\n-            if (nextByte \u003d\u003d -1) {\n-              throw new IOException(\"Premature EOF from container log\");\n-            }\n-            ret \u003d 1;\n-          }\n-          totalSkipped +\u003d ret;\n-        }\n-\n-        int len \u003d 0;\n-        int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n-        PRE\u003cHamlet\u003e pre \u003d html.pre();\n-\n-        while (toRead \u003e 0\n-            \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n-          pre.__(new String(cbuf, 0, len));\n-          toRead \u003d toRead - len;\n-          currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n-        }\n-\n-        pre.__();\n+        processContainerLog(html, range, logReader, bufferSize, cbuf);\n         foundLog \u003d true;\n       }\n \n       logType \u003d logReader.nextLog();\n     }\n \n     return foundLog;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean readContainerLogs(Block html,\n      AggregatedLogFormat.ContainerLogsReader logReader, long startIndex,\n      long endIndex, String desiredLogType, long logUpLoadTime,\n      long startTime, long endTime) throws IOException {\n    int bufferSize \u003d 65536;\n    byte[] cbuf \u003d new byte[bufferSize];\n\n    boolean foundLog \u003d false;\n    String logType \u003d logReader.nextLog();\n    while (logType !\u003d null) {\n      if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n          || desiredLogType.equals(logType)) {\n        long logLength \u003d logReader.getCurrentLogLength();\n        if (foundLog) {\n          html.pre().__(\"\\n\\n\").__();\n        }\n\n        html.p().__(\"Log Type: \" + logType).__();\n        html.p().__(\"Log Upload Time: \" + Times.format(logUpLoadTime)).__();\n        html.p().__(\"Log Length: \" + Long.toString(logLength)).__();\n\n        long[] range \u003d checkParseRange(html, startIndex, endIndex, startTime,\n            endTime, logLength, logType);\n\n        processContainerLog(html, range, logReader, bufferSize, cbuf);\n        foundLog \u003d true;\n      }\n\n      logType \u003d logReader.nextLog();\n    }\n\n    return foundLog;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/tfile/TFileAggregatedLogsBlock.java",
      "extendedDetails": {}
    },
    "631b5c2db733b0733a779e843b8035f68d0fcdf3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5418. When partial log aggregation is enabled, display the list of aggregated files on the container log page. (Xuan Gong via wangda)\n\nChange-Id: I1befb0bbaeb89fb315bafe3e2f3379663f8cf1ec\n",
      "commitDate": "15/12/17 3:38 PM",
      "commitName": "631b5c2db733b0733a779e843b8035f68d0fcdf3",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5418. When partial log aggregation is enabled, display the list of aggregated files on the container log page. (Xuan Gong via wangda)\n\nChange-Id: I1befb0bbaeb89fb315bafe3e2f3379663f8cf1ec\n",
          "commitDate": "15/12/17 3:38 PM",
          "commitName": "631b5c2db733b0733a779e843b8035f68d0fcdf3",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "31/08/17 4:41 PM",
          "commitNameOld": "91cc070d67533ebb3325b982eba2135e0d175a82",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 106.0,
          "commitsBetweenForRepo": 857,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,76 @@\n   private boolean readContainerLogs(Block html,\n       AggregatedLogFormat.ContainerLogsReader logReader, long startIndex,\n-      long endIndex, String desiredLogType, long logUpLoadTime)\n-      throws IOException {\n+      long endIndex, String desiredLogType, long logUpLoadTime,\n+      long startTime, long endTime) throws IOException {\n     int bufferSize \u003d 65536;\n     char[] cbuf \u003d new char[bufferSize];\n \n     boolean foundLog \u003d false;\n     String logType \u003d logReader.nextLog();\n     while (logType !\u003d null) {\n       if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n           || desiredLogType.equals(logType)) {\n         long logLength \u003d logReader.getCurrentLogLength();\n         if (foundLog) {\n           html.pre().__(\"\\n\\n\").__();\n         }\n \n         html.p().__(\"Log Type: \" + logType).__();\n         html.p().__(\"Log Upload Time: \" + Times.format(logUpLoadTime)).__();\n         html.p().__(\"Log Length: \" + Long.toString(logLength)).__();\n \n         long start \u003d startIndex \u003c 0\n             ? logLength + startIndex : startIndex;\n         start \u003d start \u003c 0 ? 0 : start;\n         start \u003d start \u003e logLength ? logLength : start;\n         long end \u003d endIndex \u003c 0\n             ? logLength + endIndex : endIndex;\n         end \u003d end \u003c 0 ? 0 : end;\n         end \u003d end \u003e logLength ? logLength : end;\n         end \u003d end \u003c start ? start : end;\n \n         long toRead \u003d end - start;\n         if (toRead \u003c logLength) {\n           html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength\n             + \" total. Click \").a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                 $(ENTITY_STRING), $(APP_OWNER),\n-                logType, \"?start\u003d0\"), \"here\").\n+                logType, \"?start\u003d0\u0026start.time\u003d\" + startTime\n+                + \"\u0026end.time\u003d\" + endTime), \"here\").\n             __(\" for the full log.\").__();\n         }\n \n         long totalSkipped \u003d 0;\n         while (totalSkipped \u003c start) {\n           long ret \u003d logReader.skip(start - totalSkipped);\n           if (ret \u003d\u003d 0) {\n             //Read one byte\n             int nextByte \u003d logReader.read();\n             // Check if we have reached EOF\n             if (nextByte \u003d\u003d -1) {\n               throw new IOException(\"Premature EOF from container log\");\n             }\n             ret \u003d 1;\n           }\n           totalSkipped +\u003d ret;\n         }\n \n         int len \u003d 0;\n         int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         PRE\u003cHamlet\u003e pre \u003d html.pre();\n \n         while (toRead \u003e 0\n             \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n           pre.__(new String(cbuf, 0, len));\n           toRead \u003d toRead - len;\n           currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         }\n \n         pre.__();\n         foundLog \u003d true;\n       }\n \n       logType \u003d logReader.nextLog();\n     }\n \n     return foundLog;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean readContainerLogs(Block html,\n      AggregatedLogFormat.ContainerLogsReader logReader, long startIndex,\n      long endIndex, String desiredLogType, long logUpLoadTime,\n      long startTime, long endTime) throws IOException {\n    int bufferSize \u003d 65536;\n    char[] cbuf \u003d new char[bufferSize];\n\n    boolean foundLog \u003d false;\n    String logType \u003d logReader.nextLog();\n    while (logType !\u003d null) {\n      if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n          || desiredLogType.equals(logType)) {\n        long logLength \u003d logReader.getCurrentLogLength();\n        if (foundLog) {\n          html.pre().__(\"\\n\\n\").__();\n        }\n\n        html.p().__(\"Log Type: \" + logType).__();\n        html.p().__(\"Log Upload Time: \" + Times.format(logUpLoadTime)).__();\n        html.p().__(\"Log Length: \" + Long.toString(logLength)).__();\n\n        long start \u003d startIndex \u003c 0\n            ? logLength + startIndex : startIndex;\n        start \u003d start \u003c 0 ? 0 : start;\n        start \u003d start \u003e logLength ? logLength : start;\n        long end \u003d endIndex \u003c 0\n            ? logLength + endIndex : endIndex;\n        end \u003d end \u003c 0 ? 0 : end;\n        end \u003d end \u003e logLength ? logLength : end;\n        end \u003d end \u003c start ? start : end;\n\n        long toRead \u003d end - start;\n        if (toRead \u003c logLength) {\n          html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength\n            + \" total. Click \").a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                $(ENTITY_STRING), $(APP_OWNER),\n                logType, \"?start\u003d0\u0026start.time\u003d\" + startTime\n                + \"\u0026end.time\u003d\" + endTime), \"here\").\n            __(\" for the full log.\").__();\n        }\n\n        long totalSkipped \u003d 0;\n        while (totalSkipped \u003c start) {\n          long ret \u003d logReader.skip(start - totalSkipped);\n          if (ret \u003d\u003d 0) {\n            //Read one byte\n            int nextByte \u003d logReader.read();\n            // Check if we have reached EOF\n            if (nextByte \u003d\u003d -1) {\n              throw new IOException(\"Premature EOF from container log\");\n            }\n            ret \u003d 1;\n          }\n          totalSkipped +\u003d ret;\n        }\n\n        int len \u003d 0;\n        int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n        while (toRead \u003e 0\n            \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n          pre.__(new String(cbuf, 0, len));\n          toRead \u003d toRead - len;\n          currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        }\n\n        pre.__();\n        foundLog \u003d true;\n      }\n\n      logType \u003d logReader.nextLog();\n    }\n\n    return foundLog;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/tfile/TFileAggregatedLogsBlock.java",
          "extendedDetails": {
            "oldValue": "[html-Block, logReader-AggregatedLogFormat.ContainerLogsReader, startIndex-long, endIndex-long, desiredLogType-String, logUpLoadTime-long]",
            "newValue": "[html-Block, logReader-AggregatedLogFormat.ContainerLogsReader, startIndex-long, endIndex-long, desiredLogType-String, logUpLoadTime-long, startTime-long, endTime-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5418. When partial log aggregation is enabled, display the list of aggregated files on the container log page. (Xuan Gong via wangda)\n\nChange-Id: I1befb0bbaeb89fb315bafe3e2f3379663f8cf1ec\n",
          "commitDate": "15/12/17 3:38 PM",
          "commitName": "631b5c2db733b0733a779e843b8035f68d0fcdf3",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "31/08/17 4:41 PM",
          "commitNameOld": "91cc070d67533ebb3325b982eba2135e0d175a82",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 106.0,
          "commitsBetweenForRepo": 857,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,76 @@\n   private boolean readContainerLogs(Block html,\n       AggregatedLogFormat.ContainerLogsReader logReader, long startIndex,\n-      long endIndex, String desiredLogType, long logUpLoadTime)\n-      throws IOException {\n+      long endIndex, String desiredLogType, long logUpLoadTime,\n+      long startTime, long endTime) throws IOException {\n     int bufferSize \u003d 65536;\n     char[] cbuf \u003d new char[bufferSize];\n \n     boolean foundLog \u003d false;\n     String logType \u003d logReader.nextLog();\n     while (logType !\u003d null) {\n       if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n           || desiredLogType.equals(logType)) {\n         long logLength \u003d logReader.getCurrentLogLength();\n         if (foundLog) {\n           html.pre().__(\"\\n\\n\").__();\n         }\n \n         html.p().__(\"Log Type: \" + logType).__();\n         html.p().__(\"Log Upload Time: \" + Times.format(logUpLoadTime)).__();\n         html.p().__(\"Log Length: \" + Long.toString(logLength)).__();\n \n         long start \u003d startIndex \u003c 0\n             ? logLength + startIndex : startIndex;\n         start \u003d start \u003c 0 ? 0 : start;\n         start \u003d start \u003e logLength ? logLength : start;\n         long end \u003d endIndex \u003c 0\n             ? logLength + endIndex : endIndex;\n         end \u003d end \u003c 0 ? 0 : end;\n         end \u003d end \u003e logLength ? logLength : end;\n         end \u003d end \u003c start ? start : end;\n \n         long toRead \u003d end - start;\n         if (toRead \u003c logLength) {\n           html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength\n             + \" total. Click \").a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                 $(ENTITY_STRING), $(APP_OWNER),\n-                logType, \"?start\u003d0\"), \"here\").\n+                logType, \"?start\u003d0\u0026start.time\u003d\" + startTime\n+                + \"\u0026end.time\u003d\" + endTime), \"here\").\n             __(\" for the full log.\").__();\n         }\n \n         long totalSkipped \u003d 0;\n         while (totalSkipped \u003c start) {\n           long ret \u003d logReader.skip(start - totalSkipped);\n           if (ret \u003d\u003d 0) {\n             //Read one byte\n             int nextByte \u003d logReader.read();\n             // Check if we have reached EOF\n             if (nextByte \u003d\u003d -1) {\n               throw new IOException(\"Premature EOF from container log\");\n             }\n             ret \u003d 1;\n           }\n           totalSkipped +\u003d ret;\n         }\n \n         int len \u003d 0;\n         int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         PRE\u003cHamlet\u003e pre \u003d html.pre();\n \n         while (toRead \u003e 0\n             \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n           pre.__(new String(cbuf, 0, len));\n           toRead \u003d toRead - len;\n           currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         }\n \n         pre.__();\n         foundLog \u003d true;\n       }\n \n       logType \u003d logReader.nextLog();\n     }\n \n     return foundLog;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean readContainerLogs(Block html,\n      AggregatedLogFormat.ContainerLogsReader logReader, long startIndex,\n      long endIndex, String desiredLogType, long logUpLoadTime,\n      long startTime, long endTime) throws IOException {\n    int bufferSize \u003d 65536;\n    char[] cbuf \u003d new char[bufferSize];\n\n    boolean foundLog \u003d false;\n    String logType \u003d logReader.nextLog();\n    while (logType !\u003d null) {\n      if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n          || desiredLogType.equals(logType)) {\n        long logLength \u003d logReader.getCurrentLogLength();\n        if (foundLog) {\n          html.pre().__(\"\\n\\n\").__();\n        }\n\n        html.p().__(\"Log Type: \" + logType).__();\n        html.p().__(\"Log Upload Time: \" + Times.format(logUpLoadTime)).__();\n        html.p().__(\"Log Length: \" + Long.toString(logLength)).__();\n\n        long start \u003d startIndex \u003c 0\n            ? logLength + startIndex : startIndex;\n        start \u003d start \u003c 0 ? 0 : start;\n        start \u003d start \u003e logLength ? logLength : start;\n        long end \u003d endIndex \u003c 0\n            ? logLength + endIndex : endIndex;\n        end \u003d end \u003c 0 ? 0 : end;\n        end \u003d end \u003e logLength ? logLength : end;\n        end \u003d end \u003c start ? start : end;\n\n        long toRead \u003d end - start;\n        if (toRead \u003c logLength) {\n          html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength\n            + \" total. Click \").a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                $(ENTITY_STRING), $(APP_OWNER),\n                logType, \"?start\u003d0\u0026start.time\u003d\" + startTime\n                + \"\u0026end.time\u003d\" + endTime), \"here\").\n            __(\" for the full log.\").__();\n        }\n\n        long totalSkipped \u003d 0;\n        while (totalSkipped \u003c start) {\n          long ret \u003d logReader.skip(start - totalSkipped);\n          if (ret \u003d\u003d 0) {\n            //Read one byte\n            int nextByte \u003d logReader.read();\n            // Check if we have reached EOF\n            if (nextByte \u003d\u003d -1) {\n              throw new IOException(\"Premature EOF from container log\");\n            }\n            ret \u003d 1;\n          }\n          totalSkipped +\u003d ret;\n        }\n\n        int len \u003d 0;\n        int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n        while (toRead \u003e 0\n            \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n          pre.__(new String(cbuf, 0, len));\n          toRead \u003d toRead - len;\n          currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        }\n\n        pre.__();\n        foundLog \u003d true;\n      }\n\n      logType \u003d logReader.nextLog();\n    }\n\n    return foundLog;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/tfile/TFileAggregatedLogsBlock.java",
          "extendedDetails": {}
        }
      ]
    },
    "91cc070d67533ebb3325b982eba2135e0d175a82": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-6877. Create an abstract log reader for extendability. Contributed by Xuan Gong.\n",
      "commitDate": "31/08/17 4:41 PM",
      "commitName": "91cc070d67533ebb3325b982eba2135e0d175a82",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-6877. Create an abstract log reader for extendability. Contributed by Xuan Gong.\n",
          "commitDate": "31/08/17 4:41 PM",
          "commitName": "91cc070d67533ebb3325b982eba2135e0d175a82",
          "commitAuthor": "Junping Du",
          "commitDateOld": "31/08/17 3:05 PM",
          "commitNameOld": "bac4e8cca8b54405f5e37b90e545b93bbadee0f4",
          "commitAuthorOld": "Subru Krishnan",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,75 @@\n   private boolean readContainerLogs(Block html,\n-      AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits,\n-      String desiredLogType, long logUpLoadTime) throws IOException {\n+      AggregatedLogFormat.ContainerLogsReader logReader, long startIndex,\n+      long endIndex, String desiredLogType, long logUpLoadTime)\n+      throws IOException {\n     int bufferSize \u003d 65536;\n     char[] cbuf \u003d new char[bufferSize];\n \n     boolean foundLog \u003d false;\n     String logType \u003d logReader.nextLog();\n     while (logType !\u003d null) {\n       if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n           || desiredLogType.equals(logType)) {\n         long logLength \u003d logReader.getCurrentLogLength();\n         if (foundLog) {\n           html.pre().__(\"\\n\\n\").__();\n         }\n \n         html.p().__(\"Log Type: \" + logType).__();\n         html.p().__(\"Log Upload Time: \" + Times.format(logUpLoadTime)).__();\n         html.p().__(\"Log Length: \" + Long.toString(logLength)).__();\n \n-        long start \u003d logLimits.start \u003c 0\n-            ? logLength + logLimits.start : logLimits.start;\n+        long start \u003d startIndex \u003c 0\n+            ? logLength + startIndex : startIndex;\n         start \u003d start \u003c 0 ? 0 : start;\n         start \u003d start \u003e logLength ? logLength : start;\n-        long end \u003d logLimits.end \u003c 0\n-            ? logLength + logLimits.end : logLimits.end;\n+        long end \u003d endIndex \u003c 0\n+            ? logLength + endIndex : endIndex;\n         end \u003d end \u003c 0 ? 0 : end;\n         end \u003d end \u003e logLength ? logLength : end;\n         end \u003d end \u003c start ? start : end;\n \n         long toRead \u003d end - start;\n         if (toRead \u003c logLength) {\n-            html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength\n-                + \" total. Click \")\n-                .a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n-                    $(ENTITY_STRING), $(APP_OWNER),\n-                    logType, \"?start\u003d0\"), \"here\").\n-                __(\" for the full log.\").__();\n+          html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength\n+            + \" total. Click \").a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n+                $(ENTITY_STRING), $(APP_OWNER),\n+                logType, \"?start\u003d0\"), \"here\").\n+            __(\" for the full log.\").__();\n         }\n \n         long totalSkipped \u003d 0;\n         while (totalSkipped \u003c start) {\n           long ret \u003d logReader.skip(start - totalSkipped);\n           if (ret \u003d\u003d 0) {\n             //Read one byte\n             int nextByte \u003d logReader.read();\n             // Check if we have reached EOF\n             if (nextByte \u003d\u003d -1) {\n-              throw new IOException( \"Premature EOF from container log\");\n+              throw new IOException(\"Premature EOF from container log\");\n             }\n             ret \u003d 1;\n           }\n           totalSkipped +\u003d ret;\n         }\n \n         int len \u003d 0;\n         int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         PRE\u003cHamlet\u003e pre \u003d html.pre();\n \n         while (toRead \u003e 0\n             \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n           pre.__(new String(cbuf, 0, len));\n           toRead \u003d toRead - len;\n           currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         }\n \n         pre.__();\n         foundLog \u003d true;\n       }\n \n       logType \u003d logReader.nextLog();\n     }\n \n     return foundLog;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean readContainerLogs(Block html,\n      AggregatedLogFormat.ContainerLogsReader logReader, long startIndex,\n      long endIndex, String desiredLogType, long logUpLoadTime)\n      throws IOException {\n    int bufferSize \u003d 65536;\n    char[] cbuf \u003d new char[bufferSize];\n\n    boolean foundLog \u003d false;\n    String logType \u003d logReader.nextLog();\n    while (logType !\u003d null) {\n      if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n          || desiredLogType.equals(logType)) {\n        long logLength \u003d logReader.getCurrentLogLength();\n        if (foundLog) {\n          html.pre().__(\"\\n\\n\").__();\n        }\n\n        html.p().__(\"Log Type: \" + logType).__();\n        html.p().__(\"Log Upload Time: \" + Times.format(logUpLoadTime)).__();\n        html.p().__(\"Log Length: \" + Long.toString(logLength)).__();\n\n        long start \u003d startIndex \u003c 0\n            ? logLength + startIndex : startIndex;\n        start \u003d start \u003c 0 ? 0 : start;\n        start \u003d start \u003e logLength ? logLength : start;\n        long end \u003d endIndex \u003c 0\n            ? logLength + endIndex : endIndex;\n        end \u003d end \u003c 0 ? 0 : end;\n        end \u003d end \u003e logLength ? logLength : end;\n        end \u003d end \u003c start ? start : end;\n\n        long toRead \u003d end - start;\n        if (toRead \u003c logLength) {\n          html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength\n            + \" total. Click \").a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                $(ENTITY_STRING), $(APP_OWNER),\n                logType, \"?start\u003d0\"), \"here\").\n            __(\" for the full log.\").__();\n        }\n\n        long totalSkipped \u003d 0;\n        while (totalSkipped \u003c start) {\n          long ret \u003d logReader.skip(start - totalSkipped);\n          if (ret \u003d\u003d 0) {\n            //Read one byte\n            int nextByte \u003d logReader.read();\n            // Check if we have reached EOF\n            if (nextByte \u003d\u003d -1) {\n              throw new IOException(\"Premature EOF from container log\");\n            }\n            ret \u003d 1;\n          }\n          totalSkipped +\u003d ret;\n        }\n\n        int len \u003d 0;\n        int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n        while (toRead \u003e 0\n            \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n          pre.__(new String(cbuf, 0, len));\n          toRead \u003d toRead - len;\n          currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        }\n\n        pre.__();\n        foundLog \u003d true;\n      }\n\n      logType \u003d logReader.nextLog();\n    }\n\n    return foundLog;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/tfile/TFileAggregatedLogsBlock.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/log/AggregatedLogsBlock.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/tfile/TFileAggregatedLogsBlock.java",
            "oldMethodName": "readContainerLogs",
            "newMethodName": "readContainerLogs"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6877. Create an abstract log reader for extendability. Contributed by Xuan Gong.\n",
          "commitDate": "31/08/17 4:41 PM",
          "commitName": "91cc070d67533ebb3325b982eba2135e0d175a82",
          "commitAuthor": "Junping Du",
          "commitDateOld": "31/08/17 3:05 PM",
          "commitNameOld": "bac4e8cca8b54405f5e37b90e545b93bbadee0f4",
          "commitAuthorOld": "Subru Krishnan",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,75 @@\n   private boolean readContainerLogs(Block html,\n-      AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits,\n-      String desiredLogType, long logUpLoadTime) throws IOException {\n+      AggregatedLogFormat.ContainerLogsReader logReader, long startIndex,\n+      long endIndex, String desiredLogType, long logUpLoadTime)\n+      throws IOException {\n     int bufferSize \u003d 65536;\n     char[] cbuf \u003d new char[bufferSize];\n \n     boolean foundLog \u003d false;\n     String logType \u003d logReader.nextLog();\n     while (logType !\u003d null) {\n       if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n           || desiredLogType.equals(logType)) {\n         long logLength \u003d logReader.getCurrentLogLength();\n         if (foundLog) {\n           html.pre().__(\"\\n\\n\").__();\n         }\n \n         html.p().__(\"Log Type: \" + logType).__();\n         html.p().__(\"Log Upload Time: \" + Times.format(logUpLoadTime)).__();\n         html.p().__(\"Log Length: \" + Long.toString(logLength)).__();\n \n-        long start \u003d logLimits.start \u003c 0\n-            ? logLength + logLimits.start : logLimits.start;\n+        long start \u003d startIndex \u003c 0\n+            ? logLength + startIndex : startIndex;\n         start \u003d start \u003c 0 ? 0 : start;\n         start \u003d start \u003e logLength ? logLength : start;\n-        long end \u003d logLimits.end \u003c 0\n-            ? logLength + logLimits.end : logLimits.end;\n+        long end \u003d endIndex \u003c 0\n+            ? logLength + endIndex : endIndex;\n         end \u003d end \u003c 0 ? 0 : end;\n         end \u003d end \u003e logLength ? logLength : end;\n         end \u003d end \u003c start ? start : end;\n \n         long toRead \u003d end - start;\n         if (toRead \u003c logLength) {\n-            html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength\n-                + \" total. Click \")\n-                .a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n-                    $(ENTITY_STRING), $(APP_OWNER),\n-                    logType, \"?start\u003d0\"), \"here\").\n-                __(\" for the full log.\").__();\n+          html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength\n+            + \" total. Click \").a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n+                $(ENTITY_STRING), $(APP_OWNER),\n+                logType, \"?start\u003d0\"), \"here\").\n+            __(\" for the full log.\").__();\n         }\n \n         long totalSkipped \u003d 0;\n         while (totalSkipped \u003c start) {\n           long ret \u003d logReader.skip(start - totalSkipped);\n           if (ret \u003d\u003d 0) {\n             //Read one byte\n             int nextByte \u003d logReader.read();\n             // Check if we have reached EOF\n             if (nextByte \u003d\u003d -1) {\n-              throw new IOException( \"Premature EOF from container log\");\n+              throw new IOException(\"Premature EOF from container log\");\n             }\n             ret \u003d 1;\n           }\n           totalSkipped +\u003d ret;\n         }\n \n         int len \u003d 0;\n         int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         PRE\u003cHamlet\u003e pre \u003d html.pre();\n \n         while (toRead \u003e 0\n             \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n           pre.__(new String(cbuf, 0, len));\n           toRead \u003d toRead - len;\n           currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         }\n \n         pre.__();\n         foundLog \u003d true;\n       }\n \n       logType \u003d logReader.nextLog();\n     }\n \n     return foundLog;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean readContainerLogs(Block html,\n      AggregatedLogFormat.ContainerLogsReader logReader, long startIndex,\n      long endIndex, String desiredLogType, long logUpLoadTime)\n      throws IOException {\n    int bufferSize \u003d 65536;\n    char[] cbuf \u003d new char[bufferSize];\n\n    boolean foundLog \u003d false;\n    String logType \u003d logReader.nextLog();\n    while (logType !\u003d null) {\n      if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n          || desiredLogType.equals(logType)) {\n        long logLength \u003d logReader.getCurrentLogLength();\n        if (foundLog) {\n          html.pre().__(\"\\n\\n\").__();\n        }\n\n        html.p().__(\"Log Type: \" + logType).__();\n        html.p().__(\"Log Upload Time: \" + Times.format(logUpLoadTime)).__();\n        html.p().__(\"Log Length: \" + Long.toString(logLength)).__();\n\n        long start \u003d startIndex \u003c 0\n            ? logLength + startIndex : startIndex;\n        start \u003d start \u003c 0 ? 0 : start;\n        start \u003d start \u003e logLength ? logLength : start;\n        long end \u003d endIndex \u003c 0\n            ? logLength + endIndex : endIndex;\n        end \u003d end \u003c 0 ? 0 : end;\n        end \u003d end \u003e logLength ? logLength : end;\n        end \u003d end \u003c start ? start : end;\n\n        long toRead \u003d end - start;\n        if (toRead \u003c logLength) {\n          html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength\n            + \" total. Click \").a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                $(ENTITY_STRING), $(APP_OWNER),\n                logType, \"?start\u003d0\"), \"here\").\n            __(\" for the full log.\").__();\n        }\n\n        long totalSkipped \u003d 0;\n        while (totalSkipped \u003c start) {\n          long ret \u003d logReader.skip(start - totalSkipped);\n          if (ret \u003d\u003d 0) {\n            //Read one byte\n            int nextByte \u003d logReader.read();\n            // Check if we have reached EOF\n            if (nextByte \u003d\u003d -1) {\n              throw new IOException(\"Premature EOF from container log\");\n            }\n            ret \u003d 1;\n          }\n          totalSkipped +\u003d ret;\n        }\n\n        int len \u003d 0;\n        int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n        while (toRead \u003e 0\n            \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n          pre.__(new String(cbuf, 0, len));\n          toRead \u003d toRead - len;\n          currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        }\n\n        pre.__();\n        foundLog \u003d true;\n      }\n\n      logType \u003d logReader.nextLog();\n    }\n\n    return foundLog;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/tfile/TFileAggregatedLogsBlock.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6877. Create an abstract log reader for extendability. Contributed by Xuan Gong.\n",
          "commitDate": "31/08/17 4:41 PM",
          "commitName": "91cc070d67533ebb3325b982eba2135e0d175a82",
          "commitAuthor": "Junping Du",
          "commitDateOld": "31/08/17 3:05 PM",
          "commitNameOld": "bac4e8cca8b54405f5e37b90e545b93bbadee0f4",
          "commitAuthorOld": "Subru Krishnan",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,75 @@\n   private boolean readContainerLogs(Block html,\n-      AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits,\n-      String desiredLogType, long logUpLoadTime) throws IOException {\n+      AggregatedLogFormat.ContainerLogsReader logReader, long startIndex,\n+      long endIndex, String desiredLogType, long logUpLoadTime)\n+      throws IOException {\n     int bufferSize \u003d 65536;\n     char[] cbuf \u003d new char[bufferSize];\n \n     boolean foundLog \u003d false;\n     String logType \u003d logReader.nextLog();\n     while (logType !\u003d null) {\n       if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n           || desiredLogType.equals(logType)) {\n         long logLength \u003d logReader.getCurrentLogLength();\n         if (foundLog) {\n           html.pre().__(\"\\n\\n\").__();\n         }\n \n         html.p().__(\"Log Type: \" + logType).__();\n         html.p().__(\"Log Upload Time: \" + Times.format(logUpLoadTime)).__();\n         html.p().__(\"Log Length: \" + Long.toString(logLength)).__();\n \n-        long start \u003d logLimits.start \u003c 0\n-            ? logLength + logLimits.start : logLimits.start;\n+        long start \u003d startIndex \u003c 0\n+            ? logLength + startIndex : startIndex;\n         start \u003d start \u003c 0 ? 0 : start;\n         start \u003d start \u003e logLength ? logLength : start;\n-        long end \u003d logLimits.end \u003c 0\n-            ? logLength + logLimits.end : logLimits.end;\n+        long end \u003d endIndex \u003c 0\n+            ? logLength + endIndex : endIndex;\n         end \u003d end \u003c 0 ? 0 : end;\n         end \u003d end \u003e logLength ? logLength : end;\n         end \u003d end \u003c start ? start : end;\n \n         long toRead \u003d end - start;\n         if (toRead \u003c logLength) {\n-            html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength\n-                + \" total. Click \")\n-                .a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n-                    $(ENTITY_STRING), $(APP_OWNER),\n-                    logType, \"?start\u003d0\"), \"here\").\n-                __(\" for the full log.\").__();\n+          html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength\n+            + \" total. Click \").a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n+                $(ENTITY_STRING), $(APP_OWNER),\n+                logType, \"?start\u003d0\"), \"here\").\n+            __(\" for the full log.\").__();\n         }\n \n         long totalSkipped \u003d 0;\n         while (totalSkipped \u003c start) {\n           long ret \u003d logReader.skip(start - totalSkipped);\n           if (ret \u003d\u003d 0) {\n             //Read one byte\n             int nextByte \u003d logReader.read();\n             // Check if we have reached EOF\n             if (nextByte \u003d\u003d -1) {\n-              throw new IOException( \"Premature EOF from container log\");\n+              throw new IOException(\"Premature EOF from container log\");\n             }\n             ret \u003d 1;\n           }\n           totalSkipped +\u003d ret;\n         }\n \n         int len \u003d 0;\n         int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         PRE\u003cHamlet\u003e pre \u003d html.pre();\n \n         while (toRead \u003e 0\n             \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n           pre.__(new String(cbuf, 0, len));\n           toRead \u003d toRead - len;\n           currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         }\n \n         pre.__();\n         foundLog \u003d true;\n       }\n \n       logType \u003d logReader.nextLog();\n     }\n \n     return foundLog;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean readContainerLogs(Block html,\n      AggregatedLogFormat.ContainerLogsReader logReader, long startIndex,\n      long endIndex, String desiredLogType, long logUpLoadTime)\n      throws IOException {\n    int bufferSize \u003d 65536;\n    char[] cbuf \u003d new char[bufferSize];\n\n    boolean foundLog \u003d false;\n    String logType \u003d logReader.nextLog();\n    while (logType !\u003d null) {\n      if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n          || desiredLogType.equals(logType)) {\n        long logLength \u003d logReader.getCurrentLogLength();\n        if (foundLog) {\n          html.pre().__(\"\\n\\n\").__();\n        }\n\n        html.p().__(\"Log Type: \" + logType).__();\n        html.p().__(\"Log Upload Time: \" + Times.format(logUpLoadTime)).__();\n        html.p().__(\"Log Length: \" + Long.toString(logLength)).__();\n\n        long start \u003d startIndex \u003c 0\n            ? logLength + startIndex : startIndex;\n        start \u003d start \u003c 0 ? 0 : start;\n        start \u003d start \u003e logLength ? logLength : start;\n        long end \u003d endIndex \u003c 0\n            ? logLength + endIndex : endIndex;\n        end \u003d end \u003c 0 ? 0 : end;\n        end \u003d end \u003e logLength ? logLength : end;\n        end \u003d end \u003c start ? start : end;\n\n        long toRead \u003d end - start;\n        if (toRead \u003c logLength) {\n          html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength\n            + \" total. Click \").a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                $(ENTITY_STRING), $(APP_OWNER),\n                logType, \"?start\u003d0\"), \"here\").\n            __(\" for the full log.\").__();\n        }\n\n        long totalSkipped \u003d 0;\n        while (totalSkipped \u003c start) {\n          long ret \u003d logReader.skip(start - totalSkipped);\n          if (ret \u003d\u003d 0) {\n            //Read one byte\n            int nextByte \u003d logReader.read();\n            // Check if we have reached EOF\n            if (nextByte \u003d\u003d -1) {\n              throw new IOException(\"Premature EOF from container log\");\n            }\n            ret \u003d 1;\n          }\n          totalSkipped +\u003d ret;\n        }\n\n        int len \u003d 0;\n        int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n        while (toRead \u003e 0\n            \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n          pre.__(new String(cbuf, 0, len));\n          toRead \u003d toRead - len;\n          currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        }\n\n        pre.__();\n        foundLog \u003d true;\n      }\n\n      logType \u003d logReader.nextLog();\n    }\n\n    return foundLog;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/tfile/TFileAggregatedLogsBlock.java",
          "extendedDetails": {
            "oldValue": "[html-Block, logReader-AggregatedLogFormat.ContainerLogsReader, logLimits-LogLimits, desiredLogType-String, logUpLoadTime-long]",
            "newValue": "[html-Block, logReader-AggregatedLogFormat.ContainerLogsReader, startIndex-long, endIndex-long, desiredLogType-String, logUpLoadTime-long]"
          }
        }
      ]
    },
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 408.09,
      "commitsBetweenForRepo": 2572,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,75 @@\n   private boolean readContainerLogs(Block html,\n       AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits,\n       String desiredLogType, long logUpLoadTime) throws IOException {\n     int bufferSize \u003d 65536;\n     char[] cbuf \u003d new char[bufferSize];\n \n     boolean foundLog \u003d false;\n     String logType \u003d logReader.nextLog();\n     while (logType !\u003d null) {\n       if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n           || desiredLogType.equals(logType)) {\n         long logLength \u003d logReader.getCurrentLogLength();\n         if (foundLog) {\n-          html.pre()._(\"\\n\\n\")._();\n+          html.pre().__(\"\\n\\n\").__();\n         }\n \n-        html.p()._(\"Log Type: \" + logType)._();\n-        html.p()._(\"Log Upload Time: \" + Times.format(logUpLoadTime))._();\n-        html.p()._(\"Log Length: \" + Long.toString(logLength))._();\n+        html.p().__(\"Log Type: \" + logType).__();\n+        html.p().__(\"Log Upload Time: \" + Times.format(logUpLoadTime)).__();\n+        html.p().__(\"Log Length: \" + Long.toString(logLength)).__();\n \n         long start \u003d logLimits.start \u003c 0\n             ? logLength + logLimits.start : logLimits.start;\n         start \u003d start \u003c 0 ? 0 : start;\n         start \u003d start \u003e logLength ? logLength : start;\n         long end \u003d logLimits.end \u003c 0\n             ? logLength + logLimits.end : logLimits.end;\n         end \u003d end \u003c 0 ? 0 : end;\n         end \u003d end \u003e logLength ? logLength : end;\n         end \u003d end \u003c start ? start : end;\n \n         long toRead \u003d end - start;\n         if (toRead \u003c logLength) {\n-            html.p()._(\"Showing \" + toRead + \" bytes of \" + logLength\n+            html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength\n                 + \" total. Click \")\n                 .a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                     $(ENTITY_STRING), $(APP_OWNER),\n                     logType, \"?start\u003d0\"), \"here\").\n-                    _(\" for the full log.\")._();\n+                __(\" for the full log.\").__();\n         }\n \n         long totalSkipped \u003d 0;\n         while (totalSkipped \u003c start) {\n           long ret \u003d logReader.skip(start - totalSkipped);\n           if (ret \u003d\u003d 0) {\n             //Read one byte\n             int nextByte \u003d logReader.read();\n             // Check if we have reached EOF\n             if (nextByte \u003d\u003d -1) {\n               throw new IOException( \"Premature EOF from container log\");\n             }\n             ret \u003d 1;\n           }\n           totalSkipped +\u003d ret;\n         }\n \n         int len \u003d 0;\n         int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         PRE\u003cHamlet\u003e pre \u003d html.pre();\n \n         while (toRead \u003e 0\n             \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n-          pre._(new String(cbuf, 0, len));\n+          pre.__(new String(cbuf, 0, len));\n           toRead \u003d toRead - len;\n           currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         }\n \n-        pre._();\n+        pre.__();\n         foundLog \u003d true;\n       }\n \n       logType \u003d logReader.nextLog();\n     }\n \n     return foundLog;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean readContainerLogs(Block html,\n      AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits,\n      String desiredLogType, long logUpLoadTime) throws IOException {\n    int bufferSize \u003d 65536;\n    char[] cbuf \u003d new char[bufferSize];\n\n    boolean foundLog \u003d false;\n    String logType \u003d logReader.nextLog();\n    while (logType !\u003d null) {\n      if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n          || desiredLogType.equals(logType)) {\n        long logLength \u003d logReader.getCurrentLogLength();\n        if (foundLog) {\n          html.pre().__(\"\\n\\n\").__();\n        }\n\n        html.p().__(\"Log Type: \" + logType).__();\n        html.p().__(\"Log Upload Time: \" + Times.format(logUpLoadTime)).__();\n        html.p().__(\"Log Length: \" + Long.toString(logLength)).__();\n\n        long start \u003d logLimits.start \u003c 0\n            ? logLength + logLimits.start : logLimits.start;\n        start \u003d start \u003c 0 ? 0 : start;\n        start \u003d start \u003e logLength ? logLength : start;\n        long end \u003d logLimits.end \u003c 0\n            ? logLength + logLimits.end : logLimits.end;\n        end \u003d end \u003c 0 ? 0 : end;\n        end \u003d end \u003e logLength ? logLength : end;\n        end \u003d end \u003c start ? start : end;\n\n        long toRead \u003d end - start;\n        if (toRead \u003c logLength) {\n            html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength\n                + \" total. Click \")\n                .a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                    $(ENTITY_STRING), $(APP_OWNER),\n                    logType, \"?start\u003d0\"), \"here\").\n                __(\" for the full log.\").__();\n        }\n\n        long totalSkipped \u003d 0;\n        while (totalSkipped \u003c start) {\n          long ret \u003d logReader.skip(start - totalSkipped);\n          if (ret \u003d\u003d 0) {\n            //Read one byte\n            int nextByte \u003d logReader.read();\n            // Check if we have reached EOF\n            if (nextByte \u003d\u003d -1) {\n              throw new IOException( \"Premature EOF from container log\");\n            }\n            ret \u003d 1;\n          }\n          totalSkipped +\u003d ret;\n        }\n\n        int len \u003d 0;\n        int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n        while (toRead \u003e 0\n            \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n          pre.__(new String(cbuf, 0, len));\n          toRead \u003d toRead - len;\n          currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        }\n\n        pre.__();\n        foundLog \u003d true;\n      }\n\n      logType \u003d logReader.nextLog();\n    }\n\n    return foundLog;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/log/AggregatedLogsBlock.java",
      "extendedDetails": {}
    },
    "0f9528b99addbb0fd9a19d84db22a8c8e934b05f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2905. AggregatedLogsBlock page can infinitely loop if the aggregated log file is corrupted. Contributed by Varun Saxena\n",
      "commitDate": "01/12/14 2:29 PM",
      "commitName": "0f9528b99addbb0fd9a19d84db22a8c8e934b05f",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "03/11/14 1:16 PM",
      "commitNameOld": "58e9f24e0f06efede21085b7ffe36af042fa7b38",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 28.05,
      "commitsBetweenForRepo": 214,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,75 @@\n   private boolean readContainerLogs(Block html,\n       AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits,\n       String desiredLogType, long logUpLoadTime) throws IOException {\n     int bufferSize \u003d 65536;\n     char[] cbuf \u003d new char[bufferSize];\n \n     boolean foundLog \u003d false;\n     String logType \u003d logReader.nextLog();\n     while (logType !\u003d null) {\n       if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n           || desiredLogType.equals(logType)) {\n         long logLength \u003d logReader.getCurrentLogLength();\n         if (foundLog) {\n           html.pre()._(\"\\n\\n\")._();\n         }\n \n         html.p()._(\"Log Type: \" + logType)._();\n         html.p()._(\"Log Upload Time: \" + Times.format(logUpLoadTime))._();\n         html.p()._(\"Log Length: \" + Long.toString(logLength))._();\n \n         long start \u003d logLimits.start \u003c 0\n             ? logLength + logLimits.start : logLimits.start;\n         start \u003d start \u003c 0 ? 0 : start;\n         start \u003d start \u003e logLength ? logLength : start;\n         long end \u003d logLimits.end \u003c 0\n             ? logLength + logLimits.end : logLimits.end;\n         end \u003d end \u003c 0 ? 0 : end;\n         end \u003d end \u003e logLength ? logLength : end;\n         end \u003d end \u003c start ? start : end;\n \n         long toRead \u003d end - start;\n         if (toRead \u003c logLength) {\n             html.p()._(\"Showing \" + toRead + \" bytes of \" + logLength\n                 + \" total. Click \")\n                 .a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                     $(ENTITY_STRING), $(APP_OWNER),\n                     logType, \"?start\u003d0\"), \"here\").\n                     _(\" for the full log.\")._();\n         }\n \n         long totalSkipped \u003d 0;\n         while (totalSkipped \u003c start) {\n           long ret \u003d logReader.skip(start - totalSkipped);\n-          if (ret \u003c 0) {\n-            throw new IOException( \"Premature EOF from container log\");\n+          if (ret \u003d\u003d 0) {\n+            //Read one byte\n+            int nextByte \u003d logReader.read();\n+            // Check if we have reached EOF\n+            if (nextByte \u003d\u003d -1) {\n+              throw new IOException( \"Premature EOF from container log\");\n+            }\n+            ret \u003d 1;\n           }\n           totalSkipped +\u003d ret;\n         }\n \n         int len \u003d 0;\n         int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         PRE\u003cHamlet\u003e pre \u003d html.pre();\n \n         while (toRead \u003e 0\n             \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n           pre._(new String(cbuf, 0, len));\n           toRead \u003d toRead - len;\n           currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         }\n \n         pre._();\n         foundLog \u003d true;\n       }\n \n       logType \u003d logReader.nextLog();\n     }\n \n     return foundLog;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean readContainerLogs(Block html,\n      AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits,\n      String desiredLogType, long logUpLoadTime) throws IOException {\n    int bufferSize \u003d 65536;\n    char[] cbuf \u003d new char[bufferSize];\n\n    boolean foundLog \u003d false;\n    String logType \u003d logReader.nextLog();\n    while (logType !\u003d null) {\n      if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n          || desiredLogType.equals(logType)) {\n        long logLength \u003d logReader.getCurrentLogLength();\n        if (foundLog) {\n          html.pre()._(\"\\n\\n\")._();\n        }\n\n        html.p()._(\"Log Type: \" + logType)._();\n        html.p()._(\"Log Upload Time: \" + Times.format(logUpLoadTime))._();\n        html.p()._(\"Log Length: \" + Long.toString(logLength))._();\n\n        long start \u003d logLimits.start \u003c 0\n            ? logLength + logLimits.start : logLimits.start;\n        start \u003d start \u003c 0 ? 0 : start;\n        start \u003d start \u003e logLength ? logLength : start;\n        long end \u003d logLimits.end \u003c 0\n            ? logLength + logLimits.end : logLimits.end;\n        end \u003d end \u003c 0 ? 0 : end;\n        end \u003d end \u003e logLength ? logLength : end;\n        end \u003d end \u003c start ? start : end;\n\n        long toRead \u003d end - start;\n        if (toRead \u003c logLength) {\n            html.p()._(\"Showing \" + toRead + \" bytes of \" + logLength\n                + \" total. Click \")\n                .a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                    $(ENTITY_STRING), $(APP_OWNER),\n                    logType, \"?start\u003d0\"), \"here\").\n                    _(\" for the full log.\")._();\n        }\n\n        long totalSkipped \u003d 0;\n        while (totalSkipped \u003c start) {\n          long ret \u003d logReader.skip(start - totalSkipped);\n          if (ret \u003d\u003d 0) {\n            //Read one byte\n            int nextByte \u003d logReader.read();\n            // Check if we have reached EOF\n            if (nextByte \u003d\u003d -1) {\n              throw new IOException( \"Premature EOF from container log\");\n            }\n            ret \u003d 1;\n          }\n          totalSkipped +\u003d ret;\n        }\n\n        int len \u003d 0;\n        int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n        while (toRead \u003e 0\n            \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n          pre._(new String(cbuf, 0, len));\n          toRead \u003d toRead - len;\n          currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        }\n\n        pre._();\n        foundLog \u003d true;\n      }\n\n      logType \u003d logReader.nextLog();\n    }\n\n    return foundLog;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/log/AggregatedLogsBlock.java",
      "extendedDetails": {}
    },
    "58e9f24e0f06efede21085b7ffe36af042fa7b38": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2788. Fixed backwards compatiblity issues with log-aggregation feature that were caused when adding log-upload-time via YARN-2703. Contributed by Xuan Gong.\n",
      "commitDate": "03/11/14 1:16 PM",
      "commitName": "58e9f24e0f06efede21085b7ffe36af042fa7b38",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2788. Fixed backwards compatiblity issues with log-aggregation feature that were caused when adding log-upload-time via YARN-2703. Contributed by Xuan Gong.\n",
          "commitDate": "03/11/14 1:16 PM",
          "commitName": "58e9f24e0f06efede21085b7ffe36af042fa7b38",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "24/10/14 2:10 PM",
          "commitNameOld": "f81dc3f995579c1b94b11d60e9fc6da56c8a9496",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 10.0,
          "commitsBetweenForRepo": 95,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,69 @@\n   private boolean readContainerLogs(Block html,\n       AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits,\n-      String desiredLogType) throws IOException {\n+      String desiredLogType, long logUpLoadTime) throws IOException {\n     int bufferSize \u003d 65536;\n     char[] cbuf \u003d new char[bufferSize];\n \n     boolean foundLog \u003d false;\n     String logType \u003d logReader.nextLog();\n     while (logType !\u003d null) {\n       if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n           || desiredLogType.equals(logType)) {\n         long logLength \u003d logReader.getCurrentLogLength();\n-        long logUpLoadTime \u003d logReader.getCurrentLogUpLoadTime();\n         if (foundLog) {\n           html.pre()._(\"\\n\\n\")._();\n         }\n \n         html.p()._(\"Log Type: \" + logType)._();\n-        html.p()._(\"Log UpLoadTime: \" + Times.format(logUpLoadTime))._();\n+        html.p()._(\"Log Upload Time: \" + Times.format(logUpLoadTime))._();\n         html.p()._(\"Log Length: \" + Long.toString(logLength))._();\n \n         long start \u003d logLimits.start \u003c 0\n             ? logLength + logLimits.start : logLimits.start;\n         start \u003d start \u003c 0 ? 0 : start;\n         start \u003d start \u003e logLength ? logLength : start;\n         long end \u003d logLimits.end \u003c 0\n             ? logLength + logLimits.end : logLimits.end;\n         end \u003d end \u003c 0 ? 0 : end;\n         end \u003d end \u003e logLength ? logLength : end;\n         end \u003d end \u003c start ? start : end;\n \n         long toRead \u003d end - start;\n         if (toRead \u003c logLength) {\n             html.p()._(\"Showing \" + toRead + \" bytes of \" + logLength\n                 + \" total. Click \")\n                 .a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                     $(ENTITY_STRING), $(APP_OWNER),\n                     logType, \"?start\u003d0\"), \"here\").\n                     _(\" for the full log.\")._();\n         }\n \n         long totalSkipped \u003d 0;\n         while (totalSkipped \u003c start) {\n           long ret \u003d logReader.skip(start - totalSkipped);\n           if (ret \u003c 0) {\n             throw new IOException( \"Premature EOF from container log\");\n           }\n           totalSkipped +\u003d ret;\n         }\n \n         int len \u003d 0;\n         int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         PRE\u003cHamlet\u003e pre \u003d html.pre();\n \n         while (toRead \u003e 0\n             \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n           pre._(new String(cbuf, 0, len));\n           toRead \u003d toRead - len;\n           currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         }\n \n         pre._();\n         foundLog \u003d true;\n       }\n \n       logType \u003d logReader.nextLog();\n     }\n \n     return foundLog;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean readContainerLogs(Block html,\n      AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits,\n      String desiredLogType, long logUpLoadTime) throws IOException {\n    int bufferSize \u003d 65536;\n    char[] cbuf \u003d new char[bufferSize];\n\n    boolean foundLog \u003d false;\n    String logType \u003d logReader.nextLog();\n    while (logType !\u003d null) {\n      if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n          || desiredLogType.equals(logType)) {\n        long logLength \u003d logReader.getCurrentLogLength();\n        if (foundLog) {\n          html.pre()._(\"\\n\\n\")._();\n        }\n\n        html.p()._(\"Log Type: \" + logType)._();\n        html.p()._(\"Log Upload Time: \" + Times.format(logUpLoadTime))._();\n        html.p()._(\"Log Length: \" + Long.toString(logLength))._();\n\n        long start \u003d logLimits.start \u003c 0\n            ? logLength + logLimits.start : logLimits.start;\n        start \u003d start \u003c 0 ? 0 : start;\n        start \u003d start \u003e logLength ? logLength : start;\n        long end \u003d logLimits.end \u003c 0\n            ? logLength + logLimits.end : logLimits.end;\n        end \u003d end \u003c 0 ? 0 : end;\n        end \u003d end \u003e logLength ? logLength : end;\n        end \u003d end \u003c start ? start : end;\n\n        long toRead \u003d end - start;\n        if (toRead \u003c logLength) {\n            html.p()._(\"Showing \" + toRead + \" bytes of \" + logLength\n                + \" total. Click \")\n                .a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                    $(ENTITY_STRING), $(APP_OWNER),\n                    logType, \"?start\u003d0\"), \"here\").\n                    _(\" for the full log.\")._();\n        }\n\n        long totalSkipped \u003d 0;\n        while (totalSkipped \u003c start) {\n          long ret \u003d logReader.skip(start - totalSkipped);\n          if (ret \u003c 0) {\n            throw new IOException( \"Premature EOF from container log\");\n          }\n          totalSkipped +\u003d ret;\n        }\n\n        int len \u003d 0;\n        int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n        while (toRead \u003e 0\n            \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n          pre._(new String(cbuf, 0, len));\n          toRead \u003d toRead - len;\n          currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        }\n\n        pre._();\n        foundLog \u003d true;\n      }\n\n      logType \u003d logReader.nextLog();\n    }\n\n    return foundLog;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/log/AggregatedLogsBlock.java",
          "extendedDetails": {
            "oldValue": "[html-Block, logReader-AggregatedLogFormat.ContainerLogsReader, logLimits-LogLimits, desiredLogType-String]",
            "newValue": "[html-Block, logReader-AggregatedLogFormat.ContainerLogsReader, logLimits-LogLimits, desiredLogType-String, logUpLoadTime-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2788. Fixed backwards compatiblity issues with log-aggregation feature that were caused when adding log-upload-time via YARN-2703. Contributed by Xuan Gong.\n",
          "commitDate": "03/11/14 1:16 PM",
          "commitName": "58e9f24e0f06efede21085b7ffe36af042fa7b38",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "24/10/14 2:10 PM",
          "commitNameOld": "f81dc3f995579c1b94b11d60e9fc6da56c8a9496",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 10.0,
          "commitsBetweenForRepo": 95,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,69 @@\n   private boolean readContainerLogs(Block html,\n       AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits,\n-      String desiredLogType) throws IOException {\n+      String desiredLogType, long logUpLoadTime) throws IOException {\n     int bufferSize \u003d 65536;\n     char[] cbuf \u003d new char[bufferSize];\n \n     boolean foundLog \u003d false;\n     String logType \u003d logReader.nextLog();\n     while (logType !\u003d null) {\n       if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n           || desiredLogType.equals(logType)) {\n         long logLength \u003d logReader.getCurrentLogLength();\n-        long logUpLoadTime \u003d logReader.getCurrentLogUpLoadTime();\n         if (foundLog) {\n           html.pre()._(\"\\n\\n\")._();\n         }\n \n         html.p()._(\"Log Type: \" + logType)._();\n-        html.p()._(\"Log UpLoadTime: \" + Times.format(logUpLoadTime))._();\n+        html.p()._(\"Log Upload Time: \" + Times.format(logUpLoadTime))._();\n         html.p()._(\"Log Length: \" + Long.toString(logLength))._();\n \n         long start \u003d logLimits.start \u003c 0\n             ? logLength + logLimits.start : logLimits.start;\n         start \u003d start \u003c 0 ? 0 : start;\n         start \u003d start \u003e logLength ? logLength : start;\n         long end \u003d logLimits.end \u003c 0\n             ? logLength + logLimits.end : logLimits.end;\n         end \u003d end \u003c 0 ? 0 : end;\n         end \u003d end \u003e logLength ? logLength : end;\n         end \u003d end \u003c start ? start : end;\n \n         long toRead \u003d end - start;\n         if (toRead \u003c logLength) {\n             html.p()._(\"Showing \" + toRead + \" bytes of \" + logLength\n                 + \" total. Click \")\n                 .a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                     $(ENTITY_STRING), $(APP_OWNER),\n                     logType, \"?start\u003d0\"), \"here\").\n                     _(\" for the full log.\")._();\n         }\n \n         long totalSkipped \u003d 0;\n         while (totalSkipped \u003c start) {\n           long ret \u003d logReader.skip(start - totalSkipped);\n           if (ret \u003c 0) {\n             throw new IOException( \"Premature EOF from container log\");\n           }\n           totalSkipped +\u003d ret;\n         }\n \n         int len \u003d 0;\n         int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         PRE\u003cHamlet\u003e pre \u003d html.pre();\n \n         while (toRead \u003e 0\n             \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n           pre._(new String(cbuf, 0, len));\n           toRead \u003d toRead - len;\n           currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         }\n \n         pre._();\n         foundLog \u003d true;\n       }\n \n       logType \u003d logReader.nextLog();\n     }\n \n     return foundLog;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean readContainerLogs(Block html,\n      AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits,\n      String desiredLogType, long logUpLoadTime) throws IOException {\n    int bufferSize \u003d 65536;\n    char[] cbuf \u003d new char[bufferSize];\n\n    boolean foundLog \u003d false;\n    String logType \u003d logReader.nextLog();\n    while (logType !\u003d null) {\n      if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n          || desiredLogType.equals(logType)) {\n        long logLength \u003d logReader.getCurrentLogLength();\n        if (foundLog) {\n          html.pre()._(\"\\n\\n\")._();\n        }\n\n        html.p()._(\"Log Type: \" + logType)._();\n        html.p()._(\"Log Upload Time: \" + Times.format(logUpLoadTime))._();\n        html.p()._(\"Log Length: \" + Long.toString(logLength))._();\n\n        long start \u003d logLimits.start \u003c 0\n            ? logLength + logLimits.start : logLimits.start;\n        start \u003d start \u003c 0 ? 0 : start;\n        start \u003d start \u003e logLength ? logLength : start;\n        long end \u003d logLimits.end \u003c 0\n            ? logLength + logLimits.end : logLimits.end;\n        end \u003d end \u003c 0 ? 0 : end;\n        end \u003d end \u003e logLength ? logLength : end;\n        end \u003d end \u003c start ? start : end;\n\n        long toRead \u003d end - start;\n        if (toRead \u003c logLength) {\n            html.p()._(\"Showing \" + toRead + \" bytes of \" + logLength\n                + \" total. Click \")\n                .a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                    $(ENTITY_STRING), $(APP_OWNER),\n                    logType, \"?start\u003d0\"), \"here\").\n                    _(\" for the full log.\")._();\n        }\n\n        long totalSkipped \u003d 0;\n        while (totalSkipped \u003c start) {\n          long ret \u003d logReader.skip(start - totalSkipped);\n          if (ret \u003c 0) {\n            throw new IOException( \"Premature EOF from container log\");\n          }\n          totalSkipped +\u003d ret;\n        }\n\n        int len \u003d 0;\n        int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n        while (toRead \u003e 0\n            \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n          pre._(new String(cbuf, 0, len));\n          toRead \u003d toRead - len;\n          currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        }\n\n        pre._();\n        foundLog \u003d true;\n      }\n\n      logType \u003d logReader.nextLog();\n    }\n\n    return foundLog;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/log/AggregatedLogsBlock.java",
          "extendedDetails": {}
        }
      ]
    },
    "f81dc3f995579c1b94b11d60e9fc6da56c8a9496": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2703. Added logUploadedTime into LogValue for better display. Contributed by Xuan Gong.\n",
      "commitDate": "24/10/14 2:10 PM",
      "commitName": "f81dc3f995579c1b94b11d60e9fc6da56c8a9496",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "20/10/14 1:38 PM",
      "commitNameOld": "e90718fa5a0e7c18592af61534668acebb9db51b",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 4.02,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,70 @@\n   private boolean readContainerLogs(Block html,\n       AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits,\n       String desiredLogType) throws IOException {\n     int bufferSize \u003d 65536;\n     char[] cbuf \u003d new char[bufferSize];\n \n     boolean foundLog \u003d false;\n     String logType \u003d logReader.nextLog();\n     while (logType !\u003d null) {\n       if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n           || desiredLogType.equals(logType)) {\n         long logLength \u003d logReader.getCurrentLogLength();\n-\n+        long logUpLoadTime \u003d logReader.getCurrentLogUpLoadTime();\n         if (foundLog) {\n           html.pre()._(\"\\n\\n\")._();\n         }\n \n         html.p()._(\"Log Type: \" + logType)._();\n+        html.p()._(\"Log UpLoadTime: \" + Times.format(logUpLoadTime))._();\n         html.p()._(\"Log Length: \" + Long.toString(logLength))._();\n \n         long start \u003d logLimits.start \u003c 0\n             ? logLength + logLimits.start : logLimits.start;\n         start \u003d start \u003c 0 ? 0 : start;\n         start \u003d start \u003e logLength ? logLength : start;\n         long end \u003d logLimits.end \u003c 0\n             ? logLength + logLimits.end : logLimits.end;\n         end \u003d end \u003c 0 ? 0 : end;\n         end \u003d end \u003e logLength ? logLength : end;\n         end \u003d end \u003c start ? start : end;\n \n         long toRead \u003d end - start;\n         if (toRead \u003c logLength) {\n             html.p()._(\"Showing \" + toRead + \" bytes of \" + logLength\n                 + \" total. Click \")\n                 .a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                     $(ENTITY_STRING), $(APP_OWNER),\n                     logType, \"?start\u003d0\"), \"here\").\n                     _(\" for the full log.\")._();\n         }\n \n         long totalSkipped \u003d 0;\n         while (totalSkipped \u003c start) {\n           long ret \u003d logReader.skip(start - totalSkipped);\n           if (ret \u003c 0) {\n             throw new IOException( \"Premature EOF from container log\");\n           }\n           totalSkipped +\u003d ret;\n         }\n \n         int len \u003d 0;\n         int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         PRE\u003cHamlet\u003e pre \u003d html.pre();\n \n         while (toRead \u003e 0\n             \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n           pre._(new String(cbuf, 0, len));\n           toRead \u003d toRead - len;\n           currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n         }\n \n         pre._();\n         foundLog \u003d true;\n       }\n \n       logType \u003d logReader.nextLog();\n     }\n \n     return foundLog;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean readContainerLogs(Block html,\n      AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits,\n      String desiredLogType) throws IOException {\n    int bufferSize \u003d 65536;\n    char[] cbuf \u003d new char[bufferSize];\n\n    boolean foundLog \u003d false;\n    String logType \u003d logReader.nextLog();\n    while (logType !\u003d null) {\n      if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n          || desiredLogType.equals(logType)) {\n        long logLength \u003d logReader.getCurrentLogLength();\n        long logUpLoadTime \u003d logReader.getCurrentLogUpLoadTime();\n        if (foundLog) {\n          html.pre()._(\"\\n\\n\")._();\n        }\n\n        html.p()._(\"Log Type: \" + logType)._();\n        html.p()._(\"Log UpLoadTime: \" + Times.format(logUpLoadTime))._();\n        html.p()._(\"Log Length: \" + Long.toString(logLength))._();\n\n        long start \u003d logLimits.start \u003c 0\n            ? logLength + logLimits.start : logLimits.start;\n        start \u003d start \u003c 0 ? 0 : start;\n        start \u003d start \u003e logLength ? logLength : start;\n        long end \u003d logLimits.end \u003c 0\n            ? logLength + logLimits.end : logLimits.end;\n        end \u003d end \u003c 0 ? 0 : end;\n        end \u003d end \u003e logLength ? logLength : end;\n        end \u003d end \u003c start ? start : end;\n\n        long toRead \u003d end - start;\n        if (toRead \u003c logLength) {\n            html.p()._(\"Showing \" + toRead + \" bytes of \" + logLength\n                + \" total. Click \")\n                .a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                    $(ENTITY_STRING), $(APP_OWNER),\n                    logType, \"?start\u003d0\"), \"here\").\n                    _(\" for the full log.\")._();\n        }\n\n        long totalSkipped \u003d 0;\n        while (totalSkipped \u003c start) {\n          long ret \u003d logReader.skip(start - totalSkipped);\n          if (ret \u003c 0) {\n            throw new IOException( \"Premature EOF from container log\");\n          }\n          totalSkipped +\u003d ret;\n        }\n\n        int len \u003d 0;\n        int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n        while (toRead \u003e 0\n            \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n          pre._(new String(cbuf, 0, len));\n          toRead \u003d toRead - len;\n          currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        }\n\n        pre._();\n        foundLog \u003d true;\n      }\n\n      logType \u003d logReader.nextLog();\n    }\n\n    return foundLog;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/log/AggregatedLogsBlock.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private boolean readContainerLogs(Block html,\n      AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits,\n      String desiredLogType) throws IOException {\n    int bufferSize \u003d 65536;\n    char[] cbuf \u003d new char[bufferSize];\n\n    boolean foundLog \u003d false;\n    String logType \u003d logReader.nextLog();\n    while (logType !\u003d null) {\n      if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n          || desiredLogType.equals(logType)) {\n        long logLength \u003d logReader.getCurrentLogLength();\n\n        if (foundLog) {\n          html.pre()._(\"\\n\\n\")._();\n        }\n\n        html.p()._(\"Log Type: \" + logType)._();\n        html.p()._(\"Log Length: \" + Long.toString(logLength))._();\n\n        long start \u003d logLimits.start \u003c 0\n            ? logLength + logLimits.start : logLimits.start;\n        start \u003d start \u003c 0 ? 0 : start;\n        start \u003d start \u003e logLength ? logLength : start;\n        long end \u003d logLimits.end \u003c 0\n            ? logLength + logLimits.end : logLimits.end;\n        end \u003d end \u003c 0 ? 0 : end;\n        end \u003d end \u003e logLength ? logLength : end;\n        end \u003d end \u003c start ? start : end;\n\n        long toRead \u003d end - start;\n        if (toRead \u003c logLength) {\n            html.p()._(\"Showing \" + toRead + \" bytes of \" + logLength\n                + \" total. Click \")\n                .a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                    $(ENTITY_STRING), $(APP_OWNER),\n                    logType, \"?start\u003d0\"), \"here\").\n                    _(\" for the full log.\")._();\n        }\n\n        long totalSkipped \u003d 0;\n        while (totalSkipped \u003c start) {\n          long ret \u003d logReader.skip(start - totalSkipped);\n          if (ret \u003c 0) {\n            throw new IOException( \"Premature EOF from container log\");\n          }\n          totalSkipped +\u003d ret;\n        }\n\n        int len \u003d 0;\n        int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n        while (toRead \u003e 0\n            \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n          pre._(new String(cbuf, 0, len));\n          toRead \u003d toRead - len;\n          currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        }\n\n        pre._();\n        foundLog \u003d true;\n      }\n\n      logType \u003d logReader.nextLog();\n    }\n\n    return foundLog;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/log/AggregatedLogsBlock.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/log/AggregatedLogsBlock.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/log/AggregatedLogsBlock.java"
      }
    },
    "8e576570a99270f2db4bd722f451cde0a5c3e4a4": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-4283. Display tail of aggregated logs by default (Jason Lowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362608 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/12 12:01 PM",
      "commitName": "8e576570a99270f2db4bd722f451cde0a5c3e4a4",
      "commitAuthor": "Robert Joseph Evans",
      "diff": "@@ -0,0 +1,69 @@\n+  private boolean readContainerLogs(Block html,\n+      AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits,\n+      String desiredLogType) throws IOException {\n+    int bufferSize \u003d 65536;\n+    char[] cbuf \u003d new char[bufferSize];\n+\n+    boolean foundLog \u003d false;\n+    String logType \u003d logReader.nextLog();\n+    while (logType !\u003d null) {\n+      if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n+          || desiredLogType.equals(logType)) {\n+        long logLength \u003d logReader.getCurrentLogLength();\n+\n+        if (foundLog) {\n+          html.pre()._(\"\\n\\n\")._();\n+        }\n+\n+        html.p()._(\"Log Type: \" + logType)._();\n+        html.p()._(\"Log Length: \" + Long.toString(logLength))._();\n+\n+        long start \u003d logLimits.start \u003c 0\n+            ? logLength + logLimits.start : logLimits.start;\n+        start \u003d start \u003c 0 ? 0 : start;\n+        start \u003d start \u003e logLength ? logLength : start;\n+        long end \u003d logLimits.end \u003c 0\n+            ? logLength + logLimits.end : logLimits.end;\n+        end \u003d end \u003c 0 ? 0 : end;\n+        end \u003d end \u003e logLength ? logLength : end;\n+        end \u003d end \u003c start ? start : end;\n+\n+        long toRead \u003d end - start;\n+        if (toRead \u003c logLength) {\n+            html.p()._(\"Showing \" + toRead + \" bytes of \" + logLength\n+                + \" total. Click \")\n+                .a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n+                    $(ENTITY_STRING), $(APP_OWNER),\n+                    logType, \"?start\u003d0\"), \"here\").\n+                    _(\" for the full log.\")._();\n+        }\n+\n+        long totalSkipped \u003d 0;\n+        while (totalSkipped \u003c start) {\n+          long ret \u003d logReader.skip(start - totalSkipped);\n+          if (ret \u003c 0) {\n+            throw new IOException( \"Premature EOF from container log\");\n+          }\n+          totalSkipped +\u003d ret;\n+        }\n+\n+        int len \u003d 0;\n+        int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n+        PRE\u003cHamlet\u003e pre \u003d html.pre();\n+\n+        while (toRead \u003e 0\n+            \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n+          pre._(new String(cbuf, 0, len));\n+          toRead \u003d toRead - len;\n+          currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n+        }\n+\n+        pre._();\n+        foundLog \u003d true;\n+      }\n+\n+      logType \u003d logReader.nextLog();\n+    }\n+\n+    return foundLog;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean readContainerLogs(Block html,\n      AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits,\n      String desiredLogType) throws IOException {\n    int bufferSize \u003d 65536;\n    char[] cbuf \u003d new char[bufferSize];\n\n    boolean foundLog \u003d false;\n    String logType \u003d logReader.nextLog();\n    while (logType !\u003d null) {\n      if (desiredLogType \u003d\u003d null || desiredLogType.isEmpty()\n          || desiredLogType.equals(logType)) {\n        long logLength \u003d logReader.getCurrentLogLength();\n\n        if (foundLog) {\n          html.pre()._(\"\\n\\n\")._();\n        }\n\n        html.p()._(\"Log Type: \" + logType)._();\n        html.p()._(\"Log Length: \" + Long.toString(logLength))._();\n\n        long start \u003d logLimits.start \u003c 0\n            ? logLength + logLimits.start : logLimits.start;\n        start \u003d start \u003c 0 ? 0 : start;\n        start \u003d start \u003e logLength ? logLength : start;\n        long end \u003d logLimits.end \u003c 0\n            ? logLength + logLimits.end : logLimits.end;\n        end \u003d end \u003c 0 ? 0 : end;\n        end \u003d end \u003e logLength ? logLength : end;\n        end \u003d end \u003c start ? start : end;\n\n        long toRead \u003d end - start;\n        if (toRead \u003c logLength) {\n            html.p()._(\"Showing \" + toRead + \" bytes of \" + logLength\n                + \" total. Click \")\n                .a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID),\n                    $(ENTITY_STRING), $(APP_OWNER),\n                    logType, \"?start\u003d0\"), \"here\").\n                    _(\" for the full log.\")._();\n        }\n\n        long totalSkipped \u003d 0;\n        while (totalSkipped \u003c start) {\n          long ret \u003d logReader.skip(start - totalSkipped);\n          if (ret \u003c 0) {\n            throw new IOException( \"Premature EOF from container log\");\n          }\n          totalSkipped +\u003d ret;\n        }\n\n        int len \u003d 0;\n        int currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        PRE\u003cHamlet\u003e pre \u003d html.pre();\n\n        while (toRead \u003e 0\n            \u0026\u0026 (len \u003d logReader.read(cbuf, 0, currentToRead)) \u003e 0) {\n          pre._(new String(cbuf, 0, len));\n          toRead \u003d toRead - len;\n          currentToRead \u003d toRead \u003e bufferSize ? bufferSize : (int) toRead;\n        }\n\n        pre._();\n        foundLog \u003d true;\n      }\n\n      logType \u003d logReader.nextLog();\n    }\n\n    return foundLog;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/log/AggregatedLogsBlock.java"
    }
  }
}