{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ConfTest.java",
  "functionName": "main",
  "functionId": "main___args-String[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ConfTest.java",
  "functionStartLine": 229,
  "functionEndLine": 301,
  "numCommitsSeen": 4,
  "timeTaken": 1729,
  "changeHistory": [
    "7a3188d054481b9bd563e337901e93476303ce7f",
    "fe649bb3051f5647073c840d7334a90265ea3f06",
    "04a5f5a6dc88769cca8b1a15057a0756712b5013",
    "5df1fadf874f3f0176f6b36b8ff7317edd63770f"
  ],
  "changeHistoryShort": {
    "7a3188d054481b9bd563e337901e93476303ce7f": "Ybodychange",
    "fe649bb3051f5647073c840d7334a90265ea3f06": "Ybodychange",
    "04a5f5a6dc88769cca8b1a15057a0756712b5013": "Ybodychange",
    "5df1fadf874f3f0176f6b36b8ff7317edd63770f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3188d054481b9bd563e337901e93476303ce7f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.\n",
      "commitDate": "02/05/19 12:58 PM",
      "commitName": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "02/05/18 5:33 AM",
      "commitNameOld": "fe649bb3051f5647073c840d7334a90265ea3f06",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 365.31,
      "commitsBetweenForRepo": 2796,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n   public static void main(String[] args) throws IOException {\n     GenericOptionsParser genericParser \u003d new GenericOptionsParser(args);\n     String[] remainingArgs \u003d genericParser.getRemainingArgs();\n \n     Option conf \u003d OptionBuilder.hasArg().create(\"conffile\");\n     Option help \u003d OptionBuilder.withLongOpt(\"help\").create(\u0027h\u0027);\n     Options opts \u003d new Options().addOption(conf).addOption(help);\n     CommandLineParser specificParser \u003d new GnuParser();\n     CommandLine cmd \u003d null;\n     try {\n       cmd \u003d specificParser.parse(opts, remainingArgs);\n     } catch (MissingArgumentException e) {\n       terminate(1, \"No argument specified for -conffile option\");\n     } catch (ParseException e) {\n       terminate(1, USAGE);\n     }\n     if (cmd \u003d\u003d null) {\n       terminate(1, \"Failed to parse options\");\n     }\n \n     if (cmd.hasOption(\u0027h\u0027)) {\n       terminate(0, USAGE);\n     }\n \n     List\u003cFile\u003e files \u003d new ArrayList\u003cFile\u003e();\n     if (cmd.hasOption(\"conffile\")) {\n       String[] values \u003d cmd.getOptionValues(\"conffile\");\n       for (String value : values) {\n         File confFile \u003d new File(value);\n         if (confFile.isFile()) {\n           files.add(confFile);\n         } else if (confFile.isDirectory()) {\n           files.addAll(Arrays.asList(listFiles(confFile)));\n         } else {\n           terminate(1, confFile.getAbsolutePath()\n               + \" is neither a file nor directory\");\n         }\n       }\n     } else {\n       String confDirName \u003d System.getenv(HADOOP_CONF_DIR);\n       if (confDirName \u003d\u003d null) {\n         terminate(1, HADOOP_CONF_DIR + \" is not defined\");\n       }\n       File confDir \u003d new File(confDirName);\n       if (!confDir.isDirectory()) {\n         terminate(1, HADOOP_CONF_DIR + \" is not a directory\");\n       }\n       files \u003d Arrays.asList(listFiles(confDir));\n     }\n     if (files.isEmpty()) {\n       terminate(1, \"No input file to validate\");\n     }\n \n     boolean ok \u003d true;\n     for (File file : files) {\n       String path \u003d file.getAbsolutePath();\n-      List\u003cString\u003e errors \u003d checkConf(new FileInputStream(file));\n+      List\u003cString\u003e errors \u003d checkConf(Files.newInputStream(file.toPath()));\n       if (errors.isEmpty()) {\n         System.out.println(path + \": valid\");\n       } else {\n         ok \u003d false;\n         System.err.println(path + \":\");\n         for (String error : errors) {\n           System.err.println(\"\\t\" + error);\n         }\n       }\n     }\n     if (ok) {\n       System.out.println(\"OK\");\n     } else {\n       terminate(1, \"Invalid file exists\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws IOException {\n    GenericOptionsParser genericParser \u003d new GenericOptionsParser(args);\n    String[] remainingArgs \u003d genericParser.getRemainingArgs();\n\n    Option conf \u003d OptionBuilder.hasArg().create(\"conffile\");\n    Option help \u003d OptionBuilder.withLongOpt(\"help\").create(\u0027h\u0027);\n    Options opts \u003d new Options().addOption(conf).addOption(help);\n    CommandLineParser specificParser \u003d new GnuParser();\n    CommandLine cmd \u003d null;\n    try {\n      cmd \u003d specificParser.parse(opts, remainingArgs);\n    } catch (MissingArgumentException e) {\n      terminate(1, \"No argument specified for -conffile option\");\n    } catch (ParseException e) {\n      terminate(1, USAGE);\n    }\n    if (cmd \u003d\u003d null) {\n      terminate(1, \"Failed to parse options\");\n    }\n\n    if (cmd.hasOption(\u0027h\u0027)) {\n      terminate(0, USAGE);\n    }\n\n    List\u003cFile\u003e files \u003d new ArrayList\u003cFile\u003e();\n    if (cmd.hasOption(\"conffile\")) {\n      String[] values \u003d cmd.getOptionValues(\"conffile\");\n      for (String value : values) {\n        File confFile \u003d new File(value);\n        if (confFile.isFile()) {\n          files.add(confFile);\n        } else if (confFile.isDirectory()) {\n          files.addAll(Arrays.asList(listFiles(confFile)));\n        } else {\n          terminate(1, confFile.getAbsolutePath()\n              + \" is neither a file nor directory\");\n        }\n      }\n    } else {\n      String confDirName \u003d System.getenv(HADOOP_CONF_DIR);\n      if (confDirName \u003d\u003d null) {\n        terminate(1, HADOOP_CONF_DIR + \" is not defined\");\n      }\n      File confDir \u003d new File(confDirName);\n      if (!confDir.isDirectory()) {\n        terminate(1, HADOOP_CONF_DIR + \" is not a directory\");\n      }\n      files \u003d Arrays.asList(listFiles(confDir));\n    }\n    if (files.isEmpty()) {\n      terminate(1, \"No input file to validate\");\n    }\n\n    boolean ok \u003d true;\n    for (File file : files) {\n      String path \u003d file.getAbsolutePath();\n      List\u003cString\u003e errors \u003d checkConf(Files.newInputStream(file.toPath()));\n      if (errors.isEmpty()) {\n        System.out.println(path + \": valid\");\n      } else {\n        ok \u003d false;\n        System.err.println(path + \":\");\n        for (String error : errors) {\n          System.err.println(\"\\t\" + error);\n        }\n      }\n    }\n    if (ok) {\n      System.out.println(\"OK\");\n    } else {\n      terminate(1, \"Invalid file exists\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ConfTest.java",
      "extendedDetails": {}
    },
    "fe649bb3051f5647073c840d7334a90265ea3f06": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12071. conftest is not documented.\nContributed by Kengo Seki.\n",
      "commitDate": "02/05/18 5:33 AM",
      "commitName": "fe649bb3051f5647073c840d7334a90265ea3f06",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "13/03/17 12:15 AM",
      "commitNameOld": "04a5f5a6dc88769cca8b1a15057a0756712b5013",
      "commitAuthorOld": "Andrey Dyatlov",
      "daysBetweenCommits": 415.22,
      "commitsBetweenForRepo": 3393,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,73 @@\n   public static void main(String[] args) throws IOException {\n     GenericOptionsParser genericParser \u003d new GenericOptionsParser(args);\n     String[] remainingArgs \u003d genericParser.getRemainingArgs();\n \n     Option conf \u003d OptionBuilder.hasArg().create(\"conffile\");\n     Option help \u003d OptionBuilder.withLongOpt(\"help\").create(\u0027h\u0027);\n     Options opts \u003d new Options().addOption(conf).addOption(help);\n     CommandLineParser specificParser \u003d new GnuParser();\n     CommandLine cmd \u003d null;\n     try {\n       cmd \u003d specificParser.parse(opts, remainingArgs);\n     } catch (MissingArgumentException e) {\n       terminate(1, \"No argument specified for -conffile option\");\n     } catch (ParseException e) {\n       terminate(1, USAGE);\n     }\n     if (cmd \u003d\u003d null) {\n       terminate(1, \"Failed to parse options\");\n     }\n \n     if (cmd.hasOption(\u0027h\u0027)) {\n       terminate(0, USAGE);\n     }\n \n     List\u003cFile\u003e files \u003d new ArrayList\u003cFile\u003e();\n     if (cmd.hasOption(\"conffile\")) {\n       String[] values \u003d cmd.getOptionValues(\"conffile\");\n       for (String value : values) {\n         File confFile \u003d new File(value);\n         if (confFile.isFile()) {\n           files.add(confFile);\n         } else if (confFile.isDirectory()) {\n-          for (File file : listFiles(confFile)) {\n-            files.add(file);\n-          }\n+          files.addAll(Arrays.asList(listFiles(confFile)));\n         } else {\n           terminate(1, confFile.getAbsolutePath()\n               + \" is neither a file nor directory\");\n         }\n       }\n     } else {\n       String confDirName \u003d System.getenv(HADOOP_CONF_DIR);\n       if (confDirName \u003d\u003d null) {\n         terminate(1, HADOOP_CONF_DIR + \" is not defined\");\n       }\n       File confDir \u003d new File(confDirName);\n       if (!confDir.isDirectory()) {\n         terminate(1, HADOOP_CONF_DIR + \" is not a directory\");\n       }\n       files \u003d Arrays.asList(listFiles(confDir));\n     }\n     if (files.isEmpty()) {\n       terminate(1, \"No input file to validate\");\n     }\n \n     boolean ok \u003d true;\n     for (File file : files) {\n       String path \u003d file.getAbsolutePath();\n       List\u003cString\u003e errors \u003d checkConf(new FileInputStream(file));\n       if (errors.isEmpty()) {\n         System.out.println(path + \": valid\");\n       } else {\n         ok \u003d false;\n         System.err.println(path + \":\");\n         for (String error : errors) {\n           System.err.println(\"\\t\" + error);\n         }\n       }\n     }\n     if (ok) {\n       System.out.println(\"OK\");\n     } else {\n       terminate(1, \"Invalid file exists\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws IOException {\n    GenericOptionsParser genericParser \u003d new GenericOptionsParser(args);\n    String[] remainingArgs \u003d genericParser.getRemainingArgs();\n\n    Option conf \u003d OptionBuilder.hasArg().create(\"conffile\");\n    Option help \u003d OptionBuilder.withLongOpt(\"help\").create(\u0027h\u0027);\n    Options opts \u003d new Options().addOption(conf).addOption(help);\n    CommandLineParser specificParser \u003d new GnuParser();\n    CommandLine cmd \u003d null;\n    try {\n      cmd \u003d specificParser.parse(opts, remainingArgs);\n    } catch (MissingArgumentException e) {\n      terminate(1, \"No argument specified for -conffile option\");\n    } catch (ParseException e) {\n      terminate(1, USAGE);\n    }\n    if (cmd \u003d\u003d null) {\n      terminate(1, \"Failed to parse options\");\n    }\n\n    if (cmd.hasOption(\u0027h\u0027)) {\n      terminate(0, USAGE);\n    }\n\n    List\u003cFile\u003e files \u003d new ArrayList\u003cFile\u003e();\n    if (cmd.hasOption(\"conffile\")) {\n      String[] values \u003d cmd.getOptionValues(\"conffile\");\n      for (String value : values) {\n        File confFile \u003d new File(value);\n        if (confFile.isFile()) {\n          files.add(confFile);\n        } else if (confFile.isDirectory()) {\n          files.addAll(Arrays.asList(listFiles(confFile)));\n        } else {\n          terminate(1, confFile.getAbsolutePath()\n              + \" is neither a file nor directory\");\n        }\n      }\n    } else {\n      String confDirName \u003d System.getenv(HADOOP_CONF_DIR);\n      if (confDirName \u003d\u003d null) {\n        terminate(1, HADOOP_CONF_DIR + \" is not defined\");\n      }\n      File confDir \u003d new File(confDirName);\n      if (!confDir.isDirectory()) {\n        terminate(1, HADOOP_CONF_DIR + \" is not a directory\");\n      }\n      files \u003d Arrays.asList(listFiles(confDir));\n    }\n    if (files.isEmpty()) {\n      terminate(1, \"No input file to validate\");\n    }\n\n    boolean ok \u003d true;\n    for (File file : files) {\n      String path \u003d file.getAbsolutePath();\n      List\u003cString\u003e errors \u003d checkConf(new FileInputStream(file));\n      if (errors.isEmpty()) {\n        System.out.println(path + \": valid\");\n      } else {\n        ok \u003d false;\n        System.err.println(path + \":\");\n        for (String error : errors) {\n          System.err.println(\"\\t\" + error);\n        }\n      }\n    }\n    if (ok) {\n      System.out.println(\"OK\");\n    } else {\n      terminate(1, \"Invalid file exists\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ConfTest.java",
      "extendedDetails": {}
    },
    "04a5f5a6dc88769cca8b1a15057a0756712b5013": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14156. Fix grammar error in ConfTest.java.\n\nThis closes #187\n\nSigned-off-by: Akira Ajisaka \u003caajisaka@apache.org\u003e\n",
      "commitDate": "13/03/17 12:15 AM",
      "commitName": "04a5f5a6dc88769cca8b1a15057a0756712b5013",
      "commitAuthor": "Andrey Dyatlov",
      "commitDateOld": "28/05/15 11:01 AM",
      "commitNameOld": "5df1fadf874f3f0176f6b36b8ff7317edd63770f",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 654.55,
      "commitsBetweenForRepo": 4415,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,75 @@\n   public static void main(String[] args) throws IOException {\n     GenericOptionsParser genericParser \u003d new GenericOptionsParser(args);\n     String[] remainingArgs \u003d genericParser.getRemainingArgs();\n \n     Option conf \u003d OptionBuilder.hasArg().create(\"conffile\");\n     Option help \u003d OptionBuilder.withLongOpt(\"help\").create(\u0027h\u0027);\n     Options opts \u003d new Options().addOption(conf).addOption(help);\n     CommandLineParser specificParser \u003d new GnuParser();\n     CommandLine cmd \u003d null;\n     try {\n       cmd \u003d specificParser.parse(opts, remainingArgs);\n     } catch (MissingArgumentException e) {\n       terminate(1, \"No argument specified for -conffile option\");\n     } catch (ParseException e) {\n       terminate(1, USAGE);\n     }\n     if (cmd \u003d\u003d null) {\n       terminate(1, \"Failed to parse options\");\n     }\n \n     if (cmd.hasOption(\u0027h\u0027)) {\n       terminate(0, USAGE);\n     }\n \n     List\u003cFile\u003e files \u003d new ArrayList\u003cFile\u003e();\n     if (cmd.hasOption(\"conffile\")) {\n       String[] values \u003d cmd.getOptionValues(\"conffile\");\n       for (String value : values) {\n         File confFile \u003d new File(value);\n         if (confFile.isFile()) {\n           files.add(confFile);\n         } else if (confFile.isDirectory()) {\n           for (File file : listFiles(confFile)) {\n             files.add(file);\n           }\n         } else {\n           terminate(1, confFile.getAbsolutePath()\n               + \" is neither a file nor directory\");\n         }\n       }\n     } else {\n       String confDirName \u003d System.getenv(HADOOP_CONF_DIR);\n       if (confDirName \u003d\u003d null) {\n-        terminate(1, HADOOP_CONF_DIR + \" does not defined\");\n+        terminate(1, HADOOP_CONF_DIR + \" is not defined\");\n       }\n       File confDir \u003d new File(confDirName);\n       if (!confDir.isDirectory()) {\n         terminate(1, HADOOP_CONF_DIR + \" is not a directory\");\n       }\n       files \u003d Arrays.asList(listFiles(confDir));\n     }\n     if (files.isEmpty()) {\n       terminate(1, \"No input file to validate\");\n     }\n \n     boolean ok \u003d true;\n     for (File file : files) {\n       String path \u003d file.getAbsolutePath();\n       List\u003cString\u003e errors \u003d checkConf(new FileInputStream(file));\n       if (errors.isEmpty()) {\n         System.out.println(path + \": valid\");\n       } else {\n         ok \u003d false;\n         System.err.println(path + \":\");\n         for (String error : errors) {\n           System.err.println(\"\\t\" + error);\n         }\n       }\n     }\n     if (ok) {\n       System.out.println(\"OK\");\n     } else {\n       terminate(1, \"Invalid file exists\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws IOException {\n    GenericOptionsParser genericParser \u003d new GenericOptionsParser(args);\n    String[] remainingArgs \u003d genericParser.getRemainingArgs();\n\n    Option conf \u003d OptionBuilder.hasArg().create(\"conffile\");\n    Option help \u003d OptionBuilder.withLongOpt(\"help\").create(\u0027h\u0027);\n    Options opts \u003d new Options().addOption(conf).addOption(help);\n    CommandLineParser specificParser \u003d new GnuParser();\n    CommandLine cmd \u003d null;\n    try {\n      cmd \u003d specificParser.parse(opts, remainingArgs);\n    } catch (MissingArgumentException e) {\n      terminate(1, \"No argument specified for -conffile option\");\n    } catch (ParseException e) {\n      terminate(1, USAGE);\n    }\n    if (cmd \u003d\u003d null) {\n      terminate(1, \"Failed to parse options\");\n    }\n\n    if (cmd.hasOption(\u0027h\u0027)) {\n      terminate(0, USAGE);\n    }\n\n    List\u003cFile\u003e files \u003d new ArrayList\u003cFile\u003e();\n    if (cmd.hasOption(\"conffile\")) {\n      String[] values \u003d cmd.getOptionValues(\"conffile\");\n      for (String value : values) {\n        File confFile \u003d new File(value);\n        if (confFile.isFile()) {\n          files.add(confFile);\n        } else if (confFile.isDirectory()) {\n          for (File file : listFiles(confFile)) {\n            files.add(file);\n          }\n        } else {\n          terminate(1, confFile.getAbsolutePath()\n              + \" is neither a file nor directory\");\n        }\n      }\n    } else {\n      String confDirName \u003d System.getenv(HADOOP_CONF_DIR);\n      if (confDirName \u003d\u003d null) {\n        terminate(1, HADOOP_CONF_DIR + \" is not defined\");\n      }\n      File confDir \u003d new File(confDirName);\n      if (!confDir.isDirectory()) {\n        terminate(1, HADOOP_CONF_DIR + \" is not a directory\");\n      }\n      files \u003d Arrays.asList(listFiles(confDir));\n    }\n    if (files.isEmpty()) {\n      terminate(1, \"No input file to validate\");\n    }\n\n    boolean ok \u003d true;\n    for (File file : files) {\n      String path \u003d file.getAbsolutePath();\n      List\u003cString\u003e errors \u003d checkConf(new FileInputStream(file));\n      if (errors.isEmpty()) {\n        System.out.println(path + \": valid\");\n      } else {\n        ok \u003d false;\n        System.err.println(path + \":\");\n        for (String error : errors) {\n          System.err.println(\"\\t\" + error);\n        }\n      }\n    }\n    if (ok) {\n      System.out.println(\"OK\");\n    } else {\n      terminate(1, \"Invalid file exists\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ConfTest.java",
      "extendedDetails": {}
    },
    "5df1fadf874f3f0176f6b36b8ff7317edd63770f": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7947. Validate XMLs if a relevant tool is available, when using scripts (Kengo Seki via aw)\n",
      "commitDate": "28/05/15 11:01 AM",
      "commitName": "5df1fadf874f3f0176f6b36b8ff7317edd63770f",
      "commitAuthor": "Allen Wittenauer",
      "diff": "@@ -0,0 +1,75 @@\n+  public static void main(String[] args) throws IOException {\n+    GenericOptionsParser genericParser \u003d new GenericOptionsParser(args);\n+    String[] remainingArgs \u003d genericParser.getRemainingArgs();\n+\n+    Option conf \u003d OptionBuilder.hasArg().create(\"conffile\");\n+    Option help \u003d OptionBuilder.withLongOpt(\"help\").create(\u0027h\u0027);\n+    Options opts \u003d new Options().addOption(conf).addOption(help);\n+    CommandLineParser specificParser \u003d new GnuParser();\n+    CommandLine cmd \u003d null;\n+    try {\n+      cmd \u003d specificParser.parse(opts, remainingArgs);\n+    } catch (MissingArgumentException e) {\n+      terminate(1, \"No argument specified for -conffile option\");\n+    } catch (ParseException e) {\n+      terminate(1, USAGE);\n+    }\n+    if (cmd \u003d\u003d null) {\n+      terminate(1, \"Failed to parse options\");\n+    }\n+\n+    if (cmd.hasOption(\u0027h\u0027)) {\n+      terminate(0, USAGE);\n+    }\n+\n+    List\u003cFile\u003e files \u003d new ArrayList\u003cFile\u003e();\n+    if (cmd.hasOption(\"conffile\")) {\n+      String[] values \u003d cmd.getOptionValues(\"conffile\");\n+      for (String value : values) {\n+        File confFile \u003d new File(value);\n+        if (confFile.isFile()) {\n+          files.add(confFile);\n+        } else if (confFile.isDirectory()) {\n+          for (File file : listFiles(confFile)) {\n+            files.add(file);\n+          }\n+        } else {\n+          terminate(1, confFile.getAbsolutePath()\n+              + \" is neither a file nor directory\");\n+        }\n+      }\n+    } else {\n+      String confDirName \u003d System.getenv(HADOOP_CONF_DIR);\n+      if (confDirName \u003d\u003d null) {\n+        terminate(1, HADOOP_CONF_DIR + \" does not defined\");\n+      }\n+      File confDir \u003d new File(confDirName);\n+      if (!confDir.isDirectory()) {\n+        terminate(1, HADOOP_CONF_DIR + \" is not a directory\");\n+      }\n+      files \u003d Arrays.asList(listFiles(confDir));\n+    }\n+    if (files.isEmpty()) {\n+      terminate(1, \"No input file to validate\");\n+    }\n+\n+    boolean ok \u003d true;\n+    for (File file : files) {\n+      String path \u003d file.getAbsolutePath();\n+      List\u003cString\u003e errors \u003d checkConf(new FileInputStream(file));\n+      if (errors.isEmpty()) {\n+        System.out.println(path + \": valid\");\n+      } else {\n+        ok \u003d false;\n+        System.err.println(path + \":\");\n+        for (String error : errors) {\n+          System.err.println(\"\\t\" + error);\n+        }\n+      }\n+    }\n+    if (ok) {\n+      System.out.println(\"OK\");\n+    } else {\n+      terminate(1, \"Invalid file exists\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws IOException {\n    GenericOptionsParser genericParser \u003d new GenericOptionsParser(args);\n    String[] remainingArgs \u003d genericParser.getRemainingArgs();\n\n    Option conf \u003d OptionBuilder.hasArg().create(\"conffile\");\n    Option help \u003d OptionBuilder.withLongOpt(\"help\").create(\u0027h\u0027);\n    Options opts \u003d new Options().addOption(conf).addOption(help);\n    CommandLineParser specificParser \u003d new GnuParser();\n    CommandLine cmd \u003d null;\n    try {\n      cmd \u003d specificParser.parse(opts, remainingArgs);\n    } catch (MissingArgumentException e) {\n      terminate(1, \"No argument specified for -conffile option\");\n    } catch (ParseException e) {\n      terminate(1, USAGE);\n    }\n    if (cmd \u003d\u003d null) {\n      terminate(1, \"Failed to parse options\");\n    }\n\n    if (cmd.hasOption(\u0027h\u0027)) {\n      terminate(0, USAGE);\n    }\n\n    List\u003cFile\u003e files \u003d new ArrayList\u003cFile\u003e();\n    if (cmd.hasOption(\"conffile\")) {\n      String[] values \u003d cmd.getOptionValues(\"conffile\");\n      for (String value : values) {\n        File confFile \u003d new File(value);\n        if (confFile.isFile()) {\n          files.add(confFile);\n        } else if (confFile.isDirectory()) {\n          for (File file : listFiles(confFile)) {\n            files.add(file);\n          }\n        } else {\n          terminate(1, confFile.getAbsolutePath()\n              + \" is neither a file nor directory\");\n        }\n      }\n    } else {\n      String confDirName \u003d System.getenv(HADOOP_CONF_DIR);\n      if (confDirName \u003d\u003d null) {\n        terminate(1, HADOOP_CONF_DIR + \" does not defined\");\n      }\n      File confDir \u003d new File(confDirName);\n      if (!confDir.isDirectory()) {\n        terminate(1, HADOOP_CONF_DIR + \" is not a directory\");\n      }\n      files \u003d Arrays.asList(listFiles(confDir));\n    }\n    if (files.isEmpty()) {\n      terminate(1, \"No input file to validate\");\n    }\n\n    boolean ok \u003d true;\n    for (File file : files) {\n      String path \u003d file.getAbsolutePath();\n      List\u003cString\u003e errors \u003d checkConf(new FileInputStream(file));\n      if (errors.isEmpty()) {\n        System.out.println(path + \": valid\");\n      } else {\n        ok \u003d false;\n        System.err.println(path + \":\");\n        for (String error : errors) {\n          System.err.println(\"\\t\" + error);\n        }\n      }\n    }\n    if (ok) {\n      System.out.println(\"OK\");\n    } else {\n      terminate(1, \"Invalid file exists\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ConfTest.java"
    }
  }
}