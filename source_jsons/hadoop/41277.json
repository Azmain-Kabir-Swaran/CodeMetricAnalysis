{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulingPolicy.java",
  "functionName": "parse",
  "functionId": "parse___policy-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingPolicy.java",
  "functionStartLine": 91,
  "functionEndLine": 115,
  "numCommitsSeen": 20,
  "timeTaken": 2871,
  "changeHistory": [
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
    "9cedad11d8d2197a54732667a15344983de5c437",
    "946456c6d88780abe0251b098dd771e9e1e93ab3",
    "c1b635ed4826b0f9c8574d262dfeb13fa5ceb650",
    "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
    "e74d1f0435c2bcdfae2c26f6c340a5a487d20aa3"
  ],
  "changeHistoryShort": {
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": "Ybodychange",
    "9cedad11d8d2197a54732667a15344983de5c437": "Ybodychange",
    "946456c6d88780abe0251b098dd771e9e1e93ab3": "Ybodychange",
    "c1b635ed4826b0f9c8574d262dfeb13fa5ceb650": "Ybodychange",
    "df55edd5dec9c944a6c38f08d6f1f0fdb901c880": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange,Yparameterchange)",
    "e74d1f0435c2bcdfae2c26f6c340a5a487d20aa3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "02/03/15 9:17 PM",
      "commitName": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "24/02/15 7:32 AM",
      "commitNameOld": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 6.57,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public static SchedulingPolicy parse(String policy)\n       throws AllocationConfigurationException {\n     @SuppressWarnings(\"rawtypes\")\n     Class clazz;\n-    String text \u003d policy.toLowerCase();\n+    String text \u003d StringUtils.toLowerCase(policy);\n     if (text.equalsIgnoreCase(FairSharePolicy.NAME)) {\n       clazz \u003d FairSharePolicy.class;\n     } else if (text.equalsIgnoreCase(FifoPolicy.NAME)) {\n       clazz \u003d FifoPolicy.class;\n     } else if (text.equalsIgnoreCase(DominantResourceFairnessPolicy.NAME)) {\n       clazz \u003d DominantResourceFairnessPolicy.class;\n     } else {\n       try {\n         clazz \u003d Class.forName(policy);\n       } catch (ClassNotFoundException cnfe) {\n         throw new AllocationConfigurationException(policy\n             + \" SchedulingPolicy class not found!\");\n       }\n     }\n     if (!SchedulingPolicy.class.isAssignableFrom(clazz)) {\n       throw new AllocationConfigurationException(policy\n           + \" does not extend SchedulingPolicy\");\n     }\n     return getInstance(clazz);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static SchedulingPolicy parse(String policy)\n      throws AllocationConfigurationException {\n    @SuppressWarnings(\"rawtypes\")\n    Class clazz;\n    String text \u003d StringUtils.toLowerCase(policy);\n    if (text.equalsIgnoreCase(FairSharePolicy.NAME)) {\n      clazz \u003d FairSharePolicy.class;\n    } else if (text.equalsIgnoreCase(FifoPolicy.NAME)) {\n      clazz \u003d FifoPolicy.class;\n    } else if (text.equalsIgnoreCase(DominantResourceFairnessPolicy.NAME)) {\n      clazz \u003d DominantResourceFairnessPolicy.class;\n    } else {\n      try {\n        clazz \u003d Class.forName(policy);\n      } catch (ClassNotFoundException cnfe) {\n        throw new AllocationConfigurationException(policy\n            + \" SchedulingPolicy class not found!\");\n      }\n    }\n    if (!SchedulingPolicy.class.isAssignableFrom(clazz)) {\n      throw new AllocationConfigurationException(policy\n          + \" does not extend SchedulingPolicy\");\n    }\n    return getInstance(clazz);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingPolicy.java",
      "extendedDetails": {}
    },
    "9cedad11d8d2197a54732667a15344983de5c437": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\"\n\nThis reverts commit 946456c6d88780abe0251b098dd771e9e1e93ab3.\n\nConflicts:\n\thadoop-common-project/hadoop-common/CHANGES.txt\n\thadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/QuotaByStorageTypeEntry.java\n",
      "commitDate": "24/02/15 7:32 AM",
      "commitName": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "18/02/15 8:06 PM",
      "commitNameOld": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 5.48,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public static SchedulingPolicy parse(String policy)\n       throws AllocationConfigurationException {\n     @SuppressWarnings(\"rawtypes\")\n     Class clazz;\n-    String text \u003d policy.toLowerCase(Locale.ENGLISH);\n+    String text \u003d policy.toLowerCase();\n     if (text.equalsIgnoreCase(FairSharePolicy.NAME)) {\n       clazz \u003d FairSharePolicy.class;\n     } else if (text.equalsIgnoreCase(FifoPolicy.NAME)) {\n       clazz \u003d FifoPolicy.class;\n     } else if (text.equalsIgnoreCase(DominantResourceFairnessPolicy.NAME)) {\n       clazz \u003d DominantResourceFairnessPolicy.class;\n     } else {\n       try {\n         clazz \u003d Class.forName(policy);\n       } catch (ClassNotFoundException cnfe) {\n         throw new AllocationConfigurationException(policy\n             + \" SchedulingPolicy class not found!\");\n       }\n     }\n     if (!SchedulingPolicy.class.isAssignableFrom(clazz)) {\n       throw new AllocationConfigurationException(policy\n           + \" does not extend SchedulingPolicy\");\n     }\n     return getInstance(clazz);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static SchedulingPolicy parse(String policy)\n      throws AllocationConfigurationException {\n    @SuppressWarnings(\"rawtypes\")\n    Class clazz;\n    String text \u003d policy.toLowerCase();\n    if (text.equalsIgnoreCase(FairSharePolicy.NAME)) {\n      clazz \u003d FairSharePolicy.class;\n    } else if (text.equalsIgnoreCase(FifoPolicy.NAME)) {\n      clazz \u003d FifoPolicy.class;\n    } else if (text.equalsIgnoreCase(DominantResourceFairnessPolicy.NAME)) {\n      clazz \u003d DominantResourceFairnessPolicy.class;\n    } else {\n      try {\n        clazz \u003d Class.forName(policy);\n      } catch (ClassNotFoundException cnfe) {\n        throw new AllocationConfigurationException(policy\n            + \" SchedulingPolicy class not found!\");\n      }\n    }\n    if (!SchedulingPolicy.class.isAssignableFrom(clazz)) {\n      throw new AllocationConfigurationException(policy\n          + \" does not extend SchedulingPolicy\");\n    }\n    return getInstance(clazz);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingPolicy.java",
      "extendedDetails": {}
    },
    "946456c6d88780abe0251b098dd771e9e1e93ab3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "18/02/15 8:06 PM",
      "commitName": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "29/12/14 9:59 AM",
      "commitNameOld": "241d3b3a50c6af92f023d8b2c24598f4813f4674",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 51.42,
      "commitsBetweenForRepo": 424,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public static SchedulingPolicy parse(String policy)\n       throws AllocationConfigurationException {\n     @SuppressWarnings(\"rawtypes\")\n     Class clazz;\n-    String text \u003d policy.toLowerCase();\n+    String text \u003d policy.toLowerCase(Locale.ENGLISH);\n     if (text.equalsIgnoreCase(FairSharePolicy.NAME)) {\n       clazz \u003d FairSharePolicy.class;\n     } else if (text.equalsIgnoreCase(FifoPolicy.NAME)) {\n       clazz \u003d FifoPolicy.class;\n     } else if (text.equalsIgnoreCase(DominantResourceFairnessPolicy.NAME)) {\n       clazz \u003d DominantResourceFairnessPolicy.class;\n     } else {\n       try {\n         clazz \u003d Class.forName(policy);\n       } catch (ClassNotFoundException cnfe) {\n         throw new AllocationConfigurationException(policy\n             + \" SchedulingPolicy class not found!\");\n       }\n     }\n     if (!SchedulingPolicy.class.isAssignableFrom(clazz)) {\n       throw new AllocationConfigurationException(policy\n           + \" does not extend SchedulingPolicy\");\n     }\n     return getInstance(clazz);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static SchedulingPolicy parse(String policy)\n      throws AllocationConfigurationException {\n    @SuppressWarnings(\"rawtypes\")\n    Class clazz;\n    String text \u003d policy.toLowerCase(Locale.ENGLISH);\n    if (text.equalsIgnoreCase(FairSharePolicy.NAME)) {\n      clazz \u003d FairSharePolicy.class;\n    } else if (text.equalsIgnoreCase(FifoPolicy.NAME)) {\n      clazz \u003d FifoPolicy.class;\n    } else if (text.equalsIgnoreCase(DominantResourceFairnessPolicy.NAME)) {\n      clazz \u003d DominantResourceFairnessPolicy.class;\n    } else {\n      try {\n        clazz \u003d Class.forName(policy);\n      } catch (ClassNotFoundException cnfe) {\n        throw new AllocationConfigurationException(policy\n            + \" SchedulingPolicy class not found!\");\n      }\n    }\n    if (!SchedulingPolicy.class.isAssignableFrom(clazz)) {\n      throw new AllocationConfigurationException(policy\n          + \" does not extend SchedulingPolicy\");\n    }\n    return getInstance(clazz);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingPolicy.java",
      "extendedDetails": {}
    },
    "c1b635ed4826b0f9c8574d262dfeb13fa5ceb650": {
      "type": "Ybodychange",
      "commitMessage": "YARN-326. Add multi-resource scheduling to the fair scheduler. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489070 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 10:33 AM",
      "commitName": "c1b635ed4826b0f9c8574d262dfeb13fa5ceb650",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "09/05/13 2:47 PM",
      "commitNameOld": "c7bfd17ad1cbfdb411bdf26572084efc2fb8dee0",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 24.82,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n   public static SchedulingPolicy parse(String policy)\n       throws AllocationConfigurationException {\n     @SuppressWarnings(\"rawtypes\")\n     Class clazz;\n     String text \u003d policy.toLowerCase();\n-    if (text.equals(\"fair\")) {\n+    if (text.equalsIgnoreCase(FairSharePolicy.NAME)) {\n       clazz \u003d FairSharePolicy.class;\n-    } else if (text.equals(\"fifo\")) {\n+    } else if (text.equalsIgnoreCase(FifoPolicy.NAME)) {\n       clazz \u003d FifoPolicy.class;\n+    } else if (text.equalsIgnoreCase(DominantResourceFairnessPolicy.NAME)) {\n+      clazz \u003d DominantResourceFairnessPolicy.class;\n     } else {\n       try {\n         clazz \u003d Class.forName(policy);\n       } catch (ClassNotFoundException cnfe) {\n         throw new AllocationConfigurationException(policy\n             + \" SchedulingPolicy class not found!\");\n       }\n     }\n     if (!SchedulingPolicy.class.isAssignableFrom(clazz)) {\n       throw new AllocationConfigurationException(policy\n           + \" does not extend SchedulingPolicy\");\n     }\n     return getInstance(clazz);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static SchedulingPolicy parse(String policy)\n      throws AllocationConfigurationException {\n    @SuppressWarnings(\"rawtypes\")\n    Class clazz;\n    String text \u003d policy.toLowerCase();\n    if (text.equalsIgnoreCase(FairSharePolicy.NAME)) {\n      clazz \u003d FairSharePolicy.class;\n    } else if (text.equalsIgnoreCase(FifoPolicy.NAME)) {\n      clazz \u003d FifoPolicy.class;\n    } else if (text.equalsIgnoreCase(DominantResourceFairnessPolicy.NAME)) {\n      clazz \u003d DominantResourceFairnessPolicy.class;\n    } else {\n      try {\n        clazz \u003d Class.forName(policy);\n      } catch (ClassNotFoundException cnfe) {\n        throw new AllocationConfigurationException(policy\n            + \" SchedulingPolicy class not found!\");\n      }\n    }\n    if (!SchedulingPolicy.class.isAssignableFrom(clazz)) {\n      throw new AllocationConfigurationException(policy\n          + \" does not extend SchedulingPolicy\");\n    }\n    return getInstance(clazz);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingPolicy.java",
      "extendedDetails": {}
    },
    "df55edd5dec9c944a6c38f08d6f1f0fdb901c880": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-482. FS: Extend SchedulingMode to intermediate queues. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469506 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/13 11:11 AM",
      "commitName": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-482. FS: Extend SchedulingMode to intermediate queues. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469506 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/04/13 11:11 AM",
          "commitName": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "18/04/13 10:49 AM",
          "commitNameOld": "d219c904d32641c70f80f5d33c99cc81c79cf055",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  public static SchedulingMode parse(String mode)\n+  public static SchedulingPolicy parse(String policy)\n       throws AllocationConfigurationException {\n     @SuppressWarnings(\"rawtypes\")\n     Class clazz;\n-    String text \u003d mode.toLowerCase();\n+    String text \u003d policy.toLowerCase();\n     if (text.equals(\"fair\")) {\n-      clazz \u003d FairSchedulingMode.class;\n+      clazz \u003d FairSharePolicy.class;\n     } else if (text.equals(\"fifo\")) {\n-      clazz \u003d FifoSchedulingMode.class;\n+      clazz \u003d FifoPolicy.class;\n     } else {\n       try {\n-        clazz \u003d Class.forName(mode);\n+        clazz \u003d Class.forName(policy);\n       } catch (ClassNotFoundException cnfe) {\n-        throw new AllocationConfigurationException(mode\n-            + \" SchedulingMode class not found!\");\n+        throw new AllocationConfigurationException(policy\n+            + \" SchedulingPolicy class not found!\");\n       }\n     }\n-    if (!SchedulingMode.class.isAssignableFrom(clazz)) {\n-      throw new AllocationConfigurationException(mode\n-          + \" does not extend SchedulingMode\");\n+    if (!SchedulingPolicy.class.isAssignableFrom(clazz)) {\n+      throw new AllocationConfigurationException(policy\n+          + \" does not extend SchedulingPolicy\");\n     }\n     return getInstance(clazz);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static SchedulingPolicy parse(String policy)\n      throws AllocationConfigurationException {\n    @SuppressWarnings(\"rawtypes\")\n    Class clazz;\n    String text \u003d policy.toLowerCase();\n    if (text.equals(\"fair\")) {\n      clazz \u003d FairSharePolicy.class;\n    } else if (text.equals(\"fifo\")) {\n      clazz \u003d FifoPolicy.class;\n    } else {\n      try {\n        clazz \u003d Class.forName(policy);\n      } catch (ClassNotFoundException cnfe) {\n        throw new AllocationConfigurationException(policy\n            + \" SchedulingPolicy class not found!\");\n      }\n    }\n    if (!SchedulingPolicy.class.isAssignableFrom(clazz)) {\n      throw new AllocationConfigurationException(policy\n          + \" does not extend SchedulingPolicy\");\n    }\n    return getInstance(clazz);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingPolicy.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingMode.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingPolicy.java",
            "oldMethodName": "parse",
            "newMethodName": "parse"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-482. FS: Extend SchedulingMode to intermediate queues. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469506 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/04/13 11:11 AM",
          "commitName": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "18/04/13 10:49 AM",
          "commitNameOld": "d219c904d32641c70f80f5d33c99cc81c79cf055",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  public static SchedulingMode parse(String mode)\n+  public static SchedulingPolicy parse(String policy)\n       throws AllocationConfigurationException {\n     @SuppressWarnings(\"rawtypes\")\n     Class clazz;\n-    String text \u003d mode.toLowerCase();\n+    String text \u003d policy.toLowerCase();\n     if (text.equals(\"fair\")) {\n-      clazz \u003d FairSchedulingMode.class;\n+      clazz \u003d FairSharePolicy.class;\n     } else if (text.equals(\"fifo\")) {\n-      clazz \u003d FifoSchedulingMode.class;\n+      clazz \u003d FifoPolicy.class;\n     } else {\n       try {\n-        clazz \u003d Class.forName(mode);\n+        clazz \u003d Class.forName(policy);\n       } catch (ClassNotFoundException cnfe) {\n-        throw new AllocationConfigurationException(mode\n-            + \" SchedulingMode class not found!\");\n+        throw new AllocationConfigurationException(policy\n+            + \" SchedulingPolicy class not found!\");\n       }\n     }\n-    if (!SchedulingMode.class.isAssignableFrom(clazz)) {\n-      throw new AllocationConfigurationException(mode\n-          + \" does not extend SchedulingMode\");\n+    if (!SchedulingPolicy.class.isAssignableFrom(clazz)) {\n+      throw new AllocationConfigurationException(policy\n+          + \" does not extend SchedulingPolicy\");\n     }\n     return getInstance(clazz);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static SchedulingPolicy parse(String policy)\n      throws AllocationConfigurationException {\n    @SuppressWarnings(\"rawtypes\")\n    Class clazz;\n    String text \u003d policy.toLowerCase();\n    if (text.equals(\"fair\")) {\n      clazz \u003d FairSharePolicy.class;\n    } else if (text.equals(\"fifo\")) {\n      clazz \u003d FifoPolicy.class;\n    } else {\n      try {\n        clazz \u003d Class.forName(policy);\n      } catch (ClassNotFoundException cnfe) {\n        throw new AllocationConfigurationException(policy\n            + \" SchedulingPolicy class not found!\");\n      }\n    }\n    if (!SchedulingPolicy.class.isAssignableFrom(clazz)) {\n      throw new AllocationConfigurationException(policy\n          + \" does not extend SchedulingPolicy\");\n    }\n    return getInstance(clazz);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingPolicy.java",
          "extendedDetails": {
            "oldValue": "SchedulingMode",
            "newValue": "SchedulingPolicy"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-482. FS: Extend SchedulingMode to intermediate queues. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469506 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/04/13 11:11 AM",
          "commitName": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "18/04/13 10:49 AM",
          "commitNameOld": "d219c904d32641c70f80f5d33c99cc81c79cf055",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  public static SchedulingMode parse(String mode)\n+  public static SchedulingPolicy parse(String policy)\n       throws AllocationConfigurationException {\n     @SuppressWarnings(\"rawtypes\")\n     Class clazz;\n-    String text \u003d mode.toLowerCase();\n+    String text \u003d policy.toLowerCase();\n     if (text.equals(\"fair\")) {\n-      clazz \u003d FairSchedulingMode.class;\n+      clazz \u003d FairSharePolicy.class;\n     } else if (text.equals(\"fifo\")) {\n-      clazz \u003d FifoSchedulingMode.class;\n+      clazz \u003d FifoPolicy.class;\n     } else {\n       try {\n-        clazz \u003d Class.forName(mode);\n+        clazz \u003d Class.forName(policy);\n       } catch (ClassNotFoundException cnfe) {\n-        throw new AllocationConfigurationException(mode\n-            + \" SchedulingMode class not found!\");\n+        throw new AllocationConfigurationException(policy\n+            + \" SchedulingPolicy class not found!\");\n       }\n     }\n-    if (!SchedulingMode.class.isAssignableFrom(clazz)) {\n-      throw new AllocationConfigurationException(mode\n-          + \" does not extend SchedulingMode\");\n+    if (!SchedulingPolicy.class.isAssignableFrom(clazz)) {\n+      throw new AllocationConfigurationException(policy\n+          + \" does not extend SchedulingPolicy\");\n     }\n     return getInstance(clazz);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static SchedulingPolicy parse(String policy)\n      throws AllocationConfigurationException {\n    @SuppressWarnings(\"rawtypes\")\n    Class clazz;\n    String text \u003d policy.toLowerCase();\n    if (text.equals(\"fair\")) {\n      clazz \u003d FairSharePolicy.class;\n    } else if (text.equals(\"fifo\")) {\n      clazz \u003d FifoPolicy.class;\n    } else {\n      try {\n        clazz \u003d Class.forName(policy);\n      } catch (ClassNotFoundException cnfe) {\n        throw new AllocationConfigurationException(policy\n            + \" SchedulingPolicy class not found!\");\n      }\n    }\n    if (!SchedulingPolicy.class.isAssignableFrom(clazz)) {\n      throw new AllocationConfigurationException(policy\n          + \" does not extend SchedulingPolicy\");\n    }\n    return getInstance(clazz);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingPolicy.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-482. FS: Extend SchedulingMode to intermediate queues. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469506 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/04/13 11:11 AM",
          "commitName": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "18/04/13 10:49 AM",
          "commitNameOld": "d219c904d32641c70f80f5d33c99cc81c79cf055",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  public static SchedulingMode parse(String mode)\n+  public static SchedulingPolicy parse(String policy)\n       throws AllocationConfigurationException {\n     @SuppressWarnings(\"rawtypes\")\n     Class clazz;\n-    String text \u003d mode.toLowerCase();\n+    String text \u003d policy.toLowerCase();\n     if (text.equals(\"fair\")) {\n-      clazz \u003d FairSchedulingMode.class;\n+      clazz \u003d FairSharePolicy.class;\n     } else if (text.equals(\"fifo\")) {\n-      clazz \u003d FifoSchedulingMode.class;\n+      clazz \u003d FifoPolicy.class;\n     } else {\n       try {\n-        clazz \u003d Class.forName(mode);\n+        clazz \u003d Class.forName(policy);\n       } catch (ClassNotFoundException cnfe) {\n-        throw new AllocationConfigurationException(mode\n-            + \" SchedulingMode class not found!\");\n+        throw new AllocationConfigurationException(policy\n+            + \" SchedulingPolicy class not found!\");\n       }\n     }\n-    if (!SchedulingMode.class.isAssignableFrom(clazz)) {\n-      throw new AllocationConfigurationException(mode\n-          + \" does not extend SchedulingMode\");\n+    if (!SchedulingPolicy.class.isAssignableFrom(clazz)) {\n+      throw new AllocationConfigurationException(policy\n+          + \" does not extend SchedulingPolicy\");\n     }\n     return getInstance(clazz);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static SchedulingPolicy parse(String policy)\n      throws AllocationConfigurationException {\n    @SuppressWarnings(\"rawtypes\")\n    Class clazz;\n    String text \u003d policy.toLowerCase();\n    if (text.equals(\"fair\")) {\n      clazz \u003d FairSharePolicy.class;\n    } else if (text.equals(\"fifo\")) {\n      clazz \u003d FifoPolicy.class;\n    } else {\n      try {\n        clazz \u003d Class.forName(policy);\n      } catch (ClassNotFoundException cnfe) {\n        throw new AllocationConfigurationException(policy\n            + \" SchedulingPolicy class not found!\");\n      }\n    }\n    if (!SchedulingPolicy.class.isAssignableFrom(clazz)) {\n      throw new AllocationConfigurationException(policy\n          + \" does not extend SchedulingPolicy\");\n    }\n    return getInstance(clazz);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingPolicy.java",
          "extendedDetails": {
            "oldValue": "[mode-String]",
            "newValue": "[policy-String]"
          }
        }
      ]
    },
    "e74d1f0435c2bcdfae2c26f6c340a5a487d20aa3": {
      "type": "Yintroduced",
      "commitMessage": "YARN-469. Make scheduling mode in FS pluggable. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1460961 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/13 8:25 PM",
      "commitName": "e74d1f0435c2bcdfae2c26f6c340a5a487d20aa3",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,23 @@\n+  public static SchedulingMode parse(String mode)\n+      throws AllocationConfigurationException {\n+    @SuppressWarnings(\"rawtypes\")\n+    Class clazz;\n+    String text \u003d mode.toLowerCase();\n+    if (text.equals(\"fair\")) {\n+      clazz \u003d FairSchedulingMode.class;\n+    } else if (text.equals(\"fifo\")) {\n+      clazz \u003d FifoSchedulingMode.class;\n+    } else {\n+      try {\n+        clazz \u003d Class.forName(mode);\n+      } catch (ClassNotFoundException cnfe) {\n+        throw new AllocationConfigurationException(mode\n+            + \" SchedulingMode class not found!\");\n+      }\n+    }\n+    if (!SchedulingMode.class.isAssignableFrom(clazz)) {\n+      throw new AllocationConfigurationException(mode\n+          + \" does not extend SchedulingMode\");\n+    }\n+    return getInstance(clazz);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static SchedulingMode parse(String mode)\n      throws AllocationConfigurationException {\n    @SuppressWarnings(\"rawtypes\")\n    Class clazz;\n    String text \u003d mode.toLowerCase();\n    if (text.equals(\"fair\")) {\n      clazz \u003d FairSchedulingMode.class;\n    } else if (text.equals(\"fifo\")) {\n      clazz \u003d FifoSchedulingMode.class;\n    } else {\n      try {\n        clazz \u003d Class.forName(mode);\n      } catch (ClassNotFoundException cnfe) {\n        throw new AllocationConfigurationException(mode\n            + \" SchedulingMode class not found!\");\n      }\n    }\n    if (!SchedulingMode.class.isAssignableFrom(clazz)) {\n      throw new AllocationConfigurationException(mode\n          + \" does not extend SchedulingMode\");\n    }\n    return getInstance(clazz);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/SchedulingMode.java"
    }
  }
}