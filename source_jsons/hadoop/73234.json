{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HttpServer2.java",
  "functionName": "hasAdministratorAccess",
  "functionId": "hasAdministratorAccess___servletContext-ServletContext__request-HttpServletRequest__response-HttpServletResponse",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
  "functionStartLine": 1492,
  "functionEndLine": 1522,
  "numCommitsSeen": 116,
  "timeTaken": 3507,
  "changeHistory": [
    "cba319499822a2475c60c43ea71f8e78237e139f",
    "b9984e59d832cd4673dd0edb260a1aa65bb8758d",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4",
    "1377709b4c58172c2a3f8abf78319b5a73fe1578",
    "e29ede3f729784f0eb770f0a1570bea199ff6902",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "4c940af71438361b47876ac681a974123652d01c",
    "4b8e1bda2d329604398ed199456aa6ae3cd8ffa3",
    "7785232da5a1db2d06f5d208ce3258c342a4d19c"
  ],
  "changeHistoryShort": {
    "cba319499822a2475c60c43ea71f8e78237e139f": "Ybodychange",
    "b9984e59d832cd4673dd0edb260a1aa65bb8758d": "Ybodychange",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": "Yfilerename",
    "1377709b4c58172c2a3f8abf78319b5a73fe1578": "Ybodychange",
    "e29ede3f729784f0eb770f0a1570bea199ff6902": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "4c940af71438361b47876ac681a974123652d01c": "Ybodychange",
    "4b8e1bda2d329604398ed199456aa6ae3cd8ffa3": "Ybodychange",
    "7785232da5a1db2d06f5d208ce3258c342a4d19c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cba319499822a2475c60c43ea71f8e78237e139f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13636. Cross-Site Scripting vulnerability in HttpServer2\n(Contributed by Haibo Yan via Daniel Templeton)\n\nChange-Id: I28edde8125dd20d8d270f0e609d1c04d8173c8b7\n",
      "commitDate": "01/06/18 2:42 PM",
      "commitName": "cba319499822a2475c60c43ea71f8e78237e139f",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "23/05/18 10:24 AM",
      "commitNameOld": "aa23d49fc8b9c2537529dbdc13512000e2ab295a",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 9.18,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,31 @@\n   public static boolean hasAdministratorAccess(\n       ServletContext servletContext, HttpServletRequest request,\n       HttpServletResponse response) throws IOException {\n     Configuration conf \u003d\n         (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n     // If there is no authorization, anybody has administrator access.\n     if (!conf.getBoolean(\n         CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n       return true;\n     }\n \n     String remoteUser \u003d request.getRemoteUser();\n     if (remoteUser \u003d\u003d null) {\n       response.sendError(HttpServletResponse.SC_FORBIDDEN,\n                          \"Unauthenticated users are not \" +\n                          \"authorized to access this page.\");\n       return false;\n     }\n \n     if (servletContext.getAttribute(ADMINS_ACL) !\u003d null \u0026\u0026\n         !userHasAdministratorAccess(servletContext, remoteUser)) {\n-      response.sendError(HttpServletResponse.SC_FORBIDDEN, \"User \"\n-          + remoteUser + \" is unauthorized to access this page.\");\n+      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n+          \"Unauthenticated users are not \" +\n+              \"authorized to access this page.\");\n+      LOG.warn(\"User \" + remoteUser + \" is unauthorized to access the page \"\n+          + request.getRequestURI() + \".\");\n       return false;\n     }\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean hasAdministratorAccess(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf \u003d\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n    // If there is no authorization, anybody has administrator access.\n    if (!conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      return true;\n    }\n\n    String remoteUser \u003d request.getRemoteUser();\n    if (remoteUser \u003d\u003d null) {\n      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n                         \"Unauthenticated users are not \" +\n                         \"authorized to access this page.\");\n      return false;\n    }\n\n    if (servletContext.getAttribute(ADMINS_ACL) !\u003d null \u0026\u0026\n        !userHasAdministratorAccess(servletContext, remoteUser)) {\n      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n          \"Unauthenticated users are not \" +\n              \"authorized to access this page.\");\n      LOG.warn(\"User \" + remoteUser + \" is unauthorized to access the page \"\n          + request.getRequestURI() + \".\");\n      return false;\n    }\n\n    return true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "b9984e59d832cd4673dd0edb260a1aa65bb8758d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10918. JMXJsonServlet fails when used within Tomcat. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616002 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/08/14 1:58 PM",
      "commitName": "b9984e59d832cd4673dd0edb260a1aa65bb8758d",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "25/03/14 11:07 AM",
      "commitNameOld": "274d9b2ac48547b8d466e5006c233576c1aa7591",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 133.12,
      "commitsBetweenForRepo": 829,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public static boolean hasAdministratorAccess(\n       ServletContext servletContext, HttpServletRequest request,\n       HttpServletResponse response) throws IOException {\n     Configuration conf \u003d\n         (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n     // If there is no authorization, anybody has administrator access.\n     if (!conf.getBoolean(\n         CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n       return true;\n     }\n \n     String remoteUser \u003d request.getRemoteUser();\n     if (remoteUser \u003d\u003d null) {\n-      response.sendError(HttpServletResponse.SC_UNAUTHORIZED,\n+      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n                          \"Unauthenticated users are not \" +\n                          \"authorized to access this page.\");\n       return false;\n     }\n \n     if (servletContext.getAttribute(ADMINS_ACL) !\u003d null \u0026\u0026\n         !userHasAdministratorAccess(servletContext, remoteUser)) {\n-      response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n+      response.sendError(HttpServletResponse.SC_FORBIDDEN, \"User \"\n           + remoteUser + \" is unauthorized to access this page.\");\n       return false;\n     }\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean hasAdministratorAccess(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf \u003d\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n    // If there is no authorization, anybody has administrator access.\n    if (!conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      return true;\n    }\n\n    String remoteUser \u003d request.getRemoteUser();\n    if (remoteUser \u003d\u003d null) {\n      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n                         \"Unauthenticated users are not \" +\n                         \"authorized to access this page.\");\n      return false;\n    }\n\n    if (servletContext.getAttribute(ADMINS_ACL) !\u003d null \u0026\u0026\n        !userHasAdministratorAccess(servletContext, remoteUser)) {\n      response.sendError(HttpServletResponse.SC_FORBIDDEN, \"User \"\n          + remoteUser + \" is unauthorized to access this page.\");\n      return false;\n    }\n\n    return true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 11:32 PM",
      "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "27/01/14 10:41 PM",
      "commitNameOld": "87166f1ee81dbad579508c2bdbc7dda96b1ef809",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public static boolean hasAdministratorAccess(\n       ServletContext servletContext, HttpServletRequest request,\n       HttpServletResponse response) throws IOException {\n     Configuration conf \u003d\n         (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n     // If there is no authorization, anybody has administrator access.\n     if (!conf.getBoolean(\n         CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n       return true;\n     }\n \n     String remoteUser \u003d request.getRemoteUser();\n     if (remoteUser \u003d\u003d null) {\n       response.sendError(HttpServletResponse.SC_UNAUTHORIZED,\n                          \"Unauthenticated users are not \" +\n                          \"authorized to access this page.\");\n       return false;\n     }\n-    \n+\n     if (servletContext.getAttribute(ADMINS_ACL) !\u003d null \u0026\u0026\n         !userHasAdministratorAccess(servletContext, remoteUser)) {\n       response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n           + remoteUser + \" is unauthorized to access this page.\");\n       return false;\n     }\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean hasAdministratorAccess(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf \u003d\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n    // If there is no authorization, anybody has administrator access.\n    if (!conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      return true;\n    }\n\n    String remoteUser \u003d request.getRemoteUser();\n    if (remoteUser \u003d\u003d null) {\n      response.sendError(HttpServletResponse.SC_UNAUTHORIZED,\n                         \"Unauthenticated users are not \" +\n                         \"authorized to access this page.\");\n      return false;\n    }\n\n    if (servletContext.getAttribute(ADMINS_ACL) !\u003d null \u0026\u0026\n        !userHasAdministratorAccess(servletContext, remoteUser)) {\n      response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n          + remoteUser + \" is unauthorized to access this page.\");\n      return false;\n    }\n\n    return true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {
        "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java"
      }
    },
    "1377709b4c58172c2a3f8abf78319b5a73fe1578": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3433. GetImageServlet should allow administrative requestors when security is enabled. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339540 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/05/12 3:23 AM",
      "commitName": "1377709b4c58172c2a3f8abf78319b5a73fe1578",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "04/05/12 2:58 PM",
      "commitNameOld": "5dbbe0e0a5d31689d3425e490865f95057dc051c",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 12.52,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,28 @@\n   public static boolean hasAdministratorAccess(\n       ServletContext servletContext, HttpServletRequest request,\n       HttpServletResponse response) throws IOException {\n     Configuration conf \u003d\n         (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n     // If there is no authorization, anybody has administrator access.\n     if (!conf.getBoolean(\n         CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n       return true;\n     }\n \n     String remoteUser \u003d request.getRemoteUser();\n     if (remoteUser \u003d\u003d null) {\n       response.sendError(HttpServletResponse.SC_UNAUTHORIZED,\n                          \"Unauthenticated users are not \" +\n                          \"authorized to access this page.\");\n       return false;\n     }\n-    AccessControlList adminsAcl \u003d (AccessControlList) servletContext\n-        .getAttribute(ADMINS_ACL);\n-    UserGroupInformation remoteUserUGI \u003d\n-        UserGroupInformation.createRemoteUser(remoteUser);\n-    if (adminsAcl !\u003d null) {\n-      if (!adminsAcl.isUserAllowed(remoteUserUGI)) {\n-        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n-            + remoteUser + \" is unauthorized to access this page.\");\n-        return false;\n-      }\n+    \n+    if (servletContext.getAttribute(ADMINS_ACL) !\u003d null \u0026\u0026\n+        !userHasAdministratorAccess(servletContext, remoteUser)) {\n+      response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n+          + remoteUser + \" is unauthorized to access this page.\");\n+      return false;\n     }\n+\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean hasAdministratorAccess(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf \u003d\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n    // If there is no authorization, anybody has administrator access.\n    if (!conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      return true;\n    }\n\n    String remoteUser \u003d request.getRemoteUser();\n    if (remoteUser \u003d\u003d null) {\n      response.sendError(HttpServletResponse.SC_UNAUTHORIZED,\n                         \"Unauthenticated users are not \" +\n                         \"authorized to access this page.\");\n      return false;\n    }\n    \n    if (servletContext.getAttribute(ADMINS_ACL) !\u003d null \u0026\u0026\n        !userHasAdministratorAccess(servletContext, remoteUser)) {\n      response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n          + remoteUser + \" is unauthorized to access this page.\");\n      return false;\n    }\n\n    return true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java",
      "extendedDetails": {}
    },
    "e29ede3f729784f0eb770f0a1570bea199ff6902": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8314. HttpServer#hasAdminAccess should return false if authorization is enabled but user is not authenticated. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1330086 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/12 8:20 PM",
      "commitName": "e29ede3f729784f0eb770f0a1570bea199ff6902",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "28/02/12 10:26 AM",
      "commitNameOld": "e43656c711e952dcf85e3c0213dd7c8959f9c85f",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 56.37,
      "commitsBetweenForRepo": 416,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   public static boolean hasAdministratorAccess(\n       ServletContext servletContext, HttpServletRequest request,\n       HttpServletResponse response) throws IOException {\n     Configuration conf \u003d\n         (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n \n     // If there is no authorization, anybody has administrator access.\n     if (!conf.getBoolean(\n         CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n       return true;\n     }\n \n     String remoteUser \u003d request.getRemoteUser();\n     if (remoteUser \u003d\u003d null) {\n-      return true;\n+      response.sendError(HttpServletResponse.SC_UNAUTHORIZED,\n+                         \"Unauthenticated users are not \" +\n+                         \"authorized to access this page.\");\n+      return false;\n     }\n     AccessControlList adminsAcl \u003d (AccessControlList) servletContext\n         .getAttribute(ADMINS_ACL);\n     UserGroupInformation remoteUserUGI \u003d\n         UserGroupInformation.createRemoteUser(remoteUser);\n     if (adminsAcl !\u003d null) {\n       if (!adminsAcl.isUserAllowed(remoteUserUGI)) {\n         response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n-            + remoteUser + \" is unauthorized to access this page. \"\n-            + \"AccessControlList for accessing this page : \"\n-            + adminsAcl.toString());\n+            + remoteUser + \" is unauthorized to access this page.\");\n         return false;\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean hasAdministratorAccess(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf \u003d\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n\n    // If there is no authorization, anybody has administrator access.\n    if (!conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      return true;\n    }\n\n    String remoteUser \u003d request.getRemoteUser();\n    if (remoteUser \u003d\u003d null) {\n      response.sendError(HttpServletResponse.SC_UNAUTHORIZED,\n                         \"Unauthenticated users are not \" +\n                         \"authorized to access this page.\");\n      return false;\n    }\n    AccessControlList adminsAcl \u003d (AccessControlList) servletContext\n        .getAttribute(ADMINS_ACL);\n    UserGroupInformation remoteUserUGI \u003d\n        UserGroupInformation.createRemoteUser(remoteUser);\n    if (adminsAcl !\u003d null) {\n      if (!adminsAcl.isUserAllowed(remoteUserUGI)) {\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n            + remoteUser + \" is unauthorized to access this page.\");\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static boolean hasAdministratorAccess(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf \u003d\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n\n    // If there is no authorization, anybody has administrator access.\n    if (!conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      return true;\n    }\n\n    String remoteUser \u003d request.getRemoteUser();\n    if (remoteUser \u003d\u003d null) {\n      return true;\n    }\n    AccessControlList adminsAcl \u003d (AccessControlList) servletContext\n        .getAttribute(ADMINS_ACL);\n    UserGroupInformation remoteUserUGI \u003d\n        UserGroupInformation.createRemoteUser(remoteUser);\n    if (adminsAcl !\u003d null) {\n      if (!adminsAcl.isUserAllowed(remoteUserUGI)) {\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n            + remoteUser + \" is unauthorized to access this page. \"\n            + \"AccessControlList for accessing this page : \"\n            + adminsAcl.toString());\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static boolean hasAdministratorAccess(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf \u003d\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n\n    // If there is no authorization, anybody has administrator access.\n    if (!conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      return true;\n    }\n\n    String remoteUser \u003d request.getRemoteUser();\n    if (remoteUser \u003d\u003d null) {\n      return true;\n    }\n    AccessControlList adminsAcl \u003d (AccessControlList) servletContext\n        .getAttribute(ADMINS_ACL);\n    UserGroupInformation remoteUserUGI \u003d\n        UserGroupInformation.createRemoteUser(remoteUser);\n    if (adminsAcl !\u003d null) {\n      if (!adminsAcl.isUserAllowed(remoteUserUGI)) {\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n            + remoteUser + \" is unauthorized to access this page. \"\n            + \"AccessControlList for accessing this page : \"\n            + adminsAcl.toString());\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/http/HttpServer.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static boolean hasAdministratorAccess(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf \u003d\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n\n    // If there is no authorization, anybody has administrator access.\n    if (!conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      return true;\n    }\n\n    String remoteUser \u003d request.getRemoteUser();\n    if (remoteUser \u003d\u003d null) {\n      return true;\n    }\n    AccessControlList adminsAcl \u003d (AccessControlList) servletContext\n        .getAttribute(ADMINS_ACL);\n    UserGroupInformation remoteUserUGI \u003d\n        UserGroupInformation.createRemoteUser(remoteUser);\n    if (adminsAcl !\u003d null) {\n      if (!adminsAcl.isUserAllowed(remoteUserUGI)) {\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n            + remoteUser + \" is unauthorized to access this page. \"\n            + \"AccessControlList for accessing this page : \"\n            + adminsAcl.toString());\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "common/src/java/org/apache/hadoop/http/HttpServer.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/http/HttpServer.java",
        "newPath": "common/src/java/org/apache/hadoop/http/HttpServer.java"
      }
    },
    "4c940af71438361b47876ac681a974123652d01c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6715. Fixes AccessControlList.toString() to return a descriptive String representation of the ACL. Contributed by Ravi Gummadi\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@984652 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/08/10 11:34 PM",
      "commitName": "4c940af71438361b47876ac681a974123652d01c",
      "commitAuthor": "Amareshwari Sri Ramadasu",
      "commitDateOld": "02/08/10 2:10 PM",
      "commitNameOld": "1035138b4c03ed26ce5be9fc4dd6f6c1e0af909b",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 9.39,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public static boolean hasAdministratorAccess(\n       ServletContext servletContext, HttpServletRequest request,\n       HttpServletResponse response) throws IOException {\n     Configuration conf \u003d\n         (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n \n     // If there is no authorization, anybody has administrator access.\n     if (!conf.getBoolean(\n         CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n       return true;\n     }\n \n     String remoteUser \u003d request.getRemoteUser();\n     if (remoteUser \u003d\u003d null) {\n       return true;\n     }\n     AccessControlList adminsAcl \u003d (AccessControlList) servletContext\n         .getAttribute(ADMINS_ACL);\n     UserGroupInformation remoteUserUGI \u003d\n         UserGroupInformation.createRemoteUser(remoteUser);\n     if (adminsAcl !\u003d null) {\n       if (!adminsAcl.isUserAllowed(remoteUserUGI)) {\n         response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n             + remoteUser + \" is unauthorized to access this page. \"\n-            + \"Only \\\"\" + adminsAcl.toString()\n-            + \"\\\" can access this page.\");\n+            + \"AccessControlList for accessing this page : \"\n+            + adminsAcl.toString());\n         return false;\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean hasAdministratorAccess(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf \u003d\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n\n    // If there is no authorization, anybody has administrator access.\n    if (!conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      return true;\n    }\n\n    String remoteUser \u003d request.getRemoteUser();\n    if (remoteUser \u003d\u003d null) {\n      return true;\n    }\n    AccessControlList adminsAcl \u003d (AccessControlList) servletContext\n        .getAttribute(ADMINS_ACL);\n    UserGroupInformation remoteUserUGI \u003d\n        UserGroupInformation.createRemoteUser(remoteUser);\n    if (adminsAcl !\u003d null) {\n      if (!adminsAcl.isUserAllowed(remoteUserUGI)) {\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n            + remoteUser + \" is unauthorized to access this page. \"\n            + \"AccessControlList for accessing this page : \"\n            + adminsAcl.toString());\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "src/java/org/apache/hadoop/http/HttpServer.java",
      "extendedDetails": {}
    },
    "4b8e1bda2d329604398ed199456aa6ae3cd8ffa3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6748. Removes hadoop.cluster.administrators, cluster administrators acl is passed as parameter in constructor. Contributed by Amareshwari Sriramadasu\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@955975 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/10 5:30 AM",
      "commitName": "4b8e1bda2d329604398ed199456aa6ae3cd8ffa3",
      "commitAuthor": "Amareshwari Sri Ramadasu",
      "commitDateOld": "02/06/10 8:43 AM",
      "commitNameOld": "da60eca889fdac4116f1105907f75fa4d8399d86",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 15.87,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,31 @@\n   public static boolean hasAdministratorAccess(\n       ServletContext servletContext, HttpServletRequest request,\n       HttpServletResponse response) throws IOException {\n     Configuration conf \u003d\n         (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n \n     // If there is no authorization, anybody has administrator access.\n     if (!conf.getBoolean(\n         CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n       return true;\n     }\n \n     String remoteUser \u003d request.getRemoteUser();\n     if (remoteUser \u003d\u003d null) {\n       return true;\n     }\n-\n-    String adminsAclString \u003d\n-        conf.get(\n-            CommonConfigurationKeys.HADOOP_CLUSTER_ADMINISTRATORS_PROPERTY,\n-            \"*\");\n-    AccessControlList adminsAcl \u003d new AccessControlList(adminsAclString);\n+    AccessControlList adminsAcl \u003d (AccessControlList) servletContext\n+        .getAttribute(ADMINS_ACL);\n     UserGroupInformation remoteUserUGI \u003d\n         UserGroupInformation.createRemoteUser(remoteUser);\n-    if (!adminsAcl.isUserAllowed(remoteUserUGI)) {\n-      response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n-          + remoteUser + \" is unauthorized to access this page. \"\n-          + \"Only superusers/supergroup \\\"\" + adminsAclString\n-          + \"\\\" can access this page.\");\n-      return false;\n+    if (adminsAcl !\u003d null) {\n+      if (!adminsAcl.isUserAllowed(remoteUserUGI)) {\n+        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n+            + remoteUser + \" is unauthorized to access this page. \"\n+            + \"Only \\\"\" + adminsAcl.toString()\n+            + \"\\\" can access this page.\");\n+        return false;\n+      }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean hasAdministratorAccess(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf \u003d\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n\n    // If there is no authorization, anybody has administrator access.\n    if (!conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      return true;\n    }\n\n    String remoteUser \u003d request.getRemoteUser();\n    if (remoteUser \u003d\u003d null) {\n      return true;\n    }\n    AccessControlList adminsAcl \u003d (AccessControlList) servletContext\n        .getAttribute(ADMINS_ACL);\n    UserGroupInformation remoteUserUGI \u003d\n        UserGroupInformation.createRemoteUser(remoteUser);\n    if (adminsAcl !\u003d null) {\n      if (!adminsAcl.isUserAllowed(remoteUserUGI)) {\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n            + remoteUser + \" is unauthorized to access this page. \"\n            + \"Only \\\"\" + adminsAcl.toString()\n            + \"\\\" can access this page.\");\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "src/java/org/apache/hadoop/http/HttpServer.java",
      "extendedDetails": {}
    },
    "7785232da5a1db2d06f5d208ce3258c342a4d19c": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6568. Adds authorization for the default servlets. Contributed by Vinod Kumar Vavilapalli.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@916467 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/02/10 1:39 PM",
      "commitName": "7785232da5a1db2d06f5d208ce3258c342a4d19c",
      "commitAuthor": "Devaraj Das",
      "diff": "@@ -0,0 +1,33 @@\n+  public static boolean hasAdministratorAccess(\n+      ServletContext servletContext, HttpServletRequest request,\n+      HttpServletResponse response) throws IOException {\n+    Configuration conf \u003d\n+        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n+\n+    // If there is no authorization, anybody has administrator access.\n+    if (!conf.getBoolean(\n+        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n+      return true;\n+    }\n+\n+    String remoteUser \u003d request.getRemoteUser();\n+    if (remoteUser \u003d\u003d null) {\n+      return true;\n+    }\n+\n+    String adminsAclString \u003d\n+        conf.get(\n+            CommonConfigurationKeys.HADOOP_CLUSTER_ADMINISTRATORS_PROPERTY,\n+            \"*\");\n+    AccessControlList adminsAcl \u003d new AccessControlList(adminsAclString);\n+    UserGroupInformation remoteUserUGI \u003d\n+        UserGroupInformation.createRemoteUser(remoteUser);\n+    if (!adminsAcl.isUserAllowed(remoteUserUGI)) {\n+      response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n+          + remoteUser + \" is unauthorized to access this page. \"\n+          + \"Only superusers/supergroup \\\"\" + adminsAclString\n+          + \"\\\" can access this page.\");\n+      return false;\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean hasAdministratorAccess(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf \u003d\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n\n    // If there is no authorization, anybody has administrator access.\n    if (!conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      return true;\n    }\n\n    String remoteUser \u003d request.getRemoteUser();\n    if (remoteUser \u003d\u003d null) {\n      return true;\n    }\n\n    String adminsAclString \u003d\n        conf.get(\n            CommonConfigurationKeys.HADOOP_CLUSTER_ADMINISTRATORS_PROPERTY,\n            \"*\");\n    AccessControlList adminsAcl \u003d new AccessControlList(adminsAclString);\n    UserGroupInformation remoteUserUGI \u003d\n        UserGroupInformation.createRemoteUser(remoteUser);\n    if (!adminsAcl.isUserAllowed(remoteUserUGI)) {\n      response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"User \"\n          + remoteUser + \" is unauthorized to access this page. \"\n          + \"Only superusers/supergroup \\\"\" + adminsAclString\n          + \"\\\" can access this page.\");\n      return false;\n    }\n    return true;\n  }",
      "path": "src/java/org/apache/hadoop/http/HttpServer.java"
    }
  }
}