{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistributedFileSystem.java",
  "functionName": "satisfyStoragePolicy",
  "functionId": "satisfyStoragePolicy___path-Path(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
  "functionStartLine": 3050,
  "functionEndLine": 3075,
  "numCommitsSeen": 96,
  "timeTaken": 2754,
  "changeHistory": [
    "f048512bb89f4d1edbb54360622adc61ffacbde3",
    "b67ae6d9d741e79ccf2bd6f08a37fce070e6ad77"
  ],
  "changeHistoryShort": {
    "f048512bb89f4d1edbb54360622adc61ffacbde3": "Ybodychange",
    "b67ae6d9d741e79ccf2bd6f08a37fce070e6ad77": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f048512bb89f4d1edbb54360622adc61ffacbde3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14192. Track missing DFS operations in Statistics and StorageStatistics. Contributed by Ayush Saxena.\n",
      "commitDate": "16/01/19 10:14 AM",
      "commitName": "f048512bb89f4d1edbb54360622adc61ffacbde3",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "16/12/18 9:54 PM",
      "commitNameOld": "788e7473a404fa074b3af522416ee3d2fae865a0",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 30.51,
      "commitsBetweenForRepo": 179,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   public void satisfyStoragePolicy(final Path path) throws IOException {\n+    statistics.incrementWriteOps(1);\n+    storageStatistics.incrementOpCounter(OpType.SATISFY_STORAGE_POLICY);\n     Path absF \u003d fixRelativePart(path);\n     new FileSystemLinkResolver\u003cVoid\u003e() {\n \n       @Override\n       public Void doCall(Path p) throws IOException {\n         dfs.satisfyStoragePolicy(getPathName(p));\n         return null;\n       }\n \n       @Override\n       public Void next(FileSystem fs, Path p) throws IOException {\n         // DFS only\n         if (fs instanceof  DistributedFileSystem) {\n           DistributedFileSystem myDfs \u003d (DistributedFileSystem) fs;\n           myDfs.satisfyStoragePolicy(p);\n           return null;\n         }\n         throw new UnsupportedOperationException(\n             \"Cannot satisfyStoragePolicy through a symlink to a \"\n                 + \"non-DistributedFileSystem: \" + path + \" -\u003e \" + p);\n       }\n     }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void satisfyStoragePolicy(final Path path) throws IOException {\n    statistics.incrementWriteOps(1);\n    storageStatistics.incrementOpCounter(OpType.SATISFY_STORAGE_POLICY);\n    Path absF \u003d fixRelativePart(path);\n    new FileSystemLinkResolver\u003cVoid\u003e() {\n\n      @Override\n      public Void doCall(Path p) throws IOException {\n        dfs.satisfyStoragePolicy(getPathName(p));\n        return null;\n      }\n\n      @Override\n      public Void next(FileSystem fs, Path p) throws IOException {\n        // DFS only\n        if (fs instanceof  DistributedFileSystem) {\n          DistributedFileSystem myDfs \u003d (DistributedFileSystem) fs;\n          myDfs.satisfyStoragePolicy(p);\n          return null;\n        }\n        throw new UnsupportedOperationException(\n            \"Cannot satisfyStoragePolicy through a symlink to a \"\n                + \"non-DistributedFileSystem: \" + path + \" -\u003e \" + p);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "b67ae6d9d741e79ccf2bd6f08a37fce070e6ad77": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10802. [SPS]: Add satisfyStoragePolicy API in HdfsAdmin. Contributed by Yuanbo Liu\n",
      "commitDate": "12/08/18 3:05 AM",
      "commitName": "b67ae6d9d741e79ccf2bd6f08a37fce070e6ad77",
      "commitAuthor": "Rakesh Radhakrishnan",
      "diff": "@@ -0,0 +1,24 @@\n+  public void satisfyStoragePolicy(final Path path) throws IOException {\n+    Path absF \u003d fixRelativePart(path);\n+    new FileSystemLinkResolver\u003cVoid\u003e() {\n+\n+      @Override\n+      public Void doCall(Path p) throws IOException {\n+        dfs.satisfyStoragePolicy(getPathName(p));\n+        return null;\n+      }\n+\n+      @Override\n+      public Void next(FileSystem fs, Path p) throws IOException {\n+        // DFS only\n+        if (fs instanceof  DistributedFileSystem) {\n+          DistributedFileSystem myDfs \u003d (DistributedFileSystem) fs;\n+          myDfs.satisfyStoragePolicy(p);\n+          return null;\n+        }\n+        throw new UnsupportedOperationException(\n+            \"Cannot satisfyStoragePolicy through a symlink to a \"\n+                + \"non-DistributedFileSystem: \" + path + \" -\u003e \" + p);\n+      }\n+    }.resolve(this, absF);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void satisfyStoragePolicy(final Path path) throws IOException {\n    Path absF \u003d fixRelativePart(path);\n    new FileSystemLinkResolver\u003cVoid\u003e() {\n\n      @Override\n      public Void doCall(Path p) throws IOException {\n        dfs.satisfyStoragePolicy(getPathName(p));\n        return null;\n      }\n\n      @Override\n      public Void next(FileSystem fs, Path p) throws IOException {\n        // DFS only\n        if (fs instanceof  DistributedFileSystem) {\n          DistributedFileSystem myDfs \u003d (DistributedFileSystem) fs;\n          myDfs.satisfyStoragePolicy(p);\n          return null;\n        }\n        throw new UnsupportedOperationException(\n            \"Cannot satisfyStoragePolicy through a symlink to a \"\n                + \"non-DistributedFileSystem: \" + path + \" -\u003e \" + p);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java"
    }
  }
}