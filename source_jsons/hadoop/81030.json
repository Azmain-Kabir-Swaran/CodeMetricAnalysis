{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Configuration.java",
  "functionName": "getCredentialEntry",
  "functionId": "getCredentialEntry___provider-CredentialProvider__name-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
  "functionStartLine": 2373,
  "functionEndLine": 2403,
  "numCommitsSeen": 132,
  "timeTaken": 1894,
  "changeHistory": [
    "7e6463d2fb5f9383d88baec290461868cf476e4c"
  ],
  "changeHistoryShort": {
    "7e6463d2fb5f9383d88baec290461868cf476e4c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7e6463d2fb5f9383d88baec290461868cf476e4c": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14251. Credential provider should handle property key deprecation. Contributed by John Zhuge.\n",
      "commitDate": "23/08/17 11:37 AM",
      "commitName": "7e6463d2fb5f9383d88baec290461868cf476e4c",
      "commitAuthor": "John Zhuge",
      "diff": "@@ -0,0 +1,31 @@\n+  private CredentialEntry getCredentialEntry(CredentialProvider provider,\n+                                             String name) throws IOException {\n+    CredentialEntry entry \u003d provider.getCredentialEntry(name);\n+    if (entry !\u003d null) {\n+      return entry;\n+    }\n+\n+    // The old name is stored in the credential provider.\n+    String oldName \u003d getDeprecatedKey(name);\n+    if (oldName !\u003d null) {\n+      entry \u003d provider.getCredentialEntry(oldName);\n+      if (entry !\u003d null) {\n+        logDeprecationOnce(oldName, provider.toString());\n+        return entry;\n+      }\n+    }\n+\n+    // The name is deprecated.\n+    DeprecatedKeyInfo keyInfo \u003d getDeprecatedKeyInfo(name);\n+    if (keyInfo !\u003d null \u0026\u0026 keyInfo.newKeys !\u003d null) {\n+      for (String newName : keyInfo.newKeys) {\n+        entry \u003d provider.getCredentialEntry(newName);\n+        if (entry !\u003d null) {\n+          logDeprecationOnce(name, null);\n+          return entry;\n+        }\n+      }\n+    }\n+\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private CredentialEntry getCredentialEntry(CredentialProvider provider,\n                                             String name) throws IOException {\n    CredentialEntry entry \u003d provider.getCredentialEntry(name);\n    if (entry !\u003d null) {\n      return entry;\n    }\n\n    // The old name is stored in the credential provider.\n    String oldName \u003d getDeprecatedKey(name);\n    if (oldName !\u003d null) {\n      entry \u003d provider.getCredentialEntry(oldName);\n      if (entry !\u003d null) {\n        logDeprecationOnce(oldName, provider.toString());\n        return entry;\n      }\n    }\n\n    // The name is deprecated.\n    DeprecatedKeyInfo keyInfo \u003d getDeprecatedKeyInfo(name);\n    if (keyInfo !\u003d null \u0026\u0026 keyInfo.newKeys !\u003d null) {\n      for (String newName : keyInfo.newKeys) {\n        entry \u003d provider.getCredentialEntry(newName);\n        if (entry !\u003d null) {\n          logDeprecationOnce(name, null);\n          return entry;\n        }\n      }\n    }\n\n    return null;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java"
    }
  }
}