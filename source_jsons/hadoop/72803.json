{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ValueQueue.java",
  "functionName": "submitRefillTask",
  "functionId": "submitRefillTask___keyName-String(modifiers-final)__keyQueue-Queue__E__(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/ValueQueue.java",
  "functionStartLine": 398,
  "functionEndLine": 440,
  "numCommitsSeen": 12,
  "timeTaken": 1432,
  "changeHistory": [
    "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b",
    "7574df1bba33919348d3009f2578d6a81b5818e6",
    "2a51494ce1b05fc494fb3a818a7a3526f3f40070",
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64"
  ],
  "changeHistoryShort": {
    "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b": "Ybodychange",
    "7574df1bba33919348d3009f2578d6a81b5818e6": "Ybodychange",
    "2a51494ce1b05fc494fb3a818a7a3526f3f40070": "Ybodychange",
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11210. Enhance key rolling to guarantee new KeyVersion is returned from generateEncryptedKeys after a key is rolled.\n",
      "commitDate": "07/02/17 8:36 PM",
      "commitName": "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "02/06/16 3:14 AM",
      "commitNameOld": "99675e00df65e84dcc02082b795f1f93c90b794e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 250.76,
      "commitsBetweenForRepo": 1743,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,43 @@\n   private void submitRefillTask(final String keyName,\n       final Queue\u003cE\u003e keyQueue) throws InterruptedException {\n     if (!executorThreadsStarted) {\n       synchronized (this) {\n         if (!executorThreadsStarted) {\n           // To ensure all requests are first queued, make coreThreads \u003d\n           // maxThreads\n           // and pre-start all the Core Threads.\n           executor.prestartAllCoreThreads();\n           executorThreadsStarted \u003d true;\n         }\n       }\n     }\n     // The submit/execute method of the ThreadPoolExecutor is bypassed and\n     // the Runnable is directly put in the backing BlockingQueue so that we\n     // can control exactly how the runnable is inserted into the queue.\n     queue.put(\n         new NamedRunnable(keyName) {\n           @Override\n           public void run() {\n             int cacheSize \u003d numValues;\n             int threshold \u003d (int) (lowWatermark * (float) cacheSize);\n             // Need to ensure that only one refill task per key is executed\n             try {\n-              if (keyQueue.size() \u003c threshold) {\n-                refiller.fillQueueForKey(name, keyQueue,\n-                    cacheSize - keyQueue.size());\n+              writeLock(keyName);\n+              try {\n+                if (keyQueue.size() \u003c threshold \u0026\u0026 !isCanceled()) {\n+                  refiller.fillQueueForKey(name, keyQueue,\n+                      cacheSize - keyQueue.size());\n+                }\n+                if (isCanceled()) {\n+                  keyQueue.clear();\n+                }\n+              } finally {\n+                writeUnlock(keyName);\n               }\n             } catch (final Exception e) {\n               throw new RuntimeException(e);\n             }\n           }\n         }\n         );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void submitRefillTask(final String keyName,\n      final Queue\u003cE\u003e keyQueue) throws InterruptedException {\n    if (!executorThreadsStarted) {\n      synchronized (this) {\n        if (!executorThreadsStarted) {\n          // To ensure all requests are first queued, make coreThreads \u003d\n          // maxThreads\n          // and pre-start all the Core Threads.\n          executor.prestartAllCoreThreads();\n          executorThreadsStarted \u003d true;\n        }\n      }\n    }\n    // The submit/execute method of the ThreadPoolExecutor is bypassed and\n    // the Runnable is directly put in the backing BlockingQueue so that we\n    // can control exactly how the runnable is inserted into the queue.\n    queue.put(\n        new NamedRunnable(keyName) {\n          @Override\n          public void run() {\n            int cacheSize \u003d numValues;\n            int threshold \u003d (int) (lowWatermark * (float) cacheSize);\n            // Need to ensure that only one refill task per key is executed\n            try {\n              writeLock(keyName);\n              try {\n                if (keyQueue.size() \u003c threshold \u0026\u0026 !isCanceled()) {\n                  refiller.fillQueueForKey(name, keyQueue,\n                      cacheSize - keyQueue.size());\n                }\n                if (isCanceled()) {\n                  keyQueue.clear();\n                }\n              } finally {\n                writeUnlock(keyName);\n              }\n            } catch (final Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        );\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/ValueQueue.java",
      "extendedDetails": {}
    },
    "7574df1bba33919348d3009f2578d6a81b5818e6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11499. Check of executorThreadsStarted in ValueQueue#submitRefillTask() evades lock acquisition. Contributed by Ted Yu\n",
      "commitDate": "26/01/15 8:56 AM",
      "commitName": "7574df1bba33919348d3009f2578d6a81b5818e6",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "10/10/14 1:40 PM",
      "commitNameOld": "d3d3d47202a18749eeebec22db759c19dd3e232c",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 107.84,
      "commitsBetweenForRepo": 764,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,35 @@\n   private void submitRefillTask(final String keyName,\n       final Queue\u003cE\u003e keyQueue) throws InterruptedException {\n     if (!executorThreadsStarted) {\n       synchronized (this) {\n-        // To ensure all requests are first queued, make coreThreads \u003d\n-        // maxThreads\n-        // and pre-start all the Core Threads.\n-        executor.prestartAllCoreThreads();\n-        executorThreadsStarted \u003d true;\n+        if (!executorThreadsStarted) {\n+          // To ensure all requests are first queued, make coreThreads \u003d\n+          // maxThreads\n+          // and pre-start all the Core Threads.\n+          executor.prestartAllCoreThreads();\n+          executorThreadsStarted \u003d true;\n+        }\n       }\n     }\n     // The submit/execute method of the ThreadPoolExecutor is bypassed and\n     // the Runnable is directly put in the backing BlockingQueue so that we\n     // can control exactly how the runnable is inserted into the queue.\n     queue.put(\n         new NamedRunnable(keyName) {\n           @Override\n           public void run() {\n             int cacheSize \u003d numValues;\n             int threshold \u003d (int) (lowWatermark * (float) cacheSize);\n             // Need to ensure that only one refill task per key is executed\n             try {\n               if (keyQueue.size() \u003c threshold) {\n                 refiller.fillQueueForKey(name, keyQueue,\n                     cacheSize - keyQueue.size());\n               }\n             } catch (final Exception e) {\n               throw new RuntimeException(e);\n             }\n           }\n         }\n         );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void submitRefillTask(final String keyName,\n      final Queue\u003cE\u003e keyQueue) throws InterruptedException {\n    if (!executorThreadsStarted) {\n      synchronized (this) {\n        if (!executorThreadsStarted) {\n          // To ensure all requests are first queued, make coreThreads \u003d\n          // maxThreads\n          // and pre-start all the Core Threads.\n          executor.prestartAllCoreThreads();\n          executorThreadsStarted \u003d true;\n        }\n      }\n    }\n    // The submit/execute method of the ThreadPoolExecutor is bypassed and\n    // the Runnable is directly put in the backing BlockingQueue so that we\n    // can control exactly how the runnable is inserted into the queue.\n    queue.put(\n        new NamedRunnable(keyName) {\n          @Override\n          public void run() {\n            int cacheSize \u003d numValues;\n            int threshold \u003d (int) (lowWatermark * (float) cacheSize);\n            // Need to ensure that only one refill task per key is executed\n            try {\n              if (keyQueue.size() \u003c threshold) {\n                refiller.fillQueueForKey(name, keyQueue,\n                    cacheSize - keyQueue.size());\n              }\n            } catch (final Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        );\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/ValueQueue.java",
      "extendedDetails": {}
    },
    "2a51494ce1b05fc494fb3a818a7a3526f3f40070": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11161. Expose close method in KeyProvider to give clients of Provider implementations a hook to release resources. Contribued by Arun Suresh.\n",
      "commitDate": "08/10/14 6:01 PM",
      "commitName": "2a51494ce1b05fc494fb3a818a7a3526f3f40070",
      "commitAuthor": "Aaron T. Myers",
      "commitDateOld": "08/09/14 11:31 AM",
      "commitNameOld": "df8c84cba8512058f5097c6faeedf4b65cab3806",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 30.27,
      "commitsBetweenForRepo": 348,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,33 @@\n   private void submitRefillTask(final String keyName,\n       final Queue\u003cE\u003e keyQueue) throws InterruptedException {\n+    if (!executorThreadsStarted) {\n+      synchronized (this) {\n+        // To ensure all requests are first queued, make coreThreads \u003d\n+        // maxThreads\n+        // and pre-start all the Core Threads.\n+        executor.prestartAllCoreThreads();\n+        executorThreadsStarted \u003d true;\n+      }\n+    }\n     // The submit/execute method of the ThreadPoolExecutor is bypassed and\n     // the Runnable is directly put in the backing BlockingQueue so that we\n     // can control exactly how the runnable is inserted into the queue.\n     queue.put(\n         new NamedRunnable(keyName) {\n           @Override\n           public void run() {\n             int cacheSize \u003d numValues;\n             int threshold \u003d (int) (lowWatermark * (float) cacheSize);\n             // Need to ensure that only one refill task per key is executed\n             try {\n               if (keyQueue.size() \u003c threshold) {\n                 refiller.fillQueueForKey(name, keyQueue,\n                     cacheSize - keyQueue.size());\n               }\n             } catch (final Exception e) {\n               throw new RuntimeException(e);\n             }\n           }\n         }\n         );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void submitRefillTask(final String keyName,\n      final Queue\u003cE\u003e keyQueue) throws InterruptedException {\n    if (!executorThreadsStarted) {\n      synchronized (this) {\n        // To ensure all requests are first queued, make coreThreads \u003d\n        // maxThreads\n        // and pre-start all the Core Threads.\n        executor.prestartAllCoreThreads();\n        executorThreadsStarted \u003d true;\n      }\n    }\n    // The submit/execute method of the ThreadPoolExecutor is bypassed and\n    // the Runnable is directly put in the backing BlockingQueue so that we\n    // can control exactly how the runnable is inserted into the queue.\n    queue.put(\n        new NamedRunnable(keyName) {\n          @Override\n          public void run() {\n            int cacheSize \u003d numValues;\n            int threshold \u003d (int) (lowWatermark * (float) cacheSize);\n            // Need to ensure that only one refill task per key is executed\n            try {\n              if (keyQueue.size() \u003c threshold) {\n                refiller.fillQueueForKey(name, keyQueue,\n                    cacheSize - keyQueue.size());\n              }\n            } catch (final Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        );\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/ValueQueue.java",
      "extendedDetails": {}
    },
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10720. KMS: Implement generateEncryptedKey and decryptEncryptedKey in the REST API. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612399 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/14 1:55 PM",
      "commitName": "0c1469ece38556cf02a0c7bd23761d6bf79d9a64",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,24 @@\n+  private void submitRefillTask(final String keyName,\n+      final Queue\u003cE\u003e keyQueue) throws InterruptedException {\n+    // The submit/execute method of the ThreadPoolExecutor is bypassed and\n+    // the Runnable is directly put in the backing BlockingQueue so that we\n+    // can control exactly how the runnable is inserted into the queue.\n+    queue.put(\n+        new NamedRunnable(keyName) {\n+          @Override\n+          public void run() {\n+            int cacheSize \u003d numValues;\n+            int threshold \u003d (int) (lowWatermark * (float) cacheSize);\n+            // Need to ensure that only one refill task per key is executed\n+            try {\n+              if (keyQueue.size() \u003c threshold) {\n+                refiller.fillQueueForKey(name, keyQueue,\n+                    cacheSize - keyQueue.size());\n+              }\n+            } catch (final Exception e) {\n+              throw new RuntimeException(e);\n+            }\n+          }\n+        }\n+        );\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void submitRefillTask(final String keyName,\n      final Queue\u003cE\u003e keyQueue) throws InterruptedException {\n    // The submit/execute method of the ThreadPoolExecutor is bypassed and\n    // the Runnable is directly put in the backing BlockingQueue so that we\n    // can control exactly how the runnable is inserted into the queue.\n    queue.put(\n        new NamedRunnable(keyName) {\n          @Override\n          public void run() {\n            int cacheSize \u003d numValues;\n            int threshold \u003d (int) (lowWatermark * (float) cacheSize);\n            // Need to ensure that only one refill task per key is executed\n            try {\n              if (keyQueue.size() \u003c threshold) {\n                refiller.fillQueueForKey(name, keyQueue,\n                    cacheSize - keyQueue.size());\n              }\n            } catch (final Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        );\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/ValueQueue.java"
    }
  }
}