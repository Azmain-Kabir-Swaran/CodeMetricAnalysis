{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GpuResourceAllocator.java",
  "functionName": "recoverAssignedGpus",
  "functionId": "recoverAssignedGpus___containerId-ContainerId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/gpu/GpuResourceAllocator.java",
  "functionStartLine": 118,
  "functionEndLine": 160,
  "numCommitsSeen": 9,
  "timeTaken": 2718,
  "changeHistory": [
    "2216ec54e58e24ff09620fc2efa2f1733391d0c3",
    "506502bb8301f3b4a68e5f692a2af0624980468e",
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd"
  ],
  "changeHistoryShort": {
    "2216ec54e58e24ff09620fc2efa2f1733391d0c3": "Ybodychange",
    "506502bb8301f3b4a68e5f692a2af0624980468e": "Ybodychange",
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5": "Ybodychange",
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2216ec54e58e24ff09620fc2efa2f1733391d0c3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9100. Add tests for GpuResourceAllocator and do minor code cleanup. Contributed by Peter Bacsko\n",
      "commitDate": "16/08/19 12:13 AM",
      "commitName": "2216ec54e58e24ff09620fc2efa2f1733391d0c3",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "20/03/19 4:12 PM",
      "commitNameOld": "506502bb8301f3b4a68e5f692a2af0624980468e",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 148.33,
      "commitsBetweenForRepo": 1098,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   public synchronized void recoverAssignedGpus(ContainerId containerId)\n       throws ResourceHandlerException {\n     Container c \u003d nmContext.getContainers().get(containerId);\n-    if (null \u003d\u003d c) {\n+    if (c \u003d\u003d null) {\n       throw new ResourceHandlerException(\n-          \"This shouldn\u0027t happen, cannot find container with id\u003d\"\n-              + containerId);\n+          \"Cannot find container with id\u003d\" + containerId +\n+              \", this should not occur under normal circumstances!\");\n     }\n \n     LOG.info(\"Starting recovery of GpuDevice for {}.\", containerId);\n     for (Serializable gpuDeviceSerializable : c.getResourceMappings()\n         .getAssignedResources(GPU_URI)) {\n       if (!(gpuDeviceSerializable instanceof GpuDevice)) {\n         throw new ResourceHandlerException(\n             \"Trying to recover device id, however it\"\n-                + \" is not GpuDevice, this shouldn\u0027t happen\");\n+                + \" is not an instance of \" + GpuDevice.class.getName()\n+                + \", this should not occur under normal circumstances!\");\n       }\n \n       GpuDevice gpuDevice \u003d (GpuDevice) gpuDeviceSerializable;\n \n       // Make sure it is in allowed GPU device.\n       if (!allowedGpuDevices.contains(gpuDevice)) {\n         throw new ResourceHandlerException(\n             \"Try to recover device \u003d \" + gpuDevice\n-                + \" however it is not in allowed device list:\" + StringUtils\n-                .join(\",\", allowedGpuDevices));\n+                + \" however it is not in the allowed device list:\" +\n+                StringUtils.join(\",\", allowedGpuDevices));\n       }\n \n       // Make sure it is not occupied by anybody else\n       if (usedDevices.containsKey(gpuDevice)) {\n         throw new ResourceHandlerException(\n             \"Try to recover device id \u003d \" + gpuDevice\n                 + \" however it is already assigned to container\u003d\" + usedDevices\n                 .get(gpuDevice) + \", please double check what happened.\");\n       }\n \n       usedDevices.put(gpuDevice, containerId);\n       LOG.info(\"ContainerId {} is assigned to GpuDevice {} on recovery.\",\n           containerId, gpuDevice);\n     }\n     LOG.info(\"Finished recovery of GpuDevice for {}.\", containerId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void recoverAssignedGpus(ContainerId containerId)\n      throws ResourceHandlerException {\n    Container c \u003d nmContext.getContainers().get(containerId);\n    if (c \u003d\u003d null) {\n      throw new ResourceHandlerException(\n          \"Cannot find container with id\u003d\" + containerId +\n              \", this should not occur under normal circumstances!\");\n    }\n\n    LOG.info(\"Starting recovery of GpuDevice for {}.\", containerId);\n    for (Serializable gpuDeviceSerializable : c.getResourceMappings()\n        .getAssignedResources(GPU_URI)) {\n      if (!(gpuDeviceSerializable instanceof GpuDevice)) {\n        throw new ResourceHandlerException(\n            \"Trying to recover device id, however it\"\n                + \" is not an instance of \" + GpuDevice.class.getName()\n                + \", this should not occur under normal circumstances!\");\n      }\n\n      GpuDevice gpuDevice \u003d (GpuDevice) gpuDeviceSerializable;\n\n      // Make sure it is in allowed GPU device.\n      if (!allowedGpuDevices.contains(gpuDevice)) {\n        throw new ResourceHandlerException(\n            \"Try to recover device \u003d \" + gpuDevice\n                + \" however it is not in the allowed device list:\" +\n                StringUtils.join(\",\", allowedGpuDevices));\n      }\n\n      // Make sure it is not occupied by anybody else\n      if (usedDevices.containsKey(gpuDevice)) {\n        throw new ResourceHandlerException(\n            \"Try to recover device id \u003d \" + gpuDevice\n                + \" however it is already assigned to container\u003d\" + usedDevices\n                .get(gpuDevice) + \", please double check what happened.\");\n      }\n\n      usedDevices.put(gpuDevice, containerId);\n      LOG.info(\"ContainerId {} is assigned to GpuDevice {} on recovery.\",\n          containerId, gpuDevice);\n    }\n    LOG.info(\"Finished recovery of GpuDevice for {}.\", containerId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/gpu/GpuResourceAllocator.java",
      "extendedDetails": {}
    },
    "506502bb8301f3b4a68e5f692a2af0624980468e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9370.  Added logging for recovering assigned GPU devices.\n            Contributed by Yesha Vora\n",
      "commitDate": "20/03/19 4:12 PM",
      "commitName": "506502bb8301f3b4a68e5f692a2af0624980468e",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/03/19 10:57 AM",
      "commitNameOld": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 2.22,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,42 @@\n   public synchronized void recoverAssignedGpus(ContainerId containerId)\n       throws ResourceHandlerException {\n     Container c \u003d nmContext.getContainers().get(containerId);\n     if (null \u003d\u003d c) {\n       throw new ResourceHandlerException(\n           \"This shouldn\u0027t happen, cannot find container with id\u003d\"\n               + containerId);\n     }\n \n+    LOG.info(\"Starting recovery of GpuDevice for {}.\", containerId);\n     for (Serializable gpuDeviceSerializable : c.getResourceMappings()\n         .getAssignedResources(GPU_URI)) {\n       if (!(gpuDeviceSerializable instanceof GpuDevice)) {\n         throw new ResourceHandlerException(\n             \"Trying to recover device id, however it\"\n                 + \" is not GpuDevice, this shouldn\u0027t happen\");\n       }\n \n       GpuDevice gpuDevice \u003d (GpuDevice) gpuDeviceSerializable;\n \n       // Make sure it is in allowed GPU device.\n       if (!allowedGpuDevices.contains(gpuDevice)) {\n         throw new ResourceHandlerException(\n             \"Try to recover device \u003d \" + gpuDevice\n                 + \" however it is not in allowed device list:\" + StringUtils\n                 .join(\",\", allowedGpuDevices));\n       }\n \n       // Make sure it is not occupied by anybody else\n       if (usedDevices.containsKey(gpuDevice)) {\n         throw new ResourceHandlerException(\n             \"Try to recover device id \u003d \" + gpuDevice\n                 + \" however it is already assigned to container\u003d\" + usedDevices\n                 .get(gpuDevice) + \", please double check what happened.\");\n       }\n \n       usedDevices.put(gpuDevice, containerId);\n+      LOG.info(\"ContainerId {} is assigned to GpuDevice {} on recovery.\",\n+          containerId, gpuDevice);\n     }\n+    LOG.info(\"Finished recovery of GpuDevice for {}.\", containerId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void recoverAssignedGpus(ContainerId containerId)\n      throws ResourceHandlerException {\n    Container c \u003d nmContext.getContainers().get(containerId);\n    if (null \u003d\u003d c) {\n      throw new ResourceHandlerException(\n          \"This shouldn\u0027t happen, cannot find container with id\u003d\"\n              + containerId);\n    }\n\n    LOG.info(\"Starting recovery of GpuDevice for {}.\", containerId);\n    for (Serializable gpuDeviceSerializable : c.getResourceMappings()\n        .getAssignedResources(GPU_URI)) {\n      if (!(gpuDeviceSerializable instanceof GpuDevice)) {\n        throw new ResourceHandlerException(\n            \"Trying to recover device id, however it\"\n                + \" is not GpuDevice, this shouldn\u0027t happen\");\n      }\n\n      GpuDevice gpuDevice \u003d (GpuDevice) gpuDeviceSerializable;\n\n      // Make sure it is in allowed GPU device.\n      if (!allowedGpuDevices.contains(gpuDevice)) {\n        throw new ResourceHandlerException(\n            \"Try to recover device \u003d \" + gpuDevice\n                + \" however it is not in allowed device list:\" + StringUtils\n                .join(\",\", allowedGpuDevices));\n      }\n\n      // Make sure it is not occupied by anybody else\n      if (usedDevices.containsKey(gpuDevice)) {\n        throw new ResourceHandlerException(\n            \"Try to recover device id \u003d \" + gpuDevice\n                + \" however it is already assigned to container\u003d\" + usedDevices\n                .get(gpuDevice) + \", please double check what happened.\");\n      }\n\n      usedDevices.put(gpuDevice, containerId);\n      LOG.info(\"ContainerId {} is assigned to GpuDevice {} on recovery.\",\n          containerId, gpuDevice);\n    }\n    LOG.info(\"Finished recovery of GpuDevice for {}.\", containerId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/gpu/GpuResourceAllocator.java",
      "extendedDetails": {}
    },
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7224. Support GPU isolation for docker container. Contributed by Wangda Tan.\n",
      "commitDate": "28/10/17 10:38 PM",
      "commitName": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
      "commitAuthor": "Sunil G",
      "commitDateOld": "11/10/17 11:14 AM",
      "commitNameOld": "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 17.48,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,38 @@\n   public synchronized void recoverAssignedGpus(ContainerId containerId)\n       throws ResourceHandlerException {\n     Container c \u003d nmContext.getContainers().get(containerId);\n     if (null \u003d\u003d c) {\n       throw new ResourceHandlerException(\n           \"This shouldn\u0027t happen, cannot find container with id\u003d\"\n               + containerId);\n     }\n \n-    for (Serializable deviceId : c.getResourceMappings().getAssignedResources(\n-        GPU_URI)){\n-      if (!(deviceId instanceof String)) {\n+    for (Serializable gpuDeviceSerializable : c.getResourceMappings()\n+        .getAssignedResources(GPU_URI)) {\n+      if (!(gpuDeviceSerializable instanceof GpuDevice)) {\n         throw new ResourceHandlerException(\n             \"Trying to recover device id, however it\"\n-                + \" is not String, this shouldn\u0027t happen\");\n+                + \" is not GpuDevice, this shouldn\u0027t happen\");\n       }\n \n-\n-      int devId;\n-      try {\n-        devId \u003d Integer.parseInt((String)deviceId);\n-      } catch (NumberFormatException e) {\n-        throw new ResourceHandlerException(\"Failed to recover device id because\"\n-            + \"it is not a valid integer, devId:\" + deviceId);\n-      }\n+      GpuDevice gpuDevice \u003d (GpuDevice) gpuDeviceSerializable;\n \n       // Make sure it is in allowed GPU device.\n-      if (!allowedGpuDevices.contains(devId)) {\n-        throw new ResourceHandlerException(\"Try to recover device id \u003d \" + devId\n-            + \" however it is not in allowed device list:\" + StringUtils\n-            .join(\",\", allowedGpuDevices));\n+      if (!allowedGpuDevices.contains(gpuDevice)) {\n+        throw new ResourceHandlerException(\n+            \"Try to recover device \u003d \" + gpuDevice\n+                + \" however it is not in allowed device list:\" + StringUtils\n+                .join(\",\", allowedGpuDevices));\n       }\n \n       // Make sure it is not occupied by anybody else\n-      if (usedDevices.containsKey(devId)) {\n-        throw new ResourceHandlerException(\"Try to recover device id \u003d \" + devId\n-            + \" however it is already assigned to container\u003d\" + usedDevices\n-            .get(devId) + \", please double check what happened.\");\n+      if (usedDevices.containsKey(gpuDevice)) {\n+        throw new ResourceHandlerException(\n+            \"Try to recover device id \u003d \" + gpuDevice\n+                + \" however it is already assigned to container\u003d\" + usedDevices\n+                .get(gpuDevice) + \", please double check what happened.\");\n       }\n \n-      usedDevices.put(devId, containerId);\n+      usedDevices.put(gpuDevice, containerId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void recoverAssignedGpus(ContainerId containerId)\n      throws ResourceHandlerException {\n    Container c \u003d nmContext.getContainers().get(containerId);\n    if (null \u003d\u003d c) {\n      throw new ResourceHandlerException(\n          \"This shouldn\u0027t happen, cannot find container with id\u003d\"\n              + containerId);\n    }\n\n    for (Serializable gpuDeviceSerializable : c.getResourceMappings()\n        .getAssignedResources(GPU_URI)) {\n      if (!(gpuDeviceSerializable instanceof GpuDevice)) {\n        throw new ResourceHandlerException(\n            \"Trying to recover device id, however it\"\n                + \" is not GpuDevice, this shouldn\u0027t happen\");\n      }\n\n      GpuDevice gpuDevice \u003d (GpuDevice) gpuDeviceSerializable;\n\n      // Make sure it is in allowed GPU device.\n      if (!allowedGpuDevices.contains(gpuDevice)) {\n        throw new ResourceHandlerException(\n            \"Try to recover device \u003d \" + gpuDevice\n                + \" however it is not in allowed device list:\" + StringUtils\n                .join(\",\", allowedGpuDevices));\n      }\n\n      // Make sure it is not occupied by anybody else\n      if (usedDevices.containsKey(gpuDevice)) {\n        throw new ResourceHandlerException(\n            \"Try to recover device id \u003d \" + gpuDevice\n                + \" however it is already assigned to container\u003d\" + usedDevices\n                .get(gpuDevice) + \", please double check what happened.\");\n      }\n\n      usedDevices.put(gpuDevice, containerId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/gpu/GpuResourceAllocator.java",
      "extendedDetails": {}
    },
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6620. Add support in NodeManager to isolate GPU devices by using CGroups. Contributed by Wangda Tan.\n",
      "commitDate": "11/10/17 11:14 AM",
      "commitName": "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,43 @@\n+  public synchronized void recoverAssignedGpus(ContainerId containerId)\n+      throws ResourceHandlerException {\n+    Container c \u003d nmContext.getContainers().get(containerId);\n+    if (null \u003d\u003d c) {\n+      throw new ResourceHandlerException(\n+          \"This shouldn\u0027t happen, cannot find container with id\u003d\"\n+              + containerId);\n+    }\n+\n+    for (Serializable deviceId : c.getResourceMappings().getAssignedResources(\n+        GPU_URI)){\n+      if (!(deviceId instanceof String)) {\n+        throw new ResourceHandlerException(\n+            \"Trying to recover device id, however it\"\n+                + \" is not String, this shouldn\u0027t happen\");\n+      }\n+\n+\n+      int devId;\n+      try {\n+        devId \u003d Integer.parseInt((String)deviceId);\n+      } catch (NumberFormatException e) {\n+        throw new ResourceHandlerException(\"Failed to recover device id because\"\n+            + \"it is not a valid integer, devId:\" + deviceId);\n+      }\n+\n+      // Make sure it is in allowed GPU device.\n+      if (!allowedGpuDevices.contains(devId)) {\n+        throw new ResourceHandlerException(\"Try to recover device id \u003d \" + devId\n+            + \" however it is not in allowed device list:\" + StringUtils\n+            .join(\",\", allowedGpuDevices));\n+      }\n+\n+      // Make sure it is not occupied by anybody else\n+      if (usedDevices.containsKey(devId)) {\n+        throw new ResourceHandlerException(\"Try to recover device id \u003d \" + devId\n+            + \" however it is already assigned to container\u003d\" + usedDevices\n+            .get(devId) + \", please double check what happened.\");\n+      }\n+\n+      usedDevices.put(devId, containerId);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void recoverAssignedGpus(ContainerId containerId)\n      throws ResourceHandlerException {\n    Container c \u003d nmContext.getContainers().get(containerId);\n    if (null \u003d\u003d c) {\n      throw new ResourceHandlerException(\n          \"This shouldn\u0027t happen, cannot find container with id\u003d\"\n              + containerId);\n    }\n\n    for (Serializable deviceId : c.getResourceMappings().getAssignedResources(\n        GPU_URI)){\n      if (!(deviceId instanceof String)) {\n        throw new ResourceHandlerException(\n            \"Trying to recover device id, however it\"\n                + \" is not String, this shouldn\u0027t happen\");\n      }\n\n\n      int devId;\n      try {\n        devId \u003d Integer.parseInt((String)deviceId);\n      } catch (NumberFormatException e) {\n        throw new ResourceHandlerException(\"Failed to recover device id because\"\n            + \"it is not a valid integer, devId:\" + deviceId);\n      }\n\n      // Make sure it is in allowed GPU device.\n      if (!allowedGpuDevices.contains(devId)) {\n        throw new ResourceHandlerException(\"Try to recover device id \u003d \" + devId\n            + \" however it is not in allowed device list:\" + StringUtils\n            .join(\",\", allowedGpuDevices));\n      }\n\n      // Make sure it is not occupied by anybody else\n      if (usedDevices.containsKey(devId)) {\n        throw new ResourceHandlerException(\"Try to recover device id \u003d \" + devId\n            + \" however it is already assigned to container\u003d\" + usedDevices\n            .get(devId) + \", please double check what happened.\");\n      }\n\n      usedDevices.put(devId, containerId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/gpu/GpuResourceAllocator.java"
    }
  }
}