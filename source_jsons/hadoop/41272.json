{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSSchedulerNode.java",
  "functionName": "addContainersForPreemption",
  "functionId": "addContainersForPreemption___containers-Collection__RMContainer____app-FSAppAttempt",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java",
  "functionStartLine": 204,
  "functionEndLine": 225,
  "numCommitsSeen": 39,
  "timeTaken": 3802,
  "changeHistory": [
    "45535f8afae4e5bf4f60597fc29ba94b4e7743f3",
    "c3375175d616e0380560f89d491b6b9753a8f3e1",
    "10468529a9b858bd945e7ecb063c9c1438efa474"
  ],
  "changeHistoryShort": {
    "45535f8afae4e5bf4f60597fc29ba94b4e7743f3": "Ybodychange",
    "c3375175d616e0380560f89d491b6b9753a8f3e1": "Ymultichange(Yparameterchange,Ybodychange)",
    "10468529a9b858bd945e7ecb063c9c1438efa474": "Yintroduced"
  },
  "changeHistoryDetails": {
    "45535f8afae4e5bf4f60597fc29ba94b4e7743f3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6895. [FairScheduler] Preemption reservation may cause regular reservation leaks. (Miklos Szegedi via Yufei Gu)\n",
      "commitDate": "02/08/17 9:25 AM",
      "commitName": "45535f8afae4e5bf4f60597fc29ba94b4e7743f3",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "01/05/17 7:45 AM",
      "commitNameOld": "30fc5801966feb7f9bdd7d79db75acc595102913",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 93.07,
      "commitsBetweenForRepo": 524,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,22 @@\n   void addContainersForPreemption(Collection\u003cRMContainer\u003e containers,\n                                   FSAppAttempt app) {\n \n-    appIdToAppMap.putIfAbsent(app.getApplicationAttemptId(), app);\n-    resourcesPreemptedForApp.putIfAbsent(app, Resource.newInstance(0, 0));\n-    Resource appReserved \u003d resourcesPreemptedForApp.get(app);\n+    Resource appReserved \u003d Resources.createResource(0);\n \n     for(RMContainer container : containers) {\n-      containersForPreemption.add(container);\n-      Resources.addTo(appReserved, container.getAllocatedResource());\n-      Resources.addTo(totalResourcesPreempted,\n-          container.getAllocatedResource());\n+      if(containersForPreemption.add(container)) {\n+        Resources.addTo(appReserved, container.getAllocatedResource());\n+      }\n+    }\n+\n+    synchronized (this) {\n+      if (!Resources.isNone(appReserved)) {\n+        Resources.addTo(totalResourcesPreempted,\n+            appReserved);\n+        appIdToAppMap.putIfAbsent(app.getApplicationAttemptId(), app);\n+        resourcesPreemptedForApp.\n+            putIfAbsent(app, Resource.newInstance(0, 0));\n+        Resources.addTo(resourcesPreemptedForApp.get(app), appReserved);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void addContainersForPreemption(Collection\u003cRMContainer\u003e containers,\n                                  FSAppAttempt app) {\n\n    Resource appReserved \u003d Resources.createResource(0);\n\n    for(RMContainer container : containers) {\n      if(containersForPreemption.add(container)) {\n        Resources.addTo(appReserved, container.getAllocatedResource());\n      }\n    }\n\n    synchronized (this) {\n      if (!Resources.isNone(appReserved)) {\n        Resources.addTo(totalResourcesPreempted,\n            appReserved);\n        appIdToAppMap.putIfAbsent(app.getApplicationAttemptId(), app);\n        resourcesPreemptedForApp.\n            putIfAbsent(app, Resource.newInstance(0, 0));\n        Resources.addTo(resourcesPreemptedForApp.get(app), appReserved);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java",
      "extendedDetails": {}
    },
    "c3375175d616e0380560f89d491b6b9753a8f3e1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6432. FairScheduler: Reserve preempted resources for corresponding applications. (Miklos Szegedi via kasha)\n",
      "commitDate": "12/04/17 2:21 PM",
      "commitName": "c3375175d616e0380560f89d491b6b9753a8f3e1",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6432. FairScheduler: Reserve preempted resources for corresponding applications. (Miklos Szegedi via kasha)\n",
          "commitDate": "12/04/17 2:21 PM",
          "commitName": "c3375175d616e0380560f89d491b6b9753a8f3e1",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "27/12/16 12:40 PM",
          "commitNameOld": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 106.03,
          "commitsBetweenForRepo": 588,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,14 @@\n-  void addContainersForPreemption(Collection\u003cRMContainer\u003e containers) {\n-    containersForPreemption.addAll(containers);\n+  void addContainersForPreemption(Collection\u003cRMContainer\u003e containers,\n+                                  FSAppAttempt app) {\n+\n+    appIdToAppMap.putIfAbsent(app.getApplicationAttemptId(), app);\n+    resourcesPreemptedForApp.putIfAbsent(app, Resource.newInstance(0, 0));\n+    Resource appReserved \u003d resourcesPreemptedForApp.get(app);\n+\n+    for(RMContainer container : containers) {\n+      containersForPreemption.add(container);\n+      Resources.addTo(appReserved, container.getAllocatedResource());\n+      Resources.addTo(totalResourcesPreempted,\n+          container.getAllocatedResource());\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addContainersForPreemption(Collection\u003cRMContainer\u003e containers,\n                                  FSAppAttempt app) {\n\n    appIdToAppMap.putIfAbsent(app.getApplicationAttemptId(), app);\n    resourcesPreemptedForApp.putIfAbsent(app, Resource.newInstance(0, 0));\n    Resource appReserved \u003d resourcesPreemptedForApp.get(app);\n\n    for(RMContainer container : containers) {\n      containersForPreemption.add(container);\n      Resources.addTo(appReserved, container.getAllocatedResource());\n      Resources.addTo(totalResourcesPreempted,\n          container.getAllocatedResource());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java",
          "extendedDetails": {
            "oldValue": "[containers-Collection\u003cRMContainer\u003e]",
            "newValue": "[containers-Collection\u003cRMContainer\u003e, app-FSAppAttempt]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6432. FairScheduler: Reserve preempted resources for corresponding applications. (Miklos Szegedi via kasha)\n",
          "commitDate": "12/04/17 2:21 PM",
          "commitName": "c3375175d616e0380560f89d491b6b9753a8f3e1",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "27/12/16 12:40 PM",
          "commitNameOld": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 106.03,
          "commitsBetweenForRepo": 588,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,14 @@\n-  void addContainersForPreemption(Collection\u003cRMContainer\u003e containers) {\n-    containersForPreemption.addAll(containers);\n+  void addContainersForPreemption(Collection\u003cRMContainer\u003e containers,\n+                                  FSAppAttempt app) {\n+\n+    appIdToAppMap.putIfAbsent(app.getApplicationAttemptId(), app);\n+    resourcesPreemptedForApp.putIfAbsent(app, Resource.newInstance(0, 0));\n+    Resource appReserved \u003d resourcesPreemptedForApp.get(app);\n+\n+    for(RMContainer container : containers) {\n+      containersForPreemption.add(container);\n+      Resources.addTo(appReserved, container.getAllocatedResource());\n+      Resources.addTo(totalResourcesPreempted,\n+          container.getAllocatedResource());\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addContainersForPreemption(Collection\u003cRMContainer\u003e containers,\n                                  FSAppAttempt app) {\n\n    appIdToAppMap.putIfAbsent(app.getApplicationAttemptId(), app);\n    resourcesPreemptedForApp.putIfAbsent(app, Resource.newInstance(0, 0));\n    Resource appReserved \u003d resourcesPreemptedForApp.get(app);\n\n    for(RMContainer container : containers) {\n      containersForPreemption.add(container);\n      Resources.addTo(appReserved, container.getAllocatedResource());\n      Resources.addTo(totalResourcesPreempted,\n          container.getAllocatedResource());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java",
          "extendedDetails": {}
        }
      ]
    },
    "10468529a9b858bd945e7ecb063c9c1438efa474": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
      "commitDate": "23/11/16 9:48 PM",
      "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
      "commitAuthor": "Daniel Templeton",
      "diff": "@@ -0,0 +1,3 @@\n+  void addContainersForPreemption(Collection\u003cRMContainer\u003e containers) {\n+    containersForPreemption.addAll(containers);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void addContainersForPreemption(Collection\u003cRMContainer\u003e containers) {\n    containersForPreemption.addAll(containers);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java"
    }
  }
}