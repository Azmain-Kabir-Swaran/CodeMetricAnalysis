{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DynamoDBMetadataStore.java",
  "functionName": "innerPut",
  "functionId": "innerPut___metas-Collection__DDBPathMetadata__(modifiers-final)__operationState-BulkOperationState(annotations-@Nullable__modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
  "functionStartLine": 1330,
  "functionEndLine": 1351,
  "numCommitsSeen": 137,
  "timeTaken": 5913,
  "changeHistory": [
    "ea25f4de236611d388e14a710ebe5d6872c421b6",
    "c58e11bf521d746842ce16724211a2a0339d7b61",
    "b15ef7dc3d91c6d50fa515158104fba29f43e6b0",
    "e02eb24e0a9139418120027b694492e0738df20a",
    "d7232857d8d1e10cdac171acdc931187e45fd6be"
  ],
  "changeHistoryShort": {
    "ea25f4de236611d388e14a710ebe5d6872c421b6": "Yparameterchange",
    "c58e11bf521d746842ce16724211a2a0339d7b61": "Ymultichange(Yparameterchange,Ybodychange)",
    "b15ef7dc3d91c6d50fa515158104fba29f43e6b0": "Ybodychange",
    "e02eb24e0a9139418120027b694492e0738df20a": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "d7232857d8d1e10cdac171acdc931187e45fd6be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ea25f4de236611d388e14a710ebe5d6872c421b6": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-16709. S3Guard: Make authoritative mode exclusive for metadata - don\u0027t check for expiry for authoritative paths (#1721). Contributed by Gabor Bota.\n\n",
      "commitDate": "26/11/19 7:36 AM",
      "commitName": "ea25f4de236611d388e14a710ebe5d6872c421b6",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "16/10/19 1:41 AM",
      "commitNameOld": "bbcf0b91d6f5eb697d09e45505b0e72e193c3d75",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 41.29,
      "commitsBetweenForRepo": 153,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,22 @@\n   private void innerPut(\n       final Collection\u003cDDBPathMetadata\u003e metas,\n-      @Nullable final BulkOperationState operationState,\n-      final ITtlTimeProvider ttlTp) throws IOException {\n+      @Nullable final BulkOperationState operationState) throws IOException {\n     if (metas.isEmpty()) {\n       // Happens when someone calls put() with an empty list.\n       LOG.debug(\"Ignoring empty list of entries to put\");\n       return;\n     }\n     // always create or retrieve an ancestor state instance, so it can\n     // always be used for synchronization.\n     final AncestorState ancestorState \u003d extractOrCreate(operationState,\n         BulkOperationState.OperationType.Put);\n \n     Item[] items;\n     synchronized (ancestorState) {\n       items \u003d pathMetadataToItem(\n           completeAncestry(metas, ancestorState));\n     }\n     LOG.debug(\"Saving batch of {} items to table {}, region {}\", items.length,\n         tableName, region);\n     processBatchWriteRequest(ancestorState, null, items);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void innerPut(\n      final Collection\u003cDDBPathMetadata\u003e metas,\n      @Nullable final BulkOperationState operationState) throws IOException {\n    if (metas.isEmpty()) {\n      // Happens when someone calls put() with an empty list.\n      LOG.debug(\"Ignoring empty list of entries to put\");\n      return;\n    }\n    // always create or retrieve an ancestor state instance, so it can\n    // always be used for synchronization.\n    final AncestorState ancestorState \u003d extractOrCreate(operationState,\n        BulkOperationState.OperationType.Put);\n\n    Item[] items;\n    synchronized (ancestorState) {\n      items \u003d pathMetadataToItem(\n          completeAncestry(metas, ancestorState));\n    }\n    LOG.debug(\"Saving batch of {} items to table {}, region {}\", items.length,\n        tableName, region);\n    processBatchWriteRequest(ancestorState, null, items);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {
        "oldValue": "[metas-Collection\u003cDDBPathMetadata\u003e(modifiers-final), operationState-BulkOperationState(annotations-@Nullable__modifiers-final), ttlTp-ITtlTimeProvider(modifiers-final)]",
        "newValue": "[metas-Collection\u003cDDBPathMetadata\u003e(modifiers-final), operationState-BulkOperationState(annotations-@Nullable__modifiers-final)]"
      }
    },
    "c58e11bf521d746842ce16724211a2a0339d7b61": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16383. Pass ITtlTimeProvider instance in initialize method in MetadataStore interface.  Contributed by Gabor Bota. (#1009) \n\n\r\n",
      "commitDate": "17/07/19 7:24 AM",
      "commitName": "c58e11bf521d746842ce16724211a2a0339d7b61",
      "commitAuthor": "Gabor Bota",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16383. Pass ITtlTimeProvider instance in initialize method in MetadataStore interface.  Contributed by Gabor Bota. (#1009) \n\n\r\n",
          "commitDate": "17/07/19 7:24 AM",
          "commitName": "c58e11bf521d746842ce16724211a2a0339d7b61",
          "commitAuthor": "Gabor Bota",
          "commitDateOld": "12/07/19 5:02 AM",
          "commitNameOld": "b15ef7dc3d91c6d50fa515158104fba29f43e6b0",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 5.1,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n   private void innerPut(\n       final Collection\u003cDDBPathMetadata\u003e metas,\n       @Nullable final BulkOperationState operationState,\n-      final ITtlTimeProvider ttlTimeProvider) throws IOException {\n+      final ITtlTimeProvider ttlTp) throws IOException {\n     if (metas.isEmpty()) {\n       // Happens when someone calls put() with an empty list.\n       LOG.debug(\"Ignoring empty list of entries to put\");\n       return;\n     }\n     // always create or retrieve an ancestor state instance, so it can\n     // always be used for synchronization.\n     final AncestorState ancestorState \u003d extractOrCreate(operationState,\n         BulkOperationState.OperationType.Put);\n \n     Item[] items;\n     synchronized (ancestorState) {\n       items \u003d pathMetadataToItem(\n-          completeAncestry(metas, ancestorState, ttlTimeProvider));\n+          completeAncestry(metas, ancestorState));\n     }\n     LOG.debug(\"Saving batch of {} items to table {}, region {}\", items.length,\n         tableName, region);\n     processBatchWriteRequest(ancestorState, null, items);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void innerPut(\n      final Collection\u003cDDBPathMetadata\u003e metas,\n      @Nullable final BulkOperationState operationState,\n      final ITtlTimeProvider ttlTp) throws IOException {\n    if (metas.isEmpty()) {\n      // Happens when someone calls put() with an empty list.\n      LOG.debug(\"Ignoring empty list of entries to put\");\n      return;\n    }\n    // always create or retrieve an ancestor state instance, so it can\n    // always be used for synchronization.\n    final AncestorState ancestorState \u003d extractOrCreate(operationState,\n        BulkOperationState.OperationType.Put);\n\n    Item[] items;\n    synchronized (ancestorState) {\n      items \u003d pathMetadataToItem(\n          completeAncestry(metas, ancestorState));\n    }\n    LOG.debug(\"Saving batch of {} items to table {}, region {}\", items.length,\n        tableName, region);\n    processBatchWriteRequest(ancestorState, null, items);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
          "extendedDetails": {
            "oldValue": "[metas-Collection\u003cDDBPathMetadata\u003e(modifiers-final), operationState-BulkOperationState(annotations-@Nullable__modifiers-final), ttlTimeProvider-ITtlTimeProvider(modifiers-final)]",
            "newValue": "[metas-Collection\u003cDDBPathMetadata\u003e(modifiers-final), operationState-BulkOperationState(annotations-@Nullable__modifiers-final), ttlTp-ITtlTimeProvider(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16383. Pass ITtlTimeProvider instance in initialize method in MetadataStore interface.  Contributed by Gabor Bota. (#1009) \n\n\r\n",
          "commitDate": "17/07/19 7:24 AM",
          "commitName": "c58e11bf521d746842ce16724211a2a0339d7b61",
          "commitAuthor": "Gabor Bota",
          "commitDateOld": "12/07/19 5:02 AM",
          "commitNameOld": "b15ef7dc3d91c6d50fa515158104fba29f43e6b0",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 5.1,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n   private void innerPut(\n       final Collection\u003cDDBPathMetadata\u003e metas,\n       @Nullable final BulkOperationState operationState,\n-      final ITtlTimeProvider ttlTimeProvider) throws IOException {\n+      final ITtlTimeProvider ttlTp) throws IOException {\n     if (metas.isEmpty()) {\n       // Happens when someone calls put() with an empty list.\n       LOG.debug(\"Ignoring empty list of entries to put\");\n       return;\n     }\n     // always create or retrieve an ancestor state instance, so it can\n     // always be used for synchronization.\n     final AncestorState ancestorState \u003d extractOrCreate(operationState,\n         BulkOperationState.OperationType.Put);\n \n     Item[] items;\n     synchronized (ancestorState) {\n       items \u003d pathMetadataToItem(\n-          completeAncestry(metas, ancestorState, ttlTimeProvider));\n+          completeAncestry(metas, ancestorState));\n     }\n     LOG.debug(\"Saving batch of {} items to table {}, region {}\", items.length,\n         tableName, region);\n     processBatchWriteRequest(ancestorState, null, items);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void innerPut(\n      final Collection\u003cDDBPathMetadata\u003e metas,\n      @Nullable final BulkOperationState operationState,\n      final ITtlTimeProvider ttlTp) throws IOException {\n    if (metas.isEmpty()) {\n      // Happens when someone calls put() with an empty list.\n      LOG.debug(\"Ignoring empty list of entries to put\");\n      return;\n    }\n    // always create or retrieve an ancestor state instance, so it can\n    // always be used for synchronization.\n    final AncestorState ancestorState \u003d extractOrCreate(operationState,\n        BulkOperationState.OperationType.Put);\n\n    Item[] items;\n    synchronized (ancestorState) {\n      items \u003d pathMetadataToItem(\n          completeAncestry(metas, ancestorState));\n    }\n    LOG.debug(\"Saving batch of {} items to table {}, region {}\", items.length,\n        tableName, region);\n    processBatchWriteRequest(ancestorState, null, items);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "b15ef7dc3d91c6d50fa515158104fba29f43e6b0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16384: S3A: Avoid inconsistencies between DDB and S3.\n\nContributed by Steve Loughran\n\nContains\n\n- HADOOP-16397. Hadoop S3Guard Prune command to support a -tombstone option.\n- HADOOP-16406. ITestDynamoDBMetadataStore.testProvisionTable times out intermittently\n\nThis patch doesn\u0027t fix the underlying problem but it\n\n* changes some tests to clean up better\n* does a lot more in logging operations in against DDB, if enabled\n* adds an entry point to dump the state of the metastore and s3 tables (precursor to fsck)\n* adds a purge entry point to help clean up after a test run has got a store into a mess\n* s3guard prune command adds -tombstone option to only clear tombstones\n\nThe outcome is that tests should pass consistently and if problems occur we have better diagnostics.\n\nChange-Id: I3eca3f5529d7f6fec398c0ff0472919f08f054eb\n",
      "commitDate": "12/07/19 5:02 AM",
      "commitName": "b15ef7dc3d91c6d50fa515158104fba29f43e6b0",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "08/07/19 10:27 AM",
      "commitNameOld": "de6b7bc67ace7744adb0320ee7de79cf28259d2d",
      "commitAuthorOld": "Sean Mackrory",
      "daysBetweenCommits": 3.77,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private void innerPut(\n       final Collection\u003cDDBPathMetadata\u003e metas,\n       @Nullable final BulkOperationState operationState,\n       final ITtlTimeProvider ttlTimeProvider) throws IOException {\n     if (metas.isEmpty()) {\n       // Happens when someone calls put() with an empty list.\n       LOG.debug(\"Ignoring empty list of entries to put\");\n       return;\n     }\n     // always create or retrieve an ancestor state instance, so it can\n     // always be used for synchronization.\n     final AncestorState ancestorState \u003d extractOrCreate(operationState,\n         BulkOperationState.OperationType.Put);\n \n     Item[] items;\n     synchronized (ancestorState) {\n       items \u003d pathMetadataToItem(\n           completeAncestry(metas, ancestorState, ttlTimeProvider));\n     }\n     LOG.debug(\"Saving batch of {} items to table {}, region {}\", items.length,\n         tableName, region);\n-    processBatchWriteRequest(null, items);\n+    processBatchWriteRequest(ancestorState, null, items);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void innerPut(\n      final Collection\u003cDDBPathMetadata\u003e metas,\n      @Nullable final BulkOperationState operationState,\n      final ITtlTimeProvider ttlTimeProvider) throws IOException {\n    if (metas.isEmpty()) {\n      // Happens when someone calls put() with an empty list.\n      LOG.debug(\"Ignoring empty list of entries to put\");\n      return;\n    }\n    // always create or retrieve an ancestor state instance, so it can\n    // always be used for synchronization.\n    final AncestorState ancestorState \u003d extractOrCreate(operationState,\n        BulkOperationState.OperationType.Put);\n\n    Item[] items;\n    synchronized (ancestorState) {\n      items \u003d pathMetadataToItem(\n          completeAncestry(metas, ancestorState, ttlTimeProvider));\n    }\n    LOG.debug(\"Saving batch of {} items to table {}, region {}\", items.length,\n        tableName, region);\n    processBatchWriteRequest(ancestorState, null, items);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "e02eb24e0a9139418120027b694492e0738df20a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
      "commitDate": "20/06/19 1:56 AM",
      "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
          "commitDate": "20/06/19 1:56 AM",
          "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "16/06/19 9:05 AM",
          "commitNameOld": "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
          "commitAuthorOld": "Gabor Bota",
          "daysBetweenCommits": 3.7,
          "commitsBetweenForRepo": 44,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,23 @@\n-  private void innerPut(Collection\u003cDDBPathMetadata\u003e metas) throws IOException {\n-    Item[] items \u003d pathMetadataToItem(completeAncestry(metas));\n+  private void innerPut(\n+      final Collection\u003cDDBPathMetadata\u003e metas,\n+      @Nullable final BulkOperationState operationState,\n+      final ITtlTimeProvider ttlTimeProvider) throws IOException {\n+    if (metas.isEmpty()) {\n+      // Happens when someone calls put() with an empty list.\n+      LOG.debug(\"Ignoring empty list of entries to put\");\n+      return;\n+    }\n+    // always create or retrieve an ancestor state instance, so it can\n+    // always be used for synchronization.\n+    final AncestorState ancestorState \u003d extractOrCreate(operationState,\n+        BulkOperationState.OperationType.Put);\n+\n+    Item[] items;\n+    synchronized (ancestorState) {\n+      items \u003d pathMetadataToItem(\n+          completeAncestry(metas, ancestorState, ttlTimeProvider));\n+    }\n     LOG.debug(\"Saving batch of {} items to table {}, region {}\", items.length,\n         tableName, region);\n     processBatchWriteRequest(null, items);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void innerPut(\n      final Collection\u003cDDBPathMetadata\u003e metas,\n      @Nullable final BulkOperationState operationState,\n      final ITtlTimeProvider ttlTimeProvider) throws IOException {\n    if (metas.isEmpty()) {\n      // Happens when someone calls put() with an empty list.\n      LOG.debug(\"Ignoring empty list of entries to put\");\n      return;\n    }\n    // always create or retrieve an ancestor state instance, so it can\n    // always be used for synchronization.\n    final AncestorState ancestorState \u003d extractOrCreate(operationState,\n        BulkOperationState.OperationType.Put);\n\n    Item[] items;\n    synchronized (ancestorState) {\n      items \u003d pathMetadataToItem(\n          completeAncestry(metas, ancestorState, ttlTimeProvider));\n    }\n    LOG.debug(\"Saving batch of {} items to table {}, region {}\", items.length,\n        tableName, region);\n    processBatchWriteRequest(null, items);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
          "extendedDetails": {
            "oldValue": "[metas-Collection\u003cDDBPathMetadata\u003e]",
            "newValue": "[metas-Collection\u003cDDBPathMetadata\u003e(modifiers-final), operationState-BulkOperationState(annotations-@Nullable__modifiers-final), ttlTimeProvider-ITtlTimeProvider(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
          "commitDate": "20/06/19 1:56 AM",
          "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "16/06/19 9:05 AM",
          "commitNameOld": "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
          "commitAuthorOld": "Gabor Bota",
          "daysBetweenCommits": 3.7,
          "commitsBetweenForRepo": 44,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,23 @@\n-  private void innerPut(Collection\u003cDDBPathMetadata\u003e metas) throws IOException {\n-    Item[] items \u003d pathMetadataToItem(completeAncestry(metas));\n+  private void innerPut(\n+      final Collection\u003cDDBPathMetadata\u003e metas,\n+      @Nullable final BulkOperationState operationState,\n+      final ITtlTimeProvider ttlTimeProvider) throws IOException {\n+    if (metas.isEmpty()) {\n+      // Happens when someone calls put() with an empty list.\n+      LOG.debug(\"Ignoring empty list of entries to put\");\n+      return;\n+    }\n+    // always create or retrieve an ancestor state instance, so it can\n+    // always be used for synchronization.\n+    final AncestorState ancestorState \u003d extractOrCreate(operationState,\n+        BulkOperationState.OperationType.Put);\n+\n+    Item[] items;\n+    synchronized (ancestorState) {\n+      items \u003d pathMetadataToItem(\n+          completeAncestry(metas, ancestorState, ttlTimeProvider));\n+    }\n     LOG.debug(\"Saving batch of {} items to table {}, region {}\", items.length,\n         tableName, region);\n     processBatchWriteRequest(null, items);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void innerPut(\n      final Collection\u003cDDBPathMetadata\u003e metas,\n      @Nullable final BulkOperationState operationState,\n      final ITtlTimeProvider ttlTimeProvider) throws IOException {\n    if (metas.isEmpty()) {\n      // Happens when someone calls put() with an empty list.\n      LOG.debug(\"Ignoring empty list of entries to put\");\n      return;\n    }\n    // always create or retrieve an ancestor state instance, so it can\n    // always be used for synchronization.\n    final AncestorState ancestorState \u003d extractOrCreate(operationState,\n        BulkOperationState.OperationType.Put);\n\n    Item[] items;\n    synchronized (ancestorState) {\n      items \u003d pathMetadataToItem(\n          completeAncestry(metas, ancestorState, ttlTimeProvider));\n    }\n    LOG.debug(\"Saving batch of {} items to table {}, region {}\", items.length,\n        tableName, region);\n    processBatchWriteRequest(null, items);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
          "commitDate": "20/06/19 1:56 AM",
          "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "16/06/19 9:05 AM",
          "commitNameOld": "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
          "commitAuthorOld": "Gabor Bota",
          "daysBetweenCommits": 3.7,
          "commitsBetweenForRepo": 44,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,23 @@\n-  private void innerPut(Collection\u003cDDBPathMetadata\u003e metas) throws IOException {\n-    Item[] items \u003d pathMetadataToItem(completeAncestry(metas));\n+  private void innerPut(\n+      final Collection\u003cDDBPathMetadata\u003e metas,\n+      @Nullable final BulkOperationState operationState,\n+      final ITtlTimeProvider ttlTimeProvider) throws IOException {\n+    if (metas.isEmpty()) {\n+      // Happens when someone calls put() with an empty list.\n+      LOG.debug(\"Ignoring empty list of entries to put\");\n+      return;\n+    }\n+    // always create or retrieve an ancestor state instance, so it can\n+    // always be used for synchronization.\n+    final AncestorState ancestorState \u003d extractOrCreate(operationState,\n+        BulkOperationState.OperationType.Put);\n+\n+    Item[] items;\n+    synchronized (ancestorState) {\n+      items \u003d pathMetadataToItem(\n+          completeAncestry(metas, ancestorState, ttlTimeProvider));\n+    }\n     LOG.debug(\"Saving batch of {} items to table {}, region {}\", items.length,\n         tableName, region);\n     processBatchWriteRequest(null, items);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void innerPut(\n      final Collection\u003cDDBPathMetadata\u003e metas,\n      @Nullable final BulkOperationState operationState,\n      final ITtlTimeProvider ttlTimeProvider) throws IOException {\n    if (metas.isEmpty()) {\n      // Happens when someone calls put() with an empty list.\n      LOG.debug(\"Ignoring empty list of entries to put\");\n      return;\n    }\n    // always create or retrieve an ancestor state instance, so it can\n    // always be used for synchronization.\n    final AncestorState ancestorState \u003d extractOrCreate(operationState,\n        BulkOperationState.OperationType.Put);\n\n    Item[] items;\n    synchronized (ancestorState) {\n      items \u003d pathMetadataToItem(\n          completeAncestry(metas, ancestorState, ttlTimeProvider));\n    }\n    LOG.debug(\"Saving batch of {} items to table {}, region {}\", items.length,\n        tableName, region);\n    processBatchWriteRequest(null, items);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
          "extendedDetails": {
            "oldValue": "[metas-Collection\u003cDDBPathMetadata\u003e]",
            "newValue": "[metas-Collection\u003cDDBPathMetadata\u003e(modifiers-final), operationState-BulkOperationState(annotations-@Nullable__modifiers-final), ttlTimeProvider-ITtlTimeProvider(modifiers-final)]"
          }
        }
      ]
    },
    "d7232857d8d1e10cdac171acdc931187e45fd6be": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14154 Persist isAuthoritative bit in DynamoDBMetaStore (Contributed by Gabor Bota)\n",
      "commitDate": "17/08/18 10:15 AM",
      "commitName": "d7232857d8d1e10cdac171acdc931187e45fd6be",
      "commitAuthor": "Aaron Fabbri",
      "diff": "@@ -0,0 +1,6 @@\n+  private void innerPut(Collection\u003cDDBPathMetadata\u003e metas) throws IOException {\n+    Item[] items \u003d pathMetadataToItem(completeAncestry(metas));\n+    LOG.debug(\"Saving batch of {} items to table {}, region {}\", items.length,\n+        tableName, region);\n+    processBatchWriteRequest(null, items);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void innerPut(Collection\u003cDDBPathMetadata\u003e metas) throws IOException {\n    Item[] items \u003d pathMetadataToItem(completeAncestry(metas));\n    LOG.debug(\"Saving batch of {} items to table {}, region {}\", items.length,\n        tableName, region);\n    processBatchWriteRequest(null, items);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java"
    }
  }
}