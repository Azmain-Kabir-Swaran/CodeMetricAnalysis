{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TempQueuePerPartition.java",
  "functionName": "assignPreemption",
  "functionId": "assignPreemption___scalingFactor-float__rc-ResourceCalculator__clusterResource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/TempQueuePerPartition.java",
  "functionStartLine": 272,
  "functionEndLine": 297,
  "numCommitsSeen": 41,
  "timeTaken": 3617,
  "changeHistory": [
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
    "60e4116bf1d00afed91010e57357fe54057e4e39",
    "ae14e5d07f1b6702a5160637438028bb03d9387e",
    "fa7a43529d529f0006c8033c2003f15b9b93f103",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61"
  ],
  "changeHistoryShort": {
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": "Ybodychange",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": "Ybodychange",
    "60e4116bf1d00afed91010e57357fe54057e4e39": "Ymovefromfile",
    "ae14e5d07f1b6702a5160637438028bb03d9387e": "Ybodychange",
    "fa7a43529d529f0006c8033c2003f15b9b93f103": "Ybodychange",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": "Ybodychange",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": "Yintroduced"
  },
  "changeHistoryDetails": {
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
      "commitDate": "31/10/16 3:18 PM",
      "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "29/05/16 8:54 AM",
      "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 155.27,
      "commitsBetweenForRepo": 1196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   public void assignPreemption(float scalingFactor, ResourceCalculator rc,\n       Resource clusterResource) {\n-    Resource usedDeductKillable \u003d Resources.subtract(\n-        getUsed(), killable);\n+    Resource usedDeductKillable \u003d Resources.subtract(getUsed(), killable);\n     Resource totalResource \u003d Resources.add(getUsed(), pending);\n \n     // The minimum resource that we need to keep for a queue is:\n     // max(idealAssigned, min(used + pending, guaranteed)).\n     //\n     // Doing this because when we calculate ideal allocation doesn\u0027t consider\n     // reserved resource, ideal-allocation calculated could be less than\n-    // guaranteed and total. We should avoid preempt from a queue if it is already\n+    // guaranteed and total. We should avoid preempt from a queue if it is\n+    // already\n     // \u003c\u003d its guaranteed resource.\n     Resource minimumQueueResource \u003d Resources.max(rc, clusterResource,\n         Resources.min(rc, clusterResource, totalResource, getGuaranteed()),\n         idealAssigned);\n \n     if (Resources.greaterThan(rc, clusterResource, usedDeductKillable,\n         minimumQueueResource)) {\n       toBePreempted \u003d Resources.multiply(\n-          Resources.subtract(usedDeductKillable, minimumQueueResource), scalingFactor);\n+          Resources.subtract(usedDeductKillable, minimumQueueResource),\n+          scalingFactor);\n     } else {\n       toBePreempted \u003d Resources.none();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void assignPreemption(float scalingFactor, ResourceCalculator rc,\n      Resource clusterResource) {\n    Resource usedDeductKillable \u003d Resources.subtract(getUsed(), killable);\n    Resource totalResource \u003d Resources.add(getUsed(), pending);\n\n    // The minimum resource that we need to keep for a queue is:\n    // max(idealAssigned, min(used + pending, guaranteed)).\n    //\n    // Doing this because when we calculate ideal allocation doesn\u0027t consider\n    // reserved resource, ideal-allocation calculated could be less than\n    // guaranteed and total. We should avoid preempt from a queue if it is\n    // already\n    // \u003c\u003d its guaranteed resource.\n    Resource minimumQueueResource \u003d Resources.max(rc, clusterResource,\n        Resources.min(rc, clusterResource, totalResource, getGuaranteed()),\n        idealAssigned);\n\n    if (Resources.greaterThan(rc, clusterResource, usedDeductKillable,\n        minimumQueueResource)) {\n      toBePreempted \u003d Resources.multiply(\n          Resources.subtract(usedDeductKillable, minimumQueueResource),\n          scalingFactor);\n    } else {\n      toBePreempted \u003d Resources.none();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/TempQueuePerPartition.java",
      "extendedDetails": {}
    },
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4390. Do surgical preemption based on reserved container in CapacityScheduler. Contributed by Wangda Tan\n",
      "commitDate": "05/05/16 12:56 PM",
      "commitName": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/03/16 12:43 PM",
      "commitNameOld": "60e4116bf1d00afed91010e57357fe54057e4e39",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 36.01,
      "commitsBetweenForRepo": 225,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,25 @@\n   public void assignPreemption(float scalingFactor, ResourceCalculator rc,\n       Resource clusterResource) {\n-    if (Resources.greaterThan(rc, clusterResource,\n-        Resources.subtract(current, killable), idealAssigned)) {\n-      toBePreempted \u003d Resources.multiply(Resources\n-              .subtract(Resources.subtract(current, killable), idealAssigned),\n-          scalingFactor);\n+    Resource usedDeductKillable \u003d Resources.subtract(\n+        getUsed(), killable);\n+    Resource totalResource \u003d Resources.add(getUsed(), pending);\n+\n+    // The minimum resource that we need to keep for a queue is:\n+    // max(idealAssigned, min(used + pending, guaranteed)).\n+    //\n+    // Doing this because when we calculate ideal allocation doesn\u0027t consider\n+    // reserved resource, ideal-allocation calculated could be less than\n+    // guaranteed and total. We should avoid preempt from a queue if it is already\n+    // \u003c\u003d its guaranteed resource.\n+    Resource minimumQueueResource \u003d Resources.max(rc, clusterResource,\n+        Resources.min(rc, clusterResource, totalResource, getGuaranteed()),\n+        idealAssigned);\n+\n+    if (Resources.greaterThan(rc, clusterResource, usedDeductKillable,\n+        minimumQueueResource)) {\n+      toBePreempted \u003d Resources.multiply(\n+          Resources.subtract(usedDeductKillable, minimumQueueResource), scalingFactor);\n     } else {\n-      toBePreempted \u003d Resource.newInstance(0, 0);\n+      toBePreempted \u003d Resources.none();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void assignPreemption(float scalingFactor, ResourceCalculator rc,\n      Resource clusterResource) {\n    Resource usedDeductKillable \u003d Resources.subtract(\n        getUsed(), killable);\n    Resource totalResource \u003d Resources.add(getUsed(), pending);\n\n    // The minimum resource that we need to keep for a queue is:\n    // max(idealAssigned, min(used + pending, guaranteed)).\n    //\n    // Doing this because when we calculate ideal allocation doesn\u0027t consider\n    // reserved resource, ideal-allocation calculated could be less than\n    // guaranteed and total. We should avoid preempt from a queue if it is already\n    // \u003c\u003d its guaranteed resource.\n    Resource minimumQueueResource \u003d Resources.max(rc, clusterResource,\n        Resources.min(rc, clusterResource, totalResource, getGuaranteed()),\n        idealAssigned);\n\n    if (Resources.greaterThan(rc, clusterResource, usedDeductKillable,\n        minimumQueueResource)) {\n      toBePreempted \u003d Resources.multiply(\n          Resources.subtract(usedDeductKillable, minimumQueueResource), scalingFactor);\n    } else {\n      toBePreempted \u003d Resources.none();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/TempQueuePerPartition.java",
      "extendedDetails": {}
    },
    "60e4116bf1d00afed91010e57357fe54057e4e39": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-4822. Refactor existing Preemption Policy of CS for easier adding new approach to select preemption candidates. Contributed by Wangda Tan\n",
      "commitDate": "30/03/16 12:43 PM",
      "commitName": "60e4116bf1d00afed91010e57357fe54057e4e39",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/03/16 11:22 PM",
      "commitNameOld": "09d63d5a192b5d6b172f94ff6c94da348fd49ea6",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.56,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n-    public void assignPreemption(float scalingFactor,\n-        ResourceCalculator rc, Resource clusterResource) {\n-      if (Resources.greaterThan(rc, clusterResource,\n-          Resources.subtract(current, killable), idealAssigned)) {\n-        toBePreempted \u003d Resources.multiply(Resources.subtract(\n-            Resources.subtract(current, killable), idealAssigned),\n-            scalingFactor);\n-      } else {\n-        toBePreempted \u003d Resource.newInstance(0, 0);\n-      }\n-    }\n\\ No newline at end of file\n+  public void assignPreemption(float scalingFactor, ResourceCalculator rc,\n+      Resource clusterResource) {\n+    if (Resources.greaterThan(rc, clusterResource,\n+        Resources.subtract(current, killable), idealAssigned)) {\n+      toBePreempted \u003d Resources.multiply(Resources\n+              .subtract(Resources.subtract(current, killable), idealAssigned),\n+          scalingFactor);\n+    } else {\n+      toBePreempted \u003d Resource.newInstance(0, 0);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void assignPreemption(float scalingFactor, ResourceCalculator rc,\n      Resource clusterResource) {\n    if (Resources.greaterThan(rc, clusterResource,\n        Resources.subtract(current, killable), idealAssigned)) {\n      toBePreempted \u003d Resources.multiply(Resources\n              .subtract(Resources.subtract(current, killable), idealAssigned),\n          scalingFactor);\n    } else {\n      toBePreempted \u003d Resource.newInstance(0, 0);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/TempQueuePerPartition.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/TempQueuePerPartition.java",
        "oldMethodName": "assignPreemption",
        "newMethodName": "assignPreemption"
      }
    },
    "ae14e5d07f1b6702a5160637438028bb03d9387e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4108. CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n\n(cherry picked from commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913)\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 5:02 PM",
      "commitNameOld": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,11 @@\n     public void assignPreemption(float scalingFactor,\n         ResourceCalculator rc, Resource clusterResource) {\n-      if (Resources.greaterThan(rc, clusterResource, current, idealAssigned)) {\n-          toBePreempted \u003d Resources.multiply(\n-              Resources.subtract(current, idealAssigned), scalingFactor);\n+      if (Resources.greaterThan(rc, clusterResource,\n+          Resources.subtract(current, killable), idealAssigned)) {\n+        toBePreempted \u003d Resources.multiply(Resources.subtract(\n+            Resources.subtract(current, killable), idealAssigned),\n+            scalingFactor);\n       } else {\n         toBePreempted \u003d Resource.newInstance(0, 0);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void assignPreemption(float scalingFactor,\n        ResourceCalculator rc, Resource clusterResource) {\n      if (Resources.greaterThan(rc, clusterResource,\n          Resources.subtract(current, killable), idealAssigned)) {\n        toBePreempted \u003d Resources.multiply(Resources.subtract(\n            Resources.subtract(current, killable), idealAssigned),\n            scalingFactor);\n      } else {\n        toBePreempted \u003d Resource.newInstance(0, 0);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
      "extendedDetails": {}
    },
    "fa7a43529d529f0006c8033c2003f15b9b93f103": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\"\n\nThis reverts commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913.\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 4:59 PM",
      "commitNameOld": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,9 @@\n     public void assignPreemption(float scalingFactor,\n         ResourceCalculator rc, Resource clusterResource) {\n-      if (Resources.greaterThan(rc, clusterResource,\n-          Resources.subtract(current, killable), idealAssigned)) {\n-        toBePreempted \u003d Resources.multiply(Resources.subtract(\n-            Resources.subtract(current, killable), idealAssigned),\n-            scalingFactor);\n+      if (Resources.greaterThan(rc, clusterResource, current, idealAssigned)) {\n+          toBePreempted \u003d Resources.multiply(\n+              Resources.subtract(current, idealAssigned), scalingFactor);\n       } else {\n         toBePreempted \u003d Resource.newInstance(0, 0);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void assignPreemption(float scalingFactor,\n        ResourceCalculator rc, Resource clusterResource) {\n      if (Resources.greaterThan(rc, clusterResource, current, idealAssigned)) {\n          toBePreempted \u003d Resources.multiply(\n              Resources.subtract(current, idealAssigned), scalingFactor);\n      } else {\n        toBePreempted \u003d Resource.newInstance(0, 0);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
      "extendedDetails": {}
    },
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": {
      "type": "Ybodychange",
      "commitMessage": "CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n",
      "commitDate": "16/03/16 4:59 PM",
      "commitName": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/16 5:30 PM",
      "commitNameOld": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 57.94,
      "commitsBetweenForRepo": 394,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,11 @@\n     public void assignPreemption(float scalingFactor,\n         ResourceCalculator rc, Resource clusterResource) {\n-      if (Resources.greaterThan(rc, clusterResource, current, idealAssigned)) {\n-          toBePreempted \u003d Resources.multiply(\n-              Resources.subtract(current, idealAssigned), scalingFactor);\n+      if (Resources.greaterThan(rc, clusterResource,\n+          Resources.subtract(current, killable), idealAssigned)) {\n+        toBePreempted \u003d Resources.multiply(Resources.subtract(\n+            Resources.subtract(current, killable), idealAssigned),\n+            scalingFactor);\n       } else {\n         toBePreempted \u003d Resource.newInstance(0, 0);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void assignPreemption(float scalingFactor,\n        ResourceCalculator rc, Resource clusterResource) {\n      if (Resources.greaterThan(rc, clusterResource,\n          Resources.subtract(current, killable), idealAssigned)) {\n        toBePreempted \u003d Resources.multiply(Resources.subtract(\n            Resources.subtract(current, killable), idealAssigned),\n            scalingFactor);\n      } else {\n        toBePreempted \u003d Resource.newInstance(0, 0);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
      "extendedDetails": {}
    },
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": {
      "type": "Yintroduced",
      "commitMessage": "YARN-569. Add support for requesting and enforcing preemption requests via\na capacity monitor. Contributed by Carlo Curino, Chris Douglas\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502083 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/13 6:20 PM",
      "commitName": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,9 @@\n+    public void assignPreemption(float scalingFactor,\n+        ResourceCalculator rc, Resource clusterResource) {\n+      if (Resources.greaterThan(rc, clusterResource, current, idealAssigned)) {\n+          toBePreempted \u003d Resources.multiply(\n+              Resources.subtract(current, idealAssigned), scalingFactor);\n+      } else {\n+        toBePreempted \u003d Resource.newInstance(0, 0);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void assignPreemption(float scalingFactor,\n        ResourceCalculator rc, Resource clusterResource) {\n      if (Resources.greaterThan(rc, clusterResource, current, idealAssigned)) {\n          toBePreempted \u003d Resources.multiply(\n              Resources.subtract(current, idealAssigned), scalingFactor);\n      } else {\n        toBePreempted \u003d Resource.newInstance(0, 0);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java"
    }
  }
}