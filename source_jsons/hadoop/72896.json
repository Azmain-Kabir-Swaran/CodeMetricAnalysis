{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavaKeyStoreProvider.java",
  "functionName": "tryLoadIncompleteFlush",
  "functionId": "tryLoadIncompleteFlush___oldPath-Path__newPath-Path",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java",
  "functionStartLine": 229,
  "functionEndLine": 250,
  "numCommitsSeen": 26,
  "timeTaken": 1161,
  "changeHistory": [
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa",
    "74fe84393d9a8c412f69bbf0cd0ad06f3cc85e85"
  ],
  "changeHistoryShort": {
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa": "Ybodychange",
    "74fe84393d9a8c412f69bbf0cd0ad06f3cc85e85": "Yintroduced"
  },
  "changeHistoryDetails": {
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12942. hadoop credential commands non-obviously use password of \"none\" (Mike Yoder via lmccay)",
      "commitDate": "11/05/16 11:30 AM",
      "commitName": "acb509b2fa0bbe6e00f8a90aec37f63a09463afa",
      "commitAuthor": "Larry McCay",
      "commitDateOld": "25/03/15 12:59 AM",
      "commitNameOld": "b351086ff66ca279c0550e078e3a9d110f3f36a5",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 413.44,
      "commitsBetweenForRepo": 3081,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   private FsPermission tryLoadIncompleteFlush(Path oldPath, Path newPath)\n       throws IOException, NoSuchAlgorithmException, CertificateException {\n     FsPermission perm \u003d null;\n     // Check if _NEW exists (in case flush had finished writing but not\n     // completed the re-naming)\n     if (fs.exists(newPath)) {\n       perm \u003d loadAndReturnPerm(newPath, oldPath);\n     }\n     // try loading from _OLD (An earlier Flushing MIGHT not have completed\n     // writing completely)\n     if ((perm \u003d\u003d null) \u0026\u0026 fs.exists(oldPath)) {\n       perm \u003d loadAndReturnPerm(oldPath, newPath);\n     }\n     // If not loaded yet,\n     // required to create an empty keystore. *sigh*\n     if (perm \u003d\u003d null) {\n       keyStore.load(null, password);\n       LOG.debug(\"KeyStore initialized anew successfully !!\");\n-      perm \u003d new FsPermission(\"700\");\n+      perm \u003d new FsPermission(\"600\");\n     }\n     return perm;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FsPermission tryLoadIncompleteFlush(Path oldPath, Path newPath)\n      throws IOException, NoSuchAlgorithmException, CertificateException {\n    FsPermission perm \u003d null;\n    // Check if _NEW exists (in case flush had finished writing but not\n    // completed the re-naming)\n    if (fs.exists(newPath)) {\n      perm \u003d loadAndReturnPerm(newPath, oldPath);\n    }\n    // try loading from _OLD (An earlier Flushing MIGHT not have completed\n    // writing completely)\n    if ((perm \u003d\u003d null) \u0026\u0026 fs.exists(oldPath)) {\n      perm \u003d loadAndReturnPerm(oldPath, newPath);\n    }\n    // If not loaded yet,\n    // required to create an empty keystore. *sigh*\n    if (perm \u003d\u003d null) {\n      keyStore.load(null, password);\n      LOG.debug(\"KeyStore initialized anew successfully !!\");\n      perm \u003d new FsPermission(\"600\");\n    }\n    return perm;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java",
      "extendedDetails": {}
    },
    "74fe84393d9a8c412f69bbf0cd0ad06f3cc85e85": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10224. JavaKeyStoreProvider has to protect against corrupting underlying store. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616908 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/14 5:00 PM",
      "commitName": "74fe84393d9a8c412f69bbf0cd0ad06f3cc85e85",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,22 @@\n+  private FsPermission tryLoadIncompleteFlush(Path oldPath, Path newPath)\n+      throws IOException, NoSuchAlgorithmException, CertificateException {\n+    FsPermission perm \u003d null;\n+    // Check if _NEW exists (in case flush had finished writing but not\n+    // completed the re-naming)\n+    if (fs.exists(newPath)) {\n+      perm \u003d loadAndReturnPerm(newPath, oldPath);\n+    }\n+    // try loading from _OLD (An earlier Flushing MIGHT not have completed\n+    // writing completely)\n+    if ((perm \u003d\u003d null) \u0026\u0026 fs.exists(oldPath)) {\n+      perm \u003d loadAndReturnPerm(oldPath, newPath);\n+    }\n+    // If not loaded yet,\n+    // required to create an empty keystore. *sigh*\n+    if (perm \u003d\u003d null) {\n+      keyStore.load(null, password);\n+      LOG.debug(\"KeyStore initialized anew successfully !!\");\n+      perm \u003d new FsPermission(\"700\");\n+    }\n+    return perm;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private FsPermission tryLoadIncompleteFlush(Path oldPath, Path newPath)\n      throws IOException, NoSuchAlgorithmException, CertificateException {\n    FsPermission perm \u003d null;\n    // Check if _NEW exists (in case flush had finished writing but not\n    // completed the re-naming)\n    if (fs.exists(newPath)) {\n      perm \u003d loadAndReturnPerm(newPath, oldPath);\n    }\n    // try loading from _OLD (An earlier Flushing MIGHT not have completed\n    // writing completely)\n    if ((perm \u003d\u003d null) \u0026\u0026 fs.exists(oldPath)) {\n      perm \u003d loadAndReturnPerm(oldPath, newPath);\n    }\n    // If not loaded yet,\n    // required to create an empty keystore. *sigh*\n    if (perm \u003d\u003d null) {\n      keyStore.load(null, password);\n      LOG.debug(\"KeyStore initialized anew successfully !!\");\n      perm \u003d new FsPermission(\"700\");\n    }\n    return perm;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/JavaKeyStoreProvider.java"
    }
  }
}