{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockingThreadPoolExecutorService.java",
  "functionName": "getNamedThreadFactory",
  "functionId": "getNamedThreadFactory___prefix-String(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/BlockingThreadPoolExecutorService.java",
  "functionStartLine": 62,
  "functionEndLine": 79,
  "numCommitsSeen": 24,
  "timeTaken": 2358,
  "changeHistory": [
    "f86c81d923ecce9d1c9fb691bbc78e93b4a65ae7",
    "6c348c56918973fd988b110e79231324a8befe12",
    "bff7c90a5686de106ca7a866982412c5dfa01632",
    "27d8395867f665fea1360087325cda5ed70efd0c"
  ],
  "changeHistoryShort": {
    "f86c81d923ecce9d1c9fb691bbc78e93b4a65ae7": "Yfilerename",
    "6c348c56918973fd988b110e79231324a8befe12": "Ymodifierchange",
    "bff7c90a5686de106ca7a866982412c5dfa01632": "Ymultichange(Ymovefromfile,Ybodychange)",
    "27d8395867f665fea1360087325cda5ed70efd0c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f86c81d923ecce9d1c9fb691bbc78e93b4a65ae7": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15039. Move SemaphoredDelegatingExecutor to hadoop-common. Contributed by Genmao Yu\n",
      "commitDate": "13/12/17 7:14 PM",
      "commitName": "f86c81d923ecce9d1c9fb691bbc78e93b4a65ae7",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "13/12/17 7:05 PM",
      "commitNameOld": "28792b6b7f137df1db58496f27de23bbe99cdfd6",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static ThreadFactory getNamedThreadFactory(final String prefix) {\n    SecurityManager s \u003d System.getSecurityManager();\n    final ThreadGroup threadGroup \u003d (s !\u003d null) ? s.getThreadGroup() :\n        Thread.currentThread().getThreadGroup();\n\n    return new ThreadFactory() {\n      private final AtomicInteger threadNumber \u003d new AtomicInteger(1);\n      private final int poolNum \u003d POOLNUMBER.getAndIncrement();\n      private final ThreadGroup group \u003d threadGroup;\n\n      @Override\n      public Thread newThread(Runnable r) {\n        final String name \u003d\n            prefix + \"-pool\" + poolNum + \"-t\" + threadNumber.getAndIncrement();\n        return new Thread(group, r, name);\n      }\n    };\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/BlockingThreadPoolExecutorService.java",
      "extendedDetails": {
        "oldPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/BlockingThreadPoolExecutorService.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/BlockingThreadPoolExecutorService.java"
      }
    },
    "6c348c56918973fd988b110e79231324a8befe12": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-13560. S3ABlockOutputStream to support huge (many GB) file writes. Contributed by Steve Loughran\n",
      "commitDate": "18/10/16 1:16 PM",
      "commitName": "6c348c56918973fd988b110e79231324a8befe12",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "08/11/15 2:17 AM",
      "commitNameOld": "3ae82863f045d27b3e29cea2f622e229e7f00690",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 345.42,
      "commitsBetweenForRepo": 2347,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n-  public static ThreadFactory getNamedThreadFactory(final String prefix) {\n+  static ThreadFactory getNamedThreadFactory(final String prefix) {\n     SecurityManager s \u003d System.getSecurityManager();\n     final ThreadGroup threadGroup \u003d (s !\u003d null) ? s.getThreadGroup() :\n         Thread.currentThread().getThreadGroup();\n \n     return new ThreadFactory() {\n       private final AtomicInteger threadNumber \u003d new AtomicInteger(1);\n       private final int poolNum \u003d POOLNUMBER.getAndIncrement();\n       private final ThreadGroup group \u003d threadGroup;\n \n       @Override\n       public Thread newThread(Runnable r) {\n         final String name \u003d\n             prefix + \"-pool\" + poolNum + \"-t\" + threadNumber.getAndIncrement();\n         return new Thread(group, r, name);\n       }\n     };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static ThreadFactory getNamedThreadFactory(final String prefix) {\n    SecurityManager s \u003d System.getSecurityManager();\n    final ThreadGroup threadGroup \u003d (s !\u003d null) ? s.getThreadGroup() :\n        Thread.currentThread().getThreadGroup();\n\n    return new ThreadFactory() {\n      private final AtomicInteger threadNumber \u003d new AtomicInteger(1);\n      private final int poolNum \u003d POOLNUMBER.getAndIncrement();\n      private final ThreadGroup group \u003d threadGroup;\n\n      @Override\n      public Thread newThread(Runnable r) {\n        final String name \u003d\n            prefix + \"-pool\" + poolNum + \"-t\" + threadNumber.getAndIncrement();\n        return new Thread(group, r, name);\n      }\n    };\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/BlockingThreadPoolExecutorService.java",
      "extendedDetails": {
        "oldValue": "[public, static]",
        "newValue": "[static]"
      }
    },
    "bff7c90a5686de106ca7a866982412c5dfa01632": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HADOOP-11684. S3a to use thread pool that blocks clients. (Thomas Demoor and Aaron Fabbri via lei)\n",
      "commitDate": "05/11/15 6:35 PM",
      "commitName": "bff7c90a5686de106ca7a866982412c5dfa01632",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-11684. S3a to use thread pool that blocks clients. (Thomas Demoor and Aaron Fabbri via lei)\n",
          "commitDate": "05/11/15 6:35 PM",
          "commitName": "bff7c90a5686de106ca7a866982412c5dfa01632",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "05/11/15 4:57 PM",
          "commitNameOld": "19a0c2660cce0dccf968376bed249de94b58b8a2",
          "commitAuthorOld": "Allen Wittenauer",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,18 @@\n   public static ThreadFactory getNamedThreadFactory(final String prefix) {\n     SecurityManager s \u003d System.getSecurityManager();\n-    final ThreadGroup threadGroup \u003d (s !\u003d null) ? s.getThreadGroup() : Thread.currentThread()\n-        .getThreadGroup();\n+    final ThreadGroup threadGroup \u003d (s !\u003d null) ? s.getThreadGroup() :\n+        Thread.currentThread().getThreadGroup();\n \n     return new ThreadFactory() {\n-      final AtomicInteger threadNumber \u003d new AtomicInteger(1);\n-      private final int poolNum \u003d poolNumber.getAndIncrement();\n-      final ThreadGroup group \u003d threadGroup;\n+      private final AtomicInteger threadNumber \u003d new AtomicInteger(1);\n+      private final int poolNum \u003d POOLNUMBER.getAndIncrement();\n+      private final ThreadGroup group \u003d threadGroup;\n \n       @Override\n       public Thread newThread(Runnable r) {\n-        final String name \u003d prefix + \"-pool\" + poolNum + \"-t\" + threadNumber.getAndIncrement();\n+        final String name \u003d\n+            prefix + \"-pool\" + poolNum + \"-t\" + threadNumber.getAndIncrement();\n         return new Thread(group, r, name);\n       }\n     };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ThreadFactory getNamedThreadFactory(final String prefix) {\n    SecurityManager s \u003d System.getSecurityManager();\n    final ThreadGroup threadGroup \u003d (s !\u003d null) ? s.getThreadGroup() :\n        Thread.currentThread().getThreadGroup();\n\n    return new ThreadFactory() {\n      private final AtomicInteger threadNumber \u003d new AtomicInteger(1);\n      private final int poolNum \u003d POOLNUMBER.getAndIncrement();\n      private final ThreadGroup group \u003d threadGroup;\n\n      @Override\n      public Thread newThread(Runnable r) {\n        final String name \u003d\n            prefix + \"-pool\" + poolNum + \"-t\" + threadNumber.getAndIncrement();\n        return new Thread(group, r, name);\n      }\n    };\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/BlockingThreadPoolExecutorService.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
            "newPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/BlockingThreadPoolExecutorService.java",
            "oldMethodName": "getNamedThreadFactory",
            "newMethodName": "getNamedThreadFactory"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11684. S3a to use thread pool that blocks clients. (Thomas Demoor and Aaron Fabbri via lei)\n",
          "commitDate": "05/11/15 6:35 PM",
          "commitName": "bff7c90a5686de106ca7a866982412c5dfa01632",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "05/11/15 4:57 PM",
          "commitNameOld": "19a0c2660cce0dccf968376bed249de94b58b8a2",
          "commitAuthorOld": "Allen Wittenauer",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,18 @@\n   public static ThreadFactory getNamedThreadFactory(final String prefix) {\n     SecurityManager s \u003d System.getSecurityManager();\n-    final ThreadGroup threadGroup \u003d (s !\u003d null) ? s.getThreadGroup() : Thread.currentThread()\n-        .getThreadGroup();\n+    final ThreadGroup threadGroup \u003d (s !\u003d null) ? s.getThreadGroup() :\n+        Thread.currentThread().getThreadGroup();\n \n     return new ThreadFactory() {\n-      final AtomicInteger threadNumber \u003d new AtomicInteger(1);\n-      private final int poolNum \u003d poolNumber.getAndIncrement();\n-      final ThreadGroup group \u003d threadGroup;\n+      private final AtomicInteger threadNumber \u003d new AtomicInteger(1);\n+      private final int poolNum \u003d POOLNUMBER.getAndIncrement();\n+      private final ThreadGroup group \u003d threadGroup;\n \n       @Override\n       public Thread newThread(Runnable r) {\n-        final String name \u003d prefix + \"-pool\" + poolNum + \"-t\" + threadNumber.getAndIncrement();\n+        final String name \u003d\n+            prefix + \"-pool\" + poolNum + \"-t\" + threadNumber.getAndIncrement();\n         return new Thread(group, r, name);\n       }\n     };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ThreadFactory getNamedThreadFactory(final String prefix) {\n    SecurityManager s \u003d System.getSecurityManager();\n    final ThreadGroup threadGroup \u003d (s !\u003d null) ? s.getThreadGroup() :\n        Thread.currentThread().getThreadGroup();\n\n    return new ThreadFactory() {\n      private final AtomicInteger threadNumber \u003d new AtomicInteger(1);\n      private final int poolNum \u003d POOLNUMBER.getAndIncrement();\n      private final ThreadGroup group \u003d threadGroup;\n\n      @Override\n      public Thread newThread(Runnable r) {\n        final String name \u003d\n            prefix + \"-pool\" + poolNum + \"-t\" + threadNumber.getAndIncrement();\n        return new Thread(group, r, name);\n      }\n    };\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/BlockingThreadPoolExecutorService.java",
          "extendedDetails": {}
        }
      ]
    },
    "27d8395867f665fea1360087325cda5ed70efd0c": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11446 S3AOutputStream should use shared thread pool to avoid OutOfMemoryError\n",
      "commitDate": "05/01/15 5:00 AM",
      "commitName": "27d8395867f665fea1360087325cda5ed70efd0c",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,17 @@\n+  public static ThreadFactory getNamedThreadFactory(final String prefix) {\n+    SecurityManager s \u003d System.getSecurityManager();\n+    final ThreadGroup threadGroup \u003d (s !\u003d null) ? s.getThreadGroup() : Thread.currentThread()\n+        .getThreadGroup();\n+\n+    return new ThreadFactory() {\n+      final AtomicInteger threadNumber \u003d new AtomicInteger(1);\n+      private final int poolNum \u003d poolNumber.getAndIncrement();\n+      final ThreadGroup group \u003d threadGroup;\n+\n+      @Override\n+      public Thread newThread(Runnable r) {\n+        final String name \u003d prefix + \"-pool\" + poolNum + \"-t\" + threadNumber.getAndIncrement();\n+        return new Thread(group, r, name);\n+      }\n+    };\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static ThreadFactory getNamedThreadFactory(final String prefix) {\n    SecurityManager s \u003d System.getSecurityManager();\n    final ThreadGroup threadGroup \u003d (s !\u003d null) ? s.getThreadGroup() : Thread.currentThread()\n        .getThreadGroup();\n\n    return new ThreadFactory() {\n      final AtomicInteger threadNumber \u003d new AtomicInteger(1);\n      private final int poolNum \u003d poolNumber.getAndIncrement();\n      final ThreadGroup group \u003d threadGroup;\n\n      @Override\n      public Thread newThread(Runnable r) {\n        final String name \u003d prefix + \"-pool\" + poolNum + \"-t\" + threadNumber.getAndIncrement();\n        return new Thread(group, r, name);\n      }\n    };\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}