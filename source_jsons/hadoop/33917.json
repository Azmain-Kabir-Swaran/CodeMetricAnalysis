{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CGroupsMemoryResourceHandlerImpl.java",
  "functionName": "bootstrap",
  "functionId": "bootstrap___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsMemoryResourceHandlerImpl.java",
  "functionStartLine": 66,
  "functionEndLine": 94,
  "numCommitsSeen": 11,
  "timeTaken": 1844,
  "changeHistory": [
    "d9964799544eefcf424fcc178d987525f5356cdf",
    "649ef7ac334e63a7c676f8e7406f59d9466eb6f2",
    "e6f13fe5d1df8918ffc680d18f9d5576f38893a6",
    "4e7d32c0db69882cde854ef581056142a997c005"
  ],
  "changeHistoryShort": {
    "d9964799544eefcf424fcc178d987525f5356cdf": "Ybodychange",
    "649ef7ac334e63a7c676f8e7406f59d9466eb6f2": "Ybodychange",
    "e6f13fe5d1df8918ffc680d18f9d5576f38893a6": "Ybodychange",
    "4e7d32c0db69882cde854ef581056142a997c005": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d9964799544eefcf424fcc178d987525f5356cdf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4599. Set OOM control for memory cgroups. (Miklos Szegedi via Haibo Chen)\n",
      "commitDate": "23/05/18 4:35 PM",
      "commitName": "d9964799544eefcf424fcc178d987525f5356cdf",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "10/05/18 11:01 AM",
      "commitNameOld": "6341c3a437489737a9c4bf0911b218b0023d8dd9",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 13.23,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,29 @@\n   public List\u003cPrivilegedOperation\u003e bootstrap(Configuration conf)\n       throws ResourceHandlerException {\n-    boolean pmemEnabled \u003d\n-        conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n-            YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n-    boolean vmemEnabled \u003d\n-        conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n-            YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n-    if (pmemEnabled || vmemEnabled) {\n-      String msg \u003d \"The default YARN physical and/or virtual memory health\"\n-          + \" checkers as well as the CGroups memory controller are enabled. \"\n-          + \"If you wish to use the Cgroups memory controller, please turn off\"\n-          + \" the default physical/virtual memory checkers by setting \"\n-          + YarnConfiguration.NM_PMEM_CHECK_ENABLED + \" and \"\n-          + YarnConfiguration.NM_VMEM_CHECK_ENABLED + \" to false.\";\n-      throw new ResourceHandlerException(msg);\n-    }\n     this.cGroupsHandler.initializeCGroupController(MEMORY);\n     enforce \u003d conf.getBoolean(\n         YarnConfiguration.NM_MEMORY_RESOURCE_ENFORCED,\n         YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_ENFORCED);\n     swappiness \u003d conf\n         .getInt(YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS,\n             YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS);\n     if (swappiness \u003c 0 || swappiness \u003e 100) {\n       throw new ResourceHandlerException(\n           \"Illegal value \u0027\" + swappiness + \"\u0027 for \"\n               + YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS\n               + \". Value must be between 0 and 100.\");\n     }\n     float softLimitPerc \u003d conf.getFloat(\n         YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE,\n         YarnConfiguration.\n             DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE);\n     softLimit \u003d softLimitPerc / 100.0f;\n     if (softLimitPerc \u003c 0.0f || softLimitPerc \u003e 100.0f) {\n       throw new ResourceHandlerException(\n           \"Illegal value \u0027\" + softLimitPerc + \"\u0027 \"\n               + YarnConfiguration.\n                 NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE\n               + \". Value must be between 0 and 100.\");\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e bootstrap(Configuration conf)\n      throws ResourceHandlerException {\n    this.cGroupsHandler.initializeCGroupController(MEMORY);\n    enforce \u003d conf.getBoolean(\n        YarnConfiguration.NM_MEMORY_RESOURCE_ENFORCED,\n        YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_ENFORCED);\n    swappiness \u003d conf\n        .getInt(YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS,\n            YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS);\n    if (swappiness \u003c 0 || swappiness \u003e 100) {\n      throw new ResourceHandlerException(\n          \"Illegal value \u0027\" + swappiness + \"\u0027 for \"\n              + YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS\n              + \". Value must be between 0 and 100.\");\n    }\n    float softLimitPerc \u003d conf.getFloat(\n        YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE,\n        YarnConfiguration.\n            DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE);\n    softLimit \u003d softLimitPerc / 100.0f;\n    if (softLimitPerc \u003c 0.0f || softLimitPerc \u003e 100.0f) {\n      throw new ResourceHandlerException(\n          \"Illegal value \u0027\" + softLimitPerc + \"\u0027 \"\n              + YarnConfiguration.\n                NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE\n              + \". Value must be between 0 and 100.\");\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsMemoryResourceHandlerImpl.java",
      "extendedDetails": {}
    },
    "649ef7ac334e63a7c676f8e7406f59d9466eb6f2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7064. Use cgroup to get container resource utilization. (Miklos Szegedi via Haibo Chen)\n",
      "commitDate": "26/01/18 4:27 PM",
      "commitName": "649ef7ac334e63a7c676f8e7406f59d9466eb6f2",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 157.68,
      "commitsBetweenForRepo": 1196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,44 @@\n   public List\u003cPrivilegedOperation\u003e bootstrap(Configuration conf)\n       throws ResourceHandlerException {\n     boolean pmemEnabled \u003d\n         conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n             YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     boolean vmemEnabled \u003d\n         conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n             YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     if (pmemEnabled || vmemEnabled) {\n       String msg \u003d \"The default YARN physical and/or virtual memory health\"\n           + \" checkers as well as the CGroups memory controller are enabled. \"\n           + \"If you wish to use the Cgroups memory controller, please turn off\"\n           + \" the default physical/virtual memory checkers by setting \"\n           + YarnConfiguration.NM_PMEM_CHECK_ENABLED + \" and \"\n           + YarnConfiguration.NM_VMEM_CHECK_ENABLED + \" to false.\";\n       throw new ResourceHandlerException(msg);\n     }\n     this.cGroupsHandler.initializeCGroupController(MEMORY);\n+    enforce \u003d conf.getBoolean(\n+        YarnConfiguration.NM_MEMORY_RESOURCE_ENFORCED,\n+        YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_ENFORCED);\n     swappiness \u003d conf\n         .getInt(YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS,\n             YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS);\n     if (swappiness \u003c 0 || swappiness \u003e 100) {\n       throw new ResourceHandlerException(\n           \"Illegal value \u0027\" + swappiness + \"\u0027 for \"\n               + YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS\n               + \". Value must be between 0 and 100.\");\n     }\n     float softLimitPerc \u003d conf.getFloat(\n         YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE,\n         YarnConfiguration.\n             DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE);\n     softLimit \u003d softLimitPerc / 100.0f;\n     if (softLimitPerc \u003c 0.0f || softLimitPerc \u003e 100.0f) {\n       throw new ResourceHandlerException(\n           \"Illegal value \u0027\" + softLimitPerc + \"\u0027 \"\n               + YarnConfiguration.\n                 NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE\n               + \". Value must be between 0 and 100.\");\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e bootstrap(Configuration conf)\n      throws ResourceHandlerException {\n    boolean pmemEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n            YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    boolean vmemEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n            YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    if (pmemEnabled || vmemEnabled) {\n      String msg \u003d \"The default YARN physical and/or virtual memory health\"\n          + \" checkers as well as the CGroups memory controller are enabled. \"\n          + \"If you wish to use the Cgroups memory controller, please turn off\"\n          + \" the default physical/virtual memory checkers by setting \"\n          + YarnConfiguration.NM_PMEM_CHECK_ENABLED + \" and \"\n          + YarnConfiguration.NM_VMEM_CHECK_ENABLED + \" to false.\";\n      throw new ResourceHandlerException(msg);\n    }\n    this.cGroupsHandler.initializeCGroupController(MEMORY);\n    enforce \u003d conf.getBoolean(\n        YarnConfiguration.NM_MEMORY_RESOURCE_ENFORCED,\n        YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_ENFORCED);\n    swappiness \u003d conf\n        .getInt(YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS,\n            YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS);\n    if (swappiness \u003c 0 || swappiness \u003e 100) {\n      throw new ResourceHandlerException(\n          \"Illegal value \u0027\" + swappiness + \"\u0027 for \"\n              + YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS\n              + \". Value must be between 0 and 100.\");\n    }\n    float softLimitPerc \u003d conf.getFloat(\n        YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE,\n        YarnConfiguration.\n            DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE);\n    softLimit \u003d softLimitPerc / 100.0f;\n    if (softLimitPerc \u003c 0.0f || softLimitPerc \u003e 100.0f) {\n      throw new ResourceHandlerException(\n          \"Illegal value \u0027\" + softLimitPerc + \"\u0027 \"\n              + YarnConfiguration.\n                NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE\n              + \". Value must be between 0 and 100.\");\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsMemoryResourceHandlerImpl.java",
      "extendedDetails": {}
    },
    "e6f13fe5d1df8918ffc680d18f9d5576f38893a6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5849. Automatically create YARN control group for pre-mounted cgroups (Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "11/01/17 4:00 PM",
      "commitName": "e6f13fe5d1df8918ffc680d18f9d5576f38893a6",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "29/05/16 8:54 AM",
      "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 227.34,
      "commitsBetweenForRepo": 1639,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public List\u003cPrivilegedOperation\u003e bootstrap(Configuration conf)\n       throws ResourceHandlerException {\n     boolean pmemEnabled \u003d\n         conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n             YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n     boolean vmemEnabled \u003d\n         conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n             YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n     if (pmemEnabled || vmemEnabled) {\n       String msg \u003d \"The default YARN physical and/or virtual memory health\"\n           + \" checkers as well as the CGroups memory controller are enabled. \"\n           + \"If you wish to use the Cgroups memory controller, please turn off\"\n           + \" the default physical/virtual memory checkers by setting \"\n           + YarnConfiguration.NM_PMEM_CHECK_ENABLED + \" and \"\n           + YarnConfiguration.NM_VMEM_CHECK_ENABLED + \" to false.\";\n       throw new ResourceHandlerException(msg);\n     }\n-    this.cGroupsHandler.mountCGroupController(MEMORY);\n+    this.cGroupsHandler.initializeCGroupController(MEMORY);\n     swappiness \u003d conf\n         .getInt(YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS,\n             YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS);\n     if (swappiness \u003c 0 || swappiness \u003e 100) {\n       throw new ResourceHandlerException(\n           \"Illegal value \u0027\" + swappiness + \"\u0027 for \"\n               + YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS\n               + \". Value must be between 0 and 100.\");\n     }\n     float softLimitPerc \u003d conf.getFloat(\n       YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE,\n       YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE);\n     softLimit \u003d softLimitPerc / 100.0f;\n     if (softLimitPerc \u003c 0.0f || softLimitPerc \u003e 100.0f) {\n       throw new ResourceHandlerException(\n           \"Illegal value \u0027\" + softLimitPerc + \"\u0027 \"\n               + YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE\n               + \". Value must be between 0 and 100.\");\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e bootstrap(Configuration conf)\n      throws ResourceHandlerException {\n    boolean pmemEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n            YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    boolean vmemEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n            YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    if (pmemEnabled || vmemEnabled) {\n      String msg \u003d \"The default YARN physical and/or virtual memory health\"\n          + \" checkers as well as the CGroups memory controller are enabled. \"\n          + \"If you wish to use the Cgroups memory controller, please turn off\"\n          + \" the default physical/virtual memory checkers by setting \"\n          + YarnConfiguration.NM_PMEM_CHECK_ENABLED + \" and \"\n          + YarnConfiguration.NM_VMEM_CHECK_ENABLED + \" to false.\";\n      throw new ResourceHandlerException(msg);\n    }\n    this.cGroupsHandler.initializeCGroupController(MEMORY);\n    swappiness \u003d conf\n        .getInt(YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS,\n            YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS);\n    if (swappiness \u003c 0 || swappiness \u003e 100) {\n      throw new ResourceHandlerException(\n          \"Illegal value \u0027\" + swappiness + \"\u0027 for \"\n              + YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS\n              + \". Value must be between 0 and 100.\");\n    }\n    float softLimitPerc \u003d conf.getFloat(\n      YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE,\n      YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE);\n    softLimit \u003d softLimitPerc / 100.0f;\n    if (softLimitPerc \u003c 0.0f || softLimitPerc \u003e 100.0f) {\n      throw new ResourceHandlerException(\n          \"Illegal value \u0027\" + softLimitPerc + \"\u0027 \"\n              + YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE\n              + \". Value must be between 0 and 100.\");\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsMemoryResourceHandlerImpl.java",
      "extendedDetails": {}
    },
    "4e7d32c0db69882cde854ef581056142a997c005": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1856. Added cgroups based memory monitoring for containers as another alternative to custom memory-monitoring. Contributed by Varun Vasudev.\n",
      "commitDate": "17/12/15 12:13 PM",
      "commitName": "4e7d32c0db69882cde854ef581056142a997c005",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "diff": "@@ -0,0 +1,39 @@\n+  public List\u003cPrivilegedOperation\u003e bootstrap(Configuration conf)\n+      throws ResourceHandlerException {\n+    boolean pmemEnabled \u003d\n+        conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n+            YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n+    boolean vmemEnabled \u003d\n+        conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n+            YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n+    if (pmemEnabled || vmemEnabled) {\n+      String msg \u003d \"The default YARN physical and/or virtual memory health\"\n+          + \" checkers as well as the CGroups memory controller are enabled. \"\n+          + \"If you wish to use the Cgroups memory controller, please turn off\"\n+          + \" the default physical/virtual memory checkers by setting \"\n+          + YarnConfiguration.NM_PMEM_CHECK_ENABLED + \" and \"\n+          + YarnConfiguration.NM_VMEM_CHECK_ENABLED + \" to false.\";\n+      throw new ResourceHandlerException(msg);\n+    }\n+    this.cGroupsHandler.mountCGroupController(MEMORY);\n+    swappiness \u003d conf\n+        .getInt(YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS,\n+            YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS);\n+    if (swappiness \u003c 0 || swappiness \u003e 100) {\n+      throw new ResourceHandlerException(\n+          \"Illegal value \u0027\" + swappiness + \"\u0027 for \"\n+              + YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS\n+              + \". Value must be between 0 and 100.\");\n+    }\n+    float softLimitPerc \u003d conf.getFloat(\n+      YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE,\n+      YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE);\n+    softLimit \u003d softLimitPerc / 100.0f;\n+    if (softLimitPerc \u003c 0.0f || softLimitPerc \u003e 100.0f) {\n+      throw new ResourceHandlerException(\n+          \"Illegal value \u0027\" + softLimitPerc + \"\u0027 \"\n+              + YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE\n+              + \". Value must be between 0 and 100.\");\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e bootstrap(Configuration conf)\n      throws ResourceHandlerException {\n    boolean pmemEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,\n            YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);\n    boolean vmemEnabled \u003d\n        conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,\n            YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);\n    if (pmemEnabled || vmemEnabled) {\n      String msg \u003d \"The default YARN physical and/or virtual memory health\"\n          + \" checkers as well as the CGroups memory controller are enabled. \"\n          + \"If you wish to use the Cgroups memory controller, please turn off\"\n          + \" the default physical/virtual memory checkers by setting \"\n          + YarnConfiguration.NM_PMEM_CHECK_ENABLED + \" and \"\n          + YarnConfiguration.NM_VMEM_CHECK_ENABLED + \" to false.\";\n      throw new ResourceHandlerException(msg);\n    }\n    this.cGroupsHandler.mountCGroupController(MEMORY);\n    swappiness \u003d conf\n        .getInt(YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS,\n            YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS);\n    if (swappiness \u003c 0 || swappiness \u003e 100) {\n      throw new ResourceHandlerException(\n          \"Illegal value \u0027\" + swappiness + \"\u0027 for \"\n              + YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS\n              + \". Value must be between 0 and 100.\");\n    }\n    float softLimitPerc \u003d conf.getFloat(\n      YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE,\n      YarnConfiguration.DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE);\n    softLimit \u003d softLimitPerc / 100.0f;\n    if (softLimitPerc \u003c 0.0f || softLimitPerc \u003e 100.0f) {\n      throw new ResourceHandlerException(\n          \"Illegal value \u0027\" + softLimitPerc + \"\u0027 \"\n              + YarnConfiguration.NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE\n              + \". Value must be between 0 and 100.\");\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsMemoryResourceHandlerImpl.java"
    }
  }
}