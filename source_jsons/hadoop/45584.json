{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogCLIHelpers.java",
  "functionName": "printNodesList",
  "functionId": "printNodesList___options-ContainerLogsRequest__out-PrintStream__err-PrintStream",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
  "functionStartLine": 303,
  "functionEndLine": 342,
  "numCommitsSeen": 42,
  "timeTaken": 2642,
  "changeHistory": [
    "460ba7fb14114f44e14a660f533f32c54e504478",
    "91cc070d67533ebb3325b982eba2135e0d175a82",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835"
  ],
  "changeHistoryShort": {
    "460ba7fb14114f44e14a660f533f32c54e504478": "Ybodychange",
    "91cc070d67533ebb3325b982eba2135e0d175a82": "Ybodychange",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": "Ymultichange(Yparameterchange,Ybodychange)",
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835": "Yintroduced"
  },
  "changeHistoryDetails": {
    "460ba7fb14114f44e14a660f533f32c54e504478": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9558.  Fixed LogAggregation test cases.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "23/05/19 3:38 PM",
      "commitName": "460ba7fb14114f44e14a660f533f32c54e504478",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "06/05/19 4:48 PM",
      "commitNameOld": "49e1292ea3e4d00ab0b0191bd8c4ea4d2afed671",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 16.95,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,40 @@\n   public void printNodesList(ContainerLogsRequest options,\n       PrintStream out, PrintStream err) throws IOException {\n     ApplicationId appId \u003d options.getAppId();\n     String appOwner \u003d options.getAppOwner();\n     LogAggregationFileController fileFormat \u003d null;\n     try {\n       fileFormat \u003d getFileController(appId, appOwner);\n     } catch (Exception ex) {\n       err.println(ex.getMessage());\n       return;\n     }\n     RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d null;\n     try {\n       nodeFiles \u003d LogAggregationUtils.getRemoteNodeFileDir(conf, appId,\n           appOwner, fileFormat.getRemoteRootLogDir(),\n           fileFormat.getRemoteRootLogDirSuffix());\n     } catch (FileNotFoundException fnf) {\n-      logDirNotExist(LogAggregationUtils.getRemoteAppLogDir(\n-          conf, appId, appOwner).toString());\n+      logDirNotExist(fileFormat.getRemoteAppLogDir(appId,\n+          appOwner).toString());\n     } catch (AccessControlException | AccessDeniedException ace) {\n-      logDirNoAccessPermission(LogAggregationUtils.getRemoteAppLogDir(\n-          conf, appId, appOwner).toString(), appOwner,\n-          ace.getMessage());\n+      logDirNoAccessPermission(fileFormat.getRemoteAppLogDir(appId,\n+          appOwner).toString(), appOwner, ace.getMessage());\n     }\n     if (nodeFiles \u003d\u003d null) {\n       return;\n     }\n     boolean foundNode \u003d false;\n     StringBuilder sb \u003d new StringBuilder();\n     while (nodeFiles.hasNext()) {\n       FileStatus thisNodeFile \u003d nodeFiles.next();\n       sb.append(thisNodeFile.getPath().getName() + \"\\n\");\n       foundNode \u003d true;\n     }\n     if (!foundNode) {\n       err.println(\"No nodes found that aggregated logs for \"\n           + \"the application: \" + appId);\n     } else {\n       out.println(sb.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void printNodesList(ContainerLogsRequest options,\n      PrintStream out, PrintStream err) throws IOException {\n    ApplicationId appId \u003d options.getAppId();\n    String appOwner \u003d options.getAppOwner();\n    LogAggregationFileController fileFormat \u003d null;\n    try {\n      fileFormat \u003d getFileController(appId, appOwner);\n    } catch (Exception ex) {\n      err.println(ex.getMessage());\n      return;\n    }\n    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d null;\n    try {\n      nodeFiles \u003d LogAggregationUtils.getRemoteNodeFileDir(conf, appId,\n          appOwner, fileFormat.getRemoteRootLogDir(),\n          fileFormat.getRemoteRootLogDirSuffix());\n    } catch (FileNotFoundException fnf) {\n      logDirNotExist(fileFormat.getRemoteAppLogDir(appId,\n          appOwner).toString());\n    } catch (AccessControlException | AccessDeniedException ace) {\n      logDirNoAccessPermission(fileFormat.getRemoteAppLogDir(appId,\n          appOwner).toString(), appOwner, ace.getMessage());\n    }\n    if (nodeFiles \u003d\u003d null) {\n      return;\n    }\n    boolean foundNode \u003d false;\n    StringBuilder sb \u003d new StringBuilder();\n    while (nodeFiles.hasNext()) {\n      FileStatus thisNodeFile \u003d nodeFiles.next();\n      sb.append(thisNodeFile.getPath().getName() + \"\\n\");\n      foundNode \u003d true;\n    }\n    if (!foundNode) {\n      err.println(\"No nodes found that aggregated logs for \"\n          + \"the application: \" + appId);\n    } else {\n      out.println(sb.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
      "extendedDetails": {}
    },
    "91cc070d67533ebb3325b982eba2135e0d175a82": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6877. Create an abstract log reader for extendability. Contributed by Xuan Gong.\n",
      "commitDate": "31/08/17 4:41 PM",
      "commitName": "91cc070d67533ebb3325b982eba2135e0d175a82",
      "commitAuthor": "Junping Du",
      "commitDateOld": "14/03/17 12:58 PM",
      "commitNameOld": "871dc420f8a4f151189c0925e062c64859a8f275",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 170.16,
      "commitsBetweenForRepo": 1032,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,41 @@\n   public void printNodesList(ContainerLogsRequest options,\n       PrintStream out, PrintStream err) throws IOException {\n     ApplicationId appId \u003d options.getAppId();\n     String appOwner \u003d options.getAppOwner();\n-    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n-        appId, appOwner);\n+    LogAggregationFileController fileFormat \u003d null;\n+    try {\n+      fileFormat \u003d getFileController(appId, appOwner);\n+    } catch (Exception ex) {\n+      err.println(ex.getMessage());\n+      return;\n+    }\n+    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d null;\n+    try {\n+      nodeFiles \u003d LogAggregationUtils.getRemoteNodeFileDir(conf, appId,\n+          appOwner, fileFormat.getRemoteRootLogDir(),\n+          fileFormat.getRemoteRootLogDirSuffix());\n+    } catch (FileNotFoundException fnf) {\n+      logDirNotExist(LogAggregationUtils.getRemoteAppLogDir(\n+          conf, appId, appOwner).toString());\n+    } catch (AccessControlException | AccessDeniedException ace) {\n+      logDirNoAccessPermission(LogAggregationUtils.getRemoteAppLogDir(\n+          conf, appId, appOwner).toString(), appOwner,\n+          ace.getMessage());\n+    }\n     if (nodeFiles \u003d\u003d null) {\n       return;\n     }\n     boolean foundNode \u003d false;\n     StringBuilder sb \u003d new StringBuilder();\n     while (nodeFiles.hasNext()) {\n       FileStatus thisNodeFile \u003d nodeFiles.next();\n       sb.append(thisNodeFile.getPath().getName() + \"\\n\");\n       foundNode \u003d true;\n     }\n     if (!foundNode) {\n       err.println(\"No nodes found that aggregated logs for \"\n           + \"the application: \" + appId);\n     } else {\n       out.println(sb.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void printNodesList(ContainerLogsRequest options,\n      PrintStream out, PrintStream err) throws IOException {\n    ApplicationId appId \u003d options.getAppId();\n    String appOwner \u003d options.getAppOwner();\n    LogAggregationFileController fileFormat \u003d null;\n    try {\n      fileFormat \u003d getFileController(appId, appOwner);\n    } catch (Exception ex) {\n      err.println(ex.getMessage());\n      return;\n    }\n    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d null;\n    try {\n      nodeFiles \u003d LogAggregationUtils.getRemoteNodeFileDir(conf, appId,\n          appOwner, fileFormat.getRemoteRootLogDir(),\n          fileFormat.getRemoteRootLogDirSuffix());\n    } catch (FileNotFoundException fnf) {\n      logDirNotExist(LogAggregationUtils.getRemoteAppLogDir(\n          conf, appId, appOwner).toString());\n    } catch (AccessControlException | AccessDeniedException ace) {\n      logDirNoAccessPermission(LogAggregationUtils.getRemoteAppLogDir(\n          conf, appId, appOwner).toString(), appOwner,\n          ace.getMessage());\n    }\n    if (nodeFiles \u003d\u003d null) {\n      return;\n    }\n    boolean foundNode \u003d false;\n    StringBuilder sb \u003d new StringBuilder();\n    while (nodeFiles.hasNext()) {\n      FileStatus thisNodeFile \u003d nodeFiles.next();\n      sb.append(thisNodeFile.getPath().getName() + \"\\n\");\n      foundNode \u003d true;\n    }\n    if (!foundNode) {\n      err.println(\"No nodes found that aggregated logs for \"\n          + \"the application: \" + appId);\n    } else {\n      out.println(sb.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
      "extendedDetails": {}
    },
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
      "commitDate": "26/05/16 11:49 PM",
      "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
          "commitDate": "26/05/16 11:49 PM",
          "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthor": "Xuan",
          "commitDateOld": "18/05/16 10:14 AM",
          "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,23 @@\n-  public void printNodesList(ApplicationId appId, String appOwner,\n+  public void printNodesList(ContainerLogsRequest options,\n       PrintStream out, PrintStream err) throws IOException {\n+    ApplicationId appId \u003d options.getAppId();\n+    String appOwner \u003d options.getAppOwner();\n     RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n         appId, appOwner);\n     if (nodeFiles \u003d\u003d null) {\n       return;\n     }\n     boolean foundNode \u003d false;\n     StringBuilder sb \u003d new StringBuilder();\n     while (nodeFiles.hasNext()) {\n       FileStatus thisNodeFile \u003d nodeFiles.next();\n       sb.append(thisNodeFile.getPath().getName() + \"\\n\");\n       foundNode \u003d true;\n     }\n     if (!foundNode) {\n       err.println(\"No nodes found that aggregated logs for \"\n           + \"the application: \" + appId);\n     } else {\n       out.println(sb.toString());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void printNodesList(ContainerLogsRequest options,\n      PrintStream out, PrintStream err) throws IOException {\n    ApplicationId appId \u003d options.getAppId();\n    String appOwner \u003d options.getAppOwner();\n    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n        appId, appOwner);\n    if (nodeFiles \u003d\u003d null) {\n      return;\n    }\n    boolean foundNode \u003d false;\n    StringBuilder sb \u003d new StringBuilder();\n    while (nodeFiles.hasNext()) {\n      FileStatus thisNodeFile \u003d nodeFiles.next();\n      sb.append(thisNodeFile.getPath().getName() + \"\\n\");\n      foundNode \u003d true;\n    }\n    if (!foundNode) {\n      err.println(\"No nodes found that aggregated logs for \"\n          + \"the application: \" + appId);\n    } else {\n      out.println(sb.toString());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId, appOwner-String, out-PrintStream, err-PrintStream]",
            "newValue": "[options-ContainerLogsRequest, out-PrintStream, err-PrintStream]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
          "commitDate": "26/05/16 11:49 PM",
          "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthor": "Xuan",
          "commitDateOld": "18/05/16 10:14 AM",
          "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,23 @@\n-  public void printNodesList(ApplicationId appId, String appOwner,\n+  public void printNodesList(ContainerLogsRequest options,\n       PrintStream out, PrintStream err) throws IOException {\n+    ApplicationId appId \u003d options.getAppId();\n+    String appOwner \u003d options.getAppOwner();\n     RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n         appId, appOwner);\n     if (nodeFiles \u003d\u003d null) {\n       return;\n     }\n     boolean foundNode \u003d false;\n     StringBuilder sb \u003d new StringBuilder();\n     while (nodeFiles.hasNext()) {\n       FileStatus thisNodeFile \u003d nodeFiles.next();\n       sb.append(thisNodeFile.getPath().getName() + \"\\n\");\n       foundNode \u003d true;\n     }\n     if (!foundNode) {\n       err.println(\"No nodes found that aggregated logs for \"\n           + \"the application: \" + appId);\n     } else {\n       out.println(sb.toString());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void printNodesList(ContainerLogsRequest options,\n      PrintStream out, PrintStream err) throws IOException {\n    ApplicationId appId \u003d options.getAppId();\n    String appOwner \u003d options.getAppOwner();\n    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n        appId, appOwner);\n    if (nodeFiles \u003d\u003d null) {\n      return;\n    }\n    boolean foundNode \u003d false;\n    StringBuilder sb \u003d new StringBuilder();\n    while (nodeFiles.hasNext()) {\n      FileStatus thisNodeFile \u003d nodeFiles.next();\n      sb.append(thisNodeFile.getPath().getName() + \"\\n\");\n      foundNode \u003d true;\n    }\n    if (!foundNode) {\n      err.println(\"No nodes found that aggregated logs for \"\n          + \"the application: \" + appId);\n    } else {\n      out.println(sb.toString());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {}
        }
      ]
    },
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4905. Improved \"yarn logs\" command-line to optionally show log metadata also. Contributed by Xuan Gong.\n",
      "commitDate": "04/05/16 2:16 PM",
      "commitName": "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,21 @@\n+  public void printNodesList(ApplicationId appId, String appOwner,\n+      PrintStream out, PrintStream err) throws IOException {\n+    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n+        appId, appOwner);\n+    if (nodeFiles \u003d\u003d null) {\n+      return;\n+    }\n+    boolean foundNode \u003d false;\n+    StringBuilder sb \u003d new StringBuilder();\n+    while (nodeFiles.hasNext()) {\n+      FileStatus thisNodeFile \u003d nodeFiles.next();\n+      sb.append(thisNodeFile.getPath().getName() + \"\\n\");\n+      foundNode \u003d true;\n+    }\n+    if (!foundNode) {\n+      err.println(\"No nodes found that aggregated logs for \"\n+          + \"the application: \" + appId);\n+    } else {\n+      out.println(sb.toString());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void printNodesList(ApplicationId appId, String appOwner,\n      PrintStream out, PrintStream err) throws IOException {\n    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n        appId, appOwner);\n    if (nodeFiles \u003d\u003d null) {\n      return;\n    }\n    boolean foundNode \u003d false;\n    StringBuilder sb \u003d new StringBuilder();\n    while (nodeFiles.hasNext()) {\n      FileStatus thisNodeFile \u003d nodeFiles.next();\n      sb.append(thisNodeFile.getPath().getName() + \"\\n\");\n      foundNode \u003d true;\n    }\n    if (!foundNode) {\n      err.println(\"No nodes found that aggregated logs for \"\n          + \"the application: \" + appId);\n    } else {\n      out.println(sb.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java"
    }
  }
}