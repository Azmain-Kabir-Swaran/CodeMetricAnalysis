{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RollingFileSystemSink.java",
  "functionName": "getRollInterval",
  "functionId": "getRollInterval",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java",
  "functionStartLine": 342,
  "functionEndLine": 399,
  "numCommitsSeen": 9,
  "timeTaken": 792,
  "changeHistory": [
    "57c31a3fef625f1ec609d7e8873d4941f7ed5cbc"
  ],
  "changeHistoryShort": {
    "57c31a3fef625f1ec609d7e8873d4941f7ed5cbc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "57c31a3fef625f1ec609d7e8873d4941f7ed5cbc": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9782. RollingFileSystemSink should have configurable roll interval. (Daniel Templeton via kasha)\n",
      "commitDate": "24/05/16 10:37 AM",
      "commitName": "57c31a3fef625f1ec609d7e8873d4941f7ed5cbc",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,58 @@\n+  protected long getRollInterval() {\n+    String rollInterval \u003d\n+        properties.getString(ROLL_INTERVAL_KEY, DEFAULT_ROLL_INTERVAL);\n+    Pattern pattern \u003d Pattern.compile(\"^\\\\s*(\\\\d+)\\\\s*([A-Za-z]*)\\\\s*$\");\n+    Matcher match \u003d pattern.matcher(rollInterval);\n+    long millis;\n+\n+    if (match.matches()) {\n+      String flushUnit \u003d match.group(2);\n+      int rollIntervalInt;\n+\n+      try {\n+        rollIntervalInt \u003d Integer.parseInt(match.group(1));\n+      } catch (NumberFormatException ex) {\n+        throw new MetricsException(\"Unrecognized flush interval: \"\n+            + rollInterval + \". Must be a number followed by an optional \"\n+            + \"unit. The unit must be one of: minute, hour, day\", ex);\n+      }\n+\n+      if (\"\".equals(flushUnit)) {\n+        millis \u003d TimeUnit.HOURS.toMillis(rollIntervalInt);\n+      } else {\n+        switch (flushUnit.toLowerCase()) {\n+        case \"m\":\n+        case \"min\":\n+        case \"minute\":\n+        case \"minutes\":\n+          millis \u003d TimeUnit.MINUTES.toMillis(rollIntervalInt);\n+          break;\n+        case \"h\":\n+        case \"hr\":\n+        case \"hour\":\n+        case \"hours\":\n+          millis \u003d TimeUnit.HOURS.toMillis(rollIntervalInt);\n+          break;\n+        case \"d\":\n+        case \"day\":\n+        case \"days\":\n+          millis \u003d TimeUnit.DAYS.toMillis(rollIntervalInt);\n+          break;\n+        default:\n+          throw new MetricsException(\"Unrecognized unit for flush interval: \"\n+              + flushUnit + \". Must be one of: minute, hour, day\");\n+        }\n+      }\n+    } else {\n+      throw new MetricsException(\"Unrecognized flush interval: \"\n+          + rollInterval + \". Must be a number followed by an optional unit.\"\n+          + \" The unit must be one of: minute, hour, day\");\n+    }\n+\n+    if (millis \u003c 60000) {\n+      throw new MetricsException(\"The flush interval property must be \"\n+          + \"at least 1 minute. Value was \" + rollInterval);\n+    }\n+\n+    return millis;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected long getRollInterval() {\n    String rollInterval \u003d\n        properties.getString(ROLL_INTERVAL_KEY, DEFAULT_ROLL_INTERVAL);\n    Pattern pattern \u003d Pattern.compile(\"^\\\\s*(\\\\d+)\\\\s*([A-Za-z]*)\\\\s*$\");\n    Matcher match \u003d pattern.matcher(rollInterval);\n    long millis;\n\n    if (match.matches()) {\n      String flushUnit \u003d match.group(2);\n      int rollIntervalInt;\n\n      try {\n        rollIntervalInt \u003d Integer.parseInt(match.group(1));\n      } catch (NumberFormatException ex) {\n        throw new MetricsException(\"Unrecognized flush interval: \"\n            + rollInterval + \". Must be a number followed by an optional \"\n            + \"unit. The unit must be one of: minute, hour, day\", ex);\n      }\n\n      if (\"\".equals(flushUnit)) {\n        millis \u003d TimeUnit.HOURS.toMillis(rollIntervalInt);\n      } else {\n        switch (flushUnit.toLowerCase()) {\n        case \"m\":\n        case \"min\":\n        case \"minute\":\n        case \"minutes\":\n          millis \u003d TimeUnit.MINUTES.toMillis(rollIntervalInt);\n          break;\n        case \"h\":\n        case \"hr\":\n        case \"hour\":\n        case \"hours\":\n          millis \u003d TimeUnit.HOURS.toMillis(rollIntervalInt);\n          break;\n        case \"d\":\n        case \"day\":\n        case \"days\":\n          millis \u003d TimeUnit.DAYS.toMillis(rollIntervalInt);\n          break;\n        default:\n          throw new MetricsException(\"Unrecognized unit for flush interval: \"\n              + flushUnit + \". Must be one of: minute, hour, day\");\n        }\n      }\n    } else {\n      throw new MetricsException(\"Unrecognized flush interval: \"\n          + rollInterval + \". Must be a number followed by an optional unit.\"\n          + \" The unit must be one of: minute, hour, day\");\n    }\n\n    if (millis \u003c 60000) {\n      throw new MetricsException(\"The flush interval property must be \"\n          + \"at least 1 minute. Value was \" + rollInterval);\n    }\n\n    return millis;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java"
    }
  }
}