{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSPreemptionThread.java",
  "functionName": "identifyContainersToPreemptForOneContainer",
  "functionId": "identifyContainersToPreemptForOneContainer___potentialNodes-List__FSSchedulerNode____rr-ResourceRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
  "functionStartLine": 143,
  "functionEndLine": 164,
  "numCommitsSeen": 14,
  "timeTaken": 923,
  "changeHistory": [
    "1bc03ddf97f3f0e0ecc1b00217438d3c91d29be5"
  ],
  "changeHistoryShort": {
    "1bc03ddf97f3f0e0ecc1b00217438d3c91d29be5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1bc03ddf97f3f0e0ecc1b00217438d3c91d29be5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7655. Avoid AM preemption caused by RRs for specific nodes or racks. Contributed by Steven Rand.\n",
      "commitDate": "08/02/18 12:32 PM",
      "commitName": "1bc03ddf97f3f0e0ecc1b00217438d3c91d29be5",
      "commitAuthor": "Yufei Gu",
      "diff": "@@ -0,0 +1,22 @@\n+  private PreemptableContainers identifyContainersToPreemptForOneContainer(\n+          List\u003cFSSchedulerNode\u003e potentialNodes, ResourceRequest rr) {\n+    PreemptableContainers bestContainers \u003d null;\n+    int maxAMContainers \u003d Integer.MAX_VALUE;\n+\n+    for (FSSchedulerNode node : potentialNodes) {\n+      PreemptableContainers preemptableContainers \u003d\n+              identifyContainersToPreemptOnNode(\n+                      rr.getCapability(), node, maxAMContainers);\n+\n+      if (preemptableContainers !\u003d null) {\n+        // This set is better than any previously identified set.\n+        bestContainers \u003d preemptableContainers;\n+        maxAMContainers \u003d bestContainers.numAMContainers;\n+\n+        if (maxAMContainers \u003d\u003d 0) {\n+          break;\n+        }\n+      }\n+    }\n+    return bestContainers;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private PreemptableContainers identifyContainersToPreemptForOneContainer(\n          List\u003cFSSchedulerNode\u003e potentialNodes, ResourceRequest rr) {\n    PreemptableContainers bestContainers \u003d null;\n    int maxAMContainers \u003d Integer.MAX_VALUE;\n\n    for (FSSchedulerNode node : potentialNodes) {\n      PreemptableContainers preemptableContainers \u003d\n              identifyContainersToPreemptOnNode(\n                      rr.getCapability(), node, maxAMContainers);\n\n      if (preemptableContainers !\u003d null) {\n        // This set is better than any previously identified set.\n        bestContainers \u003d preemptableContainers;\n        maxAMContainers \u003d bestContainers.numAMContainers;\n\n        if (maxAMContainers \u003d\u003d 0) {\n          break;\n        }\n      }\n    }\n    return bestContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java"
    }
  }
}