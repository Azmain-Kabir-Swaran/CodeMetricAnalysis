{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystemRMStateStore.java",
  "functionName": "loadRMAppState",
  "functionId": "loadRMAppState___rmState-RMState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
  "functionStartLine": 277,
  "functionEndLine": 300,
  "numCommitsSeen": 61,
  "timeTaken": 4286,
  "changeHistory": [
    "f271d377357ad680924d19f07e6c8315e7c89bae",
    "9a2a9553eee454ecd18120535d3e845f86fc3584",
    "01a1621930df17a745dd37892996c68fca3447d1",
    "5805a81efbc024024d8172489dfdc6cf77879416",
    "14e2639fd0d53f7e0b58f2f4744af44983d4e867",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
    "3de66011c2e80d7c458a67f80042af986fcc677d",
    "d16470025aa0c51a04c530863a96108895d72ddf",
    "ce56616037fc160ba875b496bdc369411bb873be",
    "305ae48136d6e201de4451e824cb7b84f94ba2e0",
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
    "7f97fd131981e88ffc76c11a01ea9d190576a6d6",
    "9f3e488936b6fbfc30e4b0cc42667288355345d1",
    "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895",
    "259edf8dca44de54033e96f7eb65a83aaa6096f2",
    "74231f027607ff1a6fe7d72fad28108826963cf3",
    "29ddce96a26c45fc747408801bf65255fbd9990f"
  ],
  "changeHistoryShort": {
    "f271d377357ad680924d19f07e6c8315e7c89bae": "Ybodychange",
    "9a2a9553eee454ecd18120535d3e845f86fc3584": "Ybodychange",
    "01a1621930df17a745dd37892996c68fca3447d1": "Ybodychange",
    "5805a81efbc024024d8172489dfdc6cf77879416": "Ybodychange",
    "14e2639fd0d53f7e0b58f2f4744af44983d4e867": "Ybodychange",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": "Ybodychange",
    "3de66011c2e80d7c458a67f80042af986fcc677d": "Ybodychange",
    "d16470025aa0c51a04c530863a96108895d72ddf": "Ybodychange",
    "ce56616037fc160ba875b496bdc369411bb873be": "Ybodychange",
    "305ae48136d6e201de4451e824cb7b84f94ba2e0": "Ybodychange",
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6": "Ybodychange",
    "7f97fd131981e88ffc76c11a01ea9d190576a6d6": "Ybodychange",
    "9f3e488936b6fbfc30e4b0cc42667288355345d1": "Ybodychange",
    "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "259edf8dca44de54033e96f7eb65a83aaa6096f2": "Ybodychange",
    "74231f027607ff1a6fe7d72fad28108826963cf3": "Ybodychange",
    "29ddce96a26c45fc747408801bf65255fbd9990f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f271d377357ad680924d19f07e6c8315e7c89bae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3736. Add RMStateStore apis to store and load accepted reservations for failover (adhoot via asuresh)\n",
      "commitDate": "05/08/15 12:57 PM",
      "commitName": "f271d377357ad680924d19f07e6c8315e7c89bae",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "28/05/15 3:25 PM",
      "commitNameOld": "9acd24fec408c182683968ae2c75ca2c38866a60",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 68.9,
      "commitsBetweenForRepo": 430,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,24 @@\n   private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n-      List\u003cApplicationAttemptStateData\u003e attempts \u003d\n-          new ArrayList\u003cApplicationAttemptStateData\u003e();\n+      List\u003cApplicationAttemptStateData\u003e attempts \u003d new ArrayList\u003c\u003e();\n+      final RMAppStateFileProcessor rmAppStateFileProcessor \u003d\n+          new RMAppStateFileProcessor(rmState, attempts);\n+      final Path rootDirectory \u003d this.rmAppRoot;\n \n-      for (FileStatus appDir : listStatusWithRetries(rmAppRoot)) {\n-        checkAndResumeUpdateOperation(appDir.getPath());\n-        for (FileStatus childNodeStatus :\n-            listStatusWithRetries(appDir.getPath())) {\n-          assert childNodeStatus.isFile();\n-          String childNodeName \u003d childNodeStatus.getPath().getName();\n-          if (checkAndRemovePartialRecordWithRetries(\n-              childNodeStatus.getPath())) {\n-            continue;\n-          }\n-          byte[] childData \u003d readFileWithRetries(childNodeStatus.getPath(),\n-                  childNodeStatus.getLen());\n-          // Set attribute if not already set\n-          setUnreadableBySuperuserXattrib(childNodeStatus.getPath());\n-          if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n-            // application\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"Loading application from node: \" + childNodeName);\n-            }\n-            ApplicationStateDataPBImpl appState \u003d\n-                new ApplicationStateDataPBImpl(\n-                  ApplicationStateDataProto.parseFrom(childData));\n-            ApplicationId appId \u003d\n-                appState.getApplicationSubmissionContext().getApplicationId();\n-            rmState.appState.put(appId, appState);\n-          } else if (childNodeName\n-            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n-            // attempt\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"Loading application attempt from node: \"\n-                  + childNodeName);\n-            }\n-            ApplicationAttemptStateDataPBImpl attemptState \u003d\n-                new ApplicationAttemptStateDataPBImpl(\n-                  ApplicationAttemptStateDataProto.parseFrom(childData));\n-            attempts.add(attemptState);\n-          } else {\n-            LOG.info(\"Unknown child node with name: \" + childNodeName);\n-          }\n-        }\n-      }\n+      processDirectoriesOfFiles(rmAppStateFileProcessor, rootDirectory);\n \n       // go through all attempts and add them to their apps, Ideally, each\n       // attempt node must have a corresponding app node, because remove\n       // directory operation remove both at the same time\n       for (ApplicationAttemptStateData attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n         ApplicationStateData appState \u003d rmState.appState.get(appId);\n         assert appState !\u003d null;\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n       LOG.info(\"Done loading applications from FS state store\");\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      List\u003cApplicationAttemptStateData\u003e attempts \u003d new ArrayList\u003c\u003e();\n      final RMAppStateFileProcessor rmAppStateFileProcessor \u003d\n          new RMAppStateFileProcessor(rmState, attempts);\n      final Path rootDirectory \u003d this.rmAppRoot;\n\n      processDirectoriesOfFiles(rmAppStateFileProcessor, rootDirectory);\n\n      // go through all attempts and add them to their apps, Ideally, each\n      // attempt node must have a corresponding app node, because remove\n      // directory operation remove both at the same time\n      for (ApplicationAttemptStateData attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationStateData appState \u003d rmState.appState.get(appId);\n        assert appState !\u003d null;\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n      LOG.info(\"Done loading applications from FS state store\");\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "9a2a9553eee454ecd18120535d3e845f86fc3584": {
      "type": "Ybodychange",
      "commitMessage": "Fixing HDFS state-store. Contributed by Arun Suresh.\n",
      "commitDate": "14/05/15 4:13 PM",
      "commitName": "9a2a9553eee454ecd18120535d3e845f86fc3584",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/04/15 5:51 PM",
      "commitNameOld": "e71d0d87d9b388f211a8eb3d2cd9af347abf9bda",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 22.93,
      "commitsBetweenForRepo": 295,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,62 @@\n   private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n       List\u003cApplicationAttemptStateData\u003e attempts \u003d\n           new ArrayList\u003cApplicationAttemptStateData\u003e();\n \n       for (FileStatus appDir : listStatusWithRetries(rmAppRoot)) {\n         checkAndResumeUpdateOperation(appDir.getPath());\n         for (FileStatus childNodeStatus :\n             listStatusWithRetries(appDir.getPath())) {\n           assert childNodeStatus.isFile();\n           String childNodeName \u003d childNodeStatus.getPath().getName();\n           if (checkAndRemovePartialRecordWithRetries(\n               childNodeStatus.getPath())) {\n             continue;\n           }\n           byte[] childData \u003d readFileWithRetries(childNodeStatus.getPath(),\n-              childNodeStatus.getLen());\n+                  childNodeStatus.getLen());\n+          // Set attribute if not already set\n+          setUnreadableBySuperuserXattrib(childNodeStatus.getPath());\n           if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n             // application\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loading application from node: \" + childNodeName);\n             }\n             ApplicationStateDataPBImpl appState \u003d\n                 new ApplicationStateDataPBImpl(\n                   ApplicationStateDataProto.parseFrom(childData));\n             ApplicationId appId \u003d\n                 appState.getApplicationSubmissionContext().getApplicationId();\n             rmState.appState.put(appId, appState);\n           } else if (childNodeName\n             .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n             // attempt\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loading application attempt from node: \"\n                   + childNodeName);\n             }\n             ApplicationAttemptStateDataPBImpl attemptState \u003d\n                 new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n             attempts.add(attemptState);\n           } else {\n             LOG.info(\"Unknown child node with name: \" + childNodeName);\n           }\n         }\n       }\n \n       // go through all attempts and add them to their apps, Ideally, each\n       // attempt node must have a corresponding app node, because remove\n       // directory operation remove both at the same time\n       for (ApplicationAttemptStateData attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n         ApplicationStateData appState \u003d rmState.appState.get(appId);\n         assert appState !\u003d null;\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n       LOG.info(\"Done loading applications from FS state store\");\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      List\u003cApplicationAttemptStateData\u003e attempts \u003d\n          new ArrayList\u003cApplicationAttemptStateData\u003e();\n\n      for (FileStatus appDir : listStatusWithRetries(rmAppRoot)) {\n        checkAndResumeUpdateOperation(appDir.getPath());\n        for (FileStatus childNodeStatus :\n            listStatusWithRetries(appDir.getPath())) {\n          assert childNodeStatus.isFile();\n          String childNodeName \u003d childNodeStatus.getPath().getName();\n          if (checkAndRemovePartialRecordWithRetries(\n              childNodeStatus.getPath())) {\n            continue;\n          }\n          byte[] childData \u003d readFileWithRetries(childNodeStatus.getPath(),\n                  childNodeStatus.getLen());\n          // Set attribute if not already set\n          setUnreadableBySuperuserXattrib(childNodeStatus.getPath());\n          if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n            // application\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application from node: \" + childNodeName);\n            }\n            ApplicationStateDataPBImpl appState \u003d\n                new ApplicationStateDataPBImpl(\n                  ApplicationStateDataProto.parseFrom(childData));\n            ApplicationId appId \u003d\n                appState.getApplicationSubmissionContext().getApplicationId();\n            rmState.appState.put(appId, appState);\n          } else if (childNodeName\n            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n            // attempt\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application attempt from node: \"\n                  + childNodeName);\n            }\n            ApplicationAttemptStateDataPBImpl attemptState \u003d\n                new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n            attempts.add(attemptState);\n          } else {\n            LOG.info(\"Unknown child node with name: \" + childNodeName);\n          }\n        }\n      }\n\n      // go through all attempts and add them to their apps, Ideally, each\n      // attempt node must have a corresponding app node, because remove\n      // directory operation remove both at the same time\n      for (ApplicationAttemptStateData attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationStateData appState \u003d rmState.appState.get(appId);\n        assert appState !\u003d null;\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n      LOG.info(\"Done loading applications from FS state store\");\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "01a1621930df17a745dd37892996c68fca3447d1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2820. Retry in FileSystemRMStateStore when FS\u0027s operations fail due to IOException. Contributed by Zhihai Xu.\n",
      "commitDate": "27/02/15 7:56 AM",
      "commitName": "01a1621930df17a745dd37892996c68fca3447d1",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "08/01/15 9:47 AM",
      "commitNameOld": "dc2eaa26b20cfbbcdd5784bb8761d08a42f29605",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 49.92,
      "commitsBetweenForRepo": 453,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,60 @@\n   private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n       List\u003cApplicationAttemptStateData\u003e attempts \u003d\n           new ArrayList\u003cApplicationAttemptStateData\u003e();\n \n-      for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n+      for (FileStatus appDir : listStatusWithRetries(rmAppRoot)) {\n         checkAndResumeUpdateOperation(appDir.getPath());\n-        for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n+        for (FileStatus childNodeStatus :\n+            listStatusWithRetries(appDir.getPath())) {\n           assert childNodeStatus.isFile();\n           String childNodeName \u003d childNodeStatus.getPath().getName();\n-          if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n+          if (checkAndRemovePartialRecordWithRetries(\n+              childNodeStatus.getPath())) {\n             continue;\n           }\n-          byte[] childData \u003d\n-              readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n+          byte[] childData \u003d readFileWithRetries(childNodeStatus.getPath(),\n+              childNodeStatus.getLen());\n           if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n             // application\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loading application from node: \" + childNodeName);\n             }\n             ApplicationStateDataPBImpl appState \u003d\n                 new ApplicationStateDataPBImpl(\n                   ApplicationStateDataProto.parseFrom(childData));\n             ApplicationId appId \u003d\n                 appState.getApplicationSubmissionContext().getApplicationId();\n             rmState.appState.put(appId, appState);\n           } else if (childNodeName\n             .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n             // attempt\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loading application attempt from node: \"\n                   + childNodeName);\n             }\n             ApplicationAttemptStateDataPBImpl attemptState \u003d\n                 new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n             attempts.add(attemptState);\n           } else {\n             LOG.info(\"Unknown child node with name: \" + childNodeName);\n           }\n         }\n       }\n \n       // go through all attempts and add them to their apps, Ideally, each\n       // attempt node must have a corresponding app node, because remove\n       // directory operation remove both at the same time\n       for (ApplicationAttemptStateData attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n         ApplicationStateData appState \u003d rmState.appState.get(appId);\n         assert appState !\u003d null;\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n       LOG.info(\"Done loading applications from FS state store\");\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      List\u003cApplicationAttemptStateData\u003e attempts \u003d\n          new ArrayList\u003cApplicationAttemptStateData\u003e();\n\n      for (FileStatus appDir : listStatusWithRetries(rmAppRoot)) {\n        checkAndResumeUpdateOperation(appDir.getPath());\n        for (FileStatus childNodeStatus :\n            listStatusWithRetries(appDir.getPath())) {\n          assert childNodeStatus.isFile();\n          String childNodeName \u003d childNodeStatus.getPath().getName();\n          if (checkAndRemovePartialRecordWithRetries(\n              childNodeStatus.getPath())) {\n            continue;\n          }\n          byte[] childData \u003d readFileWithRetries(childNodeStatus.getPath(),\n              childNodeStatus.getLen());\n          if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n            // application\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application from node: \" + childNodeName);\n            }\n            ApplicationStateDataPBImpl appState \u003d\n                new ApplicationStateDataPBImpl(\n                  ApplicationStateDataProto.parseFrom(childData));\n            ApplicationId appId \u003d\n                appState.getApplicationSubmissionContext().getApplicationId();\n            rmState.appState.put(appId, appState);\n          } else if (childNodeName\n            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n            // attempt\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application attempt from node: \"\n                  + childNodeName);\n            }\n            ApplicationAttemptStateDataPBImpl attemptState \u003d\n                new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n            attempts.add(attemptState);\n          } else {\n            LOG.info(\"Unknown child node with name: \" + childNodeName);\n          }\n        }\n      }\n\n      // go through all attempts and add them to their apps, Ideally, each\n      // attempt node must have a corresponding app node, because remove\n      // directory operation remove both at the same time\n      for (ApplicationAttemptStateData attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationStateData appState \u003d rmState.appState.get(appId);\n        assert appState !\u003d null;\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n      LOG.info(\"Done loading applications from FS state store\");\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "5805a81efbc024024d8172489dfdc6cf77879416": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2404. Removed ApplicationAttemptState and ApplicationState class in RMStateStore. Contributed by Tsuyoshi OZAWA\n",
      "commitDate": "25/11/14 12:48 PM",
      "commitName": "5805a81efbc024024d8172489dfdc6cf77879416",
      "commitAuthor": "Jian He",
      "commitDateOld": "26/10/14 11:14 AM",
      "commitNameOld": "018664550507981297fd9f91e29408e6b7801ea9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 30.11,
      "commitsBetweenForRepo": 280,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,58 @@\n   private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n-      List\u003cApplicationAttemptState\u003e attempts \u003d\n-          new ArrayList\u003cApplicationAttemptState\u003e();\n+      List\u003cApplicationAttemptStateData\u003e attempts \u003d\n+          new ArrayList\u003cApplicationAttemptStateData\u003e();\n \n       for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n         checkAndResumeUpdateOperation(appDir.getPath());\n         for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n           assert childNodeStatus.isFile();\n           String childNodeName \u003d childNodeStatus.getPath().getName();\n           if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n             continue;\n           }\n           byte[] childData \u003d\n               readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n           if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n             // application\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loading application from node: \" + childNodeName);\n             }\n-            ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n-            ApplicationStateDataPBImpl appStateData \u003d\n+            ApplicationStateDataPBImpl appState \u003d\n                 new ApplicationStateDataPBImpl(\n                   ApplicationStateDataProto.parseFrom(childData));\n-            ApplicationState appState \u003d\n-                new ApplicationState(appStateData.getSubmitTime(),\n-                  appStateData.getStartTime(),\n-                  appStateData.getApplicationSubmissionContext(),\n-                  appStateData.getUser(),\n-                  appStateData.getState(),\n-                  appStateData.getDiagnostics(), appStateData.getFinishTime());\n-            // assert child node name is same as actual applicationId\n-            assert appId.equals(appState.context.getApplicationId());\n+            ApplicationId appId \u003d\n+                appState.getApplicationSubmissionContext().getApplicationId();\n             rmState.appState.put(appId, appState);\n           } else if (childNodeName\n             .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n             // attempt\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loading application attempt from node: \"\n                   + childNodeName);\n             }\n-            ApplicationAttemptId attemptId \u003d\n-                ConverterUtils.toApplicationAttemptId(childNodeName);\n-            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n+            ApplicationAttemptStateDataPBImpl attemptState \u003d\n                 new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n-            Credentials credentials \u003d null;\n-            if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n-              credentials \u003d new Credentials();\n-              DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n-              dibb.reset(attemptStateData.getAppAttemptTokens());\n-              credentials.readTokenStorageStream(dibb);\n-            }\n-            ApplicationAttemptState attemptState \u003d\n-                new ApplicationAttemptState(attemptId,\n-                  attemptStateData.getMasterContainer(), credentials,\n-                  attemptStateData.getStartTime(),\n-                  attemptStateData.getState(),\n-                  attemptStateData.getFinalTrackingUrl(),\n-                  attemptStateData.getDiagnostics(),\n-                  attemptStateData.getFinalApplicationStatus(),\n-                  attemptStateData.getAMContainerExitStatus(),\n-                  attemptStateData.getFinishTime(),\n-                  attemptStateData.getMemorySeconds(),\n-                  attemptStateData.getVcoreSeconds());\n-\n-            // assert child node name is same as application attempt id\n-            assert attemptId.equals(attemptState.getAttemptId());\n             attempts.add(attemptState);\n           } else {\n             LOG.info(\"Unknown child node with name: \" + childNodeName);\n           }\n         }\n       }\n \n       // go through all attempts and add them to their apps, Ideally, each\n       // attempt node must have a corresponding app node, because remove\n       // directory operation remove both at the same time\n-      for (ApplicationAttemptState attemptState : attempts) {\n+      for (ApplicationAttemptStateData attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n-        ApplicationState appState \u003d rmState.appState.get(appId);\n+        ApplicationStateData appState \u003d rmState.appState.get(appId);\n         assert appState !\u003d null;\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n       LOG.info(\"Done loading applications from FS state store\");\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      List\u003cApplicationAttemptStateData\u003e attempts \u003d\n          new ArrayList\u003cApplicationAttemptStateData\u003e();\n\n      for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n        checkAndResumeUpdateOperation(appDir.getPath());\n        for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n          assert childNodeStatus.isFile();\n          String childNodeName \u003d childNodeStatus.getPath().getName();\n          if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n            continue;\n          }\n          byte[] childData \u003d\n              readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n          if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n            // application\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application from node: \" + childNodeName);\n            }\n            ApplicationStateDataPBImpl appState \u003d\n                new ApplicationStateDataPBImpl(\n                  ApplicationStateDataProto.parseFrom(childData));\n            ApplicationId appId \u003d\n                appState.getApplicationSubmissionContext().getApplicationId();\n            rmState.appState.put(appId, appState);\n          } else if (childNodeName\n            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n            // attempt\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application attempt from node: \"\n                  + childNodeName);\n            }\n            ApplicationAttemptStateDataPBImpl attemptState \u003d\n                new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n            attempts.add(attemptState);\n          } else {\n            LOG.info(\"Unknown child node with name: \" + childNodeName);\n          }\n        }\n      }\n\n      // go through all attempts and add them to their apps, Ideally, each\n      // attempt node must have a corresponding app node, because remove\n      // directory operation remove both at the same time\n      for (ApplicationAttemptStateData attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationStateData appState \u003d rmState.appState.get(appId);\n        assert appState !\u003d null;\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n      LOG.info(\"Done loading applications from FS state store\");\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "14e2639fd0d53f7e0b58f2f4744af44983d4e867": {
      "type": "Ybodychange",
      "commitMessage": "YARN-611. Added an API to let apps specify an interval beyond which AM failures should be ignored towards counting max-attempts. Contributed by Xuan Gong.\n",
      "commitDate": "13/09/14 6:04 PM",
      "commitName": "14e2639fd0d53f7e0b58f2f4744af44983d4e867",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/09/14 10:33 AM",
      "commitNameOld": "3122daa80261b466e309e88d88d1e2c030525e3f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.31,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,90 @@\n   private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n           new ArrayList\u003cApplicationAttemptState\u003e();\n \n       for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n         checkAndResumeUpdateOperation(appDir.getPath());\n         for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n           assert childNodeStatus.isFile();\n           String childNodeName \u003d childNodeStatus.getPath().getName();\n           if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n             continue;\n           }\n           byte[] childData \u003d\n               readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n           if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n             // application\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loading application from node: \" + childNodeName);\n             }\n             ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n             ApplicationStateDataPBImpl appStateData \u003d\n                 new ApplicationStateDataPBImpl(\n                   ApplicationStateDataProto.parseFrom(childData));\n             ApplicationState appState \u003d\n                 new ApplicationState(appStateData.getSubmitTime(),\n                   appStateData.getStartTime(),\n                   appStateData.getApplicationSubmissionContext(),\n                   appStateData.getUser(),\n                   appStateData.getState(),\n                   appStateData.getDiagnostics(), appStateData.getFinishTime());\n             // assert child node name is same as actual applicationId\n             assert appId.equals(appState.context.getApplicationId());\n             rmState.appState.put(appId, appState);\n           } else if (childNodeName\n             .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n             // attempt\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loading application attempt from node: \"\n                   + childNodeName);\n             }\n             ApplicationAttemptId attemptId \u003d\n                 ConverterUtils.toApplicationAttemptId(childNodeName);\n             ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                 new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n             Credentials credentials \u003d null;\n             if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n               credentials \u003d new Credentials();\n               DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n               dibb.reset(attemptStateData.getAppAttemptTokens());\n               credentials.readTokenStorageStream(dibb);\n             }\n             ApplicationAttemptState attemptState \u003d\n                 new ApplicationAttemptState(attemptId,\n                   attemptStateData.getMasterContainer(), credentials,\n                   attemptStateData.getStartTime(),\n                   attemptStateData.getState(),\n                   attemptStateData.getFinalTrackingUrl(),\n                   attemptStateData.getDiagnostics(),\n                   attemptStateData.getFinalApplicationStatus(),\n                   attemptStateData.getAMContainerExitStatus(),\n+                  attemptStateData.getFinishTime(),\n                   attemptStateData.getMemorySeconds(),\n                   attemptStateData.getVcoreSeconds());\n \n             // assert child node name is same as application attempt id\n             assert attemptId.equals(attemptState.getAttemptId());\n             attempts.add(attemptState);\n           } else {\n             LOG.info(\"Unknown child node with name: \" + childNodeName);\n           }\n         }\n       }\n \n       // go through all attempts and add them to their apps, Ideally, each\n       // attempt node must have a corresponding app node, because remove\n       // directory operation remove both at the same time\n       for (ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n         ApplicationState appState \u003d rmState.appState.get(appId);\n         assert appState !\u003d null;\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n       LOG.info(\"Done loading applications from FS state store\");\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n          new ArrayList\u003cApplicationAttemptState\u003e();\n\n      for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n        checkAndResumeUpdateOperation(appDir.getPath());\n        for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n          assert childNodeStatus.isFile();\n          String childNodeName \u003d childNodeStatus.getPath().getName();\n          if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n            continue;\n          }\n          byte[] childData \u003d\n              readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n          if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n            // application\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application from node: \" + childNodeName);\n            }\n            ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n            ApplicationStateDataPBImpl appStateData \u003d\n                new ApplicationStateDataPBImpl(\n                  ApplicationStateDataProto.parseFrom(childData));\n            ApplicationState appState \u003d\n                new ApplicationState(appStateData.getSubmitTime(),\n                  appStateData.getStartTime(),\n                  appStateData.getApplicationSubmissionContext(),\n                  appStateData.getUser(),\n                  appStateData.getState(),\n                  appStateData.getDiagnostics(), appStateData.getFinishTime());\n            // assert child node name is same as actual applicationId\n            assert appId.equals(appState.context.getApplicationId());\n            rmState.appState.put(appId, appState);\n          } else if (childNodeName\n            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n            // attempt\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application attempt from node: \"\n                  + childNodeName);\n            }\n            ApplicationAttemptId attemptId \u003d\n                ConverterUtils.toApplicationAttemptId(childNodeName);\n            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n            Credentials credentials \u003d null;\n            if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n              credentials \u003d new Credentials();\n              DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n              dibb.reset(attemptStateData.getAppAttemptTokens());\n              credentials.readTokenStorageStream(dibb);\n            }\n            ApplicationAttemptState attemptState \u003d\n                new ApplicationAttemptState(attemptId,\n                  attemptStateData.getMasterContainer(), credentials,\n                  attemptStateData.getStartTime(),\n                  attemptStateData.getState(),\n                  attemptStateData.getFinalTrackingUrl(),\n                  attemptStateData.getDiagnostics(),\n                  attemptStateData.getFinalApplicationStatus(),\n                  attemptStateData.getAMContainerExitStatus(),\n                  attemptStateData.getFinishTime(),\n                  attemptStateData.getMemorySeconds(),\n                  attemptStateData.getVcoreSeconds());\n\n            // assert child node name is same as application attempt id\n            assert attemptId.equals(attemptState.getAttemptId());\n            attempts.add(attemptState);\n          } else {\n            LOG.info(\"Unknown child node with name: \" + childNodeName);\n          }\n        }\n      }\n\n      // go through all attempts and add them to their apps, Ideally, each\n      // attempt node must have a corresponding app node, because remove\n      // directory operation remove both at the same time\n      for (ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d rmState.appState.get(appId);\n        assert appState !\u003d null;\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n      LOG.info(\"Done loading applications from FS state store\");\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-415. Capture aggregate memory allocation at the app-level for chargeback. Contributed by Eric Payne \u0026 Andrey Klochkov\n",
      "commitDate": "10/09/14 6:20 PM",
      "commitName": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/08/14 11:16 AM",
      "commitNameOld": "3de66011c2e80d7c458a67f80042af986fcc677d",
      "commitAuthorOld": "Hitesh Shah",
      "daysBetweenCommits": 12.29,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,89 @@\n   private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n           new ArrayList\u003cApplicationAttemptState\u003e();\n \n       for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n         checkAndResumeUpdateOperation(appDir.getPath());\n         for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n           assert childNodeStatus.isFile();\n           String childNodeName \u003d childNodeStatus.getPath().getName();\n           if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n             continue;\n           }\n           byte[] childData \u003d\n               readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n           if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n             // application\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loading application from node: \" + childNodeName);\n             }\n             ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n             ApplicationStateDataPBImpl appStateData \u003d\n                 new ApplicationStateDataPBImpl(\n                   ApplicationStateDataProto.parseFrom(childData));\n             ApplicationState appState \u003d\n                 new ApplicationState(appStateData.getSubmitTime(),\n                   appStateData.getStartTime(),\n                   appStateData.getApplicationSubmissionContext(),\n                   appStateData.getUser(),\n                   appStateData.getState(),\n                   appStateData.getDiagnostics(), appStateData.getFinishTime());\n             // assert child node name is same as actual applicationId\n             assert appId.equals(appState.context.getApplicationId());\n             rmState.appState.put(appId, appState);\n           } else if (childNodeName\n             .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n             // attempt\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loading application attempt from node: \"\n                   + childNodeName);\n             }\n             ApplicationAttemptId attemptId \u003d\n                 ConverterUtils.toApplicationAttemptId(childNodeName);\n             ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                 new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n             Credentials credentials \u003d null;\n             if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n               credentials \u003d new Credentials();\n               DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n               dibb.reset(attemptStateData.getAppAttemptTokens());\n               credentials.readTokenStorageStream(dibb);\n             }\n             ApplicationAttemptState attemptState \u003d\n                 new ApplicationAttemptState(attemptId,\n                   attemptStateData.getMasterContainer(), credentials,\n                   attemptStateData.getStartTime(),\n                   attemptStateData.getState(),\n                   attemptStateData.getFinalTrackingUrl(),\n                   attemptStateData.getDiagnostics(),\n                   attemptStateData.getFinalApplicationStatus(),\n-                  attemptStateData.getAMContainerExitStatus());\n+                  attemptStateData.getAMContainerExitStatus(),\n+                  attemptStateData.getMemorySeconds(),\n+                  attemptStateData.getVcoreSeconds());\n \n             // assert child node name is same as application attempt id\n             assert attemptId.equals(attemptState.getAttemptId());\n             attempts.add(attemptState);\n           } else {\n             LOG.info(\"Unknown child node with name: \" + childNodeName);\n           }\n         }\n       }\n \n       // go through all attempts and add them to their apps, Ideally, each\n       // attempt node must have a corresponding app node, because remove\n       // directory operation remove both at the same time\n       for (ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n         ApplicationState appState \u003d rmState.appState.get(appId);\n         assert appState !\u003d null;\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n       LOG.info(\"Done loading applications from FS state store\");\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n          new ArrayList\u003cApplicationAttemptState\u003e();\n\n      for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n        checkAndResumeUpdateOperation(appDir.getPath());\n        for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n          assert childNodeStatus.isFile();\n          String childNodeName \u003d childNodeStatus.getPath().getName();\n          if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n            continue;\n          }\n          byte[] childData \u003d\n              readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n          if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n            // application\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application from node: \" + childNodeName);\n            }\n            ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n            ApplicationStateDataPBImpl appStateData \u003d\n                new ApplicationStateDataPBImpl(\n                  ApplicationStateDataProto.parseFrom(childData));\n            ApplicationState appState \u003d\n                new ApplicationState(appStateData.getSubmitTime(),\n                  appStateData.getStartTime(),\n                  appStateData.getApplicationSubmissionContext(),\n                  appStateData.getUser(),\n                  appStateData.getState(),\n                  appStateData.getDiagnostics(), appStateData.getFinishTime());\n            // assert child node name is same as actual applicationId\n            assert appId.equals(appState.context.getApplicationId());\n            rmState.appState.put(appId, appState);\n          } else if (childNodeName\n            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n            // attempt\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application attempt from node: \"\n                  + childNodeName);\n            }\n            ApplicationAttemptId attemptId \u003d\n                ConverterUtils.toApplicationAttemptId(childNodeName);\n            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n            Credentials credentials \u003d null;\n            if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n              credentials \u003d new Credentials();\n              DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n              dibb.reset(attemptStateData.getAppAttemptTokens());\n              credentials.readTokenStorageStream(dibb);\n            }\n            ApplicationAttemptState attemptState \u003d\n                new ApplicationAttemptState(attemptId,\n                  attemptStateData.getMasterContainer(), credentials,\n                  attemptStateData.getStartTime(),\n                  attemptStateData.getState(),\n                  attemptStateData.getFinalTrackingUrl(),\n                  attemptStateData.getDiagnostics(),\n                  attemptStateData.getFinalApplicationStatus(),\n                  attemptStateData.getAMContainerExitStatus(),\n                  attemptStateData.getMemorySeconds(),\n                  attemptStateData.getVcoreSeconds());\n\n            // assert child node name is same as application attempt id\n            assert attemptId.equals(attemptState.getAttemptId());\n            attempts.add(attemptState);\n          } else {\n            LOG.info(\"Unknown child node with name: \" + childNodeName);\n          }\n        }\n      }\n\n      // go through all attempts and add them to their apps, Ideally, each\n      // attempt node must have a corresponding app node, because remove\n      // directory operation remove both at the same time\n      for (ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d rmState.appState.get(appId);\n        assert appState !\u003d null;\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n      LOG.info(\"Done loading applications from FS state store\");\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "3de66011c2e80d7c458a67f80042af986fcc677d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2450. Fix typos in log messages. Contributed by Ray Chiang.\n",
      "commitDate": "29/08/14 11:16 AM",
      "commitName": "3de66011c2e80d7c458a67f80042af986fcc677d",
      "commitAuthor": "Hitesh Shah",
      "commitDateOld": "28/08/14 9:47 PM",
      "commitNameOld": "7b3e27ab7393214e35a575bc9093100e94dd8c89",
      "commitAuthorOld": "Jian",
      "daysBetweenCommits": 0.56,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,87 @@\n   private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n           new ArrayList\u003cApplicationAttemptState\u003e();\n \n       for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n         checkAndResumeUpdateOperation(appDir.getPath());\n         for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n           assert childNodeStatus.isFile();\n           String childNodeName \u003d childNodeStatus.getPath().getName();\n           if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n             continue;\n           }\n           byte[] childData \u003d\n               readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n           if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n             // application\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loading application from node: \" + childNodeName);\n             }\n             ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n             ApplicationStateDataPBImpl appStateData \u003d\n                 new ApplicationStateDataPBImpl(\n                   ApplicationStateDataProto.parseFrom(childData));\n             ApplicationState appState \u003d\n                 new ApplicationState(appStateData.getSubmitTime(),\n                   appStateData.getStartTime(),\n                   appStateData.getApplicationSubmissionContext(),\n                   appStateData.getUser(),\n                   appStateData.getState(),\n                   appStateData.getDiagnostics(), appStateData.getFinishTime());\n             // assert child node name is same as actual applicationId\n             assert appId.equals(appState.context.getApplicationId());\n             rmState.appState.put(appId, appState);\n           } else if (childNodeName\n             .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n             // attempt\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loading application attempt from node: \"\n                   + childNodeName);\n             }\n             ApplicationAttemptId attemptId \u003d\n                 ConverterUtils.toApplicationAttemptId(childNodeName);\n             ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                 new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n             Credentials credentials \u003d null;\n             if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n               credentials \u003d new Credentials();\n               DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n               dibb.reset(attemptStateData.getAppAttemptTokens());\n               credentials.readTokenStorageStream(dibb);\n             }\n             ApplicationAttemptState attemptState \u003d\n                 new ApplicationAttemptState(attemptId,\n                   attemptStateData.getMasterContainer(), credentials,\n                   attemptStateData.getStartTime(),\n                   attemptStateData.getState(),\n                   attemptStateData.getFinalTrackingUrl(),\n                   attemptStateData.getDiagnostics(),\n                   attemptStateData.getFinalApplicationStatus(),\n                   attemptStateData.getAMContainerExitStatus());\n \n             // assert child node name is same as application attempt id\n             assert attemptId.equals(attemptState.getAttemptId());\n             attempts.add(attemptState);\n           } else {\n             LOG.info(\"Unknown child node with name: \" + childNodeName);\n           }\n         }\n       }\n \n       // go through all attempts and add them to their apps, Ideally, each\n       // attempt node must have a corresponding app node, because remove\n       // directory operation remove both at the same time\n       for (ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n         ApplicationState appState \u003d rmState.appState.get(appId);\n         assert appState !\u003d null;\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n-      LOG.info(\"Done Loading applications from FS state store\");\n+      LOG.info(\"Done loading applications from FS state store\");\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n          new ArrayList\u003cApplicationAttemptState\u003e();\n\n      for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n        checkAndResumeUpdateOperation(appDir.getPath());\n        for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n          assert childNodeStatus.isFile();\n          String childNodeName \u003d childNodeStatus.getPath().getName();\n          if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n            continue;\n          }\n          byte[] childData \u003d\n              readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n          if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n            // application\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application from node: \" + childNodeName);\n            }\n            ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n            ApplicationStateDataPBImpl appStateData \u003d\n                new ApplicationStateDataPBImpl(\n                  ApplicationStateDataProto.parseFrom(childData));\n            ApplicationState appState \u003d\n                new ApplicationState(appStateData.getSubmitTime(),\n                  appStateData.getStartTime(),\n                  appStateData.getApplicationSubmissionContext(),\n                  appStateData.getUser(),\n                  appStateData.getState(),\n                  appStateData.getDiagnostics(), appStateData.getFinishTime());\n            // assert child node name is same as actual applicationId\n            assert appId.equals(appState.context.getApplicationId());\n            rmState.appState.put(appId, appState);\n          } else if (childNodeName\n            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n            // attempt\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application attempt from node: \"\n                  + childNodeName);\n            }\n            ApplicationAttemptId attemptId \u003d\n                ConverterUtils.toApplicationAttemptId(childNodeName);\n            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n            Credentials credentials \u003d null;\n            if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n              credentials \u003d new Credentials();\n              DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n              dibb.reset(attemptStateData.getAppAttemptTokens());\n              credentials.readTokenStorageStream(dibb);\n            }\n            ApplicationAttemptState attemptState \u003d\n                new ApplicationAttemptState(attemptId,\n                  attemptStateData.getMasterContainer(), credentials,\n                  attemptStateData.getStartTime(),\n                  attemptStateData.getState(),\n                  attemptStateData.getFinalTrackingUrl(),\n                  attemptStateData.getDiagnostics(),\n                  attemptStateData.getFinalApplicationStatus(),\n                  attemptStateData.getAMContainerExitStatus());\n\n            // assert child node name is same as application attempt id\n            assert attemptId.equals(attemptState.getAttemptId());\n            attempts.add(attemptState);\n          } else {\n            LOG.info(\"Unknown child node with name: \" + childNodeName);\n          }\n        }\n      }\n\n      // go through all attempts and add them to their apps, Ideally, each\n      // attempt node must have a corresponding app node, because remove\n      // directory operation remove both at the same time\n      for (ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d rmState.appState.get(appId);\n        assert appState !\u003d null;\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n      LOG.info(\"Done loading applications from FS state store\");\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "d16470025aa0c51a04c530863a96108895d72ddf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2074. Changed ResourceManager to not count AM preemptions towards app failures. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605106 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 8:15 AM",
      "commitName": "d16470025aa0c51a04c530863a96108895d72ddf",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "09/06/14 12:44 PM",
      "commitNameOld": "c94f2cec3a4d46718aa4cd144fb32e328406b9b3",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 14.81,
      "commitsBetweenForRepo": 106,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,87 @@\n   private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n           new ArrayList\u003cApplicationAttemptState\u003e();\n \n       for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n         checkAndResumeUpdateOperation(appDir.getPath());\n         for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n           assert childNodeStatus.isFile();\n           String childNodeName \u003d childNodeStatus.getPath().getName();\n           if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n             continue;\n           }\n           byte[] childData \u003d\n               readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n           if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n             // application\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loading application from node: \" + childNodeName);\n             }\n             ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n             ApplicationStateDataPBImpl appStateData \u003d\n                 new ApplicationStateDataPBImpl(\n                   ApplicationStateDataProto.parseFrom(childData));\n             ApplicationState appState \u003d\n                 new ApplicationState(appStateData.getSubmitTime(),\n                   appStateData.getStartTime(),\n                   appStateData.getApplicationSubmissionContext(),\n                   appStateData.getUser(),\n                   appStateData.getState(),\n                   appStateData.getDiagnostics(), appStateData.getFinishTime());\n             // assert child node name is same as actual applicationId\n             assert appId.equals(appState.context.getApplicationId());\n             rmState.appState.put(appId, appState);\n           } else if (childNodeName\n             .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n             // attempt\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loading application attempt from node: \"\n                   + childNodeName);\n             }\n             ApplicationAttemptId attemptId \u003d\n                 ConverterUtils.toApplicationAttemptId(childNodeName);\n             ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                 new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n             Credentials credentials \u003d null;\n             if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n               credentials \u003d new Credentials();\n               DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n               dibb.reset(attemptStateData.getAppAttemptTokens());\n               credentials.readTokenStorageStream(dibb);\n             }\n             ApplicationAttemptState attemptState \u003d\n                 new ApplicationAttemptState(attemptId,\n                   attemptStateData.getMasterContainer(), credentials,\n                   attemptStateData.getStartTime(),\n                   attemptStateData.getState(),\n                   attemptStateData.getFinalTrackingUrl(),\n                   attemptStateData.getDiagnostics(),\n-                  attemptStateData.getFinalApplicationStatus());\n+                  attemptStateData.getFinalApplicationStatus(),\n+                  attemptStateData.getAMContainerExitStatus());\n \n             // assert child node name is same as application attempt id\n             assert attemptId.equals(attemptState.getAttemptId());\n             attempts.add(attemptState);\n           } else {\n             LOG.info(\"Unknown child node with name: \" + childNodeName);\n           }\n         }\n       }\n \n       // go through all attempts and add them to their apps, Ideally, each\n       // attempt node must have a corresponding app node, because remove\n       // directory operation remove both at the same time\n       for (ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n         ApplicationState appState \u003d rmState.appState.get(appId);\n         assert appState !\u003d null;\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n       LOG.info(\"Done Loading applications from FS state store\");\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n          new ArrayList\u003cApplicationAttemptState\u003e();\n\n      for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n        checkAndResumeUpdateOperation(appDir.getPath());\n        for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n          assert childNodeStatus.isFile();\n          String childNodeName \u003d childNodeStatus.getPath().getName();\n          if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n            continue;\n          }\n          byte[] childData \u003d\n              readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n          if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n            // application\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application from node: \" + childNodeName);\n            }\n            ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n            ApplicationStateDataPBImpl appStateData \u003d\n                new ApplicationStateDataPBImpl(\n                  ApplicationStateDataProto.parseFrom(childData));\n            ApplicationState appState \u003d\n                new ApplicationState(appStateData.getSubmitTime(),\n                  appStateData.getStartTime(),\n                  appStateData.getApplicationSubmissionContext(),\n                  appStateData.getUser(),\n                  appStateData.getState(),\n                  appStateData.getDiagnostics(), appStateData.getFinishTime());\n            // assert child node name is same as actual applicationId\n            assert appId.equals(appState.context.getApplicationId());\n            rmState.appState.put(appId, appState);\n          } else if (childNodeName\n            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n            // attempt\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application attempt from node: \"\n                  + childNodeName);\n            }\n            ApplicationAttemptId attemptId \u003d\n                ConverterUtils.toApplicationAttemptId(childNodeName);\n            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n            Credentials credentials \u003d null;\n            if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n              credentials \u003d new Credentials();\n              DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n              dibb.reset(attemptStateData.getAppAttemptTokens());\n              credentials.readTokenStorageStream(dibb);\n            }\n            ApplicationAttemptState attemptState \u003d\n                new ApplicationAttemptState(attemptId,\n                  attemptStateData.getMasterContainer(), credentials,\n                  attemptStateData.getStartTime(),\n                  attemptStateData.getState(),\n                  attemptStateData.getFinalTrackingUrl(),\n                  attemptStateData.getDiagnostics(),\n                  attemptStateData.getFinalApplicationStatus(),\n                  attemptStateData.getAMContainerExitStatus());\n\n            // assert child node name is same as application attempt id\n            assert attemptId.equals(attemptState.getAttemptId());\n            attempts.add(attemptState);\n          } else {\n            LOG.info(\"Unknown child node with name: \" + childNodeName);\n          }\n        }\n      }\n\n      // go through all attempts and add them to their apps, Ideally, each\n      // attempt node must have a corresponding app node, because remove\n      // directory operation remove both at the same time\n      for (ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d rmState.appState.get(appId);\n        assert appState !\u003d null;\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n      LOG.info(\"Done Loading applications from FS state store\");\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "ce56616037fc160ba875b496bdc369411bb873be": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1776. Fixed DelegationToken renewal to survive RM failover. Contributed by Zhijie Shen\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580154 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/14 9:12 PM",
      "commitName": "ce56616037fc160ba875b496bdc369411bb873be",
      "commitAuthor": "Jian He",
      "commitDateOld": "18/12/13 6:33 PM",
      "commitNameOld": "93907baa0b033c1431dc7055116746fc9db508cc",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 93.07,
      "commitsBetweenForRepo": 690,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,86 @@\n   private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n           new ArrayList\u003cApplicationAttemptState\u003e();\n \n       for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n+        checkAndResumeUpdateOperation(appDir.getPath());\n         for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n           assert childNodeStatus.isFile();\n           String childNodeName \u003d childNodeStatus.getPath().getName();\n           if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n             continue;\n           }\n           byte[] childData \u003d\n               readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n           if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n             // application\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loading application from node: \" + childNodeName);\n             }\n             ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n             ApplicationStateDataPBImpl appStateData \u003d\n                 new ApplicationStateDataPBImpl(\n                   ApplicationStateDataProto.parseFrom(childData));\n             ApplicationState appState \u003d\n                 new ApplicationState(appStateData.getSubmitTime(),\n                   appStateData.getStartTime(),\n                   appStateData.getApplicationSubmissionContext(),\n                   appStateData.getUser(),\n                   appStateData.getState(),\n                   appStateData.getDiagnostics(), appStateData.getFinishTime());\n             // assert child node name is same as actual applicationId\n             assert appId.equals(appState.context.getApplicationId());\n             rmState.appState.put(appId, appState);\n           } else if (childNodeName\n             .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n             // attempt\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Loading application attempt from node: \"\n                   + childNodeName);\n             }\n             ApplicationAttemptId attemptId \u003d\n                 ConverterUtils.toApplicationAttemptId(childNodeName);\n             ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                 new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n             Credentials credentials \u003d null;\n             if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n               credentials \u003d new Credentials();\n               DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n               dibb.reset(attemptStateData.getAppAttemptTokens());\n               credentials.readTokenStorageStream(dibb);\n             }\n             ApplicationAttemptState attemptState \u003d\n                 new ApplicationAttemptState(attemptId,\n                   attemptStateData.getMasterContainer(), credentials,\n                   attemptStateData.getStartTime(),\n                   attemptStateData.getState(),\n                   attemptStateData.getFinalTrackingUrl(),\n                   attemptStateData.getDiagnostics(),\n                   attemptStateData.getFinalApplicationStatus());\n \n             // assert child node name is same as application attempt id\n             assert attemptId.equals(attemptState.getAttemptId());\n             attempts.add(attemptState);\n           } else {\n             LOG.info(\"Unknown child node with name: \" + childNodeName);\n           }\n         }\n       }\n \n       // go through all attempts and add them to their apps, Ideally, each\n       // attempt node must have a corresponding app node, because remove\n       // directory operation remove both at the same time\n       for (ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n         ApplicationState appState \u003d rmState.appState.get(appId);\n         assert appState !\u003d null;\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n       LOG.info(\"Done Loading applications from FS state store\");\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n          new ArrayList\u003cApplicationAttemptState\u003e();\n\n      for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n        checkAndResumeUpdateOperation(appDir.getPath());\n        for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n          assert childNodeStatus.isFile();\n          String childNodeName \u003d childNodeStatus.getPath().getName();\n          if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n            continue;\n          }\n          byte[] childData \u003d\n              readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n          if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n            // application\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application from node: \" + childNodeName);\n            }\n            ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n            ApplicationStateDataPBImpl appStateData \u003d\n                new ApplicationStateDataPBImpl(\n                  ApplicationStateDataProto.parseFrom(childData));\n            ApplicationState appState \u003d\n                new ApplicationState(appStateData.getSubmitTime(),\n                  appStateData.getStartTime(),\n                  appStateData.getApplicationSubmissionContext(),\n                  appStateData.getUser(),\n                  appStateData.getState(),\n                  appStateData.getDiagnostics(), appStateData.getFinishTime());\n            // assert child node name is same as actual applicationId\n            assert appId.equals(appState.context.getApplicationId());\n            rmState.appState.put(appId, appState);\n          } else if (childNodeName\n            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n            // attempt\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application attempt from node: \"\n                  + childNodeName);\n            }\n            ApplicationAttemptId attemptId \u003d\n                ConverterUtils.toApplicationAttemptId(childNodeName);\n            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n            Credentials credentials \u003d null;\n            if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n              credentials \u003d new Credentials();\n              DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n              dibb.reset(attemptStateData.getAppAttemptTokens());\n              credentials.readTokenStorageStream(dibb);\n            }\n            ApplicationAttemptState attemptState \u003d\n                new ApplicationAttemptState(attemptId,\n                  attemptStateData.getMasterContainer(), credentials,\n                  attemptStateData.getStartTime(),\n                  attemptStateData.getState(),\n                  attemptStateData.getFinalTrackingUrl(),\n                  attemptStateData.getDiagnostics(),\n                  attemptStateData.getFinalApplicationStatus());\n\n            // assert child node name is same as application attempt id\n            assert attemptId.equals(attemptState.getAttemptId());\n            attempts.add(attemptState);\n          } else {\n            LOG.info(\"Unknown child node with name: \" + childNodeName);\n          }\n        }\n      }\n\n      // go through all attempts and add them to their apps, Ideally, each\n      // attempt node must have a corresponding app node, because remove\n      // directory operation remove both at the same time\n      for (ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d rmState.appState.get(appId);\n        assert appState !\u003d null;\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n      LOG.info(\"Done Loading applications from FS state store\");\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "305ae48136d6e201de4451e824cb7b84f94ba2e0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1378. Implemented a cleaner of old finished applications from the RM state-store. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548990 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/12/13 8:17 PM",
      "commitName": "305ae48136d6e201de4451e824cb7b84f94ba2e0",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/12/13 11:28 AM",
      "commitNameOld": "9c95015bb47f362e592393f0cec899fd8fdd3b04",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.37,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,85 @@\n   private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n           new ArrayList\u003cApplicationAttemptState\u003e();\n \n       for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n         for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n           assert childNodeStatus.isFile();\n           String childNodeName \u003d childNodeStatus.getPath().getName();\n           if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n             continue;\n           }\n           byte[] childData \u003d\n               readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n           if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n             // application\n-            LOG.info(\"Loading application from node: \" + childNodeName);\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Loading application from node: \" + childNodeName);\n+            }\n             ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n             ApplicationStateDataPBImpl appStateData \u003d\n                 new ApplicationStateDataPBImpl(\n                   ApplicationStateDataProto.parseFrom(childData));\n             ApplicationState appState \u003d\n                 new ApplicationState(appStateData.getSubmitTime(),\n                   appStateData.getStartTime(),\n                   appStateData.getApplicationSubmissionContext(),\n                   appStateData.getUser(),\n                   appStateData.getState(),\n                   appStateData.getDiagnostics(), appStateData.getFinishTime());\n             // assert child node name is same as actual applicationId\n             assert appId.equals(appState.context.getApplicationId());\n             rmState.appState.put(appId, appState);\n           } else if (childNodeName\n             .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n             // attempt\n-            LOG.info(\"Loading application attempt from node: \" + childNodeName);\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Loading application attempt from node: \"\n+                  + childNodeName);\n+            }\n             ApplicationAttemptId attemptId \u003d\n                 ConverterUtils.toApplicationAttemptId(childNodeName);\n             ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                 new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n             Credentials credentials \u003d null;\n             if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n               credentials \u003d new Credentials();\n               DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n               dibb.reset(attemptStateData.getAppAttemptTokens());\n               credentials.readTokenStorageStream(dibb);\n             }\n             ApplicationAttemptState attemptState \u003d\n                 new ApplicationAttemptState(attemptId,\n                   attemptStateData.getMasterContainer(), credentials,\n                   attemptStateData.getStartTime(),\n                   attemptStateData.getState(),\n                   attemptStateData.getFinalTrackingUrl(),\n                   attemptStateData.getDiagnostics(),\n                   attemptStateData.getFinalApplicationStatus());\n \n             // assert child node name is same as application attempt id\n             assert attemptId.equals(attemptState.getAttemptId());\n             attempts.add(attemptState);\n           } else {\n             LOG.info(\"Unknown child node with name: \" + childNodeName);\n           }\n         }\n       }\n \n       // go through all attempts and add them to their apps, Ideally, each\n       // attempt node must have a corresponding app node, because remove\n       // directory operation remove both at the same time\n       for (ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n         ApplicationState appState \u003d rmState.appState.get(appId);\n         assert appState !\u003d null;\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n+      LOG.info(\"Done Loading applications from FS state store\");\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n          new ArrayList\u003cApplicationAttemptState\u003e();\n\n      for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n        for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n          assert childNodeStatus.isFile();\n          String childNodeName \u003d childNodeStatus.getPath().getName();\n          if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n            continue;\n          }\n          byte[] childData \u003d\n              readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n          if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n            // application\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application from node: \" + childNodeName);\n            }\n            ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n            ApplicationStateDataPBImpl appStateData \u003d\n                new ApplicationStateDataPBImpl(\n                  ApplicationStateDataProto.parseFrom(childData));\n            ApplicationState appState \u003d\n                new ApplicationState(appStateData.getSubmitTime(),\n                  appStateData.getStartTime(),\n                  appStateData.getApplicationSubmissionContext(),\n                  appStateData.getUser(),\n                  appStateData.getState(),\n                  appStateData.getDiagnostics(), appStateData.getFinishTime());\n            // assert child node name is same as actual applicationId\n            assert appId.equals(appState.context.getApplicationId());\n            rmState.appState.put(appId, appState);\n          } else if (childNodeName\n            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n            // attempt\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Loading application attempt from node: \"\n                  + childNodeName);\n            }\n            ApplicationAttemptId attemptId \u003d\n                ConverterUtils.toApplicationAttemptId(childNodeName);\n            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n            Credentials credentials \u003d null;\n            if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n              credentials \u003d new Credentials();\n              DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n              dibb.reset(attemptStateData.getAppAttemptTokens());\n              credentials.readTokenStorageStream(dibb);\n            }\n            ApplicationAttemptState attemptState \u003d\n                new ApplicationAttemptState(attemptId,\n                  attemptStateData.getMasterContainer(), credentials,\n                  attemptStateData.getStartTime(),\n                  attemptStateData.getState(),\n                  attemptStateData.getFinalTrackingUrl(),\n                  attemptStateData.getDiagnostics(),\n                  attemptStateData.getFinalApplicationStatus());\n\n            // assert child node name is same as application attempt id\n            assert attemptId.equals(attemptState.getAttemptId());\n            attempts.add(attemptState);\n          } else {\n            LOG.info(\"Unknown child node with name: \" + childNodeName);\n          }\n        }\n      }\n\n      // go through all attempts and add them to their apps, Ideally, each\n      // attempt node must have a corresponding app node, because remove\n      // directory operation remove both at the same time\n      for (ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d rmState.appState.get(appId);\n        assert appState !\u003d null;\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n      LOG.info(\"Done Loading applications from FS state store\");\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-891. Modified ResourceManager state-store to remember completed applications so that clients can get information about them post RM-restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1537560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/13 10:25 AM",
      "commitName": "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/10/13 11:14 AM",
      "commitNameOld": "7f97fd131981e88ffc76c11a01ea9d190576a6d6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 11.97,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,79 @@\n   private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n           new ArrayList\u003cApplicationAttemptState\u003e();\n \n       for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n         for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n           assert childNodeStatus.isFile();\n           String childNodeName \u003d childNodeStatus.getPath().getName();\n           if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n             continue;\n           }\n           byte[] childData \u003d\n               readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n           if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n             // application\n             LOG.info(\"Loading application from node: \" + childNodeName);\n             ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n             ApplicationStateDataPBImpl appStateData \u003d\n                 new ApplicationStateDataPBImpl(\n                   ApplicationStateDataProto.parseFrom(childData));\n             ApplicationState appState \u003d\n                 new ApplicationState(appStateData.getSubmitTime(),\n+                  appStateData.getStartTime(),\n                   appStateData.getApplicationSubmissionContext(),\n-                  appStateData.getUser());\n+                  appStateData.getUser(),\n+                  appStateData.getState(),\n+                  appStateData.getDiagnostics(), appStateData.getFinishTime());\n             // assert child node name is same as actual applicationId\n             assert appId.equals(appState.context.getApplicationId());\n             rmState.appState.put(appId, appState);\n           } else if (childNodeName\n             .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n             // attempt\n             LOG.info(\"Loading application attempt from node: \" + childNodeName);\n             ApplicationAttemptId attemptId \u003d\n                 ConverterUtils.toApplicationAttemptId(childNodeName);\n             ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                 new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n             Credentials credentials \u003d null;\n             if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n               credentials \u003d new Credentials();\n               DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n               dibb.reset(attemptStateData.getAppAttemptTokens());\n               credentials.readTokenStorageStream(dibb);\n             }\n             ApplicationAttemptState attemptState \u003d\n                 new ApplicationAttemptState(attemptId,\n-                  attemptStateData.getMasterContainer(), credentials);\n+                  attemptStateData.getMasterContainer(), credentials,\n+                  attemptStateData.getStartTime(),\n+                  attemptStateData.getState(),\n+                  attemptStateData.getFinalTrackingUrl(),\n+                  attemptStateData.getDiagnostics(),\n+                  attemptStateData.getFinalApplicationStatus());\n \n             // assert child node name is same as application attempt id\n             assert attemptId.equals(attemptState.getAttemptId());\n             attempts.add(attemptState);\n           } else {\n             LOG.info(\"Unknown child node with name: \" + childNodeName);\n           }\n         }\n       }\n \n       // go through all attempts and add them to their apps, Ideally, each\n       // attempt node must have a corresponding app node, because remove\n       // directory operation remove both at the same time\n       for (ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n         ApplicationState appState \u003d rmState.appState.get(appId);\n         assert appState !\u003d null;\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n          new ArrayList\u003cApplicationAttemptState\u003e();\n\n      for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n        for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n          assert childNodeStatus.isFile();\n          String childNodeName \u003d childNodeStatus.getPath().getName();\n          if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n            continue;\n          }\n          byte[] childData \u003d\n              readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n          if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n            // application\n            LOG.info(\"Loading application from node: \" + childNodeName);\n            ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n            ApplicationStateDataPBImpl appStateData \u003d\n                new ApplicationStateDataPBImpl(\n                  ApplicationStateDataProto.parseFrom(childData));\n            ApplicationState appState \u003d\n                new ApplicationState(appStateData.getSubmitTime(),\n                  appStateData.getStartTime(),\n                  appStateData.getApplicationSubmissionContext(),\n                  appStateData.getUser(),\n                  appStateData.getState(),\n                  appStateData.getDiagnostics(), appStateData.getFinishTime());\n            // assert child node name is same as actual applicationId\n            assert appId.equals(appState.context.getApplicationId());\n            rmState.appState.put(appId, appState);\n          } else if (childNodeName\n            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n            // attempt\n            LOG.info(\"Loading application attempt from node: \" + childNodeName);\n            ApplicationAttemptId attemptId \u003d\n                ConverterUtils.toApplicationAttemptId(childNodeName);\n            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n            Credentials credentials \u003d null;\n            if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n              credentials \u003d new Credentials();\n              DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n              dibb.reset(attemptStateData.getAppAttemptTokens());\n              credentials.readTokenStorageStream(dibb);\n            }\n            ApplicationAttemptState attemptState \u003d\n                new ApplicationAttemptState(attemptId,\n                  attemptStateData.getMasterContainer(), credentials,\n                  attemptStateData.getStartTime(),\n                  attemptStateData.getState(),\n                  attemptStateData.getFinalTrackingUrl(),\n                  attemptStateData.getDiagnostics(),\n                  attemptStateData.getFinalApplicationStatus());\n\n            // assert child node name is same as application attempt id\n            assert attemptId.equals(attemptState.getAttemptId());\n            attempts.add(attemptState);\n          } else {\n            LOG.info(\"Unknown child node with name: \" + childNodeName);\n          }\n        }\n      }\n\n      // go through all attempts and add them to their apps, Ideally, each\n      // attempt node must have a corresponding app node, because remove\n      // directory operation remove both at the same time\n      for (ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d rmState.appState.get(appId);\n        assert appState !\u003d null;\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "7f97fd131981e88ffc76c11a01ea9d190576a6d6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1185. Fixed FileSystemRMStateStore to not leave partial files that prevent subsequent ResourceManager recovery. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1533803 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/10/13 11:14 AM",
      "commitName": "7f97fd131981e88ffc76c11a01ea9d190576a6d6",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/09/13 1:39 PM",
      "commitNameOld": "8628c1704b7d8c1a0ac01cea679c03245d11d330",
      "commitAuthorOld": "Hitesh Shah",
      "daysBetweenCommits": 29.9,
      "commitsBetweenForRepo": 212,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,71 @@\n   private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n           new ArrayList\u003cApplicationAttemptState\u003e();\n \n       for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n         for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n           assert childNodeStatus.isFile();\n           String childNodeName \u003d childNodeStatus.getPath().getName();\n+          if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n+            continue;\n+          }\n           byte[] childData \u003d\n               readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n           if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n             // application\n             LOG.info(\"Loading application from node: \" + childNodeName);\n             ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n             ApplicationStateDataPBImpl appStateData \u003d\n                 new ApplicationStateDataPBImpl(\n                   ApplicationStateDataProto.parseFrom(childData));\n             ApplicationState appState \u003d\n                 new ApplicationState(appStateData.getSubmitTime(),\n                   appStateData.getApplicationSubmissionContext(),\n                   appStateData.getUser());\n             // assert child node name is same as actual applicationId\n             assert appId.equals(appState.context.getApplicationId());\n             rmState.appState.put(appId, appState);\n           } else if (childNodeName\n             .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n             // attempt\n             LOG.info(\"Loading application attempt from node: \" + childNodeName);\n             ApplicationAttemptId attemptId \u003d\n                 ConverterUtils.toApplicationAttemptId(childNodeName);\n             ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                 new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n             Credentials credentials \u003d null;\n             if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n               credentials \u003d new Credentials();\n               DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n               dibb.reset(attemptStateData.getAppAttemptTokens());\n               credentials.readTokenStorageStream(dibb);\n             }\n             ApplicationAttemptState attemptState \u003d\n                 new ApplicationAttemptState(attemptId,\n                   attemptStateData.getMasterContainer(), credentials);\n \n             // assert child node name is same as application attempt id\n             assert attemptId.equals(attemptState.getAttemptId());\n             attempts.add(attemptState);\n           } else {\n             LOG.info(\"Unknown child node with name: \" + childNodeName);\n           }\n         }\n       }\n \n       // go through all attempts and add them to their apps, Ideally, each\n       // attempt node must have a corresponding app node, because remove\n       // directory operation remove both at the same time\n       for (ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n         ApplicationState appState \u003d rmState.appState.get(appId);\n         assert appState !\u003d null;\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n          new ArrayList\u003cApplicationAttemptState\u003e();\n\n      for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n        for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n          assert childNodeStatus.isFile();\n          String childNodeName \u003d childNodeStatus.getPath().getName();\n          if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n            continue;\n          }\n          byte[] childData \u003d\n              readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n          if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n            // application\n            LOG.info(\"Loading application from node: \" + childNodeName);\n            ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n            ApplicationStateDataPBImpl appStateData \u003d\n                new ApplicationStateDataPBImpl(\n                  ApplicationStateDataProto.parseFrom(childData));\n            ApplicationState appState \u003d\n                new ApplicationState(appStateData.getSubmitTime(),\n                  appStateData.getApplicationSubmissionContext(),\n                  appStateData.getUser());\n            // assert child node name is same as actual applicationId\n            assert appId.equals(appState.context.getApplicationId());\n            rmState.appState.put(appId, appState);\n          } else if (childNodeName\n            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n            // attempt\n            LOG.info(\"Loading application attempt from node: \" + childNodeName);\n            ApplicationAttemptId attemptId \u003d\n                ConverterUtils.toApplicationAttemptId(childNodeName);\n            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n            Credentials credentials \u003d null;\n            if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n              credentials \u003d new Credentials();\n              DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n              dibb.reset(attemptStateData.getAppAttemptTokens());\n              credentials.readTokenStorageStream(dibb);\n            }\n            ApplicationAttemptState attemptState \u003d\n                new ApplicationAttemptState(attemptId,\n                  attemptStateData.getMasterContainer(), credentials);\n\n            // assert child node name is same as application attempt id\n            assert attemptId.equals(attemptState.getAttemptId());\n            attempts.add(attemptState);\n          } else {\n            LOG.info(\"Unknown child node with name: \" + childNodeName);\n          }\n        }\n      }\n\n      // go through all attempts and add them to their apps, Ideally, each\n      // attempt node must have a corresponding app node, because remove\n      // directory operation remove both at the same time\n      for (ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d rmState.appState.get(appId);\n        assert appState !\u003d null;\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "9f3e488936b6fbfc30e4b0cc42667288355345d1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-922. Change FileSystemRMStateStore to use directories (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504261 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/13 1:19 PM",
      "commitName": "9f3e488936b6fbfc30e4b0cc42667288355345d1",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "29/05/13 9:14 PM",
      "commitNameOld": "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 48.67,
      "commitsBetweenForRepo": 323,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,68 @@\n   private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n-      FileStatus[] childNodes \u003d fs.listStatus(rmAppRoot);\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n-                                      new ArrayList\u003cApplicationAttemptState\u003e();\n-      for(FileStatus childNodeStatus : childNodes) {\n-        assert childNodeStatus.isFile();\n-        String childNodeName \u003d childNodeStatus.getPath().getName();\n-        Path childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n-        byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n-        if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n-          // application\n-          LOG.info(\"Loading application from node: \" + childNodeName);\n-          ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n-          ApplicationStateDataPBImpl appStateData \u003d\n-              new ApplicationStateDataPBImpl(\n-                                ApplicationStateDataProto.parseFrom(childData));\n-          ApplicationState appState \u003d new ApplicationState(\n-                               appStateData.getSubmitTime(),\n-                               appStateData.getApplicationSubmissionContext(),\n-                               appStateData.getUser());\n-          // assert child node name is same as actual applicationId\n-          assert appId.equals(appState.context.getApplicationId());\n-          rmState.appState.put(appId, appState);\n-        } else if(childNodeName.startsWith(\n-                                ApplicationAttemptId.appAttemptIdStrPrefix)) {\n-          // attempt\n-          LOG.info(\"Loading application attempt from node: \" + childNodeName);\n-          ApplicationAttemptId attemptId \u003d\n-                          ConverterUtils.toApplicationAttemptId(childNodeName);\n-          ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n-              new ApplicationAttemptStateDataPBImpl(\n-                  ApplicationAttemptStateDataProto.parseFrom(childData));\n-          Credentials credentials \u003d null;\n-          if(attemptStateData.getAppAttemptTokens() !\u003d null){\n-            credentials \u003d new Credentials();\n-            DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n-            dibb.reset(attemptStateData.getAppAttemptTokens());\n-            credentials.readTokenStorageStream(dibb);\n-          }\n-          ApplicationAttemptState attemptState \u003d\n-              new ApplicationAttemptState(attemptId,\n-                attemptStateData.getMasterContainer(), credentials);\n+          new ArrayList\u003cApplicationAttemptState\u003e();\n \n-          // assert child node name is same as application attempt id\n-          assert attemptId.equals(attemptState.getAttemptId());\n-          attempts.add(attemptState);\n-        } else {\n-          LOG.info(\"Unknown child node with name: \" + childNodeName);\n+      for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n+        for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n+          assert childNodeStatus.isFile();\n+          String childNodeName \u003d childNodeStatus.getPath().getName();\n+          byte[] childData \u003d\n+              readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n+          if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n+            // application\n+            LOG.info(\"Loading application from node: \" + childNodeName);\n+            ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n+            ApplicationStateDataPBImpl appStateData \u003d\n+                new ApplicationStateDataPBImpl(\n+                  ApplicationStateDataProto.parseFrom(childData));\n+            ApplicationState appState \u003d\n+                new ApplicationState(appStateData.getSubmitTime(),\n+                  appStateData.getApplicationSubmissionContext(),\n+                  appStateData.getUser());\n+            // assert child node name is same as actual applicationId\n+            assert appId.equals(appState.context.getApplicationId());\n+            rmState.appState.put(appId, appState);\n+          } else if (childNodeName\n+            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n+            // attempt\n+            LOG.info(\"Loading application attempt from node: \" + childNodeName);\n+            ApplicationAttemptId attemptId \u003d\n+                ConverterUtils.toApplicationAttemptId(childNodeName);\n+            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n+                new ApplicationAttemptStateDataPBImpl(\n+                  ApplicationAttemptStateDataProto.parseFrom(childData));\n+            Credentials credentials \u003d null;\n+            if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n+              credentials \u003d new Credentials();\n+              DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n+              dibb.reset(attemptStateData.getAppAttemptTokens());\n+              credentials.readTokenStorageStream(dibb);\n+            }\n+            ApplicationAttemptState attemptState \u003d\n+                new ApplicationAttemptState(attemptId,\n+                  attemptStateData.getMasterContainer(), credentials);\n+\n+            // assert child node name is same as application attempt id\n+            assert attemptId.equals(attemptState.getAttemptId());\n+            attempts.add(attemptState);\n+          } else {\n+            LOG.info(\"Unknown child node with name: \" + childNodeName);\n+          }\n         }\n       }\n \n-      // go through all attempts and add them to their apps\n-      for(ApplicationAttemptState attemptState : attempts) {\n+      // go through all attempts and add them to their apps, Ideally, each\n+      // attempt node must have a corresponding app node, because remove\n+      // directory operation remove both at the same time\n+      for (ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n         ApplicationState appState \u003d rmState.appState.get(appId);\n-        if(appState !\u003d null) {\n-          appState.attempts.put(attemptState.getAttemptId(), attemptState);\n-        } else {\n-          // the application node may have been removed when the application\n-          // completed but the RM might have stopped before it could remove the\n-          // application attempt nodes\n-          LOG.info(\"Application node not found for attempt: \"\n-                    + attemptState.getAttemptId());\n-          deleteFile(getNodePath(rmAppRoot, attemptState.getAttemptId().toString()));\n-        }\n+        assert appState !\u003d null;\n+        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       }\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n          new ArrayList\u003cApplicationAttemptState\u003e();\n\n      for (FileStatus appDir : fs.listStatus(rmAppRoot)) {\n        for (FileStatus childNodeStatus : fs.listStatus(appDir.getPath())) {\n          assert childNodeStatus.isFile();\n          String childNodeName \u003d childNodeStatus.getPath().getName();\n          byte[] childData \u003d\n              readFile(childNodeStatus.getPath(), childNodeStatus.getLen());\n          if (childNodeName.startsWith(ApplicationId.appIdStrPrefix)) {\n            // application\n            LOG.info(\"Loading application from node: \" + childNodeName);\n            ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n            ApplicationStateDataPBImpl appStateData \u003d\n                new ApplicationStateDataPBImpl(\n                  ApplicationStateDataProto.parseFrom(childData));\n            ApplicationState appState \u003d\n                new ApplicationState(appStateData.getSubmitTime(),\n                  appStateData.getApplicationSubmissionContext(),\n                  appStateData.getUser());\n            // assert child node name is same as actual applicationId\n            assert appId.equals(appState.context.getApplicationId());\n            rmState.appState.put(appId, appState);\n          } else if (childNodeName\n            .startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n            // attempt\n            LOG.info(\"Loading application attempt from node: \" + childNodeName);\n            ApplicationAttemptId attemptId \u003d\n                ConverterUtils.toApplicationAttemptId(childNodeName);\n            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n                new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n            Credentials credentials \u003d null;\n            if (attemptStateData.getAppAttemptTokens() !\u003d null) {\n              credentials \u003d new Credentials();\n              DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n              dibb.reset(attemptStateData.getAppAttemptTokens());\n              credentials.readTokenStorageStream(dibb);\n            }\n            ApplicationAttemptState attemptState \u003d\n                new ApplicationAttemptState(attemptId,\n                  attemptStateData.getMasterContainer(), credentials);\n\n            // assert child node name is same as application attempt id\n            assert attemptId.equals(attemptState.getAttemptId());\n            attempts.add(attemptState);\n          } else {\n            LOG.info(\"Unknown child node with name: \" + childNodeName);\n          }\n        }\n      }\n\n      // go through all attempts and add them to their apps, Ideally, each\n      // attempt node must have a corresponding app node, because remove\n      // directory operation remove both at the same time\n      for (ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d rmState.appState.get(appId);\n        assert appState !\u003d null;\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      }\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-638. Modified ResourceManager to restore RMDelegationTokens after restarting. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/13 9:14 PM",
      "commitName": "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-638. Modified ResourceManager to restore RMDelegationTokens after restarting. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/05/13 9:14 PM",
          "commitName": "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "23/05/13 8:22 PM",
          "commitNameOld": "259edf8dca44de54033e96f7eb65a83aaa6096f2",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.04,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,72 @@\n-  public synchronized RMState loadState() throws Exception {\n+  private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n-      RMState state \u003d new RMState();\n-      FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n+      FileStatus[] childNodes \u003d fs.listStatus(rmAppRoot);\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n                                       new ArrayList\u003cApplicationAttemptState\u003e();\n       for(FileStatus childNodeStatus : childNodes) {\n         assert childNodeStatus.isFile();\n         String childNodeName \u003d childNodeStatus.getPath().getName();\n-        Path childNodePath \u003d getNodePath(childNodeName);\n+        Path childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n         byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n         if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n           // application\n           LOG.info(\"Loading application from node: \" + childNodeName);\n           ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n           ApplicationStateDataPBImpl appStateData \u003d\n               new ApplicationStateDataPBImpl(\n                                 ApplicationStateDataProto.parseFrom(childData));\n           ApplicationState appState \u003d new ApplicationState(\n                                appStateData.getSubmitTime(),\n                                appStateData.getApplicationSubmissionContext(),\n                                appStateData.getUser());\n           // assert child node name is same as actual applicationId\n           assert appId.equals(appState.context.getApplicationId());\n-          state.appState.put(appId, appState);\n+          rmState.appState.put(appId, appState);\n         } else if(childNodeName.startsWith(\n                                 ApplicationAttemptId.appAttemptIdStrPrefix)) {\n           // attempt\n           LOG.info(\"Loading application attempt from node: \" + childNodeName);\n           ApplicationAttemptId attemptId \u003d\n                           ConverterUtils.toApplicationAttemptId(childNodeName);\n           ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n               new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n           Credentials credentials \u003d null;\n           if(attemptStateData.getAppAttemptTokens() !\u003d null){\n             credentials \u003d new Credentials();\n             DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n             dibb.reset(attemptStateData.getAppAttemptTokens());\n             credentials.readTokenStorageStream(dibb);\n           }\n           ApplicationAttemptState attemptState \u003d\n               new ApplicationAttemptState(attemptId,\n                 attemptStateData.getMasterContainer(), credentials);\n \n           // assert child node name is same as application attempt id\n           assert attemptId.equals(attemptState.getAttemptId());\n           attempts.add(attemptState);\n         } else {\n           LOG.info(\"Unknown child node with name: \" + childNodeName);\n         }\n       }\n \n       // go through all attempts and add them to their apps\n       for(ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n-        ApplicationState appState \u003d state.appState.get(appId);\n+        ApplicationState appState \u003d rmState.appState.get(appId);\n         if(appState !\u003d null) {\n           appState.attempts.put(attemptState.getAttemptId(), attemptState);\n         } else {\n           // the application node may have been removed when the application\n           // completed but the RM might have stopped before it could remove the\n           // application attempt nodes\n           LOG.info(\"Application node not found for attempt: \"\n                     + attemptState.getAttemptId());\n-          deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n+          deleteFile(getNodePath(rmAppRoot, attemptState.getAttemptId().toString()));\n         }\n       }\n-\n-      return state;\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      FileStatus[] childNodes \u003d fs.listStatus(rmAppRoot);\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n                                      new ArrayList\u003cApplicationAttemptState\u003e();\n      for(FileStatus childNodeStatus : childNodes) {\n        assert childNodeStatus.isFile();\n        String childNodeName \u003d childNodeStatus.getPath().getName();\n        Path childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n        byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n        if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n          // application\n          LOG.info(\"Loading application from node: \" + childNodeName);\n          ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl(\n                                ApplicationStateDataProto.parseFrom(childData));\n          ApplicationState appState \u003d new ApplicationState(\n                               appStateData.getSubmitTime(),\n                               appStateData.getApplicationSubmissionContext(),\n                               appStateData.getUser());\n          // assert child node name is same as actual applicationId\n          assert appId.equals(appState.context.getApplicationId());\n          rmState.appState.put(appId, appState);\n        } else if(childNodeName.startsWith(\n                                ApplicationAttemptId.appAttemptIdStrPrefix)) {\n          // attempt\n          LOG.info(\"Loading application attempt from node: \" + childNodeName);\n          ApplicationAttemptId attemptId \u003d\n                          ConverterUtils.toApplicationAttemptId(childNodeName);\n          ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n              new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n          Credentials credentials \u003d null;\n          if(attemptStateData.getAppAttemptTokens() !\u003d null){\n            credentials \u003d new Credentials();\n            DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n            dibb.reset(attemptStateData.getAppAttemptTokens());\n            credentials.readTokenStorageStream(dibb);\n          }\n          ApplicationAttemptState attemptState \u003d\n              new ApplicationAttemptState(attemptId,\n                attemptStateData.getMasterContainer(), credentials);\n\n          // assert child node name is same as application attempt id\n          assert attemptId.equals(attemptState.getAttemptId());\n          attempts.add(attemptState);\n        } else {\n          LOG.info(\"Unknown child node with name: \" + childNodeName);\n        }\n      }\n\n      // go through all attempts and add them to their apps\n      for(ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d rmState.appState.get(appId);\n        if(appState !\u003d null) {\n          appState.attempts.put(attemptState.getAttemptId(), attemptState);\n        } else {\n          // the application node may have been removed when the application\n          // completed but the RM might have stopped before it could remove the\n          // application attempt nodes\n          LOG.info(\"Application node not found for attempt: \"\n                    + attemptState.getAttemptId());\n          deleteFile(getNodePath(rmAppRoot, attemptState.getAttemptId().toString()));\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
          "extendedDetails": {
            "oldValue": "loadState",
            "newValue": "loadRMAppState"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-638. Modified ResourceManager to restore RMDelegationTokens after restarting. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/05/13 9:14 PM",
          "commitName": "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "23/05/13 8:22 PM",
          "commitNameOld": "259edf8dca44de54033e96f7eb65a83aaa6096f2",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.04,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,72 @@\n-  public synchronized RMState loadState() throws Exception {\n+  private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n-      RMState state \u003d new RMState();\n-      FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n+      FileStatus[] childNodes \u003d fs.listStatus(rmAppRoot);\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n                                       new ArrayList\u003cApplicationAttemptState\u003e();\n       for(FileStatus childNodeStatus : childNodes) {\n         assert childNodeStatus.isFile();\n         String childNodeName \u003d childNodeStatus.getPath().getName();\n-        Path childNodePath \u003d getNodePath(childNodeName);\n+        Path childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n         byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n         if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n           // application\n           LOG.info(\"Loading application from node: \" + childNodeName);\n           ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n           ApplicationStateDataPBImpl appStateData \u003d\n               new ApplicationStateDataPBImpl(\n                                 ApplicationStateDataProto.parseFrom(childData));\n           ApplicationState appState \u003d new ApplicationState(\n                                appStateData.getSubmitTime(),\n                                appStateData.getApplicationSubmissionContext(),\n                                appStateData.getUser());\n           // assert child node name is same as actual applicationId\n           assert appId.equals(appState.context.getApplicationId());\n-          state.appState.put(appId, appState);\n+          rmState.appState.put(appId, appState);\n         } else if(childNodeName.startsWith(\n                                 ApplicationAttemptId.appAttemptIdStrPrefix)) {\n           // attempt\n           LOG.info(\"Loading application attempt from node: \" + childNodeName);\n           ApplicationAttemptId attemptId \u003d\n                           ConverterUtils.toApplicationAttemptId(childNodeName);\n           ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n               new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n           Credentials credentials \u003d null;\n           if(attemptStateData.getAppAttemptTokens() !\u003d null){\n             credentials \u003d new Credentials();\n             DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n             dibb.reset(attemptStateData.getAppAttemptTokens());\n             credentials.readTokenStorageStream(dibb);\n           }\n           ApplicationAttemptState attemptState \u003d\n               new ApplicationAttemptState(attemptId,\n                 attemptStateData.getMasterContainer(), credentials);\n \n           // assert child node name is same as application attempt id\n           assert attemptId.equals(attemptState.getAttemptId());\n           attempts.add(attemptState);\n         } else {\n           LOG.info(\"Unknown child node with name: \" + childNodeName);\n         }\n       }\n \n       // go through all attempts and add them to their apps\n       for(ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n-        ApplicationState appState \u003d state.appState.get(appId);\n+        ApplicationState appState \u003d rmState.appState.get(appId);\n         if(appState !\u003d null) {\n           appState.attempts.put(attemptState.getAttemptId(), attemptState);\n         } else {\n           // the application node may have been removed when the application\n           // completed but the RM might have stopped before it could remove the\n           // application attempt nodes\n           LOG.info(\"Application node not found for attempt: \"\n                     + attemptState.getAttemptId());\n-          deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n+          deleteFile(getNodePath(rmAppRoot, attemptState.getAttemptId().toString()));\n         }\n       }\n-\n-      return state;\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      FileStatus[] childNodes \u003d fs.listStatus(rmAppRoot);\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n                                      new ArrayList\u003cApplicationAttemptState\u003e();\n      for(FileStatus childNodeStatus : childNodes) {\n        assert childNodeStatus.isFile();\n        String childNodeName \u003d childNodeStatus.getPath().getName();\n        Path childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n        byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n        if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n          // application\n          LOG.info(\"Loading application from node: \" + childNodeName);\n          ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl(\n                                ApplicationStateDataProto.parseFrom(childData));\n          ApplicationState appState \u003d new ApplicationState(\n                               appStateData.getSubmitTime(),\n                               appStateData.getApplicationSubmissionContext(),\n                               appStateData.getUser());\n          // assert child node name is same as actual applicationId\n          assert appId.equals(appState.context.getApplicationId());\n          rmState.appState.put(appId, appState);\n        } else if(childNodeName.startsWith(\n                                ApplicationAttemptId.appAttemptIdStrPrefix)) {\n          // attempt\n          LOG.info(\"Loading application attempt from node: \" + childNodeName);\n          ApplicationAttemptId attemptId \u003d\n                          ConverterUtils.toApplicationAttemptId(childNodeName);\n          ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n              new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n          Credentials credentials \u003d null;\n          if(attemptStateData.getAppAttemptTokens() !\u003d null){\n            credentials \u003d new Credentials();\n            DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n            dibb.reset(attemptStateData.getAppAttemptTokens());\n            credentials.readTokenStorageStream(dibb);\n          }\n          ApplicationAttemptState attemptState \u003d\n              new ApplicationAttemptState(attemptId,\n                attemptStateData.getMasterContainer(), credentials);\n\n          // assert child node name is same as application attempt id\n          assert attemptId.equals(attemptState.getAttemptId());\n          attempts.add(attemptState);\n        } else {\n          LOG.info(\"Unknown child node with name: \" + childNodeName);\n        }\n      }\n\n      // go through all attempts and add them to their apps\n      for(ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d rmState.appState.get(appId);\n        if(appState !\u003d null) {\n          appState.attempts.put(attemptState.getAttemptId(), attemptState);\n        } else {\n          // the application node may have been removed when the application\n          // completed but the RM might have stopped before it could remove the\n          // application attempt nodes\n          LOG.info(\"Application node not found for attempt: \"\n                    + attemptState.getAttemptId());\n          deleteFile(getNodePath(rmAppRoot, attemptState.getAttemptId().toString()));\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[rmState-RMState]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-638. Modified ResourceManager to restore RMDelegationTokens after restarting. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/05/13 9:14 PM",
          "commitName": "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "23/05/13 8:22 PM",
          "commitNameOld": "259edf8dca44de54033e96f7eb65a83aaa6096f2",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.04,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,72 @@\n-  public synchronized RMState loadState() throws Exception {\n+  private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n-      RMState state \u003d new RMState();\n-      FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n+      FileStatus[] childNodes \u003d fs.listStatus(rmAppRoot);\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n                                       new ArrayList\u003cApplicationAttemptState\u003e();\n       for(FileStatus childNodeStatus : childNodes) {\n         assert childNodeStatus.isFile();\n         String childNodeName \u003d childNodeStatus.getPath().getName();\n-        Path childNodePath \u003d getNodePath(childNodeName);\n+        Path childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n         byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n         if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n           // application\n           LOG.info(\"Loading application from node: \" + childNodeName);\n           ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n           ApplicationStateDataPBImpl appStateData \u003d\n               new ApplicationStateDataPBImpl(\n                                 ApplicationStateDataProto.parseFrom(childData));\n           ApplicationState appState \u003d new ApplicationState(\n                                appStateData.getSubmitTime(),\n                                appStateData.getApplicationSubmissionContext(),\n                                appStateData.getUser());\n           // assert child node name is same as actual applicationId\n           assert appId.equals(appState.context.getApplicationId());\n-          state.appState.put(appId, appState);\n+          rmState.appState.put(appId, appState);\n         } else if(childNodeName.startsWith(\n                                 ApplicationAttemptId.appAttemptIdStrPrefix)) {\n           // attempt\n           LOG.info(\"Loading application attempt from node: \" + childNodeName);\n           ApplicationAttemptId attemptId \u003d\n                           ConverterUtils.toApplicationAttemptId(childNodeName);\n           ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n               new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n           Credentials credentials \u003d null;\n           if(attemptStateData.getAppAttemptTokens() !\u003d null){\n             credentials \u003d new Credentials();\n             DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n             dibb.reset(attemptStateData.getAppAttemptTokens());\n             credentials.readTokenStorageStream(dibb);\n           }\n           ApplicationAttemptState attemptState \u003d\n               new ApplicationAttemptState(attemptId,\n                 attemptStateData.getMasterContainer(), credentials);\n \n           // assert child node name is same as application attempt id\n           assert attemptId.equals(attemptState.getAttemptId());\n           attempts.add(attemptState);\n         } else {\n           LOG.info(\"Unknown child node with name: \" + childNodeName);\n         }\n       }\n \n       // go through all attempts and add them to their apps\n       for(ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n-        ApplicationState appState \u003d state.appState.get(appId);\n+        ApplicationState appState \u003d rmState.appState.get(appId);\n         if(appState !\u003d null) {\n           appState.attempts.put(attemptState.getAttemptId(), attemptState);\n         } else {\n           // the application node may have been removed when the application\n           // completed but the RM might have stopped before it could remove the\n           // application attempt nodes\n           LOG.info(\"Application node not found for attempt: \"\n                     + attemptState.getAttemptId());\n-          deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n+          deleteFile(getNodePath(rmAppRoot, attemptState.getAttemptId().toString()));\n         }\n       }\n-\n-      return state;\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      FileStatus[] childNodes \u003d fs.listStatus(rmAppRoot);\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n                                      new ArrayList\u003cApplicationAttemptState\u003e();\n      for(FileStatus childNodeStatus : childNodes) {\n        assert childNodeStatus.isFile();\n        String childNodeName \u003d childNodeStatus.getPath().getName();\n        Path childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n        byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n        if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n          // application\n          LOG.info(\"Loading application from node: \" + childNodeName);\n          ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl(\n                                ApplicationStateDataProto.parseFrom(childData));\n          ApplicationState appState \u003d new ApplicationState(\n                               appStateData.getSubmitTime(),\n                               appStateData.getApplicationSubmissionContext(),\n                               appStateData.getUser());\n          // assert child node name is same as actual applicationId\n          assert appId.equals(appState.context.getApplicationId());\n          rmState.appState.put(appId, appState);\n        } else if(childNodeName.startsWith(\n                                ApplicationAttemptId.appAttemptIdStrPrefix)) {\n          // attempt\n          LOG.info(\"Loading application attempt from node: \" + childNodeName);\n          ApplicationAttemptId attemptId \u003d\n                          ConverterUtils.toApplicationAttemptId(childNodeName);\n          ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n              new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n          Credentials credentials \u003d null;\n          if(attemptStateData.getAppAttemptTokens() !\u003d null){\n            credentials \u003d new Credentials();\n            DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n            dibb.reset(attemptStateData.getAppAttemptTokens());\n            credentials.readTokenStorageStream(dibb);\n          }\n          ApplicationAttemptState attemptState \u003d\n              new ApplicationAttemptState(attemptId,\n                attemptStateData.getMasterContainer(), credentials);\n\n          // assert child node name is same as application attempt id\n          assert attemptId.equals(attemptState.getAttemptId());\n          attempts.add(attemptState);\n        } else {\n          LOG.info(\"Unknown child node with name: \" + childNodeName);\n        }\n      }\n\n      // go through all attempts and add them to their apps\n      for(ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d rmState.appState.get(appId);\n        if(appState !\u003d null) {\n          appState.attempts.put(attemptState.getAttemptId(), attemptState);\n        } else {\n          // the application node may have been removed when the application\n          // completed but the RM might have stopped before it could remove the\n          // application attempt nodes\n          LOG.info(\"Application node not found for attempt: \"\n                    + attemptState.getAttemptId());\n          deleteFile(getNodePath(rmAppRoot, attemptState.getAttemptId().toString()));\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
          "extendedDetails": {
            "oldValue": "RMState",
            "newValue": "void"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-638. Modified ResourceManager to restore RMDelegationTokens after restarting. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/05/13 9:14 PM",
          "commitName": "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "23/05/13 8:22 PM",
          "commitNameOld": "259edf8dca44de54033e96f7eb65a83aaa6096f2",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.04,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,72 @@\n-  public synchronized RMState loadState() throws Exception {\n+  private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n-      RMState state \u003d new RMState();\n-      FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n+      FileStatus[] childNodes \u003d fs.listStatus(rmAppRoot);\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n                                       new ArrayList\u003cApplicationAttemptState\u003e();\n       for(FileStatus childNodeStatus : childNodes) {\n         assert childNodeStatus.isFile();\n         String childNodeName \u003d childNodeStatus.getPath().getName();\n-        Path childNodePath \u003d getNodePath(childNodeName);\n+        Path childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n         byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n         if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n           // application\n           LOG.info(\"Loading application from node: \" + childNodeName);\n           ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n           ApplicationStateDataPBImpl appStateData \u003d\n               new ApplicationStateDataPBImpl(\n                                 ApplicationStateDataProto.parseFrom(childData));\n           ApplicationState appState \u003d new ApplicationState(\n                                appStateData.getSubmitTime(),\n                                appStateData.getApplicationSubmissionContext(),\n                                appStateData.getUser());\n           // assert child node name is same as actual applicationId\n           assert appId.equals(appState.context.getApplicationId());\n-          state.appState.put(appId, appState);\n+          rmState.appState.put(appId, appState);\n         } else if(childNodeName.startsWith(\n                                 ApplicationAttemptId.appAttemptIdStrPrefix)) {\n           // attempt\n           LOG.info(\"Loading application attempt from node: \" + childNodeName);\n           ApplicationAttemptId attemptId \u003d\n                           ConverterUtils.toApplicationAttemptId(childNodeName);\n           ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n               new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n           Credentials credentials \u003d null;\n           if(attemptStateData.getAppAttemptTokens() !\u003d null){\n             credentials \u003d new Credentials();\n             DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n             dibb.reset(attemptStateData.getAppAttemptTokens());\n             credentials.readTokenStorageStream(dibb);\n           }\n           ApplicationAttemptState attemptState \u003d\n               new ApplicationAttemptState(attemptId,\n                 attemptStateData.getMasterContainer(), credentials);\n \n           // assert child node name is same as application attempt id\n           assert attemptId.equals(attemptState.getAttemptId());\n           attempts.add(attemptState);\n         } else {\n           LOG.info(\"Unknown child node with name: \" + childNodeName);\n         }\n       }\n \n       // go through all attempts and add them to their apps\n       for(ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n-        ApplicationState appState \u003d state.appState.get(appId);\n+        ApplicationState appState \u003d rmState.appState.get(appId);\n         if(appState !\u003d null) {\n           appState.attempts.put(attemptState.getAttemptId(), attemptState);\n         } else {\n           // the application node may have been removed when the application\n           // completed but the RM might have stopped before it could remove the\n           // application attempt nodes\n           LOG.info(\"Application node not found for attempt: \"\n                     + attemptState.getAttemptId());\n-          deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n+          deleteFile(getNodePath(rmAppRoot, attemptState.getAttemptId().toString()));\n         }\n       }\n-\n-      return state;\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      FileStatus[] childNodes \u003d fs.listStatus(rmAppRoot);\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n                                      new ArrayList\u003cApplicationAttemptState\u003e();\n      for(FileStatus childNodeStatus : childNodes) {\n        assert childNodeStatus.isFile();\n        String childNodeName \u003d childNodeStatus.getPath().getName();\n        Path childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n        byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n        if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n          // application\n          LOG.info(\"Loading application from node: \" + childNodeName);\n          ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl(\n                                ApplicationStateDataProto.parseFrom(childData));\n          ApplicationState appState \u003d new ApplicationState(\n                               appStateData.getSubmitTime(),\n                               appStateData.getApplicationSubmissionContext(),\n                               appStateData.getUser());\n          // assert child node name is same as actual applicationId\n          assert appId.equals(appState.context.getApplicationId());\n          rmState.appState.put(appId, appState);\n        } else if(childNodeName.startsWith(\n                                ApplicationAttemptId.appAttemptIdStrPrefix)) {\n          // attempt\n          LOG.info(\"Loading application attempt from node: \" + childNodeName);\n          ApplicationAttemptId attemptId \u003d\n                          ConverterUtils.toApplicationAttemptId(childNodeName);\n          ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n              new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n          Credentials credentials \u003d null;\n          if(attemptStateData.getAppAttemptTokens() !\u003d null){\n            credentials \u003d new Credentials();\n            DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n            dibb.reset(attemptStateData.getAppAttemptTokens());\n            credentials.readTokenStorageStream(dibb);\n          }\n          ApplicationAttemptState attemptState \u003d\n              new ApplicationAttemptState(attemptId,\n                attemptStateData.getMasterContainer(), credentials);\n\n          // assert child node name is same as application attempt id\n          assert attemptId.equals(attemptState.getAttemptId());\n          attempts.add(attemptState);\n        } else {\n          LOG.info(\"Unknown child node with name: \" + childNodeName);\n        }\n      }\n\n      // go through all attempts and add them to their apps\n      for(ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d rmState.appState.get(appId);\n        if(appState !\u003d null) {\n          appState.attempts.put(attemptState.getAttemptId(), attemptState);\n        } else {\n          // the application node may have been removed when the application\n          // completed but the RM might have stopped before it could remove the\n          // application attempt nodes\n          LOG.info(\"Application node not found for attempt: \"\n                    + attemptState.getAttemptId());\n          deleteFile(getNodePath(rmAppRoot, attemptState.getAttemptId().toString()));\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-638. Modified ResourceManager to restore RMDelegationTokens after restarting. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/05/13 9:14 PM",
          "commitName": "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "23/05/13 8:22 PM",
          "commitNameOld": "259edf8dca44de54033e96f7eb65a83aaa6096f2",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.04,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,72 @@\n-  public synchronized RMState loadState() throws Exception {\n+  private void loadRMAppState(RMState rmState) throws Exception {\n     try {\n-      RMState state \u003d new RMState();\n-      FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n+      FileStatus[] childNodes \u003d fs.listStatus(rmAppRoot);\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n                                       new ArrayList\u003cApplicationAttemptState\u003e();\n       for(FileStatus childNodeStatus : childNodes) {\n         assert childNodeStatus.isFile();\n         String childNodeName \u003d childNodeStatus.getPath().getName();\n-        Path childNodePath \u003d getNodePath(childNodeName);\n+        Path childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n         byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n         if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n           // application\n           LOG.info(\"Loading application from node: \" + childNodeName);\n           ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n           ApplicationStateDataPBImpl appStateData \u003d\n               new ApplicationStateDataPBImpl(\n                                 ApplicationStateDataProto.parseFrom(childData));\n           ApplicationState appState \u003d new ApplicationState(\n                                appStateData.getSubmitTime(),\n                                appStateData.getApplicationSubmissionContext(),\n                                appStateData.getUser());\n           // assert child node name is same as actual applicationId\n           assert appId.equals(appState.context.getApplicationId());\n-          state.appState.put(appId, appState);\n+          rmState.appState.put(appId, appState);\n         } else if(childNodeName.startsWith(\n                                 ApplicationAttemptId.appAttemptIdStrPrefix)) {\n           // attempt\n           LOG.info(\"Loading application attempt from node: \" + childNodeName);\n           ApplicationAttemptId attemptId \u003d\n                           ConverterUtils.toApplicationAttemptId(childNodeName);\n           ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n               new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n           Credentials credentials \u003d null;\n           if(attemptStateData.getAppAttemptTokens() !\u003d null){\n             credentials \u003d new Credentials();\n             DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n             dibb.reset(attemptStateData.getAppAttemptTokens());\n             credentials.readTokenStorageStream(dibb);\n           }\n           ApplicationAttemptState attemptState \u003d\n               new ApplicationAttemptState(attemptId,\n                 attemptStateData.getMasterContainer(), credentials);\n \n           // assert child node name is same as application attempt id\n           assert attemptId.equals(attemptState.getAttemptId());\n           attempts.add(attemptState);\n         } else {\n           LOG.info(\"Unknown child node with name: \" + childNodeName);\n         }\n       }\n \n       // go through all attempts and add them to their apps\n       for(ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n-        ApplicationState appState \u003d state.appState.get(appId);\n+        ApplicationState appState \u003d rmState.appState.get(appId);\n         if(appState !\u003d null) {\n           appState.attempts.put(attemptState.getAttemptId(), attemptState);\n         } else {\n           // the application node may have been removed when the application\n           // completed but the RM might have stopped before it could remove the\n           // application attempt nodes\n           LOG.info(\"Application node not found for attempt: \"\n                     + attemptState.getAttemptId());\n-          deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n+          deleteFile(getNodePath(rmAppRoot, attemptState.getAttemptId().toString()));\n         }\n       }\n-\n-      return state;\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void loadRMAppState(RMState rmState) throws Exception {\n    try {\n      FileStatus[] childNodes \u003d fs.listStatus(rmAppRoot);\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n                                      new ArrayList\u003cApplicationAttemptState\u003e();\n      for(FileStatus childNodeStatus : childNodes) {\n        assert childNodeStatus.isFile();\n        String childNodeName \u003d childNodeStatus.getPath().getName();\n        Path childNodePath \u003d getNodePath(rmAppRoot, childNodeName);\n        byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n        if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n          // application\n          LOG.info(\"Loading application from node: \" + childNodeName);\n          ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl(\n                                ApplicationStateDataProto.parseFrom(childData));\n          ApplicationState appState \u003d new ApplicationState(\n                               appStateData.getSubmitTime(),\n                               appStateData.getApplicationSubmissionContext(),\n                               appStateData.getUser());\n          // assert child node name is same as actual applicationId\n          assert appId.equals(appState.context.getApplicationId());\n          rmState.appState.put(appId, appState);\n        } else if(childNodeName.startsWith(\n                                ApplicationAttemptId.appAttemptIdStrPrefix)) {\n          // attempt\n          LOG.info(\"Loading application attempt from node: \" + childNodeName);\n          ApplicationAttemptId attemptId \u003d\n                          ConverterUtils.toApplicationAttemptId(childNodeName);\n          ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n              new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n          Credentials credentials \u003d null;\n          if(attemptStateData.getAppAttemptTokens() !\u003d null){\n            credentials \u003d new Credentials();\n            DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n            dibb.reset(attemptStateData.getAppAttemptTokens());\n            credentials.readTokenStorageStream(dibb);\n          }\n          ApplicationAttemptState attemptState \u003d\n              new ApplicationAttemptState(attemptId,\n                attemptStateData.getMasterContainer(), credentials);\n\n          // assert child node name is same as application attempt id\n          assert attemptId.equals(attemptState.getAttemptId());\n          attempts.add(attemptState);\n        } else {\n          LOG.info(\"Unknown child node with name: \" + childNodeName);\n        }\n      }\n\n      // go through all attempts and add them to their apps\n      for(ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d rmState.appState.get(appId);\n        if(appState !\u003d null) {\n          appState.attempts.put(attemptState.getAttemptId(), attemptState);\n        } else {\n          // the application node may have been removed when the application\n          // completed but the RM might have stopped before it could remove the\n          // application attempt nodes\n          LOG.info(\"Application node not found for attempt: \"\n                    + attemptState.getAttemptId());\n          deleteFile(getNodePath(rmAppRoot, attemptState.getAttemptId().toString()));\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "259edf8dca44de54033e96f7eb65a83aaa6096f2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-571. Remove user from ContainerLaunchContext. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485928 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/13 8:22 PM",
      "commitName": "259edf8dca44de54033e96f7eb65a83aaa6096f2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/05/13 11:20 PM",
      "commitNameOld": "74231f027607ff1a6fe7d72fad28108826963cf3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 15.88,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,75 @@\n   public synchronized RMState loadState() throws Exception {\n     try {\n       RMState state \u003d new RMState();\n       FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n                                       new ArrayList\u003cApplicationAttemptState\u003e();\n       for(FileStatus childNodeStatus : childNodes) {\n         assert childNodeStatus.isFile();\n         String childNodeName \u003d childNodeStatus.getPath().getName();\n         Path childNodePath \u003d getNodePath(childNodeName);\n         byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n         if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n           // application\n           LOG.info(\"Loading application from node: \" + childNodeName);\n           ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n           ApplicationStateDataPBImpl appStateData \u003d\n               new ApplicationStateDataPBImpl(\n                                 ApplicationStateDataProto.parseFrom(childData));\n           ApplicationState appState \u003d new ApplicationState(\n                                appStateData.getSubmitTime(),\n-                               appStateData.getApplicationSubmissionContext());\n+                               appStateData.getApplicationSubmissionContext(),\n+                               appStateData.getUser());\n           // assert child node name is same as actual applicationId\n           assert appId.equals(appState.context.getApplicationId());\n           state.appState.put(appId, appState);\n         } else if(childNodeName.startsWith(\n                                 ApplicationAttemptId.appAttemptIdStrPrefix)) {\n           // attempt\n           LOG.info(\"Loading application attempt from node: \" + childNodeName);\n           ApplicationAttemptId attemptId \u003d\n                           ConverterUtils.toApplicationAttemptId(childNodeName);\n           ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n               new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n           Credentials credentials \u003d null;\n           if(attemptStateData.getAppAttemptTokens() !\u003d null){\n             credentials \u003d new Credentials();\n             DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n             dibb.reset(attemptStateData.getAppAttemptTokens());\n             credentials.readTokenStorageStream(dibb);\n           }\n           ApplicationAttemptState attemptState \u003d\n               new ApplicationAttemptState(attemptId,\n                 attemptStateData.getMasterContainer(), credentials);\n \n           // assert child node name is same as application attempt id\n           assert attemptId.equals(attemptState.getAttemptId());\n           attempts.add(attemptState);\n         } else {\n           LOG.info(\"Unknown child node with name: \" + childNodeName);\n         }\n       }\n \n       // go through all attempts and add them to their apps\n       for(ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n         ApplicationState appState \u003d state.appState.get(appId);\n         if(appState !\u003d null) {\n           appState.attempts.put(attemptState.getAttemptId(), attemptState);\n         } else {\n           // the application node may have been removed when the application\n           // completed but the RM might have stopped before it could remove the\n           // application attempt nodes\n           LOG.info(\"Application node not found for attempt: \"\n                     + attemptState.getAttemptId());\n           deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n         }\n       }\n \n       return state;\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RMState loadState() throws Exception {\n    try {\n      RMState state \u003d new RMState();\n      FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n                                      new ArrayList\u003cApplicationAttemptState\u003e();\n      for(FileStatus childNodeStatus : childNodes) {\n        assert childNodeStatus.isFile();\n        String childNodeName \u003d childNodeStatus.getPath().getName();\n        Path childNodePath \u003d getNodePath(childNodeName);\n        byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n        if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n          // application\n          LOG.info(\"Loading application from node: \" + childNodeName);\n          ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl(\n                                ApplicationStateDataProto.parseFrom(childData));\n          ApplicationState appState \u003d new ApplicationState(\n                               appStateData.getSubmitTime(),\n                               appStateData.getApplicationSubmissionContext(),\n                               appStateData.getUser());\n          // assert child node name is same as actual applicationId\n          assert appId.equals(appState.context.getApplicationId());\n          state.appState.put(appId, appState);\n        } else if(childNodeName.startsWith(\n                                ApplicationAttemptId.appAttemptIdStrPrefix)) {\n          // attempt\n          LOG.info(\"Loading application attempt from node: \" + childNodeName);\n          ApplicationAttemptId attemptId \u003d\n                          ConverterUtils.toApplicationAttemptId(childNodeName);\n          ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n              new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n          Credentials credentials \u003d null;\n          if(attemptStateData.getAppAttemptTokens() !\u003d null){\n            credentials \u003d new Credentials();\n            DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n            dibb.reset(attemptStateData.getAppAttemptTokens());\n            credentials.readTokenStorageStream(dibb);\n          }\n          ApplicationAttemptState attemptState \u003d\n              new ApplicationAttemptState(attemptId,\n                attemptStateData.getMasterContainer(), credentials);\n\n          // assert child node name is same as application attempt id\n          assert attemptId.equals(attemptState.getAttemptId());\n          attempts.add(attemptState);\n        } else {\n          LOG.info(\"Unknown child node with name: \" + childNodeName);\n        }\n      }\n\n      // go through all attempts and add them to their apps\n      for(ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d state.appState.get(appId);\n        if(appState !\u003d null) {\n          appState.attempts.put(attemptState.getAttemptId(), attemptState);\n        } else {\n          // the application node may have been removed when the application\n          // completed but the RM might have stopped before it could remove the\n          // application attempt nodes\n          LOG.info(\"Application node not found for attempt: \"\n                    + attemptState.getAttemptId());\n          deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n        }\n      }\n\n      return state;\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "74231f027607ff1a6fe7d72fad28108826963cf3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-582. Changed ResourceManager to recover Application token and client tokens for app attempt so that RM can be restarted while preserving current applications. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480168 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/05/13 11:20 PM",
      "commitName": "74231f027607ff1a6fe7d72fad28108826963cf3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/04/13 11:02 AM",
      "commitNameOld": "f0ac5a849c24c20f891c2a43af412030e7af2b9b",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 11.51,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,74 @@\n   public synchronized RMState loadState() throws Exception {\n     try {\n       RMState state \u003d new RMState();\n       FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n       List\u003cApplicationAttemptState\u003e attempts \u003d\n                                       new ArrayList\u003cApplicationAttemptState\u003e();\n       for(FileStatus childNodeStatus : childNodes) {\n         assert childNodeStatus.isFile();\n         String childNodeName \u003d childNodeStatus.getPath().getName();\n         Path childNodePath \u003d getNodePath(childNodeName);\n         byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n         if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n           // application\n           LOG.info(\"Loading application from node: \" + childNodeName);\n           ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n           ApplicationStateDataPBImpl appStateData \u003d\n               new ApplicationStateDataPBImpl(\n                                 ApplicationStateDataProto.parseFrom(childData));\n           ApplicationState appState \u003d new ApplicationState(\n                                appStateData.getSubmitTime(),\n                                appStateData.getApplicationSubmissionContext());\n           // assert child node name is same as actual applicationId\n           assert appId.equals(appState.context.getApplicationId());\n           state.appState.put(appId, appState);\n         } else if(childNodeName.startsWith(\n                                 ApplicationAttemptId.appAttemptIdStrPrefix)) {\n           // attempt\n           LOG.info(\"Loading application attempt from node: \" + childNodeName);\n           ApplicationAttemptId attemptId \u003d\n                           ConverterUtils.toApplicationAttemptId(childNodeName);\n           ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n               new ApplicationAttemptStateDataPBImpl(\n                   ApplicationAttemptStateDataProto.parseFrom(childData));\n-          ApplicationAttemptState attemptState \u003d new ApplicationAttemptState(\n-                          attemptId, attemptStateData.getMasterContainer());\n+          Credentials credentials \u003d null;\n+          if(attemptStateData.getAppAttemptTokens() !\u003d null){\n+            credentials \u003d new Credentials();\n+            DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n+            dibb.reset(attemptStateData.getAppAttemptTokens());\n+            credentials.readTokenStorageStream(dibb);\n+          }\n+          ApplicationAttemptState attemptState \u003d\n+              new ApplicationAttemptState(attemptId,\n+                attemptStateData.getMasterContainer(), credentials);\n+\n           // assert child node name is same as application attempt id\n           assert attemptId.equals(attemptState.getAttemptId());\n           attempts.add(attemptState);\n         } else {\n           LOG.info(\"Unknown child node with name: \" + childNodeName);\n         }\n       }\n \n       // go through all attempts and add them to their apps\n       for(ApplicationAttemptState attemptState : attempts) {\n         ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n         ApplicationState appState \u003d state.appState.get(appId);\n         if(appState !\u003d null) {\n           appState.attempts.put(attemptState.getAttemptId(), attemptState);\n         } else {\n           // the application node may have been removed when the application\n           // completed but the RM might have stopped before it could remove the\n           // application attempt nodes\n           LOG.info(\"Application node not found for attempt: \"\n                     + attemptState.getAttemptId());\n           deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n         }\n       }\n \n       return state;\n     } catch (Exception e) {\n       LOG.error(\"Failed to load state.\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RMState loadState() throws Exception {\n    try {\n      RMState state \u003d new RMState();\n      FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n                                      new ArrayList\u003cApplicationAttemptState\u003e();\n      for(FileStatus childNodeStatus : childNodes) {\n        assert childNodeStatus.isFile();\n        String childNodeName \u003d childNodeStatus.getPath().getName();\n        Path childNodePath \u003d getNodePath(childNodeName);\n        byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n        if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n          // application\n          LOG.info(\"Loading application from node: \" + childNodeName);\n          ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl(\n                                ApplicationStateDataProto.parseFrom(childData));\n          ApplicationState appState \u003d new ApplicationState(\n                               appStateData.getSubmitTime(),\n                               appStateData.getApplicationSubmissionContext());\n          // assert child node name is same as actual applicationId\n          assert appId.equals(appState.context.getApplicationId());\n          state.appState.put(appId, appState);\n        } else if(childNodeName.startsWith(\n                                ApplicationAttemptId.appAttemptIdStrPrefix)) {\n          // attempt\n          LOG.info(\"Loading application attempt from node: \" + childNodeName);\n          ApplicationAttemptId attemptId \u003d\n                          ConverterUtils.toApplicationAttemptId(childNodeName);\n          ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n              new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n          Credentials credentials \u003d null;\n          if(attemptStateData.getAppAttemptTokens() !\u003d null){\n            credentials \u003d new Credentials();\n            DataInputByteBuffer dibb \u003d new DataInputByteBuffer();\n            dibb.reset(attemptStateData.getAppAttemptTokens());\n            credentials.readTokenStorageStream(dibb);\n          }\n          ApplicationAttemptState attemptState \u003d\n              new ApplicationAttemptState(attemptId,\n                attemptStateData.getMasterContainer(), credentials);\n\n          // assert child node name is same as application attempt id\n          assert attemptId.equals(attemptState.getAttemptId());\n          attempts.add(attemptState);\n        } else {\n          LOG.info(\"Unknown child node with name: \" + childNodeName);\n        }\n      }\n\n      // go through all attempts and add them to their apps\n      for(ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d state.appState.get(appId);\n        if(appState !\u003d null) {\n          appState.attempts.put(attemptState.getAttemptId(), attemptState);\n        } else {\n          // the application node may have been removed when the application\n          // completed but the RM might have stopped before it could remove the\n          // application attempt nodes\n          LOG.info(\"Application node not found for attempt: \"\n                    + attemptState.getAttemptId());\n          deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n        }\n      }\n\n      return state;\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "29ddce96a26c45fc747408801bf65255fbd9990f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-231. RM Restart - Add FS-based persistent store implementation for RMStateStore. Contributed by Bikas Saha\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1437245 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/01/13 4:57 PM",
      "commitName": "29ddce96a26c45fc747408801bf65255fbd9990f",
      "commitAuthor": "Hitesh Shah",
      "diff": "@@ -0,0 +1,65 @@\n+  public synchronized RMState loadState() throws Exception {\n+    try {\n+      RMState state \u003d new RMState();\n+      FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n+      List\u003cApplicationAttemptState\u003e attempts \u003d\n+                                      new ArrayList\u003cApplicationAttemptState\u003e();\n+      for(FileStatus childNodeStatus : childNodes) {\n+        assert childNodeStatus.isFile();\n+        String childNodeName \u003d childNodeStatus.getPath().getName();\n+        Path childNodePath \u003d getNodePath(childNodeName);\n+        byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n+        if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n+          // application\n+          LOG.info(\"Loading application from node: \" + childNodeName);\n+          ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n+          ApplicationStateDataPBImpl appStateData \u003d\n+              new ApplicationStateDataPBImpl(\n+                                ApplicationStateDataProto.parseFrom(childData));\n+          ApplicationState appState \u003d new ApplicationState(\n+                               appStateData.getSubmitTime(),\n+                               appStateData.getApplicationSubmissionContext());\n+          // assert child node name is same as actual applicationId\n+          assert appId.equals(appState.context.getApplicationId());\n+          state.appState.put(appId, appState);\n+        } else if(childNodeName.startsWith(\n+                                ApplicationAttemptId.appAttemptIdStrPrefix)) {\n+          // attempt\n+          LOG.info(\"Loading application attempt from node: \" + childNodeName);\n+          ApplicationAttemptId attemptId \u003d\n+                          ConverterUtils.toApplicationAttemptId(childNodeName);\n+          ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n+              new ApplicationAttemptStateDataPBImpl(\n+                  ApplicationAttemptStateDataProto.parseFrom(childData));\n+          ApplicationAttemptState attemptState \u003d new ApplicationAttemptState(\n+                          attemptId, attemptStateData.getMasterContainer());\n+          // assert child node name is same as application attempt id\n+          assert attemptId.equals(attemptState.getAttemptId());\n+          attempts.add(attemptState);\n+        } else {\n+          LOG.info(\"Unknown child node with name: \" + childNodeName);\n+        }\n+      }\n+\n+      // go through all attempts and add them to their apps\n+      for(ApplicationAttemptState attemptState : attempts) {\n+        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n+        ApplicationState appState \u003d state.appState.get(appId);\n+        if(appState !\u003d null) {\n+          appState.attempts.put(attemptState.getAttemptId(), attemptState);\n+        } else {\n+          // the application node may have been removed when the application\n+          // completed but the RM might have stopped before it could remove the\n+          // application attempt nodes\n+          LOG.info(\"Application node not found for attempt: \"\n+                    + attemptState.getAttemptId());\n+          deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n+        }\n+      }\n+\n+      return state;\n+    } catch (Exception e) {\n+      LOG.error(\"Failed to load state.\", e);\n+      throw e;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RMState loadState() throws Exception {\n    try {\n      RMState state \u003d new RMState();\n      FileStatus[] childNodes \u003d fs.listStatus(fsRootDirPath);\n      List\u003cApplicationAttemptState\u003e attempts \u003d\n                                      new ArrayList\u003cApplicationAttemptState\u003e();\n      for(FileStatus childNodeStatus : childNodes) {\n        assert childNodeStatus.isFile();\n        String childNodeName \u003d childNodeStatus.getPath().getName();\n        Path childNodePath \u003d getNodePath(childNodeName);\n        byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n        if(childNodeName.startsWith(ApplicationId.appIdStrPrefix)){\n          // application\n          LOG.info(\"Loading application from node: \" + childNodeName);\n          ApplicationId appId \u003d ConverterUtils.toApplicationId(childNodeName);\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl(\n                                ApplicationStateDataProto.parseFrom(childData));\n          ApplicationState appState \u003d new ApplicationState(\n                               appStateData.getSubmitTime(),\n                               appStateData.getApplicationSubmissionContext());\n          // assert child node name is same as actual applicationId\n          assert appId.equals(appState.context.getApplicationId());\n          state.appState.put(appId, appState);\n        } else if(childNodeName.startsWith(\n                                ApplicationAttemptId.appAttemptIdStrPrefix)) {\n          // attempt\n          LOG.info(\"Loading application attempt from node: \" + childNodeName);\n          ApplicationAttemptId attemptId \u003d\n                          ConverterUtils.toApplicationAttemptId(childNodeName);\n          ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n              new ApplicationAttemptStateDataPBImpl(\n                  ApplicationAttemptStateDataProto.parseFrom(childData));\n          ApplicationAttemptState attemptState \u003d new ApplicationAttemptState(\n                          attemptId, attemptStateData.getMasterContainer());\n          // assert child node name is same as application attempt id\n          assert attemptId.equals(attemptState.getAttemptId());\n          attempts.add(attemptState);\n        } else {\n          LOG.info(\"Unknown child node with name: \" + childNodeName);\n        }\n      }\n\n      // go through all attempts and add them to their apps\n      for(ApplicationAttemptState attemptState : attempts) {\n        ApplicationId appId \u003d attemptState.getAttemptId().getApplicationId();\n        ApplicationState appState \u003d state.appState.get(appId);\n        if(appState !\u003d null) {\n          appState.attempts.put(attemptState.getAttemptId(), attemptState);\n        } else {\n          // the application node may have been removed when the application\n          // completed but the RM might have stopped before it could remove the\n          // application attempt nodes\n          LOG.info(\"Application node not found for attempt: \"\n                    + attemptState.getAttemptId());\n          deleteFile(getNodePath(attemptState.getAttemptId().toString()));\n        }\n      }\n\n      return state;\n    } catch (Exception e) {\n      LOG.error(\"Failed to load state.\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java"
    }
  }
}