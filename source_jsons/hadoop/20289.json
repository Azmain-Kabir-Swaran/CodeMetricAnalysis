{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Task.java",
  "functionName": "updateResourceCounters",
  "functionId": "updateResourceCounters",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
  "functionStartLine": 1030,
  "functionEndLine": 1077,
  "numCommitsSeen": 47,
  "timeTaken": 9912,
  "changeHistory": [
    "c65f884fc7e08118524f8c88737119d8196b4c1b",
    "c358368f511963ad8e35f030b9babee541e1bd01",
    "1a49c854386d3ba4aef6f29f46e2bd5e71e86dc1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "c65f884fc7e08118524f8c88737119d8196b4c1b": "Ybodychange",
    "c358368f511963ad8e35f030b9babee541e1bd01": "Ybodychange",
    "1a49c854386d3ba4aef6f29f46e2bd5e71e86dc1": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymovefromfile",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c65f884fc7e08118524f8c88737119d8196b4c1b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6829. Add peak memory usage counter for each task. (Miklos Szegedi via kasha)\n",
      "commitDate": "26/01/17 11:08 AM",
      "commitName": "c65f884fc7e08118524f8c88737119d8196b4c1b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "21/09/16 6:30 PM",
      "commitNameOld": "537095d13cd38212ed162e0a360bdd9a8bd83498",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 126.73,
      "commitsBetweenForRepo": 851,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,48 @@\n   void updateResourceCounters() {\n     // Update generic resource counters\n     updateHeapUsageCounter();\n \n     // Updating resources specified in ResourceCalculatorProcessTree\n     if (pTree \u003d\u003d null) {\n       return;\n     }\n     pTree.updateProcessTree();\n     long cpuTime \u003d pTree.getCumulativeCpuTime();\n     long pMem \u003d pTree.getRssMemorySize();\n     long vMem \u003d pTree.getVirtualMemorySize();\n     // Remove the CPU time consumed previously by JVM reuse\n     if (cpuTime !\u003d ResourceCalculatorProcessTree.UNAVAILABLE \u0026\u0026\n         initCpuCumulativeTime !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n       cpuTime -\u003d initCpuCumulativeTime;\n     }\n     \n     if (cpuTime !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n       counters.findCounter(TaskCounter.CPU_MILLISECONDS).setValue(cpuTime);\n     }\n     \n     if (pMem !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n       counters.findCounter(TaskCounter.PHYSICAL_MEMORY_BYTES).setValue(pMem);\n     }\n \n     if (vMem !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n       counters.findCounter(TaskCounter.VIRTUAL_MEMORY_BYTES).setValue(vMem);\n     }\n+\n+    if (pMem !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n+      TaskCounter counter \u003d isMapTask() ?\n+          TaskCounter.MAP_PHYSICAL_MEMORY_BYTES_MAX :\n+          TaskCounter.REDUCE_PHYSICAL_MEMORY_BYTES_MAX;\n+      Counters.Counter pMemCounter \u003d\n+          counters.findCounter(counter);\n+      pMemCounter.setValue(Math.max(pMemCounter.getValue(), pMem));\n+    }\n+\n+    if (vMem !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n+      TaskCounter counter \u003d isMapTask() ?\n+          TaskCounter.MAP_VIRTUAL_MEMORY_BYTES_MAX :\n+          TaskCounter.REDUCE_VIRTUAL_MEMORY_BYTES_MAX;\n+      Counters.Counter vMemCounter \u003d\n+          counters.findCounter(counter);\n+      vMemCounter.setValue(Math.max(vMemCounter.getValue(), vMem));\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void updateResourceCounters() {\n    // Update generic resource counters\n    updateHeapUsageCounter();\n\n    // Updating resources specified in ResourceCalculatorProcessTree\n    if (pTree \u003d\u003d null) {\n      return;\n    }\n    pTree.updateProcessTree();\n    long cpuTime \u003d pTree.getCumulativeCpuTime();\n    long pMem \u003d pTree.getRssMemorySize();\n    long vMem \u003d pTree.getVirtualMemorySize();\n    // Remove the CPU time consumed previously by JVM reuse\n    if (cpuTime !\u003d ResourceCalculatorProcessTree.UNAVAILABLE \u0026\u0026\n        initCpuCumulativeTime !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      cpuTime -\u003d initCpuCumulativeTime;\n    }\n    \n    if (cpuTime !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      counters.findCounter(TaskCounter.CPU_MILLISECONDS).setValue(cpuTime);\n    }\n    \n    if (pMem !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      counters.findCounter(TaskCounter.PHYSICAL_MEMORY_BYTES).setValue(pMem);\n    }\n\n    if (vMem !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      counters.findCounter(TaskCounter.VIRTUAL_MEMORY_BYTES).setValue(vMem);\n    }\n\n    if (pMem !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      TaskCounter counter \u003d isMapTask() ?\n          TaskCounter.MAP_PHYSICAL_MEMORY_BYTES_MAX :\n          TaskCounter.REDUCE_PHYSICAL_MEMORY_BYTES_MAX;\n      Counters.Counter pMemCounter \u003d\n          counters.findCounter(counter);\n      pMemCounter.setValue(Math.max(pMemCounter.getValue(), pMem));\n    }\n\n    if (vMem !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      TaskCounter counter \u003d isMapTask() ?\n          TaskCounter.MAP_VIRTUAL_MEMORY_BYTES_MAX :\n          TaskCounter.REDUCE_VIRTUAL_MEMORY_BYTES_MAX;\n      Counters.Counter vMemCounter \u003d\n          counters.findCounter(counter);\n      vMemCounter.setValue(Math.max(vMemCounter.getValue(), vMem));\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
      "extendedDetails": {}
    },
    "c358368f511963ad8e35f030b9babee541e1bd01": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3304. Cleaning up ResourceCalculatorProcessTree APIs for public use and removing inconsistencies in the default values. Contributed by Junping Du and Karthik Kambatla.\n",
      "commitDate": "30/03/15 10:09 AM",
      "commitName": "c358368f511963ad8e35f030b9babee541e1bd01",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "23/03/15 10:21 AM",
      "commitNameOld": "7e6f384dd742de21f29e96ee76df5316529c9019",
      "commitAuthorOld": "Devaraj K",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,30 @@\n   void updateResourceCounters() {\n     // Update generic resource counters\n     updateHeapUsageCounter();\n \n     // Updating resources specified in ResourceCalculatorProcessTree\n     if (pTree \u003d\u003d null) {\n       return;\n     }\n     pTree.updateProcessTree();\n     long cpuTime \u003d pTree.getCumulativeCpuTime();\n-    long pMem \u003d pTree.getCumulativeRssmem();\n-    long vMem \u003d pTree.getCumulativeVmem();\n+    long pMem \u003d pTree.getRssMemorySize();\n+    long vMem \u003d pTree.getVirtualMemorySize();\n     // Remove the CPU time consumed previously by JVM reuse\n-    cpuTime -\u003d initCpuCumulativeTime;\n-    counters.findCounter(TaskCounter.CPU_MILLISECONDS).setValue(cpuTime);\n-    counters.findCounter(TaskCounter.PHYSICAL_MEMORY_BYTES).setValue(pMem);\n-    counters.findCounter(TaskCounter.VIRTUAL_MEMORY_BYTES).setValue(vMem);\n+    if (cpuTime !\u003d ResourceCalculatorProcessTree.UNAVAILABLE \u0026\u0026\n+        initCpuCumulativeTime !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n+      cpuTime -\u003d initCpuCumulativeTime;\n+    }\n+    \n+    if (cpuTime !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n+      counters.findCounter(TaskCounter.CPU_MILLISECONDS).setValue(cpuTime);\n+    }\n+    \n+    if (pMem !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n+      counters.findCounter(TaskCounter.PHYSICAL_MEMORY_BYTES).setValue(pMem);\n+    }\n+\n+    if (vMem !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n+      counters.findCounter(TaskCounter.VIRTUAL_MEMORY_BYTES).setValue(vMem);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void updateResourceCounters() {\n    // Update generic resource counters\n    updateHeapUsageCounter();\n\n    // Updating resources specified in ResourceCalculatorProcessTree\n    if (pTree \u003d\u003d null) {\n      return;\n    }\n    pTree.updateProcessTree();\n    long cpuTime \u003d pTree.getCumulativeCpuTime();\n    long pMem \u003d pTree.getRssMemorySize();\n    long vMem \u003d pTree.getVirtualMemorySize();\n    // Remove the CPU time consumed previously by JVM reuse\n    if (cpuTime !\u003d ResourceCalculatorProcessTree.UNAVAILABLE \u0026\u0026\n        initCpuCumulativeTime !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      cpuTime -\u003d initCpuCumulativeTime;\n    }\n    \n    if (cpuTime !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      counters.findCounter(TaskCounter.CPU_MILLISECONDS).setValue(cpuTime);\n    }\n    \n    if (pMem !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      counters.findCounter(TaskCounter.PHYSICAL_MEMORY_BYTES).setValue(pMem);\n    }\n\n    if (vMem !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      counters.findCounter(TaskCounter.VIRTUAL_MEMORY_BYTES).setValue(vMem);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
      "extendedDetails": {}
    },
    "1a49c854386d3ba4aef6f29f46e2bd5e71e86dc1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-223. Update process tree instead of getting new process trees. (Radim Kolar via llu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1424244 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/12/12 4:20 PM",
      "commitName": "1a49c854386d3ba4aef6f29f46e2bd5e71e86dc1",
      "commitAuthor": "Luke Lu",
      "commitDateOld": "15/12/12 12:18 PM",
      "commitNameOld": "803e5155d1c8c842bed8e2d8624cb17ab11ec53b",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 4.17,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   void updateResourceCounters() {\n     // Update generic resource counters\n     updateHeapUsageCounter();\n \n-    // Updating resources specified in ResourceCalculatorPlugin\n-    if (resourceCalculator \u003d\u003d null) {\n+    // Updating resources specified in ResourceCalculatorProcessTree\n+    if (pTree \u003d\u003d null) {\n       return;\n     }\n-    ProcResourceValues res \u003d resourceCalculator.getProcResourceValues();\n-    long cpuTime \u003d res.getCumulativeCpuTime();\n-    long pMem \u003d res.getPhysicalMemorySize();\n-    long vMem \u003d res.getVirtualMemorySize();\n+    pTree.updateProcessTree();\n+    long cpuTime \u003d pTree.getCumulativeCpuTime();\n+    long pMem \u003d pTree.getCumulativeRssmem();\n+    long vMem \u003d pTree.getCumulativeVmem();\n     // Remove the CPU time consumed previously by JVM reuse\n     cpuTime -\u003d initCpuCumulativeTime;\n     counters.findCounter(TaskCounter.CPU_MILLISECONDS).setValue(cpuTime);\n     counters.findCounter(TaskCounter.PHYSICAL_MEMORY_BYTES).setValue(pMem);\n     counters.findCounter(TaskCounter.VIRTUAL_MEMORY_BYTES).setValue(vMem);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void updateResourceCounters() {\n    // Update generic resource counters\n    updateHeapUsageCounter();\n\n    // Updating resources specified in ResourceCalculatorProcessTree\n    if (pTree \u003d\u003d null) {\n      return;\n    }\n    pTree.updateProcessTree();\n    long cpuTime \u003d pTree.getCumulativeCpuTime();\n    long pMem \u003d pTree.getCumulativeRssmem();\n    long vMem \u003d pTree.getCumulativeVmem();\n    // Remove the CPU time consumed previously by JVM reuse\n    cpuTime -\u003d initCpuCumulativeTime;\n    counters.findCounter(TaskCounter.CPU_MILLISECONDS).setValue(cpuTime);\n    counters.findCounter(TaskCounter.PHYSICAL_MEMORY_BYTES).setValue(pMem);\n    counters.findCounter(TaskCounter.VIRTUAL_MEMORY_BYTES).setValue(vMem);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void updateResourceCounters() {\n    // Update generic resource counters\n    updateHeapUsageCounter();\n\n    // Updating resources specified in ResourceCalculatorPlugin\n    if (resourceCalculator \u003d\u003d null) {\n      return;\n    }\n    ProcResourceValues res \u003d resourceCalculator.getProcResourceValues();\n    long cpuTime \u003d res.getCumulativeCpuTime();\n    long pMem \u003d res.getPhysicalMemorySize();\n    long vMem \u003d res.getVirtualMemorySize();\n    // Remove the CPU time consumed previously by JVM reuse\n    cpuTime -\u003d initCpuCumulativeTime;\n    counters.findCounter(TaskCounter.CPU_MILLISECONDS).setValue(cpuTime);\n    counters.findCounter(TaskCounter.PHYSICAL_MEMORY_BYTES).setValue(pMem);\n    counters.findCounter(TaskCounter.VIRTUAL_MEMORY_BYTES).setValue(vMem);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void updateResourceCounters() {\n    // Update generic resource counters\n    updateHeapUsageCounter();\n\n    // Updating resources specified in ResourceCalculatorPlugin\n    if (resourceCalculator \u003d\u003d null) {\n      return;\n    }\n    ProcResourceValues res \u003d resourceCalculator.getProcResourceValues();\n    long cpuTime \u003d res.getCumulativeCpuTime();\n    long pMem \u003d res.getPhysicalMemorySize();\n    long vMem \u003d res.getVirtualMemorySize();\n    // Remove the CPU time consumed previously by JVM reuse\n    cpuTime -\u003d initCpuCumulativeTime;\n    counters.findCounter(TaskCounter.CPU_MILLISECONDS).setValue(cpuTime);\n    counters.findCounter(TaskCounter.PHYSICAL_MEMORY_BYTES).setValue(pMem);\n    counters.findCounter(TaskCounter.VIRTUAL_MEMORY_BYTES).setValue(vMem);\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/Task.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
        "oldMethodName": "updateResourceCounters",
        "newMethodName": "updateResourceCounters"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,18 @@\n+  void updateResourceCounters() {\n+    // Update generic resource counters\n+    updateHeapUsageCounter();\n+\n+    // Updating resources specified in ResourceCalculatorPlugin\n+    if (resourceCalculator \u003d\u003d null) {\n+      return;\n+    }\n+    ProcResourceValues res \u003d resourceCalculator.getProcResourceValues();\n+    long cpuTime \u003d res.getCumulativeCpuTime();\n+    long pMem \u003d res.getPhysicalMemorySize();\n+    long vMem \u003d res.getVirtualMemorySize();\n+    // Remove the CPU time consumed previously by JVM reuse\n+    cpuTime -\u003d initCpuCumulativeTime;\n+    counters.findCounter(TaskCounter.CPU_MILLISECONDS).setValue(cpuTime);\n+    counters.findCounter(TaskCounter.PHYSICAL_MEMORY_BYTES).setValue(pMem);\n+    counters.findCounter(TaskCounter.VIRTUAL_MEMORY_BYTES).setValue(vMem);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void updateResourceCounters() {\n    // Update generic resource counters\n    updateHeapUsageCounter();\n\n    // Updating resources specified in ResourceCalculatorPlugin\n    if (resourceCalculator \u003d\u003d null) {\n      return;\n    }\n    ProcResourceValues res \u003d resourceCalculator.getProcResourceValues();\n    long cpuTime \u003d res.getCumulativeCpuTime();\n    long pMem \u003d res.getPhysicalMemorySize();\n    long vMem \u003d res.getVirtualMemorySize();\n    // Remove the CPU time consumed previously by JVM reuse\n    cpuTime -\u003d initCpuCumulativeTime;\n    counters.findCounter(TaskCounter.CPU_MILLISECONDS).setValue(cpuTime);\n    counters.findCounter(TaskCounter.PHYSICAL_MEMORY_BYTES).setValue(pMem);\n    counters.findCounter(TaskCounter.VIRTUAL_MEMORY_BYTES).setValue(vMem);\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/Task.java"
    }
  }
}