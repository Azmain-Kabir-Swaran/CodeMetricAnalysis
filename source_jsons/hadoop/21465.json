{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JSONHistoryViewerPrinter.java",
  "functionName": "printTasks",
  "functionId": "printTasks",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JSONHistoryViewerPrinter.java",
  "functionStartLine": 174,
  "functionEndLine": 222,
  "numCommitsSeen": 10,
  "timeTaken": 10032,
  "changeHistory": [
    "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Yparameterchange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymovefromfile",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8": {
      "type": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Yparameterchange)",
      "commitMessage": "MAPREDUCE-6627. Add machine-readable output to mapred job -history command (rkanter)\n",
      "commitDate": "18/02/16 5:58 PM",
      "commitName": "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-6627. Add machine-readable output to mapred job -history command (rkanter)\n",
          "commitDate": "18/02/16 5:58 PM",
          "commitName": "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "18/02/16 2:06 PM",
          "commitNameOld": "8ab7658025616d154decd97578de3327ec6f9109",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,49 @@\n-  private void printTasks(TaskType taskType, String status) {\n+  private void printTasks() throws JSONException {\n     Map\u003cTaskID, JobHistoryParser.TaskInfo\u003e tasks \u003d job.getAllTasks();\n-    StringBuffer header \u003d new StringBuffer();\n-    header.append(\"\\n\").append(status).append(\" \");\n-    header.append(taskType).append(\" task list for \").append(jobId);\n-    header.append(\"\\nTaskId\\t\\tStartTime\\tFinishTime\\tError\");\n-    if (TaskType.MAP.equals(taskType)) {\n-      header.append(\"\\tInputSplits\");\n-    }\n-    header.append(\"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n-    StringBuffer taskList \u003d new StringBuffer();\n+    JSONArray jTasks \u003d new JSONArray();\n     for (JobHistoryParser.TaskInfo task : tasks.values()) {\n-      if (taskType.equals(task.getTaskType()) \u0026\u0026\n-         (status.equals(task.getTaskStatus())\n-          || status.equalsIgnoreCase(\"ALL\"))) {\n-        taskList.setLength(0);\n-        taskList.append(task.getTaskId());\n-        taskList.append(\"\\t\").append(StringUtils.getFormattedTimeWithDiff(\n-                   dateFormat, task.getStartTime(), 0));\n-        taskList.append(\"\\t\").append(StringUtils.getFormattedTimeWithDiff(\n-                   dateFormat, task.getFinishTime(),\n-                   task.getStartTime())); \n-        taskList.append(\"\\t\").append(task.getError());\n-        if (TaskType.MAP.equals(taskType)) {\n-          taskList.append(\"\\t\").append(task.getSplitLocations());\n+      if (!task.getTaskType().equals(TaskType.TASK_CLEANUP) \u0026\u0026\n+          ((printAll \u0026\u0026 task.getTaskStatus().equals(\n+              TaskStatus.State.SUCCEEDED.toString()))\n+          || task.getTaskStatus().equals(TaskStatus.State.KILLED.toString())\n+          || task.getTaskStatus().equals(TaskStatus.State.FAILED.toString()))) {\n+        JSONObject jTask \u003d new JSONObject();\n+        jTask.put(\"taskId\", task.getTaskId().toString());\n+        jTask.put(\"type\", task.getTaskType().toString());\n+        jTask.put(\"status\", task.getTaskStatus());\n+        jTask.put(\"startTime\", task.getStartTime());\n+        jTask.put(\"finishTime\", task.getFinishTime());\n+        if (!task.getError().isEmpty()) {\n+          jTask.put(\"error\", task.getError());\n         }\n-        if (taskList !\u003d null) {\n-          System.out.println(header.toString());\n-          System.out.println(taskList.toString());\n+        if (task.getTaskType().equals(TaskType.MAP)) {\n+          jTask.put(\"inputSplits\", task.getSplitLocations());\n         }\n+        if (printAll) {\n+          printTaskCounters(jTask, task.getCounters());\n+          JSONObject jAtt \u003d new JSONObject();\n+          for (JobHistoryParser.TaskAttemptInfo attempt :\n+              task.getAllTaskAttempts().values()) {\n+            jAtt.put(\"attemptId\", attempt.getAttemptId());\n+            jAtt.put(\"startTime\", attempt.getStartTime());\n+            if (task.getTaskType().equals(TaskType.REDUCE)) {\n+              jAtt.put(\"shuffleFinished\", attempt.getShuffleFinishTime());\n+              jAtt.put(\"sortFinished\", attempt.getSortFinishTime());\n+            }\n+            jAtt.put(\"finishTime\", attempt.getFinishTime());\n+            jAtt.put(\"hostName\", attempt.getHostname());\n+            if (!attempt.getError().isEmpty()) {\n+              jAtt.put(\"error\", task.getError());\n+            }\n+            String taskLogsUrl \u003d HistoryViewer.getTaskLogsUrl(scheme, attempt);\n+            if (taskLogsUrl !\u003d null) {\n+              jAtt.put(\"taskLogs\", taskLogsUrl);\n+            }\n+          }\n+          jTask.put(\"attempts\", jAtt);\n+        }\n+        jTasks.put(jTask);\n       }\n+      json.put(\"tasks\", jTasks);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void printTasks() throws JSONException {\n    Map\u003cTaskID, JobHistoryParser.TaskInfo\u003e tasks \u003d job.getAllTasks();\n    JSONArray jTasks \u003d new JSONArray();\n    for (JobHistoryParser.TaskInfo task : tasks.values()) {\n      if (!task.getTaskType().equals(TaskType.TASK_CLEANUP) \u0026\u0026\n          ((printAll \u0026\u0026 task.getTaskStatus().equals(\n              TaskStatus.State.SUCCEEDED.toString()))\n          || task.getTaskStatus().equals(TaskStatus.State.KILLED.toString())\n          || task.getTaskStatus().equals(TaskStatus.State.FAILED.toString()))) {\n        JSONObject jTask \u003d new JSONObject();\n        jTask.put(\"taskId\", task.getTaskId().toString());\n        jTask.put(\"type\", task.getTaskType().toString());\n        jTask.put(\"status\", task.getTaskStatus());\n        jTask.put(\"startTime\", task.getStartTime());\n        jTask.put(\"finishTime\", task.getFinishTime());\n        if (!task.getError().isEmpty()) {\n          jTask.put(\"error\", task.getError());\n        }\n        if (task.getTaskType().equals(TaskType.MAP)) {\n          jTask.put(\"inputSplits\", task.getSplitLocations());\n        }\n        if (printAll) {\n          printTaskCounters(jTask, task.getCounters());\n          JSONObject jAtt \u003d new JSONObject();\n          for (JobHistoryParser.TaskAttemptInfo attempt :\n              task.getAllTaskAttempts().values()) {\n            jAtt.put(\"attemptId\", attempt.getAttemptId());\n            jAtt.put(\"startTime\", attempt.getStartTime());\n            if (task.getTaskType().equals(TaskType.REDUCE)) {\n              jAtt.put(\"shuffleFinished\", attempt.getShuffleFinishTime());\n              jAtt.put(\"sortFinished\", attempt.getSortFinishTime());\n            }\n            jAtt.put(\"finishTime\", attempt.getFinishTime());\n            jAtt.put(\"hostName\", attempt.getHostname());\n            if (!attempt.getError().isEmpty()) {\n              jAtt.put(\"error\", task.getError());\n            }\n            String taskLogsUrl \u003d HistoryViewer.getTaskLogsUrl(scheme, attempt);\n            if (taskLogsUrl !\u003d null) {\n              jAtt.put(\"taskLogs\", taskLogsUrl);\n            }\n          }\n          jTask.put(\"attempts\", jAtt);\n        }\n        jTasks.put(jTask);\n      }\n      json.put(\"tasks\", jTasks);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JSONHistoryViewerPrinter.java",
          "extendedDetails": {
            "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HistoryViewer.java",
            "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JSONHistoryViewerPrinter.java",
            "oldMethodName": "printTasks",
            "newMethodName": "printTasks"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "MAPREDUCE-6627. Add machine-readable output to mapred job -history command (rkanter)\n",
          "commitDate": "18/02/16 5:58 PM",
          "commitName": "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "18/02/16 2:06 PM",
          "commitNameOld": "8ab7658025616d154decd97578de3327ec6f9109",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,49 @@\n-  private void printTasks(TaskType taskType, String status) {\n+  private void printTasks() throws JSONException {\n     Map\u003cTaskID, JobHistoryParser.TaskInfo\u003e tasks \u003d job.getAllTasks();\n-    StringBuffer header \u003d new StringBuffer();\n-    header.append(\"\\n\").append(status).append(\" \");\n-    header.append(taskType).append(\" task list for \").append(jobId);\n-    header.append(\"\\nTaskId\\t\\tStartTime\\tFinishTime\\tError\");\n-    if (TaskType.MAP.equals(taskType)) {\n-      header.append(\"\\tInputSplits\");\n-    }\n-    header.append(\"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n-    StringBuffer taskList \u003d new StringBuffer();\n+    JSONArray jTasks \u003d new JSONArray();\n     for (JobHistoryParser.TaskInfo task : tasks.values()) {\n-      if (taskType.equals(task.getTaskType()) \u0026\u0026\n-         (status.equals(task.getTaskStatus())\n-          || status.equalsIgnoreCase(\"ALL\"))) {\n-        taskList.setLength(0);\n-        taskList.append(task.getTaskId());\n-        taskList.append(\"\\t\").append(StringUtils.getFormattedTimeWithDiff(\n-                   dateFormat, task.getStartTime(), 0));\n-        taskList.append(\"\\t\").append(StringUtils.getFormattedTimeWithDiff(\n-                   dateFormat, task.getFinishTime(),\n-                   task.getStartTime())); \n-        taskList.append(\"\\t\").append(task.getError());\n-        if (TaskType.MAP.equals(taskType)) {\n-          taskList.append(\"\\t\").append(task.getSplitLocations());\n+      if (!task.getTaskType().equals(TaskType.TASK_CLEANUP) \u0026\u0026\n+          ((printAll \u0026\u0026 task.getTaskStatus().equals(\n+              TaskStatus.State.SUCCEEDED.toString()))\n+          || task.getTaskStatus().equals(TaskStatus.State.KILLED.toString())\n+          || task.getTaskStatus().equals(TaskStatus.State.FAILED.toString()))) {\n+        JSONObject jTask \u003d new JSONObject();\n+        jTask.put(\"taskId\", task.getTaskId().toString());\n+        jTask.put(\"type\", task.getTaskType().toString());\n+        jTask.put(\"status\", task.getTaskStatus());\n+        jTask.put(\"startTime\", task.getStartTime());\n+        jTask.put(\"finishTime\", task.getFinishTime());\n+        if (!task.getError().isEmpty()) {\n+          jTask.put(\"error\", task.getError());\n         }\n-        if (taskList !\u003d null) {\n-          System.out.println(header.toString());\n-          System.out.println(taskList.toString());\n+        if (task.getTaskType().equals(TaskType.MAP)) {\n+          jTask.put(\"inputSplits\", task.getSplitLocations());\n         }\n+        if (printAll) {\n+          printTaskCounters(jTask, task.getCounters());\n+          JSONObject jAtt \u003d new JSONObject();\n+          for (JobHistoryParser.TaskAttemptInfo attempt :\n+              task.getAllTaskAttempts().values()) {\n+            jAtt.put(\"attemptId\", attempt.getAttemptId());\n+            jAtt.put(\"startTime\", attempt.getStartTime());\n+            if (task.getTaskType().equals(TaskType.REDUCE)) {\n+              jAtt.put(\"shuffleFinished\", attempt.getShuffleFinishTime());\n+              jAtt.put(\"sortFinished\", attempt.getSortFinishTime());\n+            }\n+            jAtt.put(\"finishTime\", attempt.getFinishTime());\n+            jAtt.put(\"hostName\", attempt.getHostname());\n+            if (!attempt.getError().isEmpty()) {\n+              jAtt.put(\"error\", task.getError());\n+            }\n+            String taskLogsUrl \u003d HistoryViewer.getTaskLogsUrl(scheme, attempt);\n+            if (taskLogsUrl !\u003d null) {\n+              jAtt.put(\"taskLogs\", taskLogsUrl);\n+            }\n+          }\n+          jTask.put(\"attempts\", jAtt);\n+        }\n+        jTasks.put(jTask);\n       }\n+      json.put(\"tasks\", jTasks);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void printTasks() throws JSONException {\n    Map\u003cTaskID, JobHistoryParser.TaskInfo\u003e tasks \u003d job.getAllTasks();\n    JSONArray jTasks \u003d new JSONArray();\n    for (JobHistoryParser.TaskInfo task : tasks.values()) {\n      if (!task.getTaskType().equals(TaskType.TASK_CLEANUP) \u0026\u0026\n          ((printAll \u0026\u0026 task.getTaskStatus().equals(\n              TaskStatus.State.SUCCEEDED.toString()))\n          || task.getTaskStatus().equals(TaskStatus.State.KILLED.toString())\n          || task.getTaskStatus().equals(TaskStatus.State.FAILED.toString()))) {\n        JSONObject jTask \u003d new JSONObject();\n        jTask.put(\"taskId\", task.getTaskId().toString());\n        jTask.put(\"type\", task.getTaskType().toString());\n        jTask.put(\"status\", task.getTaskStatus());\n        jTask.put(\"startTime\", task.getStartTime());\n        jTask.put(\"finishTime\", task.getFinishTime());\n        if (!task.getError().isEmpty()) {\n          jTask.put(\"error\", task.getError());\n        }\n        if (task.getTaskType().equals(TaskType.MAP)) {\n          jTask.put(\"inputSplits\", task.getSplitLocations());\n        }\n        if (printAll) {\n          printTaskCounters(jTask, task.getCounters());\n          JSONObject jAtt \u003d new JSONObject();\n          for (JobHistoryParser.TaskAttemptInfo attempt :\n              task.getAllTaskAttempts().values()) {\n            jAtt.put(\"attemptId\", attempt.getAttemptId());\n            jAtt.put(\"startTime\", attempt.getStartTime());\n            if (task.getTaskType().equals(TaskType.REDUCE)) {\n              jAtt.put(\"shuffleFinished\", attempt.getShuffleFinishTime());\n              jAtt.put(\"sortFinished\", attempt.getSortFinishTime());\n            }\n            jAtt.put(\"finishTime\", attempt.getFinishTime());\n            jAtt.put(\"hostName\", attempt.getHostname());\n            if (!attempt.getError().isEmpty()) {\n              jAtt.put(\"error\", task.getError());\n            }\n            String taskLogsUrl \u003d HistoryViewer.getTaskLogsUrl(scheme, attempt);\n            if (taskLogsUrl !\u003d null) {\n              jAtt.put(\"taskLogs\", taskLogsUrl);\n            }\n          }\n          jTask.put(\"attempts\", jAtt);\n        }\n        jTasks.put(jTask);\n      }\n      json.put(\"tasks\", jTasks);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JSONHistoryViewerPrinter.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[JSONException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-6627. Add machine-readable output to mapred job -history command (rkanter)\n",
          "commitDate": "18/02/16 5:58 PM",
          "commitName": "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "18/02/16 2:06 PM",
          "commitNameOld": "8ab7658025616d154decd97578de3327ec6f9109",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,49 @@\n-  private void printTasks(TaskType taskType, String status) {\n+  private void printTasks() throws JSONException {\n     Map\u003cTaskID, JobHistoryParser.TaskInfo\u003e tasks \u003d job.getAllTasks();\n-    StringBuffer header \u003d new StringBuffer();\n-    header.append(\"\\n\").append(status).append(\" \");\n-    header.append(taskType).append(\" task list for \").append(jobId);\n-    header.append(\"\\nTaskId\\t\\tStartTime\\tFinishTime\\tError\");\n-    if (TaskType.MAP.equals(taskType)) {\n-      header.append(\"\\tInputSplits\");\n-    }\n-    header.append(\"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n-    StringBuffer taskList \u003d new StringBuffer();\n+    JSONArray jTasks \u003d new JSONArray();\n     for (JobHistoryParser.TaskInfo task : tasks.values()) {\n-      if (taskType.equals(task.getTaskType()) \u0026\u0026\n-         (status.equals(task.getTaskStatus())\n-          || status.equalsIgnoreCase(\"ALL\"))) {\n-        taskList.setLength(0);\n-        taskList.append(task.getTaskId());\n-        taskList.append(\"\\t\").append(StringUtils.getFormattedTimeWithDiff(\n-                   dateFormat, task.getStartTime(), 0));\n-        taskList.append(\"\\t\").append(StringUtils.getFormattedTimeWithDiff(\n-                   dateFormat, task.getFinishTime(),\n-                   task.getStartTime())); \n-        taskList.append(\"\\t\").append(task.getError());\n-        if (TaskType.MAP.equals(taskType)) {\n-          taskList.append(\"\\t\").append(task.getSplitLocations());\n+      if (!task.getTaskType().equals(TaskType.TASK_CLEANUP) \u0026\u0026\n+          ((printAll \u0026\u0026 task.getTaskStatus().equals(\n+              TaskStatus.State.SUCCEEDED.toString()))\n+          || task.getTaskStatus().equals(TaskStatus.State.KILLED.toString())\n+          || task.getTaskStatus().equals(TaskStatus.State.FAILED.toString()))) {\n+        JSONObject jTask \u003d new JSONObject();\n+        jTask.put(\"taskId\", task.getTaskId().toString());\n+        jTask.put(\"type\", task.getTaskType().toString());\n+        jTask.put(\"status\", task.getTaskStatus());\n+        jTask.put(\"startTime\", task.getStartTime());\n+        jTask.put(\"finishTime\", task.getFinishTime());\n+        if (!task.getError().isEmpty()) {\n+          jTask.put(\"error\", task.getError());\n         }\n-        if (taskList !\u003d null) {\n-          System.out.println(header.toString());\n-          System.out.println(taskList.toString());\n+        if (task.getTaskType().equals(TaskType.MAP)) {\n+          jTask.put(\"inputSplits\", task.getSplitLocations());\n         }\n+        if (printAll) {\n+          printTaskCounters(jTask, task.getCounters());\n+          JSONObject jAtt \u003d new JSONObject();\n+          for (JobHistoryParser.TaskAttemptInfo attempt :\n+              task.getAllTaskAttempts().values()) {\n+            jAtt.put(\"attemptId\", attempt.getAttemptId());\n+            jAtt.put(\"startTime\", attempt.getStartTime());\n+            if (task.getTaskType().equals(TaskType.REDUCE)) {\n+              jAtt.put(\"shuffleFinished\", attempt.getShuffleFinishTime());\n+              jAtt.put(\"sortFinished\", attempt.getSortFinishTime());\n+            }\n+            jAtt.put(\"finishTime\", attempt.getFinishTime());\n+            jAtt.put(\"hostName\", attempt.getHostname());\n+            if (!attempt.getError().isEmpty()) {\n+              jAtt.put(\"error\", task.getError());\n+            }\n+            String taskLogsUrl \u003d HistoryViewer.getTaskLogsUrl(scheme, attempt);\n+            if (taskLogsUrl !\u003d null) {\n+              jAtt.put(\"taskLogs\", taskLogsUrl);\n+            }\n+          }\n+          jTask.put(\"attempts\", jAtt);\n+        }\n+        jTasks.put(jTask);\n       }\n+      json.put(\"tasks\", jTasks);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void printTasks() throws JSONException {\n    Map\u003cTaskID, JobHistoryParser.TaskInfo\u003e tasks \u003d job.getAllTasks();\n    JSONArray jTasks \u003d new JSONArray();\n    for (JobHistoryParser.TaskInfo task : tasks.values()) {\n      if (!task.getTaskType().equals(TaskType.TASK_CLEANUP) \u0026\u0026\n          ((printAll \u0026\u0026 task.getTaskStatus().equals(\n              TaskStatus.State.SUCCEEDED.toString()))\n          || task.getTaskStatus().equals(TaskStatus.State.KILLED.toString())\n          || task.getTaskStatus().equals(TaskStatus.State.FAILED.toString()))) {\n        JSONObject jTask \u003d new JSONObject();\n        jTask.put(\"taskId\", task.getTaskId().toString());\n        jTask.put(\"type\", task.getTaskType().toString());\n        jTask.put(\"status\", task.getTaskStatus());\n        jTask.put(\"startTime\", task.getStartTime());\n        jTask.put(\"finishTime\", task.getFinishTime());\n        if (!task.getError().isEmpty()) {\n          jTask.put(\"error\", task.getError());\n        }\n        if (task.getTaskType().equals(TaskType.MAP)) {\n          jTask.put(\"inputSplits\", task.getSplitLocations());\n        }\n        if (printAll) {\n          printTaskCounters(jTask, task.getCounters());\n          JSONObject jAtt \u003d new JSONObject();\n          for (JobHistoryParser.TaskAttemptInfo attempt :\n              task.getAllTaskAttempts().values()) {\n            jAtt.put(\"attemptId\", attempt.getAttemptId());\n            jAtt.put(\"startTime\", attempt.getStartTime());\n            if (task.getTaskType().equals(TaskType.REDUCE)) {\n              jAtt.put(\"shuffleFinished\", attempt.getShuffleFinishTime());\n              jAtt.put(\"sortFinished\", attempt.getSortFinishTime());\n            }\n            jAtt.put(\"finishTime\", attempt.getFinishTime());\n            jAtt.put(\"hostName\", attempt.getHostname());\n            if (!attempt.getError().isEmpty()) {\n              jAtt.put(\"error\", task.getError());\n            }\n            String taskLogsUrl \u003d HistoryViewer.getTaskLogsUrl(scheme, attempt);\n            if (taskLogsUrl !\u003d null) {\n              jAtt.put(\"taskLogs\", taskLogsUrl);\n            }\n          }\n          jTask.put(\"attempts\", jAtt);\n        }\n        jTasks.put(jTask);\n      }\n      json.put(\"tasks\", jTasks);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JSONHistoryViewerPrinter.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-6627. Add machine-readable output to mapred job -history command (rkanter)\n",
          "commitDate": "18/02/16 5:58 PM",
          "commitName": "8eee59ce6b3044cb73bb41fed6b7ece959e7c2f8",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "18/02/16 2:06 PM",
          "commitNameOld": "8ab7658025616d154decd97578de3327ec6f9109",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,49 @@\n-  private void printTasks(TaskType taskType, String status) {\n+  private void printTasks() throws JSONException {\n     Map\u003cTaskID, JobHistoryParser.TaskInfo\u003e tasks \u003d job.getAllTasks();\n-    StringBuffer header \u003d new StringBuffer();\n-    header.append(\"\\n\").append(status).append(\" \");\n-    header.append(taskType).append(\" task list for \").append(jobId);\n-    header.append(\"\\nTaskId\\t\\tStartTime\\tFinishTime\\tError\");\n-    if (TaskType.MAP.equals(taskType)) {\n-      header.append(\"\\tInputSplits\");\n-    }\n-    header.append(\"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n-    StringBuffer taskList \u003d new StringBuffer();\n+    JSONArray jTasks \u003d new JSONArray();\n     for (JobHistoryParser.TaskInfo task : tasks.values()) {\n-      if (taskType.equals(task.getTaskType()) \u0026\u0026\n-         (status.equals(task.getTaskStatus())\n-          || status.equalsIgnoreCase(\"ALL\"))) {\n-        taskList.setLength(0);\n-        taskList.append(task.getTaskId());\n-        taskList.append(\"\\t\").append(StringUtils.getFormattedTimeWithDiff(\n-                   dateFormat, task.getStartTime(), 0));\n-        taskList.append(\"\\t\").append(StringUtils.getFormattedTimeWithDiff(\n-                   dateFormat, task.getFinishTime(),\n-                   task.getStartTime())); \n-        taskList.append(\"\\t\").append(task.getError());\n-        if (TaskType.MAP.equals(taskType)) {\n-          taskList.append(\"\\t\").append(task.getSplitLocations());\n+      if (!task.getTaskType().equals(TaskType.TASK_CLEANUP) \u0026\u0026\n+          ((printAll \u0026\u0026 task.getTaskStatus().equals(\n+              TaskStatus.State.SUCCEEDED.toString()))\n+          || task.getTaskStatus().equals(TaskStatus.State.KILLED.toString())\n+          || task.getTaskStatus().equals(TaskStatus.State.FAILED.toString()))) {\n+        JSONObject jTask \u003d new JSONObject();\n+        jTask.put(\"taskId\", task.getTaskId().toString());\n+        jTask.put(\"type\", task.getTaskType().toString());\n+        jTask.put(\"status\", task.getTaskStatus());\n+        jTask.put(\"startTime\", task.getStartTime());\n+        jTask.put(\"finishTime\", task.getFinishTime());\n+        if (!task.getError().isEmpty()) {\n+          jTask.put(\"error\", task.getError());\n         }\n-        if (taskList !\u003d null) {\n-          System.out.println(header.toString());\n-          System.out.println(taskList.toString());\n+        if (task.getTaskType().equals(TaskType.MAP)) {\n+          jTask.put(\"inputSplits\", task.getSplitLocations());\n         }\n+        if (printAll) {\n+          printTaskCounters(jTask, task.getCounters());\n+          JSONObject jAtt \u003d new JSONObject();\n+          for (JobHistoryParser.TaskAttemptInfo attempt :\n+              task.getAllTaskAttempts().values()) {\n+            jAtt.put(\"attemptId\", attempt.getAttemptId());\n+            jAtt.put(\"startTime\", attempt.getStartTime());\n+            if (task.getTaskType().equals(TaskType.REDUCE)) {\n+              jAtt.put(\"shuffleFinished\", attempt.getShuffleFinishTime());\n+              jAtt.put(\"sortFinished\", attempt.getSortFinishTime());\n+            }\n+            jAtt.put(\"finishTime\", attempt.getFinishTime());\n+            jAtt.put(\"hostName\", attempt.getHostname());\n+            if (!attempt.getError().isEmpty()) {\n+              jAtt.put(\"error\", task.getError());\n+            }\n+            String taskLogsUrl \u003d HistoryViewer.getTaskLogsUrl(scheme, attempt);\n+            if (taskLogsUrl !\u003d null) {\n+              jAtt.put(\"taskLogs\", taskLogsUrl);\n+            }\n+          }\n+          jTask.put(\"attempts\", jAtt);\n+        }\n+        jTasks.put(jTask);\n       }\n+      json.put(\"tasks\", jTasks);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void printTasks() throws JSONException {\n    Map\u003cTaskID, JobHistoryParser.TaskInfo\u003e tasks \u003d job.getAllTasks();\n    JSONArray jTasks \u003d new JSONArray();\n    for (JobHistoryParser.TaskInfo task : tasks.values()) {\n      if (!task.getTaskType().equals(TaskType.TASK_CLEANUP) \u0026\u0026\n          ((printAll \u0026\u0026 task.getTaskStatus().equals(\n              TaskStatus.State.SUCCEEDED.toString()))\n          || task.getTaskStatus().equals(TaskStatus.State.KILLED.toString())\n          || task.getTaskStatus().equals(TaskStatus.State.FAILED.toString()))) {\n        JSONObject jTask \u003d new JSONObject();\n        jTask.put(\"taskId\", task.getTaskId().toString());\n        jTask.put(\"type\", task.getTaskType().toString());\n        jTask.put(\"status\", task.getTaskStatus());\n        jTask.put(\"startTime\", task.getStartTime());\n        jTask.put(\"finishTime\", task.getFinishTime());\n        if (!task.getError().isEmpty()) {\n          jTask.put(\"error\", task.getError());\n        }\n        if (task.getTaskType().equals(TaskType.MAP)) {\n          jTask.put(\"inputSplits\", task.getSplitLocations());\n        }\n        if (printAll) {\n          printTaskCounters(jTask, task.getCounters());\n          JSONObject jAtt \u003d new JSONObject();\n          for (JobHistoryParser.TaskAttemptInfo attempt :\n              task.getAllTaskAttempts().values()) {\n            jAtt.put(\"attemptId\", attempt.getAttemptId());\n            jAtt.put(\"startTime\", attempt.getStartTime());\n            if (task.getTaskType().equals(TaskType.REDUCE)) {\n              jAtt.put(\"shuffleFinished\", attempt.getShuffleFinishTime());\n              jAtt.put(\"sortFinished\", attempt.getSortFinishTime());\n            }\n            jAtt.put(\"finishTime\", attempt.getFinishTime());\n            jAtt.put(\"hostName\", attempt.getHostname());\n            if (!attempt.getError().isEmpty()) {\n              jAtt.put(\"error\", task.getError());\n            }\n            String taskLogsUrl \u003d HistoryViewer.getTaskLogsUrl(scheme, attempt);\n            if (taskLogsUrl !\u003d null) {\n              jAtt.put(\"taskLogs\", taskLogsUrl);\n            }\n          }\n          jTask.put(\"attempts\", jAtt);\n        }\n        jTasks.put(jTask);\n      }\n      json.put(\"tasks\", jTasks);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JSONHistoryViewerPrinter.java",
          "extendedDetails": {
            "oldValue": "[taskType-TaskType, status-String]",
            "newValue": "[]"
          }
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void printTasks(TaskType taskType, String status) {\n    Map\u003cTaskID, JobHistoryParser.TaskInfo\u003e tasks \u003d job.getAllTasks();\n    StringBuffer header \u003d new StringBuffer();\n    header.append(\"\\n\").append(status).append(\" \");\n    header.append(taskType).append(\" task list for \").append(jobId);\n    header.append(\"\\nTaskId\\t\\tStartTime\\tFinishTime\\tError\");\n    if (TaskType.MAP.equals(taskType)) {\n      header.append(\"\\tInputSplits\");\n    }\n    header.append(\"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n    StringBuffer taskList \u003d new StringBuffer();\n    for (JobHistoryParser.TaskInfo task : tasks.values()) {\n      if (taskType.equals(task.getTaskType()) \u0026\u0026\n         (status.equals(task.getTaskStatus())\n          || status.equalsIgnoreCase(\"ALL\"))) {\n        taskList.setLength(0);\n        taskList.append(task.getTaskId());\n        taskList.append(\"\\t\").append(StringUtils.getFormattedTimeWithDiff(\n                   dateFormat, task.getStartTime(), 0));\n        taskList.append(\"\\t\").append(StringUtils.getFormattedTimeWithDiff(\n                   dateFormat, task.getFinishTime(),\n                   task.getStartTime())); \n        taskList.append(\"\\t\").append(task.getError());\n        if (TaskType.MAP.equals(taskType)) {\n          taskList.append(\"\\t\").append(task.getSplitLocations());\n        }\n        if (taskList !\u003d null) {\n          System.out.println(header.toString());\n          System.out.println(taskList.toString());\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HistoryViewer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HistoryViewer.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HistoryViewer.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void printTasks(TaskType taskType, String status) {\n    Map\u003cTaskID, JobHistoryParser.TaskInfo\u003e tasks \u003d job.getAllTasks();\n    StringBuffer header \u003d new StringBuffer();\n    header.append(\"\\n\").append(status).append(\" \");\n    header.append(taskType).append(\" task list for \").append(jobId);\n    header.append(\"\\nTaskId\\t\\tStartTime\\tFinishTime\\tError\");\n    if (TaskType.MAP.equals(taskType)) {\n      header.append(\"\\tInputSplits\");\n    }\n    header.append(\"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n    StringBuffer taskList \u003d new StringBuffer();\n    for (JobHistoryParser.TaskInfo task : tasks.values()) {\n      if (taskType.equals(task.getTaskType()) \u0026\u0026\n         (status.equals(task.getTaskStatus())\n          || status.equalsIgnoreCase(\"ALL\"))) {\n        taskList.setLength(0);\n        taskList.append(task.getTaskId());\n        taskList.append(\"\\t\").append(StringUtils.getFormattedTimeWithDiff(\n                   dateFormat, task.getStartTime(), 0));\n        taskList.append(\"\\t\").append(StringUtils.getFormattedTimeWithDiff(\n                   dateFormat, task.getFinishTime(),\n                   task.getStartTime())); \n        taskList.append(\"\\t\").append(task.getError());\n        if (TaskType.MAP.equals(taskType)) {\n          taskList.append(\"\\t\").append(task.getSplitLocations());\n        }\n        if (taskList !\u003d null) {\n          System.out.println(header.toString());\n          System.out.println(taskList.toString());\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HistoryViewer.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/jobhistory/HistoryViewer.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/jobhistory/HistoryViewer.java",
        "oldMethodName": "printTasks",
        "newMethodName": "printTasks"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,33 @@\n+  private void printTasks(TaskType taskType, String status) {\n+    Map\u003cTaskID, JobHistoryParser.TaskInfo\u003e tasks \u003d job.getAllTasks();\n+    StringBuffer header \u003d new StringBuffer();\n+    header.append(\"\\n\").append(status).append(\" \");\n+    header.append(taskType).append(\" task list for \").append(jobId);\n+    header.append(\"\\nTaskId\\t\\tStartTime\\tFinishTime\\tError\");\n+    if (TaskType.MAP.equals(taskType)) {\n+      header.append(\"\\tInputSplits\");\n+    }\n+    header.append(\"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n+    StringBuffer taskList \u003d new StringBuffer();\n+    for (JobHistoryParser.TaskInfo task : tasks.values()) {\n+      if (taskType.equals(task.getTaskType()) \u0026\u0026\n+         (status.equals(task.getTaskStatus())\n+          || status.equalsIgnoreCase(\"ALL\"))) {\n+        taskList.setLength(0);\n+        taskList.append(task.getTaskId());\n+        taskList.append(\"\\t\").append(StringUtils.getFormattedTimeWithDiff(\n+                   dateFormat, task.getStartTime(), 0));\n+        taskList.append(\"\\t\").append(StringUtils.getFormattedTimeWithDiff(\n+                   dateFormat, task.getFinishTime(),\n+                   task.getStartTime())); \n+        taskList.append(\"\\t\").append(task.getError());\n+        if (TaskType.MAP.equals(taskType)) {\n+          taskList.append(\"\\t\").append(task.getSplitLocations());\n+        }\n+        if (taskList !\u003d null) {\n+          System.out.println(header.toString());\n+          System.out.println(taskList.toString());\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void printTasks(TaskType taskType, String status) {\n    Map\u003cTaskID, JobHistoryParser.TaskInfo\u003e tasks \u003d job.getAllTasks();\n    StringBuffer header \u003d new StringBuffer();\n    header.append(\"\\n\").append(status).append(\" \");\n    header.append(taskType).append(\" task list for \").append(jobId);\n    header.append(\"\\nTaskId\\t\\tStartTime\\tFinishTime\\tError\");\n    if (TaskType.MAP.equals(taskType)) {\n      header.append(\"\\tInputSplits\");\n    }\n    header.append(\"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");\n    StringBuffer taskList \u003d new StringBuffer();\n    for (JobHistoryParser.TaskInfo task : tasks.values()) {\n      if (taskType.equals(task.getTaskType()) \u0026\u0026\n         (status.equals(task.getTaskStatus())\n          || status.equalsIgnoreCase(\"ALL\"))) {\n        taskList.setLength(0);\n        taskList.append(task.getTaskId());\n        taskList.append(\"\\t\").append(StringUtils.getFormattedTimeWithDiff(\n                   dateFormat, task.getStartTime(), 0));\n        taskList.append(\"\\t\").append(StringUtils.getFormattedTimeWithDiff(\n                   dateFormat, task.getFinishTime(),\n                   task.getStartTime())); \n        taskList.append(\"\\t\").append(task.getError());\n        if (TaskType.MAP.equals(taskType)) {\n          taskList.append(\"\\t\").append(task.getSplitLocations());\n        }\n        if (taskList !\u003d null) {\n          System.out.println(header.toString());\n          System.out.println(taskList.toString());\n        }\n      }\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/jobhistory/HistoryViewer.java"
    }
  }
}