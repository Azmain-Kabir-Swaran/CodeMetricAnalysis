{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeQueueLoadMonitor.java",
  "functionName": "selectRackLocalNode",
  "functionId": "selectRackLocalNode___rackName-String__blacklist-Set__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/distributed/NodeQueueLoadMonitor.java",
  "functionStartLine": 361,
  "functionEndLine": 374,
  "numCommitsSeen": 12,
  "timeTaken": 1984,
  "changeHistory": [
    "fb512f50877438acb01fe6b3ec96c12b4db61694"
  ],
  "changeHistoryShort": {
    "fb512f50877438acb01fe6b3ec96c12b4db61694": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fb512f50877438acb01fe6b3ec96c12b4db61694": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9697. Efficient allocation of Opportunistic containers. Contributed by Abhishek Modi.\n",
      "commitDate": "12/11/19 3:04 AM",
      "commitName": "fb512f50877438acb01fe6b3ec96c12b4db61694",
      "commitAuthor": "Abhishek Modi",
      "diff": "@@ -0,0 +1,14 @@\n+  public RMNode selectRackLocalNode(String rackName, Set\u003cString\u003e blacklist) {\n+    Set\u003cNodeId\u003e nodesOnRack \u003d nodeIdsByRack.get(rackName);\n+    if (nodesOnRack !\u003d null) {\n+      for (NodeId nodeId : nodesOnRack) {\n+        if (!blacklist.contains(nodeId.getHost())) {\n+          ClusterNode node \u003d clusterNodes.get(nodeId);\n+          if (node !\u003d null \u0026\u0026 comparator.compareAndIncrement(node, 1)) {\n+            return nodeByHostName.get(nodeId.getHost());\n+          }\n+        }\n+      }\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RMNode selectRackLocalNode(String rackName, Set\u003cString\u003e blacklist) {\n    Set\u003cNodeId\u003e nodesOnRack \u003d nodeIdsByRack.get(rackName);\n    if (nodesOnRack !\u003d null) {\n      for (NodeId nodeId : nodesOnRack) {\n        if (!blacklist.contains(nodeId.getHost())) {\n          ClusterNode node \u003d clusterNodes.get(nodeId);\n          if (node !\u003d null \u0026\u0026 comparator.compareAndIncrement(node, 1)) {\n            return nodeByHostName.get(nodeId.getHost());\n          }\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/distributed/NodeQueueLoadMonitor.java"
    }
  }
}