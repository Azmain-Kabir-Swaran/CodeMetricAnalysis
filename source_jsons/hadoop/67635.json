{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistCp.java",
  "functionName": "configureOutputFormat",
  "functionId": "configureOutputFormat___job-Job",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCp.java",
  "functionStartLine": 314,
  "functionEndLine": 353,
  "numCommitsSeen": 31,
  "timeTaken": 1540,
  "changeHistory": [
    "26172a94d6431e70d7fe15d66be9a7e195f79f60",
    "aaafa0b2ee64f6cfb7fdc717500e1c483b9df8cc",
    "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67"
  ],
  "changeHistoryShort": {
    "26172a94d6431e70d7fe15d66be9a7e195f79f60": "Ybodychange",
    "aaafa0b2ee64f6cfb7fdc717500e1c483b9df8cc": "Ybodychange",
    "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9": "Ybodychange",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": "Ybodychange",
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67": "Yintroduced"
  },
  "changeHistoryDetails": {
    "26172a94d6431e70d7fe15d66be9a7e195f79f60": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14267. Make DistCpOptions immutable. Contributed by Mingliang Liu\n",
      "commitDate": "31/03/17 8:04 PM",
      "commitName": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "30/03/17 5:38 PM",
      "commitNameOld": "bf3fb585aaf2b179836e139c041fc87920a3c886",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 1.1,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n   private void configureOutputFormat(Job job) throws IOException {\n     final Configuration configuration \u003d job.getConfiguration();\n-    Path targetPath \u003d inputOptions.getTargetPath();\n+    Path targetPath \u003d context.getTargetPath();\n     FileSystem targetFS \u003d targetPath.getFileSystem(configuration);\n     targetPath \u003d targetPath.makeQualified(targetFS.getUri(),\n                                           targetFS.getWorkingDirectory());\n-    if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.ACL)) {\n+    if (context.shouldPreserve(\n+        DistCpOptions.FileAttribute.ACL)) {\n       DistCpUtils.checkFileSystemAclSupport(targetFS);\n     }\n-    if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.XATTR)) {\n+    if (context.shouldPreserve(\n+        DistCpOptions.FileAttribute.XATTR)) {\n       DistCpUtils.checkFileSystemXAttrSupport(targetFS);\n     }\n-    if (inputOptions.shouldAtomicCommit()) {\n-      Path workDir \u003d inputOptions.getAtomicWorkPath();\n+    if (context.shouldAtomicCommit()) {\n+      Path workDir \u003d context.getAtomicWorkPath();\n       if (workDir \u003d\u003d null) {\n         workDir \u003d targetPath.getParent();\n       }\n       workDir \u003d new Path(workDir, WIP_PREFIX + targetPath.getName()\n                                 + rand.nextInt());\n       FileSystem workFS \u003d workDir.getFileSystem(configuration);\n       if (!FileUtil.compareFs(targetFS, workFS)) {\n         throw new IllegalArgumentException(\"Work path \" + workDir +\n             \" and target path \" + targetPath + \" are in different file system\");\n       }\n       CopyOutputFormat.setWorkingDirectory(job, workDir);\n     } else {\n       CopyOutputFormat.setWorkingDirectory(job, targetPath);\n     }\n     CopyOutputFormat.setCommitDirectory(job, targetPath);\n \n-    Path logPath \u003d inputOptions.getLogPath();\n+    Path logPath \u003d context.getLogPath();\n     if (logPath \u003d\u003d null) {\n       logPath \u003d new Path(metaFolder, \"_logs\");\n     } else {\n       LOG.info(\"DistCp job log path: \" + logPath);\n     }\n     CopyOutputFormat.setOutputPath(job, logPath);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void configureOutputFormat(Job job) throws IOException {\n    final Configuration configuration \u003d job.getConfiguration();\n    Path targetPath \u003d context.getTargetPath();\n    FileSystem targetFS \u003d targetPath.getFileSystem(configuration);\n    targetPath \u003d targetPath.makeQualified(targetFS.getUri(),\n                                          targetFS.getWorkingDirectory());\n    if (context.shouldPreserve(\n        DistCpOptions.FileAttribute.ACL)) {\n      DistCpUtils.checkFileSystemAclSupport(targetFS);\n    }\n    if (context.shouldPreserve(\n        DistCpOptions.FileAttribute.XATTR)) {\n      DistCpUtils.checkFileSystemXAttrSupport(targetFS);\n    }\n    if (context.shouldAtomicCommit()) {\n      Path workDir \u003d context.getAtomicWorkPath();\n      if (workDir \u003d\u003d null) {\n        workDir \u003d targetPath.getParent();\n      }\n      workDir \u003d new Path(workDir, WIP_PREFIX + targetPath.getName()\n                                + rand.nextInt());\n      FileSystem workFS \u003d workDir.getFileSystem(configuration);\n      if (!FileUtil.compareFs(targetFS, workFS)) {\n        throw new IllegalArgumentException(\"Work path \" + workDir +\n            \" and target path \" + targetPath + \" are in different file system\");\n      }\n      CopyOutputFormat.setWorkingDirectory(job, workDir);\n    } else {\n      CopyOutputFormat.setWorkingDirectory(job, targetPath);\n    }\n    CopyOutputFormat.setCommitDirectory(job, targetPath);\n\n    Path logPath \u003d context.getLogPath();\n    if (logPath \u003d\u003d null) {\n      logPath \u003d new Path(metaFolder, \"_logs\");\n    } else {\n      LOG.info(\"DistCp job log path: \" + logPath);\n    }\n    CopyOutputFormat.setOutputPath(job, logPath);\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCp.java",
      "extendedDetails": {}
    },
    "aaafa0b2ee64f6cfb7fdc717500e1c483b9df8cc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12159. Move DistCpUtils#compareFs() to org.apache.hadoop.fs.FileUtil and fix for HA namespaces (rchiang via rkanter)\n",
      "commitDate": "30/06/15 4:49 PM",
      "commitName": "aaafa0b2ee64f6cfb7fdc717500e1c483b9df8cc",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "27/03/15 7:15 AM",
      "commitNameOld": "e074952bd6bedf58d993bbea690bad08c9a0e6aa",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 95.4,
      "commitsBetweenForRepo": 832,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   private void configureOutputFormat(Job job) throws IOException {\n     final Configuration configuration \u003d job.getConfiguration();\n     Path targetPath \u003d inputOptions.getTargetPath();\n     FileSystem targetFS \u003d targetPath.getFileSystem(configuration);\n     targetPath \u003d targetPath.makeQualified(targetFS.getUri(),\n                                           targetFS.getWorkingDirectory());\n     if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.ACL)) {\n       DistCpUtils.checkFileSystemAclSupport(targetFS);\n     }\n     if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.XATTR)) {\n       DistCpUtils.checkFileSystemXAttrSupport(targetFS);\n     }\n     if (inputOptions.shouldAtomicCommit()) {\n       Path workDir \u003d inputOptions.getAtomicWorkPath();\n       if (workDir \u003d\u003d null) {\n         workDir \u003d targetPath.getParent();\n       }\n       workDir \u003d new Path(workDir, WIP_PREFIX + targetPath.getName()\n                                 + rand.nextInt());\n       FileSystem workFS \u003d workDir.getFileSystem(configuration);\n-      if (!DistCpUtils.compareFs(targetFS, workFS)) {\n+      if (!FileUtil.compareFs(targetFS, workFS)) {\n         throw new IllegalArgumentException(\"Work path \" + workDir +\n             \" and target path \" + targetPath + \" are in different file system\");\n       }\n       CopyOutputFormat.setWorkingDirectory(job, workDir);\n     } else {\n       CopyOutputFormat.setWorkingDirectory(job, targetPath);\n     }\n     CopyOutputFormat.setCommitDirectory(job, targetPath);\n \n     Path logPath \u003d inputOptions.getLogPath();\n     if (logPath \u003d\u003d null) {\n       logPath \u003d new Path(metaFolder, \"_logs\");\n     } else {\n       LOG.info(\"DistCp job log path: \" + logPath);\n     }\n     CopyOutputFormat.setOutputPath(job, logPath);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void configureOutputFormat(Job job) throws IOException {\n    final Configuration configuration \u003d job.getConfiguration();\n    Path targetPath \u003d inputOptions.getTargetPath();\n    FileSystem targetFS \u003d targetPath.getFileSystem(configuration);\n    targetPath \u003d targetPath.makeQualified(targetFS.getUri(),\n                                          targetFS.getWorkingDirectory());\n    if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.ACL)) {\n      DistCpUtils.checkFileSystemAclSupport(targetFS);\n    }\n    if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.XATTR)) {\n      DistCpUtils.checkFileSystemXAttrSupport(targetFS);\n    }\n    if (inputOptions.shouldAtomicCommit()) {\n      Path workDir \u003d inputOptions.getAtomicWorkPath();\n      if (workDir \u003d\u003d null) {\n        workDir \u003d targetPath.getParent();\n      }\n      workDir \u003d new Path(workDir, WIP_PREFIX + targetPath.getName()\n                                + rand.nextInt());\n      FileSystem workFS \u003d workDir.getFileSystem(configuration);\n      if (!FileUtil.compareFs(targetFS, workFS)) {\n        throw new IllegalArgumentException(\"Work path \" + workDir +\n            \" and target path \" + targetPath + \" are in different file system\");\n      }\n      CopyOutputFormat.setWorkingDirectory(job, workDir);\n    } else {\n      CopyOutputFormat.setWorkingDirectory(job, targetPath);\n    }\n    CopyOutputFormat.setCommitDirectory(job, targetPath);\n\n    Path logPath \u003d inputOptions.getLogPath();\n    if (logPath \u003d\u003d null) {\n      logPath \u003d new Path(metaFolder, \"_logs\");\n    } else {\n      LOG.info(\"DistCp job log path: \" + logPath);\n    }\n    CopyOutputFormat.setOutputPath(job, logPath);\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCp.java",
      "extendedDetails": {}
    },
    "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5898. distcp to support preserving HDFS extended attributes(XAttrs). Contributed by Yi Liu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1600900 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/14 7:45 AM",
      "commitName": "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "16/05/14 11:25 AM",
      "commitNameOld": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 20.85,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,38 @@\n   private void configureOutputFormat(Job job) throws IOException {\n     final Configuration configuration \u003d job.getConfiguration();\n     Path targetPath \u003d inputOptions.getTargetPath();\n     FileSystem targetFS \u003d targetPath.getFileSystem(configuration);\n     targetPath \u003d targetPath.makeQualified(targetFS.getUri(),\n                                           targetFS.getWorkingDirectory());\n     if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.ACL)) {\n       DistCpUtils.checkFileSystemAclSupport(targetFS);\n     }\n+    if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.XATTR)) {\n+      DistCpUtils.checkFileSystemXAttrSupport(targetFS);\n+    }\n     if (inputOptions.shouldAtomicCommit()) {\n       Path workDir \u003d inputOptions.getAtomicWorkPath();\n       if (workDir \u003d\u003d null) {\n         workDir \u003d targetPath.getParent();\n       }\n       workDir \u003d new Path(workDir, WIP_PREFIX + targetPath.getName()\n                                 + rand.nextInt());\n       FileSystem workFS \u003d workDir.getFileSystem(configuration);\n       if (!DistCpUtils.compareFs(targetFS, workFS)) {\n         throw new IllegalArgumentException(\"Work path \" + workDir +\n             \" and target path \" + targetPath + \" are in different file system\");\n       }\n       CopyOutputFormat.setWorkingDirectory(job, workDir);\n     } else {\n       CopyOutputFormat.setWorkingDirectory(job, targetPath);\n     }\n     CopyOutputFormat.setCommitDirectory(job, targetPath);\n \n     Path logPath \u003d inputOptions.getLogPath();\n     if (logPath \u003d\u003d null) {\n       logPath \u003d new Path(metaFolder, \"_logs\");\n     } else {\n       LOG.info(\"DistCp job log path: \" + logPath);\n     }\n     CopyOutputFormat.setOutputPath(job, logPath);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void configureOutputFormat(Job job) throws IOException {\n    final Configuration configuration \u003d job.getConfiguration();\n    Path targetPath \u003d inputOptions.getTargetPath();\n    FileSystem targetFS \u003d targetPath.getFileSystem(configuration);\n    targetPath \u003d targetPath.makeQualified(targetFS.getUri(),\n                                          targetFS.getWorkingDirectory());\n    if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.ACL)) {\n      DistCpUtils.checkFileSystemAclSupport(targetFS);\n    }\n    if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.XATTR)) {\n      DistCpUtils.checkFileSystemXAttrSupport(targetFS);\n    }\n    if (inputOptions.shouldAtomicCommit()) {\n      Path workDir \u003d inputOptions.getAtomicWorkPath();\n      if (workDir \u003d\u003d null) {\n        workDir \u003d targetPath.getParent();\n      }\n      workDir \u003d new Path(workDir, WIP_PREFIX + targetPath.getName()\n                                + rand.nextInt());\n      FileSystem workFS \u003d workDir.getFileSystem(configuration);\n      if (!DistCpUtils.compareFs(targetFS, workFS)) {\n        throw new IllegalArgumentException(\"Work path \" + workDir +\n            \" and target path \" + targetPath + \" are in different file system\");\n      }\n      CopyOutputFormat.setWorkingDirectory(job, workDir);\n    } else {\n      CopyOutputFormat.setWorkingDirectory(job, targetPath);\n    }\n    CopyOutputFormat.setCommitDirectory(job, targetPath);\n\n    Path logPath \u003d inputOptions.getLogPath();\n    if (logPath \u003d\u003d null) {\n      logPath \u003d new Path(metaFolder, \"_logs\");\n    } else {\n      LOG.info(\"DistCp job log path: \" + logPath);\n    }\n    CopyOutputFormat.setOutputPath(job, logPath);\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCp.java",
      "extendedDetails": {}
    },
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5809. Enhance distcp to support preserving HDFS ACLs. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/14 11:25 AM",
      "commitName": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "02/04/14 5:32 PM",
      "commitNameOld": "640a097533e0883bf49504673228d5a327089b44",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 43.75,
      "commitsBetweenForRepo": 263,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,35 @@\n   private void configureOutputFormat(Job job) throws IOException {\n     final Configuration configuration \u003d job.getConfiguration();\n     Path targetPath \u003d inputOptions.getTargetPath();\n     FileSystem targetFS \u003d targetPath.getFileSystem(configuration);\n     targetPath \u003d targetPath.makeQualified(targetFS.getUri(),\n                                           targetFS.getWorkingDirectory());\n-\n+    if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.ACL)) {\n+      DistCpUtils.checkFileSystemAclSupport(targetFS);\n+    }\n     if (inputOptions.shouldAtomicCommit()) {\n       Path workDir \u003d inputOptions.getAtomicWorkPath();\n       if (workDir \u003d\u003d null) {\n         workDir \u003d targetPath.getParent();\n       }\n       workDir \u003d new Path(workDir, WIP_PREFIX + targetPath.getName()\n                                 + rand.nextInt());\n       FileSystem workFS \u003d workDir.getFileSystem(configuration);\n       if (!DistCpUtils.compareFs(targetFS, workFS)) {\n         throw new IllegalArgumentException(\"Work path \" + workDir +\n             \" and target path \" + targetPath + \" are in different file system\");\n       }\n       CopyOutputFormat.setWorkingDirectory(job, workDir);\n     } else {\n       CopyOutputFormat.setWorkingDirectory(job, targetPath);\n     }\n     CopyOutputFormat.setCommitDirectory(job, targetPath);\n \n     Path logPath \u003d inputOptions.getLogPath();\n     if (logPath \u003d\u003d null) {\n       logPath \u003d new Path(metaFolder, \"_logs\");\n     } else {\n       LOG.info(\"DistCp job log path: \" + logPath);\n     }\n     CopyOutputFormat.setOutputPath(job, logPath);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void configureOutputFormat(Job job) throws IOException {\n    final Configuration configuration \u003d job.getConfiguration();\n    Path targetPath \u003d inputOptions.getTargetPath();\n    FileSystem targetFS \u003d targetPath.getFileSystem(configuration);\n    targetPath \u003d targetPath.makeQualified(targetFS.getUri(),\n                                          targetFS.getWorkingDirectory());\n    if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.ACL)) {\n      DistCpUtils.checkFileSystemAclSupport(targetFS);\n    }\n    if (inputOptions.shouldAtomicCommit()) {\n      Path workDir \u003d inputOptions.getAtomicWorkPath();\n      if (workDir \u003d\u003d null) {\n        workDir \u003d targetPath.getParent();\n      }\n      workDir \u003d new Path(workDir, WIP_PREFIX + targetPath.getName()\n                                + rand.nextInt());\n      FileSystem workFS \u003d workDir.getFileSystem(configuration);\n      if (!DistCpUtils.compareFs(targetFS, workFS)) {\n        throw new IllegalArgumentException(\"Work path \" + workDir +\n            \" and target path \" + targetPath + \" are in different file system\");\n      }\n      CopyOutputFormat.setWorkingDirectory(job, workDir);\n    } else {\n      CopyOutputFormat.setWorkingDirectory(job, targetPath);\n    }\n    CopyOutputFormat.setCommitDirectory(job, targetPath);\n\n    Path logPath \u003d inputOptions.getLogPath();\n    if (logPath \u003d\u003d null) {\n      logPath \u003d new Path(metaFolder, \"_logs\");\n    } else {\n      LOG.info(\"DistCp job log path: \" + logPath);\n    }\n    CopyOutputFormat.setOutputPath(job, logPath);\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCp.java",
      "extendedDetails": {}
    },
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2765. DistCp Rewrite. (Mithun Radhakrishnan via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236045 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 10:36 PM",
      "commitName": "d06948002fb0cabf72cc0d46bf2fa67d45370f67",
      "commitAuthor": "Mahadev Konar",
      "diff": "@@ -0,0 +1,33 @@\n+  private void configureOutputFormat(Job job) throws IOException {\n+    final Configuration configuration \u003d job.getConfiguration();\n+    Path targetPath \u003d inputOptions.getTargetPath();\n+    FileSystem targetFS \u003d targetPath.getFileSystem(configuration);\n+    targetPath \u003d targetPath.makeQualified(targetFS.getUri(),\n+                                          targetFS.getWorkingDirectory());\n+\n+    if (inputOptions.shouldAtomicCommit()) {\n+      Path workDir \u003d inputOptions.getAtomicWorkPath();\n+      if (workDir \u003d\u003d null) {\n+        workDir \u003d targetPath.getParent();\n+      }\n+      workDir \u003d new Path(workDir, WIP_PREFIX + targetPath.getName()\n+                                + rand.nextInt());\n+      FileSystem workFS \u003d workDir.getFileSystem(configuration);\n+      if (!DistCpUtils.compareFs(targetFS, workFS)) {\n+        throw new IllegalArgumentException(\"Work path \" + workDir +\n+            \" and target path \" + targetPath + \" are in different file system\");\n+      }\n+      CopyOutputFormat.setWorkingDirectory(job, workDir);\n+    } else {\n+      CopyOutputFormat.setWorkingDirectory(job, targetPath);\n+    }\n+    CopyOutputFormat.setCommitDirectory(job, targetPath);\n+\n+    Path logPath \u003d inputOptions.getLogPath();\n+    if (logPath \u003d\u003d null) {\n+      logPath \u003d new Path(metaFolder, \"_logs\");\n+    } else {\n+      LOG.info(\"DistCp job log path: \" + logPath);\n+    }\n+    CopyOutputFormat.setOutputPath(job, logPath);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void configureOutputFormat(Job job) throws IOException {\n    final Configuration configuration \u003d job.getConfiguration();\n    Path targetPath \u003d inputOptions.getTargetPath();\n    FileSystem targetFS \u003d targetPath.getFileSystem(configuration);\n    targetPath \u003d targetPath.makeQualified(targetFS.getUri(),\n                                          targetFS.getWorkingDirectory());\n\n    if (inputOptions.shouldAtomicCommit()) {\n      Path workDir \u003d inputOptions.getAtomicWorkPath();\n      if (workDir \u003d\u003d null) {\n        workDir \u003d targetPath.getParent();\n      }\n      workDir \u003d new Path(workDir, WIP_PREFIX + targetPath.getName()\n                                + rand.nextInt());\n      FileSystem workFS \u003d workDir.getFileSystem(configuration);\n      if (!DistCpUtils.compareFs(targetFS, workFS)) {\n        throw new IllegalArgumentException(\"Work path \" + workDir +\n            \" and target path \" + targetPath + \" are in different file system\");\n      }\n      CopyOutputFormat.setWorkingDirectory(job, workDir);\n    } else {\n      CopyOutputFormat.setWorkingDirectory(job, targetPath);\n    }\n    CopyOutputFormat.setCommitDirectory(job, targetPath);\n\n    Path logPath \u003d inputOptions.getLogPath();\n    if (logPath \u003d\u003d null) {\n      logPath \u003d new Path(metaFolder, \"_logs\");\n    } else {\n      LOG.info(\"DistCp job log path: \" + logPath);\n    }\n    CopyOutputFormat.setOutputPath(job, logPath);\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCp.java"
    }
  }
}