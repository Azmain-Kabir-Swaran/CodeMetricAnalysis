{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "disableErasureCodingPolicy",
  "functionId": "disableErasureCodingPolicy___ecPolicyName-String__logRetryCache-boolean(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 8110,
  "functionEndLine": 8137,
  "numCommitsSeen": 1634,
  "timeTaken": 15079,
  "changeHistory": [
    "1824aee9da4056de0fb638906b2172e486bbebe7",
    "5527d79adb9b1e2f2779c283f81d6a3d5447babc",
    "f600fbb6c4987c69292faea6b5abf022bb213ffd",
    "abc8fde4caea0e197568ee28392c46f1ce0d42e1",
    "770d9d9bb686bacef601ec8c4f884dc5afa9d4e2",
    "08d996d3e9265efad737efad50cbc5b10a0202f8",
    "f99b6d19de77c6e730fed8444f8848a7e63d6130"
  ],
  "changeHistoryShort": {
    "1824aee9da4056de0fb638906b2172e486bbebe7": "Ybodychange",
    "5527d79adb9b1e2f2779c283f81d6a3d5447babc": "Ybodychange",
    "f600fbb6c4987c69292faea6b5abf022bb213ffd": "Ybodychange",
    "abc8fde4caea0e197568ee28392c46f1ce0d42e1": "Ybodychange",
    "770d9d9bb686bacef601ec8c4f884dc5afa9d4e2": "Ymultichange(Yreturntypechange,Ybodychange)",
    "08d996d3e9265efad737efad50cbc5b10a0202f8": "Ymultichange(Yparameterchange,Ybodychange)",
    "f99b6d19de77c6e730fed8444f8848a7e63d6130": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1824aee9da4056de0fb638906b2172e486bbebe7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15217 Add more information to longest write/read lock held log\n\n",
      "commitDate": "18/04/20 1:52 PM",
      "commitName": "1824aee9da4056de0fb638906b2172e486bbebe7",
      "commitAuthor": "Toshihiro Suzuki",
      "commitDateOld": "25/03/20 10:28 AM",
      "commitNameOld": "a700803a18fb957d2799001a2ce1dcb70f75c080",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 24.14,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   boolean disableErasureCodingPolicy(String ecPolicyName,\n       final boolean logRetryCache) throws IOException {\n     final String operationName \u003d \"disableErasureCodingPolicy\";\n     checkOperation(OperationCategory.WRITE);\n     checkErasureCodingSupported(operationName);\n     boolean success \u003d false;\n     LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n     try {\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n             + ecPolicyName);\n         success \u003d FSDirErasureCodingOp.disableErasureCodingPolicy(this,\n             ecPolicyName, logRetryCache);\n       } finally {\n-        writeUnlock(operationName);\n+        writeUnlock(operationName, getLockReportInfoSupplier(ecPolicyName));\n       }\n     } catch (AccessControlException ace) {\n       logAuditEvent(false, operationName, ecPolicyName);\n       throw ace;\n     }\n     if (success) {\n       getEditLog().logSync();\n       logAuditEvent(true, operationName, ecPolicyName);\n     }\n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean disableErasureCodingPolicy(String ecPolicyName,\n      final boolean logRetryCache) throws IOException {\n    final String operationName \u003d \"disableErasureCodingPolicy\";\n    checkOperation(OperationCategory.WRITE);\n    checkErasureCodingSupported(operationName);\n    boolean success \u003d false;\n    LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n            + ecPolicyName);\n        success \u003d FSDirErasureCodingOp.disableErasureCodingPolicy(this,\n            ecPolicyName, logRetryCache);\n      } finally {\n        writeUnlock(operationName, getLockReportInfoSupplier(ecPolicyName));\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, ecPolicyName);\n      throw ace;\n    }\n    if (success) {\n      getEditLog().logSync();\n      logAuditEvent(true, operationName, ecPolicyName);\n    }\n    return success;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "5527d79adb9b1e2f2779c283f81d6a3d5447babc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14810. Review FSNameSystem editlog sync. Contributed by Xiaoqiao He.\n",
      "commitDate": "17/10/19 9:26 AM",
      "commitName": "5527d79adb9b1e2f2779c283f81d6a3d5447babc",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "06/09/19 5:42 AM",
      "commitNameOld": "d98c54816d21d59c4d877ae4b1917b22268ffcef",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 41.16,
      "commitsBetweenForRepo": 321,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   boolean disableErasureCodingPolicy(String ecPolicyName,\n       final boolean logRetryCache) throws IOException {\n     final String operationName \u003d \"disableErasureCodingPolicy\";\n     checkOperation(OperationCategory.WRITE);\n     checkErasureCodingSupported(operationName);\n     boolean success \u003d false;\n     LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n     try {\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n             + ecPolicyName);\n         success \u003d FSDirErasureCodingOp.disableErasureCodingPolicy(this,\n             ecPolicyName, logRetryCache);\n       } finally {\n         writeUnlock(operationName);\n       }\n     } catch (AccessControlException ace) {\n-      logAuditEvent(false, operationName, ecPolicyName, null, null);\n-    } finally {\n-      if (success) {\n-        getEditLog().logSync();\n-        logAuditEvent(success, operationName, ecPolicyName, null, null);\n-      }\n+      logAuditEvent(false, operationName, ecPolicyName);\n+      throw ace;\n+    }\n+    if (success) {\n+      getEditLog().logSync();\n+      logAuditEvent(true, operationName, ecPolicyName);\n     }\n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean disableErasureCodingPolicy(String ecPolicyName,\n      final boolean logRetryCache) throws IOException {\n    final String operationName \u003d \"disableErasureCodingPolicy\";\n    checkOperation(OperationCategory.WRITE);\n    checkErasureCodingSupported(operationName);\n    boolean success \u003d false;\n    LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n            + ecPolicyName);\n        success \u003d FSDirErasureCodingOp.disableErasureCodingPolicy(this,\n            ecPolicyName, logRetryCache);\n      } finally {\n        writeUnlock(operationName);\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, ecPolicyName);\n      throw ace;\n    }\n    if (success) {\n      getEditLog().logSync();\n      logAuditEvent(true, operationName, ecPolicyName);\n    }\n    return success;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "f600fbb6c4987c69292faea6b5abf022bb213ffd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11246. FSNameSystem#logAuditEvent should be called outside the read or write locks. Contributed by He Xiaoqiao, Kuhu Shukla.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\nCo-authored-by: Kuhu Shukla \u003ckshukla@apache.org\u003e\n",
      "commitDate": "29/08/19 10:10 AM",
      "commitName": "f600fbb6c4987c69292faea6b5abf022bb213ffd",
      "commitAuthor": "He Xiaoqiao",
      "commitDateOld": "27/08/19 3:26 PM",
      "commitNameOld": "dde9399b37bffb77da17c025f0b9b673d7088bc6",
      "commitAuthorOld": "He Xiaoqiao",
      "daysBetweenCommits": 1.78,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,28 @@\n   boolean disableErasureCodingPolicy(String ecPolicyName,\n       final boolean logRetryCache) throws IOException {\n     final String operationName \u003d \"disableErasureCodingPolicy\";\n     checkOperation(OperationCategory.WRITE);\n     checkErasureCodingSupported(operationName);\n     boolean success \u003d false;\n     LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n-    writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n-          + ecPolicyName);\n-      success \u003d FSDirErasureCodingOp.disableErasureCodingPolicy(this,\n-          ecPolicyName, logRetryCache);\n+      writeLock();\n+      try {\n+        checkOperation(OperationCategory.WRITE);\n+        checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n+            + ecPolicyName);\n+        success \u003d FSDirErasureCodingOp.disableErasureCodingPolicy(this,\n+            ecPolicyName, logRetryCache);\n+      } finally {\n+        writeUnlock(operationName);\n+      }\n     } catch (AccessControlException ace) {\n       logAuditEvent(false, operationName, ecPolicyName, null, null);\n     } finally {\n-      writeUnlock(operationName);\n       if (success) {\n         getEditLog().logSync();\n         logAuditEvent(success, operationName, ecPolicyName, null, null);\n       }\n     }\n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean disableErasureCodingPolicy(String ecPolicyName,\n      final boolean logRetryCache) throws IOException {\n    final String operationName \u003d \"disableErasureCodingPolicy\";\n    checkOperation(OperationCategory.WRITE);\n    checkErasureCodingSupported(operationName);\n    boolean success \u003d false;\n    LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n            + ecPolicyName);\n        success \u003d FSDirErasureCodingOp.disableErasureCodingPolicy(this,\n            ecPolicyName, logRetryCache);\n      } finally {\n        writeUnlock(operationName);\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, ecPolicyName, null, null);\n    } finally {\n      if (success) {\n        getEditLog().logSync();\n        logAuditEvent(success, operationName, ecPolicyName, null, null);\n      }\n    }\n    return success;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "abc8fde4caea0e197568ee28392c46f1ce0d42e1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13596. NN restart fails after RollingUpgrade from 2.x to 3.x. Contributed by Fei Hui.\n",
      "commitDate": "22/08/19 10:44 PM",
      "commitName": "abc8fde4caea0e197568ee28392c46f1ce0d42e1",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "13/08/19 4:50 PM",
      "commitNameOld": "633b7c1cfecde6166899449efae6326ee03cd8c4",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 9.25,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   boolean disableErasureCodingPolicy(String ecPolicyName,\n       final boolean logRetryCache) throws IOException {\n     final String operationName \u003d \"disableErasureCodingPolicy\";\n     checkOperation(OperationCategory.WRITE);\n+    checkErasureCodingSupported(operationName);\n     boolean success \u003d false;\n     LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n           + ecPolicyName);\n       success \u003d FSDirErasureCodingOp.disableErasureCodingPolicy(this,\n           ecPolicyName, logRetryCache);\n     } catch (AccessControlException ace) {\n       logAuditEvent(false, operationName, ecPolicyName, null, null);\n     } finally {\n       writeUnlock(operationName);\n       if (success) {\n         getEditLog().logSync();\n         logAuditEvent(success, operationName, ecPolicyName, null, null);\n       }\n     }\n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean disableErasureCodingPolicy(String ecPolicyName,\n      final boolean logRetryCache) throws IOException {\n    final String operationName \u003d \"disableErasureCodingPolicy\";\n    checkOperation(OperationCategory.WRITE);\n    checkErasureCodingSupported(operationName);\n    boolean success \u003d false;\n    LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n          + ecPolicyName);\n      success \u003d FSDirErasureCodingOp.disableErasureCodingPolicy(this,\n          ecPolicyName, logRetryCache);\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, ecPolicyName, null, null);\n    } finally {\n      writeUnlock(operationName);\n      if (success) {\n        getEditLog().logSync();\n        logAuditEvent(success, operationName, ecPolicyName, null, null);\n      }\n    }\n    return success;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "770d9d9bb686bacef601ec8c4f884dc5afa9d4e2": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-13772. Erasure coding: Unnecessary NameNode Logs displaying for Enabling/Disabling Erasure coding policies which are already enabled/disabled. Contributed by Ayush Saxena\n",
      "commitDate": "20/08/18 9:03 PM",
      "commitName": "770d9d9bb686bacef601ec8c4f884dc5afa9d4e2",
      "commitAuthor": "Vinayakumar B",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-13772. Erasure coding: Unnecessary NameNode Logs displaying for Enabling/Disabling Erasure coding policies which are already enabled/disabled. Contributed by Ayush Saxena\n",
          "commitDate": "20/08/18 9:03 PM",
          "commitName": "770d9d9bb686bacef601ec8c4f884dc5afa9d4e2",
          "commitAuthor": "Vinayakumar B",
          "commitDateOld": "15/08/18 9:23 AM",
          "commitNameOld": "ef02f9b233116a10cf9274b3753fe0b8dcbe8d92",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 5.49,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,24 @@\n-  void disableErasureCodingPolicy(String ecPolicyName,\n+  boolean disableErasureCodingPolicy(String ecPolicyName,\n       final boolean logRetryCache) throws IOException {\n     final String operationName \u003d \"disableErasureCodingPolicy\";\n     checkOperation(OperationCategory.WRITE);\n     boolean success \u003d false;\n     LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n           + ecPolicyName);\n-      FSDirErasureCodingOp.disableErasureCodingPolicy(this, ecPolicyName,\n-          logRetryCache);\n-      success \u003d true;\n+      success \u003d FSDirErasureCodingOp.disableErasureCodingPolicy(this,\n+          ecPolicyName, logRetryCache);\n+    } catch (AccessControlException ace) {\n+      logAuditEvent(false, operationName, ecPolicyName, null, null);\n     } finally {\n       writeUnlock(operationName);\n       if (success) {\n         getEditLog().logSync();\n+        logAuditEvent(success, operationName, ecPolicyName, null, null);\n       }\n-      logAuditEvent(success, operationName, ecPolicyName, null, null);\n     }\n+    return success;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean disableErasureCodingPolicy(String ecPolicyName,\n      final boolean logRetryCache) throws IOException {\n    final String operationName \u003d \"disableErasureCodingPolicy\";\n    checkOperation(OperationCategory.WRITE);\n    boolean success \u003d false;\n    LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n          + ecPolicyName);\n      success \u003d FSDirErasureCodingOp.disableErasureCodingPolicy(this,\n          ecPolicyName, logRetryCache);\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, ecPolicyName, null, null);\n    } finally {\n      writeUnlock(operationName);\n      if (success) {\n        getEditLog().logSync();\n        logAuditEvent(success, operationName, ecPolicyName, null, null);\n      }\n    }\n    return success;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13772. Erasure coding: Unnecessary NameNode Logs displaying for Enabling/Disabling Erasure coding policies which are already enabled/disabled. Contributed by Ayush Saxena\n",
          "commitDate": "20/08/18 9:03 PM",
          "commitName": "770d9d9bb686bacef601ec8c4f884dc5afa9d4e2",
          "commitAuthor": "Vinayakumar B",
          "commitDateOld": "15/08/18 9:23 AM",
          "commitNameOld": "ef02f9b233116a10cf9274b3753fe0b8dcbe8d92",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 5.49,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,24 @@\n-  void disableErasureCodingPolicy(String ecPolicyName,\n+  boolean disableErasureCodingPolicy(String ecPolicyName,\n       final boolean logRetryCache) throws IOException {\n     final String operationName \u003d \"disableErasureCodingPolicy\";\n     checkOperation(OperationCategory.WRITE);\n     boolean success \u003d false;\n     LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n           + ecPolicyName);\n-      FSDirErasureCodingOp.disableErasureCodingPolicy(this, ecPolicyName,\n-          logRetryCache);\n-      success \u003d true;\n+      success \u003d FSDirErasureCodingOp.disableErasureCodingPolicy(this,\n+          ecPolicyName, logRetryCache);\n+    } catch (AccessControlException ace) {\n+      logAuditEvent(false, operationName, ecPolicyName, null, null);\n     } finally {\n       writeUnlock(operationName);\n       if (success) {\n         getEditLog().logSync();\n+        logAuditEvent(success, operationName, ecPolicyName, null, null);\n       }\n-      logAuditEvent(success, operationName, ecPolicyName, null, null);\n     }\n+    return success;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean disableErasureCodingPolicy(String ecPolicyName,\n      final boolean logRetryCache) throws IOException {\n    final String operationName \u003d \"disableErasureCodingPolicy\";\n    checkOperation(OperationCategory.WRITE);\n    boolean success \u003d false;\n    LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n          + ecPolicyName);\n      success \u003d FSDirErasureCodingOp.disableErasureCodingPolicy(this,\n          ecPolicyName, logRetryCache);\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, ecPolicyName, null, null);\n    } finally {\n      writeUnlock(operationName);\n      if (success) {\n        getEditLog().logSync();\n        logAuditEvent(success, operationName, ecPolicyName, null, null);\n      }\n    }\n    return success;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "08d996d3e9265efad737efad50cbc5b10a0202f8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-12395. Support erasure coding policy operations in namenode edit log. Contributed by Sammi Chen\n",
      "commitDate": "14/09/17 6:43 PM",
      "commitName": "08d996d3e9265efad737efad50cbc5b10a0202f8",
      "commitAuthor": "Kai Zheng",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12395. Support erasure coding policy operations in namenode edit log. Contributed by Sammi Chen\n",
          "commitDate": "14/09/17 6:43 PM",
          "commitName": "08d996d3e9265efad737efad50cbc5b10a0202f8",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "14/09/17 11:17 AM",
          "commitNameOld": "65a941008d4bbf906772399d3f035f2a0da5abfa",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,22 @@\n-  void disableErasureCodingPolicy(String ecPolicyName) throws IOException {\n+  void disableErasureCodingPolicy(String ecPolicyName,\n+      final boolean logRetryCache) throws IOException {\n     final String operationName \u003d \"disableErasureCodingPolicy\";\n     checkOperation(OperationCategory.WRITE);\n     boolean success \u003d false;\n     LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n           + ecPolicyName);\n-      FSDirErasureCodingOp.disableErasureCodePolicy(this, ecPolicyName);\n+      FSDirErasureCodingOp.disableErasureCodingPolicy(this, ecPolicyName,\n+          logRetryCache);\n       success \u003d true;\n     } finally {\n       writeUnlock(operationName);\n       if (success) {\n         getEditLog().logSync();\n       }\n       logAuditEvent(success, operationName, ecPolicyName, null, null);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void disableErasureCodingPolicy(String ecPolicyName,\n      final boolean logRetryCache) throws IOException {\n    final String operationName \u003d \"disableErasureCodingPolicy\";\n    checkOperation(OperationCategory.WRITE);\n    boolean success \u003d false;\n    LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n          + ecPolicyName);\n      FSDirErasureCodingOp.disableErasureCodingPolicy(this, ecPolicyName,\n          logRetryCache);\n      success \u003d true;\n    } finally {\n      writeUnlock(operationName);\n      if (success) {\n        getEditLog().logSync();\n      }\n      logAuditEvent(success, operationName, ecPolicyName, null, null);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[ecPolicyName-String]",
            "newValue": "[ecPolicyName-String, logRetryCache-boolean(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12395. Support erasure coding policy operations in namenode edit log. Contributed by Sammi Chen\n",
          "commitDate": "14/09/17 6:43 PM",
          "commitName": "08d996d3e9265efad737efad50cbc5b10a0202f8",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "14/09/17 11:17 AM",
          "commitNameOld": "65a941008d4bbf906772399d3f035f2a0da5abfa",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,22 @@\n-  void disableErasureCodingPolicy(String ecPolicyName) throws IOException {\n+  void disableErasureCodingPolicy(String ecPolicyName,\n+      final boolean logRetryCache) throws IOException {\n     final String operationName \u003d \"disableErasureCodingPolicy\";\n     checkOperation(OperationCategory.WRITE);\n     boolean success \u003d false;\n     LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n           + ecPolicyName);\n-      FSDirErasureCodingOp.disableErasureCodePolicy(this, ecPolicyName);\n+      FSDirErasureCodingOp.disableErasureCodingPolicy(this, ecPolicyName,\n+          logRetryCache);\n       success \u003d true;\n     } finally {\n       writeUnlock(operationName);\n       if (success) {\n         getEditLog().logSync();\n       }\n       logAuditEvent(success, operationName, ecPolicyName, null, null);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void disableErasureCodingPolicy(String ecPolicyName,\n      final boolean logRetryCache) throws IOException {\n    final String operationName \u003d \"disableErasureCodingPolicy\";\n    checkOperation(OperationCategory.WRITE);\n    boolean success \u003d false;\n    LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n          + ecPolicyName);\n      FSDirErasureCodingOp.disableErasureCodingPolicy(this, ecPolicyName,\n          logRetryCache);\n      success \u003d true;\n    } finally {\n      writeUnlock(operationName);\n      if (success) {\n        getEditLog().logSync();\n      }\n      logAuditEvent(success, operationName, ecPolicyName, null, null);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "f99b6d19de77c6e730fed8444f8848a7e63d6130": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11870. Add CLI cmd to enable/disable an erasure code policy. Contributed by lufei.\n",
      "commitDate": "28/06/17 10:54 AM",
      "commitName": "f99b6d19de77c6e730fed8444f8848a7e63d6130",
      "commitAuthor": "Wei-Chiu Chuang",
      "diff": "@@ -0,0 +1,20 @@\n+  void disableErasureCodingPolicy(String ecPolicyName) throws IOException {\n+    final String operationName \u003d \"disableErasureCodingPolicy\";\n+    checkOperation(OperationCategory.WRITE);\n+    boolean success \u003d false;\n+    LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n+    writeLock();\n+    try {\n+      checkOperation(OperationCategory.WRITE);\n+      checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n+          + ecPolicyName);\n+      FSDirErasureCodingOp.disableErasureCodePolicy(this, ecPolicyName);\n+      success \u003d true;\n+    } finally {\n+      writeUnlock(operationName);\n+      if (success) {\n+        getEditLog().logSync();\n+      }\n+      logAuditEvent(success, operationName, ecPolicyName, null, null);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void disableErasureCodingPolicy(String ecPolicyName) throws IOException {\n    final String operationName \u003d \"disableErasureCodingPolicy\";\n    checkOperation(OperationCategory.WRITE);\n    boolean success \u003d false;\n    LOG.info(\"Disable the erasure coding policy \" + ecPolicyName);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot disable erasure coding policy \"\n          + ecPolicyName);\n      FSDirErasureCodingOp.disableErasureCodePolicy(this, ecPolicyName);\n      success \u003d true;\n    } finally {\n      writeUnlock(operationName);\n      if (success) {\n        getEditLog().logSync();\n      }\n      logAuditEvent(success, operationName, ecPolicyName, null, null);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
    }
  }
}