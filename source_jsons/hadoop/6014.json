{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NamenodeFsck.java",
  "functionName": "toString",
  "functionId": "toString",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
  "functionStartLine": 1383,
  "functionEndLine": 1485,
  "numCommitsSeen": 128,
  "timeTaken": 9926,
  "changeHistory": [
    "ffc9c50e074aeca804674c6e1e6b0f1eb629e230",
    "3749152b661d0359b3b941ab1d17177230f3b8dc",
    "78ae2aed8f84d2d3983f81a5219e8b1f1ec59dca",
    "2f8e9b7e4b1721ed5c7db8882eff70f83164e320",
    "c18590fce283378edb09acd4e764706a9a4a8b5f",
    "1d37a8812160bb030244a1e6b1c753f962d8d2ed",
    "2470a7bf88c7d7e0889905e35671c440c3ae649b",
    "0ed92e5b13f6bbc0ea7475bc67488359413a980e",
    "0c590e1c097462979f7ee054ad9121345d58655b",
    "279958b772c25e0633bd967828b7d27d5c0a6a56",
    "f8f5887209a7d8e53c0a77abef275cbcaf1f7a5b",
    "725cc499f00abeeab9f58cbc778e65522eec9d98",
    "1087be1df4707bbadf8b25735513e140dde883bc",
    "d1207cbd8806fc2ae923b24c6e20dfc8730b1c7c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "498e2901036134d6a028e333caa4cc51558dcf5b",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "ffc9c50e074aeca804674c6e1e6b0f1eb629e230": "Ybodychange",
    "3749152b661d0359b3b941ab1d17177230f3b8dc": "Ybodychange",
    "78ae2aed8f84d2d3983f81a5219e8b1f1ec59dca": "Ybodychange",
    "2f8e9b7e4b1721ed5c7db8882eff70f83164e320": "Ybodychange",
    "c18590fce283378edb09acd4e764706a9a4a8b5f": "Ybodychange",
    "1d37a8812160bb030244a1e6b1c753f962d8d2ed": "Ybodychange",
    "2470a7bf88c7d7e0889905e35671c440c3ae649b": "Ybodychange",
    "0ed92e5b13f6bbc0ea7475bc67488359413a980e": "Ybodychange",
    "0c590e1c097462979f7ee054ad9121345d58655b": "Ybodychange",
    "279958b772c25e0633bd967828b7d27d5c0a6a56": "Ybodychange",
    "f8f5887209a7d8e53c0a77abef275cbcaf1f7a5b": "Ybodychange",
    "725cc499f00abeeab9f58cbc778e65522eec9d98": "Ybodychange",
    "1087be1df4707bbadf8b25735513e140dde883bc": "Ybodychange",
    "d1207cbd8806fc2ae923b24c6e20dfc8730b1c7c": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "498e2901036134d6a028e333caa4cc51558dcf5b": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ffc9c50e074aeca804674c6e1e6b0f1eb629e230": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14053. Provide ability for NN to re-replicate based on topology changes. Contributed by Hrishikesh Gadre.\n",
      "commitDate": "05/11/18 9:38 PM",
      "commitName": "ffc9c50e074aeca804674c6e1e6b0f1eb629e230",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "30/10/18 10:43 PM",
      "commitNameOld": "fac9f91b2944cee641049fffcafa6b65e0cf68f2",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.0,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,103 @@\n     public String toString() {\n       StringBuilder res \u003d new StringBuilder();\n       res.append(\" Total size:\\t\").append(totalSize).append(\" B\");\n       if (totalOpenFilesSize !\u003d 0) {\n         res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n             .append(\" B)\");\n       }\n       res.append(\"\\n Total files:\\t\").append(totalFiles);\n       if (totalOpenFiles !\u003d 0) {\n         res.append(\" (Files currently being written: \").append(totalOpenFiles)\n             .append(\")\");\n       }\n       res.append(\"\\n Total block groups (validated):\\t\").append(totalBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (avg. block group size \").append((totalSize / totalBlocks))\n             .append(\" B)\");\n       }\n       if (totalOpenFilesBlocks !\u003d 0) {\n         res.append(\" (Total open file block groups (not validated): \").append(\n             totalOpenFilesBlocks).append(\")\");\n       }\n       if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n         res.append(\"\\n  ********************************\");\n         if(numUnderMinReplicatedBlocks\u003e0){\n           res.append(\"\\n  UNRECOVERABLE BLOCK GROUPS:\\t\").append(numUnderMinReplicatedBlocks);\n           if(totalBlocks\u003e0){\n             res.append(\" (\").append(\n                 ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                 .append(\" %)\");\n           }\n         }\n         if(corruptFiles\u003e0) {\n           res.append(\n               \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n           if (missingSize \u003e 0) {\n             res.append(\"\\n  MISSING BLOCK GROUPS:\\t\").append(missingIds.size()).append(\n                 \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n           }\n           if (corruptBlocks \u003e 0) {\n             res.append(\"\\n  CORRUPT BLOCK GROUPS: \\t\").append(corruptBlocks).append(\n                 \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n           }\n         }\n         res.append(\"\\n  ********************************\");\n       }\n       res.append(\"\\n Minimally erasure-coded block groups:\\t\").append(\n           numMinReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Over-erasure-coded block groups:\\t\")\n           .append(numOverReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Under-erasure-coded block groups:\\t\").append(\n           numUnderReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Unsatisfactory placement block groups:\\t\")\n           .append(numMisReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Average block group size:\\t\").append(\n           getReplicationFactor()).append(\"\\n Missing block groups:\\t\\t\").append(\n           missingIds.size()).append(\"\\n Corrupt block groups:\\t\\t\").append(\n           corruptBlocks).append(\"\\n Missing internal blocks:\\t\").append(\n           missingReplicas);\n       if (totalReplicas \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n             \" %)\");\n       }\n       if (decommissionedReplicas \u003e 0) {\n         res.append(\"\\n Decommissioned internal blocks:\\t\").append(\n             decommissionedReplicas);\n       }\n       if (decommissioningReplicas \u003e 0) {\n         res.append(\"\\n Decommissioning internal blocks:\\t\").append(\n             decommissioningReplicas);\n       }\n       if (enteringMaintenanceReplicas \u003e 0) {\n         res.append(\"\\n EnteringMaintenanceReplicas:\\t\").append(\n             enteringMaintenanceReplicas);\n       }\n       if (inMaintenanceReplicas \u003e 0) {\n         res.append(\"\\n InMaintenanceReplicas:\\t\").append(\n             inMaintenanceReplicas);\n       }\n+      res.append(\"\\n Blocks queued for replication:\\t\").append(\n+              numBlocksQueuedForReplication);\n       return res.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\" Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total files:\\t\").append(totalFiles);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total block groups (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block group size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file block groups (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n        res.append(\"\\n  ********************************\");\n        if(numUnderMinReplicatedBlocks\u003e0){\n          res.append(\"\\n  UNRECOVERABLE BLOCK GROUPS:\\t\").append(numUnderMinReplicatedBlocks);\n          if(totalBlocks\u003e0){\n            res.append(\" (\").append(\n                ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                .append(\" %)\");\n          }\n        }\n        if(corruptFiles\u003e0) {\n          res.append(\n              \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n          if (missingSize \u003e 0) {\n            res.append(\"\\n  MISSING BLOCK GROUPS:\\t\").append(missingIds.size()).append(\n                \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n          }\n          if (corruptBlocks \u003e 0) {\n            res.append(\"\\n  CORRUPT BLOCK GROUPS: \\t\").append(corruptBlocks).append(\n                \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n          }\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally erasure-coded block groups:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-erasure-coded block groups:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-erasure-coded block groups:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Unsatisfactory placement block groups:\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Average block group size:\\t\").append(\n          getReplicationFactor()).append(\"\\n Missing block groups:\\t\\t\").append(\n          missingIds.size()).append(\"\\n Corrupt block groups:\\t\\t\").append(\n          corruptBlocks).append(\"\\n Missing internal blocks:\\t\").append(\n          missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n            \" %)\");\n      }\n      if (decommissionedReplicas \u003e 0) {\n        res.append(\"\\n Decommissioned internal blocks:\\t\").append(\n            decommissionedReplicas);\n      }\n      if (decommissioningReplicas \u003e 0) {\n        res.append(\"\\n Decommissioning internal blocks:\\t\").append(\n            decommissioningReplicas);\n      }\n      if (enteringMaintenanceReplicas \u003e 0) {\n        res.append(\"\\n EnteringMaintenanceReplicas:\\t\").append(\n            enteringMaintenanceReplicas);\n      }\n      if (inMaintenanceReplicas \u003e 0) {\n        res.append(\"\\n InMaintenanceReplicas:\\t\").append(\n            inMaintenanceReplicas);\n      }\n      res.append(\"\\n Blocks queued for replication:\\t\").append(\n              numBlocksQueuedForReplication);\n      return res.toString();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "3749152b661d0359b3b941ab1d17177230f3b8dc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11416. Refactor out system default erasure coding policy. Contributed by Andrew Wang.\n",
      "commitDate": "02/03/17 7:58 PM",
      "commitName": "3749152b661d0359b3b941ab1d17177230f3b8dc",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "01/02/17 11:21 AM",
      "commitNameOld": "b6f290d5b660ad157c7076767c619d02b3d0f894",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 29.36,
      "commitsBetweenForRepo": 156,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,102 +1,101 @@\n     public String toString() {\n       StringBuilder res \u003d new StringBuilder();\n       res.append(\" Total size:\\t\").append(totalSize).append(\" B\");\n       if (totalOpenFilesSize !\u003d 0) {\n         res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n             .append(\" B)\");\n       }\n       res.append(\"\\n Total files:\\t\").append(totalFiles);\n       if (totalOpenFiles !\u003d 0) {\n         res.append(\" (Files currently being written: \").append(totalOpenFiles)\n             .append(\")\");\n       }\n       res.append(\"\\n Total block groups (validated):\\t\").append(totalBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (avg. block group size \").append((totalSize / totalBlocks))\n             .append(\" B)\");\n       }\n       if (totalOpenFilesBlocks !\u003d 0) {\n         res.append(\" (Total open file block groups (not validated): \").append(\n             totalOpenFilesBlocks).append(\")\");\n       }\n       if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n         res.append(\"\\n  ********************************\");\n         if(numUnderMinReplicatedBlocks\u003e0){\n           res.append(\"\\n  UNRECOVERABLE BLOCK GROUPS:\\t\").append(numUnderMinReplicatedBlocks);\n           if(totalBlocks\u003e0){\n             res.append(\" (\").append(\n                 ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                 .append(\" %)\");\n           }\n         }\n         if(corruptFiles\u003e0) {\n           res.append(\n               \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n           if (missingSize \u003e 0) {\n             res.append(\"\\n  MISSING BLOCK GROUPS:\\t\").append(missingIds.size()).append(\n                 \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n           }\n           if (corruptBlocks \u003e 0) {\n             res.append(\"\\n  CORRUPT BLOCK GROUPS: \\t\").append(corruptBlocks).append(\n                 \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n           }\n         }\n         res.append(\"\\n  ********************************\");\n       }\n       res.append(\"\\n Minimally erasure-coded block groups:\\t\").append(\n           numMinReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Over-erasure-coded block groups:\\t\")\n           .append(numOverReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Under-erasure-coded block groups:\\t\").append(\n           numUnderReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Unsatisfactory placement block groups:\\t\")\n           .append(numMisReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n-      res.append(\"\\n Default ecPolicy:\\t\\t\").append(defaultECPolicy)\n-          .append(\"\\n Average block group size:\\t\").append(\n+      res.append(\"\\n Average block group size:\\t\").append(\n           getReplicationFactor()).append(\"\\n Missing block groups:\\t\\t\").append(\n           missingIds.size()).append(\"\\n Corrupt block groups:\\t\\t\").append(\n           corruptBlocks).append(\"\\n Missing internal blocks:\\t\").append(\n           missingReplicas);\n       if (totalReplicas \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n             \" %)\");\n       }\n       if (decommissionedReplicas \u003e 0) {\n         res.append(\"\\n Decommissioned internal blocks:\\t\").append(\n             decommissionedReplicas);\n       }\n       if (decommissioningReplicas \u003e 0) {\n         res.append(\"\\n Decommissioning internal blocks:\\t\").append(\n             decommissioningReplicas);\n       }\n       if (enteringMaintenanceReplicas \u003e 0) {\n         res.append(\"\\n EnteringMaintenanceReplicas:\\t\").append(\n             enteringMaintenanceReplicas);\n       }\n       if (inMaintenanceReplicas \u003e 0) {\n         res.append(\"\\n InMaintenanceReplicas:\\t\").append(\n             inMaintenanceReplicas);\n       }\n       return res.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\" Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total files:\\t\").append(totalFiles);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total block groups (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block group size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file block groups (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n        res.append(\"\\n  ********************************\");\n        if(numUnderMinReplicatedBlocks\u003e0){\n          res.append(\"\\n  UNRECOVERABLE BLOCK GROUPS:\\t\").append(numUnderMinReplicatedBlocks);\n          if(totalBlocks\u003e0){\n            res.append(\" (\").append(\n                ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                .append(\" %)\");\n          }\n        }\n        if(corruptFiles\u003e0) {\n          res.append(\n              \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n          if (missingSize \u003e 0) {\n            res.append(\"\\n  MISSING BLOCK GROUPS:\\t\").append(missingIds.size()).append(\n                \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n          }\n          if (corruptBlocks \u003e 0) {\n            res.append(\"\\n  CORRUPT BLOCK GROUPS: \\t\").append(corruptBlocks).append(\n                \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n          }\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally erasure-coded block groups:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-erasure-coded block groups:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-erasure-coded block groups:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Unsatisfactory placement block groups:\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Average block group size:\\t\").append(\n          getReplicationFactor()).append(\"\\n Missing block groups:\\t\\t\").append(\n          missingIds.size()).append(\"\\n Corrupt block groups:\\t\\t\").append(\n          corruptBlocks).append(\"\\n Missing internal blocks:\\t\").append(\n          missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n            \" %)\");\n      }\n      if (decommissionedReplicas \u003e 0) {\n        res.append(\"\\n Decommissioned internal blocks:\\t\").append(\n            decommissionedReplicas);\n      }\n      if (decommissioningReplicas \u003e 0) {\n        res.append(\"\\n Decommissioning internal blocks:\\t\").append(\n            decommissioningReplicas);\n      }\n      if (enteringMaintenanceReplicas \u003e 0) {\n        res.append(\"\\n EnteringMaintenanceReplicas:\\t\").append(\n            enteringMaintenanceReplicas);\n      }\n      if (inMaintenanceReplicas \u003e 0) {\n        res.append(\"\\n InMaintenanceReplicas:\\t\").append(\n            inMaintenanceReplicas);\n      }\n      return res.toString();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "78ae2aed8f84d2d3983f81a5219e8b1f1ec59dca": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11259. Update fsck to display maintenance state info. (Manoj Govindassamy via lei)\n",
      "commitDate": "19/01/17 12:28 AM",
      "commitName": "78ae2aed8f84d2d3983f81a5219e8b1f1ec59dca",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "18/01/17 1:31 PM",
      "commitNameOld": "a2a5d7b5bca715835d92816e7b267b59f7270708",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.46,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,102 @@\n     public String toString() {\n       StringBuilder res \u003d new StringBuilder();\n       res.append(\" Total size:\\t\").append(totalSize).append(\" B\");\n       if (totalOpenFilesSize !\u003d 0) {\n         res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n             .append(\" B)\");\n       }\n       res.append(\"\\n Total files:\\t\").append(totalFiles);\n       if (totalOpenFiles !\u003d 0) {\n         res.append(\" (Files currently being written: \").append(totalOpenFiles)\n             .append(\")\");\n       }\n       res.append(\"\\n Total block groups (validated):\\t\").append(totalBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (avg. block group size \").append((totalSize / totalBlocks))\n             .append(\" B)\");\n       }\n       if (totalOpenFilesBlocks !\u003d 0) {\n         res.append(\" (Total open file block groups (not validated): \").append(\n             totalOpenFilesBlocks).append(\")\");\n       }\n       if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n         res.append(\"\\n  ********************************\");\n         if(numUnderMinReplicatedBlocks\u003e0){\n           res.append(\"\\n  UNRECOVERABLE BLOCK GROUPS:\\t\").append(numUnderMinReplicatedBlocks);\n           if(totalBlocks\u003e0){\n             res.append(\" (\").append(\n                 ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                 .append(\" %)\");\n           }\n         }\n         if(corruptFiles\u003e0) {\n           res.append(\n               \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n           if (missingSize \u003e 0) {\n             res.append(\"\\n  MISSING BLOCK GROUPS:\\t\").append(missingIds.size()).append(\n                 \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n           }\n           if (corruptBlocks \u003e 0) {\n             res.append(\"\\n  CORRUPT BLOCK GROUPS: \\t\").append(corruptBlocks).append(\n                 \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n           }\n         }\n         res.append(\"\\n  ********************************\");\n       }\n       res.append(\"\\n Minimally erasure-coded block groups:\\t\").append(\n           numMinReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Over-erasure-coded block groups:\\t\")\n           .append(numOverReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Under-erasure-coded block groups:\\t\").append(\n           numUnderReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Unsatisfactory placement block groups:\\t\")\n           .append(numMisReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Default ecPolicy:\\t\\t\").append(defaultECPolicy)\n           .append(\"\\n Average block group size:\\t\").append(\n           getReplicationFactor()).append(\"\\n Missing block groups:\\t\\t\").append(\n           missingIds.size()).append(\"\\n Corrupt block groups:\\t\\t\").append(\n           corruptBlocks).append(\"\\n Missing internal blocks:\\t\").append(\n           missingReplicas);\n       if (totalReplicas \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n             \" %)\");\n       }\n       if (decommissionedReplicas \u003e 0) {\n         res.append(\"\\n Decommissioned internal blocks:\\t\").append(\n             decommissionedReplicas);\n       }\n       if (decommissioningReplicas \u003e 0) {\n         res.append(\"\\n Decommissioning internal blocks:\\t\").append(\n             decommissioningReplicas);\n       }\n+      if (enteringMaintenanceReplicas \u003e 0) {\n+        res.append(\"\\n EnteringMaintenanceReplicas:\\t\").append(\n+            enteringMaintenanceReplicas);\n+      }\n+      if (inMaintenanceReplicas \u003e 0) {\n+        res.append(\"\\n InMaintenanceReplicas:\\t\").append(\n+            inMaintenanceReplicas);\n+      }\n       return res.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\" Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total files:\\t\").append(totalFiles);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total block groups (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block group size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file block groups (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n        res.append(\"\\n  ********************************\");\n        if(numUnderMinReplicatedBlocks\u003e0){\n          res.append(\"\\n  UNRECOVERABLE BLOCK GROUPS:\\t\").append(numUnderMinReplicatedBlocks);\n          if(totalBlocks\u003e0){\n            res.append(\" (\").append(\n                ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                .append(\" %)\");\n          }\n        }\n        if(corruptFiles\u003e0) {\n          res.append(\n              \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n          if (missingSize \u003e 0) {\n            res.append(\"\\n  MISSING BLOCK GROUPS:\\t\").append(missingIds.size()).append(\n                \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n          }\n          if (corruptBlocks \u003e 0) {\n            res.append(\"\\n  CORRUPT BLOCK GROUPS: \\t\").append(corruptBlocks).append(\n                \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n          }\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally erasure-coded block groups:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-erasure-coded block groups:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-erasure-coded block groups:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Unsatisfactory placement block groups:\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Default ecPolicy:\\t\\t\").append(defaultECPolicy)\n          .append(\"\\n Average block group size:\\t\").append(\n          getReplicationFactor()).append(\"\\n Missing block groups:\\t\\t\").append(\n          missingIds.size()).append(\"\\n Corrupt block groups:\\t\\t\").append(\n          corruptBlocks).append(\"\\n Missing internal blocks:\\t\").append(\n          missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n            \" %)\");\n      }\n      if (decommissionedReplicas \u003e 0) {\n        res.append(\"\\n Decommissioned internal blocks:\\t\").append(\n            decommissionedReplicas);\n      }\n      if (decommissioningReplicas \u003e 0) {\n        res.append(\"\\n Decommissioning internal blocks:\\t\").append(\n            decommissioningReplicas);\n      }\n      if (enteringMaintenanceReplicas \u003e 0) {\n        res.append(\"\\n EnteringMaintenanceReplicas:\\t\").append(\n            enteringMaintenanceReplicas);\n      }\n      if (inMaintenanceReplicas \u003e 0) {\n        res.append(\"\\n InMaintenanceReplicas:\\t\").append(\n            inMaintenanceReplicas);\n      }\n      return res.toString();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "2f8e9b7e4b1721ed5c7db8882eff70f83164e320": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-11259. Update fsck to display maintenance state info. (Manoj Govindassamy via lei)\"\n\nThis reverts commit c18590fce283378edb09acd4e764706a9a4a8b5f.\n",
      "commitDate": "15/01/17 11:11 PM",
      "commitName": "2f8e9b7e4b1721ed5c7db8882eff70f83164e320",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "10/01/17 3:37 AM",
      "commitNameOld": "c18590fce283378edb09acd4e764706a9a4a8b5f",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 5.82,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,102 +1,94 @@\n     public String toString() {\n       StringBuilder res \u003d new StringBuilder();\n       res.append(\" Total size:\\t\").append(totalSize).append(\" B\");\n       if (totalOpenFilesSize !\u003d 0) {\n         res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n             .append(\" B)\");\n       }\n       res.append(\"\\n Total files:\\t\").append(totalFiles);\n       if (totalOpenFiles !\u003d 0) {\n         res.append(\" (Files currently being written: \").append(totalOpenFiles)\n             .append(\")\");\n       }\n       res.append(\"\\n Total block groups (validated):\\t\").append(totalBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (avg. block group size \").append((totalSize / totalBlocks))\n             .append(\" B)\");\n       }\n       if (totalOpenFilesBlocks !\u003d 0) {\n         res.append(\" (Total open file block groups (not validated): \").append(\n             totalOpenFilesBlocks).append(\")\");\n       }\n       if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n         res.append(\"\\n  ********************************\");\n         if(numUnderMinReplicatedBlocks\u003e0){\n           res.append(\"\\n  UNRECOVERABLE BLOCK GROUPS:\\t\").append(numUnderMinReplicatedBlocks);\n           if(totalBlocks\u003e0){\n             res.append(\" (\").append(\n                 ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                 .append(\" %)\");\n           }\n         }\n         if(corruptFiles\u003e0) {\n           res.append(\n               \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n           if (missingSize \u003e 0) {\n             res.append(\"\\n  MISSING BLOCK GROUPS:\\t\").append(missingIds.size()).append(\n                 \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n           }\n           if (corruptBlocks \u003e 0) {\n             res.append(\"\\n  CORRUPT BLOCK GROUPS: \\t\").append(corruptBlocks).append(\n                 \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n           }\n         }\n         res.append(\"\\n  ********************************\");\n       }\n       res.append(\"\\n Minimally erasure-coded block groups:\\t\").append(\n           numMinReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Over-erasure-coded block groups:\\t\")\n           .append(numOverReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Under-erasure-coded block groups:\\t\").append(\n           numUnderReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Unsatisfactory placement block groups:\\t\")\n           .append(numMisReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Default ecPolicy:\\t\\t\").append(defaultECPolicy)\n           .append(\"\\n Average block group size:\\t\").append(\n           getReplicationFactor()).append(\"\\n Missing block groups:\\t\\t\").append(\n           missingIds.size()).append(\"\\n Corrupt block groups:\\t\\t\").append(\n           corruptBlocks).append(\"\\n Missing internal blocks:\\t\").append(\n           missingReplicas);\n       if (totalReplicas \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n             \" %)\");\n       }\n       if (decommissionedReplicas \u003e 0) {\n         res.append(\"\\n Decommissioned internal blocks:\\t\").append(\n             decommissionedReplicas);\n       }\n       if (decommissioningReplicas \u003e 0) {\n         res.append(\"\\n Decommissioning internal blocks:\\t\").append(\n             decommissioningReplicas);\n       }\n-      if (enteringMaintenanceReplicas \u003e 0) {\n-        res.append(\"\\n EnteringMaintenanceReplicas:\\t\").append(\n-            enteringMaintenanceReplicas);\n-      }\n-      if (inMaintenanceReplicas \u003e 0) {\n-        res.append(\"\\n InMaintenanceReplicas:\\t\").append(\n-            inMaintenanceReplicas);\n-      }\n       return res.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\" Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total files:\\t\").append(totalFiles);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total block groups (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block group size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file block groups (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n        res.append(\"\\n  ********************************\");\n        if(numUnderMinReplicatedBlocks\u003e0){\n          res.append(\"\\n  UNRECOVERABLE BLOCK GROUPS:\\t\").append(numUnderMinReplicatedBlocks);\n          if(totalBlocks\u003e0){\n            res.append(\" (\").append(\n                ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                .append(\" %)\");\n          }\n        }\n        if(corruptFiles\u003e0) {\n          res.append(\n              \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n          if (missingSize \u003e 0) {\n            res.append(\"\\n  MISSING BLOCK GROUPS:\\t\").append(missingIds.size()).append(\n                \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n          }\n          if (corruptBlocks \u003e 0) {\n            res.append(\"\\n  CORRUPT BLOCK GROUPS: \\t\").append(corruptBlocks).append(\n                \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n          }\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally erasure-coded block groups:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-erasure-coded block groups:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-erasure-coded block groups:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Unsatisfactory placement block groups:\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Default ecPolicy:\\t\\t\").append(defaultECPolicy)\n          .append(\"\\n Average block group size:\\t\").append(\n          getReplicationFactor()).append(\"\\n Missing block groups:\\t\\t\").append(\n          missingIds.size()).append(\"\\n Corrupt block groups:\\t\\t\").append(\n          corruptBlocks).append(\"\\n Missing internal blocks:\\t\").append(\n          missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n            \" %)\");\n      }\n      if (decommissionedReplicas \u003e 0) {\n        res.append(\"\\n Decommissioned internal blocks:\\t\").append(\n            decommissionedReplicas);\n      }\n      if (decommissioningReplicas \u003e 0) {\n        res.append(\"\\n Decommissioning internal blocks:\\t\").append(\n            decommissioningReplicas);\n      }\n      return res.toString();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "c18590fce283378edb09acd4e764706a9a4a8b5f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11259. Update fsck to display maintenance state info. (Manoj Govindassamy via lei)\n",
      "commitDate": "10/01/17 3:37 AM",
      "commitName": "c18590fce283378edb09acd4e764706a9a4a8b5f",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "14/11/16 11:05 AM",
      "commitNameOld": "ff0b99eafeda035ebe0dc82cfe689808047a8893",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 56.69,
      "commitsBetweenForRepo": 299,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,102 @@\n     public String toString() {\n       StringBuilder res \u003d new StringBuilder();\n       res.append(\" Total size:\\t\").append(totalSize).append(\" B\");\n       if (totalOpenFilesSize !\u003d 0) {\n         res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n             .append(\" B)\");\n       }\n       res.append(\"\\n Total files:\\t\").append(totalFiles);\n       if (totalOpenFiles !\u003d 0) {\n         res.append(\" (Files currently being written: \").append(totalOpenFiles)\n             .append(\")\");\n       }\n       res.append(\"\\n Total block groups (validated):\\t\").append(totalBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (avg. block group size \").append((totalSize / totalBlocks))\n             .append(\" B)\");\n       }\n       if (totalOpenFilesBlocks !\u003d 0) {\n         res.append(\" (Total open file block groups (not validated): \").append(\n             totalOpenFilesBlocks).append(\")\");\n       }\n       if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n         res.append(\"\\n  ********************************\");\n         if(numUnderMinReplicatedBlocks\u003e0){\n           res.append(\"\\n  UNRECOVERABLE BLOCK GROUPS:\\t\").append(numUnderMinReplicatedBlocks);\n           if(totalBlocks\u003e0){\n             res.append(\" (\").append(\n                 ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                 .append(\" %)\");\n           }\n         }\n         if(corruptFiles\u003e0) {\n           res.append(\n               \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n           if (missingSize \u003e 0) {\n             res.append(\"\\n  MISSING BLOCK GROUPS:\\t\").append(missingIds.size()).append(\n                 \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n           }\n           if (corruptBlocks \u003e 0) {\n             res.append(\"\\n  CORRUPT BLOCK GROUPS: \\t\").append(corruptBlocks).append(\n                 \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n           }\n         }\n         res.append(\"\\n  ********************************\");\n       }\n       res.append(\"\\n Minimally erasure-coded block groups:\\t\").append(\n           numMinReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Over-erasure-coded block groups:\\t\")\n           .append(numOverReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Under-erasure-coded block groups:\\t\").append(\n           numUnderReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Unsatisfactory placement block groups:\\t\")\n           .append(numMisReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Default ecPolicy:\\t\\t\").append(defaultECPolicy)\n           .append(\"\\n Average block group size:\\t\").append(\n           getReplicationFactor()).append(\"\\n Missing block groups:\\t\\t\").append(\n           missingIds.size()).append(\"\\n Corrupt block groups:\\t\\t\").append(\n           corruptBlocks).append(\"\\n Missing internal blocks:\\t\").append(\n           missingReplicas);\n       if (totalReplicas \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n             \" %)\");\n       }\n       if (decommissionedReplicas \u003e 0) {\n         res.append(\"\\n Decommissioned internal blocks:\\t\").append(\n             decommissionedReplicas);\n       }\n       if (decommissioningReplicas \u003e 0) {\n         res.append(\"\\n Decommissioning internal blocks:\\t\").append(\n             decommissioningReplicas);\n       }\n+      if (enteringMaintenanceReplicas \u003e 0) {\n+        res.append(\"\\n EnteringMaintenanceReplicas:\\t\").append(\n+            enteringMaintenanceReplicas);\n+      }\n+      if (inMaintenanceReplicas \u003e 0) {\n+        res.append(\"\\n InMaintenanceReplicas:\\t\").append(\n+            inMaintenanceReplicas);\n+      }\n       return res.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\" Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total files:\\t\").append(totalFiles);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total block groups (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block group size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file block groups (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n        res.append(\"\\n  ********************************\");\n        if(numUnderMinReplicatedBlocks\u003e0){\n          res.append(\"\\n  UNRECOVERABLE BLOCK GROUPS:\\t\").append(numUnderMinReplicatedBlocks);\n          if(totalBlocks\u003e0){\n            res.append(\" (\").append(\n                ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                .append(\" %)\");\n          }\n        }\n        if(corruptFiles\u003e0) {\n          res.append(\n              \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n          if (missingSize \u003e 0) {\n            res.append(\"\\n  MISSING BLOCK GROUPS:\\t\").append(missingIds.size()).append(\n                \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n          }\n          if (corruptBlocks \u003e 0) {\n            res.append(\"\\n  CORRUPT BLOCK GROUPS: \\t\").append(corruptBlocks).append(\n                \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n          }\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally erasure-coded block groups:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-erasure-coded block groups:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-erasure-coded block groups:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Unsatisfactory placement block groups:\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Default ecPolicy:\\t\\t\").append(defaultECPolicy)\n          .append(\"\\n Average block group size:\\t\").append(\n          getReplicationFactor()).append(\"\\n Missing block groups:\\t\\t\").append(\n          missingIds.size()).append(\"\\n Corrupt block groups:\\t\\t\").append(\n          corruptBlocks).append(\"\\n Missing internal blocks:\\t\").append(\n          missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n            \" %)\");\n      }\n      if (decommissionedReplicas \u003e 0) {\n        res.append(\"\\n Decommissioned internal blocks:\\t\").append(\n            decommissionedReplicas);\n      }\n      if (decommissioningReplicas \u003e 0) {\n        res.append(\"\\n Decommissioning internal blocks:\\t\").append(\n            decommissioningReplicas);\n      }\n      if (enteringMaintenanceReplicas \u003e 0) {\n        res.append(\"\\n EnteringMaintenanceReplicas:\\t\").append(\n            enteringMaintenanceReplicas);\n      }\n      if (inMaintenanceReplicas \u003e 0) {\n        res.append(\"\\n InMaintenanceReplicas:\\t\").append(\n            inMaintenanceReplicas);\n      }\n      return res.toString();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "1d37a8812160bb030244a1e6b1c753f962d8d2ed": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8854. Erasure coding: add ECPolicy to replace schema+cellSize in hadoop-hdfs. Contributed by Walter Su.\n",
      "commitDate": "13/08/15 10:04 AM",
      "commitName": "1d37a8812160bb030244a1e6b1c753f962d8d2ed",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "09/07/15 10:55 AM",
      "commitNameOld": "2470a7bf88c7d7e0889905e35671c440c3ae649b",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 34.96,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,94 @@\n     public String toString() {\n       StringBuilder res \u003d new StringBuilder();\n       res.append(\" Total size:\\t\").append(totalSize).append(\" B\");\n       if (totalOpenFilesSize !\u003d 0) {\n         res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n             .append(\" B)\");\n       }\n       res.append(\"\\n Total files:\\t\").append(totalFiles);\n       if (totalOpenFiles !\u003d 0) {\n         res.append(\" (Files currently being written: \").append(totalOpenFiles)\n             .append(\")\");\n       }\n       res.append(\"\\n Total block groups (validated):\\t\").append(totalBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (avg. block group size \").append((totalSize / totalBlocks))\n             .append(\" B)\");\n       }\n       if (totalOpenFilesBlocks !\u003d 0) {\n         res.append(\" (Total open file block groups (not validated): \").append(\n             totalOpenFilesBlocks).append(\")\");\n       }\n       if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n         res.append(\"\\n  ********************************\");\n         if(numUnderMinReplicatedBlocks\u003e0){\n           res.append(\"\\n  UNRECOVERABLE BLOCK GROUPS:\\t\").append(numUnderMinReplicatedBlocks);\n           if(totalBlocks\u003e0){\n             res.append(\" (\").append(\n                 ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                 .append(\" %)\");\n           }\n         }\n         if(corruptFiles\u003e0) {\n           res.append(\n               \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n           if (missingSize \u003e 0) {\n             res.append(\"\\n  MISSING BLOCK GROUPS:\\t\").append(missingIds.size()).append(\n                 \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n           }\n           if (corruptBlocks \u003e 0) {\n             res.append(\"\\n  CORRUPT BLOCK GROUPS: \\t\").append(corruptBlocks).append(\n                 \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n           }\n         }\n         res.append(\"\\n  ********************************\");\n       }\n       res.append(\"\\n Minimally erasure-coded block groups:\\t\").append(\n           numMinReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Over-erasure-coded block groups:\\t\")\n           .append(numOverReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Under-erasure-coded block groups:\\t\").append(\n           numUnderReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Unsatisfactory placement block groups:\\t\")\n           .append(numMisReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n-      res.append(\"\\n Default schema:\\t\\t\").append(defaultSchema)\n+      res.append(\"\\n Default ecPolicy:\\t\\t\").append(defaultECPolicy)\n           .append(\"\\n Average block group size:\\t\").append(\n           getReplicationFactor()).append(\"\\n Missing block groups:\\t\\t\").append(\n           missingIds.size()).append(\"\\n Corrupt block groups:\\t\\t\").append(\n           corruptBlocks).append(\"\\n Missing internal blocks:\\t\").append(\n           missingReplicas);\n       if (totalReplicas \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n             \" %)\");\n       }\n       if (decommissionedReplicas \u003e 0) {\n         res.append(\"\\n Decommissioned internal blocks:\\t\").append(\n             decommissionedReplicas);\n       }\n       if (decommissioningReplicas \u003e 0) {\n         res.append(\"\\n Decommissioning internal blocks:\\t\").append(\n             decommissioningReplicas);\n       }\n       return res.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\" Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total files:\\t\").append(totalFiles);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total block groups (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block group size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file block groups (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n        res.append(\"\\n  ********************************\");\n        if(numUnderMinReplicatedBlocks\u003e0){\n          res.append(\"\\n  UNRECOVERABLE BLOCK GROUPS:\\t\").append(numUnderMinReplicatedBlocks);\n          if(totalBlocks\u003e0){\n            res.append(\" (\").append(\n                ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                .append(\" %)\");\n          }\n        }\n        if(corruptFiles\u003e0) {\n          res.append(\n              \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n          if (missingSize \u003e 0) {\n            res.append(\"\\n  MISSING BLOCK GROUPS:\\t\").append(missingIds.size()).append(\n                \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n          }\n          if (corruptBlocks \u003e 0) {\n            res.append(\"\\n  CORRUPT BLOCK GROUPS: \\t\").append(corruptBlocks).append(\n                \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n          }\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally erasure-coded block groups:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-erasure-coded block groups:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-erasure-coded block groups:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Unsatisfactory placement block groups:\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Default ecPolicy:\\t\\t\").append(defaultECPolicy)\n          .append(\"\\n Average block group size:\\t\").append(\n          getReplicationFactor()).append(\"\\n Missing block groups:\\t\\t\").append(\n          missingIds.size()).append(\"\\n Corrupt block groups:\\t\\t\").append(\n          corruptBlocks).append(\"\\n Missing internal blocks:\\t\").append(\n          missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n            \" %)\");\n      }\n      if (decommissionedReplicas \u003e 0) {\n        res.append(\"\\n Decommissioned internal blocks:\\t\").append(\n            decommissionedReplicas);\n      }\n      if (decommissioningReplicas \u003e 0) {\n        res.append(\"\\n Decommissioning internal blocks:\\t\").append(\n            decommissioningReplicas);\n      }\n      return res.toString();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "2470a7bf88c7d7e0889905e35671c440c3ae649b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8563. Erasure Coding: fsck handles file smaller than a full stripe. Contributed by Walter Su.\n",
      "commitDate": "09/07/15 10:55 AM",
      "commitName": "2470a7bf88c7d7e0889905e35671c440c3ae649b",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "10/06/15 10:18 PM",
      "commitNameOld": "98d340745be682fb251677bb4830aca76119868f",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 28.53,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,96 +1,94 @@\n     public String toString() {\n       StringBuilder res \u003d new StringBuilder();\n       res.append(\" Total size:\\t\").append(totalSize).append(\" B\");\n       if (totalOpenFilesSize !\u003d 0) {\n         res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n             .append(\" B)\");\n       }\n       res.append(\"\\n Total files:\\t\").append(totalFiles);\n       if (totalOpenFiles !\u003d 0) {\n         res.append(\" (Files currently being written: \").append(totalOpenFiles)\n             .append(\")\");\n       }\n       res.append(\"\\n Total block groups (validated):\\t\").append(totalBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (avg. block group size \").append((totalSize / totalBlocks))\n             .append(\" B)\");\n       }\n       if (totalOpenFilesBlocks !\u003d 0) {\n         res.append(\" (Total open file block groups (not validated): \").append(\n             totalOpenFilesBlocks).append(\")\");\n       }\n       if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n         res.append(\"\\n  ********************************\");\n         if(numUnderMinReplicatedBlocks\u003e0){\n           res.append(\"\\n  UNRECOVERABLE BLOCK GROUPS:\\t\").append(numUnderMinReplicatedBlocks);\n           if(totalBlocks\u003e0){\n             res.append(\" (\").append(\n                 ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                 .append(\" %)\");\n           }\n-          res.append(\"\\n  \").append(\"MIN REQUIRED EC BLOCK:\\t\")\n-              .append(minReplication);\n         }\n         if(corruptFiles\u003e0) {\n           res.append(\n               \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n           if (missingSize \u003e 0) {\n             res.append(\"\\n  MISSING BLOCK GROUPS:\\t\").append(missingIds.size()).append(\n                 \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n           }\n           if (corruptBlocks \u003e 0) {\n             res.append(\"\\n  CORRUPT BLOCK GROUPS: \\t\").append(corruptBlocks).append(\n                 \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n           }\n         }\n         res.append(\"\\n  ********************************\");\n       }\n       res.append(\"\\n Minimally erasure-coded block groups:\\t\").append(\n           numMinReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Over-erasure-coded block groups:\\t\")\n           .append(numOverReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Under-erasure-coded block groups:\\t\").append(\n           numUnderReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n-      res.append(\"\\n Unsatisfactory placement block groups:\\t\\t\")\n+      res.append(\"\\n Unsatisfactory placement block groups:\\t\")\n           .append(numMisReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n-      res.append(\"\\n Default schema:\\t\").append(ecSchema)\n+      res.append(\"\\n Default schema:\\t\\t\").append(defaultSchema)\n           .append(\"\\n Average block group size:\\t\").append(\n           getReplicationFactor()).append(\"\\n Missing block groups:\\t\\t\").append(\n           missingIds.size()).append(\"\\n Corrupt block groups:\\t\\t\").append(\n-          corruptBlocks).append(\"\\n Missing ec-blocks:\\t\\t\").append(\n+          corruptBlocks).append(\"\\n Missing internal blocks:\\t\").append(\n           missingReplicas);\n       if (totalReplicas \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n             \" %)\");\n       }\n       if (decommissionedReplicas \u003e 0) {\n-        res.append(\"\\n Decommissioned ec-blocks:\\t\").append(\n+        res.append(\"\\n Decommissioned internal blocks:\\t\").append(\n             decommissionedReplicas);\n       }\n       if (decommissioningReplicas \u003e 0) {\n-        res.append(\"\\n Decommissioning ec-blocks:\\t\").append(\n+        res.append(\"\\n Decommissioning internal blocks:\\t\").append(\n             decommissioningReplicas);\n       }\n       return res.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\" Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total files:\\t\").append(totalFiles);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total block groups (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block group size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file block groups (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n        res.append(\"\\n  ********************************\");\n        if(numUnderMinReplicatedBlocks\u003e0){\n          res.append(\"\\n  UNRECOVERABLE BLOCK GROUPS:\\t\").append(numUnderMinReplicatedBlocks);\n          if(totalBlocks\u003e0){\n            res.append(\" (\").append(\n                ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                .append(\" %)\");\n          }\n        }\n        if(corruptFiles\u003e0) {\n          res.append(\n              \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n          if (missingSize \u003e 0) {\n            res.append(\"\\n  MISSING BLOCK GROUPS:\\t\").append(missingIds.size()).append(\n                \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n          }\n          if (corruptBlocks \u003e 0) {\n            res.append(\"\\n  CORRUPT BLOCK GROUPS: \\t\").append(corruptBlocks).append(\n                \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n          }\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally erasure-coded block groups:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-erasure-coded block groups:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-erasure-coded block groups:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Unsatisfactory placement block groups:\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Default schema:\\t\\t\").append(defaultSchema)\n          .append(\"\\n Average block group size:\\t\").append(\n          getReplicationFactor()).append(\"\\n Missing block groups:\\t\\t\").append(\n          missingIds.size()).append(\"\\n Corrupt block groups:\\t\\t\").append(\n          corruptBlocks).append(\"\\n Missing internal blocks:\\t\").append(\n          missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n            \" %)\");\n      }\n      if (decommissionedReplicas \u003e 0) {\n        res.append(\"\\n Decommissioned internal blocks:\\t\").append(\n            decommissionedReplicas);\n      }\n      if (decommissioningReplicas \u003e 0) {\n        res.append(\"\\n Decommissioning internal blocks:\\t\").append(\n            decommissioningReplicas);\n      }\n      return res.toString();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "0ed92e5b13f6bbc0ea7475bc67488359413a980e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7768. Change fsck to support EC files.  Contributed by Takanobu Asanuma\n",
      "commitDate": "26/05/15 12:07 PM",
      "commitName": "0ed92e5b13f6bbc0ea7475bc67488359413a980e",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "26/05/15 12:02 PM",
      "commitNameOld": "e53fa769c97416af69ea567aecd44f67e896688b",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,99 +1,96 @@\n     public String toString() {\n       StringBuilder res \u003d new StringBuilder();\n-      res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n-          .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n+      res.append(\" Total size:\\t\").append(totalSize).append(\" B\");\n       if (totalOpenFilesSize !\u003d 0) {\n         res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n             .append(\" B)\");\n       }\n-      res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n-          \"\\n Total files:\\t\").append(totalFiles);\n-      res.append(\"\\n Total symlinks:\\t\\t\").append(totalSymlinks);\n+      res.append(\"\\n Total files:\\t\").append(totalFiles);\n       if (totalOpenFiles !\u003d 0) {\n         res.append(\" (Files currently being written: \").append(totalOpenFiles)\n             .append(\")\");\n       }\n-      res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n+      res.append(\"\\n Total block groups (validated):\\t\").append(totalBlocks);\n       if (totalBlocks \u003e 0) {\n-        res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n+        res.append(\" (avg. block group size \").append((totalSize / totalBlocks))\n             .append(\" B)\");\n       }\n       if (totalOpenFilesBlocks !\u003d 0) {\n-        res.append(\" (Total open file blocks (not validated): \").append(\n+        res.append(\" (Total open file block groups (not validated): \").append(\n             totalOpenFilesBlocks).append(\")\");\n       }\n       if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n         res.append(\"\\n  ********************************\");\n         if(numUnderMinReplicatedBlocks\u003e0){\n-          res.append(\"\\n  UNDER MIN REPL\u0027D BLOCKS:\\t\").append(numUnderMinReplicatedBlocks);\n+          res.append(\"\\n  UNRECOVERABLE BLOCK GROUPS:\\t\").append(numUnderMinReplicatedBlocks);\n           if(totalBlocks\u003e0){\n             res.append(\" (\").append(\n                 ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                 .append(\" %)\");\n           }\n-          res.append(\"\\n  \").append(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY + \":\\t\")\n-             .append(minReplication);\n+          res.append(\"\\n  \").append(\"MIN REQUIRED EC BLOCK:\\t\")\n+              .append(minReplication);\n         }\n         if(corruptFiles\u003e0) {\n           res.append(\n               \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n           if (missingSize \u003e 0) {\n-            res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n+            res.append(\"\\n  MISSING BLOCK GROUPS:\\t\").append(missingIds.size()).append(\n                 \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n           }\n           if (corruptBlocks \u003e 0) {\n-            res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks).append(\n+            res.append(\"\\n  CORRUPT BLOCK GROUPS: \\t\").append(corruptBlocks).append(\n                 \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n           }\n         }\n         res.append(\"\\n  ********************************\");\n       }\n-      res.append(\"\\n Minimally replicated blocks:\\t\").append(\n+      res.append(\"\\n Minimally erasure-coded block groups:\\t\").append(\n           numMinReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n-      res.append(\"\\n Over-replicated blocks:\\t\")\n+      res.append(\"\\n Over-erasure-coded block groups:\\t\")\n           .append(numOverReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n-      res.append(\"\\n Under-replicated blocks:\\t\").append(\n+      res.append(\"\\n Under-erasure-coded block groups:\\t\").append(\n           numUnderReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n-      res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n+      res.append(\"\\n Unsatisfactory placement block groups:\\t\\t\")\n           .append(numMisReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n-      res.append(\"\\n Default replication factor:\\t\").append(replication)\n-          .append(\"\\n Average block replication:\\t\").append(\n-              getReplicationFactor()).append(\"\\n Missing blocks:\\t\\t\").append(\n-              missingIds.size()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n-              corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n-              missingReplicas);\n+      res.append(\"\\n Default schema:\\t\").append(ecSchema)\n+          .append(\"\\n Average block group size:\\t\").append(\n+          getReplicationFactor()).append(\"\\n Missing block groups:\\t\\t\").append(\n+          missingIds.size()).append(\"\\n Corrupt block groups:\\t\\t\").append(\n+          corruptBlocks).append(\"\\n Missing ec-blocks:\\t\\t\").append(\n+          missingReplicas);\n       if (totalReplicas \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n             \" %)\");\n       }\n       if (decommissionedReplicas \u003e 0) {\n-        res.append(\"\\n DecommissionedReplicas:\\t\").append(\n+        res.append(\"\\n Decommissioned ec-blocks:\\t\").append(\n             decommissionedReplicas);\n       }\n       if (decommissioningReplicas \u003e 0) {\n-        res.append(\"\\n DecommissioningReplicas:\\t\").append(\n+        res.append(\"\\n Decommissioning ec-blocks:\\t\").append(\n             decommissioningReplicas);\n       }\n       return res.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\" Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total files:\\t\").append(totalFiles);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total block groups (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block group size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file block groups (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n        res.append(\"\\n  ********************************\");\n        if(numUnderMinReplicatedBlocks\u003e0){\n          res.append(\"\\n  UNRECOVERABLE BLOCK GROUPS:\\t\").append(numUnderMinReplicatedBlocks);\n          if(totalBlocks\u003e0){\n            res.append(\" (\").append(\n                ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                .append(\" %)\");\n          }\n          res.append(\"\\n  \").append(\"MIN REQUIRED EC BLOCK:\\t\")\n              .append(minReplication);\n        }\n        if(corruptFiles\u003e0) {\n          res.append(\n              \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n          if (missingSize \u003e 0) {\n            res.append(\"\\n  MISSING BLOCK GROUPS:\\t\").append(missingIds.size()).append(\n                \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n          }\n          if (corruptBlocks \u003e 0) {\n            res.append(\"\\n  CORRUPT BLOCK GROUPS: \\t\").append(corruptBlocks).append(\n                \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n          }\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally erasure-coded block groups:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-erasure-coded block groups:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-erasure-coded block groups:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Unsatisfactory placement block groups:\\t\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Default schema:\\t\").append(ecSchema)\n          .append(\"\\n Average block group size:\\t\").append(\n          getReplicationFactor()).append(\"\\n Missing block groups:\\t\\t\").append(\n          missingIds.size()).append(\"\\n Corrupt block groups:\\t\\t\").append(\n          corruptBlocks).append(\"\\n Missing ec-blocks:\\t\\t\").append(\n          missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n            \" %)\");\n      }\n      if (decommissionedReplicas \u003e 0) {\n        res.append(\"\\n Decommissioned ec-blocks:\\t\").append(\n            decommissionedReplicas);\n      }\n      if (decommissioningReplicas \u003e 0) {\n        res.append(\"\\n Decommissioning ec-blocks:\\t\").append(\n            decommissioningReplicas);\n      }\n      return res.toString();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "0c590e1c097462979f7ee054ad9121345d58655b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8405. Fix a typo in NamenodeFsck.  Contributed by Takanobu Asanuma\n",
      "commitDate": "18/05/15 11:57 AM",
      "commitName": "0c590e1c097462979f7ee054ad9121345d58655b",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "12/05/15 6:29 AM",
      "commitNameOld": "6d5da9484185ca9f585195d6da069b9cd5be4044",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 6.23,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,99 +1,99 @@\n     public String toString() {\n       StringBuilder res \u003d new StringBuilder();\n       res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n           .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n       if (totalOpenFilesSize !\u003d 0) {\n         res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n             .append(\" B)\");\n       }\n       res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n           \"\\n Total files:\\t\").append(totalFiles);\n       res.append(\"\\n Total symlinks:\\t\\t\").append(totalSymlinks);\n       if (totalOpenFiles !\u003d 0) {\n         res.append(\" (Files currently being written: \").append(totalOpenFiles)\n             .append(\")\");\n       }\n       res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n             .append(\" B)\");\n       }\n       if (totalOpenFilesBlocks !\u003d 0) {\n         res.append(\" (Total open file blocks (not validated): \").append(\n             totalOpenFilesBlocks).append(\")\");\n       }\n       if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n         res.append(\"\\n  ********************************\");\n         if(numUnderMinReplicatedBlocks\u003e0){\n           res.append(\"\\n  UNDER MIN REPL\u0027D BLOCKS:\\t\").append(numUnderMinReplicatedBlocks);\n           if(totalBlocks\u003e0){\n             res.append(\" (\").append(\n                 ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                 .append(\" %)\");\n           }\n-          res.append(\"\\n  \").append(\"DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY:\\t\")\n+          res.append(\"\\n  \").append(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY + \":\\t\")\n              .append(minReplication);\n         }\n         if(corruptFiles\u003e0) {\n           res.append(\n               \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n           if (missingSize \u003e 0) {\n             res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n                 \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n           }\n           if (corruptBlocks \u003e 0) {\n             res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks).append(\n                 \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n           }\n         }\n         res.append(\"\\n  ********************************\");\n       }\n       res.append(\"\\n Minimally replicated blocks:\\t\").append(\n           numMinReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Over-replicated blocks:\\t\")\n           .append(numOverReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Under-replicated blocks:\\t\").append(\n           numUnderReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n           .append(numMisReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Default replication factor:\\t\").append(replication)\n           .append(\"\\n Average block replication:\\t\").append(\n               getReplicationFactor()).append(\"\\n Missing blocks:\\t\\t\").append(\n               missingIds.size()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n               corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n               missingReplicas);\n       if (totalReplicas \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n             \" %)\");\n       }\n       if (decommissionedReplicas \u003e 0) {\n         res.append(\"\\n DecommissionedReplicas:\\t\").append(\n             decommissionedReplicas);\n       }\n       if (decommissioningReplicas \u003e 0) {\n         res.append(\"\\n DecommissioningReplicas:\\t\").append(\n             decommissioningReplicas);\n       }\n       return res.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n          .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n          \"\\n Total files:\\t\").append(totalFiles);\n      res.append(\"\\n Total symlinks:\\t\\t\").append(totalSymlinks);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file blocks (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n        res.append(\"\\n  ********************************\");\n        if(numUnderMinReplicatedBlocks\u003e0){\n          res.append(\"\\n  UNDER MIN REPL\u0027D BLOCKS:\\t\").append(numUnderMinReplicatedBlocks);\n          if(totalBlocks\u003e0){\n            res.append(\" (\").append(\n                ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                .append(\" %)\");\n          }\n          res.append(\"\\n  \").append(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY + \":\\t\")\n             .append(minReplication);\n        }\n        if(corruptFiles\u003e0) {\n          res.append(\n              \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n          if (missingSize \u003e 0) {\n            res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n                \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n          }\n          if (corruptBlocks \u003e 0) {\n            res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks).append(\n                \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n          }\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally replicated blocks:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-replicated blocks:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-replicated blocks:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Default replication factor:\\t\").append(replication)\n          .append(\"\\n Average block replication:\\t\").append(\n              getReplicationFactor()).append(\"\\n Missing blocks:\\t\\t\").append(\n              missingIds.size()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n              corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n              missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n            \" %)\");\n      }\n      if (decommissionedReplicas \u003e 0) {\n        res.append(\"\\n DecommissionedReplicas:\\t\").append(\n            decommissionedReplicas);\n      }\n      if (decommissioningReplicas \u003e 0) {\n        res.append(\"\\n DecommissioningReplicas:\\t\").append(\n            decommissioningReplicas);\n      }\n      return res.toString();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "279958b772c25e0633bd967828b7d27d5c0a6a56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7281. Missing block is marked as corrupted block (Ming Ma via Yongjun Zhang)\n",
      "commitDate": "01/05/15 8:42 AM",
      "commitName": "279958b772c25e0633bd967828b7d27d5c0a6a56",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "29/04/15 11:12 AM",
      "commitNameOld": "3dd6395bb2448e5b178a51c864e3c9a3d12e8bc9",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.9,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,97 +1,99 @@\n     public String toString() {\n       StringBuilder res \u003d new StringBuilder();\n       res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n           .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n       if (totalOpenFilesSize !\u003d 0) {\n         res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n             .append(\" B)\");\n       }\n       res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n           \"\\n Total files:\\t\").append(totalFiles);\n       res.append(\"\\n Total symlinks:\\t\\t\").append(totalSymlinks);\n       if (totalOpenFiles !\u003d 0) {\n         res.append(\" (Files currently being written: \").append(totalOpenFiles)\n             .append(\")\");\n       }\n       res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n             .append(\" B)\");\n       }\n       if (totalOpenFilesBlocks !\u003d 0) {\n         res.append(\" (Total open file blocks (not validated): \").append(\n             totalOpenFilesBlocks).append(\")\");\n       }\n       if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n         res.append(\"\\n  ********************************\");\n         if(numUnderMinReplicatedBlocks\u003e0){\n           res.append(\"\\n  UNDER MIN REPL\u0027D BLOCKS:\\t\").append(numUnderMinReplicatedBlocks);\n           if(totalBlocks\u003e0){\n             res.append(\" (\").append(\n                 ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                 .append(\" %)\");\n           }\n           res.append(\"\\n  \").append(\"DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY:\\t\")\n              .append(minReplication);\n         }\n         if(corruptFiles\u003e0) {\n           res.append(\n               \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n           if (missingSize \u003e 0) {\n             res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n                 \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n           }\n           if (corruptBlocks \u003e 0) {\n-            res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks);\n+            res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks).append(\n+                \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n           }\n         }\n         res.append(\"\\n  ********************************\");\n       }\n       res.append(\"\\n Minimally replicated blocks:\\t\").append(\n           numMinReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Over-replicated blocks:\\t\")\n           .append(numOverReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Under-replicated blocks:\\t\").append(\n           numUnderReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n           .append(numMisReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Default replication factor:\\t\").append(replication)\n           .append(\"\\n Average block replication:\\t\").append(\n-              getReplicationFactor()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n+              getReplicationFactor()).append(\"\\n Missing blocks:\\t\\t\").append(\n+              missingIds.size()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n               corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n               missingReplicas);\n       if (totalReplicas \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n             \" %)\");\n       }\n       if (decommissionedReplicas \u003e 0) {\n         res.append(\"\\n DecommissionedReplicas:\\t\").append(\n             decommissionedReplicas);\n       }\n       if (decommissioningReplicas \u003e 0) {\n         res.append(\"\\n DecommissioningReplicas:\\t\").append(\n             decommissioningReplicas);\n       }\n       return res.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n          .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n          \"\\n Total files:\\t\").append(totalFiles);\n      res.append(\"\\n Total symlinks:\\t\\t\").append(totalSymlinks);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file blocks (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n        res.append(\"\\n  ********************************\");\n        if(numUnderMinReplicatedBlocks\u003e0){\n          res.append(\"\\n  UNDER MIN REPL\u0027D BLOCKS:\\t\").append(numUnderMinReplicatedBlocks);\n          if(totalBlocks\u003e0){\n            res.append(\" (\").append(\n                ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                .append(\" %)\");\n          }\n          res.append(\"\\n  \").append(\"DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY:\\t\")\n             .append(minReplication);\n        }\n        if(corruptFiles\u003e0) {\n          res.append(\n              \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n          if (missingSize \u003e 0) {\n            res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n                \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n          }\n          if (corruptBlocks \u003e 0) {\n            res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks).append(\n                \"\\n  CORRUPT SIZE:\\t\\t\").append(corruptSize).append(\" B\");\n          }\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally replicated blocks:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-replicated blocks:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-replicated blocks:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Default replication factor:\\t\").append(replication)\n          .append(\"\\n Average block replication:\\t\").append(\n              getReplicationFactor()).append(\"\\n Missing blocks:\\t\\t\").append(\n              missingIds.size()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n              corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n              missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n            \" %)\");\n      }\n      if (decommissionedReplicas \u003e 0) {\n        res.append(\"\\n DecommissionedReplicas:\\t\").append(\n            decommissionedReplicas);\n      }\n      if (decommissioningReplicas \u003e 0) {\n        res.append(\"\\n DecommissioningReplicas:\\t\").append(\n            decommissioningReplicas);\n      }\n      return res.toString();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "f8f5887209a7d8e53c0a77abef275cbcaf1f7a5b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7933. fsck should also report decommissioning replicas. Contributed by Xiaoyu Yao.\n",
      "commitDate": "11/04/15 1:23 PM",
      "commitName": "f8f5887209a7d8e53c0a77abef275cbcaf1f7a5b",
      "commitAuthor": "cnauroth",
      "commitDateOld": "20/03/15 12:02 PM",
      "commitNameOld": "75ead273bea8a7dad61c4f99c3a16cab2697c498",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 22.06,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,97 @@\n     public String toString() {\n       StringBuilder res \u003d new StringBuilder();\n       res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n           .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n       if (totalOpenFilesSize !\u003d 0) {\n         res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n             .append(\" B)\");\n       }\n       res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n           \"\\n Total files:\\t\").append(totalFiles);\n       res.append(\"\\n Total symlinks:\\t\\t\").append(totalSymlinks);\n       if (totalOpenFiles !\u003d 0) {\n         res.append(\" (Files currently being written: \").append(totalOpenFiles)\n             .append(\")\");\n       }\n       res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n             .append(\" B)\");\n       }\n       if (totalOpenFilesBlocks !\u003d 0) {\n         res.append(\" (Total open file blocks (not validated): \").append(\n             totalOpenFilesBlocks).append(\")\");\n       }\n-      if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks\u003e0) {\n+      if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n         res.append(\"\\n  ********************************\");\n         if(numUnderMinReplicatedBlocks\u003e0){\n           res.append(\"\\n  UNDER MIN REPL\u0027D BLOCKS:\\t\").append(numUnderMinReplicatedBlocks);\n           if(totalBlocks\u003e0){\n             res.append(\" (\").append(\n                 ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                 .append(\" %)\");\n           }\n           res.append(\"\\n  \").append(\"DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY:\\t\")\n              .append(minReplication);\n         }\n         if(corruptFiles\u003e0) {\n           res.append(\n               \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n           if (missingSize \u003e 0) {\n             res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n                 \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n           }\n           if (corruptBlocks \u003e 0) {\n             res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks);\n           }\n         }\n         res.append(\"\\n  ********************************\");\n       }\n       res.append(\"\\n Minimally replicated blocks:\\t\").append(\n           numMinReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Over-replicated blocks:\\t\")\n           .append(numOverReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Under-replicated blocks:\\t\").append(\n           numUnderReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n           .append(numMisReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Default replication factor:\\t\").append(replication)\n           .append(\"\\n Average block replication:\\t\").append(\n               getReplicationFactor()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n               corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n               missingReplicas);\n       if (totalReplicas \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n             \" %)\");\n       }\n+      if (decommissionedReplicas \u003e 0) {\n+        res.append(\"\\n DecommissionedReplicas:\\t\").append(\n+            decommissionedReplicas);\n+      }\n+      if (decommissioningReplicas \u003e 0) {\n+        res.append(\"\\n DecommissioningReplicas:\\t\").append(\n+            decommissioningReplicas);\n+      }\n       return res.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n          .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n          \"\\n Total files:\\t\").append(totalFiles);\n      res.append(\"\\n Total symlinks:\\t\\t\").append(totalSymlinks);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file blocks (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks \u003e 0) {\n        res.append(\"\\n  ********************************\");\n        if(numUnderMinReplicatedBlocks\u003e0){\n          res.append(\"\\n  UNDER MIN REPL\u0027D BLOCKS:\\t\").append(numUnderMinReplicatedBlocks);\n          if(totalBlocks\u003e0){\n            res.append(\" (\").append(\n                ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                .append(\" %)\");\n          }\n          res.append(\"\\n  \").append(\"DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY:\\t\")\n             .append(minReplication);\n        }\n        if(corruptFiles\u003e0) {\n          res.append(\n              \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n          if (missingSize \u003e 0) {\n            res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n                \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n          }\n          if (corruptBlocks \u003e 0) {\n            res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks);\n          }\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally replicated blocks:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-replicated blocks:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-replicated blocks:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Default replication factor:\\t\").append(replication)\n          .append(\"\\n Average block replication:\\t\").append(\n              getReplicationFactor()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n              corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n              missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n            \" %)\");\n      }\n      if (decommissionedReplicas \u003e 0) {\n        res.append(\"\\n DecommissionedReplicas:\\t\").append(\n            decommissionedReplicas);\n      }\n      if (decommissioningReplicas \u003e 0) {\n        res.append(\"\\n DecommissioningReplicas:\\t\").append(\n            decommissioningReplicas);\n      }\n      return res.toString();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "725cc499f00abeeab9f58cbc778e65522eec9d98": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7537. Add \"UNDER MIN REPL\u0027D BLOCKS\" count to fsck.  Contributed by GAO Rui\n",
      "commitDate": "25/02/15 7:45 PM",
      "commitName": "725cc499f00abeeab9f58cbc778e65522eec9d98",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "25/02/15 4:19 PM",
      "commitNameOld": "d140d76a43c88e326b9c2818578f22bd3563b969",
      "commitAuthorOld": "Benoy Antony",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,89 @@\n     public String toString() {\n       StringBuilder res \u003d new StringBuilder();\n       res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n           .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n       if (totalOpenFilesSize !\u003d 0) {\n         res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n             .append(\" B)\");\n       }\n       res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n           \"\\n Total files:\\t\").append(totalFiles);\n       res.append(\"\\n Total symlinks:\\t\\t\").append(totalSymlinks);\n       if (totalOpenFiles !\u003d 0) {\n         res.append(\" (Files currently being written: \").append(totalOpenFiles)\n             .append(\")\");\n       }\n       res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n             .append(\" B)\");\n       }\n       if (totalOpenFilesBlocks !\u003d 0) {\n         res.append(\" (Total open file blocks (not validated): \").append(\n             totalOpenFilesBlocks).append(\")\");\n       }\n-      if (corruptFiles \u003e 0) {\n-        res.append(\"\\n  ********************************\").append(\n-            \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n-        if (missingSize \u003e 0) {\n-          res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n-              \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n+      if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks\u003e0) {\n+        res.append(\"\\n  ********************************\");\n+        if(numUnderMinReplicatedBlocks\u003e0){\n+          res.append(\"\\n  UNDER MIN REPL\u0027D BLOCKS:\\t\").append(numUnderMinReplicatedBlocks);\n+          if(totalBlocks\u003e0){\n+            res.append(\" (\").append(\n+                ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n+                .append(\" %)\");\n+          }\n+          res.append(\"\\n  \").append(\"DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY:\\t\")\n+             .append(minReplication);\n         }\n-        if (corruptBlocks \u003e 0) {\n-          res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks);\n+        if(corruptFiles\u003e0) {\n+          res.append(\n+              \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n+          if (missingSize \u003e 0) {\n+            res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n+                \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n+          }\n+          if (corruptBlocks \u003e 0) {\n+            res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks);\n+          }\n         }\n         res.append(\"\\n  ********************************\");\n       }\n       res.append(\"\\n Minimally replicated blocks:\\t\").append(\n           numMinReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Over-replicated blocks:\\t\")\n           .append(numOverReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Under-replicated blocks:\\t\").append(\n           numUnderReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n           .append(numMisReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Default replication factor:\\t\").append(replication)\n           .append(\"\\n Average block replication:\\t\").append(\n               getReplicationFactor()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n               corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n               missingReplicas);\n       if (totalReplicas \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n             \" %)\");\n       }\n       return res.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n          .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n          \"\\n Total files:\\t\").append(totalFiles);\n      res.append(\"\\n Total symlinks:\\t\\t\").append(totalSymlinks);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file blocks (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0 || numUnderMinReplicatedBlocks\u003e0) {\n        res.append(\"\\n  ********************************\");\n        if(numUnderMinReplicatedBlocks\u003e0){\n          res.append(\"\\n  UNDER MIN REPL\u0027D BLOCKS:\\t\").append(numUnderMinReplicatedBlocks);\n          if(totalBlocks\u003e0){\n            res.append(\" (\").append(\n                ((float) (numUnderMinReplicatedBlocks * 100) / (float) totalBlocks))\n                .append(\" %)\");\n          }\n          res.append(\"\\n  \").append(\"DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY:\\t\")\n             .append(minReplication);\n        }\n        if(corruptFiles\u003e0) {\n          res.append(\n              \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n          if (missingSize \u003e 0) {\n            res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n                \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n          }\n          if (corruptBlocks \u003e 0) {\n            res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks);\n          }\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally replicated blocks:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-replicated blocks:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-replicated blocks:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Default replication factor:\\t\").append(replication)\n          .append(\"\\n Average block replication:\\t\").append(\n              getReplicationFactor()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n              corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n              missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n            \" %)\");\n      }\n      return res.toString();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "1087be1df4707bbadf8b25735513e140dde883bc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4205. fsck fails with symlinks. Contributed by Jason Lowe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495648 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/13 5:41 PM",
      "commitName": "1087be1df4707bbadf8b25735513e140dde883bc",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "19/06/13 9:43 PM",
      "commitNameOld": "c68b1d1b31e304c27e419e810ded0fc97e435ea6",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.83,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,76 @@\n     public String toString() {\n       StringBuilder res \u003d new StringBuilder();\n       res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n           .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n       if (totalOpenFilesSize !\u003d 0) {\n         res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n             .append(\" B)\");\n       }\n       res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n           \"\\n Total files:\\t\").append(totalFiles);\n+      res.append(\"\\n Total symlinks:\\t\\t\").append(totalSymlinks);\n       if (totalOpenFiles !\u003d 0) {\n         res.append(\" (Files currently being written: \").append(totalOpenFiles)\n             .append(\")\");\n       }\n       res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n             .append(\" B)\");\n       }\n       if (totalOpenFilesBlocks !\u003d 0) {\n         res.append(\" (Total open file blocks (not validated): \").append(\n             totalOpenFilesBlocks).append(\")\");\n       }\n       if (corruptFiles \u003e 0) {\n         res.append(\"\\n  ********************************\").append(\n             \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n         if (missingSize \u003e 0) {\n           res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n               \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n         }\n         if (corruptBlocks \u003e 0) {\n           res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks);\n         }\n         res.append(\"\\n  ********************************\");\n       }\n       res.append(\"\\n Minimally replicated blocks:\\t\").append(\n           numMinReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Over-replicated blocks:\\t\")\n           .append(numOverReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Under-replicated blocks:\\t\").append(\n           numUnderReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n           .append(numMisReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Default replication factor:\\t\").append(replication)\n           .append(\"\\n Average block replication:\\t\").append(\n               getReplicationFactor()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n               corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n               missingReplicas);\n       if (totalReplicas \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n             \" %)\");\n       }\n       return res.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n          .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n          \"\\n Total files:\\t\").append(totalFiles);\n      res.append(\"\\n Total symlinks:\\t\\t\").append(totalSymlinks);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file blocks (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0) {\n        res.append(\"\\n  ********************************\").append(\n            \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n        if (missingSize \u003e 0) {\n          res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n              \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n        }\n        if (corruptBlocks \u003e 0) {\n          res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks);\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally replicated blocks:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-replicated blocks:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-replicated blocks:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Default replication factor:\\t\").append(replication)\n          .append(\"\\n Average block replication:\\t\").append(\n              getReplicationFactor()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n              corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n              missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n            \" %)\");\n      }\n      return res.toString();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "d1207cbd8806fc2ae923b24c6e20dfc8730b1c7c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3442. Incorrect count for Missing Replicas in FSCK report. Contributed by Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1345408 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/06/12 5:39 PM",
      "commitName": "d1207cbd8806fc2ae923b24c6e20dfc8730b1c7c",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "01/04/12 3:12 PM",
      "commitNameOld": "be7dd8333a7e56e732171db0781786987de03195",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 61.1,
      "commitsBetweenForRepo": 433,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,75 @@\n     public String toString() {\n       StringBuilder res \u003d new StringBuilder();\n       res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n           .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n       if (totalOpenFilesSize !\u003d 0) {\n         res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n             .append(\" B)\");\n       }\n       res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n           \"\\n Total files:\\t\").append(totalFiles);\n       if (totalOpenFiles !\u003d 0) {\n         res.append(\" (Files currently being written: \").append(totalOpenFiles)\n             .append(\")\");\n       }\n       res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n             .append(\" B)\");\n       }\n       if (totalOpenFilesBlocks !\u003d 0) {\n         res.append(\" (Total open file blocks (not validated): \").append(\n             totalOpenFilesBlocks).append(\")\");\n       }\n       if (corruptFiles \u003e 0) {\n         res.append(\"\\n  ********************************\").append(\n             \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n         if (missingSize \u003e 0) {\n           res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n               \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n         }\n         if (corruptBlocks \u003e 0) {\n           res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks);\n         }\n         res.append(\"\\n  ********************************\");\n       }\n       res.append(\"\\n Minimally replicated blocks:\\t\").append(\n           numMinReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Over-replicated blocks:\\t\")\n           .append(numOverReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Under-replicated blocks:\\t\").append(\n           numUnderReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n           .append(numMisReplicatedBlocks);\n       if (totalBlocks \u003e 0) {\n         res.append(\" (\").append(\n             ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n             .append(\" %)\");\n       }\n       res.append(\"\\n Default replication factor:\\t\").append(replication)\n           .append(\"\\n Average block replication:\\t\").append(\n               getReplicationFactor()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n               corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n               missingReplicas);\n       if (totalReplicas \u003e 0) {\n         res.append(\" (\").append(\n-            ((float) (missingReplicas * 100) / (float) totalReplicas)).append(\n+            ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n             \" %)\");\n       }\n       return res.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n          .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n          \"\\n Total files:\\t\").append(totalFiles);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file blocks (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0) {\n        res.append(\"\\n  ********************************\").append(\n            \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n        if (missingSize \u003e 0) {\n          res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n              \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n        }\n        if (corruptBlocks \u003e 0) {\n          res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks);\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally replicated blocks:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-replicated blocks:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-replicated blocks:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Default replication factor:\\t\").append(replication)\n          .append(\"\\n Average block replication:\\t\").append(\n              getReplicationFactor()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n              corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n              missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) numExpectedReplicas)).append(\n            \" %)\");\n      }\n      return res.toString();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n          .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n          \"\\n Total files:\\t\").append(totalFiles);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file blocks (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0) {\n        res.append(\"\\n  ********************************\").append(\n            \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n        if (missingSize \u003e 0) {\n          res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n              \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n        }\n        if (corruptBlocks \u003e 0) {\n          res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks);\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally replicated blocks:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-replicated blocks:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-replicated blocks:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Default replication factor:\\t\").append(replication)\n          .append(\"\\n Average block replication:\\t\").append(\n              getReplicationFactor()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n              corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n              missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) totalReplicas)).append(\n            \" %)\");\n      }\n      return res.toString();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n          .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n          \"\\n Total files:\\t\").append(totalFiles);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file blocks (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0) {\n        res.append(\"\\n  ********************************\").append(\n            \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n        if (missingSize \u003e 0) {\n          res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n              \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n        }\n        if (corruptBlocks \u003e 0) {\n          res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks);\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally replicated blocks:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-replicated blocks:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-replicated blocks:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Default replication factor:\\t\").append(replication)\n          .append(\"\\n Average block replication:\\t\").append(\n              getReplicationFactor()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n              corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n              missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) totalReplicas)).append(\n            \" %)\");\n      }\n      return res.toString();\n    }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java"
      }
    },
    "498e2901036134d6a028e333caa4cc51558dcf5b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2238. In NamenodeFsck.toString(), uses StringBuilder.(..) instead of string concatenation.  Contributed by Uma Maheswara Rao G\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1154973 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/11 7:27 AM",
      "commitName": "498e2901036134d6a028e333caa4cc51558dcf5b",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "19/07/11 7:23 AM",
      "commitNameOld": "710e5a960e8af1d4c73e386041096aacfee8b828",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 20.0,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,75 @@\n     public String toString() {\n       StringBuilder res \u003d new StringBuilder();\n-      res.append(\"Status: \" + (isHealthy() ? \"HEALTHY\" : \"CORRUPT\"));\n-      res.append(\"\\n Total size:\\t\" + totalSize + \" B\");\n-      if (totalOpenFilesSize !\u003d 0) \n-        res.append(\" (Total open files size: \" + totalOpenFilesSize + \" B)\");\n-      res.append(\"\\n Total dirs:\\t\" + totalDirs);\n-      res.append(\"\\n Total files:\\t\" + totalFiles);\n-      if (totalOpenFiles !\u003d 0)\n-        res.append(\" (Files currently being written: \" + \n-                   totalOpenFiles + \")\");\n-      res.append(\"\\n Total blocks (validated):\\t\" + totalBlocks);\n-      if (totalBlocks \u003e 0) res.append(\" (avg. block size \"\n-                                      + (totalSize / totalBlocks) + \" B)\");\n-      if (totalOpenFilesBlocks !\u003d 0)\n-        res.append(\" (Total open file blocks (not validated): \" + \n-                   totalOpenFilesBlocks + \")\");\n-      if (corruptFiles \u003e 0) { \n-        res.append(\"\\n  ********************************\");\n-        res.append(\"\\n  CORRUPT FILES:\\t\" + corruptFiles);\n+      res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n+          .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n+      if (totalOpenFilesSize !\u003d 0) {\n+        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n+            .append(\" B)\");\n+      }\n+      res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n+          \"\\n Total files:\\t\").append(totalFiles);\n+      if (totalOpenFiles !\u003d 0) {\n+        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n+            .append(\")\");\n+      }\n+      res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n+      if (totalBlocks \u003e 0) {\n+        res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n+            .append(\" B)\");\n+      }\n+      if (totalOpenFilesBlocks !\u003d 0) {\n+        res.append(\" (Total open file blocks (not validated): \").append(\n+            totalOpenFilesBlocks).append(\")\");\n+      }\n+      if (corruptFiles \u003e 0) {\n+        res.append(\"\\n  ********************************\").append(\n+            \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n         if (missingSize \u003e 0) {\n-          res.append(\"\\n  MISSING BLOCKS:\\t\" + missingIds.size());\n-          res.append(\"\\n  MISSING SIZE:\\t\\t\" + missingSize + \" B\");\n+          res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n+              \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n         }\n         if (corruptBlocks \u003e 0) {\n-          res.append(\"\\n  CORRUPT BLOCKS: \\t\" + corruptBlocks);\n+          res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks);\n         }\n         res.append(\"\\n  ********************************\");\n       }\n-      res.append(\"\\n Minimally replicated blocks:\\t\" + numMinReplicatedBlocks);\n-      if (totalBlocks \u003e 0)        res.append(\" (\" + ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks) + \" %)\");\n-      res.append(\"\\n Over-replicated blocks:\\t\" + numOverReplicatedBlocks);\n-      if (totalBlocks \u003e 0)        res.append(\" (\" + ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks) + \" %)\");\n-      res.append(\"\\n Under-replicated blocks:\\t\" + numUnderReplicatedBlocks);\n-      if (totalBlocks \u003e 0)        res.append(\" (\" + ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks) + \" %)\");\n-      res.append(\"\\n Mis-replicated blocks:\\t\\t\" + numMisReplicatedBlocks);\n-      if (totalBlocks \u003e 0)        res.append(\" (\" + ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks) + \" %)\");\n-      res.append(\"\\n Default replication factor:\\t\" + replication);\n-      res.append(\"\\n Average block replication:\\t\" + getReplicationFactor());\n-      res.append(\"\\n Corrupt blocks:\\t\\t\" + corruptBlocks);\n-      res.append(\"\\n Missing replicas:\\t\\t\" + missingReplicas);\n-      if (totalReplicas \u003e 0)        res.append(\" (\" + ((float) (missingReplicas * 100) / (float) totalReplicas) + \" %)\");\n+      res.append(\"\\n Minimally replicated blocks:\\t\").append(\n+          numMinReplicatedBlocks);\n+      if (totalBlocks \u003e 0) {\n+        res.append(\" (\").append(\n+            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n+            .append(\" %)\");\n+      }\n+      res.append(\"\\n Over-replicated blocks:\\t\")\n+          .append(numOverReplicatedBlocks);\n+      if (totalBlocks \u003e 0) {\n+        res.append(\" (\").append(\n+            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n+            .append(\" %)\");\n+      }\n+      res.append(\"\\n Under-replicated blocks:\\t\").append(\n+          numUnderReplicatedBlocks);\n+      if (totalBlocks \u003e 0) {\n+        res.append(\" (\").append(\n+            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n+            .append(\" %)\");\n+      }\n+      res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n+          .append(numMisReplicatedBlocks);\n+      if (totalBlocks \u003e 0) {\n+        res.append(\" (\").append(\n+            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n+            .append(\" %)\");\n+      }\n+      res.append(\"\\n Default replication factor:\\t\").append(replication)\n+          .append(\"\\n Average block replication:\\t\").append(\n+              getReplicationFactor()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n+              corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n+              missingReplicas);\n+      if (totalReplicas \u003e 0) {\n+        res.append(\" (\").append(\n+            ((float) (missingReplicas * 100) / (float) totalReplicas)).append(\n+            \" %)\");\n+      }\n       return res.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\"Status: \").append((isHealthy() ? \"HEALTHY\" : \"CORRUPT\"))\n          .append(\"\\n Total size:\\t\").append(totalSize).append(\" B\");\n      if (totalOpenFilesSize !\u003d 0) {\n        res.append(\" (Total open files size: \").append(totalOpenFilesSize)\n            .append(\" B)\");\n      }\n      res.append(\"\\n Total dirs:\\t\").append(totalDirs).append(\n          \"\\n Total files:\\t\").append(totalFiles);\n      if (totalOpenFiles !\u003d 0) {\n        res.append(\" (Files currently being written: \").append(totalOpenFiles)\n            .append(\")\");\n      }\n      res.append(\"\\n Total blocks (validated):\\t\").append(totalBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (avg. block size \").append((totalSize / totalBlocks))\n            .append(\" B)\");\n      }\n      if (totalOpenFilesBlocks !\u003d 0) {\n        res.append(\" (Total open file blocks (not validated): \").append(\n            totalOpenFilesBlocks).append(\")\");\n      }\n      if (corruptFiles \u003e 0) {\n        res.append(\"\\n  ********************************\").append(\n            \"\\n  CORRUPT FILES:\\t\").append(corruptFiles);\n        if (missingSize \u003e 0) {\n          res.append(\"\\n  MISSING BLOCKS:\\t\").append(missingIds.size()).append(\n              \"\\n  MISSING SIZE:\\t\\t\").append(missingSize).append(\" B\");\n        }\n        if (corruptBlocks \u003e 0) {\n          res.append(\"\\n  CORRUPT BLOCKS: \\t\").append(corruptBlocks);\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally replicated blocks:\\t\").append(\n          numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Over-replicated blocks:\\t\")\n          .append(numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Under-replicated blocks:\\t\").append(\n          numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Mis-replicated blocks:\\t\\t\")\n          .append(numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks))\n            .append(\" %)\");\n      }\n      res.append(\"\\n Default replication factor:\\t\").append(replication)\n          .append(\"\\n Average block replication:\\t\").append(\n              getReplicationFactor()).append(\"\\n Corrupt blocks:\\t\\t\").append(\n              corruptBlocks).append(\"\\n Missing replicas:\\t\\t\").append(\n              missingReplicas);\n      if (totalReplicas \u003e 0) {\n        res.append(\" (\").append(\n            ((float) (missingReplicas * 100) / (float) totalReplicas)).append(\n            \" %)\");\n      }\n      return res.toString();\n    }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,44 @@\n+    public String toString() {\n+      StringBuilder res \u003d new StringBuilder();\n+      res.append(\"Status: \" + (isHealthy() ? \"HEALTHY\" : \"CORRUPT\"));\n+      res.append(\"\\n Total size:\\t\" + totalSize + \" B\");\n+      if (totalOpenFilesSize !\u003d 0) \n+        res.append(\" (Total open files size: \" + totalOpenFilesSize + \" B)\");\n+      res.append(\"\\n Total dirs:\\t\" + totalDirs);\n+      res.append(\"\\n Total files:\\t\" + totalFiles);\n+      if (totalOpenFiles !\u003d 0)\n+        res.append(\" (Files currently being written: \" + \n+                   totalOpenFiles + \")\");\n+      res.append(\"\\n Total blocks (validated):\\t\" + totalBlocks);\n+      if (totalBlocks \u003e 0) res.append(\" (avg. block size \"\n+                                      + (totalSize / totalBlocks) + \" B)\");\n+      if (totalOpenFilesBlocks !\u003d 0)\n+        res.append(\" (Total open file blocks (not validated): \" + \n+                   totalOpenFilesBlocks + \")\");\n+      if (corruptFiles \u003e 0) { \n+        res.append(\"\\n  ********************************\");\n+        res.append(\"\\n  CORRUPT FILES:\\t\" + corruptFiles);\n+        if (missingSize \u003e 0) {\n+          res.append(\"\\n  MISSING BLOCKS:\\t\" + missingIds.size());\n+          res.append(\"\\n  MISSING SIZE:\\t\\t\" + missingSize + \" B\");\n+        }\n+        if (corruptBlocks \u003e 0) {\n+          res.append(\"\\n  CORRUPT BLOCKS: \\t\" + corruptBlocks);\n+        }\n+        res.append(\"\\n  ********************************\");\n+      }\n+      res.append(\"\\n Minimally replicated blocks:\\t\" + numMinReplicatedBlocks);\n+      if (totalBlocks \u003e 0)        res.append(\" (\" + ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks) + \" %)\");\n+      res.append(\"\\n Over-replicated blocks:\\t\" + numOverReplicatedBlocks);\n+      if (totalBlocks \u003e 0)        res.append(\" (\" + ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks) + \" %)\");\n+      res.append(\"\\n Under-replicated blocks:\\t\" + numUnderReplicatedBlocks);\n+      if (totalBlocks \u003e 0)        res.append(\" (\" + ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks) + \" %)\");\n+      res.append(\"\\n Mis-replicated blocks:\\t\\t\" + numMisReplicatedBlocks);\n+      if (totalBlocks \u003e 0)        res.append(\" (\" + ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks) + \" %)\");\n+      res.append(\"\\n Default replication factor:\\t\" + replication);\n+      res.append(\"\\n Average block replication:\\t\" + getReplicationFactor());\n+      res.append(\"\\n Corrupt blocks:\\t\\t\" + corruptBlocks);\n+      res.append(\"\\n Missing replicas:\\t\\t\" + missingReplicas);\n+      if (totalReplicas \u003e 0)        res.append(\" (\" + ((float) (missingReplicas * 100) / (float) totalReplicas) + \" %)\");\n+      return res.toString();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder res \u003d new StringBuilder();\n      res.append(\"Status: \" + (isHealthy() ? \"HEALTHY\" : \"CORRUPT\"));\n      res.append(\"\\n Total size:\\t\" + totalSize + \" B\");\n      if (totalOpenFilesSize !\u003d 0) \n        res.append(\" (Total open files size: \" + totalOpenFilesSize + \" B)\");\n      res.append(\"\\n Total dirs:\\t\" + totalDirs);\n      res.append(\"\\n Total files:\\t\" + totalFiles);\n      if (totalOpenFiles !\u003d 0)\n        res.append(\" (Files currently being written: \" + \n                   totalOpenFiles + \")\");\n      res.append(\"\\n Total blocks (validated):\\t\" + totalBlocks);\n      if (totalBlocks \u003e 0) res.append(\" (avg. block size \"\n                                      + (totalSize / totalBlocks) + \" B)\");\n      if (totalOpenFilesBlocks !\u003d 0)\n        res.append(\" (Total open file blocks (not validated): \" + \n                   totalOpenFilesBlocks + \")\");\n      if (corruptFiles \u003e 0) { \n        res.append(\"\\n  ********************************\");\n        res.append(\"\\n  CORRUPT FILES:\\t\" + corruptFiles);\n        if (missingSize \u003e 0) {\n          res.append(\"\\n  MISSING BLOCKS:\\t\" + missingIds.size());\n          res.append(\"\\n  MISSING SIZE:\\t\\t\" + missingSize + \" B\");\n        }\n        if (corruptBlocks \u003e 0) {\n          res.append(\"\\n  CORRUPT BLOCKS: \\t\" + corruptBlocks);\n        }\n        res.append(\"\\n  ********************************\");\n      }\n      res.append(\"\\n Minimally replicated blocks:\\t\" + numMinReplicatedBlocks);\n      if (totalBlocks \u003e 0)        res.append(\" (\" + ((float) (numMinReplicatedBlocks * 100) / (float) totalBlocks) + \" %)\");\n      res.append(\"\\n Over-replicated blocks:\\t\" + numOverReplicatedBlocks);\n      if (totalBlocks \u003e 0)        res.append(\" (\" + ((float) (numOverReplicatedBlocks * 100) / (float) totalBlocks) + \" %)\");\n      res.append(\"\\n Under-replicated blocks:\\t\" + numUnderReplicatedBlocks);\n      if (totalBlocks \u003e 0)        res.append(\" (\" + ((float) (numUnderReplicatedBlocks * 100) / (float) totalBlocks) + \" %)\");\n      res.append(\"\\n Mis-replicated blocks:\\t\\t\" + numMisReplicatedBlocks);\n      if (totalBlocks \u003e 0)        res.append(\" (\" + ((float) (numMisReplicatedBlocks * 100) / (float) totalBlocks) + \" %)\");\n      res.append(\"\\n Default replication factor:\\t\" + replication);\n      res.append(\"\\n Average block replication:\\t\" + getReplicationFactor());\n      res.append(\"\\n Corrupt blocks:\\t\\t\" + corruptBlocks);\n      res.append(\"\\n Missing replicas:\\t\\t\" + missingReplicas);\n      if (totalReplicas \u003e 0)        res.append(\" (\" + ((float) (missingReplicas * 100) / (float) totalReplicas) + \" %)\");\n      return res.toString();\n    }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java"
    }
  }
}