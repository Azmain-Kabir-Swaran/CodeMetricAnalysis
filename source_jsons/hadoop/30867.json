{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CosmosDBDocumentStoreWriter.java",
  "functionName": "createDatabase",
  "functionId": "createDatabase",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/writer/cosmosdb/CosmosDBDocumentStoreWriter.java",
  "functionStartLine": 101,
  "functionEndLine": 133,
  "numCommitsSeen": 3,
  "timeTaken": 965,
  "changeHistory": [
    "ccaa99c9235e0c6922e56f93254583eca49a12e1",
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40"
  ],
  "changeHistoryShort": {
    "ccaa99c9235e0c6922e56f93254583eca49a12e1": "Ybodychange",
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ccaa99c9235e0c6922e56f93254583eca49a12e1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16381. The JSON License is included in binary tarball via azure-documentdb:1.16.2. Contributed by Sushil Ks.\n",
      "commitDate": "10/07/19 9:49 PM",
      "commitName": "ccaa99c9235e0c6922e56f93254583eca49a12e1",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "12/04/19 6:28 PM",
      "commitNameOld": "1943db557124439f9f41c18a618455ccf4c3e6cc",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 89.14,
      "commitsBetweenForRepo": 592,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,33 @@\n   public void createDatabase() {\n-    try {\n-      client.readDatabase(String.format(\n-          DATABASE_LINK, databaseName), new RequestOptions());\n-      LOG.info(\"Database {} already exists.\", databaseName);\n-    } catch (DocumentClientException docExceptionOnRead) {\n-      if (docExceptionOnRead.getStatusCode() \u003d\u003d  404) {\n-        LOG.info(\"Creating new Database : {}\", databaseName);\n-        Database databaseDefinition \u003d new Database();\n-        databaseDefinition.setId(databaseName);\n-        try {\n-          client.createDatabase(databaseDefinition, new RequestOptions());\n-        } catch (DocumentClientException docExceptionOnCreate) {\n-          LOG.error(\"Unable to create new Database : {}\", databaseName,\n-              docExceptionOnCreate);\n-        }\n-      } else {\n-        LOG.error(\"Error while reading Database : {}\", databaseName,\n-            docExceptionOnRead);\n-      }\n-    }\n+    Observable\u003cResourceResponse\u003cDatabase\u003e\u003e databaseReadObs \u003d\n+        client.readDatabase(String.format(DATABASE_LINK, databaseName), null);\n+\n+    Observable\u003cResourceResponse\u003cDatabase\u003e\u003e databaseExistenceObs \u003d\n+        databaseReadObs\n+            .doOnNext(databaseResourceResponse -\u003e\n+                LOG.info(\"Database {} already exists.\", databaseName))\n+            .onErrorResumeNext(throwable -\u003e {\n+              // if the database doesn\u0027t exists\n+              // readDatabase() will result in 404 error\n+              if (throwable instanceof DocumentClientException) {\n+                DocumentClientException de \u003d\n+                    (DocumentClientException) throwable;\n+                if (de.getStatusCode() \u003d\u003d 404) {\n+                  // if the database doesn\u0027t exist, create it.\n+                  LOG.info(\"Creating new Database : {}\", databaseName);\n+\n+                  Database dbDefinition \u003d new Database();\n+                  dbDefinition.setId(databaseName);\n+\n+                  return client.createDatabase(dbDefinition, null);\n+                }\n+              }\n+              // some unexpected failure in reading database happened.\n+              // pass the error up.\n+              LOG.error(\"Reading database : {} if it exists failed.\",\n+                  databaseName, throwable);\n+              return Observable.error(throwable);\n+            });\n+    // wait for completion\n+    databaseExistenceObs.toCompletable().await();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void createDatabase() {\n    Observable\u003cResourceResponse\u003cDatabase\u003e\u003e databaseReadObs \u003d\n        client.readDatabase(String.format(DATABASE_LINK, databaseName), null);\n\n    Observable\u003cResourceResponse\u003cDatabase\u003e\u003e databaseExistenceObs \u003d\n        databaseReadObs\n            .doOnNext(databaseResourceResponse -\u003e\n                LOG.info(\"Database {} already exists.\", databaseName))\n            .onErrorResumeNext(throwable -\u003e {\n              // if the database doesn\u0027t exists\n              // readDatabase() will result in 404 error\n              if (throwable instanceof DocumentClientException) {\n                DocumentClientException de \u003d\n                    (DocumentClientException) throwable;\n                if (de.getStatusCode() \u003d\u003d 404) {\n                  // if the database doesn\u0027t exist, create it.\n                  LOG.info(\"Creating new Database : {}\", databaseName);\n\n                  Database dbDefinition \u003d new Database();\n                  dbDefinition.setId(databaseName);\n\n                  return client.createDatabase(dbDefinition, null);\n                }\n              }\n              // some unexpected failure in reading database happened.\n              // pass the error up.\n              LOG.error(\"Reading database : {} if it exists failed.\",\n                  databaseName, throwable);\n              return Observable.error(throwable);\n            });\n    // wait for completion\n    databaseExistenceObs.toCompletable().await();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/writer/cosmosdb/CosmosDBDocumentStoreWriter.java",
      "extendedDetails": {}
    },
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9016 DocumentStore as a backend for ATSv2. Contributed by Sushil Ks.\n",
      "commitDate": "13/03/19 4:45 PM",
      "commitName": "f235a942d5b7cab86f0cb4f5ba285f07cd939a40",
      "commitAuthor": "Vrushali C",
      "diff": "@@ -0,0 +1,22 @@\n+  public void createDatabase() {\n+    try {\n+      client.readDatabase(String.format(\n+          DATABASE_LINK, databaseName), new RequestOptions());\n+      LOG.info(\"Database {} already exists.\", databaseName);\n+    } catch (DocumentClientException docExceptionOnRead) {\n+      if (docExceptionOnRead.getStatusCode() \u003d\u003d  404) {\n+        LOG.info(\"Creating new Database : {}\", databaseName);\n+        Database databaseDefinition \u003d new Database();\n+        databaseDefinition.setId(databaseName);\n+        try {\n+          client.createDatabase(databaseDefinition, new RequestOptions());\n+        } catch (DocumentClientException docExceptionOnCreate) {\n+          LOG.error(\"Unable to create new Database : {}\", databaseName,\n+              docExceptionOnCreate);\n+        }\n+      } else {\n+        LOG.error(\"Error while reading Database : {}\", databaseName,\n+            docExceptionOnRead);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void createDatabase() {\n    try {\n      client.readDatabase(String.format(\n          DATABASE_LINK, databaseName), new RequestOptions());\n      LOG.info(\"Database {} already exists.\", databaseName);\n    } catch (DocumentClientException docExceptionOnRead) {\n      if (docExceptionOnRead.getStatusCode() \u003d\u003d  404) {\n        LOG.info(\"Creating new Database : {}\", databaseName);\n        Database databaseDefinition \u003d new Database();\n        databaseDefinition.setId(databaseName);\n        try {\n          client.createDatabase(databaseDefinition, new RequestOptions());\n        } catch (DocumentClientException docExceptionOnCreate) {\n          LOG.error(\"Unable to create new Database : {}\", databaseName,\n              docExceptionOnCreate);\n        }\n      } else {\n        LOG.error(\"Error while reading Database : {}\", databaseName,\n            docExceptionOnRead);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/writer/cosmosdb/CosmosDBDocumentStoreWriter.java"
    }
  }
}