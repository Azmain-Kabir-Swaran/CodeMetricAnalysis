{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMNodeLabelsManager.java",
  "functionName": "activateNode",
  "functionId": "activateNode___nodeId-NodeId__resource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/RMNodeLabelsManager.java",
  "functionStartLine": 229,
  "functionEndLine": 266,
  "numCommitsSeen": 22,
  "timeTaken": 2034,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "e1feb4ea1a532d680d6ca69b55ffcae1552d64f0",
    "5bd984691b3e3df5d8aac910295138996e7a5839",
    "abae63caf9c53b404f2f2db7d482555484eaeaf8",
    "db7f1653198b950e89567c06898d64f6b930a0ee"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "e1feb4ea1a532d680d6ca69b55ffcae1552d64f0": "Ybodychange",
    "5bd984691b3e3df5d8aac910295138996e7a5839": "Ybodychange",
    "abae63caf9c53b404f2f2db7d482555484eaeaf8": "Ybodychange",
    "db7f1653198b950e89567c06898d64f6b930a0ee": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/06/17 10:12 AM",
      "commitNameOld": "ee89ac84e68d3e181b75c63f74a0444f9d28146f",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 626.19,
      "commitsBetweenForRepo": 5292,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,38 @@\n   public void activateNode(NodeId nodeId, Resource resource) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n-      \n       // save if we have a node before\n       Map\u003cString, Host\u003e before \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n       \n       createHostIfNonExisted(nodeId.getHost());\n       try {\n         createNodeIfNonExisted(nodeId);\n       } catch (IOException e) {\n         LOG.error(\"This shouldn\u0027t happen, cannot get host in nodeCollection\"\n             + \" associated to the node being activated\");\n         return;\n       }\n \n       Node nm \u003d getNMInNodeSet(nodeId);\n       nm.resource \u003d resource;\n       nm.running \u003d true;\n \n       // Add node in labelsCollection\n       Set\u003cString\u003e labelsForNode \u003d getLabelsByNode(nodeId);\n       if (labelsForNode !\u003d null) {\n         for (String label : labelsForNode) {\n           RMNodeLabel labelInfo \u003d labelCollections.get(label);\n           if(labelInfo !\u003d null) {\n             labelInfo.addNodeId(nodeId);\n           }\n         }\n       }\n       \n       // get the node after edition\n       Map\u003cString, Host\u003e after \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n       \n       updateResourceMappings(before, after);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void activateNode(NodeId nodeId, Resource resource) {\n    writeLock.lock();\n    try {\n      // save if we have a node before\n      Map\u003cString, Host\u003e before \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n      \n      createHostIfNonExisted(nodeId.getHost());\n      try {\n        createNodeIfNonExisted(nodeId);\n      } catch (IOException e) {\n        LOG.error(\"This shouldn\u0027t happen, cannot get host in nodeCollection\"\n            + \" associated to the node being activated\");\n        return;\n      }\n\n      Node nm \u003d getNMInNodeSet(nodeId);\n      nm.resource \u003d resource;\n      nm.running \u003d true;\n\n      // Add node in labelsCollection\n      Set\u003cString\u003e labelsForNode \u003d getLabelsByNode(nodeId);\n      if (labelsForNode !\u003d null) {\n        for (String label : labelsForNode) {\n          RMNodeLabel labelInfo \u003d labelCollections.get(label);\n          if(labelInfo !\u003d null) {\n            labelInfo.addNodeId(nodeId);\n          }\n        }\n      }\n      \n      // get the node after edition\n      Map\u003cString, Host\u003e after \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n      \n      updateResourceMappings(before, after);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/RMNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "e1feb4ea1a532d680d6ca69b55ffcae1552d64f0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3345. Add non-exclusive node label API. Contributed by Wangda Tan\n",
      "commitDate": "20/03/15 7:04 PM",
      "commitName": "e1feb4ea1a532d680d6ca69b55ffcae1552d64f0",
      "commitAuthor": "Jian He",
      "commitDateOld": "18/02/15 11:51 AM",
      "commitNameOld": "f5da5566d9c392a5df71a2dce4c2d0d50eea51ee",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 30.26,
      "commitsBetweenForRepo": 262,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public void activateNode(NodeId nodeId, Resource resource) {\n     try {\n       writeLock.lock();\n       \n       // save if we have a node before\n       Map\u003cString, Host\u003e before \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n       \n       createHostIfNonExisted(nodeId.getHost());\n       try {\n         createNodeIfNonExisted(nodeId);\n       } catch (IOException e) {\n         LOG.error(\"This shouldn\u0027t happen, cannot get host in nodeCollection\"\n             + \" associated to the node being activated\");\n         return;\n       }\n \n       Node nm \u003d getNMInNodeSet(nodeId);\n       nm.resource \u003d resource;\n       nm.running \u003d true;\n \n       // Add node in labelsCollection\n       Set\u003cString\u003e labelsForNode \u003d getLabelsByNode(nodeId);\n       if (labelsForNode !\u003d null) {\n         for (String label : labelsForNode) {\n-          NodeLabel labelInfo \u003d labelCollections.get(label);\n+          RMNodeLabel labelInfo \u003d labelCollections.get(label);\n           if(labelInfo !\u003d null) {\n             labelInfo.addNodeId(nodeId);\n           }\n         }\n       }\n       \n       // get the node after edition\n       Map\u003cString, Host\u003e after \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n       \n       updateResourceMappings(before, after);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void activateNode(NodeId nodeId, Resource resource) {\n    try {\n      writeLock.lock();\n      \n      // save if we have a node before\n      Map\u003cString, Host\u003e before \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n      \n      createHostIfNonExisted(nodeId.getHost());\n      try {\n        createNodeIfNonExisted(nodeId);\n      } catch (IOException e) {\n        LOG.error(\"This shouldn\u0027t happen, cannot get host in nodeCollection\"\n            + \" associated to the node being activated\");\n        return;\n      }\n\n      Node nm \u003d getNMInNodeSet(nodeId);\n      nm.resource \u003d resource;\n      nm.running \u003d true;\n\n      // Add node in labelsCollection\n      Set\u003cString\u003e labelsForNode \u003d getLabelsByNode(nodeId);\n      if (labelsForNode !\u003d null) {\n        for (String label : labelsForNode) {\n          RMNodeLabel labelInfo \u003d labelCollections.get(label);\n          if(labelInfo !\u003d null) {\n            labelInfo.addNodeId(nodeId);\n          }\n        }\n      }\n      \n      // get the node after edition\n      Map\u003cString, Host\u003e after \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n      \n      updateResourceMappings(before, after);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/RMNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "5bd984691b3e3df5d8aac910295138996e7a5839": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3075. NodeLabelsManager implementation to retrieve label to node mapping (Varun Saxena via wangda)\n",
      "commitDate": "03/02/15 12:52 PM",
      "commitName": "5bd984691b3e3df5d8aac910295138996e7a5839",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/01/15 5:49 PM",
      "commitNameOld": "a2604062681230442eefae79815db5d77ccc4c2e",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 24.79,
      "commitsBetweenForRepo": 172,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,39 @@\n   public void activateNode(NodeId nodeId, Resource resource) {\n     try {\n       writeLock.lock();\n       \n       // save if we have a node before\n       Map\u003cString, Host\u003e before \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n       \n       createHostIfNonExisted(nodeId.getHost());\n       try {\n         createNodeIfNonExisted(nodeId);\n       } catch (IOException e) {\n         LOG.error(\"This shouldn\u0027t happen, cannot get host in nodeCollection\"\n             + \" associated to the node being activated\");\n         return;\n       }\n \n       Node nm \u003d getNMInNodeSet(nodeId);\n       nm.resource \u003d resource;\n       nm.running \u003d true;\n+\n+      // Add node in labelsCollection\n+      Set\u003cString\u003e labelsForNode \u003d getLabelsByNode(nodeId);\n+      if (labelsForNode !\u003d null) {\n+        for (String label : labelsForNode) {\n+          NodeLabel labelInfo \u003d labelCollections.get(label);\n+          if(labelInfo !\u003d null) {\n+            labelInfo.addNodeId(nodeId);\n+          }\n+        }\n+      }\n       \n       // get the node after edition\n       Map\u003cString, Host\u003e after \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n       \n       updateResourceMappings(before, after);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void activateNode(NodeId nodeId, Resource resource) {\n    try {\n      writeLock.lock();\n      \n      // save if we have a node before\n      Map\u003cString, Host\u003e before \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n      \n      createHostIfNonExisted(nodeId.getHost());\n      try {\n        createNodeIfNonExisted(nodeId);\n      } catch (IOException e) {\n        LOG.error(\"This shouldn\u0027t happen, cannot get host in nodeCollection\"\n            + \" associated to the node being activated\");\n        return;\n      }\n\n      Node nm \u003d getNMInNodeSet(nodeId);\n      nm.resource \u003d resource;\n      nm.running \u003d true;\n\n      // Add node in labelsCollection\n      Set\u003cString\u003e labelsForNode \u003d getLabelsByNode(nodeId);\n      if (labelsForNode !\u003d null) {\n        for (String label : labelsForNode) {\n          NodeLabel labelInfo \u003d labelCollections.get(label);\n          if(labelInfo !\u003d null) {\n            labelInfo.addNodeId(nodeId);\n          }\n        }\n      }\n      \n      // get the node after edition\n      Map\u003cString, Host\u003e after \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n      \n      updateResourceMappings(before, after);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/RMNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "abae63caf9c53b404f2f2db7d482555484eaeaf8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2699. Fixed a bug in CommonNodeLabelsManager that caused tests to fail when using ephemeral ports on NodeIDs. Contributed by Wangda Tan.\n",
      "commitDate": "17/10/14 8:58 AM",
      "commitName": "abae63caf9c53b404f2f2db7d482555484eaeaf8",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/10/14 11:44 AM",
      "commitNameOld": "db7f1653198b950e89567c06898d64f6b930a0ee",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.88,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,28 @@\n   public void activateNode(NodeId nodeId, Resource resource) {\n     try {\n       writeLock.lock();\n       \n       // save if we have a node before\n       Map\u003cString, Host\u003e before \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n       \n-      createNodeIfNonExisted(nodeId);\n+      createHostIfNonExisted(nodeId.getHost());\n+      try {\n+        createNodeIfNonExisted(nodeId);\n+      } catch (IOException e) {\n+        LOG.error(\"This shouldn\u0027t happen, cannot get host in nodeCollection\"\n+            + \" associated to the node being activated\");\n+        return;\n+      }\n+\n       Node nm \u003d getNMInNodeSet(nodeId);\n       nm.resource \u003d resource;\n       nm.running \u003d true;\n       \n       // get the node after edition\n       Map\u003cString, Host\u003e after \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n       \n       updateResourceMappings(before, after);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void activateNode(NodeId nodeId, Resource resource) {\n    try {\n      writeLock.lock();\n      \n      // save if we have a node before\n      Map\u003cString, Host\u003e before \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n      \n      createHostIfNonExisted(nodeId.getHost());\n      try {\n        createNodeIfNonExisted(nodeId);\n      } catch (IOException e) {\n        LOG.error(\"This shouldn\u0027t happen, cannot get host in nodeCollection\"\n            + \" associated to the node being activated\");\n        return;\n      }\n\n      Node nm \u003d getNMInNodeSet(nodeId);\n      nm.resource \u003d resource;\n      nm.running \u003d true;\n      \n      // get the node after edition\n      Map\u003cString, Host\u003e after \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n      \n      updateResourceMappings(before, after);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/RMNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "db7f1653198b950e89567c06898d64f6b930a0ee": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2494. Added NodeLabels Manager internal API and implementation. Contributed by Wangda Tan.\n",
      "commitDate": "10/10/14 11:44 AM",
      "commitName": "db7f1653198b950e89567c06898d64f6b930a0ee",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,20 @@\n+  public void activateNode(NodeId nodeId, Resource resource) {\n+    try {\n+      writeLock.lock();\n+      \n+      // save if we have a node before\n+      Map\u003cString, Host\u003e before \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n+      \n+      createNodeIfNonExisted(nodeId);\n+      Node nm \u003d getNMInNodeSet(nodeId);\n+      nm.resource \u003d resource;\n+      nm.running \u003d true;\n+      \n+      // get the node after edition\n+      Map\u003cString, Host\u003e after \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n+      \n+      updateResourceMappings(before, after);\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void activateNode(NodeId nodeId, Resource resource) {\n    try {\n      writeLock.lock();\n      \n      // save if we have a node before\n      Map\u003cString, Host\u003e before \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n      \n      createNodeIfNonExisted(nodeId);\n      Node nm \u003d getNMInNodeSet(nodeId);\n      nm.resource \u003d resource;\n      nm.running \u003d true;\n      \n      // get the node after edition\n      Map\u003cString, Host\u003e after \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n      \n      updateResourceMappings(before, after);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/RMNodeLabelsManager.java"
    }
  }
}