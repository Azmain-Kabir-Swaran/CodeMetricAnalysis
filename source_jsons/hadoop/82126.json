{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ConfTest.java",
  "functionName": "checkConf",
  "functionId": "checkConf___in-InputStream",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ConfTest.java",
  "functionStartLine": 137,
  "functionEndLine": 217,
  "numCommitsSeen": 4,
  "timeTaken": 517,
  "changeHistory": [
    "5df1fadf874f3f0176f6b36b8ff7317edd63770f"
  ],
  "changeHistoryShort": {
    "5df1fadf874f3f0176f6b36b8ff7317edd63770f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5df1fadf874f3f0176f6b36b8ff7317edd63770f": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7947. Validate XMLs if a relevant tool is available, when using scripts (Kengo Seki via aw)\n",
      "commitDate": "28/05/15 11:01 AM",
      "commitName": "5df1fadf874f3f0176f6b36b8ff7317edd63770f",
      "commitAuthor": "Allen Wittenauer",
      "diff": "@@ -0,0 +1,81 @@\n+  public static List\u003cString\u003e checkConf(InputStream in) {\n+    List\u003cNodeInfo\u003e nodes \u003d null;\n+    List\u003cString\u003e errors \u003d new ArrayList\u003cString\u003e();\n+\n+    try {\n+      nodes \u003d parseConf(in);\n+      if (nodes \u003d\u003d null) {\n+        errors.add(\"bad conf file: top-level element not \u003cconfiguration\u003e\");\n+      }\n+    } catch (XMLStreamException e) {\n+      errors.add(\"bad conf file: \" + e.getMessage());\n+    }\n+\n+    if (!errors.isEmpty()) {\n+      return errors;\n+    }\n+\n+    Map\u003cString, List\u003cInteger\u003e\u003e duplicatedProperties \u003d\n+        new HashMap\u003cString, List\u003cInteger\u003e\u003e();\n+\n+    for (NodeInfo node : nodes) {\n+      StartElement element \u003d node.getStartElement();\n+      int line \u003d element.getLocation().getLineNumber();\n+\n+      if (!element.getName().equals(new QName(\"property\"))) {\n+        errors.add(String.format(\"Line %d: element not \u003cproperty\u003e\", line));\n+        continue;\n+      }\n+\n+      List\u003cXMLEvent\u003e events \u003d node.getXMLEventsForQName(new QName(\"name\"));\n+      if (events \u003d\u003d null) {\n+        errors.add(String.format(\"Line %d: \u003cproperty\u003e has no \u003cname\u003e\", line));\n+      } else {\n+        String v \u003d null;\n+        for (XMLEvent event : events) {\n+          if (event.isAttribute()) {\n+            v \u003d ((Attribute) event).getValue();\n+          } else {\n+            Characters c \u003d node.getElement(event.asStartElement());\n+            if (c !\u003d null) {\n+              v \u003d c.getData();\n+            }\n+          }\n+          if (v \u003d\u003d null || v.isEmpty()) {\n+            errors.add(String.format(\"Line %d: \u003cproperty\u003e has an empty \u003cname\u003e\",\n+                line));\n+          }\n+        }\n+        if (v !\u003d null \u0026\u0026 !v.isEmpty()) {\n+          List\u003cInteger\u003e lines \u003d duplicatedProperties.get(v);\n+          if (lines \u003d\u003d null) {\n+            lines \u003d new ArrayList\u003cInteger\u003e();\n+            duplicatedProperties.put(v, lines);\n+          }\n+          lines.add(node.getStartElement().getLocation().getLineNumber());\n+        }\n+      }\n+\n+      events \u003d node.getXMLEventsForQName(new QName(\"value\"));\n+      if (events \u003d\u003d null) {\n+        errors.add(String.format(\"Line %d: \u003cproperty\u003e has no \u003cvalue\u003e\", line));\n+      }\n+\n+      for (QName qName : node.getDuplicatedQNames()) {\n+        if (!qName.equals(new QName(\"source\"))) {\n+          errors.add(String.format(\"Line %d: \u003cproperty\u003e has duplicated \u003c%s\u003es\",\n+              line, qName));\n+        }\n+      }\n+    }\n+\n+    for (Entry\u003cString, List\u003cInteger\u003e\u003e e : duplicatedProperties.entrySet()) {\n+      List\u003cInteger\u003e lines \u003d e.getValue();\n+      if (1 \u003c lines.size()) {\n+        errors.add(String.format(\"Line %s: duplicated \u003cproperty\u003es for %s\",\n+            StringUtils.join(\", \", lines), e.getKey()));\n+      }\n+    }\n+\n+    return errors;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cString\u003e checkConf(InputStream in) {\n    List\u003cNodeInfo\u003e nodes \u003d null;\n    List\u003cString\u003e errors \u003d new ArrayList\u003cString\u003e();\n\n    try {\n      nodes \u003d parseConf(in);\n      if (nodes \u003d\u003d null) {\n        errors.add(\"bad conf file: top-level element not \u003cconfiguration\u003e\");\n      }\n    } catch (XMLStreamException e) {\n      errors.add(\"bad conf file: \" + e.getMessage());\n    }\n\n    if (!errors.isEmpty()) {\n      return errors;\n    }\n\n    Map\u003cString, List\u003cInteger\u003e\u003e duplicatedProperties \u003d\n        new HashMap\u003cString, List\u003cInteger\u003e\u003e();\n\n    for (NodeInfo node : nodes) {\n      StartElement element \u003d node.getStartElement();\n      int line \u003d element.getLocation().getLineNumber();\n\n      if (!element.getName().equals(new QName(\"property\"))) {\n        errors.add(String.format(\"Line %d: element not \u003cproperty\u003e\", line));\n        continue;\n      }\n\n      List\u003cXMLEvent\u003e events \u003d node.getXMLEventsForQName(new QName(\"name\"));\n      if (events \u003d\u003d null) {\n        errors.add(String.format(\"Line %d: \u003cproperty\u003e has no \u003cname\u003e\", line));\n      } else {\n        String v \u003d null;\n        for (XMLEvent event : events) {\n          if (event.isAttribute()) {\n            v \u003d ((Attribute) event).getValue();\n          } else {\n            Characters c \u003d node.getElement(event.asStartElement());\n            if (c !\u003d null) {\n              v \u003d c.getData();\n            }\n          }\n          if (v \u003d\u003d null || v.isEmpty()) {\n            errors.add(String.format(\"Line %d: \u003cproperty\u003e has an empty \u003cname\u003e\",\n                line));\n          }\n        }\n        if (v !\u003d null \u0026\u0026 !v.isEmpty()) {\n          List\u003cInteger\u003e lines \u003d duplicatedProperties.get(v);\n          if (lines \u003d\u003d null) {\n            lines \u003d new ArrayList\u003cInteger\u003e();\n            duplicatedProperties.put(v, lines);\n          }\n          lines.add(node.getStartElement().getLocation().getLineNumber());\n        }\n      }\n\n      events \u003d node.getXMLEventsForQName(new QName(\"value\"));\n      if (events \u003d\u003d null) {\n        errors.add(String.format(\"Line %d: \u003cproperty\u003e has no \u003cvalue\u003e\", line));\n      }\n\n      for (QName qName : node.getDuplicatedQNames()) {\n        if (!qName.equals(new QName(\"source\"))) {\n          errors.add(String.format(\"Line %d: \u003cproperty\u003e has duplicated \u003c%s\u003es\",\n              line, qName));\n        }\n      }\n    }\n\n    for (Entry\u003cString, List\u003cInteger\u003e\u003e e : duplicatedProperties.entrySet()) {\n      List\u003cInteger\u003e lines \u003d e.getValue();\n      if (1 \u003c lines.size()) {\n        errors.add(String.format(\"Line %s: duplicated \u003cproperty\u003es for %s\",\n            StringUtils.join(\", \", lines), e.getKey()));\n      }\n    }\n\n    return errors;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ConfTest.java"
    }
  }
}