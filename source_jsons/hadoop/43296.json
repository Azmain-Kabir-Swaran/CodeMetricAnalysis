{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProviderUtils.java",
  "functionName": "createConfigFileAndAddLocalResource",
  "functionId": "createConfigFileAndAddLocalResource___launcher-AbstractLauncher__fs-SliderFileSystem__compLaunchContext-ContainerLaunchService.ComponentLaunchContext__tokensForSubstitution-Map__String,String____instance-ComponentInstance__context-ServiceContext__resolvedParams-ProviderService.ResolvedLaunchParams",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
  "functionStartLine": 208,
  "functionEndLine": 311,
  "numCommitsSeen": 68,
  "timeTaken": 10187,
  "changeHistory": [
    "31e0122f4d4ddc4026470b45d2bf683ece137d44",
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
    "a33ef4fd311784dc15401eb54c82e78528c4f961",
    "913f87dada27776c539dfb352400ecf8d40e7943",
    "6795f8072ffbe6138857e77d51af173f33e4e5c1",
    "4a7369b09547a78f532af66c763c6994a38b5d68",
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
    "b8a7ef1b64392094562e7782e0fd092934724ad2",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "1888318c89776f0bf354c1b13e3ee169e14ff638",
    "e86d828548c17ebadc0e6d22b50151eebd9696d5",
    "ce05c6e9811bca0bdc01152c2a82508a639480f5",
    "845764da146e98927e8ea5b2209f19f4fc3feda5",
    "c31cd981ebabc0747cabcc07a8c8797619ed2c53"
  ],
  "changeHistoryShort": {
    "31e0122f4d4ddc4026470b45d2bf683ece137d44": "Ybodychange",
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": "Ybodychange",
    "a33ef4fd311784dc15401eb54c82e78528c4f961": "Ymultichange(Yparameterchange,Ybodychange)",
    "913f87dada27776c539dfb352400ecf8d40e7943": "Ybodychange",
    "6795f8072ffbe6138857e77d51af173f33e4e5c1": "Ybodychange",
    "4a7369b09547a78f532af66c763c6994a38b5d68": "Ymultichange(Yparameterchange,Ybodychange)",
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": "Ybodychange",
    "b8a7ef1b64392094562e7782e0fd092934724ad2": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yfilerename",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Ymultichange(Yfilerename,Ymodifierchange,Ybodychange,Yparameterchange)",
    "e86d828548c17ebadc0e6d22b50151eebd9696d5": "Ybodychange",
    "ce05c6e9811bca0bdc01152c2a82508a639480f5": "Ymultichange(Yparameterchange,Ybodychange)",
    "845764da146e98927e8ea5b2209f19f4fc3feda5": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "c31cd981ebabc0747cabcc07a8c8797619ed2c53": "Yintroduced"
  },
  "changeHistoryDetails": {
    "31e0122f4d4ddc4026470b45d2bf683ece137d44": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9860. Enable service mode for Docker containers on YARN\n           Contributed by Prabhu Joseph and Shane Kumpf\n",
      "commitDate": "10/10/19 4:02 PM",
      "commitName": "31e0122f4d4ddc4026470b45d2bf683ece137d44",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/03/19 10:57 AM",
      "commitNameOld": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 206.21,
      "commitsBetweenForRepo": 1606,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,104 @@\n   public static synchronized void createConfigFileAndAddLocalResource(\n       AbstractLauncher launcher, SliderFileSystem fs,\n       ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n       Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n       ServiceContext context, ProviderService.ResolvedLaunchParams\n       resolvedParams)\n       throws IOException {\n \n     Path compInstanceDir \u003d initCompInstanceDir(fs, compLaunchContext, instance);\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n       log.info(\"{} version {} : Creating dir on hdfs: {}\",\n           instance.getCompInstanceId(), compLaunchContext.getServiceVersion(),\n           compInstanceDir);\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n+    Path compPublicResourceDir \u003d initCompPublicResourceDir(fs,\n+        compLaunchContext, instance);\n+    if (!fs.getFileSystem().exists(compPublicResourceDir)) {\n+      log.info(\"{} version {} : Creating Public Resource dir on hdfs: {}\",\n+          instance.getCompInstanceId(), compLaunchContext.getServiceVersion(),\n+          compPublicResourceDir);\n+      fs.getFileSystem().mkdirs(compPublicResourceDir,\n+          new FsPermission(FsAction.ALL, FsAction.READ_EXECUTE,\n+          FsAction.EXECUTE));\n+    } else {\n+      log.info(\"Component instance public resource dir already exists: \"\n+          + compPublicResourceDir);\n+    }\n+\n     log.debug(\"Tokens substitution for component instance: {}{}{}\" + instance\n         .getCompInstanceName(), System.lineSeparator(), tokensForSubstitution);\n \n     for (ConfigFile originalFile : compLaunchContext.getConfiguration()\n         .getFiles()) {\n \n       if (isStaticFile(originalFile)) {\n         continue;\n       }\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n       /* When source file is not specified, write new configs\n        * to compInstanceDir/fileName\n        * When source file is specified, it reads and performs variable\n        * substitution and merges in new configs, and writes a new file to\n        * compInstanceDir/fileName.\n        */\n-      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n+      Path remoteFile \u003d null;\n+      LocalResourceVisibility visibility \u003d configFile.getVisibility();\n+      if (visibility !\u003d null \u0026\u0026\n+          visibility.equals(LocalResourceVisibility.PUBLIC)) {\n+        remoteFile \u003d new Path(compPublicResourceDir, fileName);\n+      } else {\n+        remoteFile \u003d new Path(compInstanceDir, fileName);\n+      }\n \n       if (!fs.getFileSystem().exists(remoteFile)) {\n         log.info(\"Saving config file on hdfs for component \" + instance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n           // If src_file is not specified\n           resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n               instance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n-          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n+          fs.createAmResource(remoteFile, LocalResourceType.FILE,\n+          configFile.getVisibility());\n       Path destFile \u003d new Path(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       addLocalResource(launcher, symlink, configResource, destFile,\n           resolvedParams);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void createConfigFileAndAddLocalResource(\n      AbstractLauncher launcher, SliderFileSystem fs,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ServiceContext context, ProviderService.ResolvedLaunchParams\n      resolvedParams)\n      throws IOException {\n\n    Path compInstanceDir \u003d initCompInstanceDir(fs, compLaunchContext, instance);\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      log.info(\"{} version {} : Creating dir on hdfs: {}\",\n          instance.getCompInstanceId(), compLaunchContext.getServiceVersion(),\n          compInstanceDir);\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    Path compPublicResourceDir \u003d initCompPublicResourceDir(fs,\n        compLaunchContext, instance);\n    if (!fs.getFileSystem().exists(compPublicResourceDir)) {\n      log.info(\"{} version {} : Creating Public Resource dir on hdfs: {}\",\n          instance.getCompInstanceId(), compLaunchContext.getServiceVersion(),\n          compPublicResourceDir);\n      fs.getFileSystem().mkdirs(compPublicResourceDir,\n          new FsPermission(FsAction.ALL, FsAction.READ_EXECUTE,\n          FsAction.EXECUTE));\n    } else {\n      log.info(\"Component instance public resource dir already exists: \"\n          + compPublicResourceDir);\n    }\n\n    log.debug(\"Tokens substitution for component instance: {}{}{}\" + instance\n        .getCompInstanceName(), System.lineSeparator(), tokensForSubstitution);\n\n    for (ConfigFile originalFile : compLaunchContext.getConfiguration()\n        .getFiles()) {\n\n      if (isStaticFile(originalFile)) {\n        continue;\n      }\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      /* When source file is not specified, write new configs\n       * to compInstanceDir/fileName\n       * When source file is specified, it reads and performs variable\n       * substitution and merges in new configs, and writes a new file to\n       * compInstanceDir/fileName.\n       */\n      Path remoteFile \u003d null;\n      LocalResourceVisibility visibility \u003d configFile.getVisibility();\n      if (visibility !\u003d null \u0026\u0026\n          visibility.equals(LocalResourceVisibility.PUBLIC)) {\n        remoteFile \u003d new Path(compPublicResourceDir, fileName);\n      } else {\n        remoteFile \u003d new Path(compInstanceDir, fileName);\n      }\n\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + instance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // If src_file is not specified\n          resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n              instance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE,\n          configFile.getVisibility());\n      Path destFile \u003d new Path(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      addLocalResource(launcher, symlink, configResource, destFile,\n          resolvedParams);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
      "extendedDetails": {}
    },
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9363.  Replaced debug logging with SLF4J parameterized log message.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "18/03/19 10:57 AM",
      "commitName": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "11/03/19 10:55 AM",
      "commitNameOld": "fa7a0b269a8613627819c41ab0e9c02a55e278b3",
      "commitAuthorOld": "Eric Badger",
      "daysBetweenCommits": 7.0,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,82 @@\n   public static synchronized void createConfigFileAndAddLocalResource(\n       AbstractLauncher launcher, SliderFileSystem fs,\n       ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n       Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n       ServiceContext context, ProviderService.ResolvedLaunchParams\n       resolvedParams)\n       throws IOException {\n \n     Path compInstanceDir \u003d initCompInstanceDir(fs, compLaunchContext, instance);\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n       log.info(\"{} version {} : Creating dir on hdfs: {}\",\n           instance.getCompInstanceId(), compLaunchContext.getServiceVersion(),\n           compInstanceDir);\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n-    if (log.isDebugEnabled()) {\n-      log.debug(\"Tokens substitution for component instance: \" + instance\n-          .getCompInstanceName() + System.lineSeparator()\n-          + tokensForSubstitution);\n-    }\n+    log.debug(\"Tokens substitution for component instance: {}{}{}\" + instance\n+        .getCompInstanceName(), System.lineSeparator(), tokensForSubstitution);\n \n     for (ConfigFile originalFile : compLaunchContext.getConfiguration()\n         .getFiles()) {\n \n       if (isStaticFile(originalFile)) {\n         continue;\n       }\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n       /* When source file is not specified, write new configs\n        * to compInstanceDir/fileName\n        * When source file is specified, it reads and performs variable\n        * substitution and merges in new configs, and writes a new file to\n        * compInstanceDir/fileName.\n        */\n       Path remoteFile \u003d new Path(compInstanceDir, fileName);\n \n       if (!fs.getFileSystem().exists(remoteFile)) {\n         log.info(\"Saving config file on hdfs for component \" + instance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n           // If src_file is not specified\n           resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n               instance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       Path destFile \u003d new Path(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       addLocalResource(launcher, symlink, configResource, destFile,\n           resolvedParams);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void createConfigFileAndAddLocalResource(\n      AbstractLauncher launcher, SliderFileSystem fs,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ServiceContext context, ProviderService.ResolvedLaunchParams\n      resolvedParams)\n      throws IOException {\n\n    Path compInstanceDir \u003d initCompInstanceDir(fs, compLaunchContext, instance);\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      log.info(\"{} version {} : Creating dir on hdfs: {}\",\n          instance.getCompInstanceId(), compLaunchContext.getServiceVersion(),\n          compInstanceDir);\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    log.debug(\"Tokens substitution for component instance: {}{}{}\" + instance\n        .getCompInstanceName(), System.lineSeparator(), tokensForSubstitution);\n\n    for (ConfigFile originalFile : compLaunchContext.getConfiguration()\n        .getFiles()) {\n\n      if (isStaticFile(originalFile)) {\n        continue;\n      }\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      /* When source file is not specified, write new configs\n       * to compInstanceDir/fileName\n       * When source file is specified, it reads and performs variable\n       * substitution and merges in new configs, and writes a new file to\n       * compInstanceDir/fileName.\n       */\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + instance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // If src_file is not specified\n          resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n              instance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      Path destFile \u003d new Path(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      addLocalResource(launcher, symlink, configResource, destFile,\n          resolvedParams);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
      "extendedDetails": {}
    },
    "a33ef4fd311784dc15401eb54c82e78528c4f961": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8867. Added resource localization status to YARN service status call.\n           Contributed by Chandni Singh\n",
      "commitDate": "24/01/19 3:43 PM",
      "commitName": "a33ef4fd311784dc15401eb54c82e78528c4f961",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8867. Added resource localization status to YARN service status call.\n           Contributed by Chandni Singh\n",
          "commitDate": "24/01/19 3:43 PM",
          "commitName": "a33ef4fd311784dc15401eb54c82e78528c4f961",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "26/09/18 11:51 AM",
          "commitNameOld": "913f87dada27776c539dfb352400ecf8d40e7943",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 120.2,
          "commitsBetweenForRepo": 905,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,85 @@\n   public static synchronized void createConfigFileAndAddLocalResource(\n       AbstractLauncher launcher, SliderFileSystem fs,\n       ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n       Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n-      ServiceContext context) throws IOException {\n+      ServiceContext context, ProviderService.ResolvedLaunchParams\n+      resolvedParams)\n+      throws IOException {\n+\n     Path compInstanceDir \u003d initCompInstanceDir(fs, compLaunchContext, instance);\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n       log.info(\"{} version {} : Creating dir on hdfs: {}\",\n           instance.getCompInstanceId(), compLaunchContext.getServiceVersion(),\n           compInstanceDir);\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n     if (log.isDebugEnabled()) {\n       log.debug(\"Tokens substitution for component instance: \" + instance\n           .getCompInstanceName() + System.lineSeparator()\n           + tokensForSubstitution);\n     }\n \n     for (ConfigFile originalFile : compLaunchContext.getConfiguration()\n         .getFiles()) {\n \n       if (isStaticFile(originalFile)) {\n         continue;\n       }\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n       /* When source file is not specified, write new configs\n        * to compInstanceDir/fileName\n        * When source file is specified, it reads and performs variable\n        * substitution and merges in new configs, and writes a new file to\n        * compInstanceDir/fileName.\n        */\n       Path remoteFile \u003d new Path(compInstanceDir, fileName);\n \n       if (!fs.getFileSystem().exists(remoteFile)) {\n         log.info(\"Saving config file on hdfs for component \" + instance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n           // If src_file is not specified\n           resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n               instance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       Path destFile \u003d new Path(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n-      addLocalResource(launcher, symlink, configResource, destFile);\n+      addLocalResource(launcher, symlink, configResource, destFile,\n+          resolvedParams);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void createConfigFileAndAddLocalResource(\n      AbstractLauncher launcher, SliderFileSystem fs,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ServiceContext context, ProviderService.ResolvedLaunchParams\n      resolvedParams)\n      throws IOException {\n\n    Path compInstanceDir \u003d initCompInstanceDir(fs, compLaunchContext, instance);\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      log.info(\"{} version {} : Creating dir on hdfs: {}\",\n          instance.getCompInstanceId(), compLaunchContext.getServiceVersion(),\n          compInstanceDir);\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Tokens substitution for component instance: \" + instance\n          .getCompInstanceName() + System.lineSeparator()\n          + tokensForSubstitution);\n    }\n\n    for (ConfigFile originalFile : compLaunchContext.getConfiguration()\n        .getFiles()) {\n\n      if (isStaticFile(originalFile)) {\n        continue;\n      }\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      /* When source file is not specified, write new configs\n       * to compInstanceDir/fileName\n       * When source file is specified, it reads and performs variable\n       * substitution and merges in new configs, and writes a new file to\n       * compInstanceDir/fileName.\n       */\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + instance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // If src_file is not specified\n          resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n              instance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      Path destFile \u003d new Path(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      addLocalResource(launcher, symlink, configResource, destFile,\n          resolvedParams);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "[launcher-AbstractLauncher, fs-SliderFileSystem, compLaunchContext-ContainerLaunchService.ComponentLaunchContext, tokensForSubstitution-Map\u003cString,String\u003e, instance-ComponentInstance, context-ServiceContext]",
            "newValue": "[launcher-AbstractLauncher, fs-SliderFileSystem, compLaunchContext-ContainerLaunchService.ComponentLaunchContext, tokensForSubstitution-Map\u003cString,String\u003e, instance-ComponentInstance, context-ServiceContext, resolvedParams-ProviderService.ResolvedLaunchParams]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8867. Added resource localization status to YARN service status call.\n           Contributed by Chandni Singh\n",
          "commitDate": "24/01/19 3:43 PM",
          "commitName": "a33ef4fd311784dc15401eb54c82e78528c4f961",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "26/09/18 11:51 AM",
          "commitNameOld": "913f87dada27776c539dfb352400ecf8d40e7943",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 120.2,
          "commitsBetweenForRepo": 905,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,85 @@\n   public static synchronized void createConfigFileAndAddLocalResource(\n       AbstractLauncher launcher, SliderFileSystem fs,\n       ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n       Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n-      ServiceContext context) throws IOException {\n+      ServiceContext context, ProviderService.ResolvedLaunchParams\n+      resolvedParams)\n+      throws IOException {\n+\n     Path compInstanceDir \u003d initCompInstanceDir(fs, compLaunchContext, instance);\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n       log.info(\"{} version {} : Creating dir on hdfs: {}\",\n           instance.getCompInstanceId(), compLaunchContext.getServiceVersion(),\n           compInstanceDir);\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n     if (log.isDebugEnabled()) {\n       log.debug(\"Tokens substitution for component instance: \" + instance\n           .getCompInstanceName() + System.lineSeparator()\n           + tokensForSubstitution);\n     }\n \n     for (ConfigFile originalFile : compLaunchContext.getConfiguration()\n         .getFiles()) {\n \n       if (isStaticFile(originalFile)) {\n         continue;\n       }\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n       /* When source file is not specified, write new configs\n        * to compInstanceDir/fileName\n        * When source file is specified, it reads and performs variable\n        * substitution and merges in new configs, and writes a new file to\n        * compInstanceDir/fileName.\n        */\n       Path remoteFile \u003d new Path(compInstanceDir, fileName);\n \n       if (!fs.getFileSystem().exists(remoteFile)) {\n         log.info(\"Saving config file on hdfs for component \" + instance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n           // If src_file is not specified\n           resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n               instance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       Path destFile \u003d new Path(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n-      addLocalResource(launcher, symlink, configResource, destFile);\n+      addLocalResource(launcher, symlink, configResource, destFile,\n+          resolvedParams);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void createConfigFileAndAddLocalResource(\n      AbstractLauncher launcher, SliderFileSystem fs,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ServiceContext context, ProviderService.ResolvedLaunchParams\n      resolvedParams)\n      throws IOException {\n\n    Path compInstanceDir \u003d initCompInstanceDir(fs, compLaunchContext, instance);\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      log.info(\"{} version {} : Creating dir on hdfs: {}\",\n          instance.getCompInstanceId(), compLaunchContext.getServiceVersion(),\n          compInstanceDir);\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Tokens substitution for component instance: \" + instance\n          .getCompInstanceName() + System.lineSeparator()\n          + tokensForSubstitution);\n    }\n\n    for (ConfigFile originalFile : compLaunchContext.getConfiguration()\n        .getFiles()) {\n\n      if (isStaticFile(originalFile)) {\n        continue;\n      }\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      /* When source file is not specified, write new configs\n       * to compInstanceDir/fileName\n       * When source file is specified, it reads and performs variable\n       * substitution and merges in new configs, and writes a new file to\n       * compInstanceDir/fileName.\n       */\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + instance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // If src_file is not specified\n          resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n              instance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      Path destFile \u003d new Path(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      addLocalResource(launcher, symlink, configResource, destFile,\n          resolvedParams);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "913f87dada27776c539dfb352400ecf8d40e7943": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8665.  Added Yarn service cancel upgrade option.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/09/18 11:51 AM",
      "commitName": "913f87dada27776c539dfb352400ecf8d40e7943",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "29/05/18 9:23 AM",
      "commitNameOld": "3061bfcde53210d2032df3814243498b27a997b7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 120.1,
      "commitsBetweenForRepo": 957,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,81 @@\n   public static synchronized void createConfigFileAndAddLocalResource(\n       AbstractLauncher launcher, SliderFileSystem fs,\n       ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n       Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n       ServiceContext context) throws IOException {\n     Path compInstanceDir \u003d initCompInstanceDir(fs, compLaunchContext, instance);\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n-      log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n+      log.info(\"{} version {} : Creating dir on hdfs: {}\",\n+          instance.getCompInstanceId(), compLaunchContext.getServiceVersion(),\n+          compInstanceDir);\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n     if (log.isDebugEnabled()) {\n       log.debug(\"Tokens substitution for component instance: \" + instance\n           .getCompInstanceName() + System.lineSeparator()\n           + tokensForSubstitution);\n     }\n \n     for (ConfigFile originalFile : compLaunchContext.getConfiguration()\n         .getFiles()) {\n \n       if (isStaticFile(originalFile)) {\n         continue;\n       }\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n       /* When source file is not specified, write new configs\n        * to compInstanceDir/fileName\n        * When source file is specified, it reads and performs variable\n        * substitution and merges in new configs, and writes a new file to\n        * compInstanceDir/fileName.\n        */\n       Path remoteFile \u003d new Path(compInstanceDir, fileName);\n \n       if (!fs.getFileSystem().exists(remoteFile)) {\n         log.info(\"Saving config file on hdfs for component \" + instance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n           // If src_file is not specified\n           resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n               instance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       Path destFile \u003d new Path(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       addLocalResource(launcher, symlink, configResource, destFile);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void createConfigFileAndAddLocalResource(\n      AbstractLauncher launcher, SliderFileSystem fs,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ServiceContext context) throws IOException {\n    Path compInstanceDir \u003d initCompInstanceDir(fs, compLaunchContext, instance);\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      log.info(\"{} version {} : Creating dir on hdfs: {}\",\n          instance.getCompInstanceId(), compLaunchContext.getServiceVersion(),\n          compInstanceDir);\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Tokens substitution for component instance: \" + instance\n          .getCompInstanceName() + System.lineSeparator()\n          + tokensForSubstitution);\n    }\n\n    for (ConfigFile originalFile : compLaunchContext.getConfiguration()\n        .getFiles()) {\n\n      if (isStaticFile(originalFile)) {\n        continue;\n      }\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      /* When source file is not specified, write new configs\n       * to compInstanceDir/fileName\n       * When source file is specified, it reads and performs variable\n       * substitution and merges in new configs, and writes a new file to\n       * compInstanceDir/fileName.\n       */\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + instance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // If src_file is not specified\n          resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n              instance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      Path destFile \u003d new Path(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      addLocalResource(launcher, symlink, configResource, destFile);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
      "extendedDetails": {}
    },
    "6795f8072ffbe6138857e77d51af173f33e4e5c1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8079. Support static and archive unmodified local resources in service AM. Contributed by Suma Shivaprasad\n",
      "commitDate": "04/05/18 9:27 AM",
      "commitName": "6795f8072ffbe6138857e77d51af173f33e4e5c1",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "26/04/18 1:54 PM",
      "commitNameOld": "4a7369b09547a78f532af66c763c6994a38b5d68",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 7.81,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,79 @@\n   public static synchronized void createConfigFileAndAddLocalResource(\n       AbstractLauncher launcher, SliderFileSystem fs,\n       ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n       Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n       ServiceContext context) throws IOException {\n     Path compInstanceDir \u003d initCompInstanceDir(fs, compLaunchContext, instance);\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n       log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n     if (log.isDebugEnabled()) {\n       log.debug(\"Tokens substitution for component instance: \" + instance\n           .getCompInstanceName() + System.lineSeparator()\n           + tokensForSubstitution);\n     }\n \n     for (ConfigFile originalFile : compLaunchContext.getConfiguration()\n         .getFiles()) {\n+\n+      if (isStaticFile(originalFile)) {\n+        continue;\n+      }\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n+      /* When source file is not specified, write new configs\n+       * to compInstanceDir/fileName\n+       * When source file is specified, it reads and performs variable\n+       * substitution and merges in new configs, and writes a new file to\n+       * compInstanceDir/fileName.\n+       */\n       Path remoteFile \u003d new Path(compInstanceDir, fileName);\n+\n       if (!fs.getFileSystem().exists(remoteFile)) {\n         log.info(\"Saving config file on hdfs for component \" + instance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n           // If src_file is not specified\n           resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n               instance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n-      File destFile \u003d new File(configFile.getDestFile());\n+      Path destFile \u003d new Path(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n-      if (destFile.isAbsolute()) {\n-        launcher.addLocalResource(symlink, configResource,\n-            configFile.getDestFile());\n-        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n-            + configResource.getResource().getFile() + \", dest mount path: \"\n-            + configFile.getDestFile());\n-      } else {\n-        launcher.addLocalResource(symlink, configResource);\n-        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n-            + configResource.getResource().getFile());\n-      }\n+      addLocalResource(launcher, symlink, configResource, destFile);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void createConfigFileAndAddLocalResource(\n      AbstractLauncher launcher, SliderFileSystem fs,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ServiceContext context) throws IOException {\n    Path compInstanceDir \u003d initCompInstanceDir(fs, compLaunchContext, instance);\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Tokens substitution for component instance: \" + instance\n          .getCompInstanceName() + System.lineSeparator()\n          + tokensForSubstitution);\n    }\n\n    for (ConfigFile originalFile : compLaunchContext.getConfiguration()\n        .getFiles()) {\n\n      if (isStaticFile(originalFile)) {\n        continue;\n      }\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      /* When source file is not specified, write new configs\n       * to compInstanceDir/fileName\n       * When source file is specified, it reads and performs variable\n       * substitution and merges in new configs, and writes a new file to\n       * compInstanceDir/fileName.\n       */\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + instance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // If src_file is not specified\n          resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n              instance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      Path destFile \u003d new Path(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      addLocalResource(launcher, symlink, configResource, destFile);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
      "extendedDetails": {}
    },
    "4a7369b09547a78f532af66c763c6994a38b5d68": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/04/18 1:54 PM",
      "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
          "commitDate": "26/04/18 1:54 PM",
          "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "04/12/17 12:11 PM",
          "commitNameOld": "d30d57828fddaa8667de49af879cde999907c7f6",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 143.03,
          "commitsBetweenForRepo": 1537,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,76 +1,78 @@\n   public static synchronized void createConfigFileAndAddLocalResource(\n-      AbstractLauncher launcher, SliderFileSystem fs, Component component,\n+      AbstractLauncher launcher, SliderFileSystem fs,\n+      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n       Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n       ServiceContext context) throws IOException {\n-    Path compInstanceDir \u003d initCompInstanceDir(fs, instance);\n+    Path compInstanceDir \u003d initCompInstanceDir(fs, compLaunchContext, instance);\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n       log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n     if (log.isDebugEnabled()) {\n       log.debug(\"Tokens substitution for component instance: \" + instance\n           .getCompInstanceName() + System.lineSeparator()\n           + tokensForSubstitution);\n     }\n \n-    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n+    for (ConfigFile originalFile : compLaunchContext.getConfiguration()\n+        .getFiles()) {\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n       Path remoteFile \u003d new Path(compInstanceDir, fileName);\n       if (!fs.getFileSystem().exists(remoteFile)) {\n         log.info(\"Saving config file on hdfs for component \" + instance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n           // If src_file is not specified\n           resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n               instance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       File destFile \u003d new File(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       if (destFile.isAbsolute()) {\n         launcher.addLocalResource(symlink, configResource,\n             configFile.getDestFile());\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile() + \", dest mount path: \"\n             + configFile.getDestFile());\n       } else {\n         launcher.addLocalResource(symlink, configResource);\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void createConfigFileAndAddLocalResource(\n      AbstractLauncher launcher, SliderFileSystem fs,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ServiceContext context) throws IOException {\n    Path compInstanceDir \u003d initCompInstanceDir(fs, compLaunchContext, instance);\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Tokens substitution for component instance: \" + instance\n          .getCompInstanceName() + System.lineSeparator()\n          + tokensForSubstitution);\n    }\n\n    for (ConfigFile originalFile : compLaunchContext.getConfiguration()\n        .getFiles()) {\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + instance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // If src_file is not specified\n          resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n              instance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      File destFile \u003d new File(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      if (destFile.isAbsolute()) {\n        launcher.addLocalResource(symlink, configResource,\n            configFile.getDestFile());\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile() + \", dest mount path: \"\n            + configFile.getDestFile());\n      } else {\n        launcher.addLocalResource(symlink, configResource);\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "[launcher-AbstractLauncher, fs-SliderFileSystem, component-Component, tokensForSubstitution-Map\u003cString,String\u003e, instance-ComponentInstance, context-ServiceContext]",
            "newValue": "[launcher-AbstractLauncher, fs-SliderFileSystem, compLaunchContext-ContainerLaunchService.ComponentLaunchContext, tokensForSubstitution-Map\u003cString,String\u003e, instance-ComponentInstance, context-ServiceContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
          "commitDate": "26/04/18 1:54 PM",
          "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "04/12/17 12:11 PM",
          "commitNameOld": "d30d57828fddaa8667de49af879cde999907c7f6",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 143.03,
          "commitsBetweenForRepo": 1537,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,76 +1,78 @@\n   public static synchronized void createConfigFileAndAddLocalResource(\n-      AbstractLauncher launcher, SliderFileSystem fs, Component component,\n+      AbstractLauncher launcher, SliderFileSystem fs,\n+      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n       Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n       ServiceContext context) throws IOException {\n-    Path compInstanceDir \u003d initCompInstanceDir(fs, instance);\n+    Path compInstanceDir \u003d initCompInstanceDir(fs, compLaunchContext, instance);\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n       log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n     if (log.isDebugEnabled()) {\n       log.debug(\"Tokens substitution for component instance: \" + instance\n           .getCompInstanceName() + System.lineSeparator()\n           + tokensForSubstitution);\n     }\n \n-    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n+    for (ConfigFile originalFile : compLaunchContext.getConfiguration()\n+        .getFiles()) {\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n       Path remoteFile \u003d new Path(compInstanceDir, fileName);\n       if (!fs.getFileSystem().exists(remoteFile)) {\n         log.info(\"Saving config file on hdfs for component \" + instance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n           // If src_file is not specified\n           resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n               instance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       File destFile \u003d new File(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       if (destFile.isAbsolute()) {\n         launcher.addLocalResource(symlink, configResource,\n             configFile.getDestFile());\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile() + \", dest mount path: \"\n             + configFile.getDestFile());\n       } else {\n         launcher.addLocalResource(symlink, configResource);\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void createConfigFileAndAddLocalResource(\n      AbstractLauncher launcher, SliderFileSystem fs,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ServiceContext context) throws IOException {\n    Path compInstanceDir \u003d initCompInstanceDir(fs, compLaunchContext, instance);\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Tokens substitution for component instance: \" + instance\n          .getCompInstanceName() + System.lineSeparator()\n          + tokensForSubstitution);\n    }\n\n    for (ConfigFile originalFile : compLaunchContext.getConfiguration()\n        .getFiles()) {\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + instance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // If src_file is not specified\n          resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n              instance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      File destFile \u003d new File(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      if (destFile.isAbsolute()) {\n        launcher.addLocalResource(symlink, configResource,\n            configFile.getDestFile());\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile() + \", dest mount path: \"\n            + configFile.getDestFile());\n      } else {\n        launcher.addLocalResource(symlink, configResource);\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6394. Support specifying YARN related params in the service REST API. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "b8a7ef1b64392094562e7782e0fd092934724ad2",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,76 @@\n   public static synchronized void createConfigFileAndAddLocalResource(\n       AbstractLauncher launcher, SliderFileSystem fs, Component component,\n       Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n       ServiceContext context) throws IOException {\n     Path compInstanceDir \u003d initCompInstanceDir(fs, instance);\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n       log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n     if (log.isDebugEnabled()) {\n       log.debug(\"Tokens substitution for component instance: \" + instance\n           .getCompInstanceName() + System.lineSeparator()\n           + tokensForSubstitution);\n     }\n \n     for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n       Path remoteFile \u003d new Path(compInstanceDir, fileName);\n       if (!fs.getFileSystem().exists(remoteFile)) {\n         log.info(\"Saving config file on hdfs for component \" + instance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n-          // non-template\n-          resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n+          // If src_file is not specified\n+          resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n               instance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       File destFile \u003d new File(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       if (destFile.isAbsolute()) {\n         launcher.addLocalResource(symlink, configResource,\n             configFile.getDestFile());\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile() + \", dest mount path: \"\n             + configFile.getDestFile());\n       } else {\n         launcher.addLocalResource(symlink, configResource);\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void createConfigFileAndAddLocalResource(\n      AbstractLauncher launcher, SliderFileSystem fs, Component component,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ServiceContext context) throws IOException {\n    Path compInstanceDir \u003d initCompInstanceDir(fs, instance);\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Tokens substitution for component instance: \" + instance\n          .getCompInstanceName() + System.lineSeparator()\n          + tokensForSubstitution);\n    }\n\n    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + instance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // If src_file is not specified\n          resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution,\n              instance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      File destFile \u003d new File(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      if (destFile.isAbsolute()) {\n        launcher.addLocalResource(symlink, configResource,\n            configFile.getDestFile());\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile() + \", dest mount path: \"\n            + configFile.getDestFile());\n      } else {\n        launcher.addLocalResource(symlink, configResource);\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
      "extendedDetails": {}
    },
    "b8a7ef1b64392094562e7782e0fd092934724ad2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6744. Recover component information on YARN native services AM restart. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "b8a7ef1b64392094562e7782e0fd092934724ad2",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "c70e5df100ba800f7170f44f63d388ae056cb74d",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,76 @@\n   public static synchronized void createConfigFileAndAddLocalResource(\n       AbstractLauncher launcher, SliderFileSystem fs, Component component,\n       Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n       ServiceContext context) throws IOException {\n-    Path compDir \u003d\n-        new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n-    Path compInstanceDir \u003d\n-        new Path(compDir, instance.getCompInstanceName());\n+    Path compInstanceDir \u003d initCompInstanceDir(fs, instance);\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n       log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n-      instance.setCompInstanceDir(compInstanceDir);\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n     if (log.isDebugEnabled()) {\n       log.debug(\"Tokens substitution for component instance: \" + instance\n           .getCompInstanceName() + System.lineSeparator()\n           + tokensForSubstitution);\n     }\n \n     for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n       Path remoteFile \u003d new Path(compInstanceDir, fileName);\n       if (!fs.getFileSystem().exists(remoteFile)) {\n         log.info(\"Saving config file on hdfs for component \" + instance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n           // non-template\n           resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n               instance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       File destFile \u003d new File(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       if (destFile.isAbsolute()) {\n         launcher.addLocalResource(symlink, configResource,\n             configFile.getDestFile());\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile() + \", dest mount path: \"\n             + configFile.getDestFile());\n       } else {\n         launcher.addLocalResource(symlink, configResource);\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void createConfigFileAndAddLocalResource(\n      AbstractLauncher launcher, SliderFileSystem fs, Component component,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ServiceContext context) throws IOException {\n    Path compInstanceDir \u003d initCompInstanceDir(fs, instance);\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Tokens substitution for component instance: \" + instance\n          .getCompInstanceName() + System.lineSeparator()\n          + tokensForSubstitution);\n    }\n\n    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + instance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // non-template\n          resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n              instance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      File destFile \u003d new File(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      if (destFile.isAbsolute()) {\n        launcher.addLocalResource(symlink, configResource,\n            configFile.getDestFile());\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile() + \", dest mount path: \"\n            + configFile.getDestFile());\n      } else {\n        launcher.addLocalResource(symlink, configResource);\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static synchronized void createConfigFileAndAddLocalResource(\n      AbstractLauncher launcher, SliderFileSystem fs, Component component,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ServiceContext context) throws IOException {\n    Path compDir \u003d\n        new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n    Path compInstanceDir \u003d\n        new Path(compDir, instance.getCompInstanceName());\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n      instance.setCompInstanceDir(compInstanceDir);\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Tokens substitution for component instance: \" + instance\n          .getCompInstanceName() + System.lineSeparator()\n          + tokensForSubstitution);\n    }\n\n    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + instance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // non-template\n          resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n              instance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      File destFile \u003d new File(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      if (destFile.isAbsolute()) {\n        launcher.addLocalResource(symlink, configResource,\n            configFile.getDestFile());\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile() + \", dest mount path: \"\n            + configFile.getDestFile());\n      } else {\n        launcher.addLocalResource(symlink, configResource);\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java"
      }
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,78 +1,80 @@\n-  public synchronized void createConfigFileAndAddLocalResource(\n-      ContainerLauncher launcher, SliderFileSystem fs, Component component,\n-      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance,\n-      StateAccessForProviders appState) throws IOException {\n+  public static synchronized void createConfigFileAndAddLocalResource(\n+      AbstractLauncher launcher, SliderFileSystem fs, Component component,\n+      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n+      ServiceContext context) throws IOException {\n     Path compDir \u003d\n         new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n     Path compInstanceDir \u003d\n-        new Path(compDir, roleInstance.getCompInstanceName());\n+        new Path(compDir, instance.getCompInstanceName());\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n+      log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n-      roleInstance.compInstanceDir \u003d compInstanceDir;\n-      log.info(\"Creating component instance dir: \" + compInstanceDir);\n+      instance.setCompInstanceDir(compInstanceDir);\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n-    log.info(\"Tokens substitution for component: \" + roleInstance\n-        .getCompInstanceName() + System.lineSeparator()\n-        + tokensForSubstitution);\n+    if (log.isDebugEnabled()) {\n+      log.debug(\"Tokens substitution for component instance: \" + instance\n+          .getCompInstanceName() + System.lineSeparator()\n+          + tokensForSubstitution);\n+    }\n \n     for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n       Path remoteFile \u003d new Path(compInstanceDir, fileName);\n       if (!fs.getFileSystem().exists(remoteFile)) {\n-        log.info(\"Saving config file on hdfs for component \" + roleInstance\n+        log.info(\"Saving config file on hdfs for component \" + instance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n-                tokensForSubstitution, configFile, remoteFile, appState);\n+                tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n-                tokensForSubstitution, configFile, remoteFile, appState);\n+                tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n           // non-template\n           resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n-              roleInstance, configFile, fileName, remoteFile);\n+              instance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       File destFile \u003d new File(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       if (destFile.isAbsolute()) {\n         launcher.addLocalResource(symlink, configResource,\n             configFile.getDestFile());\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile() + \", dest mount path: \"\n             + configFile.getDestFile());\n       } else {\n         launcher.addLocalResource(symlink, configResource);\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void createConfigFileAndAddLocalResource(\n      AbstractLauncher launcher, SliderFileSystem fs, Component component,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ServiceContext context) throws IOException {\n    Path compDir \u003d\n        new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n    Path compInstanceDir \u003d\n        new Path(compDir, instance.getCompInstanceName());\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n      instance.setCompInstanceDir(compInstanceDir);\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Tokens substitution for component instance: \" + instance\n          .getCompInstanceName() + System.lineSeparator()\n          + tokensForSubstitution);\n    }\n\n    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + instance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // non-template\n          resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n              instance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      File destFile \u003d new File(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      if (destFile.isAbsolute()) {\n        launcher.addLocalResource(symlink, configResource,\n            configFile.getDestFile());\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile() + \", dest mount path: \"\n            + configFile.getDestFile());\n      } else {\n        launcher.addLocalResource(symlink, configResource);\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,78 +1,80 @@\n-  public synchronized void createConfigFileAndAddLocalResource(\n-      ContainerLauncher launcher, SliderFileSystem fs, Component component,\n-      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance,\n-      StateAccessForProviders appState) throws IOException {\n+  public static synchronized void createConfigFileAndAddLocalResource(\n+      AbstractLauncher launcher, SliderFileSystem fs, Component component,\n+      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n+      ServiceContext context) throws IOException {\n     Path compDir \u003d\n         new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n     Path compInstanceDir \u003d\n-        new Path(compDir, roleInstance.getCompInstanceName());\n+        new Path(compDir, instance.getCompInstanceName());\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n+      log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n-      roleInstance.compInstanceDir \u003d compInstanceDir;\n-      log.info(\"Creating component instance dir: \" + compInstanceDir);\n+      instance.setCompInstanceDir(compInstanceDir);\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n-    log.info(\"Tokens substitution for component: \" + roleInstance\n-        .getCompInstanceName() + System.lineSeparator()\n-        + tokensForSubstitution);\n+    if (log.isDebugEnabled()) {\n+      log.debug(\"Tokens substitution for component instance: \" + instance\n+          .getCompInstanceName() + System.lineSeparator()\n+          + tokensForSubstitution);\n+    }\n \n     for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n       Path remoteFile \u003d new Path(compInstanceDir, fileName);\n       if (!fs.getFileSystem().exists(remoteFile)) {\n-        log.info(\"Saving config file on hdfs for component \" + roleInstance\n+        log.info(\"Saving config file on hdfs for component \" + instance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n-                tokensForSubstitution, configFile, remoteFile, appState);\n+                tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n-                tokensForSubstitution, configFile, remoteFile, appState);\n+                tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n           // non-template\n           resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n-              roleInstance, configFile, fileName, remoteFile);\n+              instance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       File destFile \u003d new File(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       if (destFile.isAbsolute()) {\n         launcher.addLocalResource(symlink, configResource,\n             configFile.getDestFile());\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile() + \", dest mount path: \"\n             + configFile.getDestFile());\n       } else {\n         launcher.addLocalResource(symlink, configResource);\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void createConfigFileAndAddLocalResource(\n      AbstractLauncher launcher, SliderFileSystem fs, Component component,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ServiceContext context) throws IOException {\n    Path compDir \u003d\n        new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n    Path compInstanceDir \u003d\n        new Path(compDir, instance.getCompInstanceName());\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n      instance.setCompInstanceDir(compInstanceDir);\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Tokens substitution for component instance: \" + instance\n          .getCompInstanceName() + System.lineSeparator()\n          + tokensForSubstitution);\n    }\n\n    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + instance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // non-template\n          resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n              instance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      File destFile \u003d new File(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      if (destFile.isAbsolute()) {\n        launcher.addLocalResource(symlink, configResource,\n            configFile.getDestFile());\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile() + \", dest mount path: \"\n            + configFile.getDestFile());\n      } else {\n        launcher.addLocalResource(symlink, configResource);\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public, static, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,78 +1,80 @@\n-  public synchronized void createConfigFileAndAddLocalResource(\n-      ContainerLauncher launcher, SliderFileSystem fs, Component component,\n-      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance,\n-      StateAccessForProviders appState) throws IOException {\n+  public static synchronized void createConfigFileAndAddLocalResource(\n+      AbstractLauncher launcher, SliderFileSystem fs, Component component,\n+      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n+      ServiceContext context) throws IOException {\n     Path compDir \u003d\n         new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n     Path compInstanceDir \u003d\n-        new Path(compDir, roleInstance.getCompInstanceName());\n+        new Path(compDir, instance.getCompInstanceName());\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n+      log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n-      roleInstance.compInstanceDir \u003d compInstanceDir;\n-      log.info(\"Creating component instance dir: \" + compInstanceDir);\n+      instance.setCompInstanceDir(compInstanceDir);\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n-    log.info(\"Tokens substitution for component: \" + roleInstance\n-        .getCompInstanceName() + System.lineSeparator()\n-        + tokensForSubstitution);\n+    if (log.isDebugEnabled()) {\n+      log.debug(\"Tokens substitution for component instance: \" + instance\n+          .getCompInstanceName() + System.lineSeparator()\n+          + tokensForSubstitution);\n+    }\n \n     for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n       Path remoteFile \u003d new Path(compInstanceDir, fileName);\n       if (!fs.getFileSystem().exists(remoteFile)) {\n-        log.info(\"Saving config file on hdfs for component \" + roleInstance\n+        log.info(\"Saving config file on hdfs for component \" + instance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n-                tokensForSubstitution, configFile, remoteFile, appState);\n+                tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n-                tokensForSubstitution, configFile, remoteFile, appState);\n+                tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n           // non-template\n           resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n-              roleInstance, configFile, fileName, remoteFile);\n+              instance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       File destFile \u003d new File(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       if (destFile.isAbsolute()) {\n         launcher.addLocalResource(symlink, configResource,\n             configFile.getDestFile());\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile() + \", dest mount path: \"\n             + configFile.getDestFile());\n       } else {\n         launcher.addLocalResource(symlink, configResource);\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void createConfigFileAndAddLocalResource(\n      AbstractLauncher launcher, SliderFileSystem fs, Component component,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ServiceContext context) throws IOException {\n    Path compDir \u003d\n        new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n    Path compInstanceDir \u003d\n        new Path(compDir, instance.getCompInstanceName());\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n      instance.setCompInstanceDir(compInstanceDir);\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Tokens substitution for component instance: \" + instance\n          .getCompInstanceName() + System.lineSeparator()\n          + tokensForSubstitution);\n    }\n\n    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + instance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // non-template\n          resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n              instance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      File destFile \u003d new File(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      if (destFile.isAbsolute()) {\n        launcher.addLocalResource(symlink, configResource,\n            configFile.getDestFile());\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile() + \", dest mount path: \"\n            + configFile.getDestFile());\n      } else {\n        launcher.addLocalResource(symlink, configResource);\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,78 +1,80 @@\n-  public synchronized void createConfigFileAndAddLocalResource(\n-      ContainerLauncher launcher, SliderFileSystem fs, Component component,\n-      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance,\n-      StateAccessForProviders appState) throws IOException {\n+  public static synchronized void createConfigFileAndAddLocalResource(\n+      AbstractLauncher launcher, SliderFileSystem fs, Component component,\n+      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n+      ServiceContext context) throws IOException {\n     Path compDir \u003d\n         new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n     Path compInstanceDir \u003d\n-        new Path(compDir, roleInstance.getCompInstanceName());\n+        new Path(compDir, instance.getCompInstanceName());\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n+      log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n-      roleInstance.compInstanceDir \u003d compInstanceDir;\n-      log.info(\"Creating component instance dir: \" + compInstanceDir);\n+      instance.setCompInstanceDir(compInstanceDir);\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n-    log.info(\"Tokens substitution for component: \" + roleInstance\n-        .getCompInstanceName() + System.lineSeparator()\n-        + tokensForSubstitution);\n+    if (log.isDebugEnabled()) {\n+      log.debug(\"Tokens substitution for component instance: \" + instance\n+          .getCompInstanceName() + System.lineSeparator()\n+          + tokensForSubstitution);\n+    }\n \n     for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n       Path remoteFile \u003d new Path(compInstanceDir, fileName);\n       if (!fs.getFileSystem().exists(remoteFile)) {\n-        log.info(\"Saving config file on hdfs for component \" + roleInstance\n+        log.info(\"Saving config file on hdfs for component \" + instance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n-                tokensForSubstitution, configFile, remoteFile, appState);\n+                tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n-                tokensForSubstitution, configFile, remoteFile, appState);\n+                tokensForSubstitution, configFile, remoteFile, context);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n           // non-template\n           resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n-              roleInstance, configFile, fileName, remoteFile);\n+              instance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       File destFile \u003d new File(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       if (destFile.isAbsolute()) {\n         launcher.addLocalResource(symlink, configResource,\n             configFile.getDestFile());\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile() + \", dest mount path: \"\n             + configFile.getDestFile());\n       } else {\n         launcher.addLocalResource(symlink, configResource);\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void createConfigFileAndAddLocalResource(\n      AbstractLauncher launcher, SliderFileSystem fs, Component component,\n      Map\u003cString, String\u003e tokensForSubstitution, ComponentInstance instance,\n      ServiceContext context) throws IOException {\n    Path compDir \u003d\n        new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n    Path compInstanceDir \u003d\n        new Path(compDir, instance.getCompInstanceName());\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      log.info(instance.getCompInstanceId() + \": Creating dir on hdfs: \" + compInstanceDir);\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n      instance.setCompInstanceDir(compInstanceDir);\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Tokens substitution for component instance: \" + instance\n          .getCompInstanceName() + System.lineSeparator()\n          + tokensForSubstitution);\n    }\n\n    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + instance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, context);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // non-template\n          resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n              instance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      File destFile \u003d new File(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      if (destFile.isAbsolute()) {\n        launcher.addLocalResource(symlink, configResource,\n            configFile.getDestFile());\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile() + \", dest mount path: \"\n            + configFile.getDestFile());\n      } else {\n        launcher.addLocalResource(symlink, configResource);\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/provider/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "[launcher-ContainerLauncher, fs-SliderFileSystem, component-Component, tokensForSubstitution-Map\u003cString,String\u003e, roleInstance-RoleInstance, appState-StateAccessForProviders]",
            "newValue": "[launcher-AbstractLauncher, fs-SliderFileSystem, component-Component, tokensForSubstitution-Map\u003cString,String\u003e, instance-ComponentInstance, context-ServiceContext]"
          }
        }
      ]
    },
    "e86d828548c17ebadc0e6d22b50151eebd9696d5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6716. Native services support for specifying component start order. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "e86d828548c17ebadc0e6d22b50151eebd9696d5",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a041373dd418a123438c62c511c908859578bf01",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,78 @@\n   public synchronized void createConfigFileAndAddLocalResource(\n       ContainerLauncher launcher, SliderFileSystem fs, Component component,\n       Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance,\n       StateAccessForProviders appState) throws IOException {\n     Path compDir \u003d\n         new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n     Path compInstanceDir \u003d\n         new Path(compDir, roleInstance.getCompInstanceName());\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n       roleInstance.compInstanceDir \u003d compInstanceDir;\n       log.info(\"Creating component instance dir: \" + compInstanceDir);\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n-    // add Configuration#env into tokens substitution\n-    addEnvForSubstitution(component.getConfiguration().getEnv(),\n-        tokensForSubstitution);\n-\n     log.info(\"Tokens substitution for component: \" + roleInstance\n         .getCompInstanceName() + System.lineSeparator()\n         + tokensForSubstitution);\n \n     for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n       Path remoteFile \u003d new Path(compInstanceDir, fileName);\n       if (!fs.getFileSystem().exists(remoteFile)) {\n         log.info(\"Saving config file on hdfs for component \" + roleInstance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, appState);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                 tokensForSubstitution, configFile, remoteFile, appState);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n           // non-template\n           resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n               roleInstance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       File destFile \u003d new File(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       if (destFile.isAbsolute()) {\n         launcher.addLocalResource(symlink, configResource,\n             configFile.getDestFile());\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile() + \", dest mount path: \"\n             + configFile.getDestFile());\n       } else {\n         launcher.addLocalResource(symlink, configResource);\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void createConfigFileAndAddLocalResource(\n      ContainerLauncher launcher, SliderFileSystem fs, Component component,\n      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance,\n      StateAccessForProviders appState) throws IOException {\n    Path compDir \u003d\n        new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n    Path compInstanceDir \u003d\n        new Path(compDir, roleInstance.getCompInstanceName());\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n      roleInstance.compInstanceDir \u003d compInstanceDir;\n      log.info(\"Creating component instance dir: \" + compInstanceDir);\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    log.info(\"Tokens substitution for component: \" + roleInstance\n        .getCompInstanceName() + System.lineSeparator()\n        + tokensForSubstitution);\n\n    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + roleInstance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, appState);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, appState);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // non-template\n          resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n              roleInstance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      File destFile \u003d new File(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      if (destFile.isAbsolute()) {\n        launcher.addLocalResource(symlink, configResource,\n            configFile.getDestFile());\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile() + \", dest mount path: \"\n            + configFile.getDestFile());\n      } else {\n        launcher.addLocalResource(symlink, configResource);\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java",
      "extendedDetails": {}
    },
    "ce05c6e9811bca0bdc01152c2a82508a639480f5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6545. Followup fix for YARN-6405. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "ce05c6e9811bca0bdc01152c2a82508a639480f5",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6545. Followup fix for YARN-6405. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ce05c6e9811bca0bdc01152c2a82508a639480f5",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:28 PM",
          "commitNameOld": "845764da146e98927e8ea5b2209f19f4fc3feda5",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,82 +1,82 @@\n   public synchronized void createConfigFileAndAddLocalResource(\n       ContainerLauncher launcher, SliderFileSystem fs, Component component,\n-      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance)\n-      throws IOException {\n+      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance,\n+      StateAccessForProviders appState) throws IOException {\n     Path compDir \u003d\n         new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n     Path compInstanceDir \u003d\n         new Path(compDir, roleInstance.getCompInstanceName());\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n       roleInstance.compInstanceDir \u003d compInstanceDir;\n       log.info(\"Creating component instance dir: \" + compInstanceDir);\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n     // add Configuration#env into tokens substitution\n     addEnvForSubstitution(component.getConfiguration().getEnv(),\n         tokensForSubstitution);\n \n     log.info(\"Tokens substitution for component: \" + roleInstance\n         .getCompInstanceName() + System.lineSeparator()\n         + tokensForSubstitution);\n \n     for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n       Path remoteFile \u003d new Path(compInstanceDir, fileName);\n       if (!fs.getFileSystem().exists(remoteFile)) {\n         log.info(\"Saving config file on hdfs for component \" + roleInstance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n-                tokensForSubstitution, configFile, remoteFile, roleInstance);\n+                tokensForSubstitution, configFile, remoteFile, appState);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n-                tokensForSubstitution, configFile, remoteFile, roleInstance);\n+                tokensForSubstitution, configFile, remoteFile, appState);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n           // non-template\n           resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n               roleInstance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       File destFile \u003d new File(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       if (destFile.isAbsolute()) {\n         launcher.addLocalResource(symlink, configResource,\n             configFile.getDestFile());\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile() + \", dest mount path: \"\n             + configFile.getDestFile());\n       } else {\n         launcher.addLocalResource(symlink, configResource);\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void createConfigFileAndAddLocalResource(\n      ContainerLauncher launcher, SliderFileSystem fs, Component component,\n      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance,\n      StateAccessForProviders appState) throws IOException {\n    Path compDir \u003d\n        new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n    Path compInstanceDir \u003d\n        new Path(compDir, roleInstance.getCompInstanceName());\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n      roleInstance.compInstanceDir \u003d compInstanceDir;\n      log.info(\"Creating component instance dir: \" + compInstanceDir);\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    // add Configuration#env into tokens substitution\n    addEnvForSubstitution(component.getConfiguration().getEnv(),\n        tokensForSubstitution);\n\n    log.info(\"Tokens substitution for component: \" + roleInstance\n        .getCompInstanceName() + System.lineSeparator()\n        + tokensForSubstitution);\n\n    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + roleInstance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, appState);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, appState);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // non-template\n          resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n              roleInstance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      File destFile \u003d new File(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      if (destFile.isAbsolute()) {\n        launcher.addLocalResource(symlink, configResource,\n            configFile.getDestFile());\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile() + \", dest mount path: \"\n            + configFile.getDestFile());\n      } else {\n        launcher.addLocalResource(symlink, configResource);\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "[launcher-ContainerLauncher, fs-SliderFileSystem, component-Component, tokensForSubstitution-Map\u003cString,String\u003e, roleInstance-RoleInstance]",
            "newValue": "[launcher-ContainerLauncher, fs-SliderFileSystem, component-Component, tokensForSubstitution-Map\u003cString,String\u003e, roleInstance-RoleInstance, appState-StateAccessForProviders]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6545. Followup fix for YARN-6405. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ce05c6e9811bca0bdc01152c2a82508a639480f5",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:28 PM",
          "commitNameOld": "845764da146e98927e8ea5b2209f19f4fc3feda5",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,82 +1,82 @@\n   public synchronized void createConfigFileAndAddLocalResource(\n       ContainerLauncher launcher, SliderFileSystem fs, Component component,\n-      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance)\n-      throws IOException {\n+      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance,\n+      StateAccessForProviders appState) throws IOException {\n     Path compDir \u003d\n         new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n     Path compInstanceDir \u003d\n         new Path(compDir, roleInstance.getCompInstanceName());\n     if (!fs.getFileSystem().exists(compInstanceDir)) {\n       fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n       roleInstance.compInstanceDir \u003d compInstanceDir;\n       log.info(\"Creating component instance dir: \" + compInstanceDir);\n     } else {\n       log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n     // add Configuration#env into tokens substitution\n     addEnvForSubstitution(component.getConfiguration().getEnv(),\n         tokensForSubstitution);\n \n     log.info(\"Tokens substitution for component: \" + roleInstance\n         .getCompInstanceName() + System.lineSeparator()\n         + tokensForSubstitution);\n \n     for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n       ConfigFile configFile \u003d originalFile.copy();\n       String fileName \u003d new Path(configFile.getDestFile()).getName();\n \n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n \n       Path remoteFile \u003d new Path(compInstanceDir, fileName);\n       if (!fs.getFileSystem().exists(remoteFile)) {\n         log.info(\"Saving config file on hdfs for component \" + roleInstance\n             .getCompInstanceName() + \": \" + configFile);\n \n         if (configFile.getSrcFile() !\u003d null) {\n           // Load config file template\n           switch (configFile.getType()) {\n           case HADOOP_XML:\n             // Hadoop_xml_template\n             resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n-                tokensForSubstitution, configFile, remoteFile, roleInstance);\n+                tokensForSubstitution, configFile, remoteFile, appState);\n             break;\n           case TEMPLATE:\n             // plain-template\n             resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n-                tokensForSubstitution, configFile, remoteFile, roleInstance);\n+                tokensForSubstitution, configFile, remoteFile, appState);\n             break;\n           default:\n             log.info(\"Not supporting loading src_file for \" + configFile);\n             break;\n           }\n         } else {\n           // non-template\n           resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n               roleInstance, configFile, fileName, remoteFile);\n         }\n       }\n \n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       File destFile \u003d new File(configFile.getDestFile());\n       String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       if (destFile.isAbsolute()) {\n         launcher.addLocalResource(symlink, configResource,\n             configFile.getDestFile());\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile() + \", dest mount path: \"\n             + configFile.getDestFile());\n       } else {\n         launcher.addLocalResource(symlink, configResource);\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void createConfigFileAndAddLocalResource(\n      ContainerLauncher launcher, SliderFileSystem fs, Component component,\n      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance,\n      StateAccessForProviders appState) throws IOException {\n    Path compDir \u003d\n        new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n    Path compInstanceDir \u003d\n        new Path(compDir, roleInstance.getCompInstanceName());\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n      roleInstance.compInstanceDir \u003d compInstanceDir;\n      log.info(\"Creating component instance dir: \" + compInstanceDir);\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    // add Configuration#env into tokens substitution\n    addEnvForSubstitution(component.getConfiguration().getEnv(),\n        tokensForSubstitution);\n\n    log.info(\"Tokens substitution for component: \" + roleInstance\n        .getCompInstanceName() + System.lineSeparator()\n        + tokensForSubstitution);\n\n    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + roleInstance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, appState);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, appState);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // non-template\n          resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n              roleInstance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      File destFile \u003d new File(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      if (destFile.isAbsolute()) {\n        launcher.addLocalResource(symlink, configResource,\n            configFile.getDestFile());\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile() + \", dest mount path: \"\n            + configFile.getDestFile());\n      } else {\n        launcher.addLocalResource(symlink, configResource);\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "845764da146e98927e8ea5b2209f19f4fc3feda5": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-6405. Improve configuring services through REST API. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "845764da146e98927e8ea5b2209f19f4fc3feda5",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6405. Improve configuring services through REST API. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:28 PM",
          "commitName": "845764da146e98927e8ea5b2209f19f4fc3feda5",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:28 PM",
          "commitNameOld": "c31cd981ebabc0747cabcc07a8c8797619ed2c53",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,82 @@\n-  public void createConfigFileAndAddLocalResource(ContainerLauncher launcher,\n-      SliderFileSystem fs, Component component,\n-      Map\u003cString, String\u003e tokensForSubstitution,\n-      StateAccessForProviders amState) throws IOException {\n+  public synchronized void createConfigFileAndAddLocalResource(\n+      ContainerLauncher launcher, SliderFileSystem fs, Component component,\n+      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance)\n+      throws IOException {\n     Path compDir \u003d\n         new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n-    if (!fs.getFileSystem().exists(compDir)) {\n-      fs.getFileSystem().mkdirs(compDir,\n+    Path compInstanceDir \u003d\n+        new Path(compDir, roleInstance.getCompInstanceName());\n+    if (!fs.getFileSystem().exists(compInstanceDir)) {\n+      fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n-      log.info(\"Creating component dir: \" + compDir);\n+      roleInstance.compInstanceDir \u003d compInstanceDir;\n+      log.info(\"Creating component instance dir: \" + compInstanceDir);\n     } else {\n-      log.info(\"Component conf dir already exists: \" + compDir);\n-      return;\n+      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n-    for (ConfigFile configFile : component.getConfiguration().getFiles()) {\n-      String fileName \u003d configFile.getSrcFile();\n+    // add Configuration#env into tokens substitution\n+    addEnvForSubstitution(component.getConfiguration().getEnv(),\n+        tokensForSubstitution);\n+\n+    log.info(\"Tokens substitution for component: \" + roleInstance\n+        .getCompInstanceName() + System.lineSeparator()\n+        + tokensForSubstitution);\n+\n+    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n+      ConfigFile configFile \u003d originalFile.copy();\n+      String fileName \u003d new Path(configFile.getDestFile()).getName();\n+\n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n-      // substitute configs\n-      substituteConfigs(configFile.getProps(), tokensForSubstitution);\n \n-      // write configs onto hdfs\n-      PublishedConfiguration publishedConfiguration \u003d\n-          new PublishedConfiguration(fileName,\n-              configFile.getProps().entrySet());\n-      Path remoteFile \u003d new Path(compDir, fileName);\n+      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n       if (!fs.getFileSystem().exists(remoteFile)) {\n-        synchronized (this) {\n-          if (!fs.getFileSystem().exists(remoteFile)) {\n-            PublishedConfigurationOutputter configurationOutputter \u003d\n-                PublishedConfigurationOutputter.createOutputter(\n-                    ConfigFormat.resolve(configFile.getType().toString()),\n-                    publishedConfiguration);\n-            FSDataOutputStream os \u003d null;\n-            try {\n-              os \u003d fs.getFileSystem().create(remoteFile);\n-              configurationOutputter.save(os);\n-              os.flush();\n-              log.info(\"Created config file on hdfs: \" + remoteFile);\n-            } finally {\n-              IOUtils.closeStream(os);\n-            }\n+        log.info(\"Saving config file on hdfs for component \" + roleInstance\n+            .getCompInstanceName() + \": \" + configFile);\n+\n+        if (configFile.getSrcFile() !\u003d null) {\n+          // Load config file template\n+          switch (configFile.getType()) {\n+          case HADOOP_XML:\n+            // Hadoop_xml_template\n+            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n+                tokensForSubstitution, configFile, remoteFile, roleInstance);\n+            break;\n+          case TEMPLATE:\n+            // plain-template\n+            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n+                tokensForSubstitution, configFile, remoteFile, roleInstance);\n+            break;\n+          default:\n+            log.info(\"Not supporting loading src_file for \" + configFile);\n+            break;\n           }\n+        } else {\n+          // non-template\n+          resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n+              roleInstance, configFile, fileName, remoteFile);\n         }\n       }\n \n-      // Publish configs\n-      amState.getPublishedSliderConfigurations()\n-          .put(configFile.getSrcFile(), publishedConfiguration);\n-\n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       File destFile \u003d new File(configFile.getDestFile());\n-      //TODO why to we need to differetiate  RESOURCE_DIR vs APP_CONF_DIR\n+      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       if (destFile.isAbsolute()) {\n-        String symlink \u003d RESOURCE_DIR + \"/\" + fileName;\n         launcher.addLocalResource(symlink, configResource,\n             configFile.getDestFile());\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile() + \", dest mount path: \"\n             + configFile.getDestFile());\n       } else {\n-        String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n         launcher.addLocalResource(symlink, configResource);\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void createConfigFileAndAddLocalResource(\n      ContainerLauncher launcher, SliderFileSystem fs, Component component,\n      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance)\n      throws IOException {\n    Path compDir \u003d\n        new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n    Path compInstanceDir \u003d\n        new Path(compDir, roleInstance.getCompInstanceName());\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n      roleInstance.compInstanceDir \u003d compInstanceDir;\n      log.info(\"Creating component instance dir: \" + compInstanceDir);\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    // add Configuration#env into tokens substitution\n    addEnvForSubstitution(component.getConfiguration().getEnv(),\n        tokensForSubstitution);\n\n    log.info(\"Tokens substitution for component: \" + roleInstance\n        .getCompInstanceName() + System.lineSeparator()\n        + tokensForSubstitution);\n\n    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + roleInstance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, roleInstance);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, roleInstance);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // non-template\n          resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n              roleInstance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      File destFile \u003d new File(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      if (destFile.isAbsolute()) {\n        launcher.addLocalResource(symlink, configResource,\n            configFile.getDestFile());\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile() + \", dest mount path: \"\n            + configFile.getDestFile());\n      } else {\n        launcher.addLocalResource(symlink, configResource);\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "[launcher-ContainerLauncher, fs-SliderFileSystem, component-Component, tokensForSubstitution-Map\u003cString,String\u003e, amState-StateAccessForProviders]",
            "newValue": "[launcher-ContainerLauncher, fs-SliderFileSystem, component-Component, tokensForSubstitution-Map\u003cString,String\u003e, roleInstance-RoleInstance]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6405. Improve configuring services through REST API. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:28 PM",
          "commitName": "845764da146e98927e8ea5b2209f19f4fc3feda5",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:28 PM",
          "commitNameOld": "c31cd981ebabc0747cabcc07a8c8797619ed2c53",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,82 @@\n-  public void createConfigFileAndAddLocalResource(ContainerLauncher launcher,\n-      SliderFileSystem fs, Component component,\n-      Map\u003cString, String\u003e tokensForSubstitution,\n-      StateAccessForProviders amState) throws IOException {\n+  public synchronized void createConfigFileAndAddLocalResource(\n+      ContainerLauncher launcher, SliderFileSystem fs, Component component,\n+      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance)\n+      throws IOException {\n     Path compDir \u003d\n         new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n-    if (!fs.getFileSystem().exists(compDir)) {\n-      fs.getFileSystem().mkdirs(compDir,\n+    Path compInstanceDir \u003d\n+        new Path(compDir, roleInstance.getCompInstanceName());\n+    if (!fs.getFileSystem().exists(compInstanceDir)) {\n+      fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n-      log.info(\"Creating component dir: \" + compDir);\n+      roleInstance.compInstanceDir \u003d compInstanceDir;\n+      log.info(\"Creating component instance dir: \" + compInstanceDir);\n     } else {\n-      log.info(\"Component conf dir already exists: \" + compDir);\n-      return;\n+      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n-    for (ConfigFile configFile : component.getConfiguration().getFiles()) {\n-      String fileName \u003d configFile.getSrcFile();\n+    // add Configuration#env into tokens substitution\n+    addEnvForSubstitution(component.getConfiguration().getEnv(),\n+        tokensForSubstitution);\n+\n+    log.info(\"Tokens substitution for component: \" + roleInstance\n+        .getCompInstanceName() + System.lineSeparator()\n+        + tokensForSubstitution);\n+\n+    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n+      ConfigFile configFile \u003d originalFile.copy();\n+      String fileName \u003d new Path(configFile.getDestFile()).getName();\n+\n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n-      // substitute configs\n-      substituteConfigs(configFile.getProps(), tokensForSubstitution);\n \n-      // write configs onto hdfs\n-      PublishedConfiguration publishedConfiguration \u003d\n-          new PublishedConfiguration(fileName,\n-              configFile.getProps().entrySet());\n-      Path remoteFile \u003d new Path(compDir, fileName);\n+      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n       if (!fs.getFileSystem().exists(remoteFile)) {\n-        synchronized (this) {\n-          if (!fs.getFileSystem().exists(remoteFile)) {\n-            PublishedConfigurationOutputter configurationOutputter \u003d\n-                PublishedConfigurationOutputter.createOutputter(\n-                    ConfigFormat.resolve(configFile.getType().toString()),\n-                    publishedConfiguration);\n-            FSDataOutputStream os \u003d null;\n-            try {\n-              os \u003d fs.getFileSystem().create(remoteFile);\n-              configurationOutputter.save(os);\n-              os.flush();\n-              log.info(\"Created config file on hdfs: \" + remoteFile);\n-            } finally {\n-              IOUtils.closeStream(os);\n-            }\n+        log.info(\"Saving config file on hdfs for component \" + roleInstance\n+            .getCompInstanceName() + \": \" + configFile);\n+\n+        if (configFile.getSrcFile() !\u003d null) {\n+          // Load config file template\n+          switch (configFile.getType()) {\n+          case HADOOP_XML:\n+            // Hadoop_xml_template\n+            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n+                tokensForSubstitution, configFile, remoteFile, roleInstance);\n+            break;\n+          case TEMPLATE:\n+            // plain-template\n+            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n+                tokensForSubstitution, configFile, remoteFile, roleInstance);\n+            break;\n+          default:\n+            log.info(\"Not supporting loading src_file for \" + configFile);\n+            break;\n           }\n+        } else {\n+          // non-template\n+          resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n+              roleInstance, configFile, fileName, remoteFile);\n         }\n       }\n \n-      // Publish configs\n-      amState.getPublishedSliderConfigurations()\n-          .put(configFile.getSrcFile(), publishedConfiguration);\n-\n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       File destFile \u003d new File(configFile.getDestFile());\n-      //TODO why to we need to differetiate  RESOURCE_DIR vs APP_CONF_DIR\n+      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       if (destFile.isAbsolute()) {\n-        String symlink \u003d RESOURCE_DIR + \"/\" + fileName;\n         launcher.addLocalResource(symlink, configResource,\n             configFile.getDestFile());\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile() + \", dest mount path: \"\n             + configFile.getDestFile());\n       } else {\n-        String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n         launcher.addLocalResource(symlink, configResource);\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void createConfigFileAndAddLocalResource(\n      ContainerLauncher launcher, SliderFileSystem fs, Component component,\n      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance)\n      throws IOException {\n    Path compDir \u003d\n        new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n    Path compInstanceDir \u003d\n        new Path(compDir, roleInstance.getCompInstanceName());\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n      roleInstance.compInstanceDir \u003d compInstanceDir;\n      log.info(\"Creating component instance dir: \" + compInstanceDir);\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    // add Configuration#env into tokens substitution\n    addEnvForSubstitution(component.getConfiguration().getEnv(),\n        tokensForSubstitution);\n\n    log.info(\"Tokens substitution for component: \" + roleInstance\n        .getCompInstanceName() + System.lineSeparator()\n        + tokensForSubstitution);\n\n    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + roleInstance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, roleInstance);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, roleInstance);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // non-template\n          resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n              roleInstance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      File destFile \u003d new File(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      if (destFile.isAbsolute()) {\n        launcher.addLocalResource(symlink, configResource,\n            configFile.getDestFile());\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile() + \", dest mount path: \"\n            + configFile.getDestFile());\n      } else {\n        launcher.addLocalResource(symlink, configResource);\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6405. Improve configuring services through REST API. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:28 PM",
          "commitName": "845764da146e98927e8ea5b2209f19f4fc3feda5",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:28 PM",
          "commitNameOld": "c31cd981ebabc0747cabcc07a8c8797619ed2c53",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,82 @@\n-  public void createConfigFileAndAddLocalResource(ContainerLauncher launcher,\n-      SliderFileSystem fs, Component component,\n-      Map\u003cString, String\u003e tokensForSubstitution,\n-      StateAccessForProviders amState) throws IOException {\n+  public synchronized void createConfigFileAndAddLocalResource(\n+      ContainerLauncher launcher, SliderFileSystem fs, Component component,\n+      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance)\n+      throws IOException {\n     Path compDir \u003d\n         new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n-    if (!fs.getFileSystem().exists(compDir)) {\n-      fs.getFileSystem().mkdirs(compDir,\n+    Path compInstanceDir \u003d\n+        new Path(compDir, roleInstance.getCompInstanceName());\n+    if (!fs.getFileSystem().exists(compInstanceDir)) {\n+      fs.getFileSystem().mkdirs(compInstanceDir,\n           new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n-      log.info(\"Creating component dir: \" + compDir);\n+      roleInstance.compInstanceDir \u003d compInstanceDir;\n+      log.info(\"Creating component instance dir: \" + compInstanceDir);\n     } else {\n-      log.info(\"Component conf dir already exists: \" + compDir);\n-      return;\n+      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n     }\n \n-    for (ConfigFile configFile : component.getConfiguration().getFiles()) {\n-      String fileName \u003d configFile.getSrcFile();\n+    // add Configuration#env into tokens substitution\n+    addEnvForSubstitution(component.getConfiguration().getEnv(),\n+        tokensForSubstitution);\n+\n+    log.info(\"Tokens substitution for component: \" + roleInstance\n+        .getCompInstanceName() + System.lineSeparator()\n+        + tokensForSubstitution);\n+\n+    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n+      ConfigFile configFile \u003d originalFile.copy();\n+      String fileName \u003d new Path(configFile.getDestFile()).getName();\n+\n       // substitute file name\n       for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n         configFile.setDestFile(configFile.getDestFile()\n             .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n       }\n-      // substitute configs\n-      substituteConfigs(configFile.getProps(), tokensForSubstitution);\n \n-      // write configs onto hdfs\n-      PublishedConfiguration publishedConfiguration \u003d\n-          new PublishedConfiguration(fileName,\n-              configFile.getProps().entrySet());\n-      Path remoteFile \u003d new Path(compDir, fileName);\n+      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n       if (!fs.getFileSystem().exists(remoteFile)) {\n-        synchronized (this) {\n-          if (!fs.getFileSystem().exists(remoteFile)) {\n-            PublishedConfigurationOutputter configurationOutputter \u003d\n-                PublishedConfigurationOutputter.createOutputter(\n-                    ConfigFormat.resolve(configFile.getType().toString()),\n-                    publishedConfiguration);\n-            FSDataOutputStream os \u003d null;\n-            try {\n-              os \u003d fs.getFileSystem().create(remoteFile);\n-              configurationOutputter.save(os);\n-              os.flush();\n-              log.info(\"Created config file on hdfs: \" + remoteFile);\n-            } finally {\n-              IOUtils.closeStream(os);\n-            }\n+        log.info(\"Saving config file on hdfs for component \" + roleInstance\n+            .getCompInstanceName() + \": \" + configFile);\n+\n+        if (configFile.getSrcFile() !\u003d null) {\n+          // Load config file template\n+          switch (configFile.getType()) {\n+          case HADOOP_XML:\n+            // Hadoop_xml_template\n+            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n+                tokensForSubstitution, configFile, remoteFile, roleInstance);\n+            break;\n+          case TEMPLATE:\n+            // plain-template\n+            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n+                tokensForSubstitution, configFile, remoteFile, roleInstance);\n+            break;\n+          default:\n+            log.info(\"Not supporting loading src_file for \" + configFile);\n+            break;\n           }\n+        } else {\n+          // non-template\n+          resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n+              roleInstance, configFile, fileName, remoteFile);\n         }\n       }\n \n-      // Publish configs\n-      amState.getPublishedSliderConfigurations()\n-          .put(configFile.getSrcFile(), publishedConfiguration);\n-\n       // Add resource for localization\n       LocalResource configResource \u003d\n           fs.createAmResource(remoteFile, LocalResourceType.FILE);\n       File destFile \u003d new File(configFile.getDestFile());\n-      //TODO why to we need to differetiate  RESOURCE_DIR vs APP_CONF_DIR\n+      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n       if (destFile.isAbsolute()) {\n-        String symlink \u003d RESOURCE_DIR + \"/\" + fileName;\n         launcher.addLocalResource(symlink, configResource,\n             configFile.getDestFile());\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile() + \", dest mount path: \"\n             + configFile.getDestFile());\n       } else {\n-        String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n         launcher.addLocalResource(symlink, configResource);\n         log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n             + configResource.getResource().getFile());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void createConfigFileAndAddLocalResource(\n      ContainerLauncher launcher, SliderFileSystem fs, Component component,\n      Map\u003cString, String\u003e tokensForSubstitution, RoleInstance roleInstance)\n      throws IOException {\n    Path compDir \u003d\n        new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n    Path compInstanceDir \u003d\n        new Path(compDir, roleInstance.getCompInstanceName());\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\n      fs.getFileSystem().mkdirs(compInstanceDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n      roleInstance.compInstanceDir \u003d compInstanceDir;\n      log.info(\"Creating component instance dir: \" + compInstanceDir);\n    } else {\n      log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\n    }\n\n    // add Configuration#env into tokens substitution\n    addEnvForSubstitution(component.getConfiguration().getEnv(),\n        tokensForSubstitution);\n\n    log.info(\"Tokens substitution for component: \" + roleInstance\n        .getCompInstanceName() + System.lineSeparator()\n        + tokensForSubstitution);\n\n    for (ConfigFile originalFile : component.getConfiguration().getFiles()) {\n      ConfigFile configFile \u003d originalFile.copy();\n      String fileName \u003d new Path(configFile.getDestFile()).getName();\n\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n\n      Path remoteFile \u003d new Path(compInstanceDir, fileName);\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        log.info(\"Saving config file on hdfs for component \" + roleInstance\n            .getCompInstanceName() + \": \" + configFile);\n\n        if (configFile.getSrcFile() !\u003d null) {\n          // Load config file template\n          switch (configFile.getType()) {\n          case HADOOP_XML:\n            // Hadoop_xml_template\n            resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, roleInstance);\n            break;\n          case TEMPLATE:\n            // plain-template\n            resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(),\n                tokensForSubstitution, configFile, remoteFile, roleInstance);\n            break;\n          default:\n            log.info(\"Not supporting loading src_file for \" + configFile);\n            break;\n          }\n        } else {\n          // non-template\n          resolveNonTemplateConfigsAndSaveOnHdfs(fs, tokensForSubstitution,\n              roleInstance, configFile, fileName, remoteFile);\n        }\n      }\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      File destFile \u003d new File(configFile.getDestFile());\n      String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n      if (destFile.isAbsolute()) {\n        launcher.addLocalResource(symlink, configResource,\n            configFile.getDestFile());\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile() + \", dest mount path: \"\n            + configFile.getDestFile());\n      } else {\n        launcher.addLocalResource(symlink, configResource);\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "c31cd981ebabc0747cabcc07a8c8797619ed2c53": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6255. Refactor yarn-native-services framework. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "c31cd981ebabc0747cabcc07a8c8797619ed2c53",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,74 @@\n+  public void createConfigFileAndAddLocalResource(ContainerLauncher launcher,\n+      SliderFileSystem fs, Component component,\n+      Map\u003cString, String\u003e tokensForSubstitution,\n+      StateAccessForProviders amState) throws IOException {\n+    Path compDir \u003d\n+        new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n+    if (!fs.getFileSystem().exists(compDir)) {\n+      fs.getFileSystem().mkdirs(compDir,\n+          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n+      log.info(\"Creating component dir: \" + compDir);\n+    } else {\n+      log.info(\"Component conf dir already exists: \" + compDir);\n+      return;\n+    }\n+\n+    for (ConfigFile configFile : component.getConfiguration().getFiles()) {\n+      String fileName \u003d configFile.getSrcFile();\n+      // substitute file name\n+      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n+        configFile.setDestFile(configFile.getDestFile()\n+            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n+      }\n+      // substitute configs\n+      substituteConfigs(configFile.getProps(), tokensForSubstitution);\n+\n+      // write configs onto hdfs\n+      PublishedConfiguration publishedConfiguration \u003d\n+          new PublishedConfiguration(fileName,\n+              configFile.getProps().entrySet());\n+      Path remoteFile \u003d new Path(compDir, fileName);\n+      if (!fs.getFileSystem().exists(remoteFile)) {\n+        synchronized (this) {\n+          if (!fs.getFileSystem().exists(remoteFile)) {\n+            PublishedConfigurationOutputter configurationOutputter \u003d\n+                PublishedConfigurationOutputter.createOutputter(\n+                    ConfigFormat.resolve(configFile.getType().toString()),\n+                    publishedConfiguration);\n+            FSDataOutputStream os \u003d null;\n+            try {\n+              os \u003d fs.getFileSystem().create(remoteFile);\n+              configurationOutputter.save(os);\n+              os.flush();\n+              log.info(\"Created config file on hdfs: \" + remoteFile);\n+            } finally {\n+              IOUtils.closeStream(os);\n+            }\n+          }\n+        }\n+      }\n+\n+      // Publish configs\n+      amState.getPublishedSliderConfigurations()\n+          .put(configFile.getSrcFile(), publishedConfiguration);\n+\n+      // Add resource for localization\n+      LocalResource configResource \u003d\n+          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n+      File destFile \u003d new File(configFile.getDestFile());\n+      //TODO why to we need to differetiate  RESOURCE_DIR vs APP_CONF_DIR\n+      if (destFile.isAbsolute()) {\n+        String symlink \u003d RESOURCE_DIR + \"/\" + fileName;\n+        launcher.addLocalResource(symlink, configResource,\n+            configFile.getDestFile());\n+        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n+            + configResource.getResource().getFile() + \", dest mount path: \"\n+            + configFile.getDestFile());\n+      } else {\n+        String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n+        launcher.addLocalResource(symlink, configResource);\n+        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n+            + configResource.getResource().getFile());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void createConfigFileAndAddLocalResource(ContainerLauncher launcher,\n      SliderFileSystem fs, Component component,\n      Map\u003cString, String\u003e tokensForSubstitution,\n      StateAccessForProviders amState) throws IOException {\n    Path compDir \u003d\n        new Path(new Path(fs.getAppDir(), \"components\"), component.getName());\n    if (!fs.getFileSystem().exists(compDir)) {\n      fs.getFileSystem().mkdirs(compDir,\n          new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\n      log.info(\"Creating component dir: \" + compDir);\n    } else {\n      log.info(\"Component conf dir already exists: \" + compDir);\n      return;\n    }\n\n    for (ConfigFile configFile : component.getConfiguration().getFiles()) {\n      String fileName \u003d configFile.getSrcFile();\n      // substitute file name\n      for (Map.Entry\u003cString, String\u003e token : tokensForSubstitution.entrySet()) {\n        configFile.setDestFile(configFile.getDestFile()\n            .replaceAll(Pattern.quote(token.getKey()), token.getValue()));\n      }\n      // substitute configs\n      substituteConfigs(configFile.getProps(), tokensForSubstitution);\n\n      // write configs onto hdfs\n      PublishedConfiguration publishedConfiguration \u003d\n          new PublishedConfiguration(fileName,\n              configFile.getProps().entrySet());\n      Path remoteFile \u003d new Path(compDir, fileName);\n      if (!fs.getFileSystem().exists(remoteFile)) {\n        synchronized (this) {\n          if (!fs.getFileSystem().exists(remoteFile)) {\n            PublishedConfigurationOutputter configurationOutputter \u003d\n                PublishedConfigurationOutputter.createOutputter(\n                    ConfigFormat.resolve(configFile.getType().toString()),\n                    publishedConfiguration);\n            FSDataOutputStream os \u003d null;\n            try {\n              os \u003d fs.getFileSystem().create(remoteFile);\n              configurationOutputter.save(os);\n              os.flush();\n              log.info(\"Created config file on hdfs: \" + remoteFile);\n            } finally {\n              IOUtils.closeStream(os);\n            }\n          }\n        }\n      }\n\n      // Publish configs\n      amState.getPublishedSliderConfigurations()\n          .put(configFile.getSrcFile(), publishedConfiguration);\n\n      // Add resource for localization\n      LocalResource configResource \u003d\n          fs.createAmResource(remoteFile, LocalResourceType.FILE);\n      File destFile \u003d new File(configFile.getDestFile());\n      //TODO why to we need to differetiate  RESOURCE_DIR vs APP_CONF_DIR\n      if (destFile.isAbsolute()) {\n        String symlink \u003d RESOURCE_DIR + \"/\" + fileName;\n        launcher.addLocalResource(symlink, configResource,\n            configFile.getDestFile());\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile() + \", dest mount path: \"\n            + configFile.getDestFile());\n      } else {\n        String symlink \u003d APP_CONF_DIR + \"/\" + fileName;\n        launcher.addLocalResource(symlink, configResource);\n        log.info(\"Add config file for localization: \" + symlink + \" -\u003e \"\n            + configResource.getResource().getFile());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java"
    }
  }
}