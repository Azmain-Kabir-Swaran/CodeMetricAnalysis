{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OfflineImageReconstructor.java",
  "functionName": "run",
  "functionId": "run___inputPath-String__outputPath-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java",
  "functionStartLine": 1823,
  "functionEndLine": 1849,
  "numCommitsSeen": 15,
  "timeTaken": 2333,
  "changeHistory": [
    "7a3188d054481b9bd563e337901e93476303ce7f",
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
    "700b0e4019cf483f7532609711812150b8c44742"
  ],
  "changeHistoryShort": {
    "7a3188d054481b9bd563e337901e93476303ce7f": "Ybodychange",
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": "Ybodychange",
    "700b0e4019cf483f7532609711812150b8c44742": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3188d054481b9bd563e337901e93476303ce7f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.\n",
      "commitDate": "02/05/19 12:58 PM",
      "commitName": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "06/09/18 2:48 PM",
      "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 237.92,
      "commitsBetweenForRepo": 1864,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public static void run(String inputPath, String outputPath)\n       throws Exception {\n     MessageDigest digester \u003d MD5Hash.getDigester();\n-    FileOutputStream fout \u003d null;\n+    OutputStream fout \u003d null;\n     File foutHash \u003d new File(outputPath + \".md5\");\n     Files.deleteIfExists(foutHash.toPath()); // delete any .md5 file that exists\n     CountingOutputStream out \u003d null;\n-    FileInputStream fis \u003d null;\n+    InputStream fis \u003d null;\n     InputStreamReader reader \u003d null;\n     try {\n       Files.deleteIfExists(Paths.get(outputPath));\n-      fout \u003d new FileOutputStream(outputPath);\n-      fis \u003d new FileInputStream(inputPath);\n+      fout \u003d Files.newOutputStream(Paths.get(outputPath));\n+      fis \u003d Files.newInputStream(Paths.get(inputPath));\n       reader \u003d new InputStreamReader(fis, Charset.forName(\"UTF-8\"));\n       out \u003d new CountingOutputStream(\n           new DigestOutputStream(\n               new BufferedOutputStream(fout), digester));\n       OfflineImageReconstructor oir \u003d\n           new OfflineImageReconstructor(out, reader);\n       oir.processXml();\n     } finally {\n       IOUtils.cleanupWithLogger(LOG, reader, fis, out, fout);\n     }\n     // Write the md5 file\n     MD5FileUtils.saveMD5File(new File(outputPath),\n         new MD5Hash(digester.digest()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void run(String inputPath, String outputPath)\n      throws Exception {\n    MessageDigest digester \u003d MD5Hash.getDigester();\n    OutputStream fout \u003d null;\n    File foutHash \u003d new File(outputPath + \".md5\");\n    Files.deleteIfExists(foutHash.toPath()); // delete any .md5 file that exists\n    CountingOutputStream out \u003d null;\n    InputStream fis \u003d null;\n    InputStreamReader reader \u003d null;\n    try {\n      Files.deleteIfExists(Paths.get(outputPath));\n      fout \u003d Files.newOutputStream(Paths.get(outputPath));\n      fis \u003d Files.newInputStream(Paths.get(inputPath));\n      reader \u003d new InputStreamReader(fis, Charset.forName(\"UTF-8\"));\n      out \u003d new CountingOutputStream(\n          new DigestOutputStream(\n              new BufferedOutputStream(fout), digester));\n      OfflineImageReconstructor oir \u003d\n          new OfflineImageReconstructor(out, reader);\n      oir.processXml();\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, reader, fis, out, fout);\n    }\n    // Write the md5 file\n    MD5FileUtils.saveMD5File(new File(outputPath),\n        new MD5Hash(digester.digest()));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java",
      "extendedDetails": {}
    },
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13695. Move logging to slf4j in HDFS package. Contributed by Ian Pickering.\n",
      "commitDate": "06/09/18 2:48 PM",
      "commitName": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "17/04/18 10:38 PM",
      "commitNameOld": "2d9e791a9073de9f65fef5407efd3a42894bc97f",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 141.67,
      "commitsBetweenForRepo": 1534,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public static void run(String inputPath, String outputPath)\n       throws Exception {\n     MessageDigest digester \u003d MD5Hash.getDigester();\n     FileOutputStream fout \u003d null;\n     File foutHash \u003d new File(outputPath + \".md5\");\n     Files.deleteIfExists(foutHash.toPath()); // delete any .md5 file that exists\n     CountingOutputStream out \u003d null;\n     FileInputStream fis \u003d null;\n     InputStreamReader reader \u003d null;\n     try {\n       Files.deleteIfExists(Paths.get(outputPath));\n       fout \u003d new FileOutputStream(outputPath);\n       fis \u003d new FileInputStream(inputPath);\n       reader \u003d new InputStreamReader(fis, Charset.forName(\"UTF-8\"));\n       out \u003d new CountingOutputStream(\n           new DigestOutputStream(\n               new BufferedOutputStream(fout), digester));\n       OfflineImageReconstructor oir \u003d\n           new OfflineImageReconstructor(out, reader);\n       oir.processXml();\n     } finally {\n-      IOUtils.cleanup(LOG, reader, fis, out, fout);\n+      IOUtils.cleanupWithLogger(LOG, reader, fis, out, fout);\n     }\n     // Write the md5 file\n     MD5FileUtils.saveMD5File(new File(outputPath),\n         new MD5Hash(digester.digest()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void run(String inputPath, String outputPath)\n      throws Exception {\n    MessageDigest digester \u003d MD5Hash.getDigester();\n    FileOutputStream fout \u003d null;\n    File foutHash \u003d new File(outputPath + \".md5\");\n    Files.deleteIfExists(foutHash.toPath()); // delete any .md5 file that exists\n    CountingOutputStream out \u003d null;\n    FileInputStream fis \u003d null;\n    InputStreamReader reader \u003d null;\n    try {\n      Files.deleteIfExists(Paths.get(outputPath));\n      fout \u003d new FileOutputStream(outputPath);\n      fis \u003d new FileInputStream(inputPath);\n      reader \u003d new InputStreamReader(fis, Charset.forName(\"UTF-8\"));\n      out \u003d new CountingOutputStream(\n          new DigestOutputStream(\n              new BufferedOutputStream(fout), digester));\n      OfflineImageReconstructor oir \u003d\n          new OfflineImageReconstructor(out, reader);\n      oir.processXml();\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, reader, fis, out, fout);\n    }\n    // Write the md5 file\n    MD5FileUtils.saveMD5File(new File(outputPath),\n        new MD5Hash(digester.digest()));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java",
      "extendedDetails": {}
    },
    "700b0e4019cf483f7532609711812150b8c44742": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9835. OIV: add ReverseXML processor which reconstructs an fsimage from an XML file (cmccabe)\n",
      "commitDate": "02/03/16 5:56 PM",
      "commitName": "700b0e4019cf483f7532609711812150b8c44742",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,27 @@\n+  public static void run(String inputPath, String outputPath)\n+      throws Exception {\n+    MessageDigest digester \u003d MD5Hash.getDigester();\n+    FileOutputStream fout \u003d null;\n+    File foutHash \u003d new File(outputPath + \".md5\");\n+    Files.deleteIfExists(foutHash.toPath()); // delete any .md5 file that exists\n+    CountingOutputStream out \u003d null;\n+    FileInputStream fis \u003d null;\n+    InputStreamReader reader \u003d null;\n+    try {\n+      Files.deleteIfExists(Paths.get(outputPath));\n+      fout \u003d new FileOutputStream(outputPath);\n+      fis \u003d new FileInputStream(inputPath);\n+      reader \u003d new InputStreamReader(fis, Charset.forName(\"UTF-8\"));\n+      out \u003d new CountingOutputStream(\n+          new DigestOutputStream(\n+              new BufferedOutputStream(fout), digester));\n+      OfflineImageReconstructor oir \u003d\n+          new OfflineImageReconstructor(out, reader);\n+      oir.processXml();\n+    } finally {\n+      IOUtils.cleanup(LOG, reader, fis, out, fout);\n+    }\n+    // Write the md5 file\n+    MD5FileUtils.saveMD5File(new File(outputPath),\n+        new MD5Hash(digester.digest()));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void run(String inputPath, String outputPath)\n      throws Exception {\n    MessageDigest digester \u003d MD5Hash.getDigester();\n    FileOutputStream fout \u003d null;\n    File foutHash \u003d new File(outputPath + \".md5\");\n    Files.deleteIfExists(foutHash.toPath()); // delete any .md5 file that exists\n    CountingOutputStream out \u003d null;\n    FileInputStream fis \u003d null;\n    InputStreamReader reader \u003d null;\n    try {\n      Files.deleteIfExists(Paths.get(outputPath));\n      fout \u003d new FileOutputStream(outputPath);\n      fis \u003d new FileInputStream(inputPath);\n      reader \u003d new InputStreamReader(fis, Charset.forName(\"UTF-8\"));\n      out \u003d new CountingOutputStream(\n          new DigestOutputStream(\n              new BufferedOutputStream(fout), digester));\n      OfflineImageReconstructor oir \u003d\n          new OfflineImageReconstructor(out, reader);\n      oir.processXml();\n    } finally {\n      IOUtils.cleanup(LOG, reader, fis, out, fout);\n    }\n    // Write the md5 file\n    MD5FileUtils.saveMD5File(new File(outputPath),\n        new MD5Hash(digester.digest()));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java"
    }
  }
}