{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReencryptionHandler.java",
  "functionName": "checkINodeReady",
  "functionId": "checkINodeReady___zoneId-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
  "functionStartLine": 680,
  "functionEndLine": 694,
  "numCommitsSeen": 13,
  "timeTaken": 4383,
  "changeHistory": [
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
    "1000a2af04b24c123a3b08168f36b4e90420cab7"
  ],
  "changeHistoryShort": {
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Yparametermetachange)",
    "1000a2af04b24c123a3b08168f36b4e90420cab7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Yparametermetachange)",
      "commitMessage": "HDFS-13328. Abstract ReencryptionHandler recursive logic in separate class. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "10/04/18 11:05 AM",
      "commitName": "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
      "commitAuthor": "Rakesh Radhakrishnan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-13328. Abstract ReencryptionHandler recursive logic in separate class. Contributed by Surendra Singh Lilhore.\n",
          "commitDate": "10/04/18 11:05 AM",
          "commitName": "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
          "commitAuthor": "Rakesh Radhakrishnan",
          "commitDateOld": "08/02/18 10:55 AM",
          "commitNameOld": "996796f1048369e0f307f935ba01af64cc751a85",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 60.96,
          "commitsBetweenForRepo": 509,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,15 @@\n-  void checkZoneReady(final long zoneId)\n-      throws RetriableException, SafeModeException, IOException {\n-    final ZoneReencryptionStatus zs \u003d\n-        getReencryptionStatus().getZoneStatus(zoneId);\n-    if (zs \u003d\u003d null) {\n-      throw new IOException(\"Zone \" + zoneId + \" status cannot be found.\");\n-    }\n-    if (zs.isCanceled()) {\n-      throw new IOException(\"Re-encryption is canceled for zone \" + zoneId);\n-    }\n-    dir.getFSNamesystem()\n-        .checkNameNodeSafeMode(\"NN is in safe mode, cannot re-encrypt.\");\n-    // re-encryption should be cancelled when NN goes to standby. Just\n-    // double checking for sanity.\n-    dir.getFSNamesystem().checkOperation(NameNode.OperationCategory.WRITE);\n-  }\n\\ No newline at end of file\n+    protected void checkINodeReady(long zoneId) throws IOException {\n+      final ZoneReencryptionStatus zs \u003d getReencryptionStatus().getZoneStatus(\n+          zoneId);\n+      if (zs \u003d\u003d null) {\n+        throw new IOException(\"Zone \" + zoneId + \" status cannot be found.\");\n+      }\n+      if (zs.isCanceled()) {\n+        throw new IOException(\"Re-encryption is canceled for zone \" + zoneId);\n+      }\n+      dir.getFSNamesystem().checkNameNodeSafeMode(\n+          \"NN is in safe mode, cannot re-encrypt.\");\n+      // re-encryption should be cancelled when NN goes to standby. Just\n+      // double checking for sanity.\n+      dir.getFSNamesystem().checkOperation(NameNode.OperationCategory.WRITE);\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    protected void checkINodeReady(long zoneId) throws IOException {\n      final ZoneReencryptionStatus zs \u003d getReencryptionStatus().getZoneStatus(\n          zoneId);\n      if (zs \u003d\u003d null) {\n        throw new IOException(\"Zone \" + zoneId + \" status cannot be found.\");\n      }\n      if (zs.isCanceled()) {\n        throw new IOException(\"Re-encryption is canceled for zone \" + zoneId);\n      }\n      dir.getFSNamesystem().checkNameNodeSafeMode(\n          \"NN is in safe mode, cannot re-encrypt.\");\n      // re-encryption should be cancelled when NN goes to standby. Just\n      // double checking for sanity.\n      dir.getFSNamesystem().checkOperation(NameNode.OperationCategory.WRITE);\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
          "extendedDetails": {
            "oldValue": "checkZoneReady",
            "newValue": "checkINodeReady"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-13328. Abstract ReencryptionHandler recursive logic in separate class. Contributed by Surendra Singh Lilhore.\n",
          "commitDate": "10/04/18 11:05 AM",
          "commitName": "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
          "commitAuthor": "Rakesh Radhakrishnan",
          "commitDateOld": "08/02/18 10:55 AM",
          "commitNameOld": "996796f1048369e0f307f935ba01af64cc751a85",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 60.96,
          "commitsBetweenForRepo": 509,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,15 @@\n-  void checkZoneReady(final long zoneId)\n-      throws RetriableException, SafeModeException, IOException {\n-    final ZoneReencryptionStatus zs \u003d\n-        getReencryptionStatus().getZoneStatus(zoneId);\n-    if (zs \u003d\u003d null) {\n-      throw new IOException(\"Zone \" + zoneId + \" status cannot be found.\");\n-    }\n-    if (zs.isCanceled()) {\n-      throw new IOException(\"Re-encryption is canceled for zone \" + zoneId);\n-    }\n-    dir.getFSNamesystem()\n-        .checkNameNodeSafeMode(\"NN is in safe mode, cannot re-encrypt.\");\n-    // re-encryption should be cancelled when NN goes to standby. Just\n-    // double checking for sanity.\n-    dir.getFSNamesystem().checkOperation(NameNode.OperationCategory.WRITE);\n-  }\n\\ No newline at end of file\n+    protected void checkINodeReady(long zoneId) throws IOException {\n+      final ZoneReencryptionStatus zs \u003d getReencryptionStatus().getZoneStatus(\n+          zoneId);\n+      if (zs \u003d\u003d null) {\n+        throw new IOException(\"Zone \" + zoneId + \" status cannot be found.\");\n+      }\n+      if (zs.isCanceled()) {\n+        throw new IOException(\"Re-encryption is canceled for zone \" + zoneId);\n+      }\n+      dir.getFSNamesystem().checkNameNodeSafeMode(\n+          \"NN is in safe mode, cannot re-encrypt.\");\n+      // re-encryption should be cancelled when NN goes to standby. Just\n+      // double checking for sanity.\n+      dir.getFSNamesystem().checkOperation(NameNode.OperationCategory.WRITE);\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    protected void checkINodeReady(long zoneId) throws IOException {\n      final ZoneReencryptionStatus zs \u003d getReencryptionStatus().getZoneStatus(\n          zoneId);\n      if (zs \u003d\u003d null) {\n        throw new IOException(\"Zone \" + zoneId + \" status cannot be found.\");\n      }\n      if (zs.isCanceled()) {\n        throw new IOException(\"Re-encryption is canceled for zone \" + zoneId);\n      }\n      dir.getFSNamesystem().checkNameNodeSafeMode(\n          \"NN is in safe mode, cannot re-encrypt.\");\n      // re-encryption should be cancelled when NN goes to standby. Just\n      // double checking for sanity.\n      dir.getFSNamesystem().checkOperation(NameNode.OperationCategory.WRITE);\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-13328. Abstract ReencryptionHandler recursive logic in separate class. Contributed by Surendra Singh Lilhore.\n",
          "commitDate": "10/04/18 11:05 AM",
          "commitName": "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
          "commitAuthor": "Rakesh Radhakrishnan",
          "commitDateOld": "08/02/18 10:55 AM",
          "commitNameOld": "996796f1048369e0f307f935ba01af64cc751a85",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 60.96,
          "commitsBetweenForRepo": 509,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,15 @@\n-  void checkZoneReady(final long zoneId)\n-      throws RetriableException, SafeModeException, IOException {\n-    final ZoneReencryptionStatus zs \u003d\n-        getReencryptionStatus().getZoneStatus(zoneId);\n-    if (zs \u003d\u003d null) {\n-      throw new IOException(\"Zone \" + zoneId + \" status cannot be found.\");\n-    }\n-    if (zs.isCanceled()) {\n-      throw new IOException(\"Re-encryption is canceled for zone \" + zoneId);\n-    }\n-    dir.getFSNamesystem()\n-        .checkNameNodeSafeMode(\"NN is in safe mode, cannot re-encrypt.\");\n-    // re-encryption should be cancelled when NN goes to standby. Just\n-    // double checking for sanity.\n-    dir.getFSNamesystem().checkOperation(NameNode.OperationCategory.WRITE);\n-  }\n\\ No newline at end of file\n+    protected void checkINodeReady(long zoneId) throws IOException {\n+      final ZoneReencryptionStatus zs \u003d getReencryptionStatus().getZoneStatus(\n+          zoneId);\n+      if (zs \u003d\u003d null) {\n+        throw new IOException(\"Zone \" + zoneId + \" status cannot be found.\");\n+      }\n+      if (zs.isCanceled()) {\n+        throw new IOException(\"Re-encryption is canceled for zone \" + zoneId);\n+      }\n+      dir.getFSNamesystem().checkNameNodeSafeMode(\n+          \"NN is in safe mode, cannot re-encrypt.\");\n+      // re-encryption should be cancelled when NN goes to standby. Just\n+      // double checking for sanity.\n+      dir.getFSNamesystem().checkOperation(NameNode.OperationCategory.WRITE);\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    protected void checkINodeReady(long zoneId) throws IOException {\n      final ZoneReencryptionStatus zs \u003d getReencryptionStatus().getZoneStatus(\n          zoneId);\n      if (zs \u003d\u003d null) {\n        throw new IOException(\"Zone \" + zoneId + \" status cannot be found.\");\n      }\n      if (zs.isCanceled()) {\n        throw new IOException(\"Re-encryption is canceled for zone \" + zoneId);\n      }\n      dir.getFSNamesystem().checkNameNodeSafeMode(\n          \"NN is in safe mode, cannot re-encrypt.\");\n      // re-encryption should be cancelled when NN goes to standby. Just\n      // double checking for sanity.\n      dir.getFSNamesystem().checkOperation(NameNode.OperationCategory.WRITE);\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
          "extendedDetails": {
            "oldValue": "[RetriableException, SafeModeException, IOException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-13328. Abstract ReencryptionHandler recursive logic in separate class. Contributed by Surendra Singh Lilhore.\n",
          "commitDate": "10/04/18 11:05 AM",
          "commitName": "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
          "commitAuthor": "Rakesh Radhakrishnan",
          "commitDateOld": "08/02/18 10:55 AM",
          "commitNameOld": "996796f1048369e0f307f935ba01af64cc751a85",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 60.96,
          "commitsBetweenForRepo": 509,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,15 @@\n-  void checkZoneReady(final long zoneId)\n-      throws RetriableException, SafeModeException, IOException {\n-    final ZoneReencryptionStatus zs \u003d\n-        getReencryptionStatus().getZoneStatus(zoneId);\n-    if (zs \u003d\u003d null) {\n-      throw new IOException(\"Zone \" + zoneId + \" status cannot be found.\");\n-    }\n-    if (zs.isCanceled()) {\n-      throw new IOException(\"Re-encryption is canceled for zone \" + zoneId);\n-    }\n-    dir.getFSNamesystem()\n-        .checkNameNodeSafeMode(\"NN is in safe mode, cannot re-encrypt.\");\n-    // re-encryption should be cancelled when NN goes to standby. Just\n-    // double checking for sanity.\n-    dir.getFSNamesystem().checkOperation(NameNode.OperationCategory.WRITE);\n-  }\n\\ No newline at end of file\n+    protected void checkINodeReady(long zoneId) throws IOException {\n+      final ZoneReencryptionStatus zs \u003d getReencryptionStatus().getZoneStatus(\n+          zoneId);\n+      if (zs \u003d\u003d null) {\n+        throw new IOException(\"Zone \" + zoneId + \" status cannot be found.\");\n+      }\n+      if (zs.isCanceled()) {\n+        throw new IOException(\"Re-encryption is canceled for zone \" + zoneId);\n+      }\n+      dir.getFSNamesystem().checkNameNodeSafeMode(\n+          \"NN is in safe mode, cannot re-encrypt.\");\n+      // re-encryption should be cancelled when NN goes to standby. Just\n+      // double checking for sanity.\n+      dir.getFSNamesystem().checkOperation(NameNode.OperationCategory.WRITE);\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    protected void checkINodeReady(long zoneId) throws IOException {\n      final ZoneReencryptionStatus zs \u003d getReencryptionStatus().getZoneStatus(\n          zoneId);\n      if (zs \u003d\u003d null) {\n        throw new IOException(\"Zone \" + zoneId + \" status cannot be found.\");\n      }\n      if (zs.isCanceled()) {\n        throw new IOException(\"Re-encryption is canceled for zone \" + zoneId);\n      }\n      dir.getFSNamesystem().checkNameNodeSafeMode(\n          \"NN is in safe mode, cannot re-encrypt.\");\n      // re-encryption should be cancelled when NN goes to standby. Just\n      // double checking for sanity.\n      dir.getFSNamesystem().checkOperation(NameNode.OperationCategory.WRITE);\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
          "extendedDetails": {
            "oldValue": "[zoneId-long(modifiers-final)]",
            "newValue": "[zoneId-long]"
          }
        }
      ]
    },
    "1000a2af04b24c123a3b08168f36b4e90420cab7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10899. Add functionality to re-encrypt EDEKs.\n",
      "commitDate": "23/08/17 5:06 PM",
      "commitName": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,16 @@\n+  void checkZoneReady(final long zoneId)\n+      throws RetriableException, SafeModeException, IOException {\n+    final ZoneReencryptionStatus zs \u003d\n+        getReencryptionStatus().getZoneStatus(zoneId);\n+    if (zs \u003d\u003d null) {\n+      throw new IOException(\"Zone \" + zoneId + \" status cannot be found.\");\n+    }\n+    if (zs.isCanceled()) {\n+      throw new IOException(\"Re-encryption is canceled for zone \" + zoneId);\n+    }\n+    dir.getFSNamesystem()\n+        .checkNameNodeSafeMode(\"NN is in safe mode, cannot re-encrypt.\");\n+    // re-encryption should be cancelled when NN goes to standby. Just\n+    // double checking for sanity.\n+    dir.getFSNamesystem().checkOperation(NameNode.OperationCategory.WRITE);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void checkZoneReady(final long zoneId)\n      throws RetriableException, SafeModeException, IOException {\n    final ZoneReencryptionStatus zs \u003d\n        getReencryptionStatus().getZoneStatus(zoneId);\n    if (zs \u003d\u003d null) {\n      throw new IOException(\"Zone \" + zoneId + \" status cannot be found.\");\n    }\n    if (zs.isCanceled()) {\n      throw new IOException(\"Re-encryption is canceled for zone \" + zoneId);\n    }\n    dir.getFSNamesystem()\n        .checkNameNodeSafeMode(\"NN is in safe mode, cannot re-encrypt.\");\n    // re-encryption should be cancelled when NN goes to standby. Just\n    // double checking for sanity.\n    dir.getFSNamesystem().checkOperation(NameNode.OperationCategory.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java"
    }
  }
}