{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "getAppId",
  "functionId": "getAppId___serviceName-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 1759,
  "functionEndLine": 1777,
  "numCommitsSeen": 58,
  "timeTaken": 5093,
  "changeHistory": [
    "d553799030a5a64df328319aceb35734d0b2de20",
    "d30d57828fddaa8667de49af879cde999907c7f6",
    "4f40cd314ab14f735a465fb9dff2dc1bf118e703",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "d553799030a5a64df328319aceb35734d0b2de20": "Ybodychange",
    "d30d57828fddaa8667de49af879cde999907c7f6": "Ybodychange",
    "4f40cd314ab14f735a465fb9dff2dc1bf118e703": "Ymodifierchange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Yrename",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d553799030a5a64df328319aceb35734d0b2de20": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7984. Improved YARN service stop/destroy and clean up.\n           Contributed by Billie Rinaldi\n",
      "commitDate": "10/04/18 2:40 PM",
      "commitName": "d553799030a5a64df328319aceb35734d0b2de20",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "26/03/18 3:46 PM",
      "commitNameOld": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 14.95,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,19 @@\n   public synchronized ApplicationId getAppId(String serviceName)\n       throws IOException, YarnException {\n     if (cachedAppInfo.containsKey(serviceName)) {\n       return cachedAppInfo.get(serviceName).appId;\n     }\n     Service persistedService \u003d ServiceApiUtil.loadService(fs, serviceName);\n     if (persistedService \u003d\u003d null) {\n       throw new YarnException(\"Service \" + serviceName\n           + \" doesn\u0027t exist on hdfs. Please check if the app exists in RM\");\n     }\n-    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedService.getId());\n+    if (persistedService.getId() \u003d\u003d null) {\n+      return null;\n+    }\n+    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedService\n+        .getId());\n     cachedAppInfo.put(serviceName, new AppInfo(currentAppId, persistedService\n         .getKerberosPrincipal().getPrincipalName()));\n     return currentAppId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ApplicationId getAppId(String serviceName)\n      throws IOException, YarnException {\n    if (cachedAppInfo.containsKey(serviceName)) {\n      return cachedAppInfo.get(serviceName).appId;\n    }\n    Service persistedService \u003d ServiceApiUtil.loadService(fs, serviceName);\n    if (persistedService \u003d\u003d null) {\n      throw new YarnException(\"Service \" + serviceName\n          + \" doesn\u0027t exist on hdfs. Please check if the app exists in RM\");\n    }\n    if (persistedService.getId() \u003d\u003d null) {\n      return null;\n    }\n    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedService\n        .getId());\n    cachedAppInfo.put(serviceName, new AppInfo(currentAppId, persistedService\n        .getKerberosPrincipal().getPrincipalName()));\n    return currentAppId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/11/17 10:53 AM",
      "commitNameOld": "6bf2c301924a3acae5a7510b8473f6292a5a471b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 18.05,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,15 @@\n   public synchronized ApplicationId getAppId(String serviceName)\n       throws IOException, YarnException {\n-    if (cachedAppIds.containsKey(serviceName)) {\n-      return cachedAppIds.get(serviceName);\n+    if (cachedAppInfo.containsKey(serviceName)) {\n+      return cachedAppInfo.get(serviceName).appId;\n     }\n     Service persistedService \u003d ServiceApiUtil.loadService(fs, serviceName);\n     if (persistedService \u003d\u003d null) {\n       throw new YarnException(\"Service \" + serviceName\n           + \" doesn\u0027t exist on hdfs. Please check if the app exists in RM\");\n     }\n     ApplicationId currentAppId \u003d ApplicationId.fromString(persistedService.getId());\n-    cachedAppIds.put(serviceName, currentAppId);\n+    cachedAppInfo.put(serviceName, new AppInfo(currentAppId, persistedService\n+        .getKerberosPrincipal().getPrincipalName()));\n     return currentAppId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ApplicationId getAppId(String serviceName)\n      throws IOException, YarnException {\n    if (cachedAppInfo.containsKey(serviceName)) {\n      return cachedAppInfo.get(serviceName).appId;\n    }\n    Service persistedService \u003d ServiceApiUtil.loadService(fs, serviceName);\n    if (persistedService \u003d\u003d null) {\n      throw new YarnException(\"Service \" + serviceName\n          + \" doesn\u0027t exist on hdfs. Please check if the app exists in RM\");\n    }\n    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedService.getId());\n    cachedAppInfo.put(serviceName, new AppInfo(currentAppId, persistedService\n        .getKerberosPrincipal().getPrincipalName()));\n    return currentAppId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "4f40cd314ab14f735a465fb9dff2dc1bf118e703": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-7488. Make ServiceClient.getAppId method public to return ApplicationId for a service name. Contributed by Gour Saha\n",
      "commitDate": "13/11/17 6:57 PM",
      "commitName": "4f40cd314ab14f735a465fb9dff2dc1bf118e703",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 7.23,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n-  private synchronized ApplicationId getAppId(String serviceName)\n+  public synchronized ApplicationId getAppId(String serviceName)\n       throws IOException, YarnException {\n     if (cachedAppIds.containsKey(serviceName)) {\n       return cachedAppIds.get(serviceName);\n     }\n     Service persistedService \u003d ServiceApiUtil.loadService(fs, serviceName);\n     if (persistedService \u003d\u003d null) {\n       throw new YarnException(\"Service \" + serviceName\n           + \" doesn\u0027t exist on hdfs. Please check if the app exists in RM\");\n     }\n     ApplicationId currentAppId \u003d ApplicationId.fromString(persistedService.getId());\n     cachedAppIds.put(serviceName, currentAppId);\n     return currentAppId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ApplicationId getAppId(String serviceName)\n      throws IOException, YarnException {\n    if (cachedAppIds.containsKey(serviceName)) {\n      return cachedAppIds.get(serviceName);\n    }\n    Service persistedService \u003d ServiceApiUtil.loadService(fs, serviceName);\n    if (persistedService \u003d\u003d null) {\n      throw new YarnException(\"Service \" + serviceName\n          + \" doesn\u0027t exist on hdfs. Please check if the app exists in RM\");\n    }\n    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedService.getId());\n    cachedAppIds.put(serviceName, currentAppId);\n    return currentAppId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {
        "oldValue": "[private, synchronized]",
        "newValue": "[public, synchronized]"
      }
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private synchronized ApplicationId getAppId(String appName)\n+  private synchronized ApplicationId getAppId(String serviceName)\n       throws IOException, YarnException {\n-    if (cachedAppIds.containsKey(appName)) {\n-      return cachedAppIds.get(appName);\n+    if (cachedAppIds.containsKey(serviceName)) {\n+      return cachedAppIds.get(serviceName);\n     }\n-    Application persistedApp \u003d ServiceApiUtil.loadApplication(fs, appName);\n-    if (persistedApp \u003d\u003d null) {\n-      throw new YarnException(\"Application \" + appName\n+    Service persistedService \u003d ServiceApiUtil.loadService(fs, serviceName);\n+    if (persistedService \u003d\u003d null) {\n+      throw new YarnException(\"Service \" + serviceName\n           + \" doesn\u0027t exist on hdfs. Please check if the app exists in RM\");\n     }\n-    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedApp.getId());\n-    cachedAppIds.put(appName, currentAppId);\n+    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedService.getId());\n+    cachedAppIds.put(serviceName, currentAppId);\n     return currentAppId;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized ApplicationId getAppId(String serviceName)\n      throws IOException, YarnException {\n    if (cachedAppIds.containsKey(serviceName)) {\n      return cachedAppIds.get(serviceName);\n    }\n    Service persistedService \u003d ServiceApiUtil.loadService(fs, serviceName);\n    if (persistedService \u003d\u003d null) {\n      throw new YarnException(\"Service \" + serviceName\n          + \" doesn\u0027t exist on hdfs. Please check if the app exists in RM\");\n    }\n    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedService.getId());\n    cachedAppIds.put(serviceName, currentAppId);\n    return currentAppId;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private synchronized ApplicationId getAppId(String appName)\n+  private synchronized ApplicationId getAppId(String serviceName)\n       throws IOException, YarnException {\n-    if (cachedAppIds.containsKey(appName)) {\n-      return cachedAppIds.get(appName);\n+    if (cachedAppIds.containsKey(serviceName)) {\n+      return cachedAppIds.get(serviceName);\n     }\n-    Application persistedApp \u003d ServiceApiUtil.loadApplication(fs, appName);\n-    if (persistedApp \u003d\u003d null) {\n-      throw new YarnException(\"Application \" + appName\n+    Service persistedService \u003d ServiceApiUtil.loadService(fs, serviceName);\n+    if (persistedService \u003d\u003d null) {\n+      throw new YarnException(\"Service \" + serviceName\n           + \" doesn\u0027t exist on hdfs. Please check if the app exists in RM\");\n     }\n-    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedApp.getId());\n-    cachedAppIds.put(appName, currentAppId);\n+    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedService.getId());\n+    cachedAppIds.put(serviceName, currentAppId);\n     return currentAppId;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized ApplicationId getAppId(String serviceName)\n      throws IOException, YarnException {\n    if (cachedAppIds.containsKey(serviceName)) {\n      return cachedAppIds.get(serviceName);\n    }\n    Service persistedService \u003d ServiceApiUtil.loadService(fs, serviceName);\n    if (persistedService \u003d\u003d null) {\n      throw new YarnException(\"Service \" + serviceName\n          + \" doesn\u0027t exist on hdfs. Please check if the app exists in RM\");\n    }\n    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedService.getId());\n    cachedAppIds.put(serviceName, currentAppId);\n    return currentAppId;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private synchronized ApplicationId getAppId(String appName)\n+  private synchronized ApplicationId getAppId(String serviceName)\n       throws IOException, YarnException {\n-    if (cachedAppIds.containsKey(appName)) {\n-      return cachedAppIds.get(appName);\n+    if (cachedAppIds.containsKey(serviceName)) {\n+      return cachedAppIds.get(serviceName);\n     }\n-    Application persistedApp \u003d ServiceApiUtil.loadApplication(fs, appName);\n-    if (persistedApp \u003d\u003d null) {\n-      throw new YarnException(\"Application \" + appName\n+    Service persistedService \u003d ServiceApiUtil.loadService(fs, serviceName);\n+    if (persistedService \u003d\u003d null) {\n+      throw new YarnException(\"Service \" + serviceName\n           + \" doesn\u0027t exist on hdfs. Please check if the app exists in RM\");\n     }\n-    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedApp.getId());\n-    cachedAppIds.put(appName, currentAppId);\n+    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedService.getId());\n+    cachedAppIds.put(serviceName, currentAppId);\n     return currentAppId;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized ApplicationId getAppId(String serviceName)\n      throws IOException, YarnException {\n    if (cachedAppIds.containsKey(serviceName)) {\n      return cachedAppIds.get(serviceName);\n    }\n    Service persistedService \u003d ServiceApiUtil.loadService(fs, serviceName);\n    if (persistedService \u003d\u003d null) {\n      throw new YarnException(\"Service \" + serviceName\n          + \" doesn\u0027t exist on hdfs. Please check if the app exists in RM\");\n    }\n    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedService.getId());\n    cachedAppIds.put(serviceName, currentAppId);\n    return currentAppId;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[appName-String]",
            "newValue": "[serviceName-String]"
          }
        }
      ]
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Yrename",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n-  private synchronized ApplicationId getAppIdFromPersistedApp(String appName)\n+  private synchronized ApplicationId getAppId(String appName)\n       throws IOException, YarnException {\n     if (cachedAppIds.containsKey(appName)) {\n       return cachedAppIds.get(appName);\n     }\n     Application persistedApp \u003d ServiceApiUtil.loadApplication(fs, appName);\n     if (persistedApp \u003d\u003d null) {\n       throw new YarnException(\"Application \" + appName\n           + \" doesn\u0027t exist on hdfs. Please check if the app exists in RM\");\n     }\n     ApplicationId currentAppId \u003d ApplicationId.fromString(persistedApp.getId());\n     cachedAppIds.put(appName, currentAppId);\n     return currentAppId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized ApplicationId getAppId(String appName)\n      throws IOException, YarnException {\n    if (cachedAppIds.containsKey(appName)) {\n      return cachedAppIds.get(appName);\n    }\n    Application persistedApp \u003d ServiceApiUtil.loadApplication(fs, appName);\n    if (persistedApp \u003d\u003d null) {\n      throw new YarnException(\"Application \" + appName\n          + \" doesn\u0027t exist on hdfs. Please check if the app exists in RM\");\n    }\n    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedApp.getId());\n    cachedAppIds.put(appName, currentAppId);\n    return currentAppId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {
        "oldValue": "getAppIdFromPersistedApp",
        "newValue": "getAppId"
      }
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,14 @@\n+  private synchronized ApplicationId getAppIdFromPersistedApp(String appName)\n+      throws IOException, YarnException {\n+    if (cachedAppIds.containsKey(appName)) {\n+      return cachedAppIds.get(appName);\n+    }\n+    Application persistedApp \u003d ServiceApiUtil.loadApplication(fs, appName);\n+    if (persistedApp \u003d\u003d null) {\n+      throw new YarnException(\"Application \" + appName\n+          + \" doesn\u0027t exist on hdfs. Please check if the app exists in RM\");\n+    }\n+    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedApp.getId());\n+    cachedAppIds.put(appName, currentAppId);\n+    return currentAppId;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized ApplicationId getAppIdFromPersistedApp(String appName)\n      throws IOException, YarnException {\n    if (cachedAppIds.containsKey(appName)) {\n      return cachedAppIds.get(appName);\n    }\n    Application persistedApp \u003d ServiceApiUtil.loadApplication(fs, appName);\n    if (persistedApp \u003d\u003d null) {\n      throw new YarnException(\"Application \" + appName\n          + \" doesn\u0027t exist on hdfs. Please check if the app exists in RM\");\n    }\n    ApplicationId currentAppId \u003d ApplicationId.fromString(persistedApp.getId());\n    cachedAppIds.put(appName, currentAppId);\n    return currentAppId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}