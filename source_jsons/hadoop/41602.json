{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSQueue.java",
  "functionName": "getQueueInfo",
  "functionId": "getQueueInfo___includeChildQueues-boolean__recursive-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueue.java",
  "functionStartLine": 235,
  "functionEndLine": 264,
  "numCommitsSeen": 65,
  "timeTaken": 2778,
  "changeHistory": [
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "577d755e4bf72d6adedeba51be01ff5f3f028de0",
    "a9a0cc3679432774154a07d3157ffa0a43e0bf01",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c"
  ],
  "changeHistoryShort": {
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "577d755e4bf72d6adedeba51be01ff5f3f028de0": "Ybodychange",
    "a9a0cc3679432774154a07d3157ffa0a43e0bf01": "Ybodychange",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ybodychange",
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21": "Ymultichange(Ymovefromfile,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "25/05/16 10:13 PM",
      "commitNameOld": "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 3.45,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public QueueInfo getQueueInfo(boolean includeChildQueues, boolean recursive) {\n     QueueInfo queueInfo \u003d recordFactory.newRecordInstance(QueueInfo.class);\n     queueInfo.setQueueName(getQueueName());\n \n-    if (scheduler.getClusterResource().getMemory() \u003d\u003d 0) {\n+    if (scheduler.getClusterResource().getMemorySize() \u003d\u003d 0) {\n       queueInfo.setCapacity(0.0f);\n     } else {\n-      queueInfo.setCapacity((float) getFairShare().getMemory() /\n-          scheduler.getClusterResource().getMemory());\n+      queueInfo.setCapacity((float) getFairShare().getMemorySize() /\n+          scheduler.getClusterResource().getMemorySize());\n     }\n \n-    if (getFairShare().getMemory() \u003d\u003d 0) {\n+    if (getFairShare().getMemorySize() \u003d\u003d 0) {\n       queueInfo.setCurrentCapacity(0.0f);\n     } else {\n-      queueInfo.setCurrentCapacity((float) getResourceUsage().getMemory() /\n-          getFairShare().getMemory());\n+      queueInfo.setCurrentCapacity((float) getResourceUsage().getMemorySize() /\n+          getFairShare().getMemorySize());\n     }\n \n     ArrayList\u003cQueueInfo\u003e childQueueInfos \u003d new ArrayList\u003cQueueInfo\u003e();\n     if (includeChildQueues) {\n       Collection\u003cFSQueue\u003e childQueues \u003d getChildQueues();\n       for (FSQueue child : childQueues) {\n         childQueueInfos.add(child.getQueueInfo(recursive, recursive));\n       }\n     }\n     queueInfo.setChildQueues(childQueueInfos);\n     queueInfo.setQueueState(QueueState.RUNNING);\n     queueInfo.setQueueStatistics(getQueueStatistics());\n     return queueInfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public QueueInfo getQueueInfo(boolean includeChildQueues, boolean recursive) {\n    QueueInfo queueInfo \u003d recordFactory.newRecordInstance(QueueInfo.class);\n    queueInfo.setQueueName(getQueueName());\n\n    if (scheduler.getClusterResource().getMemorySize() \u003d\u003d 0) {\n      queueInfo.setCapacity(0.0f);\n    } else {\n      queueInfo.setCapacity((float) getFairShare().getMemorySize() /\n          scheduler.getClusterResource().getMemorySize());\n    }\n\n    if (getFairShare().getMemorySize() \u003d\u003d 0) {\n      queueInfo.setCurrentCapacity(0.0f);\n    } else {\n      queueInfo.setCurrentCapacity((float) getResourceUsage().getMemorySize() /\n          getFairShare().getMemorySize());\n    }\n\n    ArrayList\u003cQueueInfo\u003e childQueueInfos \u003d new ArrayList\u003cQueueInfo\u003e();\n    if (includeChildQueues) {\n      Collection\u003cFSQueue\u003e childQueues \u003d getChildQueues();\n      for (FSQueue child : childQueues) {\n        childQueueInfos.add(child.getQueueInfo(recursive, recursive));\n      }\n    }\n    queueInfo.setChildQueues(childQueueInfos);\n    queueInfo.setQueueState(QueueState.RUNNING);\n    queueInfo.setQueueStatistics(getQueueStatistics());\n    return queueInfo;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueue.java",
      "extendedDetails": {}
    },
    "577d755e4bf72d6adedeba51be01ff5f3f028de0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3348. Add a \u0027yarn top\u0027 tool to help understand cluster usage. Contributed by Varun Vasudev\n",
      "commitDate": "10/04/15 9:57 AM",
      "commitName": "577d755e4bf72d6adedeba51be01ff5f3f028de0",
      "commitAuthor": "Jian He",
      "commitDateOld": "31/03/15 1:42 AM",
      "commitNameOld": "b5a22e983832d4843b5df1d07858988e8bbf37e3",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 10.34,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   public QueueInfo getQueueInfo(boolean includeChildQueues, boolean recursive) {\n     QueueInfo queueInfo \u003d recordFactory.newRecordInstance(QueueInfo.class);\n     queueInfo.setQueueName(getQueueName());\n \n     if (scheduler.getClusterResource().getMemory() \u003d\u003d 0) {\n       queueInfo.setCapacity(0.0f);\n     } else {\n       queueInfo.setCapacity((float) getFairShare().getMemory() /\n           scheduler.getClusterResource().getMemory());\n     }\n \n     if (getFairShare().getMemory() \u003d\u003d 0) {\n       queueInfo.setCurrentCapacity(0.0f);\n     } else {\n       queueInfo.setCurrentCapacity((float) getResourceUsage().getMemory() /\n           getFairShare().getMemory());\n     }\n \n     ArrayList\u003cQueueInfo\u003e childQueueInfos \u003d new ArrayList\u003cQueueInfo\u003e();\n     if (includeChildQueues) {\n       Collection\u003cFSQueue\u003e childQueues \u003d getChildQueues();\n       for (FSQueue child : childQueues) {\n         childQueueInfos.add(child.getQueueInfo(recursive, recursive));\n       }\n     }\n     queueInfo.setChildQueues(childQueueInfos);\n     queueInfo.setQueueState(QueueState.RUNNING);\n+    queueInfo.setQueueStatistics(getQueueStatistics());\n     return queueInfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public QueueInfo getQueueInfo(boolean includeChildQueues, boolean recursive) {\n    QueueInfo queueInfo \u003d recordFactory.newRecordInstance(QueueInfo.class);\n    queueInfo.setQueueName(getQueueName());\n\n    if (scheduler.getClusterResource().getMemory() \u003d\u003d 0) {\n      queueInfo.setCapacity(0.0f);\n    } else {\n      queueInfo.setCapacity((float) getFairShare().getMemory() /\n          scheduler.getClusterResource().getMemory());\n    }\n\n    if (getFairShare().getMemory() \u003d\u003d 0) {\n      queueInfo.setCurrentCapacity(0.0f);\n    } else {\n      queueInfo.setCurrentCapacity((float) getResourceUsage().getMemory() /\n          getFairShare().getMemory());\n    }\n\n    ArrayList\u003cQueueInfo\u003e childQueueInfos \u003d new ArrayList\u003cQueueInfo\u003e();\n    if (includeChildQueues) {\n      Collection\u003cFSQueue\u003e childQueues \u003d getChildQueues();\n      for (FSQueue child : childQueues) {\n        childQueueInfos.add(child.getQueueInfo(recursive, recursive));\n      }\n    }\n    queueInfo.setChildQueues(childQueueInfos);\n    queueInfo.setQueueState(QueueState.RUNNING);\n    queueInfo.setQueueStatistics(getQueueStatistics());\n    return queueInfo;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueue.java",
      "extendedDetails": {}
    },
    "a9a0cc3679432774154a07d3157ffa0a43e0bf01": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2315. FairScheduler: Set current capacity in addition to capacity. (Zhihai Xu via kasha)\n",
      "commitDate": "19/11/14 8:15 PM",
      "commitName": "a9a0cc3679432774154a07d3157ffa0a43e0bf01",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "15/10/14 6:33 PM",
      "commitNameOld": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 35.11,
      "commitsBetweenForRepo": 338,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,29 @@\n   public QueueInfo getQueueInfo(boolean includeChildQueues, boolean recursive) {\n     QueueInfo queueInfo \u003d recordFactory.newRecordInstance(QueueInfo.class);\n     queueInfo.setQueueName(getQueueName());\n-    // TODO: we might change these queue metrics around a little bit\n-    // to match the semantics of the fair scheduler.\n-    queueInfo.setCapacity((float) getFairShare().getMemory() /\n-        scheduler.getClusterResource().getMemory());\n-    queueInfo.setCapacity((float) getResourceUsage().getMemory() /\n-        scheduler.getClusterResource().getMemory());\n-    \n+\n+    if (scheduler.getClusterResource().getMemory() \u003d\u003d 0) {\n+      queueInfo.setCapacity(0.0f);\n+    } else {\n+      queueInfo.setCapacity((float) getFairShare().getMemory() /\n+          scheduler.getClusterResource().getMemory());\n+    }\n+\n+    if (getFairShare().getMemory() \u003d\u003d 0) {\n+      queueInfo.setCurrentCapacity(0.0f);\n+    } else {\n+      queueInfo.setCurrentCapacity((float) getResourceUsage().getMemory() /\n+          getFairShare().getMemory());\n+    }\n+\n     ArrayList\u003cQueueInfo\u003e childQueueInfos \u003d new ArrayList\u003cQueueInfo\u003e();\n     if (includeChildQueues) {\n       Collection\u003cFSQueue\u003e childQueues \u003d getChildQueues();\n       for (FSQueue child : childQueues) {\n         childQueueInfos.add(child.getQueueInfo(recursive, recursive));\n       }\n     }\n     queueInfo.setChildQueues(childQueueInfos);\n     queueInfo.setQueueState(QueueState.RUNNING);\n     return queueInfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public QueueInfo getQueueInfo(boolean includeChildQueues, boolean recursive) {\n    QueueInfo queueInfo \u003d recordFactory.newRecordInstance(QueueInfo.class);\n    queueInfo.setQueueName(getQueueName());\n\n    if (scheduler.getClusterResource().getMemory() \u003d\u003d 0) {\n      queueInfo.setCapacity(0.0f);\n    } else {\n      queueInfo.setCapacity((float) getFairShare().getMemory() /\n          scheduler.getClusterResource().getMemory());\n    }\n\n    if (getFairShare().getMemory() \u003d\u003d 0) {\n      queueInfo.setCurrentCapacity(0.0f);\n    } else {\n      queueInfo.setCurrentCapacity((float) getResourceUsage().getMemory() /\n          getFairShare().getMemory());\n    }\n\n    ArrayList\u003cQueueInfo\u003e childQueueInfos \u003d new ArrayList\u003cQueueInfo\u003e();\n    if (includeChildQueues) {\n      Collection\u003cFSQueue\u003e childQueues \u003d getChildQueues();\n      for (FSQueue child : childQueues) {\n        childQueueInfos.add(child.getQueueInfo(recursive, recursive));\n      }\n    }\n    queueInfo.setChildQueues(childQueueInfos);\n    queueInfo.setQueueState(QueueState.RUNNING);\n    return queueInfo;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueue.java",
      "extendedDetails": {}
    },
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/01/14 2:33 PM",
      "commitNameOld": "f4fd050dee83ecbff0a92b28c3a51ae353f95c24",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 127.29,
      "commitsBetweenForRepo": 955,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   public QueueInfo getQueueInfo(boolean includeChildQueues, boolean recursive) {\n     QueueInfo queueInfo \u003d recordFactory.newRecordInstance(QueueInfo.class);\n     queueInfo.setQueueName(getQueueName());\n     // TODO: we might change these queue metrics around a little bit\n     // to match the semantics of the fair scheduler.\n     queueInfo.setCapacity((float) getFairShare().getMemory() /\n-        scheduler.getClusterCapacity().getMemory());\n+        scheduler.getClusterResource().getMemory());\n     queueInfo.setCapacity((float) getResourceUsage().getMemory() /\n-        scheduler.getClusterCapacity().getMemory());\n+        scheduler.getClusterResource().getMemory());\n     \n     ArrayList\u003cQueueInfo\u003e childQueueInfos \u003d new ArrayList\u003cQueueInfo\u003e();\n     if (includeChildQueues) {\n       Collection\u003cFSQueue\u003e childQueues \u003d getChildQueues();\n       for (FSQueue child : childQueues) {\n         childQueueInfos.add(child.getQueueInfo(recursive, recursive));\n       }\n     }\n     queueInfo.setChildQueues(childQueueInfos);\n     queueInfo.setQueueState(QueueState.RUNNING);\n     return queueInfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public QueueInfo getQueueInfo(boolean includeChildQueues, boolean recursive) {\n    QueueInfo queueInfo \u003d recordFactory.newRecordInstance(QueueInfo.class);\n    queueInfo.setQueueName(getQueueName());\n    // TODO: we might change these queue metrics around a little bit\n    // to match the semantics of the fair scheduler.\n    queueInfo.setCapacity((float) getFairShare().getMemory() /\n        scheduler.getClusterResource().getMemory());\n    queueInfo.setCapacity((float) getResourceUsage().getMemory() /\n        scheduler.getClusterResource().getMemory());\n    \n    ArrayList\u003cQueueInfo\u003e childQueueInfos \u003d new ArrayList\u003cQueueInfo\u003e();\n    if (includeChildQueues) {\n      Collection\u003cFSQueue\u003e childQueues \u003d getChildQueues();\n      for (FSQueue child : childQueues) {\n        childQueueInfos.add(child.getQueueInfo(recursive, recursive));\n      }\n    }\n    queueInfo.setChildQueues(childQueueInfos);\n    queueInfo.setQueueState(QueueState.RUNNING);\n    return queueInfo;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueue.java",
      "extendedDetails": {}
    },
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-187. Add hierarchical queues to the fair scheduler. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1415592 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/11/12 4:03 AM",
      "commitName": "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
      "commitAuthor": "Thomas White",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-187. Add hierarchical queues to the fair scheduler. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1415592 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/11/12 4:03 AM",
          "commitName": "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
          "commitAuthor": "Thomas White",
          "commitDateOld": "29/11/12 6:51 PM",
          "commitNameOld": "6b08d7de5f1aa6ee5347903fa7457ef243c1b7cf",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,21 @@\n   public QueueInfo getQueueInfo(boolean includeChildQueues, boolean recursive) {\n     QueueInfo queueInfo \u003d recordFactory.newRecordInstance(QueueInfo.class);\n     queueInfo.setQueueName(getQueueName());\n     // TODO: we might change these queue metrics around a little bit\n     // to match the semantics of the fair scheduler.\n     queueInfo.setCapacity((float) getFairShare().getMemory() /\n         scheduler.getClusterCapacity().getMemory());\n     queueInfo.setCapacity((float) getResourceUsage().getMemory() /\n         scheduler.getClusterCapacity().getMemory());\n-\n-    queueInfo.setChildQueues(new ArrayList\u003cQueueInfo\u003e());\n+    \n+    ArrayList\u003cQueueInfo\u003e childQueueInfos \u003d new ArrayList\u003cQueueInfo\u003e();\n+    if (includeChildQueues) {\n+      Collection\u003cFSQueue\u003e childQueues \u003d getChildQueues();\n+      for (FSQueue child : childQueues) {\n+        childQueueInfos.add(child.getQueueInfo(recursive, recursive));\n+      }\n+    }\n+    queueInfo.setChildQueues(childQueueInfos);\n     queueInfo.setQueueState(QueueState.RUNNING);\n     return queueInfo;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public QueueInfo getQueueInfo(boolean includeChildQueues, boolean recursive) {\n    QueueInfo queueInfo \u003d recordFactory.newRecordInstance(QueueInfo.class);\n    queueInfo.setQueueName(getQueueName());\n    // TODO: we might change these queue metrics around a little bit\n    // to match the semantics of the fair scheduler.\n    queueInfo.setCapacity((float) getFairShare().getMemory() /\n        scheduler.getClusterCapacity().getMemory());\n    queueInfo.setCapacity((float) getResourceUsage().getMemory() /\n        scheduler.getClusterCapacity().getMemory());\n    \n    ArrayList\u003cQueueInfo\u003e childQueueInfos \u003d new ArrayList\u003cQueueInfo\u003e();\n    if (includeChildQueues) {\n      Collection\u003cFSQueue\u003e childQueues \u003d getChildQueues();\n      for (FSQueue child : childQueues) {\n        childQueueInfos.add(child.getQueueInfo(recursive, recursive));\n      }\n    }\n    queueInfo.setChildQueues(childQueueInfos);\n    queueInfo.setQueueState(QueueState.RUNNING);\n    return queueInfo;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueue.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueue.java",
            "oldMethodName": "getQueueInfo",
            "newMethodName": "getQueueInfo"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-187. Add hierarchical queues to the fair scheduler. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1415592 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/11/12 4:03 AM",
          "commitName": "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
          "commitAuthor": "Thomas White",
          "commitDateOld": "29/11/12 6:51 PM",
          "commitNameOld": "6b08d7de5f1aa6ee5347903fa7457ef243c1b7cf",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,21 @@\n   public QueueInfo getQueueInfo(boolean includeChildQueues, boolean recursive) {\n     QueueInfo queueInfo \u003d recordFactory.newRecordInstance(QueueInfo.class);\n     queueInfo.setQueueName(getQueueName());\n     // TODO: we might change these queue metrics around a little bit\n     // to match the semantics of the fair scheduler.\n     queueInfo.setCapacity((float) getFairShare().getMemory() /\n         scheduler.getClusterCapacity().getMemory());\n     queueInfo.setCapacity((float) getResourceUsage().getMemory() /\n         scheduler.getClusterCapacity().getMemory());\n-\n-    queueInfo.setChildQueues(new ArrayList\u003cQueueInfo\u003e());\n+    \n+    ArrayList\u003cQueueInfo\u003e childQueueInfos \u003d new ArrayList\u003cQueueInfo\u003e();\n+    if (includeChildQueues) {\n+      Collection\u003cFSQueue\u003e childQueues \u003d getChildQueues();\n+      for (FSQueue child : childQueues) {\n+        childQueueInfos.add(child.getQueueInfo(recursive, recursive));\n+      }\n+    }\n+    queueInfo.setChildQueues(childQueueInfos);\n     queueInfo.setQueueState(QueueState.RUNNING);\n     return queueInfo;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public QueueInfo getQueueInfo(boolean includeChildQueues, boolean recursive) {\n    QueueInfo queueInfo \u003d recordFactory.newRecordInstance(QueueInfo.class);\n    queueInfo.setQueueName(getQueueName());\n    // TODO: we might change these queue metrics around a little bit\n    // to match the semantics of the fair scheduler.\n    queueInfo.setCapacity((float) getFairShare().getMemory() /\n        scheduler.getClusterCapacity().getMemory());\n    queueInfo.setCapacity((float) getResourceUsage().getMemory() /\n        scheduler.getClusterCapacity().getMemory());\n    \n    ArrayList\u003cQueueInfo\u003e childQueueInfos \u003d new ArrayList\u003cQueueInfo\u003e();\n    if (includeChildQueues) {\n      Collection\u003cFSQueue\u003e childQueues \u003d getChildQueues();\n      for (FSQueue child : childQueues) {\n        childQueueInfos.add(child.getQueueInfo(recursive, recursive));\n      }\n    }\n    queueInfo.setChildQueues(childQueueInfos);\n    queueInfo.setQueueState(QueueState.RUNNING);\n    return queueInfo;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public QueueInfo getQueueInfo(boolean includeChildQueues, boolean recursive) {\n    QueueInfo queueInfo \u003d recordFactory.newRecordInstance(QueueInfo.class);\n    queueInfo.setQueueName(getQueueName());\n    // TODO: we might change these queue metrics around a little bit\n    // to match the semantics of the fair scheduler.\n    queueInfo.setCapacity((float) getFairShare().getMemory() /\n        scheduler.getClusterCapacity().getMemory());\n    queueInfo.setCapacity((float) getResourceUsage().getMemory() /\n        scheduler.getClusterCapacity().getMemory());\n\n    queueInfo.setChildQueues(new ArrayList\u003cQueueInfo\u003e());\n    queueInfo.setQueueState(QueueState.RUNNING);\n    return queueInfo;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java"
      }
    },
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3451. Port Fair Scheduler to MR2 (pwendell via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1361020 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 5:43 PM",
      "commitName": "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,14 @@\n+  public QueueInfo getQueueInfo(boolean includeChildQueues, boolean recursive) {\n+    QueueInfo queueInfo \u003d recordFactory.newRecordInstance(QueueInfo.class);\n+    queueInfo.setQueueName(getQueueName());\n+    // TODO: we might change these queue metrics around a little bit\n+    // to match the semantics of the fair scheduler.\n+    queueInfo.setCapacity((float) getFairShare().getMemory() /\n+        scheduler.getClusterCapacity().getMemory());\n+    queueInfo.setCapacity((float) getResourceUsage().getMemory() /\n+        scheduler.getClusterCapacity().getMemory());\n+\n+    queueInfo.setChildQueues(new ArrayList\u003cQueueInfo\u003e());\n+    queueInfo.setQueueState(QueueState.RUNNING);\n+    return queueInfo;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public QueueInfo getQueueInfo(boolean includeChildQueues, boolean recursive) {\n    QueueInfo queueInfo \u003d recordFactory.newRecordInstance(QueueInfo.class);\n    queueInfo.setQueueName(getQueueName());\n    // TODO: we might change these queue metrics around a little bit\n    // to match the semantics of the fair scheduler.\n    queueInfo.setCapacity((float) getFairShare().getMemory() /\n        scheduler.getClusterCapacity().getMemory());\n    queueInfo.setCapacity((float) getResourceUsage().getMemory() /\n        scheduler.getClusterCapacity().getMemory());\n\n    queueInfo.setChildQueues(new ArrayList\u003cQueueInfo\u003e());\n    queueInfo.setQueueState(QueueState.RUNNING);\n    return queueInfo;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java"
    }
  }
}