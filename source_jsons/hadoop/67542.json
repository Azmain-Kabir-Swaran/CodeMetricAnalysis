{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LpSolver.java",
  "functionName": "generateObjective",
  "functionId": "generateObjective___objective-Expression(modifiers-final)__numJobs-int(modifiers-final)__jobLen-int(modifiers-final)__oa-Variable[](modifiers-final)__ua-Variable[](modifiers-final)__eps-Variable(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/LpSolver.java",
  "functionStartLine": 166,
  "functionEndLine": 185,
  "numCommitsSeen": 1,
  "timeTaken": 402,
  "changeHistory": [
    "625039ef20e6011ab360131d70582a6e4bf2ec1d"
  ],
  "changeHistoryShort": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14840. Tool to estimate resource requirements of an application pipeline based on prior executions. (Rui Li via Subru).\n",
      "commitDate": "25/10/17 3:51 PM",
      "commitName": "625039ef20e6011ab360131d70582a6e4bf2ec1d",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,20 @@\n+  private void generateObjective(final Expression objective, final int numJobs,\n+      final int jobLen, final Variable[] oa, final Variable[] ua,\n+      final Variable eps) {\n+    int indexJobITimeK;\n+    // sum Over_Allocation\n+    for (int indexJobI \u003d 0; indexJobI \u003c numJobs; indexJobI++) {\n+      for (int timeK \u003d 0; timeK \u003c jobLen; timeK++) {\n+        indexJobITimeK \u003d indexJobI * jobLen + timeK;\n+        objective.set(oa[indexJobITimeK], alpha / numJobs);\n+      }\n+    }\n+    // sum Under_Allocation\n+    int indexJobITimeN;\n+    for (int indexJobI \u003d 0; indexJobI \u003c numJobs; indexJobI++) {\n+      indexJobITimeN \u003d indexJobI * jobLen + jobLen - 1;\n+      objective.set(ua[indexJobITimeN], (1 - alpha) / numJobs);\n+    }\n+    objective.set(eps, beta);\n+    objective.weight(BigDecimal.valueOf(1));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void generateObjective(final Expression objective, final int numJobs,\n      final int jobLen, final Variable[] oa, final Variable[] ua,\n      final Variable eps) {\n    int indexJobITimeK;\n    // sum Over_Allocation\n    for (int indexJobI \u003d 0; indexJobI \u003c numJobs; indexJobI++) {\n      for (int timeK \u003d 0; timeK \u003c jobLen; timeK++) {\n        indexJobITimeK \u003d indexJobI * jobLen + timeK;\n        objective.set(oa[indexJobITimeK], alpha / numJobs);\n      }\n    }\n    // sum Under_Allocation\n    int indexJobITimeN;\n    for (int indexJobI \u003d 0; indexJobI \u003c numJobs; indexJobI++) {\n      indexJobITimeN \u003d indexJobI * jobLen + jobLen - 1;\n      objective.set(ua[indexJobITimeN], (1 - alpha) / numJobs);\n    }\n    objective.set(eps, beta);\n    objective.weight(BigDecimal.valueOf(1));\n  }",
      "path": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/LpSolver.java"
    }
  }
}