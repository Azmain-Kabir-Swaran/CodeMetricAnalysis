{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SubmissionContextPreProcessor.java",
  "functionName": "refresh",
  "functionId": "refresh",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/preprocessor/SubmissionContextPreProcessor.java",
  "functionStartLine": 150,
  "functionEndLine": 222,
  "numCommitsSeen": 1,
  "timeTaken": 929,
  "changeHistory": [
    "e7d44e48f708ba41e14d2a9e32a6760a62617485"
  ],
  "changeHistoryShort": {
    "e7d44e48f708ba41e14d2a9e32a6760a62617485": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e7d44e48f708ba41e14d2a9e32a6760a62617485": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9761. Allow overriding application submissions based on server side configs. Contributed by Pralabh Kumar\n",
      "commitDate": "06/09/19 10:17 AM",
      "commitName": "e7d44e48f708ba41e14d2a9e32a6760a62617485",
      "commitAuthor": "Jonathan Hung",
      "diff": "@@ -0,0 +1,73 @@\n+  public void refresh() throws Exception {\n+    if (null \u003d\u003d hostsFilePath || hostsFilePath.isEmpty()) {\n+      LOG.warn(\"Host list file path [{}] is empty or does not exist !!\",\n+          hostsFilePath);\n+    } else {\n+      File hostFile \u003d new File(hostsFilePath);\n+      if (!hostFile.exists() || !hostFile.isFile()) {\n+        LOG.warn(\"Host list file [{}] does not exist or is not a file !!\",\n+            hostFile);\n+      } else if (hostFile.lastModified() \u003c\u003d lastModified) {\n+        LOG.debug(\"Host list file [{}] has not been modified from last refresh\",\n+            hostFile);\n+      } else {\n+        FileInputStream fileInputStream \u003d new FileInputStream(hostFile);\n+        BufferedReader reader \u003d null;\n+        Map\u003cString, Map\u003cContextProp, String\u003e\u003e tempHostCommands \u003d\n+            new HashMap\u003c\u003e();\n+        try {\n+          reader \u003d new BufferedReader(new InputStreamReader(fileInputStream,\n+              StandardCharsets.UTF_8));\n+          String line;\n+          while ((line \u003d reader.readLine()) !\u003d null) {\n+            // Lines should start with hostname and be followed with commands.\n+            // Delimiter is any contiguous sequence of space or tab character.\n+            // Commands are of the form:\n+            //   \u003cKEY\u003e\u003d\u003cVALUE\u003e\n+            //   where KEY can be \u0027NL\u0027, \u0027Q\u0027 or \u0027TA\u0027 (more can be added later)\n+            //   (TA stands for \u0027Tag Add\u0027)\n+            // Sample lines:\n+            // ...\n+            // host1  NL\u003dfoo   Q\u003db\n+            // host2   Q\u003dc NL\u003dbar\n+            // ...\n+            String[] commands \u003d line.split(\"[ \\t\\n\\f\\r]+\");\n+            if (commands !\u003d null \u0026\u0026 commands.length \u003e 1) {\n+              String host \u003d commands[0].trim();\n+              if (host.startsWith(\"#\")) {\n+                // All lines starting with # is a comment\n+                continue;\n+              }\n+              Map\u003cContextProp, String\u003e cMap \u003d null;\n+              for (int i \u003d 1; i \u003c commands.length; i++) {\n+                String[] cSplit \u003d commands[i].split(\"\u003d\");\n+                if (cSplit \u003d\u003d null || cSplit.length !\u003d 2) {\n+                  LOG.error(\"No commands found for line [{}]\", commands[i]);\n+                  continue;\n+                }\n+                if (cMap \u003d\u003d null) {\n+                  cMap \u003d new HashMap\u003c\u003e();\n+                }\n+                cMap.put(ContextProp.valueOf(cSplit[0]), cSplit[1]);\n+              }\n+              if (cMap !\u003d null \u0026\u0026 cMap.size() \u003e 0) {\n+                tempHostCommands.put(host, cMap);\n+                LOG.info(\"Following commands registered for host[{}] : {}\",\n+                    host, cMap);\n+              }\n+            }\n+          }\n+          lastModified \u003d hostFile.lastModified();\n+        } catch (Exception ex) {\n+          // Do not commit the new map if we have an Exception..\n+          tempHostCommands \u003d null;\n+          throw ex;\n+        } finally {\n+          if (tempHostCommands !\u003d null \u0026\u0026 tempHostCommands.size() \u003e 0) {\n+            hostCommands \u003d tempHostCommands;\n+          }\n+          IOUtils.cleanupWithLogger(LOG, reader, fileInputStream);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void refresh() throws Exception {\n    if (null \u003d\u003d hostsFilePath || hostsFilePath.isEmpty()) {\n      LOG.warn(\"Host list file path [{}] is empty or does not exist !!\",\n          hostsFilePath);\n    } else {\n      File hostFile \u003d new File(hostsFilePath);\n      if (!hostFile.exists() || !hostFile.isFile()) {\n        LOG.warn(\"Host list file [{}] does not exist or is not a file !!\",\n            hostFile);\n      } else if (hostFile.lastModified() \u003c\u003d lastModified) {\n        LOG.debug(\"Host list file [{}] has not been modified from last refresh\",\n            hostFile);\n      } else {\n        FileInputStream fileInputStream \u003d new FileInputStream(hostFile);\n        BufferedReader reader \u003d null;\n        Map\u003cString, Map\u003cContextProp, String\u003e\u003e tempHostCommands \u003d\n            new HashMap\u003c\u003e();\n        try {\n          reader \u003d new BufferedReader(new InputStreamReader(fileInputStream,\n              StandardCharsets.UTF_8));\n          String line;\n          while ((line \u003d reader.readLine()) !\u003d null) {\n            // Lines should start with hostname and be followed with commands.\n            // Delimiter is any contiguous sequence of space or tab character.\n            // Commands are of the form:\n            //   \u003cKEY\u003e\u003d\u003cVALUE\u003e\n            //   where KEY can be \u0027NL\u0027, \u0027Q\u0027 or \u0027TA\u0027 (more can be added later)\n            //   (TA stands for \u0027Tag Add\u0027)\n            // Sample lines:\n            // ...\n            // host1  NL\u003dfoo   Q\u003db\n            // host2   Q\u003dc NL\u003dbar\n            // ...\n            String[] commands \u003d line.split(\"[ \\t\\n\\f\\r]+\");\n            if (commands !\u003d null \u0026\u0026 commands.length \u003e 1) {\n              String host \u003d commands[0].trim();\n              if (host.startsWith(\"#\")) {\n                // All lines starting with # is a comment\n                continue;\n              }\n              Map\u003cContextProp, String\u003e cMap \u003d null;\n              for (int i \u003d 1; i \u003c commands.length; i++) {\n                String[] cSplit \u003d commands[i].split(\"\u003d\");\n                if (cSplit \u003d\u003d null || cSplit.length !\u003d 2) {\n                  LOG.error(\"No commands found for line [{}]\", commands[i]);\n                  continue;\n                }\n                if (cMap \u003d\u003d null) {\n                  cMap \u003d new HashMap\u003c\u003e();\n                }\n                cMap.put(ContextProp.valueOf(cSplit[0]), cSplit[1]);\n              }\n              if (cMap !\u003d null \u0026\u0026 cMap.size() \u003e 0) {\n                tempHostCommands.put(host, cMap);\n                LOG.info(\"Following commands registered for host[{}] : {}\",\n                    host, cMap);\n              }\n            }\n          }\n          lastModified \u003d hostFile.lastModified();\n        } catch (Exception ex) {\n          // Do not commit the new map if we have an Exception..\n          tempHostCommands \u003d null;\n          throw ex;\n        } finally {\n          if (tempHostCommands !\u003d null \u0026\u0026 tempHostCommands.size() \u003e 0) {\n            hostCommands \u003d tempHostCommands;\n          }\n          IOUtils.cleanupWithLogger(LOG, reader, fileInputStream);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/preprocessor/SubmissionContextPreProcessor.java"
    }
  }
}