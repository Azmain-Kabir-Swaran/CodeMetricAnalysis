{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DynoInfraUtils.java",
  "functionName": "fetchHadoopTarball",
  "functionId": "fetchHadoopTarball___destinationDir-File__version-String__conf-Configuration__log-Logger",
  "sourceFilePath": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/DynoInfraUtils.java",
  "functionStartLine": 127,
  "functionEndLine": 154,
  "numCommitsSeen": 3,
  "timeTaken": 880,
  "changeHistory": [
    "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91"
  ],
  "changeHistoryShort": {
    "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a": "Ybodychange",
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16418. [Dynamometer] Fix checkstyle and findbugs warnings. Contributed by Erik Krogen.\n",
      "commitDate": "11/07/19 8:29 AM",
      "commitName": "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
      "commitAuthor": "Erik Krogen",
      "commitDateOld": "08/07/19 5:44 PM",
      "commitNameOld": "738c09349eb6178065797fc9cd624bf5e2285069",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 2.61,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,28 @@\n   public static File fetchHadoopTarball(File destinationDir, String version,\n       Configuration conf, Logger log) throws IOException {\n     log.info(\"Looking for Hadoop tarball for version: \" + version);\n     File destinationFile \u003d new File(destinationDir,\n         String.format(HADOOP_TAR_FILENAME_FORMAT, version));\n     if (destinationFile.exists()) {\n       log.info(\"Found tarball at: \" + destinationFile.getAbsolutePath());\n       return destinationFile;\n     }\n     String apacheMirror \u003d conf.get(APACHE_DOWNLOAD_MIRROR_KEY);\n     if (apacheMirror \u003d\u003d null) {\n       apacheMirror \u003d System.getProperty(APACHE_DOWNLOAD_MIRROR_KEY,\n           APACHE_DOWNLOAD_MIRROR_DEFAULT);\n     }\n \n-    destinationDir.mkdirs();\n+    if (!destinationDir.exists()) {\n+      if (!destinationDir.mkdirs()) {\n+        throw new IOException(\"Unable to create local dir: \" + destinationDir);\n+      }\n+    }\n     URL downloadURL \u003d new URL(apacheMirror + String\n         .format(APACHE_DOWNLOAD_MIRROR_SUFFIX_FORMAT, version, version));\n     log.info(\"Downloading tarball from: \u003c{}\u003e to \u003c{}\u003e\", downloadURL,\n         destinationFile.getAbsolutePath());\n     FileUtils.copyURLToFile(downloadURL, destinationFile, 10000, 60000);\n     log.info(\"Completed downloading of Hadoop tarball\");\n     return destinationFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static File fetchHadoopTarball(File destinationDir, String version,\n      Configuration conf, Logger log) throws IOException {\n    log.info(\"Looking for Hadoop tarball for version: \" + version);\n    File destinationFile \u003d new File(destinationDir,\n        String.format(HADOOP_TAR_FILENAME_FORMAT, version));\n    if (destinationFile.exists()) {\n      log.info(\"Found tarball at: \" + destinationFile.getAbsolutePath());\n      return destinationFile;\n    }\n    String apacheMirror \u003d conf.get(APACHE_DOWNLOAD_MIRROR_KEY);\n    if (apacheMirror \u003d\u003d null) {\n      apacheMirror \u003d System.getProperty(APACHE_DOWNLOAD_MIRROR_KEY,\n          APACHE_DOWNLOAD_MIRROR_DEFAULT);\n    }\n\n    if (!destinationDir.exists()) {\n      if (!destinationDir.mkdirs()) {\n        throw new IOException(\"Unable to create local dir: \" + destinationDir);\n      }\n    }\n    URL downloadURL \u003d new URL(apacheMirror + String\n        .format(APACHE_DOWNLOAD_MIRROR_SUFFIX_FORMAT, version, version));\n    log.info(\"Downloading tarball from: \u003c{}\u003e to \u003c{}\u003e\", downloadURL,\n        destinationFile.getAbsolutePath());\n    FileUtils.copyURLToFile(downloadURL, destinationFile, 10000, 60000);\n    log.info(\"Completed downloading of Hadoop tarball\");\n    return destinationFile;\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/DynoInfraUtils.java",
      "extendedDetails": {}
    },
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12345 Add Dynamometer to hadoop-tools, a tool for scale testing the HDFS NameNode with real metadata and workloads. Contributed by Erik Krogen.\n",
      "commitDate": "25/06/19 8:07 AM",
      "commitName": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,24 @@\n+  public static File fetchHadoopTarball(File destinationDir, String version,\n+      Configuration conf, Logger log) throws IOException {\n+    log.info(\"Looking for Hadoop tarball for version: \" + version);\n+    File destinationFile \u003d new File(destinationDir,\n+        String.format(HADOOP_TAR_FILENAME_FORMAT, version));\n+    if (destinationFile.exists()) {\n+      log.info(\"Found tarball at: \" + destinationFile.getAbsolutePath());\n+      return destinationFile;\n+    }\n+    String apacheMirror \u003d conf.get(APACHE_DOWNLOAD_MIRROR_KEY);\n+    if (apacheMirror \u003d\u003d null) {\n+      apacheMirror \u003d System.getProperty(APACHE_DOWNLOAD_MIRROR_KEY,\n+          APACHE_DOWNLOAD_MIRROR_DEFAULT);\n+    }\n+\n+    destinationDir.mkdirs();\n+    URL downloadURL \u003d new URL(apacheMirror + String\n+        .format(APACHE_DOWNLOAD_MIRROR_SUFFIX_FORMAT, version, version));\n+    log.info(\"Downloading tarball from: \u003c{}\u003e to \u003c{}\u003e\", downloadURL,\n+        destinationFile.getAbsolutePath());\n+    FileUtils.copyURLToFile(downloadURL, destinationFile, 10000, 60000);\n+    log.info(\"Completed downloading of Hadoop tarball\");\n+    return destinationFile;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static File fetchHadoopTarball(File destinationDir, String version,\n      Configuration conf, Logger log) throws IOException {\n    log.info(\"Looking for Hadoop tarball for version: \" + version);\n    File destinationFile \u003d new File(destinationDir,\n        String.format(HADOOP_TAR_FILENAME_FORMAT, version));\n    if (destinationFile.exists()) {\n      log.info(\"Found tarball at: \" + destinationFile.getAbsolutePath());\n      return destinationFile;\n    }\n    String apacheMirror \u003d conf.get(APACHE_DOWNLOAD_MIRROR_KEY);\n    if (apacheMirror \u003d\u003d null) {\n      apacheMirror \u003d System.getProperty(APACHE_DOWNLOAD_MIRROR_KEY,\n          APACHE_DOWNLOAD_MIRROR_DEFAULT);\n    }\n\n    destinationDir.mkdirs();\n    URL downloadURL \u003d new URL(apacheMirror + String\n        .format(APACHE_DOWNLOAD_MIRROR_SUFFIX_FORMAT, version, version));\n    log.info(\"Downloading tarball from: \u003c{}\u003e to \u003c{}\u003e\", downloadURL,\n        destinationFile.getAbsolutePath());\n    FileUtils.copyURLToFile(downloadURL, destinationFile, 10000, 60000);\n    log.info(\"Completed downloading of Hadoop tarball\");\n    return destinationFile;\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/DynoInfraUtils.java"
    }
  }
}