{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueueManager.java",
  "functionName": "removeEmptyIncompatibleQueues",
  "functionId": "removeEmptyIncompatibleQueues___queueToCreate-String__queueType-FSQueueType",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
  "functionStartLine": 431,
  "functionEndLine": 476,
  "numCommitsSeen": 78,
  "timeTaken": 3644,
  "changeHistory": [
    "10d0e4be6eade7c1685b9c6962bc9b18e33122a8",
    "86bc6425d425913899f1d951498bd040e453b3d0",
    "cfc97a4e88dcebb3e1098e8915e57aaff072414d",
    "f4fd050dee83ecbff0a92b28c3a51ae353f95c24"
  ],
  "changeHistoryShort": {
    "10d0e4be6eade7c1685b9c6962bc9b18e33122a8": "Ybodychange",
    "86bc6425d425913899f1d951498bd040e453b3d0": "Ymultichange(Yreturntypechange,Ybodychange)",
    "cfc97a4e88dcebb3e1098e8915e57aaff072414d": "Ymultichange(Yparameterchange,Ybodychange)",
    "f4fd050dee83ecbff0a92b28c3a51ae353f95c24": "Yintroduced"
  },
  "changeHistoryDetails": {
    "10d0e4be6eade7c1685b9c6962bc9b18e33122a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8325. Miscellaneous QueueManager code clean up. (Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "12/06/18 10:11 AM",
      "commitName": "10d0e4be6eade7c1685b9c6962bc9b18e33122a8",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "24/05/18 5:12 PM",
      "commitNameOld": "86bc6425d425913899f1d951498bd040e453b3d0",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 18.71,
      "commitsBetweenForRepo": 140,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private Optional\u003cBoolean\u003e removeEmptyIncompatibleQueues(String queueToCreate,\n       FSQueueType queueType) {\n     queueToCreate \u003d ensureRootPrefix(queueToCreate);\n \n-    // Ensure queueToCreate is not root and doesn\u0027t have the default queue in its\n-    // ancestry.\n+    // Ensure queueToCreate is not root and doesn\u0027t\n+    // have the default queue in its ancestry.\n     if (queueToCreate.equals(ROOT_QUEUE) ||\n         queueToCreate.startsWith(\n             ROOT_QUEUE + \".\" + YarnConfiguration.DEFAULT_QUEUE_NAME + \".\")) {\n       return Optional.empty();\n     }\n \n     FSQueue queue \u003d queues.get(queueToCreate);\n     // Queue exists already.\n     if (queue !\u003d null) {\n       if (queue instanceof FSLeafQueue) {\n         if (queueType \u003d\u003d FSQueueType.LEAF) {\n           return Optional.empty();\n         }\n         // remove incompatibility since queue is a leaf currently\n         // needs to change to a parent.\n         return Optional.of(removeQueueIfEmpty(queue));\n       } else {\n         if (queueType \u003d\u003d FSQueueType.PARENT) {\n           return Optional.empty();\n         }\n         // If it\u0027s an existing parent queue and needs to change to leaf, \n         // remove it if it\u0027s empty.\n         return Optional.of(removeQueueIfEmpty(queue));\n       }\n     }\n \n     // Queue doesn\u0027t exist already. Check if the new queue would be created\n     // under an existing leaf queue. If so, try removing that leaf queue.\n     int sepIndex \u003d queueToCreate.length();\n     sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n     while (sepIndex !\u003d -1) {\n       String prefixString \u003d queueToCreate.substring(0, sepIndex);\n       FSQueue prefixQueue \u003d queues.get(prefixString);\n       if (prefixQueue !\u003d null \u0026\u0026 prefixQueue instanceof FSLeafQueue) {\n         return Optional.of(removeQueueIfEmpty(prefixQueue));\n       }\n       sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n     }\n     return Optional.empty();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Optional\u003cBoolean\u003e removeEmptyIncompatibleQueues(String queueToCreate,\n      FSQueueType queueType) {\n    queueToCreate \u003d ensureRootPrefix(queueToCreate);\n\n    // Ensure queueToCreate is not root and doesn\u0027t\n    // have the default queue in its ancestry.\n    if (queueToCreate.equals(ROOT_QUEUE) ||\n        queueToCreate.startsWith(\n            ROOT_QUEUE + \".\" + YarnConfiguration.DEFAULT_QUEUE_NAME + \".\")) {\n      return Optional.empty();\n    }\n\n    FSQueue queue \u003d queues.get(queueToCreate);\n    // Queue exists already.\n    if (queue !\u003d null) {\n      if (queue instanceof FSLeafQueue) {\n        if (queueType \u003d\u003d FSQueueType.LEAF) {\n          return Optional.empty();\n        }\n        // remove incompatibility since queue is a leaf currently\n        // needs to change to a parent.\n        return Optional.of(removeQueueIfEmpty(queue));\n      } else {\n        if (queueType \u003d\u003d FSQueueType.PARENT) {\n          return Optional.empty();\n        }\n        // If it\u0027s an existing parent queue and needs to change to leaf, \n        // remove it if it\u0027s empty.\n        return Optional.of(removeQueueIfEmpty(queue));\n      }\n    }\n\n    // Queue doesn\u0027t exist already. Check if the new queue would be created\n    // under an existing leaf queue. If so, try removing that leaf queue.\n    int sepIndex \u003d queueToCreate.length();\n    sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n    while (sepIndex !\u003d -1) {\n      String prefixString \u003d queueToCreate.substring(0, sepIndex);\n      FSQueue prefixQueue \u003d queues.get(prefixString);\n      if (prefixQueue !\u003d null \u0026\u0026 prefixQueue instanceof FSLeafQueue) {\n        return Optional.of(removeQueueIfEmpty(prefixQueue));\n      }\n      sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n    }\n    return Optional.empty();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
      "extendedDetails": {}
    },
    "86bc6425d425913899f1d951498bd040e453b3d0": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-8191. Fair scheduler: queue deletion without RM restart. (Gergo Repas via Haibo Chen)\n",
      "commitDate": "24/05/18 5:12 PM",
      "commitName": "86bc6425d425913899f1d951498bd040e453b3d0",
      "commitAuthor": "Haibo Chen",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-8191. Fair scheduler: queue deletion without RM restart. (Gergo Repas via Haibo Chen)\n",
          "commitDate": "24/05/18 5:12 PM",
          "commitName": "86bc6425d425913899f1d951498bd040e453b3d0",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "05/10/17 11:51 PM",
          "commitNameOld": "99292adcefdc6b8f280b8e100605fb39f755c38a",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 230.72,
          "commitsBetweenForRepo": 2231,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,46 @@\n-  private boolean removeEmptyIncompatibleQueues(String queueToCreate,\n+  private Optional\u003cBoolean\u003e removeEmptyIncompatibleQueues(String queueToCreate,\n       FSQueueType queueType) {\n     queueToCreate \u003d ensureRootPrefix(queueToCreate);\n \n     // Ensure queueToCreate is not root and doesn\u0027t have the default queue in its\n     // ancestry.\n     if (queueToCreate.equals(ROOT_QUEUE) ||\n         queueToCreate.startsWith(\n             ROOT_QUEUE + \".\" + YarnConfiguration.DEFAULT_QUEUE_NAME + \".\")) {\n-      return false;\n+      return Optional.empty();\n     }\n \n     FSQueue queue \u003d queues.get(queueToCreate);\n     // Queue exists already.\n     if (queue !\u003d null) {\n       if (queue instanceof FSLeafQueue) {\n         if (queueType \u003d\u003d FSQueueType.LEAF) {\n-          // if queue is already a leaf then return true\n-          return true;\n+          return Optional.empty();\n         }\n         // remove incompatibility since queue is a leaf currently\n         // needs to change to a parent.\n-        return removeQueueIfEmpty(queue);\n+        return Optional.of(removeQueueIfEmpty(queue));\n       } else {\n         if (queueType \u003d\u003d FSQueueType.PARENT) {\n-          return true;\n+          return Optional.empty();\n         }\n         // If it\u0027s an existing parent queue and needs to change to leaf, \n         // remove it if it\u0027s empty.\n-        return removeQueueIfEmpty(queue);\n+        return Optional.of(removeQueueIfEmpty(queue));\n       }\n     }\n \n     // Queue doesn\u0027t exist already. Check if the new queue would be created\n     // under an existing leaf queue. If so, try removing that leaf queue.\n     int sepIndex \u003d queueToCreate.length();\n     sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n     while (sepIndex !\u003d -1) {\n       String prefixString \u003d queueToCreate.substring(0, sepIndex);\n       FSQueue prefixQueue \u003d queues.get(prefixString);\n       if (prefixQueue !\u003d null \u0026\u0026 prefixQueue instanceof FSLeafQueue) {\n-        return removeQueueIfEmpty(prefixQueue);\n+        return Optional.of(removeQueueIfEmpty(prefixQueue));\n       }\n       sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n     }\n-    return true;\n+    return Optional.empty();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Optional\u003cBoolean\u003e removeEmptyIncompatibleQueues(String queueToCreate,\n      FSQueueType queueType) {\n    queueToCreate \u003d ensureRootPrefix(queueToCreate);\n\n    // Ensure queueToCreate is not root and doesn\u0027t have the default queue in its\n    // ancestry.\n    if (queueToCreate.equals(ROOT_QUEUE) ||\n        queueToCreate.startsWith(\n            ROOT_QUEUE + \".\" + YarnConfiguration.DEFAULT_QUEUE_NAME + \".\")) {\n      return Optional.empty();\n    }\n\n    FSQueue queue \u003d queues.get(queueToCreate);\n    // Queue exists already.\n    if (queue !\u003d null) {\n      if (queue instanceof FSLeafQueue) {\n        if (queueType \u003d\u003d FSQueueType.LEAF) {\n          return Optional.empty();\n        }\n        // remove incompatibility since queue is a leaf currently\n        // needs to change to a parent.\n        return Optional.of(removeQueueIfEmpty(queue));\n      } else {\n        if (queueType \u003d\u003d FSQueueType.PARENT) {\n          return Optional.empty();\n        }\n        // If it\u0027s an existing parent queue and needs to change to leaf, \n        // remove it if it\u0027s empty.\n        return Optional.of(removeQueueIfEmpty(queue));\n      }\n    }\n\n    // Queue doesn\u0027t exist already. Check if the new queue would be created\n    // under an existing leaf queue. If so, try removing that leaf queue.\n    int sepIndex \u003d queueToCreate.length();\n    sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n    while (sepIndex !\u003d -1) {\n      String prefixString \u003d queueToCreate.substring(0, sepIndex);\n      FSQueue prefixQueue \u003d queues.get(prefixString);\n      if (prefixQueue !\u003d null \u0026\u0026 prefixQueue instanceof FSLeafQueue) {\n        return Optional.of(removeQueueIfEmpty(prefixQueue));\n      }\n      sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n    }\n    return Optional.empty();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
          "extendedDetails": {
            "oldValue": "boolean",
            "newValue": "Optional\u003cBoolean\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8191. Fair scheduler: queue deletion without RM restart. (Gergo Repas via Haibo Chen)\n",
          "commitDate": "24/05/18 5:12 PM",
          "commitName": "86bc6425d425913899f1d951498bd040e453b3d0",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "05/10/17 11:51 PM",
          "commitNameOld": "99292adcefdc6b8f280b8e100605fb39f755c38a",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 230.72,
          "commitsBetweenForRepo": 2231,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,46 @@\n-  private boolean removeEmptyIncompatibleQueues(String queueToCreate,\n+  private Optional\u003cBoolean\u003e removeEmptyIncompatibleQueues(String queueToCreate,\n       FSQueueType queueType) {\n     queueToCreate \u003d ensureRootPrefix(queueToCreate);\n \n     // Ensure queueToCreate is not root and doesn\u0027t have the default queue in its\n     // ancestry.\n     if (queueToCreate.equals(ROOT_QUEUE) ||\n         queueToCreate.startsWith(\n             ROOT_QUEUE + \".\" + YarnConfiguration.DEFAULT_QUEUE_NAME + \".\")) {\n-      return false;\n+      return Optional.empty();\n     }\n \n     FSQueue queue \u003d queues.get(queueToCreate);\n     // Queue exists already.\n     if (queue !\u003d null) {\n       if (queue instanceof FSLeafQueue) {\n         if (queueType \u003d\u003d FSQueueType.LEAF) {\n-          // if queue is already a leaf then return true\n-          return true;\n+          return Optional.empty();\n         }\n         // remove incompatibility since queue is a leaf currently\n         // needs to change to a parent.\n-        return removeQueueIfEmpty(queue);\n+        return Optional.of(removeQueueIfEmpty(queue));\n       } else {\n         if (queueType \u003d\u003d FSQueueType.PARENT) {\n-          return true;\n+          return Optional.empty();\n         }\n         // If it\u0027s an existing parent queue and needs to change to leaf, \n         // remove it if it\u0027s empty.\n-        return removeQueueIfEmpty(queue);\n+        return Optional.of(removeQueueIfEmpty(queue));\n       }\n     }\n \n     // Queue doesn\u0027t exist already. Check if the new queue would be created\n     // under an existing leaf queue. If so, try removing that leaf queue.\n     int sepIndex \u003d queueToCreate.length();\n     sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n     while (sepIndex !\u003d -1) {\n       String prefixString \u003d queueToCreate.substring(0, sepIndex);\n       FSQueue prefixQueue \u003d queues.get(prefixString);\n       if (prefixQueue !\u003d null \u0026\u0026 prefixQueue instanceof FSLeafQueue) {\n-        return removeQueueIfEmpty(prefixQueue);\n+        return Optional.of(removeQueueIfEmpty(prefixQueue));\n       }\n       sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n     }\n-    return true;\n+    return Optional.empty();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Optional\u003cBoolean\u003e removeEmptyIncompatibleQueues(String queueToCreate,\n      FSQueueType queueType) {\n    queueToCreate \u003d ensureRootPrefix(queueToCreate);\n\n    // Ensure queueToCreate is not root and doesn\u0027t have the default queue in its\n    // ancestry.\n    if (queueToCreate.equals(ROOT_QUEUE) ||\n        queueToCreate.startsWith(\n            ROOT_QUEUE + \".\" + YarnConfiguration.DEFAULT_QUEUE_NAME + \".\")) {\n      return Optional.empty();\n    }\n\n    FSQueue queue \u003d queues.get(queueToCreate);\n    // Queue exists already.\n    if (queue !\u003d null) {\n      if (queue instanceof FSLeafQueue) {\n        if (queueType \u003d\u003d FSQueueType.LEAF) {\n          return Optional.empty();\n        }\n        // remove incompatibility since queue is a leaf currently\n        // needs to change to a parent.\n        return Optional.of(removeQueueIfEmpty(queue));\n      } else {\n        if (queueType \u003d\u003d FSQueueType.PARENT) {\n          return Optional.empty();\n        }\n        // If it\u0027s an existing parent queue and needs to change to leaf, \n        // remove it if it\u0027s empty.\n        return Optional.of(removeQueueIfEmpty(queue));\n      }\n    }\n\n    // Queue doesn\u0027t exist already. Check if the new queue would be created\n    // under an existing leaf queue. If so, try removing that leaf queue.\n    int sepIndex \u003d queueToCreate.length();\n    sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n    while (sepIndex !\u003d -1) {\n      String prefixString \u003d queueToCreate.substring(0, sepIndex);\n      FSQueue prefixQueue \u003d queues.get(prefixString);\n      if (prefixQueue !\u003d null \u0026\u0026 prefixQueue instanceof FSLeafQueue) {\n        return Optional.of(removeQueueIfEmpty(prefixQueue));\n      }\n      sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n    }\n    return Optional.empty();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "cfc97a4e88dcebb3e1098e8915e57aaff072414d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1864. Fair Scheduler Dynamic Hierarchical User Queues (Ashwin Shankar via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593190 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/14 12:21 AM",
      "commitName": "cfc97a4e88dcebb3e1098e8915e57aaff072414d",
      "commitAuthor": "Sanford Ryza",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1864. Fair Scheduler Dynamic Hierarchical User Queues (Ashwin Shankar via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593190 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/05/14 12:21 AM",
          "commitName": "cfc97a4e88dcebb3e1098e8915e57aaff072414d",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "14/01/14 2:33 PM",
          "commitNameOld": "f4fd050dee83ecbff0a92b28c3a51ae353f95c24",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 113.37,
          "commitsBetweenForRepo": 860,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,47 @@\n-  private boolean removeEmptyIncompatibleQueues(String leafToCreate) {\n-    leafToCreate \u003d ensureRootPrefix(leafToCreate);\n+  private boolean removeEmptyIncompatibleQueues(String queueToCreate,\n+      FSQueueType queueType) {\n+    queueToCreate \u003d ensureRootPrefix(queueToCreate);\n \n-    // Ensure leafToCreate is not root and doesn\u0027t have the default queue in its\n+    // Ensure queueToCreate is not root and doesn\u0027t have the default queue in its\n     // ancestry.\n-    if (leafToCreate.equals(ROOT_QUEUE) ||\n-        leafToCreate.startsWith(\n+    if (queueToCreate.equals(ROOT_QUEUE) ||\n+        queueToCreate.startsWith(\n             ROOT_QUEUE + \".\" + YarnConfiguration.DEFAULT_QUEUE_NAME + \".\")) {\n       return false;\n     }\n \n-    FSQueue queue \u003d queues.get(leafToCreate);\n+    FSQueue queue \u003d queues.get(queueToCreate);\n     // Queue exists already.\n     if (queue !\u003d null) {\n       if (queue instanceof FSLeafQueue) {\n-        // If it\u0027s an already existing leaf, we\u0027re ok.\n-        return true;\n+        if (queueType \u003d\u003d FSQueueType.LEAF) {\n+          // if queue is already a leaf then return true\n+          return true;\n+        }\n+        // remove incompatibility since queue is a leaf currently\n+        // needs to change to a parent.\n+        return removeQueueIfEmpty(queue);\n       } else {\n-        // If it\u0027s an existing parent queue, remove it if it\u0027s empty.\n+        if (queueType \u003d\u003d FSQueueType.PARENT) {\n+          return true;\n+        }\n+        // If it\u0027s an existing parent queue and needs to change to leaf, \n+        // remove it if it\u0027s empty.\n         return removeQueueIfEmpty(queue);\n       }\n     }\n \n     // Queue doesn\u0027t exist already. Check if the new queue would be created\n     // under an existing leaf queue. If so, try removing that leaf queue.\n-    int sepIndex \u003d leafToCreate.length();\n-    sepIndex \u003d leafToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n+    int sepIndex \u003d queueToCreate.length();\n+    sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n     while (sepIndex !\u003d -1) {\n-      String prefixString \u003d leafToCreate.substring(0, sepIndex);\n+      String prefixString \u003d queueToCreate.substring(0, sepIndex);\n       FSQueue prefixQueue \u003d queues.get(prefixString);\n       if (prefixQueue !\u003d null \u0026\u0026 prefixQueue instanceof FSLeafQueue) {\n         return removeQueueIfEmpty(prefixQueue);\n       }\n-      sepIndex \u003d leafToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n+      sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean removeEmptyIncompatibleQueues(String queueToCreate,\n      FSQueueType queueType) {\n    queueToCreate \u003d ensureRootPrefix(queueToCreate);\n\n    // Ensure queueToCreate is not root and doesn\u0027t have the default queue in its\n    // ancestry.\n    if (queueToCreate.equals(ROOT_QUEUE) ||\n        queueToCreate.startsWith(\n            ROOT_QUEUE + \".\" + YarnConfiguration.DEFAULT_QUEUE_NAME + \".\")) {\n      return false;\n    }\n\n    FSQueue queue \u003d queues.get(queueToCreate);\n    // Queue exists already.\n    if (queue !\u003d null) {\n      if (queue instanceof FSLeafQueue) {\n        if (queueType \u003d\u003d FSQueueType.LEAF) {\n          // if queue is already a leaf then return true\n          return true;\n        }\n        // remove incompatibility since queue is a leaf currently\n        // needs to change to a parent.\n        return removeQueueIfEmpty(queue);\n      } else {\n        if (queueType \u003d\u003d FSQueueType.PARENT) {\n          return true;\n        }\n        // If it\u0027s an existing parent queue and needs to change to leaf, \n        // remove it if it\u0027s empty.\n        return removeQueueIfEmpty(queue);\n      }\n    }\n\n    // Queue doesn\u0027t exist already. Check if the new queue would be created\n    // under an existing leaf queue. If so, try removing that leaf queue.\n    int sepIndex \u003d queueToCreate.length();\n    sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n    while (sepIndex !\u003d -1) {\n      String prefixString \u003d queueToCreate.substring(0, sepIndex);\n      FSQueue prefixQueue \u003d queues.get(prefixString);\n      if (prefixQueue !\u003d null \u0026\u0026 prefixQueue instanceof FSLeafQueue) {\n        return removeQueueIfEmpty(prefixQueue);\n      }\n      sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
          "extendedDetails": {
            "oldValue": "[leafToCreate-String]",
            "newValue": "[queueToCreate-String, queueType-FSQueueType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1864. Fair Scheduler Dynamic Hierarchical User Queues (Ashwin Shankar via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593190 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/05/14 12:21 AM",
          "commitName": "cfc97a4e88dcebb3e1098e8915e57aaff072414d",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "14/01/14 2:33 PM",
          "commitNameOld": "f4fd050dee83ecbff0a92b28c3a51ae353f95c24",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 113.37,
          "commitsBetweenForRepo": 860,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,47 @@\n-  private boolean removeEmptyIncompatibleQueues(String leafToCreate) {\n-    leafToCreate \u003d ensureRootPrefix(leafToCreate);\n+  private boolean removeEmptyIncompatibleQueues(String queueToCreate,\n+      FSQueueType queueType) {\n+    queueToCreate \u003d ensureRootPrefix(queueToCreate);\n \n-    // Ensure leafToCreate is not root and doesn\u0027t have the default queue in its\n+    // Ensure queueToCreate is not root and doesn\u0027t have the default queue in its\n     // ancestry.\n-    if (leafToCreate.equals(ROOT_QUEUE) ||\n-        leafToCreate.startsWith(\n+    if (queueToCreate.equals(ROOT_QUEUE) ||\n+        queueToCreate.startsWith(\n             ROOT_QUEUE + \".\" + YarnConfiguration.DEFAULT_QUEUE_NAME + \".\")) {\n       return false;\n     }\n \n-    FSQueue queue \u003d queues.get(leafToCreate);\n+    FSQueue queue \u003d queues.get(queueToCreate);\n     // Queue exists already.\n     if (queue !\u003d null) {\n       if (queue instanceof FSLeafQueue) {\n-        // If it\u0027s an already existing leaf, we\u0027re ok.\n-        return true;\n+        if (queueType \u003d\u003d FSQueueType.LEAF) {\n+          // if queue is already a leaf then return true\n+          return true;\n+        }\n+        // remove incompatibility since queue is a leaf currently\n+        // needs to change to a parent.\n+        return removeQueueIfEmpty(queue);\n       } else {\n-        // If it\u0027s an existing parent queue, remove it if it\u0027s empty.\n+        if (queueType \u003d\u003d FSQueueType.PARENT) {\n+          return true;\n+        }\n+        // If it\u0027s an existing parent queue and needs to change to leaf, \n+        // remove it if it\u0027s empty.\n         return removeQueueIfEmpty(queue);\n       }\n     }\n \n     // Queue doesn\u0027t exist already. Check if the new queue would be created\n     // under an existing leaf queue. If so, try removing that leaf queue.\n-    int sepIndex \u003d leafToCreate.length();\n-    sepIndex \u003d leafToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n+    int sepIndex \u003d queueToCreate.length();\n+    sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n     while (sepIndex !\u003d -1) {\n-      String prefixString \u003d leafToCreate.substring(0, sepIndex);\n+      String prefixString \u003d queueToCreate.substring(0, sepIndex);\n       FSQueue prefixQueue \u003d queues.get(prefixString);\n       if (prefixQueue !\u003d null \u0026\u0026 prefixQueue instanceof FSLeafQueue) {\n         return removeQueueIfEmpty(prefixQueue);\n       }\n-      sepIndex \u003d leafToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n+      sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean removeEmptyIncompatibleQueues(String queueToCreate,\n      FSQueueType queueType) {\n    queueToCreate \u003d ensureRootPrefix(queueToCreate);\n\n    // Ensure queueToCreate is not root and doesn\u0027t have the default queue in its\n    // ancestry.\n    if (queueToCreate.equals(ROOT_QUEUE) ||\n        queueToCreate.startsWith(\n            ROOT_QUEUE + \".\" + YarnConfiguration.DEFAULT_QUEUE_NAME + \".\")) {\n      return false;\n    }\n\n    FSQueue queue \u003d queues.get(queueToCreate);\n    // Queue exists already.\n    if (queue !\u003d null) {\n      if (queue instanceof FSLeafQueue) {\n        if (queueType \u003d\u003d FSQueueType.LEAF) {\n          // if queue is already a leaf then return true\n          return true;\n        }\n        // remove incompatibility since queue is a leaf currently\n        // needs to change to a parent.\n        return removeQueueIfEmpty(queue);\n      } else {\n        if (queueType \u003d\u003d FSQueueType.PARENT) {\n          return true;\n        }\n        // If it\u0027s an existing parent queue and needs to change to leaf, \n        // remove it if it\u0027s empty.\n        return removeQueueIfEmpty(queue);\n      }\n    }\n\n    // Queue doesn\u0027t exist already. Check if the new queue would be created\n    // under an existing leaf queue. If so, try removing that leaf queue.\n    int sepIndex \u003d queueToCreate.length();\n    sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n    while (sepIndex !\u003d -1) {\n      String prefixString \u003d queueToCreate.substring(0, sepIndex);\n      FSQueue prefixQueue \u003d queues.get(prefixString);\n      if (prefixQueue !\u003d null \u0026\u0026 prefixQueue instanceof FSLeafQueue) {\n        return removeQueueIfEmpty(prefixQueue);\n      }\n      sepIndex \u003d queueToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "f4fd050dee83ecbff0a92b28c3a51ae353f95c24": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1567. In Fair Scheduler, allow empty queues to change between leaf and parent on allocation file reload (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1558228 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/01/14 2:33 PM",
      "commitName": "f4fd050dee83ecbff0a92b28c3a51ae353f95c24",
      "commitAuthor": "Sanford Ryza",
      "diff": "@@ -0,0 +1,37 @@\n+  private boolean removeEmptyIncompatibleQueues(String leafToCreate) {\n+    leafToCreate \u003d ensureRootPrefix(leafToCreate);\n+\n+    // Ensure leafToCreate is not root and doesn\u0027t have the default queue in its\n+    // ancestry.\n+    if (leafToCreate.equals(ROOT_QUEUE) ||\n+        leafToCreate.startsWith(\n+            ROOT_QUEUE + \".\" + YarnConfiguration.DEFAULT_QUEUE_NAME + \".\")) {\n+      return false;\n+    }\n+\n+    FSQueue queue \u003d queues.get(leafToCreate);\n+    // Queue exists already.\n+    if (queue !\u003d null) {\n+      if (queue instanceof FSLeafQueue) {\n+        // If it\u0027s an already existing leaf, we\u0027re ok.\n+        return true;\n+      } else {\n+        // If it\u0027s an existing parent queue, remove it if it\u0027s empty.\n+        return removeQueueIfEmpty(queue);\n+      }\n+    }\n+\n+    // Queue doesn\u0027t exist already. Check if the new queue would be created\n+    // under an existing leaf queue. If so, try removing that leaf queue.\n+    int sepIndex \u003d leafToCreate.length();\n+    sepIndex \u003d leafToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n+    while (sepIndex !\u003d -1) {\n+      String prefixString \u003d leafToCreate.substring(0, sepIndex);\n+      FSQueue prefixQueue \u003d queues.get(prefixString);\n+      if (prefixQueue !\u003d null \u0026\u0026 prefixQueue instanceof FSLeafQueue) {\n+        return removeQueueIfEmpty(prefixQueue);\n+      }\n+      sepIndex \u003d leafToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean removeEmptyIncompatibleQueues(String leafToCreate) {\n    leafToCreate \u003d ensureRootPrefix(leafToCreate);\n\n    // Ensure leafToCreate is not root and doesn\u0027t have the default queue in its\n    // ancestry.\n    if (leafToCreate.equals(ROOT_QUEUE) ||\n        leafToCreate.startsWith(\n            ROOT_QUEUE + \".\" + YarnConfiguration.DEFAULT_QUEUE_NAME + \".\")) {\n      return false;\n    }\n\n    FSQueue queue \u003d queues.get(leafToCreate);\n    // Queue exists already.\n    if (queue !\u003d null) {\n      if (queue instanceof FSLeafQueue) {\n        // If it\u0027s an already existing leaf, we\u0027re ok.\n        return true;\n      } else {\n        // If it\u0027s an existing parent queue, remove it if it\u0027s empty.\n        return removeQueueIfEmpty(queue);\n      }\n    }\n\n    // Queue doesn\u0027t exist already. Check if the new queue would be created\n    // under an existing leaf queue. If so, try removing that leaf queue.\n    int sepIndex \u003d leafToCreate.length();\n    sepIndex \u003d leafToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n    while (sepIndex !\u003d -1) {\n      String prefixString \u003d leafToCreate.substring(0, sepIndex);\n      FSQueue prefixQueue \u003d queues.get(prefixString);\n      if (prefixQueue !\u003d null \u0026\u0026 prefixQueue instanceof FSLeafQueue) {\n        return removeQueueIfEmpty(prefixQueue);\n      }\n      sepIndex \u003d leafToCreate.lastIndexOf(\u0027.\u0027, sepIndex-1);\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java"
    }
  }
}