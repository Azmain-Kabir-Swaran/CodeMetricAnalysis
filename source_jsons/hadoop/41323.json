{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSAppAttempt.java",
  "functionName": "assignReservedContainer",
  "functionId": "assignReservedContainer___node-FSSchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
  "functionStartLine": 1125,
  "functionEndLine": 1152,
  "numCommitsSeen": 76,
  "timeTaken": 3556,
  "changeHistory": [
    "10468529a9b858bd945e7ecb063c9c1438efa474",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "f9692770a58af0ab082eb7f15da9cbdcd177605b",
    "bd69ea408f8fdd8293836ce1089fe9b01616f2f7",
    "486e718fc1f5befd231494e2ec06bb360484f191"
  ],
  "changeHistoryShort": {
    "10468529a9b858bd945e7ecb063c9c1438efa474": "Ymodifierchange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ybodychange",
    "f9692770a58af0ab082eb7f15da9cbdcd177605b": "Ybodychange",
    "bd69ea408f8fdd8293836ce1089fe9b01616f2f7": "Ymultichange(Yreturntypechange,Ybodychange)",
    "486e718fc1f5befd231494e2ec06bb360484f191": "Yintroduced"
  },
  "changeHistoryDetails": {
    "10468529a9b858bd945e7ecb063c9c1438efa474": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
      "commitDate": "23/11/16 9:48 PM",
      "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "09/11/16 1:11 PM",
      "commitNameOld": "59ee8b7a88603e94b5661a8d5d088f7aa99fe049",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 14.36,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n-  public boolean assignReservedContainer(FSSchedulerNode node) {\n+  boolean assignReservedContainer(FSSchedulerNode node) {\n     RMContainer rmContainer \u003d node.getReservedContainer();\n     SchedulerRequestKey reservedSchedulerKey \u003d\n         rmContainer.getReservedSchedulerKey();\n \n     if (!isValidReservation(node)) {\n       // Don\u0027t hold the reservation if app can no longer use it\n       LOG.info(\"Releasing reservation that cannot be satisfied for \" +\n           \"application \" + getApplicationAttemptId() + \" on node \" + node);\n       unreserve(reservedSchedulerKey, node);\n       return false;\n     }\n \n     // Reservation valid; try to fulfill the reservation\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Trying to fulfill reservation for application \"\n           + getApplicationAttemptId() + \" on node: \" + node);\n     }\n \n     // Fail early if the reserved container won\u0027t fit.\n     // Note that we have an assumption here that\n     // there\u0027s only one container size per priority.\n     if (Resources.fitsIn(node.getReservedContainer().getReservedResource(),\n         node.getUnallocatedResource())) {\n       assignContainer(node, true);\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean assignReservedContainer(FSSchedulerNode node) {\n    RMContainer rmContainer \u003d node.getReservedContainer();\n    SchedulerRequestKey reservedSchedulerKey \u003d\n        rmContainer.getReservedSchedulerKey();\n\n    if (!isValidReservation(node)) {\n      // Don\u0027t hold the reservation if app can no longer use it\n      LOG.info(\"Releasing reservation that cannot be satisfied for \" +\n          \"application \" + getApplicationAttemptId() + \" on node \" + node);\n      unreserve(reservedSchedulerKey, node);\n      return false;\n    }\n\n    // Reservation valid; try to fulfill the reservation\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Trying to fulfill reservation for application \"\n          + getApplicationAttemptId() + \" on node: \" + node);\n    }\n\n    // Fail early if the reserved container won\u0027t fit.\n    // Note that we have an assumption here that\n    // there\u0027s only one container size per priority.\n    if (Resources.fitsIn(node.getReservedContainer().getReservedResource(),\n        node.getUnallocatedResource())) {\n      assignContainer(node, true);\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[]"
      }
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "11/07/16 10:36 PM",
      "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 14.68,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   public boolean assignReservedContainer(FSSchedulerNode node) {\n     RMContainer rmContainer \u003d node.getReservedContainer();\n-    Priority reservedPriority \u003d rmContainer.getReservedPriority();\n+    SchedulerRequestKey reservedSchedulerKey \u003d\n+        rmContainer.getReservedSchedulerKey();\n \n     if (!isValidReservation(node)) {\n       // Don\u0027t hold the reservation if app can no longer use it\n       LOG.info(\"Releasing reservation that cannot be satisfied for \" +\n           \"application \" + getApplicationAttemptId() + \" on node \" + node);\n-      unreserve(reservedPriority, node);\n+      unreserve(reservedSchedulerKey, node);\n       return false;\n     }\n \n     // Reservation valid; try to fulfill the reservation\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Trying to fulfill reservation for application \"\n           + getApplicationAttemptId() + \" on node: \" + node);\n     }\n \n     // Fail early if the reserved container won\u0027t fit.\n     // Note that we have an assumption here that\n     // there\u0027s only one container size per priority.\n     if (Resources.fitsIn(node.getReservedContainer().getReservedResource(),\n         node.getUnallocatedResource())) {\n       assignContainer(node, true);\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean assignReservedContainer(FSSchedulerNode node) {\n    RMContainer rmContainer \u003d node.getReservedContainer();\n    SchedulerRequestKey reservedSchedulerKey \u003d\n        rmContainer.getReservedSchedulerKey();\n\n    if (!isValidReservation(node)) {\n      // Don\u0027t hold the reservation if app can no longer use it\n      LOG.info(\"Releasing reservation that cannot be satisfied for \" +\n          \"application \" + getApplicationAttemptId() + \" on node \" + node);\n      unreserve(reservedSchedulerKey, node);\n      return false;\n    }\n\n    // Reservation valid; try to fulfill the reservation\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Trying to fulfill reservation for application \"\n          + getApplicationAttemptId() + \" on node: \" + node);\n    }\n\n    // Fail early if the reserved container won\u0027t fit.\n    // Note that we have an assumption here that\n    // there\u0027s only one container size per priority.\n    if (Resources.fitsIn(node.getReservedContainer().getReservedResource(),\n        node.getUnallocatedResource())) {\n      assignContainer(node, true);\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "f9692770a58af0ab082eb7f15da9cbdcd177605b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4718. Rename variables in SchedulerNode to reduce ambiguity post YARN-1011. (Inigo Goiri via kasha)\n",
      "commitDate": "28/02/16 9:35 AM",
      "commitName": "f9692770a58af0ab082eb7f15da9cbdcd177605b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "17/02/16 8:55 PM",
      "commitNameOld": "7de70680fe44967e2afc92ba4c92f8e7afa7b151",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 10.53,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public boolean assignReservedContainer(FSSchedulerNode node) {\n     RMContainer rmContainer \u003d node.getReservedContainer();\n     Priority reservedPriority \u003d rmContainer.getReservedPriority();\n \n     if (!isValidReservation(node)) {\n       // Don\u0027t hold the reservation if app can no longer use it\n       LOG.info(\"Releasing reservation that cannot be satisfied for \" +\n           \"application \" + getApplicationAttemptId() + \" on node \" + node);\n       unreserve(reservedPriority, node);\n       return false;\n     }\n \n     // Reservation valid; try to fulfill the reservation\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Trying to fulfill reservation for application \"\n           + getApplicationAttemptId() + \" on node: \" + node);\n     }\n \n     // Fail early if the reserved container won\u0027t fit.\n     // Note that we have an assumption here that\n     // there\u0027s only one container size per priority.\n     if (Resources.fitsIn(node.getReservedContainer().getReservedResource(),\n-        node.getAvailableResource())) {\n+        node.getUnallocatedResource())) {\n       assignContainer(node, true);\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean assignReservedContainer(FSSchedulerNode node) {\n    RMContainer rmContainer \u003d node.getReservedContainer();\n    Priority reservedPriority \u003d rmContainer.getReservedPriority();\n\n    if (!isValidReservation(node)) {\n      // Don\u0027t hold the reservation if app can no longer use it\n      LOG.info(\"Releasing reservation that cannot be satisfied for \" +\n          \"application \" + getApplicationAttemptId() + \" on node \" + node);\n      unreserve(reservedPriority, node);\n      return false;\n    }\n\n    // Reservation valid; try to fulfill the reservation\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Trying to fulfill reservation for application \"\n          + getApplicationAttemptId() + \" on node: \" + node);\n    }\n\n    // Fail early if the reserved container won\u0027t fit.\n    // Note that we have an assumption here that\n    // there\u0027s only one container size per priority.\n    if (Resources.fitsIn(node.getReservedContainer().getReservedResource(),\n        node.getUnallocatedResource())) {\n      assignContainer(node, true);\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "bd69ea408f8fdd8293836ce1089fe9b01616f2f7": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-3655. FairScheduler: potential livelock due to maxAMShare limitation and container reservation. (Zhihai Xu via kasha)\n",
      "commitDate": "07/06/15 11:37 AM",
      "commitName": "bd69ea408f8fdd8293836ce1089fe9b01616f2f7",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-3655. FairScheduler: potential livelock due to maxAMShare limitation and container reservation. (Zhihai Xu via kasha)\n",
          "commitDate": "07/06/15 11:37 AM",
          "commitName": "bd69ea408f8fdd8293836ce1089fe9b01616f2f7",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "28/04/15 9:00 PM",
          "commitNameOld": "8f82970e0c247b37b2bf33aa21f6a39afa07efde",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 39.61,
          "commitsBetweenForRepo": 397,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,27 @@\n-  public Resource assignReservedContainer(FSSchedulerNode node) {\n+  public boolean assignReservedContainer(FSSchedulerNode node) {\n     RMContainer rmContainer \u003d node.getReservedContainer();\n-    Priority priority \u003d rmContainer.getReservedPriority();\n+    Priority reservedPriority \u003d rmContainer.getReservedPriority();\n \n-    // Make sure the application still needs requests at this priority\n-    if (getTotalRequiredResources(priority) \u003d\u003d 0) {\n-      unreserve(priority, node);\n-      return Resources.none();\n+    if (!isValidReservation(node)) {\n+      // Don\u0027t hold the reservation if app can no longer use it\n+      LOG.info(\"Releasing reservation that cannot be satisfied for \" +\n+          \"application \" + getApplicationAttemptId() + \" on node \" + node);\n+      unreserve(reservedPriority, node);\n+      return false;\n+    }\n+\n+    // Reservation valid; try to fulfill the reservation\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Trying to fulfill reservation for application \"\n+          + getApplicationAttemptId() + \" on node: \" + node);\n     }\n \n     // Fail early if the reserved container won\u0027t fit.\n-    // Note that we have an assumption here that there\u0027s only one container size\n-    // per priority.\n-    if (!Resources.fitsIn(node.getReservedContainer().getReservedResource(),\n+    // Note that we have an assumption here that\n+    // there\u0027s only one container size per priority.\n+    if (Resources.fitsIn(node.getReservedContainer().getReservedResource(),\n         node.getAvailableResource())) {\n-      return Resources.none();\n+      assignContainer(node, true);\n     }\n-\n-    return assignContainer(node, true);\n+    return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean assignReservedContainer(FSSchedulerNode node) {\n    RMContainer rmContainer \u003d node.getReservedContainer();\n    Priority reservedPriority \u003d rmContainer.getReservedPriority();\n\n    if (!isValidReservation(node)) {\n      // Don\u0027t hold the reservation if app can no longer use it\n      LOG.info(\"Releasing reservation that cannot be satisfied for \" +\n          \"application \" + getApplicationAttemptId() + \" on node \" + node);\n      unreserve(reservedPriority, node);\n      return false;\n    }\n\n    // Reservation valid; try to fulfill the reservation\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Trying to fulfill reservation for application \"\n          + getApplicationAttemptId() + \" on node: \" + node);\n    }\n\n    // Fail early if the reserved container won\u0027t fit.\n    // Note that we have an assumption here that\n    // there\u0027s only one container size per priority.\n    if (Resources.fitsIn(node.getReservedContainer().getReservedResource(),\n        node.getAvailableResource())) {\n      assignContainer(node, true);\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "Resource",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3655. FairScheduler: potential livelock due to maxAMShare limitation and container reservation. (Zhihai Xu via kasha)\n",
          "commitDate": "07/06/15 11:37 AM",
          "commitName": "bd69ea408f8fdd8293836ce1089fe9b01616f2f7",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "28/04/15 9:00 PM",
          "commitNameOld": "8f82970e0c247b37b2bf33aa21f6a39afa07efde",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 39.61,
          "commitsBetweenForRepo": 397,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,27 @@\n-  public Resource assignReservedContainer(FSSchedulerNode node) {\n+  public boolean assignReservedContainer(FSSchedulerNode node) {\n     RMContainer rmContainer \u003d node.getReservedContainer();\n-    Priority priority \u003d rmContainer.getReservedPriority();\n+    Priority reservedPriority \u003d rmContainer.getReservedPriority();\n \n-    // Make sure the application still needs requests at this priority\n-    if (getTotalRequiredResources(priority) \u003d\u003d 0) {\n-      unreserve(priority, node);\n-      return Resources.none();\n+    if (!isValidReservation(node)) {\n+      // Don\u0027t hold the reservation if app can no longer use it\n+      LOG.info(\"Releasing reservation that cannot be satisfied for \" +\n+          \"application \" + getApplicationAttemptId() + \" on node \" + node);\n+      unreserve(reservedPriority, node);\n+      return false;\n+    }\n+\n+    // Reservation valid; try to fulfill the reservation\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Trying to fulfill reservation for application \"\n+          + getApplicationAttemptId() + \" on node: \" + node);\n     }\n \n     // Fail early if the reserved container won\u0027t fit.\n-    // Note that we have an assumption here that there\u0027s only one container size\n-    // per priority.\n-    if (!Resources.fitsIn(node.getReservedContainer().getReservedResource(),\n+    // Note that we have an assumption here that\n+    // there\u0027s only one container size per priority.\n+    if (Resources.fitsIn(node.getReservedContainer().getReservedResource(),\n         node.getAvailableResource())) {\n-      return Resources.none();\n+      assignContainer(node, true);\n     }\n-\n-    return assignContainer(node, true);\n+    return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean assignReservedContainer(FSSchedulerNode node) {\n    RMContainer rmContainer \u003d node.getReservedContainer();\n    Priority reservedPriority \u003d rmContainer.getReservedPriority();\n\n    if (!isValidReservation(node)) {\n      // Don\u0027t hold the reservation if app can no longer use it\n      LOG.info(\"Releasing reservation that cannot be satisfied for \" +\n          \"application \" + getApplicationAttemptId() + \" on node \" + node);\n      unreserve(reservedPriority, node);\n      return false;\n    }\n\n    // Reservation valid; try to fulfill the reservation\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Trying to fulfill reservation for application \"\n          + getApplicationAttemptId() + \" on node: \" + node);\n    }\n\n    // Fail early if the reserved container won\u0027t fit.\n    // Note that we have an assumption here that\n    // there\u0027s only one container size per priority.\n    if (Resources.fitsIn(node.getReservedContainer().getReservedResource(),\n        node.getAvailableResource())) {\n      assignContainer(node, true);\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "486e718fc1f5befd231494e2ec06bb360484f191": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 2:43 PM",
      "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,20 @@\n+  public Resource assignReservedContainer(FSSchedulerNode node) {\n+    RMContainer rmContainer \u003d node.getReservedContainer();\n+    Priority priority \u003d rmContainer.getReservedPriority();\n+\n+    // Make sure the application still needs requests at this priority\n+    if (getTotalRequiredResources(priority) \u003d\u003d 0) {\n+      unreserve(priority, node);\n+      return Resources.none();\n+    }\n+\n+    // Fail early if the reserved container won\u0027t fit.\n+    // Note that we have an assumption here that there\u0027s only one container size\n+    // per priority.\n+    if (!Resources.fitsIn(node.getReservedContainer().getReservedResource(),\n+        node.getAvailableResource())) {\n+      return Resources.none();\n+    }\n+\n+    return assignContainer(node, true);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignReservedContainer(FSSchedulerNode node) {\n    RMContainer rmContainer \u003d node.getReservedContainer();\n    Priority priority \u003d rmContainer.getReservedPriority();\n\n    // Make sure the application still needs requests at this priority\n    if (getTotalRequiredResources(priority) \u003d\u003d 0) {\n      unreserve(priority, node);\n      return Resources.none();\n    }\n\n    // Fail early if the reserved container won\u0027t fit.\n    // Note that we have an assumption here that there\u0027s only one container size\n    // per priority.\n    if (!Resources.fitsIn(node.getReservedContainer().getReservedResource(),\n        node.getAvailableResource())) {\n      return Resources.none();\n    }\n\n    return assignContainer(node, true);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java"
    }
  }
}