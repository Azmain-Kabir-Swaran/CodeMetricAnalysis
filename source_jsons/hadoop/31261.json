{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterClientRMService.java",
  "functionName": "initializePipeline",
  "functionId": "initializePipeline___user-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/clientrm/RouterClientRMService.java",
  "functionStartLine": 556,
  "functionEndLine": 584,
  "numCommitsSeen": 8,
  "timeTaken": 1571,
  "changeHistory": [
    "0d9804dcef2eab5ebf84667d9ca49bb035d9a731",
    "80e1904000923819c98ae68456cb0452c255d5f3"
  ],
  "changeHistoryShort": {
    "0d9804dcef2eab5ebf84667d9ca49bb035d9a731": "Ymultichange(Yreturntypechange,Ybodychange)",
    "80e1904000923819c98ae68456cb0452c255d5f3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0d9804dcef2eab5ebf84667d9ca49bb035d9a731": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-8435. Fix NPE when the same client simultaneously contact for the first time Yarn Router. Contributed by Rang Jiaheng.\n",
      "commitDate": "05/07/18 10:54 AM",
      "commitName": "0d9804dcef2eab5ebf84667d9ca49bb035d9a731",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-8435. Fix NPE when the same client simultaneously contact for the first time Yarn Router. Contributed by Rang Jiaheng.\n",
          "commitDate": "05/07/18 10:54 AM",
          "commitName": "0d9804dcef2eab5ebf84667d9ca49bb035d9a731",
          "commitAuthor": "Giovanni Matteo Fumarola",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "df3855541af98a3805958f2b5b9db6be705d52ab",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 296.07,
          "commitsBetweenForRepo": 2695,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,29 @@\n-  private void initializePipeline(String user) {\n-    RequestInterceptorChainWrapper chainWrapper \u003d null;\n+  private RequestInterceptorChainWrapper initializePipeline(String user) {\n     synchronized (this.userPipelineMap) {\n       if (this.userPipelineMap.containsKey(user)) {\n         LOG.info(\"Request to start an already existing user: {}\"\n             + \" was received, so ignoring.\", user);\n-        return;\n+        return userPipelineMap.get(user);\n       }\n \n-      chainWrapper \u003d new RequestInterceptorChainWrapper();\n+      RequestInterceptorChainWrapper chainWrapper \u003d\n+          new RequestInterceptorChainWrapper();\n+      try {\n+        // We should init the pipeline instance after it is created and then\n+        // add to the map, to ensure thread safe.\n+        LOG.info(\"Initializing request processing pipeline for application \"\n+            + \"for the user: {}\", user);\n+\n+        ClientRequestInterceptor interceptorChain \u003d\n+            this.createRequestInterceptorChain();\n+        interceptorChain.init(user);\n+        chainWrapper.init(interceptorChain);\n+      } catch (Exception e) {\n+        LOG.error(\"Init ClientRequestInterceptor error for user: \" + user, e);\n+        throw e;\n+      }\n+\n       this.userPipelineMap.put(user, chainWrapper);\n-    }\n-\n-    // We register the pipeline instance in the map first and then initialize it\n-    // later because chain initialization can be expensive and we would like to\n-    // release the lock as soon as possible to prevent other applications from\n-    // blocking when one application\u0027s chain is initializing\n-    LOG.info(\"Initializing request processing pipeline for application \"\n-        + \"for the user: {}\", user);\n-\n-    try {\n-      ClientRequestInterceptor interceptorChain \u003d\n-          this.createRequestInterceptorChain();\n-      interceptorChain.init(user);\n-      chainWrapper.init(interceptorChain);\n-    } catch (Exception e) {\n-      synchronized (this.userPipelineMap) {\n-        this.userPipelineMap.remove(user);\n-      }\n-      throw e;\n+      return chainWrapper;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private RequestInterceptorChainWrapper initializePipeline(String user) {\n    synchronized (this.userPipelineMap) {\n      if (this.userPipelineMap.containsKey(user)) {\n        LOG.info(\"Request to start an already existing user: {}\"\n            + \" was received, so ignoring.\", user);\n        return userPipelineMap.get(user);\n      }\n\n      RequestInterceptorChainWrapper chainWrapper \u003d\n          new RequestInterceptorChainWrapper();\n      try {\n        // We should init the pipeline instance after it is created and then\n        // add to the map, to ensure thread safe.\n        LOG.info(\"Initializing request processing pipeline for application \"\n            + \"for the user: {}\", user);\n\n        ClientRequestInterceptor interceptorChain \u003d\n            this.createRequestInterceptorChain();\n        interceptorChain.init(user);\n        chainWrapper.init(interceptorChain);\n      } catch (Exception e) {\n        LOG.error(\"Init ClientRequestInterceptor error for user: \" + user, e);\n        throw e;\n      }\n\n      this.userPipelineMap.put(user, chainWrapper);\n      return chainWrapper;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/clientrm/RouterClientRMService.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "RequestInterceptorChainWrapper"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8435. Fix NPE when the same client simultaneously contact for the first time Yarn Router. Contributed by Rang Jiaheng.\n",
          "commitDate": "05/07/18 10:54 AM",
          "commitName": "0d9804dcef2eab5ebf84667d9ca49bb035d9a731",
          "commitAuthor": "Giovanni Matteo Fumarola",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "df3855541af98a3805958f2b5b9db6be705d52ab",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 296.07,
          "commitsBetweenForRepo": 2695,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,29 @@\n-  private void initializePipeline(String user) {\n-    RequestInterceptorChainWrapper chainWrapper \u003d null;\n+  private RequestInterceptorChainWrapper initializePipeline(String user) {\n     synchronized (this.userPipelineMap) {\n       if (this.userPipelineMap.containsKey(user)) {\n         LOG.info(\"Request to start an already existing user: {}\"\n             + \" was received, so ignoring.\", user);\n-        return;\n+        return userPipelineMap.get(user);\n       }\n \n-      chainWrapper \u003d new RequestInterceptorChainWrapper();\n+      RequestInterceptorChainWrapper chainWrapper \u003d\n+          new RequestInterceptorChainWrapper();\n+      try {\n+        // We should init the pipeline instance after it is created and then\n+        // add to the map, to ensure thread safe.\n+        LOG.info(\"Initializing request processing pipeline for application \"\n+            + \"for the user: {}\", user);\n+\n+        ClientRequestInterceptor interceptorChain \u003d\n+            this.createRequestInterceptorChain();\n+        interceptorChain.init(user);\n+        chainWrapper.init(interceptorChain);\n+      } catch (Exception e) {\n+        LOG.error(\"Init ClientRequestInterceptor error for user: \" + user, e);\n+        throw e;\n+      }\n+\n       this.userPipelineMap.put(user, chainWrapper);\n-    }\n-\n-    // We register the pipeline instance in the map first and then initialize it\n-    // later because chain initialization can be expensive and we would like to\n-    // release the lock as soon as possible to prevent other applications from\n-    // blocking when one application\u0027s chain is initializing\n-    LOG.info(\"Initializing request processing pipeline for application \"\n-        + \"for the user: {}\", user);\n-\n-    try {\n-      ClientRequestInterceptor interceptorChain \u003d\n-          this.createRequestInterceptorChain();\n-      interceptorChain.init(user);\n-      chainWrapper.init(interceptorChain);\n-    } catch (Exception e) {\n-      synchronized (this.userPipelineMap) {\n-        this.userPipelineMap.remove(user);\n-      }\n-      throw e;\n+      return chainWrapper;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private RequestInterceptorChainWrapper initializePipeline(String user) {\n    synchronized (this.userPipelineMap) {\n      if (this.userPipelineMap.containsKey(user)) {\n        LOG.info(\"Request to start an already existing user: {}\"\n            + \" was received, so ignoring.\", user);\n        return userPipelineMap.get(user);\n      }\n\n      RequestInterceptorChainWrapper chainWrapper \u003d\n          new RequestInterceptorChainWrapper();\n      try {\n        // We should init the pipeline instance after it is created and then\n        // add to the map, to ensure thread safe.\n        LOG.info(\"Initializing request processing pipeline for application \"\n            + \"for the user: {}\", user);\n\n        ClientRequestInterceptor interceptorChain \u003d\n            this.createRequestInterceptorChain();\n        interceptorChain.init(user);\n        chainWrapper.init(interceptorChain);\n      } catch (Exception e) {\n        LOG.error(\"Init ClientRequestInterceptor error for user: \" + user, e);\n        throw e;\n      }\n\n      this.userPipelineMap.put(user, chainWrapper);\n      return chainWrapper;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/clientrm/RouterClientRMService.java",
          "extendedDetails": {}
        }
      ]
    },
    "80e1904000923819c98ae68456cb0452c255d5f3": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5411. Create a proxy chain for ApplicationClientProtocol in the Router. (Giovanni Matteo Fumarola via Subru).\n\n(cherry picked from commit 4846069061b6baa06da3b524b9e36567dd368388)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "80e1904000923819c98ae68456cb0452c255d5f3",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,32 @@\n+  private void initializePipeline(String user) {\n+    RequestInterceptorChainWrapper chainWrapper \u003d null;\n+    synchronized (this.userPipelineMap) {\n+      if (this.userPipelineMap.containsKey(user)) {\n+        LOG.info(\"Request to start an already existing user: {}\"\n+            + \" was received, so ignoring.\", user);\n+        return;\n+      }\n+\n+      chainWrapper \u003d new RequestInterceptorChainWrapper();\n+      this.userPipelineMap.put(user, chainWrapper);\n+    }\n+\n+    // We register the pipeline instance in the map first and then initialize it\n+    // later because chain initialization can be expensive and we would like to\n+    // release the lock as soon as possible to prevent other applications from\n+    // blocking when one application\u0027s chain is initializing\n+    LOG.info(\"Initializing request processing pipeline for application \"\n+        + \"for the user: {}\", user);\n+\n+    try {\n+      ClientRequestInterceptor interceptorChain \u003d\n+          this.createRequestInterceptorChain();\n+      interceptorChain.init(user);\n+      chainWrapper.init(interceptorChain);\n+    } catch (Exception e) {\n+      synchronized (this.userPipelineMap) {\n+        this.userPipelineMap.remove(user);\n+      }\n+      throw e;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializePipeline(String user) {\n    RequestInterceptorChainWrapper chainWrapper \u003d null;\n    synchronized (this.userPipelineMap) {\n      if (this.userPipelineMap.containsKey(user)) {\n        LOG.info(\"Request to start an already existing user: {}\"\n            + \" was received, so ignoring.\", user);\n        return;\n      }\n\n      chainWrapper \u003d new RequestInterceptorChainWrapper();\n      this.userPipelineMap.put(user, chainWrapper);\n    }\n\n    // We register the pipeline instance in the map first and then initialize it\n    // later because chain initialization can be expensive and we would like to\n    // release the lock as soon as possible to prevent other applications from\n    // blocking when one application\u0027s chain is initializing\n    LOG.info(\"Initializing request processing pipeline for application \"\n        + \"for the user: {}\", user);\n\n    try {\n      ClientRequestInterceptor interceptorChain \u003d\n          this.createRequestInterceptorChain();\n      interceptorChain.init(user);\n      chainWrapper.init(interceptorChain);\n    } catch (Exception e) {\n      synchronized (this.userPipelineMap) {\n        this.userPipelineMap.remove(user);\n      }\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/clientrm/RouterClientRMService.java"
    }
  }
}