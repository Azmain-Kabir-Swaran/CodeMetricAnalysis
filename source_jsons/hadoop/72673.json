{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMSClientProvider.java",
  "functionName": "fillQueueForKey",
  "functionId": "fillQueueForKey___keyName-String__keyQueue-Queue__EncryptedKeyVersion____numEKVs-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
  "functionStartLine": 145,
  "functionEndLine": 160,
  "numCommitsSeen": 71,
  "timeTaken": 1987,
  "changeHistory": [
    "79d90b810c14d5e3abab75235f587663834ce36c",
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64"
  ],
  "changeHistoryShort": {
    "79d90b810c14d5e3abab75235f587663834ce36c": "Ybodychange",
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64": "Yintroduced"
  },
  "changeHistoryDetails": {
    "79d90b810c14d5e3abab75235f587663834ce36c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13827. Add reencryptEncryptedKey interface to KMS.\n",
      "commitDate": "06/12/16 12:04 PM",
      "commitName": "79d90b810c14d5e3abab75235f587663834ce36c",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "28/11/16 9:07 PM",
      "commitNameOld": "67d9f2808efb34b9a7b0b824cb4033b95ad33474",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 7.62,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n     public void fillQueueForKey(String keyName,\n         Queue\u003cEncryptedKeyVersion\u003e keyQueue, int numEKVs) throws IOException {\n       checkNotNull(keyName, \"keyName\");\n       Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n       params.put(KMSRESTConstants.EEK_OP, KMSRESTConstants.EEK_GENERATE);\n       params.put(KMSRESTConstants.EEK_NUM_KEYS, \"\" + numEKVs);\n       URL url \u003d createURL(KMSRESTConstants.KEY_RESOURCE, keyName,\n           KMSRESTConstants.EEK_SUB_RESOURCE, params);\n       HttpURLConnection conn \u003d createConnection(url, HTTP_GET);\n       conn.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON_MIME);\n       List response \u003d call(conn, null,\n           HttpURLConnection.HTTP_OK, List.class);\n       List\u003cEncryptedKeyVersion\u003e ekvs \u003d\n-          parseJSONEncKeyVersion(keyName, response);\n+          parseJSONEncKeyVersions(keyName, response);\n       keyQueue.addAll(ekvs);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void fillQueueForKey(String keyName,\n        Queue\u003cEncryptedKeyVersion\u003e keyQueue, int numEKVs) throws IOException {\n      checkNotNull(keyName, \"keyName\");\n      Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n      params.put(KMSRESTConstants.EEK_OP, KMSRESTConstants.EEK_GENERATE);\n      params.put(KMSRESTConstants.EEK_NUM_KEYS, \"\" + numEKVs);\n      URL url \u003d createURL(KMSRESTConstants.KEY_RESOURCE, keyName,\n          KMSRESTConstants.EEK_SUB_RESOURCE, params);\n      HttpURLConnection conn \u003d createConnection(url, HTTP_GET);\n      conn.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON_MIME);\n      List response \u003d call(conn, null,\n          HttpURLConnection.HTTP_OK, List.class);\n      List\u003cEncryptedKeyVersion\u003e ekvs \u003d\n          parseJSONEncKeyVersions(keyName, response);\n      keyQueue.addAll(ekvs);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10720. KMS: Implement generateEncryptedKey and decryptEncryptedKey in the REST API. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612399 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/14 1:55 PM",
      "commitName": "0c1469ece38556cf02a0c7bd23761d6bf79d9a64",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,16 @@\n+    public void fillQueueForKey(String keyName,\n+        Queue\u003cEncryptedKeyVersion\u003e keyQueue, int numEKVs) throws IOException {\n+      checkNotNull(keyName, \"keyName\");\n+      Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n+      params.put(KMSRESTConstants.EEK_OP, KMSRESTConstants.EEK_GENERATE);\n+      params.put(KMSRESTConstants.EEK_NUM_KEYS, \"\" + numEKVs);\n+      URL url \u003d createURL(KMSRESTConstants.KEY_RESOURCE, keyName,\n+          KMSRESTConstants.EEK_SUB_RESOURCE, params);\n+      HttpURLConnection conn \u003d createConnection(url, HTTP_GET);\n+      conn.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON_MIME);\n+      List response \u003d call(conn, null,\n+          HttpURLConnection.HTTP_OK, List.class);\n+      List\u003cEncryptedKeyVersion\u003e ekvs \u003d\n+          parseJSONEncKeyVersion(keyName, response);\n+      keyQueue.addAll(ekvs);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void fillQueueForKey(String keyName,\n        Queue\u003cEncryptedKeyVersion\u003e keyQueue, int numEKVs) throws IOException {\n      checkNotNull(keyName, \"keyName\");\n      Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n      params.put(KMSRESTConstants.EEK_OP, KMSRESTConstants.EEK_GENERATE);\n      params.put(KMSRESTConstants.EEK_NUM_KEYS, \"\" + numEKVs);\n      URL url \u003d createURL(KMSRESTConstants.KEY_RESOURCE, keyName,\n          KMSRESTConstants.EEK_SUB_RESOURCE, params);\n      HttpURLConnection conn \u003d createConnection(url, HTTP_GET);\n      conn.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON_MIME);\n      List response \u003d call(conn, null,\n          HttpURLConnection.HTTP_OK, List.class);\n      List\u003cEncryptedKeyVersion\u003e ekvs \u003d\n          parseJSONEncKeyVersion(keyName, response);\n      keyQueue.addAll(ekvs);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java"
    }
  }
}