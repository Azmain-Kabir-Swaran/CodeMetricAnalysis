{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DominantResourceCalculator.java",
  "functionName": "divideAndCeil",
  "functionId": "divideAndCeil___numerator-Resource__denominator-float",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
  "functionStartLine": 434,
  "functionEndLine": 443,
  "numCommitsSeen": 37,
  "timeTaken": 2072,
  "changeHistory": [
    "412035b47a1b0116cb53ce612a61cd087d5edc41",
    "ca13b224b2feb9c44de861da9cbba8dd2a12cb35"
  ],
  "changeHistoryShort": {
    "412035b47a1b0116cb53ce612a61cd087d5edc41": "Ybodychange",
    "ca13b224b2feb9c44de861da9cbba8dd2a12cb35": "Yintroduced"
  },
  "changeHistoryDetails": {
    "412035b47a1b0116cb53ce612a61cd087d5edc41": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10009. In Capacity Scheduler, DRC can treat minimum user limit percent as a max when custom resource is defined. Contributed by Eric Payne.\n",
      "commitDate": "20/12/19 10:07 AM",
      "commitName": "412035b47a1b0116cb53ce612a61cd087d5edc41",
      "commitAuthor": "Eric Badger",
      "commitDateOld": "02/09/19 11:55 PM",
      "commitNameOld": "bb26514ba9e8a038749c4acd592a47d5cd5bf92a",
      "commitAuthorOld": "Zhankun Tang",
      "daysBetweenCommits": 108.47,
      "commitsBetweenForRepo": 587,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,10 @@\n   public Resource divideAndCeil(Resource numerator, float denominator) {\n-    return Resources.createResource(\n-        divideAndCeil(numerator.getMemorySize(), denominator),\n-        divideAndCeil(numerator.getVirtualCores(), denominator)\n-        );\n+    Resource ret \u003d Resource.newInstance(numerator);\n+    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n+    for (int i \u003d 0; i \u003c maxLength; i++) {\n+      ResourceInformation resourceInformation \u003d ret.getResourceInformation(i);\n+      resourceInformation\n+          .setValue(divideAndCeil(resourceInformation.getValue(), denominator));\n+    }\n+    return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource divideAndCeil(Resource numerator, float denominator) {\n    Resource ret \u003d Resource.newInstance(numerator);\n    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation resourceInformation \u003d ret.getResourceInformation(i);\n      resourceInformation\n          .setValue(divideAndCeil(resourceInformation.getValue(), denominator));\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "ca13b224b2feb9c44de861da9cbba8dd2a12cb35": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5892. Support user-specific minimum user limit percentage in Capacity Scheduler. Contributed by Eric Payne.\n",
      "commitDate": "22/06/17 11:50 PM",
      "commitName": "ca13b224b2feb9c44de861da9cbba8dd2a12cb35",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,6 @@\n+  public Resource divideAndCeil(Resource numerator, float denominator) {\n+    return Resources.createResource(\n+        divideAndCeil(numerator.getMemorySize(), denominator),\n+        divideAndCeil(numerator.getVirtualCores(), denominator)\n+        );\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource divideAndCeil(Resource numerator, float denominator) {\n    return Resources.createResource(\n        divideAndCeil(numerator.getMemorySize(), denominator),\n        divideAndCeil(numerator.getVirtualCores(), denominator)\n        );\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java"
    }
  }
}