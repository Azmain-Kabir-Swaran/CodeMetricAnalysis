{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MetricsSystemImpl.java",
  "functionName": "register",
  "functionId": "register___name-String__desc-String__source-T",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
  "functionStartLine": 222,
  "functionEndLine": 243,
  "numCommitsSeen": 32,
  "timeTaken": 1505,
  "changeHistory": [
    "69c9af91031f345d9511618877646b8756b17863",
    "1942364ef14396e9bd94a87c0d901ff9abe1d42a",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "827401a9b1d85fe1f443d21ebe9d917ba23153de"
  ],
  "changeHistoryShort": {
    "69c9af91031f345d9511618877646b8756b17863": "Ybodychange",
    "1942364ef14396e9bd94a87c0d901ff9abe1d42a": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "827401a9b1d85fe1f443d21ebe9d917ba23153de": "Yintroduced"
  },
  "changeHistoryDetails": {
    "69c9af91031f345d9511618877646b8756b17863": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11163. MetricsSystemImpl may miss a registered source. Contributed by Chuan Liu.\n",
      "commitDate": "03/10/14 9:01 PM",
      "commitName": "69c9af91031f345d9511618877646b8756b17863",
      "commitAuthor": "cnauroth",
      "commitDateOld": "18/09/14 3:36 PM",
      "commitNameOld": "1942364ef14396e9bd94a87c0d901ff9abe1d42a",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 15.23,
      "commitsBetweenForRepo": 187,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   T register(String name, String desc, T source) {\n     MetricsSourceBuilder sb \u003d MetricsAnnotations.newSourceBuilder(source);\n     final MetricsSource s \u003d sb.build();\n     MetricsInfo si \u003d sb.info();\n     String name2 \u003d name \u003d\u003d null ? si.name() : name;\n     final String finalDesc \u003d desc \u003d\u003d null ? si.description() : desc;\n     final String finalName \u003d // be friendly to non-metrics tests\n         DefaultMetricsSystem.sourceName(name2, !monitoring);\n     allSources.put(finalName, s);\n     LOG.debug(finalName +\", \"+ finalDesc);\n     if (monitoring) {\n       registerSource(finalName, finalDesc, s);\n     }\n     // We want to re-register the source to pick up new config when the\n     // metrics system restarts.\n-    register(name, new AbstractCallback() {\n+    register(finalName, new AbstractCallback() {\n       @Override public void postStart() {\n         registerSource(finalName, finalDesc, s);\n       }\n     });\n     return source;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  T register(String name, String desc, T source) {\n    MetricsSourceBuilder sb \u003d MetricsAnnotations.newSourceBuilder(source);\n    final MetricsSource s \u003d sb.build();\n    MetricsInfo si \u003d sb.info();\n    String name2 \u003d name \u003d\u003d null ? si.name() : name;\n    final String finalDesc \u003d desc \u003d\u003d null ? si.description() : desc;\n    final String finalName \u003d // be friendly to non-metrics tests\n        DefaultMetricsSystem.sourceName(name2, !monitoring);\n    allSources.put(finalName, s);\n    LOG.debug(finalName +\", \"+ finalDesc);\n    if (monitoring) {\n      registerSource(finalName, finalDesc, s);\n    }\n    // We want to re-register the source to pick up new config when the\n    // metrics system restarts.\n    register(finalName, new AbstractCallback() {\n      @Override public void postStart() {\n        registerSource(finalName, finalDesc, s);\n      }\n    });\n    return source;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
      "extendedDetails": {}
    },
    "1942364ef14396e9bd94a87c0d901ff9abe1d42a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11105. MetricsSystemImpl could leak memory in registered callbacks. Contributed by Chuan Liu.\n",
      "commitDate": "18/09/14 3:36 PM",
      "commitName": "1942364ef14396e9bd94a87c0d901ff9abe1d42a",
      "commitAuthor": "cnauroth",
      "commitDateOld": "16/07/14 11:50 AM",
      "commitNameOld": "7f357d68cca8930235683b43460e56973efdb6a5",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 64.16,
      "commitsBetweenForRepo": 574,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   T register(String name, String desc, T source) {\n     MetricsSourceBuilder sb \u003d MetricsAnnotations.newSourceBuilder(source);\n     final MetricsSource s \u003d sb.build();\n     MetricsInfo si \u003d sb.info();\n     String name2 \u003d name \u003d\u003d null ? si.name() : name;\n     final String finalDesc \u003d desc \u003d\u003d null ? si.description() : desc;\n     final String finalName \u003d // be friendly to non-metrics tests\n         DefaultMetricsSystem.sourceName(name2, !monitoring);\n     allSources.put(finalName, s);\n     LOG.debug(finalName +\", \"+ finalDesc);\n     if (monitoring) {\n       registerSource(finalName, finalDesc, s);\n     }\n     // We want to re-register the source to pick up new config when the\n     // metrics system restarts.\n-    register(new AbstractCallback() {\n+    register(name, new AbstractCallback() {\n       @Override public void postStart() {\n         registerSource(finalName, finalDesc, s);\n       }\n     });\n     return source;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  T register(String name, String desc, T source) {\n    MetricsSourceBuilder sb \u003d MetricsAnnotations.newSourceBuilder(source);\n    final MetricsSource s \u003d sb.build();\n    MetricsInfo si \u003d sb.info();\n    String name2 \u003d name \u003d\u003d null ? si.name() : name;\n    final String finalDesc \u003d desc \u003d\u003d null ? si.description() : desc;\n    final String finalName \u003d // be friendly to non-metrics tests\n        DefaultMetricsSystem.sourceName(name2, !monitoring);\n    allSources.put(finalName, s);\n    LOG.debug(finalName +\", \"+ finalDesc);\n    if (monitoring) {\n      registerSource(finalName, finalDesc, s);\n    }\n    // We want to re-register the source to pick up new config when the\n    // metrics system restarts.\n    register(name, new AbstractCallback() {\n      @Override public void postStart() {\n        registerSource(finalName, finalDesc, s);\n      }\n    });\n    return source;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  T register(String name, String desc, T source) {\n    MetricsSourceBuilder sb \u003d MetricsAnnotations.newSourceBuilder(source);\n    final MetricsSource s \u003d sb.build();\n    MetricsInfo si \u003d sb.info();\n    String name2 \u003d name \u003d\u003d null ? si.name() : name;\n    final String finalDesc \u003d desc \u003d\u003d null ? si.description() : desc;\n    final String finalName \u003d // be friendly to non-metrics tests\n        DefaultMetricsSystem.sourceName(name2, !monitoring);\n    allSources.put(finalName, s);\n    LOG.debug(finalName +\", \"+ finalDesc);\n    if (monitoring) {\n      registerSource(finalName, finalDesc, s);\n    }\n    // We want to re-register the source to pick up new config when the\n    // metrics system restarts.\n    register(new AbstractCallback() {\n      @Override public void postStart() {\n        registerSource(finalName, finalDesc, s);\n      }\n    });\n    return source;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  T register(String name, String desc, T source) {\n    MetricsSourceBuilder sb \u003d MetricsAnnotations.newSourceBuilder(source);\n    final MetricsSource s \u003d sb.build();\n    MetricsInfo si \u003d sb.info();\n    String name2 \u003d name \u003d\u003d null ? si.name() : name;\n    final String finalDesc \u003d desc \u003d\u003d null ? si.description() : desc;\n    final String finalName \u003d // be friendly to non-metrics tests\n        DefaultMetricsSystem.sourceName(name2, !monitoring);\n    allSources.put(finalName, s);\n    LOG.debug(finalName +\", \"+ finalDesc);\n    if (monitoring) {\n      registerSource(finalName, finalDesc, s);\n    }\n    // We want to re-register the source to pick up new config when the\n    // metrics system restarts.\n    register(new AbstractCallback() {\n      @Override public void postStart() {\n        registerSource(finalName, finalDesc, s);\n      }\n    });\n    return source;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  T register(String name, String desc, T source) {\n    MetricsSourceBuilder sb \u003d MetricsAnnotations.newSourceBuilder(source);\n    final MetricsSource s \u003d sb.build();\n    MetricsInfo si \u003d sb.info();\n    String name2 \u003d name \u003d\u003d null ? si.name() : name;\n    final String finalDesc \u003d desc \u003d\u003d null ? si.description() : desc;\n    final String finalName \u003d // be friendly to non-metrics tests\n        DefaultMetricsSystem.sourceName(name2, !monitoring);\n    allSources.put(finalName, s);\n    LOG.debug(finalName +\", \"+ finalDesc);\n    if (monitoring) {\n      registerSource(finalName, finalDesc, s);\n    }\n    // We want to re-register the source to pick up new config when the\n    // metrics system restarts.\n    register(new AbstractCallback() {\n      @Override public void postStart() {\n        registerSource(finalName, finalDesc, s);\n      }\n    });\n    return source;\n  }",
      "path": "common/src/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java",
        "newPath": "common/src/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java"
      }
    },
    "827401a9b1d85fe1f443d21ebe9d917ba23153de": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6919. New metrics2 framework. Contributed by Luke Lu.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1100113 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/05/11 12:28 AM",
      "commitName": "827401a9b1d85fe1f443d21ebe9d917ba23153de",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,22 @@\n+  T register(String name, String desc, T source) {\n+    MetricsSourceBuilder sb \u003d MetricsAnnotations.newSourceBuilder(source);\n+    final MetricsSource s \u003d sb.build();\n+    MetricsInfo si \u003d sb.info();\n+    String name2 \u003d name \u003d\u003d null ? si.name() : name;\n+    final String finalDesc \u003d desc \u003d\u003d null ? si.description() : desc;\n+    final String finalName \u003d // be friendly to non-metrics tests\n+        DefaultMetricsSystem.sourceName(name2, !monitoring);\n+    allSources.put(finalName, s);\n+    LOG.debug(finalName +\", \"+ finalDesc);\n+    if (monitoring) {\n+      registerSource(finalName, finalDesc, s);\n+    }\n+    // We want to re-register the source to pick up new config when the\n+    // metrics system restarts.\n+    register(new AbstractCallback() {\n+      @Override public void postStart() {\n+        registerSource(finalName, finalDesc, s);\n+      }\n+    });\n+    return source;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  T register(String name, String desc, T source) {\n    MetricsSourceBuilder sb \u003d MetricsAnnotations.newSourceBuilder(source);\n    final MetricsSource s \u003d sb.build();\n    MetricsInfo si \u003d sb.info();\n    String name2 \u003d name \u003d\u003d null ? si.name() : name;\n    final String finalDesc \u003d desc \u003d\u003d null ? si.description() : desc;\n    final String finalName \u003d // be friendly to non-metrics tests\n        DefaultMetricsSystem.sourceName(name2, !monitoring);\n    allSources.put(finalName, s);\n    LOG.debug(finalName +\", \"+ finalDesc);\n    if (monitoring) {\n      registerSource(finalName, finalDesc, s);\n    }\n    // We want to re-register the source to pick up new config when the\n    // metrics system restarts.\n    register(new AbstractCallback() {\n      @Override public void postStart() {\n        registerSource(finalName, finalDesc, s);\n      }\n    });\n    return source;\n  }",
      "path": "src/java/org/apache/hadoop/metrics2/impl/MetricsSystemImpl.java"
    }
  }
}