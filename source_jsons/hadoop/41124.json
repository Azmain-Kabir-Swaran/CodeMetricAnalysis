{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DominantResourceFairnessPolicy.java",
  "functionName": "calculateClusterAndFairRatios",
  "functionId": "calculateClusterAndFairRatios___resource-Resource__cluster-Resource__ratios-float[][]__weight-float",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/DominantResourceFairnessPolicy.java",
  "functionStartLine": 277,
  "functionEndLine": 301,
  "numCommitsSeen": 20,
  "timeTaken": 1809,
  "changeHistory": [
    "09b476e6dabe8039a41dde7930c8a9c0d14bb750"
  ],
  "changeHistoryShort": {
    "09b476e6dabe8039a41dde7930c8a9c0d14bb750": "Yintroduced"
  },
  "changeHistoryDetails": {
    "09b476e6dabe8039a41dde7930c8a9c0d14bb750": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6612. Update fair scheduler policies to be aware of resource types. (Contributed by Daniel Templeton via Yufei Gu)\n",
      "commitDate": "14/09/17 11:23 AM",
      "commitName": "09b476e6dabe8039a41dde7930c8a9c0d14bb750",
      "commitAuthor": "Yufei Gu",
      "diff": "@@ -0,0 +1,25 @@\n+    int calculateClusterAndFairRatios(Resource resource, Resource cluster,\n+        float[][] ratios, float weight) {\n+      ResourceInformation[] resourceInfo \u003d resource.getResources();\n+      ResourceInformation[] clusterInfo \u003d cluster.getResources();\n+      int max \u003d 0;\n+\n+      for (int i \u003d 0; i \u003c clusterInfo.length; i++) {\n+        // First calculate the cluster share\n+        ratios[i][0] \u003d\n+            resourceInfo[i].getValue() / (float) clusterInfo[i].getValue();\n+\n+        // Use the cluster share to find the dominant resource\n+        if (ratios[i][0] \u003e ratios[max][0]) {\n+          max \u003d i;\n+        }\n+\n+        // Now divide by the weight to get the approximate fair share.\n+        // It\u0027s OK if the weight is zero, because the floating point division\n+        // will yield Infinity, i.e. this Schedulable will lose out to any\n+        // other Schedulable with non-zero weight.\n+        ratios[i][1] \u003d ratios[i][0] / weight;\n+      }\n+\n+      return max;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    int calculateClusterAndFairRatios(Resource resource, Resource cluster,\n        float[][] ratios, float weight) {\n      ResourceInformation[] resourceInfo \u003d resource.getResources();\n      ResourceInformation[] clusterInfo \u003d cluster.getResources();\n      int max \u003d 0;\n\n      for (int i \u003d 0; i \u003c clusterInfo.length; i++) {\n        // First calculate the cluster share\n        ratios[i][0] \u003d\n            resourceInfo[i].getValue() / (float) clusterInfo[i].getValue();\n\n        // Use the cluster share to find the dominant resource\n        if (ratios[i][0] \u003e ratios[max][0]) {\n          max \u003d i;\n        }\n\n        // Now divide by the weight to get the approximate fair share.\n        // It\u0027s OK if the weight is zero, because the floating point division\n        // will yield Infinity, i.e. this Schedulable will lose out to any\n        // other Schedulable with non-zero weight.\n        ratios[i][1] \u003d ratios[i][0] / weight;\n      }\n\n      return max;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/DominantResourceFairnessPolicy.java"
    }
  }
}