{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZKFailoverController.java",
  "functionName": "initZK",
  "functionId": "initZK",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
  "functionStartLine": 333,
  "functionEndLine": 362,
  "numCommitsSeen": 35,
  "timeTaken": 1822,
  "changeHistory": [
    "b2029353537fc8da9ab67834568cb2e24924cf5a",
    "6d4c7df43401b87781e81c57405434ba9b9efd6f",
    "f3c0074030864a0f1da2e4c2376798585cf13db0",
    "22a78a75b4cc700464fdbbe84eff321b8460f70e",
    "c6e132124591362657e6f1722acca376747ea254",
    "693ec453d2b8a07dede2b931d698c702e12fc935",
    "30e1b3bba856b2379a0dc1e7450512427d39c5d7",
    "578f413778a6f005a35d18d7f015df128aeded5b"
  ],
  "changeHistoryShort": {
    "b2029353537fc8da9ab67834568cb2e24924cf5a": "Ybodychange",
    "6d4c7df43401b87781e81c57405434ba9b9efd6f": "Ybodychange",
    "f3c0074030864a0f1da2e4c2376798585cf13db0": "Ybodychange",
    "22a78a75b4cc700464fdbbe84eff321b8460f70e": "Yexceptionschange",
    "c6e132124591362657e6f1722acca376747ea254": "Ybodychange",
    "693ec453d2b8a07dede2b931d698c702e12fc935": "Ybodychange",
    "30e1b3bba856b2379a0dc1e7450512427d39c5d7": "Ybodychange",
    "578f413778a6f005a35d18d7f015df128aeded5b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b2029353537fc8da9ab67834568cb2e24924cf5a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15157. Zookeeper authentication related properties to support CredentialProviders. (Contributed by Gergo Repas)\n",
      "commitDate": "16/01/18 10:15 AM",
      "commitName": "b2029353537fc8da9ab67834568cb2e24924cf5a",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "23/10/17 10:47 AM",
      "commitNameOld": "4b00c9a47f94c4d7c673710bbb3b85b5d2807e7b",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 85.02,
      "commitsBetweenForRepo": 570,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,30 @@\n   private void initZK() throws HadoopIllegalArgumentException, IOException,\n       KeeperException {\n     zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n     int zkTimeout \u003d conf.getInt(ZK_SESSION_TIMEOUT_KEY,\n         ZK_SESSION_TIMEOUT_DEFAULT);\n     // Parse ACLs from configuration.\n     String zkAclConf \u003d conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT);\n     zkAclConf \u003d ZKUtil.resolveConfIndirection(zkAclConf);\n     List\u003cACL\u003e zkAcls \u003d ZKUtil.parseACLs(zkAclConf);\n     if (zkAcls.isEmpty()) {\n       zkAcls \u003d Ids.CREATOR_ALL_ACL;\n     }\n     \n     // Parse authentication from configuration.\n-    String zkAuthConf \u003d conf.get(ZK_AUTH_KEY);\n-    zkAuthConf \u003d ZKUtil.resolveConfIndirection(zkAuthConf);\n-    List\u003cZKAuthInfo\u003e zkAuths;\n-    if (zkAuthConf !\u003d null) {\n-      zkAuths \u003d ZKUtil.parseAuth(zkAuthConf);\n-    } else {\n-      zkAuths \u003d Collections.emptyList();\n-    }\n+    List\u003cZKAuthInfo\u003e zkAuths \u003d SecurityUtil.getZKAuthInfos(conf, ZK_AUTH_KEY);\n \n     // Sanity check configuration.\n     Preconditions.checkArgument(zkQuorum !\u003d null,\n         \"Missing required configuration \u0027%s\u0027 for ZooKeeper quorum\",\n         ZK_QUORUM_KEY);\n     Preconditions.checkArgument(zkTimeout \u003e 0,\n         \"Invalid ZK session timeout %s\", zkTimeout);\n     \n     int maxRetryNum \u003d conf.getInt(\n         CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n         CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT);\n     elector \u003d new ActiveStandbyElector(zkQuorum,\n         zkTimeout, getParentZnode(), zkAcls, zkAuths,\n         new ElectorCallbacks(), maxRetryNum);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initZK() throws HadoopIllegalArgumentException, IOException,\n      KeeperException {\n    zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n    int zkTimeout \u003d conf.getInt(ZK_SESSION_TIMEOUT_KEY,\n        ZK_SESSION_TIMEOUT_DEFAULT);\n    // Parse ACLs from configuration.\n    String zkAclConf \u003d conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT);\n    zkAclConf \u003d ZKUtil.resolveConfIndirection(zkAclConf);\n    List\u003cACL\u003e zkAcls \u003d ZKUtil.parseACLs(zkAclConf);\n    if (zkAcls.isEmpty()) {\n      zkAcls \u003d Ids.CREATOR_ALL_ACL;\n    }\n    \n    // Parse authentication from configuration.\n    List\u003cZKAuthInfo\u003e zkAuths \u003d SecurityUtil.getZKAuthInfos(conf, ZK_AUTH_KEY);\n\n    // Sanity check configuration.\n    Preconditions.checkArgument(zkQuorum !\u003d null,\n        \"Missing required configuration \u0027%s\u0027 for ZooKeeper quorum\",\n        ZK_QUORUM_KEY);\n    Preconditions.checkArgument(zkTimeout \u003e 0,\n        \"Invalid ZK session timeout %s\", zkTimeout);\n    \n    int maxRetryNum \u003d conf.getInt(\n        CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n        CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT);\n    elector \u003d new ActiveStandbyElector(zkQuorum,\n        zkTimeout, getParentZnode(), zkAcls, zkAuths,\n        new ElectorCallbacks(), maxRetryNum);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
      "extendedDetails": {}
    },
    "6d4c7df43401b87781e81c57405434ba9b9efd6f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10535. Make the retry numbers in ActiveStandbyElector configurable. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1589905 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/14 4:03 PM",
      "commitName": "6d4c7df43401b87781e81c57405434ba9b9efd6f",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "23/04/14 11:55 AM",
      "commitNameOld": "6eba48cbdeae7f7d46b2e0ad84bf3845c333000d",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,37 @@\n   private void initZK() throws HadoopIllegalArgumentException, IOException,\n       KeeperException {\n     zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n     int zkTimeout \u003d conf.getInt(ZK_SESSION_TIMEOUT_KEY,\n         ZK_SESSION_TIMEOUT_DEFAULT);\n     // Parse ACLs from configuration.\n     String zkAclConf \u003d conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT);\n     zkAclConf \u003d ZKUtil.resolveConfIndirection(zkAclConf);\n     List\u003cACL\u003e zkAcls \u003d ZKUtil.parseACLs(zkAclConf);\n     if (zkAcls.isEmpty()) {\n       zkAcls \u003d Ids.CREATOR_ALL_ACL;\n     }\n     \n     // Parse authentication from configuration.\n     String zkAuthConf \u003d conf.get(ZK_AUTH_KEY);\n     zkAuthConf \u003d ZKUtil.resolveConfIndirection(zkAuthConf);\n     List\u003cZKAuthInfo\u003e zkAuths;\n     if (zkAuthConf !\u003d null) {\n       zkAuths \u003d ZKUtil.parseAuth(zkAuthConf);\n     } else {\n       zkAuths \u003d Collections.emptyList();\n     }\n \n     // Sanity check configuration.\n     Preconditions.checkArgument(zkQuorum !\u003d null,\n         \"Missing required configuration \u0027%s\u0027 for ZooKeeper quorum\",\n         ZK_QUORUM_KEY);\n     Preconditions.checkArgument(zkTimeout \u003e 0,\n         \"Invalid ZK session timeout %s\", zkTimeout);\n     \n-\n+    int maxRetryNum \u003d conf.getInt(\n+        CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n+        CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT);\n     elector \u003d new ActiveStandbyElector(zkQuorum,\n         zkTimeout, getParentZnode(), zkAcls, zkAuths,\n-        new ElectorCallbacks());\n+        new ElectorCallbacks(), maxRetryNum);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initZK() throws HadoopIllegalArgumentException, IOException,\n      KeeperException {\n    zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n    int zkTimeout \u003d conf.getInt(ZK_SESSION_TIMEOUT_KEY,\n        ZK_SESSION_TIMEOUT_DEFAULT);\n    // Parse ACLs from configuration.\n    String zkAclConf \u003d conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT);\n    zkAclConf \u003d ZKUtil.resolveConfIndirection(zkAclConf);\n    List\u003cACL\u003e zkAcls \u003d ZKUtil.parseACLs(zkAclConf);\n    if (zkAcls.isEmpty()) {\n      zkAcls \u003d Ids.CREATOR_ALL_ACL;\n    }\n    \n    // Parse authentication from configuration.\n    String zkAuthConf \u003d conf.get(ZK_AUTH_KEY);\n    zkAuthConf \u003d ZKUtil.resolveConfIndirection(zkAuthConf);\n    List\u003cZKAuthInfo\u003e zkAuths;\n    if (zkAuthConf !\u003d null) {\n      zkAuths \u003d ZKUtil.parseAuth(zkAuthConf);\n    } else {\n      zkAuths \u003d Collections.emptyList();\n    }\n\n    // Sanity check configuration.\n    Preconditions.checkArgument(zkQuorum !\u003d null,\n        \"Missing required configuration \u0027%s\u0027 for ZooKeeper quorum\",\n        ZK_QUORUM_KEY);\n    Preconditions.checkArgument(zkTimeout \u003e 0,\n        \"Invalid ZK session timeout %s\", zkTimeout);\n    \n    int maxRetryNum \u003d conf.getInt(\n        CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,\n        CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT);\n    elector \u003d new ActiveStandbyElector(zkQuorum,\n        zkTimeout, getParentZnode(), zkAcls, zkAuths,\n        new ElectorCallbacks(), maxRetryNum);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
      "extendedDetails": {}
    },
    "f3c0074030864a0f1da2e4c2376798585cf13db0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9906. Move HAZKUtil to o.a.h.util.ZKUtil and make inner-classes public (Karthik Kambatla via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1518303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/08/13 10:54 AM",
      "commitName": "f3c0074030864a0f1da2e4c2376798585cf13db0",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "10/12/12 2:09 PM",
      "commitNameOld": "22a78a75b4cc700464fdbbe84eff321b8460f70e",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 260.82,
      "commitsBetweenForRepo": 1514,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   private void initZK() throws HadoopIllegalArgumentException, IOException,\n       KeeperException {\n     zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n     int zkTimeout \u003d conf.getInt(ZK_SESSION_TIMEOUT_KEY,\n         ZK_SESSION_TIMEOUT_DEFAULT);\n     // Parse ACLs from configuration.\n     String zkAclConf \u003d conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT);\n-    zkAclConf \u003d HAZKUtil.resolveConfIndirection(zkAclConf);\n-    List\u003cACL\u003e zkAcls \u003d HAZKUtil.parseACLs(zkAclConf);\n+    zkAclConf \u003d ZKUtil.resolveConfIndirection(zkAclConf);\n+    List\u003cACL\u003e zkAcls \u003d ZKUtil.parseACLs(zkAclConf);\n     if (zkAcls.isEmpty()) {\n       zkAcls \u003d Ids.CREATOR_ALL_ACL;\n     }\n     \n     // Parse authentication from configuration.\n     String zkAuthConf \u003d conf.get(ZK_AUTH_KEY);\n-    zkAuthConf \u003d HAZKUtil.resolveConfIndirection(zkAuthConf);\n+    zkAuthConf \u003d ZKUtil.resolveConfIndirection(zkAuthConf);\n     List\u003cZKAuthInfo\u003e zkAuths;\n     if (zkAuthConf !\u003d null) {\n-      zkAuths \u003d HAZKUtil.parseAuth(zkAuthConf);\n+      zkAuths \u003d ZKUtil.parseAuth(zkAuthConf);\n     } else {\n       zkAuths \u003d Collections.emptyList();\n     }\n \n     // Sanity check configuration.\n     Preconditions.checkArgument(zkQuorum !\u003d null,\n         \"Missing required configuration \u0027%s\u0027 for ZooKeeper quorum\",\n         ZK_QUORUM_KEY);\n     Preconditions.checkArgument(zkTimeout \u003e 0,\n         \"Invalid ZK session timeout %s\", zkTimeout);\n     \n \n     elector \u003d new ActiveStandbyElector(zkQuorum,\n         zkTimeout, getParentZnode(), zkAcls, zkAuths,\n         new ElectorCallbacks());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initZK() throws HadoopIllegalArgumentException, IOException,\n      KeeperException {\n    zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n    int zkTimeout \u003d conf.getInt(ZK_SESSION_TIMEOUT_KEY,\n        ZK_SESSION_TIMEOUT_DEFAULT);\n    // Parse ACLs from configuration.\n    String zkAclConf \u003d conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT);\n    zkAclConf \u003d ZKUtil.resolveConfIndirection(zkAclConf);\n    List\u003cACL\u003e zkAcls \u003d ZKUtil.parseACLs(zkAclConf);\n    if (zkAcls.isEmpty()) {\n      zkAcls \u003d Ids.CREATOR_ALL_ACL;\n    }\n    \n    // Parse authentication from configuration.\n    String zkAuthConf \u003d conf.get(ZK_AUTH_KEY);\n    zkAuthConf \u003d ZKUtil.resolveConfIndirection(zkAuthConf);\n    List\u003cZKAuthInfo\u003e zkAuths;\n    if (zkAuthConf !\u003d null) {\n      zkAuths \u003d ZKUtil.parseAuth(zkAuthConf);\n    } else {\n      zkAuths \u003d Collections.emptyList();\n    }\n\n    // Sanity check configuration.\n    Preconditions.checkArgument(zkQuorum !\u003d null,\n        \"Missing required configuration \u0027%s\u0027 for ZooKeeper quorum\",\n        ZK_QUORUM_KEY);\n    Preconditions.checkArgument(zkTimeout \u003e 0,\n        \"Invalid ZK session timeout %s\", zkTimeout);\n    \n\n    elector \u003d new ActiveStandbyElector(zkQuorum,\n        zkTimeout, getParentZnode(), zkAcls, zkAuths,\n        new ElectorCallbacks());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
      "extendedDetails": {}
    },
    "22a78a75b4cc700464fdbbe84eff321b8460f70e": {
      "type": "Yexceptionschange",
      "commitMessage": "HADOOP-9126. FormatZK and ZKFC startup can fail due to zkclient connection establishment delay. Contributed by Rakesh R and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1419831 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/12 2:09 PM",
      "commitName": "22a78a75b4cc700464fdbbe84eff321b8460f70e",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "14/08/12 5:28 PM",
      "commitNameOld": "28e87740c5797e87a9038d7f151c8b21a5b04592",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 117.9,
      "commitsBetweenForRepo": 670,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n-  private void initZK() throws HadoopIllegalArgumentException, IOException {\n+  private void initZK() throws HadoopIllegalArgumentException, IOException,\n+      KeeperException {\n     zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n     int zkTimeout \u003d conf.getInt(ZK_SESSION_TIMEOUT_KEY,\n         ZK_SESSION_TIMEOUT_DEFAULT);\n     // Parse ACLs from configuration.\n     String zkAclConf \u003d conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT);\n     zkAclConf \u003d HAZKUtil.resolveConfIndirection(zkAclConf);\n     List\u003cACL\u003e zkAcls \u003d HAZKUtil.parseACLs(zkAclConf);\n     if (zkAcls.isEmpty()) {\n       zkAcls \u003d Ids.CREATOR_ALL_ACL;\n     }\n     \n     // Parse authentication from configuration.\n     String zkAuthConf \u003d conf.get(ZK_AUTH_KEY);\n     zkAuthConf \u003d HAZKUtil.resolveConfIndirection(zkAuthConf);\n     List\u003cZKAuthInfo\u003e zkAuths;\n     if (zkAuthConf !\u003d null) {\n       zkAuths \u003d HAZKUtil.parseAuth(zkAuthConf);\n     } else {\n       zkAuths \u003d Collections.emptyList();\n     }\n \n     // Sanity check configuration.\n     Preconditions.checkArgument(zkQuorum !\u003d null,\n         \"Missing required configuration \u0027%s\u0027 for ZooKeeper quorum\",\n         ZK_QUORUM_KEY);\n     Preconditions.checkArgument(zkTimeout \u003e 0,\n         \"Invalid ZK session timeout %s\", zkTimeout);\n     \n \n     elector \u003d new ActiveStandbyElector(zkQuorum,\n         zkTimeout, getParentZnode(), zkAcls, zkAuths,\n         new ElectorCallbacks());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initZK() throws HadoopIllegalArgumentException, IOException,\n      KeeperException {\n    zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n    int zkTimeout \u003d conf.getInt(ZK_SESSION_TIMEOUT_KEY,\n        ZK_SESSION_TIMEOUT_DEFAULT);\n    // Parse ACLs from configuration.\n    String zkAclConf \u003d conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT);\n    zkAclConf \u003d HAZKUtil.resolveConfIndirection(zkAclConf);\n    List\u003cACL\u003e zkAcls \u003d HAZKUtil.parseACLs(zkAclConf);\n    if (zkAcls.isEmpty()) {\n      zkAcls \u003d Ids.CREATOR_ALL_ACL;\n    }\n    \n    // Parse authentication from configuration.\n    String zkAuthConf \u003d conf.get(ZK_AUTH_KEY);\n    zkAuthConf \u003d HAZKUtil.resolveConfIndirection(zkAuthConf);\n    List\u003cZKAuthInfo\u003e zkAuths;\n    if (zkAuthConf !\u003d null) {\n      zkAuths \u003d HAZKUtil.parseAuth(zkAuthConf);\n    } else {\n      zkAuths \u003d Collections.emptyList();\n    }\n\n    // Sanity check configuration.\n    Preconditions.checkArgument(zkQuorum !\u003d null,\n        \"Missing required configuration \u0027%s\u0027 for ZooKeeper quorum\",\n        ZK_QUORUM_KEY);\n    Preconditions.checkArgument(zkTimeout \u003e 0,\n        \"Invalid ZK session timeout %s\", zkTimeout);\n    \n\n    elector \u003d new ActiveStandbyElector(zkQuorum,\n        zkTimeout, getParentZnode(), zkAcls, zkAuths,\n        new ElectorCallbacks());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
      "extendedDetails": {
        "oldValue": "[HadoopIllegalArgumentException, IOException]",
        "newValue": "[HadoopIllegalArgumentException, IOException, KeeperException]"
      }
    },
    "c6e132124591362657e6f1722acca376747ea254": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8306. ZKFC: improve error message when ZK is not running. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1329960 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/12 12:34 PM",
      "commitName": "c6e132124591362657e6f1722acca376747ea254",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "10/04/12 10:40 PM",
      "commitNameOld": "41a014c31b3e435354a25d4b7d53f0bd2cede9a1",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 13.58,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   private void initZK() throws HadoopIllegalArgumentException, IOException {\n-    String zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n+    zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n     int zkTimeout \u003d conf.getInt(ZK_SESSION_TIMEOUT_KEY,\n         ZK_SESSION_TIMEOUT_DEFAULT);\n     // Parse ACLs from configuration.\n     String zkAclConf \u003d conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT);\n     zkAclConf \u003d HAZKUtil.resolveConfIndirection(zkAclConf);\n     List\u003cACL\u003e zkAcls \u003d HAZKUtil.parseACLs(zkAclConf);\n     if (zkAcls.isEmpty()) {\n       zkAcls \u003d Ids.CREATOR_ALL_ACL;\n     }\n     \n     // Parse authentication from configuration.\n     String zkAuthConf \u003d conf.get(ZK_AUTH_KEY);\n     zkAuthConf \u003d HAZKUtil.resolveConfIndirection(zkAuthConf);\n     List\u003cZKAuthInfo\u003e zkAuths;\n     if (zkAuthConf !\u003d null) {\n       zkAuths \u003d HAZKUtil.parseAuth(zkAuthConf);\n     } else {\n       zkAuths \u003d Collections.emptyList();\n     }\n \n     // Sanity check configuration.\n     Preconditions.checkArgument(zkQuorum !\u003d null,\n         \"Missing required configuration \u0027%s\u0027 for ZooKeeper quorum\",\n         ZK_QUORUM_KEY);\n     Preconditions.checkArgument(zkTimeout \u003e 0,\n         \"Invalid ZK session timeout %s\", zkTimeout);\n     \n \n     elector \u003d new ActiveStandbyElector(zkQuorum,\n         zkTimeout, getParentZnode(), zkAcls, zkAuths,\n         new ElectorCallbacks());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initZK() throws HadoopIllegalArgumentException, IOException {\n    zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n    int zkTimeout \u003d conf.getInt(ZK_SESSION_TIMEOUT_KEY,\n        ZK_SESSION_TIMEOUT_DEFAULT);\n    // Parse ACLs from configuration.\n    String zkAclConf \u003d conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT);\n    zkAclConf \u003d HAZKUtil.resolveConfIndirection(zkAclConf);\n    List\u003cACL\u003e zkAcls \u003d HAZKUtil.parseACLs(zkAclConf);\n    if (zkAcls.isEmpty()) {\n      zkAcls \u003d Ids.CREATOR_ALL_ACL;\n    }\n    \n    // Parse authentication from configuration.\n    String zkAuthConf \u003d conf.get(ZK_AUTH_KEY);\n    zkAuthConf \u003d HAZKUtil.resolveConfIndirection(zkAuthConf);\n    List\u003cZKAuthInfo\u003e zkAuths;\n    if (zkAuthConf !\u003d null) {\n      zkAuths \u003d HAZKUtil.parseAuth(zkAuthConf);\n    } else {\n      zkAuths \u003d Collections.emptyList();\n    }\n\n    // Sanity check configuration.\n    Preconditions.checkArgument(zkQuorum !\u003d null,\n        \"Missing required configuration \u0027%s\u0027 for ZooKeeper quorum\",\n        ZK_QUORUM_KEY);\n    Preconditions.checkArgument(zkTimeout \u003e 0,\n        \"Invalid ZK session timeout %s\", zkTimeout);\n    \n\n    elector \u003d new ActiveStandbyElector(zkQuorum,\n        zkTimeout, getParentZnode(), zkAcls, zkAuths,\n        new ElectorCallbacks());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
      "extendedDetails": {}
    },
    "693ec453d2b8a07dede2b931d698c702e12fc935": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8246. Auto-HA: automatically scope znode by nameservice ID. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1310919 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/04/12 4:24 PM",
      "commitName": "693ec453d2b8a07dede2b931d698c702e12fc935",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "05/04/12 9:27 PM",
      "commitNameOld": "844faefd080e3fa35bbe56b60089fe8d4226b5cb",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.79,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,34 @@\n   private void initZK() throws HadoopIllegalArgumentException, IOException {\n     String zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n     int zkTimeout \u003d conf.getInt(ZK_SESSION_TIMEOUT_KEY,\n         ZK_SESSION_TIMEOUT_DEFAULT);\n-    parentZnode \u003d conf.get(ZK_PARENT_ZNODE_KEY,\n-        ZK_PARENT_ZNODE_DEFAULT);\n-    \n     // Parse ACLs from configuration.\n     String zkAclConf \u003d conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT);\n     zkAclConf \u003d HAZKUtil.resolveConfIndirection(zkAclConf);\n     List\u003cACL\u003e zkAcls \u003d HAZKUtil.parseACLs(zkAclConf);\n     if (zkAcls.isEmpty()) {\n       zkAcls \u003d Ids.CREATOR_ALL_ACL;\n     }\n     \n     // Parse authentication from configuration.\n     String zkAuthConf \u003d conf.get(ZK_AUTH_KEY);\n     zkAuthConf \u003d HAZKUtil.resolveConfIndirection(zkAuthConf);\n     List\u003cZKAuthInfo\u003e zkAuths;\n     if (zkAuthConf !\u003d null) {\n       zkAuths \u003d HAZKUtil.parseAuth(zkAuthConf);\n     } else {\n       zkAuths \u003d Collections.emptyList();\n     }\n \n     // Sanity check configuration.\n     Preconditions.checkArgument(zkQuorum !\u003d null,\n         \"Missing required configuration \u0027%s\u0027 for ZooKeeper quorum\",\n         ZK_QUORUM_KEY);\n     Preconditions.checkArgument(zkTimeout \u003e 0,\n         \"Invalid ZK session timeout %s\", zkTimeout);\n     \n \n     elector \u003d new ActiveStandbyElector(zkQuorum,\n-        zkTimeout, parentZnode, zkAcls, zkAuths,\n+        zkTimeout, getParentZnode(), zkAcls, zkAuths,\n         new ElectorCallbacks());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initZK() throws HadoopIllegalArgumentException, IOException {\n    String zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n    int zkTimeout \u003d conf.getInt(ZK_SESSION_TIMEOUT_KEY,\n        ZK_SESSION_TIMEOUT_DEFAULT);\n    // Parse ACLs from configuration.\n    String zkAclConf \u003d conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT);\n    zkAclConf \u003d HAZKUtil.resolveConfIndirection(zkAclConf);\n    List\u003cACL\u003e zkAcls \u003d HAZKUtil.parseACLs(zkAclConf);\n    if (zkAcls.isEmpty()) {\n      zkAcls \u003d Ids.CREATOR_ALL_ACL;\n    }\n    \n    // Parse authentication from configuration.\n    String zkAuthConf \u003d conf.get(ZK_AUTH_KEY);\n    zkAuthConf \u003d HAZKUtil.resolveConfIndirection(zkAuthConf);\n    List\u003cZKAuthInfo\u003e zkAuths;\n    if (zkAuthConf !\u003d null) {\n      zkAuths \u003d HAZKUtil.parseAuth(zkAuthConf);\n    } else {\n      zkAuths \u003d Collections.emptyList();\n    }\n\n    // Sanity check configuration.\n    Preconditions.checkArgument(zkQuorum !\u003d null,\n        \"Missing required configuration \u0027%s\u0027 for ZooKeeper quorum\",\n        ZK_QUORUM_KEY);\n    Preconditions.checkArgument(zkTimeout \u003e 0,\n        \"Invalid ZK session timeout %s\", zkTimeout);\n    \n\n    elector \u003d new ActiveStandbyElector(zkQuorum,\n        zkTimeout, getParentZnode(), zkAcls, zkAuths,\n        new ElectorCallbacks());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
      "extendedDetails": {}
    },
    "30e1b3bba856b2379a0dc1e7450512427d39c5d7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8215. Security support for ZK Failover controller. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1309185 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/04/12 4:37 PM",
      "commitName": "30e1b3bba856b2379a0dc1e7450512427d39c5d7",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "03/04/12 2:48 PM",
      "commitNameOld": "39a5fd5c710f27db34485dcf2071351f47922952",
      "commitAuthorOld": "",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,37 @@\n   private void initZK() throws HadoopIllegalArgumentException, IOException {\n     String zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n     int zkTimeout \u003d conf.getInt(ZK_SESSION_TIMEOUT_KEY,\n         ZK_SESSION_TIMEOUT_DEFAULT);\n     parentZnode \u003d conf.get(ZK_PARENT_ZNODE_KEY,\n         ZK_PARENT_ZNODE_DEFAULT);\n-    // TODO: need ZK ACL support in config, also maybe auth!\n-    List\u003cACL\u003e zkAcls \u003d Ids.OPEN_ACL_UNSAFE;\n+    \n+    // Parse ACLs from configuration.\n+    String zkAclConf \u003d conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT);\n+    zkAclConf \u003d HAZKUtil.resolveConfIndirection(zkAclConf);\n+    List\u003cACL\u003e zkAcls \u003d HAZKUtil.parseACLs(zkAclConf);\n+    if (zkAcls.isEmpty()) {\n+      zkAcls \u003d Ids.CREATOR_ALL_ACL;\n+    }\n+    \n+    // Parse authentication from configuration.\n+    String zkAuthConf \u003d conf.get(ZK_AUTH_KEY);\n+    zkAuthConf \u003d HAZKUtil.resolveConfIndirection(zkAuthConf);\n+    List\u003cZKAuthInfo\u003e zkAuths;\n+    if (zkAuthConf !\u003d null) {\n+      zkAuths \u003d HAZKUtil.parseAuth(zkAuthConf);\n+    } else {\n+      zkAuths \u003d Collections.emptyList();\n+    }\n \n+    // Sanity check configuration.\n     Preconditions.checkArgument(zkQuorum !\u003d null,\n         \"Missing required configuration \u0027%s\u0027 for ZooKeeper quorum\",\n         ZK_QUORUM_KEY);\n     Preconditions.checkArgument(zkTimeout \u003e 0,\n         \"Invalid ZK session timeout %s\", zkTimeout);\n     \n \n     elector \u003d new ActiveStandbyElector(zkQuorum,\n-        zkTimeout, parentZnode, zkAcls, new ElectorCallbacks());\n+        zkTimeout, parentZnode, zkAcls, zkAuths,\n+        new ElectorCallbacks());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initZK() throws HadoopIllegalArgumentException, IOException {\n    String zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n    int zkTimeout \u003d conf.getInt(ZK_SESSION_TIMEOUT_KEY,\n        ZK_SESSION_TIMEOUT_DEFAULT);\n    parentZnode \u003d conf.get(ZK_PARENT_ZNODE_KEY,\n        ZK_PARENT_ZNODE_DEFAULT);\n    \n    // Parse ACLs from configuration.\n    String zkAclConf \u003d conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT);\n    zkAclConf \u003d HAZKUtil.resolveConfIndirection(zkAclConf);\n    List\u003cACL\u003e zkAcls \u003d HAZKUtil.parseACLs(zkAclConf);\n    if (zkAcls.isEmpty()) {\n      zkAcls \u003d Ids.CREATOR_ALL_ACL;\n    }\n    \n    // Parse authentication from configuration.\n    String zkAuthConf \u003d conf.get(ZK_AUTH_KEY);\n    zkAuthConf \u003d HAZKUtil.resolveConfIndirection(zkAuthConf);\n    List\u003cZKAuthInfo\u003e zkAuths;\n    if (zkAuthConf !\u003d null) {\n      zkAuths \u003d HAZKUtil.parseAuth(zkAuthConf);\n    } else {\n      zkAuths \u003d Collections.emptyList();\n    }\n\n    // Sanity check configuration.\n    Preconditions.checkArgument(zkQuorum !\u003d null,\n        \"Missing required configuration \u0027%s\u0027 for ZooKeeper quorum\",\n        ZK_QUORUM_KEY);\n    Preconditions.checkArgument(zkTimeout \u003e 0,\n        \"Invalid ZK session timeout %s\", zkTimeout);\n    \n\n    elector \u003d new ActiveStandbyElector(zkQuorum,\n        zkTimeout, parentZnode, zkAcls, zkAuths,\n        new ElectorCallbacks());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
      "extendedDetails": {}
    },
    "578f413778a6f005a35d18d7f015df128aeded5b": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8206. Common portion of a ZK-based failover controller. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/12 4:37 PM",
      "commitName": "578f413778a6f005a35d18d7f015df128aeded5b",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,19 @@\n+  private void initZK() throws HadoopIllegalArgumentException, IOException {\n+    String zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n+    int zkTimeout \u003d conf.getInt(ZK_SESSION_TIMEOUT_KEY,\n+        ZK_SESSION_TIMEOUT_DEFAULT);\n+    parentZnode \u003d conf.get(ZK_PARENT_ZNODE_KEY,\n+        ZK_PARENT_ZNODE_DEFAULT);\n+    // TODO: need ZK ACL support in config, also maybe auth!\n+    List\u003cACL\u003e zkAcls \u003d Ids.OPEN_ACL_UNSAFE;\n+\n+    Preconditions.checkArgument(zkQuorum !\u003d null,\n+        \"Missing required configuration \u0027%s\u0027 for ZooKeeper quorum\",\n+        ZK_QUORUM_KEY);\n+    Preconditions.checkArgument(zkTimeout \u003e 0,\n+        \"Invalid ZK session timeout %s\", zkTimeout);\n+    \n+\n+    elector \u003d new ActiveStandbyElector(zkQuorum,\n+        zkTimeout, parentZnode, zkAcls, new ElectorCallbacks());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initZK() throws HadoopIllegalArgumentException, IOException {\n    String zkQuorum \u003d conf.get(ZK_QUORUM_KEY);\n    int zkTimeout \u003d conf.getInt(ZK_SESSION_TIMEOUT_KEY,\n        ZK_SESSION_TIMEOUT_DEFAULT);\n    parentZnode \u003d conf.get(ZK_PARENT_ZNODE_KEY,\n        ZK_PARENT_ZNODE_DEFAULT);\n    // TODO: need ZK ACL support in config, also maybe auth!\n    List\u003cACL\u003e zkAcls \u003d Ids.OPEN_ACL_UNSAFE;\n\n    Preconditions.checkArgument(zkQuorum !\u003d null,\n        \"Missing required configuration \u0027%s\u0027 for ZooKeeper quorum\",\n        ZK_QUORUM_KEY);\n    Preconditions.checkArgument(zkTimeout \u003e 0,\n        \"Invalid ZK session timeout %s\", zkTimeout);\n    \n\n    elector \u003d new ActiveStandbyElector(zkQuorum,\n        zkTimeout, parentZnode, zkAcls, new ElectorCallbacks());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java"
    }
  }
}