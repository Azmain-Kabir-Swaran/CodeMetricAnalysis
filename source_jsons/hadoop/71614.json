{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegistryDNS.java",
  "functionName": "getReverseZoneName",
  "functionId": "getReverseZoneName___utils-SubnetUtils__networkAddress-String",
  "sourceFilePath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
  "functionStartLine": 512,
  "functionEndLine": 542,
  "numCommitsSeen": 15,
  "timeTaken": 1675,
  "changeHistory": [
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
    "f934f62fc71b4776e88f86d4254de0ea12147511"
  ],
  "changeHistoryShort": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": "Ymultichange(Yfilerename,Ybodychange)",
    "f934f62fc71b4776e88f86d4254de0ea12147511": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
      "commitDate": "19/10/18 4:46 PM",
      "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
          "commitDate": "19/10/18 4:46 PM",
          "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "19/10/18 1:57 PM",
          "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n   private Name getReverseZoneName(SubnetUtils utils, String networkAddress) {\n     Name reverseZoneName \u003d null;\n     boolean isLargeNetwork \u003d false;\n     if (utils !\u003d null) {\n-      isLargeNetwork \u003d utils.getInfo().getAddressCount() \u003e 256;\n+      isLargeNetwork \u003d utils.getInfo().getAddressCountLong() \u003e 256;\n     }\n     final String[] bytes \u003d networkAddress.split(\"\\\\.\");\n     if (bytes.length \u003d\u003d 4) {\n       String reverseLookupZoneName \u003d null;\n       if (isLargeNetwork) {\n         reverseLookupZoneName \u003d\n             String.format(\"%s.%s.%s\",\n                 bytes[1],\n                 bytes[0],\n                 IN_ADDR_ARPA);\n       } else {\n         reverseLookupZoneName \u003d\n             String.format(\"%s.%s.%s.%s\",\n                 bytes[2],\n                 bytes[1],\n                 bytes[0],\n                 IN_ADDR_ARPA);\n       }\n       try {\n         reverseZoneName \u003d Name.fromString(reverseLookupZoneName);\n       } catch (TextParseException e) {\n         LOG.warn(\"Unable to convert {} to DNS name\", reverseLookupZoneName);\n       }\n     }\n     return reverseZoneName;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Name getReverseZoneName(SubnetUtils utils, String networkAddress) {\n    Name reverseZoneName \u003d null;\n    boolean isLargeNetwork \u003d false;\n    if (utils !\u003d null) {\n      isLargeNetwork \u003d utils.getInfo().getAddressCountLong() \u003e 256;\n    }\n    final String[] bytes \u003d networkAddress.split(\"\\\\.\");\n    if (bytes.length \u003d\u003d 4) {\n      String reverseLookupZoneName \u003d null;\n      if (isLargeNetwork) {\n        reverseLookupZoneName \u003d\n            String.format(\"%s.%s.%s\",\n                bytes[1],\n                bytes[0],\n                IN_ADDR_ARPA);\n      } else {\n        reverseLookupZoneName \u003d\n            String.format(\"%s.%s.%s.%s\",\n                bytes[2],\n                bytes[1],\n                bytes[0],\n                IN_ADDR_ARPA);\n      }\n      try {\n        reverseZoneName \u003d Name.fromString(reverseLookupZoneName);\n      } catch (TextParseException e) {\n        LOG.warn(\"Unable to convert {} to DNS name\", reverseLookupZoneName);\n      }\n    }\n    return reverseZoneName;\n  }",
          "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
            "newPath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
          "commitDate": "19/10/18 4:46 PM",
          "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "19/10/18 1:57 PM",
          "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n   private Name getReverseZoneName(SubnetUtils utils, String networkAddress) {\n     Name reverseZoneName \u003d null;\n     boolean isLargeNetwork \u003d false;\n     if (utils !\u003d null) {\n-      isLargeNetwork \u003d utils.getInfo().getAddressCount() \u003e 256;\n+      isLargeNetwork \u003d utils.getInfo().getAddressCountLong() \u003e 256;\n     }\n     final String[] bytes \u003d networkAddress.split(\"\\\\.\");\n     if (bytes.length \u003d\u003d 4) {\n       String reverseLookupZoneName \u003d null;\n       if (isLargeNetwork) {\n         reverseLookupZoneName \u003d\n             String.format(\"%s.%s.%s\",\n                 bytes[1],\n                 bytes[0],\n                 IN_ADDR_ARPA);\n       } else {\n         reverseLookupZoneName \u003d\n             String.format(\"%s.%s.%s.%s\",\n                 bytes[2],\n                 bytes[1],\n                 bytes[0],\n                 IN_ADDR_ARPA);\n       }\n       try {\n         reverseZoneName \u003d Name.fromString(reverseLookupZoneName);\n       } catch (TextParseException e) {\n         LOG.warn(\"Unable to convert {} to DNS name\", reverseLookupZoneName);\n       }\n     }\n     return reverseZoneName;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Name getReverseZoneName(SubnetUtils utils, String networkAddress) {\n    Name reverseZoneName \u003d null;\n    boolean isLargeNetwork \u003d false;\n    if (utils !\u003d null) {\n      isLargeNetwork \u003d utils.getInfo().getAddressCountLong() \u003e 256;\n    }\n    final String[] bytes \u003d networkAddress.split(\"\\\\.\");\n    if (bytes.length \u003d\u003d 4) {\n      String reverseLookupZoneName \u003d null;\n      if (isLargeNetwork) {\n        reverseLookupZoneName \u003d\n            String.format(\"%s.%s.%s\",\n                bytes[1],\n                bytes[0],\n                IN_ADDR_ARPA);\n      } else {\n        reverseLookupZoneName \u003d\n            String.format(\"%s.%s.%s.%s\",\n                bytes[2],\n                bytes[1],\n                bytes[0],\n                IN_ADDR_ARPA);\n      }\n      try {\n        reverseZoneName \u003d Name.fromString(reverseLookupZoneName);\n      } catch (TextParseException e) {\n        LOG.warn(\"Unable to convert {} to DNS name\", reverseLookupZoneName);\n      }\n    }\n    return reverseZoneName;\n  }",
          "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
          "extendedDetails": {}
        }
      ]
    },
    "f934f62fc71b4776e88f86d4254de0ea12147511": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5218. Initial core change for DNS for YARN. Contributed by Jonathan Maron\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "f934f62fc71b4776e88f86d4254de0ea12147511",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,31 @@\n+  private Name getReverseZoneName(SubnetUtils utils, String networkAddress) {\n+    Name reverseZoneName \u003d null;\n+    boolean isLargeNetwork \u003d false;\n+    if (utils !\u003d null) {\n+      isLargeNetwork \u003d utils.getInfo().getAddressCount() \u003e 256;\n+    }\n+    final String[] bytes \u003d networkAddress.split(\"\\\\.\");\n+    if (bytes.length \u003d\u003d 4) {\n+      String reverseLookupZoneName \u003d null;\n+      if (isLargeNetwork) {\n+        reverseLookupZoneName \u003d\n+            String.format(\"%s.%s.%s\",\n+                bytes[1],\n+                bytes[0],\n+                IN_ADDR_ARPA);\n+      } else {\n+        reverseLookupZoneName \u003d\n+            String.format(\"%s.%s.%s.%s\",\n+                bytes[2],\n+                bytes[1],\n+                bytes[0],\n+                IN_ADDR_ARPA);\n+      }\n+      try {\n+        reverseZoneName \u003d Name.fromString(reverseLookupZoneName);\n+      } catch (TextParseException e) {\n+        LOG.warn(\"Unable to convert {} to DNS name\", reverseLookupZoneName);\n+      }\n+    }\n+    return reverseZoneName;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Name getReverseZoneName(SubnetUtils utils, String networkAddress) {\n    Name reverseZoneName \u003d null;\n    boolean isLargeNetwork \u003d false;\n    if (utils !\u003d null) {\n      isLargeNetwork \u003d utils.getInfo().getAddressCount() \u003e 256;\n    }\n    final String[] bytes \u003d networkAddress.split(\"\\\\.\");\n    if (bytes.length \u003d\u003d 4) {\n      String reverseLookupZoneName \u003d null;\n      if (isLargeNetwork) {\n        reverseLookupZoneName \u003d\n            String.format(\"%s.%s.%s\",\n                bytes[1],\n                bytes[0],\n                IN_ADDR_ARPA);\n      } else {\n        reverseLookupZoneName \u003d\n            String.format(\"%s.%s.%s.%s\",\n                bytes[2],\n                bytes[1],\n                bytes[0],\n                IN_ADDR_ARPA);\n      }\n      try {\n        reverseZoneName \u003d Name.fromString(reverseLookupZoneName);\n      } catch (TextParseException e) {\n        LOG.warn(\"Unable to convert {} to DNS name\", reverseLookupZoneName);\n      }\n    }\n    return reverseZoneName;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java"
    }
  }
}