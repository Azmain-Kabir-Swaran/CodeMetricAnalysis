{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterRpcServer.java",
  "functionName": "getCreateLocation",
  "functionId": "getCreateLocation___src-String(modifiers-final)__locations-List__RemoteLocation__(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java",
  "functionStartLine": 638,
  "functionEndLine": 660,
  "numCommitsSeen": 113,
  "timeTaken": 6870,
  "changeHistory": [
    "3df0adaaea485bcbd4ae1a04fe160f3148c14437",
    "263413e83840c7795a988e3939cd292d020c8d5f",
    "8e4267650fe52eb6b6d4466fc006e7af4a1326d0",
    "6c42d4050461ab71c88f123569649793dc53aebd",
    "6425ed27ea638da75f656204d6df4adad1d91fe1",
    "fb5b3dce6192265bce9b9d93ab663bdc5be8048e",
    "fa121eb66bc42e9cb5586f8c2e268cfdc2ed187a",
    "6e31a090842f8aeedb331b653b075499f8df6c60",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7"
  ],
  "changeHistoryShort": {
    "3df0adaaea485bcbd4ae1a04fe160f3148c14437": "Ybodychange",
    "263413e83840c7795a988e3939cd292d020c8d5f": "Ybodychange",
    "8e4267650fe52eb6b6d4466fc006e7af4a1326d0": "Ybodychange",
    "6c42d4050461ab71c88f123569649793dc53aebd": "Ymultichange(Yparameterchange,Ybodychange)",
    "6425ed27ea638da75f656204d6df4adad1d91fe1": "Ymodifierchange",
    "fb5b3dce6192265bce9b9d93ab663bdc5be8048e": "Ymodifierchange",
    "fa121eb66bc42e9cb5586f8c2e268cfdc2ed187a": "Ymodifierchange",
    "6e31a090842f8aeedb331b653b075499f8df6c60": "Ymodifierchange",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3df0adaaea485bcbd4ae1a04fe160f3148c14437": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15127. RBF: Do not allow writes when a subcluster is unavailable for HASH_ALL mount points. Contributed by Inigo Goiri\n",
      "commitDate": "12/02/20 6:11 AM",
      "commitName": "3df0adaaea485bcbd4ae1a04fe160f3148c14437",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "07/02/20 1:21 AM",
      "commitNameOld": "7dac7e1d13eaf0eac04fe805c7502dcecd597979",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 5.2,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,23 @@\n   RemoteLocation getCreateLocation(\n       final String src, final List\u003cRemoteLocation\u003e locations)\n       throws IOException {\n \n     if (locations \u003d\u003d null || locations.isEmpty()) {\n       throw new IOException(\"Cannot get locations to create \" + src);\n     }\n \n     RemoteLocation createLocation \u003d locations.get(0);\n     if (locations.size() \u003e 1) {\n       try {\n         RemoteLocation existingLocation \u003d getExistingLocation(src, locations);\n         // Forward to the existing location and let the NN handle the error\n         if (existingLocation !\u003d null) {\n           LOG.debug(\"{} already exists in {}.\", src, existingLocation);\n           createLocation \u003d existingLocation;\n         }\n       } catch (FileNotFoundException fne) {\n         // Ignore if the file is not found\n-      } catch (IOException ioe) {\n-        if (RouterRpcClient.isUnavailableException(ioe)) {\n-          LOG.debug(\"Ignore unavailable exception: {}\", ioe);\n-        } else {\n-          throw ioe;\n-        }\n       }\n     }\n     return createLocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  RemoteLocation getCreateLocation(\n      final String src, final List\u003cRemoteLocation\u003e locations)\n      throws IOException {\n\n    if (locations \u003d\u003d null || locations.isEmpty()) {\n      throw new IOException(\"Cannot get locations to create \" + src);\n    }\n\n    RemoteLocation createLocation \u003d locations.get(0);\n    if (locations.size() \u003e 1) {\n      try {\n        RemoteLocation existingLocation \u003d getExistingLocation(src, locations);\n        // Forward to the existing location and let the NN handle the error\n        if (existingLocation !\u003d null) {\n          LOG.debug(\"{} already exists in {}.\", src, existingLocation);\n          createLocation \u003d existingLocation;\n        }\n      } catch (FileNotFoundException fne) {\n        // Ignore if the file is not found\n      }\n    }\n    return createLocation;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java",
      "extendedDetails": {}
    },
    "263413e83840c7795a988e3939cd292d020c8d5f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15112. RBF: Do not return FileNotFoundException when a subcluster is unavailable.\n",
      "commitDate": "16/01/20 10:39 AM",
      "commitName": "263413e83840c7795a988e3939cd292d020c8d5f",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "15/01/20 5:22 PM",
      "commitNameOld": "d7c4f8ab21c56a52afcfbd0a56d9120e61376d0c",
      "commitAuthorOld": "Chao Sun",
      "daysBetweenCommits": 0.72,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,29 @@\n   RemoteLocation getCreateLocation(\n       final String src, final List\u003cRemoteLocation\u003e locations)\n       throws IOException {\n \n     if (locations \u003d\u003d null || locations.isEmpty()) {\n       throw new IOException(\"Cannot get locations to create \" + src);\n     }\n \n     RemoteLocation createLocation \u003d locations.get(0);\n     if (locations.size() \u003e 1) {\n       try {\n         RemoteLocation existingLocation \u003d getExistingLocation(src, locations);\n         // Forward to the existing location and let the NN handle the error\n         if (existingLocation !\u003d null) {\n           LOG.debug(\"{} already exists in {}.\", src, existingLocation);\n           createLocation \u003d existingLocation;\n         }\n       } catch (FileNotFoundException fne) {\n         // Ignore if the file is not found\n+      } catch (IOException ioe) {\n+        if (RouterRpcClient.isUnavailableException(ioe)) {\n+          LOG.debug(\"Ignore unavailable exception: {}\", ioe);\n+        } else {\n+          throw ioe;\n+        }\n       }\n     }\n     return createLocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  RemoteLocation getCreateLocation(\n      final String src, final List\u003cRemoteLocation\u003e locations)\n      throws IOException {\n\n    if (locations \u003d\u003d null || locations.isEmpty()) {\n      throw new IOException(\"Cannot get locations to create \" + src);\n    }\n\n    RemoteLocation createLocation \u003d locations.get(0);\n    if (locations.size() \u003e 1) {\n      try {\n        RemoteLocation existingLocation \u003d getExistingLocation(src, locations);\n        // Forward to the existing location and let the NN handle the error\n        if (existingLocation !\u003d null) {\n          LOG.debug(\"{} already exists in {}.\", src, existingLocation);\n          createLocation \u003d existingLocation;\n        }\n      } catch (FileNotFoundException fne) {\n        // Ignore if the file is not found\n      } catch (IOException ioe) {\n        if (RouterRpcClient.isUnavailableException(ioe)) {\n          LOG.debug(\"Ignore unavailable exception: {}\", ioe);\n        } else {\n          throw ioe;\n        }\n      }\n    }\n    return createLocation;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java",
      "extendedDetails": {}
    },
    "8e4267650fe52eb6b6d4466fc006e7af4a1326d0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14440. RBF: Optimize the file write process in case of multiple destinations. Contributed by Ayush Saxena.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "8e4267650fe52eb6b6d4466fc006e7af4a1326d0",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "393f15176dfd1d2ab765f9aac897a1e35693d3cf",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,23 @@\n   RemoteLocation getCreateLocation(\n       final String src, final List\u003cRemoteLocation\u003e locations)\n       throws IOException {\n \n     if (locations \u003d\u003d null || locations.isEmpty()) {\n       throw new IOException(\"Cannot get locations to create \" + src);\n     }\n \n     RemoteLocation createLocation \u003d locations.get(0);\n     if (locations.size() \u003e 1) {\n       try {\n-        // Check if this file already exists in other subclusters\n-        LocatedBlocks existingLocation \u003d getBlockLocations(src, 0, 1);\n+        RemoteLocation existingLocation \u003d getExistingLocation(src, locations);\n+        // Forward to the existing location and let the NN handle the error\n         if (existingLocation !\u003d null) {\n-          // Forward to the existing location and let the NN handle the error\n-          LocatedBlock existingLocationLastLocatedBlock \u003d\n-              existingLocation.getLastLocatedBlock();\n-          if (existingLocationLastLocatedBlock \u003d\u003d null) {\n-            // The block has no blocks yet, check for the meta data\n-            for (RemoteLocation location : locations) {\n-              RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n-                  new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n-              if (rpcClient.invokeSingle(location, method) !\u003d null) {\n-                createLocation \u003d location;\n-                break;\n-              }\n-            }\n-          } else {\n-            ExtendedBlock existingLocationLastBlock \u003d\n-                existingLocationLastLocatedBlock.getBlock();\n-            String blockPoolId \u003d existingLocationLastBlock.getBlockPoolId();\n-            createLocation \u003d getLocationForPath(src, true, blockPoolId);\n-          }\n+          LOG.debug(\"{} already exists in {}.\", src, existingLocation);\n+          createLocation \u003d existingLocation;\n         }\n       } catch (FileNotFoundException fne) {\n         // Ignore if the file is not found\n       }\n     }\n     return createLocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  RemoteLocation getCreateLocation(\n      final String src, final List\u003cRemoteLocation\u003e locations)\n      throws IOException {\n\n    if (locations \u003d\u003d null || locations.isEmpty()) {\n      throw new IOException(\"Cannot get locations to create \" + src);\n    }\n\n    RemoteLocation createLocation \u003d locations.get(0);\n    if (locations.size() \u003e 1) {\n      try {\n        RemoteLocation existingLocation \u003d getExistingLocation(src, locations);\n        // Forward to the existing location and let the NN handle the error\n        if (existingLocation !\u003d null) {\n          LOG.debug(\"{} already exists in {}.\", src, existingLocation);\n          createLocation \u003d existingLocation;\n        }\n      } catch (FileNotFoundException fne) {\n        // Ignore if the file is not found\n      }\n    }\n    return createLocation;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java",
      "extendedDetails": {}
    },
    "6c42d4050461ab71c88f123569649793dc53aebd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-14316. RBF: Support unavailable subclusters for mount points with multiple destinations. Contributed by Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "6c42d4050461ab71c88f123569649793dc53aebd",
      "commitAuthor": "Ayush Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14316. RBF: Support unavailable subclusters for mount points with multiple destinations. Contributed by Inigo Goiri.\n",
          "commitDate": "24/06/19 9:33 AM",
          "commitName": "6c42d4050461ab71c88f123569649793dc53aebd",
          "commitAuthor": "Ayush Saxena",
          "commitDateOld": "24/06/19 9:33 AM",
          "commitNameOld": "0dbd87874a16403f537ef31f45ab0fe05924af6f",
          "commitAuthorOld": "Ayush Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  RemoteLocation getCreateLocation(final String src)\n+  RemoteLocation getCreateLocation(\n+      final String src, final List\u003cRemoteLocation\u003e locations)\n       throws IOException {\n \n-    final List\u003cRemoteLocation\u003e locations \u003d getLocationsForPath(src, true);\n     if (locations \u003d\u003d null || locations.isEmpty()) {\n       throw new IOException(\"Cannot get locations to create \" + src);\n     }\n \n     RemoteLocation createLocation \u003d locations.get(0);\n     if (locations.size() \u003e 1) {\n       try {\n         // Check if this file already exists in other subclusters\n         LocatedBlocks existingLocation \u003d getBlockLocations(src, 0, 1);\n         if (existingLocation !\u003d null) {\n           // Forward to the existing location and let the NN handle the error\n           LocatedBlock existingLocationLastLocatedBlock \u003d\n               existingLocation.getLastLocatedBlock();\n           if (existingLocationLastLocatedBlock \u003d\u003d null) {\n             // The block has no blocks yet, check for the meta data\n             for (RemoteLocation location : locations) {\n               RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n                   new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n               if (rpcClient.invokeSingle(location, method) !\u003d null) {\n                 createLocation \u003d location;\n                 break;\n               }\n             }\n           } else {\n             ExtendedBlock existingLocationLastBlock \u003d\n                 existingLocationLastLocatedBlock.getBlock();\n             String blockPoolId \u003d existingLocationLastBlock.getBlockPoolId();\n             createLocation \u003d getLocationForPath(src, true, blockPoolId);\n           }\n         }\n       } catch (FileNotFoundException fne) {\n         // Ignore if the file is not found\n       }\n     }\n     return createLocation;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  RemoteLocation getCreateLocation(\n      final String src, final List\u003cRemoteLocation\u003e locations)\n      throws IOException {\n\n    if (locations \u003d\u003d null || locations.isEmpty()) {\n      throw new IOException(\"Cannot get locations to create \" + src);\n    }\n\n    RemoteLocation createLocation \u003d locations.get(0);\n    if (locations.size() \u003e 1) {\n      try {\n        // Check if this file already exists in other subclusters\n        LocatedBlocks existingLocation \u003d getBlockLocations(src, 0, 1);\n        if (existingLocation !\u003d null) {\n          // Forward to the existing location and let the NN handle the error\n          LocatedBlock existingLocationLastLocatedBlock \u003d\n              existingLocation.getLastLocatedBlock();\n          if (existingLocationLastLocatedBlock \u003d\u003d null) {\n            // The block has no blocks yet, check for the meta data\n            for (RemoteLocation location : locations) {\n              RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n                  new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n              if (rpcClient.invokeSingle(location, method) !\u003d null) {\n                createLocation \u003d location;\n                break;\n              }\n            }\n          } else {\n            ExtendedBlock existingLocationLastBlock \u003d\n                existingLocationLastLocatedBlock.getBlock();\n            String blockPoolId \u003d existingLocationLastBlock.getBlockPoolId();\n            createLocation \u003d getLocationForPath(src, true, blockPoolId);\n          }\n        }\n      } catch (FileNotFoundException fne) {\n        // Ignore if the file is not found\n      }\n    }\n    return createLocation;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java",
          "extendedDetails": {
            "oldValue": "[src-String(modifiers-final)]",
            "newValue": "[src-String(modifiers-final), locations-List\u003cRemoteLocation\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14316. RBF: Support unavailable subclusters for mount points with multiple destinations. Contributed by Inigo Goiri.\n",
          "commitDate": "24/06/19 9:33 AM",
          "commitName": "6c42d4050461ab71c88f123569649793dc53aebd",
          "commitAuthor": "Ayush Saxena",
          "commitDateOld": "24/06/19 9:33 AM",
          "commitNameOld": "0dbd87874a16403f537ef31f45ab0fe05924af6f",
          "commitAuthorOld": "Ayush Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  RemoteLocation getCreateLocation(final String src)\n+  RemoteLocation getCreateLocation(\n+      final String src, final List\u003cRemoteLocation\u003e locations)\n       throws IOException {\n \n-    final List\u003cRemoteLocation\u003e locations \u003d getLocationsForPath(src, true);\n     if (locations \u003d\u003d null || locations.isEmpty()) {\n       throw new IOException(\"Cannot get locations to create \" + src);\n     }\n \n     RemoteLocation createLocation \u003d locations.get(0);\n     if (locations.size() \u003e 1) {\n       try {\n         // Check if this file already exists in other subclusters\n         LocatedBlocks existingLocation \u003d getBlockLocations(src, 0, 1);\n         if (existingLocation !\u003d null) {\n           // Forward to the existing location and let the NN handle the error\n           LocatedBlock existingLocationLastLocatedBlock \u003d\n               existingLocation.getLastLocatedBlock();\n           if (existingLocationLastLocatedBlock \u003d\u003d null) {\n             // The block has no blocks yet, check for the meta data\n             for (RemoteLocation location : locations) {\n               RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n                   new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n               if (rpcClient.invokeSingle(location, method) !\u003d null) {\n                 createLocation \u003d location;\n                 break;\n               }\n             }\n           } else {\n             ExtendedBlock existingLocationLastBlock \u003d\n                 existingLocationLastLocatedBlock.getBlock();\n             String blockPoolId \u003d existingLocationLastBlock.getBlockPoolId();\n             createLocation \u003d getLocationForPath(src, true, blockPoolId);\n           }\n         }\n       } catch (FileNotFoundException fne) {\n         // Ignore if the file is not found\n       }\n     }\n     return createLocation;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  RemoteLocation getCreateLocation(\n      final String src, final List\u003cRemoteLocation\u003e locations)\n      throws IOException {\n\n    if (locations \u003d\u003d null || locations.isEmpty()) {\n      throw new IOException(\"Cannot get locations to create \" + src);\n    }\n\n    RemoteLocation createLocation \u003d locations.get(0);\n    if (locations.size() \u003e 1) {\n      try {\n        // Check if this file already exists in other subclusters\n        LocatedBlocks existingLocation \u003d getBlockLocations(src, 0, 1);\n        if (existingLocation !\u003d null) {\n          // Forward to the existing location and let the NN handle the error\n          LocatedBlock existingLocationLastLocatedBlock \u003d\n              existingLocation.getLastLocatedBlock();\n          if (existingLocationLastLocatedBlock \u003d\u003d null) {\n            // The block has no blocks yet, check for the meta data\n            for (RemoteLocation location : locations) {\n              RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n                  new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n              if (rpcClient.invokeSingle(location, method) !\u003d null) {\n                createLocation \u003d location;\n                break;\n              }\n            }\n          } else {\n            ExtendedBlock existingLocationLastBlock \u003d\n                existingLocationLastLocatedBlock.getBlock();\n            String blockPoolId \u003d existingLocationLastBlock.getBlockPoolId();\n            createLocation \u003d getLocationForPath(src, true, blockPoolId);\n          }\n        }\n      } catch (FileNotFoundException fne) {\n        // Ignore if the file is not found\n      }\n    }\n    return createLocation;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "6425ed27ea638da75f656204d6df4adad1d91fe1": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-13790. RBF: Move ClientProtocol APIs to its own module. Contributed by Chao Sun.\n",
      "commitDate": "19/08/18 11:50 PM",
      "commitName": "6425ed27ea638da75f656204d6df4adad1d91fe1",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "17/08/18 8:01 AM",
      "commitNameOld": "fb5b3dce6192265bce9b9d93ab663bdc5be8048e",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 2.66,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n-  protected RemoteLocation getCreateLocation(final String src)\n+  RemoteLocation getCreateLocation(final String src)\n       throws IOException {\n \n     final List\u003cRemoteLocation\u003e locations \u003d getLocationsForPath(src, true);\n     if (locations \u003d\u003d null || locations.isEmpty()) {\n       throw new IOException(\"Cannot get locations to create \" + src);\n     }\n \n     RemoteLocation createLocation \u003d locations.get(0);\n     if (locations.size() \u003e 1) {\n       try {\n         // Check if this file already exists in other subclusters\n         LocatedBlocks existingLocation \u003d getBlockLocations(src, 0, 1);\n         if (existingLocation !\u003d null) {\n           // Forward to the existing location and let the NN handle the error\n           LocatedBlock existingLocationLastLocatedBlock \u003d\n               existingLocation.getLastLocatedBlock();\n           if (existingLocationLastLocatedBlock \u003d\u003d null) {\n             // The block has no blocks yet, check for the meta data\n             for (RemoteLocation location : locations) {\n               RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n                   new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n               if (rpcClient.invokeSingle(location, method) !\u003d null) {\n                 createLocation \u003d location;\n                 break;\n               }\n             }\n           } else {\n             ExtendedBlock existingLocationLastBlock \u003d\n                 existingLocationLastLocatedBlock.getBlock();\n             String blockPoolId \u003d existingLocationLastBlock.getBlockPoolId();\n             createLocation \u003d getLocationForPath(src, true, blockPoolId);\n           }\n         }\n       } catch (FileNotFoundException fne) {\n         // Ignore if the file is not found\n       }\n     }\n     return createLocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  RemoteLocation getCreateLocation(final String src)\n      throws IOException {\n\n    final List\u003cRemoteLocation\u003e locations \u003d getLocationsForPath(src, true);\n    if (locations \u003d\u003d null || locations.isEmpty()) {\n      throw new IOException(\"Cannot get locations to create \" + src);\n    }\n\n    RemoteLocation createLocation \u003d locations.get(0);\n    if (locations.size() \u003e 1) {\n      try {\n        // Check if this file already exists in other subclusters\n        LocatedBlocks existingLocation \u003d getBlockLocations(src, 0, 1);\n        if (existingLocation !\u003d null) {\n          // Forward to the existing location and let the NN handle the error\n          LocatedBlock existingLocationLastLocatedBlock \u003d\n              existingLocation.getLastLocatedBlock();\n          if (existingLocationLastLocatedBlock \u003d\u003d null) {\n            // The block has no blocks yet, check for the meta data\n            for (RemoteLocation location : locations) {\n              RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n                  new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n              if (rpcClient.invokeSingle(location, method) !\u003d null) {\n                createLocation \u003d location;\n                break;\n              }\n            }\n          } else {\n            ExtendedBlock existingLocationLastBlock \u003d\n                existingLocationLastLocatedBlock.getBlock();\n            String blockPoolId \u003d existingLocationLastBlock.getBlockPoolId();\n            createLocation \u003d getLocationForPath(src, true, blockPoolId);\n          }\n        }\n      } catch (FileNotFoundException fne) {\n        // Ignore if the file is not found\n      }\n    }\n    return createLocation;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java",
      "extendedDetails": {
        "oldValue": "[protected]",
        "newValue": "[]"
      }
    },
    "fb5b3dce6192265bce9b9d93ab663bdc5be8048e": {
      "type": "Ymodifierchange",
      "commitMessage": "Revert \"HDFS-13790. RBF: Move ClientProtocol APIs to its own module. Contributed by Chao Sun.\"\n\nThis reverts commit fa121eb66bc42e9cb5586f8c2e268cfdc2ed187a.\n",
      "commitDate": "17/08/18 8:01 AM",
      "commitName": "fb5b3dce6192265bce9b9d93ab663bdc5be8048e",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "17/08/18 2:52 AM",
      "commitNameOld": "fa121eb66bc42e9cb5586f8c2e268cfdc2ed187a",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n-  RemoteLocation getCreateLocation(final String src)\n+  protected RemoteLocation getCreateLocation(final String src)\n       throws IOException {\n \n     final List\u003cRemoteLocation\u003e locations \u003d getLocationsForPath(src, true);\n     if (locations \u003d\u003d null || locations.isEmpty()) {\n       throw new IOException(\"Cannot get locations to create \" + src);\n     }\n \n     RemoteLocation createLocation \u003d locations.get(0);\n     if (locations.size() \u003e 1) {\n       try {\n         // Check if this file already exists in other subclusters\n         LocatedBlocks existingLocation \u003d getBlockLocations(src, 0, 1);\n         if (existingLocation !\u003d null) {\n           // Forward to the existing location and let the NN handle the error\n           LocatedBlock existingLocationLastLocatedBlock \u003d\n               existingLocation.getLastLocatedBlock();\n           if (existingLocationLastLocatedBlock \u003d\u003d null) {\n             // The block has no blocks yet, check for the meta data\n             for (RemoteLocation location : locations) {\n               RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n                   new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n               if (rpcClient.invokeSingle(location, method) !\u003d null) {\n                 createLocation \u003d location;\n                 break;\n               }\n             }\n           } else {\n             ExtendedBlock existingLocationLastBlock \u003d\n                 existingLocationLastLocatedBlock.getBlock();\n             String blockPoolId \u003d existingLocationLastBlock.getBlockPoolId();\n             createLocation \u003d getLocationForPath(src, true, blockPoolId);\n           }\n         }\n       } catch (FileNotFoundException fne) {\n         // Ignore if the file is not found\n       }\n     }\n     return createLocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected RemoteLocation getCreateLocation(final String src)\n      throws IOException {\n\n    final List\u003cRemoteLocation\u003e locations \u003d getLocationsForPath(src, true);\n    if (locations \u003d\u003d null || locations.isEmpty()) {\n      throw new IOException(\"Cannot get locations to create \" + src);\n    }\n\n    RemoteLocation createLocation \u003d locations.get(0);\n    if (locations.size() \u003e 1) {\n      try {\n        // Check if this file already exists in other subclusters\n        LocatedBlocks existingLocation \u003d getBlockLocations(src, 0, 1);\n        if (existingLocation !\u003d null) {\n          // Forward to the existing location and let the NN handle the error\n          LocatedBlock existingLocationLastLocatedBlock \u003d\n              existingLocation.getLastLocatedBlock();\n          if (existingLocationLastLocatedBlock \u003d\u003d null) {\n            // The block has no blocks yet, check for the meta data\n            for (RemoteLocation location : locations) {\n              RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n                  new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n              if (rpcClient.invokeSingle(location, method) !\u003d null) {\n                createLocation \u003d location;\n                break;\n              }\n            }\n          } else {\n            ExtendedBlock existingLocationLastBlock \u003d\n                existingLocationLastLocatedBlock.getBlock();\n            String blockPoolId \u003d existingLocationLastBlock.getBlockPoolId();\n            createLocation \u003d getLocationForPath(src, true, blockPoolId);\n          }\n        }\n      } catch (FileNotFoundException fne) {\n        // Ignore if the file is not found\n      }\n    }\n    return createLocation;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[protected]"
      }
    },
    "fa121eb66bc42e9cb5586f8c2e268cfdc2ed187a": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-13790. RBF: Move ClientProtocol APIs to its own module. Contributed by Chao Sun.\n",
      "commitDate": "17/08/18 2:52 AM",
      "commitName": "fa121eb66bc42e9cb5586f8c2e268cfdc2ed187a",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "39ed3a66dbb01383ed16b141183fc48bfd2e613d",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 4.99,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n-  protected RemoteLocation getCreateLocation(final String src)\n+  RemoteLocation getCreateLocation(final String src)\n       throws IOException {\n \n     final List\u003cRemoteLocation\u003e locations \u003d getLocationsForPath(src, true);\n     if (locations \u003d\u003d null || locations.isEmpty()) {\n       throw new IOException(\"Cannot get locations to create \" + src);\n     }\n \n     RemoteLocation createLocation \u003d locations.get(0);\n     if (locations.size() \u003e 1) {\n       try {\n         // Check if this file already exists in other subclusters\n         LocatedBlocks existingLocation \u003d getBlockLocations(src, 0, 1);\n         if (existingLocation !\u003d null) {\n           // Forward to the existing location and let the NN handle the error\n           LocatedBlock existingLocationLastLocatedBlock \u003d\n               existingLocation.getLastLocatedBlock();\n           if (existingLocationLastLocatedBlock \u003d\u003d null) {\n             // The block has no blocks yet, check for the meta data\n             for (RemoteLocation location : locations) {\n               RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n                   new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n               if (rpcClient.invokeSingle(location, method) !\u003d null) {\n                 createLocation \u003d location;\n                 break;\n               }\n             }\n           } else {\n             ExtendedBlock existingLocationLastBlock \u003d\n                 existingLocationLastLocatedBlock.getBlock();\n             String blockPoolId \u003d existingLocationLastBlock.getBlockPoolId();\n             createLocation \u003d getLocationForPath(src, true, blockPoolId);\n           }\n         }\n       } catch (FileNotFoundException fne) {\n         // Ignore if the file is not found\n       }\n     }\n     return createLocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  RemoteLocation getCreateLocation(final String src)\n      throws IOException {\n\n    final List\u003cRemoteLocation\u003e locations \u003d getLocationsForPath(src, true);\n    if (locations \u003d\u003d null || locations.isEmpty()) {\n      throw new IOException(\"Cannot get locations to create \" + src);\n    }\n\n    RemoteLocation createLocation \u003d locations.get(0);\n    if (locations.size() \u003e 1) {\n      try {\n        // Check if this file already exists in other subclusters\n        LocatedBlocks existingLocation \u003d getBlockLocations(src, 0, 1);\n        if (existingLocation !\u003d null) {\n          // Forward to the existing location and let the NN handle the error\n          LocatedBlock existingLocationLastLocatedBlock \u003d\n              existingLocation.getLastLocatedBlock();\n          if (existingLocationLastLocatedBlock \u003d\u003d null) {\n            // The block has no blocks yet, check for the meta data\n            for (RemoteLocation location : locations) {\n              RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n                  new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n              if (rpcClient.invokeSingle(location, method) !\u003d null) {\n                createLocation \u003d location;\n                break;\n              }\n            }\n          } else {\n            ExtendedBlock existingLocationLastBlock \u003d\n                existingLocationLastLocatedBlock.getBlock();\n            String blockPoolId \u003d existingLocationLastBlock.getBlockPoolId();\n            createLocation \u003d getLocationForPath(src, true, blockPoolId);\n          }\n        }\n      } catch (FileNotFoundException fne) {\n        // Ignore if the file is not found\n      }\n    }\n    return createLocation;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java",
      "extendedDetails": {
        "oldValue": "[protected]",
        "newValue": "[]"
      }
    },
    "6e31a090842f8aeedb331b653b075499f8df6c60": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-12512. RBF: Add WebHDFS.\n",
      "commitDate": "23/03/18 8:32 AM",
      "commitName": "6e31a090842f8aeedb331b653b075499f8df6c60",
      "commitAuthor": "weiy",
      "commitDateOld": "20/03/18 8:32 PM",
      "commitNameOld": "2caba999bbb9d6e3ec56024a0a9d3d56a229edcf",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 2.5,
      "commitsBetweenForRepo": 156,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n-  private RemoteLocation getCreateLocation(final String src)\n+  protected RemoteLocation getCreateLocation(final String src)\n       throws IOException {\n \n     final List\u003cRemoteLocation\u003e locations \u003d getLocationsForPath(src, true);\n     if (locations \u003d\u003d null || locations.isEmpty()) {\n       throw new IOException(\"Cannot get locations to create \" + src);\n     }\n \n     RemoteLocation createLocation \u003d locations.get(0);\n     if (locations.size() \u003e 1) {\n       try {\n         // Check if this file already exists in other subclusters\n         LocatedBlocks existingLocation \u003d getBlockLocations(src, 0, 1);\n         if (existingLocation !\u003d null) {\n           // Forward to the existing location and let the NN handle the error\n           LocatedBlock existingLocationLastLocatedBlock \u003d\n               existingLocation.getLastLocatedBlock();\n           if (existingLocationLastLocatedBlock \u003d\u003d null) {\n             // The block has no blocks yet, check for the meta data\n             for (RemoteLocation location : locations) {\n               RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n                   new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n               if (rpcClient.invokeSingle(location, method) !\u003d null) {\n                 createLocation \u003d location;\n                 break;\n               }\n             }\n           } else {\n             ExtendedBlock existingLocationLastBlock \u003d\n                 existingLocationLastLocatedBlock.getBlock();\n             String blockPoolId \u003d existingLocationLastBlock.getBlockPoolId();\n             createLocation \u003d getLocationForPath(src, true, blockPoolId);\n           }\n         }\n       } catch (FileNotFoundException fne) {\n         // Ignore if the file is not found\n       }\n     }\n     return createLocation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected RemoteLocation getCreateLocation(final String src)\n      throws IOException {\n\n    final List\u003cRemoteLocation\u003e locations \u003d getLocationsForPath(src, true);\n    if (locations \u003d\u003d null || locations.isEmpty()) {\n      throw new IOException(\"Cannot get locations to create \" + src);\n    }\n\n    RemoteLocation createLocation \u003d locations.get(0);\n    if (locations.size() \u003e 1) {\n      try {\n        // Check if this file already exists in other subclusters\n        LocatedBlocks existingLocation \u003d getBlockLocations(src, 0, 1);\n        if (existingLocation !\u003d null) {\n          // Forward to the existing location and let the NN handle the error\n          LocatedBlock existingLocationLastLocatedBlock \u003d\n              existingLocation.getLastLocatedBlock();\n          if (existingLocationLastLocatedBlock \u003d\u003d null) {\n            // The block has no blocks yet, check for the meta data\n            for (RemoteLocation location : locations) {\n              RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n                  new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n              if (rpcClient.invokeSingle(location, method) !\u003d null) {\n                createLocation \u003d location;\n                break;\n              }\n            }\n          } else {\n            ExtendedBlock existingLocationLastBlock \u003d\n                existingLocationLastLocatedBlock.getBlock();\n            String blockPoolId \u003d existingLocationLastBlock.getBlockPoolId();\n            createLocation \u003d getLocationForPath(src, true, blockPoolId);\n          }\n        }\n      } catch (FileNotFoundException fne) {\n        // Ignore if the file is not found\n      }\n    }\n    return createLocation;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private RemoteLocation getCreateLocation(final String src)\n      throws IOException {\n\n    final List\u003cRemoteLocation\u003e locations \u003d getLocationsForPath(src, true);\n    if (locations \u003d\u003d null || locations.isEmpty()) {\n      throw new IOException(\"Cannot get locations to create \" + src);\n    }\n\n    RemoteLocation createLocation \u003d locations.get(0);\n    if (locations.size() \u003e 1) {\n      try {\n        // Check if this file already exists in other subclusters\n        LocatedBlocks existingLocation \u003d getBlockLocations(src, 0, 1);\n        if (existingLocation !\u003d null) {\n          // Forward to the existing location and let the NN handle the error\n          LocatedBlock existingLocationLastLocatedBlock \u003d\n              existingLocation.getLastLocatedBlock();\n          if (existingLocationLastLocatedBlock \u003d\u003d null) {\n            // The block has no blocks yet, check for the meta data\n            for (RemoteLocation location : locations) {\n              RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n                  new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n              if (rpcClient.invokeSingle(location, method) !\u003d null) {\n                createLocation \u003d location;\n                break;\n              }\n            }\n          } else {\n            ExtendedBlock existingLocationLastBlock \u003d\n                existingLocationLastLocatedBlock.getBlock();\n            String blockPoolId \u003d existingLocationLastBlock.getBlockPoolId();\n            createLocation \u003d getLocationForPath(src, true, blockPoolId);\n          }\n        }\n      } catch (FileNotFoundException fne) {\n        // Ignore if the file is not found\n      }\n    }\n    return createLocation;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java"
      }
    },
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11546. Federation Router RPC server. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 8a9cdebebf26841a0f1e99fb08135f4597f2eba2)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "ca4f209b49e3aad6a80306f7342c9b6b560a79a7",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,40 @@\n+  private RemoteLocation getCreateLocation(final String src)\n+      throws IOException {\n+\n+    final List\u003cRemoteLocation\u003e locations \u003d getLocationsForPath(src, true);\n+    if (locations \u003d\u003d null || locations.isEmpty()) {\n+      throw new IOException(\"Cannot get locations to create \" + src);\n+    }\n+\n+    RemoteLocation createLocation \u003d locations.get(0);\n+    if (locations.size() \u003e 1) {\n+      try {\n+        // Check if this file already exists in other subclusters\n+        LocatedBlocks existingLocation \u003d getBlockLocations(src, 0, 1);\n+        if (existingLocation !\u003d null) {\n+          // Forward to the existing location and let the NN handle the error\n+          LocatedBlock existingLocationLastLocatedBlock \u003d\n+              existingLocation.getLastLocatedBlock();\n+          if (existingLocationLastLocatedBlock \u003d\u003d null) {\n+            // The block has no blocks yet, check for the meta data\n+            for (RemoteLocation location : locations) {\n+              RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n+                  new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n+              if (rpcClient.invokeSingle(location, method) !\u003d null) {\n+                createLocation \u003d location;\n+                break;\n+              }\n+            }\n+          } else {\n+            ExtendedBlock existingLocationLastBlock \u003d\n+                existingLocationLastLocatedBlock.getBlock();\n+            String blockPoolId \u003d existingLocationLastBlock.getBlockPoolId();\n+            createLocation \u003d getLocationForPath(src, true, blockPoolId);\n+          }\n+        }\n+      } catch (FileNotFoundException fne) {\n+        // Ignore if the file is not found\n+      }\n+    }\n+    return createLocation;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private RemoteLocation getCreateLocation(final String src)\n      throws IOException {\n\n    final List\u003cRemoteLocation\u003e locations \u003d getLocationsForPath(src, true);\n    if (locations \u003d\u003d null || locations.isEmpty()) {\n      throw new IOException(\"Cannot get locations to create \" + src);\n    }\n\n    RemoteLocation createLocation \u003d locations.get(0);\n    if (locations.size() \u003e 1) {\n      try {\n        // Check if this file already exists in other subclusters\n        LocatedBlocks existingLocation \u003d getBlockLocations(src, 0, 1);\n        if (existingLocation !\u003d null) {\n          // Forward to the existing location and let the NN handle the error\n          LocatedBlock existingLocationLastLocatedBlock \u003d\n              existingLocation.getLastLocatedBlock();\n          if (existingLocationLastLocatedBlock \u003d\u003d null) {\n            // The block has no blocks yet, check for the meta data\n            for (RemoteLocation location : locations) {\n              RemoteMethod method \u003d new RemoteMethod(\"getFileInfo\",\n                  new Class\u003c?\u003e[] {String.class}, new RemoteParam());\n              if (rpcClient.invokeSingle(location, method) !\u003d null) {\n                createLocation \u003d location;\n                break;\n              }\n            }\n          } else {\n            ExtendedBlock existingLocationLastBlock \u003d\n                existingLocationLastLocatedBlock.getBlock();\n            String blockPoolId \u003d existingLocationLastBlock.getBlockPoolId();\n            createLocation \u003d getLocationForPath(src, true, blockPoolId);\n          }\n        }\n      } catch (FileNotFoundException fne) {\n        // Ignore if the file is not found\n      }\n    }\n    return createLocation;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java"
    }
  }
}