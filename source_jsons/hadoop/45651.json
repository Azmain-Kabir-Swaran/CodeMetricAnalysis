{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AggregatedLogFormat.java",
  "functionName": "readContainerLogsForALogType",
  "functionId": "readContainerLogsForALogType___valueStream-DataInputStream__out-PrintStream__logUploadedTime-long__logType-List__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
  "functionStartLine": 916,
  "functionEndLine": 921,
  "numCommitsSeen": 47,
  "timeTaken": 1681,
  "changeHistory": [
    "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
    "a77d628339afaf2f5a085c73fd81a805b18348c9"
  ],
  "changeHistoryShort": {
    "0bc05e40fa7e183efe8463ada459c621da3ce3bf": "Ybodychange",
    "a77d628339afaf2f5a085c73fd81a805b18348c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0bc05e40fa7e183efe8463ada459c621da3ce3bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5088. Improve \"yarn log\" command-line to read the last K bytes for the log files. Contributed by Xuan Gong\n",
      "commitDate": "01/06/16 1:44 PM",
      "commitName": "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
      "commitAuthor": "Xuan",
      "commitDateOld": "26/05/16 11:49 PM",
      "commitNameOld": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 5.58,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,6 @@\n     public static int readContainerLogsForALogType(\n         DataInputStream valueStream, PrintStream out, long logUploadedTime,\n         List\u003cString\u003e logType) throws IOException {\n-      byte[] buf \u003d new byte[65535];\n-\n-      String fileType \u003d valueStream.readUTF();\n-      String fileLengthStr \u003d valueStream.readUTF();\n-      long fileLength \u003d Long.parseLong(fileLengthStr);\n-      if (logType.contains(fileType)) {\n-        out.print(\"LogType:\");\n-        out.println(fileType);\n-        if (logUploadedTime !\u003d -1) {\n-          out.print(\"Log Upload Time:\");\n-          out.println(Times.format(logUploadedTime));\n-        }\n-        out.print(\"LogLength:\");\n-        out.println(fileLengthStr);\n-        out.println(\"Log Contents:\");\n-\n-        long curRead \u003d 0;\n-        long pendingRead \u003d fileLength - curRead;\n-        int toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n-        int len \u003d valueStream.read(buf, 0, toRead);\n-        while (len !\u003d -1 \u0026\u0026 curRead \u003c fileLength) {\n-          out.write(buf, 0, len);\n-          curRead +\u003d len;\n-\n-          pendingRead \u003d fileLength - curRead;\n-          toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n-          len \u003d valueStream.read(buf, 0, toRead);\n-        }\n-        out.println(\"End of LogType:\" + fileType);\n-        out.println(\"\");\n-        return 0;\n-      } else {\n-        long totalSkipped \u003d 0;\n-        long currSkipped \u003d 0;\n-        while (currSkipped !\u003d -1 \u0026\u0026 totalSkipped \u003c fileLength) {\n-          currSkipped \u003d valueStream.skip(fileLength - totalSkipped);\n-          totalSkipped +\u003d currSkipped;\n-        }\n-        return -1;\n-      }\n+      return readContainerLogsForALogType(valueStream, out, logUploadedTime,\n+          logType, Long.MAX_VALUE);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static int readContainerLogsForALogType(\n        DataInputStream valueStream, PrintStream out, long logUploadedTime,\n        List\u003cString\u003e logType) throws IOException {\n      return readContainerLogsForALogType(valueStream, out, logUploadedTime,\n          logType, Long.MAX_VALUE);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
      "extendedDetails": {}
    },
    "a77d628339afaf2f5a085c73fd81a805b18348c9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3347. Improve YARN log command to get AMContainer logs as well as running containers logs. Contributed by Xuan Gong.\n",
      "commitDate": "13/04/15 5:29 PM",
      "commitName": "a77d628339afaf2f5a085c73fd81a805b18348c9",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,44 @@\n+    public static int readContainerLogsForALogType(\n+        DataInputStream valueStream, PrintStream out, long logUploadedTime,\n+        List\u003cString\u003e logType) throws IOException {\n+      byte[] buf \u003d new byte[65535];\n+\n+      String fileType \u003d valueStream.readUTF();\n+      String fileLengthStr \u003d valueStream.readUTF();\n+      long fileLength \u003d Long.parseLong(fileLengthStr);\n+      if (logType.contains(fileType)) {\n+        out.print(\"LogType:\");\n+        out.println(fileType);\n+        if (logUploadedTime !\u003d -1) {\n+          out.print(\"Log Upload Time:\");\n+          out.println(Times.format(logUploadedTime));\n+        }\n+        out.print(\"LogLength:\");\n+        out.println(fileLengthStr);\n+        out.println(\"Log Contents:\");\n+\n+        long curRead \u003d 0;\n+        long pendingRead \u003d fileLength - curRead;\n+        int toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n+        int len \u003d valueStream.read(buf, 0, toRead);\n+        while (len !\u003d -1 \u0026\u0026 curRead \u003c fileLength) {\n+          out.write(buf, 0, len);\n+          curRead +\u003d len;\n+\n+          pendingRead \u003d fileLength - curRead;\n+          toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n+          len \u003d valueStream.read(buf, 0, toRead);\n+        }\n+        out.println(\"End of LogType:\" + fileType);\n+        out.println(\"\");\n+        return 0;\n+      } else {\n+        long totalSkipped \u003d 0;\n+        long currSkipped \u003d 0;\n+        while (currSkipped !\u003d -1 \u0026\u0026 totalSkipped \u003c fileLength) {\n+          currSkipped \u003d valueStream.skip(fileLength - totalSkipped);\n+          totalSkipped +\u003d currSkipped;\n+        }\n+        return -1;\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public static int readContainerLogsForALogType(\n        DataInputStream valueStream, PrintStream out, long logUploadedTime,\n        List\u003cString\u003e logType) throws IOException {\n      byte[] buf \u003d new byte[65535];\n\n      String fileType \u003d valueStream.readUTF();\n      String fileLengthStr \u003d valueStream.readUTF();\n      long fileLength \u003d Long.parseLong(fileLengthStr);\n      if (logType.contains(fileType)) {\n        out.print(\"LogType:\");\n        out.println(fileType);\n        if (logUploadedTime !\u003d -1) {\n          out.print(\"Log Upload Time:\");\n          out.println(Times.format(logUploadedTime));\n        }\n        out.print(\"LogLength:\");\n        out.println(fileLengthStr);\n        out.println(\"Log Contents:\");\n\n        long curRead \u003d 0;\n        long pendingRead \u003d fileLength - curRead;\n        int toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n        int len \u003d valueStream.read(buf, 0, toRead);\n        while (len !\u003d -1 \u0026\u0026 curRead \u003c fileLength) {\n          out.write(buf, 0, len);\n          curRead +\u003d len;\n\n          pendingRead \u003d fileLength - curRead;\n          toRead \u003d pendingRead \u003e buf.length ? buf.length : (int) pendingRead;\n          len \u003d valueStream.read(buf, 0, toRead);\n        }\n        out.println(\"End of LogType:\" + fileType);\n        out.println(\"\");\n        return 0;\n      } else {\n        long totalSkipped \u003d 0;\n        long currSkipped \u003d 0;\n        while (currSkipped !\u003d -1 \u0026\u0026 totalSkipped \u003c fileLength) {\n          currSkipped \u003d valueStream.skip(fileLength - totalSkipped);\n          totalSkipped +\u003d currSkipped;\n        }\n        return -1;\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java"
    }
  }
}