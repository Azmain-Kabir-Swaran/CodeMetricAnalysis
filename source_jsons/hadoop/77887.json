{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PathData.java",
  "functionName": "expandAsGlob",
  "functionId": "expandAsGlob___pattern-String__conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java",
  "functionStartLine": 349,
  "functionEndLine": 401,
  "numCommitsSeen": 35,
  "timeTaken": 1821,
  "changeHistory": [
    "e588ffe3c09c74c94eb6bfc3071310191fbf9e1f",
    "a3c4488efd3556cb9a14a520e2c06a9fa022ec29",
    "dffd37926d8cca10b12103ffbf83bd14518be63b",
    "bb86825d49897cf95551ef67371f13760f2900bf",
    "659ea4c540e440004d9f1a7dedefa91c0bec8b04",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "369a20391555f9c0ca9bd5384435be12770942aa",
    "99ebad8e757e90f6e036fc213d99f82dec7b80d7",
    "a65753ddac34a114c51cb0010ee39a9af48b4f9e"
  ],
  "changeHistoryShort": {
    "e588ffe3c09c74c94eb6bfc3071310191fbf9e1f": "Ybodychange",
    "a3c4488efd3556cb9a14a520e2c06a9fa022ec29": "Ybodychange",
    "dffd37926d8cca10b12103ffbf83bd14518be63b": "Ybodychange",
    "bb86825d49897cf95551ef67371f13760f2900bf": "Ybodychange",
    "659ea4c540e440004d9f1a7dedefa91c0bec8b04": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "369a20391555f9c0ca9bd5384435be12770942aa": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "99ebad8e757e90f6e036fc213d99f82dec7b80d7": "Ybodychange",
    "a65753ddac34a114c51cb0010ee39a9af48b4f9e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e588ffe3c09c74c94eb6bfc3071310191fbf9e1f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4329. DFSShell issues with directories with spaces in name (Cristina L. Abad via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1516904 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/08/13 8:48 AM",
      "commitName": "e588ffe3c09c74c94eb6bfc3071310191fbf9e1f",
      "commitAuthor": "Jonathan Turner Eagles",
      "commitDateOld": "07/03/13 1:32 PM",
      "commitNameOld": "a3c4488efd3556cb9a14a520e2c06a9fa022ec29",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 168.76,
      "commitsBetweenForRepo": 1050,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public static PathData[] expandAsGlob(String pattern, Configuration conf)\n   throws IOException {\n     Path globPath \u003d new Path(pattern);\n     FileSystem fs \u003d globPath.getFileSystem(conf);    \n     FileStatus[] stats \u003d fs.globStatus(globPath);\n     PathData[] items \u003d null;\n     \n     if (stats \u003d\u003d null) {\n       // remove any quoting in the glob pattern\n       pattern \u003d pattern.replaceAll(\"\\\\\\\\(.)\", \"$1\");\n       // not a glob \u0026 file not found, so add the path with a null stat\n       items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n     } else {\n       // figure out what type of glob path was given, will convert globbed\n       // paths to match the type to preserve relativity\n       PathType globType;\n       URI globUri \u003d globPath.toUri();\n       if (globUri.getScheme() !\u003d null) {\n         globType \u003d PathType.HAS_SCHEME;\n       } else if (!globUri.getPath().isEmpty() \u0026\u0026\n                  new Path(globUri.getPath()).isAbsolute()) {\n         globType \u003d PathType.SCHEMELESS_ABSOLUTE;\n       } else {\n         globType \u003d PathType.RELATIVE;\n       }\n \n       // convert stats to PathData\n       items \u003d new PathData[stats.length];\n       int i\u003d0;\n       for (FileStatus stat : stats) {\n         URI matchUri \u003d stat.getPath().toUri();\n         String globMatch \u003d null;\n         switch (globType) {\n           case HAS_SCHEME: // use as-is, but remove authority if necessary\n             if (globUri.getAuthority() \u003d\u003d null) {\n               matchUri \u003d removeAuthority(matchUri);\n             }\n-            globMatch \u003d matchUri.toString();\n+            globMatch \u003d uriToString(matchUri, false);\n             break;\n           case SCHEMELESS_ABSOLUTE: // take just the uri\u0027s path\n             globMatch \u003d matchUri.getPath();\n             break;\n           case RELATIVE: // make it relative to the current working dir\n             URI cwdUri \u003d fs.getWorkingDirectory().toUri();\n             globMatch \u003d relativize(cwdUri, matchUri, stat.isDirectory());\n             break;\n         }\n         items[i++] \u003d new PathData(fs, globMatch, stat);\n       }\n     }\n     Arrays.sort(items);\n     return items;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n  throws IOException {\n    Path globPath \u003d new Path(pattern);\n    FileSystem fs \u003d globPath.getFileSystem(conf);    \n    FileStatus[] stats \u003d fs.globStatus(globPath);\n    PathData[] items \u003d null;\n    \n    if (stats \u003d\u003d null) {\n      // remove any quoting in the glob pattern\n      pattern \u003d pattern.replaceAll(\"\\\\\\\\(.)\", \"$1\");\n      // not a glob \u0026 file not found, so add the path with a null stat\n      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n    } else {\n      // figure out what type of glob path was given, will convert globbed\n      // paths to match the type to preserve relativity\n      PathType globType;\n      URI globUri \u003d globPath.toUri();\n      if (globUri.getScheme() !\u003d null) {\n        globType \u003d PathType.HAS_SCHEME;\n      } else if (!globUri.getPath().isEmpty() \u0026\u0026\n                 new Path(globUri.getPath()).isAbsolute()) {\n        globType \u003d PathType.SCHEMELESS_ABSOLUTE;\n      } else {\n        globType \u003d PathType.RELATIVE;\n      }\n\n      // convert stats to PathData\n      items \u003d new PathData[stats.length];\n      int i\u003d0;\n      for (FileStatus stat : stats) {\n        URI matchUri \u003d stat.getPath().toUri();\n        String globMatch \u003d null;\n        switch (globType) {\n          case HAS_SCHEME: // use as-is, but remove authority if necessary\n            if (globUri.getAuthority() \u003d\u003d null) {\n              matchUri \u003d removeAuthority(matchUri);\n            }\n            globMatch \u003d uriToString(matchUri, false);\n            break;\n          case SCHEMELESS_ABSOLUTE: // take just the uri\u0027s path\n            globMatch \u003d matchUri.getPath();\n            break;\n          case RELATIVE: // make it relative to the current working dir\n            URI cwdUri \u003d fs.getWorkingDirectory().toUri();\n            globMatch \u003d relativize(cwdUri, matchUri, stat.isDirectory());\n            break;\n        }\n        items[i++] \u003d new PathData(fs, globMatch, stat);\n      }\n    }\n    Arrays.sort(items);\n    return items;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java",
      "extendedDetails": {}
    },
    "a3c4488efd3556cb9a14a520e2c06a9fa022ec29": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9364. PathData#expandAsGlob does not return correct results for absolute paths on Windows. Contributed by Ivan Mitic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1454108 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/03/13 1:32 PM",
      "commitName": "a3c4488efd3556cb9a14a520e2c06a9fa022ec29",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "06/03/13 11:15 AM",
      "commitNameOld": "638801cce16fc1dc3259c541dc30a599faaddda1",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 1.1,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n   public static PathData[] expandAsGlob(String pattern, Configuration conf)\n   throws IOException {\n     Path globPath \u003d new Path(pattern);\n     FileSystem fs \u003d globPath.getFileSystem(conf);    \n     FileStatus[] stats \u003d fs.globStatus(globPath);\n     PathData[] items \u003d null;\n     \n     if (stats \u003d\u003d null) {\n       // remove any quoting in the glob pattern\n       pattern \u003d pattern.replaceAll(\"\\\\\\\\(.)\", \"$1\");\n       // not a glob \u0026 file not found, so add the path with a null stat\n       items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n     } else {\n       // figure out what type of glob path was given, will convert globbed\n       // paths to match the type to preserve relativity\n       PathType globType;\n       URI globUri \u003d globPath.toUri();\n       if (globUri.getScheme() !\u003d null) {\n         globType \u003d PathType.HAS_SCHEME;\n-      } else if (new File(globUri.getPath()).isAbsolute()) {\n+      } else if (!globUri.getPath().isEmpty() \u0026\u0026\n+                 new Path(globUri.getPath()).isAbsolute()) {\n         globType \u003d PathType.SCHEMELESS_ABSOLUTE;\n       } else {\n         globType \u003d PathType.RELATIVE;\n       }\n \n       // convert stats to PathData\n       items \u003d new PathData[stats.length];\n       int i\u003d0;\n       for (FileStatus stat : stats) {\n         URI matchUri \u003d stat.getPath().toUri();\n         String globMatch \u003d null;\n         switch (globType) {\n           case HAS_SCHEME: // use as-is, but remove authority if necessary\n             if (globUri.getAuthority() \u003d\u003d null) {\n               matchUri \u003d removeAuthority(matchUri);\n             }\n             globMatch \u003d matchUri.toString();\n             break;\n           case SCHEMELESS_ABSOLUTE: // take just the uri\u0027s path\n             globMatch \u003d matchUri.getPath();\n             break;\n           case RELATIVE: // make it relative to the current working dir\n             URI cwdUri \u003d fs.getWorkingDirectory().toUri();\n             globMatch \u003d relativize(cwdUri, matchUri, stat.isDirectory());\n             break;\n         }\n         items[i++] \u003d new PathData(fs, globMatch, stat);\n       }\n     }\n     Arrays.sort(items);\n     return items;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n  throws IOException {\n    Path globPath \u003d new Path(pattern);\n    FileSystem fs \u003d globPath.getFileSystem(conf);    \n    FileStatus[] stats \u003d fs.globStatus(globPath);\n    PathData[] items \u003d null;\n    \n    if (stats \u003d\u003d null) {\n      // remove any quoting in the glob pattern\n      pattern \u003d pattern.replaceAll(\"\\\\\\\\(.)\", \"$1\");\n      // not a glob \u0026 file not found, so add the path with a null stat\n      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n    } else {\n      // figure out what type of glob path was given, will convert globbed\n      // paths to match the type to preserve relativity\n      PathType globType;\n      URI globUri \u003d globPath.toUri();\n      if (globUri.getScheme() !\u003d null) {\n        globType \u003d PathType.HAS_SCHEME;\n      } else if (!globUri.getPath().isEmpty() \u0026\u0026\n                 new Path(globUri.getPath()).isAbsolute()) {\n        globType \u003d PathType.SCHEMELESS_ABSOLUTE;\n      } else {\n        globType \u003d PathType.RELATIVE;\n      }\n\n      // convert stats to PathData\n      items \u003d new PathData[stats.length];\n      int i\u003d0;\n      for (FileStatus stat : stats) {\n        URI matchUri \u003d stat.getPath().toUri();\n        String globMatch \u003d null;\n        switch (globType) {\n          case HAS_SCHEME: // use as-is, but remove authority if necessary\n            if (globUri.getAuthority() \u003d\u003d null) {\n              matchUri \u003d removeAuthority(matchUri);\n            }\n            globMatch \u003d matchUri.toString();\n            break;\n          case SCHEMELESS_ABSOLUTE: // take just the uri\u0027s path\n            globMatch \u003d matchUri.getPath();\n            break;\n          case RELATIVE: // make it relative to the current working dir\n            URI cwdUri \u003d fs.getWorkingDirectory().toUri();\n            globMatch \u003d relativize(cwdUri, matchUri, stat.isDirectory());\n            break;\n        }\n        items[i++] \u003d new PathData(fs, globMatch, stat);\n      }\n    }\n    Arrays.sort(items);\n    return items;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java",
      "extendedDetails": {}
    },
    "dffd37926d8cca10b12103ffbf83bd14518be63b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8173. FsShell needs to handle quoted metachars.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1301250 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/03/12 3:36 PM",
      "commitName": "dffd37926d8cca10b12103ffbf83bd14518be63b",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "06/03/12 2:44 PM",
      "commitNameOld": "bb86825d49897cf95551ef67371f13760f2900bf",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 8.99,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,52 @@\n   public static PathData[] expandAsGlob(String pattern, Configuration conf)\n   throws IOException {\n     Path globPath \u003d new Path(pattern);\n     FileSystem fs \u003d globPath.getFileSystem(conf);    \n     FileStatus[] stats \u003d fs.globStatus(globPath);\n     PathData[] items \u003d null;\n     \n     if (stats \u003d\u003d null) {\n+      // remove any quoting in the glob pattern\n+      pattern \u003d pattern.replaceAll(\"\\\\\\\\(.)\", \"$1\");\n       // not a glob \u0026 file not found, so add the path with a null stat\n       items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n     } else {\n       // figure out what type of glob path was given, will convert globbed\n       // paths to match the type to preserve relativity\n       PathType globType;\n       URI globUri \u003d globPath.toUri();\n       if (globUri.getScheme() !\u003d null) {\n         globType \u003d PathType.HAS_SCHEME;\n       } else if (new File(globUri.getPath()).isAbsolute()) {\n         globType \u003d PathType.SCHEMELESS_ABSOLUTE;\n       } else {\n         globType \u003d PathType.RELATIVE;\n       }\n \n       // convert stats to PathData\n       items \u003d new PathData[stats.length];\n       int i\u003d0;\n       for (FileStatus stat : stats) {\n         URI matchUri \u003d stat.getPath().toUri();\n         String globMatch \u003d null;\n         switch (globType) {\n           case HAS_SCHEME: // use as-is, but remove authority if necessary\n             if (globUri.getAuthority() \u003d\u003d null) {\n               matchUri \u003d removeAuthority(matchUri);\n             }\n             globMatch \u003d matchUri.toString();\n             break;\n           case SCHEMELESS_ABSOLUTE: // take just the uri\u0027s path\n             globMatch \u003d matchUri.getPath();\n             break;\n           case RELATIVE: // make it relative to the current working dir\n             URI cwdUri \u003d fs.getWorkingDirectory().toUri();\n             globMatch \u003d relativize(cwdUri, matchUri, stat.isDirectory());\n             break;\n         }\n         items[i++] \u003d new PathData(fs, globMatch, stat);\n       }\n     }\n     Arrays.sort(items);\n     return items;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n  throws IOException {\n    Path globPath \u003d new Path(pattern);\n    FileSystem fs \u003d globPath.getFileSystem(conf);    \n    FileStatus[] stats \u003d fs.globStatus(globPath);\n    PathData[] items \u003d null;\n    \n    if (stats \u003d\u003d null) {\n      // remove any quoting in the glob pattern\n      pattern \u003d pattern.replaceAll(\"\\\\\\\\(.)\", \"$1\");\n      // not a glob \u0026 file not found, so add the path with a null stat\n      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n    } else {\n      // figure out what type of glob path was given, will convert globbed\n      // paths to match the type to preserve relativity\n      PathType globType;\n      URI globUri \u003d globPath.toUri();\n      if (globUri.getScheme() !\u003d null) {\n        globType \u003d PathType.HAS_SCHEME;\n      } else if (new File(globUri.getPath()).isAbsolute()) {\n        globType \u003d PathType.SCHEMELESS_ABSOLUTE;\n      } else {\n        globType \u003d PathType.RELATIVE;\n      }\n\n      // convert stats to PathData\n      items \u003d new PathData[stats.length];\n      int i\u003d0;\n      for (FileStatus stat : stats) {\n        URI matchUri \u003d stat.getPath().toUri();\n        String globMatch \u003d null;\n        switch (globType) {\n          case HAS_SCHEME: // use as-is, but remove authority if necessary\n            if (globUri.getAuthority() \u003d\u003d null) {\n              matchUri \u003d removeAuthority(matchUri);\n            }\n            globMatch \u003d matchUri.toString();\n            break;\n          case SCHEMELESS_ABSOLUTE: // take just the uri\u0027s path\n            globMatch \u003d matchUri.getPath();\n            break;\n          case RELATIVE: // make it relative to the current working dir\n            URI cwdUri \u003d fs.getWorkingDirectory().toUri();\n            globMatch \u003d relativize(cwdUri, matchUri, stat.isDirectory());\n            break;\n        }\n        items[i++] \u003d new PathData(fs, globMatch, stat);\n      }\n    }\n    Arrays.sort(items);\n    return items;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java",
      "extendedDetails": {}
    },
    "bb86825d49897cf95551ef67371f13760f2900bf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8140. dfs -getmerge should process its argments better (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1297771 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/12 2:44 PM",
      "commitName": "bb86825d49897cf95551ef67371f13760f2900bf",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "02/03/12 11:03 AM",
      "commitNameOld": "97d104767d57629290cdab74941862cc45f09ee5",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 4.15,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n   public static PathData[] expandAsGlob(String pattern, Configuration conf)\n   throws IOException {\n     Path globPath \u003d new Path(pattern);\n     FileSystem fs \u003d globPath.getFileSystem(conf);    \n     FileStatus[] stats \u003d fs.globStatus(globPath);\n     PathData[] items \u003d null;\n     \n     if (stats \u003d\u003d null) {\n       // not a glob \u0026 file not found, so add the path with a null stat\n       items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n     } else {\n       // figure out what type of glob path was given, will convert globbed\n       // paths to match the type to preserve relativity\n       PathType globType;\n       URI globUri \u003d globPath.toUri();\n       if (globUri.getScheme() !\u003d null) {\n         globType \u003d PathType.HAS_SCHEME;\n       } else if (new File(globUri.getPath()).isAbsolute()) {\n         globType \u003d PathType.SCHEMELESS_ABSOLUTE;\n       } else {\n         globType \u003d PathType.RELATIVE;\n       }\n \n       // convert stats to PathData\n       items \u003d new PathData[stats.length];\n       int i\u003d0;\n       for (FileStatus stat : stats) {\n         URI matchUri \u003d stat.getPath().toUri();\n         String globMatch \u003d null;\n         switch (globType) {\n           case HAS_SCHEME: // use as-is, but remove authority if necessary\n             if (globUri.getAuthority() \u003d\u003d null) {\n               matchUri \u003d removeAuthority(matchUri);\n             }\n             globMatch \u003d matchUri.toString();\n             break;\n           case SCHEMELESS_ABSOLUTE: // take just the uri\u0027s path\n             globMatch \u003d matchUri.getPath();\n             break;\n           case RELATIVE: // make it relative to the current working dir\n             URI cwdUri \u003d fs.getWorkingDirectory().toUri();\n             globMatch \u003d relativize(cwdUri, matchUri, stat.isDirectory());\n             break;\n         }\n         items[i++] \u003d new PathData(fs, globMatch, stat);\n       }\n     }\n+    Arrays.sort(items);\n     return items;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n  throws IOException {\n    Path globPath \u003d new Path(pattern);\n    FileSystem fs \u003d globPath.getFileSystem(conf);    \n    FileStatus[] stats \u003d fs.globStatus(globPath);\n    PathData[] items \u003d null;\n    \n    if (stats \u003d\u003d null) {\n      // not a glob \u0026 file not found, so add the path with a null stat\n      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n    } else {\n      // figure out what type of glob path was given, will convert globbed\n      // paths to match the type to preserve relativity\n      PathType globType;\n      URI globUri \u003d globPath.toUri();\n      if (globUri.getScheme() !\u003d null) {\n        globType \u003d PathType.HAS_SCHEME;\n      } else if (new File(globUri.getPath()).isAbsolute()) {\n        globType \u003d PathType.SCHEMELESS_ABSOLUTE;\n      } else {\n        globType \u003d PathType.RELATIVE;\n      }\n\n      // convert stats to PathData\n      items \u003d new PathData[stats.length];\n      int i\u003d0;\n      for (FileStatus stat : stats) {\n        URI matchUri \u003d stat.getPath().toUri();\n        String globMatch \u003d null;\n        switch (globType) {\n          case HAS_SCHEME: // use as-is, but remove authority if necessary\n            if (globUri.getAuthority() \u003d\u003d null) {\n              matchUri \u003d removeAuthority(matchUri);\n            }\n            globMatch \u003d matchUri.toString();\n            break;\n          case SCHEMELESS_ABSOLUTE: // take just the uri\u0027s path\n            globMatch \u003d matchUri.getPath();\n            break;\n          case RELATIVE: // make it relative to the current working dir\n            URI cwdUri \u003d fs.getWorkingDirectory().toUri();\n            globMatch \u003d relativize(cwdUri, matchUri, stat.isDirectory());\n            break;\n        }\n        items[i++] \u003d new PathData(fs, globMatch, stat);\n      }\n    }\n    Arrays.sort(items);\n    return items;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java",
      "extendedDetails": {}
    },
    "659ea4c540e440004d9f1a7dedefa91c0bec8b04": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7360. Preserve relative paths that do not contain globs in FsShell.  Contributed by Daryn Sharp and Kihwal Lee \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190109 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 6:13 PM",
      "commitName": "659ea4c540e440004d9f1a7dedefa91c0bec8b04",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 64.04,
      "commitsBetweenForRepo": 467,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,49 @@\n   public static PathData[] expandAsGlob(String pattern, Configuration conf)\n   throws IOException {\n     Path globPath \u003d new Path(pattern);\n     FileSystem fs \u003d globPath.getFileSystem(conf);    \n     FileStatus[] stats \u003d fs.globStatus(globPath);\n     PathData[] items \u003d null;\n     \n     if (stats \u003d\u003d null) {\n       // not a glob \u0026 file not found, so add the path with a null stat\n       items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n-    } else if (\n-        // this is very ugly, but needed to avoid breaking hdfs tests...\n-        // if a path has no authority, then the FileStatus from globStatus\n-        // will add the \"-fs\" authority into the path, so we need to sub\n-        // it back out to satisfy the tests\n-        stats.length \u003d\u003d 1\n-        \u0026\u0026\n-        stats[0].getPath().equals(fs.makeQualified(globPath)))\n-    {\n-      // if the fq path is identical to the pattern passed, use the pattern\n-      // to initialize the string value\n-      items \u003d new PathData[]{ new PathData(fs, pattern, stats[0]) };\n     } else {\n+      // figure out what type of glob path was given, will convert globbed\n+      // paths to match the type to preserve relativity\n+      PathType globType;\n+      URI globUri \u003d globPath.toUri();\n+      if (globUri.getScheme() !\u003d null) {\n+        globType \u003d PathType.HAS_SCHEME;\n+      } else if (new File(globUri.getPath()).isAbsolute()) {\n+        globType \u003d PathType.SCHEMELESS_ABSOLUTE;\n+      } else {\n+        globType \u003d PathType.RELATIVE;\n+      }\n+\n       // convert stats to PathData\n       items \u003d new PathData[stats.length];\n       int i\u003d0;\n       for (FileStatus stat : stats) {\n-        items[i++] \u003d new PathData(fs, stat);\n+        URI matchUri \u003d stat.getPath().toUri();\n+        String globMatch \u003d null;\n+        switch (globType) {\n+          case HAS_SCHEME: // use as-is, but remove authority if necessary\n+            if (globUri.getAuthority() \u003d\u003d null) {\n+              matchUri \u003d removeAuthority(matchUri);\n+            }\n+            globMatch \u003d matchUri.toString();\n+            break;\n+          case SCHEMELESS_ABSOLUTE: // take just the uri\u0027s path\n+            globMatch \u003d matchUri.getPath();\n+            break;\n+          case RELATIVE: // make it relative to the current working dir\n+            URI cwdUri \u003d fs.getWorkingDirectory().toUri();\n+            globMatch \u003d relativize(cwdUri, matchUri, stat.isDirectory());\n+            break;\n+        }\n+        items[i++] \u003d new PathData(fs, globMatch, stat);\n       }\n     }\n     return items;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n  throws IOException {\n    Path globPath \u003d new Path(pattern);\n    FileSystem fs \u003d globPath.getFileSystem(conf);    \n    FileStatus[] stats \u003d fs.globStatus(globPath);\n    PathData[] items \u003d null;\n    \n    if (stats \u003d\u003d null) {\n      // not a glob \u0026 file not found, so add the path with a null stat\n      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n    } else {\n      // figure out what type of glob path was given, will convert globbed\n      // paths to match the type to preserve relativity\n      PathType globType;\n      URI globUri \u003d globPath.toUri();\n      if (globUri.getScheme() !\u003d null) {\n        globType \u003d PathType.HAS_SCHEME;\n      } else if (new File(globUri.getPath()).isAbsolute()) {\n        globType \u003d PathType.SCHEMELESS_ABSOLUTE;\n      } else {\n        globType \u003d PathType.RELATIVE;\n      }\n\n      // convert stats to PathData\n      items \u003d new PathData[stats.length];\n      int i\u003d0;\n      for (FileStatus stat : stats) {\n        URI matchUri \u003d stat.getPath().toUri();\n        String globMatch \u003d null;\n        switch (globType) {\n          case HAS_SCHEME: // use as-is, but remove authority if necessary\n            if (globUri.getAuthority() \u003d\u003d null) {\n              matchUri \u003d removeAuthority(matchUri);\n            }\n            globMatch \u003d matchUri.toString();\n            break;\n          case SCHEMELESS_ABSOLUTE: // take just the uri\u0027s path\n            globMatch \u003d matchUri.getPath();\n            break;\n          case RELATIVE: // make it relative to the current working dir\n            URI cwdUri \u003d fs.getWorkingDirectory().toUri();\n            globMatch \u003d relativize(cwdUri, matchUri, stat.isDirectory());\n            break;\n        }\n        items[i++] \u003d new PathData(fs, globMatch, stat);\n      }\n    }\n    return items;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n  throws IOException {\n    Path globPath \u003d new Path(pattern);\n    FileSystem fs \u003d globPath.getFileSystem(conf);    \n    FileStatus[] stats \u003d fs.globStatus(globPath);\n    PathData[] items \u003d null;\n    \n    if (stats \u003d\u003d null) {\n      // not a glob \u0026 file not found, so add the path with a null stat\n      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n    } else if (\n        // this is very ugly, but needed to avoid breaking hdfs tests...\n        // if a path has no authority, then the FileStatus from globStatus\n        // will add the \"-fs\" authority into the path, so we need to sub\n        // it back out to satisfy the tests\n        stats.length \u003d\u003d 1\n        \u0026\u0026\n        stats[0].getPath().equals(fs.makeQualified(globPath)))\n    {\n      // if the fq path is identical to the pattern passed, use the pattern\n      // to initialize the string value\n      items \u003d new PathData[]{ new PathData(fs, pattern, stats[0]) };\n    } else {\n      // convert stats to PathData\n      items \u003d new PathData[stats.length];\n      int i\u003d0;\n      for (FileStatus stat : stats) {\n        items[i++] \u003d new PathData(fs, stat);\n      }\n    }\n    return items;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n  throws IOException {\n    Path globPath \u003d new Path(pattern);\n    FileSystem fs \u003d globPath.getFileSystem(conf);    \n    FileStatus[] stats \u003d fs.globStatus(globPath);\n    PathData[] items \u003d null;\n    \n    if (stats \u003d\u003d null) {\n      // not a glob \u0026 file not found, so add the path with a null stat\n      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n    } else if (\n        // this is very ugly, but needed to avoid breaking hdfs tests...\n        // if a path has no authority, then the FileStatus from globStatus\n        // will add the \"-fs\" authority into the path, so we need to sub\n        // it back out to satisfy the tests\n        stats.length \u003d\u003d 1\n        \u0026\u0026\n        stats[0].getPath().equals(fs.makeQualified(globPath)))\n    {\n      // if the fq path is identical to the pattern passed, use the pattern\n      // to initialize the string value\n      items \u003d new PathData[]{ new PathData(fs, pattern, stats[0]) };\n    } else {\n      // convert stats to PathData\n      items \u003d new PathData[stats.length];\n      int i\u003d0;\n      for (FileStatus stat : stats) {\n        items[i++] \u003d new PathData(fs, stat);\n      }\n    }\n    return items;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/shell/PathData.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/PathData.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n  throws IOException {\n    Path globPath \u003d new Path(pattern);\n    FileSystem fs \u003d globPath.getFileSystem(conf);    \n    FileStatus[] stats \u003d fs.globStatus(globPath);\n    PathData[] items \u003d null;\n    \n    if (stats \u003d\u003d null) {\n      // not a glob \u0026 file not found, so add the path with a null stat\n      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n    } else if (\n        // this is very ugly, but needed to avoid breaking hdfs tests...\n        // if a path has no authority, then the FileStatus from globStatus\n        // will add the \"-fs\" authority into the path, so we need to sub\n        // it back out to satisfy the tests\n        stats.length \u003d\u003d 1\n        \u0026\u0026\n        stats[0].getPath().equals(fs.makeQualified(globPath)))\n    {\n      // if the fq path is identical to the pattern passed, use the pattern\n      // to initialize the string value\n      items \u003d new PathData[]{ new PathData(fs, pattern, stats[0]) };\n    } else {\n      // convert stats to PathData\n      items \u003d new PathData[stats.length];\n      int i\u003d0;\n      for (FileStatus stat : stats) {\n        items[i++] \u003d new PathData(fs, stat);\n      }\n    }\n    return items;\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/shell/PathData.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/shell/PathData.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/shell/PathData.java"
      }
    },
    "369a20391555f9c0ca9bd5384435be12770942aa": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "HADOOP-7236. Refactor the mkdir command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099612 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/11 2:34 PM",
      "commitName": "369a20391555f9c0ca9bd5384435be12770942aa",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-7236. Refactor the mkdir command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099612 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/11 2:34 PM",
          "commitName": "369a20391555f9c0ca9bd5384435be12770942aa",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "03/05/11 3:16 PM",
          "commitNameOld": "78a7b9768dcde23face399d9924f6168e4b1c1a8",
          "commitAuthorOld": "Jitendra Nath Pandey",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,32 @@\n-  protected List\u003cPathData\u003e expandGlob(String pattern) throws IOException {\n-    Path path \u003d new Path(pattern);\n-    FileSystem fs \u003d path.getFileSystem(getConf());\n-    FileStatus[] stats \u003d fs.globStatus(path);\n+  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n+  throws IOException {\n+    Path globPath \u003d new Path(pattern);\n+    FileSystem fs \u003d globPath.getFileSystem(conf);    \n+    FileStatus[] stats \u003d fs.globStatus(globPath);\n+    PathData[] items \u003d null;\n     \n-    if (stats !\u003d null \u0026\u0026 stats.length \u003d\u003d 0) { // glob failed to match\n-      // TODO: this should be more posix-like: ex. \"No such file or directory\"\n-      throw new FileNotFoundException(getFnfText(path));\n-    }\n-    \n-    List\u003cPathData\u003e items \u003d new LinkedList\u003cPathData\u003e();\n-    if (stats \u003d\u003d null) { // not a glob \u0026 file not found, so null stat block\n-      items.add(new PathData(fs, path, null));\n+    if (stats \u003d\u003d null) {\n+      // not a glob \u0026 file not found, so add the path with a null stat\n+      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n+    } else if (\n+        // this is very ugly, but needed to avoid breaking hdfs tests...\n+        // if a path has no authority, then the FileStatus from globStatus\n+        // will add the \"-fs\" authority into the path, so we need to sub\n+        // it back out to satisfy the tests\n+        stats.length \u003d\u003d 1\n+        \u0026\u0026\n+        stats[0].getPath().equals(fs.makeQualified(globPath)))\n+    {\n+      // if the fq path is identical to the pattern passed, use the pattern\n+      // to initialize the string value\n+      items \u003d new PathData[]{ new PathData(fs, pattern, stats[0]) };\n     } else {\n-      // convert all the stats to PathData objs\n+      // convert stats to PathData\n+      items \u003d new PathData[stats.length];\n+      int i\u003d0;\n       for (FileStatus stat : stats) {\n-        items.add(new PathData(fs, stat));\n+        items[i++] \u003d new PathData(fs, stat);\n       }\n     }\n     return items;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n  throws IOException {\n    Path globPath \u003d new Path(pattern);\n    FileSystem fs \u003d globPath.getFileSystem(conf);    \n    FileStatus[] stats \u003d fs.globStatus(globPath);\n    PathData[] items \u003d null;\n    \n    if (stats \u003d\u003d null) {\n      // not a glob \u0026 file not found, so add the path with a null stat\n      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n    } else if (\n        // this is very ugly, but needed to avoid breaking hdfs tests...\n        // if a path has no authority, then the FileStatus from globStatus\n        // will add the \"-fs\" authority into the path, so we need to sub\n        // it back out to satisfy the tests\n        stats.length \u003d\u003d 1\n        \u0026\u0026\n        stats[0].getPath().equals(fs.makeQualified(globPath)))\n    {\n      // if the fq path is identical to the pattern passed, use the pattern\n      // to initialize the string value\n      items \u003d new PathData[]{ new PathData(fs, pattern, stats[0]) };\n    } else {\n      // convert stats to PathData\n      items \u003d new PathData[stats.length];\n      int i\u003d0;\n      for (FileStatus stat : stats) {\n        items[i++] \u003d new PathData(fs, stat);\n      }\n    }\n    return items;\n  }",
          "path": "src/java/org/apache/hadoop/fs/shell/PathData.java",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/hadoop/fs/shell/Command.java",
            "newPath": "src/java/org/apache/hadoop/fs/shell/PathData.java",
            "oldMethodName": "expandGlob",
            "newMethodName": "expandAsGlob"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-7236. Refactor the mkdir command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099612 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/11 2:34 PM",
          "commitName": "369a20391555f9c0ca9bd5384435be12770942aa",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "03/05/11 3:16 PM",
          "commitNameOld": "78a7b9768dcde23face399d9924f6168e4b1c1a8",
          "commitAuthorOld": "Jitendra Nath Pandey",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,32 @@\n-  protected List\u003cPathData\u003e expandGlob(String pattern) throws IOException {\n-    Path path \u003d new Path(pattern);\n-    FileSystem fs \u003d path.getFileSystem(getConf());\n-    FileStatus[] stats \u003d fs.globStatus(path);\n+  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n+  throws IOException {\n+    Path globPath \u003d new Path(pattern);\n+    FileSystem fs \u003d globPath.getFileSystem(conf);    \n+    FileStatus[] stats \u003d fs.globStatus(globPath);\n+    PathData[] items \u003d null;\n     \n-    if (stats !\u003d null \u0026\u0026 stats.length \u003d\u003d 0) { // glob failed to match\n-      // TODO: this should be more posix-like: ex. \"No such file or directory\"\n-      throw new FileNotFoundException(getFnfText(path));\n-    }\n-    \n-    List\u003cPathData\u003e items \u003d new LinkedList\u003cPathData\u003e();\n-    if (stats \u003d\u003d null) { // not a glob \u0026 file not found, so null stat block\n-      items.add(new PathData(fs, path, null));\n+    if (stats \u003d\u003d null) {\n+      // not a glob \u0026 file not found, so add the path with a null stat\n+      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n+    } else if (\n+        // this is very ugly, but needed to avoid breaking hdfs tests...\n+        // if a path has no authority, then the FileStatus from globStatus\n+        // will add the \"-fs\" authority into the path, so we need to sub\n+        // it back out to satisfy the tests\n+        stats.length \u003d\u003d 1\n+        \u0026\u0026\n+        stats[0].getPath().equals(fs.makeQualified(globPath)))\n+    {\n+      // if the fq path is identical to the pattern passed, use the pattern\n+      // to initialize the string value\n+      items \u003d new PathData[]{ new PathData(fs, pattern, stats[0]) };\n     } else {\n-      // convert all the stats to PathData objs\n+      // convert stats to PathData\n+      items \u003d new PathData[stats.length];\n+      int i\u003d0;\n       for (FileStatus stat : stats) {\n-        items.add(new PathData(fs, stat));\n+        items[i++] \u003d new PathData(fs, stat);\n       }\n     }\n     return items;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n  throws IOException {\n    Path globPath \u003d new Path(pattern);\n    FileSystem fs \u003d globPath.getFileSystem(conf);    \n    FileStatus[] stats \u003d fs.globStatus(globPath);\n    PathData[] items \u003d null;\n    \n    if (stats \u003d\u003d null) {\n      // not a glob \u0026 file not found, so add the path with a null stat\n      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n    } else if (\n        // this is very ugly, but needed to avoid breaking hdfs tests...\n        // if a path has no authority, then the FileStatus from globStatus\n        // will add the \"-fs\" authority into the path, so we need to sub\n        // it back out to satisfy the tests\n        stats.length \u003d\u003d 1\n        \u0026\u0026\n        stats[0].getPath().equals(fs.makeQualified(globPath)))\n    {\n      // if the fq path is identical to the pattern passed, use the pattern\n      // to initialize the string value\n      items \u003d new PathData[]{ new PathData(fs, pattern, stats[0]) };\n    } else {\n      // convert stats to PathData\n      items \u003d new PathData[stats.length];\n      int i\u003d0;\n      for (FileStatus stat : stats) {\n        items[i++] \u003d new PathData(fs, stat);\n      }\n    }\n    return items;\n  }",
          "path": "src/java/org/apache/hadoop/fs/shell/PathData.java",
          "extendedDetails": {
            "oldValue": "List\u003cPathData\u003e",
            "newValue": "PathData[]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-7236. Refactor the mkdir command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099612 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/11 2:34 PM",
          "commitName": "369a20391555f9c0ca9bd5384435be12770942aa",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "03/05/11 3:16 PM",
          "commitNameOld": "78a7b9768dcde23face399d9924f6168e4b1c1a8",
          "commitAuthorOld": "Jitendra Nath Pandey",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,32 @@\n-  protected List\u003cPathData\u003e expandGlob(String pattern) throws IOException {\n-    Path path \u003d new Path(pattern);\n-    FileSystem fs \u003d path.getFileSystem(getConf());\n-    FileStatus[] stats \u003d fs.globStatus(path);\n+  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n+  throws IOException {\n+    Path globPath \u003d new Path(pattern);\n+    FileSystem fs \u003d globPath.getFileSystem(conf);    \n+    FileStatus[] stats \u003d fs.globStatus(globPath);\n+    PathData[] items \u003d null;\n     \n-    if (stats !\u003d null \u0026\u0026 stats.length \u003d\u003d 0) { // glob failed to match\n-      // TODO: this should be more posix-like: ex. \"No such file or directory\"\n-      throw new FileNotFoundException(getFnfText(path));\n-    }\n-    \n-    List\u003cPathData\u003e items \u003d new LinkedList\u003cPathData\u003e();\n-    if (stats \u003d\u003d null) { // not a glob \u0026 file not found, so null stat block\n-      items.add(new PathData(fs, path, null));\n+    if (stats \u003d\u003d null) {\n+      // not a glob \u0026 file not found, so add the path with a null stat\n+      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n+    } else if (\n+        // this is very ugly, but needed to avoid breaking hdfs tests...\n+        // if a path has no authority, then the FileStatus from globStatus\n+        // will add the \"-fs\" authority into the path, so we need to sub\n+        // it back out to satisfy the tests\n+        stats.length \u003d\u003d 1\n+        \u0026\u0026\n+        stats[0].getPath().equals(fs.makeQualified(globPath)))\n+    {\n+      // if the fq path is identical to the pattern passed, use the pattern\n+      // to initialize the string value\n+      items \u003d new PathData[]{ new PathData(fs, pattern, stats[0]) };\n     } else {\n-      // convert all the stats to PathData objs\n+      // convert stats to PathData\n+      items \u003d new PathData[stats.length];\n+      int i\u003d0;\n       for (FileStatus stat : stats) {\n-        items.add(new PathData(fs, stat));\n+        items[i++] \u003d new PathData(fs, stat);\n       }\n     }\n     return items;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n  throws IOException {\n    Path globPath \u003d new Path(pattern);\n    FileSystem fs \u003d globPath.getFileSystem(conf);    \n    FileStatus[] stats \u003d fs.globStatus(globPath);\n    PathData[] items \u003d null;\n    \n    if (stats \u003d\u003d null) {\n      // not a glob \u0026 file not found, so add the path with a null stat\n      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n    } else if (\n        // this is very ugly, but needed to avoid breaking hdfs tests...\n        // if a path has no authority, then the FileStatus from globStatus\n        // will add the \"-fs\" authority into the path, so we need to sub\n        // it back out to satisfy the tests\n        stats.length \u003d\u003d 1\n        \u0026\u0026\n        stats[0].getPath().equals(fs.makeQualified(globPath)))\n    {\n      // if the fq path is identical to the pattern passed, use the pattern\n      // to initialize the string value\n      items \u003d new PathData[]{ new PathData(fs, pattern, stats[0]) };\n    } else {\n      // convert stats to PathData\n      items \u003d new PathData[stats.length];\n      int i\u003d0;\n      for (FileStatus stat : stats) {\n        items[i++] \u003d new PathData(fs, stat);\n      }\n    }\n    return items;\n  }",
          "path": "src/java/org/apache/hadoop/fs/shell/PathData.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-7236. Refactor the mkdir command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099612 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/11 2:34 PM",
          "commitName": "369a20391555f9c0ca9bd5384435be12770942aa",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "03/05/11 3:16 PM",
          "commitNameOld": "78a7b9768dcde23face399d9924f6168e4b1c1a8",
          "commitAuthorOld": "Jitendra Nath Pandey",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,32 @@\n-  protected List\u003cPathData\u003e expandGlob(String pattern) throws IOException {\n-    Path path \u003d new Path(pattern);\n-    FileSystem fs \u003d path.getFileSystem(getConf());\n-    FileStatus[] stats \u003d fs.globStatus(path);\n+  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n+  throws IOException {\n+    Path globPath \u003d new Path(pattern);\n+    FileSystem fs \u003d globPath.getFileSystem(conf);    \n+    FileStatus[] stats \u003d fs.globStatus(globPath);\n+    PathData[] items \u003d null;\n     \n-    if (stats !\u003d null \u0026\u0026 stats.length \u003d\u003d 0) { // glob failed to match\n-      // TODO: this should be more posix-like: ex. \"No such file or directory\"\n-      throw new FileNotFoundException(getFnfText(path));\n-    }\n-    \n-    List\u003cPathData\u003e items \u003d new LinkedList\u003cPathData\u003e();\n-    if (stats \u003d\u003d null) { // not a glob \u0026 file not found, so null stat block\n-      items.add(new PathData(fs, path, null));\n+    if (stats \u003d\u003d null) {\n+      // not a glob \u0026 file not found, so add the path with a null stat\n+      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n+    } else if (\n+        // this is very ugly, but needed to avoid breaking hdfs tests...\n+        // if a path has no authority, then the FileStatus from globStatus\n+        // will add the \"-fs\" authority into the path, so we need to sub\n+        // it back out to satisfy the tests\n+        stats.length \u003d\u003d 1\n+        \u0026\u0026\n+        stats[0].getPath().equals(fs.makeQualified(globPath)))\n+    {\n+      // if the fq path is identical to the pattern passed, use the pattern\n+      // to initialize the string value\n+      items \u003d new PathData[]{ new PathData(fs, pattern, stats[0]) };\n     } else {\n-      // convert all the stats to PathData objs\n+      // convert stats to PathData\n+      items \u003d new PathData[stats.length];\n+      int i\u003d0;\n       for (FileStatus stat : stats) {\n-        items.add(new PathData(fs, stat));\n+        items[i++] \u003d new PathData(fs, stat);\n       }\n     }\n     return items;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n  throws IOException {\n    Path globPath \u003d new Path(pattern);\n    FileSystem fs \u003d globPath.getFileSystem(conf);    \n    FileStatus[] stats \u003d fs.globStatus(globPath);\n    PathData[] items \u003d null;\n    \n    if (stats \u003d\u003d null) {\n      // not a glob \u0026 file not found, so add the path with a null stat\n      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n    } else if (\n        // this is very ugly, but needed to avoid breaking hdfs tests...\n        // if a path has no authority, then the FileStatus from globStatus\n        // will add the \"-fs\" authority into the path, so we need to sub\n        // it back out to satisfy the tests\n        stats.length \u003d\u003d 1\n        \u0026\u0026\n        stats[0].getPath().equals(fs.makeQualified(globPath)))\n    {\n      // if the fq path is identical to the pattern passed, use the pattern\n      // to initialize the string value\n      items \u003d new PathData[]{ new PathData(fs, pattern, stats[0]) };\n    } else {\n      // convert stats to PathData\n      items \u003d new PathData[stats.length];\n      int i\u003d0;\n      for (FileStatus stat : stats) {\n        items[i++] \u003d new PathData(fs, stat);\n      }\n    }\n    return items;\n  }",
          "path": "src/java/org/apache/hadoop/fs/shell/PathData.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-7236. Refactor the mkdir command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099612 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/11 2:34 PM",
          "commitName": "369a20391555f9c0ca9bd5384435be12770942aa",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "03/05/11 3:16 PM",
          "commitNameOld": "78a7b9768dcde23face399d9924f6168e4b1c1a8",
          "commitAuthorOld": "Jitendra Nath Pandey",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,32 @@\n-  protected List\u003cPathData\u003e expandGlob(String pattern) throws IOException {\n-    Path path \u003d new Path(pattern);\n-    FileSystem fs \u003d path.getFileSystem(getConf());\n-    FileStatus[] stats \u003d fs.globStatus(path);\n+  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n+  throws IOException {\n+    Path globPath \u003d new Path(pattern);\n+    FileSystem fs \u003d globPath.getFileSystem(conf);    \n+    FileStatus[] stats \u003d fs.globStatus(globPath);\n+    PathData[] items \u003d null;\n     \n-    if (stats !\u003d null \u0026\u0026 stats.length \u003d\u003d 0) { // glob failed to match\n-      // TODO: this should be more posix-like: ex. \"No such file or directory\"\n-      throw new FileNotFoundException(getFnfText(path));\n-    }\n-    \n-    List\u003cPathData\u003e items \u003d new LinkedList\u003cPathData\u003e();\n-    if (stats \u003d\u003d null) { // not a glob \u0026 file not found, so null stat block\n-      items.add(new PathData(fs, path, null));\n+    if (stats \u003d\u003d null) {\n+      // not a glob \u0026 file not found, so add the path with a null stat\n+      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n+    } else if (\n+        // this is very ugly, but needed to avoid breaking hdfs tests...\n+        // if a path has no authority, then the FileStatus from globStatus\n+        // will add the \"-fs\" authority into the path, so we need to sub\n+        // it back out to satisfy the tests\n+        stats.length \u003d\u003d 1\n+        \u0026\u0026\n+        stats[0].getPath().equals(fs.makeQualified(globPath)))\n+    {\n+      // if the fq path is identical to the pattern passed, use the pattern\n+      // to initialize the string value\n+      items \u003d new PathData[]{ new PathData(fs, pattern, stats[0]) };\n     } else {\n-      // convert all the stats to PathData objs\n+      // convert stats to PathData\n+      items \u003d new PathData[stats.length];\n+      int i\u003d0;\n       for (FileStatus stat : stats) {\n-        items.add(new PathData(fs, stat));\n+        items[i++] \u003d new PathData(fs, stat);\n       }\n     }\n     return items;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n  throws IOException {\n    Path globPath \u003d new Path(pattern);\n    FileSystem fs \u003d globPath.getFileSystem(conf);    \n    FileStatus[] stats \u003d fs.globStatus(globPath);\n    PathData[] items \u003d null;\n    \n    if (stats \u003d\u003d null) {\n      // not a glob \u0026 file not found, so add the path with a null stat\n      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n    } else if (\n        // this is very ugly, but needed to avoid breaking hdfs tests...\n        // if a path has no authority, then the FileStatus from globStatus\n        // will add the \"-fs\" authority into the path, so we need to sub\n        // it back out to satisfy the tests\n        stats.length \u003d\u003d 1\n        \u0026\u0026\n        stats[0].getPath().equals(fs.makeQualified(globPath)))\n    {\n      // if the fq path is identical to the pattern passed, use the pattern\n      // to initialize the string value\n      items \u003d new PathData[]{ new PathData(fs, pattern, stats[0]) };\n    } else {\n      // convert stats to PathData\n      items \u003d new PathData[stats.length];\n      int i\u003d0;\n      for (FileStatus stat : stats) {\n        items[i++] \u003d new PathData(fs, stat);\n      }\n    }\n    return items;\n  }",
          "path": "src/java/org/apache/hadoop/fs/shell/PathData.java",
          "extendedDetails": {
            "oldValue": "expandGlob",
            "newValue": "expandAsGlob"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-7236. Refactor the mkdir command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099612 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/11 2:34 PM",
          "commitName": "369a20391555f9c0ca9bd5384435be12770942aa",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "03/05/11 3:16 PM",
          "commitNameOld": "78a7b9768dcde23face399d9924f6168e4b1c1a8",
          "commitAuthorOld": "Jitendra Nath Pandey",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,32 @@\n-  protected List\u003cPathData\u003e expandGlob(String pattern) throws IOException {\n-    Path path \u003d new Path(pattern);\n-    FileSystem fs \u003d path.getFileSystem(getConf());\n-    FileStatus[] stats \u003d fs.globStatus(path);\n+  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n+  throws IOException {\n+    Path globPath \u003d new Path(pattern);\n+    FileSystem fs \u003d globPath.getFileSystem(conf);    \n+    FileStatus[] stats \u003d fs.globStatus(globPath);\n+    PathData[] items \u003d null;\n     \n-    if (stats !\u003d null \u0026\u0026 stats.length \u003d\u003d 0) { // glob failed to match\n-      // TODO: this should be more posix-like: ex. \"No such file or directory\"\n-      throw new FileNotFoundException(getFnfText(path));\n-    }\n-    \n-    List\u003cPathData\u003e items \u003d new LinkedList\u003cPathData\u003e();\n-    if (stats \u003d\u003d null) { // not a glob \u0026 file not found, so null stat block\n-      items.add(new PathData(fs, path, null));\n+    if (stats \u003d\u003d null) {\n+      // not a glob \u0026 file not found, so add the path with a null stat\n+      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n+    } else if (\n+        // this is very ugly, but needed to avoid breaking hdfs tests...\n+        // if a path has no authority, then the FileStatus from globStatus\n+        // will add the \"-fs\" authority into the path, so we need to sub\n+        // it back out to satisfy the tests\n+        stats.length \u003d\u003d 1\n+        \u0026\u0026\n+        stats[0].getPath().equals(fs.makeQualified(globPath)))\n+    {\n+      // if the fq path is identical to the pattern passed, use the pattern\n+      // to initialize the string value\n+      items \u003d new PathData[]{ new PathData(fs, pattern, stats[0]) };\n     } else {\n-      // convert all the stats to PathData objs\n+      // convert stats to PathData\n+      items \u003d new PathData[stats.length];\n+      int i\u003d0;\n       for (FileStatus stat : stats) {\n-        items.add(new PathData(fs, stat));\n+        items[i++] \u003d new PathData(fs, stat);\n       }\n     }\n     return items;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static PathData[] expandAsGlob(String pattern, Configuration conf)\n  throws IOException {\n    Path globPath \u003d new Path(pattern);\n    FileSystem fs \u003d globPath.getFileSystem(conf);    \n    FileStatus[] stats \u003d fs.globStatus(globPath);\n    PathData[] items \u003d null;\n    \n    if (stats \u003d\u003d null) {\n      // not a glob \u0026 file not found, so add the path with a null stat\n      items \u003d new PathData[]{ new PathData(fs, pattern, null) };\n    } else if (\n        // this is very ugly, but needed to avoid breaking hdfs tests...\n        // if a path has no authority, then the FileStatus from globStatus\n        // will add the \"-fs\" authority into the path, so we need to sub\n        // it back out to satisfy the tests\n        stats.length \u003d\u003d 1\n        \u0026\u0026\n        stats[0].getPath().equals(fs.makeQualified(globPath)))\n    {\n      // if the fq path is identical to the pattern passed, use the pattern\n      // to initialize the string value\n      items \u003d new PathData[]{ new PathData(fs, pattern, stats[0]) };\n    } else {\n      // convert stats to PathData\n      items \u003d new PathData[stats.length];\n      int i\u003d0;\n      for (FileStatus stat : stats) {\n        items[i++] \u003d new PathData(fs, stat);\n      }\n    }\n    return items;\n  }",
          "path": "src/java/org/apache/hadoop/fs/shell/PathData.java",
          "extendedDetails": {
            "oldValue": "[pattern-String]",
            "newValue": "[pattern-String, conf-Configuration]"
          }
        }
      ]
    },
    "99ebad8e757e90f6e036fc213d99f82dec7b80d7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7233. Refactor ls to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1095761 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/04/11 9:05 AM",
      "commitName": "99ebad8e757e90f6e036fc213d99f82dec7b80d7",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "13/04/11 1:23 PM",
      "commitNameOld": "d358eb75b79b17f85ae9fd831a0bd065b87bf924",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 7.82,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   protected List\u003cPathData\u003e expandGlob(String pattern) throws IOException {\n     Path path \u003d new Path(pattern);\n     FileSystem fs \u003d path.getFileSystem(getConf());\n     FileStatus[] stats \u003d fs.globStatus(path);\n     \n     if (stats !\u003d null \u0026\u0026 stats.length \u003d\u003d 0) { // glob failed to match\n       // TODO: this should be more posix-like: ex. \"No such file or directory\"\n-      throw new FileNotFoundException(\"Can not find listing for \" + pattern);\n+      throw new FileNotFoundException(getFnfText(path));\n     }\n     \n     List\u003cPathData\u003e items \u003d new LinkedList\u003cPathData\u003e();\n     if (stats \u003d\u003d null) { // not a glob \u0026 file not found, so null stat block\n       items.add(new PathData(fs, path, null));\n     } else {\n       // convert all the stats to PathData objs\n       for (FileStatus stat : stats) {\n         items.add(new PathData(fs, stat));\n       }\n     }\n     return items;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected List\u003cPathData\u003e expandGlob(String pattern) throws IOException {\n    Path path \u003d new Path(pattern);\n    FileSystem fs \u003d path.getFileSystem(getConf());\n    FileStatus[] stats \u003d fs.globStatus(path);\n    \n    if (stats !\u003d null \u0026\u0026 stats.length \u003d\u003d 0) { // glob failed to match\n      // TODO: this should be more posix-like: ex. \"No such file or directory\"\n      throw new FileNotFoundException(getFnfText(path));\n    }\n    \n    List\u003cPathData\u003e items \u003d new LinkedList\u003cPathData\u003e();\n    if (stats \u003d\u003d null) { // not a glob \u0026 file not found, so null stat block\n      items.add(new PathData(fs, path, null));\n    } else {\n      // convert all the stats to PathData objs\n      for (FileStatus stat : stats) {\n        items.add(new PathData(fs, stat));\n      }\n    }\n    return items;\n  }",
      "path": "src/java/org/apache/hadoop/fs/shell/Command.java",
      "extendedDetails": {}
    },
    "a65753ddac34a114c51cb0010ee39a9af48b4f9e": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7202. Improve shell Command base class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1090039 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/04/11 2:59 PM",
      "commitName": "a65753ddac34a114c51cb0010ee39a9af48b4f9e",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,21 @@\n+  protected List\u003cPathData\u003e expandGlob(String pattern) throws IOException {\n+    Path path \u003d new Path(pattern);\n+    FileSystem fs \u003d path.getFileSystem(getConf());\n+    FileStatus[] stats \u003d fs.globStatus(path);\n+    \n+    if (stats !\u003d null \u0026\u0026 stats.length \u003d\u003d 0) { // glob failed to match\n+      // TODO: this should be more posix-like: ex. \"No such file or directory\"\n+      throw new FileNotFoundException(\"Can not find listing for \" + pattern);\n+    }\n+    \n+    List\u003cPathData\u003e items \u003d new LinkedList\u003cPathData\u003e();\n+    if (stats \u003d\u003d null) { // not a glob \u0026 file not found, so null stat block\n+      items.add(new PathData(fs, path, null));\n+    } else {\n+      // convert all the stats to PathData objs\n+      for (FileStatus stat : stats) {\n+        items.add(new PathData(fs, stat));\n+      }\n+    }\n+    return items;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected List\u003cPathData\u003e expandGlob(String pattern) throws IOException {\n    Path path \u003d new Path(pattern);\n    FileSystem fs \u003d path.getFileSystem(getConf());\n    FileStatus[] stats \u003d fs.globStatus(path);\n    \n    if (stats !\u003d null \u0026\u0026 stats.length \u003d\u003d 0) { // glob failed to match\n      // TODO: this should be more posix-like: ex. \"No such file or directory\"\n      throw new FileNotFoundException(\"Can not find listing for \" + pattern);\n    }\n    \n    List\u003cPathData\u003e items \u003d new LinkedList\u003cPathData\u003e();\n    if (stats \u003d\u003d null) { // not a glob \u0026 file not found, so null stat block\n      items.add(new PathData(fs, path, null));\n    } else {\n      // convert all the stats to PathData objs\n      for (FileStatus stat : stats) {\n        items.add(new PathData(fs, stat));\n      }\n    }\n    return items;\n  }",
      "path": "src/java/org/apache/hadoop/fs/shell/Command.java"
    }
  }
}