{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ExternalStoragePolicySatisfier.java",
  "functionName": "main",
  "functionId": "main___args-String[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/sps/ExternalStoragePolicySatisfier.java",
  "functionStartLine": 60,
  "functionEndLine": 85,
  "numCommitsSeen": 8,
  "timeTaken": 4420,
  "changeHistory": [
    "3ac07b720b7839a7fe6c83f4ccfe319b6a892501",
    "39ed3a66dbb01383ed16b141183fc48bfd2e613d",
    "66e8f9b31529226309c924226a53dead3e6fcf11",
    "2acc50b826fa8b00f2b09d9546c4b3215b89d46d",
    "8467ec24fb74f30371d5a13e893fc56309ee9372",
    "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52",
    "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308",
    "5845c36c16c423107183287cce3be9357dad7564"
  ],
  "changeHistoryShort": {
    "3ac07b720b7839a7fe6c83f4ccfe319b6a892501": "Ybodychange",
    "39ed3a66dbb01383ed16b141183fc48bfd2e613d": "Ybodychange",
    "66e8f9b31529226309c924226a53dead3e6fcf11": "Ybodychange",
    "2acc50b826fa8b00f2b09d9546c4b3215b89d46d": "Ybodychange",
    "8467ec24fb74f30371d5a13e893fc56309ee9372": "Ybodychange",
    "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52": "Ybodychange",
    "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308": "Ybodychange",
    "5845c36c16c423107183287cce3be9357dad7564": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3ac07b720b7839a7fe6c83f4ccfe319b6a892501": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13808: [SPS]: Remove unwanted FSNamesystem #isFileOpenedForWrite() and #getFileInfo() function. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "3ac07b720b7839a7fe6c83f4ccfe319b6a892501",
      "commitAuthor": "Uma Maheswara Rao Gangumalla",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "39ed3a66dbb01383ed16b141183fc48bfd2e613d",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public static void main(String[] args) throws Exception {\n     NameNodeConnector nnc \u003d null;\n     try {\n       StringUtils.startupShutdownMessage(StoragePolicySatisfier.class, args,\n           LOG);\n       HdfsConfiguration spsConf \u003d new HdfsConfiguration();\n       // login with SPS keytab\n       secureLogin(spsConf);\n       StoragePolicySatisfier sps \u003d new StoragePolicySatisfier(spsConf);\n       nnc \u003d getNameNodeConnector(spsConf);\n \n       ExternalSPSContext context \u003d new ExternalSPSContext(sps, nnc);\n       sps.init(context);\n-      sps.start(true, StoragePolicySatisfierMode.EXTERNAL);\n+      sps.start(StoragePolicySatisfierMode.EXTERNAL);\n       if (sps !\u003d null) {\n         sps.join();\n       }\n     } catch (Throwable e) {\n       LOG.error(\"Failed to start storage policy satisfier.\", e);\n       terminate(1, e);\n     } finally {\n       if (nnc !\u003d null) {\n         nnc.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    NameNodeConnector nnc \u003d null;\n    try {\n      StringUtils.startupShutdownMessage(StoragePolicySatisfier.class, args,\n          LOG);\n      HdfsConfiguration spsConf \u003d new HdfsConfiguration();\n      // login with SPS keytab\n      secureLogin(spsConf);\n      StoragePolicySatisfier sps \u003d new StoragePolicySatisfier(spsConf);\n      nnc \u003d getNameNodeConnector(spsConf);\n\n      ExternalSPSContext context \u003d new ExternalSPSContext(sps, nnc);\n      sps.init(context);\n      sps.start(StoragePolicySatisfierMode.EXTERNAL);\n      if (sps !\u003d null) {\n        sps.join();\n      }\n    } catch (Throwable e) {\n      LOG.error(\"Failed to start storage policy satisfier.\", e);\n      terminate(1, e);\n    } finally {\n      if (nnc !\u003d null) {\n        nnc.close();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/sps/ExternalStoragePolicySatisfier.java",
      "extendedDetails": {}
    },
    "39ed3a66dbb01383ed16b141183fc48bfd2e613d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13076: [SPS]: Cleanup work for HDFS-10285 merge. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "39ed3a66dbb01383ed16b141183fc48bfd2e613d",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "66e8f9b31529226309c924226a53dead3e6fcf11",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,26 @@\n   public static void main(String[] args) throws Exception {\n     NameNodeConnector nnc \u003d null;\n     try {\n       StringUtils.startupShutdownMessage(StoragePolicySatisfier.class, args,\n           LOG);\n       HdfsConfiguration spsConf \u003d new HdfsConfiguration();\n       // login with SPS keytab\n       secureLogin(spsConf);\n       StoragePolicySatisfier sps \u003d new StoragePolicySatisfier(spsConf);\n       nnc \u003d getNameNodeConnector(spsConf);\n \n-      boolean spsRunning;\n-      spsRunning \u003d nnc.getDistributedFileSystem().getClient()\n-          .isInternalSatisfierRunning();\n-      if (spsRunning) {\n-        throw new RuntimeException(\n-            \"Startup failed due to StoragePolicySatisfier\"\n-                + \" running inside Namenode.\");\n-      }\n-\n       ExternalSPSContext context \u003d new ExternalSPSContext(sps, nnc);\n       sps.init(context);\n       sps.start(true, StoragePolicySatisfierMode.EXTERNAL);\n       if (sps !\u003d null) {\n         sps.join();\n       }\n     } catch (Throwable e) {\n       LOG.error(\"Failed to start storage policy satisfier.\", e);\n       terminate(1, e);\n     } finally {\n       if (nnc !\u003d null) {\n         nnc.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    NameNodeConnector nnc \u003d null;\n    try {\n      StringUtils.startupShutdownMessage(StoragePolicySatisfier.class, args,\n          LOG);\n      HdfsConfiguration spsConf \u003d new HdfsConfiguration();\n      // login with SPS keytab\n      secureLogin(spsConf);\n      StoragePolicySatisfier sps \u003d new StoragePolicySatisfier(spsConf);\n      nnc \u003d getNameNodeConnector(spsConf);\n\n      ExternalSPSContext context \u003d new ExternalSPSContext(sps, nnc);\n      sps.init(context);\n      sps.start(true, StoragePolicySatisfierMode.EXTERNAL);\n      if (sps !\u003d null) {\n        sps.join();\n      }\n    } catch (Throwable e) {\n      LOG.error(\"Failed to start storage policy satisfier.\", e);\n      terminate(1, e);\n    } finally {\n      if (nnc !\u003d null) {\n        nnc.close();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/sps/ExternalStoragePolicySatisfier.java",
      "extendedDetails": {}
    },
    "66e8f9b31529226309c924226a53dead3e6fcf11": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13381 : [SPS]: Use DFSUtilClient#makePathFromFileId() to prepare satisfier file path. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "66e8f9b31529226309c924226a53dead3e6fcf11",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "2acc50b826fa8b00f2b09d9546c4b3215b89d46d",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,35 @@\n   public static void main(String[] args) throws Exception {\n     NameNodeConnector nnc \u003d null;\n     try {\n       StringUtils.startupShutdownMessage(StoragePolicySatisfier.class, args,\n           LOG);\n       HdfsConfiguration spsConf \u003d new HdfsConfiguration();\n       // login with SPS keytab\n       secureLogin(spsConf);\n-      StoragePolicySatisfier\u003cString\u003e sps \u003d new StoragePolicySatisfier\u003cString\u003e(\n-          spsConf);\n+      StoragePolicySatisfier sps \u003d new StoragePolicySatisfier(spsConf);\n       nnc \u003d getNameNodeConnector(spsConf);\n \n       boolean spsRunning;\n       spsRunning \u003d nnc.getDistributedFileSystem().getClient()\n           .isInternalSatisfierRunning();\n       if (spsRunning) {\n         throw new RuntimeException(\n             \"Startup failed due to StoragePolicySatisfier\"\n                 + \" running inside Namenode.\");\n       }\n \n       ExternalSPSContext context \u003d new ExternalSPSContext(sps, nnc);\n-      ExternalBlockMovementListener blkMoveListener \u003d\n-          new ExternalBlockMovementListener();\n-      ExternalSPSBlockMoveTaskHandler externalHandler \u003d\n-          new ExternalSPSBlockMoveTaskHandler(spsConf, nnc, sps);\n-      sps.init(context, new ExternalSPSFilePathCollector(sps), externalHandler,\n-          blkMoveListener);\n+      sps.init(context);\n       sps.start(true, StoragePolicySatisfierMode.EXTERNAL);\n       if (sps !\u003d null) {\n         sps.join();\n       }\n     } catch (Throwable e) {\n       LOG.error(\"Failed to start storage policy satisfier.\", e);\n       terminate(1, e);\n     } finally {\n       if (nnc !\u003d null) {\n         nnc.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    NameNodeConnector nnc \u003d null;\n    try {\n      StringUtils.startupShutdownMessage(StoragePolicySatisfier.class, args,\n          LOG);\n      HdfsConfiguration spsConf \u003d new HdfsConfiguration();\n      // login with SPS keytab\n      secureLogin(spsConf);\n      StoragePolicySatisfier sps \u003d new StoragePolicySatisfier(spsConf);\n      nnc \u003d getNameNodeConnector(spsConf);\n\n      boolean spsRunning;\n      spsRunning \u003d nnc.getDistributedFileSystem().getClient()\n          .isInternalSatisfierRunning();\n      if (spsRunning) {\n        throw new RuntimeException(\n            \"Startup failed due to StoragePolicySatisfier\"\n                + \" running inside Namenode.\");\n      }\n\n      ExternalSPSContext context \u003d new ExternalSPSContext(sps, nnc);\n      sps.init(context);\n      sps.start(true, StoragePolicySatisfierMode.EXTERNAL);\n      if (sps !\u003d null) {\n        sps.join();\n      }\n    } catch (Throwable e) {\n      LOG.error(\"Failed to start storage policy satisfier.\", e);\n      terminate(1, e);\n    } finally {\n      if (nnc !\u003d null) {\n        nnc.close();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/sps/ExternalStoragePolicySatisfier.java",
      "extendedDetails": {}
    },
    "2acc50b826fa8b00f2b09d9546c4b3215b89d46d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13165: [SPS]: Collects successfully moved block details via IBR. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "2acc50b826fa8b00f2b09d9546c4b3215b89d46d",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "8467ec24fb74f30371d5a13e893fc56309ee9372",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,41 @@\n   public static void main(String[] args) throws Exception {\n     NameNodeConnector nnc \u003d null;\n     try {\n       StringUtils.startupShutdownMessage(StoragePolicySatisfier.class, args,\n           LOG);\n       HdfsConfiguration spsConf \u003d new HdfsConfiguration();\n       // login with SPS keytab\n       secureLogin(spsConf);\n       StoragePolicySatisfier\u003cString\u003e sps \u003d new StoragePolicySatisfier\u003cString\u003e(\n           spsConf);\n       nnc \u003d getNameNodeConnector(spsConf);\n \n       boolean spsRunning;\n       spsRunning \u003d nnc.getDistributedFileSystem().getClient()\n           .isInternalSatisfierRunning();\n       if (spsRunning) {\n         throw new RuntimeException(\n             \"Startup failed due to StoragePolicySatisfier\"\n                 + \" running inside Namenode.\");\n       }\n \n       ExternalSPSContext context \u003d new ExternalSPSContext(sps, nnc);\n       ExternalBlockMovementListener blkMoveListener \u003d\n           new ExternalBlockMovementListener();\n       ExternalSPSBlockMoveTaskHandler externalHandler \u003d\n           new ExternalSPSBlockMoveTaskHandler(spsConf, nnc, sps);\n-      externalHandler.init();\n       sps.init(context, new ExternalSPSFilePathCollector(sps), externalHandler,\n           blkMoveListener);\n       sps.start(true, StoragePolicySatisfierMode.EXTERNAL);\n       if (sps !\u003d null) {\n         sps.join();\n       }\n     } catch (Throwable e) {\n       LOG.error(\"Failed to start storage policy satisfier.\", e);\n       terminate(1, e);\n     } finally {\n       if (nnc !\u003d null) {\n         nnc.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    NameNodeConnector nnc \u003d null;\n    try {\n      StringUtils.startupShutdownMessage(StoragePolicySatisfier.class, args,\n          LOG);\n      HdfsConfiguration spsConf \u003d new HdfsConfiguration();\n      // login with SPS keytab\n      secureLogin(spsConf);\n      StoragePolicySatisfier\u003cString\u003e sps \u003d new StoragePolicySatisfier\u003cString\u003e(\n          spsConf);\n      nnc \u003d getNameNodeConnector(spsConf);\n\n      boolean spsRunning;\n      spsRunning \u003d nnc.getDistributedFileSystem().getClient()\n          .isInternalSatisfierRunning();\n      if (spsRunning) {\n        throw new RuntimeException(\n            \"Startup failed due to StoragePolicySatisfier\"\n                + \" running inside Namenode.\");\n      }\n\n      ExternalSPSContext context \u003d new ExternalSPSContext(sps, nnc);\n      ExternalBlockMovementListener blkMoveListener \u003d\n          new ExternalBlockMovementListener();\n      ExternalSPSBlockMoveTaskHandler externalHandler \u003d\n          new ExternalSPSBlockMoveTaskHandler(spsConf, nnc, sps);\n      sps.init(context, new ExternalSPSFilePathCollector(sps), externalHandler,\n          blkMoveListener);\n      sps.start(true, StoragePolicySatisfierMode.EXTERNAL);\n      if (sps !\u003d null) {\n        sps.join();\n      }\n    } catch (Throwable e) {\n      LOG.error(\"Failed to start storage policy satisfier.\", e);\n      terminate(1, e);\n    } finally {\n      if (nnc !\u003d null) {\n        nnc.close();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/sps/ExternalStoragePolicySatisfier.java",
      "extendedDetails": {}
    },
    "8467ec24fb74f30371d5a13e893fc56309ee9372": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13110: [SPS]: Reduce the number of APIs in NamenodeProtocol used by external satisfier. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "8467ec24fb74f30371d5a13e893fc56309ee9372",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   public static void main(String[] args) throws Exception {\n     NameNodeConnector nnc \u003d null;\n     try {\n       StringUtils.startupShutdownMessage(StoragePolicySatisfier.class, args,\n           LOG);\n       HdfsConfiguration spsConf \u003d new HdfsConfiguration();\n       // login with SPS keytab\n       secureLogin(spsConf);\n-      StoragePolicySatisfier sps \u003d new StoragePolicySatisfier(spsConf);\n+      StoragePolicySatisfier\u003cString\u003e sps \u003d new StoragePolicySatisfier\u003cString\u003e(\n+          spsConf);\n       nnc \u003d getNameNodeConnector(spsConf);\n \n       boolean spsRunning;\n       spsRunning \u003d nnc.getDistributedFileSystem().getClient()\n           .isInternalSatisfierRunning();\n       if (spsRunning) {\n         throw new RuntimeException(\n             \"Startup failed due to StoragePolicySatisfier\"\n                 + \" running inside Namenode.\");\n       }\n \n       ExternalSPSContext context \u003d new ExternalSPSContext(sps, nnc);\n       ExternalBlockMovementListener blkMoveListener \u003d\n           new ExternalBlockMovementListener();\n       ExternalSPSBlockMoveTaskHandler externalHandler \u003d\n           new ExternalSPSBlockMoveTaskHandler(spsConf, nnc, sps);\n       externalHandler.init();\n-      sps.init(context, new ExternalSPSFileIDCollector(context, sps),\n-          externalHandler, blkMoveListener);\n+      sps.init(context, new ExternalSPSFilePathCollector(sps), externalHandler,\n+          blkMoveListener);\n       sps.start(true, StoragePolicySatisfierMode.EXTERNAL);\n       if (sps !\u003d null) {\n         sps.join();\n       }\n     } catch (Throwable e) {\n       LOG.error(\"Failed to start storage policy satisfier.\", e);\n       terminate(1, e);\n     } finally {\n       if (nnc !\u003d null) {\n         nnc.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    NameNodeConnector nnc \u003d null;\n    try {\n      StringUtils.startupShutdownMessage(StoragePolicySatisfier.class, args,\n          LOG);\n      HdfsConfiguration spsConf \u003d new HdfsConfiguration();\n      // login with SPS keytab\n      secureLogin(spsConf);\n      StoragePolicySatisfier\u003cString\u003e sps \u003d new StoragePolicySatisfier\u003cString\u003e(\n          spsConf);\n      nnc \u003d getNameNodeConnector(spsConf);\n\n      boolean spsRunning;\n      spsRunning \u003d nnc.getDistributedFileSystem().getClient()\n          .isInternalSatisfierRunning();\n      if (spsRunning) {\n        throw new RuntimeException(\n            \"Startup failed due to StoragePolicySatisfier\"\n                + \" running inside Namenode.\");\n      }\n\n      ExternalSPSContext context \u003d new ExternalSPSContext(sps, nnc);\n      ExternalBlockMovementListener blkMoveListener \u003d\n          new ExternalBlockMovementListener();\n      ExternalSPSBlockMoveTaskHandler externalHandler \u003d\n          new ExternalSPSBlockMoveTaskHandler(spsConf, nnc, sps);\n      externalHandler.init();\n      sps.init(context, new ExternalSPSFilePathCollector(sps), externalHandler,\n          blkMoveListener);\n      sps.start(true, StoragePolicySatisfierMode.EXTERNAL);\n      if (sps !\u003d null) {\n        sps.join();\n      }\n    } catch (Throwable e) {\n      LOG.error(\"Failed to start storage policy satisfier.\", e);\n      terminate(1, e);\n    } finally {\n      if (nnc !\u003d null) {\n        nnc.close();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/sps/ExternalStoragePolicySatisfier.java",
      "extendedDetails": {}
    },
    "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13097: [SPS]: Fix the branch review comments(Part1). Contributed by Surendra Singh.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public static void main(String[] args) throws Exception {\n     NameNodeConnector nnc \u003d null;\n     try {\n       StringUtils.startupShutdownMessage(StoragePolicySatisfier.class, args,\n           LOG);\n       HdfsConfiguration spsConf \u003d new HdfsConfiguration();\n       // login with SPS keytab\n       secureLogin(spsConf);\n       StoragePolicySatisfier sps \u003d new StoragePolicySatisfier(spsConf);\n       nnc \u003d getNameNodeConnector(spsConf);\n \n       boolean spsRunning;\n       spsRunning \u003d nnc.getDistributedFileSystem().getClient()\n-          .isStoragePolicySatisfierRunning();\n+          .isInternalSatisfierRunning();\n       if (spsRunning) {\n         throw new RuntimeException(\n             \"Startup failed due to StoragePolicySatisfier\"\n                 + \" running inside Namenode.\");\n       }\n \n       ExternalSPSContext context \u003d new ExternalSPSContext(sps, nnc);\n       ExternalBlockMovementListener blkMoveListener \u003d\n           new ExternalBlockMovementListener();\n       ExternalSPSBlockMoveTaskHandler externalHandler \u003d\n           new ExternalSPSBlockMoveTaskHandler(spsConf, nnc, sps);\n       externalHandler.init();\n       sps.init(context, new ExternalSPSFileIDCollector(context, sps),\n           externalHandler, blkMoveListener);\n       sps.start(true, StoragePolicySatisfierMode.EXTERNAL);\n       if (sps !\u003d null) {\n         sps.join();\n       }\n     } catch (Throwable e) {\n       LOG.error(\"Failed to start storage policy satisfier.\", e);\n       terminate(1, e);\n     } finally {\n       if (nnc !\u003d null) {\n         nnc.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    NameNodeConnector nnc \u003d null;\n    try {\n      StringUtils.startupShutdownMessage(StoragePolicySatisfier.class, args,\n          LOG);\n      HdfsConfiguration spsConf \u003d new HdfsConfiguration();\n      // login with SPS keytab\n      secureLogin(spsConf);\n      StoragePolicySatisfier sps \u003d new StoragePolicySatisfier(spsConf);\n      nnc \u003d getNameNodeConnector(spsConf);\n\n      boolean spsRunning;\n      spsRunning \u003d nnc.getDistributedFileSystem().getClient()\n          .isInternalSatisfierRunning();\n      if (spsRunning) {\n        throw new RuntimeException(\n            \"Startup failed due to StoragePolicySatisfier\"\n                + \" running inside Namenode.\");\n      }\n\n      ExternalSPSContext context \u003d new ExternalSPSContext(sps, nnc);\n      ExternalBlockMovementListener blkMoveListener \u003d\n          new ExternalBlockMovementListener();\n      ExternalSPSBlockMoveTaskHandler externalHandler \u003d\n          new ExternalSPSBlockMoveTaskHandler(spsConf, nnc, sps);\n      externalHandler.init();\n      sps.init(context, new ExternalSPSFileIDCollector(context, sps),\n          externalHandler, blkMoveListener);\n      sps.start(true, StoragePolicySatisfierMode.EXTERNAL);\n      if (sps !\u003d null) {\n        sps.join();\n      }\n    } catch (Throwable e) {\n      LOG.error(\"Failed to start storage policy satisfier.\", e);\n      terminate(1, e);\n    } finally {\n      if (nnc !\u003d null) {\n        nnc.close();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/sps/ExternalStoragePolicySatisfier.java",
      "extendedDetails": {}
    },
    "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13077. [SPS]: Fix review comments of external storage policy satisfier. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "5845c36c16c423107183287cce3be9357dad7564",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n-  public static void main(String args[]) throws Exception {\n+  public static void main(String[] args) throws Exception {\n     NameNodeConnector nnc \u003d null;\n     try {\n       StringUtils.startupShutdownMessage(StoragePolicySatisfier.class, args,\n           LOG);\n       HdfsConfiguration spsConf \u003d new HdfsConfiguration();\n-      //TODO : login with SPS keytab\n+      // login with SPS keytab\n+      secureLogin(spsConf);\n       StoragePolicySatisfier sps \u003d new StoragePolicySatisfier(spsConf);\n       nnc \u003d getNameNodeConnector(spsConf);\n \n       boolean spsRunning;\n       spsRunning \u003d nnc.getDistributedFileSystem().getClient()\n           .isStoragePolicySatisfierRunning();\n       if (spsRunning) {\n         throw new RuntimeException(\n             \"Startup failed due to StoragePolicySatisfier\"\n                 + \" running inside Namenode.\");\n       }\n \n       ExternalSPSContext context \u003d new ExternalSPSContext(sps, nnc);\n       ExternalBlockMovementListener blkMoveListener \u003d\n           new ExternalBlockMovementListener();\n       ExternalSPSBlockMoveTaskHandler externalHandler \u003d\n           new ExternalSPSBlockMoveTaskHandler(spsConf, nnc, sps);\n       externalHandler.init();\n       sps.init(context, new ExternalSPSFileIDCollector(context, sps),\n           externalHandler, blkMoveListener);\n       sps.start(true, StoragePolicySatisfierMode.EXTERNAL);\n       if (sps !\u003d null) {\n         sps.join();\n       }\n     } catch (Throwable e) {\n       LOG.error(\"Failed to start storage policy satisfier.\", e);\n       terminate(1, e);\n     } finally {\n       if (nnc !\u003d null) {\n         nnc.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    NameNodeConnector nnc \u003d null;\n    try {\n      StringUtils.startupShutdownMessage(StoragePolicySatisfier.class, args,\n          LOG);\n      HdfsConfiguration spsConf \u003d new HdfsConfiguration();\n      // login with SPS keytab\n      secureLogin(spsConf);\n      StoragePolicySatisfier sps \u003d new StoragePolicySatisfier(spsConf);\n      nnc \u003d getNameNodeConnector(spsConf);\n\n      boolean spsRunning;\n      spsRunning \u003d nnc.getDistributedFileSystem().getClient()\n          .isStoragePolicySatisfierRunning();\n      if (spsRunning) {\n        throw new RuntimeException(\n            \"Startup failed due to StoragePolicySatisfier\"\n                + \" running inside Namenode.\");\n      }\n\n      ExternalSPSContext context \u003d new ExternalSPSContext(sps, nnc);\n      ExternalBlockMovementListener blkMoveListener \u003d\n          new ExternalBlockMovementListener();\n      ExternalSPSBlockMoveTaskHandler externalHandler \u003d\n          new ExternalSPSBlockMoveTaskHandler(spsConf, nnc, sps);\n      externalHandler.init();\n      sps.init(context, new ExternalSPSFileIDCollector(context, sps),\n          externalHandler, blkMoveListener);\n      sps.start(true, StoragePolicySatisfierMode.EXTERNAL);\n      if (sps !\u003d null) {\n        sps.join();\n      }\n    } catch (Throwable e) {\n      LOG.error(\"Failed to start storage policy satisfier.\", e);\n      terminate(1, e);\n    } finally {\n      if (nnc !\u003d null) {\n        nnc.close();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/sps/ExternalStoragePolicySatisfier.java",
      "extendedDetails": {}
    },
    "5845c36c16c423107183287cce3be9357dad7564": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13050: [SPS]: Create start/stop script to start external SPS process. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "5845c36c16c423107183287cce3be9357dad7564",
      "commitAuthor": "Rakesh Radhakrishnan",
      "diff": "@@ -0,0 +1,40 @@\n+  public static void main(String args[]) throws Exception {\n+    NameNodeConnector nnc \u003d null;\n+    try {\n+      StringUtils.startupShutdownMessage(StoragePolicySatisfier.class, args,\n+          LOG);\n+      HdfsConfiguration spsConf \u003d new HdfsConfiguration();\n+      //TODO : login with SPS keytab\n+      StoragePolicySatisfier sps \u003d new StoragePolicySatisfier(spsConf);\n+      nnc \u003d getNameNodeConnector(spsConf);\n+\n+      boolean spsRunning;\n+      spsRunning \u003d nnc.getDistributedFileSystem().getClient()\n+          .isStoragePolicySatisfierRunning();\n+      if (spsRunning) {\n+        throw new RuntimeException(\n+            \"Startup failed due to StoragePolicySatisfier\"\n+                + \" running inside Namenode.\");\n+      }\n+\n+      ExternalSPSContext context \u003d new ExternalSPSContext(sps, nnc);\n+      ExternalBlockMovementListener blkMoveListener \u003d\n+          new ExternalBlockMovementListener();\n+      ExternalSPSBlockMoveTaskHandler externalHandler \u003d\n+          new ExternalSPSBlockMoveTaskHandler(spsConf, nnc, sps);\n+      externalHandler.init();\n+      sps.init(context, new ExternalSPSFileIDCollector(context, sps),\n+          externalHandler, blkMoveListener);\n+      sps.start(true, StoragePolicySatisfierMode.EXTERNAL);\n+      if (sps !\u003d null) {\n+        sps.join();\n+      }\n+    } catch (Throwable e) {\n+      LOG.error(\"Failed to start storage policy satisfier.\", e);\n+      terminate(1, e);\n+    } finally {\n+      if (nnc !\u003d null) {\n+        nnc.close();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String args[]) throws Exception {\n    NameNodeConnector nnc \u003d null;\n    try {\n      StringUtils.startupShutdownMessage(StoragePolicySatisfier.class, args,\n          LOG);\n      HdfsConfiguration spsConf \u003d new HdfsConfiguration();\n      //TODO : login with SPS keytab\n      StoragePolicySatisfier sps \u003d new StoragePolicySatisfier(spsConf);\n      nnc \u003d getNameNodeConnector(spsConf);\n\n      boolean spsRunning;\n      spsRunning \u003d nnc.getDistributedFileSystem().getClient()\n          .isStoragePolicySatisfierRunning();\n      if (spsRunning) {\n        throw new RuntimeException(\n            \"Startup failed due to StoragePolicySatisfier\"\n                + \" running inside Namenode.\");\n      }\n\n      ExternalSPSContext context \u003d new ExternalSPSContext(sps, nnc);\n      ExternalBlockMovementListener blkMoveListener \u003d\n          new ExternalBlockMovementListener();\n      ExternalSPSBlockMoveTaskHandler externalHandler \u003d\n          new ExternalSPSBlockMoveTaskHandler(spsConf, nnc, sps);\n      externalHandler.init();\n      sps.init(context, new ExternalSPSFileIDCollector(context, sps),\n          externalHandler, blkMoveListener);\n      sps.start(true, StoragePolicySatisfierMode.EXTERNAL);\n      if (sps !\u003d null) {\n        sps.join();\n      }\n    } catch (Throwable e) {\n      LOG.error(\"Failed to start storage policy satisfier.\", e);\n      terminate(1, e);\n    } finally {\n      if (nnc !\u003d null) {\n        nnc.close();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/sps/ExternalStoragePolicySatisfier.java"
    }
  }
}