{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientContext.java",
  "functionName": "initTopologyResolution",
  "functionId": "initTopologyResolution___config-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/ClientContext.java",
  "functionStartLine": 170,
  "functionEndLine": 190,
  "numCommitsSeen": 11,
  "timeTaken": 1000,
  "changeHistory": [
    "61f46be071e42f9eb49a54b1bd2e54feac59f808"
  ],
  "changeHistoryShort": {
    "61f46be071e42f9eb49a54b1bd2e54feac59f808": "Yintroduced"
  },
  "changeHistoryDetails": {
    "61f46be071e42f9eb49a54b1bd2e54feac59f808": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10208. Addendum for HDFS-9579: to handle the case when client machine can\u0027t resolve network path (Ming Ma via sjlee)\n",
      "commitDate": "16/05/16 6:49 PM",
      "commitName": "61f46be071e42f9eb49a54b1bd2e54feac59f808",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,21 @@\n+  private void initTopologyResolution(Configuration config) {\n+    topologyResolutionEnabled \u003d config.getBoolean(\n+        FS_CLIENT_TOPOLOGY_RESOLUTION_ENABLED,\n+        FS_CLIENT_TOPOLOGY_RESOLUTION_ENABLED_DEFAULT);\n+    if (!topologyResolutionEnabled) {\n+      return;\n+    }\n+    DNSToSwitchMapping dnsToSwitchMapping \u003d ReflectionUtils.newInstance(\n+        config.getClass(\n+            CommonConfigurationKeys.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,\n+            ScriptBasedMapping.class, DNSToSwitchMapping.class), config);\n+    String clientHostName \u003d NetUtils.getLocalHostname();\n+    List\u003cString\u003e nodes \u003d new ArrayList\u003c\u003e();\n+    nodes.add(clientHostName);\n+    List\u003cString\u003e resolvedHosts \u003d dnsToSwitchMapping.resolve(nodes);\n+    if (resolvedHosts !\u003d null \u0026\u0026 !resolvedHosts.isEmpty() \u0026\u0026\n+        !resolvedHosts.get(0).equals(NetworkTopology.DEFAULT_RACK)) {\n+      // The client machine is able to resolve its own network location.\n+      this.clientNode \u003d new NodeBase(clientHostName, resolvedHosts.get(0));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initTopologyResolution(Configuration config) {\n    topologyResolutionEnabled \u003d config.getBoolean(\n        FS_CLIENT_TOPOLOGY_RESOLUTION_ENABLED,\n        FS_CLIENT_TOPOLOGY_RESOLUTION_ENABLED_DEFAULT);\n    if (!topologyResolutionEnabled) {\n      return;\n    }\n    DNSToSwitchMapping dnsToSwitchMapping \u003d ReflectionUtils.newInstance(\n        config.getClass(\n            CommonConfigurationKeys.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,\n            ScriptBasedMapping.class, DNSToSwitchMapping.class), config);\n    String clientHostName \u003d NetUtils.getLocalHostname();\n    List\u003cString\u003e nodes \u003d new ArrayList\u003c\u003e();\n    nodes.add(clientHostName);\n    List\u003cString\u003e resolvedHosts \u003d dnsToSwitchMapping.resolve(nodes);\n    if (resolvedHosts !\u003d null \u0026\u0026 !resolvedHosts.isEmpty() \u0026\u0026\n        !resolvedHosts.get(0).equals(NetworkTopology.DEFAULT_RACK)) {\n      // The client machine is able to resolve its own network location.\n      this.clientNode \u003d new NodeBase(clientHostName, resolvedHosts.get(0));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/ClientContext.java"
    }
  }
}