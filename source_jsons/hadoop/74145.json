{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultImpersonationProvider.java",
  "functionName": "authorize",
  "functionId": "authorize___user-UserGroupInformation__remoteAddress-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/DefaultImpersonationProvider.java",
  "functionStartLine": 108,
  "functionEndLine": 134,
  "numCommitsSeen": 7,
  "timeTaken": 1711,
  "changeHistory": [
    "0ab3f9d56465bf31668159c562305a3b8222004c",
    "9ee891aa90333bf18cba412400daa5834f15c41d",
    "64ed72a047a1ff20e07aaf18ebdb5f5d29569829",
    "fdf901451fbcb614826b2238cad13d00b49f2157",
    "b880b48b35cab46459473e17ee6ba9f750f428a7",
    "4a4868e52360d7543909a7981b4606db939230ea"
  ],
  "changeHistoryShort": {
    "0ab3f9d56465bf31668159c562305a3b8222004c": "Ybodychange",
    "9ee891aa90333bf18cba412400daa5834f15c41d": "Ybodychange",
    "64ed72a047a1ff20e07aaf18ebdb5f5d29569829": "Ybodychange",
    "fdf901451fbcb614826b2238cad13d00b49f2157": "Ybodychange",
    "b880b48b35cab46459473e17ee6ba9f750f428a7": "Ybodychange",
    "4a4868e52360d7543909a7981b4606db939230ea": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0ab3f9d56465bf31668159c562305a3b8222004c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10941. Proxy user verification NPEs if remote host is unresolvable (Benoy Antony via stevel).\n",
      "commitDate": "18/10/15 6:05 AM",
      "commitName": "0ab3f9d56465bf31668159c562305a3b8222004c",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "09/09/14 10:18 PM",
      "commitNameOld": "9ee891aa90333bf18cba412400daa5834f15c41d",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 403.32,
      "commitsBetweenForRepo": 3412,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,27 @@\n   public void authorize(UserGroupInformation user, \n       String remoteAddress) throws AuthorizationException {\n     \n+    if (user \u003d\u003d null) {\n+      throw new IllegalArgumentException(\"user is null.\");\n+    }\n+\n     UserGroupInformation realUser \u003d user.getRealUser();\n     if (realUser \u003d\u003d null) {\n       return;\n     }\n     \n     AccessControlList acl \u003d proxyUserAcl.get(configPrefix +\n         realUser.getShortUserName());\n     if (acl \u003d\u003d null || !acl.isUserAllowed(user)) {\n       throw new AuthorizationException(\"User: \" + realUser.getUserName()\n           + \" is not allowed to impersonate \" + user.getUserName());\n     }\n \n     MachineList MachineList \u003d proxyHosts.get(\n         getProxySuperuserIpConfKey(realUser.getShortUserName()));\n \n     if(MachineList \u003d\u003d null || !MachineList.includes(remoteAddress)) {\n       throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n           + realUser.getUserName() + \" from IP \" + remoteAddress);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void authorize(UserGroupInformation user, \n      String remoteAddress) throws AuthorizationException {\n    \n    if (user \u003d\u003d null) {\n      throw new IllegalArgumentException(\"user is null.\");\n    }\n\n    UserGroupInformation realUser \u003d user.getRealUser();\n    if (realUser \u003d\u003d null) {\n      return;\n    }\n    \n    AccessControlList acl \u003d proxyUserAcl.get(configPrefix +\n        realUser.getShortUserName());\n    if (acl \u003d\u003d null || !acl.isUserAllowed(user)) {\n      throw new AuthorizationException(\"User: \" + realUser.getUserName()\n          + \" is not allowed to impersonate \" + user.getUserName());\n    }\n\n    MachineList MachineList \u003d proxyHosts.get(\n        getProxySuperuserIpConfKey(realUser.getShortUserName()));\n\n    if(MachineList \u003d\u003d null || !MachineList.includes(remoteAddress)) {\n      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n          + realUser.getUserName() + \" from IP \" + remoteAddress);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/DefaultImpersonationProvider.java",
      "extendedDetails": {}
    },
    "9ee891aa90333bf18cba412400daa5834f15c41d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11077. NPE if hosts not specified in ProxyUsers. (gchanan via tucu)\n",
      "commitDate": "09/09/14 10:18 PM",
      "commitName": "9ee891aa90333bf18cba412400daa5834f15c41d",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/07/14 12:42 PM",
      "commitNameOld": "64ed72a047a1ff20e07aaf18ebdb5f5d29569829",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 53.4,
      "commitsBetweenForRepo": 424,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public void authorize(UserGroupInformation user, \n       String remoteAddress) throws AuthorizationException {\n     \n     UserGroupInformation realUser \u003d user.getRealUser();\n     if (realUser \u003d\u003d null) {\n       return;\n     }\n     \n     AccessControlList acl \u003d proxyUserAcl.get(configPrefix +\n         realUser.getShortUserName());\n     if (acl \u003d\u003d null || !acl.isUserAllowed(user)) {\n       throw new AuthorizationException(\"User: \" + realUser.getUserName()\n           + \" is not allowed to impersonate \" + user.getUserName());\n     }\n \n     MachineList MachineList \u003d proxyHosts.get(\n         getProxySuperuserIpConfKey(realUser.getShortUserName()));\n \n-    if(!MachineList.includes(remoteAddress)) {\n+    if(MachineList \u003d\u003d null || !MachineList.includes(remoteAddress)) {\n       throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n           + realUser.getUserName() + \" from IP \" + remoteAddress);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void authorize(UserGroupInformation user, \n      String remoteAddress) throws AuthorizationException {\n    \n    UserGroupInformation realUser \u003d user.getRealUser();\n    if (realUser \u003d\u003d null) {\n      return;\n    }\n    \n    AccessControlList acl \u003d proxyUserAcl.get(configPrefix +\n        realUser.getShortUserName());\n    if (acl \u003d\u003d null || !acl.isUserAllowed(user)) {\n      throw new AuthorizationException(\"User: \" + realUser.getUserName()\n          + \" is not allowed to impersonate \" + user.getUserName());\n    }\n\n    MachineList MachineList \u003d proxyHosts.get(\n        getProxySuperuserIpConfKey(realUser.getShortUserName()));\n\n    if(MachineList \u003d\u003d null || !MachineList.includes(remoteAddress)) {\n      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n          + realUser.getUserName() + \" from IP \" + remoteAddress);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/DefaultImpersonationProvider.java",
      "extendedDetails": {}
    },
    "64ed72a047a1ff20e07aaf18ebdb5f5d29569829": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10817. ProxyUsers configuration should support configurable prefixes. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611780 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/14 12:42 PM",
      "commitName": "64ed72a047a1ff20e07aaf18ebdb5f5d29569829",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "27/06/14 1:32 AM",
      "commitNameOld": "fdf901451fbcb614826b2238cad13d00b49f2157",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 21.46,
      "commitsBetweenForRepo": 146,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public void authorize(UserGroupInformation user, \n       String remoteAddress) throws AuthorizationException {\n     \n     UserGroupInformation realUser \u003d user.getRealUser();\n     if (realUser \u003d\u003d null) {\n       return;\n     }\n     \n-    AccessControlList acl \u003d proxyUserAcl.get(\n-        CONF_HADOOP_PROXYUSER+realUser.getShortUserName());\n+    AccessControlList acl \u003d proxyUserAcl.get(configPrefix +\n+        realUser.getShortUserName());\n     if (acl \u003d\u003d null || !acl.isUserAllowed(user)) {\n       throw new AuthorizationException(\"User: \" + realUser.getUserName()\n           + \" is not allowed to impersonate \" + user.getUserName());\n     }\n \n     MachineList MachineList \u003d proxyHosts.get(\n         getProxySuperuserIpConfKey(realUser.getShortUserName()));\n \n     if(!MachineList.includes(remoteAddress)) {\n       throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n           + realUser.getUserName() + \" from IP \" + remoteAddress);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void authorize(UserGroupInformation user, \n      String remoteAddress) throws AuthorizationException {\n    \n    UserGroupInformation realUser \u003d user.getRealUser();\n    if (realUser \u003d\u003d null) {\n      return;\n    }\n    \n    AccessControlList acl \u003d proxyUserAcl.get(configPrefix +\n        realUser.getShortUserName());\n    if (acl \u003d\u003d null || !acl.isUserAllowed(user)) {\n      throw new AuthorizationException(\"User: \" + realUser.getUserName()\n          + \" is not allowed to impersonate \" + user.getUserName());\n    }\n\n    MachineList MachineList \u003d proxyHosts.get(\n        getProxySuperuserIpConfKey(realUser.getShortUserName()));\n\n    if(!MachineList.includes(remoteAddress)) {\n      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n          + realUser.getUserName() + \" from IP \" + remoteAddress);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/DefaultImpersonationProvider.java",
      "extendedDetails": {}
    },
    "fdf901451fbcb614826b2238cad13d00b49f2157": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10565. Support IP ranges (CIDR) in proxyuser.hosts. (Contributed by Benoy Antony)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605987 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/06/14 1:32 AM",
      "commitName": "fdf901451fbcb614826b2238cad13d00b49f2157",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "24/06/14 10:51 AM",
      "commitNameOld": "b880b48b35cab46459473e17ee6ba9f750f428a7",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 2.61,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,23 @@\n   public void authorize(UserGroupInformation user, \n       String remoteAddress) throws AuthorizationException {\n     \n     UserGroupInformation realUser \u003d user.getRealUser();\n     if (realUser \u003d\u003d null) {\n       return;\n     }\n     \n     AccessControlList acl \u003d proxyUserAcl.get(\n         CONF_HADOOP_PROXYUSER+realUser.getShortUserName());\n     if (acl \u003d\u003d null || !acl.isUserAllowed(user)) {\n       throw new AuthorizationException(\"User: \" + realUser.getUserName()\n           + \" is not allowed to impersonate \" + user.getUserName());\n     }\n \n-    boolean ipAuthorized \u003d false;\n-    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n+    MachineList MachineList \u003d proxyHosts.get(\n         getProxySuperuserIpConfKey(realUser.getShortUserName()));\n \n-    if (isWildcardList(ipList)) {\n-      ipAuthorized \u003d true;\n-    } else if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n-      for (String allowedHost : ipList) {\n-        InetAddress hostAddr;\n-        try {\n-          hostAddr \u003d InetAddress.getByName(allowedHost);\n-        } catch (UnknownHostException e) {\n-          continue;\n-        }\n-        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n-          // Authorization is successful\n-          ipAuthorized \u003d true;\n-        }\n-      }\n-    }\n-    if(!ipAuthorized) {\n+    if(!MachineList.includes(remoteAddress)) {\n       throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n           + realUser.getUserName() + \" from IP \" + remoteAddress);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void authorize(UserGroupInformation user, \n      String remoteAddress) throws AuthorizationException {\n    \n    UserGroupInformation realUser \u003d user.getRealUser();\n    if (realUser \u003d\u003d null) {\n      return;\n    }\n    \n    AccessControlList acl \u003d proxyUserAcl.get(\n        CONF_HADOOP_PROXYUSER+realUser.getShortUserName());\n    if (acl \u003d\u003d null || !acl.isUserAllowed(user)) {\n      throw new AuthorizationException(\"User: \" + realUser.getUserName()\n          + \" is not allowed to impersonate \" + user.getUserName());\n    }\n\n    MachineList MachineList \u003d proxyHosts.get(\n        getProxySuperuserIpConfKey(realUser.getShortUserName()));\n\n    if(!MachineList.includes(remoteAddress)) {\n      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n          + realUser.getUserName() + \" from IP \" + remoteAddress);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/DefaultImpersonationProvider.java",
      "extendedDetails": {}
    },
    "b880b48b35cab46459473e17ee6ba9f750f428a7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10652. Refactor Proxyusers to use AccessControlList. (Contributed by Benoy Antony)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605145 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 10:51 AM",
      "commitName": "b880b48b35cab46459473e17ee6ba9f750f428a7",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "29/05/14 1:52 PM",
      "commitNameOld": "4a4868e52360d7543909a7981b4606db939230ea",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 25.87,
      "commitsBetweenForRepo": 168,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,40 @@\n   public void authorize(UserGroupInformation user, \n       String remoteAddress) throws AuthorizationException {\n-\n-    if (user.getRealUser() \u003d\u003d null) {\n+    \n+    UserGroupInformation realUser \u003d user.getRealUser();\n+    if (realUser \u003d\u003d null) {\n       return;\n     }\n-    boolean userAuthorized \u003d false;\n+    \n+    AccessControlList acl \u003d proxyUserAcl.get(\n+        CONF_HADOOP_PROXYUSER+realUser.getShortUserName());\n+    if (acl \u003d\u003d null || !acl.isUserAllowed(user)) {\n+      throw new AuthorizationException(\"User: \" + realUser.getUserName()\n+          + \" is not allowed to impersonate \" + user.getUserName());\n+    }\n+\n     boolean ipAuthorized \u003d false;\n-    UserGroupInformation superUser \u003d user.getRealUser();\n-\n-    Collection\u003cString\u003e allowedUsers \u003d proxyUsers.get(\n-        getProxySuperuserUserConfKey(superUser.getShortUserName()));\n-\n-    if (isWildcardList(allowedUsers)) {\n-      userAuthorized \u003d true;\n-    } else if (allowedUsers !\u003d null \u0026\u0026 !allowedUsers.isEmpty()) {\n-      if (allowedUsers.contains(user.getShortUserName())) {\n-        userAuthorized \u003d true;\n-      }\n-    }\n-\n-    if (!userAuthorized){\n-      Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n-          getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n-\n-      if (isWildcardList(allowedUserGroups)) {\n-        userAuthorized \u003d true;\n-      } else if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n-        for (String group : user.getGroupNames()) {\n-          if (allowedUserGroups.contains(group)) {\n-            userAuthorized \u003d true;\n-            break;\n-          }\n-        }\n-      }\n-\n-      if (!userAuthorized) {\n-        throw new AuthorizationException(\"User: \" + superUser.getUserName()\n-            + \" is not allowed to impersonate \" + user.getUserName());\n-      }\n-    }\n-\n     Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n-        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n+        getProxySuperuserIpConfKey(realUser.getShortUserName()));\n \n     if (isWildcardList(ipList)) {\n       ipAuthorized \u003d true;\n     } else if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n       for (String allowedHost : ipList) {\n         InetAddress hostAddr;\n         try {\n           hostAddr \u003d InetAddress.getByName(allowedHost);\n         } catch (UnknownHostException e) {\n           continue;\n         }\n         if (hostAddr.getHostAddress().equals(remoteAddress)) {\n           // Authorization is successful\n           ipAuthorized \u003d true;\n         }\n       }\n     }\n     if(!ipAuthorized) {\n       throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n-          + superUser.getUserName() + \" from IP \" + remoteAddress);\n+          + realUser.getUserName() + \" from IP \" + remoteAddress);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void authorize(UserGroupInformation user, \n      String remoteAddress) throws AuthorizationException {\n    \n    UserGroupInformation realUser \u003d user.getRealUser();\n    if (realUser \u003d\u003d null) {\n      return;\n    }\n    \n    AccessControlList acl \u003d proxyUserAcl.get(\n        CONF_HADOOP_PROXYUSER+realUser.getShortUserName());\n    if (acl \u003d\u003d null || !acl.isUserAllowed(user)) {\n      throw new AuthorizationException(\"User: \" + realUser.getUserName()\n          + \" is not allowed to impersonate \" + user.getUserName());\n    }\n\n    boolean ipAuthorized \u003d false;\n    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n        getProxySuperuserIpConfKey(realUser.getShortUserName()));\n\n    if (isWildcardList(ipList)) {\n      ipAuthorized \u003d true;\n    } else if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n      for (String allowedHost : ipList) {\n        InetAddress hostAddr;\n        try {\n          hostAddr \u003d InetAddress.getByName(allowedHost);\n        } catch (UnknownHostException e) {\n          continue;\n        }\n        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n          // Authorization is successful\n          ipAuthorized \u003d true;\n        }\n      }\n    }\n    if(!ipAuthorized) {\n      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n          + realUser.getUserName() + \" from IP \" + remoteAddress);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/DefaultImpersonationProvider.java",
      "extendedDetails": {}
    },
    "4a4868e52360d7543909a7981b4606db939230ea": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10448. Support pluggable mechanism to specify proxy user settings (Contributed by Benoy Antony)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598396 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/14 1:52 PM",
      "commitName": "4a4868e52360d7543909a7981b4606db939230ea",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,66 @@\n+  public void authorize(UserGroupInformation user, \n+      String remoteAddress) throws AuthorizationException {\n+\n+    if (user.getRealUser() \u003d\u003d null) {\n+      return;\n+    }\n+    boolean userAuthorized \u003d false;\n+    boolean ipAuthorized \u003d false;\n+    UserGroupInformation superUser \u003d user.getRealUser();\n+\n+    Collection\u003cString\u003e allowedUsers \u003d proxyUsers.get(\n+        getProxySuperuserUserConfKey(superUser.getShortUserName()));\n+\n+    if (isWildcardList(allowedUsers)) {\n+      userAuthorized \u003d true;\n+    } else if (allowedUsers !\u003d null \u0026\u0026 !allowedUsers.isEmpty()) {\n+      if (allowedUsers.contains(user.getShortUserName())) {\n+        userAuthorized \u003d true;\n+      }\n+    }\n+\n+    if (!userAuthorized){\n+      Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n+          getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n+\n+      if (isWildcardList(allowedUserGroups)) {\n+        userAuthorized \u003d true;\n+      } else if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n+        for (String group : user.getGroupNames()) {\n+          if (allowedUserGroups.contains(group)) {\n+            userAuthorized \u003d true;\n+            break;\n+          }\n+        }\n+      }\n+\n+      if (!userAuthorized) {\n+        throw new AuthorizationException(\"User: \" + superUser.getUserName()\n+            + \" is not allowed to impersonate \" + user.getUserName());\n+      }\n+    }\n+\n+    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n+        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n+\n+    if (isWildcardList(ipList)) {\n+      ipAuthorized \u003d true;\n+    } else if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n+      for (String allowedHost : ipList) {\n+        InetAddress hostAddr;\n+        try {\n+          hostAddr \u003d InetAddress.getByName(allowedHost);\n+        } catch (UnknownHostException e) {\n+          continue;\n+        }\n+        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n+          // Authorization is successful\n+          ipAuthorized \u003d true;\n+        }\n+      }\n+    }\n+    if(!ipAuthorized) {\n+      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n+          + superUser.getUserName() + \" from IP \" + remoteAddress);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void authorize(UserGroupInformation user, \n      String remoteAddress) throws AuthorizationException {\n\n    if (user.getRealUser() \u003d\u003d null) {\n      return;\n    }\n    boolean userAuthorized \u003d false;\n    boolean ipAuthorized \u003d false;\n    UserGroupInformation superUser \u003d user.getRealUser();\n\n    Collection\u003cString\u003e allowedUsers \u003d proxyUsers.get(\n        getProxySuperuserUserConfKey(superUser.getShortUserName()));\n\n    if (isWildcardList(allowedUsers)) {\n      userAuthorized \u003d true;\n    } else if (allowedUsers !\u003d null \u0026\u0026 !allowedUsers.isEmpty()) {\n      if (allowedUsers.contains(user.getShortUserName())) {\n        userAuthorized \u003d true;\n      }\n    }\n\n    if (!userAuthorized){\n      Collection\u003cString\u003e allowedUserGroups \u003d proxyGroups.get(\n          getProxySuperuserGroupConfKey(superUser.getShortUserName()));\n\n      if (isWildcardList(allowedUserGroups)) {\n        userAuthorized \u003d true;\n      } else if (allowedUserGroups !\u003d null \u0026\u0026 !allowedUserGroups.isEmpty()) {\n        for (String group : user.getGroupNames()) {\n          if (allowedUserGroups.contains(group)) {\n            userAuthorized \u003d true;\n            break;\n          }\n        }\n      }\n\n      if (!userAuthorized) {\n        throw new AuthorizationException(\"User: \" + superUser.getUserName()\n            + \" is not allowed to impersonate \" + user.getUserName());\n      }\n    }\n\n    Collection\u003cString\u003e ipList \u003d proxyHosts.get(\n        getProxySuperuserIpConfKey(superUser.getShortUserName()));\n\n    if (isWildcardList(ipList)) {\n      ipAuthorized \u003d true;\n    } else if (ipList !\u003d null \u0026\u0026 !ipList.isEmpty()) {\n      for (String allowedHost : ipList) {\n        InetAddress hostAddr;\n        try {\n          hostAddr \u003d InetAddress.getByName(allowedHost);\n        } catch (UnknownHostException e) {\n          continue;\n        }\n        if (hostAddr.getHostAddress().equals(remoteAddress)) {\n          // Authorization is successful\n          ipAuthorized \u003d true;\n        }\n      }\n    }\n    if(!ipAuthorized) {\n      throw new AuthorizationException(\"Unauthorized connection for super-user: \"\n          + superUser.getUserName() + \" from IP \" + remoteAddress);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/DefaultImpersonationProvider.java"
    }
  }
}