{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Client.java",
  "functionName": "addFileToZipRecursively",
  "functionId": "addFileToZipRecursively___root-File__file-File__out-ZipOutputStream",
  "sourceFilePath": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/Client.java",
  "functionStartLine": 859,
  "functionEndLine": 881,
  "numCommitsSeen": 7,
  "timeTaken": 984,
  "changeHistory": [
    "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91"
  ],
  "changeHistoryShort": {
    "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a": "Ybodychange",
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16418. [Dynamometer] Fix checkstyle and findbugs warnings. Contributed by Erik Krogen.\n",
      "commitDate": "11/07/19 8:29 AM",
      "commitName": "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
      "commitAuthor": "Erik Krogen",
      "commitDateOld": "08/07/19 5:44 PM",
      "commitNameOld": "738c09349eb6178065797fc9cd624bf5e2285069",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 2.61,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private void addFileToZipRecursively(File root, File file,\n       ZipOutputStream out) throws IOException {\n \n     File[] files \u003d file.listFiles();\n     if (files \u003d\u003d null) { // Not a directory\n       String relativePath \u003d file.getAbsolutePath()\n           .substring(root.getAbsolutePath().length() + 1);\n       try {\n-        FileInputStream in \u003d new FileInputStream(file.getAbsolutePath());\n-        out.putNextEntry(new ZipEntry(relativePath));\n-        IOUtils.copyBytes(in, out, getConf(), false);\n-        out.closeEntry();\n-        in.close();\n+        try (FileInputStream in \u003d new FileInputStream(file.getAbsolutePath())) {\n+          out.putNextEntry(new ZipEntry(relativePath));\n+          IOUtils.copyBytes(in, out, getConf(), false);\n+          out.closeEntry();\n+        }\n       } catch (FileNotFoundException fnfe) {\n         LOG.warn(\"Skipping file; it is a symlink with a nonexistent target: {}\",\n             file);\n       }\n     } else {\n       for (File containedFile : files) {\n         addFileToZipRecursively(root, containedFile, out);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addFileToZipRecursively(File root, File file,\n      ZipOutputStream out) throws IOException {\n\n    File[] files \u003d file.listFiles();\n    if (files \u003d\u003d null) { // Not a directory\n      String relativePath \u003d file.getAbsolutePath()\n          .substring(root.getAbsolutePath().length() + 1);\n      try {\n        try (FileInputStream in \u003d new FileInputStream(file.getAbsolutePath())) {\n          out.putNextEntry(new ZipEntry(relativePath));\n          IOUtils.copyBytes(in, out, getConf(), false);\n          out.closeEntry();\n        }\n      } catch (FileNotFoundException fnfe) {\n        LOG.warn(\"Skipping file; it is a symlink with a nonexistent target: {}\",\n            file);\n      }\n    } else {\n      for (File containedFile : files) {\n        addFileToZipRecursively(root, containedFile, out);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/Client.java",
      "extendedDetails": {}
    },
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12345 Add Dynamometer to hadoop-tools, a tool for scale testing the HDFS NameNode with real metadata and workloads. Contributed by Erik Krogen.\n",
      "commitDate": "25/06/19 8:07 AM",
      "commitName": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,23 @@\n+  private void addFileToZipRecursively(File root, File file,\n+      ZipOutputStream out) throws IOException {\n+\n+    File[] files \u003d file.listFiles();\n+    if (files \u003d\u003d null) { // Not a directory\n+      String relativePath \u003d file.getAbsolutePath()\n+          .substring(root.getAbsolutePath().length() + 1);\n+      try {\n+        FileInputStream in \u003d new FileInputStream(file.getAbsolutePath());\n+        out.putNextEntry(new ZipEntry(relativePath));\n+        IOUtils.copyBytes(in, out, getConf(), false);\n+        out.closeEntry();\n+        in.close();\n+      } catch (FileNotFoundException fnfe) {\n+        LOG.warn(\"Skipping file; it is a symlink with a nonexistent target: {}\",\n+            file);\n+      }\n+    } else {\n+      for (File containedFile : files) {\n+        addFileToZipRecursively(root, containedFile, out);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addFileToZipRecursively(File root, File file,\n      ZipOutputStream out) throws IOException {\n\n    File[] files \u003d file.listFiles();\n    if (files \u003d\u003d null) { // Not a directory\n      String relativePath \u003d file.getAbsolutePath()\n          .substring(root.getAbsolutePath().length() + 1);\n      try {\n        FileInputStream in \u003d new FileInputStream(file.getAbsolutePath());\n        out.putNextEntry(new ZipEntry(relativePath));\n        IOUtils.copyBytes(in, out, getConf(), false);\n        out.closeEntry();\n        in.close();\n      } catch (FileNotFoundException fnfe) {\n        LOG.warn(\"Skipping file; it is a symlink with a nonexistent target: {}\",\n            file);\n      }\n    } else {\n      for (File containedFile : files) {\n        addFileToZipRecursively(root, containedFile, out);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/Client.java"
    }
  }
}