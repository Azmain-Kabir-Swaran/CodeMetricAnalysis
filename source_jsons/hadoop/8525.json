{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImage.java",
  "functionName": "saveNamespace",
  "functionId": "saveNamespace___source-FSNamesystem__nnf-NameNodeFile__canceler-Canceler",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
  "functionStartLine": 1144,
  "functionEndLine": 1188,
  "numCommitsSeen": 123,
  "timeTaken": 4512,
  "changeHistory": [
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
    "a991e899fb9f98d2089f37ac9ac7c485d3bbb959",
    "b1fce2b8b14c4ce43f7098a269ac2b95304db0ce",
    "e0fa49234fd37aca88e1caa95bac77bca192bae4",
    "8def51a708e5de8a57689b8c9b3fd034cfd2cd78",
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5",
    "d3268c4b10a0f728b554ddb6d69b666a9ca13f12"
  ],
  "changeHistoryShort": {
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": "Ybodychange",
    "a991e899fb9f98d2089f37ac9ac7c485d3bbb959": "Ybodychange",
    "b1fce2b8b14c4ce43f7098a269ac2b95304db0ce": "Ybodychange",
    "e0fa49234fd37aca88e1caa95bac77bca192bae4": "Ybodychange",
    "8def51a708e5de8a57689b8c9b3fd034cfd2cd78": "Ybodychange",
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5": "Ybodychange",
    "d3268c4b10a0f728b554ddb6d69b666a9ca13f12": "Ybodychange"
  },
  "changeHistoryDetails": {
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13695. Move logging to slf4j in HDFS package. Contributed by Ian Pickering.\n",
      "commitDate": "06/09/18 2:48 PM",
      "commitName": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "23/08/18 7:44 PM",
      "commitNameOld": "96c4575d7373079becfa3e3db29ba98e6fb86388",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 13.79,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public synchronized void saveNamespace(FSNamesystem source, NameNodeFile nnf,\n       Canceler canceler) throws IOException {\n     assert editLog !\u003d null : \"editLog must be initialized\";\n     LOG.info(\"Save namespace ...\");\n     storage.attemptRestoreRemovedStorage();\n \n     boolean editLogWasOpen \u003d editLog.isSegmentOpen();\n     \n     if (editLogWasOpen) {\n       editLog.endCurrentLogSegment(true);\n     }\n     long imageTxId \u003d getCorrectLastAppliedOrWrittenTxId();\n     if (!addToCheckpointing(imageTxId)) {\n       throw new IOException(\n           \"FS image is being downloaded from another NN at txid \" + imageTxId);\n     }\n     try {\n       try {\n         saveFSImageInAllDirs(source, nnf, imageTxId, canceler);\n         if (!source.isRollingUpgrade()) {\n           updateStorageVersion();\n         }\n       } finally {\n         if (editLogWasOpen) {\n           editLog.startLogSegmentAndWriteHeaderTxn(imageTxId + 1,\n               source.getEffectiveLayoutVersion());\n           // Take this opportunity to note the current transaction.\n           // Even if the namespace save was cancelled, this marker\n           // is only used to determine what transaction ID is required\n           // for startup. So, it doesn\u0027t hurt to update it unnecessarily.\n           storage.writeTransactionIdFileToStorage(imageTxId + 1);\n         }\n       }\n     } finally {\n       removeFromCheckpointing(imageTxId);\n     }\n     //Update NameDirSize Metric\n     getStorage().updateNameDirSize();\n \n     if (exitAfterSave.get()) {\n-      LOG.fatal(\"NameNode process will exit now... The saved FsImage \" +\n+      LOG.error(\"NameNode process will exit now... The saved FsImage \" +\n           nnf + \" is potentially corrupted.\");\n       ExitUtil.terminate(-1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void saveNamespace(FSNamesystem source, NameNodeFile nnf,\n      Canceler canceler) throws IOException {\n    assert editLog !\u003d null : \"editLog must be initialized\";\n    LOG.info(\"Save namespace ...\");\n    storage.attemptRestoreRemovedStorage();\n\n    boolean editLogWasOpen \u003d editLog.isSegmentOpen();\n    \n    if (editLogWasOpen) {\n      editLog.endCurrentLogSegment(true);\n    }\n    long imageTxId \u003d getCorrectLastAppliedOrWrittenTxId();\n    if (!addToCheckpointing(imageTxId)) {\n      throw new IOException(\n          \"FS image is being downloaded from another NN at txid \" + imageTxId);\n    }\n    try {\n      try {\n        saveFSImageInAllDirs(source, nnf, imageTxId, canceler);\n        if (!source.isRollingUpgrade()) {\n          updateStorageVersion();\n        }\n      } finally {\n        if (editLogWasOpen) {\n          editLog.startLogSegmentAndWriteHeaderTxn(imageTxId + 1,\n              source.getEffectiveLayoutVersion());\n          // Take this opportunity to note the current transaction.\n          // Even if the namespace save was cancelled, this marker\n          // is only used to determine what transaction ID is required\n          // for startup. So, it doesn\u0027t hurt to update it unnecessarily.\n          storage.writeTransactionIdFileToStorage(imageTxId + 1);\n        }\n      }\n    } finally {\n      removeFromCheckpointing(imageTxId);\n    }\n    //Update NameDirSize Metric\n    getStorage().updateNameDirSize();\n\n    if (exitAfterSave.get()) {\n      LOG.error(\"NameNode process will exit now... The saved FsImage \" +\n          nnf + \" is potentially corrupted.\");\n      ExitUtil.terminate(-1);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "a991e899fb9f98d2089f37ac9ac7c485d3bbb959": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13314. NameNode should optionally exit if it detects FsImage corruption. Contributed by Arpit Agarwal.\n",
      "commitDate": "28/03/18 12:49 PM",
      "commitName": "a991e899fb9f98d2089f37ac9ac7c485d3bbb959",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "01/05/17 3:29 PM",
      "commitNameOld": "4cfc8664362ed04b01872e854715a36dad9408a6",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 330.89,
      "commitsBetweenForRepo": 2384,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,45 @@\n   public synchronized void saveNamespace(FSNamesystem source, NameNodeFile nnf,\n       Canceler canceler) throws IOException {\n     assert editLog !\u003d null : \"editLog must be initialized\";\n     LOG.info(\"Save namespace ...\");\n     storage.attemptRestoreRemovedStorage();\n \n     boolean editLogWasOpen \u003d editLog.isSegmentOpen();\n     \n     if (editLogWasOpen) {\n       editLog.endCurrentLogSegment(true);\n     }\n     long imageTxId \u003d getCorrectLastAppliedOrWrittenTxId();\n     if (!addToCheckpointing(imageTxId)) {\n       throw new IOException(\n           \"FS image is being downloaded from another NN at txid \" + imageTxId);\n     }\n     try {\n       try {\n         saveFSImageInAllDirs(source, nnf, imageTxId, canceler);\n         if (!source.isRollingUpgrade()) {\n           updateStorageVersion();\n         }\n       } finally {\n         if (editLogWasOpen) {\n           editLog.startLogSegmentAndWriteHeaderTxn(imageTxId + 1,\n               source.getEffectiveLayoutVersion());\n           // Take this opportunity to note the current transaction.\n           // Even if the namespace save was cancelled, this marker\n           // is only used to determine what transaction ID is required\n           // for startup. So, it doesn\u0027t hurt to update it unnecessarily.\n           storage.writeTransactionIdFileToStorage(imageTxId + 1);\n         }\n       }\n     } finally {\n       removeFromCheckpointing(imageTxId);\n     }\n     //Update NameDirSize Metric\n     getStorage().updateNameDirSize();\n+\n+    if (exitAfterSave.get()) {\n+      LOG.fatal(\"NameNode process will exit now... The saved FsImage \" +\n+          nnf + \" is potentially corrupted.\");\n+      ExitUtil.terminate(-1);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void saveNamespace(FSNamesystem source, NameNodeFile nnf,\n      Canceler canceler) throws IOException {\n    assert editLog !\u003d null : \"editLog must be initialized\";\n    LOG.info(\"Save namespace ...\");\n    storage.attemptRestoreRemovedStorage();\n\n    boolean editLogWasOpen \u003d editLog.isSegmentOpen();\n    \n    if (editLogWasOpen) {\n      editLog.endCurrentLogSegment(true);\n    }\n    long imageTxId \u003d getCorrectLastAppliedOrWrittenTxId();\n    if (!addToCheckpointing(imageTxId)) {\n      throw new IOException(\n          \"FS image is being downloaded from another NN at txid \" + imageTxId);\n    }\n    try {\n      try {\n        saveFSImageInAllDirs(source, nnf, imageTxId, canceler);\n        if (!source.isRollingUpgrade()) {\n          updateStorageVersion();\n        }\n      } finally {\n        if (editLogWasOpen) {\n          editLog.startLogSegmentAndWriteHeaderTxn(imageTxId + 1,\n              source.getEffectiveLayoutVersion());\n          // Take this opportunity to note the current transaction.\n          // Even if the namespace save was cancelled, this marker\n          // is only used to determine what transaction ID is required\n          // for startup. So, it doesn\u0027t hurt to update it unnecessarily.\n          storage.writeTransactionIdFileToStorage(imageTxId + 1);\n        }\n      }\n    } finally {\n      removeFromCheckpointing(imageTxId);\n    }\n    //Update NameDirSize Metric\n    getStorage().updateNameDirSize();\n\n    if (exitAfterSave.get()) {\n      LOG.fatal(\"NameNode process will exit now... The saved FsImage \" +\n          nnf + \" is potentially corrupted.\");\n      ExitUtil.terminate(-1);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "b1fce2b8b14c4ce43f7098a269ac2b95304db0ce": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11209. SNN can\u0027t checkpoint when rolling upgrade is not finalized. Contributed by Xiaoyu Yao.\n",
      "commitDate": "17/01/17 2:33 PM",
      "commitName": "b1fce2b8b14c4ce43f7098a269ac2b95304db0ce",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "19/12/16 9:34 PM",
      "commitNameOld": "d2026ae9e6c86f4fd9e48b80e71233181c1853d9",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 28.71,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public synchronized void saveNamespace(FSNamesystem source, NameNodeFile nnf,\n       Canceler canceler) throws IOException {\n     assert editLog !\u003d null : \"editLog must be initialized\";\n     LOG.info(\"Save namespace ...\");\n     storage.attemptRestoreRemovedStorage();\n \n     boolean editLogWasOpen \u003d editLog.isSegmentOpen();\n     \n     if (editLogWasOpen) {\n       editLog.endCurrentLogSegment(true);\n     }\n     long imageTxId \u003d getCorrectLastAppliedOrWrittenTxId();\n     if (!addToCheckpointing(imageTxId)) {\n       throw new IOException(\n           \"FS image is being downloaded from another NN at txid \" + imageTxId);\n     }\n     try {\n       try {\n         saveFSImageInAllDirs(source, nnf, imageTxId, canceler);\n         if (!source.isRollingUpgrade()) {\n-          storage.writeAll();\n+          updateStorageVersion();\n         }\n       } finally {\n         if (editLogWasOpen) {\n           editLog.startLogSegmentAndWriteHeaderTxn(imageTxId + 1,\n               source.getEffectiveLayoutVersion());\n           // Take this opportunity to note the current transaction.\n           // Even if the namespace save was cancelled, this marker\n           // is only used to determine what transaction ID is required\n           // for startup. So, it doesn\u0027t hurt to update it unnecessarily.\n           storage.writeTransactionIdFileToStorage(imageTxId + 1);\n         }\n       }\n     } finally {\n       removeFromCheckpointing(imageTxId);\n     }\n     //Update NameDirSize Metric\n     getStorage().updateNameDirSize();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void saveNamespace(FSNamesystem source, NameNodeFile nnf,\n      Canceler canceler) throws IOException {\n    assert editLog !\u003d null : \"editLog must be initialized\";\n    LOG.info(\"Save namespace ...\");\n    storage.attemptRestoreRemovedStorage();\n\n    boolean editLogWasOpen \u003d editLog.isSegmentOpen();\n    \n    if (editLogWasOpen) {\n      editLog.endCurrentLogSegment(true);\n    }\n    long imageTxId \u003d getCorrectLastAppliedOrWrittenTxId();\n    if (!addToCheckpointing(imageTxId)) {\n      throw new IOException(\n          \"FS image is being downloaded from another NN at txid \" + imageTxId);\n    }\n    try {\n      try {\n        saveFSImageInAllDirs(source, nnf, imageTxId, canceler);\n        if (!source.isRollingUpgrade()) {\n          updateStorageVersion();\n        }\n      } finally {\n        if (editLogWasOpen) {\n          editLog.startLogSegmentAndWriteHeaderTxn(imageTxId + 1,\n              source.getEffectiveLayoutVersion());\n          // Take this opportunity to note the current transaction.\n          // Even if the namespace save was cancelled, this marker\n          // is only used to determine what transaction ID is required\n          // for startup. So, it doesn\u0027t hurt to update it unnecessarily.\n          storage.writeTransactionIdFileToStorage(imageTxId + 1);\n        }\n      }\n    } finally {\n      removeFromCheckpointing(imageTxId);\n    }\n    //Update NameDirSize Metric\n    getStorage().updateNameDirSize();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "e0fa49234fd37aca88e1caa95bac77bca192bae4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11180. Intermittent deadlock in NameNode when failover happens.\n",
      "commitDate": "01/12/16 6:08 AM",
      "commitName": "e0fa49234fd37aca88e1caa95bac77bca192bae4",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "06/09/16 10:38 AM",
      "commitNameOld": "d37dc5d1b8e022a7085118a2e7066623483c293f",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 85.85,
      "commitsBetweenForRepo": 656,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public synchronized void saveNamespace(FSNamesystem source, NameNodeFile nnf,\n       Canceler canceler) throws IOException {\n     assert editLog !\u003d null : \"editLog must be initialized\";\n     LOG.info(\"Save namespace ...\");\n     storage.attemptRestoreRemovedStorage();\n \n     boolean editLogWasOpen \u003d editLog.isSegmentOpen();\n     \n     if (editLogWasOpen) {\n       editLog.endCurrentLogSegment(true);\n     }\n-    long imageTxId \u003d getLastAppliedOrWrittenTxId();\n+    long imageTxId \u003d getCorrectLastAppliedOrWrittenTxId();\n     if (!addToCheckpointing(imageTxId)) {\n       throw new IOException(\n           \"FS image is being downloaded from another NN at txid \" + imageTxId);\n     }\n     try {\n       try {\n         saveFSImageInAllDirs(source, nnf, imageTxId, canceler);\n         if (!source.isRollingUpgrade()) {\n           storage.writeAll();\n         }\n       } finally {\n         if (editLogWasOpen) {\n           editLog.startLogSegmentAndWriteHeaderTxn(imageTxId + 1,\n               source.getEffectiveLayoutVersion());\n           // Take this opportunity to note the current transaction.\n           // Even if the namespace save was cancelled, this marker\n           // is only used to determine what transaction ID is required\n           // for startup. So, it doesn\u0027t hurt to update it unnecessarily.\n           storage.writeTransactionIdFileToStorage(imageTxId + 1);\n         }\n       }\n     } finally {\n       removeFromCheckpointing(imageTxId);\n     }\n     //Update NameDirSize Metric\n     getStorage().updateNameDirSize();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void saveNamespace(FSNamesystem source, NameNodeFile nnf,\n      Canceler canceler) throws IOException {\n    assert editLog !\u003d null : \"editLog must be initialized\";\n    LOG.info(\"Save namespace ...\");\n    storage.attemptRestoreRemovedStorage();\n\n    boolean editLogWasOpen \u003d editLog.isSegmentOpen();\n    \n    if (editLogWasOpen) {\n      editLog.endCurrentLogSegment(true);\n    }\n    long imageTxId \u003d getCorrectLastAppliedOrWrittenTxId();\n    if (!addToCheckpointing(imageTxId)) {\n      throw new IOException(\n          \"FS image is being downloaded from another NN at txid \" + imageTxId);\n    }\n    try {\n      try {\n        saveFSImageInAllDirs(source, nnf, imageTxId, canceler);\n        if (!source.isRollingUpgrade()) {\n          storage.writeAll();\n        }\n      } finally {\n        if (editLogWasOpen) {\n          editLog.startLogSegmentAndWriteHeaderTxn(imageTxId + 1,\n              source.getEffectiveLayoutVersion());\n          // Take this opportunity to note the current transaction.\n          // Even if the namespace save was cancelled, this marker\n          // is only used to determine what transaction ID is required\n          // for startup. So, it doesn\u0027t hurt to update it unnecessarily.\n          storage.writeTransactionIdFileToStorage(imageTxId + 1);\n        }\n      }\n    } finally {\n      removeFromCheckpointing(imageTxId);\n    }\n    //Update NameDirSize Metric\n    getStorage().updateNameDirSize();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "8def51a708e5de8a57689b8c9b3fd034cfd2cd78": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9229. Expose size of NameNode directory as a metric. Contributed by Surendra Singh Lilhore.\n\nChange-Id: I985627a5d1400249d72d084283ef366d5ac6e07b\n",
      "commitDate": "29/10/15 11:23 AM",
      "commitName": "8def51a708e5de8a57689b8c9b3fd034cfd2cd78",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "10/09/15 7:16 AM",
      "commitNameOld": "a40342b0dab1f9137ae4b3679a5aca7f2a57d23d",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 49.17,
      "commitsBetweenForRepo": 411,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,39 @@\n   public synchronized void saveNamespace(FSNamesystem source, NameNodeFile nnf,\n       Canceler canceler) throws IOException {\n     assert editLog !\u003d null : \"editLog must be initialized\";\n     LOG.info(\"Save namespace ...\");\n     storage.attemptRestoreRemovedStorage();\n \n     boolean editLogWasOpen \u003d editLog.isSegmentOpen();\n     \n     if (editLogWasOpen) {\n       editLog.endCurrentLogSegment(true);\n     }\n     long imageTxId \u003d getLastAppliedOrWrittenTxId();\n     if (!addToCheckpointing(imageTxId)) {\n       throw new IOException(\n           \"FS image is being downloaded from another NN at txid \" + imageTxId);\n     }\n     try {\n       try {\n         saveFSImageInAllDirs(source, nnf, imageTxId, canceler);\n         if (!source.isRollingUpgrade()) {\n           storage.writeAll();\n         }\n       } finally {\n         if (editLogWasOpen) {\n           editLog.startLogSegmentAndWriteHeaderTxn(imageTxId + 1,\n               source.getEffectiveLayoutVersion());\n           // Take this opportunity to note the current transaction.\n           // Even if the namespace save was cancelled, this marker\n           // is only used to determine what transaction ID is required\n           // for startup. So, it doesn\u0027t hurt to update it unnecessarily.\n           storage.writeTransactionIdFileToStorage(imageTxId + 1);\n         }\n       }\n     } finally {\n       removeFromCheckpointing(imageTxId);\n     }\n+    //Update NameDirSize Metric\n+    getStorage().updateNameDirSize();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void saveNamespace(FSNamesystem source, NameNodeFile nnf,\n      Canceler canceler) throws IOException {\n    assert editLog !\u003d null : \"editLog must be initialized\";\n    LOG.info(\"Save namespace ...\");\n    storage.attemptRestoreRemovedStorage();\n\n    boolean editLogWasOpen \u003d editLog.isSegmentOpen();\n    \n    if (editLogWasOpen) {\n      editLog.endCurrentLogSegment(true);\n    }\n    long imageTxId \u003d getLastAppliedOrWrittenTxId();\n    if (!addToCheckpointing(imageTxId)) {\n      throw new IOException(\n          \"FS image is being downloaded from another NN at txid \" + imageTxId);\n    }\n    try {\n      try {\n        saveFSImageInAllDirs(source, nnf, imageTxId, canceler);\n        if (!source.isRollingUpgrade()) {\n          storage.writeAll();\n        }\n      } finally {\n        if (editLogWasOpen) {\n          editLog.startLogSegmentAndWriteHeaderTxn(imageTxId + 1,\n              source.getEffectiveLayoutVersion());\n          // Take this opportunity to note the current transaction.\n          // Even if the namespace save was cancelled, this marker\n          // is only used to determine what transaction ID is required\n          // for startup. So, it doesn\u0027t hurt to update it unnecessarily.\n          storage.writeTransactionIdFileToStorage(imageTxId + 1);\n        }\n      }\n    } finally {\n      removeFromCheckpointing(imageTxId);\n    }\n    //Update NameDirSize Metric\n    getStorage().updateNameDirSize();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8432. Introduce a minimum compatible layout version to allow downgrade in more rolling upgrade use cases. Contributed by Chris Nauroth.\n",
      "commitDate": "06/06/15 9:43 AM",
      "commitName": "71de367c5e80ea76d1e8d21f0216cd6b879dcee5",
      "commitAuthor": "cnauroth",
      "commitDateOld": "03/06/15 3:00 AM",
      "commitNameOld": "c59e7456304def867afe35d6ee009ab572f8fdeb",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 3.28,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,37 @@\n   public synchronized void saveNamespace(FSNamesystem source, NameNodeFile nnf,\n       Canceler canceler) throws IOException {\n     assert editLog !\u003d null : \"editLog must be initialized\";\n     LOG.info(\"Save namespace ...\");\n     storage.attemptRestoreRemovedStorage();\n \n     boolean editLogWasOpen \u003d editLog.isSegmentOpen();\n     \n     if (editLogWasOpen) {\n       editLog.endCurrentLogSegment(true);\n     }\n     long imageTxId \u003d getLastAppliedOrWrittenTxId();\n     if (!addToCheckpointing(imageTxId)) {\n       throw new IOException(\n           \"FS image is being downloaded from another NN at txid \" + imageTxId);\n     }\n     try {\n       try {\n         saveFSImageInAllDirs(source, nnf, imageTxId, canceler);\n-        storage.writeAll();\n+        if (!source.isRollingUpgrade()) {\n+          storage.writeAll();\n+        }\n       } finally {\n         if (editLogWasOpen) {\n-          editLog.startLogSegmentAndWriteHeaderTxn(imageTxId + 1);\n+          editLog.startLogSegmentAndWriteHeaderTxn(imageTxId + 1,\n+              source.getEffectiveLayoutVersion());\n           // Take this opportunity to note the current transaction.\n           // Even if the namespace save was cancelled, this marker\n           // is only used to determine what transaction ID is required\n           // for startup. So, it doesn\u0027t hurt to update it unnecessarily.\n           storage.writeTransactionIdFileToStorage(imageTxId + 1);\n         }\n       }\n     } finally {\n       removeFromCheckpointing(imageTxId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void saveNamespace(FSNamesystem source, NameNodeFile nnf,\n      Canceler canceler) throws IOException {\n    assert editLog !\u003d null : \"editLog must be initialized\";\n    LOG.info(\"Save namespace ...\");\n    storage.attemptRestoreRemovedStorage();\n\n    boolean editLogWasOpen \u003d editLog.isSegmentOpen();\n    \n    if (editLogWasOpen) {\n      editLog.endCurrentLogSegment(true);\n    }\n    long imageTxId \u003d getLastAppliedOrWrittenTxId();\n    if (!addToCheckpointing(imageTxId)) {\n      throw new IOException(\n          \"FS image is being downloaded from another NN at txid \" + imageTxId);\n    }\n    try {\n      try {\n        saveFSImageInAllDirs(source, nnf, imageTxId, canceler);\n        if (!source.isRollingUpgrade()) {\n          storage.writeAll();\n        }\n      } finally {\n        if (editLogWasOpen) {\n          editLog.startLogSegmentAndWriteHeaderTxn(imageTxId + 1,\n              source.getEffectiveLayoutVersion());\n          // Take this opportunity to note the current transaction.\n          // Even if the namespace save was cancelled, this marker\n          // is only used to determine what transaction ID is required\n          // for startup. So, it doesn\u0027t hurt to update it unnecessarily.\n          storage.writeTransactionIdFileToStorage(imageTxId + 1);\n        }\n      }\n    } finally {\n      removeFromCheckpointing(imageTxId);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "d3268c4b10a0f728b554ddb6d69b666a9ca13f12": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3519. Checkpoint upload may interfere with a concurrent saveNamespace. Contributed by Ming Ma.\n",
      "commitDate": "22/01/15 4:26 PM",
      "commitName": "d3268c4b10a0f728b554ddb6d69b666a9ca13f12",
      "commitAuthor": "cnauroth",
      "commitDateOld": "01/12/14 9:48 PM",
      "commitNameOld": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 51.78,
      "commitsBetweenForRepo": 321,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,34 @@\n   public synchronized void saveNamespace(FSNamesystem source, NameNodeFile nnf,\n       Canceler canceler) throws IOException {\n     assert editLog !\u003d null : \"editLog must be initialized\";\n     LOG.info(\"Save namespace ...\");\n     storage.attemptRestoreRemovedStorage();\n \n     boolean editLogWasOpen \u003d editLog.isSegmentOpen();\n     \n     if (editLogWasOpen) {\n       editLog.endCurrentLogSegment(true);\n     }\n     long imageTxId \u003d getLastAppliedOrWrittenTxId();\n+    if (!addToCheckpointing(imageTxId)) {\n+      throw new IOException(\n+          \"FS image is being downloaded from another NN at txid \" + imageTxId);\n+    }\n     try {\n-      saveFSImageInAllDirs(source, nnf, imageTxId, canceler);\n-      storage.writeAll();\n-    } finally {\n-      if (editLogWasOpen) {\n-        editLog.startLogSegmentAndWriteHeaderTxn(imageTxId + 1);\n-        // Take this opportunity to note the current transaction.\n-        // Even if the namespace save was cancelled, this marker\n-        // is only used to determine what transaction ID is required\n-        // for startup. So, it doesn\u0027t hurt to update it unnecessarily.\n-        storage.writeTransactionIdFileToStorage(imageTxId + 1);\n+      try {\n+        saveFSImageInAllDirs(source, nnf, imageTxId, canceler);\n+        storage.writeAll();\n+      } finally {\n+        if (editLogWasOpen) {\n+          editLog.startLogSegmentAndWriteHeaderTxn(imageTxId + 1);\n+          // Take this opportunity to note the current transaction.\n+          // Even if the namespace save was cancelled, this marker\n+          // is only used to determine what transaction ID is required\n+          // for startup. So, it doesn\u0027t hurt to update it unnecessarily.\n+          storage.writeTransactionIdFileToStorage(imageTxId + 1);\n+        }\n       }\n+    } finally {\n+      removeFromCheckpointing(imageTxId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void saveNamespace(FSNamesystem source, NameNodeFile nnf,\n      Canceler canceler) throws IOException {\n    assert editLog !\u003d null : \"editLog must be initialized\";\n    LOG.info(\"Save namespace ...\");\n    storage.attemptRestoreRemovedStorage();\n\n    boolean editLogWasOpen \u003d editLog.isSegmentOpen();\n    \n    if (editLogWasOpen) {\n      editLog.endCurrentLogSegment(true);\n    }\n    long imageTxId \u003d getLastAppliedOrWrittenTxId();\n    if (!addToCheckpointing(imageTxId)) {\n      throw new IOException(\n          \"FS image is being downloaded from another NN at txid \" + imageTxId);\n    }\n    try {\n      try {\n        saveFSImageInAllDirs(source, nnf, imageTxId, canceler);\n        storage.writeAll();\n      } finally {\n        if (editLogWasOpen) {\n          editLog.startLogSegmentAndWriteHeaderTxn(imageTxId + 1);\n          // Take this opportunity to note the current transaction.\n          // Even if the namespace save was cancelled, this marker\n          // is only used to determine what transaction ID is required\n          // for startup. So, it doesn\u0027t hurt to update it unnecessarily.\n          storage.writeTransactionIdFileToStorage(imageTxId + 1);\n        }\n      }\n    } finally {\n      removeFromCheckpointing(imageTxId);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    }
  }
}