{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SystemServiceManagerImpl.java",
  "functionName": "scanForUserServiceDefinition",
  "functionId": "scanForUserServiceDefinition___userDirPath-Path__userServices-Map__String,Set__Service____",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/SystemServiceManagerImpl.java",
  "functionStartLine": 307,
  "functionEndLine": 359,
  "numCommitsSeen": 5,
  "timeTaken": 1880,
  "changeHistory": [
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
    "427ad7ecc4afbf2cc4acde22c29a7248c46fb22b",
    "d4e63ccca0763b452e4a0169dd932b3f32066281"
  ],
  "changeHistoryShort": {
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": "Yfilerename",
    "427ad7ecc4afbf2cc4acde22c29a7248c46fb22b": "Ybodychange",
    "d4e63ccca0763b452e4a0169dd932b3f32066281": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7530.  Refactored YARN service API project location.\n            Contributed by Chandni Singh\n",
      "commitDate": "18/05/18 2:29 PM",
      "commitName": "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/05/18 11:29 AM",
      "commitNameOld": "89f59113927dd886f09d8fe2c05ff2cd5d1390c1",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void scanForUserServiceDefinition(Path userDirPath,\n      Map\u003cString, Set\u003cService\u003e\u003e userServices) throws IOException {\n    LOG.info(\"Scan for users on {}\", userDirPath);\n    RemoteIterator\u003cFileStatus\u003e iterUsers \u003d list(userDirPath);\n    while (iterUsers.hasNext()) {\n      FileStatus userDir \u003d iterUsers.next();\n      // if 1st level is not user directory then skip it.\n      if (!userDir.isDirectory()) {\n        LOG.info(\n            \"Service definition {} doesn\u0027t belong to any user. Ignoring.. \",\n            userDir.getPath().getName());\n        continue;\n      }\n      String userName \u003d userDir.getPath().getName();\n      LOG.info(\"Scanning service definitions for user {}.\", userName);\n\n      //2nd level scan\n      RemoteIterator\u003cFileStatus\u003e iterServices \u003d list(userDir.getPath());\n      while (iterServices.hasNext()) {\n        FileStatus serviceCache \u003d iterServices.next();\n        String filename \u003d serviceCache.getPath().getName();\n        if (!serviceCache.isFile()) {\n          LOG.info(\"Scanner skips for unknown dir {}\", filename);\n          continue;\n        }\n        if (!filename.endsWith(YARN_FILE_SUFFIX)) {\n          LOG.info(\"Scanner skips for unknown file extension, filename \u003d {}\",\n              filename);\n          badFileNameExtensionSkipCounter++;\n          continue;\n        }\n        Service service \u003d getServiceDefinition(serviceCache.getPath());\n        if (service !\u003d null) {\n          Set\u003cService\u003e services \u003d userServices.get(userName);\n          if (services \u003d\u003d null) {\n            services \u003d new HashSet\u003c\u003e();\n            userServices.put(userName, services);\n          }\n          if (!services.add(service)) {\n            int count \u003d ignoredUserServices.containsKey(userName) ?\n                ignoredUserServices.get(userName) : 0;\n            ignoredUserServices.put(userName, count + 1);\n            LOG.warn(\n                \"Ignoring service {} for the user {} as it is already present,\"\n                    + \" filename \u003d {}\", service.getName(), userName, filename);\n          } else {\n            LOG.info(\"Added service {} for the user {}, filename \u003d {}\",\n                service.getName(), userName, filename);\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/SystemServiceManagerImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/SystemServiceManagerImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/SystemServiceManagerImpl.java"
      }
    },
    "427ad7ecc4afbf2cc4acde22c29a7248c46fb22b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8126. Support auto-spawning of admin configured services during bootstrap of RM. Contributed by Rohith Sharma K S.\n",
      "commitDate": "17/04/18 2:38 AM",
      "commitName": "427ad7ecc4afbf2cc4acde22c29a7248c46fb22b",
      "commitAuthor": "Sunil G",
      "commitDateOld": "06/04/18 9:24 PM",
      "commitNameOld": "d4e63ccca0763b452e4a0169dd932b3f32066281",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 10.22,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n   private void scanForUserServiceDefinition(Path userDirPath,\n       Map\u003cString, Set\u003cService\u003e\u003e userServices) throws IOException {\n     LOG.info(\"Scan for users on {}\", userDirPath);\n     RemoteIterator\u003cFileStatus\u003e iterUsers \u003d list(userDirPath);\n     while (iterUsers.hasNext()) {\n       FileStatus userDir \u003d iterUsers.next();\n       // if 1st level is not user directory then skip it.\n       if (!userDir.isDirectory()) {\n         LOG.info(\n             \"Service definition {} doesn\u0027t belong to any user. Ignoring.. \",\n             userDir.getPath().getName());\n         continue;\n       }\n       String userName \u003d userDir.getPath().getName();\n       LOG.info(\"Scanning service definitions for user {}.\", userName);\n \n       //2nd level scan\n       RemoteIterator\u003cFileStatus\u003e iterServices \u003d list(userDir.getPath());\n       while (iterServices.hasNext()) {\n         FileStatus serviceCache \u003d iterServices.next();\n         String filename \u003d serviceCache.getPath().getName();\n         if (!serviceCache.isFile()) {\n           LOG.info(\"Scanner skips for unknown dir {}\", filename);\n           continue;\n         }\n         if (!filename.endsWith(YARN_FILE_SUFFIX)) {\n           LOG.info(\"Scanner skips for unknown file extension, filename \u003d {}\",\n               filename);\n-          skipCounter++;\n+          badFileNameExtensionSkipCounter++;\n           continue;\n         }\n         Service service \u003d getServiceDefinition(serviceCache.getPath());\n         if (service !\u003d null) {\n           Set\u003cService\u003e services \u003d userServices.get(userName);\n           if (services \u003d\u003d null) {\n             services \u003d new HashSet\u003c\u003e();\n             userServices.put(userName, services);\n           }\n           if (!services.add(service)) {\n             int count \u003d ignoredUserServices.containsKey(userName) ?\n                 ignoredUserServices.get(userName) : 0;\n             ignoredUserServices.put(userName, count + 1);\n             LOG.warn(\n                 \"Ignoring service {} for the user {} as it is already present,\"\n                     + \" filename \u003d {}\", service.getName(), userName, filename);\n+          } else {\n+            LOG.info(\"Added service {} for the user {}, filename \u003d {}\",\n+                service.getName(), userName, filename);\n           }\n-          LOG.info(\"Added service {} for the user {}, filename \u003d {}\",\n-              service.getName(), userName, filename);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void scanForUserServiceDefinition(Path userDirPath,\n      Map\u003cString, Set\u003cService\u003e\u003e userServices) throws IOException {\n    LOG.info(\"Scan for users on {}\", userDirPath);\n    RemoteIterator\u003cFileStatus\u003e iterUsers \u003d list(userDirPath);\n    while (iterUsers.hasNext()) {\n      FileStatus userDir \u003d iterUsers.next();\n      // if 1st level is not user directory then skip it.\n      if (!userDir.isDirectory()) {\n        LOG.info(\n            \"Service definition {} doesn\u0027t belong to any user. Ignoring.. \",\n            userDir.getPath().getName());\n        continue;\n      }\n      String userName \u003d userDir.getPath().getName();\n      LOG.info(\"Scanning service definitions for user {}.\", userName);\n\n      //2nd level scan\n      RemoteIterator\u003cFileStatus\u003e iterServices \u003d list(userDir.getPath());\n      while (iterServices.hasNext()) {\n        FileStatus serviceCache \u003d iterServices.next();\n        String filename \u003d serviceCache.getPath().getName();\n        if (!serviceCache.isFile()) {\n          LOG.info(\"Scanner skips for unknown dir {}\", filename);\n          continue;\n        }\n        if (!filename.endsWith(YARN_FILE_SUFFIX)) {\n          LOG.info(\"Scanner skips for unknown file extension, filename \u003d {}\",\n              filename);\n          badFileNameExtensionSkipCounter++;\n          continue;\n        }\n        Service service \u003d getServiceDefinition(serviceCache.getPath());\n        if (service !\u003d null) {\n          Set\u003cService\u003e services \u003d userServices.get(userName);\n          if (services \u003d\u003d null) {\n            services \u003d new HashSet\u003c\u003e();\n            userServices.put(userName, services);\n          }\n          if (!services.add(service)) {\n            int count \u003d ignoredUserServices.containsKey(userName) ?\n                ignoredUserServices.get(userName) : 0;\n            ignoredUserServices.put(userName, count + 1);\n            LOG.warn(\n                \"Ignoring service {} for the user {} as it is already present,\"\n                    + \" filename \u003d {}\", service.getName(), userName, filename);\n          } else {\n            LOG.info(\"Added service {} for the user {}, filename \u003d {}\",\n                service.getName(), userName, filename);\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/SystemServiceManagerImpl.java",
      "extendedDetails": {}
    },
    "d4e63ccca0763b452e4a0169dd932b3f32066281": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8048. Support auto-spawning of admin configured services during bootstrap of RM (Rohith Sharma K S via wangda)\n\nChange-Id: I2d8d61ccad55e1118009294d7e17822df3cd0fd5\n",
      "commitDate": "06/04/18 9:24 PM",
      "commitName": "d4e63ccca0763b452e4a0169dd932b3f32066281",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,52 @@\n+  private void scanForUserServiceDefinition(Path userDirPath,\n+      Map\u003cString, Set\u003cService\u003e\u003e userServices) throws IOException {\n+    LOG.info(\"Scan for users on {}\", userDirPath);\n+    RemoteIterator\u003cFileStatus\u003e iterUsers \u003d list(userDirPath);\n+    while (iterUsers.hasNext()) {\n+      FileStatus userDir \u003d iterUsers.next();\n+      // if 1st level is not user directory then skip it.\n+      if (!userDir.isDirectory()) {\n+        LOG.info(\n+            \"Service definition {} doesn\u0027t belong to any user. Ignoring.. \",\n+            userDir.getPath().getName());\n+        continue;\n+      }\n+      String userName \u003d userDir.getPath().getName();\n+      LOG.info(\"Scanning service definitions for user {}.\", userName);\n+\n+      //2nd level scan\n+      RemoteIterator\u003cFileStatus\u003e iterServices \u003d list(userDir.getPath());\n+      while (iterServices.hasNext()) {\n+        FileStatus serviceCache \u003d iterServices.next();\n+        String filename \u003d serviceCache.getPath().getName();\n+        if (!serviceCache.isFile()) {\n+          LOG.info(\"Scanner skips for unknown dir {}\", filename);\n+          continue;\n+        }\n+        if (!filename.endsWith(YARN_FILE_SUFFIX)) {\n+          LOG.info(\"Scanner skips for unknown file extension, filename \u003d {}\",\n+              filename);\n+          skipCounter++;\n+          continue;\n+        }\n+        Service service \u003d getServiceDefinition(serviceCache.getPath());\n+        if (service !\u003d null) {\n+          Set\u003cService\u003e services \u003d userServices.get(userName);\n+          if (services \u003d\u003d null) {\n+            services \u003d new HashSet\u003c\u003e();\n+            userServices.put(userName, services);\n+          }\n+          if (!services.add(service)) {\n+            int count \u003d ignoredUserServices.containsKey(userName) ?\n+                ignoredUserServices.get(userName) : 0;\n+            ignoredUserServices.put(userName, count + 1);\n+            LOG.warn(\n+                \"Ignoring service {} for the user {} as it is already present,\"\n+                    + \" filename \u003d {}\", service.getName(), userName, filename);\n+          }\n+          LOG.info(\"Added service {} for the user {}, filename \u003d {}\",\n+              service.getName(), userName, filename);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void scanForUserServiceDefinition(Path userDirPath,\n      Map\u003cString, Set\u003cService\u003e\u003e userServices) throws IOException {\n    LOG.info(\"Scan for users on {}\", userDirPath);\n    RemoteIterator\u003cFileStatus\u003e iterUsers \u003d list(userDirPath);\n    while (iterUsers.hasNext()) {\n      FileStatus userDir \u003d iterUsers.next();\n      // if 1st level is not user directory then skip it.\n      if (!userDir.isDirectory()) {\n        LOG.info(\n            \"Service definition {} doesn\u0027t belong to any user. Ignoring.. \",\n            userDir.getPath().getName());\n        continue;\n      }\n      String userName \u003d userDir.getPath().getName();\n      LOG.info(\"Scanning service definitions for user {}.\", userName);\n\n      //2nd level scan\n      RemoteIterator\u003cFileStatus\u003e iterServices \u003d list(userDir.getPath());\n      while (iterServices.hasNext()) {\n        FileStatus serviceCache \u003d iterServices.next();\n        String filename \u003d serviceCache.getPath().getName();\n        if (!serviceCache.isFile()) {\n          LOG.info(\"Scanner skips for unknown dir {}\", filename);\n          continue;\n        }\n        if (!filename.endsWith(YARN_FILE_SUFFIX)) {\n          LOG.info(\"Scanner skips for unknown file extension, filename \u003d {}\",\n              filename);\n          skipCounter++;\n          continue;\n        }\n        Service service \u003d getServiceDefinition(serviceCache.getPath());\n        if (service !\u003d null) {\n          Set\u003cService\u003e services \u003d userServices.get(userName);\n          if (services \u003d\u003d null) {\n            services \u003d new HashSet\u003c\u003e();\n            userServices.put(userName, services);\n          }\n          if (!services.add(service)) {\n            int count \u003d ignoredUserServices.containsKey(userName) ?\n                ignoredUserServices.get(userName) : 0;\n            ignoredUserServices.put(userName, count + 1);\n            LOG.warn(\n                \"Ignoring service {} for the user {} as it is already present,\"\n                    + \" filename \u003d {}\", service.getName(), userName, filename);\n          }\n          LOG.info(\"Added service {} for the user {}, filename \u003d {}\",\n              service.getName(), userName, filename);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/SystemServiceManagerImpl.java"
    }
  }
}