{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNodeHttpServer.java",
  "functionName": "initWebHdfs",
  "functionId": "initWebHdfs___conf-Configuration__hostname-String__httpKeytab-String__httpServer2-HttpServer2__jerseyResourcePackage-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
  "functionStartLine": 79,
  "functionEndLine": 110,
  "numCommitsSeen": 175,
  "timeTaken": 9165,
  "changeHistory": [
    "da0006fe0473e353ee2d489156248a01aa982dfd",
    "294695dd57cb75f2756a31a54264bdd37b32bb01",
    "f0ce072934515d39e9bf61744058ecad3393291e",
    "6e31a090842f8aeedb331b653b075499f8df6c60",
    "e24ed47d9a19f34a4dd8d4bad9b5c78ca3dd1c2e",
    "5d1889a66d91608d34ca9411fb6e9161e637e9d3",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
    "80278a5f85a91b3e02e700e0b3c0a433c15e0565",
    "ef90940594926752a310e9685c67fddd6e42e85d",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4",
    "91d0b4727066241c900037f9a10e28b143489172",
    "859e425dfa2269ad33f1790e69f3ef189d6485d5",
    "f5e83a0b3e33376d3378b23f6889d954f4e975f3",
    "d02baff9a0d8cec92bde751777f3e575da2339c8"
  ],
  "changeHistoryShort": {
    "da0006fe0473e353ee2d489156248a01aa982dfd": "Ybodychange",
    "294695dd57cb75f2756a31a54264bdd37b32bb01": "Ybodychange",
    "f0ce072934515d39e9bf61744058ecad3393291e": "Ymultichange(Yparameterchange,Ybodychange)",
    "6e31a090842f8aeedb331b653b075499f8df6c60": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "e24ed47d9a19f34a4dd8d4bad9b5c78ca3dd1c2e": "Ybodychange",
    "5d1889a66d91608d34ca9411fb6e9161e637e9d3": "Ybodychange",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": "Ybodychange",
    "80278a5f85a91b3e02e700e0b3c0a433c15e0565": "Ybodychange",
    "ef90940594926752a310e9685c67fddd6e42e85d": "Ybodychange",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": "Ybodychange",
    "91d0b4727066241c900037f9a10e28b143489172": "Ybodychange",
    "859e425dfa2269ad33f1790e69f3ef189d6485d5": "Ybodychange",
    "f5e83a0b3e33376d3378b23f6889d954f4e975f3": "Ybodychange",
    "d02baff9a0d8cec92bde751777f3e575da2339c8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "da0006fe0473e353ee2d489156248a01aa982dfd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14423. Percent (%) and plus (+) characters no longer work in WebHDFS.\n\nSigned-off-by: Masatake Iwasaki \u003ciwasakims@apache.org\u003e\n",
      "commitDate": "13/08/19 4:39 PM",
      "commitName": "da0006fe0473e353ee2d489156248a01aa982dfd",
      "commitAuthor": "Masatake Iwasaki",
      "commitDateOld": "11/06/19 3:41 PM",
      "commitNameOld": "4ea6c2f457496461afc63f38ef4cef3ab0efce49",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 63.04,
      "commitsBetweenForRepo": 538,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,32 @@\n   public static void initWebHdfs(Configuration conf, String hostname,\n       String httpKeytab,\n       HttpServer2 httpServer2, String jerseyResourcePackage)\n       throws IOException {\n     // set user pattern based on configuration file\n     UserParam.setUserPattern(conf.get(\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n     AclPermissionParam.setAclPermissionPattern(conf.get(\n         HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,\n         HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_DEFAULT));\n \n     final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n \n     // add REST CSRF prevention filter\n     if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n         DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n       Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n           .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n       String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n       HttpServer2.defineFilter(httpServer2.getWebAppContext(),\n           restCsrfClassName, restCsrfClassName, restCsrfParams,\n           new String[] {pathSpec});\n     }\n \n     // add webhdfs packages\n+    final Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();\n+    params.put(ResourceConfig.FEATURE_MATCH_MATRIX_PARAMS, \"true\");\n     httpServer2.addJerseyResourcePackage(\n         jerseyResourcePackage + \";\" + Param.class.getPackage().getName(),\n-        pathSpec);\n+        pathSpec, params);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void initWebHdfs(Configuration conf, String hostname,\n      String httpKeytab,\n      HttpServer2 httpServer2, String jerseyResourcePackage)\n      throws IOException {\n    // set user pattern based on configuration file\n    UserParam.setUserPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n    AclPermissionParam.setAclPermissionPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_DEFAULT));\n\n    final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n\n    // add REST CSRF prevention filter\n    if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n        DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n      Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n          .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n      String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n      HttpServer2.defineFilter(httpServer2.getWebAppContext(),\n          restCsrfClassName, restCsrfClassName, restCsrfParams,\n          new String[] {pathSpec});\n    }\n\n    // add webhdfs packages\n    final Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();\n    params.put(ResourceConfig.FEATURE_MATCH_MATRIX_PARAMS, \"true\");\n    httpServer2.addJerseyResourcePackage(\n        jerseyResourcePackage + \";\" + Param.class.getPackage().getName(),\n        pathSpec, params);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
      "extendedDetails": {}
    },
    "294695dd57cb75f2756a31a54264bdd37b32bb01": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16314.  Make sure all web end points are covered by the same authentication filter.\n               Contributed by Prabhu Joseph\n",
      "commitDate": "05/06/19 3:55 PM",
      "commitName": "294695dd57cb75f2756a31a54264bdd37b32bb01",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "14/12/18 11:10 AM",
      "commitNameOld": "00d5e631b596f8712600879366e5283829e7ee5d",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 173.16,
      "commitsBetweenForRepo": 1197,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,30 @@\n   public static void initWebHdfs(Configuration conf, String hostname,\n       String httpKeytab,\n       HttpServer2 httpServer2, String jerseyResourcePackage)\n       throws IOException {\n     // set user pattern based on configuration file\n     UserParam.setUserPattern(conf.get(\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n     AclPermissionParam.setAclPermissionPattern(conf.get(\n         HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,\n         HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_DEFAULT));\n \n-    // add authentication filter for webhdfs\n-    final String className \u003d conf.get(\n-        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n-        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n-    final String name \u003d className;\n-\n     final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n-    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf, hostname,\n-        httpKeytab);\n-    HttpServer2.defineFilter(httpServer2.getWebAppContext(), name, className,\n-        params, new String[] { pathSpec });\n-    HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n-        + \")\");\n \n     // add REST CSRF prevention filter\n     if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n         DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n       Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n           .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n       String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n       HttpServer2.defineFilter(httpServer2.getWebAppContext(),\n           restCsrfClassName, restCsrfClassName, restCsrfParams,\n           new String[] {pathSpec});\n     }\n \n     // add webhdfs packages\n     httpServer2.addJerseyResourcePackage(\n         jerseyResourcePackage + \";\" + Param.class.getPackage().getName(),\n         pathSpec);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void initWebHdfs(Configuration conf, String hostname,\n      String httpKeytab,\n      HttpServer2 httpServer2, String jerseyResourcePackage)\n      throws IOException {\n    // set user pattern based on configuration file\n    UserParam.setUserPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n    AclPermissionParam.setAclPermissionPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_DEFAULT));\n\n    final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n\n    // add REST CSRF prevention filter\n    if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n        DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n      Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n          .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n      String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n      HttpServer2.defineFilter(httpServer2.getWebAppContext(),\n          restCsrfClassName, restCsrfClassName, restCsrfParams,\n          new String[] {pathSpec});\n    }\n\n    // add webhdfs packages\n    httpServer2.addJerseyResourcePackage(\n        jerseyResourcePackage + \";\" + Param.class.getPackage().getName(),\n        pathSpec);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
      "extendedDetails": {}
    },
    "f0ce072934515d39e9bf61744058ecad3393291e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-14051. Refactor NameNodeHttpServer#initWebHdfs to specify local keytab. Contributed by CR Hota.\n",
      "commitDate": "06/11/18 10:05 AM",
      "commitName": "f0ce072934515d39e9bf61744058ecad3393291e",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14051. Refactor NameNodeHttpServer#initWebHdfs to specify local keytab. Contributed by CR Hota.\n",
          "commitDate": "06/11/18 10:05 AM",
          "commitName": "f0ce072934515d39e9bf61744058ecad3393291e",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "05/09/18 10:50 AM",
          "commitNameOld": "9af96d4ed4b6f80d3ca53a2b003d2ef768650dd4",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 62.01,
          "commitsBetweenForRepo": 624,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,42 @@\n   public static void initWebHdfs(Configuration conf, String hostname,\n+      String httpKeytab,\n       HttpServer2 httpServer2, String jerseyResourcePackage)\n       throws IOException {\n     // set user pattern based on configuration file\n     UserParam.setUserPattern(conf.get(\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n     AclPermissionParam.setAclPermissionPattern(conf.get(\n         HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,\n         HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_DEFAULT));\n \n     // add authentication filter for webhdfs\n     final String className \u003d conf.get(\n         DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n         DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n     final String name \u003d className;\n \n     final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n-    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf, hostname);\n+    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf, hostname,\n+        httpKeytab);\n     HttpServer2.defineFilter(httpServer2.getWebAppContext(), name, className,\n         params, new String[] { pathSpec });\n     HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n         + \")\");\n \n     // add REST CSRF prevention filter\n     if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n         DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n       Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n           .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n       String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n       HttpServer2.defineFilter(httpServer2.getWebAppContext(),\n           restCsrfClassName, restCsrfClassName, restCsrfParams,\n           new String[] {pathSpec});\n     }\n \n     // add webhdfs packages\n     httpServer2.addJerseyResourcePackage(\n         jerseyResourcePackage + \";\" + Param.class.getPackage().getName(),\n         pathSpec);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void initWebHdfs(Configuration conf, String hostname,\n      String httpKeytab,\n      HttpServer2 httpServer2, String jerseyResourcePackage)\n      throws IOException {\n    // set user pattern based on configuration file\n    UserParam.setUserPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n    AclPermissionParam.setAclPermissionPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_DEFAULT));\n\n    // add authentication filter for webhdfs\n    final String className \u003d conf.get(\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n    final String name \u003d className;\n\n    final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf, hostname,\n        httpKeytab);\n    HttpServer2.defineFilter(httpServer2.getWebAppContext(), name, className,\n        params, new String[] { pathSpec });\n    HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n        + \")\");\n\n    // add REST CSRF prevention filter\n    if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n        DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n      Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n          .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n      String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n      HttpServer2.defineFilter(httpServer2.getWebAppContext(),\n          restCsrfClassName, restCsrfClassName, restCsrfParams,\n          new String[] {pathSpec});\n    }\n\n    // add webhdfs packages\n    httpServer2.addJerseyResourcePackage(\n        jerseyResourcePackage + \";\" + Param.class.getPackage().getName(),\n        pathSpec);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, hostname-String, httpServer2-HttpServer2, jerseyResourcePackage-String]",
            "newValue": "[conf-Configuration, hostname-String, httpKeytab-String, httpServer2-HttpServer2, jerseyResourcePackage-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14051. Refactor NameNodeHttpServer#initWebHdfs to specify local keytab. Contributed by CR Hota.\n",
          "commitDate": "06/11/18 10:05 AM",
          "commitName": "f0ce072934515d39e9bf61744058ecad3393291e",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "05/09/18 10:50 AM",
          "commitNameOld": "9af96d4ed4b6f80d3ca53a2b003d2ef768650dd4",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 62.01,
          "commitsBetweenForRepo": 624,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,42 @@\n   public static void initWebHdfs(Configuration conf, String hostname,\n+      String httpKeytab,\n       HttpServer2 httpServer2, String jerseyResourcePackage)\n       throws IOException {\n     // set user pattern based on configuration file\n     UserParam.setUserPattern(conf.get(\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n     AclPermissionParam.setAclPermissionPattern(conf.get(\n         HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,\n         HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_DEFAULT));\n \n     // add authentication filter for webhdfs\n     final String className \u003d conf.get(\n         DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n         DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n     final String name \u003d className;\n \n     final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n-    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf, hostname);\n+    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf, hostname,\n+        httpKeytab);\n     HttpServer2.defineFilter(httpServer2.getWebAppContext(), name, className,\n         params, new String[] { pathSpec });\n     HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n         + \")\");\n \n     // add REST CSRF prevention filter\n     if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n         DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n       Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n           .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n       String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n       HttpServer2.defineFilter(httpServer2.getWebAppContext(),\n           restCsrfClassName, restCsrfClassName, restCsrfParams,\n           new String[] {pathSpec});\n     }\n \n     // add webhdfs packages\n     httpServer2.addJerseyResourcePackage(\n         jerseyResourcePackage + \";\" + Param.class.getPackage().getName(),\n         pathSpec);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void initWebHdfs(Configuration conf, String hostname,\n      String httpKeytab,\n      HttpServer2 httpServer2, String jerseyResourcePackage)\n      throws IOException {\n    // set user pattern based on configuration file\n    UserParam.setUserPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n    AclPermissionParam.setAclPermissionPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_DEFAULT));\n\n    // add authentication filter for webhdfs\n    final String className \u003d conf.get(\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n    final String name \u003d className;\n\n    final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf, hostname,\n        httpKeytab);\n    HttpServer2.defineFilter(httpServer2.getWebAppContext(), name, className,\n        params, new String[] { pathSpec });\n    HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n        + \")\");\n\n    // add REST CSRF prevention filter\n    if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n        DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n      Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n          .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n      String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n      HttpServer2.defineFilter(httpServer2.getWebAppContext(),\n          restCsrfClassName, restCsrfClassName, restCsrfParams,\n          new String[] {pathSpec});\n    }\n\n    // add webhdfs packages\n    httpServer2.addJerseyResourcePackage(\n        jerseyResourcePackage + \";\" + Param.class.getPackage().getName(),\n        pathSpec);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "6e31a090842f8aeedb331b653b075499f8df6c60": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-12512. RBF: Add WebHDFS.\n",
      "commitDate": "23/03/18 8:32 AM",
      "commitName": "6e31a090842f8aeedb331b653b075499f8df6c60",
      "commitAuthor": "weiy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12512. RBF: Add WebHDFS.\n",
          "commitDate": "23/03/18 8:32 AM",
          "commitName": "6e31a090842f8aeedb331b653b075499f8df6c60",
          "commitAuthor": "weiy",
          "commitDateOld": "24/02/17 4:49 PM",
          "commitNameOld": "e24ed47d9a19f34a4dd8d4bad9b5c78ca3dd1c2e",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 391.61,
          "commitsBetweenForRepo": 2732,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,40 @@\n-  private void initWebHdfs(Configuration conf) throws IOException {\n+  public static void initWebHdfs(Configuration conf, String hostname,\n+      HttpServer2 httpServer2, String jerseyResourcePackage)\n+      throws IOException {\n     // set user pattern based on configuration file\n     UserParam.setUserPattern(conf.get(\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n     AclPermissionParam.setAclPermissionPattern(conf.get(\n         HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,\n         HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_DEFAULT));\n \n     // add authentication filter for webhdfs\n     final String className \u003d conf.get(\n         DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n         DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n     final String name \u003d className;\n \n     final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n-    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n-    HttpServer2.defineFilter(httpServer.getWebAppContext(), name, className,\n+    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf, hostname);\n+    HttpServer2.defineFilter(httpServer2.getWebAppContext(), name, className,\n         params, new String[] { pathSpec });\n     HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n         + \")\");\n \n     // add REST CSRF prevention filter\n     if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n         DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n       Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n           .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n       String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n-      HttpServer2.defineFilter(httpServer.getWebAppContext(), restCsrfClassName,\n-          restCsrfClassName, restCsrfParams, new String[] {pathSpec});\n+      HttpServer2.defineFilter(httpServer2.getWebAppContext(),\n+          restCsrfClassName, restCsrfClassName, restCsrfParams,\n+          new String[] {pathSpec});\n     }\n \n     // add webhdfs packages\n-    httpServer.addJerseyResourcePackage(NamenodeWebHdfsMethods.class\n-        .getPackage().getName() + \";\" + Param.class.getPackage().getName(),\n+    httpServer2.addJerseyResourcePackage(\n+        jerseyResourcePackage + \";\" + Param.class.getPackage().getName(),\n         pathSpec);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void initWebHdfs(Configuration conf, String hostname,\n      HttpServer2 httpServer2, String jerseyResourcePackage)\n      throws IOException {\n    // set user pattern based on configuration file\n    UserParam.setUserPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n    AclPermissionParam.setAclPermissionPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_DEFAULT));\n\n    // add authentication filter for webhdfs\n    final String className \u003d conf.get(\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n    final String name \u003d className;\n\n    final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf, hostname);\n    HttpServer2.defineFilter(httpServer2.getWebAppContext(), name, className,\n        params, new String[] { pathSpec });\n    HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n        + \")\");\n\n    // add REST CSRF prevention filter\n    if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n        DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n      Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n          .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n      String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n      HttpServer2.defineFilter(httpServer2.getWebAppContext(),\n          restCsrfClassName, restCsrfClassName, restCsrfParams,\n          new String[] {pathSpec});\n    }\n\n    // add webhdfs packages\n    httpServer2.addJerseyResourcePackage(\n        jerseyResourcePackage + \";\" + Param.class.getPackage().getName(),\n        pathSpec);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[conf-Configuration, hostname-String, httpServer2-HttpServer2, jerseyResourcePackage-String]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-12512. RBF: Add WebHDFS.\n",
          "commitDate": "23/03/18 8:32 AM",
          "commitName": "6e31a090842f8aeedb331b653b075499f8df6c60",
          "commitAuthor": "weiy",
          "commitDateOld": "24/02/17 4:49 PM",
          "commitNameOld": "e24ed47d9a19f34a4dd8d4bad9b5c78ca3dd1c2e",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 391.61,
          "commitsBetweenForRepo": 2732,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,40 @@\n-  private void initWebHdfs(Configuration conf) throws IOException {\n+  public static void initWebHdfs(Configuration conf, String hostname,\n+      HttpServer2 httpServer2, String jerseyResourcePackage)\n+      throws IOException {\n     // set user pattern based on configuration file\n     UserParam.setUserPattern(conf.get(\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n     AclPermissionParam.setAclPermissionPattern(conf.get(\n         HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,\n         HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_DEFAULT));\n \n     // add authentication filter for webhdfs\n     final String className \u003d conf.get(\n         DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n         DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n     final String name \u003d className;\n \n     final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n-    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n-    HttpServer2.defineFilter(httpServer.getWebAppContext(), name, className,\n+    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf, hostname);\n+    HttpServer2.defineFilter(httpServer2.getWebAppContext(), name, className,\n         params, new String[] { pathSpec });\n     HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n         + \")\");\n \n     // add REST CSRF prevention filter\n     if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n         DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n       Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n           .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n       String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n-      HttpServer2.defineFilter(httpServer.getWebAppContext(), restCsrfClassName,\n-          restCsrfClassName, restCsrfParams, new String[] {pathSpec});\n+      HttpServer2.defineFilter(httpServer2.getWebAppContext(),\n+          restCsrfClassName, restCsrfClassName, restCsrfParams,\n+          new String[] {pathSpec});\n     }\n \n     // add webhdfs packages\n-    httpServer.addJerseyResourcePackage(NamenodeWebHdfsMethods.class\n-        .getPackage().getName() + \";\" + Param.class.getPackage().getName(),\n+    httpServer2.addJerseyResourcePackage(\n+        jerseyResourcePackage + \";\" + Param.class.getPackage().getName(),\n         pathSpec);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void initWebHdfs(Configuration conf, String hostname,\n      HttpServer2 httpServer2, String jerseyResourcePackage)\n      throws IOException {\n    // set user pattern based on configuration file\n    UserParam.setUserPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n    AclPermissionParam.setAclPermissionPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_DEFAULT));\n\n    // add authentication filter for webhdfs\n    final String className \u003d conf.get(\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n    final String name \u003d className;\n\n    final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf, hostname);\n    HttpServer2.defineFilter(httpServer2.getWebAppContext(), name, className,\n        params, new String[] { pathSpec });\n    HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n        + \")\");\n\n    // add REST CSRF prevention filter\n    if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n        DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n      Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n          .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n      String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n      HttpServer2.defineFilter(httpServer2.getWebAppContext(),\n          restCsrfClassName, restCsrfClassName, restCsrfParams,\n          new String[] {pathSpec});\n    }\n\n    // add webhdfs packages\n    httpServer2.addJerseyResourcePackage(\n        jerseyResourcePackage + \";\" + Param.class.getPackage().getName(),\n        pathSpec);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12512. RBF: Add WebHDFS.\n",
          "commitDate": "23/03/18 8:32 AM",
          "commitName": "6e31a090842f8aeedb331b653b075499f8df6c60",
          "commitAuthor": "weiy",
          "commitDateOld": "24/02/17 4:49 PM",
          "commitNameOld": "e24ed47d9a19f34a4dd8d4bad9b5c78ca3dd1c2e",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 391.61,
          "commitsBetweenForRepo": 2732,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,40 @@\n-  private void initWebHdfs(Configuration conf) throws IOException {\n+  public static void initWebHdfs(Configuration conf, String hostname,\n+      HttpServer2 httpServer2, String jerseyResourcePackage)\n+      throws IOException {\n     // set user pattern based on configuration file\n     UserParam.setUserPattern(conf.get(\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n     AclPermissionParam.setAclPermissionPattern(conf.get(\n         HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,\n         HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_DEFAULT));\n \n     // add authentication filter for webhdfs\n     final String className \u003d conf.get(\n         DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n         DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n     final String name \u003d className;\n \n     final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n-    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n-    HttpServer2.defineFilter(httpServer.getWebAppContext(), name, className,\n+    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf, hostname);\n+    HttpServer2.defineFilter(httpServer2.getWebAppContext(), name, className,\n         params, new String[] { pathSpec });\n     HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n         + \")\");\n \n     // add REST CSRF prevention filter\n     if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n         DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n       Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n           .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n       String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n-      HttpServer2.defineFilter(httpServer.getWebAppContext(), restCsrfClassName,\n-          restCsrfClassName, restCsrfParams, new String[] {pathSpec});\n+      HttpServer2.defineFilter(httpServer2.getWebAppContext(),\n+          restCsrfClassName, restCsrfClassName, restCsrfParams,\n+          new String[] {pathSpec});\n     }\n \n     // add webhdfs packages\n-    httpServer.addJerseyResourcePackage(NamenodeWebHdfsMethods.class\n-        .getPackage().getName() + \";\" + Param.class.getPackage().getName(),\n+    httpServer2.addJerseyResourcePackage(\n+        jerseyResourcePackage + \";\" + Param.class.getPackage().getName(),\n         pathSpec);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void initWebHdfs(Configuration conf, String hostname,\n      HttpServer2 httpServer2, String jerseyResourcePackage)\n      throws IOException {\n    // set user pattern based on configuration file\n    UserParam.setUserPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n    AclPermissionParam.setAclPermissionPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_DEFAULT));\n\n    // add authentication filter for webhdfs\n    final String className \u003d conf.get(\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n    final String name \u003d className;\n\n    final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf, hostname);\n    HttpServer2.defineFilter(httpServer2.getWebAppContext(), name, className,\n        params, new String[] { pathSpec });\n    HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n        + \")\");\n\n    // add REST CSRF prevention filter\n    if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n        DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n      Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n          .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n      String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n      HttpServer2.defineFilter(httpServer2.getWebAppContext(),\n          restCsrfClassName, restCsrfClassName, restCsrfParams,\n          new String[] {pathSpec});\n    }\n\n    // add webhdfs packages\n    httpServer2.addJerseyResourcePackage(\n        jerseyResourcePackage + \";\" + Param.class.getPackage().getName(),\n        pathSpec);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "e24ed47d9a19f34a4dd8d4bad9b5c78ca3dd1c2e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11421. Make WebHDFS\u0027 ACLs RegEx configurable. Contributed by Harsh J.\n",
      "commitDate": "24/02/17 4:49 PM",
      "commitName": "e24ed47d9a19f34a4dd8d4bad9b5c78ca3dd1c2e",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "11/07/16 2:55 PM",
      "commitNameOld": "c447efebdb92dcdf3d95e983036f53bfbed2c0b4",
      "commitAuthorOld": "Jitendra Pandey",
      "daysBetweenCommits": 228.12,
      "commitsBetweenForRepo": 1461,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,37 @@\n   private void initWebHdfs(Configuration conf) throws IOException {\n     // set user pattern based on configuration file\n     UserParam.setUserPattern(conf.get(\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n+    AclPermissionParam.setAclPermissionPattern(conf.get(\n+        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,\n+        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_DEFAULT));\n \n     // add authentication filter for webhdfs\n     final String className \u003d conf.get(\n         DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n         DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n     final String name \u003d className;\n \n     final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n     Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n     HttpServer2.defineFilter(httpServer.getWebAppContext(), name, className,\n         params, new String[] { pathSpec });\n     HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n         + \")\");\n \n     // add REST CSRF prevention filter\n     if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n         DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n       Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n           .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n       String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n       HttpServer2.defineFilter(httpServer.getWebAppContext(), restCsrfClassName,\n           restCsrfClassName, restCsrfParams, new String[] {pathSpec});\n     }\n \n     // add webhdfs packages\n     httpServer.addJerseyResourcePackage(NamenodeWebHdfsMethods.class\n         .getPackage().getName() + \";\" + Param.class.getPackage().getName(),\n         pathSpec);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initWebHdfs(Configuration conf) throws IOException {\n    // set user pattern based on configuration file\n    UserParam.setUserPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n    AclPermissionParam.setAclPermissionPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_DEFAULT));\n\n    // add authentication filter for webhdfs\n    final String className \u003d conf.get(\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n    final String name \u003d className;\n\n    final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n    HttpServer2.defineFilter(httpServer.getWebAppContext(), name, className,\n        params, new String[] { pathSpec });\n    HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n        + \")\");\n\n    // add REST CSRF prevention filter\n    if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n        DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n      Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n          .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n      String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n      HttpServer2.defineFilter(httpServer.getWebAppContext(), restCsrfClassName,\n          restCsrfClassName, restCsrfParams, new String[] {pathSpec});\n    }\n\n    // add webhdfs packages\n    httpServer.addJerseyResourcePackage(NamenodeWebHdfsMethods.class\n        .getPackage().getName() + \";\" + Param.class.getPackage().getName(),\n        pathSpec);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
      "extendedDetails": {}
    },
    "5d1889a66d91608d34ca9411fb6e9161e637e9d3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9711. Integrate CSRF prevention filter in WebHDFS. Contributed by Chris Nauroth.\n",
      "commitDate": "18/02/16 10:07 AM",
      "commitName": "5d1889a66d91608d34ca9411fb6e9161e637e9d3",
      "commitAuthor": "cnauroth",
      "commitDateOld": "09/02/16 2:15 PM",
      "commitNameOld": "401ae4ecdb64e1ae2730976f96f7949831305c07",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 8.83,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,34 @@\n   private void initWebHdfs(Configuration conf) throws IOException {\n     // set user pattern based on configuration file\n     UserParam.setUserPattern(conf.get(\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n         HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n \n     // add authentication filter for webhdfs\n     final String className \u003d conf.get(\n         DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n         DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n     final String name \u003d className;\n \n     final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n     Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n     HttpServer2.defineFilter(httpServer.getWebAppContext(), name, className,\n         params, new String[] { pathSpec });\n     HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n         + \")\");\n \n+    // add REST CSRF prevention filter\n+    if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n+        DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n+      Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n+          .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n+      String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n+      HttpServer2.defineFilter(httpServer.getWebAppContext(), restCsrfClassName,\n+          restCsrfClassName, restCsrfParams, new String[] {pathSpec});\n+    }\n+\n     // add webhdfs packages\n     httpServer.addJerseyResourcePackage(NamenodeWebHdfsMethods.class\n         .getPackage().getName() + \";\" + Param.class.getPackage().getName(),\n         pathSpec);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initWebHdfs(Configuration conf) throws IOException {\n    // set user pattern based on configuration file\n    UserParam.setUserPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n\n    // add authentication filter for webhdfs\n    final String className \u003d conf.get(\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n    final String name \u003d className;\n\n    final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n    HttpServer2.defineFilter(httpServer.getWebAppContext(), name, className,\n        params, new String[] { pathSpec });\n    HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n        + \")\");\n\n    // add REST CSRF prevention filter\n    if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,\n        DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {\n      Map\u003cString, String\u003e restCsrfParams \u003d RestCsrfPreventionFilter\n          .getFilterParams(conf, \"dfs.webhdfs.rest-csrf.\");\n      String restCsrfClassName \u003d RestCsrfPreventionFilter.class.getName();\n      HttpServer2.defineFilter(httpServer.getWebAppContext(), restCsrfClassName,\n          restCsrfClassName, restCsrfParams, new String[] {pathSpec});\n    }\n\n    // add webhdfs packages\n    httpServer.addJerseyResourcePackage(NamenodeWebHdfsMethods.class\n        .getPackage().getName() + \";\" + Param.class.getPackage().getName(),\n        pathSpec);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
      "extendedDetails": {}
    },
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8052. Move WebHdfsFileSystem into hadoop-hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "23/04/15 5:33 PM",
      "commitName": "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "24/03/15 9:55 PM",
      "commitNameOld": "80278a5f85a91b3e02e700e0b3c0a433c15e0565",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 29.82,
      "commitsBetweenForRepo": 255,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   private void initWebHdfs(Configuration conf) throws IOException {\n     // set user pattern based on configuration file\n     UserParam.setUserPattern(conf.get(\n-        DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n-        DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n+        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n+        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n \n     // add authentication filter for webhdfs\n     final String className \u003d conf.get(\n         DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n         DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n     final String name \u003d className;\n \n     final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n     Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n     HttpServer2.defineFilter(httpServer.getWebAppContext(), name, className,\n         params, new String[] { pathSpec });\n     HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n         + \")\");\n \n     // add webhdfs packages\n     httpServer.addJerseyResourcePackage(NamenodeWebHdfsMethods.class\n         .getPackage().getName() + \";\" + Param.class.getPackage().getName(),\n         pathSpec);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initWebHdfs(Configuration conf) throws IOException {\n    // set user pattern based on configuration file\n    UserParam.setUserPattern(conf.get(\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n        HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n\n    // add authentication filter for webhdfs\n    final String className \u003d conf.get(\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n    final String name \u003d className;\n\n    final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n    HttpServer2.defineFilter(httpServer.getWebAppContext(), name, className,\n        params, new String[] { pathSpec });\n    HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n        + \")\");\n\n    // add webhdfs packages\n    httpServer.addJerseyResourcePackage(NamenodeWebHdfsMethods.class\n        .getPackage().getName() + \";\" + Param.class.getPackage().getName(),\n        pathSpec);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
      "extendedDetails": {}
    },
    "80278a5f85a91b3e02e700e0b3c0a433c15e0565": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7985. WebHDFS should be always enabled. Contributed by Li Lu.\n",
      "commitDate": "24/03/15 9:55 PM",
      "commitName": "80278a5f85a91b3e02e700e0b3c0a433c15e0565",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "12/02/15 5:40 PM",
      "commitNameOld": "46b6d23e8fbed4c2ba537dd752116c173805bca7",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 40.14,
      "commitsBetweenForRepo": 351,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,24 @@\n   private void initWebHdfs(Configuration conf) throws IOException {\n-    if (WebHdfsFileSystem.isEnabled(conf, HttpServer2.LOG)) {\n-      // set user pattern based on configuration file\n-      UserParam.setUserPattern(conf.get(\n-          DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n-          DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n+    // set user pattern based on configuration file\n+    UserParam.setUserPattern(conf.get(\n+        DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n+        DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n \n-      // add authentication filter for webhdfs\n-      final String className \u003d conf.get(\n-          DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n-          DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n-      final String name \u003d className;\n+    // add authentication filter for webhdfs\n+    final String className \u003d conf.get(\n+        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n+        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n+    final String name \u003d className;\n \n-      final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n-      Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n-      HttpServer2.defineFilter(httpServer.getWebAppContext(), name, className,\n-          params, new String[] { pathSpec });\n-      HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n-          + \")\");\n+    final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n+    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n+    HttpServer2.defineFilter(httpServer.getWebAppContext(), name, className,\n+        params, new String[] { pathSpec });\n+    HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n+        + \")\");\n \n-      // add webhdfs packages\n-      httpServer.addJerseyResourcePackage(NamenodeWebHdfsMethods.class\n-          .getPackage().getName() + \";\" + Param.class.getPackage().getName(),\n-          pathSpec);\n-    }\n+    // add webhdfs packages\n+    httpServer.addJerseyResourcePackage(NamenodeWebHdfsMethods.class\n+        .getPackage().getName() + \";\" + Param.class.getPackage().getName(),\n+        pathSpec);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initWebHdfs(Configuration conf) throws IOException {\n    // set user pattern based on configuration file\n    UserParam.setUserPattern(conf.get(\n        DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n        DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n\n    // add authentication filter for webhdfs\n    final String className \u003d conf.get(\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n        DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n    final String name \u003d className;\n\n    final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n    Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n    HttpServer2.defineFilter(httpServer.getWebAppContext(), name, className,\n        params, new String[] { pathSpec });\n    HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n        + \")\");\n\n    // add webhdfs packages\n    httpServer.addJerseyResourcePackage(NamenodeWebHdfsMethods.class\n        .getPackage().getName() + \";\" + Param.class.getPackage().getName(),\n        pathSpec);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
      "extendedDetails": {}
    },
    "ef90940594926752a310e9685c67fddd6e42e85d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5716. Allow WebHDFS to use pluggable authentication filter. Contributed by Haohui Mai\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1568547 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/14 4:04 PM",
      "commitName": "ef90940594926752a310e9685c67fddd6e42e85d",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "27/01/14 11:32 PM",
      "commitNameOld": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 17.69,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,26 @@\n   private void initWebHdfs(Configuration conf) throws IOException {\n     if (WebHdfsFileSystem.isEnabled(conf, HttpServer2.LOG)) {\n       // set user pattern based on configuration file\n-      UserParam.setUserPattern(conf.get(DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY, DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n+      UserParam.setUserPattern(conf.get(\n+          DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n+          DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n \n-      // add SPNEGO authentication filter for webhdfs\n-      final String name \u003d \"SPNEGO\";\n-      final String classname \u003d AuthFilter.class.getName();\n+      // add authentication filter for webhdfs\n+      final String className \u003d conf.get(\n+          DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n+          DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n+      final String name \u003d className;\n+\n       final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n       Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n-      HttpServer2.defineFilter(httpServer.getWebAppContext(), name, classname, params,\n-          new String[]{pathSpec});\n-      HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + classname + \")\");\n+      HttpServer2.defineFilter(httpServer.getWebAppContext(), name, className,\n+          params, new String[] { pathSpec });\n+      HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n+          + \")\");\n \n       // add webhdfs packages\n-      httpServer.addJerseyResourcePackage(\n-          NamenodeWebHdfsMethods.class.getPackage().getName()\n-              + \";\" + Param.class.getPackage().getName(), pathSpec);\n+      httpServer.addJerseyResourcePackage(NamenodeWebHdfsMethods.class\n+          .getPackage().getName() + \";\" + Param.class.getPackage().getName(),\n+          pathSpec);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initWebHdfs(Configuration conf) throws IOException {\n    if (WebHdfsFileSystem.isEnabled(conf, HttpServer2.LOG)) {\n      // set user pattern based on configuration file\n      UserParam.setUserPattern(conf.get(\n          DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,\n          DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n\n      // add authentication filter for webhdfs\n      final String className \u003d conf.get(\n          DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,\n          DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);\n      final String name \u003d className;\n\n      final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n      Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n      HttpServer2.defineFilter(httpServer.getWebAppContext(), name, className,\n          params, new String[] { pathSpec });\n      HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + className\n          + \")\");\n\n      // add webhdfs packages\n      httpServer.addJerseyResourcePackage(NamenodeWebHdfsMethods.class\n          .getPackage().getName() + \";\" + Param.class.getPackage().getName(),\n          pathSpec);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
      "extendedDetails": {}
    },
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 11:32 PM",
      "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "09/12/13 1:58 PM",
      "commitNameOld": "87a6db45b70a1a07165e0773c4452d1327258bfa",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 49.4,
      "commitsBetweenForRepo": 238,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   private void initWebHdfs(Configuration conf) throws IOException {\n-    if (WebHdfsFileSystem.isEnabled(conf, HttpServer.LOG)) {\n+    if (WebHdfsFileSystem.isEnabled(conf, HttpServer2.LOG)) {\n       // set user pattern based on configuration file\n       UserParam.setUserPattern(conf.get(DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY, DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n \n       // add SPNEGO authentication filter for webhdfs\n       final String name \u003d \"SPNEGO\";\n       final String classname \u003d AuthFilter.class.getName();\n       final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n       Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n-      HttpServer.defineFilter(httpServer.getWebAppContext(), name, classname, params,\n+      HttpServer2.defineFilter(httpServer.getWebAppContext(), name, classname, params,\n           new String[]{pathSpec});\n-      HttpServer.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + classname + \")\");\n+      HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + classname + \")\");\n \n       // add webhdfs packages\n       httpServer.addJerseyResourcePackage(\n           NamenodeWebHdfsMethods.class.getPackage().getName()\n               + \";\" + Param.class.getPackage().getName(), pathSpec);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initWebHdfs(Configuration conf) throws IOException {\n    if (WebHdfsFileSystem.isEnabled(conf, HttpServer2.LOG)) {\n      // set user pattern based on configuration file\n      UserParam.setUserPattern(conf.get(DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY, DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n\n      // add SPNEGO authentication filter for webhdfs\n      final String name \u003d \"SPNEGO\";\n      final String classname \u003d AuthFilter.class.getName();\n      final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n      Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n      HttpServer2.defineFilter(httpServer.getWebAppContext(), name, classname, params,\n          new String[]{pathSpec});\n      HttpServer2.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + classname + \")\");\n\n      // add webhdfs packages\n      httpServer.addJerseyResourcePackage(\n          NamenodeWebHdfsMethods.class.getPackage().getName()\n              + \";\" + Param.class.getPackage().getName(), pathSpec);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
      "extendedDetails": {}
    },
    "91d0b4727066241c900037f9a10e28b143489172": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4983. Numeric usernames do not work with WebHDFS FS. Contributed by Yongjun Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548968 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/12/13 1:10 PM",
      "commitName": "91d0b4727066241c900037f9a10e28b143489172",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "04/12/13 4:05 PM",
      "commitNameOld": "859e425dfa2269ad33f1790e69f3ef189d6485d5",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 2.88,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,20 @@\n   private void initWebHdfs(Configuration conf) throws IOException {\n     if (WebHdfsFileSystem.isEnabled(conf, HttpServer.LOG)) {\n-      //add SPNEGO authentication filter for webhdfs\n+      // set user pattern based on configuration file\n+      UserParam.setUserPattern(conf.get(DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY, DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n+\n+      // add SPNEGO authentication filter for webhdfs\n       final String name \u003d \"SPNEGO\";\n       final String classname \u003d AuthFilter.class.getName();\n       final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n       Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n       HttpServer.defineFilter(httpServer.getWebAppContext(), name, classname, params,\n           new String[]{pathSpec});\n       HttpServer.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + classname + \")\");\n \n       // add webhdfs packages\n       httpServer.addJerseyResourcePackage(\n           NamenodeWebHdfsMethods.class.getPackage().getName()\n               + \";\" + Param.class.getPackage().getName(), pathSpec);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initWebHdfs(Configuration conf) throws IOException {\n    if (WebHdfsFileSystem.isEnabled(conf, HttpServer.LOG)) {\n      // set user pattern based on configuration file\n      UserParam.setUserPattern(conf.get(DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY, DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));\n\n      // add SPNEGO authentication filter for webhdfs\n      final String name \u003d \"SPNEGO\";\n      final String classname \u003d AuthFilter.class.getName();\n      final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n      Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n      HttpServer.defineFilter(httpServer.getWebAppContext(), name, classname, params,\n          new String[]{pathSpec});\n      HttpServer.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + classname + \")\");\n\n      // add webhdfs packages\n      httpServer.addJerseyResourcePackage(\n          NamenodeWebHdfsMethods.class.getPackage().getName()\n              + \";\" + Param.class.getPackage().getName(), pathSpec);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
      "extendedDetails": {}
    },
    "859e425dfa2269ad33f1790e69f3ef189d6485d5": {
      "type": "Ybodychange",
      "commitMessage": "Revert HDFS-4983\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547970 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/13 4:05 PM",
      "commitName": "859e425dfa2269ad33f1790e69f3ef189d6485d5",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "04/12/13 2:24 PM",
      "commitNameOld": "f5e83a0b3e33376d3378b23f6889d954f4e975f3",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,17 @@\n   private void initWebHdfs(Configuration conf) throws IOException {\n     if (WebHdfsFileSystem.isEnabled(conf, HttpServer.LOG)) {\n-      // set user pattern based on configuration file\n-      UserParam.setUserPattern(conf);\n-\n-      // add SPNEGO authentication filter for webhdfs\n+      //add SPNEGO authentication filter for webhdfs\n       final String name \u003d \"SPNEGO\";\n       final String classname \u003d AuthFilter.class.getName();\n       final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n       Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n       HttpServer.defineFilter(httpServer.getWebAppContext(), name, classname, params,\n           new String[]{pathSpec});\n       HttpServer.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + classname + \")\");\n \n       // add webhdfs packages\n       httpServer.addJerseyResourcePackage(\n           NamenodeWebHdfsMethods.class.getPackage().getName()\n               + \";\" + Param.class.getPackage().getName(), pathSpec);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initWebHdfs(Configuration conf) throws IOException {\n    if (WebHdfsFileSystem.isEnabled(conf, HttpServer.LOG)) {\n      //add SPNEGO authentication filter for webhdfs\n      final String name \u003d \"SPNEGO\";\n      final String classname \u003d AuthFilter.class.getName();\n      final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n      Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n      HttpServer.defineFilter(httpServer.getWebAppContext(), name, classname, params,\n          new String[]{pathSpec});\n      HttpServer.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + classname + \")\");\n\n      // add webhdfs packages\n      httpServer.addJerseyResourcePackage(\n          NamenodeWebHdfsMethods.class.getPackage().getName()\n              + \";\" + Param.class.getPackage().getName(), pathSpec);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
      "extendedDetails": {}
    },
    "f5e83a0b3e33376d3378b23f6889d954f4e975f3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4983. Numeric usernames do not work with WebHDFS FS. Contributed by Yongjun Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547935 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/13 2:24 PM",
      "commitName": "f5e83a0b3e33376d3378b23f6889d954f4e975f3",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "04/12/13 1:40 PM",
      "commitNameOld": "d02baff9a0d8cec92bde751777f3e575da2339c8",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,20 @@\n   private void initWebHdfs(Configuration conf) throws IOException {\n     if (WebHdfsFileSystem.isEnabled(conf, HttpServer.LOG)) {\n-      //add SPNEGO authentication filter for webhdfs\n+      // set user pattern based on configuration file\n+      UserParam.setUserPattern(conf);\n+\n+      // add SPNEGO authentication filter for webhdfs\n       final String name \u003d \"SPNEGO\";\n       final String classname \u003d AuthFilter.class.getName();\n       final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n       Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n       HttpServer.defineFilter(httpServer.getWebAppContext(), name, classname, params,\n           new String[]{pathSpec});\n       HttpServer.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + classname + \")\");\n \n       // add webhdfs packages\n       httpServer.addJerseyResourcePackage(\n           NamenodeWebHdfsMethods.class.getPackage().getName()\n               + \";\" + Param.class.getPackage().getName(), pathSpec);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initWebHdfs(Configuration conf) throws IOException {\n    if (WebHdfsFileSystem.isEnabled(conf, HttpServer.LOG)) {\n      // set user pattern based on configuration file\n      UserParam.setUserPattern(conf);\n\n      // add SPNEGO authentication filter for webhdfs\n      final String name \u003d \"SPNEGO\";\n      final String classname \u003d AuthFilter.class.getName();\n      final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n      Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n      HttpServer.defineFilter(httpServer.getWebAppContext(), name, classname, params,\n          new String[]{pathSpec});\n      HttpServer.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + classname + \")\");\n\n      // add webhdfs packages\n      httpServer.addJerseyResourcePackage(\n          NamenodeWebHdfsMethods.class.getPackage().getName()\n              + \";\" + Param.class.getPackage().getName(), pathSpec);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java",
      "extendedDetails": {}
    },
    "d02baff9a0d8cec92bde751777f3e575da2339c8": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5536. Implement HTTP policy for Namenode and DataNode. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547925 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/13 1:40 PM",
      "commitName": "d02baff9a0d8cec92bde751777f3e575da2339c8",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,17 @@\n+  private void initWebHdfs(Configuration conf) throws IOException {\n+    if (WebHdfsFileSystem.isEnabled(conf, HttpServer.LOG)) {\n+      //add SPNEGO authentication filter for webhdfs\n+      final String name \u003d \"SPNEGO\";\n+      final String classname \u003d AuthFilter.class.getName();\n+      final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n+      Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n+      HttpServer.defineFilter(httpServer.getWebAppContext(), name, classname, params,\n+          new String[]{pathSpec});\n+      HttpServer.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + classname + \")\");\n+\n+      // add webhdfs packages\n+      httpServer.addJerseyResourcePackage(\n+          NamenodeWebHdfsMethods.class.getPackage().getName()\n+              + \";\" + Param.class.getPackage().getName(), pathSpec);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initWebHdfs(Configuration conf) throws IOException {\n    if (WebHdfsFileSystem.isEnabled(conf, HttpServer.LOG)) {\n      //add SPNEGO authentication filter for webhdfs\n      final String name \u003d \"SPNEGO\";\n      final String classname \u003d AuthFilter.class.getName();\n      final String pathSpec \u003d WebHdfsFileSystem.PATH_PREFIX + \"/*\";\n      Map\u003cString, String\u003e params \u003d getAuthFilterParams(conf);\n      HttpServer.defineFilter(httpServer.getWebAppContext(), name, classname, params,\n          new String[]{pathSpec});\n      HttpServer.LOG.info(\"Added filter \u0027\" + name + \"\u0027 (class\u003d\" + classname + \")\");\n\n      // add webhdfs packages\n      httpServer.addJerseyResourcePackage(\n          NamenodeWebHdfsMethods.class.getPackage().getName()\n              + \";\" + Param.class.getPackage().getName(), pathSpec);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeHttpServer.java"
    }
  }
}