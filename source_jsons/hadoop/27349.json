{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineReaderWhitelistAuthorizationFilter.java",
  "functionName": "doFilter",
  "functionId": "doFilter___request-ServletRequest__response-ServletResponse__chain-FilterChain",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/security/TimelineReaderWhitelistAuthorizationFilter.java",
  "functionStartLine": 63,
  "functionEndLine": 87,
  "numCommitsSeen": 4,
  "timeTaken": 940,
  "changeHistory": [
    "045069efeca07674be1571252bc4c685aa57b440",
    "3c95ca4f21dcfcaabdd0694e7d005a45baba953f",
    "d5ff965fee41fed28d3b94e11e546c1eb4c78a35"
  ],
  "changeHistoryShort": {
    "045069efeca07674be1571252bc4c685aa57b440": "Ybodychange",
    "3c95ca4f21dcfcaabdd0694e7d005a45baba953f": "Ybodychange",
    "d5ff965fee41fed28d3b94e11e546c1eb4c78a35": "Yintroduced"
  },
  "changeHistoryDetails": {
    "045069efeca07674be1571252bc4c685aa57b440": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6989 Ensure timeline service v2 codebase gets UGI from HttpServletRequest in a consistent way. Contributed by Abhishek Modi\n",
      "commitDate": "10/10/18 3:17 PM",
      "commitName": "045069efeca07674be1571252bc4c685aa57b440",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "09/05/18 10:17 PM",
      "commitNameOld": "3c95ca4f21dcfcaabdd0694e7d005a45baba953f",
      "commitAuthorOld": "Vrushali C",
      "daysBetweenCommits": 153.71,
      "commitsBetweenForRepo": 1240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public void doFilter(ServletRequest request, ServletResponse response,\n       FilterChain chain) throws IOException, ServletException {\n     HttpServletRequest httpRequest \u003d (HttpServletRequest) request;\n     HttpServletResponse httpResponse \u003d (HttpServletResponse) response;\n \n     if (isWhitelistReadAuthEnabled) {\n       UserGroupInformation callerUGI \u003d TimelineReaderWebServicesUtils\n-          .getCallerUserGroupInformation(httpRequest, true);\n+          .getUser(httpRequest);\n       if (callerUGI \u003d\u003d null) {\n         String msg \u003d \"Unable to obtain user name, user not authenticated\";\n         throw new AuthorizationException(msg);\n       }\n       if (!(adminAclList.isUserAllowed(callerUGI)\n           || allowedUsersAclList.isUserAllowed(callerUGI))) {\n         String userName \u003d callerUGI.getShortUserName();\n         String msg \u003d \"User \" + userName\n             + \" is not allowed to read TimelineService V2 data.\";\n         httpResponse.sendError(HttpServletResponse.SC_FORBIDDEN, msg);\n         return;\n       }\n     }\n     if (chain !\u003d null) {\n       chain.doFilter(request, response);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    HttpServletRequest httpRequest \u003d (HttpServletRequest) request;\n    HttpServletResponse httpResponse \u003d (HttpServletResponse) response;\n\n    if (isWhitelistReadAuthEnabled) {\n      UserGroupInformation callerUGI \u003d TimelineReaderWebServicesUtils\n          .getUser(httpRequest);\n      if (callerUGI \u003d\u003d null) {\n        String msg \u003d \"Unable to obtain user name, user not authenticated\";\n        throw new AuthorizationException(msg);\n      }\n      if (!(adminAclList.isUserAllowed(callerUGI)\n          || allowedUsersAclList.isUserAllowed(callerUGI))) {\n        String userName \u003d callerUGI.getShortUserName();\n        String msg \u003d \"User \" + userName\n            + \" is not allowed to read TimelineService V2 data.\";\n        httpResponse.sendError(HttpServletResponse.SC_FORBIDDEN, msg);\n        return;\n      }\n    }\n    if (chain !\u003d null) {\n      chain.doFilter(request, response);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/security/TimelineReaderWhitelistAuthorizationFilter.java",
      "extendedDetails": {}
    },
    "3c95ca4f21dcfcaabdd0694e7d005a45baba953f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8247 Incorrect HTTP status code returned by ATSv2 for non-whitelisted users.  Contributed by Rohith Sharma K S\n",
      "commitDate": "09/05/18 10:17 PM",
      "commitName": "3c95ca4f21dcfcaabdd0694e7d005a45baba953f",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "31/08/17 10:59 PM",
      "commitNameOld": "dcd0bedcc8113dd5e1d852c242ae9511d1b3d58e",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 250.97,
      "commitsBetweenForRepo": 2391,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n   public void doFilter(ServletRequest request, ServletResponse response,\n       FilterChain chain) throws IOException, ServletException {\n+    HttpServletRequest httpRequest \u003d (HttpServletRequest) request;\n+    HttpServletResponse httpResponse \u003d (HttpServletResponse) response;\n+\n     if (isWhitelistReadAuthEnabled) {\n       UserGroupInformation callerUGI \u003d TimelineReaderWebServicesUtils\n-          .getCallerUserGroupInformation((HttpServletRequest) request, true);\n+          .getCallerUserGroupInformation(httpRequest, true);\n       if (callerUGI \u003d\u003d null) {\n         String msg \u003d \"Unable to obtain user name, user not authenticated\";\n         throw new AuthorizationException(msg);\n       }\n       if (!(adminAclList.isUserAllowed(callerUGI)\n           || allowedUsersAclList.isUserAllowed(callerUGI))) {\n         String userName \u003d callerUGI.getShortUserName();\n         String msg \u003d \"User \" + userName\n             + \" is not allowed to read TimelineService V2 data.\";\n-        Response.status(Status.FORBIDDEN).entity(msg).build();\n-        throw new ForbiddenException(\"user \" + userName\n-            + \" is not allowed to read TimelineService V2 data\");\n+        httpResponse.sendError(HttpServletResponse.SC_FORBIDDEN, msg);\n+        return;\n       }\n     }\n     if (chain !\u003d null) {\n       chain.doFilter(request, response);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    HttpServletRequest httpRequest \u003d (HttpServletRequest) request;\n    HttpServletResponse httpResponse \u003d (HttpServletResponse) response;\n\n    if (isWhitelistReadAuthEnabled) {\n      UserGroupInformation callerUGI \u003d TimelineReaderWebServicesUtils\n          .getCallerUserGroupInformation(httpRequest, true);\n      if (callerUGI \u003d\u003d null) {\n        String msg \u003d \"Unable to obtain user name, user not authenticated\";\n        throw new AuthorizationException(msg);\n      }\n      if (!(adminAclList.isUserAllowed(callerUGI)\n          || allowedUsersAclList.isUserAllowed(callerUGI))) {\n        String userName \u003d callerUGI.getShortUserName();\n        String msg \u003d \"User \" + userName\n            + \" is not allowed to read TimelineService V2 data.\";\n        httpResponse.sendError(HttpServletResponse.SC_FORBIDDEN, msg);\n        return;\n      }\n    }\n    if (chain !\u003d null) {\n      chain.doFilter(request, response);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/security/TimelineReaderWhitelistAuthorizationFilter.java",
      "extendedDetails": {}
    },
    "d5ff965fee41fed28d3b94e11e546c1eb4c78a35": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6820. Restrict read access to timelineservice v2 data. Contributed by Vrushali C\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "d5ff965fee41fed28d3b94e11e546c1eb4c78a35",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,23 @@\n+  public void doFilter(ServletRequest request, ServletResponse response,\n+      FilterChain chain) throws IOException, ServletException {\n+    if (isWhitelistReadAuthEnabled) {\n+      UserGroupInformation callerUGI \u003d TimelineReaderWebServicesUtils\n+          .getCallerUserGroupInformation((HttpServletRequest) request, true);\n+      if (callerUGI \u003d\u003d null) {\n+        String msg \u003d \"Unable to obtain user name, user not authenticated\";\n+        throw new AuthorizationException(msg);\n+      }\n+      if (!(adminAclList.isUserAllowed(callerUGI)\n+          || allowedUsersAclList.isUserAllowed(callerUGI))) {\n+        String userName \u003d callerUGI.getShortUserName();\n+        String msg \u003d \"User \" + userName\n+            + \" is not allowed to read TimelineService V2 data.\";\n+        Response.status(Status.FORBIDDEN).entity(msg).build();\n+        throw new ForbiddenException(\"user \" + userName\n+            + \" is not allowed to read TimelineService V2 data\");\n+      }\n+    }\n+    if (chain !\u003d null) {\n+      chain.doFilter(request, response);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    if (isWhitelistReadAuthEnabled) {\n      UserGroupInformation callerUGI \u003d TimelineReaderWebServicesUtils\n          .getCallerUserGroupInformation((HttpServletRequest) request, true);\n      if (callerUGI \u003d\u003d null) {\n        String msg \u003d \"Unable to obtain user name, user not authenticated\";\n        throw new AuthorizationException(msg);\n      }\n      if (!(adminAclList.isUserAllowed(callerUGI)\n          || allowedUsersAclList.isUserAllowed(callerUGI))) {\n        String userName \u003d callerUGI.getShortUserName();\n        String msg \u003d \"User \" + userName\n            + \" is not allowed to read TimelineService V2 data.\";\n        Response.status(Status.FORBIDDEN).entity(msg).build();\n        throw new ForbiddenException(\"user \" + userName\n            + \" is not allowed to read TimelineService V2 data\");\n      }\n    }\n    if (chain !\u003d null) {\n      chain.doFilter(request, response);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/security/TimelineReaderWhitelistAuthorizationFilter.java"
    }
  }
}