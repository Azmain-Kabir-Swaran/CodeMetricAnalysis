{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AliyunOSSBlockOutputStream.java",
  "functionName": "waitForAllPartUploads",
  "functionId": "waitForAllPartUploads",
  "sourceFilePath": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSBlockOutputStream.java",
  "functionStartLine": 206,
  "functionEndLine": 227,
  "numCommitsSeen": 6,
  "timeTaken": 624,
  "changeHistory": [
    "6542d17ea460ec222137c4b275b13daf15d3fca3"
  ],
  "changeHistoryShort": {
    "6542d17ea460ec222137c4b275b13daf15d3fca3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6542d17ea460ec222137c4b275b13daf15d3fca3": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14999. AliyunOSS: provide one asynchronous multi-part based uploading mechanism. Contributed by Genmao Yu.\n",
      "commitDate": "30/03/18 5:23 AM",
      "commitName": "6542d17ea460ec222137c4b275b13daf15d3fca3",
      "commitAuthor": "Sammi Chen",
      "diff": "@@ -0,0 +1,22 @@\n+  private List\u003cPartETag\u003e waitForAllPartUploads() throws IOException {\n+    LOG.debug(\"Waiting for {} uploads to complete\", partETagsFutures.size());\n+    try {\n+      return Futures.allAsList(partETagsFutures).get();\n+    } catch (InterruptedException ie) {\n+      LOG.warn(\"Interrupted partUpload\", ie);\n+      Thread.currentThread().interrupt();\n+      return null;\n+    } catch (ExecutionException ee) {\n+      //there is no way of recovering so abort\n+      //cancel all partUploads\n+      LOG.debug(\"While waiting for upload completion\", ee);\n+      LOG.debug(\"Cancelling futures\");\n+      for (ListenableFuture\u003cPartETag\u003e future : partETagsFutures) {\n+        future.cancel(true);\n+      }\n+      //abort multipartupload\n+      store.abortMultipartUpload(key, uploadId);\n+      throw new IOException(\"Multi-part upload with id \u0027\" + uploadId\n+        + \"\u0027 to \" + key, ee);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cPartETag\u003e waitForAllPartUploads() throws IOException {\n    LOG.debug(\"Waiting for {} uploads to complete\", partETagsFutures.size());\n    try {\n      return Futures.allAsList(partETagsFutures).get();\n    } catch (InterruptedException ie) {\n      LOG.warn(\"Interrupted partUpload\", ie);\n      Thread.currentThread().interrupt();\n      return null;\n    } catch (ExecutionException ee) {\n      //there is no way of recovering so abort\n      //cancel all partUploads\n      LOG.debug(\"While waiting for upload completion\", ee);\n      LOG.debug(\"Cancelling futures\");\n      for (ListenableFuture\u003cPartETag\u003e future : partETagsFutures) {\n        future.cancel(true);\n      }\n      //abort multipartupload\n      store.abortMultipartUpload(key, uploadId);\n      throw new IOException(\"Multi-part upload with id \u0027\" + uploadId\n        + \"\u0027 to \" + key, ee);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSBlockOutputStream.java"
    }
  }
}