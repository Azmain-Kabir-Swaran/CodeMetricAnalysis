{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AFileSystem.java",
  "functionName": "innerCopyFromLocalFile",
  "functionId": "innerCopyFromLocalFile___delSrc-boolean__overwrite-boolean__src-Path__dst-Path",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
  "functionStartLine": 3164,
  "functionEndLine": 3200,
  "numCommitsSeen": 141,
  "timeTaken": 5443,
  "changeHistory": [
    "ef450df443f1dea1c52082cf281f25db7141972f",
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
    "621b43e254afaff708cd6fc4698b29628f6abc33",
    "6672810eeac1c94fd764aaf2a709ace9d4b5aa76",
    "6c348c56918973fd988b110e79231324a8befe12",
    "c58a59f7081d55dd2108545ebf9ee48cf43ca944",
    "39ec1515a205952eda7e171408a8b83eceb4abde"
  ],
  "changeHistoryShort": {
    "ef450df443f1dea1c52082cf281f25db7141972f": "Ybodychange",
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": "Ybodychange",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Ybodychange",
    "6672810eeac1c94fd764aaf2a709ace9d4b5aa76": "Ybodychange",
    "6c348c56918973fd988b110e79231324a8befe12": "Ybodychange",
    "c58a59f7081d55dd2108545ebf9ee48cf43ca944": "Ybodychange",
    "39ec1515a205952eda7e171408a8b83eceb4abde": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ef450df443f1dea1c52082cf281f25db7141972f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15113. NPE in S3A getFileStatus: null instrumentation on using closed instance.\nContributed by Steve Loughran.\n",
      "commitDate": "21/12/17 6:15 AM",
      "commitName": "ef450df443f1dea1c52082cf281f25db7141972f",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/12/17 1:19 PM",
      "commitNameOld": "35ad9b1dd279b769381ea1625d9bf776c309c5cb",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 2.71,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private void innerCopyFromLocalFile(boolean delSrc, boolean overwrite,\n       Path src, Path dst)\n       throws IOException, FileAlreadyExistsException, AmazonClientException {\n-    incrementStatistic(INVOCATION_COPY_FROM_LOCAL_FILE);\n+    entryPoint(INVOCATION_COPY_FROM_LOCAL_FILE);\n     LOG.debug(\"Copying local file from {} to {}\", src, dst);\n \n     // Since we have a local file, we don\u0027t need to stream into a temporary file\n     LocalFileSystem local \u003d getLocal(getConf());\n     File srcfile \u003d local.pathToFile(src);\n     if (!srcfile.exists()) {\n       throw new FileNotFoundException(\"No file: \" + src);\n     }\n     if (!srcfile.isFile()) {\n       throw new FileNotFoundException(\"Not a file: \" + src);\n     }\n \n     try {\n       FileStatus status \u003d getFileStatus(dst);\n       if (!status.isFile()) {\n         throw new FileAlreadyExistsException(dst + \" exists and is not a file\");\n       }\n       if (!overwrite) {\n         throw new FileAlreadyExistsException(dst + \" already exists\");\n       }\n     } catch (FileNotFoundException e) {\n       // no destination, all is well\n     }\n     final String key \u003d pathToKey(dst);\n     final ObjectMetadata om \u003d newObjectMetadata(srcfile.length());\n     Progressable progress \u003d null;\n     PutObjectRequest putObjectRequest \u003d newPutObjectRequest(key, om, srcfile);\n     invoker.retry(\"copyFromLocalFile(\" + src + \")\", dst.toString(), true,\n         () -\u003e executePut(putObjectRequest, progress));\n     if (delSrc) {\n       local.delete(src, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void innerCopyFromLocalFile(boolean delSrc, boolean overwrite,\n      Path src, Path dst)\n      throws IOException, FileAlreadyExistsException, AmazonClientException {\n    entryPoint(INVOCATION_COPY_FROM_LOCAL_FILE);\n    LOG.debug(\"Copying local file from {} to {}\", src, dst);\n\n    // Since we have a local file, we don\u0027t need to stream into a temporary file\n    LocalFileSystem local \u003d getLocal(getConf());\n    File srcfile \u003d local.pathToFile(src);\n    if (!srcfile.exists()) {\n      throw new FileNotFoundException(\"No file: \" + src);\n    }\n    if (!srcfile.isFile()) {\n      throw new FileNotFoundException(\"Not a file: \" + src);\n    }\n\n    try {\n      FileStatus status \u003d getFileStatus(dst);\n      if (!status.isFile()) {\n        throw new FileAlreadyExistsException(dst + \" exists and is not a file\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(dst + \" already exists\");\n      }\n    } catch (FileNotFoundException e) {\n      // no destination, all is well\n    }\n    final String key \u003d pathToKey(dst);\n    final ObjectMetadata om \u003d newObjectMetadata(srcfile.length());\n    Progressable progress \u003d null;\n    PutObjectRequest putObjectRequest \u003d newPutObjectRequest(key, om, srcfile);\n    invoker.retry(\"copyFromLocalFile(\" + src + \")\", dst.toString(), true,\n        () -\u003e executePut(putObjectRequest, progress));\n    if (delSrc) {\n      local.delete(src, false);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13786 Add S3A committer for zero-rename commits to S3 endpoints.\nContributed by Steve Loughran and Ryan Blue.\n",
      "commitDate": "22/11/17 7:28 AM",
      "commitName": "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "25/09/17 3:59 PM",
      "commitNameOld": "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
      "commitAuthorOld": "Aaron Fabbri",
      "daysBetweenCommits": 57.69,
      "commitsBetweenForRepo": 477,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,37 @@\n   private void innerCopyFromLocalFile(boolean delSrc, boolean overwrite,\n       Path src, Path dst)\n       throws IOException, FileAlreadyExistsException, AmazonClientException {\n     incrementStatistic(INVOCATION_COPY_FROM_LOCAL_FILE);\n     LOG.debug(\"Copying local file from {} to {}\", src, dst);\n \n     // Since we have a local file, we don\u0027t need to stream into a temporary file\n     LocalFileSystem local \u003d getLocal(getConf());\n     File srcfile \u003d local.pathToFile(src);\n     if (!srcfile.exists()) {\n       throw new FileNotFoundException(\"No file: \" + src);\n     }\n     if (!srcfile.isFile()) {\n       throw new FileNotFoundException(\"Not a file: \" + src);\n     }\n \n     try {\n       FileStatus status \u003d getFileStatus(dst);\n       if (!status.isFile()) {\n         throw new FileAlreadyExistsException(dst + \" exists and is not a file\");\n       }\n       if (!overwrite) {\n         throw new FileAlreadyExistsException(dst + \" already exists\");\n       }\n     } catch (FileNotFoundException e) {\n       // no destination, all is well\n     }\n     final String key \u003d pathToKey(dst);\n     final ObjectMetadata om \u003d newObjectMetadata(srcfile.length());\n+    Progressable progress \u003d null;\n     PutObjectRequest putObjectRequest \u003d newPutObjectRequest(key, om, srcfile);\n-    UploadInfo info \u003d putObject(putObjectRequest);\n-    Upload upload \u003d info.getUpload();\n-    ProgressableProgressListener listener \u003d new ProgressableProgressListener(\n-        this, key, upload, null);\n-    upload.addProgressListener(listener);\n-    try {\n-      upload.waitForUploadResult();\n-    } catch (InterruptedException e) {\n-      throw new InterruptedIOException(\"Interrupted copying \" + src\n-          + \" to \"  + dst + \", cancelling\");\n-    }\n-    listener.uploadCompleted();\n-\n-    // This will delete unnecessary fake parent directories\n-    finishedWrite(key, info.getLength());\n-\n+    invoker.retry(\"copyFromLocalFile(\" + src + \")\", dst.toString(), true,\n+        () -\u003e executePut(putObjectRequest, progress));\n     if (delSrc) {\n       local.delete(src, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void innerCopyFromLocalFile(boolean delSrc, boolean overwrite,\n      Path src, Path dst)\n      throws IOException, FileAlreadyExistsException, AmazonClientException {\n    incrementStatistic(INVOCATION_COPY_FROM_LOCAL_FILE);\n    LOG.debug(\"Copying local file from {} to {}\", src, dst);\n\n    // Since we have a local file, we don\u0027t need to stream into a temporary file\n    LocalFileSystem local \u003d getLocal(getConf());\n    File srcfile \u003d local.pathToFile(src);\n    if (!srcfile.exists()) {\n      throw new FileNotFoundException(\"No file: \" + src);\n    }\n    if (!srcfile.isFile()) {\n      throw new FileNotFoundException(\"Not a file: \" + src);\n    }\n\n    try {\n      FileStatus status \u003d getFileStatus(dst);\n      if (!status.isFile()) {\n        throw new FileAlreadyExistsException(dst + \" exists and is not a file\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(dst + \" already exists\");\n      }\n    } catch (FileNotFoundException e) {\n      // no destination, all is well\n    }\n    final String key \u003d pathToKey(dst);\n    final ObjectMetadata om \u003d newObjectMetadata(srcfile.length());\n    Progressable progress \u003d null;\n    PutObjectRequest putObjectRequest \u003d newPutObjectRequest(key, om, srcfile);\n    invoker.retry(\"copyFromLocalFile(\" + src + \")\", dst.toString(), true,\n        () -\u003e executePut(putObjectRequest, progress));\n    if (delSrc) {\n      local.delete(src, false);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "05/06/17 11:26 AM",
      "commitNameOld": "6aeda55bb8f741d9dafd41f6dfbf1a88acdd4003",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 87.78,
      "commitsBetweenForRepo": 591,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n   private void innerCopyFromLocalFile(boolean delSrc, boolean overwrite,\n       Path src, Path dst)\n       throws IOException, FileAlreadyExistsException, AmazonClientException {\n     incrementStatistic(INVOCATION_COPY_FROM_LOCAL_FILE);\n     LOG.debug(\"Copying local file from {} to {}\", src, dst);\n \n     // Since we have a local file, we don\u0027t need to stream into a temporary file\n     LocalFileSystem local \u003d getLocal(getConf());\n     File srcfile \u003d local.pathToFile(src);\n     if (!srcfile.exists()) {\n       throw new FileNotFoundException(\"No file: \" + src);\n     }\n     if (!srcfile.isFile()) {\n       throw new FileNotFoundException(\"Not a file: \" + src);\n     }\n \n     try {\n       FileStatus status \u003d getFileStatus(dst);\n       if (!status.isFile()) {\n         throw new FileAlreadyExistsException(dst + \" exists and is not a file\");\n       }\n       if (!overwrite) {\n         throw new FileAlreadyExistsException(dst + \" already exists\");\n       }\n     } catch (FileNotFoundException e) {\n       // no destination, all is well\n     }\n     final String key \u003d pathToKey(dst);\n     final ObjectMetadata om \u003d newObjectMetadata(srcfile.length());\n     PutObjectRequest putObjectRequest \u003d newPutObjectRequest(key, om, srcfile);\n-    Upload up \u003d putObject(putObjectRequest);\n+    UploadInfo info \u003d putObject(putObjectRequest);\n+    Upload upload \u003d info.getUpload();\n     ProgressableProgressListener listener \u003d new ProgressableProgressListener(\n-        this, key, up, null);\n-    up.addProgressListener(listener);\n+        this, key, upload, null);\n+    upload.addProgressListener(listener);\n     try {\n-      up.waitForUploadResult();\n+      upload.waitForUploadResult();\n     } catch (InterruptedException e) {\n       throw new InterruptedIOException(\"Interrupted copying \" + src\n           + \" to \"  + dst + \", cancelling\");\n     }\n     listener.uploadCompleted();\n \n     // This will delete unnecessary fake parent directories\n-    finishedWrite(key);\n+    finishedWrite(key, info.getLength());\n \n     if (delSrc) {\n       local.delete(src, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void innerCopyFromLocalFile(boolean delSrc, boolean overwrite,\n      Path src, Path dst)\n      throws IOException, FileAlreadyExistsException, AmazonClientException {\n    incrementStatistic(INVOCATION_COPY_FROM_LOCAL_FILE);\n    LOG.debug(\"Copying local file from {} to {}\", src, dst);\n\n    // Since we have a local file, we don\u0027t need to stream into a temporary file\n    LocalFileSystem local \u003d getLocal(getConf());\n    File srcfile \u003d local.pathToFile(src);\n    if (!srcfile.exists()) {\n      throw new FileNotFoundException(\"No file: \" + src);\n    }\n    if (!srcfile.isFile()) {\n      throw new FileNotFoundException(\"Not a file: \" + src);\n    }\n\n    try {\n      FileStatus status \u003d getFileStatus(dst);\n      if (!status.isFile()) {\n        throw new FileAlreadyExistsException(dst + \" exists and is not a file\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(dst + \" already exists\");\n      }\n    } catch (FileNotFoundException e) {\n      // no destination, all is well\n    }\n    final String key \u003d pathToKey(dst);\n    final ObjectMetadata om \u003d newObjectMetadata(srcfile.length());\n    PutObjectRequest putObjectRequest \u003d newPutObjectRequest(key, om, srcfile);\n    UploadInfo info \u003d putObject(putObjectRequest);\n    Upload upload \u003d info.getUpload();\n    ProgressableProgressListener listener \u003d new ProgressableProgressListener(\n        this, key, upload, null);\n    upload.addProgressListener(listener);\n    try {\n      upload.waitForUploadResult();\n    } catch (InterruptedException e) {\n      throw new InterruptedIOException(\"Interrupted copying \" + src\n          + \" to \"  + dst + \", cancelling\");\n    }\n    listener.uploadCompleted();\n\n    // This will delete unnecessary fake parent directories\n    finishedWrite(key, info.getLength());\n\n    if (delSrc) {\n      local.delete(src, false);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "6672810eeac1c94fd764aaf2a709ace9d4b5aa76": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14432. S3A copyFromLocalFile to be robust, tested. Contributed by Steve Loughran\n",
      "commitDate": "19/05/17 11:51 AM",
      "commitName": "6672810eeac1c94fd764aaf2a709ace9d4b5aa76",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "18/05/17 7:44 AM",
      "commitNameOld": "ba70225cf6a1e7dc756f4991881de04f525ff088",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,49 @@\n   private void innerCopyFromLocalFile(boolean delSrc, boolean overwrite,\n       Path src, Path dst)\n       throws IOException, FileAlreadyExistsException, AmazonClientException {\n     incrementStatistic(INVOCATION_COPY_FROM_LOCAL_FILE);\n-    final String key \u003d pathToKey(dst);\n-\n-    if (!overwrite \u0026\u0026 exists(dst)) {\n-      throw new FileAlreadyExistsException(dst + \" already exists\");\n-    }\n     LOG.debug(\"Copying local file from {} to {}\", src, dst);\n \n     // Since we have a local file, we don\u0027t need to stream into a temporary file\n     LocalFileSystem local \u003d getLocal(getConf());\n     File srcfile \u003d local.pathToFile(src);\n+    if (!srcfile.exists()) {\n+      throw new FileNotFoundException(\"No file: \" + src);\n+    }\n+    if (!srcfile.isFile()) {\n+      throw new FileNotFoundException(\"Not a file: \" + src);\n+    }\n \n+    try {\n+      FileStatus status \u003d getFileStatus(dst);\n+      if (!status.isFile()) {\n+        throw new FileAlreadyExistsException(dst + \" exists and is not a file\");\n+      }\n+      if (!overwrite) {\n+        throw new FileAlreadyExistsException(dst + \" already exists\");\n+      }\n+    } catch (FileNotFoundException e) {\n+      // no destination, all is well\n+    }\n+    final String key \u003d pathToKey(dst);\n     final ObjectMetadata om \u003d newObjectMetadata(srcfile.length());\n     PutObjectRequest putObjectRequest \u003d newPutObjectRequest(key, om, srcfile);\n     Upload up \u003d putObject(putObjectRequest);\n     ProgressableProgressListener listener \u003d new ProgressableProgressListener(\n         this, key, up, null);\n     up.addProgressListener(listener);\n     try {\n       up.waitForUploadResult();\n     } catch (InterruptedException e) {\n       throw new InterruptedIOException(\"Interrupted copying \" + src\n           + \" to \"  + dst + \", cancelling\");\n     }\n     listener.uploadCompleted();\n \n     // This will delete unnecessary fake parent directories\n     finishedWrite(key);\n \n     if (delSrc) {\n       local.delete(src, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void innerCopyFromLocalFile(boolean delSrc, boolean overwrite,\n      Path src, Path dst)\n      throws IOException, FileAlreadyExistsException, AmazonClientException {\n    incrementStatistic(INVOCATION_COPY_FROM_LOCAL_FILE);\n    LOG.debug(\"Copying local file from {} to {}\", src, dst);\n\n    // Since we have a local file, we don\u0027t need to stream into a temporary file\n    LocalFileSystem local \u003d getLocal(getConf());\n    File srcfile \u003d local.pathToFile(src);\n    if (!srcfile.exists()) {\n      throw new FileNotFoundException(\"No file: \" + src);\n    }\n    if (!srcfile.isFile()) {\n      throw new FileNotFoundException(\"Not a file: \" + src);\n    }\n\n    try {\n      FileStatus status \u003d getFileStatus(dst);\n      if (!status.isFile()) {\n        throw new FileAlreadyExistsException(dst + \" exists and is not a file\");\n      }\n      if (!overwrite) {\n        throw new FileAlreadyExistsException(dst + \" already exists\");\n      }\n    } catch (FileNotFoundException e) {\n      // no destination, all is well\n    }\n    final String key \u003d pathToKey(dst);\n    final ObjectMetadata om \u003d newObjectMetadata(srcfile.length());\n    PutObjectRequest putObjectRequest \u003d newPutObjectRequest(key, om, srcfile);\n    Upload up \u003d putObject(putObjectRequest);\n    ProgressableProgressListener listener \u003d new ProgressableProgressListener(\n        this, key, up, null);\n    up.addProgressListener(listener);\n    try {\n      up.waitForUploadResult();\n    } catch (InterruptedException e) {\n      throw new InterruptedIOException(\"Interrupted copying \" + src\n          + \" to \"  + dst + \", cancelling\");\n    }\n    listener.uploadCompleted();\n\n    // This will delete unnecessary fake parent directories\n    finishedWrite(key);\n\n    if (delSrc) {\n      local.delete(src, false);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "6c348c56918973fd988b110e79231324a8befe12": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13560. S3ABlockOutputStream to support huge (many GB) file writes. Contributed by Steve Loughran\n",
      "commitDate": "18/10/16 1:16 PM",
      "commitName": "6c348c56918973fd988b110e79231324a8befe12",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "07/10/16 4:51 AM",
      "commitNameOld": "ebd4f39a393e5fa9a810c6a36b749549229a53df",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 11.35,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private void innerCopyFromLocalFile(boolean delSrc, boolean overwrite,\n       Path src, Path dst)\n       throws IOException, FileAlreadyExistsException, AmazonClientException {\n     incrementStatistic(INVOCATION_COPY_FROM_LOCAL_FILE);\n     final String key \u003d pathToKey(dst);\n \n     if (!overwrite \u0026\u0026 exists(dst)) {\n       throw new FileAlreadyExistsException(dst + \" already exists\");\n     }\n     LOG.debug(\"Copying local file from {} to {}\", src, dst);\n \n     // Since we have a local file, we don\u0027t need to stream into a temporary file\n     LocalFileSystem local \u003d getLocal(getConf());\n     File srcfile \u003d local.pathToFile(src);\n \n-    final ObjectMetadata om \u003d newObjectMetadata();\n+    final ObjectMetadata om \u003d newObjectMetadata(srcfile.length());\n     PutObjectRequest putObjectRequest \u003d newPutObjectRequest(key, om, srcfile);\n     Upload up \u003d putObject(putObjectRequest);\n     ProgressableProgressListener listener \u003d new ProgressableProgressListener(\n         this, key, up, null);\n     up.addProgressListener(listener);\n     try {\n       up.waitForUploadResult();\n     } catch (InterruptedException e) {\n       throw new InterruptedIOException(\"Interrupted copying \" + src\n           + \" to \"  + dst + \", cancelling\");\n     }\n     listener.uploadCompleted();\n \n     // This will delete unnecessary fake parent directories\n     finishedWrite(key);\n \n     if (delSrc) {\n       local.delete(src, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void innerCopyFromLocalFile(boolean delSrc, boolean overwrite,\n      Path src, Path dst)\n      throws IOException, FileAlreadyExistsException, AmazonClientException {\n    incrementStatistic(INVOCATION_COPY_FROM_LOCAL_FILE);\n    final String key \u003d pathToKey(dst);\n\n    if (!overwrite \u0026\u0026 exists(dst)) {\n      throw new FileAlreadyExistsException(dst + \" already exists\");\n    }\n    LOG.debug(\"Copying local file from {} to {}\", src, dst);\n\n    // Since we have a local file, we don\u0027t need to stream into a temporary file\n    LocalFileSystem local \u003d getLocal(getConf());\n    File srcfile \u003d local.pathToFile(src);\n\n    final ObjectMetadata om \u003d newObjectMetadata(srcfile.length());\n    PutObjectRequest putObjectRequest \u003d newPutObjectRequest(key, om, srcfile);\n    Upload up \u003d putObject(putObjectRequest);\n    ProgressableProgressListener listener \u003d new ProgressableProgressListener(\n        this, key, up, null);\n    up.addProgressListener(listener);\n    try {\n      up.waitForUploadResult();\n    } catch (InterruptedException e) {\n      throw new InterruptedIOException(\"Interrupted copying \" + src\n          + \" to \"  + dst + \", cancelling\");\n    }\n    listener.uploadCompleted();\n\n    // This will delete unnecessary fake parent directories\n    finishedWrite(key);\n\n    if (delSrc) {\n      local.delete(src, false);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "c58a59f7081d55dd2108545ebf9ee48cf43ca944": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13171. Add StorageStatistics to S3A; instrument some more operations. Contributed by Steve Loughran.\n",
      "commitDate": "03/06/16 8:55 AM",
      "commitName": "c58a59f7081d55dd2108545ebf9ee48cf43ca944",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "01/06/16 2:49 PM",
      "commitNameOld": "16b1cc7af9bd63b65ef50e1056f275a7baf111a2",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 1.75,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,36 @@\n   private void innerCopyFromLocalFile(boolean delSrc, boolean overwrite,\n       Path src, Path dst)\n       throws IOException, FileAlreadyExistsException, AmazonClientException {\n-    String key \u003d pathToKey(dst);\n+    incrementStatistic(INVOCATION_COPY_FROM_LOCAL_FILE);\n+    final String key \u003d pathToKey(dst);\n \n     if (!overwrite \u0026\u0026 exists(dst)) {\n       throw new FileAlreadyExistsException(dst + \" already exists\");\n     }\n     LOG.debug(\"Copying local file from {} to {}\", src, dst);\n \n     // Since we have a local file, we don\u0027t need to stream into a temporary file\n     LocalFileSystem local \u003d getLocal(getConf());\n     File srcfile \u003d local.pathToFile(src);\n \n-    final ObjectMetadata om \u003d new ObjectMetadata();\n-    if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {\n-      om.setSSEAlgorithm(serverSideEncryptionAlgorithm);\n-    }\n-    PutObjectRequest putObjectRequest \u003d new PutObjectRequest(bucket, key, srcfile);\n-    putObjectRequest.setCannedAcl(cannedACL);\n-    putObjectRequest.setMetadata(om);\n-\n-    ProgressListener progressListener \u003d new ProgressListener() {\n-      public void progressChanged(ProgressEvent progressEvent) {\n-        switch (progressEvent.getEventType()) {\n-          case TRANSFER_PART_COMPLETED_EVENT:\n-            statistics.incrementWriteOps(1);\n-            break;\n-          default:\n-            break;\n-        }\n-      }\n-    };\n-\n-    statistics.incrementWriteOps(1);\n-    Upload up \u003d transfers.upload(putObjectRequest);\n-    up.addProgressListener(progressListener);\n+    final ObjectMetadata om \u003d newObjectMetadata();\n+    PutObjectRequest putObjectRequest \u003d newPutObjectRequest(key, om, srcfile);\n+    Upload up \u003d putObject(putObjectRequest);\n+    ProgressableProgressListener listener \u003d new ProgressableProgressListener(\n+        this, key, up, null);\n+    up.addProgressListener(listener);\n     try {\n       up.waitForUploadResult();\n     } catch (InterruptedException e) {\n       throw new InterruptedIOException(\"Interrupted copying \" + src\n           + \" to \"  + dst + \", cancelling\");\n     }\n+    listener.uploadCompleted();\n \n     // This will delete unnecessary fake parent directories\n     finishedWrite(key);\n \n     if (delSrc) {\n       local.delete(src, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void innerCopyFromLocalFile(boolean delSrc, boolean overwrite,\n      Path src, Path dst)\n      throws IOException, FileAlreadyExistsException, AmazonClientException {\n    incrementStatistic(INVOCATION_COPY_FROM_LOCAL_FILE);\n    final String key \u003d pathToKey(dst);\n\n    if (!overwrite \u0026\u0026 exists(dst)) {\n      throw new FileAlreadyExistsException(dst + \" already exists\");\n    }\n    LOG.debug(\"Copying local file from {} to {}\", src, dst);\n\n    // Since we have a local file, we don\u0027t need to stream into a temporary file\n    LocalFileSystem local \u003d getLocal(getConf());\n    File srcfile \u003d local.pathToFile(src);\n\n    final ObjectMetadata om \u003d newObjectMetadata();\n    PutObjectRequest putObjectRequest \u003d newPutObjectRequest(key, om, srcfile);\n    Upload up \u003d putObject(putObjectRequest);\n    ProgressableProgressListener listener \u003d new ProgressableProgressListener(\n        this, key, up, null);\n    up.addProgressListener(listener);\n    try {\n      up.waitForUploadResult();\n    } catch (InterruptedException e) {\n      throw new InterruptedIOException(\"Interrupted copying \" + src\n          + \" to \"  + dst + \", cancelling\");\n    }\n    listener.uploadCompleted();\n\n    // This will delete unnecessary fake parent directories\n    finishedWrite(key);\n\n    if (delSrc) {\n      local.delete(src, false);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "39ec1515a205952eda7e171408a8b83eceb4abde": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13130. s3a failures can surface as RTEs, not IOEs. (Steve Loughran)\n",
      "commitDate": "21/05/16 8:39 AM",
      "commitName": "39ec1515a205952eda7e171408a8b83eceb4abde",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,51 @@\n+  private void innerCopyFromLocalFile(boolean delSrc, boolean overwrite,\n+      Path src, Path dst)\n+      throws IOException, FileAlreadyExistsException, AmazonClientException {\n+    String key \u003d pathToKey(dst);\n+\n+    if (!overwrite \u0026\u0026 exists(dst)) {\n+      throw new FileAlreadyExistsException(dst + \" already exists\");\n+    }\n+    LOG.debug(\"Copying local file from {} to {}\", src, dst);\n+\n+    // Since we have a local file, we don\u0027t need to stream into a temporary file\n+    LocalFileSystem local \u003d getLocal(getConf());\n+    File srcfile \u003d local.pathToFile(src);\n+\n+    final ObjectMetadata om \u003d new ObjectMetadata();\n+    if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {\n+      om.setSSEAlgorithm(serverSideEncryptionAlgorithm);\n+    }\n+    PutObjectRequest putObjectRequest \u003d new PutObjectRequest(bucket, key, srcfile);\n+    putObjectRequest.setCannedAcl(cannedACL);\n+    putObjectRequest.setMetadata(om);\n+\n+    ProgressListener progressListener \u003d new ProgressListener() {\n+      public void progressChanged(ProgressEvent progressEvent) {\n+        switch (progressEvent.getEventType()) {\n+          case TRANSFER_PART_COMPLETED_EVENT:\n+            statistics.incrementWriteOps(1);\n+            break;\n+          default:\n+            break;\n+        }\n+      }\n+    };\n+\n+    statistics.incrementWriteOps(1);\n+    Upload up \u003d transfers.upload(putObjectRequest);\n+    up.addProgressListener(progressListener);\n+    try {\n+      up.waitForUploadResult();\n+    } catch (InterruptedException e) {\n+      throw new InterruptedIOException(\"Interrupted copying \" + src\n+          + \" to \"  + dst + \", cancelling\");\n+    }\n+\n+    // This will delete unnecessary fake parent directories\n+    finishedWrite(key);\n+\n+    if (delSrc) {\n+      local.delete(src, false);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void innerCopyFromLocalFile(boolean delSrc, boolean overwrite,\n      Path src, Path dst)\n      throws IOException, FileAlreadyExistsException, AmazonClientException {\n    String key \u003d pathToKey(dst);\n\n    if (!overwrite \u0026\u0026 exists(dst)) {\n      throw new FileAlreadyExistsException(dst + \" already exists\");\n    }\n    LOG.debug(\"Copying local file from {} to {}\", src, dst);\n\n    // Since we have a local file, we don\u0027t need to stream into a temporary file\n    LocalFileSystem local \u003d getLocal(getConf());\n    File srcfile \u003d local.pathToFile(src);\n\n    final ObjectMetadata om \u003d new ObjectMetadata();\n    if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {\n      om.setSSEAlgorithm(serverSideEncryptionAlgorithm);\n    }\n    PutObjectRequest putObjectRequest \u003d new PutObjectRequest(bucket, key, srcfile);\n    putObjectRequest.setCannedAcl(cannedACL);\n    putObjectRequest.setMetadata(om);\n\n    ProgressListener progressListener \u003d new ProgressListener() {\n      public void progressChanged(ProgressEvent progressEvent) {\n        switch (progressEvent.getEventType()) {\n          case TRANSFER_PART_COMPLETED_EVENT:\n            statistics.incrementWriteOps(1);\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    statistics.incrementWriteOps(1);\n    Upload up \u003d transfers.upload(putObjectRequest);\n    up.addProgressListener(progressListener);\n    try {\n      up.waitForUploadResult();\n    } catch (InterruptedException e) {\n      throw new InterruptedIOException(\"Interrupted copying \" + src\n          + \" to \"  + dst + \", cancelling\");\n    }\n\n    // This will delete unnecessary fake parent directories\n    finishedWrite(key);\n\n    if (delSrc) {\n      local.delete(src, false);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}