{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockReaderFactory.java",
  "functionName": "createShortCircuitReplicaInfo",
  "functionId": "createShortCircuitReplicaInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java",
  "functionStartLine": 517,
  "functionEndLine": 571,
  "numCommitsSeen": 63,
  "timeTaken": 5045,
  "changeHistory": [
    "2abcf7762ae74b936e1cedb60d5d2b4cc4ee86ea",
    "4525292d41482330a86f1cc3935e072f9f67c308",
    "86e6aa8eec538e142044e2b6415ec1caff5e9cbd",
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
    "f308561f1d885491b88db73ac63003202056d661",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be"
  ],
  "changeHistoryShort": {
    "2abcf7762ae74b936e1cedb60d5d2b4cc4ee86ea": "Ybodychange",
    "4525292d41482330a86f1cc3935e072f9f67c308": "Ybodychange",
    "86e6aa8eec538e142044e2b6415ec1caff5e9cbd": "Ybodychange",
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": "Ybodychange",
    "f308561f1d885491b88db73ac63003202056d661": "Yfilerename",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Ymultichange(Yfilerename,Ybodychange)",
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f": "Ybodychange",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2abcf7762ae74b936e1cedb60d5d2b4cc4ee86ea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15202 Boost short circuit cache (rebase PR-1884) (#2016)\n",
      "commitDate": "18/05/20 9:23 AM",
      "commitName": "2abcf7762ae74b936e1cedb60d5d2b4cc4ee86ea",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "18/05/20 9:22 AM",
      "commitNameOld": "4525292d41482330a86f1cc3935e072f9f67c308",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,55 @@\n   public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n     if (createShortCircuitReplicaInfoCallback !\u003d null) {\n       ShortCircuitReplicaInfo info \u003d\n           createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n       if (info !\u003d null) return info;\n     }\n     LOG.trace(\"{}: trying to create ShortCircuitReplicaInfo.\", this);\n     BlockReaderPeer curPeer;\n     while (true) {\n       curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       Slot slot \u003d null;\n-      ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n+      ShortCircuitCache cache \u003d\n+          clientContext.getShortCircuitCache(block.getBlockId());\n       try {\n         MutableBoolean usedPeer \u003d new MutableBoolean(false);\n         slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n             new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n             clientName);\n         if (usedPeer.booleanValue()) {\n           LOG.trace(\"{}: allocShmSlot used up our previous socket {}.  \"\n               + \"Allocating a new one...\", this, peer.getDomainSocket());\n           curPeer \u003d nextDomainPeer();\n           if (curPeer \u003d\u003d null) break;\n           peer \u003d (DomainPeer)curPeer.peer;\n         }\n         ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n         clientContext.getPeerCache().put(datanode, peer);\n         return info;\n       } catch (IOException e) {\n         if (slot !\u003d null) {\n           cache.freeSlot(slot);\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached socket.\n           // These are considered less serious, because the socket may be stale.\n           LOG.debug(\"{}: closing stale domain peer {}\", this, peer, e);\n           IOUtilsClient.cleanupWithLogger(LOG, peer);\n         } else {\n           // Handle an I/O error we got when using a newly created socket.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(this + \": I/O error requesting file descriptors.  \" +\n               \"Disabling domain socket \" + peer.getDomainSocket(), e);\n           IOUtilsClient.cleanupWithLogger(LOG, peer);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n    if (createShortCircuitReplicaInfoCallback !\u003d null) {\n      ShortCircuitReplicaInfo info \u003d\n          createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n      if (info !\u003d null) return info;\n    }\n    LOG.trace(\"{}: trying to create ShortCircuitReplicaInfo.\", this);\n    BlockReaderPeer curPeer;\n    while (true) {\n      curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      Slot slot \u003d null;\n      ShortCircuitCache cache \u003d\n          clientContext.getShortCircuitCache(block.getBlockId());\n      try {\n        MutableBoolean usedPeer \u003d new MutableBoolean(false);\n        slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n            new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n            clientName);\n        if (usedPeer.booleanValue()) {\n          LOG.trace(\"{}: allocShmSlot used up our previous socket {}.  \"\n              + \"Allocating a new one...\", this, peer.getDomainSocket());\n          curPeer \u003d nextDomainPeer();\n          if (curPeer \u003d\u003d null) break;\n          peer \u003d (DomainPeer)curPeer.peer;\n        }\n        ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n        clientContext.getPeerCache().put(datanode, peer);\n        return info;\n      } catch (IOException e) {\n        if (slot !\u003d null) {\n          cache.freeSlot(slot);\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached socket.\n          // These are considered less serious, because the socket may be stale.\n          LOG.debug(\"{}: closing stale domain peer {}\", this, peer, e);\n          IOUtilsClient.cleanupWithLogger(LOG, peer);\n        } else {\n          // Handle an I/O error we got when using a newly created socket.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(this + \": I/O error requesting file descriptors.  \" +\n              \"Disabling domain socket \" + peer.getDomainSocket(), e);\n          IOUtilsClient.cleanupWithLogger(LOG, peer);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "4525292d41482330a86f1cc3935e072f9f67c308": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-15202 Boost short circuit cache (rebase PR-1884) (#2016)\"\n\nThis reverts commit 86e6aa8eec538e142044e2b6415ec1caff5e9cbd.\n",
      "commitDate": "18/05/20 9:22 AM",
      "commitName": "4525292d41482330a86f1cc3935e072f9f67c308",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "18/05/20 7:04 AM",
      "commitNameOld": "86e6aa8eec538e142044e2b6415ec1caff5e9cbd",
      "commitAuthorOld": "pustota2009",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,54 @@\n   public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n     if (createShortCircuitReplicaInfoCallback !\u003d null) {\n       ShortCircuitReplicaInfo info \u003d\n           createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n       if (info !\u003d null) return info;\n     }\n     LOG.trace(\"{}: trying to create ShortCircuitReplicaInfo.\", this);\n     BlockReaderPeer curPeer;\n     while (true) {\n       curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       Slot slot \u003d null;\n-      ShortCircuitCache cache \u003d\n-          clientContext.getShortCircuitCache(block.getBlockId());\n+      ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n       try {\n         MutableBoolean usedPeer \u003d new MutableBoolean(false);\n         slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n             new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n             clientName);\n         if (usedPeer.booleanValue()) {\n           LOG.trace(\"{}: allocShmSlot used up our previous socket {}.  \"\n               + \"Allocating a new one...\", this, peer.getDomainSocket());\n           curPeer \u003d nextDomainPeer();\n           if (curPeer \u003d\u003d null) break;\n           peer \u003d (DomainPeer)curPeer.peer;\n         }\n         ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n         clientContext.getPeerCache().put(datanode, peer);\n         return info;\n       } catch (IOException e) {\n         if (slot !\u003d null) {\n           cache.freeSlot(slot);\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached socket.\n           // These are considered less serious, because the socket may be stale.\n           LOG.debug(\"{}: closing stale domain peer {}\", this, peer, e);\n           IOUtilsClient.cleanupWithLogger(LOG, peer);\n         } else {\n           // Handle an I/O error we got when using a newly created socket.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(this + \": I/O error requesting file descriptors.  \" +\n               \"Disabling domain socket \" + peer.getDomainSocket(), e);\n           IOUtilsClient.cleanupWithLogger(LOG, peer);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n    if (createShortCircuitReplicaInfoCallback !\u003d null) {\n      ShortCircuitReplicaInfo info \u003d\n          createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n      if (info !\u003d null) return info;\n    }\n    LOG.trace(\"{}: trying to create ShortCircuitReplicaInfo.\", this);\n    BlockReaderPeer curPeer;\n    while (true) {\n      curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      Slot slot \u003d null;\n      ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n      try {\n        MutableBoolean usedPeer \u003d new MutableBoolean(false);\n        slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n            new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n            clientName);\n        if (usedPeer.booleanValue()) {\n          LOG.trace(\"{}: allocShmSlot used up our previous socket {}.  \"\n              + \"Allocating a new one...\", this, peer.getDomainSocket());\n          curPeer \u003d nextDomainPeer();\n          if (curPeer \u003d\u003d null) break;\n          peer \u003d (DomainPeer)curPeer.peer;\n        }\n        ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n        clientContext.getPeerCache().put(datanode, peer);\n        return info;\n      } catch (IOException e) {\n        if (slot !\u003d null) {\n          cache.freeSlot(slot);\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached socket.\n          // These are considered less serious, because the socket may be stale.\n          LOG.debug(\"{}: closing stale domain peer {}\", this, peer, e);\n          IOUtilsClient.cleanupWithLogger(LOG, peer);\n        } else {\n          // Handle an I/O error we got when using a newly created socket.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(this + \": I/O error requesting file descriptors.  \" +\n              \"Disabling domain socket \" + peer.getDomainSocket(), e);\n          IOUtilsClient.cleanupWithLogger(LOG, peer);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "86e6aa8eec538e142044e2b6415ec1caff5e9cbd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15202 Boost short circuit cache (rebase PR-1884) (#2016)\n\nAdded parameter dfs.client.short.circuit.num improving HDFS-client\u0027s massive reading performance by create few instances ShortCircuit caches instead of one. It helps avoid locks and lets CPU do job.",
      "commitDate": "18/05/20 7:04 AM",
      "commitName": "86e6aa8eec538e142044e2b6415ec1caff5e9cbd",
      "commitAuthor": "pustota2009",
      "commitDateOld": "09/05/20 11:13 PM",
      "commitNameOld": "aab9e0b16ecc8fa00228c00c7ab90e55195cf5f4",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 8.33,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,55 @@\n   public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n     if (createShortCircuitReplicaInfoCallback !\u003d null) {\n       ShortCircuitReplicaInfo info \u003d\n           createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n       if (info !\u003d null) return info;\n     }\n     LOG.trace(\"{}: trying to create ShortCircuitReplicaInfo.\", this);\n     BlockReaderPeer curPeer;\n     while (true) {\n       curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       Slot slot \u003d null;\n-      ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n+      ShortCircuitCache cache \u003d\n+          clientContext.getShortCircuitCache(block.getBlockId());\n       try {\n         MutableBoolean usedPeer \u003d new MutableBoolean(false);\n         slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n             new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n             clientName);\n         if (usedPeer.booleanValue()) {\n           LOG.trace(\"{}: allocShmSlot used up our previous socket {}.  \"\n               + \"Allocating a new one...\", this, peer.getDomainSocket());\n           curPeer \u003d nextDomainPeer();\n           if (curPeer \u003d\u003d null) break;\n           peer \u003d (DomainPeer)curPeer.peer;\n         }\n         ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n         clientContext.getPeerCache().put(datanode, peer);\n         return info;\n       } catch (IOException e) {\n         if (slot !\u003d null) {\n           cache.freeSlot(slot);\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached socket.\n           // These are considered less serious, because the socket may be stale.\n           LOG.debug(\"{}: closing stale domain peer {}\", this, peer, e);\n           IOUtilsClient.cleanupWithLogger(LOG, peer);\n         } else {\n           // Handle an I/O error we got when using a newly created socket.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(this + \": I/O error requesting file descriptors.  \" +\n               \"Disabling domain socket \" + peer.getDomainSocket(), e);\n           IOUtilsClient.cleanupWithLogger(LOG, peer);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n    if (createShortCircuitReplicaInfoCallback !\u003d null) {\n      ShortCircuitReplicaInfo info \u003d\n          createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n      if (info !\u003d null) return info;\n    }\n    LOG.trace(\"{}: trying to create ShortCircuitReplicaInfo.\", this);\n    BlockReaderPeer curPeer;\n    while (true) {\n      curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      Slot slot \u003d null;\n      ShortCircuitCache cache \u003d\n          clientContext.getShortCircuitCache(block.getBlockId());\n      try {\n        MutableBoolean usedPeer \u003d new MutableBoolean(false);\n        slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n            new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n            clientName);\n        if (usedPeer.booleanValue()) {\n          LOG.trace(\"{}: allocShmSlot used up our previous socket {}.  \"\n              + \"Allocating a new one...\", this, peer.getDomainSocket());\n          curPeer \u003d nextDomainPeer();\n          if (curPeer \u003d\u003d null) break;\n          peer \u003d (DomainPeer)curPeer.peer;\n        }\n        ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n        clientContext.getPeerCache().put(datanode, peer);\n        return info;\n      } catch (IOException e) {\n        if (slot !\u003d null) {\n          cache.freeSlot(slot);\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached socket.\n          // These are considered less serious, because the socket may be stale.\n          LOG.debug(\"{}: closing stale domain peer {}\", this, peer, e);\n          IOUtilsClient.cleanupWithLogger(LOG, peer);\n        } else {\n          // Handle an I/O error we got when using a newly created socket.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(this + \": I/O error requesting file descriptors.  \" +\n              \"Disabling domain socket \" + peer.getDomainSocket(), e);\n          IOUtilsClient.cleanupWithLogger(LOG, peer);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13695. Move logging to slf4j in HDFS package. Contributed by Ian Pickering.\n",
      "commitDate": "06/09/18 2:48 PM",
      "commitName": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "06/07/18 2:59 PM",
      "commitNameOld": "0247cb6318507afe06816e337a19f396afc53efa",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 61.99,
      "commitsBetweenForRepo": 453,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n     if (createShortCircuitReplicaInfoCallback !\u003d null) {\n       ShortCircuitReplicaInfo info \u003d\n           createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n       if (info !\u003d null) return info;\n     }\n     LOG.trace(\"{}: trying to create ShortCircuitReplicaInfo.\", this);\n     BlockReaderPeer curPeer;\n     while (true) {\n       curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       Slot slot \u003d null;\n       ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n       try {\n         MutableBoolean usedPeer \u003d new MutableBoolean(false);\n         slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n             new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n             clientName);\n         if (usedPeer.booleanValue()) {\n           LOG.trace(\"{}: allocShmSlot used up our previous socket {}.  \"\n               + \"Allocating a new one...\", this, peer.getDomainSocket());\n           curPeer \u003d nextDomainPeer();\n           if (curPeer \u003d\u003d null) break;\n           peer \u003d (DomainPeer)curPeer.peer;\n         }\n         ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n         clientContext.getPeerCache().put(datanode, peer);\n         return info;\n       } catch (IOException e) {\n         if (slot !\u003d null) {\n           cache.freeSlot(slot);\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached socket.\n           // These are considered less serious, because the socket may be stale.\n           LOG.debug(\"{}: closing stale domain peer {}\", this, peer, e);\n-          IOUtilsClient.cleanup(LOG, peer);\n+          IOUtilsClient.cleanupWithLogger(LOG, peer);\n         } else {\n           // Handle an I/O error we got when using a newly created socket.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(this + \": I/O error requesting file descriptors.  \" +\n               \"Disabling domain socket \" + peer.getDomainSocket(), e);\n-          IOUtilsClient.cleanup(LOG, peer);\n+          IOUtilsClient.cleanupWithLogger(LOG, peer);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n    if (createShortCircuitReplicaInfoCallback !\u003d null) {\n      ShortCircuitReplicaInfo info \u003d\n          createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n      if (info !\u003d null) return info;\n    }\n    LOG.trace(\"{}: trying to create ShortCircuitReplicaInfo.\", this);\n    BlockReaderPeer curPeer;\n    while (true) {\n      curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      Slot slot \u003d null;\n      ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n      try {\n        MutableBoolean usedPeer \u003d new MutableBoolean(false);\n        slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n            new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n            clientName);\n        if (usedPeer.booleanValue()) {\n          LOG.trace(\"{}: allocShmSlot used up our previous socket {}.  \"\n              + \"Allocating a new one...\", this, peer.getDomainSocket());\n          curPeer \u003d nextDomainPeer();\n          if (curPeer \u003d\u003d null) break;\n          peer \u003d (DomainPeer)curPeer.peer;\n        }\n        ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n        clientContext.getPeerCache().put(datanode, peer);\n        return info;\n      } catch (IOException e) {\n        if (slot !\u003d null) {\n          cache.freeSlot(slot);\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached socket.\n          // These are considered less serious, because the socket may be stale.\n          LOG.debug(\"{}: closing stale domain peer {}\", this, peer, e);\n          IOUtilsClient.cleanupWithLogger(LOG, peer);\n        } else {\n          // Handle an I/O error we got when using a newly created socket.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(this + \": I/O error requesting file descriptors.  \" +\n              \"Disabling domain socket \" + peer.getDomainSocket(), e);\n          IOUtilsClient.cleanupWithLogger(LOG, peer);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "f308561f1d885491b88db73ac63003202056d661": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8057 Move BlockReader implementation to the client implementation package.  Contributed by Takanobu Asanuma\n",
      "commitDate": "25/04/16 12:01 PM",
      "commitName": "f308561f1d885491b88db73ac63003202056d661",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "25/04/16 9:38 AM",
      "commitNameOld": "10f0f7851a3255caab775777e8fb6c2781d97062",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n    if (createShortCircuitReplicaInfoCallback !\u003d null) {\n      ShortCircuitReplicaInfo info \u003d\n          createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n      if (info !\u003d null) return info;\n    }\n    LOG.trace(\"{}: trying to create ShortCircuitReplicaInfo.\", this);\n    BlockReaderPeer curPeer;\n    while (true) {\n      curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      Slot slot \u003d null;\n      ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n      try {\n        MutableBoolean usedPeer \u003d new MutableBoolean(false);\n        slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n            new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n            clientName);\n        if (usedPeer.booleanValue()) {\n          LOG.trace(\"{}: allocShmSlot used up our previous socket {}.  \"\n              + \"Allocating a new one...\", this, peer.getDomainSocket());\n          curPeer \u003d nextDomainPeer();\n          if (curPeer \u003d\u003d null) break;\n          peer \u003d (DomainPeer)curPeer.peer;\n        }\n        ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n        clientContext.getPeerCache().put(datanode, peer);\n        return info;\n      } catch (IOException e) {\n        if (slot !\u003d null) {\n          cache.freeSlot(slot);\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached socket.\n          // These are considered less serious, because the socket may be stale.\n          LOG.debug(\"{}: closing stale domain peer {}\", this, peer, e);\n          IOUtilsClient.cleanup(LOG, peer);\n        } else {\n          // Handle an I/O error we got when using a newly created socket.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(this + \": I/O error requesting file descriptors.  \" +\n              \"Disabling domain socket \" + peer.getDomainSocket(), e);\n          IOUtilsClient.cleanup(LOG, peer);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java"
      }
    },
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,54 @@\n   public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n     if (createShortCircuitReplicaInfoCallback !\u003d null) {\n       ShortCircuitReplicaInfo info \u003d\n         createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n       if (info !\u003d null) return info;\n     }\n-    if (LOG.isTraceEnabled()) {\n-      LOG.trace(this + \": trying to create ShortCircuitReplicaInfo.\");\n-    }\n+    LOG.trace(\"{}: trying to create ShortCircuitReplicaInfo.\", this);\n     BlockReaderPeer curPeer;\n     while (true) {\n       curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       Slot slot \u003d null;\n       ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n       try {\n         MutableBoolean usedPeer \u003d new MutableBoolean(false);\n         slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n             new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n             clientName);\n         if (usedPeer.booleanValue()) {\n-          if (LOG.isTraceEnabled()) {\n-            LOG.trace(this + \": allocShmSlot used up our previous socket \" +\n-              peer.getDomainSocket() + \".  Allocating a new one...\");\n-          }\n+          LOG.trace(\"{}: allocShmSlot used up our previous socket {}.  \"\n+              + \"Allocating a new one...\", this, peer.getDomainSocket());\n           curPeer \u003d nextDomainPeer();\n           if (curPeer \u003d\u003d null) break;\n           peer \u003d (DomainPeer)curPeer.peer;\n         }\n         ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n         clientContext.getPeerCache().put(datanode, peer);\n         return info;\n       } catch (IOException e) {\n         if (slot !\u003d null) {\n           cache.freeSlot(slot);\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached socket.\n           // These are considered less serious, because the socket may be stale.\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(this + \": closing stale domain peer \" + peer, e);\n-          }\n+          LOG.debug(\"{}: closing stale domain peer {}\", this, peer, e);\n           IOUtilsClient.cleanup(LOG, peer);\n         } else {\n           // Handle an I/O error we got when using a newly created socket.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(this + \": I/O error requesting file descriptors.  \" + \n               \"Disabling domain socket \" + peer.getDomainSocket(), e);\n           IOUtilsClient.cleanup(LOG, peer);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n    if (createShortCircuitReplicaInfoCallback !\u003d null) {\n      ShortCircuitReplicaInfo info \u003d\n        createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n      if (info !\u003d null) return info;\n    }\n    LOG.trace(\"{}: trying to create ShortCircuitReplicaInfo.\", this);\n    BlockReaderPeer curPeer;\n    while (true) {\n      curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      Slot slot \u003d null;\n      ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n      try {\n        MutableBoolean usedPeer \u003d new MutableBoolean(false);\n        slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n            new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n            clientName);\n        if (usedPeer.booleanValue()) {\n          LOG.trace(\"{}: allocShmSlot used up our previous socket {}.  \"\n              + \"Allocating a new one...\", this, peer.getDomainSocket());\n          curPeer \u003d nextDomainPeer();\n          if (curPeer \u003d\u003d null) break;\n          peer \u003d (DomainPeer)curPeer.peer;\n        }\n        ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n        clientContext.getPeerCache().put(datanode, peer);\n        return info;\n      } catch (IOException e) {\n        if (slot !\u003d null) {\n          cache.freeSlot(slot);\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached socket.\n          // These are considered less serious, because the socket may be stale.\n          LOG.debug(\"{}: closing stale domain peer {}\", this, peer, e);\n          IOUtilsClient.cleanup(LOG, peer);\n        } else {\n          // Handle an I/O error we got when using a newly created socket.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(this + \": I/O error requesting file descriptors.  \" + \n              \"Disabling domain socket \" + peer.getDomainSocket(), e);\n          IOUtilsClient.cleanup(LOG, peer);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,60 @@\n   public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n     if (createShortCircuitReplicaInfoCallback !\u003d null) {\n       ShortCircuitReplicaInfo info \u003d\n         createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n       if (info !\u003d null) return info;\n     }\n-    LOG.trace(\"{}: trying to create ShortCircuitReplicaInfo.\", this);\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(this + \": trying to create ShortCircuitReplicaInfo.\");\n+    }\n     BlockReaderPeer curPeer;\n     while (true) {\n       curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       Slot slot \u003d null;\n       ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n       try {\n         MutableBoolean usedPeer \u003d new MutableBoolean(false);\n         slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n             new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n             clientName);\n         if (usedPeer.booleanValue()) {\n-          LOG.trace(\"{}: allocShmSlot used up our previous socket {}.  \"\n-              + \"Allocating a new one...\", this, peer.getDomainSocket());\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(this + \": allocShmSlot used up our previous socket \" +\n+              peer.getDomainSocket() + \".  Allocating a new one...\");\n+          }\n           curPeer \u003d nextDomainPeer();\n           if (curPeer \u003d\u003d null) break;\n           peer \u003d (DomainPeer)curPeer.peer;\n         }\n         ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n         clientContext.getPeerCache().put(datanode, peer);\n         return info;\n       } catch (IOException e) {\n         if (slot !\u003d null) {\n           cache.freeSlot(slot);\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached socket.\n           // These are considered less serious, because the socket may be stale.\n-          LOG.debug(\"{}: closing stale domain peer {}\", this, peer, e);\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(this + \": closing stale domain peer \" + peer, e);\n+          }\n           IOUtilsClient.cleanup(LOG, peer);\n         } else {\n           // Handle an I/O error we got when using a newly created socket.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(this + \": I/O error requesting file descriptors.  \" + \n               \"Disabling domain socket \" + peer.getDomainSocket(), e);\n           IOUtilsClient.cleanup(LOG, peer);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n    if (createShortCircuitReplicaInfoCallback !\u003d null) {\n      ShortCircuitReplicaInfo info \u003d\n        createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n      if (info !\u003d null) return info;\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create ShortCircuitReplicaInfo.\");\n    }\n    BlockReaderPeer curPeer;\n    while (true) {\n      curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      Slot slot \u003d null;\n      ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n      try {\n        MutableBoolean usedPeer \u003d new MutableBoolean(false);\n        slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n            new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n            clientName);\n        if (usedPeer.booleanValue()) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": allocShmSlot used up our previous socket \" +\n              peer.getDomainSocket() + \".  Allocating a new one...\");\n          }\n          curPeer \u003d nextDomainPeer();\n          if (curPeer \u003d\u003d null) break;\n          peer \u003d (DomainPeer)curPeer.peer;\n        }\n        ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n        clientContext.getPeerCache().put(datanode, peer);\n        return info;\n      } catch (IOException e) {\n        if (slot !\u003d null) {\n          cache.freeSlot(slot);\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached socket.\n          // These are considered less serious, because the socket may be stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(this + \": closing stale domain peer \" + peer, e);\n          }\n          IOUtilsClient.cleanup(LOG, peer);\n        } else {\n          // Handle an I/O error we got when using a newly created socket.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(this + \": I/O error requesting file descriptors.  \" + \n              \"Disabling domain socket \" + peer.getDomainSocket(), e);\n          IOUtilsClient.cleanup(LOG, peer);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/09/15 1:39 PM",
      "commitNameOld": "e5992ef4df63fbc6a6b8e357b32c647e7837c662",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,54 @@\n   public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n     if (createShortCircuitReplicaInfoCallback !\u003d null) {\n       ShortCircuitReplicaInfo info \u003d\n         createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n       if (info !\u003d null) return info;\n     }\n-    if (LOG.isTraceEnabled()) {\n-      LOG.trace(this + \": trying to create ShortCircuitReplicaInfo.\");\n-    }\n+    LOG.trace(\"{}: trying to create ShortCircuitReplicaInfo.\", this);\n     BlockReaderPeer curPeer;\n     while (true) {\n       curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       Slot slot \u003d null;\n       ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n       try {\n         MutableBoolean usedPeer \u003d new MutableBoolean(false);\n         slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n             new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n             clientName);\n         if (usedPeer.booleanValue()) {\n-          if (LOG.isTraceEnabled()) {\n-            LOG.trace(this + \": allocShmSlot used up our previous socket \" +\n-              peer.getDomainSocket() + \".  Allocating a new one...\");\n-          }\n+          LOG.trace(\"{}: allocShmSlot used up our previous socket {}.  \"\n+              + \"Allocating a new one...\", this, peer.getDomainSocket());\n           curPeer \u003d nextDomainPeer();\n           if (curPeer \u003d\u003d null) break;\n           peer \u003d (DomainPeer)curPeer.peer;\n         }\n         ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n         clientContext.getPeerCache().put(datanode, peer);\n         return info;\n       } catch (IOException e) {\n         if (slot !\u003d null) {\n           cache.freeSlot(slot);\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached socket.\n           // These are considered less serious, because the socket may be stale.\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(this + \": closing stale domain peer \" + peer, e);\n-          }\n+          LOG.debug(\"{}: closing stale domain peer {}\", this, peer, e);\n           IOUtilsClient.cleanup(LOG, peer);\n         } else {\n           // Handle an I/O error we got when using a newly created socket.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(this + \": I/O error requesting file descriptors.  \" + \n               \"Disabling domain socket \" + peer.getDomainSocket(), e);\n           IOUtilsClient.cleanup(LOG, peer);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n    if (createShortCircuitReplicaInfoCallback !\u003d null) {\n      ShortCircuitReplicaInfo info \u003d\n        createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n      if (info !\u003d null) return info;\n    }\n    LOG.trace(\"{}: trying to create ShortCircuitReplicaInfo.\", this);\n    BlockReaderPeer curPeer;\n    while (true) {\n      curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      Slot slot \u003d null;\n      ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n      try {\n        MutableBoolean usedPeer \u003d new MutableBoolean(false);\n        slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n            new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n            clientName);\n        if (usedPeer.booleanValue()) {\n          LOG.trace(\"{}: allocShmSlot used up our previous socket {}.  \"\n              + \"Allocating a new one...\", this, peer.getDomainSocket());\n          curPeer \u003d nextDomainPeer();\n          if (curPeer \u003d\u003d null) break;\n          peer \u003d (DomainPeer)curPeer.peer;\n        }\n        ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n        clientContext.getPeerCache().put(datanode, peer);\n        return info;\n      } catch (IOException e) {\n        if (slot !\u003d null) {\n          cache.freeSlot(slot);\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached socket.\n          // These are considered less serious, because the socket may be stale.\n          LOG.debug(\"{}: closing stale domain peer {}\", this, peer, e);\n          IOUtilsClient.cleanup(LOG, peer);\n        } else {\n          // Handle an I/O error we got when using a newly created socket.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(this + \": I/O error requesting file descriptors.  \" + \n              \"Disabling domain socket \" + peer.getDomainSocket(), e);\n          IOUtilsClient.cleanup(LOG, peer);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "26/09/15 11:08 AM",
          "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "26/09/15 9:06 AM",
          "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,60 @@\n   public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n     if (createShortCircuitReplicaInfoCallback !\u003d null) {\n       ShortCircuitReplicaInfo info \u003d\n         createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n       if (info !\u003d null) return info;\n     }\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(this + \": trying to create ShortCircuitReplicaInfo.\");\n     }\n     BlockReaderPeer curPeer;\n     while (true) {\n       curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       Slot slot \u003d null;\n       ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n       try {\n         MutableBoolean usedPeer \u003d new MutableBoolean(false);\n         slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n             new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n             clientName);\n         if (usedPeer.booleanValue()) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": allocShmSlot used up our previous socket \" +\n               peer.getDomainSocket() + \".  Allocating a new one...\");\n           }\n           curPeer \u003d nextDomainPeer();\n           if (curPeer \u003d\u003d null) break;\n           peer \u003d (DomainPeer)curPeer.peer;\n         }\n         ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n         clientContext.getPeerCache().put(datanode, peer);\n         return info;\n       } catch (IOException e) {\n         if (slot !\u003d null) {\n           cache.freeSlot(slot);\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached socket.\n           // These are considered less serious, because the socket may be stale.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(this + \": closing stale domain peer \" + peer, e);\n           }\n-          IOUtils.cleanup(LOG, peer);\n+          IOUtilsClient.cleanup(LOG, peer);\n         } else {\n           // Handle an I/O error we got when using a newly created socket.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(this + \": I/O error requesting file descriptors.  \" + \n               \"Disabling domain socket \" + peer.getDomainSocket(), e);\n-          IOUtils.cleanup(LOG, peer);\n+          IOUtilsClient.cleanup(LOG, peer);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n    if (createShortCircuitReplicaInfoCallback !\u003d null) {\n      ShortCircuitReplicaInfo info \u003d\n        createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n      if (info !\u003d null) return info;\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create ShortCircuitReplicaInfo.\");\n    }\n    BlockReaderPeer curPeer;\n    while (true) {\n      curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      Slot slot \u003d null;\n      ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n      try {\n        MutableBoolean usedPeer \u003d new MutableBoolean(false);\n        slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n            new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n            clientName);\n        if (usedPeer.booleanValue()) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": allocShmSlot used up our previous socket \" +\n              peer.getDomainSocket() + \".  Allocating a new one...\");\n          }\n          curPeer \u003d nextDomainPeer();\n          if (curPeer \u003d\u003d null) break;\n          peer \u003d (DomainPeer)curPeer.peer;\n        }\n        ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n        clientContext.getPeerCache().put(datanode, peer);\n        return info;\n      } catch (IOException e) {\n        if (slot !\u003d null) {\n          cache.freeSlot(slot);\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached socket.\n          // These are considered less serious, because the socket may be stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(this + \": closing stale domain peer \" + peer, e);\n          }\n          IOUtilsClient.cleanup(LOG, peer);\n        } else {\n          // Handle an I/O error we got when using a newly created socket.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(this + \": I/O error requesting file descriptors.  \" + \n              \"Disabling domain socket \" + peer.getDomainSocket(), e);\n          IOUtilsClient.cleanup(LOG, peer);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "26/09/15 11:08 AM",
          "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "26/09/15 9:06 AM",
          "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,60 @@\n   public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n     if (createShortCircuitReplicaInfoCallback !\u003d null) {\n       ShortCircuitReplicaInfo info \u003d\n         createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n       if (info !\u003d null) return info;\n     }\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(this + \": trying to create ShortCircuitReplicaInfo.\");\n     }\n     BlockReaderPeer curPeer;\n     while (true) {\n       curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n       if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n       Slot slot \u003d null;\n       ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n       try {\n         MutableBoolean usedPeer \u003d new MutableBoolean(false);\n         slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n             new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n             clientName);\n         if (usedPeer.booleanValue()) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": allocShmSlot used up our previous socket \" +\n               peer.getDomainSocket() + \".  Allocating a new one...\");\n           }\n           curPeer \u003d nextDomainPeer();\n           if (curPeer \u003d\u003d null) break;\n           peer \u003d (DomainPeer)curPeer.peer;\n         }\n         ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n         clientContext.getPeerCache().put(datanode, peer);\n         return info;\n       } catch (IOException e) {\n         if (slot !\u003d null) {\n           cache.freeSlot(slot);\n         }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached socket.\n           // These are considered less serious, because the socket may be stale.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(this + \": closing stale domain peer \" + peer, e);\n           }\n-          IOUtils.cleanup(LOG, peer);\n+          IOUtilsClient.cleanup(LOG, peer);\n         } else {\n           // Handle an I/O error we got when using a newly created socket.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(this + \": I/O error requesting file descriptors.  \" + \n               \"Disabling domain socket \" + peer.getDomainSocket(), e);\n-          IOUtils.cleanup(LOG, peer);\n+          IOUtilsClient.cleanup(LOG, peer);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n    if (createShortCircuitReplicaInfoCallback !\u003d null) {\n      ShortCircuitReplicaInfo info \u003d\n        createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n      if (info !\u003d null) return info;\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create ShortCircuitReplicaInfo.\");\n    }\n    BlockReaderPeer curPeer;\n    while (true) {\n      curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      Slot slot \u003d null;\n      ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n      try {\n        MutableBoolean usedPeer \u003d new MutableBoolean(false);\n        slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n            new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n            clientName);\n        if (usedPeer.booleanValue()) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": allocShmSlot used up our previous socket \" +\n              peer.getDomainSocket() + \".  Allocating a new one...\");\n          }\n          curPeer \u003d nextDomainPeer();\n          if (curPeer \u003d\u003d null) break;\n          peer \u003d (DomainPeer)curPeer.peer;\n        }\n        ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n        clientContext.getPeerCache().put(datanode, peer);\n        return info;\n      } catch (IOException e) {\n        if (slot !\u003d null) {\n          cache.freeSlot(slot);\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached socket.\n          // These are considered less serious, because the socket may be stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(this + \": closing stale domain peer \" + peer, e);\n          }\n          IOUtilsClient.cleanup(LOG, peer);\n        } else {\n          // Handle an I/O error we got when using a newly created socket.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(this + \": I/O error requesting file descriptors.  \" + \n              \"Disabling domain socket \" + peer.getDomainSocket(), e);\n          IOUtilsClient.cleanup(LOG, peer);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
          "extendedDetails": {}
        }
      ]
    },
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5950. The DFSClient and DataNode should use shared memory segments to communicate short-circuit information (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/14 7:58 PM",
      "commitName": "dd049a2f6097da189ccce2f5890a2b9bc77fa73f",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "12/02/14 7:10 PM",
      "commitNameOld": "f0d64a078da7e932b9509734f75170e3e525e68c",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 18.03,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,60 @@\n   public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n     if (createShortCircuitReplicaInfoCallback !\u003d null) {\n       ShortCircuitReplicaInfo info \u003d\n         createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n       if (info !\u003d null) return info;\n     }\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(this + \": trying to create ShortCircuitReplicaInfo.\");\n     }\n     BlockReaderPeer curPeer;\n     while (true) {\n       curPeer \u003d nextDomainPeer();\n       if (curPeer \u003d\u003d null) break;\n+      if (curPeer.fromCache) remainingCacheTries--;\n       DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n+      Slot slot \u003d null;\n+      ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n       try {\n-        ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer);\n+        MutableBoolean usedPeer \u003d new MutableBoolean(false);\n+        slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n+            new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n+            clientName);\n+        if (usedPeer.booleanValue()) {\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(this + \": allocShmSlot used up our previous socket \" +\n+              peer.getDomainSocket() + \".  Allocating a new one...\");\n+          }\n+          curPeer \u003d nextDomainPeer();\n+          if (curPeer \u003d\u003d null) break;\n+          peer \u003d (DomainPeer)curPeer.peer;\n+        }\n+        ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n         clientContext.getPeerCache().put(datanode, peer);\n         return info;\n       } catch (IOException e) {\n+        if (slot !\u003d null) {\n+          cache.freeSlot(slot);\n+        }\n         if (curPeer.fromCache) {\n           // Handle an I/O error we got when using a cached socket.\n           // These are considered less serious, because the socket may be stale.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(this + \": closing stale domain peer \" + peer, e);\n           }\n           IOUtils.cleanup(LOG, peer);\n         } else {\n           // Handle an I/O error we got when using a newly created socket.\n           // We temporarily disable the domain socket path for a few minutes in\n           // this case, to prevent wasting more time on it.\n           LOG.warn(this + \": I/O error requesting file descriptors.  \" + \n               \"Disabling domain socket \" + peer.getDomainSocket(), e);\n           IOUtils.cleanup(LOG, peer);\n           clientContext.getDomainSocketFactory()\n               .disableDomainSocketPath(pathInfo.getPath());\n           return null;\n         }\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n    if (createShortCircuitReplicaInfoCallback !\u003d null) {\n      ShortCircuitReplicaInfo info \u003d\n        createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n      if (info !\u003d null) return info;\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create ShortCircuitReplicaInfo.\");\n    }\n    BlockReaderPeer curPeer;\n    while (true) {\n      curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      if (curPeer.fromCache) remainingCacheTries--;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      Slot slot \u003d null;\n      ShortCircuitCache cache \u003d clientContext.getShortCircuitCache();\n      try {\n        MutableBoolean usedPeer \u003d new MutableBoolean(false);\n        slot \u003d cache.allocShmSlot(datanode, peer, usedPeer,\n            new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId()),\n            clientName);\n        if (usedPeer.booleanValue()) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": allocShmSlot used up our previous socket \" +\n              peer.getDomainSocket() + \".  Allocating a new one...\");\n          }\n          curPeer \u003d nextDomainPeer();\n          if (curPeer \u003d\u003d null) break;\n          peer \u003d (DomainPeer)curPeer.peer;\n        }\n        ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer, slot);\n        clientContext.getPeerCache().put(datanode, peer);\n        return info;\n      } catch (IOException e) {\n        if (slot !\u003d null) {\n          cache.freeSlot(slot);\n        }\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached socket.\n          // These are considered less serious, because the socket may be stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(this + \": closing stale domain peer \" + peer, e);\n          }\n          IOUtils.cleanup(LOG, peer);\n        } else {\n          // Handle an I/O error we got when using a newly created socket.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(this + \": I/O error requesting file descriptors.  \" + \n              \"Disabling domain socket \" + peer.getDomainSocket(), e);\n          IOUtils.cleanup(LOG, peer);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 11:08 AM",
      "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,41 @@\n+  public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n+    if (createShortCircuitReplicaInfoCallback !\u003d null) {\n+      ShortCircuitReplicaInfo info \u003d\n+        createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n+      if (info !\u003d null) return info;\n+    }\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(this + \": trying to create ShortCircuitReplicaInfo.\");\n+    }\n+    BlockReaderPeer curPeer;\n+    while (true) {\n+      curPeer \u003d nextDomainPeer();\n+      if (curPeer \u003d\u003d null) break;\n+      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n+      try {\n+        ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer);\n+        clientContext.getPeerCache().put(datanode, peer);\n+        return info;\n+      } catch (IOException e) {\n+        if (curPeer.fromCache) {\n+          // Handle an I/O error we got when using a cached socket.\n+          // These are considered less serious, because the socket may be stale.\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(this + \": closing stale domain peer \" + peer, e);\n+          }\n+          IOUtils.cleanup(LOG, peer);\n+        } else {\n+          // Handle an I/O error we got when using a newly created socket.\n+          // We temporarily disable the domain socket path for a few minutes in\n+          // this case, to prevent wasting more time on it.\n+          LOG.warn(this + \": I/O error requesting file descriptors.  \" + \n+              \"Disabling domain socket \" + peer.getDomainSocket(), e);\n+          IOUtils.cleanup(LOG, peer);\n+          clientContext.getDomainSocketFactory()\n+              .disableDomainSocketPath(pathInfo.getPath());\n+          return null;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ShortCircuitReplicaInfo createShortCircuitReplicaInfo() {\n    if (createShortCircuitReplicaInfoCallback !\u003d null) {\n      ShortCircuitReplicaInfo info \u003d\n        createShortCircuitReplicaInfoCallback.createShortCircuitReplicaInfo();\n      if (info !\u003d null) return info;\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": trying to create ShortCircuitReplicaInfo.\");\n    }\n    BlockReaderPeer curPeer;\n    while (true) {\n      curPeer \u003d nextDomainPeer();\n      if (curPeer \u003d\u003d null) break;\n      DomainPeer peer \u003d (DomainPeer)curPeer.peer;\n      try {\n        ShortCircuitReplicaInfo info \u003d requestFileDescriptors(peer);\n        clientContext.getPeerCache().put(datanode, peer);\n        return info;\n      } catch (IOException e) {\n        if (curPeer.fromCache) {\n          // Handle an I/O error we got when using a cached socket.\n          // These are considered less serious, because the socket may be stale.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(this + \": closing stale domain peer \" + peer, e);\n          }\n          IOUtils.cleanup(LOG, peer);\n        } else {\n          // Handle an I/O error we got when using a newly created socket.\n          // We temporarily disable the domain socket path for a few minutes in\n          // this case, to prevent wasting more time on it.\n          LOG.warn(this + \": I/O error requesting file descriptors.  \" + \n              \"Disabling domain socket \" + peer.getDomainSocket(), e);\n          IOUtils.cleanup(LOG, peer);\n          clientContext.getDomainSocketFactory()\n              .disableDomainSocketPath(pathInfo.getPath());\n          return null;\n        }\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java"
    }
  }
}