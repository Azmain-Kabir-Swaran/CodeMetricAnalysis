{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DynamoDBMetadataStore.java",
  "functionName": "getDiagnostics",
  "functionId": "getDiagnostics",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
  "functionStartLine": 1872,
  "functionEndLine": 1905,
  "numCommitsSeen": 42,
  "timeTaken": 3889,
  "changeHistory": [
    "6c1fa24ac02b82b5e267dc966e34fb7d4f9556db",
    "cf4efcab3b66271745b7be5db30fdc5ae656d06c",
    "d7c0a08a1c077752918a8cf1b4f1900ce2721899",
    "d7232857d8d1e10cdac171acdc931187e45fd6be",
    "989a3929a92edb000cfa486146987fb75a9eda61",
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f"
  ],
  "changeHistoryShort": {
    "6c1fa24ac02b82b5e267dc966e34fb7d4f9556db": "Ybodychange",
    "cf4efcab3b66271745b7be5db30fdc5ae656d06c": "Ybodychange",
    "d7c0a08a1c077752918a8cf1b4f1900ce2721899": "Ybodychange",
    "d7232857d8d1e10cdac171acdc931187e45fd6be": "Ybodychange",
    "989a3929a92edb000cfa486146987fb75a9eda61": "Ybodychange",
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6c1fa24ac02b82b5e267dc966e34fb7d4f9556db": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16732. S3Guard to support encrypted DynamoDB table (#1752). Contributed by Mingliang Liu.\n\n",
      "commitDate": "23/01/20 5:21 AM",
      "commitName": "6c1fa24ac02b82b5e267dc966e34fb7d4f9556db",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "10/01/20 3:11 AM",
      "commitNameOld": "49df83899543586bbcaf80f01399ade031cf68b0",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 13.09,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   public Map\u003cString, String\u003e getDiagnostics() throws IOException {\n     Map\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();\n     if (table !\u003d null) {\n       TableDescription desc \u003d getTableDescription(true);\n       map.put(\"name\", desc.getTableName());\n       map.put(STATUS, desc.getTableStatus());\n       map.put(\"ARN\", desc.getTableArn());\n       map.put(\"size\", desc.getTableSizeBytes().toString());\n       map.put(TABLE, desc.toString());\n       ProvisionedThroughputDescription throughput\n           \u003d desc.getProvisionedThroughput();\n       map.put(READ_CAPACITY, throughput.getReadCapacityUnits().toString());\n       map.put(WRITE_CAPACITY, throughput.getWriteCapacityUnits().toString());\n       map.put(BILLING_MODE,\n           throughput.getWriteCapacityUnits() \u003d\u003d 0\n               ? BILLING_MODE_PER_REQUEST\n               : BILLING_MODE_PROVISIONED);\n-      map.put(TABLE, desc.toString());\n+      map.put(\"sse\", desc.getSSEDescription() \u003d\u003d null\n+          ? \"DISABLED\"\n+          : desc.getSSEDescription().toString());\n       map.put(MetadataStoreCapabilities.PERSISTS_AUTHORITATIVE_BIT,\n           Boolean.toString(true));\n     } else {\n       map.put(\"name\", \"DynamoDB Metadata Store\");\n       map.put(TABLE, \"none\");\n       map.put(STATUS, \"undefined\");\n     }\n     map.put(\"description\", DESCRIPTION);\n     map.put(\"region\", region);\n     if (batchWriteRetryPolicy !\u003d null) {\n       map.put(\"retryPolicy\", batchWriteRetryPolicy.toString());\n     }\n     return map;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, String\u003e getDiagnostics() throws IOException {\n    Map\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();\n    if (table !\u003d null) {\n      TableDescription desc \u003d getTableDescription(true);\n      map.put(\"name\", desc.getTableName());\n      map.put(STATUS, desc.getTableStatus());\n      map.put(\"ARN\", desc.getTableArn());\n      map.put(\"size\", desc.getTableSizeBytes().toString());\n      map.put(TABLE, desc.toString());\n      ProvisionedThroughputDescription throughput\n          \u003d desc.getProvisionedThroughput();\n      map.put(READ_CAPACITY, throughput.getReadCapacityUnits().toString());\n      map.put(WRITE_CAPACITY, throughput.getWriteCapacityUnits().toString());\n      map.put(BILLING_MODE,\n          throughput.getWriteCapacityUnits() \u003d\u003d 0\n              ? BILLING_MODE_PER_REQUEST\n              : BILLING_MODE_PROVISIONED);\n      map.put(\"sse\", desc.getSSEDescription() \u003d\u003d null\n          ? \"DISABLED\"\n          : desc.getSSEDescription().toString());\n      map.put(MetadataStoreCapabilities.PERSISTS_AUTHORITATIVE_BIT,\n          Boolean.toString(true));\n    } else {\n      map.put(\"name\", \"DynamoDB Metadata Store\");\n      map.put(TABLE, \"none\");\n      map.put(STATUS, \"undefined\");\n    }\n    map.put(\"description\", DESCRIPTION);\n    map.put(\"region\", region);\n    if (batchWriteRetryPolicy !\u003d null) {\n      map.put(\"retryPolicy\", batchWriteRetryPolicy.toString());\n    }\n    return map;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "cf4efcab3b66271745b7be5db30fdc5ae656d06c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16118. S3Guard to support on-demand DDB tables.\n\nThis is the first step for on-demand operations: things recognize when they are using on-demand tables,\nas do the tests.\n\nContributed by Steve Loughran.\n",
      "commitDate": "11/04/19 5:12 PM",
      "commitName": "cf4efcab3b66271745b7be5db30fdc5ae656d06c",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "28/03/19 8:49 AM",
      "commitNameOld": "cfb01869038065defe50ab53d4d1eda4e6cdee33",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 14.35,
      "commitsBetweenForRepo": 113,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,32 @@\n   public Map\u003cString, String\u003e getDiagnostics() throws IOException {\n     Map\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();\n     if (table !\u003d null) {\n       TableDescription desc \u003d getTableDescription(true);\n       map.put(\"name\", desc.getTableName());\n       map.put(STATUS, desc.getTableStatus());\n       map.put(\"ARN\", desc.getTableArn());\n       map.put(\"size\", desc.getTableSizeBytes().toString());\n       map.put(TABLE, desc.toString());\n       ProvisionedThroughputDescription throughput\n           \u003d desc.getProvisionedThroughput();\n       map.put(READ_CAPACITY, throughput.getReadCapacityUnits().toString());\n       map.put(WRITE_CAPACITY, throughput.getWriteCapacityUnits().toString());\n+      map.put(BILLING_MODE,\n+          throughput.getWriteCapacityUnits() \u003d\u003d 0\n+              ? BILLING_MODE_PER_REQUEST\n+              : BILLING_MODE_PROVISIONED);\n       map.put(TABLE, desc.toString());\n       map.put(MetadataStoreCapabilities.PERSISTS_AUTHORITATIVE_BIT,\n           Boolean.toString(true));\n     } else {\n       map.put(\"name\", \"DynamoDB Metadata Store\");\n       map.put(TABLE, \"none\");\n       map.put(STATUS, \"undefined\");\n     }\n     map.put(\"description\", DESCRIPTION);\n     map.put(\"region\", region);\n     if (batchWriteRetryPolicy !\u003d null) {\n       map.put(\"retryPolicy\", batchWriteRetryPolicy.toString());\n     }\n     return map;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, String\u003e getDiagnostics() throws IOException {\n    Map\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();\n    if (table !\u003d null) {\n      TableDescription desc \u003d getTableDescription(true);\n      map.put(\"name\", desc.getTableName());\n      map.put(STATUS, desc.getTableStatus());\n      map.put(\"ARN\", desc.getTableArn());\n      map.put(\"size\", desc.getTableSizeBytes().toString());\n      map.put(TABLE, desc.toString());\n      ProvisionedThroughputDescription throughput\n          \u003d desc.getProvisionedThroughput();\n      map.put(READ_CAPACITY, throughput.getReadCapacityUnits().toString());\n      map.put(WRITE_CAPACITY, throughput.getWriteCapacityUnits().toString());\n      map.put(BILLING_MODE,\n          throughput.getWriteCapacityUnits() \u003d\u003d 0\n              ? BILLING_MODE_PER_REQUEST\n              : BILLING_MODE_PROVISIONED);\n      map.put(TABLE, desc.toString());\n      map.put(MetadataStoreCapabilities.PERSISTS_AUTHORITATIVE_BIT,\n          Boolean.toString(true));\n    } else {\n      map.put(\"name\", \"DynamoDB Metadata Store\");\n      map.put(TABLE, \"none\");\n      map.put(STATUS, \"undefined\");\n    }\n    map.put(\"description\", DESCRIPTION);\n    map.put(\"region\", region);\n    if (batchWriteRetryPolicy !\u003d null) {\n      map.put(\"retryPolicy\", batchWriteRetryPolicy.toString());\n    }\n    return map;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "d7c0a08a1c077752918a8cf1b4f1900ce2721899": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15426 Make S3guard client resilient to DDB throttle events and network failures (Contributed by Steve Loughran)\n",
      "commitDate": "12/09/18 9:04 PM",
      "commitName": "d7c0a08a1c077752918a8cf1b4f1900ce2721899",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "12/09/18 4:36 PM",
      "commitNameOld": "d32a8d5d582725eb724b78f27310ad1efd33ed2a",
      "commitAuthorOld": "Aaron Fabbri",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public Map\u003cString, String\u003e getDiagnostics() throws IOException {\n     Map\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();\n     if (table !\u003d null) {\n       TableDescription desc \u003d getTableDescription(true);\n       map.put(\"name\", desc.getTableName());\n       map.put(STATUS, desc.getTableStatus());\n       map.put(\"ARN\", desc.getTableArn());\n       map.put(\"size\", desc.getTableSizeBytes().toString());\n       map.put(TABLE, desc.toString());\n       ProvisionedThroughputDescription throughput\n           \u003d desc.getProvisionedThroughput();\n       map.put(READ_CAPACITY, throughput.getReadCapacityUnits().toString());\n       map.put(WRITE_CAPACITY, throughput.getWriteCapacityUnits().toString());\n       map.put(TABLE, desc.toString());\n       map.put(MetadataStoreCapabilities.PERSISTS_AUTHORITATIVE_BIT,\n           Boolean.toString(true));\n     } else {\n       map.put(\"name\", \"DynamoDB Metadata Store\");\n       map.put(TABLE, \"none\");\n       map.put(STATUS, \"undefined\");\n     }\n     map.put(\"description\", DESCRIPTION);\n     map.put(\"region\", region);\n-    if (dataAccessRetryPolicy !\u003d null) {\n-      map.put(\"retryPolicy\", dataAccessRetryPolicy.toString());\n+    if (batchWriteRetryPolicy !\u003d null) {\n+      map.put(\"retryPolicy\", batchWriteRetryPolicy.toString());\n     }\n     return map;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, String\u003e getDiagnostics() throws IOException {\n    Map\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();\n    if (table !\u003d null) {\n      TableDescription desc \u003d getTableDescription(true);\n      map.put(\"name\", desc.getTableName());\n      map.put(STATUS, desc.getTableStatus());\n      map.put(\"ARN\", desc.getTableArn());\n      map.put(\"size\", desc.getTableSizeBytes().toString());\n      map.put(TABLE, desc.toString());\n      ProvisionedThroughputDescription throughput\n          \u003d desc.getProvisionedThroughput();\n      map.put(READ_CAPACITY, throughput.getReadCapacityUnits().toString());\n      map.put(WRITE_CAPACITY, throughput.getWriteCapacityUnits().toString());\n      map.put(TABLE, desc.toString());\n      map.put(MetadataStoreCapabilities.PERSISTS_AUTHORITATIVE_BIT,\n          Boolean.toString(true));\n    } else {\n      map.put(\"name\", \"DynamoDB Metadata Store\");\n      map.put(TABLE, \"none\");\n      map.put(STATUS, \"undefined\");\n    }\n    map.put(\"description\", DESCRIPTION);\n    map.put(\"region\", region);\n    if (batchWriteRetryPolicy !\u003d null) {\n      map.put(\"retryPolicy\", batchWriteRetryPolicy.toString());\n    }\n    return map;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "d7232857d8d1e10cdac171acdc931187e45fd6be": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14154 Persist isAuthoritative bit in DynamoDBMetaStore (Contributed by Gabor Bota)\n",
      "commitDate": "17/08/18 10:15 AM",
      "commitName": "d7232857d8d1e10cdac171acdc931187e45fd6be",
      "commitAuthor": "Aaron Fabbri",
      "commitDateOld": "08/08/18 10:57 PM",
      "commitNameOld": "da9a39eed138210de29b59b90c449b28da1c04f9",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 8.47,
      "commitsBetweenForRepo": 126,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public Map\u003cString, String\u003e getDiagnostics() throws IOException {\n     Map\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();\n     if (table !\u003d null) {\n       TableDescription desc \u003d getTableDescription(true);\n       map.put(\"name\", desc.getTableName());\n       map.put(STATUS, desc.getTableStatus());\n       map.put(\"ARN\", desc.getTableArn());\n       map.put(\"size\", desc.getTableSizeBytes().toString());\n       map.put(TABLE, desc.toString());\n       ProvisionedThroughputDescription throughput\n           \u003d desc.getProvisionedThroughput();\n       map.put(READ_CAPACITY, throughput.getReadCapacityUnits().toString());\n       map.put(WRITE_CAPACITY, throughput.getWriteCapacityUnits().toString());\n       map.put(TABLE, desc.toString());\n       map.put(MetadataStoreCapabilities.PERSISTS_AUTHORITATIVE_BIT,\n-          Boolean.toString(false));\n+          Boolean.toString(true));\n     } else {\n       map.put(\"name\", \"DynamoDB Metadata Store\");\n       map.put(TABLE, \"none\");\n       map.put(STATUS, \"undefined\");\n     }\n     map.put(\"description\", DESCRIPTION);\n     map.put(\"region\", region);\n     if (dataAccessRetryPolicy !\u003d null) {\n       map.put(\"retryPolicy\", dataAccessRetryPolicy.toString());\n     }\n     return map;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, String\u003e getDiagnostics() throws IOException {\n    Map\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();\n    if (table !\u003d null) {\n      TableDescription desc \u003d getTableDescription(true);\n      map.put(\"name\", desc.getTableName());\n      map.put(STATUS, desc.getTableStatus());\n      map.put(\"ARN\", desc.getTableArn());\n      map.put(\"size\", desc.getTableSizeBytes().toString());\n      map.put(TABLE, desc.toString());\n      ProvisionedThroughputDescription throughput\n          \u003d desc.getProvisionedThroughput();\n      map.put(READ_CAPACITY, throughput.getReadCapacityUnits().toString());\n      map.put(WRITE_CAPACITY, throughput.getWriteCapacityUnits().toString());\n      map.put(TABLE, desc.toString());\n      map.put(MetadataStoreCapabilities.PERSISTS_AUTHORITATIVE_BIT,\n          Boolean.toString(true));\n    } else {\n      map.put(\"name\", \"DynamoDB Metadata Store\");\n      map.put(TABLE, \"none\");\n      map.put(STATUS, \"undefined\");\n    }\n    map.put(\"description\", DESCRIPTION);\n    map.put(\"region\", region);\n    if (dataAccessRetryPolicy !\u003d null) {\n      map.put(\"retryPolicy\", dataAccessRetryPolicy.toString());\n    }\n    return map;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "989a3929a92edb000cfa486146987fb75a9eda61": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14756 S3Guard: expose capability query in MetadataStore and add tests of authoritative mode (Gabor Bota)\n",
      "commitDate": "23/04/18 3:26 PM",
      "commitName": "989a3929a92edb000cfa486146987fb75a9eda61",
      "commitAuthor": "Aaron Fabbri",
      "commitDateOld": "05/04/18 8:23 PM",
      "commitNameOld": "ea3849f0ccd32b2f8acbc6107de3b9e91803ed4a",
      "commitAuthorOld": "Aaron Fabbri",
      "daysBetweenCommits": 17.79,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,28 @@\n   public Map\u003cString, String\u003e getDiagnostics() throws IOException {\n     Map\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();\n     if (table !\u003d null) {\n       TableDescription desc \u003d getTableDescription(true);\n       map.put(\"name\", desc.getTableName());\n       map.put(STATUS, desc.getTableStatus());\n       map.put(\"ARN\", desc.getTableArn());\n       map.put(\"size\", desc.getTableSizeBytes().toString());\n       map.put(TABLE, desc.toString());\n       ProvisionedThroughputDescription throughput\n           \u003d desc.getProvisionedThroughput();\n       map.put(READ_CAPACITY, throughput.getReadCapacityUnits().toString());\n       map.put(WRITE_CAPACITY, throughput.getWriteCapacityUnits().toString());\n       map.put(TABLE, desc.toString());\n+      map.put(MetadataStoreCapabilities.PERSISTS_AUTHORITATIVE_BIT,\n+          Boolean.toString(false));\n     } else {\n       map.put(\"name\", \"DynamoDB Metadata Store\");\n       map.put(TABLE, \"none\");\n       map.put(STATUS, \"undefined\");\n     }\n     map.put(\"description\", DESCRIPTION);\n     map.put(\"region\", region);\n     if (dataAccessRetryPolicy !\u003d null) {\n       map.put(\"retryPolicy\", dataAccessRetryPolicy.toString());\n     }\n     return map;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, String\u003e getDiagnostics() throws IOException {\n    Map\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();\n    if (table !\u003d null) {\n      TableDescription desc \u003d getTableDescription(true);\n      map.put(\"name\", desc.getTableName());\n      map.put(STATUS, desc.getTableStatus());\n      map.put(\"ARN\", desc.getTableArn());\n      map.put(\"size\", desc.getTableSizeBytes().toString());\n      map.put(TABLE, desc.toString());\n      ProvisionedThroughputDescription throughput\n          \u003d desc.getProvisionedThroughput();\n      map.put(READ_CAPACITY, throughput.getReadCapacityUnits().toString());\n      map.put(WRITE_CAPACITY, throughput.getWriteCapacityUnits().toString());\n      map.put(TABLE, desc.toString());\n      map.put(MetadataStoreCapabilities.PERSISTS_AUTHORITATIVE_BIT,\n          Boolean.toString(false));\n    } else {\n      map.put(\"name\", \"DynamoDB Metadata Store\");\n      map.put(TABLE, \"none\");\n      map.put(STATUS, \"undefined\");\n    }\n    map.put(\"description\", DESCRIPTION);\n    map.put(\"region\", region);\n    if (dataAccessRetryPolicy !\u003d null) {\n      map.put(\"retryPolicy\", dataAccessRetryPolicy.toString());\n    }\n    return map;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14220 Enhance S3GuardTool with bucket-info and set-capacity commands, tests. Contributed by Steve Loughran\n",
      "commitDate": "25/09/17 3:59 PM",
      "commitName": "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
      "commitAuthor": "Aaron Fabbri",
      "diff": "@@ -0,0 +1,26 @@\n+  public Map\u003cString, String\u003e getDiagnostics() throws IOException {\n+    Map\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();\n+    if (table !\u003d null) {\n+      TableDescription desc \u003d getTableDescription(true);\n+      map.put(\"name\", desc.getTableName());\n+      map.put(STATUS, desc.getTableStatus());\n+      map.put(\"ARN\", desc.getTableArn());\n+      map.put(\"size\", desc.getTableSizeBytes().toString());\n+      map.put(TABLE, desc.toString());\n+      ProvisionedThroughputDescription throughput\n+          \u003d desc.getProvisionedThroughput();\n+      map.put(READ_CAPACITY, throughput.getReadCapacityUnits().toString());\n+      map.put(WRITE_CAPACITY, throughput.getWriteCapacityUnits().toString());\n+      map.put(TABLE, desc.toString());\n+    } else {\n+      map.put(\"name\", \"DynamoDB Metadata Store\");\n+      map.put(TABLE, \"none\");\n+      map.put(STATUS, \"undefined\");\n+    }\n+    map.put(\"description\", DESCRIPTION);\n+    map.put(\"region\", region);\n+    if (dataAccessRetryPolicy !\u003d null) {\n+      map.put(\"retryPolicy\", dataAccessRetryPolicy.toString());\n+    }\n+    return map;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, String\u003e getDiagnostics() throws IOException {\n    Map\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();\n    if (table !\u003d null) {\n      TableDescription desc \u003d getTableDescription(true);\n      map.put(\"name\", desc.getTableName());\n      map.put(STATUS, desc.getTableStatus());\n      map.put(\"ARN\", desc.getTableArn());\n      map.put(\"size\", desc.getTableSizeBytes().toString());\n      map.put(TABLE, desc.toString());\n      ProvisionedThroughputDescription throughput\n          \u003d desc.getProvisionedThroughput();\n      map.put(READ_CAPACITY, throughput.getReadCapacityUnits().toString());\n      map.put(WRITE_CAPACITY, throughput.getWriteCapacityUnits().toString());\n      map.put(TABLE, desc.toString());\n    } else {\n      map.put(\"name\", \"DynamoDB Metadata Store\");\n      map.put(TABLE, \"none\");\n      map.put(STATUS, \"undefined\");\n    }\n    map.put(\"description\", DESCRIPTION);\n    map.put(\"region\", region);\n    if (dataAccessRetryPolicy !\u003d null) {\n      map.put(\"retryPolicy\", dataAccessRetryPolicy.toString());\n    }\n    return map;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java"
    }
  }
}