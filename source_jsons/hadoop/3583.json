{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSInputStream.java",
  "functionName": "getBlockAt",
  "functionId": "getBlockAt___offset-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
  "functionStartLine": 509,
  "functionEndLine": 533,
  "numCommitsSeen": 219,
  "timeTaken": 8762,
  "changeHistory": [
    "07a5184f74fdeffc42cdaec42ad4378c0e41c541",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "bff5999d07e9416a22846c849487e509ede55040",
    "caa42adf208bfb5625d1b3ef665fbf334ffcccd9",
    "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f",
    "f28f5ed62861a4c87256eddb8a8ab64e05696192",
    "c68b1d1b31e304c27e419e810ded0fc97e435ea6",
    "fb95fce24056c0b0aa5b77683c684fe1b68c4f76",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "07a5184f74fdeffc42cdaec42ad4378c0e41c541": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "bff5999d07e9416a22846c849487e509ede55040": "Ymodifierchange",
    "caa42adf208bfb5625d1b3ef665fbf334ffcccd9": "Ymultichange(Yparameterchange,Ybodychange)",
    "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "f28f5ed62861a4c87256eddb8a8ab64e05696192": "Ybodychange",
    "c68b1d1b31e304c27e419e810ded0fc97e435ea6": "Ybodychange",
    "fb95fce24056c0b0aa5b77683c684fe1b68c4f76": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "07a5184f74fdeffc42cdaec42ad4378c0e41c541": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11379. DFSInputStream may infinite loop requesting block locations. Contributed by Daryn Sharp.\n",
      "commitDate": "10/02/17 10:27 AM",
      "commitName": "07a5184f74fdeffc42cdaec42ad4378c0e41c541",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "05/12/16 10:54 AM",
      "commitNameOld": "1b5cceaffbdde50a87ede81552dc380832db8e79",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 66.98,
      "commitsBetweenForRepo": 323,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,25 @@\n   protected LocatedBlock getBlockAt(long offset) throws IOException {\n     synchronized(infoLock) {\n       assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n \n       final LocatedBlock blk;\n \n       //check offset\n       if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n         throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n             + offset\n             + \", locatedBlocks\u003d\" + locatedBlocks);\n       }\n       else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n         // offset to the portion of the last block,\n         // which is not known to the name-node yet;\n         // getting the last block\n         blk \u003d locatedBlocks.getLastLocatedBlock();\n       }\n       else {\n         // search cached blocks first\n-        int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n-        if (targetBlockIdx \u003c 0) { // block is not cached\n-          targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n-          // fetch more blocks\n-          final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n-          assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n-          locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n-        }\n-        blk \u003d locatedBlocks.get(targetBlockIdx);\n+        blk \u003d fetchBlockAt(offset, 0, true);\n       }\n       return blk;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected LocatedBlock getBlockAt(long offset) throws IOException {\n    synchronized(infoLock) {\n      assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n\n      final LocatedBlock blk;\n\n      //check offset\n      if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n        throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n            + offset\n            + \", locatedBlocks\u003d\" + locatedBlocks);\n      }\n      else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n        // offset to the portion of the last block,\n        // which is not known to the name-node yet;\n        // getting the last block\n        blk \u003d locatedBlocks.getLastLocatedBlock();\n      }\n      else {\n        // search cached blocks first\n        blk \u003d fetchBlockAt(offset, 0, true);\n      }\n      return blk;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected LocatedBlock getBlockAt(long offset) throws IOException {\n    synchronized(infoLock) {\n      assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n\n      final LocatedBlock blk;\n\n      //check offset\n      if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n        throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n            + offset\n            + \", locatedBlocks\u003d\" + locatedBlocks);\n      }\n      else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n        // offset to the portion of the last block,\n        // which is not known to the name-node yet;\n        // getting the last block\n        blk \u003d locatedBlocks.getLastLocatedBlock();\n      }\n      else {\n        // search cached blocks first\n        int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n        if (targetBlockIdx \u003c 0) { // block is not cached\n          targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n          // fetch more blocks\n          final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n          assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n          locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n        }\n        blk \u003d locatedBlocks.get(targetBlockIdx);\n      }\n      return blk;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "bff5999d07e9416a22846c849487e509ede55040": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-8703. Merge refactor of DFSInputStream from ErasureCoding branch (Contributed by Vinayakumar B)\n",
      "commitDate": "02/07/15 3:41 AM",
      "commitName": "bff5999d07e9416a22846c849487e509ede55040",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "04/06/15 10:51 AM",
      "commitNameOld": "ade6d9a61eb2e57a975f0efcdf8828d51ffec5fd",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 27.7,
      "commitsBetweenForRepo": 196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n-  private LocatedBlock getBlockAt(long offset) throws IOException {\n+  protected LocatedBlock getBlockAt(long offset) throws IOException {\n     synchronized(infoLock) {\n       assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n \n       final LocatedBlock blk;\n \n       //check offset\n       if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n         throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n             + offset\n             + \", locatedBlocks\u003d\" + locatedBlocks);\n       }\n       else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n         // offset to the portion of the last block,\n         // which is not known to the name-node yet;\n         // getting the last block\n         blk \u003d locatedBlocks.getLastLocatedBlock();\n       }\n       else {\n         // search cached blocks first\n         int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n         if (targetBlockIdx \u003c 0) { // block is not cached\n           targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n           // fetch more blocks\n           final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n           assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n           locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n         }\n         blk \u003d locatedBlocks.get(targetBlockIdx);\n       }\n       return blk;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected LocatedBlock getBlockAt(long offset) throws IOException {\n    synchronized(infoLock) {\n      assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n\n      final LocatedBlock blk;\n\n      //check offset\n      if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n        throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n            + offset\n            + \", locatedBlocks\u003d\" + locatedBlocks);\n      }\n      else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n        // offset to the portion of the last block,\n        // which is not known to the name-node yet;\n        // getting the last block\n        blk \u003d locatedBlocks.getLastLocatedBlock();\n      }\n      else {\n        // search cached blocks first\n        int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n        if (targetBlockIdx \u003c 0) { // block is not cached\n          targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n          // fetch more blocks\n          final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n          assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n          locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n        }\n        blk \u003d locatedBlocks.get(targetBlockIdx);\n      }\n      return blk;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "caa42adf208bfb5625d1b3ef665fbf334ffcccd9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7495. Remove updatePosition argument from DFSInputStream#getBlockAt() (cmccabe)\n",
      "commitDate": "25/02/15 1:30 PM",
      "commitName": "caa42adf208bfb5625d1b3ef665fbf334ffcccd9",
      "commitAuthor": "Colin Patrick Mccabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7495. Remove updatePosition argument from DFSInputStream#getBlockAt() (cmccabe)\n",
          "commitDate": "25/02/15 1:30 PM",
          "commitName": "caa42adf208bfb5625d1b3ef665fbf334ffcccd9",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "21/02/15 3:38 PM",
          "commitNameOld": "8b465b4b8caed31ca9daeaae108f9a868a30a455",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 3.91,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,33 @@\n-  private LocatedBlock getBlockAt(long offset,\n-      boolean updatePosition) throws IOException {\n+  private LocatedBlock getBlockAt(long offset) throws IOException {\n     synchronized(infoLock) {\n       assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n \n       final LocatedBlock blk;\n \n       //check offset\n       if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n         throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n             + offset\n-            + \", updatePosition\u003d\" + updatePosition\n             + \", locatedBlocks\u003d\" + locatedBlocks);\n       }\n       else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n         // offset to the portion of the last block,\n         // which is not known to the name-node yet;\n         // getting the last block\n         blk \u003d locatedBlocks.getLastLocatedBlock();\n       }\n       else {\n         // search cached blocks first\n         int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n         if (targetBlockIdx \u003c 0) { // block is not cached\n           targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n           // fetch more blocks\n           final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n           assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n           locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n         }\n         blk \u003d locatedBlocks.get(targetBlockIdx);\n       }\n-\n-      // update current position\n-      if (updatePosition) {\n-        // synchronized not strictly needed, since we only get here\n-        // from synchronized caller methods\n-        synchronized(this) {\n-          pos \u003d offset;\n-          blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n-          currentLocatedBlock \u003d blk;\n-        }\n-      }\n       return blk;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock getBlockAt(long offset) throws IOException {\n    synchronized(infoLock) {\n      assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n\n      final LocatedBlock blk;\n\n      //check offset\n      if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n        throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n            + offset\n            + \", locatedBlocks\u003d\" + locatedBlocks);\n      }\n      else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n        // offset to the portion of the last block,\n        // which is not known to the name-node yet;\n        // getting the last block\n        blk \u003d locatedBlocks.getLastLocatedBlock();\n      }\n      else {\n        // search cached blocks first\n        int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n        if (targetBlockIdx \u003c 0) { // block is not cached\n          targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n          // fetch more blocks\n          final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n          assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n          locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n        }\n        blk \u003d locatedBlocks.get(targetBlockIdx);\n      }\n      return blk;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {
            "oldValue": "[offset-long, updatePosition-boolean]",
            "newValue": "[offset-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7495. Remove updatePosition argument from DFSInputStream#getBlockAt() (cmccabe)\n",
          "commitDate": "25/02/15 1:30 PM",
          "commitName": "caa42adf208bfb5625d1b3ef665fbf334ffcccd9",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "21/02/15 3:38 PM",
          "commitNameOld": "8b465b4b8caed31ca9daeaae108f9a868a30a455",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 3.91,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,33 @@\n-  private LocatedBlock getBlockAt(long offset,\n-      boolean updatePosition) throws IOException {\n+  private LocatedBlock getBlockAt(long offset) throws IOException {\n     synchronized(infoLock) {\n       assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n \n       final LocatedBlock blk;\n \n       //check offset\n       if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n         throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n             + offset\n-            + \", updatePosition\u003d\" + updatePosition\n             + \", locatedBlocks\u003d\" + locatedBlocks);\n       }\n       else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n         // offset to the portion of the last block,\n         // which is not known to the name-node yet;\n         // getting the last block\n         blk \u003d locatedBlocks.getLastLocatedBlock();\n       }\n       else {\n         // search cached blocks first\n         int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n         if (targetBlockIdx \u003c 0) { // block is not cached\n           targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n           // fetch more blocks\n           final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n           assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n           locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n         }\n         blk \u003d locatedBlocks.get(targetBlockIdx);\n       }\n-\n-      // update current position\n-      if (updatePosition) {\n-        // synchronized not strictly needed, since we only get here\n-        // from synchronized caller methods\n-        synchronized(this) {\n-          pos \u003d offset;\n-          blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n-          currentLocatedBlock \u003d blk;\n-        }\n-      }\n       return blk;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock getBlockAt(long offset) throws IOException {\n    synchronized(infoLock) {\n      assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n\n      final LocatedBlock blk;\n\n      //check offset\n      if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n        throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n            + offset\n            + \", locatedBlocks\u003d\" + locatedBlocks);\n      }\n      else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n        // offset to the portion of the last block,\n        // which is not known to the name-node yet;\n        // getting the last block\n        blk \u003d locatedBlocks.getLastLocatedBlock();\n      }\n      else {\n        // search cached blocks first\n        int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n        if (targetBlockIdx \u003c 0) { // block is not cached\n          targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n          // fetch more blocks\n          final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n          assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n          locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n        }\n        blk \u003d locatedBlocks.get(targetBlockIdx);\n      }\n      return blk;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {}
        }
      ]
    },
    "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-6735. A minor optimization to avoid pread() be blocked by read() inside the same DFSInputStream (Lars Hofhansl via stack)\n",
      "commitDate": "02/12/14 8:57 PM",
      "commitName": "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f",
      "commitAuthor": "stack",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-6735. A minor optimization to avoid pread() be blocked by read() inside the same DFSInputStream (Lars Hofhansl via stack)\n",
          "commitDate": "02/12/14 8:57 PM",
          "commitName": "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f",
          "commitAuthor": "stack",
          "commitDateOld": "05/11/14 9:00 PM",
          "commitNameOld": "80d7d183cd4052d6e6d412ff6588d26471c85d6d",
          "commitAuthorOld": "Milan Desai",
          "daysBetweenCommits": 27.0,
          "commitsBetweenForRepo": 189,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,46 @@\n-  private synchronized LocatedBlock getBlockAt(long offset,\n+  private LocatedBlock getBlockAt(long offset,\n       boolean updatePosition) throws IOException {\n-    assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n+    synchronized(infoLock) {\n+      assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n \n-    final LocatedBlock blk;\n+      final LocatedBlock blk;\n \n-    //check offset\n-    if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n-      throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n-          + offset\n-          + \", updatePosition\u003d\" + updatePosition\n-          + \", locatedBlocks\u003d\" + locatedBlocks);\n-    }\n-    else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n-      // offset to the portion of the last block,\n-      // which is not known to the name-node yet;\n-      // getting the last block \n-      blk \u003d locatedBlocks.getLastLocatedBlock();\n-    }\n-    else {\n-      // search cached blocks first\n-      int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n-      if (targetBlockIdx \u003c 0) { // block is not cached\n-        targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n-        // fetch more blocks\n-        final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n-        assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n-        locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n+      //check offset\n+      if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n+        throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n+            + offset\n+            + \", updatePosition\u003d\" + updatePosition\n+            + \", locatedBlocks\u003d\" + locatedBlocks);\n       }\n-      blk \u003d locatedBlocks.get(targetBlockIdx);\n-    }\n+      else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n+        // offset to the portion of the last block,\n+        // which is not known to the name-node yet;\n+        // getting the last block\n+        blk \u003d locatedBlocks.getLastLocatedBlock();\n+      }\n+      else {\n+        // search cached blocks first\n+        int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n+        if (targetBlockIdx \u003c 0) { // block is not cached\n+          targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n+          // fetch more blocks\n+          final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n+          assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n+          locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n+        }\n+        blk \u003d locatedBlocks.get(targetBlockIdx);\n+      }\n \n-    // update current position\n-    if (updatePosition) {\n-      pos \u003d offset;\n-      blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n-      currentLocatedBlock \u003d blk;\n+      // update current position\n+      if (updatePosition) {\n+        // synchronized not strictly needed, since we only get here\n+        // from synchronized caller methods\n+        synchronized(this) {\n+          pos \u003d offset;\n+          blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n+          currentLocatedBlock \u003d blk;\n+        }\n+      }\n+      return blk;\n     }\n-    return blk;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock getBlockAt(long offset,\n      boolean updatePosition) throws IOException {\n    synchronized(infoLock) {\n      assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n\n      final LocatedBlock blk;\n\n      //check offset\n      if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n        throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n            + offset\n            + \", updatePosition\u003d\" + updatePosition\n            + \", locatedBlocks\u003d\" + locatedBlocks);\n      }\n      else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n        // offset to the portion of the last block,\n        // which is not known to the name-node yet;\n        // getting the last block\n        blk \u003d locatedBlocks.getLastLocatedBlock();\n      }\n      else {\n        // search cached blocks first\n        int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n        if (targetBlockIdx \u003c 0) { // block is not cached\n          targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n          // fetch more blocks\n          final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n          assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n          locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n        }\n        blk \u003d locatedBlocks.get(targetBlockIdx);\n      }\n\n      // update current position\n      if (updatePosition) {\n        // synchronized not strictly needed, since we only get here\n        // from synchronized caller methods\n        synchronized(this) {\n          pos \u003d offset;\n          blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n          currentLocatedBlock \u003d blk;\n        }\n      }\n      return blk;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6735. A minor optimization to avoid pread() be blocked by read() inside the same DFSInputStream (Lars Hofhansl via stack)\n",
          "commitDate": "02/12/14 8:57 PM",
          "commitName": "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f",
          "commitAuthor": "stack",
          "commitDateOld": "05/11/14 9:00 PM",
          "commitNameOld": "80d7d183cd4052d6e6d412ff6588d26471c85d6d",
          "commitAuthorOld": "Milan Desai",
          "daysBetweenCommits": 27.0,
          "commitsBetweenForRepo": 189,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,46 @@\n-  private synchronized LocatedBlock getBlockAt(long offset,\n+  private LocatedBlock getBlockAt(long offset,\n       boolean updatePosition) throws IOException {\n-    assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n+    synchronized(infoLock) {\n+      assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n \n-    final LocatedBlock blk;\n+      final LocatedBlock blk;\n \n-    //check offset\n-    if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n-      throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n-          + offset\n-          + \", updatePosition\u003d\" + updatePosition\n-          + \", locatedBlocks\u003d\" + locatedBlocks);\n-    }\n-    else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n-      // offset to the portion of the last block,\n-      // which is not known to the name-node yet;\n-      // getting the last block \n-      blk \u003d locatedBlocks.getLastLocatedBlock();\n-    }\n-    else {\n-      // search cached blocks first\n-      int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n-      if (targetBlockIdx \u003c 0) { // block is not cached\n-        targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n-        // fetch more blocks\n-        final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n-        assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n-        locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n+      //check offset\n+      if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n+        throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n+            + offset\n+            + \", updatePosition\u003d\" + updatePosition\n+            + \", locatedBlocks\u003d\" + locatedBlocks);\n       }\n-      blk \u003d locatedBlocks.get(targetBlockIdx);\n-    }\n+      else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n+        // offset to the portion of the last block,\n+        // which is not known to the name-node yet;\n+        // getting the last block\n+        blk \u003d locatedBlocks.getLastLocatedBlock();\n+      }\n+      else {\n+        // search cached blocks first\n+        int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n+        if (targetBlockIdx \u003c 0) { // block is not cached\n+          targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n+          // fetch more blocks\n+          final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n+          assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n+          locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n+        }\n+        blk \u003d locatedBlocks.get(targetBlockIdx);\n+      }\n \n-    // update current position\n-    if (updatePosition) {\n-      pos \u003d offset;\n-      blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n-      currentLocatedBlock \u003d blk;\n+      // update current position\n+      if (updatePosition) {\n+        // synchronized not strictly needed, since we only get here\n+        // from synchronized caller methods\n+        synchronized(this) {\n+          pos \u003d offset;\n+          blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n+          currentLocatedBlock \u003d blk;\n+        }\n+      }\n+      return blk;\n     }\n-    return blk;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private LocatedBlock getBlockAt(long offset,\n      boolean updatePosition) throws IOException {\n    synchronized(infoLock) {\n      assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n\n      final LocatedBlock blk;\n\n      //check offset\n      if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n        throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n            + offset\n            + \", updatePosition\u003d\" + updatePosition\n            + \", locatedBlocks\u003d\" + locatedBlocks);\n      }\n      else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n        // offset to the portion of the last block,\n        // which is not known to the name-node yet;\n        // getting the last block\n        blk \u003d locatedBlocks.getLastLocatedBlock();\n      }\n      else {\n        // search cached blocks first\n        int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n        if (targetBlockIdx \u003c 0) { // block is not cached\n          targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n          // fetch more blocks\n          final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n          assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n          locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n        }\n        blk \u003d locatedBlocks.get(targetBlockIdx);\n      }\n\n      // update current position\n      if (updatePosition) {\n        // synchronized not strictly needed, since we only get here\n        // from synchronized caller methods\n        synchronized(this) {\n          pos \u003d offset;\n          blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n          currentLocatedBlock \u003d blk;\n        }\n      }\n      return blk;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
          "extendedDetails": {}
        }
      ]
    },
    "f28f5ed62861a4c87256eddb8a8ab64e05696192": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5370. Typo in Error Message: different between range in condition and range in error message. Contributed by Kousuke Saruta.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1532899 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/10/13 1:45 PM",
      "commitName": "f28f5ed62861a4c87256eddb8a8ab64e05696192",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "27/09/13 3:51 PM",
      "commitNameOld": "eccdb9aa8bcdee750583d16a1253f1c5faabd036",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 18.91,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private synchronized LocatedBlock getBlockAt(long offset,\n       boolean updatePosition) throws IOException {\n     assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n \n     final LocatedBlock blk;\n \n     //check offset\n     if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n-      throw new IOException(\"offset \u003c 0 || offset \u003e getFileLength(), offset\u003d\"\n+      throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n           + offset\n           + \", updatePosition\u003d\" + updatePosition\n           + \", locatedBlocks\u003d\" + locatedBlocks);\n     }\n     else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n       // offset to the portion of the last block,\n       // which is not known to the name-node yet;\n       // getting the last block \n       blk \u003d locatedBlocks.getLastLocatedBlock();\n     }\n     else {\n       // search cached blocks first\n       int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n       if (targetBlockIdx \u003c 0) { // block is not cached\n         targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n         // fetch more blocks\n         final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n         assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n         locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n       }\n       blk \u003d locatedBlocks.get(targetBlockIdx);\n     }\n \n     // update current position\n     if (updatePosition) {\n       pos \u003d offset;\n       blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n       currentLocatedBlock \u003d blk;\n     }\n     return blk;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized LocatedBlock getBlockAt(long offset,\n      boolean updatePosition) throws IOException {\n    assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n\n    final LocatedBlock blk;\n\n    //check offset\n    if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n      throw new IOException(\"offset \u003c 0 || offset \u003e\u003d getFileLength(), offset\u003d\"\n          + offset\n          + \", updatePosition\u003d\" + updatePosition\n          + \", locatedBlocks\u003d\" + locatedBlocks);\n    }\n    else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n      // offset to the portion of the last block,\n      // which is not known to the name-node yet;\n      // getting the last block \n      blk \u003d locatedBlocks.getLastLocatedBlock();\n    }\n    else {\n      // search cached blocks first\n      int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n      if (targetBlockIdx \u003c 0) { // block is not cached\n        targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n        // fetch more blocks\n        final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n        assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n        locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n      }\n      blk \u003d locatedBlocks.get(targetBlockIdx);\n    }\n\n    // update current position\n    if (updatePosition) {\n      pos \u003d offset;\n      blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n      currentLocatedBlock \u003d blk;\n    }\n    return blk;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "c68b1d1b31e304c27e419e810ded0fc97e435ea6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4914. Use DFSClient.Conf instead of Configuration.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494854 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/13 9:43 PM",
      "commitName": "c68b1d1b31e304c27e419e810ded0fc97e435ea6",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "10/05/13 10:58 AM",
      "commitNameOld": "4ed1fc58c0683bbcd5c4c211ea162ed37bf7dc4f",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 40.45,
      "commitsBetweenForRepo": 278,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,40 @@\n   private synchronized LocatedBlock getBlockAt(long offset,\n       boolean updatePosition) throws IOException {\n     assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n \n     final LocatedBlock blk;\n \n     //check offset\n     if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n       throw new IOException(\"offset \u003c 0 || offset \u003e getFileLength(), offset\u003d\"\n           + offset\n           + \", updatePosition\u003d\" + updatePosition\n           + \", locatedBlocks\u003d\" + locatedBlocks);\n     }\n     else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n       // offset to the portion of the last block,\n       // which is not known to the name-node yet;\n       // getting the last block \n       blk \u003d locatedBlocks.getLastLocatedBlock();\n     }\n     else {\n       // search cached blocks first\n       int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n       if (targetBlockIdx \u003c 0) { // block is not cached\n         targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n         // fetch more blocks\n-        LocatedBlocks newBlocks;\n-        newBlocks \u003d dfsClient.getLocatedBlocks(src, offset, prefetchSize);\n+        final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n         assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n         locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n       }\n       blk \u003d locatedBlocks.get(targetBlockIdx);\n     }\n \n     // update current position\n     if (updatePosition) {\n       pos \u003d offset;\n       blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n       currentLocatedBlock \u003d blk;\n     }\n     return blk;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized LocatedBlock getBlockAt(long offset,\n      boolean updatePosition) throws IOException {\n    assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n\n    final LocatedBlock blk;\n\n    //check offset\n    if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n      throw new IOException(\"offset \u003c 0 || offset \u003e getFileLength(), offset\u003d\"\n          + offset\n          + \", updatePosition\u003d\" + updatePosition\n          + \", locatedBlocks\u003d\" + locatedBlocks);\n    }\n    else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n      // offset to the portion of the last block,\n      // which is not known to the name-node yet;\n      // getting the last block \n      blk \u003d locatedBlocks.getLastLocatedBlock();\n    }\n    else {\n      // search cached blocks first\n      int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n      if (targetBlockIdx \u003c 0) { // block is not cached\n        targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n        // fetch more blocks\n        final LocatedBlocks newBlocks \u003d dfsClient.getLocatedBlocks(src, offset);\n        assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n        locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n      }\n      blk \u003d locatedBlocks.get(targetBlockIdx);\n    }\n\n    // update current position\n    if (updatePosition) {\n      pos \u003d offset;\n      blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n      currentLocatedBlock \u003d blk;\n    }\n    return blk;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "fb95fce24056c0b0aa5b77683c684fe1b68c4f76": {
      "type": "Ybodychange",
      "commitMessage": "Fix issue with NN/DN re-registration.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1358347 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/07/12 11:59 AM",
      "commitName": "fb95fce24056c0b0aa5b77683c684fe1b68c4f76",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "07/05/12 9:42 AM",
      "commitNameOld": "eca2c850a57f61e40dff734b10a2e057c5bd8cc3",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 60.1,
      "commitsBetweenForRepo": 293,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   private synchronized LocatedBlock getBlockAt(long offset,\n       boolean updatePosition) throws IOException {\n     assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n \n     final LocatedBlock blk;\n \n     //check offset\n     if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n       throw new IOException(\"offset \u003c 0 || offset \u003e getFileLength(), offset\u003d\"\n           + offset\n           + \", updatePosition\u003d\" + updatePosition\n           + \", locatedBlocks\u003d\" + locatedBlocks);\n     }\n     else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n       // offset to the portion of the last block,\n       // which is not known to the name-node yet;\n       // getting the last block \n       blk \u003d locatedBlocks.getLastLocatedBlock();\n     }\n     else {\n       // search cached blocks first\n       int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n       if (targetBlockIdx \u003c 0) { // block is not cached\n         targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n         // fetch more blocks\n         LocatedBlocks newBlocks;\n-        newBlocks \u003d DFSClient.callGetBlockLocations(dfsClient.namenode, src, offset, prefetchSize);\n+        newBlocks \u003d dfsClient.getLocatedBlocks(src, offset, prefetchSize);\n         assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n         locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n       }\n       blk \u003d locatedBlocks.get(targetBlockIdx);\n     }\n \n     // update current position\n     if (updatePosition) {\n       pos \u003d offset;\n       blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n       currentLocatedBlock \u003d blk;\n     }\n     return blk;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized LocatedBlock getBlockAt(long offset,\n      boolean updatePosition) throws IOException {\n    assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n\n    final LocatedBlock blk;\n\n    //check offset\n    if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n      throw new IOException(\"offset \u003c 0 || offset \u003e getFileLength(), offset\u003d\"\n          + offset\n          + \", updatePosition\u003d\" + updatePosition\n          + \", locatedBlocks\u003d\" + locatedBlocks);\n    }\n    else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n      // offset to the portion of the last block,\n      // which is not known to the name-node yet;\n      // getting the last block \n      blk \u003d locatedBlocks.getLastLocatedBlock();\n    }\n    else {\n      // search cached blocks first\n      int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n      if (targetBlockIdx \u003c 0) { // block is not cached\n        targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n        // fetch more blocks\n        LocatedBlocks newBlocks;\n        newBlocks \u003d dfsClient.getLocatedBlocks(src, offset, prefetchSize);\n        assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n        locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n      }\n      blk \u003d locatedBlocks.get(targetBlockIdx);\n    }\n\n    // update current position\n    if (updatePosition) {\n      pos \u003d offset;\n      blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n      currentLocatedBlock \u003d blk;\n    }\n    return blk;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized LocatedBlock getBlockAt(long offset,\n      boolean updatePosition) throws IOException {\n    assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n\n    final LocatedBlock blk;\n\n    //check offset\n    if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n      throw new IOException(\"offset \u003c 0 || offset \u003e getFileLength(), offset\u003d\"\n          + offset\n          + \", updatePosition\u003d\" + updatePosition\n          + \", locatedBlocks\u003d\" + locatedBlocks);\n    }\n    else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n      // offset to the portion of the last block,\n      // which is not known to the name-node yet;\n      // getting the last block \n      blk \u003d locatedBlocks.getLastLocatedBlock();\n    }\n    else {\n      // search cached blocks first\n      int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n      if (targetBlockIdx \u003c 0) { // block is not cached\n        targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n        // fetch more blocks\n        LocatedBlocks newBlocks;\n        newBlocks \u003d DFSClient.callGetBlockLocations(dfsClient.namenode, src, offset, prefetchSize);\n        assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n        locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n      }\n      blk \u003d locatedBlocks.get(targetBlockIdx);\n    }\n\n    // update current position\n    if (updatePosition) {\n      pos \u003d offset;\n      blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n      currentLocatedBlock \u003d blk;\n    }\n    return blk;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized LocatedBlock getBlockAt(long offset,\n      boolean updatePosition) throws IOException {\n    assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n\n    final LocatedBlock blk;\n\n    //check offset\n    if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n      throw new IOException(\"offset \u003c 0 || offset \u003e getFileLength(), offset\u003d\"\n          + offset\n          + \", updatePosition\u003d\" + updatePosition\n          + \", locatedBlocks\u003d\" + locatedBlocks);\n    }\n    else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n      // offset to the portion of the last block,\n      // which is not known to the name-node yet;\n      // getting the last block \n      blk \u003d locatedBlocks.getLastLocatedBlock();\n    }\n    else {\n      // search cached blocks first\n      int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n      if (targetBlockIdx \u003c 0) { // block is not cached\n        targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n        // fetch more blocks\n        LocatedBlocks newBlocks;\n        newBlocks \u003d DFSClient.callGetBlockLocations(dfsClient.namenode, src, offset, prefetchSize);\n        assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n        locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n      }\n      blk \u003d locatedBlocks.get(targetBlockIdx);\n    }\n\n    // update current position\n    if (updatePosition) {\n      pos \u003d offset;\n      blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n      currentLocatedBlock \u003d blk;\n    }\n    return blk;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/DFSInputStream.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,41 @@\n+  private synchronized LocatedBlock getBlockAt(long offset,\n+      boolean updatePosition) throws IOException {\n+    assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n+\n+    final LocatedBlock blk;\n+\n+    //check offset\n+    if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n+      throw new IOException(\"offset \u003c 0 || offset \u003e getFileLength(), offset\u003d\"\n+          + offset\n+          + \", updatePosition\u003d\" + updatePosition\n+          + \", locatedBlocks\u003d\" + locatedBlocks);\n+    }\n+    else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n+      // offset to the portion of the last block,\n+      // which is not known to the name-node yet;\n+      // getting the last block \n+      blk \u003d locatedBlocks.getLastLocatedBlock();\n+    }\n+    else {\n+      // search cached blocks first\n+      int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n+      if (targetBlockIdx \u003c 0) { // block is not cached\n+        targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n+        // fetch more blocks\n+        LocatedBlocks newBlocks;\n+        newBlocks \u003d DFSClient.callGetBlockLocations(dfsClient.namenode, src, offset, prefetchSize);\n+        assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n+        locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n+      }\n+      blk \u003d locatedBlocks.get(targetBlockIdx);\n+    }\n+\n+    // update current position\n+    if (updatePosition) {\n+      pos \u003d offset;\n+      blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n+      currentLocatedBlock \u003d blk;\n+    }\n+    return blk;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized LocatedBlock getBlockAt(long offset,\n      boolean updatePosition) throws IOException {\n    assert (locatedBlocks !\u003d null) : \"locatedBlocks is null\";\n\n    final LocatedBlock blk;\n\n    //check offset\n    if (offset \u003c 0 || offset \u003e\u003d getFileLength()) {\n      throw new IOException(\"offset \u003c 0 || offset \u003e getFileLength(), offset\u003d\"\n          + offset\n          + \", updatePosition\u003d\" + updatePosition\n          + \", locatedBlocks\u003d\" + locatedBlocks);\n    }\n    else if (offset \u003e\u003d locatedBlocks.getFileLength()) {\n      // offset to the portion of the last block,\n      // which is not known to the name-node yet;\n      // getting the last block \n      blk \u003d locatedBlocks.getLastLocatedBlock();\n    }\n    else {\n      // search cached blocks first\n      int targetBlockIdx \u003d locatedBlocks.findBlock(offset);\n      if (targetBlockIdx \u003c 0) { // block is not cached\n        targetBlockIdx \u003d LocatedBlocks.getInsertIndex(targetBlockIdx);\n        // fetch more blocks\n        LocatedBlocks newBlocks;\n        newBlocks \u003d DFSClient.callGetBlockLocations(dfsClient.namenode, src, offset, prefetchSize);\n        assert (newBlocks !\u003d null) : \"Could not find target position \" + offset;\n        locatedBlocks.insertRange(targetBlockIdx, newBlocks.getLocatedBlocks());\n      }\n      blk \u003d locatedBlocks.get(targetBlockIdx);\n    }\n\n    // update current position\n    if (updatePosition) {\n      pos \u003d offset;\n      blockEnd \u003d blk.getStartOffset() + blk.getBlockSize() - 1;\n      currentLocatedBlock \u003d blk;\n    }\n    return blk;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSInputStream.java"
    }
  }
}