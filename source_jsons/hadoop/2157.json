{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSClient.java",
  "functionName": "createWrappedOutputStream",
  "functionId": "createWrappedOutputStream___dfsos-DFSOutputStream__statistics-FileSystem.Statistics__startPos-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
  "functionStartLine": 982,
  "functionEndLine": 1007,
  "numCommitsSeen": 330,
  "timeTaken": 6730,
  "changeHistory": [
    "6e5ffb74dd678ddc3392ae2f251c80fc5cc8c62f",
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
    "404eab4dc0582e0384b93664ea6ee77ccd5eeebc",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad"
  ],
  "changeHistoryShort": {
    "6e5ffb74dd678ddc3392ae2f251c80fc5cc8c62f": "Ybodychange",
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73": "Ybodychange",
    "404eab4dc0582e0384b93664ea6ee77ccd5eeebc": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": "Ybodychange"
  },
  "changeHistoryDetails": {
    "6e5ffb74dd678ddc3392ae2f251c80fc5cc8c62f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13885. Add debug logs in dfsclient around decrypting EDEK. Contributed by Kitti Nanasi.\n\nSigned-off-by: Xiao Chen \u003cxiao@apache.org\u003e\n",
      "commitDate": "03/09/18 10:37 PM",
      "commitName": "6e5ffb74dd678ddc3392ae2f251c80fc5cc8c62f",
      "commitAuthor": "Kitti Nanasi",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "39ed3a66dbb01383ed16b141183fc48bfd2e613d",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 22.81,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,26 @@\n   public HdfsDataOutputStream createWrappedOutputStream(DFSOutputStream dfsos,\n       FileSystem.Statistics statistics, long startPos) throws IOException {\n     final FileEncryptionInfo feInfo \u003d dfsos.getFileEncryptionInfo();\n     if (feInfo !\u003d null) {\n       // File is encrypted, wrap the stream in a crypto stream.\n       // Currently only one version, so no special logic based on the version #\n       HdfsKMSUtil.getCryptoProtocolVersion(feInfo);\n       final CryptoCodec codec \u003d HdfsKMSUtil.getCryptoCodec(conf, feInfo);\n       KeyVersion decrypted;\n       try (TraceScope ignored \u003d tracer.newScope(\"decryptEDEK\")) {\n+        LOG.debug(\"Start decrypting EDEK for file: {}, output stream: 0x{}\",\n+            dfsos.getSrc(), Integer.toHexString(dfsos.hashCode()));\n         decrypted \u003d HdfsKMSUtil.decryptEncryptedDataEncryptionKey(feInfo,\n           getKeyProvider());\n+        LOG.debug(\"Decrypted EDEK for file: {}, output stream: 0x{}\",\n+            dfsos.getSrc(), Integer.toHexString(dfsos.hashCode()));\n       }\n       final CryptoOutputStream cryptoOut \u003d\n           new CryptoOutputStream(dfsos, codec,\n               decrypted.getMaterial(), feInfo.getIV(), startPos);\n       return new HdfsDataOutputStream(cryptoOut, statistics, startPos);\n     } else {\n       // No FileEncryptionInfo present so no encryption.\n       return new HdfsDataOutputStream(dfsos, statistics, startPos);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HdfsDataOutputStream createWrappedOutputStream(DFSOutputStream dfsos,\n      FileSystem.Statistics statistics, long startPos) throws IOException {\n    final FileEncryptionInfo feInfo \u003d dfsos.getFileEncryptionInfo();\n    if (feInfo !\u003d null) {\n      // File is encrypted, wrap the stream in a crypto stream.\n      // Currently only one version, so no special logic based on the version #\n      HdfsKMSUtil.getCryptoProtocolVersion(feInfo);\n      final CryptoCodec codec \u003d HdfsKMSUtil.getCryptoCodec(conf, feInfo);\n      KeyVersion decrypted;\n      try (TraceScope ignored \u003d tracer.newScope(\"decryptEDEK\")) {\n        LOG.debug(\"Start decrypting EDEK for file: {}, output stream: 0x{}\",\n            dfsos.getSrc(), Integer.toHexString(dfsos.hashCode()));\n        decrypted \u003d HdfsKMSUtil.decryptEncryptedDataEncryptionKey(feInfo,\n          getKeyProvider());\n        LOG.debug(\"Decrypted EDEK for file: {}, output stream: 0x{}\",\n            dfsos.getSrc(), Integer.toHexString(dfsos.hashCode()));\n      }\n      final CryptoOutputStream cryptoOut \u003d\n          new CryptoOutputStream(dfsos, codec,\n              decrypted.getMaterial(), feInfo.getIV(), startPos);\n      return new HdfsDataOutputStream(cryptoOut, statistics, startPos);\n    } else {\n      // No FileEncryptionInfo present so no encryption.\n      return new HdfsDataOutputStream(dfsos, statistics, startPos);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12574. Add CryptoInputStream to WebHdfsFileSystem read call. Contributed by Rushabh S Shah\n",
      "commitDate": "29/01/18 3:23 PM",
      "commitName": "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "26/01/18 1:09 PM",
      "commitNameOld": "e990904dd568a1d8f98efb55c1dd2d598ae4752b",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 3.09,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,22 @@\n   public HdfsDataOutputStream createWrappedOutputStream(DFSOutputStream dfsos,\n       FileSystem.Statistics statistics, long startPos) throws IOException {\n     final FileEncryptionInfo feInfo \u003d dfsos.getFileEncryptionInfo();\n     if (feInfo !\u003d null) {\n       // File is encrypted, wrap the stream in a crypto stream.\n       // Currently only one version, so no special logic based on the version #\n       HdfsKMSUtil.getCryptoProtocolVersion(feInfo);\n       final CryptoCodec codec \u003d HdfsKMSUtil.getCryptoCodec(conf, feInfo);\n-      KeyVersion decrypted \u003d decryptEncryptedDataEncryptionKey(feInfo);\n+      KeyVersion decrypted;\n+      try (TraceScope ignored \u003d tracer.newScope(\"decryptEDEK\")) {\n+        decrypted \u003d HdfsKMSUtil.decryptEncryptedDataEncryptionKey(feInfo,\n+          getKeyProvider());\n+      }\n       final CryptoOutputStream cryptoOut \u003d\n           new CryptoOutputStream(dfsos, codec,\n               decrypted.getMaterial(), feInfo.getIV(), startPos);\n       return new HdfsDataOutputStream(cryptoOut, statistics, startPos);\n     } else {\n       // No FileEncryptionInfo present so no encryption.\n       return new HdfsDataOutputStream(dfsos, statistics, startPos);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HdfsDataOutputStream createWrappedOutputStream(DFSOutputStream dfsos,\n      FileSystem.Statistics statistics, long startPos) throws IOException {\n    final FileEncryptionInfo feInfo \u003d dfsos.getFileEncryptionInfo();\n    if (feInfo !\u003d null) {\n      // File is encrypted, wrap the stream in a crypto stream.\n      // Currently only one version, so no special logic based on the version #\n      HdfsKMSUtil.getCryptoProtocolVersion(feInfo);\n      final CryptoCodec codec \u003d HdfsKMSUtil.getCryptoCodec(conf, feInfo);\n      KeyVersion decrypted;\n      try (TraceScope ignored \u003d tracer.newScope(\"decryptEDEK\")) {\n        decrypted \u003d HdfsKMSUtil.decryptEncryptedDataEncryptionKey(feInfo,\n          getKeyProvider());\n      }\n      final CryptoOutputStream cryptoOut \u003d\n          new CryptoOutputStream(dfsos, codec,\n              decrypted.getMaterial(), feInfo.getIV(), startPos);\n      return new HdfsDataOutputStream(cryptoOut, statistics, startPos);\n    } else {\n      // No FileEncryptionInfo present so no encryption.\n      return new HdfsDataOutputStream(dfsos, statistics, startPos);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "404eab4dc0582e0384b93664ea6ee77ccd5eeebc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12396. Webhdfs file system should get delegation token from kms provider. Contributed by Rushabh S Shah.\n",
      "commitDate": "04/12/17 10:40 AM",
      "commitName": "404eab4dc0582e0384b93664ea6ee77ccd5eeebc",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "30/11/17 12:18 PM",
      "commitNameOld": "b1c7654ee40b372ed777525a42981c7cf55b5c72",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 3.93,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public HdfsDataOutputStream createWrappedOutputStream(DFSOutputStream dfsos,\n       FileSystem.Statistics statistics, long startPos) throws IOException {\n     final FileEncryptionInfo feInfo \u003d dfsos.getFileEncryptionInfo();\n     if (feInfo !\u003d null) {\n       // File is encrypted, wrap the stream in a crypto stream.\n       // Currently only one version, so no special logic based on the version #\n-      getCryptoProtocolVersion(feInfo);\n-      final CryptoCodec codec \u003d getCryptoCodec(conf, feInfo);\n+      HdfsKMSUtil.getCryptoProtocolVersion(feInfo);\n+      final CryptoCodec codec \u003d HdfsKMSUtil.getCryptoCodec(conf, feInfo);\n       KeyVersion decrypted \u003d decryptEncryptedDataEncryptionKey(feInfo);\n       final CryptoOutputStream cryptoOut \u003d\n           new CryptoOutputStream(dfsos, codec,\n               decrypted.getMaterial(), feInfo.getIV(), startPos);\n       return new HdfsDataOutputStream(cryptoOut, statistics, startPos);\n     } else {\n       // No FileEncryptionInfo present so no encryption.\n       return new HdfsDataOutputStream(dfsos, statistics, startPos);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HdfsDataOutputStream createWrappedOutputStream(DFSOutputStream dfsos,\n      FileSystem.Statistics statistics, long startPos) throws IOException {\n    final FileEncryptionInfo feInfo \u003d dfsos.getFileEncryptionInfo();\n    if (feInfo !\u003d null) {\n      // File is encrypted, wrap the stream in a crypto stream.\n      // Currently only one version, so no special logic based on the version #\n      HdfsKMSUtil.getCryptoProtocolVersion(feInfo);\n      final CryptoCodec codec \u003d HdfsKMSUtil.getCryptoCodec(conf, feInfo);\n      KeyVersion decrypted \u003d decryptEncryptedDataEncryptionKey(feInfo);\n      final CryptoOutputStream cryptoOut \u003d\n          new CryptoOutputStream(dfsos, codec,\n              decrypted.getMaterial(), feInfo.getIV(), startPos);\n      return new HdfsDataOutputStream(cryptoOut, statistics, startPos);\n    } else {\n      // No FileEncryptionInfo present so no encryption.\n      return new HdfsDataOutputStream(dfsos, statistics, startPos);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public HdfsDataOutputStream createWrappedOutputStream(DFSOutputStream dfsos,\n      FileSystem.Statistics statistics, long startPos) throws IOException {\n    final FileEncryptionInfo feInfo \u003d dfsos.getFileEncryptionInfo();\n    if (feInfo !\u003d null) {\n      // File is encrypted, wrap the stream in a crypto stream.\n      // Currently only one version, so no special logic based on the version #\n      getCryptoProtocolVersion(feInfo);\n      final CryptoCodec codec \u003d getCryptoCodec(conf, feInfo);\n      KeyVersion decrypted \u003d decryptEncryptedDataEncryptionKey(feInfo);\n      final CryptoOutputStream cryptoOut \u003d\n          new CryptoOutputStream(dfsos, codec,\n              decrypted.getMaterial(), feInfo.getIV(), startPos);\n      return new HdfsDataOutputStream(cryptoOut, statistics, startPos);\n    } else {\n      // No FileEncryptionInfo present so no encryption.\n      return new HdfsDataOutputStream(dfsos, statistics, startPos);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java"
      }
    },
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7077. Separate CipherSuite from crypto protocol version. (wang)\n",
      "commitDate": "25/09/14 6:40 PM",
      "commitName": "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "24/09/14 7:11 PM",
      "commitNameOld": "428a76663a0de5d0d74cc9525273ddc470760e44",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,18 @@\n   public HdfsDataOutputStream createWrappedOutputStream(DFSOutputStream dfsos,\n       FileSystem.Statistics statistics, long startPos) throws IOException {\n     final FileEncryptionInfo feInfo \u003d dfsos.getFileEncryptionInfo();\n     if (feInfo !\u003d null) {\n-      if (codec \u003d\u003d null) {\n-        throw new IOException(\"No configuration found for the cipher suite \"\n-            + HADOOP_SECURITY_CRYPTO_CIPHER_SUITE_KEY + \" value prefixed with \"\n-            + HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX\n-            + \". Please see the example configuration \"\n-            + \"hadoop.security.crypto.codec.classes.EXAMPLECIPHERSUITE \"\n-            + \"at core-default.xml for details.\");\n-      }\n       // File is encrypted, wrap the stream in a crypto stream.\n+      // Currently only one version, so no special logic based on the version #\n+      getCryptoProtocolVersion(feInfo);\n+      final CryptoCodec codec \u003d getCryptoCodec(conf, feInfo);\n       KeyVersion decrypted \u003d decryptEncryptedDataEncryptionKey(feInfo);\n       final CryptoOutputStream cryptoOut \u003d\n           new CryptoOutputStream(dfsos, codec,\n               decrypted.getMaterial(), feInfo.getIV(), startPos);\n       return new HdfsDataOutputStream(cryptoOut, statistics, startPos);\n     } else {\n       // No FileEncryptionInfo present so no encryption.\n       return new HdfsDataOutputStream(dfsos, statistics, startPos);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HdfsDataOutputStream createWrappedOutputStream(DFSOutputStream dfsos,\n      FileSystem.Statistics statistics, long startPos) throws IOException {\n    final FileEncryptionInfo feInfo \u003d dfsos.getFileEncryptionInfo();\n    if (feInfo !\u003d null) {\n      // File is encrypted, wrap the stream in a crypto stream.\n      // Currently only one version, so no special logic based on the version #\n      getCryptoProtocolVersion(feInfo);\n      final CryptoCodec codec \u003d getCryptoCodec(conf, feInfo);\n      KeyVersion decrypted \u003d decryptEncryptedDataEncryptionKey(feInfo);\n      final CryptoOutputStream cryptoOut \u003d\n          new CryptoOutputStream(dfsos, codec,\n              decrypted.getMaterial(), feInfo.getIV(), startPos);\n      return new HdfsDataOutputStream(cryptoOut, statistics, startPos);\n    } else {\n      // No FileEncryptionInfo present so no encryption.\n      return new HdfsDataOutputStream(dfsos, statistics, startPos);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    }
  }
}