{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MergeManagerImpl.java",
  "functionName": "closeInMemoryFile",
  "functionId": "closeInMemoryFile___mapOutput-InMemoryMapOutput__K,V__",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java",
  "functionStartLine": 321,
  "functionEndLine": 345,
  "numCommitsSeen": 28,
  "timeTaken": 9294,
  "changeHistory": [
    "73fd247c7649919350ecfd16806af57ffe554649",
    "92774331cc4c617f2920dbf75fba7188dba710c0",
    "fae75c2d7f46217378cee71890be797e1ce45507",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "73fd247c7649919350ecfd16806af57ffe554649": "Ymultichange(Ymovefromfile,Yparameterchange)",
    "92774331cc4c617f2920dbf75fba7188dba710c0": "Ybodychange",
    "fae75c2d7f46217378cee71890be797e1ce45507": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymovefromfile",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "73fd247c7649919350ecfd16806af57ffe554649": {
      "type": "Ymultichange(Ymovefromfile,Yparameterchange)",
      "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/01/13 6:10 AM",
      "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public synchronized void closeInMemoryFile(MapOutput\u003cK,V\u003e mapOutput) { \n+  public synchronized void closeInMemoryFile(InMemoryMapOutput\u003cK,V\u003e mapOutput) { \n     inMemoryMapOutputs.add(mapOutput);\n     LOG.info(\"closeInMemoryFile -\u003e map-output of size: \" + mapOutput.getSize()\n         + \", inMemoryMapOutputs.size() -\u003e \" + inMemoryMapOutputs.size()\n         + \", commitMemory -\u003e \" + commitMemory + \", usedMemory -\u003e\" + usedMemory);\n \n     commitMemory+\u003d mapOutput.getSize();\n \n     // Can hang if mergeThreshold is really low.\n     if (commitMemory \u003e\u003d mergeThreshold) {\n       LOG.info(\"Starting inMemoryMerger\u0027s merge since commitMemory\u003d\" +\n           commitMemory + \" \u003e mergeThreshold\u003d\" + mergeThreshold + \n           \". Current usedMemory\u003d\" + usedMemory);\n       inMemoryMapOutputs.addAll(inMemoryMergedMapOutputs);\n       inMemoryMergedMapOutputs.clear();\n       inMemoryMerger.startMerge(inMemoryMapOutputs);\n       commitMemory \u003d 0L;  // Reset commitMemory.\n     }\n     \n     if (memToMemMerger !\u003d null) {\n       if (inMemoryMapOutputs.size() \u003e\u003d memToMemMergeOutputsThreshold) { \n         memToMemMerger.startMerge(inMemoryMapOutputs);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void closeInMemoryFile(InMemoryMapOutput\u003cK,V\u003e mapOutput) { \n    inMemoryMapOutputs.add(mapOutput);\n    LOG.info(\"closeInMemoryFile -\u003e map-output of size: \" + mapOutput.getSize()\n        + \", inMemoryMapOutputs.size() -\u003e \" + inMemoryMapOutputs.size()\n        + \", commitMemory -\u003e \" + commitMemory + \", usedMemory -\u003e\" + usedMemory);\n\n    commitMemory+\u003d mapOutput.getSize();\n\n    // Can hang if mergeThreshold is really low.\n    if (commitMemory \u003e\u003d mergeThreshold) {\n      LOG.info(\"Starting inMemoryMerger\u0027s merge since commitMemory\u003d\" +\n          commitMemory + \" \u003e mergeThreshold\u003d\" + mergeThreshold + \n          \". Current usedMemory\u003d\" + usedMemory);\n      inMemoryMapOutputs.addAll(inMemoryMergedMapOutputs);\n      inMemoryMergedMapOutputs.clear();\n      inMemoryMerger.startMerge(inMemoryMapOutputs);\n      commitMemory \u003d 0L;  // Reset commitMemory.\n    }\n    \n    if (memToMemMerger !\u003d null) {\n      if (inMemoryMapOutputs.size() \u003e\u003d memToMemMergeOutputsThreshold) { \n        memToMemMerger.startMerge(inMemoryMapOutputs);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java",
          "extendedDetails": {
            "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
            "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java",
            "oldMethodName": "closeInMemoryFile",
            "newMethodName": "closeInMemoryFile"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public synchronized void closeInMemoryFile(MapOutput\u003cK,V\u003e mapOutput) { \n+  public synchronized void closeInMemoryFile(InMemoryMapOutput\u003cK,V\u003e mapOutput) { \n     inMemoryMapOutputs.add(mapOutput);\n     LOG.info(\"closeInMemoryFile -\u003e map-output of size: \" + mapOutput.getSize()\n         + \", inMemoryMapOutputs.size() -\u003e \" + inMemoryMapOutputs.size()\n         + \", commitMemory -\u003e \" + commitMemory + \", usedMemory -\u003e\" + usedMemory);\n \n     commitMemory+\u003d mapOutput.getSize();\n \n     // Can hang if mergeThreshold is really low.\n     if (commitMemory \u003e\u003d mergeThreshold) {\n       LOG.info(\"Starting inMemoryMerger\u0027s merge since commitMemory\u003d\" +\n           commitMemory + \" \u003e mergeThreshold\u003d\" + mergeThreshold + \n           \". Current usedMemory\u003d\" + usedMemory);\n       inMemoryMapOutputs.addAll(inMemoryMergedMapOutputs);\n       inMemoryMergedMapOutputs.clear();\n       inMemoryMerger.startMerge(inMemoryMapOutputs);\n       commitMemory \u003d 0L;  // Reset commitMemory.\n     }\n     \n     if (memToMemMerger !\u003d null) {\n       if (inMemoryMapOutputs.size() \u003e\u003d memToMemMergeOutputsThreshold) { \n         memToMemMerger.startMerge(inMemoryMapOutputs);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void closeInMemoryFile(InMemoryMapOutput\u003cK,V\u003e mapOutput) { \n    inMemoryMapOutputs.add(mapOutput);\n    LOG.info(\"closeInMemoryFile -\u003e map-output of size: \" + mapOutput.getSize()\n        + \", inMemoryMapOutputs.size() -\u003e \" + inMemoryMapOutputs.size()\n        + \", commitMemory -\u003e \" + commitMemory + \", usedMemory -\u003e\" + usedMemory);\n\n    commitMemory+\u003d mapOutput.getSize();\n\n    // Can hang if mergeThreshold is really low.\n    if (commitMemory \u003e\u003d mergeThreshold) {\n      LOG.info(\"Starting inMemoryMerger\u0027s merge since commitMemory\u003d\" +\n          commitMemory + \" \u003e mergeThreshold\u003d\" + mergeThreshold + \n          \". Current usedMemory\u003d\" + usedMemory);\n      inMemoryMapOutputs.addAll(inMemoryMergedMapOutputs);\n      inMemoryMergedMapOutputs.clear();\n      inMemoryMerger.startMerge(inMemoryMapOutputs);\n      commitMemory \u003d 0L;  // Reset commitMemory.\n    }\n    \n    if (memToMemMerger !\u003d null) {\n      if (inMemoryMapOutputs.size() \u003e\u003d memToMemMergeOutputsThreshold) { \n        memToMemMerger.startMerge(inMemoryMapOutputs);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[mapOutput-MapOutput\u003cK,V\u003e]",
            "newValue": "[mapOutput-InMemoryMapOutput\u003cK,V\u003e]"
          }
        }
      ]
    },
    "92774331cc4c617f2920dbf75fba7188dba710c0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4842. Shuffle race can hang reducer. Contributed by Mariappan Asokan\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1425071 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/12/12 10:24 AM",
      "commitName": "92774331cc4c617f2920dbf75fba7188dba710c0",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "15/12/12 12:18 PM",
      "commitNameOld": "803e5155d1c8c842bed8e2d8624cb17ab11ec53b",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 5.92,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,25 @@\n   public synchronized void closeInMemoryFile(MapOutput\u003cK,V\u003e mapOutput) { \n     inMemoryMapOutputs.add(mapOutput);\n     LOG.info(\"closeInMemoryFile -\u003e map-output of size: \" + mapOutput.getSize()\n         + \", inMemoryMapOutputs.size() -\u003e \" + inMemoryMapOutputs.size()\n         + \", commitMemory -\u003e \" + commitMemory + \", usedMemory -\u003e\" + usedMemory);\n \n     commitMemory+\u003d mapOutput.getSize();\n \n-    synchronized (inMemoryMerger) {\n-      // Can hang if mergeThreshold is really low.\n-      if (!inMemoryMerger.isInProgress() \u0026\u0026 commitMemory \u003e\u003d mergeThreshold) {\n-        LOG.info(\"Starting inMemoryMerger\u0027s merge since commitMemory\u003d\" +\n-            commitMemory + \" \u003e mergeThreshold\u003d\" + mergeThreshold + \n-            \". Current usedMemory\u003d\" + usedMemory);\n-        inMemoryMapOutputs.addAll(inMemoryMergedMapOutputs);\n-        inMemoryMergedMapOutputs.clear();\n-        inMemoryMerger.startMerge(inMemoryMapOutputs);\n-      } \n+    // Can hang if mergeThreshold is really low.\n+    if (commitMemory \u003e\u003d mergeThreshold) {\n+      LOG.info(\"Starting inMemoryMerger\u0027s merge since commitMemory\u003d\" +\n+          commitMemory + \" \u003e mergeThreshold\u003d\" + mergeThreshold + \n+          \". Current usedMemory\u003d\" + usedMemory);\n+      inMemoryMapOutputs.addAll(inMemoryMergedMapOutputs);\n+      inMemoryMergedMapOutputs.clear();\n+      inMemoryMerger.startMerge(inMemoryMapOutputs);\n+      commitMemory \u003d 0L;  // Reset commitMemory.\n     }\n     \n     if (memToMemMerger !\u003d null) {\n-      synchronized (memToMemMerger) {\n-        if (!memToMemMerger.isInProgress() \u0026\u0026 \n-            inMemoryMapOutputs.size() \u003e\u003d memToMemMergeOutputsThreshold) {\n-          memToMemMerger.startMerge(inMemoryMapOutputs);\n-        }\n+      if (inMemoryMapOutputs.size() \u003e\u003d memToMemMergeOutputsThreshold) { \n+        memToMemMerger.startMerge(inMemoryMapOutputs);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void closeInMemoryFile(MapOutput\u003cK,V\u003e mapOutput) { \n    inMemoryMapOutputs.add(mapOutput);\n    LOG.info(\"closeInMemoryFile -\u003e map-output of size: \" + mapOutput.getSize()\n        + \", inMemoryMapOutputs.size() -\u003e \" + inMemoryMapOutputs.size()\n        + \", commitMemory -\u003e \" + commitMemory + \", usedMemory -\u003e\" + usedMemory);\n\n    commitMemory+\u003d mapOutput.getSize();\n\n    // Can hang if mergeThreshold is really low.\n    if (commitMemory \u003e\u003d mergeThreshold) {\n      LOG.info(\"Starting inMemoryMerger\u0027s merge since commitMemory\u003d\" +\n          commitMemory + \" \u003e mergeThreshold\u003d\" + mergeThreshold + \n          \". Current usedMemory\u003d\" + usedMemory);\n      inMemoryMapOutputs.addAll(inMemoryMergedMapOutputs);\n      inMemoryMergedMapOutputs.clear();\n      inMemoryMerger.startMerge(inMemoryMapOutputs);\n      commitMemory \u003d 0L;  // Reset commitMemory.\n    }\n    \n    if (memToMemMerger !\u003d null) {\n      if (inMemoryMapOutputs.size() \u003e\u003d memToMemMergeOutputsThreshold) { \n        memToMemMerger.startMerge(inMemoryMapOutputs);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
      "extendedDetails": {}
    },
    "fae75c2d7f46217378cee71890be797e1ce45507": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3721. Fixed a race in shuffle which caused reduces to hang. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 9:40 PM",
      "commitName": "fae75c2d7f46217378cee71890be797e1ce45507",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 154.23,
      "commitsBetweenForRepo": 943,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,29 @@\n   public synchronized void closeInMemoryFile(MapOutput\u003cK,V\u003e mapOutput) { \n     inMemoryMapOutputs.add(mapOutput);\n     LOG.info(\"closeInMemoryFile -\u003e map-output of size: \" + mapOutput.getSize()\n-        + \", inMemoryMapOutputs.size() -\u003e \" + inMemoryMapOutputs.size());\n-    \n+        + \", inMemoryMapOutputs.size() -\u003e \" + inMemoryMapOutputs.size()\n+        + \", commitMemory -\u003e \" + commitMemory + \", usedMemory -\u003e\" + usedMemory);\n+\n+    commitMemory+\u003d mapOutput.getSize();\n+\n     synchronized (inMemoryMerger) {\n-      if (!inMemoryMerger.isInProgress() \u0026\u0026 usedMemory \u003e\u003d mergeThreshold) {\n-        LOG.info(\"Starting inMemoryMerger\u0027s merge since usedMemory\u003d\" +\n-            usedMemory + \" \u003e mergeThreshold\u003d\" + mergeThreshold);\n+      // Can hang if mergeThreshold is really low.\n+      if (!inMemoryMerger.isInProgress() \u0026\u0026 commitMemory \u003e\u003d mergeThreshold) {\n+        LOG.info(\"Starting inMemoryMerger\u0027s merge since commitMemory\u003d\" +\n+            commitMemory + \" \u003e mergeThreshold\u003d\" + mergeThreshold + \n+            \". Current usedMemory\u003d\" + usedMemory);\n         inMemoryMapOutputs.addAll(inMemoryMergedMapOutputs);\n         inMemoryMergedMapOutputs.clear();\n         inMemoryMerger.startMerge(inMemoryMapOutputs);\n       } \n     }\n     \n     if (memToMemMerger !\u003d null) {\n       synchronized (memToMemMerger) {\n         if (!memToMemMerger.isInProgress() \u0026\u0026 \n             inMemoryMapOutputs.size() \u003e\u003d memToMemMergeOutputsThreshold) {\n           memToMemMerger.startMerge(inMemoryMapOutputs);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void closeInMemoryFile(MapOutput\u003cK,V\u003e mapOutput) { \n    inMemoryMapOutputs.add(mapOutput);\n    LOG.info(\"closeInMemoryFile -\u003e map-output of size: \" + mapOutput.getSize()\n        + \", inMemoryMapOutputs.size() -\u003e \" + inMemoryMapOutputs.size()\n        + \", commitMemory -\u003e \" + commitMemory + \", usedMemory -\u003e\" + usedMemory);\n\n    commitMemory+\u003d mapOutput.getSize();\n\n    synchronized (inMemoryMerger) {\n      // Can hang if mergeThreshold is really low.\n      if (!inMemoryMerger.isInProgress() \u0026\u0026 commitMemory \u003e\u003d mergeThreshold) {\n        LOG.info(\"Starting inMemoryMerger\u0027s merge since commitMemory\u003d\" +\n            commitMemory + \" \u003e mergeThreshold\u003d\" + mergeThreshold + \n            \". Current usedMemory\u003d\" + usedMemory);\n        inMemoryMapOutputs.addAll(inMemoryMergedMapOutputs);\n        inMemoryMergedMapOutputs.clear();\n        inMemoryMerger.startMerge(inMemoryMapOutputs);\n      } \n    }\n    \n    if (memToMemMerger !\u003d null) {\n      synchronized (memToMemMerger) {\n        if (!memToMemMerger.isInProgress() \u0026\u0026 \n            inMemoryMapOutputs.size() \u003e\u003d memToMemMergeOutputsThreshold) {\n          memToMemMerger.startMerge(inMemoryMapOutputs);\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void closeInMemoryFile(MapOutput\u003cK,V\u003e mapOutput) { \n    inMemoryMapOutputs.add(mapOutput);\n    LOG.info(\"closeInMemoryFile -\u003e map-output of size: \" + mapOutput.getSize()\n        + \", inMemoryMapOutputs.size() -\u003e \" + inMemoryMapOutputs.size());\n    \n    synchronized (inMemoryMerger) {\n      if (!inMemoryMerger.isInProgress() \u0026\u0026 usedMemory \u003e\u003d mergeThreshold) {\n        LOG.info(\"Starting inMemoryMerger\u0027s merge since usedMemory\u003d\" +\n            usedMemory + \" \u003e mergeThreshold\u003d\" + mergeThreshold);\n        inMemoryMapOutputs.addAll(inMemoryMergedMapOutputs);\n        inMemoryMergedMapOutputs.clear();\n        inMemoryMerger.startMerge(inMemoryMapOutputs);\n      } \n    }\n    \n    if (memToMemMerger !\u003d null) {\n      synchronized (memToMemMerger) {\n        if (!memToMemMerger.isInProgress() \u0026\u0026 \n            inMemoryMapOutputs.size() \u003e\u003d memToMemMergeOutputsThreshold) {\n          memToMemMerger.startMerge(inMemoryMapOutputs);\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void closeInMemoryFile(MapOutput\u003cK,V\u003e mapOutput) { \n    inMemoryMapOutputs.add(mapOutput);\n    LOG.info(\"closeInMemoryFile -\u003e map-output of size: \" + mapOutput.getSize()\n        + \", inMemoryMapOutputs.size() -\u003e \" + inMemoryMapOutputs.size());\n    \n    synchronized (inMemoryMerger) {\n      if (!inMemoryMerger.isInProgress() \u0026\u0026 usedMemory \u003e\u003d mergeThreshold) {\n        LOG.info(\"Starting inMemoryMerger\u0027s merge since usedMemory\u003d\" +\n            usedMemory + \" \u003e mergeThreshold\u003d\" + mergeThreshold);\n        inMemoryMapOutputs.addAll(inMemoryMergedMapOutputs);\n        inMemoryMergedMapOutputs.clear();\n        inMemoryMerger.startMerge(inMemoryMapOutputs);\n      } \n    }\n    \n    if (memToMemMerger !\u003d null) {\n      synchronized (memToMemMerger) {\n        if (!memToMemMerger.isInProgress() \u0026\u0026 \n            inMemoryMapOutputs.size() \u003e\u003d memToMemMergeOutputsThreshold) {\n          memToMemMerger.startMerge(inMemoryMapOutputs);\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
        "oldMethodName": "closeInMemoryFile",
        "newMethodName": "closeInMemoryFile"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,24 @@\n+  public synchronized void closeInMemoryFile(MapOutput\u003cK,V\u003e mapOutput) { \n+    inMemoryMapOutputs.add(mapOutput);\n+    LOG.info(\"closeInMemoryFile -\u003e map-output of size: \" + mapOutput.getSize()\n+        + \", inMemoryMapOutputs.size() -\u003e \" + inMemoryMapOutputs.size());\n+    \n+    synchronized (inMemoryMerger) {\n+      if (!inMemoryMerger.isInProgress() \u0026\u0026 usedMemory \u003e\u003d mergeThreshold) {\n+        LOG.info(\"Starting inMemoryMerger\u0027s merge since usedMemory\u003d\" +\n+            usedMemory + \" \u003e mergeThreshold\u003d\" + mergeThreshold);\n+        inMemoryMapOutputs.addAll(inMemoryMergedMapOutputs);\n+        inMemoryMergedMapOutputs.clear();\n+        inMemoryMerger.startMerge(inMemoryMapOutputs);\n+      } \n+    }\n+    \n+    if (memToMemMerger !\u003d null) {\n+      synchronized (memToMemMerger) {\n+        if (!memToMemMerger.isInProgress() \u0026\u0026 \n+            inMemoryMapOutputs.size() \u003e\u003d memToMemMergeOutputsThreshold) {\n+          memToMemMerger.startMerge(inMemoryMapOutputs);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void closeInMemoryFile(MapOutput\u003cK,V\u003e mapOutput) { \n    inMemoryMapOutputs.add(mapOutput);\n    LOG.info(\"closeInMemoryFile -\u003e map-output of size: \" + mapOutput.getSize()\n        + \", inMemoryMapOutputs.size() -\u003e \" + inMemoryMapOutputs.size());\n    \n    synchronized (inMemoryMerger) {\n      if (!inMemoryMerger.isInProgress() \u0026\u0026 usedMemory \u003e\u003d mergeThreshold) {\n        LOG.info(\"Starting inMemoryMerger\u0027s merge since usedMemory\u003d\" +\n            usedMemory + \" \u003e mergeThreshold\u003d\" + mergeThreshold);\n        inMemoryMapOutputs.addAll(inMemoryMergedMapOutputs);\n        inMemoryMergedMapOutputs.clear();\n        inMemoryMerger.startMerge(inMemoryMapOutputs);\n      } \n    }\n    \n    if (memToMemMerger !\u003d null) {\n      synchronized (memToMemMerger) {\n        if (!memToMemMerger.isInProgress() \u0026\u0026 \n            inMemoryMapOutputs.size() \u003e\u003d memToMemMergeOutputsThreshold) {\n          memToMemMerger.startMerge(inMemoryMapOutputs);\n        }\n      }\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java"
    }
  }
}