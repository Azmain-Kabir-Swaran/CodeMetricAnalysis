{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "satisfyStoragePolicy",
  "functionId": "satisfyStoragePolicy___src-String__logRetryCache-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 2431,
  "functionEndLine": 2457,
  "numCommitsSeen": 1673,
  "timeTaken": 13087,
  "changeHistory": [
    "1824aee9da4056de0fb638906b2172e486bbebe7",
    "a700803a18fb957d2799001a2ce1dcb70f75c080",
    "f600fbb6c4987c69292faea6b5abf022bb213ffd",
    "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308",
    "3b83110d5ed582b9f913ecf3f62ce410535f8fca",
    "0e820f16af309cc8476edba448dd548686431133",
    "5ce332dc9a072f8850ab71ba16898faf8e866c06",
    "6215e35bb633706753a464ad3e8633366e6a10b2",
    "5179d99b7e1faeac1ce041967480115913d9f795",
    "b67ae6d9d741e79ccf2bd6f08a37fce070e6ad77"
  ],
  "changeHistoryShort": {
    "1824aee9da4056de0fb638906b2172e486bbebe7": "Ybodychange",
    "a700803a18fb957d2799001a2ce1dcb70f75c080": "Ybodychange",
    "f600fbb6c4987c69292faea6b5abf022bb213ffd": "Ybodychange",
    "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308": "Ybodychange",
    "3b83110d5ed582b9f913ecf3f62ce410535f8fca": "Ybodychange",
    "0e820f16af309cc8476edba448dd548686431133": "Ybodychange",
    "5ce332dc9a072f8850ab71ba16898faf8e866c06": "Ybodychange",
    "6215e35bb633706753a464ad3e8633366e6a10b2": "Ymultichange(Yparameterchange,Ybodychange)",
    "5179d99b7e1faeac1ce041967480115913d9f795": "Ybodychange",
    "b67ae6d9d741e79ccf2bd6f08a37fce070e6ad77": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1824aee9da4056de0fb638906b2172e486bbebe7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15217 Add more information to longest write/read lock held log\n\n",
      "commitDate": "18/04/20 1:52 PM",
      "commitName": "1824aee9da4056de0fb638906b2172e486bbebe7",
      "commitAuthor": "Toshihiro Suzuki",
      "commitDateOld": "25/03/20 10:28 AM",
      "commitNameOld": "a700803a18fb957d2799001a2ce1dcb70f75c080",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 24.14,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   void satisfyStoragePolicy(String src, boolean logRetryCache)\n       throws IOException {\n     final String operationName \u003d \"satisfyStoragePolicy\";\n     checkOperation(OperationCategory.WRITE);\n     // make sure storage policy is enabled, otherwise\n     // there is no need to satisfy storage policy.\n     checkStoragePolicyEnabled(\"satisfy storage policy\", false);\n-    FileStatus auditStat;\n+    FileStatus auditStat \u003d null;\n     validateStoragePolicySatisfy();\n     try {\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n         auditStat \u003d FSDirSatisfyStoragePolicyOp.satisfyStoragePolicy(\n             dir, blockManager, src, logRetryCache);\n       } finally {\n-        writeUnlock(operationName);\n+        writeUnlock(operationName,\n+            getLockReportInfoSupplier(src, null, auditStat));\n       }\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName, src);\n       throw e;\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, operationName, src, null, auditStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void satisfyStoragePolicy(String src, boolean logRetryCache)\n      throws IOException {\n    final String operationName \u003d \"satisfyStoragePolicy\";\n    checkOperation(OperationCategory.WRITE);\n    // make sure storage policy is enabled, otherwise\n    // there is no need to satisfy storage policy.\n    checkStoragePolicyEnabled(\"satisfy storage policy\", false);\n    FileStatus auditStat \u003d null;\n    validateStoragePolicySatisfy();\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n        auditStat \u003d FSDirSatisfyStoragePolicyOp.satisfyStoragePolicy(\n            dir, blockManager, src, logRetryCache);\n      } finally {\n        writeUnlock(operationName,\n            getLockReportInfoSupplier(src, null, auditStat));\n      }\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, src);\n      throw e;\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, operationName, src, null, auditStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "a700803a18fb957d2799001a2ce1dcb70f75c080": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15154. Allow only hdfs superusers the ability to assign HDFS storage policies. Contributed by Siddharth Wagle.\n\nChange-Id: I32d6dd2837945b8fc026a759aa367c55daefe348\n",
      "commitDate": "25/03/20 10:28 AM",
      "commitName": "a700803a18fb957d2799001a2ce1dcb70f75c080",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "24/03/20 10:26 AM",
      "commitNameOld": "ea87d6049340d1df040047aa08ce7784c03dd69e",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 1.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,26 @@\n   void satisfyStoragePolicy(String src, boolean logRetryCache)\n       throws IOException {\n     final String operationName \u003d \"satisfyStoragePolicy\";\n+    checkOperation(OperationCategory.WRITE);\n+    // make sure storage policy is enabled, otherwise\n+    // there is no need to satisfy storage policy.\n+    checkStoragePolicyEnabled(\"satisfy storage policy\", false);\n     FileStatus auditStat;\n     validateStoragePolicySatisfy();\n-    checkOperation(OperationCategory.WRITE);\n     try {\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n         auditStat \u003d FSDirSatisfyStoragePolicyOp.satisfyStoragePolicy(\n             dir, blockManager, src, logRetryCache);\n       } finally {\n         writeUnlock(operationName);\n       }\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName, src);\n       throw e;\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, operationName, src, null, auditStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void satisfyStoragePolicy(String src, boolean logRetryCache)\n      throws IOException {\n    final String operationName \u003d \"satisfyStoragePolicy\";\n    checkOperation(OperationCategory.WRITE);\n    // make sure storage policy is enabled, otherwise\n    // there is no need to satisfy storage policy.\n    checkStoragePolicyEnabled(\"satisfy storage policy\", false);\n    FileStatus auditStat;\n    validateStoragePolicySatisfy();\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n        auditStat \u003d FSDirSatisfyStoragePolicyOp.satisfyStoragePolicy(\n            dir, blockManager, src, logRetryCache);\n      } finally {\n        writeUnlock(operationName);\n      }\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, src);\n      throw e;\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, operationName, src, null, auditStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "f600fbb6c4987c69292faea6b5abf022bb213ffd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11246. FSNameSystem#logAuditEvent should be called outside the read or write locks. Contributed by He Xiaoqiao, Kuhu Shukla.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\nCo-authored-by: Kuhu Shukla \u003ckshukla@apache.org\u003e\n",
      "commitDate": "29/08/19 10:10 AM",
      "commitName": "f600fbb6c4987c69292faea6b5abf022bb213ffd",
      "commitAuthor": "He Xiaoqiao",
      "commitDateOld": "27/08/19 3:26 PM",
      "commitNameOld": "dde9399b37bffb77da17c025f0b9b673d7088bc6",
      "commitAuthorOld": "He Xiaoqiao",
      "daysBetweenCommits": 1.78,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,23 @@\n   void satisfyStoragePolicy(String src, boolean logRetryCache)\n       throws IOException {\n     final String operationName \u003d \"satisfyStoragePolicy\";\n     FileStatus auditStat;\n     validateStoragePolicySatisfy();\n     checkOperation(OperationCategory.WRITE);\n-    writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n-      auditStat \u003d FSDirSatisfyStoragePolicyOp.satisfyStoragePolicy(\n-          dir, blockManager, src, logRetryCache);\n+      writeLock();\n+      try {\n+        checkOperation(OperationCategory.WRITE);\n+        checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n+        auditStat \u003d FSDirSatisfyStoragePolicyOp.satisfyStoragePolicy(\n+            dir, blockManager, src, logRetryCache);\n+      } finally {\n+        writeUnlock(operationName);\n+      }\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName, src);\n       throw e;\n-    } finally {\n-      writeUnlock(operationName);\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, operationName, src, null, auditStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void satisfyStoragePolicy(String src, boolean logRetryCache)\n      throws IOException {\n    final String operationName \u003d \"satisfyStoragePolicy\";\n    FileStatus auditStat;\n    validateStoragePolicySatisfy();\n    checkOperation(OperationCategory.WRITE);\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n        auditStat \u003d FSDirSatisfyStoragePolicyOp.satisfyStoragePolicy(\n            dir, blockManager, src, logRetryCache);\n      } finally {\n        writeUnlock(operationName);\n      }\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, src);\n      throw e;\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, operationName, src, null, auditStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13077. [SPS]: Fix review comments of external storage policy satisfier. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "3b83110d5ed582b9f913ecf3f62ce410535f8fca",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,21 @@\n   void satisfyStoragePolicy(String src, boolean logRetryCache)\n       throws IOException {\n     final String operationName \u003d \"satisfyStoragePolicy\";\n     FileStatus auditStat;\n+    validateStoragePolicySatisfy();\n     checkOperation(OperationCategory.WRITE);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n-      // make sure storage policy is enabled, otherwise\n-      // there is no need to satisfy storage policy.\n-      if (!dir.isStoragePolicyEnabled()) {\n-        throw new IOException(String.format(\n-            \"Failed to satisfy storage policy since %s is set to false.\",\n-            DFS_STORAGE_POLICY_ENABLED_KEY));\n-      }\n-\n-      if (!blockManager.isSPSEnabled()\n-          || (blockManager.getSPSMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL\n-              \u0026\u0026 !blockManager.getStoragePolicySatisfier().isRunning())) {\n-        throw new UnsupportedActionException(\n-            \"Cannot request to satisfy storage policy \"\n-                + \"when storage policy satisfier feature has been disabled\"\n-                + \" by admin. Seek for an admin help to enable it \"\n-                + \"or use Mover tool.\");\n-      }\n       auditStat \u003d FSDirSatisfyStoragePolicyOp.satisfyStoragePolicy(\n           dir, blockManager, src, logRetryCache);\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName, src);\n       throw e;\n     } finally {\n       writeUnlock(operationName);\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, operationName, src, null, auditStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void satisfyStoragePolicy(String src, boolean logRetryCache)\n      throws IOException {\n    final String operationName \u003d \"satisfyStoragePolicy\";\n    FileStatus auditStat;\n    validateStoragePolicySatisfy();\n    checkOperation(OperationCategory.WRITE);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n      auditStat \u003d FSDirSatisfyStoragePolicyOp.satisfyStoragePolicy(\n          dir, blockManager, src, logRetryCache);\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, src);\n      throw e;\n    } finally {\n      writeUnlock(operationName);\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, operationName, src, null, auditStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "3b83110d5ed582b9f913ecf3f62ce410535f8fca": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13057: [SPS]: Revisit configurations to make SPS service modes internal/external/none. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "3b83110d5ed582b9f913ecf3f62ce410535f8fca",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "b0cb8d9bb44c963ae686d2b5c1b70bc76b955e10",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n   void satisfyStoragePolicy(String src, boolean logRetryCache)\n       throws IOException {\n     final String operationName \u003d \"satisfyStoragePolicy\";\n     FileStatus auditStat;\n     checkOperation(OperationCategory.WRITE);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n       // make sure storage policy is enabled, otherwise\n       // there is no need to satisfy storage policy.\n       if (!dir.isStoragePolicyEnabled()) {\n         throw new IOException(String.format(\n             \"Failed to satisfy storage policy since %s is set to false.\",\n             DFS_STORAGE_POLICY_ENABLED_KEY));\n       }\n \n-      if (blockManager.getStoragePolicySatisfier() \u003d\u003d null\n-          || !blockManager.getStoragePolicySatisfier().isRunning()) {\n+      if (!blockManager.isSPSEnabled()\n+          || (blockManager.getSPSMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL\n+              \u0026\u0026 !blockManager.getStoragePolicySatisfier().isRunning())) {\n         throw new UnsupportedActionException(\n             \"Cannot request to satisfy storage policy \"\n                 + \"when storage policy satisfier feature has been disabled\"\n                 + \" by admin. Seek for an admin help to enable it \"\n                 + \"or use Mover tool.\");\n       }\n       auditStat \u003d FSDirSatisfyStoragePolicyOp.satisfyStoragePolicy(\n           dir, blockManager, src, logRetryCache);\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName, src);\n       throw e;\n     } finally {\n       writeUnlock(operationName);\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, operationName, src, null, auditStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void satisfyStoragePolicy(String src, boolean logRetryCache)\n      throws IOException {\n    final String operationName \u003d \"satisfyStoragePolicy\";\n    FileStatus auditStat;\n    checkOperation(OperationCategory.WRITE);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n      // make sure storage policy is enabled, otherwise\n      // there is no need to satisfy storage policy.\n      if (!dir.isStoragePolicyEnabled()) {\n        throw new IOException(String.format(\n            \"Failed to satisfy storage policy since %s is set to false.\",\n            DFS_STORAGE_POLICY_ENABLED_KEY));\n      }\n\n      if (!blockManager.isSPSEnabled()\n          || (blockManager.getSPSMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL\n              \u0026\u0026 !blockManager.getStoragePolicySatisfier().isRunning())) {\n        throw new UnsupportedActionException(\n            \"Cannot request to satisfy storage policy \"\n                + \"when storage policy satisfier feature has been disabled\"\n                + \" by admin. Seek for an admin help to enable it \"\n                + \"or use Mover tool.\");\n      }\n      auditStat \u003d FSDirSatisfyStoragePolicyOp.satisfyStoragePolicy(\n          dir, blockManager, src, logRetryCache);\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, src);\n      throw e;\n    } finally {\n      writeUnlock(operationName);\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, operationName, src, null, auditStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "0e820f16af309cc8476edba448dd548686431133": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12214: [SPS]: Fix review comments of StoragePolicySatisfier feature. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "0e820f16af309cc8476edba448dd548686431133",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:05 AM",
      "commitNameOld": "5ce332dc9a072f8850ab71ba16898faf8e866c06",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,36 @@\n   void satisfyStoragePolicy(String src, boolean logRetryCache)\n       throws IOException {\n+    final String operationName \u003d \"satisfyStoragePolicy\";\n+    FileStatus auditStat;\n     checkOperation(OperationCategory.WRITE);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n       // make sure storage policy is enabled, otherwise\n       // there is no need to satisfy storage policy.\n       if (!dir.isStoragePolicyEnabled()) {\n         throw new IOException(String.format(\n             \"Failed to satisfy storage policy since %s is set to false.\",\n             DFS_STORAGE_POLICY_ENABLED_KEY));\n       }\n \n       if (blockManager.getStoragePolicySatisfier() \u003d\u003d null\n           || !blockManager.getStoragePolicySatisfier().isRunning()) {\n         throw new UnsupportedActionException(\n             \"Cannot request to satisfy storage policy \"\n-                + \"when storage policy satisfier feature has been deactivated\"\n-                + \" by admin. Seek for an admin help to activate it \"\n+                + \"when storage policy satisfier feature has been disabled\"\n+                + \" by admin. Seek for an admin help to enable it \"\n                 + \"or use Mover tool.\");\n       }\n-      FSDirSatisfyStoragePolicyOp.satisfyStoragePolicy(dir, blockManager, src,\n-          logRetryCache);\n+      auditStat \u003d FSDirSatisfyStoragePolicyOp.satisfyStoragePolicy(\n+          dir, blockManager, src, logRetryCache);\n+    } catch (AccessControlException e) {\n+      logAuditEvent(false, operationName, src);\n+      throw e;\n     } finally {\n-      writeUnlock();\n+      writeUnlock(operationName);\n     }\n     getEditLog().logSync();\n+    logAuditEvent(true, operationName, src, null, auditStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void satisfyStoragePolicy(String src, boolean logRetryCache)\n      throws IOException {\n    final String operationName \u003d \"satisfyStoragePolicy\";\n    FileStatus auditStat;\n    checkOperation(OperationCategory.WRITE);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n      // make sure storage policy is enabled, otherwise\n      // there is no need to satisfy storage policy.\n      if (!dir.isStoragePolicyEnabled()) {\n        throw new IOException(String.format(\n            \"Failed to satisfy storage policy since %s is set to false.\",\n            DFS_STORAGE_POLICY_ENABLED_KEY));\n      }\n\n      if (blockManager.getStoragePolicySatisfier() \u003d\u003d null\n          || !blockManager.getStoragePolicySatisfier().isRunning()) {\n        throw new UnsupportedActionException(\n            \"Cannot request to satisfy storage policy \"\n                + \"when storage policy satisfier feature has been disabled\"\n                + \" by admin. Seek for an admin help to enable it \"\n                + \"or use Mover tool.\");\n      }\n      auditStat \u003d FSDirSatisfyStoragePolicyOp.satisfyStoragePolicy(\n          dir, blockManager, src, logRetryCache);\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, src);\n      throw e;\n    } finally {\n      writeUnlock(operationName);\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, operationName, src, null, auditStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "5ce332dc9a072f8850ab71ba16898faf8e866c06": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11695: [SPS]: Namenode failed to start while loading SPS xAttrs from the edits log. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "12/08/18 3:05 AM",
      "commitName": "5ce332dc9a072f8850ab71ba16898faf8e866c06",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:05 AM",
      "commitNameOld": "11a08a7e8f727449f17d1e31855996353b2975fe",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   void satisfyStoragePolicy(String src, boolean logRetryCache)\n       throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n       // make sure storage policy is enabled, otherwise\n       // there is no need to satisfy storage policy.\n       if (!dir.isStoragePolicyEnabled()) {\n         throw new IOException(String.format(\n             \"Failed to satisfy storage policy since %s is set to false.\",\n             DFS_STORAGE_POLICY_ENABLED_KEY));\n       }\n \n       if (blockManager.getStoragePolicySatisfier() \u003d\u003d null\n           || !blockManager.getStoragePolicySatisfier().isRunning()) {\n         throw new UnsupportedActionException(\n             \"Cannot request to satisfy storage policy \"\n                 + \"when storage policy satisfier feature has been deactivated\"\n                 + \" by admin. Seek for an admin help to activate it \"\n                 + \"or use Mover tool.\");\n       }\n-      FSDirAttrOp.satisfyStoragePolicy(dir, blockManager, src, logRetryCache);\n+      FSDirSatisfyStoragePolicyOp.satisfyStoragePolicy(dir, blockManager, src,\n+          logRetryCache);\n     } finally {\n       writeUnlock();\n     }\n+    getEditLog().logSync();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void satisfyStoragePolicy(String src, boolean logRetryCache)\n      throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n      // make sure storage policy is enabled, otherwise\n      // there is no need to satisfy storage policy.\n      if (!dir.isStoragePolicyEnabled()) {\n        throw new IOException(String.format(\n            \"Failed to satisfy storage policy since %s is set to false.\",\n            DFS_STORAGE_POLICY_ENABLED_KEY));\n      }\n\n      if (blockManager.getStoragePolicySatisfier() \u003d\u003d null\n          || !blockManager.getStoragePolicySatisfier().isRunning()) {\n        throw new UnsupportedActionException(\n            \"Cannot request to satisfy storage policy \"\n                + \"when storage policy satisfier feature has been deactivated\"\n                + \" by admin. Seek for an admin help to activate it \"\n                + \"or use Mover tool.\");\n      }\n      FSDirSatisfyStoragePolicyOp.satisfyStoragePolicy(dir, blockManager, src,\n          logRetryCache);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "6215e35bb633706753a464ad3e8633366e6a10b2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-11150: [SPS]: Provide persistence when satisfying storage policy. Contributed by Yuanbo Liu\n",
      "commitDate": "12/08/18 3:05 AM",
      "commitName": "6215e35bb633706753a464ad3e8633366e6a10b2",
      "commitAuthor": "Uma Maheswara Rao G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-11150: [SPS]: Provide persistence when satisfying storage policy. Contributed by Yuanbo Liu\n",
          "commitDate": "12/08/18 3:05 AM",
          "commitName": "6215e35bb633706753a464ad3e8633366e6a10b2",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "12/08/18 3:05 AM",
          "commitNameOld": "5179d99b7e1faeac1ce041967480115913d9f795",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  void satisfyStoragePolicy(String src) throws IOException {\n+  void satisfyStoragePolicy(String src, boolean logRetryCache)\n+      throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n       // make sure storage policy is enabled, otherwise\n       // there is no need to satisfy storage policy.\n       if (!dir.isStoragePolicyEnabled()) {\n         throw new IOException(String.format(\n             \"Failed to satisfy storage policy since %s is set to false.\",\n             DFS_STORAGE_POLICY_ENABLED_KEY));\n       }\n \n       if (blockManager.getStoragePolicySatisfier() \u003d\u003d null\n           || !blockManager.getStoragePolicySatisfier().isRunning()) {\n         throw new UnsupportedActionException(\n             \"Cannot request to satisfy storage policy \"\n                 + \"when storage policy satisfier feature has been deactivated\"\n                 + \" by admin. Seek for an admin help to activate it \"\n                 + \"or use Mover tool.\");\n       }\n-      // TODO: need to update editlog for persistence.\n-      FSDirAttrOp.satisfyStoragePolicy(dir, blockManager, src);\n+      FSDirAttrOp.satisfyStoragePolicy(dir, blockManager, src, logRetryCache);\n     } finally {\n       writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void satisfyStoragePolicy(String src, boolean logRetryCache)\n      throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n      // make sure storage policy is enabled, otherwise\n      // there is no need to satisfy storage policy.\n      if (!dir.isStoragePolicyEnabled()) {\n        throw new IOException(String.format(\n            \"Failed to satisfy storage policy since %s is set to false.\",\n            DFS_STORAGE_POLICY_ENABLED_KEY));\n      }\n\n      if (blockManager.getStoragePolicySatisfier() \u003d\u003d null\n          || !blockManager.getStoragePolicySatisfier().isRunning()) {\n        throw new UnsupportedActionException(\n            \"Cannot request to satisfy storage policy \"\n                + \"when storage policy satisfier feature has been deactivated\"\n                + \" by admin. Seek for an admin help to activate it \"\n                + \"or use Mover tool.\");\n      }\n      FSDirAttrOp.satisfyStoragePolicy(dir, blockManager, src, logRetryCache);\n    } finally {\n      writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[src-String]",
            "newValue": "[src-String, logRetryCache-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-11150: [SPS]: Provide persistence when satisfying storage policy. Contributed by Yuanbo Liu\n",
          "commitDate": "12/08/18 3:05 AM",
          "commitName": "6215e35bb633706753a464ad3e8633366e6a10b2",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "12/08/18 3:05 AM",
          "commitNameOld": "5179d99b7e1faeac1ce041967480115913d9f795",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  void satisfyStoragePolicy(String src) throws IOException {\n+  void satisfyStoragePolicy(String src, boolean logRetryCache)\n+      throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n       // make sure storage policy is enabled, otherwise\n       // there is no need to satisfy storage policy.\n       if (!dir.isStoragePolicyEnabled()) {\n         throw new IOException(String.format(\n             \"Failed to satisfy storage policy since %s is set to false.\",\n             DFS_STORAGE_POLICY_ENABLED_KEY));\n       }\n \n       if (blockManager.getStoragePolicySatisfier() \u003d\u003d null\n           || !blockManager.getStoragePolicySatisfier().isRunning()) {\n         throw new UnsupportedActionException(\n             \"Cannot request to satisfy storage policy \"\n                 + \"when storage policy satisfier feature has been deactivated\"\n                 + \" by admin. Seek for an admin help to activate it \"\n                 + \"or use Mover tool.\");\n       }\n-      // TODO: need to update editlog for persistence.\n-      FSDirAttrOp.satisfyStoragePolicy(dir, blockManager, src);\n+      FSDirAttrOp.satisfyStoragePolicy(dir, blockManager, src, logRetryCache);\n     } finally {\n       writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void satisfyStoragePolicy(String src, boolean logRetryCache)\n      throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n      // make sure storage policy is enabled, otherwise\n      // there is no need to satisfy storage policy.\n      if (!dir.isStoragePolicyEnabled()) {\n        throw new IOException(String.format(\n            \"Failed to satisfy storage policy since %s is set to false.\",\n            DFS_STORAGE_POLICY_ENABLED_KEY));\n      }\n\n      if (blockManager.getStoragePolicySatisfier() \u003d\u003d null\n          || !blockManager.getStoragePolicySatisfier().isRunning()) {\n        throw new UnsupportedActionException(\n            \"Cannot request to satisfy storage policy \"\n                + \"when storage policy satisfier feature has been deactivated\"\n                + \" by admin. Seek for an admin help to activate it \"\n                + \"or use Mover tool.\");\n      }\n      FSDirAttrOp.satisfyStoragePolicy(dir, blockManager, src, logRetryCache);\n    } finally {\n      writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "5179d99b7e1faeac1ce041967480115913d9f795": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11123. [SPS] Make storage policy satisfier daemon work on/off dynamically. Contributed by Uma Maheswara Rao G\n",
      "commitDate": "12/08/18 3:05 AM",
      "commitName": "5179d99b7e1faeac1ce041967480115913d9f795",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "12/08/18 3:05 AM",
      "commitNameOld": "cd5262aba00aa51b905aaac95e201d4d48f2480d",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,28 @@\n   void satisfyStoragePolicy(String src) throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n+      // make sure storage policy is enabled, otherwise\n+      // there is no need to satisfy storage policy.\n+      if (!dir.isStoragePolicyEnabled()) {\n+        throw new IOException(String.format(\n+            \"Failed to satisfy storage policy since %s is set to false.\",\n+            DFS_STORAGE_POLICY_ENABLED_KEY));\n+      }\n+\n+      if (blockManager.getStoragePolicySatisfier() \u003d\u003d null\n+          || !blockManager.getStoragePolicySatisfier().isRunning()) {\n+        throw new UnsupportedActionException(\n+            \"Cannot request to satisfy storage policy \"\n+                + \"when storage policy satisfier feature has been deactivated\"\n+                + \" by admin. Seek for an admin help to activate it \"\n+                + \"or use Mover tool.\");\n+      }\n       // TODO: need to update editlog for persistence.\n       FSDirAttrOp.satisfyStoragePolicy(dir, blockManager, src);\n     } finally {\n       writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void satisfyStoragePolicy(String src) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n      // make sure storage policy is enabled, otherwise\n      // there is no need to satisfy storage policy.\n      if (!dir.isStoragePolicyEnabled()) {\n        throw new IOException(String.format(\n            \"Failed to satisfy storage policy since %s is set to false.\",\n            DFS_STORAGE_POLICY_ENABLED_KEY));\n      }\n\n      if (blockManager.getStoragePolicySatisfier() \u003d\u003d null\n          || !blockManager.getStoragePolicySatisfier().isRunning()) {\n        throw new UnsupportedActionException(\n            \"Cannot request to satisfy storage policy \"\n                + \"when storage policy satisfier feature has been deactivated\"\n                + \" by admin. Seek for an admin help to activate it \"\n                + \"or use Mover tool.\");\n      }\n      // TODO: need to update editlog for persistence.\n      FSDirAttrOp.satisfyStoragePolicy(dir, blockManager, src);\n    } finally {\n      writeUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "b67ae6d9d741e79ccf2bd6f08a37fce070e6ad77": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10802. [SPS]: Add satisfyStoragePolicy API in HdfsAdmin. Contributed by Yuanbo Liu\n",
      "commitDate": "12/08/18 3:05 AM",
      "commitName": "b67ae6d9d741e79ccf2bd6f08a37fce070e6ad77",
      "commitAuthor": "Rakesh Radhakrishnan",
      "diff": "@@ -0,0 +1,12 @@\n+  void satisfyStoragePolicy(String src) throws IOException {\n+    checkOperation(OperationCategory.WRITE);\n+    writeLock();\n+    try {\n+      checkOperation(OperationCategory.WRITE);\n+      checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n+      // TODO: need to update editlog for persistence.\n+      FSDirAttrOp.satisfyStoragePolicy(dir, blockManager, src);\n+    } finally {\n+      writeUnlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void satisfyStoragePolicy(String src) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot satisfy storage policy for \" + src);\n      // TODO: need to update editlog for persistence.\n      FSDirAttrOp.satisfyStoragePolicy(dir, blockManager, src);\n    } finally {\n      writeUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
    }
  }
}