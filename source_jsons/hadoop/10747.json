{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockPoolSliceStorage.java",
  "functionName": "loadStorageDirectory",
  "functionId": "loadStorageDirectory___nsInfo-NamespaceInfo__location-StorageLocation__startOpt-StartupOption__callables-List__Callable__StorageDirectory______conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
  "functionStartLine": 150,
  "functionEndLine": 198,
  "numCommitsSeen": 148,
  "timeTaken": 6605,
  "changeHistory": [
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
    "f209e93566b159c22054dcb276e45f23a2b7b7d1",
    "96b12662ea76e3ded4ef13944fc8df206cfb4613",
    "cc48251bfdef3d38ca5658da5a3624ef8941858d",
    "66289a3bf403f307844ea0b6ceed35b603d12c0b",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
    "a9331fe9b071fdcdae0c6c747d7b6b306142e671"
  ],
  "changeHistoryShort": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": "Ybodychange",
    "f209e93566b159c22054dcb276e45f23a2b7b7d1": "Ymultichange(Yparameterchange,Ybodychange)",
    "96b12662ea76e3ded4ef13944fc8df206cfb4613": "Ymultichange(Yparameterchange,Ybodychange)",
    "cc48251bfdef3d38ca5658da5a3624ef8941858d": "Ybodychange",
    "66289a3bf403f307844ea0b6ceed35b603d12c0b": "Ymultichange(Yparameterchange,Ybodychange)",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": "Ymultichange(Yparameterchange,Ybodychange)",
    "a9331fe9b071fdcdae0c6c747d7b6b306142e671": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12997. Move logging to slf4j in BlockPoolSliceStorage and Storage. Contributed by Ajay Kumar.\n",
      "commitDate": "01/02/18 10:45 AM",
      "commitName": "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 47.7,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,49 @@\n   private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n       StorageLocation location, StartupOption startOpt,\n       List\u003cCallable\u003cStorageDirectory\u003e\u003e callables, Configuration conf)\n           throws IOException {\n     StorageDirectory sd \u003d new StorageDirectory(\n         nsInfo.getBlockPoolID(), null, true, location);\n     try {\n       StorageState curState \u003d sd.analyzeStorage(startOpt, this, true);\n       // sd is locked but not opened\n       switch (curState) {\n       case NORMAL:\n         break;\n       case NON_EXISTENT:\n-        LOG.info(\"Block pool storage directory for location \" + location +\n-            \" and block pool id \" + nsInfo.getBlockPoolID() +\n-            \" does not exist\");\n+        LOG.info(\"Block pool storage directory for location {} and block pool\"\n+            + \" id {} does not exist\", location, nsInfo.getBlockPoolID());\n         throw new IOException(\"Storage directory for location \" + location +\n             \" and block pool id \" + nsInfo.getBlockPoolID() +\n             \" does not exist\");\n       case NOT_FORMATTED: // format\n-        LOG.info(\"Block pool storage directory for location \" + location +\n-            \" and block pool id \" + nsInfo.getBlockPoolID()\n-            + \" is not formatted for \" + nsInfo.getBlockPoolID()\n-            + \". Formatting ...\");\n+        LOG.info(\"Block pool storage directory for location {} and block pool\"\n+                + \" id {} is not formatted. Formatting ...\", location,\n+            nsInfo.getBlockPoolID());\n         format(sd, nsInfo);\n         break;\n       default:  // recovery part is common\n         sd.doRecover(curState);\n       }\n \n       // 2. Do transitions\n       // Each storage directory is treated individually.\n       // During startup some of them can upgrade or roll back\n       // while others could be up-to-date for the regular startup.\n       if (!doTransition(sd, nsInfo, startOpt, callables, conf)) {\n \n         // 3. Check CTime and update successfully loaded storage.\n         if (getCTime() !\u003d nsInfo.getCTime()) {\n           throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n               + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n         }\n         setServiceLayoutVersion(getServiceLayoutVersion());\n         writeProperties(sd);\n       }\n \n       return sd;\n     } catch (IOException ioe) {\n       sd.unlock();\n       throw ioe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n      StorageLocation location, StartupOption startOpt,\n      List\u003cCallable\u003cStorageDirectory\u003e\u003e callables, Configuration conf)\n          throws IOException {\n    StorageDirectory sd \u003d new StorageDirectory(\n        nsInfo.getBlockPoolID(), null, true, location);\n    try {\n      StorageState curState \u003d sd.analyzeStorage(startOpt, this, true);\n      // sd is locked but not opened\n      switch (curState) {\n      case NORMAL:\n        break;\n      case NON_EXISTENT:\n        LOG.info(\"Block pool storage directory for location {} and block pool\"\n            + \" id {} does not exist\", location, nsInfo.getBlockPoolID());\n        throw new IOException(\"Storage directory for location \" + location +\n            \" and block pool id \" + nsInfo.getBlockPoolID() +\n            \" does not exist\");\n      case NOT_FORMATTED: // format\n        LOG.info(\"Block pool storage directory for location {} and block pool\"\n                + \" id {} is not formatted. Formatting ...\", location,\n            nsInfo.getBlockPoolID());\n        format(sd, nsInfo);\n        break;\n      default:  // recovery part is common\n        sd.doRecover(curState);\n      }\n\n      // 2. Do transitions\n      // Each storage directory is treated individually.\n      // During startup some of them can upgrade or roll back\n      // while others could be up-to-date for the regular startup.\n      if (!doTransition(sd, nsInfo, startOpt, callables, conf)) {\n\n        // 3. Check CTime and update successfully loaded storage.\n        if (getCTime() !\u003d nsInfo.getCTime()) {\n          throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n              + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n        }\n        setServiceLayoutVersion(getServiceLayoutVersion());\n        writeProperties(sd);\n      }\n\n      return sd;\n    } catch (IOException ioe) {\n      sd.unlock();\n      throw ioe;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "f209e93566b159c22054dcb276e45f23a2b7b7d1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10638. Modifications to remove the assumption that StorageLocation is associated with java.io.File in Datanode. (Virajith Jalaparti via lei)\n",
      "commitDate": "26/10/16 10:32 AM",
      "commitName": "f209e93566b159c22054dcb276e45f23a2b7b7d1",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10638. Modifications to remove the assumption that StorageLocation is associated with java.io.File in Datanode. (Virajith Jalaparti via lei)\n",
          "commitDate": "26/10/16 10:32 AM",
          "commitName": "f209e93566b159c22054dcb276e45f23a2b7b7d1",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "10/10/16 3:30 PM",
          "commitNameOld": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 15.79,
          "commitsBetweenForRepo": 122,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,51 @@\n   private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n-      File dataDir, StorageLocation location, StartupOption startOpt,\n+      StorageLocation location, StartupOption startOpt,\n       List\u003cCallable\u003cStorageDirectory\u003e\u003e callables, Configuration conf)\n           throws IOException {\n-    StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true, location);\n+    StorageDirectory sd \u003d new StorageDirectory(\n+        nsInfo.getBlockPoolID(), null, true, location);\n     try {\n       StorageState curState \u003d sd.analyzeStorage(startOpt, this, true);\n       // sd is locked but not opened\n       switch (curState) {\n       case NORMAL:\n         break;\n       case NON_EXISTENT:\n-        LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n-        throw new IOException(\"Storage directory \" + dataDir\n-            + \" does not exist\");\n+        LOG.info(\"Block pool storage directory for location \" + location +\n+            \" and block pool id \" + nsInfo.getBlockPoolID() +\n+            \" does not exist\");\n+        throw new IOException(\"Storage directory for location \" + location +\n+            \" and block pool id \" + nsInfo.getBlockPoolID() +\n+            \" does not exist\");\n       case NOT_FORMATTED: // format\n-        LOG.info(\"Block pool storage directory \" + dataDir\n+        LOG.info(\"Block pool storage directory for location \" + location +\n+            \" and block pool id \" + nsInfo.getBlockPoolID()\n             + \" is not formatted for \" + nsInfo.getBlockPoolID()\n             + \". Formatting ...\");\n         format(sd, nsInfo);\n         break;\n       default:  // recovery part is common\n         sd.doRecover(curState);\n       }\n \n       // 2. Do transitions\n       // Each storage directory is treated individually.\n       // During startup some of them can upgrade or roll back\n       // while others could be up-to-date for the regular startup.\n       if (!doTransition(sd, nsInfo, startOpt, callables, conf)) {\n \n         // 3. Check CTime and update successfully loaded storage.\n         if (getCTime() !\u003d nsInfo.getCTime()) {\n           throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n               + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n         }\n         setServiceLayoutVersion(getServiceLayoutVersion());\n         writeProperties(sd);\n       }\n \n       return sd;\n     } catch (IOException ioe) {\n       sd.unlock();\n       throw ioe;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n      StorageLocation location, StartupOption startOpt,\n      List\u003cCallable\u003cStorageDirectory\u003e\u003e callables, Configuration conf)\n          throws IOException {\n    StorageDirectory sd \u003d new StorageDirectory(\n        nsInfo.getBlockPoolID(), null, true, location);\n    try {\n      StorageState curState \u003d sd.analyzeStorage(startOpt, this, true);\n      // sd is locked but not opened\n      switch (curState) {\n      case NORMAL:\n        break;\n      case NON_EXISTENT:\n        LOG.info(\"Block pool storage directory for location \" + location +\n            \" and block pool id \" + nsInfo.getBlockPoolID() +\n            \" does not exist\");\n        throw new IOException(\"Storage directory for location \" + location +\n            \" and block pool id \" + nsInfo.getBlockPoolID() +\n            \" does not exist\");\n      case NOT_FORMATTED: // format\n        LOG.info(\"Block pool storage directory for location \" + location +\n            \" and block pool id \" + nsInfo.getBlockPoolID()\n            + \" is not formatted for \" + nsInfo.getBlockPoolID()\n            + \". Formatting ...\");\n        format(sd, nsInfo);\n        break;\n      default:  // recovery part is common\n        sd.doRecover(curState);\n      }\n\n      // 2. Do transitions\n      // Each storage directory is treated individually.\n      // During startup some of them can upgrade or roll back\n      // while others could be up-to-date for the regular startup.\n      if (!doTransition(sd, nsInfo, startOpt, callables, conf)) {\n\n        // 3. Check CTime and update successfully loaded storage.\n        if (getCTime() !\u003d nsInfo.getCTime()) {\n          throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n              + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n        }\n        setServiceLayoutVersion(getServiceLayoutVersion());\n        writeProperties(sd);\n      }\n\n      return sd;\n    } catch (IOException ioe) {\n      sd.unlock();\n      throw ioe;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {
            "oldValue": "[nsInfo-NamespaceInfo, dataDir-File, location-StorageLocation, startOpt-StartupOption, callables-List\u003cCallable\u003cStorageDirectory\u003e\u003e, conf-Configuration]",
            "newValue": "[nsInfo-NamespaceInfo, location-StorageLocation, startOpt-StartupOption, callables-List\u003cCallable\u003cStorageDirectory\u003e\u003e, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10638. Modifications to remove the assumption that StorageLocation is associated with java.io.File in Datanode. (Virajith Jalaparti via lei)\n",
          "commitDate": "26/10/16 10:32 AM",
          "commitName": "f209e93566b159c22054dcb276e45f23a2b7b7d1",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "10/10/16 3:30 PM",
          "commitNameOld": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 15.79,
          "commitsBetweenForRepo": 122,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,51 @@\n   private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n-      File dataDir, StorageLocation location, StartupOption startOpt,\n+      StorageLocation location, StartupOption startOpt,\n       List\u003cCallable\u003cStorageDirectory\u003e\u003e callables, Configuration conf)\n           throws IOException {\n-    StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true, location);\n+    StorageDirectory sd \u003d new StorageDirectory(\n+        nsInfo.getBlockPoolID(), null, true, location);\n     try {\n       StorageState curState \u003d sd.analyzeStorage(startOpt, this, true);\n       // sd is locked but not opened\n       switch (curState) {\n       case NORMAL:\n         break;\n       case NON_EXISTENT:\n-        LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n-        throw new IOException(\"Storage directory \" + dataDir\n-            + \" does not exist\");\n+        LOG.info(\"Block pool storage directory for location \" + location +\n+            \" and block pool id \" + nsInfo.getBlockPoolID() +\n+            \" does not exist\");\n+        throw new IOException(\"Storage directory for location \" + location +\n+            \" and block pool id \" + nsInfo.getBlockPoolID() +\n+            \" does not exist\");\n       case NOT_FORMATTED: // format\n-        LOG.info(\"Block pool storage directory \" + dataDir\n+        LOG.info(\"Block pool storage directory for location \" + location +\n+            \" and block pool id \" + nsInfo.getBlockPoolID()\n             + \" is not formatted for \" + nsInfo.getBlockPoolID()\n             + \". Formatting ...\");\n         format(sd, nsInfo);\n         break;\n       default:  // recovery part is common\n         sd.doRecover(curState);\n       }\n \n       // 2. Do transitions\n       // Each storage directory is treated individually.\n       // During startup some of them can upgrade or roll back\n       // while others could be up-to-date for the regular startup.\n       if (!doTransition(sd, nsInfo, startOpt, callables, conf)) {\n \n         // 3. Check CTime and update successfully loaded storage.\n         if (getCTime() !\u003d nsInfo.getCTime()) {\n           throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n               + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n         }\n         setServiceLayoutVersion(getServiceLayoutVersion());\n         writeProperties(sd);\n       }\n \n       return sd;\n     } catch (IOException ioe) {\n       sd.unlock();\n       throw ioe;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n      StorageLocation location, StartupOption startOpt,\n      List\u003cCallable\u003cStorageDirectory\u003e\u003e callables, Configuration conf)\n          throws IOException {\n    StorageDirectory sd \u003d new StorageDirectory(\n        nsInfo.getBlockPoolID(), null, true, location);\n    try {\n      StorageState curState \u003d sd.analyzeStorage(startOpt, this, true);\n      // sd is locked but not opened\n      switch (curState) {\n      case NORMAL:\n        break;\n      case NON_EXISTENT:\n        LOG.info(\"Block pool storage directory for location \" + location +\n            \" and block pool id \" + nsInfo.getBlockPoolID() +\n            \" does not exist\");\n        throw new IOException(\"Storage directory for location \" + location +\n            \" and block pool id \" + nsInfo.getBlockPoolID() +\n            \" does not exist\");\n      case NOT_FORMATTED: // format\n        LOG.info(\"Block pool storage directory for location \" + location +\n            \" and block pool id \" + nsInfo.getBlockPoolID()\n            + \" is not formatted for \" + nsInfo.getBlockPoolID()\n            + \". Formatting ...\");\n        format(sd, nsInfo);\n        break;\n      default:  // recovery part is common\n        sd.doRecover(curState);\n      }\n\n      // 2. Do transitions\n      // Each storage directory is treated individually.\n      // During startup some of them can upgrade or roll back\n      // while others could be up-to-date for the regular startup.\n      if (!doTransition(sd, nsInfo, startOpt, callables, conf)) {\n\n        // 3. Check CTime and update successfully loaded storage.\n        if (getCTime() !\u003d nsInfo.getCTime()) {\n          throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n              + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n        }\n        setServiceLayoutVersion(getServiceLayoutVersion());\n        writeProperties(sd);\n      }\n\n      return sd;\n    } catch (IOException ioe) {\n      sd.unlock();\n      throw ioe;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "96b12662ea76e3ded4ef13944fc8df206cfb4613": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10637. Modifications to remove the assumption that FsVolumes are backed by java.io.File. (Virajith Jalaparti via lei)\n",
      "commitDate": "10/10/16 3:30 PM",
      "commitName": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10637. Modifications to remove the assumption that FsVolumes are backed by java.io.File. (Virajith Jalaparti via lei)\n",
          "commitDate": "10/10/16 3:30 PM",
          "commitName": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "13/09/16 12:54 PM",
          "commitNameOld": "86c9862bec0248d671e657aa56094a2919b8ac14",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 27.11,
          "commitsBetweenForRepo": 180,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n   private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n-      File dataDir, StartupOption startOpt,\n+      File dataDir, StorageLocation location, StartupOption startOpt,\n       List\u003cCallable\u003cStorageDirectory\u003e\u003e callables, Configuration conf)\n           throws IOException {\n-    StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true);\n+    StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true, location);\n     try {\n       StorageState curState \u003d sd.analyzeStorage(startOpt, this, true);\n       // sd is locked but not opened\n       switch (curState) {\n       case NORMAL:\n         break;\n       case NON_EXISTENT:\n         LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n         throw new IOException(\"Storage directory \" + dataDir\n             + \" does not exist\");\n       case NOT_FORMATTED: // format\n         LOG.info(\"Block pool storage directory \" + dataDir\n             + \" is not formatted for \" + nsInfo.getBlockPoolID()\n             + \". Formatting ...\");\n         format(sd, nsInfo);\n         break;\n       default:  // recovery part is common\n         sd.doRecover(curState);\n       }\n \n       // 2. Do transitions\n       // Each storage directory is treated individually.\n       // During startup some of them can upgrade or roll back\n       // while others could be up-to-date for the regular startup.\n       if (!doTransition(sd, nsInfo, startOpt, callables, conf)) {\n \n         // 3. Check CTime and update successfully loaded storage.\n         if (getCTime() !\u003d nsInfo.getCTime()) {\n           throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n               + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n         }\n         setServiceLayoutVersion(getServiceLayoutVersion());\n         writeProperties(sd);\n       }\n \n       return sd;\n     } catch (IOException ioe) {\n       sd.unlock();\n       throw ioe;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n      File dataDir, StorageLocation location, StartupOption startOpt,\n      List\u003cCallable\u003cStorageDirectory\u003e\u003e callables, Configuration conf)\n          throws IOException {\n    StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true, location);\n    try {\n      StorageState curState \u003d sd.analyzeStorage(startOpt, this, true);\n      // sd is locked but not opened\n      switch (curState) {\n      case NORMAL:\n        break;\n      case NON_EXISTENT:\n        LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n        throw new IOException(\"Storage directory \" + dataDir\n            + \" does not exist\");\n      case NOT_FORMATTED: // format\n        LOG.info(\"Block pool storage directory \" + dataDir\n            + \" is not formatted for \" + nsInfo.getBlockPoolID()\n            + \". Formatting ...\");\n        format(sd, nsInfo);\n        break;\n      default:  // recovery part is common\n        sd.doRecover(curState);\n      }\n\n      // 2. Do transitions\n      // Each storage directory is treated individually.\n      // During startup some of them can upgrade or roll back\n      // while others could be up-to-date for the regular startup.\n      if (!doTransition(sd, nsInfo, startOpt, callables, conf)) {\n\n        // 3. Check CTime and update successfully loaded storage.\n        if (getCTime() !\u003d nsInfo.getCTime()) {\n          throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n              + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n        }\n        setServiceLayoutVersion(getServiceLayoutVersion());\n        writeProperties(sd);\n      }\n\n      return sd;\n    } catch (IOException ioe) {\n      sd.unlock();\n      throw ioe;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {
            "oldValue": "[nsInfo-NamespaceInfo, dataDir-File, startOpt-StartupOption, callables-List\u003cCallable\u003cStorageDirectory\u003e\u003e, conf-Configuration]",
            "newValue": "[nsInfo-NamespaceInfo, dataDir-File, location-StorageLocation, startOpt-StartupOption, callables-List\u003cCallable\u003cStorageDirectory\u003e\u003e, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10637. Modifications to remove the assumption that FsVolumes are backed by java.io.File. (Virajith Jalaparti via lei)\n",
          "commitDate": "10/10/16 3:30 PM",
          "commitName": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "13/09/16 12:54 PM",
          "commitNameOld": "86c9862bec0248d671e657aa56094a2919b8ac14",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 27.11,
          "commitsBetweenForRepo": 180,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n   private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n-      File dataDir, StartupOption startOpt,\n+      File dataDir, StorageLocation location, StartupOption startOpt,\n       List\u003cCallable\u003cStorageDirectory\u003e\u003e callables, Configuration conf)\n           throws IOException {\n-    StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true);\n+    StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true, location);\n     try {\n       StorageState curState \u003d sd.analyzeStorage(startOpt, this, true);\n       // sd is locked but not opened\n       switch (curState) {\n       case NORMAL:\n         break;\n       case NON_EXISTENT:\n         LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n         throw new IOException(\"Storage directory \" + dataDir\n             + \" does not exist\");\n       case NOT_FORMATTED: // format\n         LOG.info(\"Block pool storage directory \" + dataDir\n             + \" is not formatted for \" + nsInfo.getBlockPoolID()\n             + \". Formatting ...\");\n         format(sd, nsInfo);\n         break;\n       default:  // recovery part is common\n         sd.doRecover(curState);\n       }\n \n       // 2. Do transitions\n       // Each storage directory is treated individually.\n       // During startup some of them can upgrade or roll back\n       // while others could be up-to-date for the regular startup.\n       if (!doTransition(sd, nsInfo, startOpt, callables, conf)) {\n \n         // 3. Check CTime and update successfully loaded storage.\n         if (getCTime() !\u003d nsInfo.getCTime()) {\n           throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n               + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n         }\n         setServiceLayoutVersion(getServiceLayoutVersion());\n         writeProperties(sd);\n       }\n \n       return sd;\n     } catch (IOException ioe) {\n       sd.unlock();\n       throw ioe;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n      File dataDir, StorageLocation location, StartupOption startOpt,\n      List\u003cCallable\u003cStorageDirectory\u003e\u003e callables, Configuration conf)\n          throws IOException {\n    StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true, location);\n    try {\n      StorageState curState \u003d sd.analyzeStorage(startOpt, this, true);\n      // sd is locked but not opened\n      switch (curState) {\n      case NORMAL:\n        break;\n      case NON_EXISTENT:\n        LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n        throw new IOException(\"Storage directory \" + dataDir\n            + \" does not exist\");\n      case NOT_FORMATTED: // format\n        LOG.info(\"Block pool storage directory \" + dataDir\n            + \" is not formatted for \" + nsInfo.getBlockPoolID()\n            + \". Formatting ...\");\n        format(sd, nsInfo);\n        break;\n      default:  // recovery part is common\n        sd.doRecover(curState);\n      }\n\n      // 2. Do transitions\n      // Each storage directory is treated individually.\n      // During startup some of them can upgrade or roll back\n      // while others could be up-to-date for the regular startup.\n      if (!doTransition(sd, nsInfo, startOpt, callables, conf)) {\n\n        // 3. Check CTime and update successfully loaded storage.\n        if (getCTime() !\u003d nsInfo.getCTime()) {\n          throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n              + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n        }\n        setServiceLayoutVersion(getServiceLayoutVersion());\n        writeProperties(sd);\n      }\n\n      return sd;\n    } catch (IOException ioe) {\n      sd.unlock();\n      throw ioe;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "cc48251bfdef3d38ca5658da5a3624ef8941858d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10457. DataNode should not auto-format block pool directory if VERSION is missing. (Wei-Chiu Chuang via lei)\n",
      "commitDate": "09/08/16 3:51 PM",
      "commitName": "cc48251bfdef3d38ca5658da5a3624ef8941858d",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "22/02/16 3:01 PM",
      "commitNameOld": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 168.99,
      "commitsBetweenForRepo": 1225,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n       File dataDir, StartupOption startOpt,\n       List\u003cCallable\u003cStorageDirectory\u003e\u003e callables, Configuration conf)\n           throws IOException {\n     StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true);\n     try {\n-      StorageState curState \u003d sd.analyzeStorage(startOpt, this);\n+      StorageState curState \u003d sd.analyzeStorage(startOpt, this, true);\n       // sd is locked but not opened\n       switch (curState) {\n       case NORMAL:\n         break;\n       case NON_EXISTENT:\n         LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n         throw new IOException(\"Storage directory \" + dataDir\n             + \" does not exist\");\n       case NOT_FORMATTED: // format\n         LOG.info(\"Block pool storage directory \" + dataDir\n             + \" is not formatted for \" + nsInfo.getBlockPoolID()\n             + \". Formatting ...\");\n         format(sd, nsInfo);\n         break;\n       default:  // recovery part is common\n         sd.doRecover(curState);\n       }\n \n       // 2. Do transitions\n       // Each storage directory is treated individually.\n       // During startup some of them can upgrade or roll back\n       // while others could be up-to-date for the regular startup.\n       if (!doTransition(sd, nsInfo, startOpt, callables, conf)) {\n \n         // 3. Check CTime and update successfully loaded storage.\n         if (getCTime() !\u003d nsInfo.getCTime()) {\n           throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n               + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n         }\n         setServiceLayoutVersion(getServiceLayoutVersion());\n         writeProperties(sd);\n       }\n \n       return sd;\n     } catch (IOException ioe) {\n       sd.unlock();\n       throw ioe;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n      File dataDir, StartupOption startOpt,\n      List\u003cCallable\u003cStorageDirectory\u003e\u003e callables, Configuration conf)\n          throws IOException {\n    StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true);\n    try {\n      StorageState curState \u003d sd.analyzeStorage(startOpt, this, true);\n      // sd is locked but not opened\n      switch (curState) {\n      case NORMAL:\n        break;\n      case NON_EXISTENT:\n        LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n        throw new IOException(\"Storage directory \" + dataDir\n            + \" does not exist\");\n      case NOT_FORMATTED: // format\n        LOG.info(\"Block pool storage directory \" + dataDir\n            + \" is not formatted for \" + nsInfo.getBlockPoolID()\n            + \". Formatting ...\");\n        format(sd, nsInfo);\n        break;\n      default:  // recovery part is common\n        sd.doRecover(curState);\n      }\n\n      // 2. Do transitions\n      // Each storage directory is treated individually.\n      // During startup some of them can upgrade or roll back\n      // while others could be up-to-date for the regular startup.\n      if (!doTransition(sd, nsInfo, startOpt, callables, conf)) {\n\n        // 3. Check CTime and update successfully loaded storage.\n        if (getCTime() !\u003d nsInfo.getCTime()) {\n          throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n              + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n        }\n        setServiceLayoutVersion(getServiceLayoutVersion());\n        writeProperties(sd);\n      }\n\n      return sd;\n    } catch (IOException ioe) {\n      sd.unlock();\n      throw ioe;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "66289a3bf403f307844ea0b6ceed35b603d12c0b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
      "commitDate": "22/02/16 3:01 PM",
      "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
          "commitDate": "22/02/16 3:01 PM",
          "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "27/01/16 6:58 PM",
          "commitNameOld": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 25.84,
          "commitsBetweenForRepo": 173,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,46 @@\n   private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n-      File dataDir, StartupOption startOpt, Configuration conf)\n+      File dataDir, StartupOption startOpt,\n+      List\u003cCallable\u003cStorageDirectory\u003e\u003e callables, Configuration conf)\n           throws IOException {\n     StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true);\n     try {\n       StorageState curState \u003d sd.analyzeStorage(startOpt, this);\n       // sd is locked but not opened\n       switch (curState) {\n       case NORMAL:\n         break;\n       case NON_EXISTENT:\n         LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n         throw new IOException(\"Storage directory \" + dataDir\n             + \" does not exist\");\n       case NOT_FORMATTED: // format\n         LOG.info(\"Block pool storage directory \" + dataDir\n             + \" is not formatted for \" + nsInfo.getBlockPoolID()\n             + \". Formatting ...\");\n         format(sd, nsInfo);\n         break;\n       default:  // recovery part is common\n         sd.doRecover(curState);\n       }\n \n       // 2. Do transitions\n       // Each storage directory is treated individually.\n       // During startup some of them can upgrade or roll back\n       // while others could be up-to-date for the regular startup.\n-      if (doTransition(sd, nsInfo, startOpt, conf)) {\n-        return sd;\n-      }\n+      if (!doTransition(sd, nsInfo, startOpt, callables, conf)) {\n \n-      if (getCTime() !\u003d nsInfo.getCTime()) {\n-        throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n-            + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n+        // 3. Check CTime and update successfully loaded storage.\n+        if (getCTime() !\u003d nsInfo.getCTime()) {\n+          throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n+              + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n+        }\n+        setServiceLayoutVersion(getServiceLayoutVersion());\n+        writeProperties(sd);\n       }\n \n-      // 3. Update successfully loaded storage.\n-      setServiceLayoutVersion(getServiceLayoutVersion());\n-      writeProperties(sd);\n-\n       return sd;\n     } catch (IOException ioe) {\n       sd.unlock();\n       throw ioe;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n      File dataDir, StartupOption startOpt,\n      List\u003cCallable\u003cStorageDirectory\u003e\u003e callables, Configuration conf)\n          throws IOException {\n    StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true);\n    try {\n      StorageState curState \u003d sd.analyzeStorage(startOpt, this);\n      // sd is locked but not opened\n      switch (curState) {\n      case NORMAL:\n        break;\n      case NON_EXISTENT:\n        LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n        throw new IOException(\"Storage directory \" + dataDir\n            + \" does not exist\");\n      case NOT_FORMATTED: // format\n        LOG.info(\"Block pool storage directory \" + dataDir\n            + \" is not formatted for \" + nsInfo.getBlockPoolID()\n            + \". Formatting ...\");\n        format(sd, nsInfo);\n        break;\n      default:  // recovery part is common\n        sd.doRecover(curState);\n      }\n\n      // 2. Do transitions\n      // Each storage directory is treated individually.\n      // During startup some of them can upgrade or roll back\n      // while others could be up-to-date for the regular startup.\n      if (!doTransition(sd, nsInfo, startOpt, callables, conf)) {\n\n        // 3. Check CTime and update successfully loaded storage.\n        if (getCTime() !\u003d nsInfo.getCTime()) {\n          throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n              + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n        }\n        setServiceLayoutVersion(getServiceLayoutVersion());\n        writeProperties(sd);\n      }\n\n      return sd;\n    } catch (IOException ioe) {\n      sd.unlock();\n      throw ioe;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {
            "oldValue": "[nsInfo-NamespaceInfo, dataDir-File, startOpt-StartupOption, conf-Configuration]",
            "newValue": "[nsInfo-NamespaceInfo, dataDir-File, startOpt-StartupOption, callables-List\u003cCallable\u003cStorageDirectory\u003e\u003e, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
          "commitDate": "22/02/16 3:01 PM",
          "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "27/01/16 6:58 PM",
          "commitNameOld": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 25.84,
          "commitsBetweenForRepo": 173,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,46 @@\n   private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n-      File dataDir, StartupOption startOpt, Configuration conf)\n+      File dataDir, StartupOption startOpt,\n+      List\u003cCallable\u003cStorageDirectory\u003e\u003e callables, Configuration conf)\n           throws IOException {\n     StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true);\n     try {\n       StorageState curState \u003d sd.analyzeStorage(startOpt, this);\n       // sd is locked but not opened\n       switch (curState) {\n       case NORMAL:\n         break;\n       case NON_EXISTENT:\n         LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n         throw new IOException(\"Storage directory \" + dataDir\n             + \" does not exist\");\n       case NOT_FORMATTED: // format\n         LOG.info(\"Block pool storage directory \" + dataDir\n             + \" is not formatted for \" + nsInfo.getBlockPoolID()\n             + \". Formatting ...\");\n         format(sd, nsInfo);\n         break;\n       default:  // recovery part is common\n         sd.doRecover(curState);\n       }\n \n       // 2. Do transitions\n       // Each storage directory is treated individually.\n       // During startup some of them can upgrade or roll back\n       // while others could be up-to-date for the regular startup.\n-      if (doTransition(sd, nsInfo, startOpt, conf)) {\n-        return sd;\n-      }\n+      if (!doTransition(sd, nsInfo, startOpt, callables, conf)) {\n \n-      if (getCTime() !\u003d nsInfo.getCTime()) {\n-        throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n-            + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n+        // 3. Check CTime and update successfully loaded storage.\n+        if (getCTime() !\u003d nsInfo.getCTime()) {\n+          throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n+              + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n+        }\n+        setServiceLayoutVersion(getServiceLayoutVersion());\n+        writeProperties(sd);\n       }\n \n-      // 3. Update successfully loaded storage.\n-      setServiceLayoutVersion(getServiceLayoutVersion());\n-      writeProperties(sd);\n-\n       return sd;\n     } catch (IOException ioe) {\n       sd.unlock();\n       throw ioe;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n      File dataDir, StartupOption startOpt,\n      List\u003cCallable\u003cStorageDirectory\u003e\u003e callables, Configuration conf)\n          throws IOException {\n    StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true);\n    try {\n      StorageState curState \u003d sd.analyzeStorage(startOpt, this);\n      // sd is locked but not opened\n      switch (curState) {\n      case NORMAL:\n        break;\n      case NON_EXISTENT:\n        LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n        throw new IOException(\"Storage directory \" + dataDir\n            + \" does not exist\");\n      case NOT_FORMATTED: // format\n        LOG.info(\"Block pool storage directory \" + dataDir\n            + \" is not formatted for \" + nsInfo.getBlockPoolID()\n            + \". Formatting ...\");\n        format(sd, nsInfo);\n        break;\n      default:  // recovery part is common\n        sd.doRecover(curState);\n      }\n\n      // 2. Do transitions\n      // Each storage directory is treated individually.\n      // During startup some of them can upgrade or roll back\n      // while others could be up-to-date for the regular startup.\n      if (!doTransition(sd, nsInfo, startOpt, callables, conf)) {\n\n        // 3. Check CTime and update successfully loaded storage.\n        if (getCTime() !\u003d nsInfo.getCTime()) {\n          throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n              + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n        }\n        setServiceLayoutVersion(getServiceLayoutVersion());\n        writeProperties(sd);\n      }\n\n      return sd;\n    } catch (IOException ioe) {\n      sd.unlock();\n      throw ioe;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
      "commitDate": "27/01/16 6:58 PM",
      "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
          "commitDate": "27/01/16 6:58 PM",
          "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "13/10/15 8:04 AM",
          "commitNameOld": "5b43db47a313decccdcca8f45c5708aab46396df",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 106.5,
          "commitsBetweenForRepo": 736,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,47 @@\n-  private StorageDirectory loadStorageDirectory(DataNode datanode,\n-      NamespaceInfo nsInfo, File dataDir, StartupOption startOpt) throws IOException {\n+  private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n+      File dataDir, StartupOption startOpt, Configuration conf)\n+          throws IOException {\n     StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true);\n     try {\n       StorageState curState \u003d sd.analyzeStorage(startOpt, this);\n       // sd is locked but not opened\n       switch (curState) {\n       case NORMAL:\n         break;\n       case NON_EXISTENT:\n         LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n         throw new IOException(\"Storage directory \" + dataDir\n             + \" does not exist\");\n       case NOT_FORMATTED: // format\n         LOG.info(\"Block pool storage directory \" + dataDir\n-            + \" is not formatted for \" + nsInfo.getBlockPoolID());\n-        LOG.info(\"Formatting ...\");\n+            + \" is not formatted for \" + nsInfo.getBlockPoolID()\n+            + \". Formatting ...\");\n         format(sd, nsInfo);\n         break;\n       default:  // recovery part is common\n         sd.doRecover(curState);\n       }\n \n       // 2. Do transitions\n       // Each storage directory is treated individually.\n       // During startup some of them can upgrade or roll back\n       // while others could be up-to-date for the regular startup.\n-      doTransition(datanode, sd, nsInfo, startOpt);\n+      if (doTransition(sd, nsInfo, startOpt, conf)) {\n+        return sd;\n+      }\n+\n       if (getCTime() !\u003d nsInfo.getCTime()) {\n-        throw new IOException(\n-            \"Data-node and name-node CTimes must be the same.\");\n+        throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n+            + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n       }\n \n       // 3. Update successfully loaded storage.\n       setServiceLayoutVersion(getServiceLayoutVersion());\n       writeProperties(sd);\n \n       return sd;\n     } catch (IOException ioe) {\n       sd.unlock();\n       throw ioe;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n      File dataDir, StartupOption startOpt, Configuration conf)\n          throws IOException {\n    StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true);\n    try {\n      StorageState curState \u003d sd.analyzeStorage(startOpt, this);\n      // sd is locked but not opened\n      switch (curState) {\n      case NORMAL:\n        break;\n      case NON_EXISTENT:\n        LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n        throw new IOException(\"Storage directory \" + dataDir\n            + \" does not exist\");\n      case NOT_FORMATTED: // format\n        LOG.info(\"Block pool storage directory \" + dataDir\n            + \" is not formatted for \" + nsInfo.getBlockPoolID()\n            + \". Formatting ...\");\n        format(sd, nsInfo);\n        break;\n      default:  // recovery part is common\n        sd.doRecover(curState);\n      }\n\n      // 2. Do transitions\n      // Each storage directory is treated individually.\n      // During startup some of them can upgrade or roll back\n      // while others could be up-to-date for the regular startup.\n      if (doTransition(sd, nsInfo, startOpt, conf)) {\n        return sd;\n      }\n\n      if (getCTime() !\u003d nsInfo.getCTime()) {\n        throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n            + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n      }\n\n      // 3. Update successfully loaded storage.\n      setServiceLayoutVersion(getServiceLayoutVersion());\n      writeProperties(sd);\n\n      return sd;\n    } catch (IOException ioe) {\n      sd.unlock();\n      throw ioe;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {
            "oldValue": "[datanode-DataNode, nsInfo-NamespaceInfo, dataDir-File, startOpt-StartupOption]",
            "newValue": "[nsInfo-NamespaceInfo, dataDir-File, startOpt-StartupOption, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
          "commitDate": "27/01/16 6:58 PM",
          "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "13/10/15 8:04 AM",
          "commitNameOld": "5b43db47a313decccdcca8f45c5708aab46396df",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 106.5,
          "commitsBetweenForRepo": 736,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,47 @@\n-  private StorageDirectory loadStorageDirectory(DataNode datanode,\n-      NamespaceInfo nsInfo, File dataDir, StartupOption startOpt) throws IOException {\n+  private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n+      File dataDir, StartupOption startOpt, Configuration conf)\n+          throws IOException {\n     StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true);\n     try {\n       StorageState curState \u003d sd.analyzeStorage(startOpt, this);\n       // sd is locked but not opened\n       switch (curState) {\n       case NORMAL:\n         break;\n       case NON_EXISTENT:\n         LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n         throw new IOException(\"Storage directory \" + dataDir\n             + \" does not exist\");\n       case NOT_FORMATTED: // format\n         LOG.info(\"Block pool storage directory \" + dataDir\n-            + \" is not formatted for \" + nsInfo.getBlockPoolID());\n-        LOG.info(\"Formatting ...\");\n+            + \" is not formatted for \" + nsInfo.getBlockPoolID()\n+            + \". Formatting ...\");\n         format(sd, nsInfo);\n         break;\n       default:  // recovery part is common\n         sd.doRecover(curState);\n       }\n \n       // 2. Do transitions\n       // Each storage directory is treated individually.\n       // During startup some of them can upgrade or roll back\n       // while others could be up-to-date for the regular startup.\n-      doTransition(datanode, sd, nsInfo, startOpt);\n+      if (doTransition(sd, nsInfo, startOpt, conf)) {\n+        return sd;\n+      }\n+\n       if (getCTime() !\u003d nsInfo.getCTime()) {\n-        throw new IOException(\n-            \"Data-node and name-node CTimes must be the same.\");\n+        throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n+            + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n       }\n \n       // 3. Update successfully loaded storage.\n       setServiceLayoutVersion(getServiceLayoutVersion());\n       writeProperties(sd);\n \n       return sd;\n     } catch (IOException ioe) {\n       sd.unlock();\n       throw ioe;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private StorageDirectory loadStorageDirectory(NamespaceInfo nsInfo,\n      File dataDir, StartupOption startOpt, Configuration conf)\n          throws IOException {\n    StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true);\n    try {\n      StorageState curState \u003d sd.analyzeStorage(startOpt, this);\n      // sd is locked but not opened\n      switch (curState) {\n      case NORMAL:\n        break;\n      case NON_EXISTENT:\n        LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n        throw new IOException(\"Storage directory \" + dataDir\n            + \" does not exist\");\n      case NOT_FORMATTED: // format\n        LOG.info(\"Block pool storage directory \" + dataDir\n            + \" is not formatted for \" + nsInfo.getBlockPoolID()\n            + \". Formatting ...\");\n        format(sd, nsInfo);\n        break;\n      default:  // recovery part is common\n        sd.doRecover(curState);\n      }\n\n      // 2. Do transitions\n      // Each storage directory is treated individually.\n      // During startup some of them can upgrade or roll back\n      // while others could be up-to-date for the regular startup.\n      if (doTransition(sd, nsInfo, startOpt, conf)) {\n        return sd;\n      }\n\n      if (getCTime() !\u003d nsInfo.getCTime()) {\n        throw new IOException(\"Datanode CTime (\u003d\" + getCTime()\n            + \") is not equal to namenode CTime (\u003d\" + nsInfo.getCTime() + \")\");\n      }\n\n      // 3. Update successfully loaded storage.\n      setServiceLayoutVersion(getServiceLayoutVersion());\n      writeProperties(sd);\n\n      return sd;\n    } catch (IOException ioe) {\n      sd.unlock();\n      throw ioe;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "a9331fe9b071fdcdae0c6c747d7b6b306142e671": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7035. Make adding a new data directory to the DataNode an atomic operation and improve error handling (Lei Xu via Colin P. McCabe)\n",
      "commitDate": "30/10/14 5:31 PM",
      "commitName": "a9331fe9b071fdcdae0c6c747d7b6b306142e671",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,43 @@\n+  private StorageDirectory loadStorageDirectory(DataNode datanode,\n+      NamespaceInfo nsInfo, File dataDir, StartupOption startOpt) throws IOException {\n+    StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true);\n+    try {\n+      StorageState curState \u003d sd.analyzeStorage(startOpt, this);\n+      // sd is locked but not opened\n+      switch (curState) {\n+      case NORMAL:\n+        break;\n+      case NON_EXISTENT:\n+        LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n+        throw new IOException(\"Storage directory \" + dataDir\n+            + \" does not exist\");\n+      case NOT_FORMATTED: // format\n+        LOG.info(\"Block pool storage directory \" + dataDir\n+            + \" is not formatted for \" + nsInfo.getBlockPoolID());\n+        LOG.info(\"Formatting ...\");\n+        format(sd, nsInfo);\n+        break;\n+      default:  // recovery part is common\n+        sd.doRecover(curState);\n+      }\n+\n+      // 2. Do transitions\n+      // Each storage directory is treated individually.\n+      // During startup some of them can upgrade or roll back\n+      // while others could be up-to-date for the regular startup.\n+      doTransition(datanode, sd, nsInfo, startOpt);\n+      if (getCTime() !\u003d nsInfo.getCTime()) {\n+        throw new IOException(\n+            \"Data-node and name-node CTimes must be the same.\");\n+      }\n+\n+      // 3. Update successfully loaded storage.\n+      setServiceLayoutVersion(getServiceLayoutVersion());\n+      writeProperties(sd);\n+\n+      return sd;\n+    } catch (IOException ioe) {\n+      sd.unlock();\n+      throw ioe;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private StorageDirectory loadStorageDirectory(DataNode datanode,\n      NamespaceInfo nsInfo, File dataDir, StartupOption startOpt) throws IOException {\n    StorageDirectory sd \u003d new StorageDirectory(dataDir, null, true);\n    try {\n      StorageState curState \u003d sd.analyzeStorage(startOpt, this);\n      // sd is locked but not opened\n      switch (curState) {\n      case NORMAL:\n        break;\n      case NON_EXISTENT:\n        LOG.info(\"Block pool storage directory \" + dataDir + \" does not exist\");\n        throw new IOException(\"Storage directory \" + dataDir\n            + \" does not exist\");\n      case NOT_FORMATTED: // format\n        LOG.info(\"Block pool storage directory \" + dataDir\n            + \" is not formatted for \" + nsInfo.getBlockPoolID());\n        LOG.info(\"Formatting ...\");\n        format(sd, nsInfo);\n        break;\n      default:  // recovery part is common\n        sd.doRecover(curState);\n      }\n\n      // 2. Do transitions\n      // Each storage directory is treated individually.\n      // During startup some of them can upgrade or roll back\n      // while others could be up-to-date for the regular startup.\n      doTransition(datanode, sd, nsInfo, startOpt);\n      if (getCTime() !\u003d nsInfo.getCTime()) {\n        throw new IOException(\n            \"Data-node and name-node CTimes must be the same.\");\n      }\n\n      // 3. Update successfully loaded storage.\n      setServiceLayoutVersion(getServiceLayoutVersion());\n      writeProperties(sd);\n\n      return sd;\n    } catch (IOException ioe) {\n      sd.unlock();\n      throw ioe;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java"
    }
  }
}