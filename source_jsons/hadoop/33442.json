{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavaSandboxLinuxContainerRuntime.java",
  "functionName": "generatePolicyFile",
  "functionId": "generatePolicyFile___policyOutStream-OutputStream__localDirs-List__String____groupPolicyPaths-List__String____resources-Map__org.apache.hadoop.fs.Path,List__String______conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java",
  "functionStartLine": 454,
  "functionEndLine": 497,
  "numCommitsSeen": 11,
  "timeTaken": 1974,
  "changeHistory": [
    "18c494a00c8ead768f3a868b450dceea485559df",
    "6f6dfe0202249c129b36edfd145a2224140139cc"
  ],
  "changeHistoryShort": {
    "18c494a00c8ead768f3a868b450dceea485559df": "Ymultichange(Yparameterchange,Ybodychange)",
    "6f6dfe0202249c129b36edfd145a2224140139cc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "18c494a00c8ead768f3a868b450dceea485559df": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6447. Provide container sandbox policies for groups (gphillips via rkanter)\n",
      "commitDate": "16/05/17 6:02 PM",
      "commitName": "18c494a00c8ead768f3a868b450dceea485559df",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6447. Provide container sandbox policies for groups (gphillips via rkanter)\n",
          "commitDate": "16/05/17 6:02 PM",
          "commitName": "18c494a00c8ead768f3a868b450dceea485559df",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "28/04/17 11:01 AM",
          "commitNameOld": "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 18.29,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,44 @@\n     static void generatePolicyFile(OutputStream policyOutStream,\n-        List\u003cString\u003e localDirs, Map\u003corg.apache.hadoop.fs.Path,\n-        List\u003cString\u003e\u003e resources, Configuration conf)\n+        List\u003cString\u003e localDirs, List\u003cString\u003e groupPolicyPaths,\n+        Map\u003corg.apache.hadoop.fs.Path, List\u003cString\u003e\u003e resources,\n+        Configuration conf)\n         throws IOException {\n \n       String policyFilePath \u003d\n           conf.get(YarnConfiguration.YARN_CONTAINER_SANDBOX_POLICY);\n       String filePermissions \u003d\n           conf.get(YarnConfiguration.YARN_CONTAINER_SANDBOX_FILE_PERMISSIONS,\n             YarnConfiguration.DEFAULT_YARN_CONTAINER_SANDBOX_FILE_PERMISSIONS);\n \n       Set\u003cString\u003e cacheDirs \u003d new HashSet\u003c\u003e();\n       for(org.apache.hadoop.fs.Path path : resources.keySet()) {\n         cacheDirs.add(path.getParent().toString());\n       }\n \n-      if(policyFilePath \u003d\u003d null) {\n+      if (groupPolicyPaths !\u003d null) {\n+        for(String policyPath : groupPolicyPaths) {\n+          Files.copy(Paths.get(policyPath), policyOutStream);\n+        }\n+      } else if (policyFilePath \u003d\u003d null) {\n         IOUtils.copyBytes(\n             NMContainerPolicyUtils.class.getResourceAsStream(\"/\" + POLICY_FILE),\n             policyOutStream, conf, false);\n       } else {\n         Files.copy(Paths.get(policyFilePath), policyOutStream);\n-        policyOutStream.flush();\n       }\n \n       Formatter filePermissionFormat \u003d new Formatter(policyOutStream,\n           StandardCharsets.UTF_8.name());\n       filePermissionFormat.format(HADOOP_HOME_PERMISSION);\n       filePermissionFormat.format(\"grant {%n\");\n       for(String localDir : localDirs) {\n         filePermissionFormat.format(\n             FILE_PERMISSION_FORMAT, localDir, filePermissions);\n       }\n       for(String cacheDir : cacheDirs) {\n         filePermissionFormat.format(\n             FILE_PERMISSION_FORMAT, cacheDir, filePermissions);\n       }\n       filePermissionFormat.format(\"};%n\");\n       filePermissionFormat.flush();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    static void generatePolicyFile(OutputStream policyOutStream,\n        List\u003cString\u003e localDirs, List\u003cString\u003e groupPolicyPaths,\n        Map\u003corg.apache.hadoop.fs.Path, List\u003cString\u003e\u003e resources,\n        Configuration conf)\n        throws IOException {\n\n      String policyFilePath \u003d\n          conf.get(YarnConfiguration.YARN_CONTAINER_SANDBOX_POLICY);\n      String filePermissions \u003d\n          conf.get(YarnConfiguration.YARN_CONTAINER_SANDBOX_FILE_PERMISSIONS,\n            YarnConfiguration.DEFAULT_YARN_CONTAINER_SANDBOX_FILE_PERMISSIONS);\n\n      Set\u003cString\u003e cacheDirs \u003d new HashSet\u003c\u003e();\n      for(org.apache.hadoop.fs.Path path : resources.keySet()) {\n        cacheDirs.add(path.getParent().toString());\n      }\n\n      if (groupPolicyPaths !\u003d null) {\n        for(String policyPath : groupPolicyPaths) {\n          Files.copy(Paths.get(policyPath), policyOutStream);\n        }\n      } else if (policyFilePath \u003d\u003d null) {\n        IOUtils.copyBytes(\n            NMContainerPolicyUtils.class.getResourceAsStream(\"/\" + POLICY_FILE),\n            policyOutStream, conf, false);\n      } else {\n        Files.copy(Paths.get(policyFilePath), policyOutStream);\n      }\n\n      Formatter filePermissionFormat \u003d new Formatter(policyOutStream,\n          StandardCharsets.UTF_8.name());\n      filePermissionFormat.format(HADOOP_HOME_PERMISSION);\n      filePermissionFormat.format(\"grant {%n\");\n      for(String localDir : localDirs) {\n        filePermissionFormat.format(\n            FILE_PERMISSION_FORMAT, localDir, filePermissions);\n      }\n      for(String cacheDir : cacheDirs) {\n        filePermissionFormat.format(\n            FILE_PERMISSION_FORMAT, cacheDir, filePermissions);\n      }\n      filePermissionFormat.format(\"};%n\");\n      filePermissionFormat.flush();\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java",
          "extendedDetails": {
            "oldValue": "[policyOutStream-OutputStream, localDirs-List\u003cString\u003e, resources-Map\u003corg.apache.hadoop.fs.Path,List\u003cString\u003e\u003e, conf-Configuration]",
            "newValue": "[policyOutStream-OutputStream, localDirs-List\u003cString\u003e, groupPolicyPaths-List\u003cString\u003e, resources-Map\u003corg.apache.hadoop.fs.Path,List\u003cString\u003e\u003e, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6447. Provide container sandbox policies for groups (gphillips via rkanter)\n",
          "commitDate": "16/05/17 6:02 PM",
          "commitName": "18c494a00c8ead768f3a868b450dceea485559df",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "28/04/17 11:01 AM",
          "commitNameOld": "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 18.29,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,44 @@\n     static void generatePolicyFile(OutputStream policyOutStream,\n-        List\u003cString\u003e localDirs, Map\u003corg.apache.hadoop.fs.Path,\n-        List\u003cString\u003e\u003e resources, Configuration conf)\n+        List\u003cString\u003e localDirs, List\u003cString\u003e groupPolicyPaths,\n+        Map\u003corg.apache.hadoop.fs.Path, List\u003cString\u003e\u003e resources,\n+        Configuration conf)\n         throws IOException {\n \n       String policyFilePath \u003d\n           conf.get(YarnConfiguration.YARN_CONTAINER_SANDBOX_POLICY);\n       String filePermissions \u003d\n           conf.get(YarnConfiguration.YARN_CONTAINER_SANDBOX_FILE_PERMISSIONS,\n             YarnConfiguration.DEFAULT_YARN_CONTAINER_SANDBOX_FILE_PERMISSIONS);\n \n       Set\u003cString\u003e cacheDirs \u003d new HashSet\u003c\u003e();\n       for(org.apache.hadoop.fs.Path path : resources.keySet()) {\n         cacheDirs.add(path.getParent().toString());\n       }\n \n-      if(policyFilePath \u003d\u003d null) {\n+      if (groupPolicyPaths !\u003d null) {\n+        for(String policyPath : groupPolicyPaths) {\n+          Files.copy(Paths.get(policyPath), policyOutStream);\n+        }\n+      } else if (policyFilePath \u003d\u003d null) {\n         IOUtils.copyBytes(\n             NMContainerPolicyUtils.class.getResourceAsStream(\"/\" + POLICY_FILE),\n             policyOutStream, conf, false);\n       } else {\n         Files.copy(Paths.get(policyFilePath), policyOutStream);\n-        policyOutStream.flush();\n       }\n \n       Formatter filePermissionFormat \u003d new Formatter(policyOutStream,\n           StandardCharsets.UTF_8.name());\n       filePermissionFormat.format(HADOOP_HOME_PERMISSION);\n       filePermissionFormat.format(\"grant {%n\");\n       for(String localDir : localDirs) {\n         filePermissionFormat.format(\n             FILE_PERMISSION_FORMAT, localDir, filePermissions);\n       }\n       for(String cacheDir : cacheDirs) {\n         filePermissionFormat.format(\n             FILE_PERMISSION_FORMAT, cacheDir, filePermissions);\n       }\n       filePermissionFormat.format(\"};%n\");\n       filePermissionFormat.flush();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    static void generatePolicyFile(OutputStream policyOutStream,\n        List\u003cString\u003e localDirs, List\u003cString\u003e groupPolicyPaths,\n        Map\u003corg.apache.hadoop.fs.Path, List\u003cString\u003e\u003e resources,\n        Configuration conf)\n        throws IOException {\n\n      String policyFilePath \u003d\n          conf.get(YarnConfiguration.YARN_CONTAINER_SANDBOX_POLICY);\n      String filePermissions \u003d\n          conf.get(YarnConfiguration.YARN_CONTAINER_SANDBOX_FILE_PERMISSIONS,\n            YarnConfiguration.DEFAULT_YARN_CONTAINER_SANDBOX_FILE_PERMISSIONS);\n\n      Set\u003cString\u003e cacheDirs \u003d new HashSet\u003c\u003e();\n      for(org.apache.hadoop.fs.Path path : resources.keySet()) {\n        cacheDirs.add(path.getParent().toString());\n      }\n\n      if (groupPolicyPaths !\u003d null) {\n        for(String policyPath : groupPolicyPaths) {\n          Files.copy(Paths.get(policyPath), policyOutStream);\n        }\n      } else if (policyFilePath \u003d\u003d null) {\n        IOUtils.copyBytes(\n            NMContainerPolicyUtils.class.getResourceAsStream(\"/\" + POLICY_FILE),\n            policyOutStream, conf, false);\n      } else {\n        Files.copy(Paths.get(policyFilePath), policyOutStream);\n      }\n\n      Formatter filePermissionFormat \u003d new Formatter(policyOutStream,\n          StandardCharsets.UTF_8.name());\n      filePermissionFormat.format(HADOOP_HOME_PERMISSION);\n      filePermissionFormat.format(\"grant {%n\");\n      for(String localDir : localDirs) {\n        filePermissionFormat.format(\n            FILE_PERMISSION_FORMAT, localDir, filePermissions);\n      }\n      for(String cacheDir : cacheDirs) {\n        filePermissionFormat.format(\n            FILE_PERMISSION_FORMAT, cacheDir, filePermissions);\n      }\n      filePermissionFormat.format(\"};%n\");\n      filePermissionFormat.flush();\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java",
          "extendedDetails": {}
        }
      ]
    },
    "6f6dfe0202249c129b36edfd145a2224140139cc": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5280. Allow YARN containers to run with Java Security Manager (gphillips via rkanter)\n",
      "commitDate": "01/03/17 2:53 PM",
      "commitName": "6f6dfe0202249c129b36edfd145a2224140139cc",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,40 @@\n+    static void generatePolicyFile(OutputStream policyOutStream,\n+        List\u003cString\u003e localDirs, Map\u003corg.apache.hadoop.fs.Path,\n+        List\u003cString\u003e\u003e resources, Configuration conf)\n+        throws IOException {\n+\n+      String policyFilePath \u003d\n+          conf.get(YarnConfiguration.YARN_CONTAINER_SANDBOX_POLICY);\n+      String filePermissions \u003d\n+          conf.get(YarnConfiguration.YARN_CONTAINER_SANDBOX_FILE_PERMISSIONS,\n+            YarnConfiguration.DEFAULT_YARN_CONTAINER_SANDBOX_FILE_PERMISSIONS);\n+\n+      Set\u003cString\u003e cacheDirs \u003d new HashSet\u003c\u003e();\n+      for(org.apache.hadoop.fs.Path path : resources.keySet()) {\n+        cacheDirs.add(path.getParent().toString());\n+      }\n+\n+      if(policyFilePath \u003d\u003d null) {\n+        IOUtils.copyBytes(\n+            NMContainerPolicyUtils.class.getResourceAsStream(\"/\" + POLICY_FILE),\n+            policyOutStream, conf, false);\n+      } else {\n+        Files.copy(Paths.get(policyFilePath), policyOutStream);\n+        policyOutStream.flush();\n+      }\n+\n+      Formatter filePermissionFormat \u003d new Formatter(policyOutStream,\n+          StandardCharsets.UTF_8.name());\n+      filePermissionFormat.format(HADOOP_HOME_PERMISSION);\n+      filePermissionFormat.format(\"grant {%n\");\n+      for(String localDir : localDirs) {\n+        filePermissionFormat.format(\n+            FILE_PERMISSION_FORMAT, localDir, filePermissions);\n+      }\n+      for(String cacheDir : cacheDirs) {\n+        filePermissionFormat.format(\n+            FILE_PERMISSION_FORMAT, cacheDir, filePermissions);\n+      }\n+      filePermissionFormat.format(\"};%n\");\n+      filePermissionFormat.flush();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    static void generatePolicyFile(OutputStream policyOutStream,\n        List\u003cString\u003e localDirs, Map\u003corg.apache.hadoop.fs.Path,\n        List\u003cString\u003e\u003e resources, Configuration conf)\n        throws IOException {\n\n      String policyFilePath \u003d\n          conf.get(YarnConfiguration.YARN_CONTAINER_SANDBOX_POLICY);\n      String filePermissions \u003d\n          conf.get(YarnConfiguration.YARN_CONTAINER_SANDBOX_FILE_PERMISSIONS,\n            YarnConfiguration.DEFAULT_YARN_CONTAINER_SANDBOX_FILE_PERMISSIONS);\n\n      Set\u003cString\u003e cacheDirs \u003d new HashSet\u003c\u003e();\n      for(org.apache.hadoop.fs.Path path : resources.keySet()) {\n        cacheDirs.add(path.getParent().toString());\n      }\n\n      if(policyFilePath \u003d\u003d null) {\n        IOUtils.copyBytes(\n            NMContainerPolicyUtils.class.getResourceAsStream(\"/\" + POLICY_FILE),\n            policyOutStream, conf, false);\n      } else {\n        Files.copy(Paths.get(policyFilePath), policyOutStream);\n        policyOutStream.flush();\n      }\n\n      Formatter filePermissionFormat \u003d new Formatter(policyOutStream,\n          StandardCharsets.UTF_8.name());\n      filePermissionFormat.format(HADOOP_HOME_PERMISSION);\n      filePermissionFormat.format(\"grant {%n\");\n      for(String localDir : localDirs) {\n        filePermissionFormat.format(\n            FILE_PERMISSION_FORMAT, localDir, filePermissions);\n      }\n      for(String cacheDir : cacheDirs) {\n        filePermissionFormat.format(\n            FILE_PERMISSION_FORMAT, cacheDir, filePermissions);\n      }\n      filePermissionFormat.format(\"};%n\");\n      filePermissionFormat.flush();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java"
    }
  }
}