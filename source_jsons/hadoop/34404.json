{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceLocalizationService.java",
  "functionName": "handleInitContainerResources",
  "functionId": "handleInitContainerResources___rsrcReqs-ContainerLocalizationRequestEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
  "functionStartLine": 490,
  "functionEndLine": 520,
  "numCommitsSeen": 106,
  "timeTaken": 4133,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "40b5a59b726733df456330a26f03d5174cc0bc1c",
    "e6fcfe28e304062c7d09231db757acb2953703ce",
    "2daa478a6420585dc13cea2111580ed5fe347bc1",
    "53790d33000cb5804779a56ac3891d0e0e5a904d",
    "2692675fc3b5046d2ec88542c30203c87e135b70",
    "27e8c86999bc6a972a99216060b11ef35b7de858",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "11b9dd4e844c762f8c53e5fafa25f29eece1bc87"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "40b5a59b726733df456330a26f03d5174cc0bc1c": "Ybodychange",
    "e6fcfe28e304062c7d09231db757acb2953703ce": "Ybodychange",
    "2daa478a6420585dc13cea2111580ed5fe347bc1": "Ybodychange",
    "53790d33000cb5804779a56ac3891d0e0e5a904d": "Ybodychange",
    "2692675fc3b5046d2ec88542c30203c87e135b70": "Ybodychange",
    "27e8c86999bc6a972a99216060b11ef35b7de858": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "11b9dd4e844c762f8c53e5fafa25f29eece1bc87": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "14/11/18 12:22 PM",
      "commitNameOld": "21ec4bdaef4b68adbbf4f33a6f74494c074f803c",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 121.12,
      "commitsBetweenForRepo": 889,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,31 @@\n   private void handleInitContainerResources(\n       ContainerLocalizationRequestEvent rsrcReqs) {\n     Container c \u003d rsrcReqs.getContainer();\n     EnumSet\u003cContainerState\u003e set \u003d\n         EnumSet.of(ContainerState.LOCALIZING,\n             ContainerState.RUNNING, ContainerState.REINITIALIZING);\n     if (!set.contains(c.getContainerState())) {\n       LOG.warn(c.getContainerId() + \" is at \" + c.getContainerState()\n           + \" state, do not localize resources.\");\n       return;\n     }\n     // create a loading cache for the file statuses\n     LoadingCache\u003cPath,Future\u003cFileStatus\u003e\u003e statCache \u003d\n         CacheBuilder.newBuilder().build(FSDownload.createStatusCacheLoader(getConfig()));\n     LocalizerContext ctxt \u003d new LocalizerContext(\n         c.getUser(), c.getContainerId(), c.getCredentials(), statCache);\n     Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n       rsrcReqs.getRequestedResources();\n     for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n          rsrcs.entrySet()) {\n       LocalResourcesTracker tracker \u003d\n           getLocalResourcesTracker(e.getKey(), c.getUser(),\n               c.getContainerId().getApplicationAttemptId()\n                   .getApplicationId());\n       for (LocalResourceRequest req : e.getValue()) {\n         tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Localizing \" + req.getPath() +\n-              \" for container \" + c.getContainerId());\n-        }\n+        LOG.debug(\"Localizing {} for container {}\",\n+            req.getPath(), c.getContainerId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleInitContainerResources(\n      ContainerLocalizationRequestEvent rsrcReqs) {\n    Container c \u003d rsrcReqs.getContainer();\n    EnumSet\u003cContainerState\u003e set \u003d\n        EnumSet.of(ContainerState.LOCALIZING,\n            ContainerState.RUNNING, ContainerState.REINITIALIZING);\n    if (!set.contains(c.getContainerState())) {\n      LOG.warn(c.getContainerId() + \" is at \" + c.getContainerState()\n          + \" state, do not localize resources.\");\n      return;\n    }\n    // create a loading cache for the file statuses\n    LoadingCache\u003cPath,Future\u003cFileStatus\u003e\u003e statCache \u003d\n        CacheBuilder.newBuilder().build(FSDownload.createStatusCacheLoader(getConfig()));\n    LocalizerContext ctxt \u003d new LocalizerContext(\n        c.getUser(), c.getContainerId(), c.getCredentials(), statCache);\n    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n      rsrcReqs.getRequestedResources();\n    for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n         rsrcs.entrySet()) {\n      LocalResourcesTracker tracker \u003d\n          getLocalResourcesTracker(e.getKey(), c.getUser(),\n              c.getContainerId().getApplicationAttemptId()\n                  .getApplicationId());\n      for (LocalResourceRequest req : e.getValue()) {\n        tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n        LOG.debug(\"Localizing {} for container {}\",\n            req.getPath(), c.getContainerId());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "40b5a59b726733df456330a26f03d5174cc0bc1c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5620. Core changes in NodeManager to support re-initialization of Containers with new launchContext. (asuresh)\n",
      "commitDate": "15/09/16 7:15 AM",
      "commitName": "40b5a59b726733df456330a26f03d5174cc0bc1c",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "06/09/16 7:31 AM",
      "commitNameOld": "e6fcfe28e304062c7d09231db757acb2953703ce",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 8.99,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   private void handleInitContainerResources(\n       ContainerLocalizationRequestEvent rsrcReqs) {\n     Container c \u003d rsrcReqs.getContainer();\n     EnumSet\u003cContainerState\u003e set \u003d\n-        EnumSet.of(ContainerState.LOCALIZING, ContainerState.RUNNING);\n+        EnumSet.of(ContainerState.LOCALIZING,\n+            ContainerState.RUNNING, ContainerState.REINITIALIZING);\n     if (!set.contains(c.getContainerState())) {\n       LOG.warn(c.getContainerId() + \" is at \" + c.getContainerState()\n           + \" state, do not localize resources.\");\n       return;\n     }\n     // create a loading cache for the file statuses\n     LoadingCache\u003cPath,Future\u003cFileStatus\u003e\u003e statCache \u003d\n         CacheBuilder.newBuilder().build(FSDownload.createStatusCacheLoader(getConfig()));\n     LocalizerContext ctxt \u003d new LocalizerContext(\n         c.getUser(), c.getContainerId(), c.getCredentials(), statCache);\n     Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n       rsrcReqs.getRequestedResources();\n     for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n          rsrcs.entrySet()) {\n       LocalResourcesTracker tracker \u003d\n           getLocalResourcesTracker(e.getKey(), c.getUser(),\n               c.getContainerId().getApplicationAttemptId()\n                   .getApplicationId());\n       for (LocalResourceRequest req : e.getValue()) {\n         tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Localizing \" + req.getPath() +\n               \" for container \" + c.getContainerId());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleInitContainerResources(\n      ContainerLocalizationRequestEvent rsrcReqs) {\n    Container c \u003d rsrcReqs.getContainer();\n    EnumSet\u003cContainerState\u003e set \u003d\n        EnumSet.of(ContainerState.LOCALIZING,\n            ContainerState.RUNNING, ContainerState.REINITIALIZING);\n    if (!set.contains(c.getContainerState())) {\n      LOG.warn(c.getContainerId() + \" is at \" + c.getContainerState()\n          + \" state, do not localize resources.\");\n      return;\n    }\n    // create a loading cache for the file statuses\n    LoadingCache\u003cPath,Future\u003cFileStatus\u003e\u003e statCache \u003d\n        CacheBuilder.newBuilder().build(FSDownload.createStatusCacheLoader(getConfig()));\n    LocalizerContext ctxt \u003d new LocalizerContext(\n        c.getUser(), c.getContainerId(), c.getCredentials(), statCache);\n    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n      rsrcReqs.getRequestedResources();\n    for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n         rsrcs.entrySet()) {\n      LocalResourcesTracker tracker \u003d\n          getLocalResourcesTracker(e.getKey(), c.getUser(),\n              c.getContainerId().getApplicationAttemptId()\n                  .getApplicationId());\n      for (LocalResourceRequest req : e.getValue()) {\n        tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Localizing \" + req.getPath() +\n              \" for container \" + c.getContainerId());\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "e6fcfe28e304062c7d09231db757acb2953703ce": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5576. Allow resource localization while container is running. Contributed by Jian He.\n",
      "commitDate": "06/09/16 7:31 AM",
      "commitName": "e6fcfe28e304062c7d09231db757acb2953703ce",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "10/08/16 7:23 PM",
      "commitNameOld": "aea3e65749333b97d8c45280077f03d4ebddb5a8",
      "commitAuthorOld": "Ray Chiang",
      "daysBetweenCommits": 26.51,
      "commitsBetweenForRepo": 154,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,32 @@\n   private void handleInitContainerResources(\n       ContainerLocalizationRequestEvent rsrcReqs) {\n     Container c \u003d rsrcReqs.getContainer();\n+    EnumSet\u003cContainerState\u003e set \u003d\n+        EnumSet.of(ContainerState.LOCALIZING, ContainerState.RUNNING);\n+    if (!set.contains(c.getContainerState())) {\n+      LOG.warn(c.getContainerId() + \" is at \" + c.getContainerState()\n+          + \" state, do not localize resources.\");\n+      return;\n+    }\n     // create a loading cache for the file statuses\n     LoadingCache\u003cPath,Future\u003cFileStatus\u003e\u003e statCache \u003d\n         CacheBuilder.newBuilder().build(FSDownload.createStatusCacheLoader(getConfig()));\n     LocalizerContext ctxt \u003d new LocalizerContext(\n         c.getUser(), c.getContainerId(), c.getCredentials(), statCache);\n     Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n       rsrcReqs.getRequestedResources();\n     for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n          rsrcs.entrySet()) {\n       LocalResourcesTracker tracker \u003d\n           getLocalResourcesTracker(e.getKey(), c.getUser(),\n               c.getContainerId().getApplicationAttemptId()\n                   .getApplicationId());\n       for (LocalResourceRequest req : e.getValue()) {\n         tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Localizing \" + req.getPath() +\n               \" for container \" + c.getContainerId());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleInitContainerResources(\n      ContainerLocalizationRequestEvent rsrcReqs) {\n    Container c \u003d rsrcReqs.getContainer();\n    EnumSet\u003cContainerState\u003e set \u003d\n        EnumSet.of(ContainerState.LOCALIZING, ContainerState.RUNNING);\n    if (!set.contains(c.getContainerState())) {\n      LOG.warn(c.getContainerId() + \" is at \" + c.getContainerState()\n          + \" state, do not localize resources.\");\n      return;\n    }\n    // create a loading cache for the file statuses\n    LoadingCache\u003cPath,Future\u003cFileStatus\u003e\u003e statCache \u003d\n        CacheBuilder.newBuilder().build(FSDownload.createStatusCacheLoader(getConfig()));\n    LocalizerContext ctxt \u003d new LocalizerContext(\n        c.getUser(), c.getContainerId(), c.getCredentials(), statCache);\n    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n      rsrcReqs.getRequestedResources();\n    for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n         rsrcs.entrySet()) {\n      LocalResourcesTracker tracker \u003d\n          getLocalResourcesTracker(e.getKey(), c.getUser(),\n              c.getContainerId().getApplicationAttemptId()\n                  .getApplicationId());\n      for (LocalResourceRequest req : e.getValue()) {\n        tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Localizing \" + req.getPath() +\n              \" for container \" + c.getContainerId());\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "2daa478a6420585dc13cea2111580ed5fe347bc1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3428. Debug log resources to be localized for a container. (kasha)\n",
      "commitDate": "31/03/15 5:34 PM",
      "commitName": "2daa478a6420585dc13cea2111580ed5fe347bc1",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "11/02/15 8:33 AM",
      "commitNameOld": "b379972ab39551d4b57436a54c0098a63742c7e1",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 48.33,
      "commitsBetweenForRepo": 455,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,25 @@\n   private void handleInitContainerResources(\n       ContainerLocalizationRequestEvent rsrcReqs) {\n     Container c \u003d rsrcReqs.getContainer();\n     // create a loading cache for the file statuses\n     LoadingCache\u003cPath,Future\u003cFileStatus\u003e\u003e statCache \u003d\n         CacheBuilder.newBuilder().build(FSDownload.createStatusCacheLoader(getConfig()));\n     LocalizerContext ctxt \u003d new LocalizerContext(\n         c.getUser(), c.getContainerId(), c.getCredentials(), statCache);\n     Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n       rsrcReqs.getRequestedResources();\n     for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n          rsrcs.entrySet()) {\n       LocalResourcesTracker tracker \u003d\n           getLocalResourcesTracker(e.getKey(), c.getUser(),\n               c.getContainerId().getApplicationAttemptId()\n                   .getApplicationId());\n       for (LocalResourceRequest req : e.getValue()) {\n         tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Localizing \" + req.getPath() +\n+              \" for container \" + c.getContainerId());\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleInitContainerResources(\n      ContainerLocalizationRequestEvent rsrcReqs) {\n    Container c \u003d rsrcReqs.getContainer();\n    // create a loading cache for the file statuses\n    LoadingCache\u003cPath,Future\u003cFileStatus\u003e\u003e statCache \u003d\n        CacheBuilder.newBuilder().build(FSDownload.createStatusCacheLoader(getConfig()));\n    LocalizerContext ctxt \u003d new LocalizerContext(\n        c.getUser(), c.getContainerId(), c.getCredentials(), statCache);\n    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n      rsrcReqs.getRequestedResources();\n    for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n         rsrcs.entrySet()) {\n      LocalResourcesTracker tracker \u003d\n          getLocalResourcesTracker(e.getKey(), c.getUser(),\n              c.getContainerId().getApplicationAttemptId()\n                  .getApplicationId());\n      for (LocalResourceRequest req : e.getValue()) {\n        tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Localizing \" + req.getPath() +\n              \" for container \" + c.getContainerId());\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "53790d33000cb5804779a56ac3891d0e0e5a904d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1771. Reduce the number of NameNode operations during localization of\npublic resources using a cache. Contributed by Sangjin Lee\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577391 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/03/14 5:30 PM",
      "commitName": "53790d33000cb5804779a56ac3891d0e0e5a904d",
      "commitAuthor": "Christopher Douglas",
      "commitDateOld": "11/03/14 4:33 PM",
      "commitNameOld": "8aab8533a1b07c632a1b4da596dfa65302afcb18",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.04,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,21 @@\n   private void handleInitContainerResources(\n       ContainerLocalizationRequestEvent rsrcReqs) {\n     Container c \u003d rsrcReqs.getContainer();\n+    // create a loading cache for the file statuses\n+    LoadingCache\u003cPath,Future\u003cFileStatus\u003e\u003e statCache \u003d\n+        CacheBuilder.newBuilder().build(FSDownload.createStatusCacheLoader(getConfig()));\n     LocalizerContext ctxt \u003d new LocalizerContext(\n-        c.getUser(), c.getContainerId(), c.getCredentials());\n+        c.getUser(), c.getContainerId(), c.getCredentials(), statCache);\n     Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n       rsrcReqs.getRequestedResources();\n     for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n          rsrcs.entrySet()) {\n       LocalResourcesTracker tracker \u003d\n           getLocalResourcesTracker(e.getKey(), c.getUser(),\n               c.getContainerId().getApplicationAttemptId()\n                   .getApplicationId());\n       for (LocalResourceRequest req : e.getValue()) {\n         tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleInitContainerResources(\n      ContainerLocalizationRequestEvent rsrcReqs) {\n    Container c \u003d rsrcReqs.getContainer();\n    // create a loading cache for the file statuses\n    LoadingCache\u003cPath,Future\u003cFileStatus\u003e\u003e statCache \u003d\n        CacheBuilder.newBuilder().build(FSDownload.createStatusCacheLoader(getConfig()));\n    LocalizerContext ctxt \u003d new LocalizerContext(\n        c.getUser(), c.getContainerId(), c.getCredentials(), statCache);\n    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n      rsrcReqs.getRequestedResources();\n    for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n         rsrcs.entrySet()) {\n      LocalResourcesTracker tracker \u003d\n          getLocalResourcesTracker(e.getKey(), c.getUser(),\n              c.getContainerId().getApplicationAttemptId()\n                  .getApplicationId());\n      for (LocalResourceRequest req : e.getValue()) {\n        tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "2692675fc3b5046d2ec88542c30203c87e135b70": {
      "type": "Ybodychange",
      "commitMessage": "YARN-684. ContainerManager.startContainer should use ContainerTokenIdentifier instead of the entire Container. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488085 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/13 9:13 PM",
      "commitName": "2692675fc3b5046d2ec88542c30203c87e135b70",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "10/05/13 2:49 PM",
      "commitNameOld": "2638bc67a48f923404d57ed2026c4997df6bd06e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 20.27,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void handleInitContainerResources(\n       ContainerLocalizationRequestEvent rsrcReqs) {\n     Container c \u003d rsrcReqs.getContainer();\n     LocalizerContext ctxt \u003d new LocalizerContext(\n-        c.getUser(), c.getContainer().getId(), c.getCredentials());\n+        c.getUser(), c.getContainerId(), c.getCredentials());\n     Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n       rsrcReqs.getRequestedResources();\n     for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n          rsrcs.entrySet()) {\n       LocalResourcesTracker tracker \u003d\n           getLocalResourcesTracker(e.getKey(), c.getUser(),\n-              c.getContainer().getId().getApplicationAttemptId()\n+              c.getContainerId().getApplicationAttemptId()\n                   .getApplicationId());\n       for (LocalResourceRequest req : e.getValue()) {\n         tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleInitContainerResources(\n      ContainerLocalizationRequestEvent rsrcReqs) {\n    Container c \u003d rsrcReqs.getContainer();\n    LocalizerContext ctxt \u003d new LocalizerContext(\n        c.getUser(), c.getContainerId(), c.getCredentials());\n    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n      rsrcReqs.getRequestedResources();\n    for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n         rsrcs.entrySet()) {\n      LocalResourcesTracker tracker \u003d\n          getLocalResourcesTracker(e.getKey(), c.getUser(),\n              c.getContainerId().getApplicationAttemptId()\n                  .getApplicationId());\n      for (LocalResourceRequest req : e.getValue()) {\n        tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "27e8c86999bc6a972a99216060b11ef35b7de858": {
      "type": "Ybodychange",
      "commitMessage": "YARN-561. Modified NodeManager to set key information into the environment of every container that it launches. Contributed by Xuan Gong.\nMAPREDUCE-5175. Updated MR App to not set envs that will be set by NMs anyways after YARN-561. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1471156 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/13 2:39 PM",
      "commitName": "27e8c86999bc6a972a99216060b11ef35b7de858",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "22/04/13 9:37 PM",
      "commitNameOld": "ffd7dbb34a661e516cef991975cefb31e9d2f2db",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,18 @@\n   private void handleInitContainerResources(\n       ContainerLocalizationRequestEvent rsrcReqs) {\n     Container c \u003d rsrcReqs.getContainer();\n     LocalizerContext ctxt \u003d new LocalizerContext(\n-        c.getUser(), c.getContainerID(), c.getCredentials());\n+        c.getUser(), c.getContainer().getId(), c.getCredentials());\n     Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n       rsrcReqs.getRequestedResources();\n     for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n          rsrcs.entrySet()) {\n-      LocalResourcesTracker tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n-          c.getContainerID().getApplicationAttemptId().getApplicationId());\n+      LocalResourcesTracker tracker \u003d\n+          getLocalResourcesTracker(e.getKey(), c.getUser(),\n+              c.getContainer().getId().getApplicationAttemptId()\n+                  .getApplicationId());\n       for (LocalResourceRequest req : e.getValue()) {\n         tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleInitContainerResources(\n      ContainerLocalizationRequestEvent rsrcReqs) {\n    Container c \u003d rsrcReqs.getContainer();\n    LocalizerContext ctxt \u003d new LocalizerContext(\n        c.getUser(), c.getContainer().getId(), c.getCredentials());\n    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n      rsrcReqs.getRequestedResources();\n    for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n         rsrcs.entrySet()) {\n      LocalResourcesTracker tracker \u003d\n          getLocalResourcesTracker(e.getKey(), c.getUser(),\n              c.getContainer().getId().getApplicationAttemptId()\n                  .getApplicationId());\n      for (LocalResourceRequest req : e.getValue()) {\n        tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void handleInitContainerResources(\n      ContainerLocalizationRequestEvent rsrcReqs) {\n    Container c \u003d rsrcReqs.getContainer();\n    LocalizerContext ctxt \u003d new LocalizerContext(\n        c.getUser(), c.getContainerID(), c.getCredentials());\n    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n      rsrcReqs.getRequestedResources();\n    for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n         rsrcs.entrySet()) {\n      LocalResourcesTracker tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n          c.getContainerID().getApplicationAttemptId().getApplicationId());\n      for (LocalResourceRequest req : e.getValue()) {\n        tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java"
      }
    },
    "11b9dd4e844c762f8c53e5fafa25f29eece1bc87": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3161. Improved some javadocs and fixed some typos in YARN. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1181622 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/10/11 9:45 PM",
      "commitName": "11b9dd4e844c762f8c53e5fafa25f29eece1bc87",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,16 @@\n+  private void handleInitContainerResources(\n+      ContainerLocalizationRequestEvent rsrcReqs) {\n+    Container c \u003d rsrcReqs.getContainer();\n+    LocalizerContext ctxt \u003d new LocalizerContext(\n+        c.getUser(), c.getContainerID(), c.getCredentials());\n+    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n+      rsrcReqs.getRequestedResources();\n+    for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n+         rsrcs.entrySet()) {\n+      LocalResourcesTracker tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n+          c.getContainerID().getApplicationAttemptId().getApplicationId());\n+      for (LocalResourceRequest req : e.getValue()) {\n+        tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleInitContainerResources(\n      ContainerLocalizationRequestEvent rsrcReqs) {\n    Container c \u003d rsrcReqs.getContainer();\n    LocalizerContext ctxt \u003d new LocalizerContext(\n        c.getUser(), c.getContainerID(), c.getCredentials());\n    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e rsrcs \u003d\n      rsrcReqs.getRequestedResources();\n    for (Map.Entry\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e e :\n         rsrcs.entrySet()) {\n      LocalResourcesTracker tracker \u003d getLocalResourcesTracker(e.getKey(), c.getUser(), \n          c.getContainerID().getApplicationAttemptId().getApplicationId());\n      for (LocalResourceRequest req : e.getValue()) {\n        tracker.handle(new ResourceRequestEvent(req, e.getKey(), ctxt));\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java"
    }
  }
}