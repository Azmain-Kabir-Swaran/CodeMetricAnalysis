{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DelegationTokenRenewer.java",
  "functionName": "requestNewHdfsDelegationTokenAsProxyUser",
  "functionId": "requestNewHdfsDelegationTokenAsProxyUser___referringAppIds-Collection__ApplicationId____user-String__shouldCancelAtEnd-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
  "functionStartLine": 705,
  "functionEndLine": 753,
  "numCommitsSeen": 83,
  "timeTaken": 4346,
  "changeHistory": [
    "6a923464afa6b635f505be5d5b2414d47d570f99",
    "f10ebc67f57a4a2e3cc916c41154ab9b6a4635c9",
    "9c5911294e0ba71aefe4763731b0e780cde9d0ca",
    "0402bada1989258ecbfdc437cb339322a1f55a97",
    "a16d022ca4313a41425c8e97841c841a2d6f2f54"
  ],
  "changeHistoryShort": {
    "6a923464afa6b635f505be5d5b2414d47d570f99": "Ybodychange",
    "f10ebc67f57a4a2e3cc916c41154ab9b6a4635c9": "Yrename",
    "9c5911294e0ba71aefe4763731b0e780cde9d0ca": "Ymultichange(Yparameterchange,Ybodychange)",
    "0402bada1989258ecbfdc437cb339322a1f55a97": "Ybodychange",
    "a16d022ca4313a41425c8e97841c841a2d6f2f54": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6a923464afa6b635f505be5d5b2414d47d570f99": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6523. Optimize system credentials sent in node heartbeat responses. Contributed by Manikandan R\n",
      "commitDate": "08/01/19 2:54 PM",
      "commitName": "6a923464afa6b635f505be5d5b2414d47d570f99",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "01/06/18 2:49 PM",
      "commitNameOld": "931f78718f3a09775bfa1f9a952c069c416d0914",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 221.04,
      "commitsBetweenForRepo": 1701,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,49 @@\n   private void requestNewHdfsDelegationTokenAsProxyUser(\n       Collection\u003cApplicationId\u003e referringAppIds,\n       String user, boolean shouldCancelAtEnd) throws IOException,\n       InterruptedException {\n+    boolean incrTokenSequenceNo \u003d false;\n     if (!hasProxyUserPrivileges) {\n       LOG.info(\"RM proxy-user privilege is not enabled. Skip requesting hdfs tokens.\");\n       return;\n     }\n     // Get new hdfs tokens for this user\n     Credentials credentials \u003d new Credentials();\n     Token\u003c?\u003e[] newTokens \u003d obtainSystemTokensForUser(user, credentials);\n \n     // Add new tokens to the toRenew list.\n     LOG.info(\"Received new tokens for \" + referringAppIds + \". Received \"\n         + newTokens.length + \" tokens.\");\n     if (newTokens.length \u003e 0) {\n       for (Token\u003c?\u003e token : newTokens) {\n         if (token.isManaged()) {\n           DelegationTokenToRenew tokenToRenew \u003d\n               new DelegationTokenToRenew(referringAppIds, token, getConfig(),\n                 Time.now(), shouldCancelAtEnd, user);\n           // renew the token to get the next expiration date.\n           renewToken(tokenToRenew);\n           setTimerForTokenRenewal(tokenToRenew);\n           for (ApplicationId applicationId : referringAppIds) {\n             appTokens.get(applicationId).add(tokenToRenew);\n           }\n           LOG.info(\"Received new token \" + token);\n+          incrTokenSequenceNo \u003d true;\n         }\n       }\n     }\n+\n+    if(incrTokenSequenceNo) {\n+      this.rmContext.incrTokenSequenceNo();\n+    }\n+\n     DataOutputBuffer dob \u003d new DataOutputBuffer();\n     credentials.writeTokenStorageToStream(dob);\n     ByteBuffer byteBuffer \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n     for (ApplicationId applicationId : referringAppIds) {\n-      rmContext.getSystemCredentialsForApps().put(applicationId, byteBuffer);\n+      SystemCredentialsForAppsProto systemCredentialsForAppsProto \u003d\n+          YarnServerBuilderUtils.newSystemCredentialsForAppsProto(applicationId,\n+              byteBuffer);\n+      rmContext.getSystemCredentialsForApps().put(applicationId,\n+          systemCredentialsForAppsProto);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void requestNewHdfsDelegationTokenAsProxyUser(\n      Collection\u003cApplicationId\u003e referringAppIds,\n      String user, boolean shouldCancelAtEnd) throws IOException,\n      InterruptedException {\n    boolean incrTokenSequenceNo \u003d false;\n    if (!hasProxyUserPrivileges) {\n      LOG.info(\"RM proxy-user privilege is not enabled. Skip requesting hdfs tokens.\");\n      return;\n    }\n    // Get new hdfs tokens for this user\n    Credentials credentials \u003d new Credentials();\n    Token\u003c?\u003e[] newTokens \u003d obtainSystemTokensForUser(user, credentials);\n\n    // Add new tokens to the toRenew list.\n    LOG.info(\"Received new tokens for \" + referringAppIds + \". Received \"\n        + newTokens.length + \" tokens.\");\n    if (newTokens.length \u003e 0) {\n      for (Token\u003c?\u003e token : newTokens) {\n        if (token.isManaged()) {\n          DelegationTokenToRenew tokenToRenew \u003d\n              new DelegationTokenToRenew(referringAppIds, token, getConfig(),\n                Time.now(), shouldCancelAtEnd, user);\n          // renew the token to get the next expiration date.\n          renewToken(tokenToRenew);\n          setTimerForTokenRenewal(tokenToRenew);\n          for (ApplicationId applicationId : referringAppIds) {\n            appTokens.get(applicationId).add(tokenToRenew);\n          }\n          LOG.info(\"Received new token \" + token);\n          incrTokenSequenceNo \u003d true;\n        }\n      }\n    }\n\n    if(incrTokenSequenceNo) {\n      this.rmContext.incrTokenSequenceNo();\n    }\n\n    DataOutputBuffer dob \u003d new DataOutputBuffer();\n    credentials.writeTokenStorageToStream(dob);\n    ByteBuffer byteBuffer \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n    for (ApplicationId applicationId : referringAppIds) {\n      SystemCredentialsForAppsProto systemCredentialsForAppsProto \u003d\n          YarnServerBuilderUtils.newSystemCredentialsForAppsProto(applicationId,\n              byteBuffer);\n      rmContext.getSystemCredentialsForApps().put(applicationId,\n          systemCredentialsForAppsProto);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
      "extendedDetails": {}
    },
    "f10ebc67f57a4a2e3cc916c41154ab9b6a4635c9": {
      "type": "Yrename",
      "commitMessage": "YARN-5098. Fixed ResourceManager\u0027s DelegationTokenRenewer to replace expiring system-tokens if RM stops and only restarts after a long time. Contributed by Jian He.\n",
      "commitDate": "03/06/16 1:00 PM",
      "commitName": "f10ebc67f57a4a2e3cc916c41154ab9b6a4635c9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/05/16 9:50 PM",
      "commitNameOld": "47c41e7ac7e6b905a58550f8899f629c1cf8b138",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 27.63,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n-  private void requestNewHdfsDelegationToken(\n+  private void requestNewHdfsDelegationTokenAsProxyUser(\n       Collection\u003cApplicationId\u003e referringAppIds,\n       String user, boolean shouldCancelAtEnd) throws IOException,\n       InterruptedException {\n     if (!hasProxyUserPrivileges) {\n       LOG.info(\"RM proxy-user privilege is not enabled. Skip requesting hdfs tokens.\");\n       return;\n     }\n     // Get new hdfs tokens for this user\n     Credentials credentials \u003d new Credentials();\n     Token\u003c?\u003e[] newTokens \u003d obtainSystemTokensForUser(user, credentials);\n \n     // Add new tokens to the toRenew list.\n     LOG.info(\"Received new tokens for \" + referringAppIds + \". Received \"\n         + newTokens.length + \" tokens.\");\n     if (newTokens.length \u003e 0) {\n       for (Token\u003c?\u003e token : newTokens) {\n         if (token.isManaged()) {\n           DelegationTokenToRenew tokenToRenew \u003d\n               new DelegationTokenToRenew(referringAppIds, token, getConfig(),\n                 Time.now(), shouldCancelAtEnd, user);\n           // renew the token to get the next expiration date.\n           renewToken(tokenToRenew);\n           setTimerForTokenRenewal(tokenToRenew);\n           for (ApplicationId applicationId : referringAppIds) {\n             appTokens.get(applicationId).add(tokenToRenew);\n           }\n           LOG.info(\"Received new token \" + token);\n         }\n       }\n     }\n     DataOutputBuffer dob \u003d new DataOutputBuffer();\n     credentials.writeTokenStorageToStream(dob);\n     ByteBuffer byteBuffer \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n     for (ApplicationId applicationId : referringAppIds) {\n       rmContext.getSystemCredentialsForApps().put(applicationId, byteBuffer);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void requestNewHdfsDelegationTokenAsProxyUser(\n      Collection\u003cApplicationId\u003e referringAppIds,\n      String user, boolean shouldCancelAtEnd) throws IOException,\n      InterruptedException {\n    if (!hasProxyUserPrivileges) {\n      LOG.info(\"RM proxy-user privilege is not enabled. Skip requesting hdfs tokens.\");\n      return;\n    }\n    // Get new hdfs tokens for this user\n    Credentials credentials \u003d new Credentials();\n    Token\u003c?\u003e[] newTokens \u003d obtainSystemTokensForUser(user, credentials);\n\n    // Add new tokens to the toRenew list.\n    LOG.info(\"Received new tokens for \" + referringAppIds + \". Received \"\n        + newTokens.length + \" tokens.\");\n    if (newTokens.length \u003e 0) {\n      for (Token\u003c?\u003e token : newTokens) {\n        if (token.isManaged()) {\n          DelegationTokenToRenew tokenToRenew \u003d\n              new DelegationTokenToRenew(referringAppIds, token, getConfig(),\n                Time.now(), shouldCancelAtEnd, user);\n          // renew the token to get the next expiration date.\n          renewToken(tokenToRenew);\n          setTimerForTokenRenewal(tokenToRenew);\n          for (ApplicationId applicationId : referringAppIds) {\n            appTokens.get(applicationId).add(tokenToRenew);\n          }\n          LOG.info(\"Received new token \" + token);\n        }\n      }\n    }\n    DataOutputBuffer dob \u003d new DataOutputBuffer();\n    credentials.writeTokenStorageToStream(dob);\n    ByteBuffer byteBuffer \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n    for (ApplicationId applicationId : referringAppIds) {\n      rmContext.getSystemCredentialsForApps().put(applicationId, byteBuffer);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
      "extendedDetails": {
        "oldValue": "requestNewHdfsDelegationToken",
        "newValue": "requestNewHdfsDelegationTokenAsProxyUser"
      }
    },
    "9c5911294e0ba71aefe4763731b0e780cde9d0ca": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3055. Fixed ResourceManager\u0027s DelegationTokenRenewer to not stop token renewal of applications part of a bigger workflow. Contributed by Daryn Sharp.\n",
      "commitDate": "09/04/15 1:08 PM",
      "commitName": "9c5911294e0ba71aefe4763731b0e780cde9d0ca",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3055. Fixed ResourceManager\u0027s DelegationTokenRenewer to not stop token renewal of applications part of a bigger workflow. Contributed by Daryn Sharp.\n",
          "commitDate": "09/04/15 1:08 PM",
          "commitName": "9c5911294e0ba71aefe4763731b0e780cde9d0ca",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "23/03/15 10:45 AM",
          "commitNameOld": "6ca1f12024fd7cec7b01df0f039ca59f3f365dc1",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 17.1,
          "commitsBetweenForRepo": 161,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,38 @@\n-  private void requestNewHdfsDelegationToken(ApplicationId applicationId,\n+  private void requestNewHdfsDelegationToken(\n+      Collection\u003cApplicationId\u003e referringAppIds,\n       String user, boolean shouldCancelAtEnd) throws IOException,\n       InterruptedException {\n     if (!hasProxyUserPrivileges) {\n       LOG.info(\"RM proxy-user privilege is not enabled. Skip requesting hdfs tokens.\");\n       return;\n     }\n     // Get new hdfs tokens for this user\n     Credentials credentials \u003d new Credentials();\n     Token\u003c?\u003e[] newTokens \u003d obtainSystemTokensForUser(user, credentials);\n \n     // Add new tokens to the toRenew list.\n-    LOG.info(\"Received new tokens for \" + applicationId + \". Received \"\n+    LOG.info(\"Received new tokens for \" + referringAppIds + \". Received \"\n         + newTokens.length + \" tokens.\");\n     if (newTokens.length \u003e 0) {\n       for (Token\u003c?\u003e token : newTokens) {\n         if (token.isManaged()) {\n           DelegationTokenToRenew tokenToRenew \u003d\n-              new DelegationTokenToRenew(applicationId, token, getConfig(),\n+              new DelegationTokenToRenew(referringAppIds, token, getConfig(),\n                 Time.now(), shouldCancelAtEnd, user);\n           // renew the token to get the next expiration date.\n           renewToken(tokenToRenew);\n           setTimerForTokenRenewal(tokenToRenew);\n-          appTokens.get(applicationId).add(tokenToRenew);\n+          for (ApplicationId applicationId : referringAppIds) {\n+            appTokens.get(applicationId).add(tokenToRenew);\n+          }\n           LOG.info(\"Received new token \" + token);\n         }\n       }\n     }\n     DataOutputBuffer dob \u003d new DataOutputBuffer();\n     credentials.writeTokenStorageToStream(dob);\n     ByteBuffer byteBuffer \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n-    rmContext.getSystemCredentialsForApps().put(applicationId, byteBuffer);\n+    for (ApplicationId applicationId : referringAppIds) {\n+      rmContext.getSystemCredentialsForApps().put(applicationId, byteBuffer);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void requestNewHdfsDelegationToken(\n      Collection\u003cApplicationId\u003e referringAppIds,\n      String user, boolean shouldCancelAtEnd) throws IOException,\n      InterruptedException {\n    if (!hasProxyUserPrivileges) {\n      LOG.info(\"RM proxy-user privilege is not enabled. Skip requesting hdfs tokens.\");\n      return;\n    }\n    // Get new hdfs tokens for this user\n    Credentials credentials \u003d new Credentials();\n    Token\u003c?\u003e[] newTokens \u003d obtainSystemTokensForUser(user, credentials);\n\n    // Add new tokens to the toRenew list.\n    LOG.info(\"Received new tokens for \" + referringAppIds + \". Received \"\n        + newTokens.length + \" tokens.\");\n    if (newTokens.length \u003e 0) {\n      for (Token\u003c?\u003e token : newTokens) {\n        if (token.isManaged()) {\n          DelegationTokenToRenew tokenToRenew \u003d\n              new DelegationTokenToRenew(referringAppIds, token, getConfig(),\n                Time.now(), shouldCancelAtEnd, user);\n          // renew the token to get the next expiration date.\n          renewToken(tokenToRenew);\n          setTimerForTokenRenewal(tokenToRenew);\n          for (ApplicationId applicationId : referringAppIds) {\n            appTokens.get(applicationId).add(tokenToRenew);\n          }\n          LOG.info(\"Received new token \" + token);\n        }\n      }\n    }\n    DataOutputBuffer dob \u003d new DataOutputBuffer();\n    credentials.writeTokenStorageToStream(dob);\n    ByteBuffer byteBuffer \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n    for (ApplicationId applicationId : referringAppIds) {\n      rmContext.getSystemCredentialsForApps().put(applicationId, byteBuffer);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, user-String, shouldCancelAtEnd-boolean]",
            "newValue": "[referringAppIds-Collection\u003cApplicationId\u003e, user-String, shouldCancelAtEnd-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3055. Fixed ResourceManager\u0027s DelegationTokenRenewer to not stop token renewal of applications part of a bigger workflow. Contributed by Daryn Sharp.\n",
          "commitDate": "09/04/15 1:08 PM",
          "commitName": "9c5911294e0ba71aefe4763731b0e780cde9d0ca",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "23/03/15 10:45 AM",
          "commitNameOld": "6ca1f12024fd7cec7b01df0f039ca59f3f365dc1",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 17.1,
          "commitsBetweenForRepo": 161,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,38 @@\n-  private void requestNewHdfsDelegationToken(ApplicationId applicationId,\n+  private void requestNewHdfsDelegationToken(\n+      Collection\u003cApplicationId\u003e referringAppIds,\n       String user, boolean shouldCancelAtEnd) throws IOException,\n       InterruptedException {\n     if (!hasProxyUserPrivileges) {\n       LOG.info(\"RM proxy-user privilege is not enabled. Skip requesting hdfs tokens.\");\n       return;\n     }\n     // Get new hdfs tokens for this user\n     Credentials credentials \u003d new Credentials();\n     Token\u003c?\u003e[] newTokens \u003d obtainSystemTokensForUser(user, credentials);\n \n     // Add new tokens to the toRenew list.\n-    LOG.info(\"Received new tokens for \" + applicationId + \". Received \"\n+    LOG.info(\"Received new tokens for \" + referringAppIds + \". Received \"\n         + newTokens.length + \" tokens.\");\n     if (newTokens.length \u003e 0) {\n       for (Token\u003c?\u003e token : newTokens) {\n         if (token.isManaged()) {\n           DelegationTokenToRenew tokenToRenew \u003d\n-              new DelegationTokenToRenew(applicationId, token, getConfig(),\n+              new DelegationTokenToRenew(referringAppIds, token, getConfig(),\n                 Time.now(), shouldCancelAtEnd, user);\n           // renew the token to get the next expiration date.\n           renewToken(tokenToRenew);\n           setTimerForTokenRenewal(tokenToRenew);\n-          appTokens.get(applicationId).add(tokenToRenew);\n+          for (ApplicationId applicationId : referringAppIds) {\n+            appTokens.get(applicationId).add(tokenToRenew);\n+          }\n           LOG.info(\"Received new token \" + token);\n         }\n       }\n     }\n     DataOutputBuffer dob \u003d new DataOutputBuffer();\n     credentials.writeTokenStorageToStream(dob);\n     ByteBuffer byteBuffer \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n-    rmContext.getSystemCredentialsForApps().put(applicationId, byteBuffer);\n+    for (ApplicationId applicationId : referringAppIds) {\n+      rmContext.getSystemCredentialsForApps().put(applicationId, byteBuffer);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void requestNewHdfsDelegationToken(\n      Collection\u003cApplicationId\u003e referringAppIds,\n      String user, boolean shouldCancelAtEnd) throws IOException,\n      InterruptedException {\n    if (!hasProxyUserPrivileges) {\n      LOG.info(\"RM proxy-user privilege is not enabled. Skip requesting hdfs tokens.\");\n      return;\n    }\n    // Get new hdfs tokens for this user\n    Credentials credentials \u003d new Credentials();\n    Token\u003c?\u003e[] newTokens \u003d obtainSystemTokensForUser(user, credentials);\n\n    // Add new tokens to the toRenew list.\n    LOG.info(\"Received new tokens for \" + referringAppIds + \". Received \"\n        + newTokens.length + \" tokens.\");\n    if (newTokens.length \u003e 0) {\n      for (Token\u003c?\u003e token : newTokens) {\n        if (token.isManaged()) {\n          DelegationTokenToRenew tokenToRenew \u003d\n              new DelegationTokenToRenew(referringAppIds, token, getConfig(),\n                Time.now(), shouldCancelAtEnd, user);\n          // renew the token to get the next expiration date.\n          renewToken(tokenToRenew);\n          setTimerForTokenRenewal(tokenToRenew);\n          for (ApplicationId applicationId : referringAppIds) {\n            appTokens.get(applicationId).add(tokenToRenew);\n          }\n          LOG.info(\"Received new token \" + token);\n        }\n      }\n    }\n    DataOutputBuffer dob \u003d new DataOutputBuffer();\n    credentials.writeTokenStorageToStream(dob);\n    ByteBuffer byteBuffer \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n    for (ApplicationId applicationId : referringAppIds) {\n      rmContext.getSystemCredentialsForApps().put(applicationId, byteBuffer);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
          "extendedDetails": {}
        }
      ]
    },
    "0402bada1989258ecbfdc437cb339322a1f55a97": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2964. RM prematurely cancels tokens for jobs that submit jobs (oozie). Contributed by Jian He\n",
      "commitDate": "18/12/14 3:28 PM",
      "commitName": "0402bada1989258ecbfdc437cb339322a1f55a97",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "17/12/14 5:40 PM",
      "commitNameOld": "2b4b0e8847048850206f091c6870a02e08cfe836",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.91,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,33 @@\n   private void requestNewHdfsDelegationToken(ApplicationId applicationId,\n       String user, boolean shouldCancelAtEnd) throws IOException,\n       InterruptedException {\n+    if (!hasProxyUserPrivileges) {\n+      LOG.info(\"RM proxy-user privilege is not enabled. Skip requesting hdfs tokens.\");\n+      return;\n+    }\n     // Get new hdfs tokens for this user\n     Credentials credentials \u003d new Credentials();\n     Token\u003c?\u003e[] newTokens \u003d obtainSystemTokensForUser(user, credentials);\n \n     // Add new tokens to the toRenew list.\n     LOG.info(\"Received new tokens for \" + applicationId + \". Received \"\n         + newTokens.length + \" tokens.\");\n     if (newTokens.length \u003e 0) {\n       for (Token\u003c?\u003e token : newTokens) {\n         if (token.isManaged()) {\n           DelegationTokenToRenew tokenToRenew \u003d\n               new DelegationTokenToRenew(applicationId, token, getConfig(),\n                 Time.now(), shouldCancelAtEnd, user);\n           // renew the token to get the next expiration date.\n           renewToken(tokenToRenew);\n           setTimerForTokenRenewal(tokenToRenew);\n           appTokens.get(applicationId).add(tokenToRenew);\n           LOG.info(\"Received new token \" + token);\n         }\n       }\n     }\n     DataOutputBuffer dob \u003d new DataOutputBuffer();\n     credentials.writeTokenStorageToStream(dob);\n     ByteBuffer byteBuffer \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n     rmContext.getSystemCredentialsForApps().put(applicationId, byteBuffer);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void requestNewHdfsDelegationToken(ApplicationId applicationId,\n      String user, boolean shouldCancelAtEnd) throws IOException,\n      InterruptedException {\n    if (!hasProxyUserPrivileges) {\n      LOG.info(\"RM proxy-user privilege is not enabled. Skip requesting hdfs tokens.\");\n      return;\n    }\n    // Get new hdfs tokens for this user\n    Credentials credentials \u003d new Credentials();\n    Token\u003c?\u003e[] newTokens \u003d obtainSystemTokensForUser(user, credentials);\n\n    // Add new tokens to the toRenew list.\n    LOG.info(\"Received new tokens for \" + applicationId + \". Received \"\n        + newTokens.length + \" tokens.\");\n    if (newTokens.length \u003e 0) {\n      for (Token\u003c?\u003e token : newTokens) {\n        if (token.isManaged()) {\n          DelegationTokenToRenew tokenToRenew \u003d\n              new DelegationTokenToRenew(applicationId, token, getConfig(),\n                Time.now(), shouldCancelAtEnd, user);\n          // renew the token to get the next expiration date.\n          renewToken(tokenToRenew);\n          setTimerForTokenRenewal(tokenToRenew);\n          appTokens.get(applicationId).add(tokenToRenew);\n          LOG.info(\"Received new token \" + token);\n        }\n      }\n    }\n    DataOutputBuffer dob \u003d new DataOutputBuffer();\n    credentials.writeTokenStorageToStream(dob);\n    ByteBuffer byteBuffer \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n    rmContext.getSystemCredentialsForApps().put(applicationId, byteBuffer);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
      "extendedDetails": {}
    },
    "a16d022ca4313a41425c8e97841c841a2d6f2f54": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2704. Changed ResourceManager to optionally obtain tokens itself for the sake of localization and log-aggregation for long-running services. Contributed by Jian He.\n",
      "commitDate": "27/10/14 3:49 PM",
      "commitName": "a16d022ca4313a41425c8e97841c841a2d6f2f54",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,29 @@\n+  private void requestNewHdfsDelegationToken(ApplicationId applicationId,\n+      String user, boolean shouldCancelAtEnd) throws IOException,\n+      InterruptedException {\n+    // Get new hdfs tokens for this user\n+    Credentials credentials \u003d new Credentials();\n+    Token\u003c?\u003e[] newTokens \u003d obtainSystemTokensForUser(user, credentials);\n+\n+    // Add new tokens to the toRenew list.\n+    LOG.info(\"Received new tokens for \" + applicationId + \". Received \"\n+        + newTokens.length + \" tokens.\");\n+    if (newTokens.length \u003e 0) {\n+      for (Token\u003c?\u003e token : newTokens) {\n+        if (token.isManaged()) {\n+          DelegationTokenToRenew tokenToRenew \u003d\n+              new DelegationTokenToRenew(applicationId, token, getConfig(),\n+                Time.now(), shouldCancelAtEnd, user);\n+          // renew the token to get the next expiration date.\n+          renewToken(tokenToRenew);\n+          setTimerForTokenRenewal(tokenToRenew);\n+          appTokens.get(applicationId).add(tokenToRenew);\n+          LOG.info(\"Received new token \" + token);\n+        }\n+      }\n+    }\n+    DataOutputBuffer dob \u003d new DataOutputBuffer();\n+    credentials.writeTokenStorageToStream(dob);\n+    ByteBuffer byteBuffer \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n+    rmContext.getSystemCredentialsForApps().put(applicationId, byteBuffer);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void requestNewHdfsDelegationToken(ApplicationId applicationId,\n      String user, boolean shouldCancelAtEnd) throws IOException,\n      InterruptedException {\n    // Get new hdfs tokens for this user\n    Credentials credentials \u003d new Credentials();\n    Token\u003c?\u003e[] newTokens \u003d obtainSystemTokensForUser(user, credentials);\n\n    // Add new tokens to the toRenew list.\n    LOG.info(\"Received new tokens for \" + applicationId + \". Received \"\n        + newTokens.length + \" tokens.\");\n    if (newTokens.length \u003e 0) {\n      for (Token\u003c?\u003e token : newTokens) {\n        if (token.isManaged()) {\n          DelegationTokenToRenew tokenToRenew \u003d\n              new DelegationTokenToRenew(applicationId, token, getConfig(),\n                Time.now(), shouldCancelAtEnd, user);\n          // renew the token to get the next expiration date.\n          renewToken(tokenToRenew);\n          setTimerForTokenRenewal(tokenToRenew);\n          appTokens.get(applicationId).add(tokenToRenew);\n          LOG.info(\"Received new token \" + token);\n        }\n      }\n    }\n    DataOutputBuffer dob \u003d new DataOutputBuffer();\n    credentials.writeTokenStorageToStream(dob);\n    ByteBuffer byteBuffer \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n    rmContext.getSystemCredentialsForApps().put(applicationId, byteBuffer);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java"
    }
  }
}