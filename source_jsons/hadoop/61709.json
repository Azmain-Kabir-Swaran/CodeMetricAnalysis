{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDownload.java",
  "functionName": "getFileStatus",
  "functionId": "getFileStatus___fs-FileSystem(modifiers-final)__path-Path(modifiers-final)__statCache-LoadingCache__Path,Future__FileStatus____",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
  "functionStartLine": 232,
  "functionEndLine": 254,
  "numCommitsSeen": 26,
  "timeTaken": 1437,
  "changeHistory": [
    "53790d33000cb5804779a56ac3891d0e0e5a904d"
  ],
  "changeHistoryShort": {
    "53790d33000cb5804779a56ac3891d0e0e5a904d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "53790d33000cb5804779a56ac3891d0e0e5a904d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1771. Reduce the number of NameNode operations during localization of\npublic resources using a cache. Contributed by Sangjin Lee\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577391 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/03/14 5:30 PM",
      "commitName": "53790d33000cb5804779a56ac3891d0e0e5a904d",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,23 @@\n+  private static FileStatus getFileStatus(final FileSystem fs, final Path path,\n+      LoadingCache\u003cPath,Future\u003cFileStatus\u003e\u003e statCache) throws IOException {\n+    // if the stat cache does not exist, simply query the filesystem\n+    if (statCache \u003d\u003d null) {\n+      return fs.getFileStatus(path);\n+    }\n+\n+    try {\n+      // get or load it from the cache\n+      return statCache.get(path).get();\n+    } catch (ExecutionException e) {\n+      Throwable cause \u003d e.getCause();\n+      // the underlying exception should normally be IOException\n+      if (cause instanceof IOException) {\n+        throw (IOException)cause;\n+      } else {\n+        throw new IOException(cause);\n+      }\n+    } catch (InterruptedException e) { // should not happen\n+      Thread.currentThread().interrupt();\n+      throw new IOException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static FileStatus getFileStatus(final FileSystem fs, final Path path,\n      LoadingCache\u003cPath,Future\u003cFileStatus\u003e\u003e statCache) throws IOException {\n    // if the stat cache does not exist, simply query the filesystem\n    if (statCache \u003d\u003d null) {\n      return fs.getFileStatus(path);\n    }\n\n    try {\n      // get or load it from the cache\n      return statCache.get(path).get();\n    } catch (ExecutionException e) {\n      Throwable cause \u003d e.getCause();\n      // the underlying exception should normally be IOException\n      if (cause instanceof IOException) {\n        throw (IOException)cause;\n      } else {\n        throw new IOException(cause);\n      }\n    } catch (InterruptedException e) { // should not happen\n      Thread.currentThread().interrupt();\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java"
    }
  }
}