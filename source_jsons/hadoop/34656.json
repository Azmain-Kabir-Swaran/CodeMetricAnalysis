{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerManagerImpl.java",
  "functionName": "serviceStart",
  "functionId": "serviceStart",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
  "functionStartLine": 594,
  "functionEndLine": 681,
  "numCommitsSeen": 186,
  "timeTaken": 23005,
  "changeHistory": [
    "84612788339392fcda1aef0e27c43f5c6b2a19e5",
    "e718ac597f2225cb4946e1ac4b3986c336645643",
    "4d53ef7eefb14661d824924e503a910de1ae997f",
    "424887ecb7d11a72837f2757ed3ff9e0fe8c5b5d",
    "c2febdcbaa12078db42403fe8fd74180fb58a84b",
    "e52f67e3897a67a0b6d29e557a31cfa881738821",
    "c23cf3cddff9d4d52c2e892b26ba20e5640501e0",
    "ab647cfcdb255c79e70d9254b5de7ee1acad7a6b",
    "243bcd367ff3130d74676280233041f88aca62a5",
    "77e134d13fb87cd098f2e9c23212affe0a7be1be",
    "0928502029ef141759008997335ea2cd836a7154",
    "39f019f41392d9e46ea1dc86ddd5563aabbeda1e",
    "fbb55784d93e1a819daf55d936e864d344579cbf",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "48414b08277b86cdbc34ae36d7c4d204fd838294",
    "32d511065a2612d37591f09e53eed8ec1488587d",
    "7f4dc277572df6ba25fa961073b99a5bdb086c00",
    "d19cfe01642f9582e1fe5d567beb480399c37a01",
    "4186121c08cb3d86f775d333c637459a4fb19d1b",
    "66137cf17cb4abccd6065819d97edc63c6510477",
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0",
    "6b2f2efe4de4e709a2b9c64b7b3b3138e1939668",
    "fafe8cd28e726566509c679e19d7da622f29f90d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "84612788339392fcda1aef0e27c43f5c6b2a19e5": "Ybodychange",
    "e718ac597f2225cb4946e1ac4b3986c336645643": "Ybodychange",
    "4d53ef7eefb14661d824924e503a910de1ae997f": "Ybodychange",
    "424887ecb7d11a72837f2757ed3ff9e0fe8c5b5d": "Ybodychange",
    "c2febdcbaa12078db42403fe8fd74180fb58a84b": "Ybodychange",
    "e52f67e3897a67a0b6d29e557a31cfa881738821": "Ybodychange",
    "c23cf3cddff9d4d52c2e892b26ba20e5640501e0": "Ybodychange",
    "ab647cfcdb255c79e70d9254b5de7ee1acad7a6b": "Ybodychange",
    "243bcd367ff3130d74676280233041f88aca62a5": "Ybodychange",
    "77e134d13fb87cd098f2e9c23212affe0a7be1be": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "39f019f41392d9e46ea1dc86ddd5563aabbeda1e": "Ybodychange",
    "fbb55784d93e1a819daf55d936e864d344579cbf": "Ybodychange",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "48414b08277b86cdbc34ae36d7c4d204fd838294": "Ybodychange",
    "32d511065a2612d37591f09e53eed8ec1488587d": "Ybodychange",
    "7f4dc277572df6ba25fa961073b99a5bdb086c00": "Ybodychange",
    "d19cfe01642f9582e1fe5d567beb480399c37a01": "Ybodychange",
    "4186121c08cb3d86f775d333c637459a4fb19d1b": "Ybodychange",
    "66137cf17cb4abccd6065819d97edc63c6510477": "Ybodychange",
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0": "Ybodychange",
    "6b2f2efe4de4e709a2b9c64b7b3b3138e1939668": "Ybodychange",
    "fafe8cd28e726566509c679e19d7da622f29f90d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "84612788339392fcda1aef0e27c43f5c6b2a19e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8544. [DS] AM registration fails when hadoop authorization is enabled. Contributed by Bibin A Chundatt.\n",
      "commitDate": "24/07/18 12:39 AM",
      "commitName": "84612788339392fcda1aef0e27c43f5c6b2a19e5",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "23/07/18 11:07 AM",
      "commitNameOld": "9d3c39e9dd88b8f32223c01328581bb68507d415",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 0.56,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,88 @@\n   protected void serviceStart() throws Exception {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     final InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n     boolean usingEphemeralPort \u003d (initialAddress.getPort() \u003d\u003d 0);\n     if (context.getNMStateStore().canRecover() \u0026\u0026 usingEphemeralPort) {\n       throw new IllegalArgumentException(\"Cannot support recovery with an \"\n           + \"ephemeral server port. Check the setting of \"\n           + YarnConfiguration.NM_ADDRESS);\n     }\n     // If recovering then delay opening the RPC service until the recovery\n     // of resources and containers have completed, otherwise requests from\n     // clients during recovery can interfere with the recovery process.\n     final boolean delayedRpcServerStart \u003d\n         context.getNMStateStore().canRecover();\n \n     Configuration serverConf \u003d new Configuration(conf);\n \n     // always enforce it to be token-based.\n     serverConf.set(\n       CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n       SaslRpcServer.AuthMethod.TOKEN.toString());\n     \n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     server \u003d\n         rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, \n             serverConf, this.context.getNMTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n-      refreshServiceAcls(conf, new NMPolicyProvider());\n+      refreshServiceAcls(conf, NMPolicyProvider.getInstance());\n     }\n     \n     String bindHost \u003d conf.get(YarnConfiguration.NM_BIND_HOST);\n     String nmAddress \u003d conf.getTrimmed(YarnConfiguration.NM_ADDRESS);\n     String hostOverride \u003d null;\n     if (bindHost !\u003d null \u0026\u0026 !bindHost.isEmpty()\n         \u0026\u0026 nmAddress !\u003d null \u0026\u0026 !nmAddress.isEmpty()) {\n       //a bind-host case with an address, to support overriding the first\n       //hostname found when querying for our hostname with the specified\n       //address, combine the specified address with the actual port listened\n       //on by the server\n       hostOverride \u003d nmAddress.split(\":\")[0];\n     }\n \n     // setup node ID\n     InetSocketAddress connectAddress;\n     if (delayedRpcServerStart) {\n       connectAddress \u003d NetUtils.getConnectAddress(initialAddress);\n     } else {\n       server.start();\n       connectAddress \u003d NetUtils.getConnectAddress(server);\n     }\n     NodeId nodeId \u003d buildNodeId(connectAddress, hostOverride);\n     ((NodeManager.NMContext)context).setNodeId(nodeId);\n     this.context.getNMTokenSecretManager().setNodeId(nodeId);\n     this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n \n     // start remaining services\n     super.serviceStart();\n \n     if (delayedRpcServerStart) {\n       waitForRecoveredContainers();\n       server.start();\n \n       // check that the node ID is as previously advertised\n       connectAddress \u003d NetUtils.getConnectAddress(server);\n       NodeId serverNode \u003d buildNodeId(connectAddress, hostOverride);\n       if (!serverNode.equals(nodeId)) {\n         throw new IOException(\"Node mismatch after server started, expected \u0027\"\n             + nodeId + \"\u0027 but found \u0027\" + serverNode + \"\u0027\");\n       }\n     }\n \n     LOG.info(\"ContainerManager started at \" + connectAddress);\n     LOG.info(\"ContainerManager bound to \" + initialAddress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    final InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n    boolean usingEphemeralPort \u003d (initialAddress.getPort() \u003d\u003d 0);\n    if (context.getNMStateStore().canRecover() \u0026\u0026 usingEphemeralPort) {\n      throw new IllegalArgumentException(\"Cannot support recovery with an \"\n          + \"ephemeral server port. Check the setting of \"\n          + YarnConfiguration.NM_ADDRESS);\n    }\n    // If recovering then delay opening the RPC service until the recovery\n    // of resources and containers have completed, otherwise requests from\n    // clients during recovery can interfere with the recovery process.\n    final boolean delayedRpcServerStart \u003d\n        context.getNMStateStore().canRecover();\n\n    Configuration serverConf \u003d new Configuration(conf);\n\n    // always enforce it to be token-based.\n    serverConf.set(\n      CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n      SaslRpcServer.AuthMethod.TOKEN.toString());\n    \n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    server \u003d\n        rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, \n            serverConf, this.context.getNMTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, NMPolicyProvider.getInstance());\n    }\n    \n    String bindHost \u003d conf.get(YarnConfiguration.NM_BIND_HOST);\n    String nmAddress \u003d conf.getTrimmed(YarnConfiguration.NM_ADDRESS);\n    String hostOverride \u003d null;\n    if (bindHost !\u003d null \u0026\u0026 !bindHost.isEmpty()\n        \u0026\u0026 nmAddress !\u003d null \u0026\u0026 !nmAddress.isEmpty()) {\n      //a bind-host case with an address, to support overriding the first\n      //hostname found when querying for our hostname with the specified\n      //address, combine the specified address with the actual port listened\n      //on by the server\n      hostOverride \u003d nmAddress.split(\":\")[0];\n    }\n\n    // setup node ID\n    InetSocketAddress connectAddress;\n    if (delayedRpcServerStart) {\n      connectAddress \u003d NetUtils.getConnectAddress(initialAddress);\n    } else {\n      server.start();\n      connectAddress \u003d NetUtils.getConnectAddress(server);\n    }\n    NodeId nodeId \u003d buildNodeId(connectAddress, hostOverride);\n    ((NodeManager.NMContext)context).setNodeId(nodeId);\n    this.context.getNMTokenSecretManager().setNodeId(nodeId);\n    this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n\n    // start remaining services\n    super.serviceStart();\n\n    if (delayedRpcServerStart) {\n      waitForRecoveredContainers();\n      server.start();\n\n      // check that the node ID is as previously advertised\n      connectAddress \u003d NetUtils.getConnectAddress(server);\n      NodeId serverNode \u003d buildNodeId(connectAddress, hostOverride);\n      if (!serverNode.equals(nodeId)) {\n        throw new IOException(\"Node mismatch after server started, expected \u0027\"\n            + nodeId + \"\u0027 but found \u0027\" + serverNode + \"\u0027\");\n      }\n    }\n\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    LOG.info(\"ContainerManager bound to \" + initialAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "e718ac597f2225cb4946e1ac4b3986c336645643": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-7891. LogAggregationIndexedFileController should support read from HAR file. (Xuan Gong via wangda)\"\n\nThis reverts commit 4d53ef7eefb14661d824924e503a910de1ae997f.\n",
      "commitDate": "07/03/18 3:46 PM",
      "commitName": "e718ac597f2225cb4946e1ac4b3986c336645643",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/03/18 11:30 AM",
      "commitNameOld": "4d53ef7eefb14661d824924e503a910de1ae997f",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,88 @@\n   protected void serviceStart() throws Exception {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     final InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n     boolean usingEphemeralPort \u003d (initialAddress.getPort() \u003d\u003d 0);\n     if (context.getNMStateStore().canRecover() \u0026\u0026 usingEphemeralPort) {\n       throw new IllegalArgumentException(\"Cannot support recovery with an \"\n           + \"ephemeral server port. Check the setting of \"\n           + YarnConfiguration.NM_ADDRESS);\n     }\n     // If recovering then delay opening the RPC service until the recovery\n     // of resources and containers have completed, otherwise requests from\n     // clients during recovery can interfere with the recovery process.\n     final boolean delayedRpcServerStart \u003d\n         context.getNMStateStore().canRecover();\n \n     Configuration serverConf \u003d new Configuration(conf);\n \n     // always enforce it to be token-based.\n     serverConf.set(\n       CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n       SaslRpcServer.AuthMethod.TOKEN.toString());\n     \n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     server \u003d\n         rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, \n             serverConf, this.context.getNMTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n     \n     String bindHost \u003d conf.get(YarnConfiguration.NM_BIND_HOST);\n     String nmAddress \u003d conf.getTrimmed(YarnConfiguration.NM_ADDRESS);\n     String hostOverride \u003d null;\n     if (bindHost !\u003d null \u0026\u0026 !bindHost.isEmpty()\n         \u0026\u0026 nmAddress !\u003d null \u0026\u0026 !nmAddress.isEmpty()) {\n       //a bind-host case with an address, to support overriding the first\n       //hostname found when querying for our hostname with the specified\n       //address, combine the specified address with the actual port listened\n       //on by the server\n       hostOverride \u003d nmAddress.split(\":\")[0];\n     }\n \n     // setup node ID\n     InetSocketAddress connectAddress;\n     if (delayedRpcServerStart) {\n       connectAddress \u003d NetUtils.getConnectAddress(initialAddress);\n     } else {\n       server.start();\n       connectAddress \u003d NetUtils.getConnectAddress(server);\n     }\n     NodeId nodeId \u003d buildNodeId(connectAddress, hostOverride);\n     ((NodeManager.NMContext)context).setNodeId(nodeId);\n     this.context.getNMTokenSecretManager().setNodeId(nodeId);\n     this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n \n     // start remaining services\n     super.serviceStart();\n \n     if (delayedRpcServerStart) {\n       waitForRecoveredContainers();\n       server.start();\n \n       // check that the node ID is as previously advertised\n       connectAddress \u003d NetUtils.getConnectAddress(server);\n       NodeId serverNode \u003d buildNodeId(connectAddress, hostOverride);\n       if (!serverNode.equals(nodeId)) {\n         throw new IOException(\"Node mismatch after server started, expected \u0027\"\n             + nodeId + \"\u0027 but found \u0027\" + serverNode + \"\u0027\");\n       }\n     }\n \n-    this.nmLogAggregationStatusTracker.start();\n     LOG.info(\"ContainerManager started at \" + connectAddress);\n     LOG.info(\"ContainerManager bound to \" + initialAddress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    final InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n    boolean usingEphemeralPort \u003d (initialAddress.getPort() \u003d\u003d 0);\n    if (context.getNMStateStore().canRecover() \u0026\u0026 usingEphemeralPort) {\n      throw new IllegalArgumentException(\"Cannot support recovery with an \"\n          + \"ephemeral server port. Check the setting of \"\n          + YarnConfiguration.NM_ADDRESS);\n    }\n    // If recovering then delay opening the RPC service until the recovery\n    // of resources and containers have completed, otherwise requests from\n    // clients during recovery can interfere with the recovery process.\n    final boolean delayedRpcServerStart \u003d\n        context.getNMStateStore().canRecover();\n\n    Configuration serverConf \u003d new Configuration(conf);\n\n    // always enforce it to be token-based.\n    serverConf.set(\n      CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n      SaslRpcServer.AuthMethod.TOKEN.toString());\n    \n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    server \u003d\n        rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, \n            serverConf, this.context.getNMTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n    \n    String bindHost \u003d conf.get(YarnConfiguration.NM_BIND_HOST);\n    String nmAddress \u003d conf.getTrimmed(YarnConfiguration.NM_ADDRESS);\n    String hostOverride \u003d null;\n    if (bindHost !\u003d null \u0026\u0026 !bindHost.isEmpty()\n        \u0026\u0026 nmAddress !\u003d null \u0026\u0026 !nmAddress.isEmpty()) {\n      //a bind-host case with an address, to support overriding the first\n      //hostname found when querying for our hostname with the specified\n      //address, combine the specified address with the actual port listened\n      //on by the server\n      hostOverride \u003d nmAddress.split(\":\")[0];\n    }\n\n    // setup node ID\n    InetSocketAddress connectAddress;\n    if (delayedRpcServerStart) {\n      connectAddress \u003d NetUtils.getConnectAddress(initialAddress);\n    } else {\n      server.start();\n      connectAddress \u003d NetUtils.getConnectAddress(server);\n    }\n    NodeId nodeId \u003d buildNodeId(connectAddress, hostOverride);\n    ((NodeManager.NMContext)context).setNodeId(nodeId);\n    this.context.getNMTokenSecretManager().setNodeId(nodeId);\n    this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n\n    // start remaining services\n    super.serviceStart();\n\n    if (delayedRpcServerStart) {\n      waitForRecoveredContainers();\n      server.start();\n\n      // check that the node ID is as previously advertised\n      connectAddress \u003d NetUtils.getConnectAddress(server);\n      NodeId serverNode \u003d buildNodeId(connectAddress, hostOverride);\n      if (!serverNode.equals(nodeId)) {\n        throw new IOException(\"Node mismatch after server started, expected \u0027\"\n            + nodeId + \"\u0027 but found \u0027\" + serverNode + \"\u0027\");\n      }\n    }\n\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    LOG.info(\"ContainerManager bound to \" + initialAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "4d53ef7eefb14661d824924e503a910de1ae997f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7891. LogAggregationIndexedFileController should support read from HAR file. (Xuan Gong via wangda)\n\nChange-Id: Ie16e34039d57df50128c73b37516ad0bc7c9590e\n",
      "commitDate": "07/03/18 11:30 AM",
      "commitName": "4d53ef7eefb14661d824924e503a910de1ae997f",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "a5c1fc881e21ebf43da7ead5f3852808fce25492",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 35.42,
      "commitsBetweenForRepo": 232,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,89 @@\n   protected void serviceStart() throws Exception {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     final InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n     boolean usingEphemeralPort \u003d (initialAddress.getPort() \u003d\u003d 0);\n     if (context.getNMStateStore().canRecover() \u0026\u0026 usingEphemeralPort) {\n       throw new IllegalArgumentException(\"Cannot support recovery with an \"\n           + \"ephemeral server port. Check the setting of \"\n           + YarnConfiguration.NM_ADDRESS);\n     }\n     // If recovering then delay opening the RPC service until the recovery\n     // of resources and containers have completed, otherwise requests from\n     // clients during recovery can interfere with the recovery process.\n     final boolean delayedRpcServerStart \u003d\n         context.getNMStateStore().canRecover();\n \n     Configuration serverConf \u003d new Configuration(conf);\n \n     // always enforce it to be token-based.\n     serverConf.set(\n       CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n       SaslRpcServer.AuthMethod.TOKEN.toString());\n     \n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     server \u003d\n         rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, \n             serverConf, this.context.getNMTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n     \n     String bindHost \u003d conf.get(YarnConfiguration.NM_BIND_HOST);\n     String nmAddress \u003d conf.getTrimmed(YarnConfiguration.NM_ADDRESS);\n     String hostOverride \u003d null;\n     if (bindHost !\u003d null \u0026\u0026 !bindHost.isEmpty()\n         \u0026\u0026 nmAddress !\u003d null \u0026\u0026 !nmAddress.isEmpty()) {\n       //a bind-host case with an address, to support overriding the first\n       //hostname found when querying for our hostname with the specified\n       //address, combine the specified address with the actual port listened\n       //on by the server\n       hostOverride \u003d nmAddress.split(\":\")[0];\n     }\n \n     // setup node ID\n     InetSocketAddress connectAddress;\n     if (delayedRpcServerStart) {\n       connectAddress \u003d NetUtils.getConnectAddress(initialAddress);\n     } else {\n       server.start();\n       connectAddress \u003d NetUtils.getConnectAddress(server);\n     }\n     NodeId nodeId \u003d buildNodeId(connectAddress, hostOverride);\n     ((NodeManager.NMContext)context).setNodeId(nodeId);\n     this.context.getNMTokenSecretManager().setNodeId(nodeId);\n     this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n \n     // start remaining services\n     super.serviceStart();\n \n     if (delayedRpcServerStart) {\n       waitForRecoveredContainers();\n       server.start();\n \n       // check that the node ID is as previously advertised\n       connectAddress \u003d NetUtils.getConnectAddress(server);\n       NodeId serverNode \u003d buildNodeId(connectAddress, hostOverride);\n       if (!serverNode.equals(nodeId)) {\n         throw new IOException(\"Node mismatch after server started, expected \u0027\"\n             + nodeId + \"\u0027 but found \u0027\" + serverNode + \"\u0027\");\n       }\n     }\n \n+    this.nmLogAggregationStatusTracker.start();\n     LOG.info(\"ContainerManager started at \" + connectAddress);\n     LOG.info(\"ContainerManager bound to \" + initialAddress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    final InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n    boolean usingEphemeralPort \u003d (initialAddress.getPort() \u003d\u003d 0);\n    if (context.getNMStateStore().canRecover() \u0026\u0026 usingEphemeralPort) {\n      throw new IllegalArgumentException(\"Cannot support recovery with an \"\n          + \"ephemeral server port. Check the setting of \"\n          + YarnConfiguration.NM_ADDRESS);\n    }\n    // If recovering then delay opening the RPC service until the recovery\n    // of resources and containers have completed, otherwise requests from\n    // clients during recovery can interfere with the recovery process.\n    final boolean delayedRpcServerStart \u003d\n        context.getNMStateStore().canRecover();\n\n    Configuration serverConf \u003d new Configuration(conf);\n\n    // always enforce it to be token-based.\n    serverConf.set(\n      CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n      SaslRpcServer.AuthMethod.TOKEN.toString());\n    \n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    server \u003d\n        rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, \n            serverConf, this.context.getNMTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n    \n    String bindHost \u003d conf.get(YarnConfiguration.NM_BIND_HOST);\n    String nmAddress \u003d conf.getTrimmed(YarnConfiguration.NM_ADDRESS);\n    String hostOverride \u003d null;\n    if (bindHost !\u003d null \u0026\u0026 !bindHost.isEmpty()\n        \u0026\u0026 nmAddress !\u003d null \u0026\u0026 !nmAddress.isEmpty()) {\n      //a bind-host case with an address, to support overriding the first\n      //hostname found when querying for our hostname with the specified\n      //address, combine the specified address with the actual port listened\n      //on by the server\n      hostOverride \u003d nmAddress.split(\":\")[0];\n    }\n\n    // setup node ID\n    InetSocketAddress connectAddress;\n    if (delayedRpcServerStart) {\n      connectAddress \u003d NetUtils.getConnectAddress(initialAddress);\n    } else {\n      server.start();\n      connectAddress \u003d NetUtils.getConnectAddress(server);\n    }\n    NodeId nodeId \u003d buildNodeId(connectAddress, hostOverride);\n    ((NodeManager.NMContext)context).setNodeId(nodeId);\n    this.context.getNMTokenSecretManager().setNodeId(nodeId);\n    this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n\n    // start remaining services\n    super.serviceStart();\n\n    if (delayedRpcServerStart) {\n      waitForRecoveredContainers();\n      server.start();\n\n      // check that the node ID is as previously advertised\n      connectAddress \u003d NetUtils.getConnectAddress(server);\n      NodeId serverNode \u003d buildNodeId(connectAddress, hostOverride);\n      if (!serverNode.equals(nodeId)) {\n        throw new IOException(\"Node mismatch after server started, expected \u0027\"\n            + nodeId + \"\u0027 but found \u0027\" + serverNode + \"\u0027\");\n      }\n    }\n\n    this.nmLogAggregationStatusTracker.start();\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    LOG.info(\"ContainerManager bound to \" + initialAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "424887ecb7d11a72837f2757ed3ff9e0fe8c5b5d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3839. Quit throwing NMNotYetReadyException. Contributed by Manikandan R\n",
      "commitDate": "08/05/17 3:14 PM",
      "commitName": "424887ecb7d11a72837f2757ed3ff9e0fe8c5b5d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "06/04/17 4:54 PM",
      "commitNameOld": "0116c3c95769e204ab2600510f0efd6baafb43e0",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 31.93,
      "commitsBetweenForRepo": 163,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,88 @@\n   protected void serviceStart() throws Exception {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     final InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n     boolean usingEphemeralPort \u003d (initialAddress.getPort() \u003d\u003d 0);\n     if (context.getNMStateStore().canRecover() \u0026\u0026 usingEphemeralPort) {\n       throw new IllegalArgumentException(\"Cannot support recovery with an \"\n           + \"ephemeral server port. Check the setting of \"\n           + YarnConfiguration.NM_ADDRESS);\n     }\n     // If recovering then delay opening the RPC service until the recovery\n     // of resources and containers have completed, otherwise requests from\n     // clients during recovery can interfere with the recovery process.\n     final boolean delayedRpcServerStart \u003d\n         context.getNMStateStore().canRecover();\n \n     Configuration serverConf \u003d new Configuration(conf);\n \n     // always enforce it to be token-based.\n     serverConf.set(\n       CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n       SaslRpcServer.AuthMethod.TOKEN.toString());\n     \n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     server \u003d\n         rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, \n             serverConf, this.context.getNMTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n     \n-    LOG.info(\"Blocking new container-requests as container manager rpc\" +\n-    \t\t\" server is still starting.\");\n-    this.setBlockNewContainerRequests(true);\n-\n     String bindHost \u003d conf.get(YarnConfiguration.NM_BIND_HOST);\n     String nmAddress \u003d conf.getTrimmed(YarnConfiguration.NM_ADDRESS);\n     String hostOverride \u003d null;\n     if (bindHost !\u003d null \u0026\u0026 !bindHost.isEmpty()\n         \u0026\u0026 nmAddress !\u003d null \u0026\u0026 !nmAddress.isEmpty()) {\n       //a bind-host case with an address, to support overriding the first\n       //hostname found when querying for our hostname with the specified\n       //address, combine the specified address with the actual port listened\n       //on by the server\n       hostOverride \u003d nmAddress.split(\":\")[0];\n     }\n \n     // setup node ID\n     InetSocketAddress connectAddress;\n     if (delayedRpcServerStart) {\n       connectAddress \u003d NetUtils.getConnectAddress(initialAddress);\n     } else {\n       server.start();\n       connectAddress \u003d NetUtils.getConnectAddress(server);\n     }\n     NodeId nodeId \u003d buildNodeId(connectAddress, hostOverride);\n     ((NodeManager.NMContext)context).setNodeId(nodeId);\n     this.context.getNMTokenSecretManager().setNodeId(nodeId);\n     this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n \n     // start remaining services\n     super.serviceStart();\n \n     if (delayedRpcServerStart) {\n       waitForRecoveredContainers();\n       server.start();\n \n       // check that the node ID is as previously advertised\n       connectAddress \u003d NetUtils.getConnectAddress(server);\n       NodeId serverNode \u003d buildNodeId(connectAddress, hostOverride);\n       if (!serverNode.equals(nodeId)) {\n         throw new IOException(\"Node mismatch after server started, expected \u0027\"\n             + nodeId + \"\u0027 but found \u0027\" + serverNode + \"\u0027\");\n       }\n     }\n \n     LOG.info(\"ContainerManager started at \" + connectAddress);\n     LOG.info(\"ContainerManager bound to \" + initialAddress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    final InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n    boolean usingEphemeralPort \u003d (initialAddress.getPort() \u003d\u003d 0);\n    if (context.getNMStateStore().canRecover() \u0026\u0026 usingEphemeralPort) {\n      throw new IllegalArgumentException(\"Cannot support recovery with an \"\n          + \"ephemeral server port. Check the setting of \"\n          + YarnConfiguration.NM_ADDRESS);\n    }\n    // If recovering then delay opening the RPC service until the recovery\n    // of resources and containers have completed, otherwise requests from\n    // clients during recovery can interfere with the recovery process.\n    final boolean delayedRpcServerStart \u003d\n        context.getNMStateStore().canRecover();\n\n    Configuration serverConf \u003d new Configuration(conf);\n\n    // always enforce it to be token-based.\n    serverConf.set(\n      CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n      SaslRpcServer.AuthMethod.TOKEN.toString());\n    \n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    server \u003d\n        rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, \n            serverConf, this.context.getNMTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n    \n    String bindHost \u003d conf.get(YarnConfiguration.NM_BIND_HOST);\n    String nmAddress \u003d conf.getTrimmed(YarnConfiguration.NM_ADDRESS);\n    String hostOverride \u003d null;\n    if (bindHost !\u003d null \u0026\u0026 !bindHost.isEmpty()\n        \u0026\u0026 nmAddress !\u003d null \u0026\u0026 !nmAddress.isEmpty()) {\n      //a bind-host case with an address, to support overriding the first\n      //hostname found when querying for our hostname with the specified\n      //address, combine the specified address with the actual port listened\n      //on by the server\n      hostOverride \u003d nmAddress.split(\":\")[0];\n    }\n\n    // setup node ID\n    InetSocketAddress connectAddress;\n    if (delayedRpcServerStart) {\n      connectAddress \u003d NetUtils.getConnectAddress(initialAddress);\n    } else {\n      server.start();\n      connectAddress \u003d NetUtils.getConnectAddress(server);\n    }\n    NodeId nodeId \u003d buildNodeId(connectAddress, hostOverride);\n    ((NodeManager.NMContext)context).setNodeId(nodeId);\n    this.context.getNMTokenSecretManager().setNodeId(nodeId);\n    this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n\n    // start remaining services\n    super.serviceStart();\n\n    if (delayedRpcServerStart) {\n      waitForRecoveredContainers();\n      server.start();\n\n      // check that the node ID is as previously advertised\n      connectAddress \u003d NetUtils.getConnectAddress(server);\n      NodeId serverNode \u003d buildNodeId(connectAddress, hostOverride);\n      if (!serverNode.equals(nodeId)) {\n        throw new IOException(\"Node mismatch after server started, expected \u0027\"\n            + nodeId + \"\u0027 but found \u0027\" + serverNode + \"\u0027\");\n      }\n    }\n\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    LOG.info(\"ContainerManager bound to \" + initialAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "c2febdcbaa12078db42403fe8fd74180fb58a84b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1337. Recover containers upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617448 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 3:56 AM",
      "commitName": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
      "commitAuthor": "Junping Du",
      "commitDateOld": "04/08/14 6:25 AM",
      "commitNameOld": "b8f151231ba37247b9daa23ecce1211fdca0e49f",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 7.9,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,92 @@\n   protected void serviceStart() throws Exception {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n+    final InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n+        YarnConfiguration.NM_BIND_HOST,\n+        YarnConfiguration.NM_ADDRESS,\n+        YarnConfiguration.DEFAULT_NM_ADDRESS,\n+        YarnConfiguration.DEFAULT_NM_PORT);\n+    boolean usingEphemeralPort \u003d (initialAddress.getPort() \u003d\u003d 0);\n+    if (context.getNMStateStore().canRecover() \u0026\u0026 usingEphemeralPort) {\n+      throw new IllegalArgumentException(\"Cannot support recovery with an \"\n+          + \"ephemeral server port. Check the setting of \"\n+          + YarnConfiguration.NM_ADDRESS);\n+    }\n+    // If recovering then delay opening the RPC service until the recovery\n+    // of resources and containers have completed, otherwise requests from\n+    // clients during recovery can interfere with the recovery process.\n+    final boolean delayedRpcServerStart \u003d\n+        context.getNMStateStore().canRecover();\n+\n     Configuration serverConf \u003d new Configuration(conf);\n \n     // always enforce it to be token-based.\n     serverConf.set(\n       CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n       SaslRpcServer.AuthMethod.TOKEN.toString());\n     \n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n-    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n-        YarnConfiguration.NM_BIND_HOST,\n-        YarnConfiguration.NM_ADDRESS,\n-        YarnConfiguration.DEFAULT_NM_ADDRESS,\n-        YarnConfiguration.DEFAULT_NM_PORT);\n-\n     server \u003d\n         rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, \n             serverConf, this.context.getNMTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n     \n     LOG.info(\"Blocking new container-requests as container manager rpc\" +\n     \t\t\" server is still starting.\");\n     this.setBlockNewContainerRequests(true);\n-    server.start();\n-    \n-    InetSocketAddress connectAddress;\n+\n     String bindHost \u003d conf.get(YarnConfiguration.NM_BIND_HOST);\n     String nmAddress \u003d conf.getTrimmed(YarnConfiguration.NM_ADDRESS);\n-    if (bindHost \u003d\u003d null || bindHost.isEmpty() ||\n-\tnmAddress \u003d\u003d null || nmAddress.isEmpty()) {\n-      connectAddress \u003d NetUtils.getConnectAddress(server);\n-    } else {\n-      //a bind-host case with an address, to support overriding the first hostname\n-      //found when querying for our hostname with the specified address, combine\n-      //the specified address with the actual port listened on by the server\n-      connectAddress \u003d NetUtils.getConnectAddress(\n-\tnew InetSocketAddress(nmAddress.split(\":\")[0],\n-\t\t\t      server.getListenerAddress().getPort()));\n+    String hostOverride \u003d null;\n+    if (bindHost !\u003d null \u0026\u0026 !bindHost.isEmpty()\n+        \u0026\u0026 nmAddress !\u003d null \u0026\u0026 !nmAddress.isEmpty()) {\n+      //a bind-host case with an address, to support overriding the first\n+      //hostname found when querying for our hostname with the specified\n+      //address, combine the specified address with the actual port listened\n+      //on by the server\n+      hostOverride \u003d nmAddress.split(\":\")[0];\n     }\n \n-    NodeId nodeId \u003d NodeId.newInstance(\n-        connectAddress.getAddress().getCanonicalHostName(),\n-        connectAddress.getPort());\n+    // setup node ID\n+    InetSocketAddress connectAddress;\n+    if (delayedRpcServerStart) {\n+      connectAddress \u003d NetUtils.getConnectAddress(initialAddress);\n+    } else {\n+      server.start();\n+      connectAddress \u003d NetUtils.getConnectAddress(server);\n+    }\n+    NodeId nodeId \u003d buildNodeId(connectAddress, hostOverride);\n     ((NodeManager.NMContext)context).setNodeId(nodeId);\n     this.context.getNMTokenSecretManager().setNodeId(nodeId);\n     this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n+\n+    // start remaining services\n+    super.serviceStart();\n+\n+    if (delayedRpcServerStart) {\n+      waitForRecoveredContainers();\n+      server.start();\n+\n+      // check that the node ID is as previously advertised\n+      connectAddress \u003d NetUtils.getConnectAddress(server);\n+      NodeId serverNode \u003d buildNodeId(connectAddress, hostOverride);\n+      if (!serverNode.equals(nodeId)) {\n+        throw new IOException(\"Node mismatch after server started, expected \u0027\"\n+            + nodeId + \"\u0027 but found \u0027\" + serverNode + \"\u0027\");\n+      }\n+    }\n+\n     LOG.info(\"ContainerManager started at \" + connectAddress);\n     LOG.info(\"ContainerManager bound to \" + initialAddress);\n-    super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    final InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n    boolean usingEphemeralPort \u003d (initialAddress.getPort() \u003d\u003d 0);\n    if (context.getNMStateStore().canRecover() \u0026\u0026 usingEphemeralPort) {\n      throw new IllegalArgumentException(\"Cannot support recovery with an \"\n          + \"ephemeral server port. Check the setting of \"\n          + YarnConfiguration.NM_ADDRESS);\n    }\n    // If recovering then delay opening the RPC service until the recovery\n    // of resources and containers have completed, otherwise requests from\n    // clients during recovery can interfere with the recovery process.\n    final boolean delayedRpcServerStart \u003d\n        context.getNMStateStore().canRecover();\n\n    Configuration serverConf \u003d new Configuration(conf);\n\n    // always enforce it to be token-based.\n    serverConf.set(\n      CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n      SaslRpcServer.AuthMethod.TOKEN.toString());\n    \n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    server \u003d\n        rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, \n            serverConf, this.context.getNMTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n    \n    LOG.info(\"Blocking new container-requests as container manager rpc\" +\n    \t\t\" server is still starting.\");\n    this.setBlockNewContainerRequests(true);\n\n    String bindHost \u003d conf.get(YarnConfiguration.NM_BIND_HOST);\n    String nmAddress \u003d conf.getTrimmed(YarnConfiguration.NM_ADDRESS);\n    String hostOverride \u003d null;\n    if (bindHost !\u003d null \u0026\u0026 !bindHost.isEmpty()\n        \u0026\u0026 nmAddress !\u003d null \u0026\u0026 !nmAddress.isEmpty()) {\n      //a bind-host case with an address, to support overriding the first\n      //hostname found when querying for our hostname with the specified\n      //address, combine the specified address with the actual port listened\n      //on by the server\n      hostOverride \u003d nmAddress.split(\":\")[0];\n    }\n\n    // setup node ID\n    InetSocketAddress connectAddress;\n    if (delayedRpcServerStart) {\n      connectAddress \u003d NetUtils.getConnectAddress(initialAddress);\n    } else {\n      server.start();\n      connectAddress \u003d NetUtils.getConnectAddress(server);\n    }\n    NodeId nodeId \u003d buildNodeId(connectAddress, hostOverride);\n    ((NodeManager.NMContext)context).setNodeId(nodeId);\n    this.context.getNMTokenSecretManager().setNodeId(nodeId);\n    this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n\n    // start remaining services\n    super.serviceStart();\n\n    if (delayedRpcServerStart) {\n      waitForRecoveredContainers();\n      server.start();\n\n      // check that the node ID is as previously advertised\n      connectAddress \u003d NetUtils.getConnectAddress(server);\n      NodeId serverNode \u003d buildNodeId(connectAddress, hostOverride);\n      if (!serverNode.equals(nodeId)) {\n        throw new IOException(\"Node mismatch after server started, expected \u0027\"\n            + nodeId + \"\u0027 but found \u0027\" + serverNode + \"\u0027\");\n      }\n    }\n\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    LOG.info(\"ContainerManager bound to \" + initialAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "e52f67e3897a67a0b6d29e557a31cfa881738821": {
      "type": "Ybodychange",
      "commitMessage": "    YARN-1994. Expose YARN/MR endpoints on multiple interfaces. Contributed by Craig Welch, Milan Potocnik,and Arpit Agarwal\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614981 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/14 1:06 PM",
      "commitName": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthor": "Xuan Gong",
      "commitDateOld": "02/07/14 11:35 AM",
      "commitNameOld": "d1f54f4f4bed6c5f8e27bc80c3e33081f5c5d63f",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 29.06,
      "commitsBetweenForRepo": 208,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,63 @@\n   protected void serviceStart() throws Exception {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     Configuration serverConf \u003d new Configuration(conf);\n \n     // always enforce it to be token-based.\n     serverConf.set(\n       CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n       SaslRpcServer.AuthMethod.TOKEN.toString());\n     \n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n+        YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n \n     server \u003d\n         rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, \n             serverConf, this.context.getNMTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n     \n     LOG.info(\"Blocking new container-requests as container manager rpc\" +\n     \t\t\" server is still starting.\");\n     this.setBlockNewContainerRequests(true);\n     server.start();\n-    InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n+    \n+    InetSocketAddress connectAddress;\n+    String bindHost \u003d conf.get(YarnConfiguration.NM_BIND_HOST);\n+    String nmAddress \u003d conf.getTrimmed(YarnConfiguration.NM_ADDRESS);\n+    if (bindHost \u003d\u003d null || bindHost.isEmpty() ||\n+\tnmAddress \u003d\u003d null || nmAddress.isEmpty()) {\n+      connectAddress \u003d NetUtils.getConnectAddress(server);\n+    } else {\n+      //a bind-host case with an address, to support overriding the first hostname\n+      //found when querying for our hostname with the specified address, combine\n+      //the specified address with the actual port listened on by the server\n+      connectAddress \u003d NetUtils.getConnectAddress(\n+\tnew InetSocketAddress(nmAddress.split(\":\")[0],\n+\t\t\t      server.getListenerAddress().getPort()));\n+    }\n+\n     NodeId nodeId \u003d NodeId.newInstance(\n         connectAddress.getAddress().getCanonicalHostName(),\n         connectAddress.getPort());\n     ((NodeManager.NMContext)context).setNodeId(nodeId);\n     this.context.getNMTokenSecretManager().setNodeId(nodeId);\n     this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n     LOG.info(\"ContainerManager started at \" + connectAddress);\n+    LOG.info(\"ContainerManager bound to \" + initialAddress);\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    Configuration serverConf \u003d new Configuration(conf);\n\n    // always enforce it to be token-based.\n    serverConf.set(\n      CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n      SaslRpcServer.AuthMethod.TOKEN.toString());\n    \n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n\n    server \u003d\n        rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, \n            serverConf, this.context.getNMTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n    \n    LOG.info(\"Blocking new container-requests as container manager rpc\" +\n    \t\t\" server is still starting.\");\n    this.setBlockNewContainerRequests(true);\n    server.start();\n    \n    InetSocketAddress connectAddress;\n    String bindHost \u003d conf.get(YarnConfiguration.NM_BIND_HOST);\n    String nmAddress \u003d conf.getTrimmed(YarnConfiguration.NM_ADDRESS);\n    if (bindHost \u003d\u003d null || bindHost.isEmpty() ||\n\tnmAddress \u003d\u003d null || nmAddress.isEmpty()) {\n      connectAddress \u003d NetUtils.getConnectAddress(server);\n    } else {\n      //a bind-host case with an address, to support overriding the first hostname\n      //found when querying for our hostname with the specified address, combine\n      //the specified address with the actual port listened on by the server\n      connectAddress \u003d NetUtils.getConnectAddress(\n\tnew InetSocketAddress(nmAddress.split(\":\")[0],\n\t\t\t      server.getListenerAddress().getPort()));\n    }\n\n    NodeId nodeId \u003d NodeId.newInstance(\n        connectAddress.getAddress().getCanonicalHostName(),\n        connectAddress.getPort());\n    ((NodeManager.NMContext)context).setNodeId(nodeId);\n    this.context.getNMTokenSecretManager().setNodeId(nodeId);\n    this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    LOG.info(\"ContainerManager bound to \" + initialAddress);\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "c23cf3cddff9d4d52c2e892b26ba20e5640501e0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-961. Changed ContainerManager to enforce Token auth irrespective of security. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1508216 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/13 3:23 PM",
      "commitName": "c23cf3cddff9d4d52c2e892b26ba20e5640501e0",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "23/07/13 8:41 PM",
      "commitNameOld": "3ca3137179ef093e42cde06587c9ea785b10f32c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 5.78,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,46 @@\n   protected void serviceStart() throws Exception {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n+    Configuration serverConf \u003d new Configuration(conf);\n+\n+    // always enforce it to be token-based.\n+    serverConf.set(\n+      CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n+      SaslRpcServer.AuthMethod.TOKEN.toString());\n+    \n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n \n     server \u003d\n-        rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, conf,\n-            this.context.getNMTokenSecretManager(),\n+        rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, \n+            serverConf, this.context.getNMTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n-\n+    \n     LOG.info(\"Blocking new container-requests as container manager rpc\" +\n     \t\t\" server is still starting.\");\n     this.setBlockNewContainerRequests(true);\n     server.start();\n     InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n     NodeId nodeId \u003d NodeId.newInstance(\n         connectAddress.getAddress().getCanonicalHostName(),\n         connectAddress.getPort());\n     ((NodeManager.NMContext)context).setNodeId(nodeId);\n     this.context.getNMTokenSecretManager().setNodeId(nodeId);\n     this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n     LOG.info(\"ContainerManager started at \" + connectAddress);\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    Configuration serverConf \u003d new Configuration(conf);\n\n    // always enforce it to be token-based.\n    serverConf.set(\n      CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n      SaslRpcServer.AuthMethod.TOKEN.toString());\n    \n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n\n    server \u003d\n        rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, \n            serverConf, this.context.getNMTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n    \n    LOG.info(\"Blocking new container-requests as container manager rpc\" +\n    \t\t\" server is still starting.\");\n    this.setBlockNewContainerRequests(true);\n    server.start();\n    InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n    NodeId nodeId \u003d NodeId.newInstance(\n        connectAddress.getAddress().getCanonicalHostName(),\n        connectAddress.getPort());\n    ((NodeManager.NMContext)context).setNodeId(nodeId);\n    this.context.getNMTokenSecretManager().setNodeId(nodeId);\n    this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "ab647cfcdb255c79e70d9254b5de7ee1acad7a6b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-848. Fix NodeManager to register with RM using the fully qualified hostname. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494385 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/13 4:49 PM",
      "commitName": "ab647cfcdb255c79e70d9254b5de7ee1acad7a6b",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "18/06/13 4:19 PM",
      "commitNameOld": "243bcd367ff3130d74676280233041f88aca62a5",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   protected void serviceStart() throws Exception {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n \n     server \u003d\n         rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, conf,\n             this.context.getNMTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n \n     LOG.info(\"Blocking new container-requests as container manager rpc\" +\n     \t\t\" server is still starting.\");\n     this.setBlockNewContainerRequests(true);\n     server.start();\n     InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n-    NodeId nodeId \u003d NodeId.newInstance(connectAddress.getHostName(),\n-      connectAddress.getPort());\n+    NodeId nodeId \u003d NodeId.newInstance(\n+        connectAddress.getAddress().getCanonicalHostName(),\n+        connectAddress.getPort());\n     ((NodeManager.NMContext)context).setNodeId(nodeId);\n     this.context.getNMTokenSecretManager().setNodeId(nodeId);\n     this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n     LOG.info(\"ContainerManager started at \" + connectAddress);\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n\n    server \u003d\n        rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, conf,\n            this.context.getNMTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n\n    LOG.info(\"Blocking new container-requests as container manager rpc\" +\n    \t\t\" server is still starting.\");\n    this.setBlockNewContainerRequests(true);\n    server.start();\n    InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n    NodeId nodeId \u003d NodeId.newInstance(\n        connectAddress.getAddress().getCanonicalHostName(),\n        connectAddress.getPort());\n    ((NodeManager.NMContext)context).setNodeId(nodeId);\n    this.context.getNMTokenSecretManager().setNodeId(nodeId);\n    this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "243bcd367ff3130d74676280233041f88aca62a5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/13 4:19 PM",
      "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/06/13 11:20 PM",
      "commitNameOld": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,38 @@\n   protected void serviceStart() throws Exception {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n \n     server \u003d\n         rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, conf,\n-            this.context.getContainerTokenSecretManager(),\n+            this.context.getNMTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n \n     LOG.info(\"Blocking new container-requests as container manager rpc\" +\n     \t\t\" server is still starting.\");\n     this.setBlockNewContainerRequests(true);\n     server.start();\n     InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n     NodeId nodeId \u003d NodeId.newInstance(connectAddress.getHostName(),\n       connectAddress.getPort());\n     ((NodeManager.NMContext)context).setNodeId(nodeId);\n+    this.context.getNMTokenSecretManager().setNodeId(nodeId);\n+    this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n     LOG.info(\"ContainerManager started at \" + connectAddress);\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n\n    server \u003d\n        rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, conf,\n            this.context.getNMTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n\n    LOG.info(\"Blocking new container-requests as container manager rpc\" +\n    \t\t\" server is still starting.\");\n    this.setBlockNewContainerRequests(true);\n    server.start();\n    InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n    NodeId nodeId \u003d NodeId.newInstance(connectAddress.getHostName(),\n      connectAddress.getPort());\n    ((NodeManager.NMContext)context).setNodeId(nodeId);\n    this.context.getNMTokenSecretManager().setNodeId(nodeId);\n    this.context.getContainerTokenSecretManager().setNodeId(nodeId);\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "77e134d13fb87cd098f2e9c23212affe0a7be1be": {
      "type": "Ybodychange",
      "commitMessage": "YARN-387. Renamed YARN protocols for consistency. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493623 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/06/13 7:27 PM",
      "commitName": "77e134d13fb87cd098f2e9c23212affe0a7be1be",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "13/06/13 10:49 AM",
      "commitNameOld": "686ac311c9241ce64b0b6a942f95941f94446a81",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.36,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   protected void serviceStart() throws Exception {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n \n     server \u003d\n-        rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n+        rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, conf,\n             this.context.getContainerTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n \n     LOG.info(\"Blocking new container-requests as container manager rpc\" +\n     \t\t\" server is still starting.\");\n     this.setBlockNewContainerRequests(true);\n     server.start();\n     InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n     NodeId nodeId \u003d NodeId.newInstance(connectAddress.getHostName(),\n       connectAddress.getPort());\n     ((NodeManager.NMContext)context).setNodeId(nodeId);\n     LOG.info(\"ContainerManager started at \" + connectAddress);\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n\n    server \u003d\n        rpc.getServer(ContainerManagementProtocol.class, this, initialAddress, conf,\n            this.context.getContainerTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n\n    LOG.info(\"Blocking new container-requests as container manager rpc\" +\n    \t\t\" server is still starting.\");\n    this.setBlockNewContainerRequests(true);\n    server.start();\n    InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n    NodeId nodeId \u003d NodeId.newInstance(connectAddress.getHostName(),\n      connectAddress.getPort());\n    ((NodeManager.NMContext)context).setNodeId(nodeId);\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "11/06/13 11:47 AM",
          "commitNameOld": "c6c41abf683be17c3917a7f94953b55347aaa69f",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 1.88,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n \n     server \u003d\n         rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n             this.context.getContainerTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n \n     LOG.info(\"Blocking new container-requests as container manager rpc\" +\n     \t\t\" server is still starting.\");\n     this.setBlockNewContainerRequests(true);\n     server.start();\n     InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n     NodeId nodeId \u003d NodeId.newInstance(connectAddress.getHostName(),\n       connectAddress.getPort());\n     ((NodeManager.NMContext)context).setNodeId(nodeId);\n     LOG.info(\"ContainerManager started at \" + connectAddress);\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n            this.context.getContainerTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n\n    LOG.info(\"Blocking new container-requests as container manager rpc\" +\n    \t\t\" server is still starting.\");\n    this.setBlockNewContainerRequests(true);\n    server.start();\n    InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n    NodeId nodeId \u003d NodeId.newInstance(connectAddress.getHostName(),\n      connectAddress.getPort());\n    ((NodeManager.NMContext)context).setNodeId(nodeId);\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "start",
            "newValue": "serviceStart"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "11/06/13 11:47 AM",
          "commitNameOld": "c6c41abf683be17c3917a7f94953b55347aaa69f",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 1.88,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n \n     server \u003d\n         rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n             this.context.getContainerTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n \n     LOG.info(\"Blocking new container-requests as container manager rpc\" +\n     \t\t\" server is still starting.\");\n     this.setBlockNewContainerRequests(true);\n     server.start();\n     InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n     NodeId nodeId \u003d NodeId.newInstance(connectAddress.getHostName(),\n       connectAddress.getPort());\n     ((NodeManager.NMContext)context).setNodeId(nodeId);\n     LOG.info(\"ContainerManager started at \" + connectAddress);\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n            this.context.getContainerTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n\n    LOG.info(\"Blocking new container-requests as container manager rpc\" +\n    \t\t\" server is still starting.\");\n    this.setBlockNewContainerRequests(true);\n    server.start();\n    InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n    NodeId nodeId \u003d NodeId.newInstance(connectAddress.getHostName(),\n      connectAddress.getPort());\n    ((NodeManager.NMContext)context).setNodeId(nodeId);\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "11/06/13 11:47 AM",
          "commitNameOld": "c6c41abf683be17c3917a7f94953b55347aaa69f",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 1.88,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n \n     server \u003d\n         rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n             this.context.getContainerTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n \n     LOG.info(\"Blocking new container-requests as container manager rpc\" +\n     \t\t\" server is still starting.\");\n     this.setBlockNewContainerRequests(true);\n     server.start();\n     InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n     NodeId nodeId \u003d NodeId.newInstance(connectAddress.getHostName(),\n       connectAddress.getPort());\n     ((NodeManager.NMContext)context).setNodeId(nodeId);\n     LOG.info(\"ContainerManager started at \" + connectAddress);\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n            this.context.getContainerTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n\n    LOG.info(\"Blocking new container-requests as container manager rpc\" +\n    \t\t\" server is still starting.\");\n    this.setBlockNewContainerRequests(true);\n    server.start();\n    InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n    NodeId nodeId \u003d NodeId.newInstance(connectAddress.getHostName(),\n      connectAddress.getPort());\n    ((NodeManager.NMContext)context).setNodeId(nodeId);\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "11/06/13 11:47 AM",
          "commitNameOld": "c6c41abf683be17c3917a7f94953b55347aaa69f",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 1.88,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n \n     server \u003d\n         rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n             this.context.getContainerTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n \n     LOG.info(\"Blocking new container-requests as container manager rpc\" +\n     \t\t\" server is still starting.\");\n     this.setBlockNewContainerRequests(true);\n     server.start();\n     InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n     NodeId nodeId \u003d NodeId.newInstance(connectAddress.getHostName(),\n       connectAddress.getPort());\n     ((NodeManager.NMContext)context).setNodeId(nodeId);\n     LOG.info(\"ContainerManager started at \" + connectAddress);\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n            this.context.getContainerTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n\n    LOG.info(\"Blocking new container-requests as container manager rpc\" +\n    \t\t\" server is still starting.\");\n    this.setBlockNewContainerRequests(true);\n    server.start();\n    InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n    NodeId nodeId \u003d NodeId.newInstance(connectAddress.getHostName(),\n      connectAddress.getPort());\n    ((NodeManager.NMContext)context).setNodeId(nodeId);\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "39f019f41392d9e46ea1dc86ddd5563aabbeda1e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-735. Make ApplicationAttemptId, ContainerId and NodeId immutable. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488439 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/05/13 5:14 PM",
      "commitName": "39f019f41392d9e46ea1dc86ddd5563aabbeda1e",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "30/05/13 9:13 PM",
      "commitNameOld": "2692675fc3b5046d2ec88542c30203c87e135b70",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 0.83,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   public void start() {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n \n     server \u003d\n         rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n             this.context.getContainerTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n \n     LOG.info(\"Blocking new container-requests as container manager rpc\" +\n     \t\t\" server is still starting.\");\n     this.setBlockNewContainerRequests(true);\n     server.start();\n     InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n-    this.context.getNodeId().setHost(connectAddress.getHostName());\n-    this.context.getNodeId().setPort(connectAddress.getPort());\n+    NodeId nodeId \u003d NodeId.newInstance(connectAddress.getHostName(),\n+      connectAddress.getPort());\n+    ((NodeManager.NMContext)context).setNodeId(nodeId);\n     LOG.info(\"ContainerManager started at \" + connectAddress);\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n            this.context.getContainerTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n\n    LOG.info(\"Blocking new container-requests as container manager rpc\" +\n    \t\t\" server is still starting.\");\n    this.setBlockNewContainerRequests(true);\n    server.start();\n    InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n    NodeId nodeId \u003d NodeId.newInstance(connectAddress.getHostName(),\n      connectAddress.getPort());\n    ((NodeManager.NMContext)context).setNodeId(nodeId);\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    super.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "fbb55784d93e1a819daf55d936e864d344579cbf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-562. Modified NM to reject any containers allocated by a previous ResourceManager. Contributed by Jian He.\nMAPREDUCE-5167. Update MR App after YARN-562 to use the new builder API for the container. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476034 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/13 8:50 PM",
      "commitName": "fbb55784d93e1a819daf55d936e864d344579cbf",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/04/13 6:33 PM",
      "commitNameOld": "8e1c2823fc014a5a045c86760c61111d0bb59d2f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.1,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,35 @@\n   public void start() {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n \n     server \u003d\n         rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n             this.context.getContainerTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n-    \n+\n+    LOG.info(\"Blocking new container-requests as container manager rpc\" +\n+    \t\t\" server is still starting.\");\n+    this.setBlockNewContainerRequests(true);\n     server.start();\n     InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n     this.context.getNodeId().setHost(connectAddress.getHostName());\n     this.context.getNodeId().setPort(connectAddress.getPort());\n     LOG.info(\"ContainerManager started at \" + connectAddress);\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n            this.context.getContainerTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n\n    LOG.info(\"Blocking new container-requests as container manager rpc\" +\n    \t\t\" server is still starting.\");\n    this.setBlockNewContainerRequests(true);\n    server.start();\n    InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n    this.context.getNodeId().setHost(connectAddress.getHostName());\n    this.context.getNodeId().setPort(connectAddress.getPort());\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    super.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 7:18 PM",
      "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 16.87,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void start() {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n \n     server \u003d\n         rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n-            this.containerTokenSecretManager,\n+            this.context.getContainerTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n     \n     server.start();\n     InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n     this.context.getNodeId().setHost(connectAddress.getHostName());\n     this.context.getNodeId().setPort(connectAddress.getPort());\n     LOG.info(\"ContainerManager started at \" + connectAddress);\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n            this.context.getContainerTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n    \n    server.start();\n    InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n    this.context.getNodeId().setHost(connectAddress.getHostName());\n    this.context.getNodeId().setPort(connectAddress.getPort());\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    super.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void start() {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n            this.containerTokenSecretManager,\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n    \n    server.start();\n    InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n    this.context.getNodeId().setHost(connectAddress.getHostName());\n    this.context.getNodeId().setPort(connectAddress.getPort());\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    super.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
      }
    },
    "48414b08277b86cdbc34ae36d7c4d204fd838294": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4163. consistently set the bind address (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1333579 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/05/12 11:35 AM",
      "commitName": "48414b08277b86cdbc34ae36d7c4d204fd838294",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "18/04/12 11:46 AM",
      "commitNameOld": "32d511065a2612d37591f09e53eed8ec1488587d",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 14.99,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,32 @@\n   public void start() {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_PORT);\n \n     server \u003d\n         rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n             this.containerTokenSecretManager,\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n     \n     server.start();\n-    try {\n-      resolvedAddress \u003d InetAddress.getLocalHost();\n-    } catch (UnknownHostException e) {\n-      throw new YarnException(e);\n-    }\n-    this.context.getNodeId().setHost(resolvedAddress.getCanonicalHostName());\n-    this.context.getNodeId().setPort(server.getPort());\n-    LOG.info(\"ContainerManager started at \"\n-        + this.context.getNodeId().toString());\n+    InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n+    this.context.getNodeId().setHost(connectAddress.getHostName());\n+    this.context.getNodeId().setPort(connectAddress.getPort());\n+    LOG.info(\"ContainerManager started at \" + connectAddress);\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n            this.containerTokenSecretManager,\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n    \n    server.start();\n    InetSocketAddress connectAddress \u003d NetUtils.getConnectAddress(server);\n    this.context.getNodeId().setHost(connectAddress.getHostName());\n    this.context.getNodeId().setPort(connectAddress.getPort());\n    LOG.info(\"ContainerManager started at \" + connectAddress);\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "32d511065a2612d37591f09e53eed8ec1488587d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4161. create sockets consistently (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327621 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/12 11:46 AM",
      "commitName": "32d511065a2612d37591f09e53eed8ec1488587d",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "22/03/12 3:20 PM",
      "commitNameOld": "4e5818698778bff9d2b1ba14297d8393e49927c7",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 26.85,
      "commitsBetweenForRepo": 225,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public void start() {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n-    InetSocketAddress initialAddress \u003d NetUtils.createSocketAddr(conf.get(\n-        YarnConfiguration.NM_ADDRESS, YarnConfiguration.DEFAULT_NM_ADDRESS),\n-        YarnConfiguration.DEFAULT_NM_PORT,\n-        YarnConfiguration.NM_ADDRESS);\n+    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n+        YarnConfiguration.NM_ADDRESS,\n+        YarnConfiguration.DEFAULT_NM_ADDRESS,\n+        YarnConfiguration.DEFAULT_NM_PORT);\n \n     server \u003d\n         rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n             this.containerTokenSecretManager,\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n     \n     server.start();\n     try {\n       resolvedAddress \u003d InetAddress.getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n     this.context.getNodeId().setHost(resolvedAddress.getCanonicalHostName());\n     this.context.getNodeId().setPort(server.getPort());\n     LOG.info(\"ContainerManager started at \"\n         + this.context.getNodeId().toString());\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_PORT);\n\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n            this.containerTokenSecretManager,\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n    \n    server.start();\n    try {\n      resolvedAddress \u003d InetAddress.getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n    this.context.getNodeId().setHost(resolvedAddress.getCanonicalHostName());\n    this.context.getNodeId().setPort(server.getPort());\n    LOG.info(\"ContainerManager started at \"\n        + this.context.getNodeId().toString());\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "7f4dc277572df6ba25fa961073b99a5bdb086c00": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3256. Added authorization checks for the protocol between NodeManager and ApplicationMaster. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1194850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/10/11 2:35 AM",
      "commitName": "7f4dc277572df6ba25fa961073b99a5bdb086c00",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "27/10/11 11:45 PM",
      "commitNameOld": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,37 @@\n   public void start() {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d NetUtils.createSocketAddr(conf.get(\n         YarnConfiguration.NM_ADDRESS, YarnConfiguration.DEFAULT_NM_ADDRESS),\n         YarnConfiguration.DEFAULT_NM_PORT,\n         YarnConfiguration.NM_ADDRESS);\n \n     server \u003d\n         rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n             this.containerTokenSecretManager,\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n         false)) {\n       refreshServiceAcls(conf, new NMPolicyProvider());\n     }\n     \n     server.start();\n-    InetAddress hostNameResolved \u003d null;\n     try {\n-      hostNameResolved \u003d InetAddress.getLocalHost();\n+      resolvedAddress \u003d InetAddress.getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n-    this.context.getNodeId().setHost(hostNameResolved.getCanonicalHostName());\n+    this.context.getNodeId().setHost(resolvedAddress.getCanonicalHostName());\n     this.context.getNodeId().setPort(server.getPort());\n     LOG.info(\"ContainerManager started at \"\n         + this.context.getNodeId().toString());\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d NetUtils.createSocketAddr(conf.get(\n        YarnConfiguration.NM_ADDRESS, YarnConfiguration.DEFAULT_NM_ADDRESS),\n        YarnConfiguration.DEFAULT_NM_PORT,\n        YarnConfiguration.NM_ADDRESS);\n\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n            this.containerTokenSecretManager,\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n    \n    server.start();\n    try {\n      resolvedAddress \u003d InetAddress.getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n    this.context.getNodeId().setHost(resolvedAddress.getCanonicalHostName());\n    this.context.getNodeId().setPort(server.getPort());\n    LOG.info(\"ContainerManager started at \"\n        + this.context.getNodeId().toString());\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "d19cfe01642f9582e1fe5d567beb480399c37a01": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2746. Yarn servers can\u0027t communicate with each other with hadoop.security.authorization set to true (acmurthy via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1188522 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/11 11:07 PM",
      "commitName": "d19cfe01642f9582e1fe5d567beb480399c37a01",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "21/10/11 2:36 PM",
      "commitNameOld": "4186121c08cb3d86f775d333c637459a4fb19d1b",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 3.35,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,38 @@\n   public void start() {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d NetUtils.createSocketAddr(conf.get(\n         YarnConfiguration.NM_ADDRESS, YarnConfiguration.DEFAULT_NM_ADDRESS),\n         YarnConfiguration.DEFAULT_NM_PORT,\n         YarnConfiguration.NM_ADDRESS);\n \n     server \u003d\n         rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n             this.containerTokenSecretManager,\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n+    \n+    // Enable service authorization?\n+    if (conf.getBoolean(\n+        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n+        false)) {\n+      refreshServiceAcls(conf, new NMPolicyProvider());\n+    }\n+    \n     server.start();\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n     this.context.getNodeId().setHost(hostNameResolved.getCanonicalHostName());\n     this.context.getNodeId().setPort(server.getPort());\n     LOG.info(\"ContainerManager started at \"\n         + this.context.getNodeId().toString());\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d NetUtils.createSocketAddr(conf.get(\n        YarnConfiguration.NM_ADDRESS, YarnConfiguration.DEFAULT_NM_ADDRESS),\n        YarnConfiguration.DEFAULT_NM_PORT,\n        YarnConfiguration.NM_ADDRESS);\n\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n            this.containerTokenSecretManager,\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    \n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, \n        false)) {\n      refreshServiceAcls(conf, new NMPolicyProvider());\n    }\n    \n    server.start();\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n    this.context.getNodeId().setHost(hostNameResolved.getCanonicalHostName());\n    this.context.getNodeId().setPort(server.getPort());\n    LOG.info(\"ContainerManager started at \"\n        + this.context.getNodeId().toString());\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "4186121c08cb3d86f775d333c637459a4fb19d1b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3239. Use new createSocketAddr API in MRv2 to give better error messages on misconfig (Todd Lipcon via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1187556 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/10/11 2:36 PM",
      "commitName": "4186121c08cb3d86f775d333c637459a4fb19d1b",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "20/10/11 4:45 AM",
      "commitNameOld": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.41,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   public void start() {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d NetUtils.createSocketAddr(conf.get(\n-        YarnConfiguration.NM_ADDRESS, YarnConfiguration.DEFAULT_NM_ADDRESS));\n+        YarnConfiguration.NM_ADDRESS, YarnConfiguration.DEFAULT_NM_ADDRESS),\n+        YarnConfiguration.DEFAULT_NM_PORT,\n+        YarnConfiguration.NM_ADDRESS);\n \n     server \u003d\n         rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n             this.containerTokenSecretManager,\n             conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     server.start();\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n     this.context.getNodeId().setHost(hostNameResolved.getCanonicalHostName());\n     this.context.getNodeId().setPort(server.getPort());\n     LOG.info(\"ContainerManager started at \"\n         + this.context.getNodeId().toString());\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d NetUtils.createSocketAddr(conf.get(\n        YarnConfiguration.NM_ADDRESS, YarnConfiguration.DEFAULT_NM_ADDRESS),\n        YarnConfiguration.DEFAULT_NM_PORT,\n        YarnConfiguration.NM_ADDRESS);\n\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n            this.containerTokenSecretManager,\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    server.start();\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n    this.context.getNodeId().setHost(hostNameResolved.getCanonicalHostName());\n    this.context.getNodeId().setPort(server.getPort());\n    LOG.info(\"ContainerManager started at \"\n        + this.context.getNodeId().toString());\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "66137cf17cb4abccd6065819d97edc63c6510477": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3013. Removed YarnConfiguration.YARN_SECURITY_INFO and its usage as it doesn\u0027t affect security any more. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/10/11 4:43 AM",
      "commitName": "66137cf17cb4abccd6065819d97edc63c6510477",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/10/11 4:21 PM",
      "commitNameOld": "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.52,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,28 @@\n   public void start() {\n \n     // Enqueue user dirs in deletion context\n \n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     InetSocketAddress initialAddress \u003d NetUtils.createSocketAddr(conf.get(\n         YarnConfiguration.NM_ADDRESS, YarnConfiguration.DEFAULT_NM_ADDRESS));\n \n-    Configuration cmConf \u003d new Configuration(conf);\n-    cmConf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n-        ContainerManagerSecurityInfo.class, SecurityInfo.class);\n     server \u003d\n-        rpc.getServer(ContainerManager.class, this, initialAddress, cmConf,\n+        rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n             this.containerTokenSecretManager,\n-            cmConf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n+            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     server.start();\n     InetAddress hostNameResolved \u003d null;\n     try {\n       hostNameResolved \u003d InetAddress.getLocalHost();\n     } catch (UnknownHostException e) {\n       throw new YarnException(e);\n     }\n     this.context.getNodeId().setHost(hostNameResolved.getCanonicalHostName());\n     this.context.getNodeId().setPort(server.getPort());\n     LOG.info(\"ContainerManager started at \"\n         + this.context.getNodeId().toString());\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d NetUtils.createSocketAddr(conf.get(\n        YarnConfiguration.NM_ADDRESS, YarnConfiguration.DEFAULT_NM_ADDRESS));\n\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, initialAddress, conf,\n            this.containerTokenSecretManager,\n            conf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    server.start();\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n    this.context.getNodeId().setHost(hostNameResolved.getCanonicalHostName());\n    this.context.getNodeId().setPort(server.getPort());\n    LOG.info(\"ContainerManager started at \"\n        + this.context.getNodeId().toString());\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2792. Replace usage of node ip-addresses with hostnames. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1178631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/11 4:21 PM",
      "commitName": "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "12/09/11 5:05 PM",
      "commitNameOld": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 20.97,
      "commitsBetweenForRepo": 136,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,31 @@\n   public void start() {\n \n     // Enqueue user dirs in deletion context\n \n-    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n-    Configuration cmConf \u003d new Configuration(getConfig());\n+    Configuration conf \u003d getConfig();\n+    YarnRPC rpc \u003d YarnRPC.create(conf);\n+\n+    InetSocketAddress initialAddress \u003d NetUtils.createSocketAddr(conf.get(\n+        YarnConfiguration.NM_ADDRESS, YarnConfiguration.DEFAULT_NM_ADDRESS));\n+\n+    Configuration cmConf \u003d new Configuration(conf);\n     cmConf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n         ContainerManagerSecurityInfo.class, SecurityInfo.class);\n     server \u003d\n-        rpc.getServer(ContainerManager.class, this, cmBindAddressStr, cmConf,\n+        rpc.getServer(ContainerManager.class, this, initialAddress, cmConf,\n             this.containerTokenSecretManager,\n             cmConf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n-    LOG.info(\"ContainerManager started at \" + cmBindAddressStr);\n     server.start();\n+    InetAddress hostNameResolved \u003d null;\n+    try {\n+      hostNameResolved \u003d InetAddress.getLocalHost();\n+    } catch (UnknownHostException e) {\n+      throw new YarnException(e);\n+    }\n+    this.context.getNodeId().setHost(hostNameResolved.getCanonicalHostName());\n+    this.context.getNodeId().setPort(server.getPort());\n+    LOG.info(\"ContainerManager started at \"\n+        + this.context.getNodeId().toString());\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n\n    // Enqueue user dirs in deletion context\n\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    InetSocketAddress initialAddress \u003d NetUtils.createSocketAddr(conf.get(\n        YarnConfiguration.NM_ADDRESS, YarnConfiguration.DEFAULT_NM_ADDRESS));\n\n    Configuration cmConf \u003d new Configuration(conf);\n    cmConf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n        ContainerManagerSecurityInfo.class, SecurityInfo.class);\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, initialAddress, cmConf,\n            this.containerTokenSecretManager,\n            cmConf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    server.start();\n    InetAddress hostNameResolved \u003d null;\n    try {\n      hostNameResolved \u003d InetAddress.getLocalHost();\n    } catch (UnknownHostException e) {\n      throw new YarnException(e);\n    }\n    this.context.getNodeId().setHost(hostNameResolved.getCanonicalHostName());\n    this.context.getNodeId().setPort(server.getPort());\n    LOG.info(\"ContainerManager started at \"\n        + this.context.getNodeId().toString());\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "6b2f2efe4de4e709a2b9c64b7b3b3138e1939668": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2749. Ensure NM registers with RM after starting all its services correctly. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169621 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/09/11 12:11 AM",
      "commitName": "6b2f2efe4de4e709a2b9c64b7b3b3138e1939668",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "08/09/11 6:44 PM",
      "commitNameOld": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 3.23,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,17 @@\n   public void start() {\n \n     // Enqueue user dirs in deletion context\n \n     YarnRPC rpc \u003d YarnRPC.create(getConfig());\n-    if (UserGroupInformation.isSecurityEnabled()) {\n-      // This is fine as status updater is started before ContainerManager and\n-      // RM gives the shared secret in registration during StatusUpdter#start()\n-      // itself.\n-      this.containerTokenSecretManager.setSecretKey(\n-          this.nodeStatusUpdater.getContainerManagerBindAddress(),\n-          this.nodeStatusUpdater.getRMNMSharedSecret());\n-    }\n     Configuration cmConf \u003d new Configuration(getConfig());\n     cmConf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n         ContainerManagerSecurityInfo.class, SecurityInfo.class);\n     server \u003d\n         rpc.getServer(ContainerManager.class, this, cmBindAddressStr, cmConf,\n             this.containerTokenSecretManager,\n             cmConf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                 YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     LOG.info(\"ContainerManager started at \" + cmBindAddressStr);\n     server.start();\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n\n    // Enqueue user dirs in deletion context\n\n    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    Configuration cmConf \u003d new Configuration(getConfig());\n    cmConf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n        ContainerManagerSecurityInfo.class, SecurityInfo.class);\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, cmBindAddressStr, cmConf,\n            this.containerTokenSecretManager,\n            cmConf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    LOG.info(\"ContainerManager started at \" + cmBindAddressStr);\n    server.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "fafe8cd28e726566509c679e19d7da622f29f90d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2864. Normalize configuration variable names for YARN. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 6:44 PM",
      "commitName": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "08/09/11 11:26 AM",
      "commitNameOld": "1f46b991da9b91585608a0babd3eda39485dce09",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.3,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public void start() {\n \n     // Enqueue user dirs in deletion context\n \n     YarnRPC rpc \u003d YarnRPC.create(getConfig());\n     if (UserGroupInformation.isSecurityEnabled()) {\n       // This is fine as status updater is started before ContainerManager and\n       // RM gives the shared secret in registration during StatusUpdter#start()\n       // itself.\n       this.containerTokenSecretManager.setSecretKey(\n           this.nodeStatusUpdater.getContainerManagerBindAddress(),\n           this.nodeStatusUpdater.getRMNMSharedSecret());\n     }\n     Configuration cmConf \u003d new Configuration(getConfig());\n     cmConf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n         ContainerManagerSecurityInfo.class, SecurityInfo.class);\n     server \u003d\n         rpc.getServer(ContainerManager.class, this, cmBindAddressStr, cmConf,\n             this.containerTokenSecretManager,\n-            cmConf.getInt(NMConfig.NM_CONTAINER_MGR_THREADS, \n-                NMConfig.DEFAULT_NM_CONTAINER_MGR_THREADS));\n+            cmConf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n+                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n     LOG.info(\"ContainerManager started at \" + cmBindAddressStr);\n     server.start();\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n\n    // Enqueue user dirs in deletion context\n\n    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      // This is fine as status updater is started before ContainerManager and\n      // RM gives the shared secret in registration during StatusUpdter#start()\n      // itself.\n      this.containerTokenSecretManager.setSecretKey(\n          this.nodeStatusUpdater.getContainerManagerBindAddress(),\n          this.nodeStatusUpdater.getRMNMSharedSecret());\n    }\n    Configuration cmConf \u003d new Configuration(getConfig());\n    cmConf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n        ContainerManagerSecurityInfo.class, SecurityInfo.class);\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, cmBindAddressStr, cmConf,\n            this.containerTokenSecretManager,\n            cmConf.getInt(YarnConfiguration.NM_CONTAINER_MGR_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT));\n    LOG.info(\"ContainerManager started at \" + cmBindAddressStr);\n    server.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void start() {\n\n    // Enqueue user dirs in deletion context\n\n    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      // This is fine as status updater is started before ContainerManager and\n      // RM gives the shared secret in registration during StatusUpdter#start()\n      // itself.\n      this.containerTokenSecretManager.setSecretKey(\n          this.nodeStatusUpdater.getContainerManagerBindAddress(),\n          this.nodeStatusUpdater.getRMNMSharedSecret());\n    }\n    Configuration cmConf \u003d new Configuration(getConfig());\n    cmConf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n        ContainerManagerSecurityInfo.class, SecurityInfo.class);\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, cmBindAddressStr, cmConf,\n            this.containerTokenSecretManager,\n            cmConf.getInt(NMConfig.NM_CONTAINER_MGR_THREADS, \n                NMConfig.DEFAULT_NM_CONTAINER_MGR_THREADS));\n    LOG.info(\"ContainerManager started at \" + cmBindAddressStr);\n    server.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,25 @@\n+  public void start() {\n+\n+    // Enqueue user dirs in deletion context\n+\n+    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      // This is fine as status updater is started before ContainerManager and\n+      // RM gives the shared secret in registration during StatusUpdter#start()\n+      // itself.\n+      this.containerTokenSecretManager.setSecretKey(\n+          this.nodeStatusUpdater.getContainerManagerBindAddress(),\n+          this.nodeStatusUpdater.getRMNMSharedSecret());\n+    }\n+    Configuration cmConf \u003d new Configuration(getConfig());\n+    cmConf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n+        ContainerManagerSecurityInfo.class, SecurityInfo.class);\n+    server \u003d\n+        rpc.getServer(ContainerManager.class, this, cmBindAddressStr, cmConf,\n+            this.containerTokenSecretManager,\n+            cmConf.getInt(NMConfig.NM_CONTAINER_MGR_THREADS, \n+                NMConfig.DEFAULT_NM_CONTAINER_MGR_THREADS));\n+    LOG.info(\"ContainerManager started at \" + cmBindAddressStr);\n+    server.start();\n+    super.start();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n\n    // Enqueue user dirs in deletion context\n\n    YarnRPC rpc \u003d YarnRPC.create(getConfig());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      // This is fine as status updater is started before ContainerManager and\n      // RM gives the shared secret in registration during StatusUpdter#start()\n      // itself.\n      this.containerTokenSecretManager.setSecretKey(\n          this.nodeStatusUpdater.getContainerManagerBindAddress(),\n          this.nodeStatusUpdater.getRMNMSharedSecret());\n    }\n    Configuration cmConf \u003d new Configuration(getConfig());\n    cmConf.setClass(YarnConfiguration.YARN_SECURITY_INFO,\n        ContainerManagerSecurityInfo.class, SecurityInfo.class);\n    server \u003d\n        rpc.getServer(ContainerManager.class, this, cmBindAddressStr, cmConf,\n            this.containerTokenSecretManager,\n            cmConf.getInt(NMConfig.NM_CONTAINER_MGR_THREADS, \n                NMConfig.DEFAULT_NM_CONTAINER_MGR_THREADS));\n    LOG.info(\"ContainerManager started at \" + cmBindAddressStr);\n    server.start();\n    super.start();\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
    }
  }
}