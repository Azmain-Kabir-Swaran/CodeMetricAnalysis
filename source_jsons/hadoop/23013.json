{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobControl.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/jobcontrol/JobControl.java",
  "functionStartLine": 213,
  "functionEndLine": 276,
  "numCommitsSeen": 13,
  "timeTaken": 4583,
  "changeHistory": [
    "eff5abb4f7f9800d580df3599c4fd662a225649b",
    "d1f05ce29fc95b7fcbea3d358445a891009e040f",
    "78c27ca2e3fa51e3b9bcf62d363885c444dcc86a",
    "a9bf33445e950ae62c16ccc09521fb15e1521faf",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "eff5abb4f7f9800d580df3599c4fd662a225649b": "Ybodychange",
    "d1f05ce29fc95b7fcbea3d358445a891009e040f": "Ybodychange",
    "78c27ca2e3fa51e3b9bcf62d363885c444dcc86a": "Ybodychange",
    "a9bf33445e950ae62c16ccc09521fb15e1521faf": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eff5abb4f7f9800d580df3599c4fd662a225649b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4371. Check for cyclic dependencies in Jobcontrol job DAG (madhukara phatak via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1356414 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/12 12:02 PM",
      "commitName": "eff5abb4f7f9800d580df3599c4fd662a225649b",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "29/06/12 6:41 AM",
      "commitNameOld": "d1f05ce29fc95b7fcbea3d358445a891009e040f",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 3.22,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,64 @@\n   public void run() {\n+    if (isCircular(jobsInProgress)) {\n+      throw new IllegalArgumentException(\"job control has circular dependency\");\n+    }\n     try {\n       this.runnerState \u003d ThreadState.RUNNING;\n       while (true) {\n         while (this.runnerState \u003d\u003d ThreadState.SUSPENDED) {\n           try {\n             Thread.sleep(5000);\n           }\n           catch (Exception e) {\n             //TODO the thread was interrupted, do something!!!\n           }\n         }\n         \n         synchronized(this) {\n           Iterator\u003cControlledJob\u003e it \u003d jobsInProgress.iterator();\n           while(it.hasNext()) {\n             ControlledJob j \u003d it.next();\n             LOG.debug(\"Checking state of job \"+j);\n             switch(j.checkState()) {\n             case SUCCESS:\n               successfulJobs.add(j);\n               it.remove();\n               break;\n             case FAILED:\n             case DEPENDENT_FAILED:\n               failedJobs.add(j);\n               it.remove();\n               break;\n             case READY:\n               j.submit();\n               break;\n             case RUNNING:\n             case WAITING:\n               //Do Nothing\n               break;\n             }\n           }\n         }\n         \n         if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n             this.runnerState !\u003d ThreadState.SUSPENDED) {\n           break;\n         }\n         try {\n           Thread.sleep(5000);\n         }\n         catch (Exception e) {\n           //TODO the thread was interrupted, do something!!!\n         }\n         if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n             this.runnerState !\u003d ThreadState.SUSPENDED) {\n           break;\n         }\n       }\n     }catch(Throwable t) {\n       LOG.error(\"Error while trying to run jobs.\",t);\n       //Mark all jobs as failed because we got something bad.\n       failAllJobs(t);\n     }\n     this.runnerState \u003d ThreadState.STOPPED;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    if (isCircular(jobsInProgress)) {\n      throw new IllegalArgumentException(\"job control has circular dependency\");\n    }\n    try {\n      this.runnerState \u003d ThreadState.RUNNING;\n      while (true) {\n        while (this.runnerState \u003d\u003d ThreadState.SUSPENDED) {\n          try {\n            Thread.sleep(5000);\n          }\n          catch (Exception e) {\n            //TODO the thread was interrupted, do something!!!\n          }\n        }\n        \n        synchronized(this) {\n          Iterator\u003cControlledJob\u003e it \u003d jobsInProgress.iterator();\n          while(it.hasNext()) {\n            ControlledJob j \u003d it.next();\n            LOG.debug(\"Checking state of job \"+j);\n            switch(j.checkState()) {\n            case SUCCESS:\n              successfulJobs.add(j);\n              it.remove();\n              break;\n            case FAILED:\n            case DEPENDENT_FAILED:\n              failedJobs.add(j);\n              it.remove();\n              break;\n            case READY:\n              j.submit();\n              break;\n            case RUNNING:\n            case WAITING:\n              //Do Nothing\n              break;\n            }\n          }\n        }\n        \n        if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n            this.runnerState !\u003d ThreadState.SUSPENDED) {\n          break;\n        }\n        try {\n          Thread.sleep(5000);\n        }\n        catch (Exception e) {\n          //TODO the thread was interrupted, do something!!!\n        }\n        if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n            this.runnerState !\u003d ThreadState.SUSPENDED) {\n          break;\n        }\n      }\n    }catch(Throwable t) {\n      LOG.error(\"Error while trying to run jobs.\",t);\n      //Mark all jobs as failed because we got something bad.\n      failAllJobs(t);\n    }\n    this.runnerState \u003d ThreadState.STOPPED;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/jobcontrol/JobControl.java",
      "extendedDetails": {}
    },
    "d1f05ce29fc95b7fcbea3d358445a891009e040f": {
      "type": "Ybodychange",
      "commitMessage": "Reverting MAPREDUCE-4371 to address test failures.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1355382 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/06/12 6:41 AM",
      "commitName": "d1f05ce29fc95b7fcbea3d358445a891009e040f",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "28/06/12 12:59 PM",
      "commitNameOld": "78c27ca2e3fa51e3b9bcf62d363885c444dcc86a",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,61 @@\n   public void run() {\n     try {\n       this.runnerState \u003d ThreadState.RUNNING;\n       while (true) {\n         while (this.runnerState \u003d\u003d ThreadState.SUSPENDED) {\n           try {\n             Thread.sleep(5000);\n           }\n           catch (Exception e) {\n             //TODO the thread was interrupted, do something!!!\n           }\n         }\n         \n         synchronized(this) {\n-          if (isCircular(jobsInProgress)) {\n-\t    throw new IllegalArgumentException(\n-\t\t\"job control has circular dependency\");\n-\t  }\n           Iterator\u003cControlledJob\u003e it \u003d jobsInProgress.iterator();\n           while(it.hasNext()) {\n             ControlledJob j \u003d it.next();\n             LOG.debug(\"Checking state of job \"+j);\n             switch(j.checkState()) {\n             case SUCCESS:\n               successfulJobs.add(j);\n               it.remove();\n               break;\n             case FAILED:\n             case DEPENDENT_FAILED:\n               failedJobs.add(j);\n               it.remove();\n               break;\n             case READY:\n               j.submit();\n               break;\n             case RUNNING:\n             case WAITING:\n               //Do Nothing\n               break;\n             }\n           }\n         }\n         \n         if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n             this.runnerState !\u003d ThreadState.SUSPENDED) {\n           break;\n         }\n         try {\n           Thread.sleep(5000);\n         }\n         catch (Exception e) {\n           //TODO the thread was interrupted, do something!!!\n         }\n         if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n             this.runnerState !\u003d ThreadState.SUSPENDED) {\n           break;\n         }\n       }\n     }catch(Throwable t) {\n       LOG.error(\"Error while trying to run jobs.\",t);\n       //Mark all jobs as failed because we got something bad.\n       failAllJobs(t);\n     }\n     this.runnerState \u003d ThreadState.STOPPED;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    try {\n      this.runnerState \u003d ThreadState.RUNNING;\n      while (true) {\n        while (this.runnerState \u003d\u003d ThreadState.SUSPENDED) {\n          try {\n            Thread.sleep(5000);\n          }\n          catch (Exception e) {\n            //TODO the thread was interrupted, do something!!!\n          }\n        }\n        \n        synchronized(this) {\n          Iterator\u003cControlledJob\u003e it \u003d jobsInProgress.iterator();\n          while(it.hasNext()) {\n            ControlledJob j \u003d it.next();\n            LOG.debug(\"Checking state of job \"+j);\n            switch(j.checkState()) {\n            case SUCCESS:\n              successfulJobs.add(j);\n              it.remove();\n              break;\n            case FAILED:\n            case DEPENDENT_FAILED:\n              failedJobs.add(j);\n              it.remove();\n              break;\n            case READY:\n              j.submit();\n              break;\n            case RUNNING:\n            case WAITING:\n              //Do Nothing\n              break;\n            }\n          }\n        }\n        \n        if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n            this.runnerState !\u003d ThreadState.SUSPENDED) {\n          break;\n        }\n        try {\n          Thread.sleep(5000);\n        }\n        catch (Exception e) {\n          //TODO the thread was interrupted, do something!!!\n        }\n        if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n            this.runnerState !\u003d ThreadState.SUSPENDED) {\n          break;\n        }\n      }\n    }catch(Throwable t) {\n      LOG.error(\"Error while trying to run jobs.\",t);\n      //Mark all jobs as failed because we got something bad.\n      failAllJobs(t);\n    }\n    this.runnerState \u003d ThreadState.STOPPED;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/jobcontrol/JobControl.java",
      "extendedDetails": {}
    },
    "78c27ca2e3fa51e3b9bcf62d363885c444dcc86a": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4371. Check for cyclic dependencies in Jobcontrol job DAG (madhukara phatak via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1355139 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/12 12:59 PM",
      "commitName": "78c27ca2e3fa51e3b9bcf62d363885c444dcc86a",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "01/09/11 1:24 PM",
      "commitNameOld": "a9bf33445e950ae62c16ccc09521fb15e1521faf",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 300.98,
      "commitsBetweenForRepo": 2056,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,65 @@\n   public void run() {\n     try {\n       this.runnerState \u003d ThreadState.RUNNING;\n       while (true) {\n         while (this.runnerState \u003d\u003d ThreadState.SUSPENDED) {\n           try {\n             Thread.sleep(5000);\n           }\n           catch (Exception e) {\n             //TODO the thread was interrupted, do something!!!\n           }\n         }\n         \n         synchronized(this) {\n+          if (isCircular(jobsInProgress)) {\n+\t    throw new IllegalArgumentException(\n+\t\t\"job control has circular dependency\");\n+\t  }\n           Iterator\u003cControlledJob\u003e it \u003d jobsInProgress.iterator();\n           while(it.hasNext()) {\n             ControlledJob j \u003d it.next();\n             LOG.debug(\"Checking state of job \"+j);\n             switch(j.checkState()) {\n             case SUCCESS:\n               successfulJobs.add(j);\n               it.remove();\n               break;\n             case FAILED:\n             case DEPENDENT_FAILED:\n               failedJobs.add(j);\n               it.remove();\n               break;\n             case READY:\n               j.submit();\n               break;\n             case RUNNING:\n             case WAITING:\n               //Do Nothing\n               break;\n             }\n           }\n         }\n         \n         if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n             this.runnerState !\u003d ThreadState.SUSPENDED) {\n           break;\n         }\n         try {\n           Thread.sleep(5000);\n         }\n         catch (Exception e) {\n           //TODO the thread was interrupted, do something!!!\n         }\n         if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n             this.runnerState !\u003d ThreadState.SUSPENDED) {\n           break;\n         }\n       }\n     }catch(Throwable t) {\n       LOG.error(\"Error while trying to run jobs.\",t);\n       //Mark all jobs as failed because we got something bad.\n       failAllJobs(t);\n     }\n     this.runnerState \u003d ThreadState.STOPPED;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    try {\n      this.runnerState \u003d ThreadState.RUNNING;\n      while (true) {\n        while (this.runnerState \u003d\u003d ThreadState.SUSPENDED) {\n          try {\n            Thread.sleep(5000);\n          }\n          catch (Exception e) {\n            //TODO the thread was interrupted, do something!!!\n          }\n        }\n        \n        synchronized(this) {\n          if (isCircular(jobsInProgress)) {\n\t    throw new IllegalArgumentException(\n\t\t\"job control has circular dependency\");\n\t  }\n          Iterator\u003cControlledJob\u003e it \u003d jobsInProgress.iterator();\n          while(it.hasNext()) {\n            ControlledJob j \u003d it.next();\n            LOG.debug(\"Checking state of job \"+j);\n            switch(j.checkState()) {\n            case SUCCESS:\n              successfulJobs.add(j);\n              it.remove();\n              break;\n            case FAILED:\n            case DEPENDENT_FAILED:\n              failedJobs.add(j);\n              it.remove();\n              break;\n            case READY:\n              j.submit();\n              break;\n            case RUNNING:\n            case WAITING:\n              //Do Nothing\n              break;\n            }\n          }\n        }\n        \n        if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n            this.runnerState !\u003d ThreadState.SUSPENDED) {\n          break;\n        }\n        try {\n          Thread.sleep(5000);\n        }\n        catch (Exception e) {\n          //TODO the thread was interrupted, do something!!!\n        }\n        if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n            this.runnerState !\u003d ThreadState.SUSPENDED) {\n          break;\n        }\n      }\n    }catch(Throwable t) {\n      LOG.error(\"Error while trying to run jobs.\",t);\n      //Mark all jobs as failed because we got something bad.\n      failAllJobs(t);\n    }\n    this.runnerState \u003d ThreadState.STOPPED;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/jobcontrol/JobControl.java",
      "extendedDetails": {}
    },
    "a9bf33445e950ae62c16ccc09521fb15e1521faf": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2756. Better error handling in JobControl for failed jobs. Contributed by Robert Evans. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1164255 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/09/11 1:24 PM",
      "commitName": "a9bf33445e950ae62c16ccc09521fb15e1521faf",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 7.84,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,61 @@\n   public void run() {\n-    this.runnerState \u003d ThreadState.RUNNING;\n-    while (true) {\n-      while (this.runnerState \u003d\u003d ThreadState.SUSPENDED) {\n+    try {\n+      this.runnerState \u003d ThreadState.RUNNING;\n+      while (true) {\n+        while (this.runnerState \u003d\u003d ThreadState.SUSPENDED) {\n+          try {\n+            Thread.sleep(5000);\n+          }\n+          catch (Exception e) {\n+            //TODO the thread was interrupted, do something!!!\n+          }\n+        }\n+        \n+        synchronized(this) {\n+          Iterator\u003cControlledJob\u003e it \u003d jobsInProgress.iterator();\n+          while(it.hasNext()) {\n+            ControlledJob j \u003d it.next();\n+            LOG.debug(\"Checking state of job \"+j);\n+            switch(j.checkState()) {\n+            case SUCCESS:\n+              successfulJobs.add(j);\n+              it.remove();\n+              break;\n+            case FAILED:\n+            case DEPENDENT_FAILED:\n+              failedJobs.add(j);\n+              it.remove();\n+              break;\n+            case READY:\n+              j.submit();\n+              break;\n+            case RUNNING:\n+            case WAITING:\n+              //Do Nothing\n+              break;\n+            }\n+          }\n+        }\n+        \n+        if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n+            this.runnerState !\u003d ThreadState.SUSPENDED) {\n+          break;\n+        }\n         try {\n           Thread.sleep(5000);\n         }\n         catch (Exception e) {\n-\t\t\t\t\t\n+          //TODO the thread was interrupted, do something!!!\n+        }\n+        if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n+            this.runnerState !\u003d ThreadState.SUSPENDED) {\n+          break;\n         }\n       }\n-      try {\n-        checkRunningJobs();\t\n-        checkWaitingJobs();\n-        startReadyJobs();\n-      } catch (Exception e) {\n-  \t    this.runnerState \u003d ThreadState.STOPPED;\n-      }\n-      if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n-          this.runnerState !\u003d ThreadState.SUSPENDED) {\n-        break;\n-      }\n-      try {\n-        Thread.sleep(5000);\n-      }\n-      catch (Exception e) {\n-\t\t\t\t\n-      }\n-      if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n-          this.runnerState !\u003d ThreadState.SUSPENDED) {\n-        break;\n-      }\n+    }catch(Throwable t) {\n+      LOG.error(\"Error while trying to run jobs.\",t);\n+      //Mark all jobs as failed because we got something bad.\n+      failAllJobs(t);\n     }\n     this.runnerState \u003d ThreadState.STOPPED;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    try {\n      this.runnerState \u003d ThreadState.RUNNING;\n      while (true) {\n        while (this.runnerState \u003d\u003d ThreadState.SUSPENDED) {\n          try {\n            Thread.sleep(5000);\n          }\n          catch (Exception e) {\n            //TODO the thread was interrupted, do something!!!\n          }\n        }\n        \n        synchronized(this) {\n          Iterator\u003cControlledJob\u003e it \u003d jobsInProgress.iterator();\n          while(it.hasNext()) {\n            ControlledJob j \u003d it.next();\n            LOG.debug(\"Checking state of job \"+j);\n            switch(j.checkState()) {\n            case SUCCESS:\n              successfulJobs.add(j);\n              it.remove();\n              break;\n            case FAILED:\n            case DEPENDENT_FAILED:\n              failedJobs.add(j);\n              it.remove();\n              break;\n            case READY:\n              j.submit();\n              break;\n            case RUNNING:\n            case WAITING:\n              //Do Nothing\n              break;\n            }\n          }\n        }\n        \n        if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n            this.runnerState !\u003d ThreadState.SUSPENDED) {\n          break;\n        }\n        try {\n          Thread.sleep(5000);\n        }\n        catch (Exception e) {\n          //TODO the thread was interrupted, do something!!!\n        }\n        if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n            this.runnerState !\u003d ThreadState.SUSPENDED) {\n          break;\n        }\n      }\n    }catch(Throwable t) {\n      LOG.error(\"Error while trying to run jobs.\",t);\n      //Mark all jobs as failed because we got something bad.\n      failAllJobs(t);\n    }\n    this.runnerState \u003d ThreadState.STOPPED;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/jobcontrol/JobControl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void run() {\n    this.runnerState \u003d ThreadState.RUNNING;\n    while (true) {\n      while (this.runnerState \u003d\u003d ThreadState.SUSPENDED) {\n        try {\n          Thread.sleep(5000);\n        }\n        catch (Exception e) {\n\t\t\t\t\t\n        }\n      }\n      try {\n        checkRunningJobs();\t\n        checkWaitingJobs();\n        startReadyJobs();\n      } catch (Exception e) {\n  \t    this.runnerState \u003d ThreadState.STOPPED;\n      }\n      if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n          this.runnerState !\u003d ThreadState.SUSPENDED) {\n        break;\n      }\n      try {\n        Thread.sleep(5000);\n      }\n      catch (Exception e) {\n\t\t\t\t\n      }\n      if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n          this.runnerState !\u003d ThreadState.SUSPENDED) {\n        break;\n      }\n    }\n    this.runnerState \u003d ThreadState.STOPPED;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/jobcontrol/JobControl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/jobcontrol/JobControl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/jobcontrol/JobControl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void run() {\n    this.runnerState \u003d ThreadState.RUNNING;\n    while (true) {\n      while (this.runnerState \u003d\u003d ThreadState.SUSPENDED) {\n        try {\n          Thread.sleep(5000);\n        }\n        catch (Exception e) {\n\t\t\t\t\t\n        }\n      }\n      try {\n        checkRunningJobs();\t\n        checkWaitingJobs();\n        startReadyJobs();\n      } catch (Exception e) {\n  \t    this.runnerState \u003d ThreadState.STOPPED;\n      }\n      if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n          this.runnerState !\u003d ThreadState.SUSPENDED) {\n        break;\n      }\n      try {\n        Thread.sleep(5000);\n      }\n      catch (Exception e) {\n\t\t\t\t\n      }\n      if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n          this.runnerState !\u003d ThreadState.SUSPENDED) {\n        break;\n      }\n    }\n    this.runnerState \u003d ThreadState.STOPPED;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/jobcontrol/JobControl.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/jobcontrol/JobControl.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/jobcontrol/JobControl.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,35 @@\n+  public void run() {\n+    this.runnerState \u003d ThreadState.RUNNING;\n+    while (true) {\n+      while (this.runnerState \u003d\u003d ThreadState.SUSPENDED) {\n+        try {\n+          Thread.sleep(5000);\n+        }\n+        catch (Exception e) {\n+\t\t\t\t\t\n+        }\n+      }\n+      try {\n+        checkRunningJobs();\t\n+        checkWaitingJobs();\n+        startReadyJobs();\n+      } catch (Exception e) {\n+  \t    this.runnerState \u003d ThreadState.STOPPED;\n+      }\n+      if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n+          this.runnerState !\u003d ThreadState.SUSPENDED) {\n+        break;\n+      }\n+      try {\n+        Thread.sleep(5000);\n+      }\n+      catch (Exception e) {\n+\t\t\t\t\n+      }\n+      if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n+          this.runnerState !\u003d ThreadState.SUSPENDED) {\n+        break;\n+      }\n+    }\n+    this.runnerState \u003d ThreadState.STOPPED;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    this.runnerState \u003d ThreadState.RUNNING;\n    while (true) {\n      while (this.runnerState \u003d\u003d ThreadState.SUSPENDED) {\n        try {\n          Thread.sleep(5000);\n        }\n        catch (Exception e) {\n\t\t\t\t\t\n        }\n      }\n      try {\n        checkRunningJobs();\t\n        checkWaitingJobs();\n        startReadyJobs();\n      } catch (Exception e) {\n  \t    this.runnerState \u003d ThreadState.STOPPED;\n      }\n      if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n          this.runnerState !\u003d ThreadState.SUSPENDED) {\n        break;\n      }\n      try {\n        Thread.sleep(5000);\n      }\n      catch (Exception e) {\n\t\t\t\t\n      }\n      if (this.runnerState !\u003d ThreadState.RUNNING \u0026\u0026 \n          this.runnerState !\u003d ThreadState.SUSPENDED) {\n        break;\n      }\n    }\n    this.runnerState \u003d ThreadState.STOPPED;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/jobcontrol/JobControl.java"
    }
  }
}