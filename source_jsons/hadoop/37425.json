{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientRMService.java",
  "functionName": "checkReservationACLs",
  "functionId": "checkReservationACLs___queueName-String__auditConstant-String__reservationId-ReservationId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
  "functionStartLine": 1540,
  "functionEndLine": 1597,
  "numCommitsSeen": 203,
  "timeTaken": 4363,
  "changeHistory": [
    "23f937e3b718f607d4fc975610ab3a03265f0f7e",
    "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e"
  ],
  "changeHistoryShort": {
    "23f937e3b718f607d4fc975610ab3a03265f0f7e": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9": "Ybodychange",
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "23f937e3b718f607d4fc975610ab3a03265f0f7e": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-2575. Create separate ACLs for Reservation create/update/delete/list ops (Sean Po via asuresh)\n",
      "commitDate": "11/02/16 10:47 AM",
      "commitName": "23f937e3b718f607d4fc975610ab3a03265f0f7e",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2575. Create separate ACLs for Reservation create/update/delete/list ops (Sean Po via asuresh)\n",
          "commitDate": "11/02/16 10:47 AM",
          "commitName": "23f937e3b718f607d4fc975610ab3a03265f0f7e",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "01/02/16 6:17 PM",
          "commitNameOld": "9875325d5c63f343809907d06bf48a298035a611",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 9.69,
          "commitsBetweenForRepo": 78,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,58 @@\n-  private String checkReservationACLs(String queueName, String auditConstant)\n-      throws YarnException {\n+  private String checkReservationACLs(String queueName, String auditConstant,\n+                                      ReservationId reservationId)\n+      throws YarnException, IOException {\n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant, queueName,\n           \"ClientRMService\", \"Error getting UGI\");\n       throw RPCUtil.getRemoteException(ie);\n     }\n-    // Check if user has access on the managed queue\n-    if (!queueACLsManager.checkAccess(callerUGI, QueueACL.SUBMIT_APPLICATIONS,\n-        queueName, null, null)) {\n-      RMAuditLogger.logFailure(\n-          callerUGI.getShortUserName(),\n-          auditConstant,\n-          \"User doesn\u0027t have permissions to \"\n-              + QueueACL.SUBMIT_APPLICATIONS.toString(), \"ClientRMService\",\n-          AuditConstants.UNAUTHORIZED_USER);\n-      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n-          + callerUGI.getShortUserName() + \" cannot perform operation \"\n-          + QueueACL.SUBMIT_APPLICATIONS.name() + \" on queue\" + queueName));\n+\n+    if (reservationSystem \u003d\u003d null) {\n+      return callerUGI.getShortUserName();\n     }\n-    return callerUGI.getShortUserName();\n+\n+    ReservationsACLsManager manager \u003d reservationSystem\n+            .getReservationsACLsManager();\n+    ReservationACL reservationACL \u003d getReservationACLFromAuditConstant(\n+            auditConstant);\n+\n+    if (manager \u003d\u003d null) {\n+      return callerUGI.getShortUserName();\n+    }\n+\n+    String reservationCreatorName \u003d \"\";\n+    ReservationAllocation reservation;\n+    // Get the user associated with the reservation.\n+    Plan plan \u003d reservationSystem.getPlan(queueName);\n+    if (reservationId !\u003d null \u0026\u0026 plan !\u003d null) {\n+      reservation \u003d plan.getReservationById(reservationId);\n+      if (reservation !\u003d null) {\n+        reservationCreatorName \u003d reservation.getUser();\n+      }\n+    }\n+\n+    // If the reservation to be altered or listed belongs to the current user,\n+    // access will be given.\n+    if (reservationCreatorName !\u003d null \u0026\u0026 !reservationCreatorName.isEmpty()\n+           \u0026\u0026 reservationCreatorName.equals(callerUGI.getUserName())) {\n+      return callerUGI.getShortUserName();\n+    }\n+\n+    // Check if the user has access to the specific ACL\n+    if (manager.checkAccess(callerUGI, reservationACL, queueName)) {\n+      return callerUGI.getShortUserName();\n+    }\n+\n+    // If the user has Administer ACL then access is granted\n+    if (manager.checkAccess(callerUGI, ReservationACL\n+            .ADMINISTER_RESERVATIONS, queueName)) {\n+      return callerUGI.getShortUserName();\n+    }\n+\n+    handleNoAccess(callerUGI.getShortUserName(), queueName, auditConstant,\n+            reservationACL.toString(), reservationACL.name());\n+    throw new IllegalStateException();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String checkReservationACLs(String queueName, String auditConstant,\n                                      ReservationId reservationId)\n      throws YarnException, IOException {\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant, queueName,\n          \"ClientRMService\", \"Error getting UGI\");\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    if (reservationSystem \u003d\u003d null) {\n      return callerUGI.getShortUserName();\n    }\n\n    ReservationsACLsManager manager \u003d reservationSystem\n            .getReservationsACLsManager();\n    ReservationACL reservationACL \u003d getReservationACLFromAuditConstant(\n            auditConstant);\n\n    if (manager \u003d\u003d null) {\n      return callerUGI.getShortUserName();\n    }\n\n    String reservationCreatorName \u003d \"\";\n    ReservationAllocation reservation;\n    // Get the user associated with the reservation.\n    Plan plan \u003d reservationSystem.getPlan(queueName);\n    if (reservationId !\u003d null \u0026\u0026 plan !\u003d null) {\n      reservation \u003d plan.getReservationById(reservationId);\n      if (reservation !\u003d null) {\n        reservationCreatorName \u003d reservation.getUser();\n      }\n    }\n\n    // If the reservation to be altered or listed belongs to the current user,\n    // access will be given.\n    if (reservationCreatorName !\u003d null \u0026\u0026 !reservationCreatorName.isEmpty()\n           \u0026\u0026 reservationCreatorName.equals(callerUGI.getUserName())) {\n      return callerUGI.getShortUserName();\n    }\n\n    // Check if the user has access to the specific ACL\n    if (manager.checkAccess(callerUGI, reservationACL, queueName)) {\n      return callerUGI.getShortUserName();\n    }\n\n    // If the user has Administer ACL then access is granted\n    if (manager.checkAccess(callerUGI, ReservationACL\n            .ADMINISTER_RESERVATIONS, queueName)) {\n      return callerUGI.getShortUserName();\n    }\n\n    handleNoAccess(callerUGI.getShortUserName(), queueName, auditConstant,\n            reservationACL.toString(), reservationACL.name());\n    throw new IllegalStateException();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
          "extendedDetails": {
            "oldValue": "[queueName-String, auditConstant-String]",
            "newValue": "[queueName-String, auditConstant-String, reservationId-ReservationId]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-2575. Create separate ACLs for Reservation create/update/delete/list ops (Sean Po via asuresh)\n",
          "commitDate": "11/02/16 10:47 AM",
          "commitName": "23f937e3b718f607d4fc975610ab3a03265f0f7e",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "01/02/16 6:17 PM",
          "commitNameOld": "9875325d5c63f343809907d06bf48a298035a611",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 9.69,
          "commitsBetweenForRepo": 78,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,58 @@\n-  private String checkReservationACLs(String queueName, String auditConstant)\n-      throws YarnException {\n+  private String checkReservationACLs(String queueName, String auditConstant,\n+                                      ReservationId reservationId)\n+      throws YarnException, IOException {\n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant, queueName,\n           \"ClientRMService\", \"Error getting UGI\");\n       throw RPCUtil.getRemoteException(ie);\n     }\n-    // Check if user has access on the managed queue\n-    if (!queueACLsManager.checkAccess(callerUGI, QueueACL.SUBMIT_APPLICATIONS,\n-        queueName, null, null)) {\n-      RMAuditLogger.logFailure(\n-          callerUGI.getShortUserName(),\n-          auditConstant,\n-          \"User doesn\u0027t have permissions to \"\n-              + QueueACL.SUBMIT_APPLICATIONS.toString(), \"ClientRMService\",\n-          AuditConstants.UNAUTHORIZED_USER);\n-      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n-          + callerUGI.getShortUserName() + \" cannot perform operation \"\n-          + QueueACL.SUBMIT_APPLICATIONS.name() + \" on queue\" + queueName));\n+\n+    if (reservationSystem \u003d\u003d null) {\n+      return callerUGI.getShortUserName();\n     }\n-    return callerUGI.getShortUserName();\n+\n+    ReservationsACLsManager manager \u003d reservationSystem\n+            .getReservationsACLsManager();\n+    ReservationACL reservationACL \u003d getReservationACLFromAuditConstant(\n+            auditConstant);\n+\n+    if (manager \u003d\u003d null) {\n+      return callerUGI.getShortUserName();\n+    }\n+\n+    String reservationCreatorName \u003d \"\";\n+    ReservationAllocation reservation;\n+    // Get the user associated with the reservation.\n+    Plan plan \u003d reservationSystem.getPlan(queueName);\n+    if (reservationId !\u003d null \u0026\u0026 plan !\u003d null) {\n+      reservation \u003d plan.getReservationById(reservationId);\n+      if (reservation !\u003d null) {\n+        reservationCreatorName \u003d reservation.getUser();\n+      }\n+    }\n+\n+    // If the reservation to be altered or listed belongs to the current user,\n+    // access will be given.\n+    if (reservationCreatorName !\u003d null \u0026\u0026 !reservationCreatorName.isEmpty()\n+           \u0026\u0026 reservationCreatorName.equals(callerUGI.getUserName())) {\n+      return callerUGI.getShortUserName();\n+    }\n+\n+    // Check if the user has access to the specific ACL\n+    if (manager.checkAccess(callerUGI, reservationACL, queueName)) {\n+      return callerUGI.getShortUserName();\n+    }\n+\n+    // If the user has Administer ACL then access is granted\n+    if (manager.checkAccess(callerUGI, ReservationACL\n+            .ADMINISTER_RESERVATIONS, queueName)) {\n+      return callerUGI.getShortUserName();\n+    }\n+\n+    handleNoAccess(callerUGI.getShortUserName(), queueName, auditConstant,\n+            reservationACL.toString(), reservationACL.name());\n+    throw new IllegalStateException();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String checkReservationACLs(String queueName, String auditConstant,\n                                      ReservationId reservationId)\n      throws YarnException, IOException {\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant, queueName,\n          \"ClientRMService\", \"Error getting UGI\");\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    if (reservationSystem \u003d\u003d null) {\n      return callerUGI.getShortUserName();\n    }\n\n    ReservationsACLsManager manager \u003d reservationSystem\n            .getReservationsACLsManager();\n    ReservationACL reservationACL \u003d getReservationACLFromAuditConstant(\n            auditConstant);\n\n    if (manager \u003d\u003d null) {\n      return callerUGI.getShortUserName();\n    }\n\n    String reservationCreatorName \u003d \"\";\n    ReservationAllocation reservation;\n    // Get the user associated with the reservation.\n    Plan plan \u003d reservationSystem.getPlan(queueName);\n    if (reservationId !\u003d null \u0026\u0026 plan !\u003d null) {\n      reservation \u003d plan.getReservationById(reservationId);\n      if (reservation !\u003d null) {\n        reservationCreatorName \u003d reservation.getUser();\n      }\n    }\n\n    // If the reservation to be altered or listed belongs to the current user,\n    // access will be given.\n    if (reservationCreatorName !\u003d null \u0026\u0026 !reservationCreatorName.isEmpty()\n           \u0026\u0026 reservationCreatorName.equals(callerUGI.getUserName())) {\n      return callerUGI.getShortUserName();\n    }\n\n    // Check if the user has access to the specific ACL\n    if (manager.checkAccess(callerUGI, reservationACL, queueName)) {\n      return callerUGI.getShortUserName();\n    }\n\n    // If the user has Administer ACL then access is granted\n    if (manager.checkAccess(callerUGI, ReservationACL\n            .ADMINISTER_RESERVATIONS, queueName)) {\n      return callerUGI.getShortUserName();\n    }\n\n    handleNoAccess(callerUGI.getShortUserName(), queueName, auditConstant,\n            reservationACL.toString(), reservationACL.name());\n    throw new IllegalStateException();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
          "extendedDetails": {
            "oldValue": "[YarnException]",
            "newValue": "[YarnException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2575. Create separate ACLs for Reservation create/update/delete/list ops (Sean Po via asuresh)\n",
          "commitDate": "11/02/16 10:47 AM",
          "commitName": "23f937e3b718f607d4fc975610ab3a03265f0f7e",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "01/02/16 6:17 PM",
          "commitNameOld": "9875325d5c63f343809907d06bf48a298035a611",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 9.69,
          "commitsBetweenForRepo": 78,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,58 @@\n-  private String checkReservationACLs(String queueName, String auditConstant)\n-      throws YarnException {\n+  private String checkReservationACLs(String queueName, String auditConstant,\n+                                      ReservationId reservationId)\n+      throws YarnException, IOException {\n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant, queueName,\n           \"ClientRMService\", \"Error getting UGI\");\n       throw RPCUtil.getRemoteException(ie);\n     }\n-    // Check if user has access on the managed queue\n-    if (!queueACLsManager.checkAccess(callerUGI, QueueACL.SUBMIT_APPLICATIONS,\n-        queueName, null, null)) {\n-      RMAuditLogger.logFailure(\n-          callerUGI.getShortUserName(),\n-          auditConstant,\n-          \"User doesn\u0027t have permissions to \"\n-              + QueueACL.SUBMIT_APPLICATIONS.toString(), \"ClientRMService\",\n-          AuditConstants.UNAUTHORIZED_USER);\n-      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n-          + callerUGI.getShortUserName() + \" cannot perform operation \"\n-          + QueueACL.SUBMIT_APPLICATIONS.name() + \" on queue\" + queueName));\n+\n+    if (reservationSystem \u003d\u003d null) {\n+      return callerUGI.getShortUserName();\n     }\n-    return callerUGI.getShortUserName();\n+\n+    ReservationsACLsManager manager \u003d reservationSystem\n+            .getReservationsACLsManager();\n+    ReservationACL reservationACL \u003d getReservationACLFromAuditConstant(\n+            auditConstant);\n+\n+    if (manager \u003d\u003d null) {\n+      return callerUGI.getShortUserName();\n+    }\n+\n+    String reservationCreatorName \u003d \"\";\n+    ReservationAllocation reservation;\n+    // Get the user associated with the reservation.\n+    Plan plan \u003d reservationSystem.getPlan(queueName);\n+    if (reservationId !\u003d null \u0026\u0026 plan !\u003d null) {\n+      reservation \u003d plan.getReservationById(reservationId);\n+      if (reservation !\u003d null) {\n+        reservationCreatorName \u003d reservation.getUser();\n+      }\n+    }\n+\n+    // If the reservation to be altered or listed belongs to the current user,\n+    // access will be given.\n+    if (reservationCreatorName !\u003d null \u0026\u0026 !reservationCreatorName.isEmpty()\n+           \u0026\u0026 reservationCreatorName.equals(callerUGI.getUserName())) {\n+      return callerUGI.getShortUserName();\n+    }\n+\n+    // Check if the user has access to the specific ACL\n+    if (manager.checkAccess(callerUGI, reservationACL, queueName)) {\n+      return callerUGI.getShortUserName();\n+    }\n+\n+    // If the user has Administer ACL then access is granted\n+    if (manager.checkAccess(callerUGI, ReservationACL\n+            .ADMINISTER_RESERVATIONS, queueName)) {\n+      return callerUGI.getShortUserName();\n+    }\n+\n+    handleNoAccess(callerUGI.getShortUserName(), queueName, auditConstant,\n+            reservationACL.toString(), reservationACL.name());\n+    throw new IllegalStateException();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String checkReservationACLs(String queueName, String auditConstant,\n                                      ReservationId reservationId)\n      throws YarnException, IOException {\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant, queueName,\n          \"ClientRMService\", \"Error getting UGI\");\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    if (reservationSystem \u003d\u003d null) {\n      return callerUGI.getShortUserName();\n    }\n\n    ReservationsACLsManager manager \u003d reservationSystem\n            .getReservationsACLsManager();\n    ReservationACL reservationACL \u003d getReservationACLFromAuditConstant(\n            auditConstant);\n\n    if (manager \u003d\u003d null) {\n      return callerUGI.getShortUserName();\n    }\n\n    String reservationCreatorName \u003d \"\";\n    ReservationAllocation reservation;\n    // Get the user associated with the reservation.\n    Plan plan \u003d reservationSystem.getPlan(queueName);\n    if (reservationId !\u003d null \u0026\u0026 plan !\u003d null) {\n      reservation \u003d plan.getReservationById(reservationId);\n      if (reservation !\u003d null) {\n        reservationCreatorName \u003d reservation.getUser();\n      }\n    }\n\n    // If the reservation to be altered or listed belongs to the current user,\n    // access will be given.\n    if (reservationCreatorName !\u003d null \u0026\u0026 !reservationCreatorName.isEmpty()\n           \u0026\u0026 reservationCreatorName.equals(callerUGI.getUserName())) {\n      return callerUGI.getShortUserName();\n    }\n\n    // Check if the user has access to the specific ACL\n    if (manager.checkAccess(callerUGI, reservationACL, queueName)) {\n      return callerUGI.getShortUserName();\n    }\n\n    // If the user has Administer ACL then access is granted\n    if (manager.checkAccess(callerUGI, ReservationACL\n            .ADMINISTER_RESERVATIONS, queueName)) {\n      return callerUGI.getShortUserName();\n    }\n\n    handleNoAccess(callerUGI.getShortUserName(), queueName, auditConstant,\n            reservationACL.toString(), reservationACL.name());\n    throw new IllegalStateException();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
          "extendedDetails": {}
        }
      ]
    },
    "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4571. Make app id/name available to the yarn authorizer provider for better auditing. (Jian He via wangda)\n",
      "commitDate": "12/01/16 9:18 PM",
      "commitName": "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "30/12/15 3:30 PM",
      "commitNameOld": "8310b2e9ff3d6804bad703c4c15458b0dfeeb4af",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 13.24,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private String checkReservationACLs(String queueName, String auditConstant)\n       throws YarnException {\n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant, queueName,\n           \"ClientRMService\", \"Error getting UGI\");\n       throw RPCUtil.getRemoteException(ie);\n     }\n     // Check if user has access on the managed queue\n     if (!queueACLsManager.checkAccess(callerUGI, QueueACL.SUBMIT_APPLICATIONS,\n-        queueName)) {\n+        queueName, null, null)) {\n       RMAuditLogger.logFailure(\n           callerUGI.getShortUserName(),\n           auditConstant,\n           \"User doesn\u0027t have permissions to \"\n               + QueueACL.SUBMIT_APPLICATIONS.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + QueueACL.SUBMIT_APPLICATIONS.name() + \" on queue\" + queueName));\n     }\n     return callerUGI.getShortUserName();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String checkReservationACLs(String queueName, String auditConstant)\n      throws YarnException {\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant, queueName,\n          \"ClientRMService\", \"Error getting UGI\");\n      throw RPCUtil.getRemoteException(ie);\n    }\n    // Check if user has access on the managed queue\n    if (!queueACLsManager.checkAccess(callerUGI, QueueACL.SUBMIT_APPLICATIONS,\n        queueName, null, null)) {\n      RMAuditLogger.logFailure(\n          callerUGI.getShortUserName(),\n          auditConstant,\n          \"User doesn\u0027t have permissions to \"\n              + QueueACL.SUBMIT_APPLICATIONS.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + QueueACL.SUBMIT_APPLICATIONS.name() + \" on queue\" + queueName));\n    }\n    return callerUGI.getShortUserName();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2080. Integrating reservation system with ResourceManager and client-RM protocol. Contributed by Subru Krishnan and Carlo Curino.\n(cherry picked from commit 8baeaead8532898163f1006276b731a237b1a559)\n\nConflicts:\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java\n",
      "commitDate": "03/10/14 3:42 PM",
      "commitName": "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e",
      "commitAuthor": "subru",
      "diff": "@@ -0,0 +1,25 @@\n+  private String checkReservationACLs(String queueName, String auditConstant)\n+      throws YarnException {\n+    UserGroupInformation callerUGI;\n+    try {\n+      callerUGI \u003d UserGroupInformation.getCurrentUser();\n+    } catch (IOException ie) {\n+      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant, queueName,\n+          \"ClientRMService\", \"Error getting UGI\");\n+      throw RPCUtil.getRemoteException(ie);\n+    }\n+    // Check if user has access on the managed queue\n+    if (!queueACLsManager.checkAccess(callerUGI, QueueACL.SUBMIT_APPLICATIONS,\n+        queueName)) {\n+      RMAuditLogger.logFailure(\n+          callerUGI.getShortUserName(),\n+          auditConstant,\n+          \"User doesn\u0027t have permissions to \"\n+              + QueueACL.SUBMIT_APPLICATIONS.toString(), \"ClientRMService\",\n+          AuditConstants.UNAUTHORIZED_USER);\n+      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n+          + callerUGI.getShortUserName() + \" cannot perform operation \"\n+          + QueueACL.SUBMIT_APPLICATIONS.name() + \" on queue\" + queueName));\n+    }\n+    return callerUGI.getShortUserName();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String checkReservationACLs(String queueName, String auditConstant)\n      throws YarnException {\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant, queueName,\n          \"ClientRMService\", \"Error getting UGI\");\n      throw RPCUtil.getRemoteException(ie);\n    }\n    // Check if user has access on the managed queue\n    if (!queueACLsManager.checkAccess(callerUGI, QueueACL.SUBMIT_APPLICATIONS,\n        queueName)) {\n      RMAuditLogger.logFailure(\n          callerUGI.getShortUserName(),\n          auditConstant,\n          \"User doesn\u0027t have permissions to \"\n              + QueueACL.SUBMIT_APPLICATIONS.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + QueueACL.SUBMIT_APPLICATIONS.name() + \" on queue\" + queueName));\n    }\n    return callerUGI.getShortUserName();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
    }
  }
}