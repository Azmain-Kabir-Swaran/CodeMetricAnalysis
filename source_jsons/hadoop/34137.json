{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerScheduler.java",
  "functionName": "handle",
  "functionId": "handle___event-ContainerSchedulerEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
  "functionStartLine": 168,
  "functionEndLine": 198,
  "numCommitsSeen": 34,
  "timeTaken": 5573,
  "changeHistory": [
    "6d80b9bc3ff3ba8073e3faf64551b9109d2aa2ad",
    "489411579c5e30c1dc855c4fd3d5f7f68a58b27e",
    "a50be1b8f432f50c940b66d12c7de87b95ea47c0",
    "df800f6cf3ea663daf4081ebe784808b08d9366d",
    "4f8194430fc6a69d9cc99b78828fd7045d5683e8",
    "4d7be1d8575e9254c59d41460960708e3718503a",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
    "c8172f5f143d2fefafa5a412899ab7cd081b406d"
  ],
  "changeHistoryShort": {
    "6d80b9bc3ff3ba8073e3faf64551b9109d2aa2ad": "Ybodychange",
    "489411579c5e30c1dc855c4fd3d5f7f68a58b27e": "Ybodychange",
    "a50be1b8f432f50c940b66d12c7de87b95ea47c0": "Ybodychange",
    "df800f6cf3ea663daf4081ebe784808b08d9366d": "Ybodychange",
    "4f8194430fc6a69d9cc99b78828fd7045d5683e8": "Ybodychange",
    "4d7be1d8575e9254c59d41460960708e3718503a": "Ybodychange",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "c8172f5f143d2fefafa5a412899ab7cd081b406d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6d80b9bc3ff3ba8073e3faf64551b9109d2aa2ad": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9594. Fix missing break statement in ContainerScheduler#handle. Contributed by lujie.\n",
      "commitDate": "11/06/19 10:19 AM",
      "commitName": "6d80b9bc3ff3ba8073e3faf64551b9109d2aa2ad",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "30/05/19 9:52 PM",
      "commitNameOld": "7861a5eb1afd3b8c485b1db83f3bb21a50928e4e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 11.52,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   public void handle(ContainerSchedulerEvent event) {\n     switch (event.getType()) {\n     case SCHEDULE_CONTAINER:\n       scheduleContainer(event.getContainer());\n       break;\n     // NOTE: Is sent only after container state has changed to PAUSED...\n     case CONTAINER_PAUSED:\n     // NOTE: Is sent only after container state has changed to DONE...\n     case CONTAINER_COMPLETED:\n       onResourcesReclaimed(event.getContainer());\n       break;\n     case UPDATE_CONTAINER:\n       if (event instanceof UpdateContainerSchedulerEvent) {\n         onUpdateContainer((UpdateContainerSchedulerEvent) event);\n       } else {\n         LOG.error(\"Unknown event type on UpdateCOntainer: \" + event.getType());\n       }\n       break;\n     case SHED_QUEUED_CONTAINERS:\n       shedQueuedOpportunisticContainers();\n       break;\n     case RECOVERY_COMPLETED:\n       startPendingContainers(maxOppQueueLength \u003c\u003d 0);\n       metrics.setQueuedContainers(queuedOpportunisticContainers.size(),\n           queuedGuaranteedContainers.size());\n+      break;\n     default:\n       LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n           + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerSchedulerEvent event) {\n    switch (event.getType()) {\n    case SCHEDULE_CONTAINER:\n      scheduleContainer(event.getContainer());\n      break;\n    // NOTE: Is sent only after container state has changed to PAUSED...\n    case CONTAINER_PAUSED:\n    // NOTE: Is sent only after container state has changed to DONE...\n    case CONTAINER_COMPLETED:\n      onResourcesReclaimed(event.getContainer());\n      break;\n    case UPDATE_CONTAINER:\n      if (event instanceof UpdateContainerSchedulerEvent) {\n        onUpdateContainer((UpdateContainerSchedulerEvent) event);\n      } else {\n        LOG.error(\"Unknown event type on UpdateCOntainer: \" + event.getType());\n      }\n      break;\n    case SHED_QUEUED_CONTAINERS:\n      shedQueuedOpportunisticContainers();\n      break;\n    case RECOVERY_COMPLETED:\n      startPendingContainers(maxOppQueueLength \u003c\u003d 0);\n      metrics.setQueuedContainers(queuedOpportunisticContainers.size(),\n          queuedGuaranteedContainers.size());\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n          + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
      "extendedDetails": {}
    },
    "489411579c5e30c1dc855c4fd3d5f7f68a58b27e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9169. Add metrics for queued opportunistic and guaranteed containers. Contributed by Abhishek Modi.\n",
      "commitDate": "07/01/19 3:16 PM",
      "commitName": "489411579c5e30c1dc855c4fd3d5f7f68a58b27e",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "04/01/19 11:16 AM",
      "commitNameOld": "6e35f7130fb3fb17665e818f838ed750425348c0",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 3.17,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   public void handle(ContainerSchedulerEvent event) {\n     switch (event.getType()) {\n     case SCHEDULE_CONTAINER:\n       scheduleContainer(event.getContainer());\n       break;\n     // NOTE: Is sent only after container state has changed to PAUSED...\n     case CONTAINER_PAUSED:\n     // NOTE: Is sent only after container state has changed to DONE...\n     case CONTAINER_COMPLETED:\n       onResourcesReclaimed(event.getContainer());\n       break;\n     case UPDATE_CONTAINER:\n       if (event instanceof UpdateContainerSchedulerEvent) {\n         onUpdateContainer((UpdateContainerSchedulerEvent) event);\n       } else {\n         LOG.error(\"Unknown event type on UpdateCOntainer: \" + event.getType());\n       }\n       break;\n     case SHED_QUEUED_CONTAINERS:\n       shedQueuedOpportunisticContainers();\n       break;\n     case RECOVERY_COMPLETED:\n       startPendingContainers(maxOppQueueLength \u003c\u003d 0);\n+      metrics.setQueuedContainers(queuedOpportunisticContainers.size(),\n+          queuedGuaranteedContainers.size());\n     default:\n       LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n           + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerSchedulerEvent event) {\n    switch (event.getType()) {\n    case SCHEDULE_CONTAINER:\n      scheduleContainer(event.getContainer());\n      break;\n    // NOTE: Is sent only after container state has changed to PAUSED...\n    case CONTAINER_PAUSED:\n    // NOTE: Is sent only after container state has changed to DONE...\n    case CONTAINER_COMPLETED:\n      onResourcesReclaimed(event.getContainer());\n      break;\n    case UPDATE_CONTAINER:\n      if (event instanceof UpdateContainerSchedulerEvent) {\n        onUpdateContainer((UpdateContainerSchedulerEvent) event);\n      } else {\n        LOG.error(\"Unknown event type on UpdateCOntainer: \" + event.getType());\n      }\n      break;\n    case SHED_QUEUED_CONTAINERS:\n      shedQueuedOpportunisticContainers();\n      break;\n    case RECOVERY_COMPLETED:\n      startPendingContainers(maxOppQueueLength \u003c\u003d 0);\n      metrics.setQueuedContainers(queuedOpportunisticContainers.size(),\n          queuedGuaranteedContainers.size());\n    default:\n      LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n          + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
      "extendedDetails": {}
    },
    "a50be1b8f432f50c940b66d12c7de87b95ea47c0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7275. NM Statestore cleanup for Container updates. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "16/10/17 1:12 PM",
      "commitName": "a50be1b8f432f50c940b66d12c7de87b95ea47c0",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "25/09/17 4:02 PM",
      "commitNameOld": "df800f6cf3ea663daf4081ebe784808b08d9366d",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 20.88,
      "commitsBetweenForRepo": 156,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,28 @@\n   public void handle(ContainerSchedulerEvent event) {\n     switch (event.getType()) {\n     case SCHEDULE_CONTAINER:\n       scheduleContainer(event.getContainer());\n       break;\n     // NOTE: Is sent only after container state has changed to PAUSED...\n     case CONTAINER_PAUSED:\n     // NOTE: Is sent only after container state has changed to DONE...\n     case CONTAINER_COMPLETED:\n       onResourcesReclaimed(event.getContainer());\n       break;\n     case UPDATE_CONTAINER:\n       if (event instanceof UpdateContainerSchedulerEvent) {\n         onUpdateContainer((UpdateContainerSchedulerEvent) event);\n       } else {\n         LOG.error(\"Unknown event type on UpdateCOntainer: \" + event.getType());\n       }\n       break;\n     case SHED_QUEUED_CONTAINERS:\n       shedQueuedOpportunisticContainers();\n       break;\n+    case RECOVERY_COMPLETED:\n+      startPendingContainers(maxOppQueueLength \u003c\u003d 0);\n     default:\n       LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n           + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerSchedulerEvent event) {\n    switch (event.getType()) {\n    case SCHEDULE_CONTAINER:\n      scheduleContainer(event.getContainer());\n      break;\n    // NOTE: Is sent only after container state has changed to PAUSED...\n    case CONTAINER_PAUSED:\n    // NOTE: Is sent only after container state has changed to DONE...\n    case CONTAINER_COMPLETED:\n      onResourcesReclaimed(event.getContainer());\n      break;\n    case UPDATE_CONTAINER:\n      if (event instanceof UpdateContainerSchedulerEvent) {\n        onUpdateContainer((UpdateContainerSchedulerEvent) event);\n      } else {\n        LOG.error(\"Unknown event type on UpdateCOntainer: \" + event.getType());\n      }\n      break;\n    case SHED_QUEUED_CONTAINERS:\n      shedQueuedOpportunisticContainers();\n      break;\n    case RECOVERY_COMPLETED:\n      startPendingContainers(maxOppQueueLength \u003c\u003d 0);\n    default:\n      LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n          + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
      "extendedDetails": {}
    },
    "df800f6cf3ea663daf4081ebe784808b08d9366d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7240. Add more states and transitions to stabilize the NM Container state machine. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "25/09/17 4:02 PM",
      "commitName": "df800f6cf3ea663daf4081ebe784808b08d9366d",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "14/09/17 8:51 AM",
      "commitNameOld": "4f8194430fc6a69d9cc99b78828fd7045d5683e8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 11.3,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   public void handle(ContainerSchedulerEvent event) {\n     switch (event.getType()) {\n     case SCHEDULE_CONTAINER:\n       scheduleContainer(event.getContainer());\n       break;\n+    // NOTE: Is sent only after container state has changed to PAUSED...\n     case CONTAINER_PAUSED:\n+    // NOTE: Is sent only after container state has changed to DONE...\n     case CONTAINER_COMPLETED:\n       onResourcesReclaimed(event.getContainer());\n       break;\n     case UPDATE_CONTAINER:\n       if (event instanceof UpdateContainerSchedulerEvent) {\n         onUpdateContainer((UpdateContainerSchedulerEvent) event);\n       } else {\n         LOG.error(\"Unknown event type on UpdateCOntainer: \" + event.getType());\n       }\n       break;\n     case SHED_QUEUED_CONTAINERS:\n       shedQueuedOpportunisticContainers();\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n           + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerSchedulerEvent event) {\n    switch (event.getType()) {\n    case SCHEDULE_CONTAINER:\n      scheduleContainer(event.getContainer());\n      break;\n    // NOTE: Is sent only after container state has changed to PAUSED...\n    case CONTAINER_PAUSED:\n    // NOTE: Is sent only after container state has changed to DONE...\n    case CONTAINER_COMPLETED:\n      onResourcesReclaimed(event.getContainer());\n      break;\n    case UPDATE_CONTAINER:\n      if (event instanceof UpdateContainerSchedulerEvent) {\n        onUpdateContainer((UpdateContainerSchedulerEvent) event);\n      } else {\n        LOG.error(\"Unknown event type on UpdateCOntainer: \" + event.getType());\n      }\n      break;\n    case SHED_QUEUED_CONTAINERS:\n      shedQueuedOpportunisticContainers();\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n          + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
      "extendedDetails": {}
    },
    "4f8194430fc6a69d9cc99b78828fd7045d5683e8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5216. Expose configurable preemption policy for OPPORTUNISTIC containers running on the NM. (Hitesh Sharma via asuresh)\n",
      "commitDate": "14/09/17 8:51 AM",
      "commitName": "4f8194430fc6a69d9cc99b78828fd7045d5683e8",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "12/09/17 4:10 PM",
      "commitNameOld": "2ae72692fc370267141a1ee55ef372ff62302b54",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 1.7,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   public void handle(ContainerSchedulerEvent event) {\n     switch (event.getType()) {\n     case SCHEDULE_CONTAINER:\n       scheduleContainer(event.getContainer());\n       break;\n+    case CONTAINER_PAUSED:\n     case CONTAINER_COMPLETED:\n-      onContainerCompleted(event.getContainer());\n+      onResourcesReclaimed(event.getContainer());\n       break;\n     case UPDATE_CONTAINER:\n       if (event instanceof UpdateContainerSchedulerEvent) {\n         onUpdateContainer((UpdateContainerSchedulerEvent) event);\n       } else {\n         LOG.error(\"Unknown event type on UpdateCOntainer: \" + event.getType());\n       }\n       break;\n     case SHED_QUEUED_CONTAINERS:\n       shedQueuedOpportunisticContainers();\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n           + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerSchedulerEvent event) {\n    switch (event.getType()) {\n    case SCHEDULE_CONTAINER:\n      scheduleContainer(event.getContainer());\n      break;\n    case CONTAINER_PAUSED:\n    case CONTAINER_COMPLETED:\n      onResourcesReclaimed(event.getContainer());\n      break;\n    case UPDATE_CONTAINER:\n      if (event instanceof UpdateContainerSchedulerEvent) {\n        onUpdateContainer((UpdateContainerSchedulerEvent) event);\n      } else {\n        LOG.error(\"Unknown event type on UpdateCOntainer: \" + event.getType());\n      }\n      break;\n    case SHED_QUEUED_CONTAINERS:\n      shedQueuedOpportunisticContainers();\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n          + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
      "extendedDetails": {}
    },
    "4d7be1d8575e9254c59d41460960708e3718503a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5978. ContainerScheduler and ContainerManager changes to support ExecType update. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "14/08/17 7:46 PM",
      "commitName": "4d7be1d8575e9254c59d41460960708e3718503a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "07/08/17 6:59 PM",
      "commitNameOld": "8d3fd81980275fa81e7a5539b1751f38a63b6911",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 7.03,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,23 @@\n   public void handle(ContainerSchedulerEvent event) {\n     switch (event.getType()) {\n     case SCHEDULE_CONTAINER:\n       scheduleContainer(event.getContainer());\n       break;\n     case CONTAINER_COMPLETED:\n       onContainerCompleted(event.getContainer());\n       break;\n+    case UPDATE_CONTAINER:\n+      if (event instanceof UpdateContainerSchedulerEvent) {\n+        onUpdateContainer((UpdateContainerSchedulerEvent) event);\n+      } else {\n+        LOG.error(\"Unknown event type on UpdateCOntainer: \" + event.getType());\n+      }\n+      break;\n     case SHED_QUEUED_CONTAINERS:\n       shedQueuedOpportunisticContainers();\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n           + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerSchedulerEvent event) {\n    switch (event.getType()) {\n    case SCHEDULE_CONTAINER:\n      scheduleContainer(event.getContainer());\n      break;\n    case CONTAINER_COMPLETED:\n      onContainerCompleted(event.getContainer());\n      break;\n    case UPDATE_CONTAINER:\n      if (event instanceof UpdateContainerSchedulerEvent) {\n        onUpdateContainer((UpdateContainerSchedulerEvent) event);\n      } else {\n        LOG.error(\"Unknown event type on UpdateCOntainer: \" + event.getType());\n      }\n      break;\n    case SHED_QUEUED_CONTAINERS:\n      shedQueuedOpportunisticContainers();\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n          + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
      "extendedDetails": {}
    },
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
      "commitDate": "15/11/16 7:56 AM",
      "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
          "commitDate": "15/11/16 7:56 AM",
          "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/11/16 2:11 AM",
          "commitNameOld": "7ffb9943b8838a3bb56684e0722db40d800743a2",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,16 @@\n-    public void handle(ApplicationEvent event) {\n-      if (event.getType() \u003d\u003d\n-          ApplicationEventType.APPLICATION_CONTAINER_FINISHED) {\n-        if (!(event instanceof ApplicationContainerFinishedEvent)) {\n-          throw new RuntimeException(\"Unexpected event type: \" + event);\n-        }\n-        ApplicationContainerFinishedEvent finishEvent \u003d\n-            (ApplicationContainerFinishedEvent) event;\n-        // Remove finished container from the allocated containers, and\n-        // attempt to start new containers.\n-        ContainerId contIdToRemove \u003d finishEvent.getContainerID();\n-        removeAllocatedContainer(contIdToRemove);\n-        opportunisticContainersToKill.remove(contIdToRemove);\n-        startPendingContainers();\n-      }\n-      this.applicationEventDispatcher.handle(event);\n-    }\n\\ No newline at end of file\n+  public void handle(ContainerSchedulerEvent event) {\n+    switch (event.getType()) {\n+    case SCHEDULE_CONTAINER:\n+      scheduleContainer(event.getContainer());\n+      break;\n+    case CONTAINER_COMPLETED:\n+      onContainerCompleted(event.getContainer());\n+      break;\n+    case SHED_QUEUED_CONTAINERS:\n+      shedQueuedOpportunisticContainers();\n+      break;\n+    default:\n+      LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n+          + event.toString());\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public void handle(ContainerSchedulerEvent event) {\n    switch (event.getType()) {\n    case SCHEDULE_CONTAINER:\n      scheduleContainer(event.getContainer());\n      break;\n    case CONTAINER_COMPLETED:\n      onContainerCompleted(event.getContainer());\n      break;\n    case SHED_QUEUED_CONTAINERS:\n      shedQueuedOpportunisticContainers();\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n          + event.toString());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/queuing/QueuingContainerManagerImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
            "oldMethodName": "handle",
            "newMethodName": "handle"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
          "commitDate": "15/11/16 7:56 AM",
          "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/11/16 2:11 AM",
          "commitNameOld": "7ffb9943b8838a3bb56684e0722db40d800743a2",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,16 @@\n-    public void handle(ApplicationEvent event) {\n-      if (event.getType() \u003d\u003d\n-          ApplicationEventType.APPLICATION_CONTAINER_FINISHED) {\n-        if (!(event instanceof ApplicationContainerFinishedEvent)) {\n-          throw new RuntimeException(\"Unexpected event type: \" + event);\n-        }\n-        ApplicationContainerFinishedEvent finishEvent \u003d\n-            (ApplicationContainerFinishedEvent) event;\n-        // Remove finished container from the allocated containers, and\n-        // attempt to start new containers.\n-        ContainerId contIdToRemove \u003d finishEvent.getContainerID();\n-        removeAllocatedContainer(contIdToRemove);\n-        opportunisticContainersToKill.remove(contIdToRemove);\n-        startPendingContainers();\n-      }\n-      this.applicationEventDispatcher.handle(event);\n-    }\n\\ No newline at end of file\n+  public void handle(ContainerSchedulerEvent event) {\n+    switch (event.getType()) {\n+    case SCHEDULE_CONTAINER:\n+      scheduleContainer(event.getContainer());\n+      break;\n+    case CONTAINER_COMPLETED:\n+      onContainerCompleted(event.getContainer());\n+      break;\n+    case SHED_QUEUED_CONTAINERS:\n+      shedQueuedOpportunisticContainers();\n+      break;\n+    default:\n+      LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n+          + event.toString());\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public void handle(ContainerSchedulerEvent event) {\n    switch (event.getType()) {\n    case SCHEDULE_CONTAINER:\n      scheduleContainer(event.getContainer());\n      break;\n    case CONTAINER_COMPLETED:\n      onContainerCompleted(event.getContainer());\n      break;\n    case SHED_QUEUED_CONTAINERS:\n      shedQueuedOpportunisticContainers();\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n          + event.toString());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
          "commitDate": "15/11/16 7:56 AM",
          "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/11/16 2:11 AM",
          "commitNameOld": "7ffb9943b8838a3bb56684e0722db40d800743a2",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,16 @@\n-    public void handle(ApplicationEvent event) {\n-      if (event.getType() \u003d\u003d\n-          ApplicationEventType.APPLICATION_CONTAINER_FINISHED) {\n-        if (!(event instanceof ApplicationContainerFinishedEvent)) {\n-          throw new RuntimeException(\"Unexpected event type: \" + event);\n-        }\n-        ApplicationContainerFinishedEvent finishEvent \u003d\n-            (ApplicationContainerFinishedEvent) event;\n-        // Remove finished container from the allocated containers, and\n-        // attempt to start new containers.\n-        ContainerId contIdToRemove \u003d finishEvent.getContainerID();\n-        removeAllocatedContainer(contIdToRemove);\n-        opportunisticContainersToKill.remove(contIdToRemove);\n-        startPendingContainers();\n-      }\n-      this.applicationEventDispatcher.handle(event);\n-    }\n\\ No newline at end of file\n+  public void handle(ContainerSchedulerEvent event) {\n+    switch (event.getType()) {\n+    case SCHEDULE_CONTAINER:\n+      scheduleContainer(event.getContainer());\n+      break;\n+    case CONTAINER_COMPLETED:\n+      onContainerCompleted(event.getContainer());\n+      break;\n+    case SHED_QUEUED_CONTAINERS:\n+      shedQueuedOpportunisticContainers();\n+      break;\n+    default:\n+      LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n+          + event.toString());\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public void handle(ContainerSchedulerEvent event) {\n    switch (event.getType()) {\n    case SCHEDULE_CONTAINER:\n      scheduleContainer(event.getContainer());\n      break;\n    case CONTAINER_COMPLETED:\n      onContainerCompleted(event.getContainer());\n      break;\n    case SHED_QUEUED_CONTAINERS:\n      shedQueuedOpportunisticContainers();\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at ContainerScheduler: \"\n          + event.toString());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {
            "oldValue": "[event-ApplicationEvent]",
            "newValue": "[event-ContainerSchedulerEvent]"
          }
        }
      ]
    },
    "c8172f5f143d2fefafa5a412899ab7cd081b406d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2883. Queuing of container requests in the NM. (Konstantinos Karanasos and Arun Suresh via kasha)\n",
      "commitDate": "20/04/16 9:55 AM",
      "commitName": "c8172f5f143d2fefafa5a412899ab7cd081b406d",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,17 @@\n+    public void handle(ApplicationEvent event) {\n+      if (event.getType() \u003d\u003d\n+          ApplicationEventType.APPLICATION_CONTAINER_FINISHED) {\n+        if (!(event instanceof ApplicationContainerFinishedEvent)) {\n+          throw new RuntimeException(\"Unexpected event type: \" + event);\n+        }\n+        ApplicationContainerFinishedEvent finishEvent \u003d\n+            (ApplicationContainerFinishedEvent) event;\n+        // Remove finished container from the allocated containers, and\n+        // attempt to start new containers.\n+        ContainerId contIdToRemove \u003d finishEvent.getContainerID();\n+        removeAllocatedContainer(contIdToRemove);\n+        opportunisticContainersToKill.remove(contIdToRemove);\n+        startPendingContainers();\n+      }\n+      this.applicationEventDispatcher.handle(event);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void handle(ApplicationEvent event) {\n      if (event.getType() \u003d\u003d\n          ApplicationEventType.APPLICATION_CONTAINER_FINISHED) {\n        if (!(event instanceof ApplicationContainerFinishedEvent)) {\n          throw new RuntimeException(\"Unexpected event type: \" + event);\n        }\n        ApplicationContainerFinishedEvent finishEvent \u003d\n            (ApplicationContainerFinishedEvent) event;\n        // Remove finished container from the allocated containers, and\n        // attempt to start new containers.\n        ContainerId contIdToRemove \u003d finishEvent.getContainerID();\n        removeAllocatedContainer(contIdToRemove);\n        opportunisticContainersToKill.remove(contIdToRemove);\n        startPendingContainers();\n      }\n      this.applicationEventDispatcher.handle(event);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/queuing/QueuingContainerManagerImpl.java"
    }
  }
}