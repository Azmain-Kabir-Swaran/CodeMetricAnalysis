{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StripedBlockUtil.java",
  "functionName": "divideByteRangeIntoStripes",
  "functionId": "divideByteRangeIntoStripes___ecPolicy-ErasureCodingPolicy__cellSize-int__blockGroup-LocatedStripedBlock__rangeStartInBlockGroup-long__rangeEndInBlockGroup-long__buf-ByteBuffer",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/util/StripedBlockUtil.java",
  "functionStartLine": 404,
  "functionEndLine": 431,
  "numCommitsSeen": 26,
  "timeTaken": 1685,
  "changeHistory": [
    "382967be51052d59e31d8d05713645b8d3c2325b",
    "401db4fc65140979fe7665983e36905e886df971"
  ],
  "changeHistoryShort": {
    "382967be51052d59e31d8d05713645b8d3c2325b": "Ybodychange",
    "401db4fc65140979fe7665983e36905e886df971": "Ymultichange(Yparameterchange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "382967be51052d59e31d8d05713645b8d3c2325b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14373. EC : Decoding is failing when block group last incomplete cell fall in to AlignedStripe. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "07/10/19 11:44 AM",
      "commitName": "382967be51052d59e31d8d05713645b8d3c2325b",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "11/01/19 10:54 AM",
      "commitNameOld": "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 268.99,
      "commitsBetweenForRepo": 2111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   public static AlignedStripe[] divideByteRangeIntoStripes(\n       ErasureCodingPolicy ecPolicy,\n       int cellSize, LocatedStripedBlock blockGroup,\n       long rangeStartInBlockGroup, long rangeEndInBlockGroup, ByteBuffer buf) {\n \n     // Step 0: analyze range and calculate basic parameters\n     final int dataBlkNum \u003d ecPolicy.getNumDataUnits();\n \n     // Step 1: map the byte range to StripingCells\n     StripingCell[] cells \u003d getStripingCellsOfByteRange(ecPolicy, cellSize,\n         blockGroup, rangeStartInBlockGroup, rangeEndInBlockGroup);\n \n     // Step 2: get the unmerged ranges on each internal block\n     VerticalRange[] ranges \u003d getRangesForInternalBlocks(ecPolicy, cellSize,\n         cells);\n \n     // Step 3: merge into at most 5 stripes\n-    AlignedStripe[] stripes \u003d mergeRangesForInternalBlocks(ecPolicy, ranges);\n+    AlignedStripe[] stripes \u003d mergeRangesForInternalBlocks(ecPolicy, ranges,\n+        blockGroup, cellSize);\n \n     // Step 4: calculate each chunk\u0027s position in destination buffer\n     calcualteChunkPositionsInBuf(cellSize, stripes, cells, buf);\n \n     // Step 5: prepare ALLZERO blocks\n     prepareAllZeroChunks(blockGroup, stripes, cellSize, dataBlkNum);\n \n     return stripes;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static AlignedStripe[] divideByteRangeIntoStripes(\n      ErasureCodingPolicy ecPolicy,\n      int cellSize, LocatedStripedBlock blockGroup,\n      long rangeStartInBlockGroup, long rangeEndInBlockGroup, ByteBuffer buf) {\n\n    // Step 0: analyze range and calculate basic parameters\n    final int dataBlkNum \u003d ecPolicy.getNumDataUnits();\n\n    // Step 1: map the byte range to StripingCells\n    StripingCell[] cells \u003d getStripingCellsOfByteRange(ecPolicy, cellSize,\n        blockGroup, rangeStartInBlockGroup, rangeEndInBlockGroup);\n\n    // Step 2: get the unmerged ranges on each internal block\n    VerticalRange[] ranges \u003d getRangesForInternalBlocks(ecPolicy, cellSize,\n        cells);\n\n    // Step 3: merge into at most 5 stripes\n    AlignedStripe[] stripes \u003d mergeRangesForInternalBlocks(ecPolicy, ranges,\n        blockGroup, cellSize);\n\n    // Step 4: calculate each chunk\u0027s position in destination buffer\n    calcualteChunkPositionsInBuf(cellSize, stripes, cells, buf);\n\n    // Step 5: prepare ALLZERO blocks\n    prepareAllZeroChunks(blockGroup, stripes, cellSize, dataBlkNum);\n\n    return stripes;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/util/StripedBlockUtil.java",
      "extendedDetails": {}
    },
    "401db4fc65140979fe7665983e36905e886df971": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8901. Use ByteBuffer in striping positional read. Contributed by Sammi Chen and Kai Zheng.\n",
      "commitDate": "08/09/16 11:54 AM",
      "commitName": "401db4fc65140979fe7665983e36905e886df971",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8901. Use ByteBuffer in striping positional read. Contributed by Sammi Chen and Kai Zheng.\n",
          "commitDate": "08/09/16 11:54 AM",
          "commitName": "401db4fc65140979fe7665983e36905e886df971",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "06/04/16 10:50 PM",
          "commitNameOld": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 154.54,
          "commitsBetweenForRepo": 1132,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  public static AlignedStripe[] divideByteRangeIntoStripes(ErasureCodingPolicy ecPolicy,\n+  public static AlignedStripe[] divideByteRangeIntoStripes(\n+      ErasureCodingPolicy ecPolicy,\n       int cellSize, LocatedStripedBlock blockGroup,\n-      long rangeStartInBlockGroup, long rangeEndInBlockGroup, byte[] buf,\n-      int offsetInBuf) {\n+      long rangeStartInBlockGroup, long rangeEndInBlockGroup, ByteBuffer buf) {\n \n     // Step 0: analyze range and calculate basic parameters\n     final int dataBlkNum \u003d ecPolicy.getNumDataUnits();\n \n     // Step 1: map the byte range to StripingCells\n     StripingCell[] cells \u003d getStripingCellsOfByteRange(ecPolicy, cellSize,\n         blockGroup, rangeStartInBlockGroup, rangeEndInBlockGroup);\n \n     // Step 2: get the unmerged ranges on each internal block\n     VerticalRange[] ranges \u003d getRangesForInternalBlocks(ecPolicy, cellSize,\n         cells);\n \n     // Step 3: merge into at most 5 stripes\n     AlignedStripe[] stripes \u003d mergeRangesForInternalBlocks(ecPolicy, ranges);\n \n     // Step 4: calculate each chunk\u0027s position in destination buffer\n-    calcualteChunkPositionsInBuf(cellSize, stripes, cells, buf, offsetInBuf);\n+    calcualteChunkPositionsInBuf(cellSize, stripes, cells, buf);\n \n     // Step 5: prepare ALLZERO blocks\n     prepareAllZeroChunks(blockGroup, stripes, cellSize, dataBlkNum);\n \n     return stripes;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AlignedStripe[] divideByteRangeIntoStripes(\n      ErasureCodingPolicy ecPolicy,\n      int cellSize, LocatedStripedBlock blockGroup,\n      long rangeStartInBlockGroup, long rangeEndInBlockGroup, ByteBuffer buf) {\n\n    // Step 0: analyze range and calculate basic parameters\n    final int dataBlkNum \u003d ecPolicy.getNumDataUnits();\n\n    // Step 1: map the byte range to StripingCells\n    StripingCell[] cells \u003d getStripingCellsOfByteRange(ecPolicy, cellSize,\n        blockGroup, rangeStartInBlockGroup, rangeEndInBlockGroup);\n\n    // Step 2: get the unmerged ranges on each internal block\n    VerticalRange[] ranges \u003d getRangesForInternalBlocks(ecPolicy, cellSize,\n        cells);\n\n    // Step 3: merge into at most 5 stripes\n    AlignedStripe[] stripes \u003d mergeRangesForInternalBlocks(ecPolicy, ranges);\n\n    // Step 4: calculate each chunk\u0027s position in destination buffer\n    calcualteChunkPositionsInBuf(cellSize, stripes, cells, buf);\n\n    // Step 5: prepare ALLZERO blocks\n    prepareAllZeroChunks(blockGroup, stripes, cellSize, dataBlkNum);\n\n    return stripes;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/util/StripedBlockUtil.java",
          "extendedDetails": {
            "oldValue": "[ecPolicy-ErasureCodingPolicy, cellSize-int, blockGroup-LocatedStripedBlock, rangeStartInBlockGroup-long, rangeEndInBlockGroup-long, buf-byte[], offsetInBuf-int]",
            "newValue": "[ecPolicy-ErasureCodingPolicy, cellSize-int, blockGroup-LocatedStripedBlock, rangeStartInBlockGroup-long, rangeEndInBlockGroup-long, buf-ByteBuffer]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8901. Use ByteBuffer in striping positional read. Contributed by Sammi Chen and Kai Zheng.\n",
          "commitDate": "08/09/16 11:54 AM",
          "commitName": "401db4fc65140979fe7665983e36905e886df971",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "06/04/16 10:50 PM",
          "commitNameOld": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 154.54,
          "commitsBetweenForRepo": 1132,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  public static AlignedStripe[] divideByteRangeIntoStripes(ErasureCodingPolicy ecPolicy,\n+  public static AlignedStripe[] divideByteRangeIntoStripes(\n+      ErasureCodingPolicy ecPolicy,\n       int cellSize, LocatedStripedBlock blockGroup,\n-      long rangeStartInBlockGroup, long rangeEndInBlockGroup, byte[] buf,\n-      int offsetInBuf) {\n+      long rangeStartInBlockGroup, long rangeEndInBlockGroup, ByteBuffer buf) {\n \n     // Step 0: analyze range and calculate basic parameters\n     final int dataBlkNum \u003d ecPolicy.getNumDataUnits();\n \n     // Step 1: map the byte range to StripingCells\n     StripingCell[] cells \u003d getStripingCellsOfByteRange(ecPolicy, cellSize,\n         blockGroup, rangeStartInBlockGroup, rangeEndInBlockGroup);\n \n     // Step 2: get the unmerged ranges on each internal block\n     VerticalRange[] ranges \u003d getRangesForInternalBlocks(ecPolicy, cellSize,\n         cells);\n \n     // Step 3: merge into at most 5 stripes\n     AlignedStripe[] stripes \u003d mergeRangesForInternalBlocks(ecPolicy, ranges);\n \n     // Step 4: calculate each chunk\u0027s position in destination buffer\n-    calcualteChunkPositionsInBuf(cellSize, stripes, cells, buf, offsetInBuf);\n+    calcualteChunkPositionsInBuf(cellSize, stripes, cells, buf);\n \n     // Step 5: prepare ALLZERO blocks\n     prepareAllZeroChunks(blockGroup, stripes, cellSize, dataBlkNum);\n \n     return stripes;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AlignedStripe[] divideByteRangeIntoStripes(\n      ErasureCodingPolicy ecPolicy,\n      int cellSize, LocatedStripedBlock blockGroup,\n      long rangeStartInBlockGroup, long rangeEndInBlockGroup, ByteBuffer buf) {\n\n    // Step 0: analyze range and calculate basic parameters\n    final int dataBlkNum \u003d ecPolicy.getNumDataUnits();\n\n    // Step 1: map the byte range to StripingCells\n    StripingCell[] cells \u003d getStripingCellsOfByteRange(ecPolicy, cellSize,\n        blockGroup, rangeStartInBlockGroup, rangeEndInBlockGroup);\n\n    // Step 2: get the unmerged ranges on each internal block\n    VerticalRange[] ranges \u003d getRangesForInternalBlocks(ecPolicy, cellSize,\n        cells);\n\n    // Step 3: merge into at most 5 stripes\n    AlignedStripe[] stripes \u003d mergeRangesForInternalBlocks(ecPolicy, ranges);\n\n    // Step 4: calculate each chunk\u0027s position in destination buffer\n    calcualteChunkPositionsInBuf(cellSize, stripes, cells, buf);\n\n    // Step 5: prepare ALLZERO blocks\n    prepareAllZeroChunks(blockGroup, stripes, cellSize, dataBlkNum);\n\n    return stripes;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/util/StripedBlockUtil.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}