{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "allocateContainersOnMultiNodes",
  "functionId": "allocateContainersOnMultiNodes___candidates-CandidateNodeSet__FiCaSchedulerNode__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 1722,
  "functionEndLine": 1750,
  "numCommitsSeen": 411,
  "timeTaken": 8640,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
    "09763925025a3709e6098186348e1afd80cb9f71",
    "c336af3847add969303c95ea5af2fb76e0c086ab",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": "Ybodychange",
    "09763925025a3709e6098186348e1afd80cb9f71": "Ybodychange",
    "c336af3847add969303c95ea5af2fb76e0c086ab": "Ybodychange",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": "Ymultichange(Yparameterchange,Ybodychange)",
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "19/03/20 12:25 AM",
      "commitNameOld": "f2d3ac2a3f27a849e00f529c5c2df6ef0bd82911",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 6.16,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private CSAssignment allocateContainersOnMultiNodes(\n       CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates) {\n     // When this time look at multiple nodes, try schedule if the\n     // partition has any available resource or killable resource\n     if (getRootQueue().getQueueCapacities().getUsedCapacity(\n         candidates.getPartition()) \u003e\u003d 1.0f\n         \u0026\u0026 preemptionManager.getKillableResource(\n         CapacitySchedulerConfiguration.ROOT, candidates.getPartition())\n         \u003d\u003d Resources.none()) {\n       // Try to allocate from reserved containers\n       for (FiCaSchedulerNode node : candidates.getAllNodes().values()) {\n         RMContainer reservedContainer \u003d node.getReservedContainer();\n         if (reservedContainer !\u003d null) {\n           allocateFromReservedContainer(node, false, reservedContainer);\n         }\n       }\n       LOG.debug(\"This partition \u0027{}\u0027 doesn\u0027t have available or \"\n           + \"killable resource\", candidates.getPartition());\n       ActivitiesLogger.QUEUE.recordQueueActivity(activitiesManager, null,\n-          \"\", getRootQueue().getQueueName(), ActivityState.REJECTED,\n+          \"\", getRootQueue().getQueuePath(), ActivityState.REJECTED,\n           ActivityDiagnosticConstant.\n               INIT_CHECK_PARTITION_RESOURCE_INSUFFICIENT);\n       ActivitiesLogger.NODE\n           .finishSkippedNodeAllocation(activitiesManager, null);\n       return null;\n     }\n \n     return allocateOrReserveNewContainers(candidates, false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CSAssignment allocateContainersOnMultiNodes(\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates) {\n    // When this time look at multiple nodes, try schedule if the\n    // partition has any available resource or killable resource\n    if (getRootQueue().getQueueCapacities().getUsedCapacity(\n        candidates.getPartition()) \u003e\u003d 1.0f\n        \u0026\u0026 preemptionManager.getKillableResource(\n        CapacitySchedulerConfiguration.ROOT, candidates.getPartition())\n        \u003d\u003d Resources.none()) {\n      // Try to allocate from reserved containers\n      for (FiCaSchedulerNode node : candidates.getAllNodes().values()) {\n        RMContainer reservedContainer \u003d node.getReservedContainer();\n        if (reservedContainer !\u003d null) {\n          allocateFromReservedContainer(node, false, reservedContainer);\n        }\n      }\n      LOG.debug(\"This partition \u0027{}\u0027 doesn\u0027t have available or \"\n          + \"killable resource\", candidates.getPartition());\n      ActivitiesLogger.QUEUE.recordQueueActivity(activitiesManager, null,\n          \"\", getRootQueue().getQueuePath(), ActivityState.REJECTED,\n          ActivityDiagnosticConstant.\n              INIT_CHECK_PARTITION_RESOURCE_INSUFFICIENT);\n      ActivitiesLogger.NODE\n          .finishSkippedNodeAllocation(activitiesManager, null);\n      return null;\n    }\n\n    return allocateOrReserveNewContainers(candidates, false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9664. Improve response of scheduler/app activities for better understanding. Contributed by Tao Yang.\n",
      "commitDate": "29/08/19 3:14 AM",
      "commitName": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "27/08/19 3:53 PM",
      "commitNameOld": "8ef46595da6aefe4458aa7181670c3d9b13e7ec6",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 1.47,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   private CSAssignment allocateContainersOnMultiNodes(\n       CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates) {\n     // When this time look at multiple nodes, try schedule if the\n     // partition has any available resource or killable resource\n     if (getRootQueue().getQueueCapacities().getUsedCapacity(\n         candidates.getPartition()) \u003e\u003d 1.0f\n         \u0026\u0026 preemptionManager.getKillableResource(\n         CapacitySchedulerConfiguration.ROOT, candidates.getPartition())\n         \u003d\u003d Resources.none()) {\n       // Try to allocate from reserved containers\n       for (FiCaSchedulerNode node : candidates.getAllNodes().values()) {\n         RMContainer reservedContainer \u003d node.getReservedContainer();\n         if (reservedContainer !\u003d null) {\n           allocateFromReservedContainer(node, false, reservedContainer);\n         }\n       }\n-      LOG.debug(\"This node or this node partition doesn\u0027t have available or \"\n-          + \"killable resource\");\n+      LOG.debug(\"This partition \u0027{}\u0027 doesn\u0027t have available or \"\n+          + \"killable resource\", candidates.getPartition());\n       ActivitiesLogger.QUEUE.recordQueueActivity(activitiesManager, null,\n           \"\", getRootQueue().getQueueName(), ActivityState.REJECTED,\n-          ActivityDiagnosticConstant.NOT_ABLE_TO_ACCESS_PARTITION + \" \"\n-              + candidates.getPartition());\n+          ActivityDiagnosticConstant.\n+              INIT_CHECK_PARTITION_RESOURCE_INSUFFICIENT);\n+      ActivitiesLogger.NODE\n+          .finishSkippedNodeAllocation(activitiesManager, null);\n       return null;\n     }\n \n     return allocateOrReserveNewContainers(candidates, false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CSAssignment allocateContainersOnMultiNodes(\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates) {\n    // When this time look at multiple nodes, try schedule if the\n    // partition has any available resource or killable resource\n    if (getRootQueue().getQueueCapacities().getUsedCapacity(\n        candidates.getPartition()) \u003e\u003d 1.0f\n        \u0026\u0026 preemptionManager.getKillableResource(\n        CapacitySchedulerConfiguration.ROOT, candidates.getPartition())\n        \u003d\u003d Resources.none()) {\n      // Try to allocate from reserved containers\n      for (FiCaSchedulerNode node : candidates.getAllNodes().values()) {\n        RMContainer reservedContainer \u003d node.getReservedContainer();\n        if (reservedContainer !\u003d null) {\n          allocateFromReservedContainer(node, false, reservedContainer);\n        }\n      }\n      LOG.debug(\"This partition \u0027{}\u0027 doesn\u0027t have available or \"\n          + \"killable resource\", candidates.getPartition());\n      ActivitiesLogger.QUEUE.recordQueueActivity(activitiesManager, null,\n          \"\", getRootQueue().getQueueName(), ActivityState.REJECTED,\n          ActivityDiagnosticConstant.\n              INIT_CHECK_PARTITION_RESOURCE_INSUFFICIENT);\n      ActivitiesLogger.NODE\n          .finishSkippedNodeAllocation(activitiesManager, null);\n      return null;\n    }\n\n    return allocateOrReserveNewContainers(candidates, false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "09763925025a3709e6098186348e1afd80cb9f71": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9590. Correct incompatible, incomplete and redundant activities. Contributed by Tao Yang.\n",
      "commitDate": "06/06/19 6:59 AM",
      "commitName": "09763925025a3709e6098186348e1afd80cb9f71",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "07/05/19 6:54 PM",
      "commitNameOld": "c336af3847add969303c95ea5af2fb76e0c086ab",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 29.5,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,27 @@\n   private CSAssignment allocateContainersOnMultiNodes(\n       CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates) {\n     // When this time look at multiple nodes, try schedule if the\n     // partition has any available resource or killable resource\n     if (getRootQueue().getQueueCapacities().getUsedCapacity(\n         candidates.getPartition()) \u003e\u003d 1.0f\n         \u0026\u0026 preemptionManager.getKillableResource(\n         CapacitySchedulerConfiguration.ROOT, candidates.getPartition())\n         \u003d\u003d Resources.none()) {\n       // Try to allocate from reserved containers\n       for (FiCaSchedulerNode node : candidates.getAllNodes().values()) {\n         RMContainer reservedContainer \u003d node.getReservedContainer();\n         if (reservedContainer !\u003d null) {\n           allocateFromReservedContainer(node, false, reservedContainer);\n         }\n       }\n       LOG.debug(\"This node or this node partition doesn\u0027t have available or \"\n           + \"killable resource\");\n+      ActivitiesLogger.QUEUE.recordQueueActivity(activitiesManager, null,\n+          \"\", getRootQueue().getQueueName(), ActivityState.REJECTED,\n+          ActivityDiagnosticConstant.NOT_ABLE_TO_ACCESS_PARTITION + \" \"\n+              + candidates.getPartition());\n       return null;\n     }\n \n     return allocateOrReserveNewContainers(candidates, false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CSAssignment allocateContainersOnMultiNodes(\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates) {\n    // When this time look at multiple nodes, try schedule if the\n    // partition has any available resource or killable resource\n    if (getRootQueue().getQueueCapacities().getUsedCapacity(\n        candidates.getPartition()) \u003e\u003d 1.0f\n        \u0026\u0026 preemptionManager.getKillableResource(\n        CapacitySchedulerConfiguration.ROOT, candidates.getPartition())\n        \u003d\u003d Resources.none()) {\n      // Try to allocate from reserved containers\n      for (FiCaSchedulerNode node : candidates.getAllNodes().values()) {\n        RMContainer reservedContainer \u003d node.getReservedContainer();\n        if (reservedContainer !\u003d null) {\n          allocateFromReservedContainer(node, false, reservedContainer);\n        }\n      }\n      LOG.debug(\"This node or this node partition doesn\u0027t have available or \"\n          + \"killable resource\");\n      ActivitiesLogger.QUEUE.recordQueueActivity(activitiesManager, null,\n          \"\", getRootQueue().getQueueName(), ActivityState.REJECTED,\n          ActivityDiagnosticConstant.NOT_ABLE_TO_ACCESS_PARTITION + \" \"\n              + candidates.getPartition());\n      return null;\n    }\n\n    return allocateOrReserveNewContainers(candidates, false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "c336af3847add969303c95ea5af2fb76e0c086ab": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9432. Reserved containers leak after its request has been cancelled or satisfied when multi-nodes enabled. Contributed by Tao Yang.\n",
      "commitDate": "07/05/19 6:54 PM",
      "commitName": "c336af3847add969303c95ea5af2fb76e0c086ab",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "23/04/19 12:40 PM",
      "commitNameOld": "c504eee0c29276a385ff68ce456f08150aa25e80",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 14.26,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,23 @@\n   private CSAssignment allocateContainersOnMultiNodes(\n       CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates) {\n     // When this time look at multiple nodes, try schedule if the\n     // partition has any available resource or killable resource\n     if (getRootQueue().getQueueCapacities().getUsedCapacity(\n         candidates.getPartition()) \u003e\u003d 1.0f\n         \u0026\u0026 preemptionManager.getKillableResource(\n         CapacitySchedulerConfiguration.ROOT, candidates.getPartition())\n         \u003d\u003d Resources.none()) {\n-      LOG.debug(\"This node or this node partition doesn\u0027t have available or\"\n+      // Try to allocate from reserved containers\n+      for (FiCaSchedulerNode node : candidates.getAllNodes().values()) {\n+        RMContainer reservedContainer \u003d node.getReservedContainer();\n+        if (reservedContainer !\u003d null) {\n+          allocateFromReservedContainer(node, false, reservedContainer);\n+        }\n+      }\n+      LOG.debug(\"This node or this node partition doesn\u0027t have available or \"\n           + \"killable resource\");\n       return null;\n     }\n \n     return allocateOrReserveNewContainers(candidates, false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CSAssignment allocateContainersOnMultiNodes(\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates) {\n    // When this time look at multiple nodes, try schedule if the\n    // partition has any available resource or killable resource\n    if (getRootQueue().getQueueCapacities().getUsedCapacity(\n        candidates.getPartition()) \u003e\u003d 1.0f\n        \u0026\u0026 preemptionManager.getKillableResource(\n        CapacitySchedulerConfiguration.ROOT, candidates.getPartition())\n        \u003d\u003d Resources.none()) {\n      // Try to allocate from reserved containers\n      for (FiCaSchedulerNode node : candidates.getAllNodes().values()) {\n        RMContainer reservedContainer \u003d node.getReservedContainer();\n        if (reservedContainer !\u003d null) {\n          allocateFromReservedContainer(node, false, reservedContainer);\n        }\n      }\n      LOG.debug(\"This node or this node partition doesn\u0027t have available or \"\n          + \"killable resource\");\n      return null;\n    }\n\n    return allocateOrReserveNewContainers(candidates, false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,16 @@\n   private CSAssignment allocateContainersOnMultiNodes(\n       CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates) {\n     // When this time look at multiple nodes, try schedule if the\n     // partition has any available resource or killable resource\n     if (getRootQueue().getQueueCapacities().getUsedCapacity(\n         candidates.getPartition()) \u003e\u003d 1.0f\n         \u0026\u0026 preemptionManager.getKillableResource(\n         CapacitySchedulerConfiguration.ROOT, candidates.getPartition())\n         \u003d\u003d Resources.none()) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"This node or this node partition doesn\u0027t have available or\"\n-            + \"killable resource\");\n-      }\n+      LOG.debug(\"This node or this node partition doesn\u0027t have available or\"\n+          + \"killable resource\");\n       return null;\n     }\n \n     return allocateOrReserveNewContainers(candidates, false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CSAssignment allocateContainersOnMultiNodes(\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates) {\n    // When this time look at multiple nodes, try schedule if the\n    // partition has any available resource or killable resource\n    if (getRootQueue().getQueueCapacities().getUsedCapacity(\n        candidates.getPartition()) \u003e\u003d 1.0f\n        \u0026\u0026 preemptionManager.getKillableResource(\n        CapacitySchedulerConfiguration.ROOT, candidates.getPartition())\n        \u003d\u003d Resources.none()) {\n      LOG.debug(\"This node or this node partition doesn\u0027t have available or\"\n          + \"killable resource\");\n      return null;\n    }\n\n    return allocateOrReserveNewContainers(candidates, false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
      "commitDate": "09/11/17 1:01 PM",
      "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
      "commitAuthor": "Konstantinos Karanasos",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
          "commitDate": "09/11/17 1:01 PM",
          "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
          "commitAuthor": "Konstantinos Karanasos",
          "commitDateOld": "09/11/17 10:49 AM",
          "commitNameOld": "a1382a18dff8a70aa25240d6fbba6e22832a7679",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,18 @@\n   private CSAssignment allocateContainersOnMultiNodes(\n-      PlacementSet\u003cFiCaSchedulerNode\u003e ps) {\n+      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates) {\n     // When this time look at multiple nodes, try schedule if the\n     // partition has any available resource or killable resource\n     if (getRootQueue().getQueueCapacities().getUsedCapacity(\n-        ps.getPartition()) \u003e\u003d 1.0f \u0026\u0026 preemptionManager.getKillableResource(\n-        CapacitySchedulerConfiguration.ROOT, ps.getPartition()) \u003d\u003d Resources\n-        .none()) {\n+        candidates.getPartition()) \u003e\u003d 1.0f\n+        \u0026\u0026 preemptionManager.getKillableResource(\n+        CapacitySchedulerConfiguration.ROOT, candidates.getPartition())\n+        \u003d\u003d Resources.none()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"This node or this node partition doesn\u0027t have available or\"\n             + \"killable resource\");\n       }\n       return null;\n     }\n \n-    return allocateOrReserveNewContainers(ps, false);\n+    return allocateOrReserveNewContainers(candidates, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CSAssignment allocateContainersOnMultiNodes(\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates) {\n    // When this time look at multiple nodes, try schedule if the\n    // partition has any available resource or killable resource\n    if (getRootQueue().getQueueCapacities().getUsedCapacity(\n        candidates.getPartition()) \u003e\u003d 1.0f\n        \u0026\u0026 preemptionManager.getKillableResource(\n        CapacitySchedulerConfiguration.ROOT, candidates.getPartition())\n        \u003d\u003d Resources.none()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"This node or this node partition doesn\u0027t have available or\"\n            + \"killable resource\");\n      }\n      return null;\n    }\n\n    return allocateOrReserveNewContainers(candidates, false);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[ps-PlacementSet\u003cFiCaSchedulerNode\u003e]",
            "newValue": "[candidates-CandidateNodeSet\u003cFiCaSchedulerNode\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
          "commitDate": "09/11/17 1:01 PM",
          "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
          "commitAuthor": "Konstantinos Karanasos",
          "commitDateOld": "09/11/17 10:49 AM",
          "commitNameOld": "a1382a18dff8a70aa25240d6fbba6e22832a7679",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,18 @@\n   private CSAssignment allocateContainersOnMultiNodes(\n-      PlacementSet\u003cFiCaSchedulerNode\u003e ps) {\n+      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates) {\n     // When this time look at multiple nodes, try schedule if the\n     // partition has any available resource or killable resource\n     if (getRootQueue().getQueueCapacities().getUsedCapacity(\n-        ps.getPartition()) \u003e\u003d 1.0f \u0026\u0026 preemptionManager.getKillableResource(\n-        CapacitySchedulerConfiguration.ROOT, ps.getPartition()) \u003d\u003d Resources\n-        .none()) {\n+        candidates.getPartition()) \u003e\u003d 1.0f\n+        \u0026\u0026 preemptionManager.getKillableResource(\n+        CapacitySchedulerConfiguration.ROOT, candidates.getPartition())\n+        \u003d\u003d Resources.none()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"This node or this node partition doesn\u0027t have available or\"\n             + \"killable resource\");\n       }\n       return null;\n     }\n \n-    return allocateOrReserveNewContainers(ps, false);\n+    return allocateOrReserveNewContainers(candidates, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CSAssignment allocateContainersOnMultiNodes(\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates) {\n    // When this time look at multiple nodes, try schedule if the\n    // partition has any available resource or killable resource\n    if (getRootQueue().getQueueCapacities().getUsedCapacity(\n        candidates.getPartition()) \u003e\u003d 1.0f\n        \u0026\u0026 preemptionManager.getKillableResource(\n        CapacitySchedulerConfiguration.ROOT, candidates.getPartition())\n        \u003d\u003d Resources.none()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"This node or this node partition doesn\u0027t have available or\"\n            + \"killable resource\");\n      }\n      return null;\n    }\n\n    return allocateOrReserveNewContainers(candidates, false);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5761. Separate QueueManager from Scheduler. (Xuan Gong via gtcarrera9)\n",
      "commitDate": "30/11/16 1:38 PM",
      "commitName": "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
      "commitAuthor": "Li Lu",
      "commitDateOld": "29/11/16 9:40 AM",
      "commitNameOld": "25f9872be63423ada6a18481eaad2888e731fdac",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   private CSAssignment allocateContainersOnMultiNodes(\n       PlacementSet\u003cFiCaSchedulerNode\u003e ps) {\n     // When this time look at multiple nodes, try schedule if the\n     // partition has any available resource or killable resource\n-    if (root.getQueueCapacities().getUsedCapacity(ps.getPartition()) \u003e\u003d 1.0f\n-        \u0026\u0026 preemptionManager.getKillableResource(\n+    if (getRootQueue().getQueueCapacities().getUsedCapacity(\n+        ps.getPartition()) \u003e\u003d 1.0f \u0026\u0026 preemptionManager.getKillableResource(\n         CapacitySchedulerConfiguration.ROOT, ps.getPartition()) \u003d\u003d Resources\n         .none()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"This node or this node partition doesn\u0027t have available or\"\n             + \"killable resource\");\n       }\n       return null;\n     }\n \n     return allocateOrReserveNewContainers(ps, false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CSAssignment allocateContainersOnMultiNodes(\n      PlacementSet\u003cFiCaSchedulerNode\u003e ps) {\n    // When this time look at multiple nodes, try schedule if the\n    // partition has any available resource or killable resource\n    if (getRootQueue().getQueueCapacities().getUsedCapacity(\n        ps.getPartition()) \u003e\u003d 1.0f \u0026\u0026 preemptionManager.getKillableResource(\n        CapacitySchedulerConfiguration.ROOT, ps.getPartition()) \u003d\u003d Resources\n        .none()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"This node or this node partition doesn\u0027t have available or\"\n            + \"killable resource\");\n      }\n      return null;\n    }\n\n    return allocateOrReserveNewContainers(ps, false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,17 @@\n+  private CSAssignment allocateContainersOnMultiNodes(\n+      PlacementSet\u003cFiCaSchedulerNode\u003e ps) {\n+    // When this time look at multiple nodes, try schedule if the\n+    // partition has any available resource or killable resource\n+    if (root.getQueueCapacities().getUsedCapacity(ps.getPartition()) \u003e\u003d 1.0f\n+        \u0026\u0026 preemptionManager.getKillableResource(\n+        CapacitySchedulerConfiguration.ROOT, ps.getPartition()) \u003d\u003d Resources\n+        .none()) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"This node or this node partition doesn\u0027t have available or\"\n+            + \"killable resource\");\n+      }\n+      return null;\n+    }\n+\n+    return allocateOrReserveNewContainers(ps, false);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private CSAssignment allocateContainersOnMultiNodes(\n      PlacementSet\u003cFiCaSchedulerNode\u003e ps) {\n    // When this time look at multiple nodes, try schedule if the\n    // partition has any available resource or killable resource\n    if (root.getQueueCapacities().getUsedCapacity(ps.getPartition()) \u003e\u003d 1.0f\n        \u0026\u0026 preemptionManager.getKillableResource(\n        CapacitySchedulerConfiguration.ROOT, ps.getPartition()) \u003d\u003d Resources\n        .none()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"This node or this node partition doesn\u0027t have available or\"\n            + \"killable resource\");\n      }\n      return null;\n    }\n\n    return allocateOrReserveNewContainers(ps, false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}