{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AllocationFileLoaderService.java",
  "functionName": "getAllocationFile",
  "functionId": "getAllocationFile___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
  "functionStartLine": 189,
  "functionEndLine": 214,
  "numCommitsSeen": 58,
  "timeTaken": 4599,
  "changeHistory": [
    "a7d72c523ae9d23fad5f2fcc4b40610731ce454a",
    "180b3c960bb693a68431c677d8c8b18821fb4361",
    "7a550448036c9d140d2c35c684cc8023ceb8880e",
    "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc",
    "aa2745abe596c610157f6e3be9c23ba8cc1e21d0",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c"
  ],
  "changeHistoryShort": {
    "a7d72c523ae9d23fad5f2fcc4b40610731ce454a": "Ymodifierchange",
    "180b3c960bb693a68431c677d8c8b18821fb4361": "Ymodifierchange",
    "7a550448036c9d140d2c35c684cc8023ceb8880e": "Ymultichange(Yreturntypechange,Yexceptionschange,Ybodychange)",
    "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "aa2745abe596c610157f6e3be9c23ba8cc1e21d0": "Ymultichange(Yreturntypechange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a7d72c523ae9d23fad5f2fcc4b40610731ce454a": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-10099. FS-CS converter: handle allow-undeclared-pools and user-as-default-queue properly and fix misc issues. Contributed by Peter Bacsko\n",
      "commitDate": "30/01/20 7:03 AM",
      "commitName": "a7d72c523ae9d23fad5f2fcc4b40610731ce454a",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "25/03/19 10:47 PM",
      "commitNameOld": "5257f50abb71905ef3068fd45541d00ce9e8f355",
      "commitAuthorOld": "yufei",
      "daysBetweenCommits": 310.39,
      "commitsBetweenForRepo": 1958,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n-  Path getAllocationFile(Configuration conf)\n+  public Path getAllocationFile(Configuration conf)\n       throws UnsupportedFileSystemException {\n     String allocFilePath \u003d conf.get(FairSchedulerConfiguration.ALLOCATION_FILE,\n         FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);\n     Path allocPath \u003d new Path(allocFilePath);\n     String allocPathScheme \u003d allocPath.toUri().getScheme();\n     if(allocPathScheme !\u003d null \u0026\u0026 !allocPathScheme.matches(SUPPORTED_FS_REGEX)){\n       throw new UnsupportedFileSystemException(\"Allocation file \"\n           + allocFilePath + \" uses an unsupported filesystem\");\n     } else if (!allocPath.isAbsolute()) {\n       URL url \u003d Thread.currentThread().getContextClassLoader()\n           .getResource(allocFilePath);\n       if (url \u003d\u003d null) {\n         LOG.warn(allocFilePath + \" not found on the classpath.\");\n         allocPath \u003d null;\n       } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n         throw new RuntimeException(\"Allocation file \" + url\n             + \" found on the classpath is not on the local filesystem.\");\n       } else {\n         allocPath \u003d new Path(url.getProtocol(), null, url.getPath());\n       }\n     } else if (allocPath.isAbsoluteAndSchemeAuthorityNull()){\n       allocPath \u003d new Path(\"file\", null, allocFilePath);\n     }\n     return allocPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Path getAllocationFile(Configuration conf)\n      throws UnsupportedFileSystemException {\n    String allocFilePath \u003d conf.get(FairSchedulerConfiguration.ALLOCATION_FILE,\n        FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);\n    Path allocPath \u003d new Path(allocFilePath);\n    String allocPathScheme \u003d allocPath.toUri().getScheme();\n    if(allocPathScheme !\u003d null \u0026\u0026 !allocPathScheme.matches(SUPPORTED_FS_REGEX)){\n      throw new UnsupportedFileSystemException(\"Allocation file \"\n          + allocFilePath + \" uses an unsupported filesystem\");\n    } else if (!allocPath.isAbsolute()) {\n      URL url \u003d Thread.currentThread().getContextClassLoader()\n          .getResource(allocFilePath);\n      if (url \u003d\u003d null) {\n        LOG.warn(allocFilePath + \" not found on the classpath.\");\n        allocPath \u003d null;\n      } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n        throw new RuntimeException(\"Allocation file \" + url\n            + \" found on the classpath is not on the local filesystem.\");\n      } else {\n        allocPath \u003d new Path(url.getProtocol(), null, url.getPath());\n      }\n    } else if (allocPath.isAbsoluteAndSchemeAuthorityNull()){\n      allocPath \u003d new Path(\"file\", null, allocFilePath);\n    }\n    return allocPath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[public]"
      }
    },
    "180b3c960bb693a68431c677d8c8b18821fb4361": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-8321. AllocationFileLoaderService.getAllocationFile() should be declared as VisibleForTest. (Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "11/06/18 11:19 AM",
      "commitName": "180b3c960bb693a68431c677d8c8b18821fb4361",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "11/06/18 11:16 AM",
      "commitNameOld": "676dcffff575fdf1c4b49aeae4e000bd60ca0a83",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n-  public Path getAllocationFile(Configuration conf)\n+  Path getAllocationFile(Configuration conf)\n       throws UnsupportedFileSystemException {\n     String allocFilePath \u003d conf.get(FairSchedulerConfiguration.ALLOCATION_FILE,\n         FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);\n     Path allocPath \u003d new Path(allocFilePath);\n     String allocPathScheme \u003d allocPath.toUri().getScheme();\n     if(allocPathScheme !\u003d null \u0026\u0026 !allocPathScheme.matches(SUPPORTED_FS_REGEX)){\n       throw new UnsupportedFileSystemException(\"Allocation file \"\n           + allocFilePath + \" uses an unsupported filesystem\");\n     } else if (!allocPath.isAbsolute()) {\n       URL url \u003d Thread.currentThread().getContextClassLoader()\n           .getResource(allocFilePath);\n       if (url \u003d\u003d null) {\n         LOG.warn(allocFilePath + \" not found on the classpath.\");\n         allocPath \u003d null;\n       } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n         throw new RuntimeException(\"Allocation file \" + url\n             + \" found on the classpath is not on the local filesystem.\");\n       } else {\n         allocPath \u003d new Path(url.getProtocol(), null, url.getPath());\n       }\n     } else if (allocPath.isAbsoluteAndSchemeAuthorityNull()){\n       allocPath \u003d new Path(\"file\", null, allocFilePath);\n     }\n     return allocPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Path getAllocationFile(Configuration conf)\n      throws UnsupportedFileSystemException {\n    String allocFilePath \u003d conf.get(FairSchedulerConfiguration.ALLOCATION_FILE,\n        FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);\n    Path allocPath \u003d new Path(allocFilePath);\n    String allocPathScheme \u003d allocPath.toUri().getScheme();\n    if(allocPathScheme !\u003d null \u0026\u0026 !allocPathScheme.matches(SUPPORTED_FS_REGEX)){\n      throw new UnsupportedFileSystemException(\"Allocation file \"\n          + allocFilePath + \" uses an unsupported filesystem\");\n    } else if (!allocPath.isAbsolute()) {\n      URL url \u003d Thread.currentThread().getContextClassLoader()\n          .getResource(allocFilePath);\n      if (url \u003d\u003d null) {\n        LOG.warn(allocFilePath + \" not found on the classpath.\");\n        allocPath \u003d null;\n      } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n        throw new RuntimeException(\"Allocation file \" + url\n            + \" found on the classpath is not on the local filesystem.\");\n      } else {\n        allocPath \u003d new Path(url.getProtocol(), null, url.getPath());\n      }\n    } else if (allocPath.isAbsoluteAndSchemeAuthorityNull()){\n      allocPath \u003d new Path(\"file\", null, allocFilePath);\n    }\n    return allocPath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[]"
      }
    },
    "7a550448036c9d140d2c35c684cc8023ceb8880e": {
      "type": "Ymultichange(Yreturntypechange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-7622. Allow fair-scheduler configuration on HDFS (gphillips via rkanter)\n",
      "commitDate": "03/01/18 3:31 PM",
      "commitName": "7a550448036c9d140d2c35c684cc8023ceb8880e",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-7622. Allow fair-scheduler configuration on HDFS (gphillips via rkanter)\n",
          "commitDate": "03/01/18 3:31 PM",
          "commitName": "7a550448036c9d140d2c35c684cc8023ceb8880e",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "05/10/17 11:51 PM",
          "commitNameOld": "99292adcefdc6b8f280b8e100605fb39f755c38a",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 89.69,
          "commitsBetweenForRepo": 643,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,26 @@\n-  public File getAllocationFile(Configuration conf) {\n+  public Path getAllocationFile(Configuration conf)\n+      throws UnsupportedFileSystemException {\n     String allocFilePath \u003d conf.get(FairSchedulerConfiguration.ALLOCATION_FILE,\n         FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);\n-    File allocFile \u003d new File(allocFilePath);\n-    if (!allocFile.isAbsolute()) {\n+    Path allocPath \u003d new Path(allocFilePath);\n+    String allocPathScheme \u003d allocPath.toUri().getScheme();\n+    if(allocPathScheme !\u003d null \u0026\u0026 !allocPathScheme.matches(SUPPORTED_FS_REGEX)){\n+      throw new UnsupportedFileSystemException(\"Allocation file \"\n+          + allocFilePath + \" uses an unsupported filesystem\");\n+    } else if (!allocPath.isAbsolute()) {\n       URL url \u003d Thread.currentThread().getContextClassLoader()\n           .getResource(allocFilePath);\n       if (url \u003d\u003d null) {\n         LOG.warn(allocFilePath + \" not found on the classpath.\");\n-        allocFile \u003d null;\n+        allocPath \u003d null;\n       } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n         throw new RuntimeException(\"Allocation file \" + url\n             + \" found on the classpath is not on the local filesystem.\");\n       } else {\n-        allocFile \u003d new File(url.getPath());\n+        allocPath \u003d new Path(url.getProtocol(), null, url.getPath());\n       }\n+    } else if (allocPath.isAbsoluteAndSchemeAuthorityNull()){\n+      allocPath \u003d new Path(\"file\", null, allocFilePath);\n     }\n-    return allocFile;\n+    return allocPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Path getAllocationFile(Configuration conf)\n      throws UnsupportedFileSystemException {\n    String allocFilePath \u003d conf.get(FairSchedulerConfiguration.ALLOCATION_FILE,\n        FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);\n    Path allocPath \u003d new Path(allocFilePath);\n    String allocPathScheme \u003d allocPath.toUri().getScheme();\n    if(allocPathScheme !\u003d null \u0026\u0026 !allocPathScheme.matches(SUPPORTED_FS_REGEX)){\n      throw new UnsupportedFileSystemException(\"Allocation file \"\n          + allocFilePath + \" uses an unsupported filesystem\");\n    } else if (!allocPath.isAbsolute()) {\n      URL url \u003d Thread.currentThread().getContextClassLoader()\n          .getResource(allocFilePath);\n      if (url \u003d\u003d null) {\n        LOG.warn(allocFilePath + \" not found on the classpath.\");\n        allocPath \u003d null;\n      } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n        throw new RuntimeException(\"Allocation file \" + url\n            + \" found on the classpath is not on the local filesystem.\");\n      } else {\n        allocPath \u003d new Path(url.getProtocol(), null, url.getPath());\n      }\n    } else if (allocPath.isAbsoluteAndSchemeAuthorityNull()){\n      allocPath \u003d new Path(\"file\", null, allocFilePath);\n    }\n    return allocPath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
          "extendedDetails": {
            "oldValue": "File",
            "newValue": "Path"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-7622. Allow fair-scheduler configuration on HDFS (gphillips via rkanter)\n",
          "commitDate": "03/01/18 3:31 PM",
          "commitName": "7a550448036c9d140d2c35c684cc8023ceb8880e",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "05/10/17 11:51 PM",
          "commitNameOld": "99292adcefdc6b8f280b8e100605fb39f755c38a",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 89.69,
          "commitsBetweenForRepo": 643,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,26 @@\n-  public File getAllocationFile(Configuration conf) {\n+  public Path getAllocationFile(Configuration conf)\n+      throws UnsupportedFileSystemException {\n     String allocFilePath \u003d conf.get(FairSchedulerConfiguration.ALLOCATION_FILE,\n         FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);\n-    File allocFile \u003d new File(allocFilePath);\n-    if (!allocFile.isAbsolute()) {\n+    Path allocPath \u003d new Path(allocFilePath);\n+    String allocPathScheme \u003d allocPath.toUri().getScheme();\n+    if(allocPathScheme !\u003d null \u0026\u0026 !allocPathScheme.matches(SUPPORTED_FS_REGEX)){\n+      throw new UnsupportedFileSystemException(\"Allocation file \"\n+          + allocFilePath + \" uses an unsupported filesystem\");\n+    } else if (!allocPath.isAbsolute()) {\n       URL url \u003d Thread.currentThread().getContextClassLoader()\n           .getResource(allocFilePath);\n       if (url \u003d\u003d null) {\n         LOG.warn(allocFilePath + \" not found on the classpath.\");\n-        allocFile \u003d null;\n+        allocPath \u003d null;\n       } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n         throw new RuntimeException(\"Allocation file \" + url\n             + \" found on the classpath is not on the local filesystem.\");\n       } else {\n-        allocFile \u003d new File(url.getPath());\n+        allocPath \u003d new Path(url.getProtocol(), null, url.getPath());\n       }\n+    } else if (allocPath.isAbsoluteAndSchemeAuthorityNull()){\n+      allocPath \u003d new Path(\"file\", null, allocFilePath);\n     }\n-    return allocFile;\n+    return allocPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Path getAllocationFile(Configuration conf)\n      throws UnsupportedFileSystemException {\n    String allocFilePath \u003d conf.get(FairSchedulerConfiguration.ALLOCATION_FILE,\n        FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);\n    Path allocPath \u003d new Path(allocFilePath);\n    String allocPathScheme \u003d allocPath.toUri().getScheme();\n    if(allocPathScheme !\u003d null \u0026\u0026 !allocPathScheme.matches(SUPPORTED_FS_REGEX)){\n      throw new UnsupportedFileSystemException(\"Allocation file \"\n          + allocFilePath + \" uses an unsupported filesystem\");\n    } else if (!allocPath.isAbsolute()) {\n      URL url \u003d Thread.currentThread().getContextClassLoader()\n          .getResource(allocFilePath);\n      if (url \u003d\u003d null) {\n        LOG.warn(allocFilePath + \" not found on the classpath.\");\n        allocPath \u003d null;\n      } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n        throw new RuntimeException(\"Allocation file \" + url\n            + \" found on the classpath is not on the local filesystem.\");\n      } else {\n        allocPath \u003d new Path(url.getProtocol(), null, url.getPath());\n      }\n    } else if (allocPath.isAbsoluteAndSchemeAuthorityNull()){\n      allocPath \u003d new Path(\"file\", null, allocFilePath);\n    }\n    return allocPath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[UnsupportedFileSystemException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7622. Allow fair-scheduler configuration on HDFS (gphillips via rkanter)\n",
          "commitDate": "03/01/18 3:31 PM",
          "commitName": "7a550448036c9d140d2c35c684cc8023ceb8880e",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "05/10/17 11:51 PM",
          "commitNameOld": "99292adcefdc6b8f280b8e100605fb39f755c38a",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 89.69,
          "commitsBetweenForRepo": 643,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,26 @@\n-  public File getAllocationFile(Configuration conf) {\n+  public Path getAllocationFile(Configuration conf)\n+      throws UnsupportedFileSystemException {\n     String allocFilePath \u003d conf.get(FairSchedulerConfiguration.ALLOCATION_FILE,\n         FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);\n-    File allocFile \u003d new File(allocFilePath);\n-    if (!allocFile.isAbsolute()) {\n+    Path allocPath \u003d new Path(allocFilePath);\n+    String allocPathScheme \u003d allocPath.toUri().getScheme();\n+    if(allocPathScheme !\u003d null \u0026\u0026 !allocPathScheme.matches(SUPPORTED_FS_REGEX)){\n+      throw new UnsupportedFileSystemException(\"Allocation file \"\n+          + allocFilePath + \" uses an unsupported filesystem\");\n+    } else if (!allocPath.isAbsolute()) {\n       URL url \u003d Thread.currentThread().getContextClassLoader()\n           .getResource(allocFilePath);\n       if (url \u003d\u003d null) {\n         LOG.warn(allocFilePath + \" not found on the classpath.\");\n-        allocFile \u003d null;\n+        allocPath \u003d null;\n       } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n         throw new RuntimeException(\"Allocation file \" + url\n             + \" found on the classpath is not on the local filesystem.\");\n       } else {\n-        allocFile \u003d new File(url.getPath());\n+        allocPath \u003d new Path(url.getProtocol(), null, url.getPath());\n       }\n+    } else if (allocPath.isAbsoluteAndSchemeAuthorityNull()){\n+      allocPath \u003d new Path(\"file\", null, allocFilePath);\n     }\n-    return allocFile;\n+    return allocPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Path getAllocationFile(Configuration conf)\n      throws UnsupportedFileSystemException {\n    String allocFilePath \u003d conf.get(FairSchedulerConfiguration.ALLOCATION_FILE,\n        FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);\n    Path allocPath \u003d new Path(allocFilePath);\n    String allocPathScheme \u003d allocPath.toUri().getScheme();\n    if(allocPathScheme !\u003d null \u0026\u0026 !allocPathScheme.matches(SUPPORTED_FS_REGEX)){\n      throw new UnsupportedFileSystemException(\"Allocation file \"\n          + allocFilePath + \" uses an unsupported filesystem\");\n    } else if (!allocPath.isAbsolute()) {\n      URL url \u003d Thread.currentThread().getContextClassLoader()\n          .getResource(allocFilePath);\n      if (url \u003d\u003d null) {\n        LOG.warn(allocFilePath + \" not found on the classpath.\");\n        allocPath \u003d null;\n      } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n        throw new RuntimeException(\"Allocation file \" + url\n            + \" found on the classpath is not on the local filesystem.\");\n      } else {\n        allocPath \u003d new Path(url.getProtocol(), null, url.getPath());\n      }\n    } else if (allocPath.isAbsoluteAndSchemeAuthorityNull()){\n      allocPath \u003d new Path(\"file\", null, allocFilePath);\n    }\n    return allocPath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
          "extendedDetails": {}
        }
      ]
    },
    "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-1403. Separate out configuration loading from QueueManager in the Fair Scheduler (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548006 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/13 7:26 PM",
      "commitName": "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc",
      "commitAuthor": "Sanford Ryza",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-1403. Separate out configuration loading from QueueManager in the Fair Scheduler (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548006 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/13 7:26 PM",
          "commitName": "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "04/12/13 6:59 PM",
          "commitNameOld": "950e0644b79e0c0514dd036dcf19b9645df0982f",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-  public File getAllocationFile() {\n-    String allocFilePath \u003d get(ALLOCATION_FILE, DEFAULT_ALLOCATION_FILE);\n+  public File getAllocationFile(Configuration conf) {\n+    String allocFilePath \u003d conf.get(FairSchedulerConfiguration.ALLOCATION_FILE,\n+        FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);\n     File allocFile \u003d new File(allocFilePath);\n     if (!allocFile.isAbsolute()) {\n       URL url \u003d Thread.currentThread().getContextClassLoader()\n           .getResource(allocFilePath);\n       if (url \u003d\u003d null) {\n         LOG.warn(allocFilePath + \" not found on the classpath.\");\n         allocFile \u003d null;\n       } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n         throw new RuntimeException(\"Allocation file \" + url\n             + \" found on the classpath is not on the local filesystem.\");\n       } else {\n         allocFile \u003d new File(url.getPath());\n       }\n     }\n     return allocFile;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public File getAllocationFile(Configuration conf) {\n    String allocFilePath \u003d conf.get(FairSchedulerConfiguration.ALLOCATION_FILE,\n        FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);\n    File allocFile \u003d new File(allocFilePath);\n    if (!allocFile.isAbsolute()) {\n      URL url \u003d Thread.currentThread().getContextClassLoader()\n          .getResource(allocFilePath);\n      if (url \u003d\u003d null) {\n        LOG.warn(allocFilePath + \" not found on the classpath.\");\n        allocFile \u003d null;\n      } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n        throw new RuntimeException(\"Allocation file \" + url\n            + \" found on the classpath is not on the local filesystem.\");\n      } else {\n        allocFile \u003d new File(url.getPath());\n      }\n    }\n    return allocFile;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairSchedulerConfiguration.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
            "oldMethodName": "getAllocationFile",
            "newMethodName": "getAllocationFile"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1403. Separate out configuration loading from QueueManager in the Fair Scheduler (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548006 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/13 7:26 PM",
          "commitName": "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "04/12/13 6:59 PM",
          "commitNameOld": "950e0644b79e0c0514dd036dcf19b9645df0982f",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-  public File getAllocationFile() {\n-    String allocFilePath \u003d get(ALLOCATION_FILE, DEFAULT_ALLOCATION_FILE);\n+  public File getAllocationFile(Configuration conf) {\n+    String allocFilePath \u003d conf.get(FairSchedulerConfiguration.ALLOCATION_FILE,\n+        FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);\n     File allocFile \u003d new File(allocFilePath);\n     if (!allocFile.isAbsolute()) {\n       URL url \u003d Thread.currentThread().getContextClassLoader()\n           .getResource(allocFilePath);\n       if (url \u003d\u003d null) {\n         LOG.warn(allocFilePath + \" not found on the classpath.\");\n         allocFile \u003d null;\n       } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n         throw new RuntimeException(\"Allocation file \" + url\n             + \" found on the classpath is not on the local filesystem.\");\n       } else {\n         allocFile \u003d new File(url.getPath());\n       }\n     }\n     return allocFile;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public File getAllocationFile(Configuration conf) {\n    String allocFilePath \u003d conf.get(FairSchedulerConfiguration.ALLOCATION_FILE,\n        FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);\n    File allocFile \u003d new File(allocFilePath);\n    if (!allocFile.isAbsolute()) {\n      URL url \u003d Thread.currentThread().getContextClassLoader()\n          .getResource(allocFilePath);\n      if (url \u003d\u003d null) {\n        LOG.warn(allocFilePath + \" not found on the classpath.\");\n        allocFile \u003d null;\n      } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n        throw new RuntimeException(\"Allocation file \" + url\n            + \" found on the classpath is not on the local filesystem.\");\n      } else {\n        allocFile \u003d new File(url.getPath());\n      }\n    }\n    return allocFile;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1403. Separate out configuration loading from QueueManager in the Fair Scheduler (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548006 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/13 7:26 PM",
          "commitName": "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "04/12/13 6:59 PM",
          "commitNameOld": "950e0644b79e0c0514dd036dcf19b9645df0982f",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-  public File getAllocationFile() {\n-    String allocFilePath \u003d get(ALLOCATION_FILE, DEFAULT_ALLOCATION_FILE);\n+  public File getAllocationFile(Configuration conf) {\n+    String allocFilePath \u003d conf.get(FairSchedulerConfiguration.ALLOCATION_FILE,\n+        FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);\n     File allocFile \u003d new File(allocFilePath);\n     if (!allocFile.isAbsolute()) {\n       URL url \u003d Thread.currentThread().getContextClassLoader()\n           .getResource(allocFilePath);\n       if (url \u003d\u003d null) {\n         LOG.warn(allocFilePath + \" not found on the classpath.\");\n         allocFile \u003d null;\n       } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n         throw new RuntimeException(\"Allocation file \" + url\n             + \" found on the classpath is not on the local filesystem.\");\n       } else {\n         allocFile \u003d new File(url.getPath());\n       }\n     }\n     return allocFile;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public File getAllocationFile(Configuration conf) {\n    String allocFilePath \u003d conf.get(FairSchedulerConfiguration.ALLOCATION_FILE,\n        FairSchedulerConfiguration.DEFAULT_ALLOCATION_FILE);\n    File allocFile \u003d new File(allocFilePath);\n    if (!allocFile.isAbsolute()) {\n      URL url \u003d Thread.currentThread().getContextClassLoader()\n          .getResource(allocFilePath);\n      if (url \u003d\u003d null) {\n        LOG.warn(allocFilePath + \" not found on the classpath.\");\n        allocFile \u003d null;\n      } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n        throw new RuntimeException(\"Allocation file \" + url\n            + \" found on the classpath is not on the local filesystem.\");\n      } else {\n        allocFile \u003d new File(url.getPath());\n      }\n    }\n    return allocFile;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/AllocationFileLoaderService.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[conf-Configuration]"
          }
        }
      ]
    },
    "aa2745abe596c610157f6e3be9c23ba8cc1e21d0": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-1228. Clean up Fair Scheduler configuration loading. (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528201 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/10/13 1:14 PM",
      "commitName": "aa2745abe596c610157f6e3be9c23ba8cc1e21d0",
      "commitAuthor": "Sanford Ryza",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-1228. Clean up Fair Scheduler configuration loading. (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528201 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/10/13 1:14 PM",
          "commitName": "aa2745abe596c610157f6e3be9c23ba8cc1e21d0",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "01/10/13 12:54 PM",
          "commitNameOld": "ae05623a75803d4e12a902ac4a24187540f56699",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,18 @@\n-  public String getAllocationFile() {\n-    return get(ALLOCATION_FILE);\n+  public File getAllocationFile() {\n+    String allocFilePath \u003d get(ALLOCATION_FILE, DEFAULT_ALLOCATION_FILE);\n+    File allocFile \u003d new File(allocFilePath);\n+    if (!allocFile.isAbsolute()) {\n+      URL url \u003d Thread.currentThread().getContextClassLoader()\n+          .getResource(allocFilePath);\n+      if (url \u003d\u003d null) {\n+        LOG.warn(allocFilePath + \" not found on the classpath.\");\n+        allocFile \u003d null;\n+      } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n+        throw new RuntimeException(\"Allocation file \" + url\n+            + \" found on the classpath is not on the local filesystem.\");\n+      } else {\n+        allocFile \u003d new File(url.getPath());\n+      }\n+    }\n+    return allocFile;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public File getAllocationFile() {\n    String allocFilePath \u003d get(ALLOCATION_FILE, DEFAULT_ALLOCATION_FILE);\n    File allocFile \u003d new File(allocFilePath);\n    if (!allocFile.isAbsolute()) {\n      URL url \u003d Thread.currentThread().getContextClassLoader()\n          .getResource(allocFilePath);\n      if (url \u003d\u003d null) {\n        LOG.warn(allocFilePath + \" not found on the classpath.\");\n        allocFile \u003d null;\n      } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n        throw new RuntimeException(\"Allocation file \" + url\n            + \" found on the classpath is not on the local filesystem.\");\n      } else {\n        allocFile \u003d new File(url.getPath());\n      }\n    }\n    return allocFile;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairSchedulerConfiguration.java",
          "extendedDetails": {
            "oldValue": "String",
            "newValue": "File"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1228. Clean up Fair Scheduler configuration loading. (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528201 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/10/13 1:14 PM",
          "commitName": "aa2745abe596c610157f6e3be9c23ba8cc1e21d0",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "01/10/13 12:54 PM",
          "commitNameOld": "ae05623a75803d4e12a902ac4a24187540f56699",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,18 @@\n-  public String getAllocationFile() {\n-    return get(ALLOCATION_FILE);\n+  public File getAllocationFile() {\n+    String allocFilePath \u003d get(ALLOCATION_FILE, DEFAULT_ALLOCATION_FILE);\n+    File allocFile \u003d new File(allocFilePath);\n+    if (!allocFile.isAbsolute()) {\n+      URL url \u003d Thread.currentThread().getContextClassLoader()\n+          .getResource(allocFilePath);\n+      if (url \u003d\u003d null) {\n+        LOG.warn(allocFilePath + \" not found on the classpath.\");\n+        allocFile \u003d null;\n+      } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n+        throw new RuntimeException(\"Allocation file \" + url\n+            + \" found on the classpath is not on the local filesystem.\");\n+      } else {\n+        allocFile \u003d new File(url.getPath());\n+      }\n+    }\n+    return allocFile;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public File getAllocationFile() {\n    String allocFilePath \u003d get(ALLOCATION_FILE, DEFAULT_ALLOCATION_FILE);\n    File allocFile \u003d new File(allocFilePath);\n    if (!allocFile.isAbsolute()) {\n      URL url \u003d Thread.currentThread().getContextClassLoader()\n          .getResource(allocFilePath);\n      if (url \u003d\u003d null) {\n        LOG.warn(allocFilePath + \" not found on the classpath.\");\n        allocFile \u003d null;\n      } else if (!url.getProtocol().equalsIgnoreCase(\"file\")) {\n        throw new RuntimeException(\"Allocation file \" + url\n            + \" found on the classpath is not on the local filesystem.\");\n      } else {\n        allocFile \u003d new File(url.getPath());\n      }\n    }\n    return allocFile;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairSchedulerConfiguration.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String getAllocationFile() {\n    return get(ALLOCATION_FILE);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairSchedulerConfiguration.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairSchedulerConfiguration.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairSchedulerConfiguration.java"
      }
    },
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3451. Port Fair Scheduler to MR2 (pwendell via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1361020 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 5:43 PM",
      "commitName": "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,3 @@\n+  public String getAllocationFile() {\n+    return get(ALLOCATION_FILE);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String getAllocationFile() {\n    return get(ALLOCATION_FILE);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairSchedulerConfiguration.java"
    }
  }
}