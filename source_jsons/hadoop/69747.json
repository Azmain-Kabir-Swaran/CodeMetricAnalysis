{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SharedKeyCredentials.java",
  "functionName": "addCanonicalizedHeaders",
  "functionId": "addCanonicalizedHeaders___conn-HttpURLConnection(modifiers-final)__canonicalizedString-StringBuilder(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SharedKeyCredentials.java",
  "functionStartLine": 120,
  "functionEndLine": 167,
  "numCommitsSeen": 4,
  "timeTaken": 447,
  "changeHistory": [
    "f044deedbbfee0812316d587139cb828f27172e9"
  ],
  "changeHistoryShort": {
    "f044deedbbfee0812316d587139cb828f27172e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f044deedbbfee0812316d587139cb828f27172e9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15407. HADOOP-15540. Support Windows Azure Storage - Blob file system \"ABFS\" in Hadoop: Core Commit.\n\nContributed by Shane Mainali, Thomas Marquardt, Zichen Sun, Georgi Chalakov, Esfandiar Manii, Amit Singh, Dana Kaban, Da Zhou, Junhua Gu, Saher Ahwal, Saurabh Pant, James Baker, Shaoyu Zhang, Lawrence Chen, Kevin Chen and Steve Loughran\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,48 @@\n+  private static void addCanonicalizedHeaders(final HttpURLConnection conn, final StringBuilder canonicalizedString) {\n+    // Look for header names that start with\n+    // HeaderNames.PrefixForStorageHeader\n+    // Then sort them in case-insensitive manner.\n+\n+    final Map\u003cString, List\u003cString\u003e\u003e headers \u003d conn.getRequestProperties();\n+    final ArrayList\u003cString\u003e httpStorageHeaderNameArray \u003d new ArrayList\u003cString\u003e();\n+\n+    for (final String key : headers.keySet()) {\n+      if (key.toLowerCase(Locale.ROOT).startsWith(AbfsHttpConstants.HTTP_HEADER_PREFIX)) {\n+        httpStorageHeaderNameArray.add(key.toLowerCase(Locale.ROOT));\n+      }\n+    }\n+\n+    Collections.sort(httpStorageHeaderNameArray);\n+\n+    // Now go through each header\u0027s values in the sorted order and append\n+    // them to the canonicalized string.\n+    for (final String key : httpStorageHeaderNameArray) {\n+      final StringBuilder canonicalizedElement \u003d new StringBuilder(key);\n+      String delimiter \u003d \":\";\n+      final ArrayList\u003cString\u003e values \u003d getHeaderValues(headers, key);\n+\n+      boolean appendCanonicalizedElement \u003d false;\n+      // Go through values, unfold them, and then append them to the\n+      // canonicalized element string.\n+      for (final String value : values) {\n+        if (value !\u003d null) {\n+          appendCanonicalizedElement \u003d true;\n+        }\n+\n+        // Unfolding is simply removal of CRLF.\n+        final String unfoldedValue \u003d CRLF.matcher(value)\n+            .replaceAll(Matcher.quoteReplacement(\"\"));\n+\n+        // Append it to the canonicalized element string.\n+        canonicalizedElement.append(delimiter);\n+        canonicalizedElement.append(unfoldedValue);\n+        delimiter \u003d \",\";\n+      }\n+\n+      // Now, add this canonicalized element to the canonicalized header\n+      // string.\n+      if (appendCanonicalizedElement) {\n+        appendCanonicalizedElement(canonicalizedString, canonicalizedElement.toString());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void addCanonicalizedHeaders(final HttpURLConnection conn, final StringBuilder canonicalizedString) {\n    // Look for header names that start with\n    // HeaderNames.PrefixForStorageHeader\n    // Then sort them in case-insensitive manner.\n\n    final Map\u003cString, List\u003cString\u003e\u003e headers \u003d conn.getRequestProperties();\n    final ArrayList\u003cString\u003e httpStorageHeaderNameArray \u003d new ArrayList\u003cString\u003e();\n\n    for (final String key : headers.keySet()) {\n      if (key.toLowerCase(Locale.ROOT).startsWith(AbfsHttpConstants.HTTP_HEADER_PREFIX)) {\n        httpStorageHeaderNameArray.add(key.toLowerCase(Locale.ROOT));\n      }\n    }\n\n    Collections.sort(httpStorageHeaderNameArray);\n\n    // Now go through each header\u0027s values in the sorted order and append\n    // them to the canonicalized string.\n    for (final String key : httpStorageHeaderNameArray) {\n      final StringBuilder canonicalizedElement \u003d new StringBuilder(key);\n      String delimiter \u003d \":\";\n      final ArrayList\u003cString\u003e values \u003d getHeaderValues(headers, key);\n\n      boolean appendCanonicalizedElement \u003d false;\n      // Go through values, unfold them, and then append them to the\n      // canonicalized element string.\n      for (final String value : values) {\n        if (value !\u003d null) {\n          appendCanonicalizedElement \u003d true;\n        }\n\n        // Unfolding is simply removal of CRLF.\n        final String unfoldedValue \u003d CRLF.matcher(value)\n            .replaceAll(Matcher.quoteReplacement(\"\"));\n\n        // Append it to the canonicalized element string.\n        canonicalizedElement.append(delimiter);\n        canonicalizedElement.append(unfoldedValue);\n        delimiter \u003d \",\";\n      }\n\n      // Now, add this canonicalized element to the canonicalized header\n      // string.\n      if (appendCanonicalizedElement) {\n        appendCanonicalizedElement(canonicalizedString, canonicalizedElement.toString());\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/SharedKeyCredentials.java"
    }
  }
}