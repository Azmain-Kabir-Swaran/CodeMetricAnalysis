{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistributedCacheEmulator.java",
  "functionName": "updateHDFSDistCacheFilesList",
  "functionId": "updateHDFSDistCacheFilesList___jobdesc-JobStory",
  "sourceFilePath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
  "functionStartLine": 312,
  "functionEndLine": 358,
  "numCommitsSeen": 9,
  "timeTaken": 5089,
  "changeHistory": [
    "736eb17a796a1c1ad5f4db2c6a64f6752db7bec3",
    "dcf84707ab50662add112bd6b01c0bfd63374853",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "736eb17a796a1c1ad5f4db2c6a64f6752db7bec3": "Ybodychange",
    "dcf84707ab50662add112bd6b01c0bfd63374853": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "736eb17a796a1c1ad5f4db2c6a64f6752db7bec3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12731. Remove useless boxing/unboxing code. Contributed by Kousuke Saruta.\n",
      "commitDate": "24/01/16 8:47 PM",
      "commitName": "736eb17a796a1c1ad5f4db2c6a64f6752db7bec3",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "12/01/15 9:22 PM",
      "commitNameOld": "c4cba6165a3afbf4f1f8ff6b7f11286772d70d6f",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 376.98,
      "commitsBetweenForRepo": 3058,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   void updateHDFSDistCacheFilesList(JobStory jobdesc) throws IOException {\n \n     // Map original job\u0027s distributed cache file paths to simulated cluster\u0027s\n     // paths, to be used by this simulated job.\n     JobConf jobConf \u003d jobdesc.getJobConf();\n \n     String[] files \u003d jobConf.getStrings(MRJobConfig.CACHE_FILES);\n     if (files !\u003d null) {\n \n       String[] fileSizes \u003d jobConf.getStrings(MRJobConfig.CACHE_FILES_SIZES);\n       String[] visibilities \u003d\n         jobConf.getStrings(MRJobConfig.CACHE_FILE_VISIBILITIES);\n       String[] timeStamps \u003d\n         jobConf.getStrings(MRJobConfig.CACHE_FILE_TIMESTAMPS);\n \n       FileSystem fs \u003d FileSystem.get(conf);\n       String user \u003d jobConf.getUser();\n       for (int i \u003d 0; i \u003c files.length; i++) {\n         // Check if visibilities are available because older hadoop versions\n         // didn\u0027t have public, private Distributed Caches separately.\n         boolean visibility \u003d\n-            (visibilities \u003d\u003d null) ? true : Boolean.valueOf(visibilities[i]);\n+            (visibilities \u003d\u003d null) || Boolean.parseBoolean(visibilities[i]);\n         if (isLocalDistCacheFile(files[i], user, visibility)) {\n           // local FS based distributed cache file.\n           // Create this file on the pseudo local FS on the fly (i.e. when the\n           // simulated job is submitted).\n           continue;\n         }\n         // distributed cache file on hdfs\n         String mappedPath \u003d mapDistCacheFilePath(files[i], timeStamps[i],\n                                                  visibility, user);\n \n         // No need to add a distributed cache file path to the list if\n         // (1) the mapped path is already there in the list OR\n         // (2) the file with the mapped path already exists.\n         // In any of the above 2 cases, file paths, timestamps, file sizes and\n         // visibilities match. File sizes should match if file paths and\n         // timestamps match because single file path with single timestamp\n         // should correspond to a single file size.\n         if (distCacheFiles.containsKey(mappedPath) ||\n             fs.exists(new Path(mappedPath))) {\n           continue;\n         }\n         distCacheFiles.put(mappedPath, Long.valueOf(fileSizes[i]));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void updateHDFSDistCacheFilesList(JobStory jobdesc) throws IOException {\n\n    // Map original job\u0027s distributed cache file paths to simulated cluster\u0027s\n    // paths, to be used by this simulated job.\n    JobConf jobConf \u003d jobdesc.getJobConf();\n\n    String[] files \u003d jobConf.getStrings(MRJobConfig.CACHE_FILES);\n    if (files !\u003d null) {\n\n      String[] fileSizes \u003d jobConf.getStrings(MRJobConfig.CACHE_FILES_SIZES);\n      String[] visibilities \u003d\n        jobConf.getStrings(MRJobConfig.CACHE_FILE_VISIBILITIES);\n      String[] timeStamps \u003d\n        jobConf.getStrings(MRJobConfig.CACHE_FILE_TIMESTAMPS);\n\n      FileSystem fs \u003d FileSystem.get(conf);\n      String user \u003d jobConf.getUser();\n      for (int i \u003d 0; i \u003c files.length; i++) {\n        // Check if visibilities are available because older hadoop versions\n        // didn\u0027t have public, private Distributed Caches separately.\n        boolean visibility \u003d\n            (visibilities \u003d\u003d null) || Boolean.parseBoolean(visibilities[i]);\n        if (isLocalDistCacheFile(files[i], user, visibility)) {\n          // local FS based distributed cache file.\n          // Create this file on the pseudo local FS on the fly (i.e. when the\n          // simulated job is submitted).\n          continue;\n        }\n        // distributed cache file on hdfs\n        String mappedPath \u003d mapDistCacheFilePath(files[i], timeStamps[i],\n                                                 visibility, user);\n\n        // No need to add a distributed cache file path to the list if\n        // (1) the mapped path is already there in the list OR\n        // (2) the file with the mapped path already exists.\n        // In any of the above 2 cases, file paths, timestamps, file sizes and\n        // visibilities match. File sizes should match if file paths and\n        // timestamps match because single file path with single timestamp\n        // should correspond to a single file size.\n        if (distCacheFiles.containsKey(mappedPath) ||\n            fs.exists(new Path(mappedPath))) {\n          continue;\n        }\n        distCacheFiles.put(mappedPath, Long.valueOf(fileSizes[i]));\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
      "extendedDetails": {}
    },
    "dcf84707ab50662add112bd6b01c0bfd63374853": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3543. Mavenize Gridmix. (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/05/12 8:06 AM",
      "commitName": "dcf84707ab50662add112bd6b01c0bfd63374853",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "17/05/12 7:20 AM",
      "commitNameOld": "e1f09365ca0bee093f849fcf2e546dd6e2c0a965",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void updateHDFSDistCacheFilesList(JobStory jobdesc) throws IOException {\n\n    // Map original job\u0027s distributed cache file paths to simulated cluster\u0027s\n    // paths, to be used by this simulated job.\n    JobConf jobConf \u003d jobdesc.getJobConf();\n\n    String[] files \u003d jobConf.getStrings(MRJobConfig.CACHE_FILES);\n    if (files !\u003d null) {\n\n      String[] fileSizes \u003d jobConf.getStrings(MRJobConfig.CACHE_FILES_SIZES);\n      String[] visibilities \u003d\n        jobConf.getStrings(MRJobConfig.CACHE_FILE_VISIBILITIES);\n      String[] timeStamps \u003d\n        jobConf.getStrings(MRJobConfig.CACHE_FILE_TIMESTAMPS);\n\n      FileSystem fs \u003d FileSystem.get(conf);\n      String user \u003d jobConf.getUser();\n      for (int i \u003d 0; i \u003c files.length; i++) {\n        // Check if visibilities are available because older hadoop versions\n        // didn\u0027t have public, private Distributed Caches separately.\n        boolean visibility \u003d\n            (visibilities \u003d\u003d null) ? true : Boolean.valueOf(visibilities[i]);\n        if (isLocalDistCacheFile(files[i], user, visibility)) {\n          // local FS based distributed cache file.\n          // Create this file on the pseudo local FS on the fly (i.e. when the\n          // simulated job is submitted).\n          continue;\n        }\n        // distributed cache file on hdfs\n        String mappedPath \u003d mapDistCacheFilePath(files[i], timeStamps[i],\n                                                 visibility, user);\n\n        // No need to add a distributed cache file path to the list if\n        // (1) the mapped path is already there in the list OR\n        // (2) the file with the mapped path already exists.\n        // In any of the above 2 cases, file paths, timestamps, file sizes and\n        // visibilities match. File sizes should match if file paths and\n        // timestamps match because single file path with single timestamp\n        // should correspond to a single file size.\n        if (distCacheFiles.containsKey(mappedPath) ||\n            fs.exists(new Path(mappedPath))) {\n          continue;\n        }\n        distCacheFiles.put(mappedPath, Long.valueOf(fileSizes[i]));\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
        "newPath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void updateHDFSDistCacheFilesList(JobStory jobdesc) throws IOException {\n\n    // Map original job\u0027s distributed cache file paths to simulated cluster\u0027s\n    // paths, to be used by this simulated job.\n    JobConf jobConf \u003d jobdesc.getJobConf();\n\n    String[] files \u003d jobConf.getStrings(MRJobConfig.CACHE_FILES);\n    if (files !\u003d null) {\n\n      String[] fileSizes \u003d jobConf.getStrings(MRJobConfig.CACHE_FILES_SIZES);\n      String[] visibilities \u003d\n        jobConf.getStrings(MRJobConfig.CACHE_FILE_VISIBILITIES);\n      String[] timeStamps \u003d\n        jobConf.getStrings(MRJobConfig.CACHE_FILE_TIMESTAMPS);\n\n      FileSystem fs \u003d FileSystem.get(conf);\n      String user \u003d jobConf.getUser();\n      for (int i \u003d 0; i \u003c files.length; i++) {\n        // Check if visibilities are available because older hadoop versions\n        // didn\u0027t have public, private Distributed Caches separately.\n        boolean visibility \u003d\n            (visibilities \u003d\u003d null) ? true : Boolean.valueOf(visibilities[i]);\n        if (isLocalDistCacheFile(files[i], user, visibility)) {\n          // local FS based distributed cache file.\n          // Create this file on the pseudo local FS on the fly (i.e. when the\n          // simulated job is submitted).\n          continue;\n        }\n        // distributed cache file on hdfs\n        String mappedPath \u003d mapDistCacheFilePath(files[i], timeStamps[i],\n                                                 visibility, user);\n\n        // No need to add a distributed cache file path to the list if\n        // (1) the mapped path is already there in the list OR\n        // (2) the file with the mapped path already exists.\n        // In any of the above 2 cases, file paths, timestamps, file sizes and\n        // visibilities match. File sizes should match if file paths and\n        // timestamps match because single file path with single timestamp\n        // should correspond to a single file size.\n        if (distCacheFiles.containsKey(mappedPath) ||\n            fs.exists(new Path(mappedPath))) {\n          continue;\n        }\n        distCacheFiles.put(mappedPath, Long.valueOf(fileSizes[i]));\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
        "newPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void updateHDFSDistCacheFilesList(JobStory jobdesc) throws IOException {\n\n    // Map original job\u0027s distributed cache file paths to simulated cluster\u0027s\n    // paths, to be used by this simulated job.\n    JobConf jobConf \u003d jobdesc.getJobConf();\n\n    String[] files \u003d jobConf.getStrings(MRJobConfig.CACHE_FILES);\n    if (files !\u003d null) {\n\n      String[] fileSizes \u003d jobConf.getStrings(MRJobConfig.CACHE_FILES_SIZES);\n      String[] visibilities \u003d\n        jobConf.getStrings(MRJobConfig.CACHE_FILE_VISIBILITIES);\n      String[] timeStamps \u003d\n        jobConf.getStrings(MRJobConfig.CACHE_FILE_TIMESTAMPS);\n\n      FileSystem fs \u003d FileSystem.get(conf);\n      String user \u003d jobConf.getUser();\n      for (int i \u003d 0; i \u003c files.length; i++) {\n        // Check if visibilities are available because older hadoop versions\n        // didn\u0027t have public, private Distributed Caches separately.\n        boolean visibility \u003d\n            (visibilities \u003d\u003d null) ? true : Boolean.valueOf(visibilities[i]);\n        if (isLocalDistCacheFile(files[i], user, visibility)) {\n          // local FS based distributed cache file.\n          // Create this file on the pseudo local FS on the fly (i.e. when the\n          // simulated job is submitted).\n          continue;\n        }\n        // distributed cache file on hdfs\n        String mappedPath \u003d mapDistCacheFilePath(files[i], timeStamps[i],\n                                                 visibility, user);\n\n        // No need to add a distributed cache file path to the list if\n        // (1) the mapped path is already there in the list OR\n        // (2) the file with the mapped path already exists.\n        // In any of the above 2 cases, file paths, timestamps, file sizes and\n        // visibilities match. File sizes should match if file paths and\n        // timestamps match because single file path with single timestamp\n        // should correspond to a single file size.\n        if (distCacheFiles.containsKey(mappedPath) ||\n            fs.exists(new Path(mappedPath))) {\n          continue;\n        }\n        distCacheFiles.put(mappedPath, Long.valueOf(fileSizes[i]));\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java",
        "newPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,47 @@\n+  void updateHDFSDistCacheFilesList(JobStory jobdesc) throws IOException {\n+\n+    // Map original job\u0027s distributed cache file paths to simulated cluster\u0027s\n+    // paths, to be used by this simulated job.\n+    JobConf jobConf \u003d jobdesc.getJobConf();\n+\n+    String[] files \u003d jobConf.getStrings(MRJobConfig.CACHE_FILES);\n+    if (files !\u003d null) {\n+\n+      String[] fileSizes \u003d jobConf.getStrings(MRJobConfig.CACHE_FILES_SIZES);\n+      String[] visibilities \u003d\n+        jobConf.getStrings(MRJobConfig.CACHE_FILE_VISIBILITIES);\n+      String[] timeStamps \u003d\n+        jobConf.getStrings(MRJobConfig.CACHE_FILE_TIMESTAMPS);\n+\n+      FileSystem fs \u003d FileSystem.get(conf);\n+      String user \u003d jobConf.getUser();\n+      for (int i \u003d 0; i \u003c files.length; i++) {\n+        // Check if visibilities are available because older hadoop versions\n+        // didn\u0027t have public, private Distributed Caches separately.\n+        boolean visibility \u003d\n+            (visibilities \u003d\u003d null) ? true : Boolean.valueOf(visibilities[i]);\n+        if (isLocalDistCacheFile(files[i], user, visibility)) {\n+          // local FS based distributed cache file.\n+          // Create this file on the pseudo local FS on the fly (i.e. when the\n+          // simulated job is submitted).\n+          continue;\n+        }\n+        // distributed cache file on hdfs\n+        String mappedPath \u003d mapDistCacheFilePath(files[i], timeStamps[i],\n+                                                 visibility, user);\n+\n+        // No need to add a distributed cache file path to the list if\n+        // (1) the mapped path is already there in the list OR\n+        // (2) the file with the mapped path already exists.\n+        // In any of the above 2 cases, file paths, timestamps, file sizes and\n+        // visibilities match. File sizes should match if file paths and\n+        // timestamps match because single file path with single timestamp\n+        // should correspond to a single file size.\n+        if (distCacheFiles.containsKey(mappedPath) ||\n+            fs.exists(new Path(mappedPath))) {\n+          continue;\n+        }\n+        distCacheFiles.put(mappedPath, Long.valueOf(fileSizes[i]));\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void updateHDFSDistCacheFilesList(JobStory jobdesc) throws IOException {\n\n    // Map original job\u0027s distributed cache file paths to simulated cluster\u0027s\n    // paths, to be used by this simulated job.\n    JobConf jobConf \u003d jobdesc.getJobConf();\n\n    String[] files \u003d jobConf.getStrings(MRJobConfig.CACHE_FILES);\n    if (files !\u003d null) {\n\n      String[] fileSizes \u003d jobConf.getStrings(MRJobConfig.CACHE_FILES_SIZES);\n      String[] visibilities \u003d\n        jobConf.getStrings(MRJobConfig.CACHE_FILE_VISIBILITIES);\n      String[] timeStamps \u003d\n        jobConf.getStrings(MRJobConfig.CACHE_FILE_TIMESTAMPS);\n\n      FileSystem fs \u003d FileSystem.get(conf);\n      String user \u003d jobConf.getUser();\n      for (int i \u003d 0; i \u003c files.length; i++) {\n        // Check if visibilities are available because older hadoop versions\n        // didn\u0027t have public, private Distributed Caches separately.\n        boolean visibility \u003d\n            (visibilities \u003d\u003d null) ? true : Boolean.valueOf(visibilities[i]);\n        if (isLocalDistCacheFile(files[i], user, visibility)) {\n          // local FS based distributed cache file.\n          // Create this file on the pseudo local FS on the fly (i.e. when the\n          // simulated job is submitted).\n          continue;\n        }\n        // distributed cache file on hdfs\n        String mappedPath \u003d mapDistCacheFilePath(files[i], timeStamps[i],\n                                                 visibility, user);\n\n        // No need to add a distributed cache file path to the list if\n        // (1) the mapped path is already there in the list OR\n        // (2) the file with the mapped path already exists.\n        // In any of the above 2 cases, file paths, timestamps, file sizes and\n        // visibilities match. File sizes should match if file paths and\n        // timestamps match because single file path with single timestamp\n        // should correspond to a single file size.\n        if (distCacheFiles.containsKey(mappedPath) ||\n            fs.exists(new Path(mappedPath))) {\n          continue;\n        }\n        distCacheFiles.put(mappedPath, Long.valueOf(fileSizes[i]));\n      }\n    }\n  }",
      "path": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/DistributedCacheEmulator.java"
    }
  }
}