{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UnmanagedAMLauncher.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/src/main/java/org/apache/hadoop/yarn/applications/unmanagedamlauncher/UnmanagedAMLauncher.java",
  "functionStartLine": 305,
  "functionEndLine": 383,
  "numCommitsSeen": 24,
  "timeTaken": 1370,
  "changeHistory": [
    "ef9634bf796807501e3c1937a8ea8a70205cb990",
    "d3198dddc8c66139cbb57b3c3c061a3d0d2c6a5d",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "92b7165a71656468f17ce8b760ce11e648932f0e",
    "11cf00b08ab7172ff92c35605cdb33664ae621eb",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "3ef19e9dbd5995634aac9b4011765e1d889ea6f5"
  ],
  "changeHistoryShort": {
    "ef9634bf796807501e3c1937a8ea8a70205cb990": "Ybodychange",
    "d3198dddc8c66139cbb57b3c3c061a3d0d2c6a5d": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Yexceptionschange",
    "92b7165a71656468f17ce8b760ce11e648932f0e": "Yexceptionschange",
    "11cf00b08ab7172ff92c35605cdb33664ae621eb": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "3ef19e9dbd5995634aac9b4011765e1d889ea6f5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ef9634bf796807501e3c1937a8ea8a70205cb990": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1577. Made UnmanagedAMLauncher do launchAM after the attempt reaches the LAUNCHED state. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580164 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/14 9:35 PM",
      "commitName": "ef9634bf796807501e3c1937a8ea8a70205cb990",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "29/07/13 4:17 PM",
      "commitNameOld": "817a6543465a3228cdb28a2eeb8e4f96a2d0f9e6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 235.22,
      "commitsBetweenForRepo": 1630,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,79 @@\n   public boolean run() throws IOException, YarnException {\n     LOG.info(\"Starting Client\");\n     \n     // Connect to ResourceManager\n     rmClient.start();\n     try {  \n       // Create launch context for app master\n       LOG.info(\"Setting up application submission context for ASM\");\n       ApplicationSubmissionContext appContext \u003d rmClient.createApplication()\n           .getApplicationSubmissionContext();\n       ApplicationId appId \u003d appContext.getApplicationId();\n \n       // set the application name\n       appContext.setApplicationName(appName);\n   \n       // Set the priority for the application master\n       Priority pri \u003d Records.newRecord(Priority.class);\n       pri.setPriority(amPriority);\n       appContext.setPriority(pri);\n   \n       // Set the queue to which this application is to be submitted in the RM\n       appContext.setQueue(amQueue);\n   \n       // Set up the container launch context for the application master\n       ContainerLaunchContext amContainer \u003d Records\n           .newRecord(ContainerLaunchContext.class);\n       appContext.setAMContainerSpec(amContainer);\n   \n       // unmanaged AM\n       appContext.setUnmanagedAM(true);\n       LOG.info(\"Setting unmanaged AM\");\n   \n       // Submit the application to the applications manager\n       LOG.info(\"Submitting application to ASM\");\n       rmClient.submitApplication(appContext);\n-  \n-      // Monitor the application to wait for launch state\n-      ApplicationReport appReport \u003d monitorApplication(appId,\n-          EnumSet.of(YarnApplicationState.ACCEPTED));\n-      ApplicationAttemptId attemptId \u003d appReport.getCurrentApplicationAttemptId();\n-      LOG.info(\"Launching application with id: \" + attemptId);\n-  \n-      // launch AM\n-      launchAM(attemptId);\n-  \n-      // Monitor the application for end state\n-      appReport \u003d monitorApplication(appId, EnumSet.of(\n-          YarnApplicationState.KILLED, YarnApplicationState.FAILED,\n-          YarnApplicationState.FINISHED));\n+\n+      ApplicationReport appReport \u003d\n+          monitorApplication(appId, EnumSet.of(YarnApplicationState.ACCEPTED,\n+            YarnApplicationState.KILLED, YarnApplicationState.FAILED,\n+            YarnApplicationState.FINISHED));\n+\n+      if (appReport.getYarnApplicationState() \u003d\u003d YarnApplicationState.ACCEPTED) {\n+        // Monitor the application attempt to wait for launch state\n+        ApplicationAttemptReport attemptReport \u003d\n+            monitorCurrentAppAttempt(appId,\n+              YarnApplicationAttemptState.LAUNCHED);\n+        ApplicationAttemptId attemptId \u003d\n+            attemptReport.getApplicationAttemptId();\n+        LOG.info(\"Launching AM with application attempt id \" + attemptId);\n+        // launch AM\n+        launchAM(attemptId);\n+        // Monitor the application for end state\n+        appReport \u003d\n+            monitorApplication(appId, EnumSet.of(YarnApplicationState.KILLED,\n+              YarnApplicationState.FAILED, YarnApplicationState.FINISHED));\n+      }\n \n       YarnApplicationState appState \u003d appReport.getYarnApplicationState();\n       FinalApplicationStatus appStatus \u003d appReport.getFinalApplicationStatus();\n   \n       LOG.info(\"App ended with state: \" + appReport.getYarnApplicationState()\n           + \" and status: \" + appStatus);\n       \n       boolean success;\n       if (YarnApplicationState.FINISHED \u003d\u003d appState\n           \u0026\u0026 FinalApplicationStatus.SUCCEEDED \u003d\u003d appStatus) {\n         LOG.info(\"Application has completed successfully.\");\n         success \u003d true;\n       } else {\n         LOG.info(\"Application did finished unsuccessfully.\" + \" YarnState\u003d\"\n             + appState.toString() + \", FinalStatus\u003d\" + appStatus.toString());\n         success \u003d false;\n       }\n       \n       return success;\n     } finally {\n       rmClient.stop();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean run() throws IOException, YarnException {\n    LOG.info(\"Starting Client\");\n    \n    // Connect to ResourceManager\n    rmClient.start();\n    try {  \n      // Create launch context for app master\n      LOG.info(\"Setting up application submission context for ASM\");\n      ApplicationSubmissionContext appContext \u003d rmClient.createApplication()\n          .getApplicationSubmissionContext();\n      ApplicationId appId \u003d appContext.getApplicationId();\n\n      // set the application name\n      appContext.setApplicationName(appName);\n  \n      // Set the priority for the application master\n      Priority pri \u003d Records.newRecord(Priority.class);\n      pri.setPriority(amPriority);\n      appContext.setPriority(pri);\n  \n      // Set the queue to which this application is to be submitted in the RM\n      appContext.setQueue(amQueue);\n  \n      // Set up the container launch context for the application master\n      ContainerLaunchContext amContainer \u003d Records\n          .newRecord(ContainerLaunchContext.class);\n      appContext.setAMContainerSpec(amContainer);\n  \n      // unmanaged AM\n      appContext.setUnmanagedAM(true);\n      LOG.info(\"Setting unmanaged AM\");\n  \n      // Submit the application to the applications manager\n      LOG.info(\"Submitting application to ASM\");\n      rmClient.submitApplication(appContext);\n\n      ApplicationReport appReport \u003d\n          monitorApplication(appId, EnumSet.of(YarnApplicationState.ACCEPTED,\n            YarnApplicationState.KILLED, YarnApplicationState.FAILED,\n            YarnApplicationState.FINISHED));\n\n      if (appReport.getYarnApplicationState() \u003d\u003d YarnApplicationState.ACCEPTED) {\n        // Monitor the application attempt to wait for launch state\n        ApplicationAttemptReport attemptReport \u003d\n            monitorCurrentAppAttempt(appId,\n              YarnApplicationAttemptState.LAUNCHED);\n        ApplicationAttemptId attemptId \u003d\n            attemptReport.getApplicationAttemptId();\n        LOG.info(\"Launching AM with application attempt id \" + attemptId);\n        // launch AM\n        launchAM(attemptId);\n        // Monitor the application for end state\n        appReport \u003d\n            monitorApplication(appId, EnumSet.of(YarnApplicationState.KILLED,\n              YarnApplicationState.FAILED, YarnApplicationState.FINISHED));\n      }\n\n      YarnApplicationState appState \u003d appReport.getYarnApplicationState();\n      FinalApplicationStatus appStatus \u003d appReport.getFinalApplicationStatus();\n  \n      LOG.info(\"App ended with state: \" + appReport.getYarnApplicationState()\n          + \" and status: \" + appStatus);\n      \n      boolean success;\n      if (YarnApplicationState.FINISHED \u003d\u003d appState\n          \u0026\u0026 FinalApplicationStatus.SUCCEEDED \u003d\u003d appStatus) {\n        LOG.info(\"Application has completed successfully.\");\n        success \u003d true;\n      } else {\n        LOG.info(\"Application did finished unsuccessfully.\" + \" YarnState\u003d\"\n            + appState.toString() + \", FinalStatus\u003d\" + appStatus.toString());\n        success \u003d false;\n      }\n      \n      return success;\n    } finally {\n      rmClient.stop();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/src/main/java/org/apache/hadoop/yarn/applications/unmanagedamlauncher/UnmanagedAMLauncher.java",
      "extendedDetails": {}
    },
    "d3198dddc8c66139cbb57b3c3c061a3d0d2c6a5d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-553. Replaced YarnClient.getNewApplication with YarnClient.createApplication which provides a directly usable ApplicationSubmissionContext to simplify the api. Contributed by Karthik Kambatla.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494476 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/13 12:06 AM",
      "commitName": "d3198dddc8c66139cbb57b3c3c061a3d0d2c6a5d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "17/06/13 9:02 PM",
      "commitNameOld": "7ef54faad4bee4346da082a3f8cc5d6ea405d74a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.13,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,72 @@\n   public boolean run() throws IOException, YarnException {\n     LOG.info(\"Starting Client\");\n     \n     // Connect to ResourceManager\n     rmClient.start();\n     try {  \n-      // Get a new application id\n-      GetNewApplicationResponse newApp \u003d rmClient.getNewApplication();\n-      ApplicationId appId \u003d newApp.getApplicationId();\n-  \n       // Create launch context for app master\n       LOG.info(\"Setting up application submission context for ASM\");\n-      ApplicationSubmissionContext appContext \u003d Records\n-          .newRecord(ApplicationSubmissionContext.class);\n-  \n-      // set the application id\n-      appContext.setApplicationId(appId);\n+      ApplicationSubmissionContext appContext \u003d rmClient.createApplication()\n+          .getApplicationSubmissionContext();\n+      ApplicationId appId \u003d appContext.getApplicationId();\n+\n       // set the application name\n       appContext.setApplicationName(appName);\n   \n       // Set the priority for the application master\n       Priority pri \u003d Records.newRecord(Priority.class);\n       pri.setPriority(amPriority);\n       appContext.setPriority(pri);\n   \n       // Set the queue to which this application is to be submitted in the RM\n       appContext.setQueue(amQueue);\n   \n       // Set up the container launch context for the application master\n       ContainerLaunchContext amContainer \u003d Records\n           .newRecord(ContainerLaunchContext.class);\n       appContext.setAMContainerSpec(amContainer);\n   \n       // unmanaged AM\n       appContext.setUnmanagedAM(true);\n       LOG.info(\"Setting unmanaged AM\");\n   \n       // Submit the application to the applications manager\n       LOG.info(\"Submitting application to ASM\");\n       rmClient.submitApplication(appContext);\n   \n       // Monitor the application to wait for launch state\n       ApplicationReport appReport \u003d monitorApplication(appId,\n           EnumSet.of(YarnApplicationState.ACCEPTED));\n       ApplicationAttemptId attemptId \u003d appReport.getCurrentApplicationAttemptId();\n       LOG.info(\"Launching application with id: \" + attemptId);\n   \n       // launch AM\n       launchAM(attemptId);\n   \n       // Monitor the application for end state\n       appReport \u003d monitorApplication(appId, EnumSet.of(\n           YarnApplicationState.KILLED, YarnApplicationState.FAILED,\n           YarnApplicationState.FINISHED));\n \n       YarnApplicationState appState \u003d appReport.getYarnApplicationState();\n       FinalApplicationStatus appStatus \u003d appReport.getFinalApplicationStatus();\n   \n       LOG.info(\"App ended with state: \" + appReport.getYarnApplicationState()\n           + \" and status: \" + appStatus);\n       \n       boolean success;\n       if (YarnApplicationState.FINISHED \u003d\u003d appState\n           \u0026\u0026 FinalApplicationStatus.SUCCEEDED \u003d\u003d appStatus) {\n         LOG.info(\"Application has completed successfully.\");\n         success \u003d true;\n       } else {\n         LOG.info(\"Application did finished unsuccessfully.\" + \" YarnState\u003d\"\n             + appState.toString() + \", FinalStatus\u003d\" + appStatus.toString());\n         success \u003d false;\n       }\n       \n       return success;\n     } finally {\n       rmClient.stop();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean run() throws IOException, YarnException {\n    LOG.info(\"Starting Client\");\n    \n    // Connect to ResourceManager\n    rmClient.start();\n    try {  \n      // Create launch context for app master\n      LOG.info(\"Setting up application submission context for ASM\");\n      ApplicationSubmissionContext appContext \u003d rmClient.createApplication()\n          .getApplicationSubmissionContext();\n      ApplicationId appId \u003d appContext.getApplicationId();\n\n      // set the application name\n      appContext.setApplicationName(appName);\n  \n      // Set the priority for the application master\n      Priority pri \u003d Records.newRecord(Priority.class);\n      pri.setPriority(amPriority);\n      appContext.setPriority(pri);\n  \n      // Set the queue to which this application is to be submitted in the RM\n      appContext.setQueue(amQueue);\n  \n      // Set up the container launch context for the application master\n      ContainerLaunchContext amContainer \u003d Records\n          .newRecord(ContainerLaunchContext.class);\n      appContext.setAMContainerSpec(amContainer);\n  \n      // unmanaged AM\n      appContext.setUnmanagedAM(true);\n      LOG.info(\"Setting unmanaged AM\");\n  \n      // Submit the application to the applications manager\n      LOG.info(\"Submitting application to ASM\");\n      rmClient.submitApplication(appContext);\n  \n      // Monitor the application to wait for launch state\n      ApplicationReport appReport \u003d monitorApplication(appId,\n          EnumSet.of(YarnApplicationState.ACCEPTED));\n      ApplicationAttemptId attemptId \u003d appReport.getCurrentApplicationAttemptId();\n      LOG.info(\"Launching application with id: \" + attemptId);\n  \n      // launch AM\n      launchAM(attemptId);\n  \n      // Monitor the application for end state\n      appReport \u003d monitorApplication(appId, EnumSet.of(\n          YarnApplicationState.KILLED, YarnApplicationState.FAILED,\n          YarnApplicationState.FINISHED));\n\n      YarnApplicationState appState \u003d appReport.getYarnApplicationState();\n      FinalApplicationStatus appStatus \u003d appReport.getFinalApplicationStatus();\n  \n      LOG.info(\"App ended with state: \" + appReport.getYarnApplicationState()\n          + \" and status: \" + appStatus);\n      \n      boolean success;\n      if (YarnApplicationState.FINISHED \u003d\u003d appState\n          \u0026\u0026 FinalApplicationStatus.SUCCEEDED \u003d\u003d appStatus) {\n        LOG.info(\"Application has completed successfully.\");\n        success \u003d true;\n      } else {\n        LOG.info(\"Application did finished unsuccessfully.\" + \" YarnState\u003d\"\n            + appState.toString() + \", FinalStatus\u003d\" + appStatus.toString());\n        success \u003d false;\n      }\n      \n      return success;\n    } finally {\n      rmClient.stop();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/src/main/java/org/apache/hadoop/yarn/applications/unmanagedamlauncher/UnmanagedAMLauncher.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/05/13 5:14 PM",
      "commitNameOld": "39f019f41392d9e46ea1dc86ddd5563aabbeda1e",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 3.16,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,77 @@\n-  public boolean run() throws IOException, YarnRemoteException {\n+  public boolean run() throws IOException, YarnException {\n     LOG.info(\"Starting Client\");\n     \n     // Connect to ResourceManager\n     rmClient.start();\n     try {  \n       // Get a new application id\n       GetNewApplicationResponse newApp \u003d rmClient.getNewApplication();\n       ApplicationId appId \u003d newApp.getApplicationId();\n   \n       // Create launch context for app master\n       LOG.info(\"Setting up application submission context for ASM\");\n       ApplicationSubmissionContext appContext \u003d Records\n           .newRecord(ApplicationSubmissionContext.class);\n   \n       // set the application id\n       appContext.setApplicationId(appId);\n       // set the application name\n       appContext.setApplicationName(appName);\n   \n       // Set the priority for the application master\n       Priority pri \u003d Records.newRecord(Priority.class);\n       pri.setPriority(amPriority);\n       appContext.setPriority(pri);\n   \n       // Set the queue to which this application is to be submitted in the RM\n       appContext.setQueue(amQueue);\n   \n       // Set up the container launch context for the application master\n       ContainerLaunchContext amContainer \u003d Records\n           .newRecord(ContainerLaunchContext.class);\n       appContext.setAMContainerSpec(amContainer);\n   \n       // unmanaged AM\n       appContext.setUnmanagedAM(true);\n       LOG.info(\"Setting unmanaged AM\");\n   \n       // Submit the application to the applications manager\n       LOG.info(\"Submitting application to ASM\");\n       rmClient.submitApplication(appContext);\n   \n       // Monitor the application to wait for launch state\n       ApplicationReport appReport \u003d monitorApplication(appId,\n           EnumSet.of(YarnApplicationState.ACCEPTED));\n       ApplicationAttemptId attemptId \u003d appReport.getCurrentApplicationAttemptId();\n       LOG.info(\"Launching application with id: \" + attemptId);\n   \n       // launch AM\n       launchAM(attemptId);\n   \n       // Monitor the application for end state\n       appReport \u003d monitorApplication(appId, EnumSet.of(\n           YarnApplicationState.KILLED, YarnApplicationState.FAILED,\n           YarnApplicationState.FINISHED));\n \n       YarnApplicationState appState \u003d appReport.getYarnApplicationState();\n       FinalApplicationStatus appStatus \u003d appReport.getFinalApplicationStatus();\n   \n       LOG.info(\"App ended with state: \" + appReport.getYarnApplicationState()\n           + \" and status: \" + appStatus);\n       \n       boolean success;\n       if (YarnApplicationState.FINISHED \u003d\u003d appState\n           \u0026\u0026 FinalApplicationStatus.SUCCEEDED \u003d\u003d appStatus) {\n         LOG.info(\"Application has completed successfully.\");\n         success \u003d true;\n       } else {\n         LOG.info(\"Application did finished unsuccessfully.\" + \" YarnState\u003d\"\n             + appState.toString() + \", FinalStatus\u003d\" + appStatus.toString());\n         success \u003d false;\n       }\n       \n       return success;\n     } finally {\n       rmClient.stop();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean run() throws IOException, YarnException {\n    LOG.info(\"Starting Client\");\n    \n    // Connect to ResourceManager\n    rmClient.start();\n    try {  \n      // Get a new application id\n      GetNewApplicationResponse newApp \u003d rmClient.getNewApplication();\n      ApplicationId appId \u003d newApp.getApplicationId();\n  \n      // Create launch context for app master\n      LOG.info(\"Setting up application submission context for ASM\");\n      ApplicationSubmissionContext appContext \u003d Records\n          .newRecord(ApplicationSubmissionContext.class);\n  \n      // set the application id\n      appContext.setApplicationId(appId);\n      // set the application name\n      appContext.setApplicationName(appName);\n  \n      // Set the priority for the application master\n      Priority pri \u003d Records.newRecord(Priority.class);\n      pri.setPriority(amPriority);\n      appContext.setPriority(pri);\n  \n      // Set the queue to which this application is to be submitted in the RM\n      appContext.setQueue(amQueue);\n  \n      // Set up the container launch context for the application master\n      ContainerLaunchContext amContainer \u003d Records\n          .newRecord(ContainerLaunchContext.class);\n      appContext.setAMContainerSpec(amContainer);\n  \n      // unmanaged AM\n      appContext.setUnmanagedAM(true);\n      LOG.info(\"Setting unmanaged AM\");\n  \n      // Submit the application to the applications manager\n      LOG.info(\"Submitting application to ASM\");\n      rmClient.submitApplication(appContext);\n  \n      // Monitor the application to wait for launch state\n      ApplicationReport appReport \u003d monitorApplication(appId,\n          EnumSet.of(YarnApplicationState.ACCEPTED));\n      ApplicationAttemptId attemptId \u003d appReport.getCurrentApplicationAttemptId();\n      LOG.info(\"Launching application with id: \" + attemptId);\n  \n      // launch AM\n      launchAM(attemptId);\n  \n      // Monitor the application for end state\n      appReport \u003d monitorApplication(appId, EnumSet.of(\n          YarnApplicationState.KILLED, YarnApplicationState.FAILED,\n          YarnApplicationState.FINISHED));\n\n      YarnApplicationState appState \u003d appReport.getYarnApplicationState();\n      FinalApplicationStatus appStatus \u003d appReport.getFinalApplicationStatus();\n  \n      LOG.info(\"App ended with state: \" + appReport.getYarnApplicationState()\n          + \" and status: \" + appStatus);\n      \n      boolean success;\n      if (YarnApplicationState.FINISHED \u003d\u003d appState\n          \u0026\u0026 FinalApplicationStatus.SUCCEEDED \u003d\u003d appStatus) {\n        LOG.info(\"Application has completed successfully.\");\n        success \u003d true;\n      } else {\n        LOG.info(\"Application did finished unsuccessfully.\" + \" YarnState\u003d\"\n            + appState.toString() + \", FinalStatus\u003d\" + appStatus.toString());\n        success \u003d false;\n      }\n      \n      return success;\n    } finally {\n      rmClient.stop();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/src/main/java/org/apache/hadoop/yarn/applications/unmanagedamlauncher/UnmanagedAMLauncher.java",
      "extendedDetails": {
        "oldValue": "[IOException, YarnRemoteException]",
        "newValue": "[IOException, YarnException]"
      }
    },
    "92b7165a71656468f17ce8b760ce11e648932f0e": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-629. Make YarnRemoteException not be rooted at IOException. Contributed by Xuan Gong.\nMAPREDUCE-5204. Handling YarnRemoteException separately from IOException in MR app after YARN-629. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1479680 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/05/13 12:04 PM",
      "commitName": "92b7165a71656468f17ce8b760ce11e648932f0e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "23/04/13 2:39 PM",
      "commitNameOld": "27e8c86999bc6a972a99216060b11ef35b7de858",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.89,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,77 @@\n-  public boolean run() throws IOException {\n+  public boolean run() throws IOException, YarnRemoteException {\n     LOG.info(\"Starting Client\");\n     \n     // Connect to ResourceManager\n     rmClient.start();\n     try {  \n       // Get a new application id\n       GetNewApplicationResponse newApp \u003d rmClient.getNewApplication();\n       ApplicationId appId \u003d newApp.getApplicationId();\n   \n       // Create launch context for app master\n       LOG.info(\"Setting up application submission context for ASM\");\n       ApplicationSubmissionContext appContext \u003d Records\n           .newRecord(ApplicationSubmissionContext.class);\n   \n       // set the application id\n       appContext.setApplicationId(appId);\n       // set the application name\n       appContext.setApplicationName(appName);\n   \n       // Set the priority for the application master\n       Priority pri \u003d Records.newRecord(Priority.class);\n       pri.setPriority(amPriority);\n       appContext.setPriority(pri);\n   \n       // Set the queue to which this application is to be submitted in the RM\n       appContext.setQueue(amQueue);\n   \n       // Set up the container launch context for the application master\n       ContainerLaunchContext amContainer \u003d Records\n           .newRecord(ContainerLaunchContext.class);\n       appContext.setAMContainerSpec(amContainer);\n   \n       // unmanaged AM\n       appContext.setUnmanagedAM(true);\n       LOG.info(\"Setting unmanaged AM\");\n   \n       // Submit the application to the applications manager\n       LOG.info(\"Submitting application to ASM\");\n       rmClient.submitApplication(appContext);\n   \n       // Monitor the application to wait for launch state\n       ApplicationReport appReport \u003d monitorApplication(appId,\n           EnumSet.of(YarnApplicationState.ACCEPTED));\n       ApplicationAttemptId attemptId \u003d appReport.getCurrentApplicationAttemptId();\n       LOG.info(\"Launching application with id: \" + attemptId);\n   \n       // launch AM\n       launchAM(attemptId);\n   \n       // Monitor the application for end state\n       appReport \u003d monitorApplication(appId, EnumSet.of(\n           YarnApplicationState.KILLED, YarnApplicationState.FAILED,\n           YarnApplicationState.FINISHED));\n \n       YarnApplicationState appState \u003d appReport.getYarnApplicationState();\n       FinalApplicationStatus appStatus \u003d appReport.getFinalApplicationStatus();\n   \n       LOG.info(\"App ended with state: \" + appReport.getYarnApplicationState()\n           + \" and status: \" + appStatus);\n       \n       boolean success;\n       if (YarnApplicationState.FINISHED \u003d\u003d appState\n           \u0026\u0026 FinalApplicationStatus.SUCCEEDED \u003d\u003d appStatus) {\n         LOG.info(\"Application has completed successfully.\");\n         success \u003d true;\n       } else {\n         LOG.info(\"Application did finished unsuccessfully.\" + \" YarnState\u003d\"\n             + appState.toString() + \", FinalStatus\u003d\" + appStatus.toString());\n         success \u003d false;\n       }\n       \n       return success;\n     } finally {\n       rmClient.stop();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean run() throws IOException, YarnRemoteException {\n    LOG.info(\"Starting Client\");\n    \n    // Connect to ResourceManager\n    rmClient.start();\n    try {  \n      // Get a new application id\n      GetNewApplicationResponse newApp \u003d rmClient.getNewApplication();\n      ApplicationId appId \u003d newApp.getApplicationId();\n  \n      // Create launch context for app master\n      LOG.info(\"Setting up application submission context for ASM\");\n      ApplicationSubmissionContext appContext \u003d Records\n          .newRecord(ApplicationSubmissionContext.class);\n  \n      // set the application id\n      appContext.setApplicationId(appId);\n      // set the application name\n      appContext.setApplicationName(appName);\n  \n      // Set the priority for the application master\n      Priority pri \u003d Records.newRecord(Priority.class);\n      pri.setPriority(amPriority);\n      appContext.setPriority(pri);\n  \n      // Set the queue to which this application is to be submitted in the RM\n      appContext.setQueue(amQueue);\n  \n      // Set up the container launch context for the application master\n      ContainerLaunchContext amContainer \u003d Records\n          .newRecord(ContainerLaunchContext.class);\n      appContext.setAMContainerSpec(amContainer);\n  \n      // unmanaged AM\n      appContext.setUnmanagedAM(true);\n      LOG.info(\"Setting unmanaged AM\");\n  \n      // Submit the application to the applications manager\n      LOG.info(\"Submitting application to ASM\");\n      rmClient.submitApplication(appContext);\n  \n      // Monitor the application to wait for launch state\n      ApplicationReport appReport \u003d monitorApplication(appId,\n          EnumSet.of(YarnApplicationState.ACCEPTED));\n      ApplicationAttemptId attemptId \u003d appReport.getCurrentApplicationAttemptId();\n      LOG.info(\"Launching application with id: \" + attemptId);\n  \n      // launch AM\n      launchAM(attemptId);\n  \n      // Monitor the application for end state\n      appReport \u003d monitorApplication(appId, EnumSet.of(\n          YarnApplicationState.KILLED, YarnApplicationState.FAILED,\n          YarnApplicationState.FINISHED));\n\n      YarnApplicationState appState \u003d appReport.getYarnApplicationState();\n      FinalApplicationStatus appStatus \u003d appReport.getFinalApplicationStatus();\n  \n      LOG.info(\"App ended with state: \" + appReport.getYarnApplicationState()\n          + \" and status: \" + appStatus);\n      \n      boolean success;\n      if (YarnApplicationState.FINISHED \u003d\u003d appState\n          \u0026\u0026 FinalApplicationStatus.SUCCEEDED \u003d\u003d appStatus) {\n        LOG.info(\"Application has completed successfully.\");\n        success \u003d true;\n      } else {\n        LOG.info(\"Application did finished unsuccessfully.\" + \" YarnState\u003d\"\n            + appState.toString() + \", FinalStatus\u003d\" + appStatus.toString());\n        success \u003d false;\n      }\n      \n      return success;\n    } finally {\n      rmClient.stop();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/src/main/java/org/apache/hadoop/yarn/applications/unmanagedamlauncher/UnmanagedAMLauncher.java",
      "extendedDetails": {
        "oldValue": "[IOException]",
        "newValue": "[IOException, YarnRemoteException]"
      }
    },
    "11cf00b08ab7172ff92c35605cdb33664ae621eb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-78. Changed UnManagedAM application to use YarnClient. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1383705 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/12 5:49 PM",
      "commitName": "11cf00b08ab7172ff92c35605cdb33664ae621eb",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 34.81,
      "commitsBetweenForRepo": 217,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,76 @@\n   public boolean run() throws IOException {\n     LOG.info(\"Starting Client\");\n-\n+    \n     // Connect to ResourceManager\n-    connectToRM();\n-    assert (rmClient !\u003d null);\n-\n-    // Get a new application id\n-    GetNewApplicationResponse newApp \u003d getApplication();\n-    ApplicationId appId \u003d newApp.getApplicationId();\n-\n-    // Create launch context for app master\n-    LOG.info(\"Setting up application submission context for ASM\");\n-    ApplicationSubmissionContext appContext \u003d Records\n-        .newRecord(ApplicationSubmissionContext.class);\n-\n-    // set the application id\n-    appContext.setApplicationId(appId);\n-    // set the application name\n-    appContext.setApplicationName(appName);\n-\n-    // Set the priority for the application master\n-    Priority pri \u003d Records.newRecord(Priority.class);\n-    pri.setPriority(amPriority);\n-    appContext.setPriority(pri);\n-\n-    // Set the queue to which this application is to be submitted in the RM\n-    appContext.setQueue(amQueue);\n-\n-    // Set up the container launch context for the application master\n-    ContainerLaunchContext amContainer \u003d Records\n-        .newRecord(ContainerLaunchContext.class);\n-    appContext.setAMContainerSpec(amContainer);\n-\n-    // unmanaged AM\n-    appContext.setUnmanagedAM(true);\n-    LOG.info(\"Setting unmanaged AM\");\n-\n-    // Create the request to send to the applications manager\n-    SubmitApplicationRequest appRequest \u003d Records\n-        .newRecord(SubmitApplicationRequest.class);\n-    appRequest.setApplicationSubmissionContext(appContext);\n-\n-    // Submit the application to the applications manager\n-    LOG.info(\"Submitting application to ASM\");\n-    rmClient.submitApplication(appRequest);\n-\n-    // Monitor the application to wait for launch state\n-    ApplicationReport appReport \u003d monitorApplication(appId,\n-        EnumSet.of(YarnApplicationState.ACCEPTED));\n-    ApplicationAttemptId attemptId \u003d appReport.getCurrentApplicationAttemptId();\n-    LOG.info(\"Launching application with id: \" + attemptId);\n-\n-    // launch AM\n-    launchAM(attemptId);\n-\n-    // Monitor the application for end state\n-    appReport \u003d monitorApplication(appId, EnumSet.of(\n-        YarnApplicationState.KILLED, YarnApplicationState.FAILED,\n-        YarnApplicationState.FINISHED));\n-    YarnApplicationState appState \u003d appReport.getYarnApplicationState();\n-    FinalApplicationStatus appStatus \u003d appReport.getFinalApplicationStatus();\n-\n-    LOG.info(\"App ended with state: \" + appReport.getYarnApplicationState()\n-        + \" and status: \" + appStatus);\n-    if (YarnApplicationState.FINISHED \u003d\u003d appState\n-        \u0026\u0026 FinalApplicationStatus.SUCCEEDED \u003d\u003d appStatus) {\n-      LOG.info(\"Application has completed successfully.\");\n-      return true;\n-    } else {\n-      LOG.info(\"Application did finished unsuccessfully.\" + \" YarnState\u003d\"\n-          + appState.toString() + \", FinalStatus\u003d\" + appStatus.toString());\n-      return false;\n+    rmClient.start();\n+    try {  \n+      // Get a new application id\n+      GetNewApplicationResponse newApp \u003d rmClient.getNewApplication();\n+      ApplicationId appId \u003d newApp.getApplicationId();\n+  \n+      // Create launch context for app master\n+      LOG.info(\"Setting up application submission context for ASM\");\n+      ApplicationSubmissionContext appContext \u003d Records\n+          .newRecord(ApplicationSubmissionContext.class);\n+  \n+      // set the application id\n+      appContext.setApplicationId(appId);\n+      // set the application name\n+      appContext.setApplicationName(appName);\n+  \n+      // Set the priority for the application master\n+      Priority pri \u003d Records.newRecord(Priority.class);\n+      pri.setPriority(amPriority);\n+      appContext.setPriority(pri);\n+  \n+      // Set the queue to which this application is to be submitted in the RM\n+      appContext.setQueue(amQueue);\n+  \n+      // Set up the container launch context for the application master\n+      ContainerLaunchContext amContainer \u003d Records\n+          .newRecord(ContainerLaunchContext.class);\n+      appContext.setAMContainerSpec(amContainer);\n+  \n+      // unmanaged AM\n+      appContext.setUnmanagedAM(true);\n+      LOG.info(\"Setting unmanaged AM\");\n+  \n+      // Submit the application to the applications manager\n+      LOG.info(\"Submitting application to ASM\");\n+      rmClient.submitApplication(appContext);\n+  \n+      // Monitor the application to wait for launch state\n+      ApplicationReport appReport \u003d monitorApplication(appId,\n+          EnumSet.of(YarnApplicationState.ACCEPTED));\n+      ApplicationAttemptId attemptId \u003d appReport.getCurrentApplicationAttemptId();\n+      LOG.info(\"Launching application with id: \" + attemptId);\n+  \n+      // launch AM\n+      launchAM(attemptId);\n+  \n+      // Monitor the application for end state\n+      appReport \u003d monitorApplication(appId, EnumSet.of(\n+          YarnApplicationState.KILLED, YarnApplicationState.FAILED,\n+          YarnApplicationState.FINISHED));\n+      YarnApplicationState appState \u003d appReport.getYarnApplicationState();\n+      FinalApplicationStatus appStatus \u003d appReport.getFinalApplicationStatus();\n+  \n+      LOG.info(\"App ended with state: \" + appReport.getYarnApplicationState()\n+          + \" and status: \" + appStatus);\n+      \n+      boolean success;\n+      if (YarnApplicationState.FINISHED \u003d\u003d appState\n+          \u0026\u0026 FinalApplicationStatus.SUCCEEDED \u003d\u003d appStatus) {\n+        LOG.info(\"Application has completed successfully.\");\n+        success \u003d true;\n+      } else {\n+        LOG.info(\"Application did finished unsuccessfully.\" + \" YarnState\u003d\"\n+            + appState.toString() + \", FinalStatus\u003d\" + appStatus.toString());\n+        success \u003d false;\n+      }\n+      \n+      return success;\n+    } finally {\n+      rmClient.stop();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean run() throws IOException {\n    LOG.info(\"Starting Client\");\n    \n    // Connect to ResourceManager\n    rmClient.start();\n    try {  \n      // Get a new application id\n      GetNewApplicationResponse newApp \u003d rmClient.getNewApplication();\n      ApplicationId appId \u003d newApp.getApplicationId();\n  \n      // Create launch context for app master\n      LOG.info(\"Setting up application submission context for ASM\");\n      ApplicationSubmissionContext appContext \u003d Records\n          .newRecord(ApplicationSubmissionContext.class);\n  \n      // set the application id\n      appContext.setApplicationId(appId);\n      // set the application name\n      appContext.setApplicationName(appName);\n  \n      // Set the priority for the application master\n      Priority pri \u003d Records.newRecord(Priority.class);\n      pri.setPriority(amPriority);\n      appContext.setPriority(pri);\n  \n      // Set the queue to which this application is to be submitted in the RM\n      appContext.setQueue(amQueue);\n  \n      // Set up the container launch context for the application master\n      ContainerLaunchContext amContainer \u003d Records\n          .newRecord(ContainerLaunchContext.class);\n      appContext.setAMContainerSpec(amContainer);\n  \n      // unmanaged AM\n      appContext.setUnmanagedAM(true);\n      LOG.info(\"Setting unmanaged AM\");\n  \n      // Submit the application to the applications manager\n      LOG.info(\"Submitting application to ASM\");\n      rmClient.submitApplication(appContext);\n  \n      // Monitor the application to wait for launch state\n      ApplicationReport appReport \u003d monitorApplication(appId,\n          EnumSet.of(YarnApplicationState.ACCEPTED));\n      ApplicationAttemptId attemptId \u003d appReport.getCurrentApplicationAttemptId();\n      LOG.info(\"Launching application with id: \" + attemptId);\n  \n      // launch AM\n      launchAM(attemptId);\n  \n      // Monitor the application for end state\n      appReport \u003d monitorApplication(appId, EnumSet.of(\n          YarnApplicationState.KILLED, YarnApplicationState.FAILED,\n          YarnApplicationState.FINISHED));\n      YarnApplicationState appState \u003d appReport.getYarnApplicationState();\n      FinalApplicationStatus appStatus \u003d appReport.getFinalApplicationStatus();\n  \n      LOG.info(\"App ended with state: \" + appReport.getYarnApplicationState()\n          + \" and status: \" + appStatus);\n      \n      boolean success;\n      if (YarnApplicationState.FINISHED \u003d\u003d appState\n          \u0026\u0026 FinalApplicationStatus.SUCCEEDED \u003d\u003d appStatus) {\n        LOG.info(\"Application has completed successfully.\");\n        success \u003d true;\n      } else {\n        LOG.info(\"Application did finished unsuccessfully.\" + \" YarnState\u003d\"\n            + appState.toString() + \", FinalStatus\u003d\" + appStatus.toString());\n        success \u003d false;\n      }\n      \n      return success;\n    } finally {\n      rmClient.stop();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/src/main/java/org/apache/hadoop/yarn/applications/unmanagedamlauncher/UnmanagedAMLauncher.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean run() throws IOException {\n    LOG.info(\"Starting Client\");\n\n    // Connect to ResourceManager\n    connectToRM();\n    assert (rmClient !\u003d null);\n\n    // Get a new application id\n    GetNewApplicationResponse newApp \u003d getApplication();\n    ApplicationId appId \u003d newApp.getApplicationId();\n\n    // Create launch context for app master\n    LOG.info(\"Setting up application submission context for ASM\");\n    ApplicationSubmissionContext appContext \u003d Records\n        .newRecord(ApplicationSubmissionContext.class);\n\n    // set the application id\n    appContext.setApplicationId(appId);\n    // set the application name\n    appContext.setApplicationName(appName);\n\n    // Set the priority for the application master\n    Priority pri \u003d Records.newRecord(Priority.class);\n    pri.setPriority(amPriority);\n    appContext.setPriority(pri);\n\n    // Set the queue to which this application is to be submitted in the RM\n    appContext.setQueue(amQueue);\n\n    // Set up the container launch context for the application master\n    ContainerLaunchContext amContainer \u003d Records\n        .newRecord(ContainerLaunchContext.class);\n    appContext.setAMContainerSpec(amContainer);\n\n    // unmanaged AM\n    appContext.setUnmanagedAM(true);\n    LOG.info(\"Setting unmanaged AM\");\n\n    // Create the request to send to the applications manager\n    SubmitApplicationRequest appRequest \u003d Records\n        .newRecord(SubmitApplicationRequest.class);\n    appRequest.setApplicationSubmissionContext(appContext);\n\n    // Submit the application to the applications manager\n    LOG.info(\"Submitting application to ASM\");\n    rmClient.submitApplication(appRequest);\n\n    // Monitor the application to wait for launch state\n    ApplicationReport appReport \u003d monitorApplication(appId,\n        EnumSet.of(YarnApplicationState.ACCEPTED));\n    ApplicationAttemptId attemptId \u003d appReport.getCurrentApplicationAttemptId();\n    LOG.info(\"Launching application with id: \" + attemptId);\n\n    // launch AM\n    launchAM(attemptId);\n\n    // Monitor the application for end state\n    appReport \u003d monitorApplication(appId, EnumSet.of(\n        YarnApplicationState.KILLED, YarnApplicationState.FAILED,\n        YarnApplicationState.FINISHED));\n    YarnApplicationState appState \u003d appReport.getYarnApplicationState();\n    FinalApplicationStatus appStatus \u003d appReport.getFinalApplicationStatus();\n\n    LOG.info(\"App ended with state: \" + appReport.getYarnApplicationState()\n        + \" and status: \" + appStatus);\n    if (YarnApplicationState.FINISHED \u003d\u003d appState\n        \u0026\u0026 FinalApplicationStatus.SUCCEEDED \u003d\u003d appStatus) {\n      LOG.info(\"Application has completed successfully.\");\n      return true;\n    } else {\n      LOG.info(\"Application did finished unsuccessfully.\" + \" YarnState\u003d\"\n          + appState.toString() + \", FinalStatus\u003d\" + appStatus.toString());\n      return false;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/src/main/java/org/apache/hadoop/yarn/applications/unmanagedamlauncher/UnmanagedAMLauncher.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/src/main/java/org/apache/hadoop/yarn/applications/unmanagedamlauncher/UnmanagedAMLauncher.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/src/main/java/org/apache/hadoop/yarn/applications/unmanagedamlauncher/UnmanagedAMLauncher.java"
      }
    },
    "3ef19e9dbd5995634aac9b4011765e1d889ea6f5": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-4438. Add a simple, generic client to run \u0027easy\u0027 AMs in YARN. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1365185 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/07/12 10:33 AM",
      "commitName": "3ef19e9dbd5995634aac9b4011765e1d889ea6f5",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,75 @@\n+  public boolean run() throws IOException {\n+    LOG.info(\"Starting Client\");\n+\n+    // Connect to ResourceManager\n+    connectToRM();\n+    assert (rmClient !\u003d null);\n+\n+    // Get a new application id\n+    GetNewApplicationResponse newApp \u003d getApplication();\n+    ApplicationId appId \u003d newApp.getApplicationId();\n+\n+    // Create launch context for app master\n+    LOG.info(\"Setting up application submission context for ASM\");\n+    ApplicationSubmissionContext appContext \u003d Records\n+        .newRecord(ApplicationSubmissionContext.class);\n+\n+    // set the application id\n+    appContext.setApplicationId(appId);\n+    // set the application name\n+    appContext.setApplicationName(appName);\n+\n+    // Set the priority for the application master\n+    Priority pri \u003d Records.newRecord(Priority.class);\n+    pri.setPriority(amPriority);\n+    appContext.setPriority(pri);\n+\n+    // Set the queue to which this application is to be submitted in the RM\n+    appContext.setQueue(amQueue);\n+\n+    // Set up the container launch context for the application master\n+    ContainerLaunchContext amContainer \u003d Records\n+        .newRecord(ContainerLaunchContext.class);\n+    appContext.setAMContainerSpec(amContainer);\n+\n+    // unmanaged AM\n+    appContext.setUnmanagedAM(true);\n+    LOG.info(\"Setting unmanaged AM\");\n+\n+    // Create the request to send to the applications manager\n+    SubmitApplicationRequest appRequest \u003d Records\n+        .newRecord(SubmitApplicationRequest.class);\n+    appRequest.setApplicationSubmissionContext(appContext);\n+\n+    // Submit the application to the applications manager\n+    LOG.info(\"Submitting application to ASM\");\n+    rmClient.submitApplication(appRequest);\n+\n+    // Monitor the application to wait for launch state\n+    ApplicationReport appReport \u003d monitorApplication(appId,\n+        EnumSet.of(YarnApplicationState.ACCEPTED));\n+    ApplicationAttemptId attemptId \u003d appReport.getCurrentApplicationAttemptId();\n+    LOG.info(\"Launching application with id: \" + attemptId);\n+\n+    // launch AM\n+    launchAM(attemptId);\n+\n+    // Monitor the application for end state\n+    appReport \u003d monitorApplication(appId, EnumSet.of(\n+        YarnApplicationState.KILLED, YarnApplicationState.FAILED,\n+        YarnApplicationState.FINISHED));\n+    YarnApplicationState appState \u003d appReport.getYarnApplicationState();\n+    FinalApplicationStatus appStatus \u003d appReport.getFinalApplicationStatus();\n+\n+    LOG.info(\"App ended with state: \" + appReport.getYarnApplicationState()\n+        + \" and status: \" + appStatus);\n+    if (YarnApplicationState.FINISHED \u003d\u003d appState\n+        \u0026\u0026 FinalApplicationStatus.SUCCEEDED \u003d\u003d appStatus) {\n+      LOG.info(\"Application has completed successfully.\");\n+      return true;\n+    } else {\n+      LOG.info(\"Application did finished unsuccessfully.\" + \" YarnState\u003d\"\n+          + appState.toString() + \", FinalStatus\u003d\" + appStatus.toString());\n+      return false;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean run() throws IOException {\n    LOG.info(\"Starting Client\");\n\n    // Connect to ResourceManager\n    connectToRM();\n    assert (rmClient !\u003d null);\n\n    // Get a new application id\n    GetNewApplicationResponse newApp \u003d getApplication();\n    ApplicationId appId \u003d newApp.getApplicationId();\n\n    // Create launch context for app master\n    LOG.info(\"Setting up application submission context for ASM\");\n    ApplicationSubmissionContext appContext \u003d Records\n        .newRecord(ApplicationSubmissionContext.class);\n\n    // set the application id\n    appContext.setApplicationId(appId);\n    // set the application name\n    appContext.setApplicationName(appName);\n\n    // Set the priority for the application master\n    Priority pri \u003d Records.newRecord(Priority.class);\n    pri.setPriority(amPriority);\n    appContext.setPriority(pri);\n\n    // Set the queue to which this application is to be submitted in the RM\n    appContext.setQueue(amQueue);\n\n    // Set up the container launch context for the application master\n    ContainerLaunchContext amContainer \u003d Records\n        .newRecord(ContainerLaunchContext.class);\n    appContext.setAMContainerSpec(amContainer);\n\n    // unmanaged AM\n    appContext.setUnmanagedAM(true);\n    LOG.info(\"Setting unmanaged AM\");\n\n    // Create the request to send to the applications manager\n    SubmitApplicationRequest appRequest \u003d Records\n        .newRecord(SubmitApplicationRequest.class);\n    appRequest.setApplicationSubmissionContext(appContext);\n\n    // Submit the application to the applications manager\n    LOG.info(\"Submitting application to ASM\");\n    rmClient.submitApplication(appRequest);\n\n    // Monitor the application to wait for launch state\n    ApplicationReport appReport \u003d monitorApplication(appId,\n        EnumSet.of(YarnApplicationState.ACCEPTED));\n    ApplicationAttemptId attemptId \u003d appReport.getCurrentApplicationAttemptId();\n    LOG.info(\"Launching application with id: \" + attemptId);\n\n    // launch AM\n    launchAM(attemptId);\n\n    // Monitor the application for end state\n    appReport \u003d monitorApplication(appId, EnumSet.of(\n        YarnApplicationState.KILLED, YarnApplicationState.FAILED,\n        YarnApplicationState.FINISHED));\n    YarnApplicationState appState \u003d appReport.getYarnApplicationState();\n    FinalApplicationStatus appStatus \u003d appReport.getFinalApplicationStatus();\n\n    LOG.info(\"App ended with state: \" + appReport.getYarnApplicationState()\n        + \" and status: \" + appStatus);\n    if (YarnApplicationState.FINISHED \u003d\u003d appState\n        \u0026\u0026 FinalApplicationStatus.SUCCEEDED \u003d\u003d appStatus) {\n      LOG.info(\"Application has completed successfully.\");\n      return true;\n    } else {\n      LOG.info(\"Application did finished unsuccessfully.\" + \" YarnState\u003d\"\n          + appState.toString() + \", FinalStatus\u003d\" + appStatus.toString());\n      return false;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/src/main/java/org/apache/hadoop/yarn/applications/unmanagedamlauncher/UnmanagedAMLauncher.java"
    }
  }
}