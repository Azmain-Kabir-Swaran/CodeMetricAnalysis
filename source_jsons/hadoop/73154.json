{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JMXJsonServlet.java",
  "functionName": "writeAttribute",
  "functionId": "writeAttribute___jg-JsonGenerator__oname-ObjectName__attr-MBeanAttributeInfo",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
  "functionStartLine": 324,
  "functionEndLine": 382,
  "numCommitsSeen": 21,
  "timeTaken": 1545,
  "changeHistory": [
    "61180f4656dd84067a43e89107d814e17c221dc2",
    "8d559d2d9a09f076689cf95621a5d087a9a7f4d8",
    "2d1406e9e7b75a833f79c0159031dae2ba3e6134",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "babd19de331c875a1dffee908617c07c3e1eb31b"
  ],
  "changeHistoryShort": {
    "61180f4656dd84067a43e89107d814e17c221dc2": "Ybodychange",
    "8d559d2d9a09f076689cf95621a5d087a9a7f4d8": "Ybodychange",
    "2d1406e9e7b75a833f79c0159031dae2ba3e6134": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "babd19de331c875a1dffee908617c07c3e1eb31b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "61180f4656dd84067a43e89107d814e17c221dc2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15942. Change the logging level form DEBUG to ERROR for RuntimeErrorException in JMXJsonServlet. Contributed by Anuhan Torgonshar.\n",
      "commitDate": "02/08/19 2:58 PM",
      "commitName": "61180f4656dd84067a43e89107d814e17c221dc2",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "10/10/18 9:51 PM",
      "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 295.71,
      "commitsBetweenForRepo": 2189,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,59 @@\n   private void writeAttribute(JsonGenerator jg, ObjectName oname, MBeanAttributeInfo attr) throws IOException {\n     if (!attr.isReadable()) {\n       return;\n     }\n     String attName \u003d attr.getName();\n     if (\"modelerType\".equals(attName)) {\n       return;\n     }\n     if (attName.indexOf(\"\u003d\") \u003e\u003d 0 || attName.indexOf(\":\") \u003e\u003d 0\n         || attName.indexOf(\" \") \u003e\u003d 0) {\n       return;\n     }\n     Object value \u003d null;\n     try {\n       value \u003d mBeanServer.getAttribute(oname, attName);\n     } catch (RuntimeMBeanException e) {\n       // UnsupportedOperationExceptions happen in the normal course of business,\n       // so no need to log them as errors all the time.\n       if (e.getCause() instanceof UnsupportedOperationException) {\n         LOG.debug(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n       } else {\n         LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n       }\n       return;\n     } catch (RuntimeErrorException e) {\n       // RuntimeErrorException happens when an unexpected failure occurs in getAttribute\n       // for example https://issues.apache.org/jira/browse/DAEMON-120\n-      LOG.debug(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n+      LOG.error(\"getting attribute {} of {} threw an exception\",\n+          attName, oname, e);\n       return;\n     } catch (AttributeNotFoundException e) {\n       //Ignored the attribute was not found, which should never happen because the bean\n       //just told us that it has this attribute, but if this happens just don\u0027t output\n       //the attribute.\n       return;\n     } catch (MBeanException e) {\n       //The code inside the attribute getter threw an exception so log it, and\n       // skip outputting the attribute\n       LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n       return;\n     } catch (RuntimeException e) {\n       //For some reason even with an MBeanException available to them Runtime exceptions\n       //can still find their way through, so treat them the same as MBeanException\n       LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n       return;\n     } catch (ReflectionException e) {\n       //This happens when the code inside the JMX bean (setter?? from the java docs)\n       //threw an exception, so log it and skip outputting the attribute\n       LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n       return;\n     } catch (InstanceNotFoundException e) {\n       //Ignored the mbean itself was not found, which should never happen because we\n       //just accessed it (perhaps something unregistered in-between) but if this\n       //happens just don\u0027t output the attribute.\n       return;\n     }\n \n     writeAttribute(jg, attName, value);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void writeAttribute(JsonGenerator jg, ObjectName oname, MBeanAttributeInfo attr) throws IOException {\n    if (!attr.isReadable()) {\n      return;\n    }\n    String attName \u003d attr.getName();\n    if (\"modelerType\".equals(attName)) {\n      return;\n    }\n    if (attName.indexOf(\"\u003d\") \u003e\u003d 0 || attName.indexOf(\":\") \u003e\u003d 0\n        || attName.indexOf(\" \") \u003e\u003d 0) {\n      return;\n    }\n    Object value \u003d null;\n    try {\n      value \u003d mBeanServer.getAttribute(oname, attName);\n    } catch (RuntimeMBeanException e) {\n      // UnsupportedOperationExceptions happen in the normal course of business,\n      // so no need to log them as errors all the time.\n      if (e.getCause() instanceof UnsupportedOperationException) {\n        LOG.debug(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      } else {\n        LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      }\n      return;\n    } catch (RuntimeErrorException e) {\n      // RuntimeErrorException happens when an unexpected failure occurs in getAttribute\n      // for example https://issues.apache.org/jira/browse/DAEMON-120\n      LOG.error(\"getting attribute {} of {} threw an exception\",\n          attName, oname, e);\n      return;\n    } catch (AttributeNotFoundException e) {\n      //Ignored the attribute was not found, which should never happen because the bean\n      //just told us that it has this attribute, but if this happens just don\u0027t output\n      //the attribute.\n      return;\n    } catch (MBeanException e) {\n      //The code inside the attribute getter threw an exception so log it, and\n      // skip outputting the attribute\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (RuntimeException e) {\n      //For some reason even with an MBeanException available to them Runtime exceptions\n      //can still find their way through, so treat them the same as MBeanException\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (ReflectionException e) {\n      //This happens when the code inside the JMX bean (setter?? from the java docs)\n      //threw an exception, so log it and skip outputting the attribute\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (InstanceNotFoundException e) {\n      //Ignored the mbean itself was not found, which should never happen because we\n      //just accessed it (perhaps something unregistered in-between) but if this\n      //happens just don\u0027t output the attribute.\n      return;\n    }\n\n    writeAttribute(jg, attName, value);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {}
    },
    "8d559d2d9a09f076689cf95621a5d087a9a7f4d8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8452. DN logs backtrace when running under jsvc and /jmx is loaded (Andy Isaacson via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1344733 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/05/12 7:10 AM",
      "commitName": "8d559d2d9a09f076689cf95621a5d087a9a7f4d8",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "03/05/12 8:31 PM",
      "commitNameOld": "a70587f368a6519fceb0388c14befec4e97e8293",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 27.44,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,58 @@\n   private void writeAttribute(JsonGenerator jg, ObjectName oname, MBeanAttributeInfo attr) throws IOException {\n     if (!attr.isReadable()) {\n       return;\n     }\n     String attName \u003d attr.getName();\n     if (\"modelerType\".equals(attName)) {\n       return;\n     }\n     if (attName.indexOf(\"\u003d\") \u003e\u003d 0 || attName.indexOf(\":\") \u003e\u003d 0\n         || attName.indexOf(\" \") \u003e\u003d 0) {\n       return;\n     }\n     Object value \u003d null;\n     try {\n       value \u003d mBeanServer.getAttribute(oname, attName);\n     } catch (RuntimeMBeanException e) {\n       // UnsupportedOperationExceptions happen in the normal course of business,\n       // so no need to log them as errors all the time.\n       if (e.getCause() instanceof UnsupportedOperationException) {\n         LOG.debug(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n       } else {\n         LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n       }\n       return;\n+    } catch (RuntimeErrorException e) {\n+      // RuntimeErrorException happens when an unexpected failure occurs in getAttribute\n+      // for example https://issues.apache.org/jira/browse/DAEMON-120\n+      LOG.debug(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n+      return;\n     } catch (AttributeNotFoundException e) {\n       //Ignored the attribute was not found, which should never happen because the bean\n       //just told us that it has this attribute, but if this happens just don\u0027t output\n       //the attribute.\n       return;\n     } catch (MBeanException e) {\n       //The code inside the attribute getter threw an exception so log it, and\n       // skip outputting the attribute\n       LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n       return;\n     } catch (RuntimeException e) {\n       //For some reason even with an MBeanException available to them Runtime exceptions\n       //can still find their way through, so treat them the same as MBeanException\n       LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n       return;\n     } catch (ReflectionException e) {\n       //This happens when the code inside the JMX bean (setter?? from the java docs)\n       //threw an exception, so log it and skip outputting the attribute\n       LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n       return;\n     } catch (InstanceNotFoundException e) {\n       //Ignored the mbean itself was not found, which should never happen because we\n       //just accessed it (perhaps something unregistered in-between) but if this\n       //happens just don\u0027t output the attribute.\n       return;\n     }\n \n     writeAttribute(jg, attName, value);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void writeAttribute(JsonGenerator jg, ObjectName oname, MBeanAttributeInfo attr) throws IOException {\n    if (!attr.isReadable()) {\n      return;\n    }\n    String attName \u003d attr.getName();\n    if (\"modelerType\".equals(attName)) {\n      return;\n    }\n    if (attName.indexOf(\"\u003d\") \u003e\u003d 0 || attName.indexOf(\":\") \u003e\u003d 0\n        || attName.indexOf(\" \") \u003e\u003d 0) {\n      return;\n    }\n    Object value \u003d null;\n    try {\n      value \u003d mBeanServer.getAttribute(oname, attName);\n    } catch (RuntimeMBeanException e) {\n      // UnsupportedOperationExceptions happen in the normal course of business,\n      // so no need to log them as errors all the time.\n      if (e.getCause() instanceof UnsupportedOperationException) {\n        LOG.debug(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      } else {\n        LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      }\n      return;\n    } catch (RuntimeErrorException e) {\n      // RuntimeErrorException happens when an unexpected failure occurs in getAttribute\n      // for example https://issues.apache.org/jira/browse/DAEMON-120\n      LOG.debug(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (AttributeNotFoundException e) {\n      //Ignored the attribute was not found, which should never happen because the bean\n      //just told us that it has this attribute, but if this happens just don\u0027t output\n      //the attribute.\n      return;\n    } catch (MBeanException e) {\n      //The code inside the attribute getter threw an exception so log it, and\n      // skip outputting the attribute\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (RuntimeException e) {\n      //For some reason even with an MBeanException available to them Runtime exceptions\n      //can still find their way through, so treat them the same as MBeanException\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (ReflectionException e) {\n      //This happens when the code inside the JMX bean (setter?? from the java docs)\n      //threw an exception, so log it and skip outputting the attribute\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (InstanceNotFoundException e) {\n      //Ignored the mbean itself was not found, which should never happen because we\n      //just accessed it (perhaps something unregistered in-between) but if this\n      //happens just don\u0027t output the attribute.\n      return;\n    }\n\n    writeAttribute(jg, attName, value);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {}
    },
    "2d1406e9e7b75a833f79c0159031dae2ba3e6134": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8027. Visiting /jmx on the daemon web interfaces may print unnecessary error in logs. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/12 5:09 PM",
      "commitName": "2d1406e9e7b75a833f79c0159031dae2ba3e6134",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "25/10/11 3:58 PM",
      "commitNameOld": "029d86e1aaab2d1039b4cc94ba10c27bf28cd01f",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 104.09,
      "commitsBetweenForRepo": 616,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,53 @@\n   private void writeAttribute(JsonGenerator jg, ObjectName oname, MBeanAttributeInfo attr) throws IOException {\n     if (!attr.isReadable()) {\n       return;\n     }\n     String attName \u003d attr.getName();\n     if (\"modelerType\".equals(attName)) {\n       return;\n     }\n     if (attName.indexOf(\"\u003d\") \u003e\u003d 0 || attName.indexOf(\":\") \u003e\u003d 0\n         || attName.indexOf(\" \") \u003e\u003d 0) {\n       return;\n     }\n     Object value \u003d null;\n     try {\n       value \u003d mBeanServer.getAttribute(oname, attName);\n+    } catch (RuntimeMBeanException e) {\n+      // UnsupportedOperationExceptions happen in the normal course of business,\n+      // so no need to log them as errors all the time.\n+      if (e.getCause() instanceof UnsupportedOperationException) {\n+        LOG.debug(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n+      } else {\n+        LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n+      }\n+      return;\n     } catch (AttributeNotFoundException e) {\n       //Ignored the attribute was not found, which should never happen because the bean\n       //just told us that it has this attribute, but if this happens just don\u0027t output\n       //the attribute.\n       return;\n     } catch (MBeanException e) {\n       //The code inside the attribute getter threw an exception so log it, and\n       // skip outputting the attribute\n       LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n       return;\n     } catch (RuntimeException e) {\n       //For some reason even with an MBeanException available to them Runtime exceptions\n       //can still find their way through, so treat them the same as MBeanException\n       LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n       return;\n     } catch (ReflectionException e) {\n       //This happens when the code inside the JMX bean (setter?? from the java docs)\n       //threw an exception, so log it and skip outputting the attribute\n       LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n       return;\n     } catch (InstanceNotFoundException e) {\n       //Ignored the mbean itself was not found, which should never happen because we\n       //just accessed it (perhaps something unregistered in-between) but if this\n       //happens just don\u0027t output the attribute.\n       return;\n     }\n \n     writeAttribute(jg, attName, value);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void writeAttribute(JsonGenerator jg, ObjectName oname, MBeanAttributeInfo attr) throws IOException {\n    if (!attr.isReadable()) {\n      return;\n    }\n    String attName \u003d attr.getName();\n    if (\"modelerType\".equals(attName)) {\n      return;\n    }\n    if (attName.indexOf(\"\u003d\") \u003e\u003d 0 || attName.indexOf(\":\") \u003e\u003d 0\n        || attName.indexOf(\" \") \u003e\u003d 0) {\n      return;\n    }\n    Object value \u003d null;\n    try {\n      value \u003d mBeanServer.getAttribute(oname, attName);\n    } catch (RuntimeMBeanException e) {\n      // UnsupportedOperationExceptions happen in the normal course of business,\n      // so no need to log them as errors all the time.\n      if (e.getCause() instanceof UnsupportedOperationException) {\n        LOG.debug(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      } else {\n        LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      }\n      return;\n    } catch (AttributeNotFoundException e) {\n      //Ignored the attribute was not found, which should never happen because the bean\n      //just told us that it has this attribute, but if this happens just don\u0027t output\n      //the attribute.\n      return;\n    } catch (MBeanException e) {\n      //The code inside the attribute getter threw an exception so log it, and\n      // skip outputting the attribute\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (RuntimeException e) {\n      //For some reason even with an MBeanException available to them Runtime exceptions\n      //can still find their way through, so treat them the same as MBeanException\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (ReflectionException e) {\n      //This happens when the code inside the JMX bean (setter?? from the java docs)\n      //threw an exception, so log it and skip outputting the attribute\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (InstanceNotFoundException e) {\n      //Ignored the mbean itself was not found, which should never happen because we\n      //just accessed it (perhaps something unregistered in-between) but if this\n      //happens just don\u0027t output the attribute.\n      return;\n    }\n\n    writeAttribute(jg, attName, value);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void writeAttribute(JsonGenerator jg, ObjectName oname, MBeanAttributeInfo attr) throws IOException {\n    if (!attr.isReadable()) {\n      return;\n    }\n    String attName \u003d attr.getName();\n    if (\"modelerType\".equals(attName)) {\n      return;\n    }\n    if (attName.indexOf(\"\u003d\") \u003e\u003d 0 || attName.indexOf(\":\") \u003e\u003d 0\n        || attName.indexOf(\" \") \u003e\u003d 0) {\n      return;\n    }\n    Object value \u003d null;\n    try {\n      value \u003d mBeanServer.getAttribute(oname, attName);\n    } catch (AttributeNotFoundException e) {\n      //Ignored the attribute was not found, which should never happen because the bean\n      //just told us that it has this attribute, but if this happens just don\u0027t output\n      //the attribute.\n      return;\n    } catch (MBeanException e) {\n      //The code inside the attribute getter threw an exception so log it, and\n      // skip outputting the attribute\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (RuntimeException e) {\n      //For some reason even with an MBeanException available to them Runtime exceptions\n      //can still find their way through, so treat them the same as MBeanException\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (ReflectionException e) {\n      //This happens when the code inside the JMX bean (setter?? from the java docs)\n      //threw an exception, so log it and skip outputting the attribute\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (InstanceNotFoundException e) {\n      //Ignored the mbean itself was not found, which should never happen because we\n      //just accessed it (perhaps something unregistered in-between) but if this\n      //happens just don\u0027t output the attribute.\n      return;\n    }\n\n    writeAttribute(jg, attName, value);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void writeAttribute(JsonGenerator jg, ObjectName oname, MBeanAttributeInfo attr) throws IOException {\n    if (!attr.isReadable()) {\n      return;\n    }\n    String attName \u003d attr.getName();\n    if (\"modelerType\".equals(attName)) {\n      return;\n    }\n    if (attName.indexOf(\"\u003d\") \u003e\u003d 0 || attName.indexOf(\":\") \u003e\u003d 0\n        || attName.indexOf(\" \") \u003e\u003d 0) {\n      return;\n    }\n    Object value \u003d null;\n    try {\n      value \u003d mBeanServer.getAttribute(oname, attName);\n    } catch (AttributeNotFoundException e) {\n      //Ignored the attribute was not found, which should never happen because the bean\n      //just told us that it has this attribute, but if this happens just don\u0027t output\n      //the attribute.\n      return;\n    } catch (MBeanException e) {\n      //The code inside the attribute getter threw an exception so log it, and\n      // skip outputting the attribute\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (RuntimeException e) {\n      //For some reason even with an MBeanException available to them Runtime exceptions\n      //can still find their way through, so treat them the same as MBeanException\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (ReflectionException e) {\n      //This happens when the code inside the JMX bean (setter?? from the java docs)\n      //threw an exception, so log it and skip outputting the attribute\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (InstanceNotFoundException e) {\n      //Ignored the mbean itself was not found, which should never happen because we\n      //just accessed it (perhaps something unregistered in-between) but if this\n      //happens just don\u0027t output the attribute.\n      return;\n    }\n\n    writeAttribute(jg, attName, value);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void writeAttribute(JsonGenerator jg, ObjectName oname, MBeanAttributeInfo attr) throws IOException {\n    if (!attr.isReadable()) {\n      return;\n    }\n    String attName \u003d attr.getName();\n    if (\"modelerType\".equals(attName)) {\n      return;\n    }\n    if (attName.indexOf(\"\u003d\") \u003e\u003d 0 || attName.indexOf(\":\") \u003e\u003d 0\n        || attName.indexOf(\" \") \u003e\u003d 0) {\n      return;\n    }\n    Object value \u003d null;\n    try {\n      value \u003d mBeanServer.getAttribute(oname, attName);\n    } catch (AttributeNotFoundException e) {\n      //Ignored the attribute was not found, which should never happen because the bean\n      //just told us that it has this attribute, but if this happens just don\u0027t output\n      //the attribute.\n      return;\n    } catch (MBeanException e) {\n      //The code inside the attribute getter threw an exception so log it, and\n      // skip outputting the attribute\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (RuntimeException e) {\n      //For some reason even with an MBeanException available to them Runtime exceptions\n      //can still find their way through, so treat them the same as MBeanException\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (ReflectionException e) {\n      //This happens when the code inside the JMX bean (setter?? from the java docs)\n      //threw an exception, so log it and skip outputting the attribute\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (InstanceNotFoundException e) {\n      //Ignored the mbean itself was not found, which should never happen because we\n      //just accessed it (perhaps something unregistered in-between) but if this\n      //happens just don\u0027t output the attribute.\n      return;\n    }\n\n    writeAttribute(jg, attName, value);\n  }",
      "path": "common/src/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
        "newPath": "common/src/java/org/apache/hadoop/jmx/JMXJsonServlet.java"
      }
    },
    "babd19de331c875a1dffee908617c07c3e1eb31b": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7144. Expose JMX metrics via JSON servlet.\nContributed by Robert Joseph Evans\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1131289 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/11 4:40 PM",
      "commitName": "babd19de331c875a1dffee908617c07c3e1eb31b",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,44 @@\n+  private void writeAttribute(JsonGenerator jg, ObjectName oname, MBeanAttributeInfo attr) throws IOException {\n+    if (!attr.isReadable()) {\n+      return;\n+    }\n+    String attName \u003d attr.getName();\n+    if (\"modelerType\".equals(attName)) {\n+      return;\n+    }\n+    if (attName.indexOf(\"\u003d\") \u003e\u003d 0 || attName.indexOf(\":\") \u003e\u003d 0\n+        || attName.indexOf(\" \") \u003e\u003d 0) {\n+      return;\n+    }\n+    Object value \u003d null;\n+    try {\n+      value \u003d mBeanServer.getAttribute(oname, attName);\n+    } catch (AttributeNotFoundException e) {\n+      //Ignored the attribute was not found, which should never happen because the bean\n+      //just told us that it has this attribute, but if this happens just don\u0027t output\n+      //the attribute.\n+      return;\n+    } catch (MBeanException e) {\n+      //The code inside the attribute getter threw an exception so log it, and\n+      // skip outputting the attribute\n+      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n+      return;\n+    } catch (RuntimeException e) {\n+      //For some reason even with an MBeanException available to them Runtime exceptions\n+      //can still find their way through, so treat them the same as MBeanException\n+      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n+      return;\n+    } catch (ReflectionException e) {\n+      //This happens when the code inside the JMX bean (setter?? from the java docs)\n+      //threw an exception, so log it and skip outputting the attribute\n+      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n+      return;\n+    } catch (InstanceNotFoundException e) {\n+      //Ignored the mbean itself was not found, which should never happen because we\n+      //just accessed it (perhaps something unregistered in-between) but if this\n+      //happens just don\u0027t output the attribute.\n+      return;\n+    }\n+\n+    writeAttribute(jg, attName, value);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void writeAttribute(JsonGenerator jg, ObjectName oname, MBeanAttributeInfo attr) throws IOException {\n    if (!attr.isReadable()) {\n      return;\n    }\n    String attName \u003d attr.getName();\n    if (\"modelerType\".equals(attName)) {\n      return;\n    }\n    if (attName.indexOf(\"\u003d\") \u003e\u003d 0 || attName.indexOf(\":\") \u003e\u003d 0\n        || attName.indexOf(\" \") \u003e\u003d 0) {\n      return;\n    }\n    Object value \u003d null;\n    try {\n      value \u003d mBeanServer.getAttribute(oname, attName);\n    } catch (AttributeNotFoundException e) {\n      //Ignored the attribute was not found, which should never happen because the bean\n      //just told us that it has this attribute, but if this happens just don\u0027t output\n      //the attribute.\n      return;\n    } catch (MBeanException e) {\n      //The code inside the attribute getter threw an exception so log it, and\n      // skip outputting the attribute\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (RuntimeException e) {\n      //For some reason even with an MBeanException available to them Runtime exceptions\n      //can still find their way through, so treat them the same as MBeanException\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (ReflectionException e) {\n      //This happens when the code inside the JMX bean (setter?? from the java docs)\n      //threw an exception, so log it and skip outputting the attribute\n      LOG.error(\"getting attribute \"+attName+\" of \"+oname+\" threw an exception\", e);\n      return;\n    } catch (InstanceNotFoundException e) {\n      //Ignored the mbean itself was not found, which should never happen because we\n      //just accessed it (perhaps something unregistered in-between) but if this\n      //happens just don\u0027t output the attribute.\n      return;\n    }\n\n    writeAttribute(jg, attName, value);\n  }",
      "path": "src/java/org/apache/hadoop/jmx/JMXJsonServlet.java"
    }
  }
}