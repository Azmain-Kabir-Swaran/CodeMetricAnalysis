{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StageAllocatorLowCostAligned.java",
  "functionName": "getDurationIntervalGangsCanFit",
  "functionId": "getDurationIntervalGangsCanFit___startTime-long__endTime-long__planModifications-RLESparseResourceAllocation__capacity-Resource__netRLERes-RLESparseResourceAllocation__resCalc-ResourceCalculator__requestedResources-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
  "functionStartLine": 308,
  "functionEndLine": 350,
  "numCommitsSeen": 11,
  "timeTaken": 4529,
  "changeHistory": [
    "a3a615eeab8c14ccdc548311097e62a916963dc5",
    "156f24ead00436faad5d4aeef327a546392cd265"
  ],
  "changeHistoryShort": {
    "a3a615eeab8c14ccdc548311097e62a916963dc5": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "156f24ead00436faad5d4aeef327a546392cd265": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a3a615eeab8c14ccdc548311097e62a916963dc5": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
      "commitDate": "01/05/17 4:01 PM",
      "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
      "commitAuthor": "Subru Krishnan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
          "commitDate": "01/05/17 4:01 PM",
          "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "05/12/15 9:26 PM",
          "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 512.73,
          "commitsBetweenForRepo": 3348,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,43 @@\n-  protected DurationInterval getDurationInterval(long startTime, long endTime,\n-      Map\u003cLong, Resource\u003e planLoads,\n-      RLESparseResourceAllocation planModifications, Resource capacity,\n-      ResourceCalculator resCalc, long step) {\n+  protected static int getDurationIntervalGangsCanFit(long startTime,\n+      long endTime, RLESparseResourceAllocation planModifications,\n+      Resource capacity, RLESparseResourceAllocation netRLERes,\n+      ResourceCalculator resCalc, Resource requestedResources)\n+      throws PlanningException {\n \n-    // Initialize the dominant loads structure\n-    Resource dominantResources \u003d Resource.newInstance(0, 0);\n+    // Initialize auxiliary variables\n+    int gangsCanFit \u003d Integer.MAX_VALUE;\n+    int curGangsCanFit;\n \n-    // Calculate totalCost and maxLoad\n-    double totalCost \u003d 0.0;\n-    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n+    // Calculate the total amount of available resources between startTime\n+    // and endTime, by subtracting planModifications from netRLERes\n+    RLESparseResourceAllocation netAvailableResources \u003d\n+        RLESparseResourceAllocation.merge(resCalc, capacity, netRLERes,\n+            planModifications, RLEOperator.subtractTestNonNegative, startTime,\n+            endTime);\n \n-      // Get the load\n-      Resource load \u003d getLoadAtTime(t, planLoads, planModifications);\n+    // Convert result to a map\n+    NavigableMap\u003cLong, Resource\u003e mapAvailableCapacity \u003d\n+        netAvailableResources.getCumulative();\n \n-      // Increase the total cost\n-      totalCost +\u003d calcCostOfLoad(load, capacity, resCalc);\n+    // Iterate over the map representation.\n+    // At each point, calculate how many times does \u0027requestedResources\u0027 fit.\n+    // The result is the minimum over all time points.\n+    for (Entry\u003cLong, Resource\u003e e : mapAvailableCapacity.entrySet()) {\n+      Long t \u003d e.getKey();\n+      Resource curAvailable \u003d e.getValue();\n+      if (t \u003e\u003d endTime) {\n+        break;\n+      }\n \n-      // Update the dominant resources\n-      dominantResources \u003d Resources.componentwiseMax(dominantResources, load);\n-\n+      if (curAvailable \u003d\u003d null) {\n+        gangsCanFit \u003d 0;\n+      } else {\n+        curGangsCanFit \u003d (int) Math.floor(Resources.divide(resCalc, capacity,\n+            curAvailable, requestedResources));\n+        if (curGangsCanFit \u003c gangsCanFit) {\n+          gangsCanFit \u003d curGangsCanFit;\n+        }\n+      }\n     }\n-\n-    // Return the corresponding durationInterval\n-    return new DurationInterval(startTime, endTime, totalCost,\n-        dominantResources);\n-\n+    return gangsCanFit;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static int getDurationIntervalGangsCanFit(long startTime,\n      long endTime, RLESparseResourceAllocation planModifications,\n      Resource capacity, RLESparseResourceAllocation netRLERes,\n      ResourceCalculator resCalc, Resource requestedResources)\n      throws PlanningException {\n\n    // Initialize auxiliary variables\n    int gangsCanFit \u003d Integer.MAX_VALUE;\n    int curGangsCanFit;\n\n    // Calculate the total amount of available resources between startTime\n    // and endTime, by subtracting planModifications from netRLERes\n    RLESparseResourceAllocation netAvailableResources \u003d\n        RLESparseResourceAllocation.merge(resCalc, capacity, netRLERes,\n            planModifications, RLEOperator.subtractTestNonNegative, startTime,\n            endTime);\n\n    // Convert result to a map\n    NavigableMap\u003cLong, Resource\u003e mapAvailableCapacity \u003d\n        netAvailableResources.getCumulative();\n\n    // Iterate over the map representation.\n    // At each point, calculate how many times does \u0027requestedResources\u0027 fit.\n    // The result is the minimum over all time points.\n    for (Entry\u003cLong, Resource\u003e e : mapAvailableCapacity.entrySet()) {\n      Long t \u003d e.getKey();\n      Resource curAvailable \u003d e.getValue();\n      if (t \u003e\u003d endTime) {\n        break;\n      }\n\n      if (curAvailable \u003d\u003d null) {\n        gangsCanFit \u003d 0;\n      } else {\n        curGangsCanFit \u003d (int) Math.floor(Resources.divide(resCalc, capacity,\n            curAvailable, requestedResources));\n        if (curGangsCanFit \u003c gangsCanFit) {\n          gangsCanFit \u003d curGangsCanFit;\n        }\n      }\n    }\n    return gangsCanFit;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
          "extendedDetails": {
            "oldValue": "getDurationInterval",
            "newValue": "getDurationIntervalGangsCanFit"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
          "commitDate": "01/05/17 4:01 PM",
          "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "05/12/15 9:26 PM",
          "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 512.73,
          "commitsBetweenForRepo": 3348,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,43 @@\n-  protected DurationInterval getDurationInterval(long startTime, long endTime,\n-      Map\u003cLong, Resource\u003e planLoads,\n-      RLESparseResourceAllocation planModifications, Resource capacity,\n-      ResourceCalculator resCalc, long step) {\n+  protected static int getDurationIntervalGangsCanFit(long startTime,\n+      long endTime, RLESparseResourceAllocation planModifications,\n+      Resource capacity, RLESparseResourceAllocation netRLERes,\n+      ResourceCalculator resCalc, Resource requestedResources)\n+      throws PlanningException {\n \n-    // Initialize the dominant loads structure\n-    Resource dominantResources \u003d Resource.newInstance(0, 0);\n+    // Initialize auxiliary variables\n+    int gangsCanFit \u003d Integer.MAX_VALUE;\n+    int curGangsCanFit;\n \n-    // Calculate totalCost and maxLoad\n-    double totalCost \u003d 0.0;\n-    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n+    // Calculate the total amount of available resources between startTime\n+    // and endTime, by subtracting planModifications from netRLERes\n+    RLESparseResourceAllocation netAvailableResources \u003d\n+        RLESparseResourceAllocation.merge(resCalc, capacity, netRLERes,\n+            planModifications, RLEOperator.subtractTestNonNegative, startTime,\n+            endTime);\n \n-      // Get the load\n-      Resource load \u003d getLoadAtTime(t, planLoads, planModifications);\n+    // Convert result to a map\n+    NavigableMap\u003cLong, Resource\u003e mapAvailableCapacity \u003d\n+        netAvailableResources.getCumulative();\n \n-      // Increase the total cost\n-      totalCost +\u003d calcCostOfLoad(load, capacity, resCalc);\n+    // Iterate over the map representation.\n+    // At each point, calculate how many times does \u0027requestedResources\u0027 fit.\n+    // The result is the minimum over all time points.\n+    for (Entry\u003cLong, Resource\u003e e : mapAvailableCapacity.entrySet()) {\n+      Long t \u003d e.getKey();\n+      Resource curAvailable \u003d e.getValue();\n+      if (t \u003e\u003d endTime) {\n+        break;\n+      }\n \n-      // Update the dominant resources\n-      dominantResources \u003d Resources.componentwiseMax(dominantResources, load);\n-\n+      if (curAvailable \u003d\u003d null) {\n+        gangsCanFit \u003d 0;\n+      } else {\n+        curGangsCanFit \u003d (int) Math.floor(Resources.divide(resCalc, capacity,\n+            curAvailable, requestedResources));\n+        if (curGangsCanFit \u003c gangsCanFit) {\n+          gangsCanFit \u003d curGangsCanFit;\n+        }\n+      }\n     }\n-\n-    // Return the corresponding durationInterval\n-    return new DurationInterval(startTime, endTime, totalCost,\n-        dominantResources);\n-\n+    return gangsCanFit;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static int getDurationIntervalGangsCanFit(long startTime,\n      long endTime, RLESparseResourceAllocation planModifications,\n      Resource capacity, RLESparseResourceAllocation netRLERes,\n      ResourceCalculator resCalc, Resource requestedResources)\n      throws PlanningException {\n\n    // Initialize auxiliary variables\n    int gangsCanFit \u003d Integer.MAX_VALUE;\n    int curGangsCanFit;\n\n    // Calculate the total amount of available resources between startTime\n    // and endTime, by subtracting planModifications from netRLERes\n    RLESparseResourceAllocation netAvailableResources \u003d\n        RLESparseResourceAllocation.merge(resCalc, capacity, netRLERes,\n            planModifications, RLEOperator.subtractTestNonNegative, startTime,\n            endTime);\n\n    // Convert result to a map\n    NavigableMap\u003cLong, Resource\u003e mapAvailableCapacity \u003d\n        netAvailableResources.getCumulative();\n\n    // Iterate over the map representation.\n    // At each point, calculate how many times does \u0027requestedResources\u0027 fit.\n    // The result is the minimum over all time points.\n    for (Entry\u003cLong, Resource\u003e e : mapAvailableCapacity.entrySet()) {\n      Long t \u003d e.getKey();\n      Resource curAvailable \u003d e.getValue();\n      if (t \u003e\u003d endTime) {\n        break;\n      }\n\n      if (curAvailable \u003d\u003d null) {\n        gangsCanFit \u003d 0;\n      } else {\n        curGangsCanFit \u003d (int) Math.floor(Resources.divide(resCalc, capacity,\n            curAvailable, requestedResources));\n        if (curGangsCanFit \u003c gangsCanFit) {\n          gangsCanFit \u003d curGangsCanFit;\n        }\n      }\n    }\n    return gangsCanFit;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
          "extendedDetails": {
            "oldValue": "[startTime-long, endTime-long, planLoads-Map\u003cLong,Resource\u003e, planModifications-RLESparseResourceAllocation, capacity-Resource, resCalc-ResourceCalculator, step-long]",
            "newValue": "[startTime-long, endTime-long, planModifications-RLESparseResourceAllocation, capacity-Resource, netRLERes-RLESparseResourceAllocation, resCalc-ResourceCalculator, requestedResources-Resource]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
          "commitDate": "01/05/17 4:01 PM",
          "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "05/12/15 9:26 PM",
          "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 512.73,
          "commitsBetweenForRepo": 3348,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,43 @@\n-  protected DurationInterval getDurationInterval(long startTime, long endTime,\n-      Map\u003cLong, Resource\u003e planLoads,\n-      RLESparseResourceAllocation planModifications, Resource capacity,\n-      ResourceCalculator resCalc, long step) {\n+  protected static int getDurationIntervalGangsCanFit(long startTime,\n+      long endTime, RLESparseResourceAllocation planModifications,\n+      Resource capacity, RLESparseResourceAllocation netRLERes,\n+      ResourceCalculator resCalc, Resource requestedResources)\n+      throws PlanningException {\n \n-    // Initialize the dominant loads structure\n-    Resource dominantResources \u003d Resource.newInstance(0, 0);\n+    // Initialize auxiliary variables\n+    int gangsCanFit \u003d Integer.MAX_VALUE;\n+    int curGangsCanFit;\n \n-    // Calculate totalCost and maxLoad\n-    double totalCost \u003d 0.0;\n-    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n+    // Calculate the total amount of available resources between startTime\n+    // and endTime, by subtracting planModifications from netRLERes\n+    RLESparseResourceAllocation netAvailableResources \u003d\n+        RLESparseResourceAllocation.merge(resCalc, capacity, netRLERes,\n+            planModifications, RLEOperator.subtractTestNonNegative, startTime,\n+            endTime);\n \n-      // Get the load\n-      Resource load \u003d getLoadAtTime(t, planLoads, planModifications);\n+    // Convert result to a map\n+    NavigableMap\u003cLong, Resource\u003e mapAvailableCapacity \u003d\n+        netAvailableResources.getCumulative();\n \n-      // Increase the total cost\n-      totalCost +\u003d calcCostOfLoad(load, capacity, resCalc);\n+    // Iterate over the map representation.\n+    // At each point, calculate how many times does \u0027requestedResources\u0027 fit.\n+    // The result is the minimum over all time points.\n+    for (Entry\u003cLong, Resource\u003e e : mapAvailableCapacity.entrySet()) {\n+      Long t \u003d e.getKey();\n+      Resource curAvailable \u003d e.getValue();\n+      if (t \u003e\u003d endTime) {\n+        break;\n+      }\n \n-      // Update the dominant resources\n-      dominantResources \u003d Resources.componentwiseMax(dominantResources, load);\n-\n+      if (curAvailable \u003d\u003d null) {\n+        gangsCanFit \u003d 0;\n+      } else {\n+        curGangsCanFit \u003d (int) Math.floor(Resources.divide(resCalc, capacity,\n+            curAvailable, requestedResources));\n+        if (curGangsCanFit \u003c gangsCanFit) {\n+          gangsCanFit \u003d curGangsCanFit;\n+        }\n+      }\n     }\n-\n-    // Return the corresponding durationInterval\n-    return new DurationInterval(startTime, endTime, totalCost,\n-        dominantResources);\n-\n+    return gangsCanFit;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static int getDurationIntervalGangsCanFit(long startTime,\n      long endTime, RLESparseResourceAllocation planModifications,\n      Resource capacity, RLESparseResourceAllocation netRLERes,\n      ResourceCalculator resCalc, Resource requestedResources)\n      throws PlanningException {\n\n    // Initialize auxiliary variables\n    int gangsCanFit \u003d Integer.MAX_VALUE;\n    int curGangsCanFit;\n\n    // Calculate the total amount of available resources between startTime\n    // and endTime, by subtracting planModifications from netRLERes\n    RLESparseResourceAllocation netAvailableResources \u003d\n        RLESparseResourceAllocation.merge(resCalc, capacity, netRLERes,\n            planModifications, RLEOperator.subtractTestNonNegative, startTime,\n            endTime);\n\n    // Convert result to a map\n    NavigableMap\u003cLong, Resource\u003e mapAvailableCapacity \u003d\n        netAvailableResources.getCumulative();\n\n    // Iterate over the map representation.\n    // At each point, calculate how many times does \u0027requestedResources\u0027 fit.\n    // The result is the minimum over all time points.\n    for (Entry\u003cLong, Resource\u003e e : mapAvailableCapacity.entrySet()) {\n      Long t \u003d e.getKey();\n      Resource curAvailable \u003d e.getValue();\n      if (t \u003e\u003d endTime) {\n        break;\n      }\n\n      if (curAvailable \u003d\u003d null) {\n        gangsCanFit \u003d 0;\n      } else {\n        curGangsCanFit \u003d (int) Math.floor(Resources.divide(resCalc, capacity,\n            curAvailable, requestedResources));\n        if (curGangsCanFit \u003c gangsCanFit) {\n          gangsCanFit \u003d curGangsCanFit;\n        }\n      }\n    }\n    return gangsCanFit;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
          "extendedDetails": {
            "oldValue": "DurationInterval",
            "newValue": "int"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
          "commitDate": "01/05/17 4:01 PM",
          "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "05/12/15 9:26 PM",
          "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 512.73,
          "commitsBetweenForRepo": 3348,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,43 @@\n-  protected DurationInterval getDurationInterval(long startTime, long endTime,\n-      Map\u003cLong, Resource\u003e planLoads,\n-      RLESparseResourceAllocation planModifications, Resource capacity,\n-      ResourceCalculator resCalc, long step) {\n+  protected static int getDurationIntervalGangsCanFit(long startTime,\n+      long endTime, RLESparseResourceAllocation planModifications,\n+      Resource capacity, RLESparseResourceAllocation netRLERes,\n+      ResourceCalculator resCalc, Resource requestedResources)\n+      throws PlanningException {\n \n-    // Initialize the dominant loads structure\n-    Resource dominantResources \u003d Resource.newInstance(0, 0);\n+    // Initialize auxiliary variables\n+    int gangsCanFit \u003d Integer.MAX_VALUE;\n+    int curGangsCanFit;\n \n-    // Calculate totalCost and maxLoad\n-    double totalCost \u003d 0.0;\n-    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n+    // Calculate the total amount of available resources between startTime\n+    // and endTime, by subtracting planModifications from netRLERes\n+    RLESparseResourceAllocation netAvailableResources \u003d\n+        RLESparseResourceAllocation.merge(resCalc, capacity, netRLERes,\n+            planModifications, RLEOperator.subtractTestNonNegative, startTime,\n+            endTime);\n \n-      // Get the load\n-      Resource load \u003d getLoadAtTime(t, planLoads, planModifications);\n+    // Convert result to a map\n+    NavigableMap\u003cLong, Resource\u003e mapAvailableCapacity \u003d\n+        netAvailableResources.getCumulative();\n \n-      // Increase the total cost\n-      totalCost +\u003d calcCostOfLoad(load, capacity, resCalc);\n+    // Iterate over the map representation.\n+    // At each point, calculate how many times does \u0027requestedResources\u0027 fit.\n+    // The result is the minimum over all time points.\n+    for (Entry\u003cLong, Resource\u003e e : mapAvailableCapacity.entrySet()) {\n+      Long t \u003d e.getKey();\n+      Resource curAvailable \u003d e.getValue();\n+      if (t \u003e\u003d endTime) {\n+        break;\n+      }\n \n-      // Update the dominant resources\n-      dominantResources \u003d Resources.componentwiseMax(dominantResources, load);\n-\n+      if (curAvailable \u003d\u003d null) {\n+        gangsCanFit \u003d 0;\n+      } else {\n+        curGangsCanFit \u003d (int) Math.floor(Resources.divide(resCalc, capacity,\n+            curAvailable, requestedResources));\n+        if (curGangsCanFit \u003c gangsCanFit) {\n+          gangsCanFit \u003d curGangsCanFit;\n+        }\n+      }\n     }\n-\n-    // Return the corresponding durationInterval\n-    return new DurationInterval(startTime, endTime, totalCost,\n-        dominantResources);\n-\n+    return gangsCanFit;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static int getDurationIntervalGangsCanFit(long startTime,\n      long endTime, RLESparseResourceAllocation planModifications,\n      Resource capacity, RLESparseResourceAllocation netRLERes,\n      ResourceCalculator resCalc, Resource requestedResources)\n      throws PlanningException {\n\n    // Initialize auxiliary variables\n    int gangsCanFit \u003d Integer.MAX_VALUE;\n    int curGangsCanFit;\n\n    // Calculate the total amount of available resources between startTime\n    // and endTime, by subtracting planModifications from netRLERes\n    RLESparseResourceAllocation netAvailableResources \u003d\n        RLESparseResourceAllocation.merge(resCalc, capacity, netRLERes,\n            planModifications, RLEOperator.subtractTestNonNegative, startTime,\n            endTime);\n\n    // Convert result to a map\n    NavigableMap\u003cLong, Resource\u003e mapAvailableCapacity \u003d\n        netAvailableResources.getCumulative();\n\n    // Iterate over the map representation.\n    // At each point, calculate how many times does \u0027requestedResources\u0027 fit.\n    // The result is the minimum over all time points.\n    for (Entry\u003cLong, Resource\u003e e : mapAvailableCapacity.entrySet()) {\n      Long t \u003d e.getKey();\n      Resource curAvailable \u003d e.getValue();\n      if (t \u003e\u003d endTime) {\n        break;\n      }\n\n      if (curAvailable \u003d\u003d null) {\n        gangsCanFit \u003d 0;\n      } else {\n        curGangsCanFit \u003d (int) Math.floor(Resources.divide(resCalc, capacity,\n            curAvailable, requestedResources));\n        if (curGangsCanFit \u003c gangsCanFit) {\n          gangsCanFit \u003d curGangsCanFit;\n        }\n      }\n    }\n    return gangsCanFit;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[protected, static]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
          "commitDate": "01/05/17 4:01 PM",
          "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "05/12/15 9:26 PM",
          "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 512.73,
          "commitsBetweenForRepo": 3348,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,43 @@\n-  protected DurationInterval getDurationInterval(long startTime, long endTime,\n-      Map\u003cLong, Resource\u003e planLoads,\n-      RLESparseResourceAllocation planModifications, Resource capacity,\n-      ResourceCalculator resCalc, long step) {\n+  protected static int getDurationIntervalGangsCanFit(long startTime,\n+      long endTime, RLESparseResourceAllocation planModifications,\n+      Resource capacity, RLESparseResourceAllocation netRLERes,\n+      ResourceCalculator resCalc, Resource requestedResources)\n+      throws PlanningException {\n \n-    // Initialize the dominant loads structure\n-    Resource dominantResources \u003d Resource.newInstance(0, 0);\n+    // Initialize auxiliary variables\n+    int gangsCanFit \u003d Integer.MAX_VALUE;\n+    int curGangsCanFit;\n \n-    // Calculate totalCost and maxLoad\n-    double totalCost \u003d 0.0;\n-    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n+    // Calculate the total amount of available resources between startTime\n+    // and endTime, by subtracting planModifications from netRLERes\n+    RLESparseResourceAllocation netAvailableResources \u003d\n+        RLESparseResourceAllocation.merge(resCalc, capacity, netRLERes,\n+            planModifications, RLEOperator.subtractTestNonNegative, startTime,\n+            endTime);\n \n-      // Get the load\n-      Resource load \u003d getLoadAtTime(t, planLoads, planModifications);\n+    // Convert result to a map\n+    NavigableMap\u003cLong, Resource\u003e mapAvailableCapacity \u003d\n+        netAvailableResources.getCumulative();\n \n-      // Increase the total cost\n-      totalCost +\u003d calcCostOfLoad(load, capacity, resCalc);\n+    // Iterate over the map representation.\n+    // At each point, calculate how many times does \u0027requestedResources\u0027 fit.\n+    // The result is the minimum over all time points.\n+    for (Entry\u003cLong, Resource\u003e e : mapAvailableCapacity.entrySet()) {\n+      Long t \u003d e.getKey();\n+      Resource curAvailable \u003d e.getValue();\n+      if (t \u003e\u003d endTime) {\n+        break;\n+      }\n \n-      // Update the dominant resources\n-      dominantResources \u003d Resources.componentwiseMax(dominantResources, load);\n-\n+      if (curAvailable \u003d\u003d null) {\n+        gangsCanFit \u003d 0;\n+      } else {\n+        curGangsCanFit \u003d (int) Math.floor(Resources.divide(resCalc, capacity,\n+            curAvailable, requestedResources));\n+        if (curGangsCanFit \u003c gangsCanFit) {\n+          gangsCanFit \u003d curGangsCanFit;\n+        }\n+      }\n     }\n-\n-    // Return the corresponding durationInterval\n-    return new DurationInterval(startTime, endTime, totalCost,\n-        dominantResources);\n-\n+    return gangsCanFit;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static int getDurationIntervalGangsCanFit(long startTime,\n      long endTime, RLESparseResourceAllocation planModifications,\n      Resource capacity, RLESparseResourceAllocation netRLERes,\n      ResourceCalculator resCalc, Resource requestedResources)\n      throws PlanningException {\n\n    // Initialize auxiliary variables\n    int gangsCanFit \u003d Integer.MAX_VALUE;\n    int curGangsCanFit;\n\n    // Calculate the total amount of available resources between startTime\n    // and endTime, by subtracting planModifications from netRLERes\n    RLESparseResourceAllocation netAvailableResources \u003d\n        RLESparseResourceAllocation.merge(resCalc, capacity, netRLERes,\n            planModifications, RLEOperator.subtractTestNonNegative, startTime,\n            endTime);\n\n    // Convert result to a map\n    NavigableMap\u003cLong, Resource\u003e mapAvailableCapacity \u003d\n        netAvailableResources.getCumulative();\n\n    // Iterate over the map representation.\n    // At each point, calculate how many times does \u0027requestedResources\u0027 fit.\n    // The result is the minimum over all time points.\n    for (Entry\u003cLong, Resource\u003e e : mapAvailableCapacity.entrySet()) {\n      Long t \u003d e.getKey();\n      Resource curAvailable \u003d e.getValue();\n      if (t \u003e\u003d endTime) {\n        break;\n      }\n\n      if (curAvailable \u003d\u003d null) {\n        gangsCanFit \u003d 0;\n      } else {\n        curGangsCanFit \u003d (int) Math.floor(Resources.divide(resCalc, capacity,\n            curAvailable, requestedResources));\n        if (curGangsCanFit \u003c gangsCanFit) {\n          gangsCanFit \u003d curGangsCanFit;\n        }\n      }\n    }\n    return gangsCanFit;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[PlanningException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
          "commitDate": "01/05/17 4:01 PM",
          "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "05/12/15 9:26 PM",
          "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 512.73,
          "commitsBetweenForRepo": 3348,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,43 @@\n-  protected DurationInterval getDurationInterval(long startTime, long endTime,\n-      Map\u003cLong, Resource\u003e planLoads,\n-      RLESparseResourceAllocation planModifications, Resource capacity,\n-      ResourceCalculator resCalc, long step) {\n+  protected static int getDurationIntervalGangsCanFit(long startTime,\n+      long endTime, RLESparseResourceAllocation planModifications,\n+      Resource capacity, RLESparseResourceAllocation netRLERes,\n+      ResourceCalculator resCalc, Resource requestedResources)\n+      throws PlanningException {\n \n-    // Initialize the dominant loads structure\n-    Resource dominantResources \u003d Resource.newInstance(0, 0);\n+    // Initialize auxiliary variables\n+    int gangsCanFit \u003d Integer.MAX_VALUE;\n+    int curGangsCanFit;\n \n-    // Calculate totalCost and maxLoad\n-    double totalCost \u003d 0.0;\n-    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n+    // Calculate the total amount of available resources between startTime\n+    // and endTime, by subtracting planModifications from netRLERes\n+    RLESparseResourceAllocation netAvailableResources \u003d\n+        RLESparseResourceAllocation.merge(resCalc, capacity, netRLERes,\n+            planModifications, RLEOperator.subtractTestNonNegative, startTime,\n+            endTime);\n \n-      // Get the load\n-      Resource load \u003d getLoadAtTime(t, planLoads, planModifications);\n+    // Convert result to a map\n+    NavigableMap\u003cLong, Resource\u003e mapAvailableCapacity \u003d\n+        netAvailableResources.getCumulative();\n \n-      // Increase the total cost\n-      totalCost +\u003d calcCostOfLoad(load, capacity, resCalc);\n+    // Iterate over the map representation.\n+    // At each point, calculate how many times does \u0027requestedResources\u0027 fit.\n+    // The result is the minimum over all time points.\n+    for (Entry\u003cLong, Resource\u003e e : mapAvailableCapacity.entrySet()) {\n+      Long t \u003d e.getKey();\n+      Resource curAvailable \u003d e.getValue();\n+      if (t \u003e\u003d endTime) {\n+        break;\n+      }\n \n-      // Update the dominant resources\n-      dominantResources \u003d Resources.componentwiseMax(dominantResources, load);\n-\n+      if (curAvailable \u003d\u003d null) {\n+        gangsCanFit \u003d 0;\n+      } else {\n+        curGangsCanFit \u003d (int) Math.floor(Resources.divide(resCalc, capacity,\n+            curAvailable, requestedResources));\n+        if (curGangsCanFit \u003c gangsCanFit) {\n+          gangsCanFit \u003d curGangsCanFit;\n+        }\n+      }\n     }\n-\n-    // Return the corresponding durationInterval\n-    return new DurationInterval(startTime, endTime, totalCost,\n-        dominantResources);\n-\n+    return gangsCanFit;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static int getDurationIntervalGangsCanFit(long startTime,\n      long endTime, RLESparseResourceAllocation planModifications,\n      Resource capacity, RLESparseResourceAllocation netRLERes,\n      ResourceCalculator resCalc, Resource requestedResources)\n      throws PlanningException {\n\n    // Initialize auxiliary variables\n    int gangsCanFit \u003d Integer.MAX_VALUE;\n    int curGangsCanFit;\n\n    // Calculate the total amount of available resources between startTime\n    // and endTime, by subtracting planModifications from netRLERes\n    RLESparseResourceAllocation netAvailableResources \u003d\n        RLESparseResourceAllocation.merge(resCalc, capacity, netRLERes,\n            planModifications, RLEOperator.subtractTestNonNegative, startTime,\n            endTime);\n\n    // Convert result to a map\n    NavigableMap\u003cLong, Resource\u003e mapAvailableCapacity \u003d\n        netAvailableResources.getCumulative();\n\n    // Iterate over the map representation.\n    // At each point, calculate how many times does \u0027requestedResources\u0027 fit.\n    // The result is the minimum over all time points.\n    for (Entry\u003cLong, Resource\u003e e : mapAvailableCapacity.entrySet()) {\n      Long t \u003d e.getKey();\n      Resource curAvailable \u003d e.getValue();\n      if (t \u003e\u003d endTime) {\n        break;\n      }\n\n      if (curAvailable \u003d\u003d null) {\n        gangsCanFit \u003d 0;\n      } else {\n        curGangsCanFit \u003d (int) Math.floor(Resources.divide(resCalc, capacity,\n            curAvailable, requestedResources));\n        if (curGangsCanFit \u003c gangsCanFit) {\n          gangsCanFit \u003d curGangsCanFit;\n        }\n      }\n    }\n    return gangsCanFit;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
          "extendedDetails": {}
        }
      ]
    },
    "156f24ead00436faad5d4aeef327a546392cd265": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3656. LowCost: A Cost-Based Placement Agent for YARN Reservations. (Jonathan Yaniv and Ishai Menache via curino)\n",
      "commitDate": "25/07/15 7:39 AM",
      "commitName": "156f24ead00436faad5d4aeef327a546392cd265",
      "commitAuthor": "ccurino",
      "diff": "@@ -0,0 +1,28 @@\n+  protected DurationInterval getDurationInterval(long startTime, long endTime,\n+      Map\u003cLong, Resource\u003e planLoads,\n+      RLESparseResourceAllocation planModifications, Resource capacity,\n+      ResourceCalculator resCalc, long step) {\n+\n+    // Initialize the dominant loads structure\n+    Resource dominantResources \u003d Resource.newInstance(0, 0);\n+\n+    // Calculate totalCost and maxLoad\n+    double totalCost \u003d 0.0;\n+    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n+\n+      // Get the load\n+      Resource load \u003d getLoadAtTime(t, planLoads, planModifications);\n+\n+      // Increase the total cost\n+      totalCost +\u003d calcCostOfLoad(load, capacity, resCalc);\n+\n+      // Update the dominant resources\n+      dominantResources \u003d Resources.componentwiseMax(dominantResources, load);\n+\n+    }\n+\n+    // Return the corresponding durationInterval\n+    return new DurationInterval(startTime, endTime, totalCost,\n+        dominantResources);\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected DurationInterval getDurationInterval(long startTime, long endTime,\n      Map\u003cLong, Resource\u003e planLoads,\n      RLESparseResourceAllocation planModifications, Resource capacity,\n      ResourceCalculator resCalc, long step) {\n\n    // Initialize the dominant loads structure\n    Resource dominantResources \u003d Resource.newInstance(0, 0);\n\n    // Calculate totalCost and maxLoad\n    double totalCost \u003d 0.0;\n    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n\n      // Get the load\n      Resource load \u003d getLoadAtTime(t, planLoads, planModifications);\n\n      // Increase the total cost\n      totalCost +\u003d calcCostOfLoad(load, capacity, resCalc);\n\n      // Update the dominant resources\n      dominantResources \u003d Resources.componentwiseMax(dominantResources, load);\n\n    }\n\n    // Return the corresponding durationInterval\n    return new DurationInterval(startTime, endTime, totalCost,\n        dominantResources);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java"
    }
  }
}