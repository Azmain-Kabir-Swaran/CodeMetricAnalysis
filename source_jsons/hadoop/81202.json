{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DNS.java",
  "functionName": "getIPs",
  "functionId": "getIPs___strInterface-String__returnSubinterfaces-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
  "functionStartLine": 170,
  "functionEndLine": 204,
  "numCommitsSeen": 18,
  "timeTaken": 1509,
  "changeHistory": [
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
    "950273bde4ccfc3721667898bbef39660fa0ad25",
    "07c3b022814e1ebb53484c68dd244993762b9916",
    "d8cc362350bddf64fbb9df7fda1ee202c6e94487",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": "Ybodychange",
    "950273bde4ccfc3721667898bbef39660fa0ad25": "Ymultichange(Yparameterchange,Ybodychange)",
    "07c3b022814e1ebb53484c68dd244993762b9916": "Ybodychange",
    "d8cc362350bddf64fbb9df7fda1ee202c6e94487": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10571. Use Log.*(Object, Throwable) overload to log exceptions.\nContributed by Andras Bokor.\n",
      "commitDate": "14/02/18 8:20 AM",
      "commitName": "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 211.49,
      "commitsBetweenForRepo": 1578,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,35 @@\n   public static String[] getIPs(String strInterface,\n       boolean returnSubinterfaces) throws UnknownHostException {\n     if (\"default\".equals(strInterface)) {\n       return new String[] { cachedHostAddress };\n     }\n     NetworkInterface netIf;\n     try {\n       netIf \u003d NetworkInterface.getByName(strInterface);\n       if (netIf \u003d\u003d null) {\n         netIf \u003d getSubinterface(strInterface);\n       }\n     } catch (SocketException e) {\n-      LOG.warn(\"I/O error finding interface \" + strInterface +\n-          \": \" + e.getMessage());\n+      LOG.warn(\"I/O error finding interface {}\", strInterface, e);\n       return new String[] { cachedHostAddress };\n     }\n     if (netIf \u003d\u003d null) {\n       throw new UnknownHostException(\"No such interface \" + strInterface);\n     }\n \n     // NB: Using a LinkedHashSet to preserve the order for callers\n     // that depend on a particular element being 1st in the array.\n     // For example, getDefaultIP always returns the first element.\n     LinkedHashSet\u003cInetAddress\u003e allAddrs \u003d new LinkedHashSet\u003cInetAddress\u003e();\n     allAddrs.addAll(Collections.list(netIf.getInetAddresses()));\n     if (!returnSubinterfaces) {\n       allAddrs.removeAll(getSubinterfaceInetAddrs(netIf));\n     }\n \n     String ips[] \u003d new String[allAddrs.size()];\n     int i \u003d 0;\n     for (InetAddress addr : allAddrs) {\n       ips[i++] \u003d addr.getHostAddress();\n     }\n     return ips;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String[] getIPs(String strInterface,\n      boolean returnSubinterfaces) throws UnknownHostException {\n    if (\"default\".equals(strInterface)) {\n      return new String[] { cachedHostAddress };\n    }\n    NetworkInterface netIf;\n    try {\n      netIf \u003d NetworkInterface.getByName(strInterface);\n      if (netIf \u003d\u003d null) {\n        netIf \u003d getSubinterface(strInterface);\n      }\n    } catch (SocketException e) {\n      LOG.warn(\"I/O error finding interface {}\", strInterface, e);\n      return new String[] { cachedHostAddress };\n    }\n    if (netIf \u003d\u003d null) {\n      throw new UnknownHostException(\"No such interface \" + strInterface);\n    }\n\n    // NB: Using a LinkedHashSet to preserve the order for callers\n    // that depend on a particular element being 1st in the array.\n    // For example, getDefaultIP always returns the first element.\n    LinkedHashSet\u003cInetAddress\u003e allAddrs \u003d new LinkedHashSet\u003cInetAddress\u003e();\n    allAddrs.addAll(Collections.list(netIf.getInetAddresses()));\n    if (!returnSubinterfaces) {\n      allAddrs.removeAll(getSubinterfaceInetAddrs(netIf));\n    }\n\n    String ips[] \u003d new String[allAddrs.size()];\n    int i \u003d 0;\n    for (InetAddress addr : allAddrs) {\n      ips[i++] \u003d addr.getHostAddress();\n    }\n    return ips;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
      "extendedDetails": {}
    },
    "950273bde4ccfc3721667898bbef39660fa0ad25": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-8210. Common side of HDFS-3148: The client should be able to use multiple local interfaces for data transfer. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308457 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/12 11:49 AM",
      "commitName": "950273bde4ccfc3721667898bbef39660fa0ad25",
      "commitAuthor": "Eli Collins",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-8210. Common side of HDFS-3148: The client should be able to use multiple local interfaces for data transfer. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308457 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 11:49 AM",
          "commitName": "950273bde4ccfc3721667898bbef39660fa0ad25",
          "commitAuthor": "Eli Collins",
          "commitDateOld": "08/03/12 8:43 PM",
          "commitNameOld": "07c3b022814e1ebb53484c68dd244993762b9916",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 24.59,
          "commitsBetweenForRepo": 142,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,36 @@\n-  public static String[] getIPs(String strInterface)\n-    throws UnknownHostException {\n+  public static String[] getIPs(String strInterface,\n+      boolean returnSubinterfaces) throws UnknownHostException {\n     if (\"default\".equals(strInterface)) {\n       return new String[] { cachedHostAddress };\n     }\n     NetworkInterface netIf;\n     try {\n       netIf \u003d NetworkInterface.getByName(strInterface);\n       if (netIf \u003d\u003d null) {\n         netIf \u003d getSubinterface(strInterface);\n       }\n     } catch (SocketException e) {\n       LOG.warn(\"I/O error finding interface \" + strInterface +\n           \": \" + e.getMessage());\n       return new String[] { cachedHostAddress };\n     }\n     if (netIf \u003d\u003d null) {\n       throw new UnknownHostException(\"No such interface \" + strInterface);\n     }\n-    Vector\u003cString\u003e ips \u003d new Vector\u003cString\u003e();\n-    Enumeration\u003cInetAddress\u003e addrs \u003d netIf.getInetAddresses();\n-    while (addrs.hasMoreElements()) {\n-      ips.add(addrs.nextElement().getHostAddress());\n+\n+    // NB: Using a LinkedHashSet to preserve the order for callers\n+    // that depend on a particular element being 1st in the array.\n+    // For example, getDefaultIP always returns the first element.\n+    LinkedHashSet\u003cInetAddress\u003e allAddrs \u003d new LinkedHashSet\u003cInetAddress\u003e();\n+    allAddrs.addAll(Collections.list(netIf.getInetAddresses()));\n+    if (!returnSubinterfaces) {\n+      allAddrs.removeAll(getSubinterfaceInetAddrs(netIf));\n     }\n-    return ips.toArray(new String[] {});\n+\n+    String ips[] \u003d new String[allAddrs.size()];\n+    int i \u003d 0;\n+    for (InetAddress addr : allAddrs) {\n+      ips[i++] \u003d addr.getHostAddress();\n+    }\n+    return ips;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static String[] getIPs(String strInterface,\n      boolean returnSubinterfaces) throws UnknownHostException {\n    if (\"default\".equals(strInterface)) {\n      return new String[] { cachedHostAddress };\n    }\n    NetworkInterface netIf;\n    try {\n      netIf \u003d NetworkInterface.getByName(strInterface);\n      if (netIf \u003d\u003d null) {\n        netIf \u003d getSubinterface(strInterface);\n      }\n    } catch (SocketException e) {\n      LOG.warn(\"I/O error finding interface \" + strInterface +\n          \": \" + e.getMessage());\n      return new String[] { cachedHostAddress };\n    }\n    if (netIf \u003d\u003d null) {\n      throw new UnknownHostException(\"No such interface \" + strInterface);\n    }\n\n    // NB: Using a LinkedHashSet to preserve the order for callers\n    // that depend on a particular element being 1st in the array.\n    // For example, getDefaultIP always returns the first element.\n    LinkedHashSet\u003cInetAddress\u003e allAddrs \u003d new LinkedHashSet\u003cInetAddress\u003e();\n    allAddrs.addAll(Collections.list(netIf.getInetAddresses()));\n    if (!returnSubinterfaces) {\n      allAddrs.removeAll(getSubinterfaceInetAddrs(netIf));\n    }\n\n    String ips[] \u003d new String[allAddrs.size()];\n    int i \u003d 0;\n    for (InetAddress addr : allAddrs) {\n      ips[i++] \u003d addr.getHostAddress();\n    }\n    return ips;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
          "extendedDetails": {
            "oldValue": "[strInterface-String]",
            "newValue": "[strInterface-String, returnSubinterfaces-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-8210. Common side of HDFS-3148: The client should be able to use multiple local interfaces for data transfer. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308457 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 11:49 AM",
          "commitName": "950273bde4ccfc3721667898bbef39660fa0ad25",
          "commitAuthor": "Eli Collins",
          "commitDateOld": "08/03/12 8:43 PM",
          "commitNameOld": "07c3b022814e1ebb53484c68dd244993762b9916",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 24.59,
          "commitsBetweenForRepo": 142,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,36 @@\n-  public static String[] getIPs(String strInterface)\n-    throws UnknownHostException {\n+  public static String[] getIPs(String strInterface,\n+      boolean returnSubinterfaces) throws UnknownHostException {\n     if (\"default\".equals(strInterface)) {\n       return new String[] { cachedHostAddress };\n     }\n     NetworkInterface netIf;\n     try {\n       netIf \u003d NetworkInterface.getByName(strInterface);\n       if (netIf \u003d\u003d null) {\n         netIf \u003d getSubinterface(strInterface);\n       }\n     } catch (SocketException e) {\n       LOG.warn(\"I/O error finding interface \" + strInterface +\n           \": \" + e.getMessage());\n       return new String[] { cachedHostAddress };\n     }\n     if (netIf \u003d\u003d null) {\n       throw new UnknownHostException(\"No such interface \" + strInterface);\n     }\n-    Vector\u003cString\u003e ips \u003d new Vector\u003cString\u003e();\n-    Enumeration\u003cInetAddress\u003e addrs \u003d netIf.getInetAddresses();\n-    while (addrs.hasMoreElements()) {\n-      ips.add(addrs.nextElement().getHostAddress());\n+\n+    // NB: Using a LinkedHashSet to preserve the order for callers\n+    // that depend on a particular element being 1st in the array.\n+    // For example, getDefaultIP always returns the first element.\n+    LinkedHashSet\u003cInetAddress\u003e allAddrs \u003d new LinkedHashSet\u003cInetAddress\u003e();\n+    allAddrs.addAll(Collections.list(netIf.getInetAddresses()));\n+    if (!returnSubinterfaces) {\n+      allAddrs.removeAll(getSubinterfaceInetAddrs(netIf));\n     }\n-    return ips.toArray(new String[] {});\n+\n+    String ips[] \u003d new String[allAddrs.size()];\n+    int i \u003d 0;\n+    for (InetAddress addr : allAddrs) {\n+      ips[i++] \u003d addr.getHostAddress();\n+    }\n+    return ips;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static String[] getIPs(String strInterface,\n      boolean returnSubinterfaces) throws UnknownHostException {\n    if (\"default\".equals(strInterface)) {\n      return new String[] { cachedHostAddress };\n    }\n    NetworkInterface netIf;\n    try {\n      netIf \u003d NetworkInterface.getByName(strInterface);\n      if (netIf \u003d\u003d null) {\n        netIf \u003d getSubinterface(strInterface);\n      }\n    } catch (SocketException e) {\n      LOG.warn(\"I/O error finding interface \" + strInterface +\n          \": \" + e.getMessage());\n      return new String[] { cachedHostAddress };\n    }\n    if (netIf \u003d\u003d null) {\n      throw new UnknownHostException(\"No such interface \" + strInterface);\n    }\n\n    // NB: Using a LinkedHashSet to preserve the order for callers\n    // that depend on a particular element being 1st in the array.\n    // For example, getDefaultIP always returns the first element.\n    LinkedHashSet\u003cInetAddress\u003e allAddrs \u003d new LinkedHashSet\u003cInetAddress\u003e();\n    allAddrs.addAll(Collections.list(netIf.getInetAddresses()));\n    if (!returnSubinterfaces) {\n      allAddrs.removeAll(getSubinterfaceInetAddrs(netIf));\n    }\n\n    String ips[] \u003d new String[allAddrs.size()];\n    int i \u003d 0;\n    for (InetAddress addr : allAddrs) {\n      ips[i++] \u003d addr.getHostAddress();\n    }\n    return ips;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
          "extendedDetails": {}
        }
      ]
    },
    "07c3b022814e1ebb53484c68dd244993762b9916": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7806. Support binding to sub-interfaces. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1298700 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/03/12 8:43 PM",
      "commitName": "07c3b022814e1ebb53484c68dd244993762b9916",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "08/03/12 7:51 PM",
      "commitNameOld": "d8cc362350bddf64fbb9df7fda1ee202c6e94487",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,26 @@\n   public static String[] getIPs(String strInterface)\n     throws UnknownHostException {\n     if (\"default\".equals(strInterface)) {\n       return new String[] { cachedHostAddress };\n     }\n-    NetworkInterface netIF;\n+    NetworkInterface netIf;\n     try {\n-      netIF \u003d NetworkInterface.getByName(strInterface);\n+      netIf \u003d NetworkInterface.getByName(strInterface);\n+      if (netIf \u003d\u003d null) {\n+        netIf \u003d getSubinterface(strInterface);\n+      }\n     } catch (SocketException e) {\n       LOG.warn(\"I/O error finding interface \" + strInterface +\n           \": \" + e.getMessage());\n       return new String[] { cachedHostAddress };\n     }\n-    if (netIF \u003d\u003d null) {\n+    if (netIf \u003d\u003d null) {\n       throw new UnknownHostException(\"No such interface \" + strInterface);\n     }\n     Vector\u003cString\u003e ips \u003d new Vector\u003cString\u003e();\n-    Enumeration\u003cInetAddress\u003e e \u003d netIF.getInetAddresses();\n-    while (e.hasMoreElements()) {\n-      ips.add(e.nextElement().getHostAddress());\n+    Enumeration\u003cInetAddress\u003e addrs \u003d netIf.getInetAddresses();\n+    while (addrs.hasMoreElements()) {\n+      ips.add(addrs.nextElement().getHostAddress());\n     }\n     return ips.toArray(new String[] {});\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String[] getIPs(String strInterface)\n    throws UnknownHostException {\n    if (\"default\".equals(strInterface)) {\n      return new String[] { cachedHostAddress };\n    }\n    NetworkInterface netIf;\n    try {\n      netIf \u003d NetworkInterface.getByName(strInterface);\n      if (netIf \u003d\u003d null) {\n        netIf \u003d getSubinterface(strInterface);\n      }\n    } catch (SocketException e) {\n      LOG.warn(\"I/O error finding interface \" + strInterface +\n          \": \" + e.getMessage());\n      return new String[] { cachedHostAddress };\n    }\n    if (netIf \u003d\u003d null) {\n      throw new UnknownHostException(\"No such interface \" + strInterface);\n    }\n    Vector\u003cString\u003e ips \u003d new Vector\u003cString\u003e();\n    Enumeration\u003cInetAddress\u003e addrs \u003d netIf.getInetAddresses();\n    while (addrs.hasMoreElements()) {\n      ips.add(addrs.nextElement().getHostAddress());\n    }\n    return ips.toArray(new String[] {});\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
      "extendedDetails": {}
    },
    "d8cc362350bddf64fbb9df7fda1ee202c6e94487": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8154. DNS#getIPs shouldn\u0027t silently return the local host IP for bogus interface names. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1298696 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/03/12 7:51 PM",
      "commitName": "d8cc362350bddf64fbb9df7fda1ee202c6e94487",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 197.15,
      "commitsBetweenForRepo": 1417,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,23 @@\n   public static String[] getIPs(String strInterface)\n     throws UnknownHostException {\n-    try {\n-      NetworkInterface netIF \u003d NetworkInterface.getByName(strInterface);\n-      if (netIF \u003d\u003d null) {\n-        return new String[] { cachedHostAddress };\n-      } else {\n-        Vector\u003cString\u003e ips \u003d new Vector\u003cString\u003e();\n-        Enumeration e \u003d netIF.getInetAddresses();\n-        while (e.hasMoreElements()) {\n-          ips.add(((InetAddress) e.nextElement()).getHostAddress());\n-        }\n-        return ips.toArray(new String[] {});\n-      }\n-    } catch (SocketException e) {\n-      return new String[]  { cachedHostAddress };\n+    if (\"default\".equals(strInterface)) {\n+      return new String[] { cachedHostAddress };\n     }\n+    NetworkInterface netIF;\n+    try {\n+      netIF \u003d NetworkInterface.getByName(strInterface);\n+    } catch (SocketException e) {\n+      LOG.warn(\"I/O error finding interface \" + strInterface +\n+          \": \" + e.getMessage());\n+      return new String[] { cachedHostAddress };\n+    }\n+    if (netIF \u003d\u003d null) {\n+      throw new UnknownHostException(\"No such interface \" + strInterface);\n+    }\n+    Vector\u003cString\u003e ips \u003d new Vector\u003cString\u003e();\n+    Enumeration\u003cInetAddress\u003e e \u003d netIF.getInetAddresses();\n+    while (e.hasMoreElements()) {\n+      ips.add(e.nextElement().getHostAddress());\n+    }\n+    return ips.toArray(new String[] {});\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String[] getIPs(String strInterface)\n    throws UnknownHostException {\n    if (\"default\".equals(strInterface)) {\n      return new String[] { cachedHostAddress };\n    }\n    NetworkInterface netIF;\n    try {\n      netIF \u003d NetworkInterface.getByName(strInterface);\n    } catch (SocketException e) {\n      LOG.warn(\"I/O error finding interface \" + strInterface +\n          \": \" + e.getMessage());\n      return new String[] { cachedHostAddress };\n    }\n    if (netIF \u003d\u003d null) {\n      throw new UnknownHostException(\"No such interface \" + strInterface);\n    }\n    Vector\u003cString\u003e ips \u003d new Vector\u003cString\u003e();\n    Enumeration\u003cInetAddress\u003e e \u003d netIF.getInetAddresses();\n    while (e.hasMoreElements()) {\n      ips.add(e.nextElement().getHostAddress());\n    }\n    return ips.toArray(new String[] {});\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static String[] getIPs(String strInterface)\n    throws UnknownHostException {\n    try {\n      NetworkInterface netIF \u003d NetworkInterface.getByName(strInterface);\n      if (netIF \u003d\u003d null) {\n        return new String[] { cachedHostAddress };\n      } else {\n        Vector\u003cString\u003e ips \u003d new Vector\u003cString\u003e();\n        Enumeration e \u003d netIF.getInetAddresses();\n        while (e.hasMoreElements()) {\n          ips.add(((InetAddress) e.nextElement()).getHostAddress());\n        }\n        return ips.toArray(new String[] {});\n      }\n    } catch (SocketException e) {\n      return new String[]  { cachedHostAddress };\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static String[] getIPs(String strInterface)\n    throws UnknownHostException {\n    try {\n      NetworkInterface netIF \u003d NetworkInterface.getByName(strInterface);\n      if (netIF \u003d\u003d null) {\n        return new String[] { cachedHostAddress };\n      } else {\n        Vector\u003cString\u003e ips \u003d new Vector\u003cString\u003e();\n        Enumeration e \u003d netIF.getInetAddresses();\n        while (e.hasMoreElements()) {\n          ips.add(((InetAddress) e.nextElement()).getHostAddress());\n        }\n        return ips.toArray(new String[] {});\n      }\n    } catch (SocketException e) {\n      return new String[]  { cachedHostAddress };\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/net/DNS.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/net/DNS.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static String[] getIPs(String strInterface)\n    throws UnknownHostException {\n    try {\n      NetworkInterface netIF \u003d NetworkInterface.getByName(strInterface);\n      if (netIF \u003d\u003d null) {\n        return new String[] { cachedHostAddress };\n      } else {\n        Vector\u003cString\u003e ips \u003d new Vector\u003cString\u003e();\n        Enumeration e \u003d netIF.getInetAddresses();\n        while (e.hasMoreElements()) {\n          ips.add(((InetAddress) e.nextElement()).getHostAddress());\n        }\n        return ips.toArray(new String[] {});\n      }\n    } catch (SocketException e) {\n      return new String[]  { cachedHostAddress };\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/net/DNS.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/net/DNS.java",
        "newPath": "common/src/java/org/apache/hadoop/net/DNS.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,18 @@\n+  public static String[] getIPs(String strInterface)\n+    throws UnknownHostException {\n+    try {\n+      NetworkInterface netIF \u003d NetworkInterface.getByName(strInterface);\n+      if (netIF \u003d\u003d null) {\n+        return new String[] { cachedHostAddress };\n+      } else {\n+        Vector\u003cString\u003e ips \u003d new Vector\u003cString\u003e();\n+        Enumeration e \u003d netIF.getInetAddresses();\n+        while (e.hasMoreElements()) {\n+          ips.add(((InetAddress) e.nextElement()).getHostAddress());\n+        }\n+        return ips.toArray(new String[] {});\n+      }\n+    } catch (SocketException e) {\n+      return new String[]  { cachedHostAddress };\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static String[] getIPs(String strInterface)\n    throws UnknownHostException {\n    try {\n      NetworkInterface netIF \u003d NetworkInterface.getByName(strInterface);\n      if (netIF \u003d\u003d null) {\n        return new String[] { cachedHostAddress };\n      } else {\n        Vector\u003cString\u003e ips \u003d new Vector\u003cString\u003e();\n        Enumeration e \u003d netIF.getInetAddresses();\n        while (e.hasMoreElements()) {\n          ips.add(((InetAddress) e.nextElement()).getHostAddress());\n        }\n        return ips.toArray(new String[] {});\n      }\n    } catch (SocketException e) {\n      return new String[]  { cachedHostAddress };\n    }\n  }",
      "path": "src/java/org/apache/hadoop/net/DNS.java"
    }
  }
}