{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AllocationBasedResourceUtilizationTracker.java",
  "functionName": "hasResourcesAvailable",
  "functionId": "hasResourcesAvailable___pMemBytes-long__vMemBytes-long__cpuVcores-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/AllocationBasedResourceUtilizationTracker.java",
  "functionStartLine": 89,
  "functionEndLine": 130,
  "numCommitsSeen": 48,
  "timeTaken": 5573,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "766b78ee074df29d5acd2ba2face5712dd20437f",
    "890e14c02a612c772cecd5dff2411060efd418a3",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
    "c8172f5f143d2fefafa5a412899ab7cd081b406d"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "766b78ee074df29d5acd2ba2face5712dd20437f": "Ybodychange",
    "890e14c02a612c772cecd5dff2411060efd418a3": "Ybodychange",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "c8172f5f143d2fefafa5a412899ab7cd081b406d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "24/10/18 7:58 AM",
      "commitNameOld": "766b78ee074df29d5acd2ba2face5712dd20437f",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 142.35,
      "commitsBetweenForRepo": 1036,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,42 @@\n   private boolean hasResourcesAvailable(long pMemBytes, long vMemBytes,\n       int cpuVcores) {\n     // Check physical memory.\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"pMemCheck [current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n           this.containersAllocation.getPhysicalMemory(),\n           (pMemBytes \u003e\u003e 20),\n           (getContainersMonitor().getPmemAllocatedForContainers() \u003e\u003e 20));\n     }\n     if (this.containersAllocation.getPhysicalMemory() +\n         (int) (pMemBytes \u003e\u003e 20) \u003e\n         (int) (getContainersMonitor()\n             .getPmemAllocatedForContainers() \u003e\u003e 20)) {\n       return false;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"before vMemCheck\" +\n               \"[isEnabled\u003d{}, current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n           getContainersMonitor().isVmemCheckEnabled(),\n           this.containersAllocation.getVirtualMemory(), (vMemBytes \u003e\u003e 20),\n           (getContainersMonitor().getVmemAllocatedForContainers() \u003e\u003e 20));\n     }\n     // Check virtual memory.\n     if (getContainersMonitor().isVmemCheckEnabled() \u0026\u0026\n         this.containersAllocation.getVirtualMemory() +\n             (int) (vMemBytes \u003e\u003e 20) \u003e\n             (int) (getContainersMonitor()\n                 .getVmemAllocatedForContainers() \u003e\u003e 20)) {\n       return false;\n     }\n \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"before cpuCheck [asked\u003d{} \u003e allowed\u003d{}]\",\n-          this.containersAllocation.getCPU(),\n-          getContainersMonitor().getVCoresAllocatedForContainers());\n-    }\n+    LOG.debug(\"before cpuCheck [asked\u003d{} \u003e allowed\u003d{}]\",\n+        this.containersAllocation.getCPU(),\n+        getContainersMonitor().getVCoresAllocatedForContainers());\n     // Check CPU.\n     if (this.containersAllocation.getCPU() + cpuVcores \u003e\n         getContainersMonitor().getVCoresAllocatedForContainers()) {\n       return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean hasResourcesAvailable(long pMemBytes, long vMemBytes,\n      int cpuVcores) {\n    // Check physical memory.\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"pMemCheck [current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n          this.containersAllocation.getPhysicalMemory(),\n          (pMemBytes \u003e\u003e 20),\n          (getContainersMonitor().getPmemAllocatedForContainers() \u003e\u003e 20));\n    }\n    if (this.containersAllocation.getPhysicalMemory() +\n        (int) (pMemBytes \u003e\u003e 20) \u003e\n        (int) (getContainersMonitor()\n            .getPmemAllocatedForContainers() \u003e\u003e 20)) {\n      return false;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"before vMemCheck\" +\n              \"[isEnabled\u003d{}, current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n          getContainersMonitor().isVmemCheckEnabled(),\n          this.containersAllocation.getVirtualMemory(), (vMemBytes \u003e\u003e 20),\n          (getContainersMonitor().getVmemAllocatedForContainers() \u003e\u003e 20));\n    }\n    // Check virtual memory.\n    if (getContainersMonitor().isVmemCheckEnabled() \u0026\u0026\n        this.containersAllocation.getVirtualMemory() +\n            (int) (vMemBytes \u003e\u003e 20) \u003e\n            (int) (getContainersMonitor()\n                .getVmemAllocatedForContainers() \u003e\u003e 20)) {\n      return false;\n    }\n\n    LOG.debug(\"before cpuCheck [asked\u003d{} \u003e allowed\u003d{}]\",\n        this.containersAllocation.getCPU(),\n        getContainersMonitor().getVCoresAllocatedForContainers());\n    // Check CPU.\n    if (this.containersAllocation.getCPU() + cpuVcores \u003e\n        getContainersMonitor().getVCoresAllocatedForContainers()) {\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/AllocationBasedResourceUtilizationTracker.java",
      "extendedDetails": {}
    },
    "766b78ee074df29d5acd2ba2face5712dd20437f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8911. ContainerScheduler incorrectly uses percentage number as the cpu resource utlization.\n",
      "commitDate": "24/10/18 7:58 AM",
      "commitName": "766b78ee074df29d5acd2ba2face5712dd20437f",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "28/07/17 4:32 PM",
      "commitNameOld": "890e14c02a612c772cecd5dff2411060efd418a3",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 452.64,
      "commitsBetweenForRepo": 4125,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,44 @@\n   private boolean hasResourcesAvailable(long pMemBytes, long vMemBytes,\n       int cpuVcores) {\n     // Check physical memory.\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"pMemCheck [current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n           this.containersAllocation.getPhysicalMemory(),\n           (pMemBytes \u003e\u003e 20),\n           (getContainersMonitor().getPmemAllocatedForContainers() \u003e\u003e 20));\n     }\n     if (this.containersAllocation.getPhysicalMemory() +\n         (int) (pMemBytes \u003e\u003e 20) \u003e\n         (int) (getContainersMonitor()\n             .getPmemAllocatedForContainers() \u003e\u003e 20)) {\n       return false;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"before vMemCheck\" +\n               \"[isEnabled\u003d{}, current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n           getContainersMonitor().isVmemCheckEnabled(),\n           this.containersAllocation.getVirtualMemory(), (vMemBytes \u003e\u003e 20),\n           (getContainersMonitor().getVmemAllocatedForContainers() \u003e\u003e 20));\n     }\n     // Check virtual memory.\n     if (getContainersMonitor().isVmemCheckEnabled() \u0026\u0026\n         this.containersAllocation.getVirtualMemory() +\n             (int) (vMemBytes \u003e\u003e 20) \u003e\n             (int) (getContainersMonitor()\n                 .getVmemAllocatedForContainers() \u003e\u003e 20)) {\n       return false;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"before cpuCheck [asked\u003d{} \u003e allowed\u003d{}]\",\n           this.containersAllocation.getCPU(),\n           getContainersMonitor().getVCoresAllocatedForContainers());\n     }\n-    // Check CPU. Compare using integral values of cores to avoid decimal\n-    // inaccuracies.\n-    if (!hasEnoughCpu(this.containersAllocation.getCPU(),\n-        getContainersMonitor().getVCoresAllocatedForContainers(), cpuVcores)) {\n+    // Check CPU.\n+    if (this.containersAllocation.getCPU() + cpuVcores \u003e\n+        getContainersMonitor().getVCoresAllocatedForContainers()) {\n       return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean hasResourcesAvailable(long pMemBytes, long vMemBytes,\n      int cpuVcores) {\n    // Check physical memory.\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"pMemCheck [current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n          this.containersAllocation.getPhysicalMemory(),\n          (pMemBytes \u003e\u003e 20),\n          (getContainersMonitor().getPmemAllocatedForContainers() \u003e\u003e 20));\n    }\n    if (this.containersAllocation.getPhysicalMemory() +\n        (int) (pMemBytes \u003e\u003e 20) \u003e\n        (int) (getContainersMonitor()\n            .getPmemAllocatedForContainers() \u003e\u003e 20)) {\n      return false;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"before vMemCheck\" +\n              \"[isEnabled\u003d{}, current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n          getContainersMonitor().isVmemCheckEnabled(),\n          this.containersAllocation.getVirtualMemory(), (vMemBytes \u003e\u003e 20),\n          (getContainersMonitor().getVmemAllocatedForContainers() \u003e\u003e 20));\n    }\n    // Check virtual memory.\n    if (getContainersMonitor().isVmemCheckEnabled() \u0026\u0026\n        this.containersAllocation.getVirtualMemory() +\n            (int) (vMemBytes \u003e\u003e 20) \u003e\n            (int) (getContainersMonitor()\n                .getVmemAllocatedForContainers() \u003e\u003e 20)) {\n      return false;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"before cpuCheck [asked\u003d{} \u003e allowed\u003d{}]\",\n          this.containersAllocation.getCPU(),\n          getContainersMonitor().getVCoresAllocatedForContainers());\n    }\n    // Check CPU.\n    if (this.containersAllocation.getCPU() + cpuVcores \u003e\n        getContainersMonitor().getVCoresAllocatedForContainers()) {\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/AllocationBasedResourceUtilizationTracker.java",
      "extendedDetails": {}
    },
    "890e14c02a612c772cecd5dff2411060efd418a3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6870. Fix floating point inaccuracies in resource availability check in AllocationBasedResourceUtilizationTracker. (Brook Zhou via asuresh)\n",
      "commitDate": "28/07/17 4:32 PM",
      "commitName": "890e14c02a612c772cecd5dff2411060efd418a3",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "15/11/16 7:56 AM",
      "commitNameOld": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 255.32,
      "commitsBetweenForRepo": 1344,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,45 @@\n   private boolean hasResourcesAvailable(long pMemBytes, long vMemBytes,\n       int cpuVcores) {\n     // Check physical memory.\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"pMemCheck [current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n           this.containersAllocation.getPhysicalMemory(),\n           (pMemBytes \u003e\u003e 20),\n           (getContainersMonitor().getPmemAllocatedForContainers() \u003e\u003e 20));\n     }\n     if (this.containersAllocation.getPhysicalMemory() +\n         (int) (pMemBytes \u003e\u003e 20) \u003e\n         (int) (getContainersMonitor()\n             .getPmemAllocatedForContainers() \u003e\u003e 20)) {\n       return false;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"before vMemCheck\" +\n               \"[isEnabled\u003d{}, current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n           getContainersMonitor().isVmemCheckEnabled(),\n           this.containersAllocation.getVirtualMemory(), (vMemBytes \u003e\u003e 20),\n           (getContainersMonitor().getVmemAllocatedForContainers() \u003e\u003e 20));\n     }\n     // Check virtual memory.\n     if (getContainersMonitor().isVmemCheckEnabled() \u0026\u0026\n         this.containersAllocation.getVirtualMemory() +\n             (int) (vMemBytes \u003e\u003e 20) \u003e\n             (int) (getContainersMonitor()\n                 .getVmemAllocatedForContainers() \u003e\u003e 20)) {\n       return false;\n     }\n \n-    float vCores \u003d (float) cpuVcores /\n-        getContainersMonitor().getVCoresAllocatedForContainers();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"before cpuCheck [asked\u003d{} \u003e allowed\u003d{}]\",\n-          this.containersAllocation.getCPU(), vCores);\n+          this.containersAllocation.getCPU(),\n+          getContainersMonitor().getVCoresAllocatedForContainers());\n     }\n-    // Check CPU.\n-    if (this.containersAllocation.getCPU() + vCores \u003e 1.0f) {\n+    // Check CPU. Compare using integral values of cores to avoid decimal\n+    // inaccuracies.\n+    if (!hasEnoughCpu(this.containersAllocation.getCPU(),\n+        getContainersMonitor().getVCoresAllocatedForContainers(), cpuVcores)) {\n       return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean hasResourcesAvailable(long pMemBytes, long vMemBytes,\n      int cpuVcores) {\n    // Check physical memory.\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"pMemCheck [current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n          this.containersAllocation.getPhysicalMemory(),\n          (pMemBytes \u003e\u003e 20),\n          (getContainersMonitor().getPmemAllocatedForContainers() \u003e\u003e 20));\n    }\n    if (this.containersAllocation.getPhysicalMemory() +\n        (int) (pMemBytes \u003e\u003e 20) \u003e\n        (int) (getContainersMonitor()\n            .getPmemAllocatedForContainers() \u003e\u003e 20)) {\n      return false;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"before vMemCheck\" +\n              \"[isEnabled\u003d{}, current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n          getContainersMonitor().isVmemCheckEnabled(),\n          this.containersAllocation.getVirtualMemory(), (vMemBytes \u003e\u003e 20),\n          (getContainersMonitor().getVmemAllocatedForContainers() \u003e\u003e 20));\n    }\n    // Check virtual memory.\n    if (getContainersMonitor().isVmemCheckEnabled() \u0026\u0026\n        this.containersAllocation.getVirtualMemory() +\n            (int) (vMemBytes \u003e\u003e 20) \u003e\n            (int) (getContainersMonitor()\n                .getVmemAllocatedForContainers() \u003e\u003e 20)) {\n      return false;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"before cpuCheck [asked\u003d{} \u003e allowed\u003d{}]\",\n          this.containersAllocation.getCPU(),\n          getContainersMonitor().getVCoresAllocatedForContainers());\n    }\n    // Check CPU. Compare using integral values of cores to avoid decimal\n    // inaccuracies.\n    if (!hasEnoughCpu(this.containersAllocation.getCPU(),\n        getContainersMonitor().getVCoresAllocatedForContainers(), cpuVcores)) {\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/AllocationBasedResourceUtilizationTracker.java",
      "extendedDetails": {}
    },
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
      "commitDate": "15/11/16 7:56 AM",
      "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
          "commitDate": "15/11/16 7:56 AM",
          "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/11/16 2:11 AM",
          "commitNameOld": "7ffb9943b8838a3bb56684e0722db40d800743a2",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,44 @@\n-  public boolean hasResourcesAvailable(ProcessTreeInfo pti) {\n-    synchronized (this.containersAllocation) {\n-      // Check physical memory.\n-      if (this.containersAllocation.getPhysicalMemory() +\n-          (int) (pti.getPmemLimit() \u003e\u003e 20) \u003e\n-          (int) (getPmemAllocatedForContainers() \u003e\u003e 20)) {\n-        return false;\n-      }\n-      // Check virtual memory.\n-      if (isVmemCheckEnabled() \u0026\u0026\n-          this.containersAllocation.getVirtualMemory() +\n-          (int) (pti.getVmemLimit() \u003e\u003e 20) \u003e\n-          (int) (getVmemAllocatedForContainers() \u003e\u003e 20)) {\n-        return false;\n-      }\n-      // Check CPU.\n-      if (this.containersAllocation.getCPU()\n-          + allocatedCpuUsage(pti) \u003e 1.0f) {\n-        return false;\n-      }\n+  private boolean hasResourcesAvailable(long pMemBytes, long vMemBytes,\n+      int cpuVcores) {\n+    // Check physical memory.\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"pMemCheck [current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n+          this.containersAllocation.getPhysicalMemory(),\n+          (pMemBytes \u003e\u003e 20),\n+          (getContainersMonitor().getPmemAllocatedForContainers() \u003e\u003e 20));\n+    }\n+    if (this.containersAllocation.getPhysicalMemory() +\n+        (int) (pMemBytes \u003e\u003e 20) \u003e\n+        (int) (getContainersMonitor()\n+            .getPmemAllocatedForContainers() \u003e\u003e 20)) {\n+      return false;\n+    }\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"before vMemCheck\" +\n+              \"[isEnabled\u003d{}, current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n+          getContainersMonitor().isVmemCheckEnabled(),\n+          this.containersAllocation.getVirtualMemory(), (vMemBytes \u003e\u003e 20),\n+          (getContainersMonitor().getVmemAllocatedForContainers() \u003e\u003e 20));\n+    }\n+    // Check virtual memory.\n+    if (getContainersMonitor().isVmemCheckEnabled() \u0026\u0026\n+        this.containersAllocation.getVirtualMemory() +\n+            (int) (vMemBytes \u003e\u003e 20) \u003e\n+            (int) (getContainersMonitor()\n+                .getVmemAllocatedForContainers() \u003e\u003e 20)) {\n+      return false;\n+    }\n+\n+    float vCores \u003d (float) cpuVcores /\n+        getContainersMonitor().getVCoresAllocatedForContainers();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"before cpuCheck [asked\u003d{} \u003e allowed\u003d{}]\",\n+          this.containersAllocation.getCPU(), vCores);\n+    }\n+    // Check CPU.\n+    if (this.containersAllocation.getCPU() + vCores \u003e 1.0f) {\n+      return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean hasResourcesAvailable(long pMemBytes, long vMemBytes,\n      int cpuVcores) {\n    // Check physical memory.\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"pMemCheck [current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n          this.containersAllocation.getPhysicalMemory(),\n          (pMemBytes \u003e\u003e 20),\n          (getContainersMonitor().getPmemAllocatedForContainers() \u003e\u003e 20));\n    }\n    if (this.containersAllocation.getPhysicalMemory() +\n        (int) (pMemBytes \u003e\u003e 20) \u003e\n        (int) (getContainersMonitor()\n            .getPmemAllocatedForContainers() \u003e\u003e 20)) {\n      return false;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"before vMemCheck\" +\n              \"[isEnabled\u003d{}, current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n          getContainersMonitor().isVmemCheckEnabled(),\n          this.containersAllocation.getVirtualMemory(), (vMemBytes \u003e\u003e 20),\n          (getContainersMonitor().getVmemAllocatedForContainers() \u003e\u003e 20));\n    }\n    // Check virtual memory.\n    if (getContainersMonitor().isVmemCheckEnabled() \u0026\u0026\n        this.containersAllocation.getVirtualMemory() +\n            (int) (vMemBytes \u003e\u003e 20) \u003e\n            (int) (getContainersMonitor()\n                .getVmemAllocatedForContainers() \u003e\u003e 20)) {\n      return false;\n    }\n\n    float vCores \u003d (float) cpuVcores /\n        getContainersMonitor().getVCoresAllocatedForContainers();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"before cpuCheck [asked\u003d{} \u003e allowed\u003d{}]\",\n          this.containersAllocation.getCPU(), vCores);\n    }\n    // Check CPU.\n    if (this.containersAllocation.getCPU() + vCores \u003e 1.0f) {\n      return false;\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/AllocationBasedResourceUtilizationTracker.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/AllocationBasedResourceUtilizationTracker.java",
            "oldMethodName": "hasResourcesAvailable",
            "newMethodName": "hasResourcesAvailable"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
          "commitDate": "15/11/16 7:56 AM",
          "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/11/16 2:11 AM",
          "commitNameOld": "7ffb9943b8838a3bb56684e0722db40d800743a2",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,44 @@\n-  public boolean hasResourcesAvailable(ProcessTreeInfo pti) {\n-    synchronized (this.containersAllocation) {\n-      // Check physical memory.\n-      if (this.containersAllocation.getPhysicalMemory() +\n-          (int) (pti.getPmemLimit() \u003e\u003e 20) \u003e\n-          (int) (getPmemAllocatedForContainers() \u003e\u003e 20)) {\n-        return false;\n-      }\n-      // Check virtual memory.\n-      if (isVmemCheckEnabled() \u0026\u0026\n-          this.containersAllocation.getVirtualMemory() +\n-          (int) (pti.getVmemLimit() \u003e\u003e 20) \u003e\n-          (int) (getVmemAllocatedForContainers() \u003e\u003e 20)) {\n-        return false;\n-      }\n-      // Check CPU.\n-      if (this.containersAllocation.getCPU()\n-          + allocatedCpuUsage(pti) \u003e 1.0f) {\n-        return false;\n-      }\n+  private boolean hasResourcesAvailable(long pMemBytes, long vMemBytes,\n+      int cpuVcores) {\n+    // Check physical memory.\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"pMemCheck [current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n+          this.containersAllocation.getPhysicalMemory(),\n+          (pMemBytes \u003e\u003e 20),\n+          (getContainersMonitor().getPmemAllocatedForContainers() \u003e\u003e 20));\n+    }\n+    if (this.containersAllocation.getPhysicalMemory() +\n+        (int) (pMemBytes \u003e\u003e 20) \u003e\n+        (int) (getContainersMonitor()\n+            .getPmemAllocatedForContainers() \u003e\u003e 20)) {\n+      return false;\n+    }\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"before vMemCheck\" +\n+              \"[isEnabled\u003d{}, current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n+          getContainersMonitor().isVmemCheckEnabled(),\n+          this.containersAllocation.getVirtualMemory(), (vMemBytes \u003e\u003e 20),\n+          (getContainersMonitor().getVmemAllocatedForContainers() \u003e\u003e 20));\n+    }\n+    // Check virtual memory.\n+    if (getContainersMonitor().isVmemCheckEnabled() \u0026\u0026\n+        this.containersAllocation.getVirtualMemory() +\n+            (int) (vMemBytes \u003e\u003e 20) \u003e\n+            (int) (getContainersMonitor()\n+                .getVmemAllocatedForContainers() \u003e\u003e 20)) {\n+      return false;\n+    }\n+\n+    float vCores \u003d (float) cpuVcores /\n+        getContainersMonitor().getVCoresAllocatedForContainers();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"before cpuCheck [asked\u003d{} \u003e allowed\u003d{}]\",\n+          this.containersAllocation.getCPU(), vCores);\n+    }\n+    // Check CPU.\n+    if (this.containersAllocation.getCPU() + vCores \u003e 1.0f) {\n+      return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean hasResourcesAvailable(long pMemBytes, long vMemBytes,\n      int cpuVcores) {\n    // Check physical memory.\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"pMemCheck [current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n          this.containersAllocation.getPhysicalMemory(),\n          (pMemBytes \u003e\u003e 20),\n          (getContainersMonitor().getPmemAllocatedForContainers() \u003e\u003e 20));\n    }\n    if (this.containersAllocation.getPhysicalMemory() +\n        (int) (pMemBytes \u003e\u003e 20) \u003e\n        (int) (getContainersMonitor()\n            .getPmemAllocatedForContainers() \u003e\u003e 20)) {\n      return false;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"before vMemCheck\" +\n              \"[isEnabled\u003d{}, current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n          getContainersMonitor().isVmemCheckEnabled(),\n          this.containersAllocation.getVirtualMemory(), (vMemBytes \u003e\u003e 20),\n          (getContainersMonitor().getVmemAllocatedForContainers() \u003e\u003e 20));\n    }\n    // Check virtual memory.\n    if (getContainersMonitor().isVmemCheckEnabled() \u0026\u0026\n        this.containersAllocation.getVirtualMemory() +\n            (int) (vMemBytes \u003e\u003e 20) \u003e\n            (int) (getContainersMonitor()\n                .getVmemAllocatedForContainers() \u003e\u003e 20)) {\n      return false;\n    }\n\n    float vCores \u003d (float) cpuVcores /\n        getContainersMonitor().getVCoresAllocatedForContainers();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"before cpuCheck [asked\u003d{} \u003e allowed\u003d{}]\",\n          this.containersAllocation.getCPU(), vCores);\n    }\n    // Check CPU.\n    if (this.containersAllocation.getCPU() + vCores \u003e 1.0f) {\n      return false;\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/AllocationBasedResourceUtilizationTracker.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
          "commitDate": "15/11/16 7:56 AM",
          "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/11/16 2:11 AM",
          "commitNameOld": "7ffb9943b8838a3bb56684e0722db40d800743a2",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,44 @@\n-  public boolean hasResourcesAvailable(ProcessTreeInfo pti) {\n-    synchronized (this.containersAllocation) {\n-      // Check physical memory.\n-      if (this.containersAllocation.getPhysicalMemory() +\n-          (int) (pti.getPmemLimit() \u003e\u003e 20) \u003e\n-          (int) (getPmemAllocatedForContainers() \u003e\u003e 20)) {\n-        return false;\n-      }\n-      // Check virtual memory.\n-      if (isVmemCheckEnabled() \u0026\u0026\n-          this.containersAllocation.getVirtualMemory() +\n-          (int) (pti.getVmemLimit() \u003e\u003e 20) \u003e\n-          (int) (getVmemAllocatedForContainers() \u003e\u003e 20)) {\n-        return false;\n-      }\n-      // Check CPU.\n-      if (this.containersAllocation.getCPU()\n-          + allocatedCpuUsage(pti) \u003e 1.0f) {\n-        return false;\n-      }\n+  private boolean hasResourcesAvailable(long pMemBytes, long vMemBytes,\n+      int cpuVcores) {\n+    // Check physical memory.\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"pMemCheck [current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n+          this.containersAllocation.getPhysicalMemory(),\n+          (pMemBytes \u003e\u003e 20),\n+          (getContainersMonitor().getPmemAllocatedForContainers() \u003e\u003e 20));\n+    }\n+    if (this.containersAllocation.getPhysicalMemory() +\n+        (int) (pMemBytes \u003e\u003e 20) \u003e\n+        (int) (getContainersMonitor()\n+            .getPmemAllocatedForContainers() \u003e\u003e 20)) {\n+      return false;\n+    }\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"before vMemCheck\" +\n+              \"[isEnabled\u003d{}, current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n+          getContainersMonitor().isVmemCheckEnabled(),\n+          this.containersAllocation.getVirtualMemory(), (vMemBytes \u003e\u003e 20),\n+          (getContainersMonitor().getVmemAllocatedForContainers() \u003e\u003e 20));\n+    }\n+    // Check virtual memory.\n+    if (getContainersMonitor().isVmemCheckEnabled() \u0026\u0026\n+        this.containersAllocation.getVirtualMemory() +\n+            (int) (vMemBytes \u003e\u003e 20) \u003e\n+            (int) (getContainersMonitor()\n+                .getVmemAllocatedForContainers() \u003e\u003e 20)) {\n+      return false;\n+    }\n+\n+    float vCores \u003d (float) cpuVcores /\n+        getContainersMonitor().getVCoresAllocatedForContainers();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"before cpuCheck [asked\u003d{} \u003e allowed\u003d{}]\",\n+          this.containersAllocation.getCPU(), vCores);\n+    }\n+    // Check CPU.\n+    if (this.containersAllocation.getCPU() + vCores \u003e 1.0f) {\n+      return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean hasResourcesAvailable(long pMemBytes, long vMemBytes,\n      int cpuVcores) {\n    // Check physical memory.\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"pMemCheck [current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n          this.containersAllocation.getPhysicalMemory(),\n          (pMemBytes \u003e\u003e 20),\n          (getContainersMonitor().getPmemAllocatedForContainers() \u003e\u003e 20));\n    }\n    if (this.containersAllocation.getPhysicalMemory() +\n        (int) (pMemBytes \u003e\u003e 20) \u003e\n        (int) (getContainersMonitor()\n            .getPmemAllocatedForContainers() \u003e\u003e 20)) {\n      return false;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"before vMemCheck\" +\n              \"[isEnabled\u003d{}, current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n          getContainersMonitor().isVmemCheckEnabled(),\n          this.containersAllocation.getVirtualMemory(), (vMemBytes \u003e\u003e 20),\n          (getContainersMonitor().getVmemAllocatedForContainers() \u003e\u003e 20));\n    }\n    // Check virtual memory.\n    if (getContainersMonitor().isVmemCheckEnabled() \u0026\u0026\n        this.containersAllocation.getVirtualMemory() +\n            (int) (vMemBytes \u003e\u003e 20) \u003e\n            (int) (getContainersMonitor()\n                .getVmemAllocatedForContainers() \u003e\u003e 20)) {\n      return false;\n    }\n\n    float vCores \u003d (float) cpuVcores /\n        getContainersMonitor().getVCoresAllocatedForContainers();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"before cpuCheck [asked\u003d{} \u003e allowed\u003d{}]\",\n          this.containersAllocation.getCPU(), vCores);\n    }\n    // Check CPU.\n    if (this.containersAllocation.getCPU() + vCores \u003e 1.0f) {\n      return false;\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/AllocationBasedResourceUtilizationTracker.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
          "commitDate": "15/11/16 7:56 AM",
          "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "15/11/16 2:11 AM",
          "commitNameOld": "7ffb9943b8838a3bb56684e0722db40d800743a2",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,44 @@\n-  public boolean hasResourcesAvailable(ProcessTreeInfo pti) {\n-    synchronized (this.containersAllocation) {\n-      // Check physical memory.\n-      if (this.containersAllocation.getPhysicalMemory() +\n-          (int) (pti.getPmemLimit() \u003e\u003e 20) \u003e\n-          (int) (getPmemAllocatedForContainers() \u003e\u003e 20)) {\n-        return false;\n-      }\n-      // Check virtual memory.\n-      if (isVmemCheckEnabled() \u0026\u0026\n-          this.containersAllocation.getVirtualMemory() +\n-          (int) (pti.getVmemLimit() \u003e\u003e 20) \u003e\n-          (int) (getVmemAllocatedForContainers() \u003e\u003e 20)) {\n-        return false;\n-      }\n-      // Check CPU.\n-      if (this.containersAllocation.getCPU()\n-          + allocatedCpuUsage(pti) \u003e 1.0f) {\n-        return false;\n-      }\n+  private boolean hasResourcesAvailable(long pMemBytes, long vMemBytes,\n+      int cpuVcores) {\n+    // Check physical memory.\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"pMemCheck [current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n+          this.containersAllocation.getPhysicalMemory(),\n+          (pMemBytes \u003e\u003e 20),\n+          (getContainersMonitor().getPmemAllocatedForContainers() \u003e\u003e 20));\n+    }\n+    if (this.containersAllocation.getPhysicalMemory() +\n+        (int) (pMemBytes \u003e\u003e 20) \u003e\n+        (int) (getContainersMonitor()\n+            .getPmemAllocatedForContainers() \u003e\u003e 20)) {\n+      return false;\n+    }\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"before vMemCheck\" +\n+              \"[isEnabled\u003d{}, current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n+          getContainersMonitor().isVmemCheckEnabled(),\n+          this.containersAllocation.getVirtualMemory(), (vMemBytes \u003e\u003e 20),\n+          (getContainersMonitor().getVmemAllocatedForContainers() \u003e\u003e 20));\n+    }\n+    // Check virtual memory.\n+    if (getContainersMonitor().isVmemCheckEnabled() \u0026\u0026\n+        this.containersAllocation.getVirtualMemory() +\n+            (int) (vMemBytes \u003e\u003e 20) \u003e\n+            (int) (getContainersMonitor()\n+                .getVmemAllocatedForContainers() \u003e\u003e 20)) {\n+      return false;\n+    }\n+\n+    float vCores \u003d (float) cpuVcores /\n+        getContainersMonitor().getVCoresAllocatedForContainers();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"before cpuCheck [asked\u003d{} \u003e allowed\u003d{}]\",\n+          this.containersAllocation.getCPU(), vCores);\n+    }\n+    // Check CPU.\n+    if (this.containersAllocation.getCPU() + vCores \u003e 1.0f) {\n+      return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean hasResourcesAvailable(long pMemBytes, long vMemBytes,\n      int cpuVcores) {\n    // Check physical memory.\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"pMemCheck [current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n          this.containersAllocation.getPhysicalMemory(),\n          (pMemBytes \u003e\u003e 20),\n          (getContainersMonitor().getPmemAllocatedForContainers() \u003e\u003e 20));\n    }\n    if (this.containersAllocation.getPhysicalMemory() +\n        (int) (pMemBytes \u003e\u003e 20) \u003e\n        (int) (getContainersMonitor()\n            .getPmemAllocatedForContainers() \u003e\u003e 20)) {\n      return false;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"before vMemCheck\" +\n              \"[isEnabled\u003d{}, current\u003d{} + asked\u003d{} \u003e allowed\u003d{}]\",\n          getContainersMonitor().isVmemCheckEnabled(),\n          this.containersAllocation.getVirtualMemory(), (vMemBytes \u003e\u003e 20),\n          (getContainersMonitor().getVmemAllocatedForContainers() \u003e\u003e 20));\n    }\n    // Check virtual memory.\n    if (getContainersMonitor().isVmemCheckEnabled() \u0026\u0026\n        this.containersAllocation.getVirtualMemory() +\n            (int) (vMemBytes \u003e\u003e 20) \u003e\n            (int) (getContainersMonitor()\n                .getVmemAllocatedForContainers() \u003e\u003e 20)) {\n      return false;\n    }\n\n    float vCores \u003d (float) cpuVcores /\n        getContainersMonitor().getVCoresAllocatedForContainers();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"before cpuCheck [asked\u003d{} \u003e allowed\u003d{}]\",\n          this.containersAllocation.getCPU(), vCores);\n    }\n    // Check CPU.\n    if (this.containersAllocation.getCPU() + vCores \u003e 1.0f) {\n      return false;\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/AllocationBasedResourceUtilizationTracker.java",
          "extendedDetails": {
            "oldValue": "[pti-ProcessTreeInfo]",
            "newValue": "[pMemBytes-long, vMemBytes-long, cpuVcores-int]"
          }
        }
      ]
    },
    "c8172f5f143d2fefafa5a412899ab7cd081b406d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2883. Queuing of container requests in the NM. (Konstantinos Karanasos and Arun Suresh via kasha)\n",
      "commitDate": "20/04/16 9:55 AM",
      "commitName": "c8172f5f143d2fefafa5a412899ab7cd081b406d",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,23 @@\n+  public boolean hasResourcesAvailable(ProcessTreeInfo pti) {\n+    synchronized (this.containersAllocation) {\n+      // Check physical memory.\n+      if (this.containersAllocation.getPhysicalMemory() +\n+          (int) (pti.getPmemLimit() \u003e\u003e 20) \u003e\n+          (int) (getPmemAllocatedForContainers() \u003e\u003e 20)) {\n+        return false;\n+      }\n+      // Check virtual memory.\n+      if (isVmemCheckEnabled() \u0026\u0026\n+          this.containersAllocation.getVirtualMemory() +\n+          (int) (pti.getVmemLimit() \u003e\u003e 20) \u003e\n+          (int) (getVmemAllocatedForContainers() \u003e\u003e 20)) {\n+        return false;\n+      }\n+      // Check CPU.\n+      if (this.containersAllocation.getCPU()\n+          + allocatedCpuUsage(pti) \u003e 1.0f) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean hasResourcesAvailable(ProcessTreeInfo pti) {\n    synchronized (this.containersAllocation) {\n      // Check physical memory.\n      if (this.containersAllocation.getPhysicalMemory() +\n          (int) (pti.getPmemLimit() \u003e\u003e 20) \u003e\n          (int) (getPmemAllocatedForContainers() \u003e\u003e 20)) {\n        return false;\n      }\n      // Check virtual memory.\n      if (isVmemCheckEnabled() \u0026\u0026\n          this.containersAllocation.getVirtualMemory() +\n          (int) (pti.getVmemLimit() \u003e\u003e 20) \u003e\n          (int) (getVmemAllocatedForContainers() \u003e\u003e 20)) {\n        return false;\n      }\n      // Check CPU.\n      if (this.containersAllocation.getCPU()\n          + allocatedCpuUsage(pti) \u003e 1.0f) {\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java"
    }
  }
}