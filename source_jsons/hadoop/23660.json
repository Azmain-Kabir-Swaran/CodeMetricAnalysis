{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HsWebServices.java",
  "functionName": "getJobs",
  "functionId": "getJobs___userQuery-String(annotations-@QueryParam(\"user\"))__count-String(annotations-@QueryParam(\"limit\"))__stateQuery-String(annotations-@QueryParam(\"state\"))__queueQuery-String(annotations-@QueryParam(\"queue\"))__startedBegin-String(annotations-@QueryParam(\"startedTimeBegin\"))__startedEnd-String(annotations-@QueryParam(\"startedTimeEnd\"))__finishBegin-String(annotations-@QueryParam(\"finishedTimeBegin\"))__finishEnd-String(annotations-@QueryParam(\"finishedTimeEnd\"))",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsWebServices.java",
  "functionStartLine": 148,
  "functionEndLine": 233,
  "numCommitsSeen": 20,
  "timeTaken": 1624,
  "changeHistory": [
    "e7583d816a69677bbaa4280deb58ea73dbc42cef",
    "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f",
    "01ce7ba3a4af867763e437ce46a4f5e1d6e5a6bf",
    "4ce5f6553fe8bd1c82b3a4bbd8ed4351874dd4ab",
    "7440a8aa374a3a1d4eb2b6dd8d4db184bff5ade0",
    "0ea8570be578be60e2f32849900a1c50506d78d3"
  ],
  "changeHistoryShort": {
    "e7583d816a69677bbaa4280deb58ea73dbc42cef": "Ybodychange",
    "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f": "Ybodychange",
    "01ce7ba3a4af867763e437ce46a4f5e1d6e5a6bf": "Ymultichange(Yparameterchange,Ybodychange)",
    "4ce5f6553fe8bd1c82b3a4bbd8ed4351874dd4ab": "Ybodychange",
    "7440a8aa374a3a1d4eb2b6dd8d4db184bff5ade0": "Ybodychange",
    "0ea8570be578be60e2f32849900a1c50506d78d3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e7583d816a69677bbaa4280deb58ea73dbc42cef": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3613. web service calls header contains 2 content types (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1330560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/12 2:13 PM",
      "commitName": "e7583d816a69677bbaa4280deb58ea73dbc42cef",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "17/04/12 6:59 PM",
      "commitNameOld": "7d04a96027ad75877b41b7cd8f67455dd13159d7",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 7.8,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,86 @@\n   public JobsInfo getJobs(@QueryParam(\"user\") String userQuery,\n       @QueryParam(\"limit\") String count,\n       @QueryParam(\"state\") String stateQuery,\n       @QueryParam(\"queue\") String queueQuery,\n       @QueryParam(\"startedTimeBegin\") String startedBegin,\n       @QueryParam(\"startedTimeEnd\") String startedEnd,\n       @QueryParam(\"finishedTimeBegin\") String finishBegin,\n       @QueryParam(\"finishedTimeEnd\") String finishEnd) {\n \n     Long countParam \u003d null;\n+    init();\n     \n     if (count !\u003d null \u0026\u0026 !count.isEmpty()) {\n       try {\n         countParam \u003d Long.parseLong(count);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(e.getMessage());\n       }\n       if (countParam \u003c\u003d 0) {\n         throw new BadRequestException(\"limit value must be greater then 0\");\n       }\n     }\n \n     Long sBegin \u003d null;\n     if (startedBegin !\u003d null \u0026\u0026 !startedBegin.isEmpty()) {\n       try {\n         sBegin \u003d Long.parseLong(startedBegin);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (sBegin \u003c 0) {\n         throw new BadRequestException(\"startedTimeBegin must be greater than 0\");\n       }\n     }\n     \n     Long sEnd \u003d null;\n     if (startedEnd !\u003d null \u0026\u0026 !startedEnd.isEmpty()) {\n       try {\n         sEnd \u003d Long.parseLong(startedEnd);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (sEnd \u003c 0) {\n         throw new BadRequestException(\"startedTimeEnd must be greater than 0\");\n       }\n     }\n     if (sBegin !\u003d null \u0026\u0026 sEnd !\u003d null \u0026\u0026 sBegin \u003e sEnd) {\n       throw new BadRequestException(\n           \"startedTimeEnd must be greater than startTimeBegin\");\n     }\n \n     Long fBegin \u003d null;\n     if (finishBegin !\u003d null \u0026\u0026 !finishBegin.isEmpty()) {\n       try {\n         fBegin \u003d Long.parseLong(finishBegin);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (fBegin \u003c 0) {\n         throw new BadRequestException(\"finishedTimeBegin must be greater than 0\");\n       }\n     }\n     Long fEnd \u003d null;\n     if (finishEnd !\u003d null \u0026\u0026 !finishEnd.isEmpty()) {\n       try {\n         fEnd \u003d Long.parseLong(finishEnd);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (fEnd \u003c 0) {\n         throw new BadRequestException(\"finishedTimeEnd must be greater than 0\");\n       }\n     }\n     if (fBegin !\u003d null \u0026\u0026 fEnd !\u003d null \u0026\u0026 fBegin \u003e fEnd) {\n       throw new BadRequestException(\n           \"finishedTimeEnd must be greater than finishedTimeBegin\");\n     }\n     \n     JobState jobState \u003d null;\n     if (stateQuery !\u003d null) {\n       jobState \u003d JobState.valueOf(stateQuery);\n     }\n \n     return ctx.getPartialJobs(0l, countParam, userQuery, queueQuery, \n         sBegin, sEnd, fBegin, fEnd, jobState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobsInfo getJobs(@QueryParam(\"user\") String userQuery,\n      @QueryParam(\"limit\") String count,\n      @QueryParam(\"state\") String stateQuery,\n      @QueryParam(\"queue\") String queueQuery,\n      @QueryParam(\"startedTimeBegin\") String startedBegin,\n      @QueryParam(\"startedTimeEnd\") String startedEnd,\n      @QueryParam(\"finishedTimeBegin\") String finishBegin,\n      @QueryParam(\"finishedTimeEnd\") String finishEnd) {\n\n    Long countParam \u003d null;\n    init();\n    \n    if (count !\u003d null \u0026\u0026 !count.isEmpty()) {\n      try {\n        countParam \u003d Long.parseLong(count);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(e.getMessage());\n      }\n      if (countParam \u003c\u003d 0) {\n        throw new BadRequestException(\"limit value must be greater then 0\");\n      }\n    }\n\n    Long sBegin \u003d null;\n    if (startedBegin !\u003d null \u0026\u0026 !startedBegin.isEmpty()) {\n      try {\n        sBegin \u003d Long.parseLong(startedBegin);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (sBegin \u003c 0) {\n        throw new BadRequestException(\"startedTimeBegin must be greater than 0\");\n      }\n    }\n    \n    Long sEnd \u003d null;\n    if (startedEnd !\u003d null \u0026\u0026 !startedEnd.isEmpty()) {\n      try {\n        sEnd \u003d Long.parseLong(startedEnd);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (sEnd \u003c 0) {\n        throw new BadRequestException(\"startedTimeEnd must be greater than 0\");\n      }\n    }\n    if (sBegin !\u003d null \u0026\u0026 sEnd !\u003d null \u0026\u0026 sBegin \u003e sEnd) {\n      throw new BadRequestException(\n          \"startedTimeEnd must be greater than startTimeBegin\");\n    }\n\n    Long fBegin \u003d null;\n    if (finishBegin !\u003d null \u0026\u0026 !finishBegin.isEmpty()) {\n      try {\n        fBegin \u003d Long.parseLong(finishBegin);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (fBegin \u003c 0) {\n        throw new BadRequestException(\"finishedTimeBegin must be greater than 0\");\n      }\n    }\n    Long fEnd \u003d null;\n    if (finishEnd !\u003d null \u0026\u0026 !finishEnd.isEmpty()) {\n      try {\n        fEnd \u003d Long.parseLong(finishEnd);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (fEnd \u003c 0) {\n        throw new BadRequestException(\"finishedTimeEnd must be greater than 0\");\n      }\n    }\n    if (fBegin !\u003d null \u0026\u0026 fEnd !\u003d null \u0026\u0026 fBegin \u003e fEnd) {\n      throw new BadRequestException(\n          \"finishedTimeEnd must be greater than finishedTimeBegin\");\n    }\n    \n    JobState jobState \u003d null;\n    if (stateQuery !\u003d null) {\n      jobState \u003d JobState.valueOf(stateQuery);\n    }\n\n    return ctx.getPartialJobs(0l, countParam, userQuery, queueQuery, \n        sBegin, sEnd, fBegin, fEnd, jobState);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsWebServices.java",
      "extendedDetails": {}
    },
    "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4059. The history server should have a separate pluggable storage/query interface. (Robert Evans via tgraves).\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1311896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/12 11:11 AM",
      "commitName": "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "02/04/12 2:06 PM",
      "commitNameOld": "01ce7ba3a4af867763e437ce46a4f5e1d6e5a6bf",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 7.88,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,130 +1,85 @@\n   public JobsInfo getJobs(@QueryParam(\"user\") String userQuery,\n       @QueryParam(\"limit\") String count,\n       @QueryParam(\"state\") String stateQuery,\n       @QueryParam(\"queue\") String queueQuery,\n       @QueryParam(\"startedTimeBegin\") String startedBegin,\n       @QueryParam(\"startedTimeEnd\") String startedEnd,\n       @QueryParam(\"finishedTimeBegin\") String finishBegin,\n       @QueryParam(\"finishedTimeEnd\") String finishEnd) {\n-    JobsInfo allJobs \u003d new JobsInfo();\n-    long num \u003d 0;\n-    boolean checkCount \u003d false;\n-    boolean checkStart \u003d false;\n-    boolean checkEnd \u003d false;\n-    long countNum \u003d 0;\n \n-    // set values suitable in case both of begin/end not specified\n-    long sBegin \u003d 0;\n-    long sEnd \u003d Long.MAX_VALUE;\n-    long fBegin \u003d 0;\n-    long fEnd \u003d Long.MAX_VALUE;\n-\n+    Long countParam \u003d null;\n+    \n     if (count !\u003d null \u0026\u0026 !count.isEmpty()) {\n-      checkCount \u003d true;\n       try {\n-        countNum \u003d Long.parseLong(count);\n+        countParam \u003d Long.parseLong(count);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(e.getMessage());\n       }\n-      if (countNum \u003c\u003d 0) {\n+      if (countParam \u003c\u003d 0) {\n         throw new BadRequestException(\"limit value must be greater then 0\");\n       }\n     }\n \n+    Long sBegin \u003d null;\n     if (startedBegin !\u003d null \u0026\u0026 !startedBegin.isEmpty()) {\n-      checkStart \u003d true;\n       try {\n         sBegin \u003d Long.parseLong(startedBegin);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (sBegin \u003c 0) {\n         throw new BadRequestException(\"startedTimeBegin must be greater than 0\");\n       }\n     }\n+    \n+    Long sEnd \u003d null;\n     if (startedEnd !\u003d null \u0026\u0026 !startedEnd.isEmpty()) {\n-      checkStart \u003d true;\n       try {\n         sEnd \u003d Long.parseLong(startedEnd);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (sEnd \u003c 0) {\n         throw new BadRequestException(\"startedTimeEnd must be greater than 0\");\n       }\n     }\n-    if (sBegin \u003e sEnd) {\n+    if (sBegin !\u003d null \u0026\u0026 sEnd !\u003d null \u0026\u0026 sBegin \u003e sEnd) {\n       throw new BadRequestException(\n           \"startedTimeEnd must be greater than startTimeBegin\");\n     }\n \n+    Long fBegin \u003d null;\n     if (finishBegin !\u003d null \u0026\u0026 !finishBegin.isEmpty()) {\n-      checkEnd \u003d true;\n       try {\n         fBegin \u003d Long.parseLong(finishBegin);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (fBegin \u003c 0) {\n         throw new BadRequestException(\"finishedTimeBegin must be greater than 0\");\n       }\n     }\n+    Long fEnd \u003d null;\n     if (finishEnd !\u003d null \u0026\u0026 !finishEnd.isEmpty()) {\n-      checkEnd \u003d true;\n       try {\n         fEnd \u003d Long.parseLong(finishEnd);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (fEnd \u003c 0) {\n         throw new BadRequestException(\"finishedTimeEnd must be greater than 0\");\n       }\n     }\n-    if (fBegin \u003e fEnd) {\n+    if (fBegin !\u003d null \u0026\u0026 fEnd !\u003d null \u0026\u0026 fBegin \u003e fEnd) {\n       throw new BadRequestException(\n           \"finishedTimeEnd must be greater than finishedTimeBegin\");\n     }\n-\n-    for (Job job : appCtx.getAllJobs().values()) {\n-      if (checkCount \u0026\u0026 num \u003d\u003d countNum) {\n-        break;\n-      }\n-\n-      if (stateQuery !\u003d null \u0026\u0026 !stateQuery.isEmpty()) {\n-        JobState.valueOf(stateQuery);\n-        if (!job.getState().toString().equalsIgnoreCase(stateQuery)) {\n-          continue;\n-        }\n-      }\n-\n-      // can\u0027t really validate queue is a valid one since queues could change\n-      if (queueQuery !\u003d null \u0026\u0026 !queueQuery.isEmpty()) {\n-        if (!job.getQueueName().equals(queueQuery)) {\n-          continue;\n-        }\n-      }\n-\n-      if (userQuery !\u003d null \u0026\u0026 !userQuery.isEmpty()) {\n-        if (!job.getUserName().equals(userQuery)) {\n-          continue;\n-        }\n-      }\n-\n-      JobReport report \u003d job.getReport();\n-      \n-      if (checkStart\n-          \u0026\u0026 (report.getStartTime() \u003c sBegin || report.getStartTime() \u003e sEnd)) {\n-        continue;\n-      }\n-      if (checkEnd\n-          \u0026\u0026 (report.getFinishTime() \u003c fBegin || report.getFinishTime() \u003e fEnd)) {\n-        continue;\n-      }\n-      \n-      JobInfo jobInfo \u003d new JobInfo(job);\n-      \n-      allJobs.add(jobInfo);\n-      num++;\n+    \n+    JobState jobState \u003d null;\n+    if (stateQuery !\u003d null) {\n+      jobState \u003d JobState.valueOf(stateQuery);\n     }\n-    return allJobs;\n+\n+    return ctx.getPartialJobs(0l, countParam, userQuery, queueQuery, \n+        sBegin, sEnd, fBegin, fEnd, jobState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobsInfo getJobs(@QueryParam(\"user\") String userQuery,\n      @QueryParam(\"limit\") String count,\n      @QueryParam(\"state\") String stateQuery,\n      @QueryParam(\"queue\") String queueQuery,\n      @QueryParam(\"startedTimeBegin\") String startedBegin,\n      @QueryParam(\"startedTimeEnd\") String startedEnd,\n      @QueryParam(\"finishedTimeBegin\") String finishBegin,\n      @QueryParam(\"finishedTimeEnd\") String finishEnd) {\n\n    Long countParam \u003d null;\n    \n    if (count !\u003d null \u0026\u0026 !count.isEmpty()) {\n      try {\n        countParam \u003d Long.parseLong(count);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(e.getMessage());\n      }\n      if (countParam \u003c\u003d 0) {\n        throw new BadRequestException(\"limit value must be greater then 0\");\n      }\n    }\n\n    Long sBegin \u003d null;\n    if (startedBegin !\u003d null \u0026\u0026 !startedBegin.isEmpty()) {\n      try {\n        sBegin \u003d Long.parseLong(startedBegin);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (sBegin \u003c 0) {\n        throw new BadRequestException(\"startedTimeBegin must be greater than 0\");\n      }\n    }\n    \n    Long sEnd \u003d null;\n    if (startedEnd !\u003d null \u0026\u0026 !startedEnd.isEmpty()) {\n      try {\n        sEnd \u003d Long.parseLong(startedEnd);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (sEnd \u003c 0) {\n        throw new BadRequestException(\"startedTimeEnd must be greater than 0\");\n      }\n    }\n    if (sBegin !\u003d null \u0026\u0026 sEnd !\u003d null \u0026\u0026 sBegin \u003e sEnd) {\n      throw new BadRequestException(\n          \"startedTimeEnd must be greater than startTimeBegin\");\n    }\n\n    Long fBegin \u003d null;\n    if (finishBegin !\u003d null \u0026\u0026 !finishBegin.isEmpty()) {\n      try {\n        fBegin \u003d Long.parseLong(finishBegin);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (fBegin \u003c 0) {\n        throw new BadRequestException(\"finishedTimeBegin must be greater than 0\");\n      }\n    }\n    Long fEnd \u003d null;\n    if (finishEnd !\u003d null \u0026\u0026 !finishEnd.isEmpty()) {\n      try {\n        fEnd \u003d Long.parseLong(finishEnd);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (fEnd \u003c 0) {\n        throw new BadRequestException(\"finishedTimeEnd must be greater than 0\");\n      }\n    }\n    if (fBegin !\u003d null \u0026\u0026 fEnd !\u003d null \u0026\u0026 fBegin \u003e fEnd) {\n      throw new BadRequestException(\n          \"finishedTimeEnd must be greater than finishedTimeBegin\");\n    }\n    \n    JobState jobState \u003d null;\n    if (stateQuery !\u003d null) {\n      jobState \u003d JobState.valueOf(stateQuery);\n    }\n\n    return ctx.getPartialJobs(0l, countParam, userQuery, queueQuery, \n        sBegin, sEnd, fBegin, fEnd, jobState);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsWebServices.java",
      "extendedDetails": {}
    },
    "01ce7ba3a4af867763e437ce46a4f5e1d6e5a6bf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-4024. RM webservices can\u0027t query on finalStatus (Tom Graves via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308566 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/12 2:06 PM",
      "commitName": "01ce7ba3a4af867763e437ce46a4f5e1d6e5a6bf",
      "commitAuthor": "Robert Joseph Evans",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-4024. RM webservices can\u0027t query on finalStatus (Tom Graves via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308566 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 2:06 PM",
          "commitName": "01ce7ba3a4af867763e437ce46a4f5e1d6e5a6bf",
          "commitAuthor": "Robert Joseph Evans",
          "commitDateOld": "06/03/12 11:52 AM",
          "commitNameOld": "4ce5f6553fe8bd1c82b3a4bbd8ed4351874dd4ab",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 27.05,
          "commitsBetweenForRepo": 163,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,122 +1,130 @@\n   public JobsInfo getJobs(@QueryParam(\"user\") String userQuery,\n       @QueryParam(\"limit\") String count,\n+      @QueryParam(\"state\") String stateQuery,\n       @QueryParam(\"queue\") String queueQuery,\n       @QueryParam(\"startedTimeBegin\") String startedBegin,\n       @QueryParam(\"startedTimeEnd\") String startedEnd,\n       @QueryParam(\"finishedTimeBegin\") String finishBegin,\n       @QueryParam(\"finishedTimeEnd\") String finishEnd) {\n     JobsInfo allJobs \u003d new JobsInfo();\n     long num \u003d 0;\n     boolean checkCount \u003d false;\n     boolean checkStart \u003d false;\n     boolean checkEnd \u003d false;\n     long countNum \u003d 0;\n \n     // set values suitable in case both of begin/end not specified\n     long sBegin \u003d 0;\n     long sEnd \u003d Long.MAX_VALUE;\n     long fBegin \u003d 0;\n     long fEnd \u003d Long.MAX_VALUE;\n \n     if (count !\u003d null \u0026\u0026 !count.isEmpty()) {\n       checkCount \u003d true;\n       try {\n         countNum \u003d Long.parseLong(count);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(e.getMessage());\n       }\n       if (countNum \u003c\u003d 0) {\n         throw new BadRequestException(\"limit value must be greater then 0\");\n       }\n     }\n \n     if (startedBegin !\u003d null \u0026\u0026 !startedBegin.isEmpty()) {\n       checkStart \u003d true;\n       try {\n         sBegin \u003d Long.parseLong(startedBegin);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (sBegin \u003c 0) {\n         throw new BadRequestException(\"startedTimeBegin must be greater than 0\");\n       }\n     }\n     if (startedEnd !\u003d null \u0026\u0026 !startedEnd.isEmpty()) {\n       checkStart \u003d true;\n       try {\n         sEnd \u003d Long.parseLong(startedEnd);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (sEnd \u003c 0) {\n         throw new BadRequestException(\"startedTimeEnd must be greater than 0\");\n       }\n     }\n     if (sBegin \u003e sEnd) {\n       throw new BadRequestException(\n           \"startedTimeEnd must be greater than startTimeBegin\");\n     }\n \n     if (finishBegin !\u003d null \u0026\u0026 !finishBegin.isEmpty()) {\n       checkEnd \u003d true;\n       try {\n         fBegin \u003d Long.parseLong(finishBegin);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (fBegin \u003c 0) {\n         throw new BadRequestException(\"finishedTimeBegin must be greater than 0\");\n       }\n     }\n     if (finishEnd !\u003d null \u0026\u0026 !finishEnd.isEmpty()) {\n       checkEnd \u003d true;\n       try {\n         fEnd \u003d Long.parseLong(finishEnd);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (fEnd \u003c 0) {\n         throw new BadRequestException(\"finishedTimeEnd must be greater than 0\");\n       }\n     }\n     if (fBegin \u003e fEnd) {\n       throw new BadRequestException(\n           \"finishedTimeEnd must be greater than finishedTimeBegin\");\n     }\n \n     for (Job job : appCtx.getAllJobs().values()) {\n       if (checkCount \u0026\u0026 num \u003d\u003d countNum) {\n         break;\n       }\n \n+      if (stateQuery !\u003d null \u0026\u0026 !stateQuery.isEmpty()) {\n+        JobState.valueOf(stateQuery);\n+        if (!job.getState().toString().equalsIgnoreCase(stateQuery)) {\n+          continue;\n+        }\n+      }\n+\n       // can\u0027t really validate queue is a valid one since queues could change\n       if (queueQuery !\u003d null \u0026\u0026 !queueQuery.isEmpty()) {\n         if (!job.getQueueName().equals(queueQuery)) {\n           continue;\n         }\n       }\n \n       if (userQuery !\u003d null \u0026\u0026 !userQuery.isEmpty()) {\n         if (!job.getUserName().equals(userQuery)) {\n           continue;\n         }\n       }\n \n       JobReport report \u003d job.getReport();\n       \n       if (checkStart\n           \u0026\u0026 (report.getStartTime() \u003c sBegin || report.getStartTime() \u003e sEnd)) {\n         continue;\n       }\n       if (checkEnd\n           \u0026\u0026 (report.getFinishTime() \u003c fBegin || report.getFinishTime() \u003e fEnd)) {\n         continue;\n       }\n       \n       JobInfo jobInfo \u003d new JobInfo(job);\n       \n       allJobs.add(jobInfo);\n       num++;\n     }\n     return allJobs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public JobsInfo getJobs(@QueryParam(\"user\") String userQuery,\n      @QueryParam(\"limit\") String count,\n      @QueryParam(\"state\") String stateQuery,\n      @QueryParam(\"queue\") String queueQuery,\n      @QueryParam(\"startedTimeBegin\") String startedBegin,\n      @QueryParam(\"startedTimeEnd\") String startedEnd,\n      @QueryParam(\"finishedTimeBegin\") String finishBegin,\n      @QueryParam(\"finishedTimeEnd\") String finishEnd) {\n    JobsInfo allJobs \u003d new JobsInfo();\n    long num \u003d 0;\n    boolean checkCount \u003d false;\n    boolean checkStart \u003d false;\n    boolean checkEnd \u003d false;\n    long countNum \u003d 0;\n\n    // set values suitable in case both of begin/end not specified\n    long sBegin \u003d 0;\n    long sEnd \u003d Long.MAX_VALUE;\n    long fBegin \u003d 0;\n    long fEnd \u003d Long.MAX_VALUE;\n\n    if (count !\u003d null \u0026\u0026 !count.isEmpty()) {\n      checkCount \u003d true;\n      try {\n        countNum \u003d Long.parseLong(count);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(e.getMessage());\n      }\n      if (countNum \u003c\u003d 0) {\n        throw new BadRequestException(\"limit value must be greater then 0\");\n      }\n    }\n\n    if (startedBegin !\u003d null \u0026\u0026 !startedBegin.isEmpty()) {\n      checkStart \u003d true;\n      try {\n        sBegin \u003d Long.parseLong(startedBegin);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (sBegin \u003c 0) {\n        throw new BadRequestException(\"startedTimeBegin must be greater than 0\");\n      }\n    }\n    if (startedEnd !\u003d null \u0026\u0026 !startedEnd.isEmpty()) {\n      checkStart \u003d true;\n      try {\n        sEnd \u003d Long.parseLong(startedEnd);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (sEnd \u003c 0) {\n        throw new BadRequestException(\"startedTimeEnd must be greater than 0\");\n      }\n    }\n    if (sBegin \u003e sEnd) {\n      throw new BadRequestException(\n          \"startedTimeEnd must be greater than startTimeBegin\");\n    }\n\n    if (finishBegin !\u003d null \u0026\u0026 !finishBegin.isEmpty()) {\n      checkEnd \u003d true;\n      try {\n        fBegin \u003d Long.parseLong(finishBegin);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (fBegin \u003c 0) {\n        throw new BadRequestException(\"finishedTimeBegin must be greater than 0\");\n      }\n    }\n    if (finishEnd !\u003d null \u0026\u0026 !finishEnd.isEmpty()) {\n      checkEnd \u003d true;\n      try {\n        fEnd \u003d Long.parseLong(finishEnd);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (fEnd \u003c 0) {\n        throw new BadRequestException(\"finishedTimeEnd must be greater than 0\");\n      }\n    }\n    if (fBegin \u003e fEnd) {\n      throw new BadRequestException(\n          \"finishedTimeEnd must be greater than finishedTimeBegin\");\n    }\n\n    for (Job job : appCtx.getAllJobs().values()) {\n      if (checkCount \u0026\u0026 num \u003d\u003d countNum) {\n        break;\n      }\n\n      if (stateQuery !\u003d null \u0026\u0026 !stateQuery.isEmpty()) {\n        JobState.valueOf(stateQuery);\n        if (!job.getState().toString().equalsIgnoreCase(stateQuery)) {\n          continue;\n        }\n      }\n\n      // can\u0027t really validate queue is a valid one since queues could change\n      if (queueQuery !\u003d null \u0026\u0026 !queueQuery.isEmpty()) {\n        if (!job.getQueueName().equals(queueQuery)) {\n          continue;\n        }\n      }\n\n      if (userQuery !\u003d null \u0026\u0026 !userQuery.isEmpty()) {\n        if (!job.getUserName().equals(userQuery)) {\n          continue;\n        }\n      }\n\n      JobReport report \u003d job.getReport();\n      \n      if (checkStart\n          \u0026\u0026 (report.getStartTime() \u003c sBegin || report.getStartTime() \u003e sEnd)) {\n        continue;\n      }\n      if (checkEnd\n          \u0026\u0026 (report.getFinishTime() \u003c fBegin || report.getFinishTime() \u003e fEnd)) {\n        continue;\n      }\n      \n      JobInfo jobInfo \u003d new JobInfo(job);\n      \n      allJobs.add(jobInfo);\n      num++;\n    }\n    return allJobs;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsWebServices.java",
          "extendedDetails": {
            "oldValue": "[userQuery-String(annotations-@QueryParam(\"user\")), count-String(annotations-@QueryParam(\"limit\")), queueQuery-String(annotations-@QueryParam(\"queue\")), startedBegin-String(annotations-@QueryParam(\"startedTimeBegin\")), startedEnd-String(annotations-@QueryParam(\"startedTimeEnd\")), finishBegin-String(annotations-@QueryParam(\"finishedTimeBegin\")), finishEnd-String(annotations-@QueryParam(\"finishedTimeEnd\"))]",
            "newValue": "[userQuery-String(annotations-@QueryParam(\"user\")), count-String(annotations-@QueryParam(\"limit\")), stateQuery-String(annotations-@QueryParam(\"state\")), queueQuery-String(annotations-@QueryParam(\"queue\")), startedBegin-String(annotations-@QueryParam(\"startedTimeBegin\")), startedEnd-String(annotations-@QueryParam(\"startedTimeEnd\")), finishBegin-String(annotations-@QueryParam(\"finishedTimeBegin\")), finishEnd-String(annotations-@QueryParam(\"finishedTimeEnd\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4024. RM webservices can\u0027t query on finalStatus (Tom Graves via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308566 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 2:06 PM",
          "commitName": "01ce7ba3a4af867763e437ce46a4f5e1d6e5a6bf",
          "commitAuthor": "Robert Joseph Evans",
          "commitDateOld": "06/03/12 11:52 AM",
          "commitNameOld": "4ce5f6553fe8bd1c82b3a4bbd8ed4351874dd4ab",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 27.05,
          "commitsBetweenForRepo": 163,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,122 +1,130 @@\n   public JobsInfo getJobs(@QueryParam(\"user\") String userQuery,\n       @QueryParam(\"limit\") String count,\n+      @QueryParam(\"state\") String stateQuery,\n       @QueryParam(\"queue\") String queueQuery,\n       @QueryParam(\"startedTimeBegin\") String startedBegin,\n       @QueryParam(\"startedTimeEnd\") String startedEnd,\n       @QueryParam(\"finishedTimeBegin\") String finishBegin,\n       @QueryParam(\"finishedTimeEnd\") String finishEnd) {\n     JobsInfo allJobs \u003d new JobsInfo();\n     long num \u003d 0;\n     boolean checkCount \u003d false;\n     boolean checkStart \u003d false;\n     boolean checkEnd \u003d false;\n     long countNum \u003d 0;\n \n     // set values suitable in case both of begin/end not specified\n     long sBegin \u003d 0;\n     long sEnd \u003d Long.MAX_VALUE;\n     long fBegin \u003d 0;\n     long fEnd \u003d Long.MAX_VALUE;\n \n     if (count !\u003d null \u0026\u0026 !count.isEmpty()) {\n       checkCount \u003d true;\n       try {\n         countNum \u003d Long.parseLong(count);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(e.getMessage());\n       }\n       if (countNum \u003c\u003d 0) {\n         throw new BadRequestException(\"limit value must be greater then 0\");\n       }\n     }\n \n     if (startedBegin !\u003d null \u0026\u0026 !startedBegin.isEmpty()) {\n       checkStart \u003d true;\n       try {\n         sBegin \u003d Long.parseLong(startedBegin);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (sBegin \u003c 0) {\n         throw new BadRequestException(\"startedTimeBegin must be greater than 0\");\n       }\n     }\n     if (startedEnd !\u003d null \u0026\u0026 !startedEnd.isEmpty()) {\n       checkStart \u003d true;\n       try {\n         sEnd \u003d Long.parseLong(startedEnd);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (sEnd \u003c 0) {\n         throw new BadRequestException(\"startedTimeEnd must be greater than 0\");\n       }\n     }\n     if (sBegin \u003e sEnd) {\n       throw new BadRequestException(\n           \"startedTimeEnd must be greater than startTimeBegin\");\n     }\n \n     if (finishBegin !\u003d null \u0026\u0026 !finishBegin.isEmpty()) {\n       checkEnd \u003d true;\n       try {\n         fBegin \u003d Long.parseLong(finishBegin);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (fBegin \u003c 0) {\n         throw new BadRequestException(\"finishedTimeBegin must be greater than 0\");\n       }\n     }\n     if (finishEnd !\u003d null \u0026\u0026 !finishEnd.isEmpty()) {\n       checkEnd \u003d true;\n       try {\n         fEnd \u003d Long.parseLong(finishEnd);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (fEnd \u003c 0) {\n         throw new BadRequestException(\"finishedTimeEnd must be greater than 0\");\n       }\n     }\n     if (fBegin \u003e fEnd) {\n       throw new BadRequestException(\n           \"finishedTimeEnd must be greater than finishedTimeBegin\");\n     }\n \n     for (Job job : appCtx.getAllJobs().values()) {\n       if (checkCount \u0026\u0026 num \u003d\u003d countNum) {\n         break;\n       }\n \n+      if (stateQuery !\u003d null \u0026\u0026 !stateQuery.isEmpty()) {\n+        JobState.valueOf(stateQuery);\n+        if (!job.getState().toString().equalsIgnoreCase(stateQuery)) {\n+          continue;\n+        }\n+      }\n+\n       // can\u0027t really validate queue is a valid one since queues could change\n       if (queueQuery !\u003d null \u0026\u0026 !queueQuery.isEmpty()) {\n         if (!job.getQueueName().equals(queueQuery)) {\n           continue;\n         }\n       }\n \n       if (userQuery !\u003d null \u0026\u0026 !userQuery.isEmpty()) {\n         if (!job.getUserName().equals(userQuery)) {\n           continue;\n         }\n       }\n \n       JobReport report \u003d job.getReport();\n       \n       if (checkStart\n           \u0026\u0026 (report.getStartTime() \u003c sBegin || report.getStartTime() \u003e sEnd)) {\n         continue;\n       }\n       if (checkEnd\n           \u0026\u0026 (report.getFinishTime() \u003c fBegin || report.getFinishTime() \u003e fEnd)) {\n         continue;\n       }\n       \n       JobInfo jobInfo \u003d new JobInfo(job);\n       \n       allJobs.add(jobInfo);\n       num++;\n     }\n     return allJobs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public JobsInfo getJobs(@QueryParam(\"user\") String userQuery,\n      @QueryParam(\"limit\") String count,\n      @QueryParam(\"state\") String stateQuery,\n      @QueryParam(\"queue\") String queueQuery,\n      @QueryParam(\"startedTimeBegin\") String startedBegin,\n      @QueryParam(\"startedTimeEnd\") String startedEnd,\n      @QueryParam(\"finishedTimeBegin\") String finishBegin,\n      @QueryParam(\"finishedTimeEnd\") String finishEnd) {\n    JobsInfo allJobs \u003d new JobsInfo();\n    long num \u003d 0;\n    boolean checkCount \u003d false;\n    boolean checkStart \u003d false;\n    boolean checkEnd \u003d false;\n    long countNum \u003d 0;\n\n    // set values suitable in case both of begin/end not specified\n    long sBegin \u003d 0;\n    long sEnd \u003d Long.MAX_VALUE;\n    long fBegin \u003d 0;\n    long fEnd \u003d Long.MAX_VALUE;\n\n    if (count !\u003d null \u0026\u0026 !count.isEmpty()) {\n      checkCount \u003d true;\n      try {\n        countNum \u003d Long.parseLong(count);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(e.getMessage());\n      }\n      if (countNum \u003c\u003d 0) {\n        throw new BadRequestException(\"limit value must be greater then 0\");\n      }\n    }\n\n    if (startedBegin !\u003d null \u0026\u0026 !startedBegin.isEmpty()) {\n      checkStart \u003d true;\n      try {\n        sBegin \u003d Long.parseLong(startedBegin);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (sBegin \u003c 0) {\n        throw new BadRequestException(\"startedTimeBegin must be greater than 0\");\n      }\n    }\n    if (startedEnd !\u003d null \u0026\u0026 !startedEnd.isEmpty()) {\n      checkStart \u003d true;\n      try {\n        sEnd \u003d Long.parseLong(startedEnd);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (sEnd \u003c 0) {\n        throw new BadRequestException(\"startedTimeEnd must be greater than 0\");\n      }\n    }\n    if (sBegin \u003e sEnd) {\n      throw new BadRequestException(\n          \"startedTimeEnd must be greater than startTimeBegin\");\n    }\n\n    if (finishBegin !\u003d null \u0026\u0026 !finishBegin.isEmpty()) {\n      checkEnd \u003d true;\n      try {\n        fBegin \u003d Long.parseLong(finishBegin);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (fBegin \u003c 0) {\n        throw new BadRequestException(\"finishedTimeBegin must be greater than 0\");\n      }\n    }\n    if (finishEnd !\u003d null \u0026\u0026 !finishEnd.isEmpty()) {\n      checkEnd \u003d true;\n      try {\n        fEnd \u003d Long.parseLong(finishEnd);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (fEnd \u003c 0) {\n        throw new BadRequestException(\"finishedTimeEnd must be greater than 0\");\n      }\n    }\n    if (fBegin \u003e fEnd) {\n      throw new BadRequestException(\n          \"finishedTimeEnd must be greater than finishedTimeBegin\");\n    }\n\n    for (Job job : appCtx.getAllJobs().values()) {\n      if (checkCount \u0026\u0026 num \u003d\u003d countNum) {\n        break;\n      }\n\n      if (stateQuery !\u003d null \u0026\u0026 !stateQuery.isEmpty()) {\n        JobState.valueOf(stateQuery);\n        if (!job.getState().toString().equalsIgnoreCase(stateQuery)) {\n          continue;\n        }\n      }\n\n      // can\u0027t really validate queue is a valid one since queues could change\n      if (queueQuery !\u003d null \u0026\u0026 !queueQuery.isEmpty()) {\n        if (!job.getQueueName().equals(queueQuery)) {\n          continue;\n        }\n      }\n\n      if (userQuery !\u003d null \u0026\u0026 !userQuery.isEmpty()) {\n        if (!job.getUserName().equals(userQuery)) {\n          continue;\n        }\n      }\n\n      JobReport report \u003d job.getReport();\n      \n      if (checkStart\n          \u0026\u0026 (report.getStartTime() \u003c sBegin || report.getStartTime() \u003e sEnd)) {\n        continue;\n      }\n      if (checkEnd\n          \u0026\u0026 (report.getFinishTime() \u003c fBegin || report.getFinishTime() \u003e fEnd)) {\n        continue;\n      }\n      \n      JobInfo jobInfo \u003d new JobInfo(job);\n      \n      allJobs.add(jobInfo);\n      num++;\n    }\n    return allJobs;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "4ce5f6553fe8bd1c82b3a4bbd8ed4351874dd4ab": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3944. Change the history jobs/ webservice to return partial job info for a significant performance improvement. (Contributed by Robert Joseph Evans)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1297672 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/12 11:52 AM",
      "commitName": "4ce5f6553fe8bd1c82b3a4bbd8ed4351874dd4ab",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "10/01/12 2:26 PM",
      "commitNameOld": "bc374626bebef8297c7fd03ceaa27932baf6a523",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 55.89,
      "commitsBetweenForRepo": 464,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,125 +1,122 @@\n   public JobsInfo getJobs(@QueryParam(\"user\") String userQuery,\n       @QueryParam(\"limit\") String count,\n       @QueryParam(\"queue\") String queueQuery,\n       @QueryParam(\"startedTimeBegin\") String startedBegin,\n       @QueryParam(\"startedTimeEnd\") String startedEnd,\n       @QueryParam(\"finishedTimeBegin\") String finishBegin,\n       @QueryParam(\"finishedTimeEnd\") String finishEnd) {\n     JobsInfo allJobs \u003d new JobsInfo();\n     long num \u003d 0;\n     boolean checkCount \u003d false;\n     boolean checkStart \u003d false;\n     boolean checkEnd \u003d false;\n     long countNum \u003d 0;\n \n     // set values suitable in case both of begin/end not specified\n     long sBegin \u003d 0;\n     long sEnd \u003d Long.MAX_VALUE;\n     long fBegin \u003d 0;\n     long fEnd \u003d Long.MAX_VALUE;\n \n     if (count !\u003d null \u0026\u0026 !count.isEmpty()) {\n       checkCount \u003d true;\n       try {\n         countNum \u003d Long.parseLong(count);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(e.getMessage());\n       }\n       if (countNum \u003c\u003d 0) {\n         throw new BadRequestException(\"limit value must be greater then 0\");\n       }\n     }\n \n     if (startedBegin !\u003d null \u0026\u0026 !startedBegin.isEmpty()) {\n       checkStart \u003d true;\n       try {\n         sBegin \u003d Long.parseLong(startedBegin);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (sBegin \u003c 0) {\n         throw new BadRequestException(\"startedTimeBegin must be greater than 0\");\n       }\n     }\n     if (startedEnd !\u003d null \u0026\u0026 !startedEnd.isEmpty()) {\n       checkStart \u003d true;\n       try {\n         sEnd \u003d Long.parseLong(startedEnd);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (sEnd \u003c 0) {\n         throw new BadRequestException(\"startedTimeEnd must be greater than 0\");\n       }\n     }\n     if (sBegin \u003e sEnd) {\n       throw new BadRequestException(\n           \"startedTimeEnd must be greater than startTimeBegin\");\n     }\n \n     if (finishBegin !\u003d null \u0026\u0026 !finishBegin.isEmpty()) {\n       checkEnd \u003d true;\n       try {\n         fBegin \u003d Long.parseLong(finishBegin);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (fBegin \u003c 0) {\n         throw new BadRequestException(\"finishedTimeBegin must be greater than 0\");\n       }\n     }\n     if (finishEnd !\u003d null \u0026\u0026 !finishEnd.isEmpty()) {\n       checkEnd \u003d true;\n       try {\n         fEnd \u003d Long.parseLong(finishEnd);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (fEnd \u003c 0) {\n         throw new BadRequestException(\"finishedTimeEnd must be greater than 0\");\n       }\n     }\n     if (fBegin \u003e fEnd) {\n       throw new BadRequestException(\n           \"finishedTimeEnd must be greater than finishedTimeBegin\");\n     }\n \n     for (Job job : appCtx.getAllJobs().values()) {\n       if (checkCount \u0026\u0026 num \u003d\u003d countNum) {\n         break;\n       }\n \n-      // getAllJobs only gives you a partial we want a full\n-      Job fullJob \u003d appCtx.getJob(job.getID());\n-      if (fullJob \u003d\u003d null) {\n-        continue;\n-      }\n-\n-      JobInfo jobInfo \u003d new JobInfo(fullJob);\n       // can\u0027t really validate queue is a valid one since queues could change\n       if (queueQuery !\u003d null \u0026\u0026 !queueQuery.isEmpty()) {\n-        if (!jobInfo.getQueueName().equals(queueQuery)) {\n+        if (!job.getQueueName().equals(queueQuery)) {\n           continue;\n         }\n       }\n \n       if (userQuery !\u003d null \u0026\u0026 !userQuery.isEmpty()) {\n-        if (!jobInfo.getUserName().equals(userQuery)) {\n+        if (!job.getUserName().equals(userQuery)) {\n           continue;\n         }\n       }\n \n+      JobReport report \u003d job.getReport();\n+      \n       if (checkStart\n-          \u0026\u0026 (jobInfo.getStartTime() \u003c sBegin || jobInfo.getStartTime() \u003e sEnd)) {\n+          \u0026\u0026 (report.getStartTime() \u003c sBegin || report.getStartTime() \u003e sEnd)) {\n         continue;\n       }\n       if (checkEnd\n-          \u0026\u0026 (jobInfo.getFinishTime() \u003c fBegin || jobInfo.getFinishTime() \u003e fEnd)) {\n+          \u0026\u0026 (report.getFinishTime() \u003c fBegin || report.getFinishTime() \u003e fEnd)) {\n         continue;\n       }\n-\n+      \n+      JobInfo jobInfo \u003d new JobInfo(job);\n+      \n       allJobs.add(jobInfo);\n       num++;\n     }\n     return allJobs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobsInfo getJobs(@QueryParam(\"user\") String userQuery,\n      @QueryParam(\"limit\") String count,\n      @QueryParam(\"queue\") String queueQuery,\n      @QueryParam(\"startedTimeBegin\") String startedBegin,\n      @QueryParam(\"startedTimeEnd\") String startedEnd,\n      @QueryParam(\"finishedTimeBegin\") String finishBegin,\n      @QueryParam(\"finishedTimeEnd\") String finishEnd) {\n    JobsInfo allJobs \u003d new JobsInfo();\n    long num \u003d 0;\n    boolean checkCount \u003d false;\n    boolean checkStart \u003d false;\n    boolean checkEnd \u003d false;\n    long countNum \u003d 0;\n\n    // set values suitable in case both of begin/end not specified\n    long sBegin \u003d 0;\n    long sEnd \u003d Long.MAX_VALUE;\n    long fBegin \u003d 0;\n    long fEnd \u003d Long.MAX_VALUE;\n\n    if (count !\u003d null \u0026\u0026 !count.isEmpty()) {\n      checkCount \u003d true;\n      try {\n        countNum \u003d Long.parseLong(count);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(e.getMessage());\n      }\n      if (countNum \u003c\u003d 0) {\n        throw new BadRequestException(\"limit value must be greater then 0\");\n      }\n    }\n\n    if (startedBegin !\u003d null \u0026\u0026 !startedBegin.isEmpty()) {\n      checkStart \u003d true;\n      try {\n        sBegin \u003d Long.parseLong(startedBegin);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (sBegin \u003c 0) {\n        throw new BadRequestException(\"startedTimeBegin must be greater than 0\");\n      }\n    }\n    if (startedEnd !\u003d null \u0026\u0026 !startedEnd.isEmpty()) {\n      checkStart \u003d true;\n      try {\n        sEnd \u003d Long.parseLong(startedEnd);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (sEnd \u003c 0) {\n        throw new BadRequestException(\"startedTimeEnd must be greater than 0\");\n      }\n    }\n    if (sBegin \u003e sEnd) {\n      throw new BadRequestException(\n          \"startedTimeEnd must be greater than startTimeBegin\");\n    }\n\n    if (finishBegin !\u003d null \u0026\u0026 !finishBegin.isEmpty()) {\n      checkEnd \u003d true;\n      try {\n        fBegin \u003d Long.parseLong(finishBegin);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (fBegin \u003c 0) {\n        throw new BadRequestException(\"finishedTimeBegin must be greater than 0\");\n      }\n    }\n    if (finishEnd !\u003d null \u0026\u0026 !finishEnd.isEmpty()) {\n      checkEnd \u003d true;\n      try {\n        fEnd \u003d Long.parseLong(finishEnd);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (fEnd \u003c 0) {\n        throw new BadRequestException(\"finishedTimeEnd must be greater than 0\");\n      }\n    }\n    if (fBegin \u003e fEnd) {\n      throw new BadRequestException(\n          \"finishedTimeEnd must be greater than finishedTimeBegin\");\n    }\n\n    for (Job job : appCtx.getAllJobs().values()) {\n      if (checkCount \u0026\u0026 num \u003d\u003d countNum) {\n        break;\n      }\n\n      // can\u0027t really validate queue is a valid one since queues could change\n      if (queueQuery !\u003d null \u0026\u0026 !queueQuery.isEmpty()) {\n        if (!job.getQueueName().equals(queueQuery)) {\n          continue;\n        }\n      }\n\n      if (userQuery !\u003d null \u0026\u0026 !userQuery.isEmpty()) {\n        if (!job.getUserName().equals(userQuery)) {\n          continue;\n        }\n      }\n\n      JobReport report \u003d job.getReport();\n      \n      if (checkStart\n          \u0026\u0026 (report.getStartTime() \u003c sBegin || report.getStartTime() \u003e sEnd)) {\n        continue;\n      }\n      if (checkEnd\n          \u0026\u0026 (report.getFinishTime() \u003c fBegin || report.getFinishTime() \u003e fEnd)) {\n        continue;\n      }\n      \n      JobInfo jobInfo \u003d new JobInfo(job);\n      \n      allJobs.add(jobInfo);\n      num++;\n    }\n    return allJobs;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsWebServices.java",
      "extendedDetails": {}
    },
    "7440a8aa374a3a1d4eb2b6dd8d4db184bff5ade0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3548. Added more unit tests for MR AM \u0026 JHS web-services. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1227801 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/01/12 12:01 PM",
      "commitName": "7440a8aa374a3a1d4eb2b6dd8d4db184bff5ade0",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "13/12/11 3:05 PM",
      "commitNameOld": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 22.87,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,125 +1,125 @@\n   public JobsInfo getJobs(@QueryParam(\"user\") String userQuery,\n       @QueryParam(\"limit\") String count,\n       @QueryParam(\"queue\") String queueQuery,\n       @QueryParam(\"startedTimeBegin\") String startedBegin,\n       @QueryParam(\"startedTimeEnd\") String startedEnd,\n       @QueryParam(\"finishedTimeBegin\") String finishBegin,\n       @QueryParam(\"finishedTimeEnd\") String finishEnd) {\n     JobsInfo allJobs \u003d new JobsInfo();\n     long num \u003d 0;\n     boolean checkCount \u003d false;\n     boolean checkStart \u003d false;\n     boolean checkEnd \u003d false;\n     long countNum \u003d 0;\n \n     // set values suitable in case both of begin/end not specified\n     long sBegin \u003d 0;\n     long sEnd \u003d Long.MAX_VALUE;\n     long fBegin \u003d 0;\n     long fEnd \u003d Long.MAX_VALUE;\n \n     if (count !\u003d null \u0026\u0026 !count.isEmpty()) {\n       checkCount \u003d true;\n       try {\n         countNum \u003d Long.parseLong(count);\n       } catch (NumberFormatException e) {\n         throw new BadRequestException(e.getMessage());\n       }\n       if (countNum \u003c\u003d 0) {\n         throw new BadRequestException(\"limit value must be greater then 0\");\n       }\n     }\n \n     if (startedBegin !\u003d null \u0026\u0026 !startedBegin.isEmpty()) {\n       checkStart \u003d true;\n       try {\n         sBegin \u003d Long.parseLong(startedBegin);\n       } catch (NumberFormatException e) {\n-        throw new BadRequestException(e.getMessage());\n+        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (sBegin \u003c 0) {\n         throw new BadRequestException(\"startedTimeBegin must be greater than 0\");\n       }\n     }\n     if (startedEnd !\u003d null \u0026\u0026 !startedEnd.isEmpty()) {\n       checkStart \u003d true;\n       try {\n         sEnd \u003d Long.parseLong(startedEnd);\n       } catch (NumberFormatException e) {\n-        throw new BadRequestException(e.getMessage());\n+        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (sEnd \u003c 0) {\n         throw new BadRequestException(\"startedTimeEnd must be greater than 0\");\n       }\n     }\n     if (sBegin \u003e sEnd) {\n       throw new BadRequestException(\n           \"startedTimeEnd must be greater than startTimeBegin\");\n     }\n \n     if (finishBegin !\u003d null \u0026\u0026 !finishBegin.isEmpty()) {\n       checkEnd \u003d true;\n       try {\n         fBegin \u003d Long.parseLong(finishBegin);\n       } catch (NumberFormatException e) {\n-        throw new BadRequestException(e.getMessage());\n+        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (fBegin \u003c 0) {\n-        throw new BadRequestException(\"finishTimeBegin must be greater than 0\");\n+        throw new BadRequestException(\"finishedTimeBegin must be greater than 0\");\n       }\n     }\n     if (finishEnd !\u003d null \u0026\u0026 !finishEnd.isEmpty()) {\n       checkEnd \u003d true;\n       try {\n         fEnd \u003d Long.parseLong(finishEnd);\n       } catch (NumberFormatException e) {\n-        throw new BadRequestException(e.getMessage());\n+        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n       }\n       if (fEnd \u003c 0) {\n-        throw new BadRequestException(\"finishTimeEnd must be greater than 0\");\n+        throw new BadRequestException(\"finishedTimeEnd must be greater than 0\");\n       }\n     }\n     if (fBegin \u003e fEnd) {\n       throw new BadRequestException(\n-          \"finishTimeEnd must be greater than finishTimeBegin\");\n+          \"finishedTimeEnd must be greater than finishedTimeBegin\");\n     }\n \n     for (Job job : appCtx.getAllJobs().values()) {\n       if (checkCount \u0026\u0026 num \u003d\u003d countNum) {\n         break;\n       }\n \n       // getAllJobs only gives you a partial we want a full\n       Job fullJob \u003d appCtx.getJob(job.getID());\n       if (fullJob \u003d\u003d null) {\n         continue;\n       }\n \n       JobInfo jobInfo \u003d new JobInfo(fullJob);\n       // can\u0027t really validate queue is a valid one since queues could change\n       if (queueQuery !\u003d null \u0026\u0026 !queueQuery.isEmpty()) {\n         if (!jobInfo.getQueueName().equals(queueQuery)) {\n           continue;\n         }\n       }\n \n       if (userQuery !\u003d null \u0026\u0026 !userQuery.isEmpty()) {\n-        if (!jobInfo.getName().equals(userQuery)) {\n+        if (!jobInfo.getUserName().equals(userQuery)) {\n           continue;\n         }\n       }\n \n       if (checkStart\n           \u0026\u0026 (jobInfo.getStartTime() \u003c sBegin || jobInfo.getStartTime() \u003e sEnd)) {\n         continue;\n       }\n       if (checkEnd\n           \u0026\u0026 (jobInfo.getFinishTime() \u003c fBegin || jobInfo.getFinishTime() \u003e fEnd)) {\n         continue;\n       }\n \n       allJobs.add(jobInfo);\n       num++;\n     }\n     return allJobs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public JobsInfo getJobs(@QueryParam(\"user\") String userQuery,\n      @QueryParam(\"limit\") String count,\n      @QueryParam(\"queue\") String queueQuery,\n      @QueryParam(\"startedTimeBegin\") String startedBegin,\n      @QueryParam(\"startedTimeEnd\") String startedEnd,\n      @QueryParam(\"finishedTimeBegin\") String finishBegin,\n      @QueryParam(\"finishedTimeEnd\") String finishEnd) {\n    JobsInfo allJobs \u003d new JobsInfo();\n    long num \u003d 0;\n    boolean checkCount \u003d false;\n    boolean checkStart \u003d false;\n    boolean checkEnd \u003d false;\n    long countNum \u003d 0;\n\n    // set values suitable in case both of begin/end not specified\n    long sBegin \u003d 0;\n    long sEnd \u003d Long.MAX_VALUE;\n    long fBegin \u003d 0;\n    long fEnd \u003d Long.MAX_VALUE;\n\n    if (count !\u003d null \u0026\u0026 !count.isEmpty()) {\n      checkCount \u003d true;\n      try {\n        countNum \u003d Long.parseLong(count);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(e.getMessage());\n      }\n      if (countNum \u003c\u003d 0) {\n        throw new BadRequestException(\"limit value must be greater then 0\");\n      }\n    }\n\n    if (startedBegin !\u003d null \u0026\u0026 !startedBegin.isEmpty()) {\n      checkStart \u003d true;\n      try {\n        sBegin \u003d Long.parseLong(startedBegin);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (sBegin \u003c 0) {\n        throw new BadRequestException(\"startedTimeBegin must be greater than 0\");\n      }\n    }\n    if (startedEnd !\u003d null \u0026\u0026 !startedEnd.isEmpty()) {\n      checkStart \u003d true;\n      try {\n        sEnd \u003d Long.parseLong(startedEnd);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (sEnd \u003c 0) {\n        throw new BadRequestException(\"startedTimeEnd must be greater than 0\");\n      }\n    }\n    if (sBegin \u003e sEnd) {\n      throw new BadRequestException(\n          \"startedTimeEnd must be greater than startTimeBegin\");\n    }\n\n    if (finishBegin !\u003d null \u0026\u0026 !finishBegin.isEmpty()) {\n      checkEnd \u003d true;\n      try {\n        fBegin \u003d Long.parseLong(finishBegin);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (fBegin \u003c 0) {\n        throw new BadRequestException(\"finishedTimeBegin must be greater than 0\");\n      }\n    }\n    if (finishEnd !\u003d null \u0026\u0026 !finishEnd.isEmpty()) {\n      checkEnd \u003d true;\n      try {\n        fEnd \u003d Long.parseLong(finishEnd);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(\"Invalid number format: \" + e.getMessage());\n      }\n      if (fEnd \u003c 0) {\n        throw new BadRequestException(\"finishedTimeEnd must be greater than 0\");\n      }\n    }\n    if (fBegin \u003e fEnd) {\n      throw new BadRequestException(\n          \"finishedTimeEnd must be greater than finishedTimeBegin\");\n    }\n\n    for (Job job : appCtx.getAllJobs().values()) {\n      if (checkCount \u0026\u0026 num \u003d\u003d countNum) {\n        break;\n      }\n\n      // getAllJobs only gives you a partial we want a full\n      Job fullJob \u003d appCtx.getJob(job.getID());\n      if (fullJob \u003d\u003d null) {\n        continue;\n      }\n\n      JobInfo jobInfo \u003d new JobInfo(fullJob);\n      // can\u0027t really validate queue is a valid one since queues could change\n      if (queueQuery !\u003d null \u0026\u0026 !queueQuery.isEmpty()) {\n        if (!jobInfo.getQueueName().equals(queueQuery)) {\n          continue;\n        }\n      }\n\n      if (userQuery !\u003d null \u0026\u0026 !userQuery.isEmpty()) {\n        if (!jobInfo.getUserName().equals(userQuery)) {\n          continue;\n        }\n      }\n\n      if (checkStart\n          \u0026\u0026 (jobInfo.getStartTime() \u003c sBegin || jobInfo.getStartTime() \u003e sEnd)) {\n        continue;\n      }\n      if (checkEnd\n          \u0026\u0026 (jobInfo.getFinishTime() \u003c fBegin || jobInfo.getFinishTime() \u003e fEnd)) {\n        continue;\n      }\n\n      allJobs.add(jobInfo);\n      num++;\n    }\n    return allJobs;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsWebServices.java",
      "extendedDetails": {}
    },
    "0ea8570be578be60e2f32849900a1c50506d78d3": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2863. Support web services for YARN and MR components. (Thomas Graves via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213975 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 3:05 PM",
      "commitName": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,125 @@\n+  public JobsInfo getJobs(@QueryParam(\"user\") String userQuery,\n+      @QueryParam(\"limit\") String count,\n+      @QueryParam(\"queue\") String queueQuery,\n+      @QueryParam(\"startedTimeBegin\") String startedBegin,\n+      @QueryParam(\"startedTimeEnd\") String startedEnd,\n+      @QueryParam(\"finishedTimeBegin\") String finishBegin,\n+      @QueryParam(\"finishedTimeEnd\") String finishEnd) {\n+    JobsInfo allJobs \u003d new JobsInfo();\n+    long num \u003d 0;\n+    boolean checkCount \u003d false;\n+    boolean checkStart \u003d false;\n+    boolean checkEnd \u003d false;\n+    long countNum \u003d 0;\n+\n+    // set values suitable in case both of begin/end not specified\n+    long sBegin \u003d 0;\n+    long sEnd \u003d Long.MAX_VALUE;\n+    long fBegin \u003d 0;\n+    long fEnd \u003d Long.MAX_VALUE;\n+\n+    if (count !\u003d null \u0026\u0026 !count.isEmpty()) {\n+      checkCount \u003d true;\n+      try {\n+        countNum \u003d Long.parseLong(count);\n+      } catch (NumberFormatException e) {\n+        throw new BadRequestException(e.getMessage());\n+      }\n+      if (countNum \u003c\u003d 0) {\n+        throw new BadRequestException(\"limit value must be greater then 0\");\n+      }\n+    }\n+\n+    if (startedBegin !\u003d null \u0026\u0026 !startedBegin.isEmpty()) {\n+      checkStart \u003d true;\n+      try {\n+        sBegin \u003d Long.parseLong(startedBegin);\n+      } catch (NumberFormatException e) {\n+        throw new BadRequestException(e.getMessage());\n+      }\n+      if (sBegin \u003c 0) {\n+        throw new BadRequestException(\"startedTimeBegin must be greater than 0\");\n+      }\n+    }\n+    if (startedEnd !\u003d null \u0026\u0026 !startedEnd.isEmpty()) {\n+      checkStart \u003d true;\n+      try {\n+        sEnd \u003d Long.parseLong(startedEnd);\n+      } catch (NumberFormatException e) {\n+        throw new BadRequestException(e.getMessage());\n+      }\n+      if (sEnd \u003c 0) {\n+        throw new BadRequestException(\"startedTimeEnd must be greater than 0\");\n+      }\n+    }\n+    if (sBegin \u003e sEnd) {\n+      throw new BadRequestException(\n+          \"startedTimeEnd must be greater than startTimeBegin\");\n+    }\n+\n+    if (finishBegin !\u003d null \u0026\u0026 !finishBegin.isEmpty()) {\n+      checkEnd \u003d true;\n+      try {\n+        fBegin \u003d Long.parseLong(finishBegin);\n+      } catch (NumberFormatException e) {\n+        throw new BadRequestException(e.getMessage());\n+      }\n+      if (fBegin \u003c 0) {\n+        throw new BadRequestException(\"finishTimeBegin must be greater than 0\");\n+      }\n+    }\n+    if (finishEnd !\u003d null \u0026\u0026 !finishEnd.isEmpty()) {\n+      checkEnd \u003d true;\n+      try {\n+        fEnd \u003d Long.parseLong(finishEnd);\n+      } catch (NumberFormatException e) {\n+        throw new BadRequestException(e.getMessage());\n+      }\n+      if (fEnd \u003c 0) {\n+        throw new BadRequestException(\"finishTimeEnd must be greater than 0\");\n+      }\n+    }\n+    if (fBegin \u003e fEnd) {\n+      throw new BadRequestException(\n+          \"finishTimeEnd must be greater than finishTimeBegin\");\n+    }\n+\n+    for (Job job : appCtx.getAllJobs().values()) {\n+      if (checkCount \u0026\u0026 num \u003d\u003d countNum) {\n+        break;\n+      }\n+\n+      // getAllJobs only gives you a partial we want a full\n+      Job fullJob \u003d appCtx.getJob(job.getID());\n+      if (fullJob \u003d\u003d null) {\n+        continue;\n+      }\n+\n+      JobInfo jobInfo \u003d new JobInfo(fullJob);\n+      // can\u0027t really validate queue is a valid one since queues could change\n+      if (queueQuery !\u003d null \u0026\u0026 !queueQuery.isEmpty()) {\n+        if (!jobInfo.getQueueName().equals(queueQuery)) {\n+          continue;\n+        }\n+      }\n+\n+      if (userQuery !\u003d null \u0026\u0026 !userQuery.isEmpty()) {\n+        if (!jobInfo.getName().equals(userQuery)) {\n+          continue;\n+        }\n+      }\n+\n+      if (checkStart\n+          \u0026\u0026 (jobInfo.getStartTime() \u003c sBegin || jobInfo.getStartTime() \u003e sEnd)) {\n+        continue;\n+      }\n+      if (checkEnd\n+          \u0026\u0026 (jobInfo.getFinishTime() \u003c fBegin || jobInfo.getFinishTime() \u003e fEnd)) {\n+        continue;\n+      }\n+\n+      allJobs.add(jobInfo);\n+      num++;\n+    }\n+    return allJobs;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public JobsInfo getJobs(@QueryParam(\"user\") String userQuery,\n      @QueryParam(\"limit\") String count,\n      @QueryParam(\"queue\") String queueQuery,\n      @QueryParam(\"startedTimeBegin\") String startedBegin,\n      @QueryParam(\"startedTimeEnd\") String startedEnd,\n      @QueryParam(\"finishedTimeBegin\") String finishBegin,\n      @QueryParam(\"finishedTimeEnd\") String finishEnd) {\n    JobsInfo allJobs \u003d new JobsInfo();\n    long num \u003d 0;\n    boolean checkCount \u003d false;\n    boolean checkStart \u003d false;\n    boolean checkEnd \u003d false;\n    long countNum \u003d 0;\n\n    // set values suitable in case both of begin/end not specified\n    long sBegin \u003d 0;\n    long sEnd \u003d Long.MAX_VALUE;\n    long fBegin \u003d 0;\n    long fEnd \u003d Long.MAX_VALUE;\n\n    if (count !\u003d null \u0026\u0026 !count.isEmpty()) {\n      checkCount \u003d true;\n      try {\n        countNum \u003d Long.parseLong(count);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(e.getMessage());\n      }\n      if (countNum \u003c\u003d 0) {\n        throw new BadRequestException(\"limit value must be greater then 0\");\n      }\n    }\n\n    if (startedBegin !\u003d null \u0026\u0026 !startedBegin.isEmpty()) {\n      checkStart \u003d true;\n      try {\n        sBegin \u003d Long.parseLong(startedBegin);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(e.getMessage());\n      }\n      if (sBegin \u003c 0) {\n        throw new BadRequestException(\"startedTimeBegin must be greater than 0\");\n      }\n    }\n    if (startedEnd !\u003d null \u0026\u0026 !startedEnd.isEmpty()) {\n      checkStart \u003d true;\n      try {\n        sEnd \u003d Long.parseLong(startedEnd);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(e.getMessage());\n      }\n      if (sEnd \u003c 0) {\n        throw new BadRequestException(\"startedTimeEnd must be greater than 0\");\n      }\n    }\n    if (sBegin \u003e sEnd) {\n      throw new BadRequestException(\n          \"startedTimeEnd must be greater than startTimeBegin\");\n    }\n\n    if (finishBegin !\u003d null \u0026\u0026 !finishBegin.isEmpty()) {\n      checkEnd \u003d true;\n      try {\n        fBegin \u003d Long.parseLong(finishBegin);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(e.getMessage());\n      }\n      if (fBegin \u003c 0) {\n        throw new BadRequestException(\"finishTimeBegin must be greater than 0\");\n      }\n    }\n    if (finishEnd !\u003d null \u0026\u0026 !finishEnd.isEmpty()) {\n      checkEnd \u003d true;\n      try {\n        fEnd \u003d Long.parseLong(finishEnd);\n      } catch (NumberFormatException e) {\n        throw new BadRequestException(e.getMessage());\n      }\n      if (fEnd \u003c 0) {\n        throw new BadRequestException(\"finishTimeEnd must be greater than 0\");\n      }\n    }\n    if (fBegin \u003e fEnd) {\n      throw new BadRequestException(\n          \"finishTimeEnd must be greater than finishTimeBegin\");\n    }\n\n    for (Job job : appCtx.getAllJobs().values()) {\n      if (checkCount \u0026\u0026 num \u003d\u003d countNum) {\n        break;\n      }\n\n      // getAllJobs only gives you a partial we want a full\n      Job fullJob \u003d appCtx.getJob(job.getID());\n      if (fullJob \u003d\u003d null) {\n        continue;\n      }\n\n      JobInfo jobInfo \u003d new JobInfo(fullJob);\n      // can\u0027t really validate queue is a valid one since queues could change\n      if (queueQuery !\u003d null \u0026\u0026 !queueQuery.isEmpty()) {\n        if (!jobInfo.getQueueName().equals(queueQuery)) {\n          continue;\n        }\n      }\n\n      if (userQuery !\u003d null \u0026\u0026 !userQuery.isEmpty()) {\n        if (!jobInfo.getName().equals(userQuery)) {\n          continue;\n        }\n      }\n\n      if (checkStart\n          \u0026\u0026 (jobInfo.getStartTime() \u003c sBegin || jobInfo.getStartTime() \u003e sEnd)) {\n        continue;\n      }\n      if (checkEnd\n          \u0026\u0026 (jobInfo.getFinishTime() \u003c fBegin || jobInfo.getFinishTime() \u003e fEnd)) {\n        continue;\n      }\n\n      allJobs.add(jobInfo);\n      num++;\n    }\n    return allJobs;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsWebServices.java"
    }
  }
}