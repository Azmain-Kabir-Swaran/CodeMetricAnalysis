{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LinuxContainerExecutor.java",
  "functionName": "buildContainerRuntimeContext",
  "functionId": "buildContainerRuntimeContext___ctx-ContainerStartContext__pidFilePath-Path__resourcesOptions-String__tcCommandFile-String__numaArgs-List__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
  "functionStartLine": 643,
  "functionEndLine": 693,
  "numCommitsSeen": 146,
  "timeTaken": 3905,
  "changeHistory": [
    "c2288ac45b748b4119442c46147ccc324926c340",
    "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd",
    "456705a07c8b80658950acc99f23086244c6b20f",
    "74a61438ca01e2191b54000af73b654a2d0b8253"
  ],
  "changeHistoryShort": {
    "c2288ac45b748b4119442c46147ccc324926c340": "Ybodychange",
    "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd": "Ymultichange(Yparameterchange,Ybodychange)",
    "456705a07c8b80658950acc99f23086244c6b20f": "Ybodychange",
    "74a61438ca01e2191b54000af73b654a2d0b8253": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c2288ac45b748b4119442c46147ccc324926c340": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8448. AM HTTPS Support for AM communication with RMWeb proxy. (Contributed by Robert Kanter)\n",
      "commitDate": "16/10/18 1:36 PM",
      "commitName": "c2288ac45b748b4119442c46147ccc324926c340",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "08/10/18 10:56 AM",
      "commitNameOld": "347ea385817766a5c418017009728cd8b9959776",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.11,
      "commitsBetweenForRepo": 115,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,51 @@\n   private ContainerRuntimeContext buildContainerRuntimeContext(\n       ContainerStartContext ctx, Path pidFilePath, String resourcesOptions,\n       String tcCommandFile, List\u003cString\u003e numaArgs) {\n \n     List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n     addSchedPriorityCommand(prefixCommands);\n     addNumaArgsToCommand(prefixCommands, numaArgs);\n \n     Container container \u003d ctx.getContainer();\n \n     ContainerRuntimeContext.Builder builder \u003d new ContainerRuntimeContext\n             .Builder(container);\n     if (prefixCommands.size() \u003e 0) {\n       builder.setExecutionAttribute(CONTAINER_LAUNCH_PREFIX_COMMANDS,\n               prefixCommands);\n     }\n \n     builder.setExecutionAttribute(LOCALIZED_RESOURCES,\n         ctx.getLocalizedResources())\n       .setExecutionAttribute(RUN_AS_USER, getRunAsUser(ctx.getUser()))\n       .setExecutionAttribute(USER, ctx.getUser())\n       .setExecutionAttribute(APPID, ctx.getAppId())\n       .setExecutionAttribute(CONTAINER_ID_STR,\n         container.getContainerId().toString())\n       .setExecutionAttribute(CONTAINER_WORK_DIR, ctx.getContainerWorkDir())\n       .setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH,\n         ctx.getNmPrivateContainerScriptPath())\n       .setExecutionAttribute(NM_PRIVATE_TOKENS_PATH,\n         ctx.getNmPrivateTokensPath())\n+      .setExecutionAttribute(NM_PRIVATE_KEYSTORE_PATH,\n+        ctx.getNmPrivateKeystorePath())\n+      .setExecutionAttribute(NM_PRIVATE_TRUSTSTORE_PATH,\n+        ctx.getNmPrivateTruststorePath())\n       .setExecutionAttribute(PID_FILE_PATH, pidFilePath)\n       .setExecutionAttribute(LOCAL_DIRS, ctx.getLocalDirs())\n       .setExecutionAttribute(LOG_DIRS, ctx.getLogDirs())\n       .setExecutionAttribute(FILECACHE_DIRS, ctx.getFilecacheDirs())\n       .setExecutionAttribute(USER_LOCAL_DIRS, ctx.getUserLocalDirs())\n       .setExecutionAttribute(CONTAINER_LOCAL_DIRS, ctx.getContainerLocalDirs())\n       .setExecutionAttribute(USER_FILECACHE_DIRS, ctx.getUserFilecacheDirs())\n       .setExecutionAttribute(APPLICATION_LOCAL_DIRS,\n           ctx.getApplicationLocalDirs())\n       .setExecutionAttribute(CONTAINER_LOG_DIRS, ctx.getContainerLogDirs())\n       .setExecutionAttribute(RESOURCES_OPTIONS, resourcesOptions);\n \n     if (tcCommandFile !\u003d null) {\n       builder.setExecutionAttribute(TC_COMMAND_FILE, tcCommandFile);\n     }\n \n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerRuntimeContext buildContainerRuntimeContext(\n      ContainerStartContext ctx, Path pidFilePath, String resourcesOptions,\n      String tcCommandFile, List\u003cString\u003e numaArgs) {\n\n    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n    addSchedPriorityCommand(prefixCommands);\n    addNumaArgsToCommand(prefixCommands, numaArgs);\n\n    Container container \u003d ctx.getContainer();\n\n    ContainerRuntimeContext.Builder builder \u003d new ContainerRuntimeContext\n            .Builder(container);\n    if (prefixCommands.size() \u003e 0) {\n      builder.setExecutionAttribute(CONTAINER_LAUNCH_PREFIX_COMMANDS,\n              prefixCommands);\n    }\n\n    builder.setExecutionAttribute(LOCALIZED_RESOURCES,\n        ctx.getLocalizedResources())\n      .setExecutionAttribute(RUN_AS_USER, getRunAsUser(ctx.getUser()))\n      .setExecutionAttribute(USER, ctx.getUser())\n      .setExecutionAttribute(APPID, ctx.getAppId())\n      .setExecutionAttribute(CONTAINER_ID_STR,\n        container.getContainerId().toString())\n      .setExecutionAttribute(CONTAINER_WORK_DIR, ctx.getContainerWorkDir())\n      .setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH,\n        ctx.getNmPrivateContainerScriptPath())\n      .setExecutionAttribute(NM_PRIVATE_TOKENS_PATH,\n        ctx.getNmPrivateTokensPath())\n      .setExecutionAttribute(NM_PRIVATE_KEYSTORE_PATH,\n        ctx.getNmPrivateKeystorePath())\n      .setExecutionAttribute(NM_PRIVATE_TRUSTSTORE_PATH,\n        ctx.getNmPrivateTruststorePath())\n      .setExecutionAttribute(PID_FILE_PATH, pidFilePath)\n      .setExecutionAttribute(LOCAL_DIRS, ctx.getLocalDirs())\n      .setExecutionAttribute(LOG_DIRS, ctx.getLogDirs())\n      .setExecutionAttribute(FILECACHE_DIRS, ctx.getFilecacheDirs())\n      .setExecutionAttribute(USER_LOCAL_DIRS, ctx.getUserLocalDirs())\n      .setExecutionAttribute(CONTAINER_LOCAL_DIRS, ctx.getContainerLocalDirs())\n      .setExecutionAttribute(USER_FILECACHE_DIRS, ctx.getUserFilecacheDirs())\n      .setExecutionAttribute(APPLICATION_LOCAL_DIRS,\n          ctx.getApplicationLocalDirs())\n      .setExecutionAttribute(CONTAINER_LOG_DIRS, ctx.getContainerLogDirs())\n      .setExecutionAttribute(RESOURCES_OPTIONS, resourcesOptions);\n\n    if (tcCommandFile !\u003d null) {\n      builder.setExecutionAttribute(TC_COMMAND_FILE, tcCommandFile);\n    }\n\n    return builder.build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5764. NUMA awareness support for launching containers. Contributed by Devaraj K.\n",
      "commitDate": "13/03/18 12:36 PM",
      "commitName": "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd",
      "commitAuthor": "Miklos Szegedi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5764. NUMA awareness support for launching containers. Contributed by Devaraj K.\n",
          "commitDate": "13/03/18 12:36 PM",
          "commitName": "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd",
          "commitAuthor": "Miklos Szegedi",
          "commitDateOld": "07/03/18 7:20 AM",
          "commitNameOld": "d69b31f7f70f296ddd180e004fa0f827c2f737f2",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 6.18,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,47 @@\n   private ContainerRuntimeContext buildContainerRuntimeContext(\n-      ContainerStartContext ctx, Path pidFilePath,\n-      String resourcesOptions, String tcCommandFile) {\n+      ContainerStartContext ctx, Path pidFilePath, String resourcesOptions,\n+      String tcCommandFile, List\u003cString\u003e numaArgs) {\n \n     List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n     addSchedPriorityCommand(prefixCommands);\n+    addNumaArgsToCommand(prefixCommands, numaArgs);\n \n     Container container \u003d ctx.getContainer();\n \n     ContainerRuntimeContext.Builder builder \u003d new ContainerRuntimeContext\n             .Builder(container);\n     if (prefixCommands.size() \u003e 0) {\n       builder.setExecutionAttribute(CONTAINER_LAUNCH_PREFIX_COMMANDS,\n               prefixCommands);\n     }\n \n     builder.setExecutionAttribute(LOCALIZED_RESOURCES,\n         ctx.getLocalizedResources())\n       .setExecutionAttribute(RUN_AS_USER, getRunAsUser(ctx.getUser()))\n       .setExecutionAttribute(USER, ctx.getUser())\n       .setExecutionAttribute(APPID, ctx.getAppId())\n       .setExecutionAttribute(CONTAINER_ID_STR,\n         container.getContainerId().toString())\n       .setExecutionAttribute(CONTAINER_WORK_DIR, ctx.getContainerWorkDir())\n       .setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH,\n         ctx.getNmPrivateContainerScriptPath())\n       .setExecutionAttribute(NM_PRIVATE_TOKENS_PATH,\n         ctx.getNmPrivateTokensPath())\n       .setExecutionAttribute(PID_FILE_PATH, pidFilePath)\n       .setExecutionAttribute(LOCAL_DIRS, ctx.getLocalDirs())\n       .setExecutionAttribute(LOG_DIRS, ctx.getLogDirs())\n       .setExecutionAttribute(FILECACHE_DIRS, ctx.getFilecacheDirs())\n       .setExecutionAttribute(USER_LOCAL_DIRS, ctx.getUserLocalDirs())\n       .setExecutionAttribute(CONTAINER_LOCAL_DIRS, ctx.getContainerLocalDirs())\n       .setExecutionAttribute(USER_FILECACHE_DIRS, ctx.getUserFilecacheDirs())\n       .setExecutionAttribute(APPLICATION_LOCAL_DIRS,\n           ctx.getApplicationLocalDirs())\n       .setExecutionAttribute(CONTAINER_LOG_DIRS, ctx.getContainerLogDirs())\n       .setExecutionAttribute(RESOURCES_OPTIONS, resourcesOptions);\n \n     if (tcCommandFile !\u003d null) {\n       builder.setExecutionAttribute(TC_COMMAND_FILE, tcCommandFile);\n     }\n \n     return builder.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerRuntimeContext buildContainerRuntimeContext(\n      ContainerStartContext ctx, Path pidFilePath, String resourcesOptions,\n      String tcCommandFile, List\u003cString\u003e numaArgs) {\n\n    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n    addSchedPriorityCommand(prefixCommands);\n    addNumaArgsToCommand(prefixCommands, numaArgs);\n\n    Container container \u003d ctx.getContainer();\n\n    ContainerRuntimeContext.Builder builder \u003d new ContainerRuntimeContext\n            .Builder(container);\n    if (prefixCommands.size() \u003e 0) {\n      builder.setExecutionAttribute(CONTAINER_LAUNCH_PREFIX_COMMANDS,\n              prefixCommands);\n    }\n\n    builder.setExecutionAttribute(LOCALIZED_RESOURCES,\n        ctx.getLocalizedResources())\n      .setExecutionAttribute(RUN_AS_USER, getRunAsUser(ctx.getUser()))\n      .setExecutionAttribute(USER, ctx.getUser())\n      .setExecutionAttribute(APPID, ctx.getAppId())\n      .setExecutionAttribute(CONTAINER_ID_STR,\n        container.getContainerId().toString())\n      .setExecutionAttribute(CONTAINER_WORK_DIR, ctx.getContainerWorkDir())\n      .setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH,\n        ctx.getNmPrivateContainerScriptPath())\n      .setExecutionAttribute(NM_PRIVATE_TOKENS_PATH,\n        ctx.getNmPrivateTokensPath())\n      .setExecutionAttribute(PID_FILE_PATH, pidFilePath)\n      .setExecutionAttribute(LOCAL_DIRS, ctx.getLocalDirs())\n      .setExecutionAttribute(LOG_DIRS, ctx.getLogDirs())\n      .setExecutionAttribute(FILECACHE_DIRS, ctx.getFilecacheDirs())\n      .setExecutionAttribute(USER_LOCAL_DIRS, ctx.getUserLocalDirs())\n      .setExecutionAttribute(CONTAINER_LOCAL_DIRS, ctx.getContainerLocalDirs())\n      .setExecutionAttribute(USER_FILECACHE_DIRS, ctx.getUserFilecacheDirs())\n      .setExecutionAttribute(APPLICATION_LOCAL_DIRS,\n          ctx.getApplicationLocalDirs())\n      .setExecutionAttribute(CONTAINER_LOG_DIRS, ctx.getContainerLogDirs())\n      .setExecutionAttribute(RESOURCES_OPTIONS, resourcesOptions);\n\n    if (tcCommandFile !\u003d null) {\n      builder.setExecutionAttribute(TC_COMMAND_FILE, tcCommandFile);\n    }\n\n    return builder.build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[ctx-ContainerStartContext, pidFilePath-Path, resourcesOptions-String, tcCommandFile-String]",
            "newValue": "[ctx-ContainerStartContext, pidFilePath-Path, resourcesOptions-String, tcCommandFile-String, numaArgs-List\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5764. NUMA awareness support for launching containers. Contributed by Devaraj K.\n",
          "commitDate": "13/03/18 12:36 PM",
          "commitName": "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd",
          "commitAuthor": "Miklos Szegedi",
          "commitDateOld": "07/03/18 7:20 AM",
          "commitNameOld": "d69b31f7f70f296ddd180e004fa0f827c2f737f2",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 6.18,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,47 @@\n   private ContainerRuntimeContext buildContainerRuntimeContext(\n-      ContainerStartContext ctx, Path pidFilePath,\n-      String resourcesOptions, String tcCommandFile) {\n+      ContainerStartContext ctx, Path pidFilePath, String resourcesOptions,\n+      String tcCommandFile, List\u003cString\u003e numaArgs) {\n \n     List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n     addSchedPriorityCommand(prefixCommands);\n+    addNumaArgsToCommand(prefixCommands, numaArgs);\n \n     Container container \u003d ctx.getContainer();\n \n     ContainerRuntimeContext.Builder builder \u003d new ContainerRuntimeContext\n             .Builder(container);\n     if (prefixCommands.size() \u003e 0) {\n       builder.setExecutionAttribute(CONTAINER_LAUNCH_PREFIX_COMMANDS,\n               prefixCommands);\n     }\n \n     builder.setExecutionAttribute(LOCALIZED_RESOURCES,\n         ctx.getLocalizedResources())\n       .setExecutionAttribute(RUN_AS_USER, getRunAsUser(ctx.getUser()))\n       .setExecutionAttribute(USER, ctx.getUser())\n       .setExecutionAttribute(APPID, ctx.getAppId())\n       .setExecutionAttribute(CONTAINER_ID_STR,\n         container.getContainerId().toString())\n       .setExecutionAttribute(CONTAINER_WORK_DIR, ctx.getContainerWorkDir())\n       .setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH,\n         ctx.getNmPrivateContainerScriptPath())\n       .setExecutionAttribute(NM_PRIVATE_TOKENS_PATH,\n         ctx.getNmPrivateTokensPath())\n       .setExecutionAttribute(PID_FILE_PATH, pidFilePath)\n       .setExecutionAttribute(LOCAL_DIRS, ctx.getLocalDirs())\n       .setExecutionAttribute(LOG_DIRS, ctx.getLogDirs())\n       .setExecutionAttribute(FILECACHE_DIRS, ctx.getFilecacheDirs())\n       .setExecutionAttribute(USER_LOCAL_DIRS, ctx.getUserLocalDirs())\n       .setExecutionAttribute(CONTAINER_LOCAL_DIRS, ctx.getContainerLocalDirs())\n       .setExecutionAttribute(USER_FILECACHE_DIRS, ctx.getUserFilecacheDirs())\n       .setExecutionAttribute(APPLICATION_LOCAL_DIRS,\n           ctx.getApplicationLocalDirs())\n       .setExecutionAttribute(CONTAINER_LOG_DIRS, ctx.getContainerLogDirs())\n       .setExecutionAttribute(RESOURCES_OPTIONS, resourcesOptions);\n \n     if (tcCommandFile !\u003d null) {\n       builder.setExecutionAttribute(TC_COMMAND_FILE, tcCommandFile);\n     }\n \n     return builder.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerRuntimeContext buildContainerRuntimeContext(\n      ContainerStartContext ctx, Path pidFilePath, String resourcesOptions,\n      String tcCommandFile, List\u003cString\u003e numaArgs) {\n\n    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n    addSchedPriorityCommand(prefixCommands);\n    addNumaArgsToCommand(prefixCommands, numaArgs);\n\n    Container container \u003d ctx.getContainer();\n\n    ContainerRuntimeContext.Builder builder \u003d new ContainerRuntimeContext\n            .Builder(container);\n    if (prefixCommands.size() \u003e 0) {\n      builder.setExecutionAttribute(CONTAINER_LAUNCH_PREFIX_COMMANDS,\n              prefixCommands);\n    }\n\n    builder.setExecutionAttribute(LOCALIZED_RESOURCES,\n        ctx.getLocalizedResources())\n      .setExecutionAttribute(RUN_AS_USER, getRunAsUser(ctx.getUser()))\n      .setExecutionAttribute(USER, ctx.getUser())\n      .setExecutionAttribute(APPID, ctx.getAppId())\n      .setExecutionAttribute(CONTAINER_ID_STR,\n        container.getContainerId().toString())\n      .setExecutionAttribute(CONTAINER_WORK_DIR, ctx.getContainerWorkDir())\n      .setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH,\n        ctx.getNmPrivateContainerScriptPath())\n      .setExecutionAttribute(NM_PRIVATE_TOKENS_PATH,\n        ctx.getNmPrivateTokensPath())\n      .setExecutionAttribute(PID_FILE_PATH, pidFilePath)\n      .setExecutionAttribute(LOCAL_DIRS, ctx.getLocalDirs())\n      .setExecutionAttribute(LOG_DIRS, ctx.getLogDirs())\n      .setExecutionAttribute(FILECACHE_DIRS, ctx.getFilecacheDirs())\n      .setExecutionAttribute(USER_LOCAL_DIRS, ctx.getUserLocalDirs())\n      .setExecutionAttribute(CONTAINER_LOCAL_DIRS, ctx.getContainerLocalDirs())\n      .setExecutionAttribute(USER_FILECACHE_DIRS, ctx.getUserFilecacheDirs())\n      .setExecutionAttribute(APPLICATION_LOCAL_DIRS,\n          ctx.getApplicationLocalDirs())\n      .setExecutionAttribute(CONTAINER_LOG_DIRS, ctx.getContainerLogDirs())\n      .setExecutionAttribute(RESOURCES_OPTIONS, resourcesOptions);\n\n    if (tcCommandFile !\u003d null) {\n      builder.setExecutionAttribute(TC_COMMAND_FILE, tcCommandFile);\n    }\n\n    return builder.build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "456705a07c8b80658950acc99f23086244c6b20f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7815. Make the YARN mounts added to Docker containers more restrictive. Contributed by Shane Kumpf\n",
      "commitDate": "07/02/18 11:09 AM",
      "commitName": "456705a07c8b80658950acc99f23086244c6b20f",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "01/02/18 10:14 AM",
      "commitNameOld": "682ea21f2bbc587e1b727b3c895c2f513a908432",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 6.04,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,46 @@\n   private ContainerRuntimeContext buildContainerRuntimeContext(\n       ContainerStartContext ctx, Path pidFilePath,\n       String resourcesOptions, String tcCommandFile) {\n \n     List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n     addSchedPriorityCommand(prefixCommands);\n \n     Container container \u003d ctx.getContainer();\n \n     ContainerRuntimeContext.Builder builder \u003d new ContainerRuntimeContext\n             .Builder(container);\n     if (prefixCommands.size() \u003e 0) {\n       builder.setExecutionAttribute(CONTAINER_LAUNCH_PREFIX_COMMANDS,\n               prefixCommands);\n     }\n \n     builder.setExecutionAttribute(LOCALIZED_RESOURCES,\n         ctx.getLocalizedResources())\n       .setExecutionAttribute(RUN_AS_USER, getRunAsUser(ctx.getUser()))\n       .setExecutionAttribute(USER, ctx.getUser())\n       .setExecutionAttribute(APPID, ctx.getAppId())\n       .setExecutionAttribute(CONTAINER_ID_STR,\n         container.getContainerId().toString())\n       .setExecutionAttribute(CONTAINER_WORK_DIR, ctx.getContainerWorkDir())\n       .setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH,\n         ctx.getNmPrivateContainerScriptPath())\n       .setExecutionAttribute(NM_PRIVATE_TOKENS_PATH,\n         ctx.getNmPrivateTokensPath())\n       .setExecutionAttribute(PID_FILE_PATH, pidFilePath)\n       .setExecutionAttribute(LOCAL_DIRS, ctx.getLocalDirs())\n       .setExecutionAttribute(LOG_DIRS, ctx.getLogDirs())\n       .setExecutionAttribute(FILECACHE_DIRS, ctx.getFilecacheDirs())\n       .setExecutionAttribute(USER_LOCAL_DIRS, ctx.getUserLocalDirs())\n       .setExecutionAttribute(CONTAINER_LOCAL_DIRS, ctx.getContainerLocalDirs())\n+      .setExecutionAttribute(USER_FILECACHE_DIRS, ctx.getUserFilecacheDirs())\n+      .setExecutionAttribute(APPLICATION_LOCAL_DIRS,\n+          ctx.getApplicationLocalDirs())\n       .setExecutionAttribute(CONTAINER_LOG_DIRS, ctx.getContainerLogDirs())\n       .setExecutionAttribute(RESOURCES_OPTIONS, resourcesOptions);\n \n     if (tcCommandFile !\u003d null) {\n       builder.setExecutionAttribute(TC_COMMAND_FILE, tcCommandFile);\n     }\n \n     return builder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerRuntimeContext buildContainerRuntimeContext(\n      ContainerStartContext ctx, Path pidFilePath,\n      String resourcesOptions, String tcCommandFile) {\n\n    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n    addSchedPriorityCommand(prefixCommands);\n\n    Container container \u003d ctx.getContainer();\n\n    ContainerRuntimeContext.Builder builder \u003d new ContainerRuntimeContext\n            .Builder(container);\n    if (prefixCommands.size() \u003e 0) {\n      builder.setExecutionAttribute(CONTAINER_LAUNCH_PREFIX_COMMANDS,\n              prefixCommands);\n    }\n\n    builder.setExecutionAttribute(LOCALIZED_RESOURCES,\n        ctx.getLocalizedResources())\n      .setExecutionAttribute(RUN_AS_USER, getRunAsUser(ctx.getUser()))\n      .setExecutionAttribute(USER, ctx.getUser())\n      .setExecutionAttribute(APPID, ctx.getAppId())\n      .setExecutionAttribute(CONTAINER_ID_STR,\n        container.getContainerId().toString())\n      .setExecutionAttribute(CONTAINER_WORK_DIR, ctx.getContainerWorkDir())\n      .setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH,\n        ctx.getNmPrivateContainerScriptPath())\n      .setExecutionAttribute(NM_PRIVATE_TOKENS_PATH,\n        ctx.getNmPrivateTokensPath())\n      .setExecutionAttribute(PID_FILE_PATH, pidFilePath)\n      .setExecutionAttribute(LOCAL_DIRS, ctx.getLocalDirs())\n      .setExecutionAttribute(LOG_DIRS, ctx.getLogDirs())\n      .setExecutionAttribute(FILECACHE_DIRS, ctx.getFilecacheDirs())\n      .setExecutionAttribute(USER_LOCAL_DIRS, ctx.getUserLocalDirs())\n      .setExecutionAttribute(CONTAINER_LOCAL_DIRS, ctx.getContainerLocalDirs())\n      .setExecutionAttribute(USER_FILECACHE_DIRS, ctx.getUserFilecacheDirs())\n      .setExecutionAttribute(APPLICATION_LOCAL_DIRS,\n          ctx.getApplicationLocalDirs())\n      .setExecutionAttribute(CONTAINER_LOG_DIRS, ctx.getContainerLogDirs())\n      .setExecutionAttribute(RESOURCES_OPTIONS, resourcesOptions);\n\n    if (tcCommandFile !\u003d null) {\n      builder.setExecutionAttribute(TC_COMMAND_FILE, tcCommandFile);\n    }\n\n    return builder.build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "74a61438ca01e2191b54000af73b654a2d0b8253": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6475. Fix some long function checkstyle issues\n(Contributed by Soumabrata Chakraborty via Daniel Templeton)\n",
      "commitDate": "10/05/17 10:46 AM",
      "commitName": "74a61438ca01e2191b54000af73b654a2d0b8253",
      "commitAuthor": "Daniel Templeton",
      "diff": "@@ -0,0 +1,43 @@\n+  private ContainerRuntimeContext buildContainerRuntimeContext(\n+      ContainerStartContext ctx, Path pidFilePath,\n+      String resourcesOptions, String tcCommandFile) {\n+\n+    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n+    addSchedPriorityCommand(prefixCommands);\n+\n+    Container container \u003d ctx.getContainer();\n+\n+    ContainerRuntimeContext.Builder builder \u003d new ContainerRuntimeContext\n+            .Builder(container);\n+    if (prefixCommands.size() \u003e 0) {\n+      builder.setExecutionAttribute(CONTAINER_LAUNCH_PREFIX_COMMANDS,\n+              prefixCommands);\n+    }\n+\n+    builder.setExecutionAttribute(LOCALIZED_RESOURCES,\n+        ctx.getLocalizedResources())\n+      .setExecutionAttribute(RUN_AS_USER, getRunAsUser(ctx.getUser()))\n+      .setExecutionAttribute(USER, ctx.getUser())\n+      .setExecutionAttribute(APPID, ctx.getAppId())\n+      .setExecutionAttribute(CONTAINER_ID_STR,\n+        container.getContainerId().toString())\n+      .setExecutionAttribute(CONTAINER_WORK_DIR, ctx.getContainerWorkDir())\n+      .setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH,\n+        ctx.getNmPrivateContainerScriptPath())\n+      .setExecutionAttribute(NM_PRIVATE_TOKENS_PATH,\n+        ctx.getNmPrivateTokensPath())\n+      .setExecutionAttribute(PID_FILE_PATH, pidFilePath)\n+      .setExecutionAttribute(LOCAL_DIRS, ctx.getLocalDirs())\n+      .setExecutionAttribute(LOG_DIRS, ctx.getLogDirs())\n+      .setExecutionAttribute(FILECACHE_DIRS, ctx.getFilecacheDirs())\n+      .setExecutionAttribute(USER_LOCAL_DIRS, ctx.getUserLocalDirs())\n+      .setExecutionAttribute(CONTAINER_LOCAL_DIRS, ctx.getContainerLocalDirs())\n+      .setExecutionAttribute(CONTAINER_LOG_DIRS, ctx.getContainerLogDirs())\n+      .setExecutionAttribute(RESOURCES_OPTIONS, resourcesOptions);\n+\n+    if (tcCommandFile !\u003d null) {\n+      builder.setExecutionAttribute(TC_COMMAND_FILE, tcCommandFile);\n+    }\n+\n+    return builder.build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerRuntimeContext buildContainerRuntimeContext(\n      ContainerStartContext ctx, Path pidFilePath,\n      String resourcesOptions, String tcCommandFile) {\n\n    List\u003cString\u003e prefixCommands \u003d new ArrayList\u003c\u003e();\n    addSchedPriorityCommand(prefixCommands);\n\n    Container container \u003d ctx.getContainer();\n\n    ContainerRuntimeContext.Builder builder \u003d new ContainerRuntimeContext\n            .Builder(container);\n    if (prefixCommands.size() \u003e 0) {\n      builder.setExecutionAttribute(CONTAINER_LAUNCH_PREFIX_COMMANDS,\n              prefixCommands);\n    }\n\n    builder.setExecutionAttribute(LOCALIZED_RESOURCES,\n        ctx.getLocalizedResources())\n      .setExecutionAttribute(RUN_AS_USER, getRunAsUser(ctx.getUser()))\n      .setExecutionAttribute(USER, ctx.getUser())\n      .setExecutionAttribute(APPID, ctx.getAppId())\n      .setExecutionAttribute(CONTAINER_ID_STR,\n        container.getContainerId().toString())\n      .setExecutionAttribute(CONTAINER_WORK_DIR, ctx.getContainerWorkDir())\n      .setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH,\n        ctx.getNmPrivateContainerScriptPath())\n      .setExecutionAttribute(NM_PRIVATE_TOKENS_PATH,\n        ctx.getNmPrivateTokensPath())\n      .setExecutionAttribute(PID_FILE_PATH, pidFilePath)\n      .setExecutionAttribute(LOCAL_DIRS, ctx.getLocalDirs())\n      .setExecutionAttribute(LOG_DIRS, ctx.getLogDirs())\n      .setExecutionAttribute(FILECACHE_DIRS, ctx.getFilecacheDirs())\n      .setExecutionAttribute(USER_LOCAL_DIRS, ctx.getUserLocalDirs())\n      .setExecutionAttribute(CONTAINER_LOCAL_DIRS, ctx.getContainerLocalDirs())\n      .setExecutionAttribute(CONTAINER_LOG_DIRS, ctx.getContainerLogDirs())\n      .setExecutionAttribute(RESOURCES_OPTIONS, resourcesOptions);\n\n    if (tcCommandFile !\u003d null) {\n      builder.setExecutionAttribute(TC_COMMAND_FILE, tcCommandFile);\n    }\n\n    return builder.build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
    }
  }
}